import { writeAll } from "https://deno.land/std@0.216.0/io/write_all.ts";
import * as jsonrpc from 'jsonrpc-lite';
import { AppObjectRegistry } from '../AppObjectRegistry.ts';
import { encoder } from './codec.ts';
export function isRequest(message) {
  return message.type === 'request' || message.type === 'notification';
}
export function isResponse(message) {
  return message.type === 'success' || message.type === 'error';
}
export function isErrorResponse(message) {
  return message instanceof jsonrpc.ErrorObject;
}
const COMMAND_PONG = '_zPONG';
export const RPCResponseObserver = new EventTarget();
export const Queue = new class Queue {
  queue = [];
  isProcessing = false;
  async processQueue() {
    if (this.isProcessing) {
      return;
    }
    this.isProcessing = true;
    while(this.queue.length){
      const message = this.queue.shift();
      if (message) {
        await Transport.send(message);
      }
    }
    this.isProcessing = false;
  }
  enqueue(message) {
    this.queue.push(encoder.encode(message));
    this.processQueue();
  }
};
export const Transport = new class Transporter {
  selectedTransport;
  constructor(){
    this.selectedTransport = this.stdoutTransport.bind(this);
  }
  async stdoutTransport(message) {
    await writeAll(Deno.stdout, message);
  }
  async noopTransport(_message) {}
  selectTransport(transport) {
    switch(transport){
      case 'stdout':
        this.selectedTransport = this.stdoutTransport.bind(this);
        break;
      case 'noop':
        this.selectedTransport = this.noopTransport.bind(this);
        break;
    }
  }
  send(message) {
    return this.selectedTransport(message);
  }
}();
export function parseMessage(message) {
  let parsed;
  if (typeof message === 'string') {
    parsed = jsonrpc.parse(message);
  } else {
    parsed = jsonrpc.parseObject(message);
  }
  if (Array.isArray(parsed)) {
    throw jsonrpc.error(null, jsonrpc.JsonRpcError.invalidRequest(null));
  }
  if (parsed.type === 'invalid') {
    throw jsonrpc.error(null, parsed.payload);
  }
  return parsed;
}
export async function sendInvalidRequestError() {
  const rpc = jsonrpc.error(null, jsonrpc.JsonRpcError.invalidRequest(null));
  await Queue.enqueue(rpc);
}
export async function sendInvalidParamsError(id) {
  const rpc = jsonrpc.error(id, jsonrpc.JsonRpcError.invalidParams(null));
  await Queue.enqueue(rpc);
}
export async function sendParseError() {
  const rpc = jsonrpc.error(null, jsonrpc.JsonRpcError.parseError(null));
  await Queue.enqueue(rpc);
}
export async function sendMethodNotFound(id) {
  const rpc = jsonrpc.error(id, jsonrpc.JsonRpcError.methodNotFound(null));
  await Queue.enqueue(rpc);
}
export async function errorResponse({ error: { message, code = -32000, data = {} }, id }) {
  const logger = AppObjectRegistry.get('logger');
  if (logger?.hasEntries()) {
    data.logs = logger.getLogs();
  }
  const rpc = jsonrpc.error(id, new jsonrpc.JsonRpcError(message, code, data));
  await Queue.enqueue(rpc);
}
export async function successResponse({ id, result }) {
  const payload = {
    value: result
  };
  const logger = AppObjectRegistry.get('logger');
  if (logger?.hasEntries()) {
    payload.logs = logger.getLogs();
  }
  const rpc = jsonrpc.success(id, payload);
  await Queue.enqueue(rpc);
}
export function pongResponse() {
  return Promise.resolve(Queue.enqueue(COMMAND_PONG));
}
export async function sendRequest(requestDescriptor) {
  const request = jsonrpc.request(Math.random().toString(36).slice(2), requestDescriptor.method, requestDescriptor.params);
  // TODO: add timeout to this
  const responsePromise = new Promise((resolve, reject)=>{
    const handler = (event)=>{
      if (event instanceof ErrorEvent) {
        reject(event.error);
      }
      if (event instanceof CustomEvent) {
        resolve(event.detail);
      }
      RPCResponseObserver.removeEventListener(`response:${request.id}`, handler);
    };
    RPCResponseObserver.addEventListener(`response:${request.id}`, handler);
  });
  await Queue.enqueue(request);
  return responsePromise;
}
export function sendNotification({ method, params }) {
  const request = jsonrpc.notification(method, params);
  Queue.enqueue(request);
}
export function log(params) {
  sendNotification({
    method: 'log',
    params
  });
}
//# sourceMappingURL=data:application/json;base64,