import { MessageBuilder } from '../builders/MessageBuilder.ts';
import { RoomBuilder } from '../builders/RoomBuilder.ts';
import { AppObjectRegistry } from '../../../AppObjectRegistry.ts';
import { require } from '../../../lib/require.ts';
const { UIHelper } = require('@rocket.chat/apps-engine/server/misc/UIHelper.js');
const { RoomType } = require('@rocket.chat/apps-engine/definition/rooms/RoomType.js');
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class ModifyUpdater {
  senderFn;
  constructor(senderFn){
    this.senderFn = senderFn;
  }
  getLivechatUpdater() {
    return new Proxy({
      __kind: 'getLivechatUpdater'
    }, {
      get: (_target, prop)=>(...params)=>prop === 'toJSON' ? {} : this.senderFn({
            method: `accessor:getModifier:getUpdater:getLivechatUpdater:${prop}`,
            params
          }).then((response)=>response.result).catch((err)=>{
            throw new Error(err.error);
          })
    });
  }
  getUserUpdater() {
    return new Proxy({
      __kind: 'getUserUpdater'
    }, {
      get: (_target, prop)=>(...params)=>prop === 'toJSON' ? {} : this.senderFn({
            method: `accessor:getModifier:getUpdater:getUserUpdater:${prop}`,
            params
          }).then((response)=>response.result).catch((err)=>{
            throw new Error(err.error);
          })
    });
  }
  async message(messageId, _updater) {
    const response = await this.senderFn({
      method: 'bridges:getMessageBridge:doGetById',
      params: [
        messageId,
        AppObjectRegistry.get('id')
      ]
    });
    return new MessageBuilder(response.result);
  }
  async room(roomId, _updater) {
    const response = await this.senderFn({
      method: 'bridges:getRoomBridge:doGetById',
      params: [
        roomId,
        AppObjectRegistry.get('id')
      ]
    });
    return new RoomBuilder(response.result);
  }
  finish(builder) {
    switch(builder.kind){
      case RocketChatAssociationModel.MESSAGE:
        return this._finishMessage(builder);
      case RocketChatAssociationModel.ROOM:
        return this._finishRoom(builder);
      default:
        throw new Error('Invalid builder passed to the ModifyUpdater.finish function.');
    }
  }
  async _finishMessage(builder) {
    const result = builder.getMessage();
    if (!result.id) {
      throw new Error("Invalid message, can't update a message without an id.");
    }
    if (!result.sender?.id) {
      throw new Error('Invalid sender assigned to the message.');
    }
    if (result.blocks?.length) {
      result.blocks = UIHelper.assignIds(result.blocks, AppObjectRegistry.get('id') || '');
    }
    await this.senderFn({
      method: 'bridges:getMessageBridge:doUpdate',
      params: [
        result,
        AppObjectRegistry.get('id')
      ]
    });
  }
  async _finishRoom(builder) {
    const result = builder.getRoom();
    if (!result.id) {
      throw new Error("Invalid room, can't update a room without an id.");
    }
    if (!result.type) {
      throw new Error('Invalid type assigned to the room.');
    }
    if (result.type !== RoomType.LIVE_CHAT) {
      if (!result.creator || !result.creator.id) {
        throw new Error('Invalid creator assigned to the room.');
      }
      if (!result.slugifiedName || !result.slugifiedName.trim()) {
        throw new Error('Invalid slugifiedName assigned to the room.');
      }
    }
    if (!result.displayName || !result.displayName.trim()) {
      throw new Error('Invalid displayName assigned to the room.');
    }
    await this.senderFn({
      method: 'bridges:getRoomBridge:doUpdate',
      params: [
        result,
        builder.getMembersToBeAddedUsernames(),
        AppObjectRegistry.get('id')
      ]
    });
  }
}
//# sourceMappingURL=data:application/json;base64,