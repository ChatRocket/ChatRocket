import { JsonRpcError } from 'jsonrpc-lite';
import { require } from '../../lib/require.ts';
import { AppObjectRegistry } from '../../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../../lib/accessors/mod.ts';
export const uikitInteractions = [
  'executeBlockActionHandler',
  'executeViewSubmitHandler',
  'executeViewClosedHandler',
  'executeActionButtonHandler',
  'executeLivechatBlockActionHandler'
];
export const { UIKitBlockInteractionContext, UIKitViewSubmitInteractionContext, UIKitViewCloseInteractionContext, UIKitActionButtonInteractionContext } = require('@rocket.chat/apps-engine/definition/uikit/UIKitInteractionContext.js');
export const { UIKitLivechatBlockInteractionContext } = require('@rocket.chat/apps-engine/definition/uikit/livechat/UIKitLivechatInteractionContext.js');
export default async function handleUIKitInteraction(method, params) {
  if (!uikitInteractions.includes(method)) {
    return JsonRpcError.methodNotFound(null);
  }
  if (!Array.isArray(params)) {
    return JsonRpcError.invalidParams(null);
  }
  const app = AppObjectRegistry.get('app');
  const interactionHandler = app?.[method];
  if (!app || typeof interactionHandler !== 'function') {
    return JsonRpcError.methodNotFound({
      message: `App does not implement method "${method}"`
    });
  }
  const [payload] = params;
  if (!payload) {
    return JsonRpcError.invalidParams(null);
  }
  let context;
  switch(method){
    case 'executeBlockActionHandler':
      context = new UIKitBlockInteractionContext(payload);
      break;
    case 'executeViewSubmitHandler':
      context = new UIKitViewSubmitInteractionContext(payload);
      break;
    case 'executeViewClosedHandler':
      context = new UIKitViewCloseInteractionContext(payload);
      break;
    case 'executeActionButtonHandler':
      context = new UIKitActionButtonInteractionContext(payload);
      break;
    case 'executeLivechatBlockActionHandler':
      context = new UIKitLivechatBlockInteractionContext(payload);
      break;
  }
  try {
    return await interactionHandler.call(app, context, AppAccessorsInstance.getReader(), AppAccessorsInstance.getHttp(), AppAccessorsInstance.getPersistence(), AppAccessorsInstance.getModifier());
  } catch (e) {
    return JsonRpcError.internalError({
      message: e.message
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9oYW5kbGVycy91aWtpdC9oYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlZmluZWQsIEpzb25ScGNFcnJvciB9IGZyb20gJ2pzb25ycGMtbGl0ZSc7XG5pbXBvcnQgdHlwZSB7IEFwcCB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL0FwcC50cyc7XG5cbmltcG9ydCB7IHJlcXVpcmUgfSBmcm9tICcuLi8uLi9saWIvcmVxdWlyZS50cyc7XG5pbXBvcnQgeyBBcHBPYmplY3RSZWdpc3RyeSB9IGZyb20gJy4uLy4uL0FwcE9iamVjdFJlZ2lzdHJ5LnRzJztcbmltcG9ydCB7IEFwcEFjY2Vzc29yc0luc3RhbmNlIH0gZnJvbSAnLi4vLi4vbGliL2FjY2Vzc29ycy9tb2QudHMnO1xuXG5leHBvcnQgY29uc3QgdWlraXRJbnRlcmFjdGlvbnMgPSBbXG4gICAgJ2V4ZWN1dGVCbG9ja0FjdGlvbkhhbmRsZXInLFxuICAgICdleGVjdXRlVmlld1N1Ym1pdEhhbmRsZXInLFxuICAgICdleGVjdXRlVmlld0Nsb3NlZEhhbmRsZXInLFxuICAgICdleGVjdXRlQWN0aW9uQnV0dG9uSGFuZGxlcicsXG4gICAgJ2V4ZWN1dGVMaXZlY2hhdEJsb2NrQWN0aW9uSGFuZGxlcicsXG5dO1xuXG5leHBvcnQgY29uc3Qge1xuICAgIFVJS2l0QmxvY2tJbnRlcmFjdGlvbkNvbnRleHQsXG4gICAgVUlLaXRWaWV3U3VibWl0SW50ZXJhY3Rpb25Db250ZXh0LFxuICAgIFVJS2l0Vmlld0Nsb3NlSW50ZXJhY3Rpb25Db250ZXh0LFxuICAgIFVJS2l0QWN0aW9uQnV0dG9uSW50ZXJhY3Rpb25Db250ZXh0LFxufSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3Vpa2l0L1VJS2l0SW50ZXJhY3Rpb25Db250ZXh0LmpzJyk7XG5cbmV4cG9ydCBjb25zdCB7IFVJS2l0TGl2ZWNoYXRCbG9ja0ludGVyYWN0aW9uQ29udGV4dCB9ID0gcmVxdWlyZSgnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vdWlraXQvbGl2ZWNoYXQvVUlLaXRMaXZlY2hhdEludGVyYWN0aW9uQ29udGV4dC5qcycpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVVSUtpdEludGVyYWN0aW9uKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHVua25vd24pOiBQcm9taXNlPERlZmluZWQgfCBKc29uUnBjRXJyb3I+IHtcbiAgICBpZiAoIXVpa2l0SW50ZXJhY3Rpb25zLmluY2x1ZGVzKG1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5tZXRob2ROb3RGb3VuZChudWxsKTtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xuICAgICAgICByZXR1cm4gSnNvblJwY0Vycm9yLmludmFsaWRQYXJhbXMobnVsbCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXBwID0gQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PEFwcD4oJ2FwcCcpO1xuXG4gICAgY29uc3QgaW50ZXJhY3Rpb25IYW5kbGVyID0gYXBwPy5bbWV0aG9kIGFzIGtleW9mIEFwcF0gYXMgdW5rbm93bjtcblxuICAgIGlmICghYXBwIHx8IHR5cGVvZiBpbnRlcmFjdGlvbkhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5tZXRob2ROb3RGb3VuZCh7XG4gICAgICAgICAgICBtZXNzYWdlOiBgQXBwIGRvZXMgbm90IGltcGxlbWVudCBtZXRob2QgXCIke21ldGhvZH1cImAsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IFtwYXlsb2FkXSA9IHBhcmFtcyBhcyBbUmVjb3JkPHN0cmluZywgdW5rbm93bj5dO1xuXG4gICAgaWYgKCFwYXlsb2FkKSB7XG4gICAgICAgIHJldHVybiBKc29uUnBjRXJyb3IuaW52YWxpZFBhcmFtcyhudWxsKTtcbiAgICB9XG5cbiAgICBsZXQgY29udGV4dDtcblxuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICAgIGNhc2UgJ2V4ZWN1dGVCbG9ja0FjdGlvbkhhbmRsZXInOlxuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBVSUtpdEJsb2NrSW50ZXJhY3Rpb25Db250ZXh0KHBheWxvYWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2V4ZWN1dGVWaWV3U3VibWl0SGFuZGxlcic6XG4gICAgICAgICAgICBjb250ZXh0ID0gbmV3IFVJS2l0Vmlld1N1Ym1pdEludGVyYWN0aW9uQ29udGV4dChwYXlsb2FkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdleGVjdXRlVmlld0Nsb3NlZEhhbmRsZXInOlxuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBVSUtpdFZpZXdDbG9zZUludGVyYWN0aW9uQ29udGV4dChwYXlsb2FkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdleGVjdXRlQWN0aW9uQnV0dG9uSGFuZGxlcic6XG4gICAgICAgICAgICBjb250ZXh0ID0gbmV3IFVJS2l0QWN0aW9uQnV0dG9uSW50ZXJhY3Rpb25Db250ZXh0KHBheWxvYWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2V4ZWN1dGVMaXZlY2hhdEJsb2NrQWN0aW9uSGFuZGxlcic6XG4gICAgICAgICAgICBjb250ZXh0ID0gbmV3IFVJS2l0TGl2ZWNoYXRCbG9ja0ludGVyYWN0aW9uQ29udGV4dChwYXlsb2FkKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBpbnRlcmFjdGlvbkhhbmRsZXIuY2FsbChcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRSZWFkZXIoKSxcbiAgICAgICAgICAgIEFwcEFjY2Vzc29yc0luc3RhbmNlLmdldEh0dHAoKSxcbiAgICAgICAgICAgIEFwcEFjY2Vzc29yc0luc3RhbmNlLmdldFBlcnNpc3RlbmNlKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRNb2RpZmllcigpLFxuICAgICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ScGNFcnJvci5pbnRlcm5hbEVycm9yKHsgbWVzc2FnZTogZS5tZXNzYWdlIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFrQixZQUFZLFFBQVEsZUFBZTtBQUdyRCxTQUFTLE9BQU8sUUFBUSx1QkFBdUI7QUFDL0MsU0FBUyxpQkFBaUIsUUFBUSw2QkFBNkI7QUFDL0QsU0FBUyxvQkFBb0IsUUFBUSw2QkFBNkI7QUFFbEUsT0FBTyxNQUFNLG9CQUFvQjtFQUM3QjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0NBQ0gsQ0FBQztBQUVGLE9BQU8sTUFBTSxFQUNULDRCQUE0QixFQUM1QixpQ0FBaUMsRUFDakMsZ0NBQWdDLEVBQ2hDLG1DQUFtQyxFQUN0QyxHQUFHLFFBQVEsd0VBQXdFO0FBRXBGLE9BQU8sTUFBTSxFQUFFLG9DQUFvQyxFQUFFLEdBQUcsUUFBUSx5RkFBeUY7QUFFekosZUFBZSxlQUFlLHVCQUF1QixNQUFjLEVBQUUsTUFBZTtFQUNoRixJQUFJLENBQUMsa0JBQWtCLFFBQVEsQ0FBQyxTQUFTO0lBQ3JDLE9BQU8sYUFBYSxjQUFjLENBQUM7RUFDdkM7RUFFQSxJQUFJLENBQUMsTUFBTSxPQUFPLENBQUMsU0FBUztJQUN4QixPQUFPLGFBQWEsYUFBYSxDQUFDO0VBQ3RDO0VBRUEsTUFBTSxNQUFNLGtCQUFrQixHQUFHLENBQU07RUFFdkMsTUFBTSxxQkFBcUIsS0FBSyxDQUFDLE9BQW9CO0VBRXJELElBQUksQ0FBQyxPQUFPLE9BQU8sdUJBQXVCLFlBQVk7SUFDbEQsT0FBTyxhQUFhLGNBQWMsQ0FBQztNQUMvQixTQUFTLENBQUMsK0JBQStCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEQ7RUFDSjtFQUVBLE1BQU0sQ0FBQyxRQUFRLEdBQUc7RUFFbEIsSUFBSSxDQUFDLFNBQVM7SUFDVixPQUFPLGFBQWEsYUFBYSxDQUFDO0VBQ3RDO0VBRUEsSUFBSTtFQUVKLE9BQVE7SUFDSixLQUFLO01BQ0QsVUFBVSxJQUFJLDZCQUE2QjtNQUMzQztJQUNKLEtBQUs7TUFDRCxVQUFVLElBQUksa0NBQWtDO01BQ2hEO0lBQ0osS0FBSztNQUNELFVBQVUsSUFBSSxpQ0FBaUM7TUFDL0M7SUFDSixLQUFLO01BQ0QsVUFBVSxJQUFJLG9DQUFvQztNQUNsRDtJQUNKLEtBQUs7TUFDRCxVQUFVLElBQUkscUNBQXFDO01BQ25EO0VBQ1I7RUFFQSxJQUFJO0lBQ0EsT0FBTyxNQUFNLG1CQUFtQixJQUFJLENBQ2hDLEtBQ0EsU0FDQSxxQkFBcUIsU0FBUyxJQUM5QixxQkFBcUIsT0FBTyxJQUM1QixxQkFBcUIsY0FBYyxJQUNuQyxxQkFBcUIsV0FBVztFQUV4QyxFQUFFLE9BQU8sR0FBRztJQUNSLE9BQU8sYUFBYSxhQUFhLENBQUM7TUFBRSxTQUFTLEVBQUUsT0FBTztJQUFDO0VBQzNEO0FBQ0oifQ==