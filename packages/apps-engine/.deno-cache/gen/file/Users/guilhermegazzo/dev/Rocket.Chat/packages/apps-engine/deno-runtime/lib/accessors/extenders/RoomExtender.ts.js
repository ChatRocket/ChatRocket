import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class RoomExtender {
  room;
  kind;
  members;
  constructor(room){
    this.room = room;
    this.kind = RocketChatAssociationModel.ROOM;
    this.members = [];
  }
  addCustomField(key, value) {
    if (!this.room.customFields) {
      this.room.customFields = {};
    }
    if (this.room.customFields[key]) {
      throw new Error(`The room already contains a custom field by the key: ${key}`);
    }
    if (key.includes('.')) {
      throw new Error(`The given key contains a period, which is not allowed. Key: ${key}`);
    }
    this.room.customFields[key] = value;
    return this;
  }
  addMember(user) {
    if (this.members.find((u)=>u.username === user.username)) {
      throw new Error('The user is already in the room.');
    }
    this.members.push(user);
    return this;
  }
  getMembersBeingAdded() {
    return this.members;
  }
  getUsernamesOfMembersBeingAdded() {
    return this.members.map((u)=>u.username);
  }
  getRoom() {
    return structuredClone(this.room);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvYWNjZXNzb3JzL2V4dGVuZGVycy9Sb29tRXh0ZW5kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJUm9vbUV4dGVuZGVyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vYWNjZXNzb3JzL0lSb29tRXh0ZW5kZXIudHMnO1xuaW1wb3J0IHR5cGUgeyBSb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbCBhcyBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLnRzJztcbmltcG9ydCB0eXBlIHsgSVJvb20gfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9yb29tcy9JUm9vbS50cyc7XG5pbXBvcnQgdHlwZSB7IElVc2VyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vdXNlcnMvSVVzZXIudHMnO1xuXG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSAnLi4vLi4vLi4vbGliL3JlcXVpcmUudHMnO1xuXG5jb25zdCB7IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gPSByZXF1aXJlKCdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLmpzJykgYXMge1xuICAgIFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsOiB0eXBlb2YgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsO1xufTtcblxuZXhwb3J0IGNsYXNzIFJvb21FeHRlbmRlciBpbXBsZW1lbnRzIElSb29tRXh0ZW5kZXIge1xuICAgIHB1YmxpYyBraW5kOiBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwuUk9PTTtcblxuICAgIHByaXZhdGUgbWVtYmVyczogQXJyYXk8SVVzZXI+O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb29tOiBJUm9vbSkge1xuICAgICAgICB0aGlzLmtpbmQgPSBSb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbC5ST09NO1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ3VzdG9tRmllbGQoa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogSVJvb21FeHRlbmRlciB7XG4gICAgICAgIGlmICghdGhpcy5yb29tLmN1c3RvbUZpZWxkcykge1xuICAgICAgICAgICAgdGhpcy5yb29tLmN1c3RvbUZpZWxkcyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucm9vbS5jdXN0b21GaWVsZHNba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcm9vbSBhbHJlYWR5IGNvbnRhaW5zIGEgY3VzdG9tIGZpZWxkIGJ5IHRoZSBrZXk6ICR7a2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBnaXZlbiBrZXkgY29udGFpbnMgYSBwZXJpb2QsIHdoaWNoIGlzIG5vdCBhbGxvd2VkLiBLZXk6ICR7a2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yb29tLmN1c3RvbUZpZWxkc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZE1lbWJlcih1c2VyOiBJVXNlcik6IElSb29tRXh0ZW5kZXIge1xuICAgICAgICBpZiAodGhpcy5tZW1iZXJzLmZpbmQoKHUpID0+IHUudXNlcm5hbWUgPT09IHVzZXIudXNlcm5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB1c2VyIGlzIGFscmVhZHkgaW4gdGhlIHJvb20uJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1lbWJlcnMucHVzaCh1c2VyKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TWVtYmVyc0JlaW5nQWRkZWQoKTogQXJyYXk8SVVzZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVycztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlcm5hbWVzT2ZNZW1iZXJzQmVpbmdBZGRlZCgpOiBBcnJheTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVtYmVycy5tYXAoKHUpID0+IHUudXNlcm5hbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSb29tKCk6IElSb29tIHtcbiAgICAgICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZSh0aGlzLnJvb20pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxTQUFTLE9BQU8sUUFBUSwwQkFBMEI7QUFFbEQsTUFBTSxFQUFFLDBCQUEwQixFQUFFLEdBQUcsUUFBUTtBQUkvQyxPQUFPLE1BQU07O0VBQ0YsS0FBdUM7RUFFdEMsUUFBc0I7RUFFOUIsWUFBWSxBQUFRLElBQVcsQ0FBRTtTQUFiLE9BQUE7SUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRywyQkFBMkIsSUFBSTtJQUMzQyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUU7RUFDckI7RUFFTyxlQUFlLEdBQVcsRUFBRSxLQUFjLEVBQWlCO0lBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtNQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDO0lBQzlCO0lBRUEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7TUFDN0IsTUFBTSxJQUFJLE1BQU0sQ0FBQyxxREFBcUQsRUFBRSxJQUFJLENBQUM7SUFDakY7SUFFQSxJQUFJLElBQUksUUFBUSxDQUFDLE1BQU07TUFDbkIsTUFBTSxJQUFJLE1BQU0sQ0FBQyw0REFBNEQsRUFBRSxJQUFJLENBQUM7SUFDeEY7SUFFQSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUc7SUFFOUIsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxVQUFVLElBQVcsRUFBaUI7SUFDekMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQU0sRUFBRSxRQUFRLEtBQUssS0FBSyxRQUFRLEdBQUc7TUFDeEQsTUFBTSxJQUFJLE1BQU07SUFDcEI7SUFFQSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUVsQixPQUFPLElBQUk7RUFDZjtFQUVPLHVCQUFxQztJQUN4QyxPQUFPLElBQUksQ0FBQyxPQUFPO0VBQ3ZCO0VBRU8sa0NBQWlEO0lBQ3BELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFNLEVBQUUsUUFBUTtFQUM3QztFQUVPLFVBQWlCO0lBQ3BCLE9BQU8sZ0JBQWdCLElBQUksQ0FBQyxJQUFJO0VBQ3BDO0FBQ0oifQ==