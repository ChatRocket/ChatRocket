import { v1 as uuid } from 'uuid';
import { AppObjectRegistry } from '../../../AppObjectRegistry.ts';
import { require } from '../../../lib/require.ts';
const { BlockType } = require('@rocket.chat/apps-engine/definition/uikit/blocks/Blocks.js');
const { BlockElementType } = require('@rocket.chat/apps-engine/definition/uikit/blocks/Elements.js');
const { TextObjectType } = require('@rocket.chat/apps-engine/definition/uikit/blocks/Objects.js');
/**
 * @deprecated please prefer the rocket.chat/ui-kit components
 */ export class BlockBuilder {
  blocks;
  appId;
  constructor(){
    this.blocks = [];
    this.appId = String(AppObjectRegistry.get('id'));
  }
  addSectionBlock(block) {
    this.addBlock({
      type: BlockType.SECTION,
      ...block
    });
    return this;
  }
  addImageBlock(block) {
    this.addBlock({
      type: BlockType.IMAGE,
      ...block
    });
    return this;
  }
  addDividerBlock() {
    this.addBlock({
      type: BlockType.DIVIDER
    });
    return this;
  }
  addActionsBlock(block) {
    this.addBlock({
      type: BlockType.ACTIONS,
      ...block
    });
    return this;
  }
  addContextBlock(block) {
    this.addBlock({
      type: BlockType.CONTEXT,
      ...block
    });
    return this;
  }
  addInputBlock(block) {
    this.addBlock({
      type: BlockType.INPUT,
      ...block
    });
    return this;
  }
  addConditionalBlock(innerBlocks, condition) {
    const render = innerBlocks instanceof BlockBuilder ? innerBlocks.getBlocks() : innerBlocks;
    this.addBlock({
      type: BlockType.CONDITIONAL,
      render,
      when: condition
    });
    return this;
  }
  getBlocks() {
    return this.blocks;
  }
  newPlainTextObject(text, emoji = false) {
    return {
      type: TextObjectType.PLAINTEXT,
      text,
      emoji
    };
  }
  newMarkdownTextObject(text) {
    return {
      type: TextObjectType.MARKDOWN,
      text
    };
  }
  newButtonElement(info) {
    return this.newInteractiveElement({
      type: BlockElementType.BUTTON,
      ...info
    });
  }
  newImageElement(info) {
    return {
      type: BlockElementType.IMAGE,
      ...info
    };
  }
  newOverflowMenuElement(info) {
    return this.newInteractiveElement({
      type: BlockElementType.OVERFLOW_MENU,
      ...info
    });
  }
  newPlainTextInputElement(info) {
    return this.newInputElement({
      type: BlockElementType.PLAIN_TEXT_INPUT,
      ...info
    });
  }
  newStaticSelectElement(info) {
    return this.newSelectElement({
      type: BlockElementType.STATIC_SELECT,
      ...info
    });
  }
  newMultiStaticElement(info) {
    return this.newSelectElement({
      type: BlockElementType.MULTI_STATIC_SELECT,
      ...info
    });
  }
  newInteractiveElement(element) {
    if (!element.actionId) {
      element.actionId = this.generateActionId();
    }
    return element;
  }
  newInputElement(element) {
    if (!element.actionId) {
      element.actionId = this.generateActionId();
    }
    return element;
  }
  newSelectElement(element) {
    if (!element.actionId) {
      element.actionId = this.generateActionId();
    }
    return element;
  }
  addBlock(block) {
    if (!block.blockId) {
      block.blockId = this.generateBlockId();
    }
    block.appId = this.appId;
    this.blocks.push(block);
  }
  generateBlockId() {
    return uuid();
  }
  generateActionId() {
    return uuid();
  }
}
//# sourceMappingURL=data:application/json;base64,