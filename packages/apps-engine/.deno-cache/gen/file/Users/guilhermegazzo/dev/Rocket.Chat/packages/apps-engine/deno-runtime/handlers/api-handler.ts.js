import { JsonRpcError } from 'jsonrpc-lite';
import { AppObjectRegistry } from '../AppObjectRegistry.ts';
import { AppAccessorsInstance } from '../lib/accessors/mod.ts';
export default async function apiHandler(call, params) {
  const [, path, httpMethod] = call.split(':');
  const endpoint = AppObjectRegistry.get(`api:${path}`);
  const logger = AppObjectRegistry.get('logger');
  if (!endpoint) {
    return new JsonRpcError(`Endpoint ${path} not found`, -32000);
  }
  const method = endpoint[httpMethod];
  if (typeof method !== 'function') {
    return new JsonRpcError(`${path}'s ${httpMethod} not exists`, -32000);
  }
  const [request, endpointInfo] = params;
  logger?.debug(`${path}'s ${call} is being executed...`, request);
  try {
    // deno-lint-ignore ban-types
    const result = await method.apply(endpoint, [
      request,
      endpointInfo,
      AppAccessorsInstance.getReader(),
      AppAccessorsInstance.getModifier(),
      AppAccessorsInstance.getHttp(),
      AppAccessorsInstance.getPersistence()
    ]);
    logger?.debug(`${path}'s ${call} was successfully executed.`);
    return result;
  } catch (e) {
    logger?.debug(`${path}'s ${call} was unsuccessful.`);
    return new JsonRpcError(e.message || "Internal server error", -32000);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9oYW5kbGVycy9hcGktaGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZpbmVkLCBKc29uUnBjRXJyb3IgfSBmcm9tICdqc29ucnBjLWxpdGUnO1xuaW1wb3J0IHR5cGUgeyBJQXBpRW5kcG9pbnQgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hcGkvSUFwaUVuZHBvaW50LnRzJztcblxuaW1wb3J0IHsgQXBwT2JqZWN0UmVnaXN0cnkgfSBmcm9tICcuLi9BcHBPYmplY3RSZWdpc3RyeS50cyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9saWIvbG9nZ2VyLnRzJztcbmltcG9ydCB7IEFwcEFjY2Vzc29yc0luc3RhbmNlIH0gZnJvbSAnLi4vbGliL2FjY2Vzc29ycy9tb2QudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBhcGlIYW5kbGVyKGNhbGw6IHN0cmluZywgcGFyYW1zOiB1bmtub3duKTogUHJvbWlzZTxKc29uUnBjRXJyb3IgfCBEZWZpbmVkPiB7XG4gICAgY29uc3QgWywgcGF0aCwgaHR0cE1ldGhvZF0gPSBjYWxsLnNwbGl0KCc6Jyk7XG5cbiAgICBjb25zdCBlbmRwb2ludCA9IEFwcE9iamVjdFJlZ2lzdHJ5LmdldDxJQXBpRW5kcG9pbnQ+KGBhcGk6JHtwYXRofWApO1xuICAgIGNvbnN0IGxvZ2dlciA9IEFwcE9iamVjdFJlZ2lzdHJ5LmdldDxMb2dnZXI+KCdsb2dnZXInKTtcblxuICAgIGlmICghZW5kcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKc29uUnBjRXJyb3IoYEVuZHBvaW50ICR7cGF0aH0gbm90IGZvdW5kYCwgLTMyMDAwKTtcbiAgICB9XG5cbiAgICBjb25zdCBtZXRob2QgPSBlbmRwb2ludFtodHRwTWV0aG9kIGFzIGtleW9mIElBcGlFbmRwb2ludF07XG5cbiAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEpzb25ScGNFcnJvcihgJHtwYXRofSdzICR7aHR0cE1ldGhvZH0gbm90IGV4aXN0c2AsIC0zMjAwMCk7XG4gICAgfVxuXG4gICAgY29uc3QgW3JlcXVlc3QsIGVuZHBvaW50SW5mb10gPSBwYXJhbXMgYXMgQXJyYXk8dW5rbm93bj47XG5cbiAgICBsb2dnZXI/LmRlYnVnKGAke3BhdGh9J3MgJHtjYWxsfSBpcyBiZWluZyBleGVjdXRlZC4uLmAsIHJlcXVlc3QpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZGVuby1saW50LWlnbm9yZSBiYW4tdHlwZXNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKG1ldGhvZCBhcyBGdW5jdGlvbikuYXBwbHkoZW5kcG9pbnQsIFtcbiAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICBlbmRwb2ludEluZm8sXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRSZWFkZXIoKSxcbiAgICAgICAgICAgIEFwcEFjY2Vzc29yc0luc3RhbmNlLmdldE1vZGlmaWVyKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRIdHRwKCksXG4gICAgICAgICAgICBBcHBBY2Nlc3NvcnNJbnN0YW5jZS5nZXRQZXJzaXN0ZW5jZSgpLFxuICAgICAgICBdKTtcblxuICAgICAgICBsb2dnZXI/LmRlYnVnKGAke3BhdGh9J3MgJHtjYWxsfSB3YXMgc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkLmApO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2dnZXI/LmRlYnVnKGAke3BhdGh9J3MgJHtjYWxsfSB3YXMgdW5zdWNjZXNzZnVsLmApO1xuICAgICAgICByZXR1cm4gbmV3IEpzb25ScGNFcnJvcihlLm1lc3NhZ2UgfHwgXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIiwgLTMyMDAwKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBa0IsWUFBWSxRQUFRLGVBQWU7QUFHckQsU0FBUyxpQkFBaUIsUUFBUSwwQkFBMEI7QUFFNUQsU0FBUyxvQkFBb0IsUUFBUSwwQkFBMEI7QUFFL0QsZUFBZSxlQUFlLFdBQVcsSUFBWSxFQUFFLE1BQWU7RUFDbEUsTUFBTSxHQUFHLE1BQU0sV0FBVyxHQUFHLEtBQUssS0FBSyxDQUFDO0VBRXhDLE1BQU0sV0FBVyxrQkFBa0IsR0FBRyxDQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztFQUNsRSxNQUFNLFNBQVMsa0JBQWtCLEdBQUcsQ0FBUztFQUU3QyxJQUFJLENBQUMsVUFBVTtJQUNYLE9BQU8sSUFBSSxhQUFhLENBQUMsU0FBUyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsQ0FBQztFQUMzRDtFQUVBLE1BQU0sU0FBUyxRQUFRLENBQUMsV0FBaUM7RUFFekQsSUFBSSxPQUFPLFdBQVcsWUFBWTtJQUM5QixPQUFPLElBQUksYUFBYSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQUUsV0FBVyxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQ25FO0VBRUEsTUFBTSxDQUFDLFNBQVMsYUFBYSxHQUFHO0VBRWhDLFFBQVEsTUFBTSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQUUsS0FBSyxxQkFBcUIsQ0FBQyxFQUFFO0VBRXhELElBQUk7SUFDQSw2QkFBNkI7SUFDN0IsTUFBTSxTQUFTLE1BQU0sQUFBQyxPQUFvQixLQUFLLENBQUMsVUFBVTtNQUN0RDtNQUNBO01BQ0EscUJBQXFCLFNBQVM7TUFDOUIscUJBQXFCLFdBQVc7TUFDaEMscUJBQXFCLE9BQU87TUFDNUIscUJBQXFCLGNBQWM7S0FDdEM7SUFFRCxRQUFRLE1BQU0sQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEtBQUssMkJBQTJCLENBQUM7SUFFNUQsT0FBTztFQUNYLEVBQUUsT0FBTyxHQUFHO0lBQ1IsUUFBUSxNQUFNLENBQUMsRUFBRSxLQUFLLEdBQUcsRUFBRSxLQUFLLGtCQUFrQixDQUFDO0lBQ25ELE9BQU8sSUFBSSxhQUFhLEVBQUUsT0FBTyxJQUFJLHlCQUF5QixDQUFDO0VBQ25FO0FBQ0oifQ==