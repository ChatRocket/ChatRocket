import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class MessageExtender {
  msg;
  kind;
  constructor(msg){
    this.msg = msg;
    this.kind = RocketChatAssociationModel.MESSAGE;
    if (!Array.isArray(msg.attachments)) {
      this.msg.attachments = [];
    }
  }
  addCustomField(key, value) {
    if (!this.msg.customFields) {
      this.msg.customFields = {};
    }
    if (this.msg.customFields[key]) {
      throw new Error(`The message already contains a custom field by the key: ${key}`);
    }
    if (key.includes('.')) {
      throw new Error(`The given key contains a period, which is not allowed. Key: ${key}`);
    }
    this.msg.customFields[key] = value;
    return this;
  }
  addAttachment(attachment) {
    this.ensureAttachment();
    this.msg.attachments.push(attachment);
    return this;
  }
  addAttachments(attachments) {
    this.ensureAttachment();
    this.msg.attachments = this.msg.attachments.concat(attachments);
    return this;
  }
  getMessage() {
    return structuredClone(this.msg);
  }
  ensureAttachment() {
    if (!Array.isArray(this.msg.attachments)) {
      this.msg.attachments = [];
    }
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvYWNjZXNzb3JzL2V4dGVuZGVycy9NZXNzYWdlRXh0ZW5kZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJTWVzc2FnZUV4dGVuZGVyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vYWNjZXNzb3JzL0lNZXNzYWdlRXh0ZW5kZXIudHMnO1xuaW1wb3J0IHR5cGUgeyBSb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbCBhcyBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXRhZGF0YS9Sb2NrZXRDaGF0QXNzb2NpYXRpb25zLnRzJztcbmltcG9ydCB0eXBlIHsgSU1lc3NhZ2UgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXNzYWdlcy9JTWVzc2FnZS50cyc7XG5pbXBvcnQgdHlwZSB7IElNZXNzYWdlQXR0YWNobWVudCB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL21lc3NhZ2VzL0lNZXNzYWdlQXR0YWNobWVudC50cyc7XG5cbmltcG9ydCB7IHJlcXVpcmUgfSBmcm9tICcuLi8uLi8uLi9saWIvcmVxdWlyZS50cyc7XG5cbmNvbnN0IHsgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgfSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL21ldGFkYXRhL1JvY2tldENoYXRBc3NvY2lhdGlvbnMuanMnKSBhcyB7XG4gICAgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWw6IHR5cGVvZiBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWw7XG59O1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZUV4dGVuZGVyIGltcGxlbWVudHMgSU1lc3NhZ2VFeHRlbmRlciB7XG4gICAgcHVibGljIHJlYWRvbmx5IGtpbmQ6IF9Sb2NrZXRDaGF0QXNzb2NpYXRpb25Nb2RlbC5NRVNTQUdFO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtc2c6IElNZXNzYWdlKSB7XG4gICAgICAgIHRoaXMua2luZCA9IFJvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsLk1FU1NBR0U7XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1zZy5hdHRhY2htZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMubXNnLmF0dGFjaG1lbnRzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ3VzdG9tRmllbGQoa2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogSU1lc3NhZ2VFeHRlbmRlciB7XG4gICAgICAgIGlmICghdGhpcy5tc2cuY3VzdG9tRmllbGRzKSB7XG4gICAgICAgICAgICB0aGlzLm1zZy5jdXN0b21GaWVsZHMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1zZy5jdXN0b21GaWVsZHNba2V5XSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbWVzc2FnZSBhbHJlYWR5IGNvbnRhaW5zIGEgY3VzdG9tIGZpZWxkIGJ5IHRoZSBrZXk6ICR7a2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleS5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBnaXZlbiBrZXkgY29udGFpbnMgYSBwZXJpb2QsIHdoaWNoIGlzIG5vdCBhbGxvd2VkLiBLZXk6ICR7a2V5fWApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tc2cuY3VzdG9tRmllbGRzW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQXR0YWNobWVudChhdHRhY2htZW50OiBJTWVzc2FnZUF0dGFjaG1lbnQpOiBJTWVzc2FnZUV4dGVuZGVyIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdHRhY2htZW50KCk7XG5cbiAgICAgICAgdGhpcy5tc2cuYXR0YWNobWVudHMhLnB1c2goYXR0YWNobWVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRzOiBBcnJheTxJTWVzc2FnZUF0dGFjaG1lbnQ+KTogSU1lc3NhZ2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXR0YWNobWVudCgpO1xuXG4gICAgICAgIHRoaXMubXNnLmF0dGFjaG1lbnRzID0gdGhpcy5tc2cuYXR0YWNobWVudHMhLmNvbmNhdChhdHRhY2htZW50cyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE1lc3NhZ2UoKTogSU1lc3NhZ2Uge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHRoaXMubXNnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGVuc3VyZUF0dGFjaG1lbnQoKTogdm9pZCB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLm1zZy5hdHRhY2htZW50cykpIHtcbiAgICAgICAgICAgIHRoaXMubXNnLmF0dGFjaG1lbnRzID0gW107XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsU0FBUyxPQUFPLFFBQVEsMEJBQTBCO0FBRWxELE1BQU0sRUFBRSwwQkFBMEIsRUFBRSxHQUFHLFFBQVE7QUFJL0MsT0FBTyxNQUFNOztFQUNPLEtBQTBDO0VBRTFELFlBQVksQUFBUSxHQUFhLENBQUU7U0FBZixNQUFBO0lBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLE9BQU87SUFFOUMsSUFBSSxDQUFDLE1BQU0sT0FBTyxDQUFDLElBQUksV0FBVyxHQUFHO01BQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLEVBQUU7SUFDN0I7RUFDSjtFQUVPLGVBQWUsR0FBVyxFQUFFLEtBQWMsRUFBb0I7SUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO01BQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLENBQUM7SUFDN0I7SUFFQSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtNQUM1QixNQUFNLElBQUksTUFBTSxDQUFDLHdEQUF3RCxFQUFFLElBQUksQ0FBQztJQUNwRjtJQUVBLElBQUksSUFBSSxRQUFRLENBQUMsTUFBTTtNQUNuQixNQUFNLElBQUksTUFBTSxDQUFDLDREQUE0RCxFQUFFLElBQUksQ0FBQztJQUN4RjtJQUVBLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRztJQUU3QixPQUFPLElBQUk7RUFDZjtFQUVPLGNBQWMsVUFBOEIsRUFBb0I7SUFDbkUsSUFBSSxDQUFDLGdCQUFnQjtJQUVyQixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBRSxJQUFJLENBQUM7SUFFM0IsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxlQUFlLFdBQXNDLEVBQW9CO0lBQzVFLElBQUksQ0FBQyxnQkFBZ0I7SUFFckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUUsTUFBTSxDQUFDO0lBRXBELE9BQU8sSUFBSTtFQUNmO0VBRU8sYUFBdUI7SUFDMUIsT0FBTyxnQkFBZ0IsSUFBSSxDQUFDLEdBQUc7RUFDbkM7RUFFUSxtQkFBeUI7SUFDN0IsSUFBSSxDQUFDLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHO01BQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLEVBQUU7SUFDN0I7RUFDSjtBQUNKIn0=