import { Buffer } from 'node:buffer';
import { Decoder, Encoder, ExtensionCodec } from '@msgpack/msgpack';
import { require } from "./require.ts";
const { App } = require('@rocket.chat/apps-engine/definition/App.js');
const extensionCodec = new ExtensionCodec();
extensionCodec.register({
  type: 0,
  encode: (object)=>{
    // We don't care about functions, but also don't want to throw an error
    if (typeof object === 'function' || object instanceof App) {
      return new Uint8Array(0);
    }
    return null;
  },
  decode: (_data)=>undefined
});
// Since Deno doesn't have Buffer by default, we need to use Uint8Array
extensionCodec.register({
  type: 1,
  encode: (object)=>{
    if (object instanceof Buffer) {
      return new Uint8Array(object.buffer, object.byteOffset, object.byteLength);
    }
    return null;
  },
  // msgpack will reuse the Uint8Array instance, so WE NEED to copy it instead of simply creating a view
  decode: (data)=>{
    return Buffer.from(data);
  }
});
export const encoder = new Encoder({
  extensionCodec
});
export const decoder = new Decoder({
  extensionCodec
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvY29kZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnbm9kZTpidWZmZXInO1xuaW1wb3J0IHsgRGVjb2RlciwgRW5jb2RlciwgRXh0ZW5zaW9uQ29kZWMgfSBmcm9tICdAbXNncGFjay9tc2dwYWNrJztcblxuaW1wb3J0IHR5cGUgeyBBcHAgYXMgX0FwcCB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL0FwcC50cyc7XG5pbXBvcnQgeyByZXF1aXJlIH0gZnJvbSBcIi4vcmVxdWlyZS50c1wiO1xuXG5jb25zdCB7IEFwcCB9ID0gcmVxdWlyZSgnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vQXBwLmpzJykgYXMge1xuICAgIEFwcDogdHlwZW9mIF9BcHA7XG59O1xuXG5jb25zdCBleHRlbnNpb25Db2RlYyA9IG5ldyBFeHRlbnNpb25Db2RlYygpO1xuXG5leHRlbnNpb25Db2RlYy5yZWdpc3Rlcih7XG4gICAgdHlwZTogMCxcbiAgICBlbmNvZGU6IChvYmplY3Q6IHVua25vd24pID0+IHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgY2FyZSBhYm91dCBmdW5jdGlvbnMsIGJ1dCBhbHNvIGRvbid0IHdhbnQgdG8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbicgfHwgb2JqZWN0IGluc3RhbmNlb2YgQXBwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGRlY29kZTogKF9kYXRhOiBVaW50OEFycmF5KSA9PiB1bmRlZmluZWQsXG59KTtcblxuLy8gU2luY2UgRGVubyBkb2Vzbid0IGhhdmUgQnVmZmVyIGJ5IGRlZmF1bHQsIHdlIG5lZWQgdG8gdXNlIFVpbnQ4QXJyYXlcbmV4dGVuc2lvbkNvZGVjLnJlZ2lzdGVyKHtcbiAgICB0eXBlOiAxLFxuICAgIGVuY29kZTogKG9iamVjdDogdW5rbm93bikgPT4ge1xuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkob2JqZWN0LmJ1ZmZlciwgb2JqZWN0LmJ5dGVPZmZzZXQsIG9iamVjdC5ieXRlTGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgLy8gbXNncGFjayB3aWxsIHJldXNlIHRoZSBVaW50OEFycmF5IGluc3RhbmNlLCBzbyBXRSBORUVEIHRvIGNvcHkgaXQgaW5zdGVhZCBvZiBzaW1wbHkgY3JlYXRpbmcgYSB2aWV3XG4gICAgZGVjb2RlOiAoZGF0YTogVWludDhBcnJheSkgPT4ge1xuICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgZW5jb2RlciA9IG5ldyBFbmNvZGVyKHsgZXh0ZW5zaW9uQ29kZWMgfSk7XG5leHBvcnQgY29uc3QgZGVjb2RlciA9IG5ldyBEZWNvZGVyKHsgZXh0ZW5zaW9uQ29kZWMgfSk7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxNQUFNLFFBQVEsY0FBYztBQUNyQyxTQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUUsY0FBYyxRQUFRLG1CQUFtQjtBQUdwRSxTQUFTLE9BQU8sUUFBUSxlQUFlO0FBRXZDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxRQUFRO0FBSXhCLE1BQU0saUJBQWlCLElBQUk7QUFFM0IsZUFBZSxRQUFRLENBQUM7RUFDcEIsTUFBTTtFQUNOLFFBQVEsQ0FBQztJQUNMLHVFQUF1RTtJQUN2RSxJQUFJLE9BQU8sV0FBVyxjQUFjLGtCQUFrQixLQUFLO01BQ3ZELE9BQU8sSUFBSSxXQUFXO0lBQzFCO0lBRUEsT0FBTztFQUNYO0VBQ0EsUUFBUSxDQUFDLFFBQXNCO0FBQ25DO0FBRUEsdUVBQXVFO0FBQ3ZFLGVBQWUsUUFBUSxDQUFDO0VBQ3BCLE1BQU07RUFDTixRQUFRLENBQUM7SUFDTCxJQUFJLGtCQUFrQixRQUFRO01BQzFCLE9BQU8sSUFBSSxXQUFXLE9BQU8sTUFBTSxFQUFFLE9BQU8sVUFBVSxFQUFFLE9BQU8sVUFBVTtJQUM3RTtJQUVBLE9BQU87RUFDWDtFQUNBLHNHQUFzRztFQUN0RyxRQUFRLENBQUM7SUFDTCxPQUFPLE9BQU8sSUFBSSxDQUFDO0VBQ3ZCO0FBQ0o7QUFFQSxPQUFPLE1BQU0sVUFBVSxJQUFJLFFBQVE7RUFBRTtBQUFlLEdBQUc7QUFDdkQsT0FBTyxNQUFNLFVBQVUsSUFBSSxRQUFRO0VBQUU7QUFBZSxHQUFHIn0=