import { require } from '../../../lib/require.ts';
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class VideoConferenceExtender {
  videoConference;
  kind;
  constructor(videoConference){
    this.videoConference = videoConference;
    this.kind = RocketChatAssociationModel.VIDEO_CONFERENCE;
  }
  setProviderData(value) {
    this.videoConference.providerData = value;
    return this;
  }
  setStatus(value) {
    this.videoConference.status = value;
    return this;
  }
  setEndedBy(value) {
    this.videoConference.endedBy = {
      _id: value,
      // Name and username will be loaded automatically by the bridge
      username: '',
      name: ''
    };
    return this;
  }
  setEndedAt(value) {
    this.videoConference.endedAt = value;
    return this;
  }
  addUser(userId, ts) {
    this.videoConference.users.push({
      _id: userId,
      ts,
      // Name and username will be loaded automatically by the bridge
      username: '',
      name: ''
    });
    return this;
  }
  setDiscussionRid(rid) {
    this.videoConference.discussionRid = rid;
    return this;
  }
  getVideoConference() {
    return structuredClone(this.videoConference);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvYWNjZXNzb3JzL2V4dGVuZGVycy9WaWRlb0NvbmZlcmVuY2VFeHRlbmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hY2Nlc3NvcnMvSVZpZGVvQ29uZmVyZW5jZUV4dGVuZC50cyc7XG5pbXBvcnQgdHlwZSB7IFZpZGVvQ29uZmVyZW5jZSwgVmlkZW9Db25mZXJlbmNlTWVtYmVyIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vdmlkZW9Db25mZXJlbmNlcy9JVmlkZW9Db25mZXJlbmNlLnRzJztcbmltcG9ydCB0eXBlIHsgSVZpZGVvQ29uZmVyZW5jZVVzZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi92aWRlb0NvbmZlcmVuY2VzL0lWaWRlb0NvbmZlcmVuY2VVc2VyLnRzJztcbmltcG9ydCB0eXBlIHsgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgYXMgX1JvY2tldENoYXRBc3NvY2lhdGlvbk1vZGVsIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vbWV0YWRhdGEvUm9ja2V0Q2hhdEFzc29jaWF0aW9ucy50cyc7XG5cbmltcG9ydCB7IHJlcXVpcmUgfSBmcm9tICcuLi8uLi8uLi9saWIvcmVxdWlyZS50cyc7XG5cbmNvbnN0IHsgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwgfSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL21ldGFkYXRhL1JvY2tldENoYXRBc3NvY2lhdGlvbnMuanMnKSBhcyB7XG4gICAgUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWw6IHR5cGVvZiBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWw7XG59O1xuXG5leHBvcnQgY2xhc3MgVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIgaW1wbGVtZW50cyBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIge1xuICAgIHB1YmxpYyBraW5kOiBfUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwuVklERU9fQ09ORkVSRU5DRTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlkZW9Db25mZXJlbmNlOiBWaWRlb0NvbmZlcmVuY2UpIHtcbiAgICAgICAgdGhpcy5raW5kID0gUm9ja2V0Q2hhdEFzc29jaWF0aW9uTW9kZWwuVklERU9fQ09ORkVSRU5DRTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0UHJvdmlkZXJEYXRhKHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IElWaWRlb0NvbmZlcmVuY2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMudmlkZW9Db25mZXJlbmNlLnByb3ZpZGVyRGF0YSA9IHZhbHVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRTdGF0dXModmFsdWU6IFZpZGVvQ29uZmVyZW5jZVsnc3RhdHVzJ10pOiBJVmlkZW9Db25mZXJlbmNlRXh0ZW5kZXIge1xuICAgICAgICB0aGlzLnZpZGVvQ29uZmVyZW5jZS5zdGF0dXMgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0RW5kZWRCeSh2YWx1ZTogSVZpZGVvQ29uZmVyZW5jZVVzZXJbJ19pZCddKTogSVZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIHtcbiAgICAgICAgdGhpcy52aWRlb0NvbmZlcmVuY2UuZW5kZWRCeSA9IHtcbiAgICAgICAgICAgIF9pZDogdmFsdWUsXG4gICAgICAgICAgICAvLyBOYW1lIGFuZCB1c2VybmFtZSB3aWxsIGJlIGxvYWRlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBicmlkZ2VcbiAgICAgICAgICAgIHVzZXJuYW1lOiAnJyxcbiAgICAgICAgICAgIG5hbWU6ICcnLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRFbmRlZEF0KHZhbHVlOiBWaWRlb0NvbmZlcmVuY2VbJ2VuZGVkQXQnXSk6IElWaWRlb0NvbmZlcmVuY2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMudmlkZW9Db25mZXJlbmNlLmVuZGVkQXQgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkVXNlcih1c2VySWQ6IFZpZGVvQ29uZmVyZW5jZU1lbWJlclsnX2lkJ10sIHRzPzogVmlkZW9Db25mZXJlbmNlTWVtYmVyWyd0cyddKTogSVZpZGVvQ29uZmVyZW5jZUV4dGVuZGVyIHtcbiAgICAgICAgdGhpcy52aWRlb0NvbmZlcmVuY2UudXNlcnMucHVzaCh7XG4gICAgICAgICAgICBfaWQ6IHVzZXJJZCxcbiAgICAgICAgICAgIHRzLFxuICAgICAgICAgICAgLy8gTmFtZSBhbmQgdXNlcm5hbWUgd2lsbCBiZSBsb2FkZWQgYXV0b21hdGljYWxseSBieSB0aGUgYnJpZGdlXG4gICAgICAgICAgICB1c2VybmFtZTogJycsXG4gICAgICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldERpc2N1c3Npb25SaWQocmlkOiBWaWRlb0NvbmZlcmVuY2VbJ2Rpc2N1c3Npb25SaWQnXSk6IElWaWRlb0NvbmZlcmVuY2VFeHRlbmRlciB7XG4gICAgICAgIHRoaXMudmlkZW9Db25mZXJlbmNlLmRpc2N1c3Npb25SaWQgPSByaWQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFZpZGVvQ29uZmVyZW5jZSgpOiBWaWRlb0NvbmZlcmVuY2Uge1xuICAgICAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHRoaXMudmlkZW9Db25mZXJlbmNlKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsU0FBUyxPQUFPLFFBQVEsMEJBQTBCO0FBRWxELE1BQU0sRUFBRSwwQkFBMEIsRUFBRSxHQUFHLFFBQVE7QUFJL0MsT0FBTyxNQUFNOztFQUNGLEtBQW1EO0VBRTFELFlBQVksQUFBUSxlQUFnQyxDQUFFO1NBQWxDLGtCQUFBO0lBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsMkJBQTJCLGdCQUFnQjtFQUMzRDtFQUVPLGdCQUFnQixLQUE4QixFQUE0QjtJQUM3RSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksR0FBRztJQUVwQyxPQUFPLElBQUk7RUFDZjtFQUVPLFVBQVUsS0FBZ0MsRUFBNEI7SUFDekUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFFOUIsT0FBTyxJQUFJO0VBQ2Y7RUFFTyxXQUFXLEtBQWtDLEVBQTRCO0lBQzVFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxHQUFHO01BQzNCLEtBQUs7TUFDTCwrREFBK0Q7TUFDL0QsVUFBVTtNQUNWLE1BQU07SUFDVjtJQUVBLE9BQU8sSUFBSTtFQUNmO0VBRU8sV0FBVyxLQUFpQyxFQUE0QjtJQUMzRSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sR0FBRztJQUUvQixPQUFPLElBQUk7RUFDZjtFQUVPLFFBQVEsTUFBb0MsRUFBRSxFQUFnQyxFQUE0QjtJQUM3RyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7TUFDNUIsS0FBSztNQUNMO01BQ0EsK0RBQStEO01BQy9ELFVBQVU7TUFDVixNQUFNO0lBQ1Y7SUFFQSxPQUFPLElBQUk7RUFDZjtFQUVPLGlCQUFpQixHQUFxQyxFQUE0QjtJQUNyRixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsR0FBRztJQUVyQyxPQUFPLElBQUk7RUFDZjtFQUVPLHFCQUFzQztJQUN6QyxPQUFPLGdCQUFnQixJQUFJLENBQUMsZUFBZTtFQUMvQztBQUNKIn0=