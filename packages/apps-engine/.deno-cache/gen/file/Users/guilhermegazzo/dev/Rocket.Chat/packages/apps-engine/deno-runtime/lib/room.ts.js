const PrivateManager = Symbol('RoomPrivateManager');
export class Room {
  id;
  displayName;
  slugifiedName;
  type;
  creator;
  isDefault;
  isReadOnly;
  displaySystemMessages;
  messageCount;
  createdAt;
  updatedAt;
  lastModifiedAt;
  customFields;
  userIds;
  _USERNAMES;
  [PrivateManager];
  /**
     * @deprecated
     */ get usernames() {
    if (!this._USERNAMES) {
      this._USERNAMES = this[PrivateManager]?.getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES || Promise.resolve([]);
  }
  set usernames(usernames) {}
  constructor(room, manager){
    Object.assign(this, room);
    Object.defineProperty(this, PrivateManager, {
      configurable: false,
      enumerable: false,
      writable: false,
      value: manager
    });
  }
  get value() {
    return {
      id: this.id,
      displayName: this.displayName,
      slugifiedName: this.slugifiedName,
      type: this.type,
      creator: this.creator,
      isDefault: this.isDefault,
      isReadOnly: this.isReadOnly,
      displaySystemMessages: this.displaySystemMessages,
      messageCount: this.messageCount,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      lastModifiedAt: this.lastModifiedAt,
      customFields: this.customFields,
      userIds: this.userIds
    };
  }
  async getUsernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = await this[PrivateManager]?.getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES || [];
  }
  toJSON() {
    return this.value;
  }
  toString() {
    return this.value;
  }
  valueOf() {
    return this.value;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvcm9vbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElSb29tIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vcm9vbXMvSVJvb20udHMnO1xuaW1wb3J0IHR5cGUgeyBSb29tVHlwZSB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3Jvb21zL1Jvb21UeXBlLnRzJztcbmltcG9ydCB0eXBlIHsgSVVzZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi91c2Vycy9JVXNlci50cyc7XG5pbXBvcnQgdHlwZSB7IEFwcE1hbmFnZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvc2VydmVyL0FwcE1hbmFnZXIudHMnO1xuXG5jb25zdCBQcml2YXRlTWFuYWdlciA9IFN5bWJvbCgnUm9vbVByaXZhdGVNYW5hZ2VyJyk7XG5cbmV4cG9ydCBjbGFzcyBSb29tIHtcbiAgICBwdWJsaWMgaWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIHB1YmxpYyBkaXNwbGF5TmFtZT86IHN0cmluZztcblxuICAgIHB1YmxpYyBzbHVnaWZpZWROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgdHlwZTogUm9vbVR5cGUgfCB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgY3JlYXRvcjogSVVzZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBwdWJsaWMgaXNEZWZhdWx0PzogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBpc1JlYWRPbmx5PzogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBkaXNwbGF5U3lzdGVtTWVzc2FnZXM/OiBib29sZWFuO1xuXG4gICAgcHVibGljIG1lc3NhZ2VDb3VudD86IG51bWJlcjtcblxuICAgIHB1YmxpYyBjcmVhdGVkQXQ/OiBEYXRlO1xuXG4gICAgcHVibGljIHVwZGF0ZWRBdD86IERhdGU7XG5cbiAgICBwdWJsaWMgbGFzdE1vZGlmaWVkQXQ/OiBEYXRlO1xuXG4gICAgcHVibGljIGN1c3RvbUZpZWxkcz86IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9O1xuXG4gICAgcHVibGljIHVzZXJJZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgcHJpdmF0ZSBfVVNFUk5BTUVTOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHwgdW5kZWZpbmVkO1xuXG4gICAgcHJpdmF0ZSBbUHJpdmF0ZU1hbmFnZXJdOiBBcHBNYW5hZ2VyIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHVzZXJuYW1lcygpOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9VU0VSTkFNRVMpIHtcbiAgICAgICAgICAgIHRoaXMuX1VTRVJOQU1FUyA9IHRoaXNbUHJpdmF0ZU1hbmFnZXJdPy5nZXRCcmlkZ2VzKCkuZ2V0SW50ZXJuYWxCcmlkZ2UoKS5kb0dldFVzZXJuYW1lc09mUm9vbUJ5SWQodGhpcy5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fVVNFUk5BTUVTIHx8IFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCB1c2VybmFtZXModXNlcm5hbWVzKSB7fVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvb206IElSb29tLCBtYW5hZ2VyOiBBcHBNYW5hZ2VyKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcm9vbSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFByaXZhdGVNYW5hZ2VyLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogbWFuYWdlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IG9iamVjdCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgc2x1Z2lmaWVkTmFtZTogdGhpcy5zbHVnaWZpZWROYW1lLFxuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgY3JlYXRvcjogdGhpcy5jcmVhdG9yLFxuICAgICAgICAgICAgaXNEZWZhdWx0OiB0aGlzLmlzRGVmYXVsdCxcbiAgICAgICAgICAgIGlzUmVhZE9ubHk6IHRoaXMuaXNSZWFkT25seSxcbiAgICAgICAgICAgIGRpc3BsYXlTeXN0ZW1NZXNzYWdlczogdGhpcy5kaXNwbGF5U3lzdGVtTWVzc2FnZXMsXG4gICAgICAgICAgICBtZXNzYWdlQ291bnQ6IHRoaXMubWVzc2FnZUNvdW50LFxuICAgICAgICAgICAgY3JlYXRlZEF0OiB0aGlzLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogdGhpcy51cGRhdGVkQXQsXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWRBdDogdGhpcy5sYXN0TW9kaWZpZWRBdCxcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkczogdGhpcy5jdXN0b21GaWVsZHMsXG4gICAgICAgICAgICB1c2VySWRzOiB0aGlzLnVzZXJJZHMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFVzZXJuYW1lcygpOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHtcbiAgICAgICAgLy8gR2V0IHVzZXJuYW1lc1xuICAgICAgICBpZiAoIXRoaXMuX1VTRVJOQU1FUykge1xuICAgICAgICAgICAgdGhpcy5fVVNFUk5BTUVTID0gYXdhaXQgdGhpc1tQcml2YXRlTWFuYWdlcl0/LmdldEJyaWRnZXMoKS5nZXRJbnRlcm5hbEJyaWRnZSgpLmRvR2V0VXNlcm5hbWVzT2ZSb29tQnlJZCh0aGlzLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9VU0VSTkFNRVMgfHwgW107XG4gICAgfVxuXG4gICAgcHVibGljIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0saUJBQWlCLE9BQU87QUFFOUIsT0FBTyxNQUFNO0VBQ0YsR0FBdUI7RUFFdkIsWUFBcUI7RUFFckIsY0FBa0M7RUFFbEMsS0FBMkI7RUFFM0IsUUFBMkI7RUFFM0IsVUFBb0I7RUFFcEIsV0FBcUI7RUFFckIsc0JBQWdDO0VBRWhDLGFBQXNCO0VBRXRCLFVBQWlCO0VBRWpCLFVBQWlCO0VBRWpCLGVBQXNCO0VBRXRCLGFBQTBDO0VBRTFDLFFBQXdCO0VBRXZCLFdBQStDO0VBRS9DLENBQUMsZUFBZSxDQUF5QjtFQUVqRDs7S0FFQyxHQUNELElBQVcsWUFBb0M7SUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7TUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLGFBQWEsb0JBQW9CLHlCQUF5QixJQUFJLENBQUMsRUFBRTtJQUM3RztJQUVBLE9BQU8sSUFBSSxDQUFDLFVBQVUsSUFBSSxRQUFRLE9BQU8sQ0FBQyxFQUFFO0VBQ2hEO0VBRUEsSUFBVyxVQUFVLFNBQVMsRUFBRSxDQUFDO0VBRWpDLFlBQW1CLElBQVcsRUFBRSxPQUFtQixDQUFFO0lBQ2pELE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRTtJQUVwQixPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO01BQ3hDLGNBQWM7TUFDZCxZQUFZO01BQ1osVUFBVTtNQUNWLE9BQU87SUFDWDtFQUNKO0VBRUEsSUFBSSxRQUFnQjtJQUNoQixPQUFPO01BQ0gsSUFBSSxJQUFJLENBQUMsRUFBRTtNQUNYLGFBQWEsSUFBSSxDQUFDLFdBQVc7TUFDN0IsZUFBZSxJQUFJLENBQUMsYUFBYTtNQUNqQyxNQUFNLElBQUksQ0FBQyxJQUFJO01BQ2YsU0FBUyxJQUFJLENBQUMsT0FBTztNQUNyQixXQUFXLElBQUksQ0FBQyxTQUFTO01BQ3pCLFlBQVksSUFBSSxDQUFDLFVBQVU7TUFDM0IsdUJBQXVCLElBQUksQ0FBQyxxQkFBcUI7TUFDakQsY0FBYyxJQUFJLENBQUMsWUFBWTtNQUMvQixXQUFXLElBQUksQ0FBQyxTQUFTO01BQ3pCLFdBQVcsSUFBSSxDQUFDLFNBQVM7TUFDekIsZ0JBQWdCLElBQUksQ0FBQyxjQUFjO01BQ25DLGNBQWMsSUFBSSxDQUFDLFlBQVk7TUFDL0IsU0FBUyxJQUFJLENBQUMsT0FBTztJQUN6QjtFQUNKO0VBRUEsTUFBYSxlQUF1QztJQUNoRCxnQkFBZ0I7SUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7TUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsYUFBYSxvQkFBb0IseUJBQXlCLElBQUksQ0FBQyxFQUFFO0lBQ25IO0lBRUEsT0FBTyxJQUFJLENBQUMsVUFBVSxJQUFJLEVBQUU7RUFDaEM7RUFFTyxTQUFTO0lBQ1osT0FBTyxJQUFJLENBQUMsS0FBSztFQUNyQjtFQUVPLFdBQVc7SUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLO0VBQ3JCO0VBRU8sVUFBVTtJQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUs7RUFDckI7QUFDSiJ9