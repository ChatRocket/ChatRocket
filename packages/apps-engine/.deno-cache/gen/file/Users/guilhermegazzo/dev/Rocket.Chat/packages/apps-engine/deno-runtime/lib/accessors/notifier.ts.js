import { MessageBuilder } from './builders/MessageBuilder.ts';
import { AppObjectRegistry } from '../../AppObjectRegistry.ts';
import { require } from "../require.ts";
const { TypingScope } = require('@rocket.chat/apps-engine/definition/accessors/INotifier.js');
export class Notifier {
  senderFn;
  constructor(senderFn){
    this.senderFn = senderFn;
  }
  async notifyUser(user, message) {
    if (!message.sender || !message.sender.id) {
      const appUser = await this.getAppUser();
      message.sender = appUser;
    }
    await this.callMessageBridge('doNotifyUser', [
      user,
      message,
      AppObjectRegistry.get('id')
    ]);
  }
  async notifyRoom(room, message) {
    if (!message.sender || !message.sender.id) {
      const appUser = await this.getAppUser();
      message.sender = appUser;
    }
    await this.callMessageBridge('doNotifyRoom', [
      room,
      message,
      AppObjectRegistry.get('id')
    ]);
  }
  async typing(options) {
    options.scope = options.scope || TypingScope.Room;
    if (!options.username) {
      const appUser = await this.getAppUser();
      options.username = appUser && appUser.name || '';
    }
    const appId = AppObjectRegistry.get('id');
    await this.callMessageBridge('doTyping', [
      {
        ...options,
        isTyping: true
      },
      appId
    ]);
    return async ()=>{
      await this.callMessageBridge('doTyping', [
        {
          ...options,
          isTyping: false
        },
        appId
      ]);
    };
  }
  getMessageBuilder() {
    return new MessageBuilder();
  }
  async callMessageBridge(method, params) {
    await this.senderFn({
      method: `bridges:getMessageBridge:${method}`,
      params
    });
  }
  async getAppUser() {
    const response = await this.senderFn({
      method: 'bridges:getUserBridge:doGetAppUser',
      params: [
        AppObjectRegistry.get('id')
      ]
    });
    return response.result;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL2Rlbm8tcnVudGltZS9saWIvYWNjZXNzb3JzL25vdGlmaWVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSU1lc3NhZ2VCdWlsZGVyLCBJTm90aWZpZXIgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hY2Nlc3NvcnMnO1xuaW1wb3J0IHR5cGUgeyBJVHlwaW5nT3B0aW9ucyB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL2FjY2Vzc29ycy9JTm90aWZpZXIudHMnO1xuaW1wb3J0IHR5cGUgeyBfVHlwaW5nU2NvcGUgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9hY2Nlc3NvcnMvSU5vdGlmaWVyLnRzJztcbmltcG9ydCB0eXBlIHsgSU1lc3NhZ2UgfSBmcm9tICdAcm9ja2V0LmNoYXQvYXBwcy1lbmdpbmUvZGVmaW5pdGlvbi9tZXNzYWdlcyc7XG5pbXBvcnQgdHlwZSB7IElSb29tIH0gZnJvbSAnQHJvY2tldC5jaGF0L2FwcHMtZW5naW5lL2RlZmluaXRpb24vcm9vbXMnO1xuaW1wb3J0IHR5cGUgeyBJVXNlciB9IGZyb20gJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL3VzZXJzJztcbmltcG9ydCB7IE1lc3NhZ2VCdWlsZGVyIH0gZnJvbSAnLi9idWlsZGVycy9NZXNzYWdlQnVpbGRlci50cyc7XG5pbXBvcnQgeyBBcHBPYmplY3RSZWdpc3RyeSB9IGZyb20gJy4uLy4uL0FwcE9iamVjdFJlZ2lzdHJ5LnRzJztcbmltcG9ydCAqIGFzIE1lc3NlbmdlciBmcm9tICcuLi9tZXNzZW5nZXIudHMnO1xuaW1wb3J0IHsgcmVxdWlyZSB9IGZyb20gXCIuLi9yZXF1aXJlLnRzXCI7XG5cbmNvbnN0IHsgVHlwaW5nU2NvcGUgfSA9IHJlcXVpcmUoJ0Byb2NrZXQuY2hhdC9hcHBzLWVuZ2luZS9kZWZpbml0aW9uL2FjY2Vzc29ycy9JTm90aWZpZXIuanMnKSBhcyB7XG4gICAgVHlwaW5nU2NvcGU6IHR5cGVvZiBfVHlwaW5nU2NvcGU7XG59O1xuXG5leHBvcnQgY2xhc3MgTm90aWZpZXIgaW1wbGVtZW50cyBJTm90aWZpZXIge1xuICAgIHByaXZhdGUgc2VuZGVyRm46IHR5cGVvZiBNZXNzZW5nZXIuc2VuZFJlcXVlc3Q7XG5cbiAgICBjb25zdHJ1Y3RvcihzZW5kZXJGbjogdHlwZW9mIE1lc3Nlbmdlci5zZW5kUmVxdWVzdCkge1xuICAgICAgICB0aGlzLnNlbmRlckZuID0gc2VuZGVyRm47XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIG5vdGlmeVVzZXIodXNlcjogSVVzZXIsIG1lc3NhZ2U6IElNZXNzYWdlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghbWVzc2FnZS5zZW5kZXIgfHwgIW1lc3NhZ2Uuc2VuZGVyLmlkKSB7XG4gICAgICAgICAgICBjb25zdCBhcHBVc2VyID0gYXdhaXQgdGhpcy5nZXRBcHBVc2VyKCk7XG5cbiAgICAgICAgICAgIG1lc3NhZ2Uuc2VuZGVyID0gYXBwVXNlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuY2FsbE1lc3NhZ2VCcmlkZ2UoJ2RvTm90aWZ5VXNlcicsIFt1c2VyLCBtZXNzYWdlLCBBcHBPYmplY3RSZWdpc3RyeS5nZXQ8c3RyaW5nPignaWQnKV0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBub3RpZnlSb29tKHJvb206IElSb29tLCBtZXNzYWdlOiBJTWVzc2FnZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIW1lc3NhZ2Uuc2VuZGVyIHx8ICFtZXNzYWdlLnNlbmRlci5pZCkge1xuICAgICAgICAgICAgY29uc3QgYXBwVXNlciA9IGF3YWl0IHRoaXMuZ2V0QXBwVXNlcigpO1xuXG4gICAgICAgICAgICBtZXNzYWdlLnNlbmRlciA9IGFwcFVzZXI7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLmNhbGxNZXNzYWdlQnJpZGdlKCdkb05vdGlmeVJvb20nLCBbcm9vbSwgbWVzc2FnZSwgQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PHN0cmluZz4oJ2lkJyldKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdHlwaW5nKG9wdGlvbnM6IElUeXBpbmdPcHRpb25zKTogUHJvbWlzZTwoKSA9PiBQcm9taXNlPHZvaWQ+PiB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGUgPSBvcHRpb25zLnNjb3BlIHx8IFR5cGluZ1Njb3BlLlJvb207XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnVzZXJuYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBhcHBVc2VyID0gYXdhaXQgdGhpcy5nZXRBcHBVc2VyKCk7XG4gICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID0gKGFwcFVzZXIgJiYgYXBwVXNlci5uYW1lKSB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFwcElkID0gQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PHN0cmluZz4oJ2lkJyk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5jYWxsTWVzc2FnZUJyaWRnZSgnZG9UeXBpbmcnLCBbeyAuLi5vcHRpb25zLCBpc1R5cGluZzogdHJ1ZSB9LCBhcHBJZF0pO1xuXG4gICAgICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbGxNZXNzYWdlQnJpZGdlKCdkb1R5cGluZycsIFt7IC4uLm9wdGlvbnMsIGlzVHlwaW5nOiBmYWxzZSB9LCBhcHBJZF0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNZXNzYWdlQnVpbGRlcigpOiBJTWVzc2FnZUJ1aWxkZXIge1xuICAgICAgICByZXR1cm4gbmV3IE1lc3NhZ2VCdWlsZGVyKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBjYWxsTWVzc2FnZUJyaWRnZShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBBcnJheTx1bmtub3duPik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmRlckZuKHtcbiAgICAgICAgICAgIG1ldGhvZDogYGJyaWRnZXM6Z2V0TWVzc2FnZUJyaWRnZToke21ldGhvZH1gLFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldEFwcFVzZXIoKTogUHJvbWlzZTxJVXNlciB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2VuZGVyRm4oeyBtZXRob2Q6ICdicmlkZ2VzOmdldFVzZXJCcmlkZ2U6ZG9HZXRBcHBVc2VyJywgcGFyYW1zOiBbQXBwT2JqZWN0UmVnaXN0cnkuZ2V0PHN0cmluZz4oJ2lkJyldIH0pO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxTQUFTLGNBQWMsUUFBUSwrQkFBK0I7QUFDOUQsU0FBUyxpQkFBaUIsUUFBUSw2QkFBNkI7QUFFL0QsU0FBUyxPQUFPLFFBQVEsZ0JBQWdCO0FBRXhDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxRQUFRO0FBSWhDLE9BQU8sTUFBTTtFQUNELFNBQXVDO0VBRS9DLFlBQVksUUFBc0MsQ0FBRTtJQUNoRCxJQUFJLENBQUMsUUFBUSxHQUFHO0VBQ3BCO0VBRUEsTUFBYSxXQUFXLElBQVcsRUFBRSxPQUFpQixFQUFpQjtJQUNuRSxJQUFJLENBQUMsUUFBUSxNQUFNLElBQUksQ0FBQyxRQUFRLE1BQU0sQ0FBQyxFQUFFLEVBQUU7TUFDdkMsTUFBTSxVQUFVLE1BQU0sSUFBSSxDQUFDLFVBQVU7TUFFckMsUUFBUSxNQUFNLEdBQUc7SUFDckI7SUFFQSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0I7TUFBQztNQUFNO01BQVMsa0JBQWtCLEdBQUcsQ0FBUztLQUFNO0VBQ3JHO0VBRUEsTUFBYSxXQUFXLElBQVcsRUFBRSxPQUFpQixFQUFpQjtJQUNuRSxJQUFJLENBQUMsUUFBUSxNQUFNLElBQUksQ0FBQyxRQUFRLE1BQU0sQ0FBQyxFQUFFLEVBQUU7TUFDdkMsTUFBTSxVQUFVLE1BQU0sSUFBSSxDQUFDLFVBQVU7TUFFckMsUUFBUSxNQUFNLEdBQUc7SUFDckI7SUFFQSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0I7TUFBQztNQUFNO01BQVMsa0JBQWtCLEdBQUcsQ0FBUztLQUFNO0VBQ3JHO0VBRUEsTUFBYSxPQUFPLE9BQXVCLEVBQWdDO0lBQ3ZFLFFBQVEsS0FBSyxHQUFHLFFBQVEsS0FBSyxJQUFJLFlBQVksSUFBSTtJQUVqRCxJQUFJLENBQUMsUUFBUSxRQUFRLEVBQUU7TUFDbkIsTUFBTSxVQUFVLE1BQU0sSUFBSSxDQUFDLFVBQVU7TUFDckMsUUFBUSxRQUFRLEdBQUcsQUFBQyxXQUFXLFFBQVEsSUFBSSxJQUFLO0lBQ3BEO0lBRUEsTUFBTSxRQUFRLGtCQUFrQixHQUFHLENBQVM7SUFFNUMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWTtNQUFDO1FBQUUsR0FBRyxPQUFPO1FBQUUsVUFBVTtNQUFLO01BQUc7S0FBTTtJQUVoRixPQUFPO01BQ0gsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWTtRQUFDO1VBQUUsR0FBRyxPQUFPO1VBQUUsVUFBVTtRQUFNO1FBQUc7T0FBTTtJQUNyRjtFQUNKO0VBRU8sb0JBQXFDO0lBQ3hDLE9BQU8sSUFBSTtFQUNmO0VBRUEsTUFBYyxrQkFBa0IsTUFBYyxFQUFFLE1BQXNCLEVBQWlCO0lBQ25GLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQztNQUNoQixRQUFRLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDO01BQzVDO0lBQ0o7RUFDSjtFQUVBLE1BQWMsYUFBeUM7SUFDbkQsTUFBTSxXQUFXLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQztNQUFFLFFBQVE7TUFBc0MsUUFBUTtRQUFDLGtCQUFrQixHQUFHLENBQVM7T0FBTTtJQUFDO0lBQ25JLE9BQU8sU0FBUyxNQUFNO0VBQzFCO0FBQ0oifQ==