const PrivateManager = Symbol('RoomPrivateManager');
export class Room {
  id;
  displayName;
  slugifiedName;
  type;
  creator;
  isDefault;
  isReadOnly;
  displaySystemMessages;
  messageCount;
  createdAt;
  updatedAt;
  lastModifiedAt;
  customFields;
  userIds;
  _USERNAMES;
  [PrivateManager];
  /**
     * @deprecated
     */ get usernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = this[PrivateManager].getBridges().getInternalBridge().doGetUsernamesOfRoomByIdSync(this.id);
    }
    return this._USERNAMES;
  }
  set usernames(usernames) {}
  constructor(room, manager){
    Object.assign(this, room);
    Object.defineProperty(this, PrivateManager, {
      configurable: false,
      enumerable: false,
      writable: false,
      value: manager
    });
  }
  get value() {
    return {
      id: this.id,
      displayName: this.displayName,
      slugifiedName: this.slugifiedName,
      type: this.type,
      creator: this.creator,
      isDefault: this.isDefault,
      isReadOnly: this.isReadOnly,
      displaySystemMessages: this.displaySystemMessages,
      messageCount: this.messageCount,
      createdAt: this.createdAt,
      updatedAt: this.updatedAt,
      lastModifiedAt: this.lastModifiedAt,
      customFields: this.customFields,
      userIds: this.userIds
    };
  }
  async getUsernames() {
    // Get usernames
    if (!this._USERNAMES) {
      this._USERNAMES = await this[PrivateManager].getBridges().getInternalBridge().doGetUsernamesOfRoomById(this.id);
    }
    return this._USERNAMES;
  }
  toJSON() {
    return this.value;
  }
  toString() {
    return this.value;
  }
  valueOf() {
    return this.value;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvZ3VpbGhlcm1lZ2F6em8vZGV2L1JvY2tldC5DaGF0L3BhY2thZ2VzL2FwcHMtZW5naW5lL3NyYy9zZXJ2ZXIvcm9vbXMvUm9vbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElSb29tLCBSb29tVHlwZSB9IGZyb20gJy4uLy4uL2RlZmluaXRpb24vcm9vbXMnO1xuaW1wb3J0IHR5cGUgeyBJVXNlciB9IGZyb20gJy4uLy4uL2RlZmluaXRpb24vdXNlcnMnO1xuaW1wb3J0IHR5cGUgeyBBcHBNYW5hZ2VyIH0gZnJvbSAnLi4vQXBwTWFuYWdlcic7XG5cbmNvbnN0IFByaXZhdGVNYW5hZ2VyID0gU3ltYm9sKCdSb29tUHJpdmF0ZU1hbmFnZXInKTtcblxuZXhwb3J0IGNsYXNzIFJvb20gaW1wbGVtZW50cyBJUm9vbSB7XG4gICAgcHVibGljIGlkOiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG5cbiAgICBwdWJsaWMgc2x1Z2lmaWVkTmFtZTogc3RyaW5nO1xuXG4gICAgcHVibGljIHR5cGU6IFJvb21UeXBlO1xuXG4gICAgcHVibGljIGNyZWF0b3I6IElVc2VyO1xuXG4gICAgcHVibGljIGlzRGVmYXVsdD86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgaXNSZWFkT25seT86IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgZGlzcGxheVN5c3RlbU1lc3NhZ2VzPzogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBtZXNzYWdlQ291bnQ/OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY3JlYXRlZEF0PzogRGF0ZTtcblxuICAgIHB1YmxpYyB1cGRhdGVkQXQ/OiBEYXRlO1xuXG4gICAgcHVibGljIGxhc3RNb2RpZmllZEF0PzogRGF0ZTtcblxuICAgIHB1YmxpYyBjdXN0b21GaWVsZHM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuXG4gICAgcHVibGljIHVzZXJJZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgcHJpdmF0ZSBfVVNFUk5BTUVTOiBBcnJheTxzdHJpbmc+O1xuXG4gICAgcHJpdmF0ZSBbUHJpdmF0ZU1hbmFnZXJdOiBBcHBNYW5hZ2VyO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHVzZXJuYW1lcygpOiBBcnJheTxzdHJpbmc+IHtcbiAgICAgICAgLy8gR2V0IHVzZXJuYW1lc1xuICAgICAgICBpZiAoIXRoaXMuX1VTRVJOQU1FUykge1xuICAgICAgICAgICAgdGhpcy5fVVNFUk5BTUVTID0gdGhpc1tQcml2YXRlTWFuYWdlcl0uZ2V0QnJpZGdlcygpLmdldEludGVybmFsQnJpZGdlKCkuZG9HZXRVc2VybmFtZXNPZlJvb21CeUlkU3luYyh0aGlzLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9VU0VSTkFNRVM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCB1c2VybmFtZXModXNlcm5hbWVzKSB7fVxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHJvb206IElSb29tLCBtYW5hZ2VyOiBBcHBNYW5hZ2VyKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgcm9vbSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFByaXZhdGVNYW5hZ2VyLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogbWFuYWdlcixcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IG9iamVjdCB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiB0aGlzLmRpc3BsYXlOYW1lLFxuICAgICAgICAgICAgc2x1Z2lmaWVkTmFtZTogdGhpcy5zbHVnaWZpZWROYW1lLFxuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgY3JlYXRvcjogdGhpcy5jcmVhdG9yLFxuICAgICAgICAgICAgaXNEZWZhdWx0OiB0aGlzLmlzRGVmYXVsdCxcbiAgICAgICAgICAgIGlzUmVhZE9ubHk6IHRoaXMuaXNSZWFkT25seSxcbiAgICAgICAgICAgIGRpc3BsYXlTeXN0ZW1NZXNzYWdlczogdGhpcy5kaXNwbGF5U3lzdGVtTWVzc2FnZXMsXG4gICAgICAgICAgICBtZXNzYWdlQ291bnQ6IHRoaXMubWVzc2FnZUNvdW50LFxuICAgICAgICAgICAgY3JlYXRlZEF0OiB0aGlzLmNyZWF0ZWRBdCxcbiAgICAgICAgICAgIHVwZGF0ZWRBdDogdGhpcy51cGRhdGVkQXQsXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWRBdDogdGhpcy5sYXN0TW9kaWZpZWRBdCxcbiAgICAgICAgICAgIGN1c3RvbUZpZWxkczogdGhpcy5jdXN0b21GaWVsZHMsXG4gICAgICAgICAgICB1c2VySWRzOiB0aGlzLnVzZXJJZHMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFVzZXJuYW1lcygpOiBQcm9taXNlPEFycmF5PHN0cmluZz4+IHtcbiAgICAgICAgLy8gR2V0IHVzZXJuYW1lc1xuICAgICAgICBpZiAoIXRoaXMuX1VTRVJOQU1FUykge1xuICAgICAgICAgICAgdGhpcy5fVVNFUk5BTUVTID0gYXdhaXQgdGhpc1tQcml2YXRlTWFuYWdlcl0uZ2V0QnJpZGdlcygpLmdldEludGVybmFsQnJpZGdlKCkuZG9HZXRVc2VybmFtZXNPZlJvb21CeUlkKHRoaXMuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX1VTRVJOQU1FUztcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyB2YWx1ZU9mKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxpQkFBaUIsT0FBTztBQUU5QixPQUFPLE1BQU07RUFDRixHQUFXO0VBRVgsWUFBcUI7RUFFckIsY0FBc0I7RUFFdEIsS0FBZTtFQUVmLFFBQWU7RUFFZixVQUFvQjtFQUVwQixXQUFxQjtFQUVyQixzQkFBZ0M7RUFFaEMsYUFBc0I7RUFFdEIsVUFBaUI7RUFFakIsVUFBaUI7RUFFakIsZUFBc0I7RUFFdEIsYUFBc0M7RUFFdEMsUUFBd0I7RUFFdkIsV0FBMEI7RUFFMUIsQ0FBQyxlQUFlLENBQWE7RUFFckM7O0tBRUMsR0FDRCxJQUFXLFlBQTJCO0lBQ2xDLGdCQUFnQjtJQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxHQUFHLGlCQUFpQixHQUFHLDRCQUE0QixDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2hIO0lBRUEsT0FBTyxJQUFJLENBQUMsVUFBVTtFQUMxQjtFQUVBLElBQVcsVUFBVSxTQUFTLEVBQUUsQ0FBQztFQUVqQyxZQUFtQixJQUFXLEVBQUUsT0FBbUIsQ0FBRTtJQUNqRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFFcEIsT0FBTyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtNQUN4QyxjQUFjO01BQ2QsWUFBWTtNQUNaLFVBQVU7TUFDVixPQUFPO0lBQ1g7RUFDSjtFQUVBLElBQUksUUFBZ0I7SUFDaEIsT0FBTztNQUNILElBQUksSUFBSSxDQUFDLEVBQUU7TUFDWCxhQUFhLElBQUksQ0FBQyxXQUFXO01BQzdCLGVBQWUsSUFBSSxDQUFDLGFBQWE7TUFDakMsTUFBTSxJQUFJLENBQUMsSUFBSTtNQUNmLFNBQVMsSUFBSSxDQUFDLE9BQU87TUFDckIsV0FBVyxJQUFJLENBQUMsU0FBUztNQUN6QixZQUFZLElBQUksQ0FBQyxVQUFVO01BQzNCLHVCQUF1QixJQUFJLENBQUMscUJBQXFCO01BQ2pELGNBQWMsSUFBSSxDQUFDLFlBQVk7TUFDL0IsV0FBVyxJQUFJLENBQUMsU0FBUztNQUN6QixXQUFXLElBQUksQ0FBQyxTQUFTO01BQ3pCLGdCQUFnQixJQUFJLENBQUMsY0FBYztNQUNuQyxjQUFjLElBQUksQ0FBQyxZQUFZO01BQy9CLFNBQVMsSUFBSSxDQUFDLE9BQU87SUFDekI7RUFDSjtFQUVBLE1BQWEsZUFBdUM7SUFDaEQsZ0JBQWdCO0lBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO01BQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUNsSDtJQUVBLE9BQU8sSUFBSSxDQUFDLFVBQVU7RUFDMUI7RUFFTyxTQUFTO0lBQ1osT0FBTyxJQUFJLENBQUMsS0FBSztFQUNyQjtFQUVPLFdBQVc7SUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLO0VBQ3JCO0VBRU8sVUFBVTtJQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUs7RUFDckI7QUFDSiJ9