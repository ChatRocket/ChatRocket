import { BlockBuilder } from '../builders/BlockBuilder.ts';
import { MessageBuilder } from '../builders/MessageBuilder.ts';
import { DiscussionBuilder } from '../builders/DiscussionBuilder.ts';
import { LivechatMessageBuilder } from '../builders/LivechatMessageBuilder.ts';
import { RoomBuilder } from '../builders/RoomBuilder.ts';
import { UserBuilder } from '../builders/UserBuilder.ts';
import { VideoConferenceBuilder } from '../builders/VideoConferenceBuilder.ts';
import { AppObjectRegistry } from '../../../AppObjectRegistry.ts';
import { require } from '../../../lib/require.ts';
const { UIHelper } = require('@rocket.chat/apps-engine/server/misc/UIHelper.js');
const { RoomType } = require('@rocket.chat/apps-engine/definition/rooms/RoomType.js');
const { UserType } = require('@rocket.chat/apps-engine/definition/users/UserType.js');
const { RocketChatAssociationModel } = require('@rocket.chat/apps-engine/definition/metadata/RocketChatAssociations.js');
export class ModifyCreator {
  senderFn;
  constructor(senderFn){
    this.senderFn = senderFn;
  }
  getLivechatCreator() {
    return new Proxy({
      __kind: 'getLivechatCreator'
    }, {
      get: (_target, prop)=>{
        // It's not worthwhile to make an asynchronous request for such a simple method
        if (prop === 'createToken') {
          return ()=>Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        }
        if (prop === 'toJSON') {
          return ()=>({});
        }
        return (...params)=>this.senderFn({
            method: `accessor:getModifier:getCreator:getLivechatCreator:${prop}`,
            params
          }).then((response)=>response.result).catch((err)=>{
            throw new Error(err.error);
          });
      }
    });
  }
  getUploadCreator() {
    return new Proxy({
      __kind: 'getUploadCreator'
    }, {
      get: (_target, prop)=>(...params)=>prop === 'toJSON' ? {} : this.senderFn({
            method: `accessor:getModifier:getCreator:getUploadCreator:${prop}`,
            params
          }).then((response)=>response.result).catch((err)=>{
            throw new Error(err.error);
          })
    });
  }
  getEmailCreator() {
    return new Proxy({
      __kind: 'getEmailCreator'
    }, {
      get: (_target, prop)=>(...params)=>prop === 'toJSON' ? {} : this.senderFn({
            method: `accessor:getModifier:getCreator:getEmailCreator:${prop}`,
            params
          }).then((response)=>response.result).catch((err)=>{
            throw new Error(err.error);
          })
    });
  }
  getBlockBuilder() {
    return new BlockBuilder();
  }
  startMessage(data) {
    if (data) {
      delete data.id;
    }
    return new MessageBuilder(data);
  }
  startLivechatMessage(data) {
    if (data) {
      delete data.id;
    }
    return new LivechatMessageBuilder(data);
  }
  startRoom(data) {
    if (data) {
      // @ts-ignore - this has been imported from the Apps-Engine
      delete data.id;
    }
    return new RoomBuilder(data);
  }
  startDiscussion(data) {
    if (data) {
      delete data.id;
    }
    return new DiscussionBuilder(data);
  }
  startVideoConference(data) {
    return new VideoConferenceBuilder(data);
  }
  startBotUser(data) {
    if (data) {
      delete data.id;
      const { roles } = data;
      if (roles?.length) {
        const hasRole = roles.map((role)=>role.toLocaleLowerCase()).some((role)=>role === 'admin' || role === 'owner' || role === 'moderator');
        if (hasRole) {
          throw new Error('Invalid role assigned to the user. Should not be admin, owner or moderator.');
        }
      }
      if (!data.type) {
        data.type = UserType.BOT;
      }
    }
    return new UserBuilder(data);
  }
  finish(builder) {
    switch(builder.kind){
      case RocketChatAssociationModel.MESSAGE:
        return this._finishMessage(builder);
      case RocketChatAssociationModel.LIVECHAT_MESSAGE:
        return this._finishLivechatMessage(builder);
      case RocketChatAssociationModel.ROOM:
        return this._finishRoom(builder);
      case RocketChatAssociationModel.DISCUSSION:
        return this._finishDiscussion(builder);
      case RocketChatAssociationModel.VIDEO_CONFERENCE:
        return this._finishVideoConference(builder);
      case RocketChatAssociationModel.USER:
        return this._finishUser(builder);
      default:
        throw new Error('Invalid builder passed to the ModifyCreator.finish function.');
    }
  }
  async _finishMessage(builder) {
    const result = builder.getMessage();
    delete result.id;
    if (!result.sender || !result.sender.id) {
      const response = await this.senderFn({
        method: 'bridges:getUserBridge:doGetAppUser',
        params: [
          'APP_ID'
        ]
      });
      const appUser = response.result;
      if (!appUser) {
        throw new Error('Invalid sender assigned to the message.');
      }
      result.sender = appUser;
    }
    if (result.blocks?.length) {
      // Can we move this elsewhere? This AppObjectRegistry usage doesn't really belong here, but where?
      result.blocks = UIHelper.assignIds(result.blocks, AppObjectRegistry.get('id') || '');
    }
    const response = await this.senderFn({
      method: 'bridges:getMessageBridge:doCreate',
      params: [
        result,
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
  async _finishLivechatMessage(builder) {
    if (builder.getSender() && !builder.getVisitor()) {
      return this._finishMessage(builder.getMessageBuilder());
    }
    const result = builder.getMessage();
    delete result.id;
    if (!result.token && (!result.visitor || !result.visitor.token)) {
      throw new Error('Invalid visitor sending the message');
    }
    result.token = result.visitor ? result.visitor.token : result.token;
    const response = await this.senderFn({
      method: 'bridges:getLivechatBridge:doCreateMessage',
      params: [
        result,
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
  async _finishRoom(builder) {
    const result = builder.getRoom();
    delete result.id;
    if (!result.type) {
      throw new Error('Invalid type assigned to the room.');
    }
    if (result.type !== RoomType.LIVE_CHAT) {
      if (!result.creator || !result.creator.id) {
        throw new Error('Invalid creator assigned to the room.');
      }
    }
    if (result.type !== RoomType.DIRECT_MESSAGE) {
      if (result.type !== RoomType.LIVE_CHAT) {
        if (!result.slugifiedName || !result.slugifiedName.trim()) {
          throw new Error('Invalid slugifiedName assigned to the room.');
        }
      }
      if (!result.displayName || !result.displayName.trim()) {
        throw new Error('Invalid displayName assigned to the room.');
      }
    }
    const response = await this.senderFn({
      method: 'bridges:getRoomBridge:doCreate',
      params: [
        result,
        builder.getMembersToBeAddedUsernames(),
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
  async _finishDiscussion(builder) {
    const room = builder.getRoom();
    delete room.id;
    if (!room.creator || !room.creator.id) {
      throw new Error('Invalid creator assigned to the discussion.');
    }
    if (!room.slugifiedName || !room.slugifiedName.trim()) {
      throw new Error('Invalid slugifiedName assigned to the discussion.');
    }
    if (!room.displayName || !room.displayName.trim()) {
      throw new Error('Invalid displayName assigned to the discussion.');
    }
    if (!room.parentRoom || !room.parentRoom.id) {
      throw new Error('Invalid parentRoom assigned to the discussion.');
    }
    const response = await this.senderFn({
      method: 'bridges:getRoomBridge:doCreateDiscussion',
      params: [
        room,
        builder.getParentMessage(),
        builder.getReply(),
        builder.getMembersToBeAddedUsernames(),
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
  async _finishVideoConference(builder) {
    const videoConference = builder.getVideoConference();
    if (!videoConference.createdBy) {
      throw new Error('Invalid creator assigned to the video conference.');
    }
    if (!videoConference.providerName?.trim()) {
      throw new Error('Invalid provider name assigned to the video conference.');
    }
    if (!videoConference.rid) {
      throw new Error('Invalid roomId assigned to the video conference.');
    }
    const response = await this.senderFn({
      method: 'bridges:getVideoConferenceBridge:doCreate',
      params: [
        videoConference,
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
  async _finishUser(builder) {
    const user = builder.getUser();
    const response = await this.senderFn({
      method: 'bridges:getUserBridge:doCreate',
      params: [
        user,
        AppObjectRegistry.get('id')
      ]
    });
    return String(response.result);
  }
}
//# sourceMappingURL=data:application/json;base64,