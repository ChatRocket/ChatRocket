"use strict";(self.webpackChunk_rocket_chat_meteor=self.webpackChunk_rocket_chat_meteor||[]).push([[9336],{"./client/lib/voip/parseOutboundPhoneNumber.ts":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{X:function(){return parseOutboundPhoneNumber}});var parseOutboundPhoneNumber=function parseOutboundPhoneNumber(phoneNumber){return phoneNumber?phoneNumber.replace(/\*/g,"+"):""}},"./client/sidebar/footer/voip/VoipFooter.stories.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{InCall:function(){return InCall},IncomingCall:function(){return IncomingCall},NoEnterpriseLicence:function(){return NoEnterpriseLicence},OutboundCall:function(){return OutboundCall},__namedExportsOrder:function(){return __namedExportsOrder}});var _rocket_chat_fuselage__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@rocket.chat/fuselage/index.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_VoipFooter__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./client/sidebar/footer/voip/VoipFooter.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const callActions={mute:()=>({}),unmute:()=>({}),pause:()=>({}),resume:()=>({}),end:()=>({}),pickUp:()=>({}),reject:()=>({})},callerDefault={callerName:"",callerId:"+5551999999999",host:""};__webpack_exports__.default={title:"Sidebar/Footer/VoipFooter",component:_VoipFooter__WEBPACK_IMPORTED_MODULE_2__.m,parameters:{controls:{expanded:!0}},args:{isEnterprise:!0},argTypes:{caller:{control:!1},callerState:{control:!1},callActions:{control:!1},title:{control:!1},subtitle:{control:!1},muted:{control:!1},paused:{control:!1},toggleMic:{control:!1},togglePause:{control:!1},tooltips:{control:!1},createRoom:{control:!1},openRoom:{control:!1},callsInQueue:{control:!1},dispatchEvent:{control:!1},openedRoomInfo:{control:!1},anonymousText:{control:!1},options:{control:!1}}};const VoipFooterTemplate=args=>{const[muted,toggleMic]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[paused,togglePause]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return react__WEBPACK_IMPORTED_MODULE_1__.createElement(_rocket_chat_fuselage__WEBPACK_IMPORTED_MODULE_0__.Box,{maxWidth:"x300",bg:"dark",borderRadius:"x4"},react__WEBPACK_IMPORTED_MODULE_1__.createElement(_VoipFooter__WEBPACK_IMPORTED_MODULE_2__.m,_extends({},args,{callActions:callActions,subtitle:(state=args.callerState,{IN_CALL:"In Progress",OFFER_RECEIVED:"Ringing",OFFER_SENT:"Calling",ON_HOLD:"On Hold"}[state]||""),muted:muted,paused:paused,toggleMic:toggleMic,togglePause:togglePause,createRoom:async()=>"",openRoom:()=>"",callsInQueue:"2 Calls In Queue",dispatchEvent:()=>null,openedRoomInfo:{v:{token:""},rid:""},options:{deviceSettings:{label:react__WEBPACK_IMPORTED_MODULE_1__.createElement(_rocket_chat_fuselage__WEBPACK_IMPORTED_MODULE_0__.Box,{alignItems:"center",display:"flex"},react__WEBPACK_IMPORTED_MODULE_1__.createElement(_rocket_chat_fuselage__WEBPACK_IMPORTED_MODULE_0__.Icon,{mie:4,name:"customize",size:"x16"}),"Device Settings")}}})));var state},IncomingCall=VoipFooterTemplate.bind({});IncomingCall.args={title:"Sales Department",callerState:"OFFER_RECEIVED",caller:callerDefault};const OutboundCall=VoipFooterTemplate.bind({});OutboundCall.args={title:"Phone Call",callerState:"OFFER_SENT",caller:{callerName:"",callerId:"+5551999999999",host:""}};const InCall=VoipFooterTemplate.bind({});InCall.args={title:"Sales Department",callerState:"IN_CALL",caller:callerDefault};const NoEnterpriseLicence=VoipFooterTemplate.bind({});NoEnterpriseLicence.args={title:"Sales Department",callerState:"IN_CALL",isEnterprise:!1,caller:callerDefault};const __namedExportsOrder=["IncomingCall","OutboundCall","InCall","NoEnterpriseLicence"];IncomingCall.parameters={...IncomingCall.parameters,docs:{...IncomingCall.parameters?.docs,source:{originalSource:"args => {\n  const [muted, toggleMic] = useState(false);\n  const [paused, togglePause] = useState(false);\n  const getSubtitle = (state: VoIpCallerInfo['state']): string => {\n    const subtitles: Record<string, string> = {\n      IN_CALL: 'In Progress',\n      OFFER_RECEIVED: 'Ringing',\n      OFFER_SENT: 'Calling',\n      ON_HOLD: 'On Hold'\n    };\n    return subtitles[state] || '';\n  };\n  return <Box maxWidth='x300' bg='dark' borderRadius='x4'>\n            <VoipFooter {...args} callActions={callActions} subtitle={getSubtitle(args.callerState)} muted={muted} paused={paused} toggleMic={toggleMic} togglePause={togglePause} createRoom={async () => ''} openRoom={() => ''} callsInQueue='2 Calls In Queue' dispatchEvent={() => null} openedRoomInfo={{\n      v: {\n        token: ''\n      },\n      rid: ''\n    }} options={{\n      deviceSettings: {\n        label: <Box alignItems='center' display='flex'>\n                                <Icon mie={4} name='customize' size='x16' />\n                                Device Settings\n                            </Box>\n      }\n    }} />\n        </Box>;\n}",...IncomingCall.parameters?.docs?.source}}},OutboundCall.parameters={...OutboundCall.parameters,docs:{...OutboundCall.parameters?.docs,source:{originalSource:"args => {\n  const [muted, toggleMic] = useState(false);\n  const [paused, togglePause] = useState(false);\n  const getSubtitle = (state: VoIpCallerInfo['state']): string => {\n    const subtitles: Record<string, string> = {\n      IN_CALL: 'In Progress',\n      OFFER_RECEIVED: 'Ringing',\n      OFFER_SENT: 'Calling',\n      ON_HOLD: 'On Hold'\n    };\n    return subtitles[state] || '';\n  };\n  return <Box maxWidth='x300' bg='dark' borderRadius='x4'>\n            <VoipFooter {...args} callActions={callActions} subtitle={getSubtitle(args.callerState)} muted={muted} paused={paused} toggleMic={toggleMic} togglePause={togglePause} createRoom={async () => ''} openRoom={() => ''} callsInQueue='2 Calls In Queue' dispatchEvent={() => null} openedRoomInfo={{\n      v: {\n        token: ''\n      },\n      rid: ''\n    }} options={{\n      deviceSettings: {\n        label: <Box alignItems='center' display='flex'>\n                                <Icon mie={4} name='customize' size='x16' />\n                                Device Settings\n                            </Box>\n      }\n    }} />\n        </Box>;\n}",...OutboundCall.parameters?.docs?.source}}},InCall.parameters={...InCall.parameters,docs:{...InCall.parameters?.docs,source:{originalSource:"args => {\n  const [muted, toggleMic] = useState(false);\n  const [paused, togglePause] = useState(false);\n  const getSubtitle = (state: VoIpCallerInfo['state']): string => {\n    const subtitles: Record<string, string> = {\n      IN_CALL: 'In Progress',\n      OFFER_RECEIVED: 'Ringing',\n      OFFER_SENT: 'Calling',\n      ON_HOLD: 'On Hold'\n    };\n    return subtitles[state] || '';\n  };\n  return <Box maxWidth='x300' bg='dark' borderRadius='x4'>\n            <VoipFooter {...args} callActions={callActions} subtitle={getSubtitle(args.callerState)} muted={muted} paused={paused} toggleMic={toggleMic} togglePause={togglePause} createRoom={async () => ''} openRoom={() => ''} callsInQueue='2 Calls In Queue' dispatchEvent={() => null} openedRoomInfo={{\n      v: {\n        token: ''\n      },\n      rid: ''\n    }} options={{\n      deviceSettings: {\n        label: <Box alignItems='center' display='flex'>\n                                <Icon mie={4} name='customize' size='x16' />\n                                Device Settings\n                            </Box>\n      }\n    }} />\n        </Box>;\n}",...InCall.parameters?.docs?.source}}},NoEnterpriseLicence.parameters={...NoEnterpriseLicence.parameters,docs:{...NoEnterpriseLicence.parameters?.docs,source:{originalSource:"args => {\n  const [muted, toggleMic] = useState(false);\n  const [paused, togglePause] = useState(false);\n  const getSubtitle = (state: VoIpCallerInfo['state']): string => {\n    const subtitles: Record<string, string> = {\n      IN_CALL: 'In Progress',\n      OFFER_RECEIVED: 'Ringing',\n      OFFER_SENT: 'Calling',\n      ON_HOLD: 'On Hold'\n    };\n    return subtitles[state] || '';\n  };\n  return <Box maxWidth='x300' bg='dark' borderRadius='x4'>\n            <VoipFooter {...args} callActions={callActions} subtitle={getSubtitle(args.callerState)} muted={muted} paused={paused} toggleMic={toggleMic} togglePause={togglePause} createRoom={async () => ''} openRoom={() => ''} callsInQueue='2 Calls In Queue' dispatchEvent={() => null} openedRoomInfo={{\n      v: {\n        token: ''\n      },\n      rid: ''\n    }} options={{\n      deviceSettings: {\n        label: <Box alignItems='center' display='flex'>\n                                <Icon mie={4} name='customize' size='x16' />\n                                Device Settings\n                            </Box>\n      }\n    }} />\n        </Box>;\n}",...NoEnterpriseLicence.parameters?.docs?.source}}}}}]);