{"code":"function module(n,e,t){t.link(\"@babel/runtime/helpers/slicedToArray\",{default:function(n){o=n}},0),t.export({useDialPad:function(){return f}}),t.link(\"react\",{useCallback:function(n){u=n},useEffect:function(n){i=n},useState:function(n){a=n}},0),t.link(\"react-hook-form\",{useForm:function(n){l=n}},1),t.link(\"react-i18next\",{useTranslation:function(n){r=n}},2),t.link(\"../../../../hooks/useDialModal\",{useDialModal:function(n){s=n}},3),t.link(\"../../../../hooks/useOutboundDialer\",{useOutboundDialer:function(n){c=n}},4);var o,u,i,a,l,r,s,c,f=function(n){var e,t=n.initialValue,f=n.initialErrorMessage,h=r().t,d=c(),p=s().closeDialModal,k=l({defaultValues:{PhoneInput:t||\"\"}}),P=k.setFocus,g=k.register,m=k.setValue,D=k.setError,I=k.clearErrors,C=k.watch,b=k.formState,y=b.errors,B=b.isDirty,E=g(\"PhoneInput\"),_=E.ref,v=E.onChange,M=C(\"PhoneInput\"),w=a(!0),O=o(w,2),S=O[0],V=O[1],x=u(function(){I(),m(\"PhoneInput\",M.slice(0,-1),{shouldDirty:!0})},[I,m,M]),F=u(function(n){I(),m(\"PhoneInput\",M+n,{shouldDirty:!0})},[I,m,M]),T=u(function(n){\"+\"===n&&m(\"PhoneInput\",M+n)},[m,M]),A=u(function(){if(!d)return D(\"PhoneInput\",{message:h(\"Something_went_wrong_try_again_later\")});d.makeCall(M),p()},[d,D,h,M,p]),L=u(function(n){return v(n)},[v]);return i(function(){V(!M)},[M]),i(function(){P(\"PhoneInput\")},[P]),{inputName:\"PhoneInput\",inputRef:_,inputError:B?null===(e=y.PhoneInput)||void 0===e?void 0:e.message:f,isButtonDisabled:S,handleOnChange:L,handleBackspaceClick:x,handlePadButtonClick:F,handlePadButtonLongPressed:T,handleCallButtonClick:A}}}","map":"{\"version\":3,\"sources\":[\"client/voip/modal/DialPad/hooks/useDialPad.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { ChangeEvent, RefCallback } from 'react';\\nimport { useCallback, useEffect, useState } from 'react';\\nimport { useForm } from 'react-hook-form';\\nimport { useTranslation } from 'react-i18next';\\n\\nimport { useDialModal } from '../../../../hooks/useDialModal';\\nimport { useOutboundDialer } from '../../../../hooks/useOutboundDialer';\\nimport type { PadDigit } from '../Pad';\\n\\ntype DialPadStateHandlers = {\\n\\tinputName: string;\\n\\tinputRef: RefCallback<HTMLInputElement>;\\n\\tinputError: string | undefined;\\n\\tisButtonDisabled: boolean;\\n\\thandleOnChange: (e: ChangeEvent<HTMLInputElement>) => void;\\n\\thandleBackspaceClick: () => void;\\n\\thandlePadButtonClick: (digit: PadDigit[0]) => void;\\n\\thandlePadButtonLongPressed: (digit: PadDigit[1]) => void;\\n\\thandleCallButtonClick: () => void;\\n};\\n\\ntype DialPadProps = {\\n\\tinitialValue?: string;\\n\\tinitialErrorMessage?: string;\\n};\\n\\nexport const useDialPad = ({ initialValue, initialErrorMessage }: DialPadProps): DialPadStateHandlers => {\\n\\tconst { t } = useTranslation();\\n\\tconst outboundClient = useOutboundDialer();\\n\\tconst { closeDialModal } = useDialModal();\\n\\n\\tconst {\\n\\t\\tsetFocus,\\n\\t\\tregister,\\n\\t\\tsetValue,\\n\\t\\tsetError,\\n\\t\\tclearErrors,\\n\\t\\twatch,\\n\\t\\tformState: { errors, isDirty },\\n\\t} = useForm<{ PhoneInput: string }>({\\n\\t\\tdefaultValues: {\\n\\t\\t\\tPhoneInput: initialValue || '',\\n\\t\\t},\\n\\t});\\n\\n\\tconst { ref, onChange } = register('PhoneInput');\\n\\n\\tconst value = watch('PhoneInput');\\n\\n\\tconst [disabled, setDisabled] = useState(true);\\n\\n\\tconst handleBackspaceClick = useCallback((): void => {\\n\\t\\tclearErrors();\\n\\t\\tsetValue('PhoneInput', value.slice(0, -1), { shouldDirty: true });\\n\\t}, [clearErrors, setValue, value]);\\n\\n\\tconst handlePadButtonClick = useCallback(\\n\\t\\t(digit: PadDigit[0]): void => {\\n\\t\\t\\tclearErrors();\\n\\n\\t\\t\\tsetValue('PhoneInput', value + digit, { shouldDirty: true });\\n\\t\\t},\\n\\t\\t[clearErrors, setValue, value],\\n\\t);\\n\\n\\tconst handlePadButtonLongPressed = useCallback(\\n\\t\\t(digit: PadDigit[1]): void => {\\n\\t\\t\\tif (digit !== '+') {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tsetValue('PhoneInput', value + digit);\\n\\t\\t},\\n\\t\\t[setValue, value],\\n\\t);\\n\\n\\tconst handleCallButtonClick = useCallback((): void => {\\n\\t\\tif (!outboundClient) {\\n\\t\\t\\treturn setError('PhoneInput', { message: t('Something_went_wrong_try_again_later') });\\n\\t\\t}\\n\\n\\t\\toutboundClient.makeCall(value);\\n\\t\\tcloseDialModal();\\n\\t}, [outboundClient, setError, t, value, closeDialModal]);\\n\\n\\tconst handleOnChange = useCallback((e) => onChange(e), [onChange]);\\n\\n\\tuseEffect(() => {\\n\\t\\tsetDisabled(!value);\\n\\t}, [value]);\\n\\n\\tuseEffect(() => {\\n\\t\\tsetFocus('PhoneInput');\\n\\t}, [setFocus]);\\n\\n\\treturn {\\n\\t\\tinputName: 'PhoneInput',\\n\\t\\tinputRef: ref,\\n\\t\\tinputError: isDirty ? errors.PhoneInput?.message : initialErrorMessage,\\n\\t\\tisButtonDisabled: disabled,\\n\\t\\thandleOnChange,\\n\\t\\thandleBackspaceClick,\\n\\t\\thandlePadButtonClick,\\n\\t\\thandlePadButtonLongPressed,\\n\\t\\thandleCallButtonClick,\\n\\t};\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_slicedToArray\",\"export\",\"useDialPad\",\"useCallback\",\"useEffect\",\"useState\",\"useForm\",\"useTranslation\",\"useDialModal\",\"useOutboundDialer\",\"_ref\",\"_errors$PhoneInput\",\"initialValue\",\"initialErrorMessage\",\"t\",\"_useTranslation\",\"outboundClient\",\"closeDialModal\",\"_useDialModal\",\"_useForm\",\"defaultValues\",\"PhoneInput\",\"setFocus\",\"register\",\"setValue\",\"setError\",\"clearErrors\",\"watch\",\"_useForm$formState\",\"formState\",\"errors\",\"isDirty\",\"_register\",\"ref\",\"onChange\",\"value\",\"_useState\",\"_useState2\",\"disabled\",\"setDisabled\",\"handleBackspaceClick\",\"slice\",\"shouldDirty\",\"handlePadButtonClick\",\"digit\",\"handlePadButtonLongPressed\",\"handleCallButtonClick\",\"message\",\"makeCall\",\"handleOnChange\",\"e\",\"inputName\",\"inputRef\",\"inputError\",\"isButtonDisabled\"],\"mappings\":\"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\"}"}