{"code":"function module(e,n,r){let o,t,l;r.export({compileSort:()=>c}),r.link(\"./bson\",{compareBSONValues(e){o=e}},0),r.link(\"./comparisons\",{isEmptyArray(e){t=e}},1),r.link(\"./lookups\",{createLookupFunction(e){l=e}},2);let i=e=>Array.isArray(e)?e.map(e=>\"string\"==typeof e?{lookup:l(e),ascending:!0}:{lookup:l(e[0]),ascending:\"desc\"!==e[1]}):Object.entries(e).map(e=>{let[n,r]=e;return{lookup:l(n),ascending:r>=0}}),a=(e,n)=>[].concat(...e.map(e=>Array.isArray(e)?t(e)?[void 0]:e:[e])).reduce((e,r)=>{let t=o(e,r);return n&&t>0||!n&&t<0?r:e}),c=e=>{let n=i(e);return 0===n.length?()=>0:(e,r)=>{for(let t=0;t<n.length;++t){let l=n[t],i=a(l.lookup(e),l.ascending),c=a(l.lookup(r),l.ascending),s=o(i,c);if(0!==s)return l.ascending?s:-s}return 0}}}","map":"{\"version\":3,\"sources\":[\"client/lib/minimongo/sort.ts\",\"<anon>\"],\"sourcesContent\":[\"import { compareBSONValues } from './bson';\\nimport { isEmptyArray } from './comparisons';\\nimport { createLookupFunction } from './lookups';\\nimport type { Sort } from './types';\\n\\nconst createSortSpecParts = <T>(\\n\\tspec: Sort,\\n): {\\n\\tlookup: (doc: T) => unknown[];\\n\\tascending: boolean;\\n}[] => {\\n\\tif (Array.isArray(spec)) {\\n\\t\\treturn spec.map((value) => {\\n\\t\\t\\tif (typeof value === 'string') {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\tlookup: createLookupFunction<T>(value),\\n\\t\\t\\t\\t\\tascending: true,\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tlookup: createLookupFunction<T>(value[0]),\\n\\t\\t\\t\\tascending: value[1] !== 'desc',\\n\\t\\t\\t};\\n\\t\\t});\\n\\t}\\n\\n\\treturn Object.entries(spec).map(([key, value]) => ({\\n\\t\\tlookup: createLookupFunction<T>(key),\\n\\t\\tascending: value >= 0,\\n\\t}));\\n};\\n\\nconst reduceValue = (branchValues: unknown[], ascending: boolean): unknown =>\\n\\t([] as unknown[])\\n\\t\\t.concat(\\n\\t\\t\\t...branchValues.map<unknown[]>((branchValue) => {\\n\\t\\t\\t\\tif (!Array.isArray(branchValue)) {\\n\\t\\t\\t\\t\\treturn [branchValue];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (isEmptyArray(branchValue)) {\\n\\t\\t\\t\\t\\treturn [undefined];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn branchValue;\\n\\t\\t\\t}),\\n\\t\\t)\\n\\t\\t.reduce((reduced, value) => {\\n\\t\\t\\tconst cmp = compareBSONValues(reduced, value);\\n\\t\\t\\tif ((ascending && cmp > 0) || (!ascending && cmp < 0)) {\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn reduced;\\n\\t\\t});\\n\\nexport const compileSort = (spec: Sort): ((a: unknown, b: unknown) => number) => {\\n\\tconst sortSpecParts = createSortSpecParts(spec);\\n\\n\\tif (sortSpecParts.length === 0) {\\n\\t\\treturn (): number => 0;\\n\\t}\\n\\n\\treturn (a: unknown, b: unknown): number => {\\n\\t\\tfor (let i = 0; i < sortSpecParts.length; ++i) {\\n\\t\\t\\tconst specPart = sortSpecParts[i];\\n\\t\\t\\tconst aValue = reduceValue(specPart.lookup(a), specPart.ascending);\\n\\t\\t\\tconst bValue = reduceValue(specPart.lookup(b), specPart.ascending);\\n\\t\\t\\tconst compare = compareBSONValues(aValue, bValue);\\n\\n\\t\\t\\tif (compare !== 0) {\\n\\t\\t\\t\\treturn specPart.ascending ? compare : -compare;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t};\\n};\\n\",null],\"names\":[\"compareBSONValues\",\"isEmptyArray\",\"createLookupFunction\",\"module\",\"export\",\"compileSort\",\"link\",\"v\",\"createSortSpecParts\",\"spec\",\"Array\",\"isArray\",\"map\",\"value\",\"lookup\",\"ascending\",\"Object\",\"entries\",\"_ref\",\"key\",\"reduceValue\",\"branchValues\",\"concat\",\"branchValue\",\"undefined\",\"reduce\",\"reduced\",\"cmp\",\"sortSpecParts\",\"length\",\"a\",\"b\",\"i\",\"specPart\",\"aValue\",\"bValue\",\"compare\"],\"mappings\":\"2BAA2CA,EAAAC,EAAAC,EAA3CC,EAAOC,MAAE,CAAA,CAAAC,YAAiBA,IAAEA,CAAc,GAACF,EAAAG,IAAA,CAAA,SAAA,CAAAN,kBAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gBAAA,CAAAL,aAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,YAAA,CAAAJ,qBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAK3C,IAAMC,EACLC,GAKA,AAAIC,MAAMC,OAAO,CAACF,GACVA,EAAKG,GAAG,CAAEC,GAChB,AAAI,AAAiB,UAAjB,OAAOA,EACH,CACNC,OAAQZ,EAAwBW,GAChCE,UAAW,CAAA,GAIN,CACND,OAAQZ,EAAwBW,CAAK,CAAC,EAAE,EACxCE,UAAWF,AAAa,SAAbA,CAAK,CAAC,EAAE,GAKfG,OAAOC,OAAO,CAACR,GAAMG,GAAG,CAACM,IAAA,GAAC,CAACC,EAAKN,EAAM,CAAAK,EAAA,MAAM,CAClDJ,OAAQZ,EAAwBiB,GAChCJ,UAAWF,GAAS,EACpB,GAGIO,EAAcA,CAACC,EAAyBN,IAC5C,EAAgB,CACfO,MAAM,IACHD,EAAaT,GAAG,CAAaW,GAC/B,AAAKb,MAAMC,OAAO,CAACY,GAIftB,EAAasB,GACT,CAACC,KAAAA,EAAU,CAGZD,EAPC,CAACA,EAAY,GAUtBE,MAAM,CAAC,CAACC,EAASb,KACjB,IAAMc,EAAM3B,EAAkB0B,EAASb,UACvC,AAAKE,GAAaY,EAAM,GAAO,CAACZ,GAAaY,EAAM,EAC3Cd,EAGDa,CACR,GAEWrB,EAAeI,IAC3B,IAAMmB,EAAgBpB,EAAoBC,UAE1C,AAAImB,AAAyB,IAAzBA,EAAcC,MAAM,CAChB,IAAc,EAGf,CAACC,EAAYC,KACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAcC,MAAM,CAAE,EAAEG,EAAG,CAC9C,IAAMC,EAAWL,CAAa,CAACI,EAAE,CAC3BE,EAASd,EAAYa,EAASnB,MAAM,CAACgB,GAAIG,EAASlB,SAAS,EAC3DoB,EAASf,EAAYa,EAASnB,MAAM,CAACiB,GAAIE,EAASlB,SAAS,EAC3DqB,EAAUpC,EAAkBkC,EAAQC,GAE1C,GAAIC,AAAY,IAAZA,EACH,OAAOH,EAASlB,SAAS,CAAGqB,EAAU,CAACA,CAEzC,CAEA,OAAO,CACR,CACD\"}"}