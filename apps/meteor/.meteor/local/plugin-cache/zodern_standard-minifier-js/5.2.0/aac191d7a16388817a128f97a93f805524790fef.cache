{"code":"function module(e,t,s){let a,i,r,n,l,o,d,c,m,u,p;let h=[\"editedBy\",\"editedAt\",\"emoji\",\"avatar\",\"alias\",\"customFields\",\"groupable\",\"attachments\",\"reactions\"];s.link(\"@babel/runtime/helpers/objectWithoutProperties\",{default(e){a=e}},0),s.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){i=e}},1),s.export({parseMessageTextToAstMarkdown:()=>g,parseMessageAttachment:()=>M,parseMessageAttachments:()=>v,removePossibleNullMessageValues:()=>k}),s.link(\"@rocket.chat/core-typings\",{isFileAttachment(e){r=e},isE2EEMessage(e){n=e},isOTRMessage(e){l=e},isOTRAckMessage(e){o=e},isQuoteAttachment(e){d=e},isTranslatedAttachment(e){c=e},isTranslatedMessage(e){m=e}},0),s.link(\"@rocket.chat/message-parser\",{parse(e){u=e}},1),s.link(\"../views/room/MessageList/lib/isParsedMessage\",{isParsedMessage(e){p=e}},2);let g=(e,t,s)=>{var a;let r=k(e),{showAutoTranslate:d,autoTranslateLanguage:c}=s,u=c&&m(r)&&r.translations,p=d(e),h=p&&u&&u[c]||r.msg;return i(i({},r),{},{md:n(e)||l(e)||o(e)||p?A(h,t):null!==(a=r.md)&&void 0!==a?a:A(h,t)},r.attachments&&{attachments:v(r.attachments,t,{autoTranslateLanguage:c,translated:p})})},M=(e,t,s)=>{var a,n,l;let{translated:o,autoTranslateLanguage:m}=s;if(!e.text&&!e.description)return e;d(e)&&e.attachments&&(e.attachments=v(e.attachments,t,s));let u=c(e)&&m&&(null==e?void 0:null===(a=e.translations)||void 0===a?void 0:a[m])||e.text||e.description||\"\";return r(e)&&e.description&&(e.descriptionMd=o?A(u,t):null!==(l=e.descriptionMd)&&void 0!==l?l:A(u,t)),i(i({},e),{},{md:o?A(u,t):null!==(n=e.md)&&void 0!==n?n:A(u,t)})},v=(e,t,s)=>e.map(e=>M(e,t,s)),b=e=>null!=e,k=e=>{let{editedBy:t,editedAt:s,emoji:r,avatar:n,alias:l,customFields:o,groupable:d,attachments:c,reactions:m}=e,u=a(e,h);return i(i(i(i(i(i(i(i(i(i({},u),b(t)&&{editedBy:t}),b(s)&&{editedAt:s}),b(r)&&{emoji:r}),b(n)&&{avatar:n}),b(l)&&{alias:l}),b(o)&&{customFields:o}),b(d)&&{groupable:d}),b(c)&&{attachments:c}),b(m)&&{reactions:m})},A=(e,t)=>{if(!e)return[];if(p(e))return e;let s=u(e,t),a=\"LINE_BREAK\"!==s[0].type?s:s.slice(1);return a}}","map":"{\"version\":3,\"sources\":[\"client/lib/parseMessageTextToAstMarkdown.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage, ITranslatedMessage, MessageAttachment } from '@rocket.chat/core-typings';\\nimport {\\n\\tisFileAttachment,\\n\\tisE2EEMessage,\\n\\tisOTRMessage,\\n\\tisOTRAckMessage,\\n\\tisQuoteAttachment,\\n\\tisTranslatedAttachment,\\n\\tisTranslatedMessage,\\n} from '@rocket.chat/core-typings';\\nimport type { Options, Root } from '@rocket.chat/message-parser';\\nimport { parse } from '@rocket.chat/message-parser';\\n\\nimport type { AutoTranslateOptions } from '../views/room/MessageList/hooks/useAutoTranslate';\\nimport { isParsedMessage } from '../views/room/MessageList/lib/isParsedMessage';\\n\\ntype WithRequiredProperty<Type, Key extends keyof Type> = Omit<Type, Key> & {\\n\\t[Property in Key]-?: Type[Property];\\n};\\n\\nexport type MessageWithMdEnforced<TMessage extends IMessage & Partial<ITranslatedMessage> = IMessage & Partial<ITranslatedMessage>> =\\n\\tWithRequiredProperty<TMessage, 'md'>;\\n/**\\n * Removes null values for known properties values.\\n * Adds a property `md` to the message with the parsed message if is not provided.\\n * if has `attachments` property, but attachment is missing `md` property, it will be added.\\n * if translation is enabled and message contains `translations` property, it will be replaced by the parsed message.\\n * @param message The message to be parsed.\\n * @param parseOptions The options to be used in the parser.\\n * @param autoTranslateOptions The auto translate options to be used in the parser.\\n * @returns message normalized.\\n */\\nexport const parseMessageTextToAstMarkdown = <\\n\\tTMessage extends IMessage & Partial<ITranslatedMessage> = IMessage & Partial<ITranslatedMessage>,\\n>(\\n\\tmessage: TMessage,\\n\\tparseOptions: Options,\\n\\tautoTranslateOptions: AutoTranslateOptions,\\n): MessageWithMdEnforced => {\\n\\tconst msg = removePossibleNullMessageValues(message);\\n\\tconst { showAutoTranslate, autoTranslateLanguage } = autoTranslateOptions;\\n\\tconst translations = autoTranslateLanguage && isTranslatedMessage(msg) && msg.translations;\\n\\tconst translated = showAutoTranslate(message);\\n\\n\\tconst text = (translated && translations && translations[autoTranslateLanguage]) || msg.msg;\\n\\n\\treturn {\\n\\t\\t...msg,\\n\\t\\tmd:\\n\\t\\t\\tisE2EEMessage(message) || isOTRMessage(message) || isOTRAckMessage(message) || translated\\n\\t\\t\\t\\t? textToMessageToken(text, parseOptions)\\n\\t\\t\\t\\t: msg.md ?? textToMessageToken(text, parseOptions),\\n\\t\\t...(msg.attachments && {\\n\\t\\t\\tattachments: parseMessageAttachments(msg.attachments, parseOptions, { autoTranslateLanguage, translated }),\\n\\t\\t}),\\n\\t};\\n};\\n\\nexport const parseMessageAttachment = <T extends MessageAttachment>(\\n\\tattachment: T,\\n\\tparseOptions: Options,\\n\\tautoTranslateOptions: { autoTranslateLanguage?: string; translated: boolean },\\n): T => {\\n\\tconst { translated, autoTranslateLanguage } = autoTranslateOptions;\\n\\tif (!attachment.text && !attachment.description) {\\n\\t\\treturn attachment;\\n\\t}\\n\\n\\tif (isQuoteAttachment(attachment) && attachment.attachments) {\\n\\t\\tattachment.attachments = parseMessageAttachments(attachment.attachments, parseOptions, autoTranslateOptions);\\n\\t}\\n\\n\\tconst text =\\n\\t\\t(isTranslatedAttachment(attachment) && autoTranslateLanguage && attachment?.translations?.[autoTranslateLanguage]) ||\\n\\t\\tattachment.text ||\\n\\t\\tattachment.description ||\\n\\t\\t'';\\n\\n\\tif (isFileAttachment(attachment) && attachment.description) {\\n\\t\\tattachment.descriptionMd = translated\\n\\t\\t\\t? textToMessageToken(text, parseOptions)\\n\\t\\t\\t: attachment.descriptionMd ?? textToMessageToken(text, parseOptions);\\n\\t}\\n\\n\\treturn {\\n\\t\\t...attachment,\\n\\t\\tmd: translated ? textToMessageToken(text, parseOptions) : attachment.md ?? textToMessageToken(text, parseOptions),\\n\\t};\\n};\\n\\nexport const parseMessageAttachments = <T extends MessageAttachment>(\\n\\tattachments: T[],\\n\\tparseOptions: Options,\\n\\tautoTranslateOptions: { autoTranslateLanguage?: string; translated: boolean },\\n): T[] => attachments.map((attachment) => parseMessageAttachment(attachment, parseOptions, autoTranslateOptions));\\n\\nconst isNotNullOrUndefined = (value: unknown): boolean => value !== null && value !== undefined;\\n\\n// In a previous version of the app, some values were being set to null.\\n// This is a workaround to remove those null values.\\n// A migration script should be created to remove this code.\\nexport const removePossibleNullMessageValues = <TMessage extends IMessage = IMessage>({\\n\\teditedBy,\\n\\teditedAt,\\n\\temoji,\\n\\tavatar,\\n\\talias,\\n\\tcustomFields,\\n\\tgroupable,\\n\\tattachments,\\n\\treactions,\\n\\t...message\\n}: any): TMessage => ({\\n\\t...message,\\n\\t...(isNotNullOrUndefined(editedBy) && { editedBy }),\\n\\t...(isNotNullOrUndefined(editedAt) && { editedAt }),\\n\\t...(isNotNullOrUndefined(emoji) && { emoji }),\\n\\t...(isNotNullOrUndefined(avatar) && { avatar }),\\n\\t...(isNotNullOrUndefined(alias) && { alias }),\\n\\t...(isNotNullOrUndefined(customFields) && { customFields }),\\n\\t...(isNotNullOrUndefined(groupable) && { groupable }),\\n\\t...(isNotNullOrUndefined(attachments) && { attachments }),\\n\\t...(isNotNullOrUndefined(reactions) && { reactions }),\\n});\\n\\nconst textToMessageToken = (textOrRoot: string | Root, parseOptions: Options): Root => {\\n\\tif (!textOrRoot) {\\n\\t\\treturn [];\\n\\t}\\n\\n\\tif (isParsedMessage(textOrRoot)) {\\n\\t\\treturn textOrRoot;\\n\\t}\\n\\tconst parsedMessage = parse(textOrRoot, parseOptions);\\n\\n\\tconst parsedMessageCleaned = parsedMessage[0].type !== 'LINE_BREAK' ? parsedMessage : (parsedMessage.slice(1) as Root);\\n\\n\\treturn parsedMessageCleaned;\\n};\\n\",null],\"names\":[\"_objectWithoutProperties\",\"_objectSpread\",\"isFileAttachment\",\"isE2EEMessage\",\"isOTRMessage\",\"isOTRAckMessage\",\"isQuoteAttachment\",\"isTranslatedAttachment\",\"isTranslatedMessage\",\"parse\",\"isParsedMessage\",\"module\",\"link\",\"default\",\"v\",\"export\",\"parseMessageTextToAstMarkdown\",\"parseMessageAttachment\",\"parseMessageAttachments\",\"removePossibleNullMessageValues\",\"message\",\"parseOptions\",\"autoTranslateOptions\",\"_msg$md\",\"msg\",\"showAutoTranslate\",\"autoTranslateLanguage\",\"translations\",\"translated\",\"text\",\"md\",\"textToMessageToken\",\"attachments\",\"attachment\",\"_attachment$translati\",\"_attachment$md\",\"_attachment$descripti\",\"description\",\"descriptionMd\",\"map\",\"isNotNullOrUndefined\",\"value\",\"_ref\",\"editedBy\",\"editedAt\",\"emoji\",\"avatar\",\"alias\",\"customFields\",\"groupable\",\"reactions\",\"_excluded\",\"textOrRoot\",\"parsedMessage\",\"parsedMessageCleaned\",\"type\",\"slice\"],\"mappings\":\"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\"}"}