{"code":"function module(e,t,n){let o,l,r,s,i;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){o=e}},0),n.link(\"meteor/ddp-common\",{DDPCommon(e){l=e}},0),n.link(\"meteor/meteor\",{Meteor(e){r=e}},1),n.link(\"meteor/tracker\",{Tracker(e){s=e}},2),n.link(\"../../app/utils/client/lib/SDKClient\",{sdk(e){i=e}},3);let a=[\"setUserStatus\",\"logout\"],d=e=>{var t;let{msg:n,method:o,params:l}=e;return!!(\"method\"!==n||\"login\"===o&&null!==(t=l[0])&&void 0!==t&&t.resume||o.startsWith(\"UserPresence:\")||a.includes(o)||o.startsWith(\"stream-\"))};if(window.USE_REST_FOR_DDP_CALLS){var c;r.connection._send=(c=r.connection._send,function e(e){if(d(e))return c.call(this,e);let t=s.nonreactive(()=>r.userId()?\"method.call\":\"method.callAnon\"),n={message:l.stringifyDDP(o({},e))},a=t=>{this._methodInvokers[e.id]&&(this._livedata_data({msg:\"updated\",methods:[e.id]}),this.onMessage(t))},m=encodeURIComponent(e.method.replace(/\\//g,\":\"));i.rest.post(\"/v1/\".concat(t,\"/\").concat(m),n).then(t=>{let{message:n}=t;if(a(n),\"login\"===e.method){var o;let e=l.parseDDP(n);null!==(o=e.result)&&void 0!==o&&o.token&&r.loginWithToken(e.result.token)}}).catch(e=>{console.error(e)})})}}","map":"{\"version\":3,\"sources\":[\"client/meteorOverrides/ddpOverREST.ts\",\"<anon>\"],\"sourcesContent\":[\"import { DDPCommon } from 'meteor/ddp-common';\\nimport { Meteor } from 'meteor/meteor';\\nimport { Tracker } from 'meteor/tracker';\\n\\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\\n\\nconst bypassMethods: string[] = ['setUserStatus', 'logout'];\\n\\nconst shouldBypass = ({ msg, method, params }: Meteor.IDDPMessage): boolean => {\\n\\tif (msg !== 'method') {\\n\\t\\treturn true;\\n\\t}\\n\\n\\tif (method === 'login' && params[0]?.resume) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\tif (method.startsWith('UserPresence:') || bypassMethods.includes(method)) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\tif (method.startsWith('stream-')) {\\n\\t\\treturn true;\\n\\t}\\n\\n\\treturn false;\\n};\\n\\nconst withDDPOverREST = (_send: (this: Meteor.IMeteorConnection, message: Meteor.IDDPMessage) => void) => {\\n\\treturn function _sendOverREST(this: Meteor.IMeteorConnection, message: Meteor.IDDPMessage): void {\\n\\t\\tif (shouldBypass(message)) {\\n\\t\\t\\treturn _send.call(this, message);\\n\\t\\t}\\n\\n\\t\\tconst endpoint = Tracker.nonreactive(() => (!Meteor.userId() ? 'method.callAnon' : 'method.call'));\\n\\n\\t\\tconst restParams = {\\n\\t\\t\\tmessage: DDPCommon.stringifyDDP({ ...message }),\\n\\t\\t};\\n\\n\\t\\tconst processResult = (_message: string): void => {\\n\\t\\t\\t// Prevent error on reconnections and method retry.\\n\\t\\t\\t// On those cases the API will be called 2 times but\\n\\t\\t\\t// the handler will be deleted after the first execution.\\n\\t\\t\\tif (!this._methodInvokers[message.id]) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tthis._livedata_data({\\n\\t\\t\\t\\tmsg: 'updated',\\n\\t\\t\\t\\tmethods: [message.id],\\n\\t\\t\\t});\\n\\t\\t\\tthis.onMessage(_message);\\n\\t\\t};\\n\\n\\t\\tconst method = encodeURIComponent(message.method.replace(/\\\\//g, ':'));\\n\\n\\t\\tsdk.rest\\n\\t\\t\\t.post(`/v1/${endpoint}/${method}`, restParams)\\n\\t\\t\\t.then(({ message: _message }) => {\\n\\t\\t\\t\\tprocessResult(_message);\\n\\t\\t\\t\\tif (message.method === 'login') {\\n\\t\\t\\t\\t\\tconst parsedMessage = DDPCommon.parseDDP(_message) as { result?: { token?: string } };\\n\\t\\t\\t\\t\\tif (parsedMessage.result?.token) {\\n\\t\\t\\t\\t\\t\\tMeteor.loginWithToken(parsedMessage.result.token);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t})\\n\\t\\t\\t.catch((error) => {\\n\\t\\t\\t\\tconsole.error(error);\\n\\t\\t\\t});\\n\\t};\\n};\\n\\nif (window.USE_REST_FOR_DDP_CALLS) {\\n\\tMeteor.connection._send = withDDPOverREST(Meteor.connection._send);\\n}\\n\",null],\"names\":[\"_objectSpread\",\"DDPCommon\",\"Meteor\",\"Tracker\",\"sdk\",\"module\",\"link\",\"default\",\"v\",\"bypassMethods\",\"shouldBypass\",\"_ref\",\"_params$\",\"msg\",\"method\",\"params\",\"resume\",\"startsWith\",\"includes\",\"window\",\"USE_REST_FOR_DDP_CALLS\",\"_send\",\"connection\",\"_sendOverREST\",\"message\",\"call\",\"endpoint\",\"nonreactive\",\"userId\",\"restParams\",\"stringifyDDP\",\"processResult\",\"_message\",\"_methodInvokers\",\"id\",\"_livedata_data\",\"methods\",\"onMessage\",\"encodeURIComponent\",\"replace\",\"rest\",\"post\",\"concat\",\"then\",\"_ref2\",\"_parsedMessage$result\",\"parsedMessage\",\"parseDDP\",\"result\",\"token\",\"loginWithToken\",\"catch\",\"error\",\"console\"],\"mappings\":\"2BAAAA,EAAAC,EAA8CC,EAAAC,EAAAC,EAA5BC,EAAEC,IAAM,CAAA,uCAAoB,CAAAC,QAAAC,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAArCH,EAAWC,IAAA,CAAM,oBAAoB,CAAAL,UAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,gBAAA,CAAAJ,OAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,iBAAA,CAAAH,QAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,uCAAA,CAAAF,IAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAM9C,IAAMC,EAA0B,CAAC,gBAAiB,SAAS,CAErDC,EAAeC,IAAyD,IAAAC,EAAA,GAAxD,CAAEC,IAAAA,CAAG,CAAEC,OAAAA,CAAM,CAAEC,OAAAA,CAAAA,CAA4B,CAAAJ,WACpD,WAARE,GAIAC,AAAW,UAAXA,GAAkB,AAAa,OAAbF,CAAAA,EAAIG,CAAM,CAAC,EAAE,AAAD,GAACH,AAAA,KAAA,IAAAA,GAATA,EAAWI,MAAM,EAIvCF,EAAOG,UAAU,CAAC,kBAAoBR,EAAcS,QAAQ,CAACJ,IAI7DA,EAAOG,UAAU,CAAC,WAKvB,EA+CA,GAAIE,OAAOC,sBAAsB,CAAE,KA7CVC,CA8CxBnB,CAAAA,EAAOoB,UAAU,CAACD,KAAK,EA9CCA,EA8CkBnB,EAAOoB,UAAU,CAACD,KAAK,CA7C1D,SAASE,EAA8CC,CAA2B,EACxF,GAAId,EAAac,GAChB,OAAOH,EAAMI,IAAI,CAAC,IAAI,CAAED,GAGzB,IAAME,EAAWvB,EAAQwB,WAAW,CAAC,IAAO,AAACzB,EAAO0B,MAAM,GAAyB,cAApB,mBAEzDC,EAAa,CAClBL,QAASvB,EAAU6B,YAAY,CAAA9B,EAAA,CAAA,EAAMwB,KAGhCO,EAAiBC,IAIjB,IAAI,CAACC,eAAe,CAACT,EAAQU,EAAE,CAAC,GAGrC,IAAI,CAACC,cAAc,CAAC,CACnBtB,IAAK,UACLuB,QAAS,CAACZ,EAAQU,EAAE,CAAA,GAErB,IAAI,CAACG,SAAS,CAACL,GAChB,EAEMlB,EAASwB,mBAAmBd,EAAQV,MAAM,CAACyB,OAAO,CAAC,MAAO,MAEhEnC,EAAIoC,IAAI,CACNC,IAAI,CAAA,OAAAC,MAAA,CAAQhB,EAAQ,KAAAgB,MAAA,CAAI5B,GAAUe,GAClCc,IAAI,CAACC,IAA0B,GAAzB,CAAEpB,QAASQ,CAAAA,CAAU,CAAAY,EAE3B,GADAb,EAAcC,GACVR,AAAmB,UAAnBA,EAAQV,MAAM,CAAc,CAAA,IAAA+B,EAC/B,IAAMC,EAAgB7C,EAAU8C,QAAQ,CAACf,EACjB,QAAxBa,CAAAA,EAAIC,EAAcE,MAAM,AAANA,GAAMH,AAAA,KAAA,IAAAA,GAApBA,EAAsBI,KAAK,EAC9B/C,EAAOgD,cAAc,CAACJ,EAAcE,MAAM,CAACC,KAAK,CAElD,CACD,GACCE,KAAK,CAAEC,IACPC,QAAQD,KAAK,CAACA,EACf,EACF,EAKD\"}"}