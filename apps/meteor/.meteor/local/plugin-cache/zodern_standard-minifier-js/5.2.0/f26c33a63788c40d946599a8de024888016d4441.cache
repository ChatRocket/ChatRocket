{"code":"function module(e,n,t){let o,i,c;t.link(\"meteor/meteor\",{Meteor(e){o=e}},0),t.link(\"../app/utils/client/lib/SDKClient\",{sdk(e){i=e}},1);let a=new Promise(e=>{c=e});(async function e(){if(!window.ECDH_Enabled)return o.connection._stream.allowConnection(),c();let{ClientSession:e}=await t.dynamicImport(\"../app/ecdh/client/ClientSession\"),n=new e,i=await n.init();try{let e=await fetch(\"/api/ecdh_proxy/initEncryptedSession\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({clientPublicKey:i})});if(200!==e.status)return c(),o.connection._stream.allowConnection();let t=await e.json();if(!1===t.success)return c(),o.connection._stream.allowConnection();await n.setServerKey(t.publicKeyString),c(n),function(e){o.connection._stream.allowConnection();let n=o.connection._stream.socket._didMessage.bind(o.connection._stream.socket),t=o.connection._stream.socket.send.bind(o.connection._stream.socket);o.connection._stream.socket._didMessage=async t=>{let o=await e.decrypt(t);o.split(\"\\n\").forEach(e=>n(e))},o.connection._stream.socket.send=async n=>{t(await e.encrypt(n))}}(n)}catch(e){console.log(e),c(),o.connection._stream.allowConnection()}})(),i.rest.use(async(e,n)=>{let t=await a;if(!t)return n(...e);let o=await (await n(...e)).text(),i=await t.decrypt(o),c=JSON.parse(i);return c})}","map":"{\"version\":3,\"sources\":[\"client/ecdh.ts\",\"<anon>\"],\"sourcesContent\":[\"import { Meteor } from 'meteor/meteor';\\n\\nimport type { ClientSession } from '../app/ecdh/client/ClientSession';\\nimport { sdk } from '../app/utils/client/lib/SDKClient';\\n\\nlet resolveSession: (value: ClientSession | void) => void;\\nconst sessionPromise = new Promise<ClientSession | void>((resolve) => {\\n\\tresolveSession = resolve;\\n});\\n\\nfunction init(session: ClientSession): void {\\n\\tMeteor.connection._stream.allowConnection();\\n\\n\\tconst _didMessage = Meteor.connection._stream.socket._didMessage.bind(Meteor.connection._stream.socket);\\n\\tconst send = Meteor.connection._stream.socket.send.bind(Meteor.connection._stream.socket);\\n\\n\\tMeteor.connection._stream.socket._didMessage = async (data): Promise<void> => {\\n\\t\\tconst decryptedData = await session.decrypt(data);\\n\\t\\tdecryptedData.split('\\\\n').forEach((d) => _didMessage(d));\\n\\t};\\n\\n\\tMeteor.connection._stream.socket.send = async (data): Promise<void> => {\\n\\t\\tsend(await session.encrypt(data));\\n\\t};\\n}\\n\\nasync function initEncryptedSession(): Promise<void> {\\n\\tif (!window.ECDH_Enabled) {\\n\\t\\tMeteor.connection._stream.allowConnection();\\n\\t\\treturn resolveSession();\\n\\t}\\n\\tconst { ClientSession } = await import('../app/ecdh/client/ClientSession');\\n\\tconst session = new ClientSession();\\n\\tconst clientPublicKey = await session.init();\\n\\n\\ttry {\\n\\t\\tconst response = await fetch('/api/ecdh_proxy/initEncryptedSession', {\\n\\t\\t\\tmethod: 'POST',\\n\\t\\t\\theaders: {\\n\\t\\t\\t\\t'Content-Type': 'application/json',\\n\\t\\t\\t},\\n\\t\\t\\tbody: JSON.stringify({ clientPublicKey }),\\n\\t\\t});\\n\\n\\t\\tif (response.status !== 200) {\\n\\t\\t\\tresolveSession();\\n\\t\\t\\treturn Meteor.connection._stream.allowConnection();\\n\\t\\t}\\n\\n\\t\\tconst data = await response.json();\\n\\n\\t\\tif (data.success === false) {\\n\\t\\t\\tresolveSession();\\n\\t\\t\\treturn Meteor.connection._stream.allowConnection();\\n\\t\\t}\\n\\n\\t\\tawait session.setServerKey(data.publicKeyString);\\n\\t\\tresolveSession(session);\\n\\t\\tinit(session);\\n\\t} catch (e) {\\n\\t\\tconsole.log(e);\\n\\t\\tresolveSession();\\n\\t\\tMeteor.connection._stream.allowConnection();\\n\\t}\\n}\\n\\ninitEncryptedSession();\\nsdk.rest.use(async (request, next) => {\\n\\tconst session = await sessionPromise;\\n\\n\\tif (!session) {\\n\\t\\treturn next(...request);\\n\\t}\\n\\tconst result = await (await next(...request)).text();\\n\\tconst decrypted = await session.decrypt(result);\\n\\tconst parsed = JSON.parse(decrypted);\\n\\treturn parsed;\\n});\\n\",null],\"names\":[\"Meteor\",\"sdk\",\"resolveSession\",\"module\",\"link\",\"v\",\"sessionPromise\",\"Promise\",\"resolve\",\"initEncryptedSession\",\"window\",\"ECDH_Enabled\",\"connection\",\"_stream\",\"allowConnection\",\"ClientSession\",\"dynamicImport\",\"session\",\"clientPublicKey\",\"init\",\"response\",\"fetch\",\"method\",\"headers\",\"body\",\"JSON\",\"stringify\",\"status\",\"data\",\"json\",\"success\",\"setServerKey\",\"publicKeyString\",\"_didMessage\",\"socket\",\"bind\",\"send\",\"decryptedData\",\"decrypt\",\"split\",\"forEach\",\"d\",\"encrypt\",\"e\",\"console\",\"log\",\"rest\",\"use\",\"request\",\"next\",\"result\",\"text\",\"decrypted\",\"parsed\",\"parse\"],\"mappings\":\"2BAAAA,EAAuCC,EAKnCC,EALKC,EAAQC,IAAA,CAAM,gBAAgB,CAAAJ,OAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,oCAAA,CAAAH,IAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAMvC,IAAMC,EAAiB,IAAIC,QAA+BC,IACzDN,EAAiBM,CAClB,GA0DAC,AAxCA,CAAA,eAAeA,IACd,GAAI,CAACC,OAAOC,YAAY,CAEvB,OADAX,EAAOY,UAAU,CAACC,OAAO,CAACC,eAAe,GAClCZ,IAER,GAAM,CAAEa,cAAAA,CAAAA,CAAe,CAAG,MAAMZ,EAAAa,aAAA,CAAO,oCACjCC,EAAU,IAAIF,EACdG,EAAkB,MAAMD,EAAQE,IAAI,GAE1C,GAAI,CACH,IAAMC,EAAW,MAAMC,MAAM,uCAAwC,CACpEC,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,SAAS,CAAC,CAAER,gBAAAA,CAAe,KAGvC,GAAIE,AAAoB,MAApBA,EAASO,MAAM,CAElB,OADAzB,IACOF,EAAOY,UAAU,CAACC,OAAO,CAACC,eAAe,GAGjD,IAAMc,EAAO,MAAMR,EAASS,IAAI,GAEhC,GAAID,AAAiB,CAAA,IAAjBA,EAAKE,OAAO,CAEf,OADA5B,IACOF,EAAOY,UAAU,CAACC,OAAO,CAACC,eAAe,EAGjD,OAAMG,EAAQc,YAAY,CAACH,EAAKI,eAAe,EAC/C9B,EAAee,GACfE,AAhDF,SAAcF,CAAsB,EACnCjB,EAAOY,UAAU,CAACC,OAAO,CAACC,eAAe,GAEzC,IAAMmB,EAAcjC,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,CAACD,WAAW,CAACE,IAAI,CAACnC,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,EAChGE,EAAOpC,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,CAACE,IAAI,CAACD,IAAI,CAACnC,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,CAExFlC,CAAAA,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,CAACD,WAAW,CAAG,MAAOL,IACrD,IAAMS,EAAgB,MAAMpB,EAAQqB,OAAO,CAACV,GAC5CS,EAAcE,KAAK,CAAC,MAAMC,OAAO,CAAEC,GAAMR,EAAYQ,GACtD,EAEAzC,EAAOY,UAAU,CAACC,OAAO,CAACqB,MAAM,CAACE,IAAI,CAAG,MAAOR,IAC9CQ,EAAK,MAAMnB,EAAQyB,OAAO,CAACd,GAC5B,CACD,EAkCOX,EACN,CAAE,MAAO0B,EAAG,CACXC,QAAQC,GAAG,CAACF,GACZzC,IACAF,EAAOY,UAAU,CAACC,OAAO,CAACC,eAAe,EAC1C,CACD,CAAA,IAGAb,EAAI6C,IAAI,CAACC,GAAG,CAAC,MAAOC,EAASC,KAC5B,IAAMhC,EAAU,MAAMX,EAEtB,GAAI,CAACW,EACJ,OAAOgC,KAAQD,GAEhB,IAAME,EAAS,MAAM,AAAC,CAAA,MAAMD,KAAQD,EAAO,EAAGG,IAAI,GAC5CC,EAAY,MAAMnC,EAAQqB,OAAO,CAACY,GAClCG,EAAS5B,KAAK6B,KAAK,CAACF,GAC1B,OAAOC,CACR\"}"}