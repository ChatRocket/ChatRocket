{"code":"function module(e,n,r){r.link(\"@babel/runtime/helpers/slicedToArray\",{default:function(e){u=e}},0),r.export({CallContext:function(){return f},useIsVoipEnterprise:function(){return d},useIsCallEnabled:function(){return c},useIsCallReady:function(){return C},useIsCallError:function(){return y},useCallActions:function(){return v},useCallerInfo:function(){return E},useCallCreateRoom:function(){return b},useCallOpenRoom:function(){return h},useCallClient:function(){return p},useQueueName:function(){return I},useQueueCounter:function(){return w},useOpenedRoomInfo:function(){return m},useChangeAudioOutputDevice:function(){return R},useChangeAudioInputDevice:function(){return g},useCallRegisterClient:function(){return A},useCallUnregisterClient:function(){return O},useVoipOutboundStates:function(){return N},useVoipNetworkStatus:function(){return k}}),r.link(\"react\",{createContext:function(e){o=e},useContext:function(e){t=e},useMemo:function(e){a=e}},0),r.link(\"use-sync-external-store/shim\",{useSyncExternalStore:function(e){l=e}},1),r.link(\"../hooks/useHasLicenseModule\",{useHasLicenseModule:function(e){i=e}},2);var u,o,t,a,l,i,s=function(e){return e.ready},f=o({enabled:!1,ready:!1,outBoundCallsAllowed:void 0,outBoundCallsEnabled:void 0,outBoundCallsEnabledForUser:void 0}),d=function(){return!0===i(\"voip-enterprise\")},c=function(){return t(f).enabled},C=function(){return!!t(f).ready},y=function(){return void 0!==t(f).error},v=function(){var e=t(f);if(!s(e))throw Error(\"useCallActions only if Calls are enabled and ready\");return e.actions},E=function(){var e=t(f);if(!s(e))throw Error(\"useCallerInfo only if Calls are enabled and ready\");var n=e.voipClient,r=a(function(){var e=n.callerInfo;return[function(r){return n.on(\"stateChanged\",function(){e=n.callerInfo,r()})},function(){return e}]},[n]),o=u(r,2),i=o[0],d=o[1];return l(i,d)},b=function(){var e=t(f);if(!s(e))throw Error(\"useCallCreateRoom only if Calls are enabled and ready\");return e.createRoom},h=function(){var e=t(f);if(!s(e))throw Error(\"useCallOpenRoom only if Calls are enabled and ready\");return e.openRoom},p=function(){var e=t(f);if(!s(e))throw Error(\"useCallClient only if Calls are enabled and ready\");return e.voipClient},I=function(){var e=t(f);if(!s(e))throw Error(\"useQueueName only if Calls are enabled and ready\");return e.queueName},w=function(){var e=t(f);if(!s(e))throw Error(\"useQueueCounter only if Calls are enabled and ready\");return e.queueCounter},m=function(){var e=t(f);if(!s(e))throw Error(\"useOpenedRoomInfo only if Calls are enabled and ready\");return e.openedRoomInfo},R=function(){var e=t(f);if(!s(e))throw Error(\"useChangeAudioOutputDevice only if Calls are enabled and ready\");return e.changeAudioOutputDevice},g=function(){var e=t(f);if(!s(e))throw Error(\"useChangeAudioInputDevice only if Calls are enabled and ready\");return e.changeAudioInputDevice},A=function(){var e=t(f);if(!s(e))throw Error(\"useCallRegisterClient only if Calls are enabled and ready\");return e.register},O=function(){var e=t(f);if(!s(e))throw Error(\"useCallUnregisterClient only if Calls are enabled and ready\");return e.unregister},N=function(){var e=d(),n=E();return{outBoundCallsAllowed:e,outBoundCallsEnabled:e,outBoundCallsEnabledForUser:e&&![\"IN_CALL\",\"ON_HOLD\",\"UNREGISTERED\",\"INITIAL\"].includes(n.state)}},k=function(){var e=t(f);if(!s(e))throw Error(\"useVoipNetworkStatus only if Calls are enabled and ready\");return e.networkStatus}}","map":"{\"version\":3,\"sources\":[\"client/contexts/CallContext.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\\nimport type { Device } from '@rocket.chat/ui-contexts';\\nimport { createContext, useContext, useMemo } from 'react';\\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\\n\\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\\n\\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\\n\\ntype CallContextDisabled = {\\n\\tenabled: false;\\n\\tready: false;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n};\\n\\ntype CallContextEnabled = {\\n\\tenabled: true;\\n\\tready: unknown;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n};\\n\\ntype CallContextReady = {\\n\\toutBoundCallsEnabled: boolean;\\n\\toutBoundCallsAllowed: boolean;\\n\\toutBoundCallsEnabledForUser: boolean;\\n\\tenabled: true;\\n\\tready: true;\\n\\tvoipClient: VoIPUser;\\n\\tactions: CallActionsType;\\n\\tqueueName: string;\\n\\tqueueCounter: number;\\n\\tnetworkStatus: 'online' | 'offline';\\n\\topenedRoomInfo: { v: { token?: string }; rid: string };\\n\\topenWrapUpModal: () => void;\\n\\topenRoom: (rid: IVoipRoom['_id']) => void;\\n\\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\\n\\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\\n\\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\\n\\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\\n\\tregister: () => void;\\n\\tunregister: () => void;\\n};\\n\\ntype CallContextError = {\\n\\tenabled: true;\\n\\tready: false;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n\\terror: Error | unknown;\\n};\\n\\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\\n\\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\\n\\nexport type CallActionsType = {\\n\\tmute: () => unknown;\\n\\tunmute: () => unknown;\\n\\tpause: () => unknown;\\n\\tresume: () => unknown;\\n\\tend: () => unknown;\\n\\tpickUp: () => unknown;\\n\\treject: () => unknown;\\n};\\n\\nconst CallContextValueDefault: CallContextValue = {\\n\\tenabled: false,\\n\\tready: false,\\n\\toutBoundCallsAllowed: undefined,\\n\\toutBoundCallsEnabled: undefined,\\n\\toutBoundCallsEnabledForUser: undefined,\\n};\\n\\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\\n\\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\\n\\nexport const useIsCallEnabled = (): boolean => {\\n\\tconst { enabled } = useContext(CallContext);\\n\\treturn enabled;\\n};\\n\\nexport const useIsCallReady = (): boolean => {\\n\\tconst { ready } = useContext(CallContext);\\n\\n\\treturn Boolean(ready);\\n};\\nexport const useIsCallError = (): boolean => {\\n\\tconst context = useContext(CallContext);\\n\\treturn Boolean(isCallContextError(context));\\n};\\n\\nexport const useCallActions = (): CallActionsType => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallActions only if Calls are enabled and ready');\\n\\t}\\n\\treturn context.actions;\\n};\\n\\nexport const useCallerInfo = (): VoIpCallerInfo => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\\n\\t}\\n\\n\\tconst { voipClient } = context;\\n\\n\\tconst [subscribe, getSnapshot] = useMemo(() => {\\n\\t\\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\\n\\n\\t\\tconst callback = (cb: () => void): (() => void) =>\\n\\t\\t\\tvoipClient.on('stateChanged', () => {\\n\\t\\t\\t\\tcaller = voipClient.callerInfo;\\n\\t\\t\\t\\tcb();\\n\\t\\t\\t});\\n\\n\\t\\tconst getSnapshot = (): VoIpCallerInfo => caller;\\n\\t\\treturn [callback, getSnapshot];\\n\\t}, [voipClient]);\\n\\n\\treturn useSyncExternalStore(subscribe, getSnapshot);\\n};\\n\\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.createRoom;\\n};\\n\\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.openRoom;\\n};\\n\\nexport const useCallClient = (): VoIPUser => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.voipClient;\\n};\\n\\nexport const useQueueName = (): CallContextReady['queueName'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useQueueName only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.queueName;\\n};\\n\\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.queueCounter;\\n};\\n\\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.openedRoomInfo;\\n};\\n\\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.changeAudioOutputDevice;\\n};\\n\\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.changeAudioInputDevice;\\n};\\n\\nexport const useCallRegisterClient = (): (() => void) => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.register;\\n};\\n\\nexport const useCallUnregisterClient = (): (() => void) => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.unregister;\\n};\\n\\nexport const useVoipOutboundStates = (): {\\n\\toutBoundCallsAllowed: boolean;\\n\\toutBoundCallsEnabled: boolean;\\n\\toutBoundCallsEnabledForUser: boolean;\\n} => {\\n\\tconst isEnterprise = useIsVoipEnterprise();\\n\\tconst callerInfo = useCallerInfo();\\n\\n\\treturn {\\n\\t\\toutBoundCallsAllowed: isEnterprise,\\n\\t\\toutBoundCallsEnabled: isEnterprise,\\n\\t\\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\\n\\t};\\n};\\n\\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.networkStatus;\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_slicedToArray\",\"export\",\"CallContext\",\"useIsVoipEnterprise\",\"useIsCallEnabled\",\"useIsCallReady\",\"useIsCallError\",\"useCallActions\",\"useCallerInfo\",\"useCallCreateRoom\",\"useCallOpenRoom\",\"useCallClient\",\"useQueueName\",\"useQueueCounter\",\"useOpenedRoomInfo\",\"useChangeAudioOutputDevice\",\"useChangeAudioInputDevice\",\"useCallRegisterClient\",\"useCallUnregisterClient\",\"useVoipOutboundStates\",\"useVoipNetworkStatus\",\"createContext\",\"useContext\",\"useMemo\",\"useSyncExternalStore\",\"useHasLicenseModule\",\"isCallContextReady\",\"context\",\"ready\",\"enabled\",\"outBoundCallsAllowed\",\"undefined\",\"outBoundCallsEnabled\",\"outBoundCallsEnabledForUser\",\"_useContext\",\"Boolean\",\"_useContext2\",\"error\",\"Error\",\"actions\",\"voipClient\",\"_useMemo\",\"caller\",\"callerInfo\",\"cb\",\"on\",\"_useMemo2\",\"subscribe\",\"getSnapshot\",\"createRoom\",\"openRoom\",\"queueName\",\"queueCounter\",\"openedRoomInfo\",\"changeAudioOutputDevice\",\"changeAudioInputDevice\",\"register\",\"unregister\",\"isEnterprise\",\"includes\",\"state\",\"networkStatus\"],\"mappings\":\"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\"}"}