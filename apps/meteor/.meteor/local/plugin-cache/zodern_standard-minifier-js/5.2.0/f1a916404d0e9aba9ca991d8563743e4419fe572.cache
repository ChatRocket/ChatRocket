{"code":"function module(e,t,n){let l,a,r,m,i,c,o,u,s,d,h,g,p;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){l=e}},0),n.link(\"@rocket.chat/fuselage\",{CheckBox(e){a=e},Table(e){r=e},Tag(e){m=e},Pagination(e){i=e},TableHead(e){c=e},TableRow(e){o=e},TableCell(e){u=e},TableBody(e){s=e}},0),n.link(\"react\",{default(e){d=e},useState(e){h=e},useCallback(e){g=e}},1),n.link(\"react-i18next\",{useTranslation(e){p=e}},2),n.exportDefault(e=>{let{channels:t,channelsCount:n,setChannels:E}=e,{t:_}=p(),[b,k]=h(0),[f,P]=h(25),T=g(e=>{let{count:t,current:n,itemsPerPage:l}=e;return _(\"Showing_results_of\",{postProcess:\"sprintf\",sprintf:[n+1,Math.min(n+l,t),t]})},[_]),C=g(()=>_(\"Items_per_page:\"),[_]);return t.length?d.createElement(d.Fragment,null,d.createElement(r,null,d.createElement(c,null,d.createElement(o,null,d.createElement(u,{width:\"x36\"},d.createElement(a,{checked:n>0,indeterminate:n>0&&n!==t.length,onChange:()=>{E(e=>{let t=e.some(e=>{let{is_archived:t,do_import:n}=e;return t&&n});return 0===n?e.map(e=>l(l({},e),{},{do_import:!0})):t?e.map(e=>e.is_archived?l(l({},e),{},{do_import:!1}):e):e.map(e=>l(l({},e),{},{do_import:!1}))})}})),d.createElement(u,{is:\"th\"},_(\"Name\")),d.createElement(u,{is:\"th\",align:\"end\"}))),d.createElement(s,null,t.slice(b,b+f).map(e=>d.createElement(o,{key:e.channel_id},d.createElement(u,{width:\"x36\"},d.createElement(a,{checked:e.do_import,onChange:t=>{let{checked:n}=t.currentTarget;E(t=>t.map(t=>t===e?l(l({},t),{},{do_import:n}):t))}})),d.createElement(u,null,e.name),d.createElement(u,{align:\"end\"},e.is_archived&&d.createElement(m,{variant:\"danger\"},_(\"Importer_Archived\"))))))),d.createElement(i,{current:b,itemsPerPage:f,itemsPerPageLabel:C,showingResultsLabel:T,count:t.length||0,onSetItemsPerPage:P,onSetCurrent:k})):null})}","map":"{\"version\":3,\"sources\":[\"client/views/admin/import/PrepareChannels.tsx\",\"<anon>\"],\"sourcesContent\":[\"import { CheckBox, Table, Tag, Pagination, TableHead, TableRow, TableCell, TableBody } from '@rocket.chat/fuselage';\\nimport type { Dispatch, SetStateAction, ChangeEvent } from 'react';\\nimport React, { useState, useCallback } from 'react';\\nimport { useTranslation } from 'react-i18next';\\n\\nimport type { ChannelDescriptor } from './ChannelDescriptor';\\n\\ntype PrepareChannelsProps = {\\n\\tchannelsCount: number;\\n\\tchannels: ChannelDescriptor[];\\n\\tsetChannels: Dispatch<SetStateAction<ChannelDescriptor[]>>;\\n};\\n\\n// TODO: review inner logic\\nconst PrepareChannels = ({ channels, channelsCount, setChannels }: PrepareChannelsProps) => {\\n\\tconst { t } = useTranslation();\\n\\tconst [current, setCurrent] = useState(0);\\n\\tconst [itemsPerPage, setItemsPerPage] = useState<25 | 50 | 100>(25);\\n\\tconst showingResultsLabel = useCallback(\\n\\t\\t({ count, current, itemsPerPage }) =>\\n\\t\\t\\tt('Showing_results_of', { postProcess: 'sprintf', sprintf: [current + 1, Math.min(current + itemsPerPage, count), count] }),\\n\\t\\t[t],\\n\\t);\\n\\tconst itemsPerPageLabel = useCallback(() => t('Items_per_page:'), [t]);\\n\\n\\tif (!channels.length) {\\n\\t\\treturn null;\\n\\t}\\n\\n\\treturn (\\n\\t\\t<>\\n\\t\\t\\t<Table>\\n\\t\\t\\t\\t<TableHead>\\n\\t\\t\\t\\t\\t<TableRow>\\n\\t\\t\\t\\t\\t\\t<TableCell width='x36'>\\n\\t\\t\\t\\t\\t\\t\\t<CheckBox\\n\\t\\t\\t\\t\\t\\t\\t\\tchecked={channelsCount > 0}\\n\\t\\t\\t\\t\\t\\t\\t\\tindeterminate={channelsCount > 0 && channelsCount !== channels.length}\\n\\t\\t\\t\\t\\t\\t\\t\\tonChange={(): void => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsetChannels((channels) => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst hasCheckedArchivedChannels = channels.some(({ is_archived, do_import }) => is_archived && do_import);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst isChecking = channelsCount === 0;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (isChecking) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn channels.map((channel) => ({ ...channel, do_import: true }));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (hasCheckedArchivedChannels) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn channels.map((channel) => (channel.is_archived ? { ...channel, do_import: false } : channel));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn channels.map((channel) => ({ ...channel, do_import: false }));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell is='th'>{t('Name')}</TableCell>\\n\\t\\t\\t\\t\\t\\t<TableCell is='th' align='end'></TableCell>\\n\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t</TableHead>\\n\\t\\t\\t\\t<TableBody>\\n\\t\\t\\t\\t\\t{channels.slice(current, current + itemsPerPage).map((channel) => (\\n\\t\\t\\t\\t\\t\\t<TableRow key={channel.channel_id}>\\n\\t\\t\\t\\t\\t\\t\\t<TableCell width='x36'>\\n\\t\\t\\t\\t\\t\\t\\t\\t<CheckBox\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tchecked={channel.do_import}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tonChange={(event: ChangeEvent<HTMLInputElement>): void => {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconst { checked } = event.currentTarget;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tsetChannels((channels) =>\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tchannels.map((_channel) => (_channel === channel ? { ..._channel, do_import: checked } : _channel)),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t\\t\\t\\t</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<TableCell>{channel.name}</TableCell>\\n\\t\\t\\t\\t\\t\\t\\t<TableCell align='end'>{channel.is_archived && <Tag variant='danger'>{t('Importer_Archived')}</Tag>}</TableCell>\\n\\t\\t\\t\\t\\t\\t</TableRow>\\n\\t\\t\\t\\t\\t))}\\n\\t\\t\\t\\t</TableBody>\\n\\t\\t\\t</Table>\\n\\t\\t\\t<Pagination\\n\\t\\t\\t\\tcurrent={current}\\n\\t\\t\\t\\titemsPerPage={itemsPerPage}\\n\\t\\t\\t\\titemsPerPageLabel={itemsPerPageLabel}\\n\\t\\t\\t\\tshowingResultsLabel={showingResultsLabel}\\n\\t\\t\\t\\tcount={channels.length || 0}\\n\\t\\t\\t\\tonSetItemsPerPage={setItemsPerPage}\\n\\t\\t\\t\\tonSetCurrent={setCurrent}\\n\\t\\t\\t/>\\n\\t\\t</>\\n\\t);\\n};\\n\\nexport default PrepareChannels;\\n\",null],\"names\":[\"_objectSpread\",\"CheckBox\",\"Table\",\"Tag\",\"Pagination\",\"TableHead\",\"TableRow\",\"TableCell\",\"TableBody\",\"React\",\"useState\",\"useCallback\",\"useTranslation\",\"module\",\"link\",\"default\",\"v\",\"exportDefault\",\"_ref\",\"channels\",\"channelsCount\",\"setChannels\",\"t\",\"current\",\"setCurrent\",\"itemsPerPage\",\"setItemsPerPage\",\"showingResultsLabel\",\"_ref2\",\"count\",\"postProcess\",\"sprintf\",\"Math\",\"min\",\"itemsPerPageLabel\",\"length\",\"createElement\",\"Fragment\",\"width\",\"checked\",\"indeterminate\",\"onChange\",\"hasCheckedArchivedChannels\",\"some\",\"_ref3\",\"is_archived\",\"do_import\",\"map\",\"channel\",\"is\",\"align\",\"slice\",\"key\",\"channel_id\",\"event\",\"currentTarget\",\"_channel\",\"name\",\"variant\",\"onSetItemsPerPage\",\"onSetCurrent\"],\"mappings\":\"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\"}"}