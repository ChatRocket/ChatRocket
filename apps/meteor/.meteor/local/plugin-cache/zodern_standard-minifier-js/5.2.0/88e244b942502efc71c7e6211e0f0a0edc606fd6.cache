{"code":"function module(e,r,t){let o,a;t.export({useMessageSearchProviderQuery:()=>c}),t.link(\"@rocket.chat/ui-contexts\",{useMethod(e){o=e}},0),t.link(\"@tanstack/react-query\",{useQuery(e){a=e}},1);let c=()=>{let e=o(\"rocketchatSearch.getProvider\");return a([\"search\",\"provider\"],async()=>{let r=await e();if(void 0===r)throw Error(\"Search provider not found\");return r})}}","map":"{\"version\":3,\"sources\":[\"client/views/room/contextualBar/MessageSearchTab/hooks/useMessageSearchProviderQuery.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useMethod } from '@rocket.chat/ui-contexts';\\nimport { useQuery } from '@tanstack/react-query';\\n\\nexport const useMessageSearchProviderQuery = () => {\\n\\tconst getSearchProvider = useMethod('rocketchatSearch.getProvider');\\n\\treturn useQuery(['search', 'provider'] as const, async () => {\\n\\t\\tconst provider = await getSearchProvider();\\n\\t\\tif (provider === undefined) {\\n\\t\\t\\tthrow new Error('Search provider not found');\\n\\t\\t}\\n\\n\\t\\treturn provider;\\n\\t});\\n};\\n\",null],\"names\":[\"useMethod\",\"useQuery\",\"module\",\"export\",\"useMessageSearchProviderQuery\",\"link\",\"v\",\"getSearchProvider\",\"provider\",\"undefined\",\"Error\"],\"mappings\":\"2BAAqDA,EAAAC,EAArDC,EAAOC,MAAE,CAAA,CAAAC,8BAAiBA,IAAAA,CAA2B,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAL,UAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,wBAAA,CAAAJ,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAG9C,IAAMF,EAAgCA,KAC5C,IAAMG,EAAoBP,EAAU,gCACpC,OAAOC,EAAS,CAAC,SAAU,WAAoB,CAAE,UAChD,IAAMO,EAAW,MAAMD,IACvB,GAAIC,AAAaC,KAAAA,IAAbD,EACH,MAAM,AAAIE,MAAM,6BAGjB,OAAOF,CACR,EACD\"}"}