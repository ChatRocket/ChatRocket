{"code":"function module(e,n,r){r.export({useWebRtcServers:function(){return u}}),r.link(\"@rocket.chat/ui-contexts\",{useSetting:function(e){t=e}},0),r.link(\"react\",{useMemo:function(e){i=e}},1),r.link(\"../lib/parseStringToIceServers\",{parseStringToIceServers:function(e){o=e}},2);var t,i,o,u=function(){var e=t(\"WebRTC_Servers\");return i(function(){return\"string\"==typeof e&&e.trim()?o(e):[]},[e])}}","map":"{\"version\":3,\"sources\":[\"client/providers/CallProvider/hooks/useWebRtcServers.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSetting } from '@rocket.chat/ui-contexts';\\nimport { useMemo } from 'react';\\n\\nimport type { IceServer } from '../definitions/IceServer';\\nimport { parseStringToIceServers } from '../lib/parseStringToIceServers';\\n\\nexport const useWebRtcServers = (): IceServer[] => {\\n\\tconst servers = useSetting('WebRTC_Servers');\\n\\n\\treturn useMemo(() => {\\n\\t\\tif (typeof servers !== 'string' || !servers.trim()) {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\t\\treturn parseStringToIceServers(servers);\\n\\t}, [servers]);\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useWebRtcServers\",\"link\",\"useSetting\",\"v\",\"useMemo\",\"parseStringToIceServers\",\"servers\",\"trim\"],\"mappings\":\"uBAAAA,EAAOC,MAAE,CAAA,CAAAC,iBAAkB,WAAA,OAAAA,CAA2B,CAAA,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAC,WAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,QAAA,CAAAG,QAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,iCAAA,CAAAI,wBAAA,SAAAF,CAAA,EAAAE,EAAAF,CAAA,CAAA,EAAA,GAM/C,IAN+CD,EAAAE,EAAAC,EAMzCL,EAAmB,WAC/B,IAAMM,EAAUJ,EAAW,kBAE3B,OAAOE,EAAQ,iBACd,AAAI,AAAmB,UAAnB,OAAOE,GAAyBA,EAAQC,IAAI,GAGzCF,EAAwBC,GAFvB,EAAE,AAGX,EAAG,CAACA,EAAQ,CACb\"}"}