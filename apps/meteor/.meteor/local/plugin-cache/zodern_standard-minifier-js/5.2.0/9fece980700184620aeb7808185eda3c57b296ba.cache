{"code":"function module(n,e,i){var t,o,r,u,c,l,f,s;i.link(\"@rocket.chat/string-helpers\",{capitalize:function(n){t=n}},0),i.link(\"@rocket.chat/ui-contexts\",{AuthenticationContext:function(n){o=n},useSetting:function(n){r=n}},1),i.link(\"meteor/meteor\",{Meteor:function(n){u=n}},2),i.link(\"react\",{default:function(n){c=n},useMemo:function(n){l=n}},3),i.link(\"../../lib/loginServices\",{loginServices:function(n){f=n}},4),i.link(\"./hooks/useLDAPAndCrowdCollisionWarning\",{useLDAPAndCrowdCollisionWarning:function(n){s=n}},5),i.exportDefault(function(n){var e=n.children,i=r(\"LDAP_Enable\"),g=r(\"CROWD_Enable\"),a=i&&\"loginWithLDAP\"||g&&\"loginWithCrowd\"||\"loginWithPassword\";s();var d=l(function(){return{loginWithToken:function(n){return new Promise(function(e,i){return u.loginWithToken(n,function(n){if(n)return i(n);e(void 0)})})},loginWithPassword:function(n,e){return new Promise(function(i,t){u[a](n,e,function(n){if(n){t(n);return}i()})})},loginWithService:function(n){var e=n.service,i=\"clientConfig\"in n&&n.clientConfig||{},o=u[\"loginWith\"+(({\"meteor-developer\":\"MeteorDeveloperAccount\"})[e]||t(String(e||\"\")))];return o?function(){return new Promise(function(n,e){o(i,function(i){if(!i){n(!0);return}e(i)})})}:function(){return Promise.reject(Error(\"Login method not found\"))}},queryLoginServices:{getCurrentValue:function(){return f.getLoginServiceButtons()},subscribe:function(n){return f.on(\"changed\",n)}}}},[a]);return c.createElement(o.Provider,{children:e,value:d})})}","map":"{\"version\":3,\"sources\":[\"client/providers/AuthenticationProvider/AuthenticationProvider.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { LoginServiceConfiguration } from '@rocket.chat/core-typings';\\nimport { capitalize } from '@rocket.chat/string-helpers';\\nimport { AuthenticationContext, useSetting } from '@rocket.chat/ui-contexts';\\nimport { Meteor } from 'meteor/meteor';\\nimport type { ContextType, ReactElement, ReactNode } from 'react';\\nimport React, { useMemo } from 'react';\\n\\nimport { loginServices } from '../../lib/loginServices';\\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\\n\\nexport type LoginMethods = keyof typeof Meteor extends infer T ? (T extends `loginWith${string}` ? T : never) : never;\\n\\ntype AuthenticationProviderProps = {\\n\\tchildren: ReactNode;\\n};\\n\\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\\n\\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\\n\\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\\n\\n\\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\\n\\n\\tuseLDAPAndCrowdCollisionWarning();\\n\\n\\tconst contextValue = useMemo(\\n\\t\\t(): ContextType<typeof AuthenticationContext> => ({\\n\\t\\t\\tloginWithToken: (token: string): Promise<void> =>\\n\\t\\t\\t\\tnew Promise((resolve, reject) =>\\n\\t\\t\\t\\t\\tMeteor.loginWithToken(token, (err) => {\\n\\t\\t\\t\\t\\t\\tif (err) {\\n\\t\\t\\t\\t\\t\\t\\treturn reject(err);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tresolve(undefined);\\n\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t),\\n\\t\\t\\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\\n\\t\\t\\t\\tnew Promise((resolve, reject) => {\\n\\t\\t\\t\\t\\tMeteor[loginMethod](user, password, (error) => {\\n\\t\\t\\t\\t\\t\\tif (error) {\\n\\t\\t\\t\\t\\t\\t\\treject(error);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tresolve();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}),\\n\\t\\t\\tloginWithService: <T extends LoginServiceConfiguration>(serviceConfig: T): (() => Promise<true>) => {\\n\\t\\t\\t\\tconst loginMethods: Record<string, string | undefined> = {\\n\\t\\t\\t\\t\\t'meteor-developer': 'MeteorDeveloperAccount',\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tconst { service: serviceName } = serviceConfig;\\n\\t\\t\\t\\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\\n\\n\\t\\t\\t\\tconst loginWithService = `loginWith${loginMethods[serviceName] || capitalize(String(serviceName || ''))}`;\\n\\n\\t\\t\\t\\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\\n\\n\\t\\t\\t\\tif (!method) {\\n\\t\\t\\t\\t\\treturn () => Promise.reject(new Error('Login method not found'));\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn () =>\\n\\t\\t\\t\\t\\tnew Promise((resolve, reject) => {\\n\\t\\t\\t\\t\\t\\tmethod(clientConfig, (error: any): void => {\\n\\t\\t\\t\\t\\t\\t\\tif (!error) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresolve(true);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treject(error);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\n\\t\\t\\tqueryLoginServices: {\\n\\t\\t\\t\\tgetCurrentValue: () => loginServices.getLoginServiceButtons(),\\n\\t\\t\\t\\tsubscribe: (onStoreChange: () => void) => loginServices.on('changed', onStoreChange),\\n\\t\\t\\t},\\n\\t\\t}),\\n\\t\\t[loginMethod],\\n\\t);\\n\\n\\treturn <AuthenticationContext.Provider children={children} value={contextValue} />;\\n};\\n\\nexport default AuthenticationProvider;\\n\",null],\"names\":[\"capitalize\",\"AuthenticationContext\",\"useSetting\",\"Meteor\",\"React\",\"useMemo\",\"loginServices\",\"useLDAPAndCrowdCollisionWarning\",\"module\",\"link\",\"v\",\"exportDefault\",\"_ref\",\"children\",\"isLdapEnabled\",\"isCrowdEnabled\",\"loginMethod\",\"contextValue\",\"loginWithToken\",\"token\",\"Promise\",\"resolve\",\"reject\",\"err\",\"undefined\",\"loginWithPassword\",\"user\",\"password\",\"error\",\"loginWithService\",\"serviceConfig\",\"serviceName\",\"service\",\"clientConfig\",\"method\",\"loginMethods\",\"String\",\"Error\",\"queryLoginServices\",\"getCurrentValue\",\"getLoginServiceButtons\",\"subscribe\",\"onStoreChange\",\"on\",\"createElement\",\"Provider\",\"value\"],\"mappings\":\"uBAgBA,IAfAA,EAAyDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAhDC,EAAYC,IAAA,CAAM,8BAA8B,CAAAT,WAAA,SAAAU,CAAA,EAAAV,EAAAU,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,2BAAA,CAAAR,sBAAA,SAAAS,CAAA,EAAAT,EAAAS,CAAA,EAAAR,WAAA,SAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,gBAAA,CAAAN,OAAA,SAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,QAAA,CAAA,QAAA,SAAAC,CAAA,EAAAN,EAAAM,CAAA,EAAAL,QAAA,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,0BAAA,CAAAH,cAAA,SAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,0CAAA,CAAAF,gCAAA,SAAAG,CAAA,EAAAH,EAAAG,CAAA,CAAA,EAAA,GAAzDF,EAAOG,aAAY,CAeY,SAAAC,CAAA,EAA4D,IAAzDC,EAAQD,EAARC,QAAQ,CACnCC,EAAgBZ,EAAoB,eACpCa,EAAiBb,EAAoB,gBAErCc,EAA6BF,GAAiB,iBAAqBC,GAAkB,kBAAqB,oBAEhHR,IAEA,IAAMU,EAAeZ,EACpB,WAAA,MAAkD,CACjDa,eAAgB,SAACC,CAAa,EAAA,OAC7B,IAAIC,QAAQ,SAACC,CAAO,CAAEC,CAAM,EAAA,OAC3BnB,EAAOe,cAAc,CAACC,EAAO,SAACI,CAAG,EAChC,GAAIA,EACH,OAAOD,EAAOC,GAEfF,EAAQG,KAAAA,EACT,EAAE,EACF,EACFC,kBAAmB,SAACC,CAAwE,CAAEC,CAAgB,EAAA,OAC7G,IAAIP,QAAQ,SAACC,CAAO,CAAEC,CAAM,EAC3BnB,CAAM,CAACa,EAAY,CAACU,EAAMC,EAAU,SAACC,CAAK,EACzC,GAAIA,EAAO,CACVN,EAAOM,GACP,MACD,CAEAP,GACD,EACD,EAAE,EACHQ,iBAAkB,SAAsCC,CAAgB,EAKvE,IAAiBC,EAAgBD,EAAzBE,OAAO,CACTC,EAAgB,iBAAkBH,GAAiBA,EAAcG,YAAY,EAAK,CAAA,EAIlFC,EAAwE/B,CAAc,CAFtE,YAAegC,CAAAA,AAPoB,CAAA,CACxD,mBAAoB,0BAM4B,CAACJ,EAAY,EAAI/B,EAAWoC,OAAOL,GAAe,IAAG,EAEe,QAErH,AAAKG,EAIE,WAAA,OACN,IAAId,QAAQ,SAACC,CAAO,CAAEC,CAAM,EAC3BY,EAAOD,EAAc,SAACL,CAAU,EAC/B,GAAI,CAACA,EAAO,CACXP,EAAQ,CAAA,GACR,MACD,CACAC,EAAOM,EACR,EACD,EAAE,EAZK,WAAA,OAAMR,QAAQE,MAAM,CAAC,AAAIe,MAAM,0BAA0B,CAalE,EAEAC,mBAAoB,CACnBC,gBAAiB,WAAA,OAAMjC,EAAckC,sBAAsB,EAAE,EAC7DC,UAAW,SAACC,CAAyB,EAAA,OAAKpC,EAAcqC,EAAE,CAAC,UAAWD,EAAc,GAErF,EACD,CAAC1B,EAAY,EAGd,OAAOZ,EAAAwC,aAAA,CAAC3C,EAAsB4C,QAAQ,CAAA,CAAChC,SAAUA,EAAUiC,MAAO7B,CAAa,EAChF\"}"}