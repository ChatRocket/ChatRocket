{"code":"function module(e,t,n){let c,i;n.export({useActiveConnections:()=>o}),n.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){c=e}},0),n.link(\"@tanstack/react-query\",{useQuery(e){i=e}},1);let o=()=>{let e=c(\"GET\",\"/v1/presence.getConnections\");return i([\"userConnections\"],async()=>{let{current:t,max:n}=await e();return{current:t,max:n,percentage:Math.min(t/n*100,100)}},{staleTime:6e4})}}","map":"{\"version\":3,\"sources\":[\"client/views/hooks/useActiveConnections.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport type { UseQueryResult } from '@tanstack/react-query';\\nimport { useQuery } from '@tanstack/react-query';\\n\\nexport const useActiveConnections = (): UseQueryResult<{ max: number; current: number; percentage: number }> => {\\n\\tconst getConnections = useEndpoint('GET', '/v1/presence.getConnections');\\n\\treturn useQuery(\\n\\t\\t['userConnections'],\\n\\t\\tasync () => {\\n\\t\\t\\tconst { current, max } = await getConnections();\\n\\t\\t\\treturn { current, max, percentage: Math.min((current / max) * 100, 100) };\\n\\t\\t},\\n\\t\\t{ staleTime: 1000 * 60 },\\n\\t);\\n};\\n\",null],\"names\":[\"useEndpoint\",\"useQuery\",\"module\",\"export\",\"useActiveConnections\",\"link\",\"v\",\"getConnections\",\"current\",\"max\",\"percentage\",\"Math\",\"min\",\"staleTime\"],\"mappings\":\"2BAAuDA,EAAAC,EAAvDC,EAAOC,MAAE,CAAA,CAAAC,qBAAmBA,IAAAA,CAA2B,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAL,YAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,wBAAA,CAAAJ,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAIhD,IAAMF,EAAuBA,KACnC,IAAMG,EAAiBP,EAAY,MAAO,+BAC1C,OAAOC,EACN,CAAC,kBAAkB,CACnB,UACC,GAAM,CAAEO,QAAAA,CAAO,CAAEC,IAAAA,CAAAA,CAAK,CAAG,MAAMF,IAC/B,MAAO,CAAEC,QAAAA,EAASC,IAAAA,EAAKC,WAAYC,KAAKC,GAAG,CAAEJ,EAAUC,EAAO,IAAK,IAAI,CACxE,EACA,CAAEI,UAAW,GAAS,EAExB\"}"}