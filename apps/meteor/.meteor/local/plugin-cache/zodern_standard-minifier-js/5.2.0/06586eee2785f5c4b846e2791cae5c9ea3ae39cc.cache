{"code":"Package[\"core-runtime\"].queue(\"twitter-oauth\",function(){var e,t=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv;var r=Package.oauth.OAuth,a=Package.random.Random,n=Package[\"service-configuration\"].ServiceConfiguration;return(function(){(e={}).validParamsAuthenticate=[\"force_login\",\"screen_name\"]}).call(this),(function(){e.requestCredential=function(o,i){i||\"function\"!=typeof o||(i=o,o={});var c=n.configurations.findOne({service:\"twitter\"});if(!c){i&&i(new n.ConfigError);return}var u=a.secret(),l=r._loginStyle(\"twitter\",c,o),g=\"_oauth/twitter/?requestTokenAndRedirect=true&state=\"+r._stateParam(l,u,o&&o.redirectUrl);if(t.isCordova&&(g+=\"&cordova=true\",/Android/i.test(navigator.userAgent)&&(g+=\"&android=true\")),o){var s=Object.prototype.hasOwnProperty;e.validParamsAuthenticate.forEach(function(e){s.call(o,e)&&(g+=\"&\"+e+\"=\"+encodeURIComponent(o[e]))})}var d=t.absoluteUrl(g);r.launchLogin({loginService:\"twitter\",loginStyle:l,loginUrl:d,credentialRequestCompleteCallback:i,credentialToken:u})}}).call(this),{export:function(){return{Twitter:e}}}});","map":"{\"version\":3,\"sources\":[\"packages/twitter-oauth/twitter_common.js\",\"packages/twitter-oauth/twitter_client.js\",\"<anon>\"],\"sourcesContent\":[\"Twitter = {};\\n\\nTwitter.validParamsAuthenticate = [\\n  'force_login',\\n  'screen_name'\\n];\\n\\n\",\"// Request Twitter credentials for the user\\n// @param options {optional}  XXX support options.requestPermissions\\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\\n//   completion. Takes one argument, credentialToken on success, or Error on\\n//   error.\\nTwitter.requestCredential = function (options, credentialRequestCompleteCallback) {\\n  // support both (options, callback) and (callback).\\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\\n    credentialRequestCompleteCallback = options;\\n    options = {};\\n  }\\n\\n  var config = ServiceConfiguration.configurations.findOne({service: 'twitter'});\\n  if (!config) {\\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\\n      new ServiceConfiguration.ConfigError());\\n    return;\\n  }\\n\\n  var credentialToken = Random.secret();\\n  // We need to keep credentialToken across the next two 'steps' so we're adding\\n  // a credentialToken parameter to the url and the callback url that we'll be returned\\n  // to by oauth provider\\n\\n  var loginStyle = OAuth._loginStyle('twitter', config, options);\\n\\n  // url to app, enters \\\"step 1\\\" as described in\\n  // packages/accounts-oauth1-helper/oauth1_server.js\\n  var loginPath = '_oauth/twitter/?requestTokenAndRedirect=true'\\n        + '&state=' + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl);\\n\\n  if (Meteor.isCordova) {\\n    loginPath = loginPath + \\\"&cordova=true\\\";\\n    if (/Android/i.test(navigator.userAgent)) {\\n      loginPath = loginPath + \\\"&android=true\\\";\\n    }\\n  }\\n\\n  // Support additional, permitted parameters\\n  if (options) {\\n    var hasOwn = Object.prototype.hasOwnProperty;\\n    Twitter.validParamsAuthenticate.forEach(function (param) {\\n      if (hasOwn.call(options, param)) {\\n        loginPath += \\\"&\\\" + param + \\\"=\\\" + encodeURIComponent(options[param]);\\n      }\\n    });\\n  }\\n\\n  var loginUrl = Meteor.absoluteUrl(loginPath);\\n\\n  OAuth.launchLogin({\\n    loginService: \\\"twitter\\\",\\n    loginStyle: loginStyle,\\n    loginUrl: loginUrl,\\n    credentialRequestCompleteCallback: credentialRequestCompleteCallback,\\n    credentialToken: credentialToken\\n  });\\n};\\n\\n\",null],\"names\":[\"Twitter\",\"validParamsAuthenticate\",\"requestCredential\",\"options\",\"credentialRequestCompleteCallback\",\"config\",\"ServiceConfiguration\",\"configurations\",\"findOne\",\"service\",\"ConfigError\",\"credentialToken\",\"Random\",\"secret\",\"loginStyle\",\"OAuth\",\"_loginStyle\",\"loginPath\",\"_stateParam\",\"redirectUrl\",\"Meteor\",\"isCordova\",\"test\",\"navigator\",\"userAgent\",\"hasOwn\",\"Object\",\"prototype\",\"hasOwnProperty\",\"forEach\",\"param\",\"call\",\"encodeURIComponent\",\"loginUrl\",\"absoluteUrl\",\"launchLogin\",\"loginService\"],\"mappings\":\"kQAEAA,AAFAA,CAAAA,EAAA,CAAA,CAAA,EAEAC,uBAAA,CAAA,CACA,cACA,cACA,0BCAAD,EAAAE,iBAAA,CAAA,SAAAC,CAAA,CAAAC,CAAA,EAEAA,GAAA,YAAA,OAAAD,IACAC,EAAAD,EACAA,EAAA,CAAA,GAGA,IAAAE,EAAAC,EAAAC,cAAA,CAAAC,OAAA,CAAA,CAAAC,QAAA,SAAA,GACA,GAAA,CAAAJ,EAAA,CACAD,GAAAA,EACA,IAAAE,EAAAI,WAAA,EACA,MACA,CAEA,IAAAC,EAAAC,EAAAC,MAAA,GAKAC,EAAAC,EAAAC,WAAA,CAAA,UAAAX,EAAAF,GAIAc,EAAA,sDACAF,EAAAG,WAAA,CAAAJ,EAAAH,EAAAR,GAAAA,EAAAgB,WAAA,EAUA,GARAC,EAAAC,SAAA,GACAJ,GAAA,gBACA,WAAAK,IAAA,CAAAC,UAAAC,SAAA,GACAP,CAAAA,GAAA,eAAA,GAKAd,EAAA,CACA,IAAAsB,EAAAC,OAAAC,SAAA,CAAAC,cAAA,CACA5B,EAAAC,uBAAA,CAAA4B,OAAA,CAAA,SAAAC,CAAA,EACAL,EAAAM,IAAA,CAAA5B,EAAA2B,IACAb,CAAAA,GAAA,IAAAa,EAAA,IAAAE,mBAAA7B,CAAA,CAAA2B,EAAA,CAAA,CAEA,EACA,CAEA,IAAAG,EAAAb,EAAAc,WAAA,CAAAjB,GAEAF,EAAAoB,WAAA,CAAA,CACAC,aAAA,UACAtB,WAAAA,EACAmB,SAAAA,EACA7B,kCAAAA,EACAO,gBAAAA,CACA,EACA\"}"}