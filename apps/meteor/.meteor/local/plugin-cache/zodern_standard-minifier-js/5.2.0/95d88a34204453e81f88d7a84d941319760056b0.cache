{"code":"function module(e,t,r){let i,s,o,n,a,y,h,c,l,d,p,u,E,g,K,S,m,R,w,I,A,D,k,f,T,v,O,_,x,C,b,G,N,Y,P;let F=[\"_id\"],M=[\"msg\",\"attachments\"];r.link(\"@babel/runtime/helpers/objectWithoutProperties\",{default(e){i=e}},0),r.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){s=e}},1),r.link(\"@babel/runtime/helpers/asyncIterator\",{default(e){o=e}},2),r.export({E2ERoom:()=>W}),r.link(\"@rocket.chat/base64\",{Base64(e){n=e}},0),r.link(\"@rocket.chat/emitter\",{Emitter(e){a=e}},1),r.link(\"ejson\",{default(e){y=e}},2),r.link(\"../../../client/lib/RoomManager\",{RoomManager(e){h=e}},3),r.link(\"../../../client/lib/rooms/roomCoordinator\",{roomCoordinator(e){c=e}},4),r.link(\"../../../definition/IRoomTypeConfig\",{RoomSettingsEnum(e){l=e}},5),r.link(\"../../models/client\",{ChatRoom(e){d=e},Subscriptions(e){p=e},Messages(e){u=e}},6),r.link(\"../../utils/client/lib/SDKClient\",{sdk(e){E=e}},7),r.link(\"../../utils/lib/i18n\",{t(e){g=e}},8),r.link(\"./E2ERoomState\",{E2ERoomState(e){K=e}},9),r.link(\"./helper\",{toString(e){S=e},toArrayBuffer(e){m=e},joinVectorAndEcryptedData(e){R=e},splitVectorAndEcryptedData(e){w=e},encryptRSA(e){I=e},encryptAES(e){A=e},decryptRSA(e){D=e},decryptAES(e){k=e},generateAESKey(e){f=e},exportJWKKey(e){T=e},importAESKey(e){v=e},importRSAKey(e){O=e},readFileAsArrayBuffer(e){_=e},encryptAESCTR(e){x=e},generateAESCTRKey(e){C=e},sha256HashFromArrayBuffer(e){b=e},createSha256HashFromText(e){G=e}},10),r.link(\"./logger\",{log(e){N=e},logError(e){Y=e}},11),r.link(\"./rocketchat.e2e\",{e2e(e){P=e}},12);let U=Symbol(\"keyID\"),B=Symbol(\"PAUSED\"),H={[K.NOT_STARTED]:[K.ESTABLISHING,K.DISABLED,K.KEYS_RECEIVED],[K.READY]:[K.DISABLED,K.CREATING_KEYS,K.WAITING_KEYS],[K.ERROR]:[K.KEYS_RECEIVED,K.NOT_STARTED],[K.WAITING_KEYS]:[K.KEYS_RECEIVED,K.ERROR,K.DISABLED],[K.ESTABLISHING]:[K.READY,K.KEYS_RECEIVED,K.ERROR,K.DISABLED,K.WAITING_KEYS,K.CREATING_KEYS]},V=(e,t)=>e===t?t===K.ERROR:!!(!(e in H)||H[e].includes(t))&&t;class W extends a{constructor(e,t){super(),this.state=void 0,this[B]=void 0,this.userId=e,this.roomId=t._id,this.typeOfRoom=t.t,this.roomKeyId=t.e2eKeyId,this.once(K.READY,async()=>(await this.decryptOldRoomKeys(),this.decryptPendingMessages())),this.once(K.READY,()=>this.decryptSubscription()),this.on(\"STATE_CHANGED\",e=>{this.roomId===h.opened&&this.log(\"[PREV: \".concat(e,\"]\"),\"State CHANGED\")}),this.on(\"STATE_CHANGED\",()=>this.handshake()),this.setState(K.NOT_STARTED)}log(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];N(\"E2E ROOM { state: \".concat(this.state,\", rid: \").concat(this.roomId,\" }\"),...t)}error(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];Y(\"E2E ROOM { state: \".concat(this.state,\", rid: \").concat(this.roomId,\" }\"),...t)}hasSessionKey(){return!!this.groupSessionKey}getState(){return this.state}setState(e){let t=this.state,r=V(t,e);if(!r){this.error(\"invalid state \".concat(t,\" -> \").concat(e));return}this.state=r,this.log(t,\"->\",r),this.emit(\"STATE_CHANGED\",t,r,this),this.emit(r,this)}isReady(){return this.state===K.READY}isDisabled(){return this.state===K.DISABLED}enable(){this.state!==K.READY&&this.setState(K.READY)}disable(){this.setState(K.DISABLED)}pause(){this.log(\"PAUSED\",this[B],\"->\",!0),this[B]=!0,this.emit(\"PAUSED\",!0)}resume(){this.log(\"PAUSED\",this[B],\"->\",!1),this[B]=!1,this.emit(\"PAUSED\",!1)}keyReceived(){this.setState(K.KEYS_RECEIVED)}async shouldConvertSentMessages(e){return!!this.isReady()&&!this[B]&&(void 0===this[B]?new Promise(e=>{this.once(\"PAUSED\",e)}):\"/\"!==e.msg[0])}shouldConvertReceivedMessages(){return this.isReady()}isWaitingKeys(){return this.state===K.WAITING_KEYS}get keyID(){return this[U]}set keyID(e){this[U]=e}async decryptSubscription(){var e;let t=p.findOne({rid:this.roomId});if((null===(e=t.lastMessage)||void 0===e?void 0:e.t)!==\"e2e\"){this.log(\"decryptSubscriptions nothing to do\");return}let r=await this.decryptMessage(t.lastMessage);p.update({_id:t._id},{$set:{lastMessage:r}}),this.log(\"decryptSubscriptions Done\")}async decryptOldRoomKeys(){let e=p.findOne({rid:this.roomId});if(!(null!=e&&e.oldRoomKeys)||(null==e?void 0:e.oldRoomKeys.length)===0){this.log(\"decryptOldRoomKeys nothing to do\");return}let t=[];var r=!1,i=!1;try{for(var n,a,y=o(e.oldRoomKeys);r=!(a=await y.next()).done;r=!1){let e=a.value;try{let r=await this.decryptSessionKey(e.E2EKey);t.push(s(s({},e),{},{E2EKey:r}))}catch(r){this.error(\"Cannot decrypt old room key with id \".concat(e.e2eKeyId,\". This is likely because user private key changed or is missing. Skipping\")),t.push(s(s({},e),{},{E2EKey:null}))}}}catch(e){i=!0,n=e}finally{try{r&&null!=y.return&&await y.return()}finally{if(i)throw n}}this.oldKeys=t,this.log(\"decryptOldRoomKeys Done\")}async exportOldRoomKeys(e){if(this.log(\"exportOldRoomKeys starting\"),!e||0===e.length){this.log(\"exportOldRoomKeys nothing to do\");return}let t=[];var r=!1,i=!1;try{for(var n,a,y=o(e);r=!(a=await y.next()).done;r=!1){let e=a.value;try{if(!e.E2EKey)continue;let r=await this.exportSessionKey(e.E2EKey);t.push(s(s({},e),{},{E2EKey:r}))}catch(t){this.error(\"Cannot decrypt old room key with id \".concat(e.e2eKeyId,\". This is likely because user private key changed or is missing. Skipping\"))}}}catch(e){i=!0,n=e}finally{try{r&&null!=y.return&&await y.return()}finally{if(i)throw n}}return this.log(\"exportOldRoomKeys Done: \".concat(t.length,\" keys exported\")),t}async decryptPendingMessages(){return u.find({rid:this.roomId,t:\"e2e\",e2e:\"pending\"}).forEach(async e=>{let{_id:t}=e,r=i(e,F);u.update({_id:t},await this.decryptMessage(r))})}async handshake(){if(P.isReady()&&(this.state===K.KEYS_RECEIVED||this.state===K.NOT_STARTED)){this.setState(K.ESTABLISHING);try{let e=p.findOne({rid:this.roomId}).E2EKey;if(e){await this.importGroupKey(e),this.setState(K.READY);return}}catch(e){this.setState(K.ERROR),this.error(\"Error fetching group key: \",e);return}try{let e=d.findOne({_id:this.roomId});if(!e.e2eKeyId&&this.userShouldCreateKeys(e)){this.setState(K.CREATING_KEYS),await this.createGroupKey(),this.setState(K.READY);return}this.setState(K.WAITING_KEYS),this.log(\"Requesting room key\"),E.publish(\"notify-room-users\",[\"\".concat(this.roomId,\"/e2ekeyRequest\"),this.roomId,e.e2eKeyId])}catch(e){this.setState(K.ERROR)}}}userShouldCreateKeys(e){return\"d\"===e.t||e.u._id===this.userId}isSupportedRoomType(e){return c.getRoomDirectives(e).allowRoomSettingChange({},l.E2E)}async decryptSessionKey(e){return v(JSON.parse(await this.exportSessionKey(e)))}async exportSessionKey(e){e=e.slice(12),e=n.decode(e);let t=await D(P.privateKey,e);return S(t)}async importGroupKey(e){this.log(\"Importing room key ->\",this.roomId),e=e.slice(12),e=n.decode(e);try{let t=await D(P.privateKey,e);this.sessionKeyExportedString=S(t)}catch(e){return this.error(\"Error decrypting group key: \",e),!1}this.keyID||(this.keyID=this.roomKeyId||(await G(this.sessionKeyExportedString)).slice(0,12));try{let e=await v(JSON.parse(this.sessionKeyExportedString));this.groupSessionKey=e}catch(e){return this.error(\"Error importing group key: \",e),!1}return!0}async createNewGroupKey(){this.groupSessionKey=await f();let e=await T(this.groupSessionKey);this.sessionKeyExportedString=JSON.stringify(e),this.keyID=(await G(this.sessionKeyExportedString)).slice(0,12)}async createGroupKey(){this.log(\"Creating room key\");try{await this.createNewGroupKey(),await E.call(\"e2e.setRoomKeyID\",this.roomId,this.keyID),await E.rest.post(\"/v1/e2e.updateGroupKey\",{rid:this.roomId,uid:this.userId,key:await this.encryptGroupKeyForParticipant(P.publicKey)}),await this.encryptKeyForOtherParticipants()}catch(e){throw this.error(\"Error exporting group key: \",e),e}}async resetRoomKey(){if(this.log(\"Resetting room key\"),!P.publicKey){this.error(\"Cannot reset room key. No public key found.\");return}this.setState(K.CREATING_KEYS);try{await this.createNewGroupKey();let e={e2eKeyId:this.keyID,e2eKey:await this.encryptGroupKeyForParticipant(P.publicKey)};return this.setState(K.READY),this.log(\"Room key reset done for room \".concat(this.roomId)),e}catch(e){throw this.error(\"Error resetting group key: \",e),e}}onRoomKeyReset(e){this.log(\"Room keyID was reset. New keyID: \".concat(e,\" Previous keyID: \").concat(this.keyID)),this.setState(K.WAITING_KEYS),this.keyID=e,this.groupSessionKey=void 0,this.sessionKeyExportedString=void 0,this.sessionKeyExported=void 0,this.oldKeys=void 0}async encryptKeyForOtherParticipants(){try{let a=p.findOne({rid:this.roomId}),y=await this.exportOldRoomKeys(null==a?void 0:a.oldRoomKeys),h=(await E.call(\"e2e.getUsersOfRoomWithoutKey\",this.roomId)).users.filter(e=>{var t;return null==e?void 0:null===(t=e.e2e)||void 0===t?void 0:t.public_key});if(!h.length)return;let c={[this.roomId]:[]};var e=!1,t=!1;try{for(var r,i,n=o(h);e=!(i=await n.next()).done;e=!1){let e=i.value;{let t=await this.encryptGroupKeyForParticipant(e.e2e.public_key),r=await this.encryptOldKeysForParticipant(e.e2e.public_key,y);c[this.roomId].push(s({_id:e._id,key:t},r&&{oldKeys:r}))}}}catch(e){t=!0,r=e}finally{try{e&&null!=n.return&&await n.return()}finally{if(t)throw r}}await E.rest.post(\"/v1/e2e.provideUsersSuggestedGroupKeys\",{usersSuggestedGroupKeys:c})}catch(e){return this.error(\"Error getting room users: \",e)}}async encryptOldKeysForParticipant(e,t){let r;if(t&&0!==t.length){try{r=await O(JSON.parse(e),[\"encrypt\"])}catch(e){return this.error(\"Error importing user key: \",e)}try{let e=[];var i=!1,a=!1;try{for(var y,h,c=o(t);i=!(h=await c.next()).done;i=!1){let t=h.value;{if(!t.E2EKey)continue;let i=await I(r,m(t.E2EKey)),o=t.e2eKeyId+n.encode(new Uint8Array(i));e.push(s(s({},t),{},{E2EKey:o}))}}}catch(e){a=!0,y=e}finally{try{i&&null!=c.return&&await c.return()}finally{if(a)throw y}}return e}catch(e){return this.error(\"Error encrypting user key: \",e)}}}async encryptGroupKeyForParticipant(e){let t;try{t=await O(JSON.parse(e),[\"encrypt\"])}catch(e){return this.error(\"Error importing user key: \",e)}try{let e=await I(t,m(this.sessionKeyExportedString)),r=this.keyID+n.encode(new Uint8Array(e));return r}catch(e){return this.error(\"Error encrypting user key: \",e)}}async encryptFile(e){let t;let r=await _(e),i=await b(new Uint8Array(r)),s=crypto.getRandomValues(new Uint8Array(16)),o=await C();try{t=await x(s,o,r)}catch(e){return console.log(e),this.error(\"Error encrypting group key: \",e)}let a=await window.crypto.subtle.exportKey(\"jwk\",o),y=await G(e.name),h=new File([m(t)],y);return{file:h,key:a,iv:n.encode(s),type:e.type,hash:i}}async decryptFile(e,t,r){let i=n.decode(r),s=await window.crypto.subtle.importKey(\"jwk\",t,{name:\"AES-CTR\"},!0,[\"encrypt\",\"decrypt\"]);return window.crypto.subtle.decrypt({name:\"AES-CTR\",counter:i,length:64},s,e)}async encryptText(e){let t=crypto.getRandomValues(new Uint8Array(16));try{let r=await A(t,this.groupSessionKey,e);return this.keyID+n.encode(R(t,r))}catch(e){throw this.error(\"Error encrypting message: \",e),e}}async encryptMessageContent(e){let t=new TextEncoder().encode(y.stringify(e));return{algorithm:\"rc.v1.aes-sha2\",ciphertext:await this.encryptText(t)}}async encryptMessage(e){let{msg:t,attachments:r}=e,o=i(e,M),n=await this.encryptMessageContent({msg:t,attachments:r});return s(s({},o),{},{content:n,t:\"e2e\",e2e:\"pending\"})}encrypt(e){if(!this.isSupportedRoomType(this.typeOfRoom))return;if(!this.groupSessionKey)throw Error(g(\"E2E_Invalid_Key\"));let t=new Date,r=new TextEncoder(\"UTF-8\").encode(y.stringify({_id:e._id,text:e.msg,userId:this.userId,ts:t}));return this.encryptText(r)}async decryptContent(e){if(e.content&&\"rc.v1.aes-sha2\"===e.content.algorithm){let t=await this.decrypt(e.content.ciphertext);Object.assign(e,t)}return e}async decryptMessage(e){if(\"e2e\"!==e.t||\"done\"===e.e2e)return e;if(e.msg){let t=await this.decrypt(e.msg);null!=t&&t.text&&(e.msg=t.text)}return e=await this.decryptContent(e),s(s({},e),{},{e2e:\"done\"})}async doDecrypt(e,t,r){let i=await k(e,t,r);return y.parse(new TextDecoder(\"UTF-8\").decode(new Uint8Array(i)))}async decrypt(e){let t=e.slice(0,12);e=e.slice(12);let[r,i]=w(n.decode(e)),s=\"\";if(t!==this.keyID){var o;let n=null===(o=this.oldKeys)||void 0===o?void 0:o.find(e=>e.e2eKeyId===t);if(!n)try{return await this.doDecrypt(r,this.groupSessionKey,i)}catch(t){return this.error(\"Error decrypting message: \",t,e),{msg:g(\"E2E_indecipherable\")}}s=n.E2EKey}try{return await this.doDecrypt(r,s||this.groupSessionKey,i)}catch(t){return this.error(\"Error decrypting message: \",t,e),{msg:g(\"E2E_Key_Error\")}}}provideKeyToUser(e){this.keyID===e&&(this.encryptKeyForOtherParticipants(),this.setState(K.READY))}onStateChange(e){return this.on(\"STATE_CHANGED\",e),()=>this.off(\"STATE_CHANGED\",e)}async encryptGroupKeyForParticipantsWaitingForTheKeys(e){if(!this.isReady())return;let t=p.findOne({rid:this.roomId}),r=await this.exportOldRoomKeys(null==t?void 0:t.oldRoomKeys),i=await Promise.all(e.map(async e=>{let{_id:t,public_key:i}=e,o=await this.encryptGroupKeyForParticipant(i),n=await this.encryptOldKeysForParticipant(i,r);return s({_id:t,key:o},n&&{oldKeys:n})}));return i}}}","map":"{\"version\":3,\"sources\":[\"app/e2e/client/rocketchat.e2e.room.js\",\"<anon>\"],\"sourcesContent\":[\"import { Base64 } from '@rocket.chat/base64';\\nimport { Emitter } from '@rocket.chat/emitter';\\nimport EJSON from 'ejson';\\n\\nimport { RoomManager } from '../../../client/lib/RoomManager';\\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\\nimport { sdk } from '../../utils/client/lib/SDKClient';\\nimport { t } from '../../utils/lib/i18n';\\nimport { E2ERoomState } from './E2ERoomState';\\nimport {\\n\\ttoString,\\n\\ttoArrayBuffer,\\n\\tjoinVectorAndEcryptedData,\\n\\tsplitVectorAndEcryptedData,\\n\\tencryptRSA,\\n\\tencryptAES,\\n\\tdecryptRSA,\\n\\tdecryptAES,\\n\\tgenerateAESKey,\\n\\texportJWKKey,\\n\\timportAESKey,\\n\\timportRSAKey,\\n\\treadFileAsArrayBuffer,\\n\\tencryptAESCTR,\\n\\tgenerateAESCTRKey,\\n\\tsha256HashFromArrayBuffer,\\n\\tcreateSha256HashFromText,\\n} from './helper';\\nimport { log, logError } from './logger';\\nimport { e2e } from './rocketchat.e2e';\\n\\nconst KEY_ID = Symbol('keyID');\\nconst PAUSED = Symbol('PAUSED');\\n\\nconst permitedMutations = {\\n\\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\\n\\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\\n\\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\\n\\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\\n\\t[E2ERoomState.ESTABLISHING]: [\\n\\t\\tE2ERoomState.READY,\\n\\t\\tE2ERoomState.KEYS_RECEIVED,\\n\\t\\tE2ERoomState.ERROR,\\n\\t\\tE2ERoomState.DISABLED,\\n\\t\\tE2ERoomState.WAITING_KEYS,\\n\\t\\tE2ERoomState.CREATING_KEYS,\\n\\t],\\n};\\n\\nconst filterMutation = (currentState, nextState) => {\\n\\tif (currentState === nextState) {\\n\\t\\treturn nextState === E2ERoomState.ERROR;\\n\\t}\\n\\n\\tif (!(currentState in permitedMutations)) {\\n\\t\\treturn nextState;\\n\\t}\\n\\n\\tif (permitedMutations[currentState].includes(nextState)) {\\n\\t\\treturn nextState;\\n\\t}\\n\\n\\treturn false;\\n};\\n\\nexport class E2ERoom extends Emitter {\\n\\tstate = undefined;\\n\\n\\t[PAUSED] = undefined;\\n\\n\\tconstructor(userId, room) {\\n\\t\\tsuper();\\n\\n\\t\\tthis.userId = userId;\\n\\t\\tthis.roomId = room._id;\\n\\t\\tthis.typeOfRoom = room.t;\\n\\t\\tthis.roomKeyId = room.e2eKeyId;\\n\\n\\t\\tthis.once(E2ERoomState.READY, async () => {\\n\\t\\t\\tawait this.decryptOldRoomKeys();\\n\\t\\t\\treturn this.decryptPendingMessages();\\n\\t\\t});\\n\\t\\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\\n\\t\\tthis.on('STATE_CHANGED', (prev) => {\\n\\t\\t\\tif (this.roomId === RoomManager.opened) {\\n\\t\\t\\t\\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tthis.on('STATE_CHANGED', () => this.handshake());\\n\\n\\t\\tthis.setState(E2ERoomState.NOT_STARTED);\\n\\t}\\n\\n\\tlog(...msg) {\\n\\t\\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\\n\\t}\\n\\n\\terror(...msg) {\\n\\t\\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\\n\\t}\\n\\n\\thasSessionKey() {\\n\\t\\treturn !!this.groupSessionKey;\\n\\t}\\n\\n\\tgetState() {\\n\\t\\treturn this.state;\\n\\t}\\n\\n\\tsetState(requestedState) {\\n\\t\\tconst currentState = this.state;\\n\\t\\tconst nextState = filterMutation(currentState, requestedState);\\n\\n\\t\\tif (!nextState) {\\n\\t\\t\\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.state = nextState;\\n\\t\\tthis.log(currentState, '->', nextState);\\n\\t\\tthis.emit('STATE_CHANGED', currentState, nextState, this);\\n\\t\\tthis.emit(nextState, this);\\n\\t}\\n\\n\\tisReady() {\\n\\t\\treturn this.state === E2ERoomState.READY;\\n\\t}\\n\\n\\tisDisabled() {\\n\\t\\treturn this.state === E2ERoomState.DISABLED;\\n\\t}\\n\\n\\tenable() {\\n\\t\\tif (this.state === E2ERoomState.READY) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.setState(E2ERoomState.READY);\\n\\t}\\n\\n\\tdisable() {\\n\\t\\tthis.setState(E2ERoomState.DISABLED);\\n\\t}\\n\\n\\tpause() {\\n\\t\\tthis.log('PAUSED', this[PAUSED], '->', true);\\n\\t\\tthis[PAUSED] = true;\\n\\t\\tthis.emit('PAUSED', true);\\n\\t}\\n\\n\\tresume() {\\n\\t\\tthis.log('PAUSED', this[PAUSED], '->', false);\\n\\t\\tthis[PAUSED] = false;\\n\\t\\tthis.emit('PAUSED', false);\\n\\t}\\n\\n\\tkeyReceived() {\\n\\t\\tthis.setState(E2ERoomState.KEYS_RECEIVED);\\n\\t}\\n\\n\\tasync shouldConvertSentMessages(message) {\\n\\t\\tif (!this.isReady() || this[PAUSED]) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (this[PAUSED] === undefined) {\\n\\t\\t\\treturn new Promise((resolve) => {\\n\\t\\t\\t\\tthis.once('PAUSED', resolve);\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tif (message.msg[0] === '/') {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tshouldConvertReceivedMessages() {\\n\\t\\treturn this.isReady();\\n\\t}\\n\\n\\tisWaitingKeys() {\\n\\t\\treturn this.state === E2ERoomState.WAITING_KEYS;\\n\\t}\\n\\n\\tget keyID() {\\n\\t\\treturn this[KEY_ID];\\n\\t}\\n\\n\\tset keyID(keyID) {\\n\\t\\tthis[KEY_ID] = keyID;\\n\\t}\\n\\n\\tasync decryptSubscription() {\\n\\t\\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\\n\\n\\t\\tif (subscription.lastMessage?.t !== 'e2e') {\\n\\t\\t\\tthis.log('decryptSubscriptions nothing to do');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst message = await this.decryptMessage(subscription.lastMessage);\\n\\n\\t\\tSubscriptions.update(\\n\\t\\t\\t{\\n\\t\\t\\t\\t_id: subscription._id,\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\t$set: {\\n\\t\\t\\t\\t\\tlastMessage: message,\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t);\\n\\t\\tthis.log('decryptSubscriptions Done');\\n\\t}\\n\\n\\tasync decryptOldRoomKeys() {\\n\\t\\tconst sub = Subscriptions.findOne({ rid: this.roomId });\\n\\n\\t\\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\\n\\t\\t\\tthis.log('decryptOldRoomKeys nothing to do');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst keys = [];\\n\\t\\tfor await (const key of sub.oldRoomKeys) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tconst k = await this.decryptSessionKey(key.E2EKey);\\n\\t\\t\\t\\tkeys.push({\\n\\t\\t\\t\\t\\t...key,\\n\\t\\t\\t\\t\\tE2EKey: k,\\n\\t\\t\\t\\t});\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tthis.error(\\n\\t\\t\\t\\t\\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tkeys.push({ ...key, E2EKey: null });\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.oldKeys = keys;\\n\\t\\tthis.log('decryptOldRoomKeys Done');\\n\\t}\\n\\n\\tasync exportOldRoomKeys(oldKeys) {\\n\\t\\tthis.log('exportOldRoomKeys starting');\\n\\t\\tif (!oldKeys || oldKeys.length === 0) {\\n\\t\\t\\tthis.log('exportOldRoomKeys nothing to do');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst keys = [];\\n\\t\\tfor await (const key of oldKeys) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tif (!key.E2EKey) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst k = await this.exportSessionKey(key.E2EKey);\\n\\t\\t\\t\\tkeys.push({\\n\\t\\t\\t\\t\\t...key,\\n\\t\\t\\t\\t\\tE2EKey: k,\\n\\t\\t\\t\\t});\\n\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\tthis.error(\\n\\t\\t\\t\\t\\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\\n\\t\\treturn keys;\\n\\t}\\n\\n\\tasync decryptPendingMessages() {\\n\\t\\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\\n\\t\\t\\tMessages.update({ _id }, await this.decryptMessage(msg));\\n\\t\\t});\\n\\t}\\n\\n\\t// Initiates E2E Encryption\\n\\tasync handshake() {\\n\\t\\tif (!e2e.isReady()) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.setState(E2ERoomState.ESTABLISHING);\\n\\n\\t\\ttry {\\n\\t\\t\\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\\n\\t\\t\\tif (groupKey) {\\n\\t\\t\\t\\tawait this.importGroupKey(groupKey);\\n\\t\\t\\t\\tthis.setState(E2ERoomState.READY);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2ERoomState.ERROR);\\n\\t\\t\\tthis.error('Error fetching group key: ', error);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\tconst room = ChatRoom.findOne({ _id: this.roomId });\\n\\t\\t\\t// Only room creator can set keys for room\\n\\t\\t\\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\\n\\t\\t\\t\\tthis.setState(E2ERoomState.CREATING_KEYS);\\n\\t\\t\\t\\tawait this.createGroupKey();\\n\\t\\t\\t\\tthis.setState(E2ERoomState.READY);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.setState(E2ERoomState.WAITING_KEYS);\\n\\t\\t\\tthis.log('Requesting room key');\\n\\t\\t\\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\\n\\t\\t} catch (error) {\\n\\t\\t\\t// this.error = error;\\n\\t\\t\\tthis.setState(E2ERoomState.ERROR);\\n\\t\\t}\\n\\t}\\n\\n\\tuserShouldCreateKeys(room) {\\n\\t\\t// On DMs, we'll allow any user to set the keys\\n\\t\\tif (room.t === 'd') {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn room.u._id === this.userId;\\n\\t}\\n\\n\\tisSupportedRoomType(type) {\\n\\t\\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\\n\\t}\\n\\n\\tasync decryptSessionKey(key) {\\n\\t\\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\\n\\t}\\n\\n\\tasync exportSessionKey(key) {\\n\\t\\tkey = key.slice(12);\\n\\t\\tkey = Base64.decode(key);\\n\\n\\t\\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\\n\\t\\treturn toString(decryptedKey);\\n\\t}\\n\\n\\tasync importGroupKey(groupKey) {\\n\\t\\tthis.log('Importing room key ->', this.roomId);\\n\\t\\t// Get existing group key\\n\\t\\t// const keyID = groupKey.slice(0, 12);\\n\\t\\tgroupKey = groupKey.slice(12);\\n\\t\\tgroupKey = Base64.decode(groupKey);\\n\\n\\t\\t// Decrypt obtained encrypted session key\\n\\t\\ttry {\\n\\t\\t\\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\\n\\t\\t\\tthis.sessionKeyExportedString = toString(decryptedKey);\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error decrypting group key: ', error);\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// When a new e2e room is created, it will be initialized without an e2e key id\\n\\t\\t// This will prevent new rooms from storing `undefined` as the keyid\\n\\t\\tif (!this.keyID) {\\n\\t\\t\\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\\n\\t\\t}\\n\\n\\t\\t// Import session key for use.\\n\\t\\ttry {\\n\\t\\t\\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\\n\\t\\t\\t// Key has been obtained. E2E is now in session.\\n\\t\\t\\tthis.groupSessionKey = key;\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error importing group key: ', error);\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tasync createNewGroupKey() {\\n\\t\\tthis.groupSessionKey = await generateAESKey();\\n\\n\\t\\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\\n\\t\\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\\n\\t\\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\\n\\t}\\n\\n\\tasync createGroupKey() {\\n\\t\\tthis.log('Creating room key');\\n\\t\\ttry {\\n\\t\\t\\tawait this.createNewGroupKey();\\n\\n\\t\\t\\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\\n\\t\\t\\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\\n\\t\\t\\t\\trid: this.roomId,\\n\\t\\t\\t\\tuid: this.userId,\\n\\t\\t\\t\\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey),\\n\\t\\t\\t});\\n\\t\\t\\tawait this.encryptKeyForOtherParticipants();\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error exporting group key: ', error);\\n\\t\\t\\tthrow error;\\n\\t\\t}\\n\\t}\\n\\n\\tasync resetRoomKey() {\\n\\t\\tthis.log('Resetting room key');\\n\\t\\tif (!e2e.publicKey) {\\n\\t\\t\\tthis.error('Cannot reset room key. No public key found.');\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.setState(E2ERoomState.CREATING_KEYS);\\n\\t\\ttry {\\n\\t\\t\\tawait this.createNewGroupKey();\\n\\n\\t\\t\\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\\n\\n\\t\\t\\tthis.setState(E2ERoomState.READY);\\n\\t\\t\\tthis.log(`Room key reset done for room ${this.roomId}`);\\n\\n\\t\\t\\treturn e2eNewKeys;\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error resetting group key: ', error);\\n\\t\\t\\tthrow error;\\n\\t\\t}\\n\\t}\\n\\n\\tonRoomKeyReset(keyID) {\\n\\t\\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\\n\\t\\tthis.setState(E2ERoomState.WAITING_KEYS);\\n\\t\\tthis.keyID = keyID;\\n\\t\\tthis.groupSessionKey = undefined;\\n\\t\\tthis.sessionKeyExportedString = undefined;\\n\\t\\tthis.sessionKeyExported = undefined;\\n\\t\\tthis.oldKeys = undefined;\\n\\t}\\n\\n\\tasync encryptKeyForOtherParticipants() {\\n\\t\\t// Encrypt generated session key for every user in room and publish to subscription model.\\n\\t\\ttry {\\n\\t\\t\\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\\n\\t\\t\\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\\n\\t\\t\\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\\n\\n\\t\\t\\tif (!users.length) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst usersSuggestedGroupKeys = { [this.roomId]: [] };\\n\\t\\t\\tfor await (const user of users) {\\n\\t\\t\\t\\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e.public_key);\\n\\t\\t\\t\\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e.public_key, decryptedOldGroupKeys);\\n\\n\\t\\t\\t\\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\\n\\t\\t} catch (error) {\\n\\t\\t\\treturn this.error('Error getting room users: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\tasync encryptOldKeysForParticipant(public_key, oldRoomKeys) {\\n\\t\\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tlet userKey;\\n\\n\\t\\ttry {\\n\\t\\t\\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\\n\\t\\t} catch (error) {\\n\\t\\t\\treturn this.error('Error importing user key: ', error);\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\tconst keys = [];\\n\\t\\t\\tfor await (const oldRoomKey of oldRoomKeys) {\\n\\t\\t\\t\\tif (!oldRoomKey.E2EKey) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\\n\\t\\t\\t\\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\\n\\n\\t\\t\\t\\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\\n\\t\\t\\t}\\n\\t\\t\\treturn keys;\\n\\t\\t} catch (error) {\\n\\t\\t\\treturn this.error('Error encrypting user key: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\tasync encryptGroupKeyForParticipant(public_key) {\\n\\t\\tlet userKey;\\n\\t\\ttry {\\n\\t\\t\\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\\n\\t\\t} catch (error) {\\n\\t\\t\\treturn this.error('Error importing user key: ', error);\\n\\t\\t}\\n\\t\\t// const vector = crypto.getRandomValues(new Uint8Array(16));\\n\\n\\t\\t// Encrypt session key for this user with his/her public key\\n\\t\\ttry {\\n\\t\\t\\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\\n\\t\\t\\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\\n\\t\\t\\treturn encryptedUserKeyToString;\\n\\t\\t} catch (error) {\\n\\t\\t\\treturn this.error('Error encrypting user key: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\t// Encrypts files before upload. I/O is in arraybuffers.\\n\\tasync encryptFile(file) {\\n\\t\\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\\n\\t\\t// \\treturn;\\n\\t\\t// }\\n\\n\\t\\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\\n\\n\\t\\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\\n\\n\\t\\tconst vector = crypto.getRandomValues(new Uint8Array(16));\\n\\t\\tconst key = await generateAESCTRKey();\\n\\t\\tlet result;\\n\\t\\ttry {\\n\\t\\t\\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\\n\\t\\t} catch (error) {\\n\\t\\t\\tconsole.log(error);\\n\\t\\t\\treturn this.error('Error encrypting group key: ', error);\\n\\t\\t}\\n\\n\\t\\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\\n\\n\\t\\tconst fileName = await createSha256HashFromText(file.name);\\n\\n\\t\\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\\n\\n\\t\\treturn {\\n\\t\\t\\tfile: encryptedFile,\\n\\t\\t\\tkey: exportedKey,\\n\\t\\t\\tiv: Base64.encode(vector),\\n\\t\\t\\ttype: file.type,\\n\\t\\t\\thash,\\n\\t\\t};\\n\\t}\\n\\n\\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\\n\\tasync decryptFile(file, key, iv) {\\n\\t\\tconst ivArray = Base64.decode(iv);\\n\\t\\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\\n\\n\\t\\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\\n\\t}\\n\\n\\t// Encrypts messages\\n\\tasync encryptText(data) {\\n\\t\\tconst vector = crypto.getRandomValues(new Uint8Array(16));\\n\\n\\t\\ttry {\\n\\t\\t\\tconst result = await encryptAES(vector, this.groupSessionKey, data);\\n\\t\\t\\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error encrypting message: ', error);\\n\\t\\t\\tthrow error;\\n\\t\\t}\\n\\t}\\n\\n\\t// Helper function for encryption of content\\n\\tasync encryptMessageContent(contentToBeEncrypted) {\\n\\t\\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\\n\\n\\t\\treturn {\\n\\t\\t\\talgorithm: 'rc.v1.aes-sha2',\\n\\t\\t\\tciphertext: await this.encryptText(data),\\n\\t\\t};\\n\\t}\\n\\n\\t// Helper function for encryption of content\\n\\tasync encryptMessage(message) {\\n\\t\\tconst { msg, attachments, ...rest } = message;\\n\\n\\t\\tconst content = await this.encryptMessageContent({ msg, attachments });\\n\\n\\t\\treturn {\\n\\t\\t\\t...rest,\\n\\t\\t\\tcontent,\\n\\t\\t\\tt: 'e2e',\\n\\t\\t\\te2e: 'pending',\\n\\t\\t};\\n\\t}\\n\\n\\t// Helper function for encryption of messages\\n\\tencrypt(message) {\\n\\t\\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!this.groupSessionKey) {\\n\\t\\t\\tthrow new Error(t('E2E_Invalid_Key'));\\n\\t\\t}\\n\\n\\t\\tconst ts = new Date();\\n\\n\\t\\tconst data = new TextEncoder('UTF-8').encode(\\n\\t\\t\\tEJSON.stringify({\\n\\t\\t\\t\\t_id: message._id,\\n\\t\\t\\t\\ttext: message.msg,\\n\\t\\t\\t\\tuserId: this.userId,\\n\\t\\t\\t\\tts,\\n\\t\\t\\t}),\\n\\t\\t);\\n\\n\\t\\treturn this.encryptText(data);\\n\\t}\\n\\n\\tasync decryptContent(data) {\\n\\t\\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\\n\\t\\t\\tconst content = await this.decrypt(data.content.ciphertext);\\n\\t\\t\\tObject.assign(data, content);\\n\\t\\t}\\n\\n\\t\\treturn data;\\n\\t}\\n\\n\\t// Decrypt messages\\n\\tasync decryptMessage(message) {\\n\\t\\tif (message.t !== 'e2e' || message.e2e === 'done') {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tif (message.msg) {\\n\\t\\t\\tconst data = await this.decrypt(message.msg);\\n\\n\\t\\t\\tif (data?.text) {\\n\\t\\t\\t\\tmessage.msg = data.text;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tmessage = await this.decryptContent(message);\\n\\n\\t\\treturn {\\n\\t\\t\\t...message,\\n\\t\\t\\te2e: 'done',\\n\\t\\t};\\n\\t}\\n\\n\\tasync doDecrypt(vector, key, cipherText) {\\n\\t\\tconst result = await decryptAES(vector, key, cipherText);\\n\\t\\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\\n\\t}\\n\\n\\tasync decrypt(message) {\\n\\t\\tconst keyID = message.slice(0, 12);\\n\\t\\tmessage = message.slice(12);\\n\\n\\t\\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\\n\\n\\t\\tlet oldKey = '';\\n\\t\\tif (keyID !== this.keyID) {\\n\\t\\t\\tconst oldRoomKey = this.oldKeys?.find((key) => key.e2eKeyId === keyID);\\n\\t\\t\\t// Messages already contain a keyID stored with them\\n\\t\\t\\t// That means that if we cannot find a keyID for the key the message has preppended to\\n\\t\\t\\t// The message is indecipherable.\\n\\t\\t\\t// In these cases, we'll give a last shot using the current session key, which may not work\\n\\t\\t\\t// but will be enough to help with some mobile issues.\\n\\t\\t\\tif (!oldRoomKey) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\\n\\t\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\t\\tthis.error('Error decrypting message: ', error, message);\\n\\t\\t\\t\\t\\treturn { msg: t('E2E_indecipherable') };\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\toldKey = oldRoomKey.E2EKey;\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.error('Error decrypting message: ', error, message);\\n\\t\\t\\treturn { msg: t('E2E_Key_Error') };\\n\\t\\t}\\n\\t}\\n\\n\\tprovideKeyToUser(keyId) {\\n\\t\\tif (this.keyID !== keyId) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.encryptKeyForOtherParticipants();\\n\\t\\tthis.setState(E2ERoomState.READY);\\n\\t}\\n\\n\\tonStateChange(cb) {\\n\\t\\tthis.on('STATE_CHANGED', cb);\\n\\t\\treturn () => this.off('STATE_CHANGED', cb);\\n\\t}\\n\\n\\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\\n\\t\\tif (!this.isReady()) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\\n\\t\\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\\n\\t\\tconst usersWithKeys = await Promise.all(\\n\\t\\t\\tusers.map(async (user) => {\\n\\t\\t\\t\\tconst { _id, public_key } = user;\\n\\t\\t\\t\\tconst key = await this.encryptGroupKeyForParticipant(public_key);\\n\\t\\t\\t\\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\\n\\t\\t\\t\\treturn { _id, key, ...(oldKeys && { oldKeys }) };\\n\\t\\t\\t}),\\n\\t\\t);\\n\\n\\t\\treturn usersWithKeys;\\n\\t}\\n}\\n\",null],\"names\":[\"_objectWithoutProperties\",\"_objectSpread\",\"_asyncIterator\",\"Base64\",\"Emitter\",\"EJSON\",\"RoomManager\",\"roomCoordinator\",\"RoomSettingsEnum\",\"ChatRoom\",\"Subscriptions\",\"Messages\",\"sdk\",\"t\",\"E2ERoomState\",\"toString\",\"toArrayBuffer\",\"joinVectorAndEcryptedData\",\"splitVectorAndEcryptedData\",\"encryptRSA\",\"encryptAES\",\"decryptRSA\",\"decryptAES\",\"generateAESKey\",\"exportJWKKey\",\"importAESKey\",\"importRSAKey\",\"readFileAsArrayBuffer\",\"encryptAESCTR\",\"generateAESCTRKey\",\"sha256HashFromArrayBuffer\",\"createSha256HashFromText\",\"log\",\"logError\",\"e2e\",\"module\",\"link\",\"default\",\"v\",\"export\",\"E2ERoom\",\"KEY_ID\",\"Symbol\",\"PAUSED\",\"permitedMutations\",\"NOT_STARTED\",\"ESTABLISHING\",\"DISABLED\",\"KEYS_RECEIVED\",\"READY\",\"CREATING_KEYS\",\"WAITING_KEYS\",\"ERROR\",\"filterMutation\",\"currentState\",\"nextState\",\"includes\",\"constructor\",\"userId\",\"room\",\"state\",\"undefined\",\"roomId\",\"_id\",\"typeOfRoom\",\"roomKeyId\",\"e2eKeyId\",\"once\",\"decryptOldRoomKeys\",\"decryptPendingMessages\",\"decryptSubscription\",\"on\",\"prev\",\"opened\",\"concat\",\"handshake\",\"setState\",\"_len\",\"arguments\",\"length\",\"msg\",\"Array\",\"_key\",\"error\",\"_len2\",\"_key2\",\"hasSessionKey\",\"groupSessionKey\",\"getState\",\"requestedState\",\"emit\",\"isReady\",\"isDisabled\",\"enable\",\"disable\",\"pause\",\"resume\",\"keyReceived\",\"shouldConvertSentMessages\",\"message\",\"Promise\",\"resolve\",\"shouldConvertReceivedMessages\",\"isWaitingKeys\",\"keyID\",\"_subscription$lastMes\",\"subscription\",\"findOne\",\"rid\",\"lastMessage\",\"decryptMessage\",\"update\",\"$set\",\"sub\",\"oldRoomKeys\",\"keys\",\"_iteratorAbruptCompletion\",\"_didIteratorError\",\"_iteratorError\",\"_step\",\"_iterator\",\"next\",\"done\",\"key\",\"value\",\"k\",\"decryptSessionKey\",\"E2EKey\",\"push\",\"e\",\"err\",\"return\",\"oldKeys\",\"exportOldRoomKeys\",\"_iteratorAbruptCompletion2\",\"_didIteratorError2\",\"_iteratorError2\",\"_step2\",\"_iterator2\",\"exportSessionKey\",\"find\",\"forEach\",\"_ref\",\"_excluded\",\"groupKey\",\"importGroupKey\",\"userShouldCreateKeys\",\"createGroupKey\",\"publish\",\"u\",\"isSupportedRoomType\",\"type\",\"getRoomDirectives\",\"allowRoomSettingChange\",\"E2E\",\"JSON\",\"parse\",\"slice\",\"decode\",\"decryptedKey\",\"privateKey\",\"sessionKeyExportedString\",\"createNewGroupKey\",\"sessionKeyExported\",\"stringify\",\"call\",\"rest\",\"post\",\"uid\",\"encryptGroupKeyForParticipant\",\"publicKey\",\"encryptKeyForOtherParticipants\",\"resetRoomKey\",\"e2eNewKeys\",\"e2eKey\",\"onRoomKeyReset\",\"mySub\",\"decryptedOldGroupKeys\",\"users\",\"filter\",\"user\",\"_user$e2e\",\"public_key\",\"usersSuggestedGroupKeys\",\"_iteratorAbruptCompletion3\",\"_didIteratorError3\",\"_iteratorError3\",\"_step3\",\"_iterator3\",\"encryptedGroupKey\",\"encryptOldKeysForParticipant\",\"userKey\",\"_iteratorAbruptCompletion4\",\"_didIteratorError4\",\"_iteratorError4\",\"_step4\",\"_iterator4\",\"oldRoomKey\",\"encryptedKey\",\"encryptedKeyToString\",\"encode\",\"Uint8Array\",\"encryptedUserKey\",\"encryptedUserKeyToString\",\"encryptFile\",\"file\",\"result\",\"fileArrayBuffer\",\"hash\",\"vector\",\"crypto\",\"getRandomValues\",\"console\",\"exportedKey\",\"window\",\"subtle\",\"exportKey\",\"fileName\",\"name\",\"encryptedFile\",\"File\",\"iv\",\"decryptFile\",\"ivArray\",\"cryptoKey\",\"importKey\",\"decrypt\",\"counter\",\"encryptText\",\"data\",\"encryptMessageContent\",\"contentToBeEncrypted\",\"TextEncoder\",\"algorithm\",\"ciphertext\",\"encryptMessage\",\"attachments\",\"_excluded2\",\"content\",\"encrypt\",\"Error\",\"ts\",\"Date\",\"text\",\"decryptContent\",\"Object\",\"assign\",\"doDecrypt\",\"cipherText\",\"TextDecoder\",\"oldKey\",\"_this$oldKeys\",\"provideKeyToUser\",\"keyId\",\"onStateChange\",\"cb\",\"off\",\"encryptGroupKeyForParticipantsWaitingForTheKeys\",\"usersWithKeys\",\"all\",\"map\"],\"mappings\":\"2BAAIA,EAAsIC,EAAsGC,EAAvMC,EAAsEC,EAA0EC,EAAuDC,EAAiGC,EAAuHC,EAAoHC,EAASC,EAAcC,EAAsIC,EAA0EC,EAAwDC,EAAmFC,EAASC,EAAcC,EAA0BC,EAA2BC,EAAWC,EAAWC,EAAWC,EAAWC,EAAeC,EAAaC,EAAaC,EAAaC,EAAsBC,EAAcC,EAAkBC,EAA0BC,EAA8sBC,EAAIC,EAAgFC,wCAAj7DC,EAAOC,IAAI,CAAC,iDAAiD,CAACC,QAAQC,CAAC,EAAEtC,EAAyBsC,CAAC,CAAC,EAAE,GAAqBH,EAAOC,IAAI,CAAC,uCAAuC,CAACC,QAAQC,CAAC,EAAErC,EAAcqC,CAAC,CAAC,EAAE,GAAsBH,EAAOC,IAAI,CAAC,uCAAuC,CAACC,QAAQC,CAAC,EAAEpC,EAAeoC,CAAC,CAAC,EAAE,GAAjVH,EAAOI,MAAM,CAAC,CAACC,QAAQA,IAAIA,CAAO,GAAcL,EAAOC,IAAI,CAAC,sBAAsB,CAACjC,OAAOmC,CAAC,EAAEnC,EAAOmC,CAAC,CAAC,EAAE,GAAeH,EAAOC,IAAI,CAAC,uBAAuB,CAAChC,QAAQkC,CAAC,EAAElC,EAAQkC,CAAC,CAAC,EAAE,GAAaH,EAAOC,IAAI,CAAC,QAAQ,CAACC,QAAQC,CAAC,EAAEjC,EAAMiC,CAAC,CAAC,EAAE,GAAmBH,EAAOC,IAAI,CAAC,kCAAkC,CAAC9B,YAAYgC,CAAC,EAAEhC,EAAYgC,CAAC,CAAC,EAAE,GAAuBH,EAAOC,IAAI,CAAC,4CAA4C,CAAC7B,gBAAgB+B,CAAC,EAAE/B,EAAgB+B,CAAC,CAAC,EAAE,GAAwBH,EAAOC,IAAI,CAAC,sCAAsC,CAAC5B,iBAAiB8B,CAAC,EAAE9B,EAAiB8B,CAAC,CAAC,EAAE,GAAuCH,EAAOC,IAAI,CAAC,sBAAsB,CAAC3B,SAAS6B,CAAC,EAAE7B,EAAS6B,CAAC,EAAE5B,cAAc4B,CAAC,EAAE5B,EAAc4B,CAAC,EAAE3B,SAAS2B,CAAC,EAAE3B,EAAS2B,CAAC,CAAC,EAAE,GAAWH,EAAOC,IAAI,CAAC,mCAAmC,CAACxB,IAAI0B,CAAC,EAAE1B,EAAI0B,CAAC,CAAC,EAAE,GAASH,EAAOC,IAAI,CAAC,uBAAuB,CAACvB,EAAEyB,CAAC,EAAEzB,EAAEyB,CAAC,CAAC,EAAE,GAAoBH,EAAOC,IAAI,CAAC,iBAAiB,CAACtB,aAAawB,CAAC,EAAExB,EAAawB,CAAC,CAAC,EAAE,GAA8RH,EAAOC,IAAI,CAAC,WAAW,CAACrB,SAASuB,CAAC,EAAEvB,EAASuB,CAAC,EAAEtB,cAAcsB,CAAC,EAAEtB,EAAcsB,CAAC,EAAErB,0BAA0BqB,CAAC,EAAErB,EAA0BqB,CAAC,EAAEpB,2BAA2BoB,CAAC,EAAEpB,EAA2BoB,CAAC,EAAEnB,WAAWmB,CAAC,EAAEnB,EAAWmB,CAAC,EAAElB,WAAWkB,CAAC,EAAElB,EAAWkB,CAAC,EAAEjB,WAAWiB,CAAC,EAAEjB,EAAWiB,CAAC,EAAEhB,WAAWgB,CAAC,EAAEhB,EAAWgB,CAAC,EAAEf,eAAee,CAAC,EAAEf,EAAee,CAAC,EAAEd,aAAac,CAAC,EAAEd,EAAac,CAAC,EAAEb,aAAaa,CAAC,EAAEb,EAAaa,CAAC,EAAEZ,aAAaY,CAAC,EAAEZ,EAAaY,CAAC,EAAEX,sBAAsBW,CAAC,EAAEX,EAAsBW,CAAC,EAAEV,cAAcU,CAAC,EAAEV,EAAcU,CAAC,EAAET,kBAAkBS,CAAC,EAAET,EAAkBS,CAAC,EAAER,0BAA0BQ,CAAC,EAAER,EAA0BQ,CAAC,EAAEP,yBAAyBO,CAAC,EAAEP,EAAyBO,CAAC,CAAC,EAAE,IAAqBH,EAAOC,IAAI,CAAC,WAAW,CAACJ,IAAIM,CAAC,EAAEN,EAAIM,CAAC,EAAEL,SAASK,CAAC,EAAEL,EAASK,CAAC,CAAC,EAAE,IAAYH,EAAOC,IAAI,CAAC,mBAAmB,CAACF,IAAII,CAAC,EAAEJ,EAAII,CAAC,CAAC,EAAE,IAiCjgE,IAAMG,EAASC,OAAO,SAChBC,EAASD,OAAO,UAEhBE,EAAoB,CACzB,CAAC9B,EAAa+B,WAAW,CAAA,CAAG,CAAC/B,EAAagC,YAAY,CAAEhC,EAAaiC,QAAQ,CAAEjC,EAAakC,aAAa,CAAC,CAC1G,CAAClC,EAAamC,KAAK,CAAA,CAAG,CAACnC,EAAaiC,QAAQ,CAAEjC,EAAaoC,aAAa,CAAEpC,EAAaqC,YAAY,CAAC,CACpG,CAACrC,EAAasC,KAAK,CAAA,CAAG,CAACtC,EAAakC,aAAa,CAAElC,EAAa+B,WAAW,CAAC,CAC5E,CAAC/B,EAAaqC,YAAY,CAAA,CAAG,CAACrC,EAAakC,aAAa,CAAElC,EAAasC,KAAK,CAAEtC,EAAaiC,QAAQ,CAAC,CACpG,CAACjC,EAAagC,YAAY,CAAA,CAAG,CAC5BhC,EAAamC,KAAK,CAClBnC,EAAakC,aAAa,CAC1BlC,EAAasC,KAAK,CAClBtC,EAAaiC,QAAQ,CACrBjC,EAAaqC,YAAY,CACzBrC,EAAaoC,aAAa,CAAA,AAE5B,EAEMG,EAAiBA,CAACC,EAAcC,IACrC,AAAID,IAAiBC,EACbA,IAAczC,EAAasC,KAAK,IAGpC,CAAEE,CAAAA,KAAgBV,CAAAA,GAIlBA,CAAiB,CAACU,EAAa,CAACE,QAAQ,CAACD,KAHrCA,CAUF,OAAMf,UAAgBpC,EAK5BqD,YAAYC,CAAM,CAAEC,CAAI,CAAE,CACzB,KAAK,GAAG,IAAA,CALTC,KAAK,CAAGC,KAAAA,EAAS,IAAA,CAEhBlB,EAAM,CAAIkB,KAAAA,EAKV,IAAI,CAACH,MAAM,CAAGA,EACd,IAAI,CAACI,MAAM,CAAGH,EAAKI,GAAG,CACtB,IAAI,CAACC,UAAU,CAAGL,EAAK9C,CAAC,CACxB,IAAI,CAACoD,SAAS,CAAGN,EAAKO,QAAQ,CAE9B,IAAI,CAACC,IAAI,CAACrD,EAAamC,KAAK,CAAE,UAC7B,MAAM,IAAI,CAACmB,kBAAkB,GACtB,IAAI,CAACC,sBAAsB,KAEnC,IAAI,CAACF,IAAI,CAACrD,EAAamC,KAAK,CAAE,IAAM,IAAI,CAACqB,mBAAmB,IAC5D,IAAI,CAACC,EAAE,CAAC,gBAAkBC,IACrB,IAAI,CAACV,MAAM,GAAKxD,EAAYmE,MAAM,EACrC,IAAI,CAACzC,GAAG,CAAA,UAAA0C,MAAA,CAAWF,EAAI,KAAK,gBAE9B,GACA,IAAI,CAACD,EAAE,CAAC,gBAAiB,IAAM,IAAI,CAACI,SAAS,IAE7C,IAAI,CAACC,QAAQ,CAAC9D,EAAa+B,WAAW,CACvC,CAEAb,KAAY,CAAA,IAAA,IAAA6C,EAAAC,UAAAC,MAAA,CAALC,EAAG,AAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAHF,CAAG,CAAAE,EAAA,CAAAJ,SAAA,CAAAI,EAAA,CACTlD,EAAG,qBAAA0C,MAAA,CAAsB,IAAI,CAACd,KAAK,CAAA,WAAAc,MAAA,CAAU,IAAI,CAACZ,MAAM,CAAA,SAASkB,EAClE,CAEAG,OAAc,CAAA,IAAA,IAAAC,EAAAN,UAAAC,MAAA,CAALC,EAAG,AAAAC,MAAAG,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAHL,CAAG,CAAAK,EAAA,CAAAP,SAAA,CAAAO,EAAA,CACXpD,EAAQ,qBAAAyC,MAAA,CAAsB,IAAI,CAACd,KAAK,CAAA,WAAAc,MAAA,CAAU,IAAI,CAACZ,MAAM,CAAA,SAASkB,EACvE,CAEAM,eAAgB,CACf,MAAO,CAAC,CAAC,IAAI,CAACC,eAAe,AAC9B,CAEAC,UAAW,CACV,OAAO,IAAI,CAAC5B,KAAK,AAClB,CAEAgB,SAASa,CAAc,CAAE,CACxB,IAAMnC,EAAe,IAAI,CAACM,KAAK,CACzBL,EAAYF,EAAeC,EAAcmC,GAE/C,GAAI,CAAClC,EAAW,CACf,IAAI,CAAC4B,KAAK,CAAA,iBAAAT,MAAA,CAAkBpB,EAAY,QAAAoB,MAAA,CAAOe,IAC/C,MACD,CAEA,IAAI,CAAC7B,KAAK,CAAGL,EACb,IAAI,CAACvB,GAAG,CAACsB,EAAc,KAAMC,GAC7B,IAAI,CAACmC,IAAI,CAAC,gBAAiBpC,EAAcC,EAAW,IAAI,EACxD,IAAI,CAACmC,IAAI,CAACnC,EAAW,IAAI,CAC1B,CAEAoC,SAAU,CACT,OAAO,IAAI,CAAC/B,KAAK,GAAK9C,EAAamC,KAAK,AACzC,CAEA2C,YAAa,CACZ,OAAO,IAAI,CAAChC,KAAK,GAAK9C,EAAaiC,QAAQ,AAC5C,CAEA8C,QAAS,CACJ,IAAI,CAACjC,KAAK,GAAK9C,EAAamC,KAAK,EAIrC,IAAI,CAAC2B,QAAQ,CAAC9D,EAAamC,KAAK,CACjC,CAEA6C,SAAU,CACT,IAAI,CAAClB,QAAQ,CAAC9D,EAAaiC,QAAQ,CACpC,CAEAgD,OAAQ,CACP,IAAI,CAAC/D,GAAG,CAAC,SAAU,IAAI,CAACW,EAAO,CAAE,KAAM,CAAA,GACvC,IAAI,CAACA,EAAO,CAAG,CAAA,EACf,IAAI,CAAC+C,IAAI,CAAC,SAAU,CAAA,EACrB,CAEAM,QAAS,CACR,IAAI,CAAChE,GAAG,CAAC,SAAU,IAAI,CAACW,EAAO,CAAE,KAAM,CAAA,GACvC,IAAI,CAACA,EAAO,CAAG,CAAA,EACf,IAAI,CAAC+C,IAAI,CAAC,SAAU,CAAA,EACrB,CAEAO,aAAc,CACb,IAAI,CAACrB,QAAQ,CAAC9D,EAAakC,aAAa,CACzC,CAEA,MAAMkD,0BAA0BC,CAAO,CAAE,OACxC,CAAI,CAAC,IAAI,CAACR,OAAO,KAAM,IAAI,CAAChD,EAAO,GAI/B,AAAiBkB,KAAAA,IAAjB,IAAI,CAAClB,EAAO,CACR,IAAIyD,QAASC,IACnB,IAAI,CAAClC,IAAI,CAAC,SAAUkC,EACrB,GAGGF,AAAmB,MAAnBA,EAAQnB,GAAG,CAAC,EAAE,CAKnB,CAEAsB,+BAAgC,CAC/B,OAAO,IAAI,CAACX,OAAO,EACpB,CAEAY,eAAgB,CACf,OAAO,IAAI,CAAC3C,KAAK,GAAK9C,EAAaqC,YAAY,AAChD,CAEA,IAAIqD,OAAQ,CACX,OAAO,IAAI,CAAC/D,EAAO,AACpB,CAEA,IAAI+D,MAAMA,CAAK,CAAE,CAChB,IAAI,CAAC/D,EAAO,CAAG+D,CAChB,CAEA,MAAMlC,qBAAsB,CAAA,IAAAmC,EAC3B,IAAMC,EAAehG,EAAciG,OAAO,CAAC,CAAEC,IAAK,IAAI,CAAC9C,MAAAA,AAAO,GAE9D,GAAI,CAAA,AAAwB,OAAxB2C,CAAAA,EAAAC,EAAaG,WAAW,AAAXA,GAAWJ,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAxBA,EAA0B5F,CAAC,AAADA,IAAM,MAAO,CAC1C,IAAI,CAACmB,GAAG,CAAC,sCACT,MACD,CAEA,IAAMmE,EAAU,MAAM,IAAI,CAACW,cAAc,CAACJ,EAAaG,WAAW,EAElEnG,EAAcqG,MAAM,CACnB,CACChD,IAAK2C,EAAa3C,GAAAA,AACnB,EACA,CACCiD,KAAM,CACLH,YAAaV,CACd,CACD,GAED,IAAI,CAACnE,GAAG,CAAC,4BACV,CAEA,MAAMoC,oBAAqB,CAC1B,IAAM6C,EAAMvG,EAAciG,OAAO,CAAC,CAAEC,IAAK,IAAI,CAAC9C,MAAAA,AAAO,GAErD,GAAI,CAACmD,CAAAA,MAAAA,GAAAA,EAAKC,WAAW,AAAXA,GAAe,AAAAD,CAAAA,MAAAA,EAAG,KAAA,EAAHA,EAAKC,WAAW,CAACnC,MAAM,AAANA,IAAW,EAAG,CACvD,IAAI,CAAC/C,GAAG,CAAC,oCACT,MACD,CAEA,IAAMmF,EAAO,EAAE,CAAC,IAAAC,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAA,GAAA,CAChB,IAAA,IADgBC,EACuBC,EAAvCC,EAAAtH,EAAwB+G,EAAIC,WAAW,EAAAE,EAAA,CAAA,AAAAG,CAAAA,EAAA,MAAAC,EAAAC,IAAA,EAAA,EAAAC,IAAA,CAAAN,EAAA,CAAA,EAAE,CAAA,IAAxBO,EAAGJ,EAAAK,KAAA,CACnB,GAAI,CACH,IAAMC,EAAI,MAAM,IAAI,CAACC,iBAAiB,CAACH,EAAII,MAAM,EACjDZ,EAAKa,IAAI,CAAA/H,EAAAA,EAAA,CAAA,EACL0H,GAAG,CAAA,EAAA,CACNI,OAAQF,CAAC,GAEX,CAAE,MAAOI,EAAG,CACX,IAAI,CAAC9C,KAAK,CAAA,uCAAAT,MAAA,CAC8BiD,EAAIzD,QAAQ,CAAA,8EAEpDiD,EAAKa,IAAI,CAAA/H,EAAAA,EAAA,CAAA,EAAM0H,GAAG,CAAA,EAAA,CAAEI,OAAQ,IAAI,GACjC,CACD,CAAC,CAAA,MAAAG,EAAA,CAAAb,EAAA,CAAA,EAAAC,EAAAY,CAAA,QAAA,CAAA,GAAA,CAAAd,GAAAI,AAAA,MAAAA,EAAAW,MAAA,EAAA,MAAAX,EAAAW,MAAA,EAAA,QAAA,CAAA,GAAAd,EAAA,MAAAC,CAAA,CAAA,CAED,IAAI,CAACc,OAAO,CAAGjB,EACf,IAAI,CAACnF,GAAG,CAAC,0BACV,CAEA,MAAMqG,kBAAkBD,CAAO,CAAE,CAEhC,GADA,IAAI,CAACpG,GAAG,CAAC,8BACL,CAACoG,GAAWA,AAAmB,IAAnBA,EAAQrD,MAAM,CAAQ,CACrC,IAAI,CAAC/C,GAAG,CAAC,mCACT,MACD,CAEA,IAAMmF,EAAO,EAAE,CAAC,IAAAmB,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAA,GAAA,CAChB,IAAA,IADgBC,EACeC,EAA/BC,EAAAxI,EAAwBkI,GAAOE,EAAA,CAAA,AAAAG,CAAAA,EAAA,MAAAC,EAAAjB,IAAA,EAAA,EAAAC,IAAA,CAAAY,EAAA,CAAA,EAAE,CAAA,IAAhBX,EAAGc,EAAAb,KAAA,CACnB,GAAI,CACH,GAAI,CAACD,EAAII,MAAM,CACd,SAGD,IAAMF,EAAI,MAAM,IAAI,CAACc,gBAAgB,CAAChB,EAAII,MAAM,EAChDZ,EAAKa,IAAI,CAAA/H,EAAAA,EAAA,CAAA,EACL0H,GAAG,CAAA,EAAA,CACNI,OAAQF,CAAC,GAEX,CAAE,MAAOI,EAAG,CACX,IAAI,CAAC9C,KAAK,CAAA,uCAAAT,MAAA,CAC8BiD,EAAIzD,QAAQ,CAAA,6EAErD,CACD,CAAC,CAAA,MAAAgE,EAAA,CAAAK,EAAA,CAAA,EAAAC,EAAAN,CAAA,QAAA,CAAA,GAAA,CAAAI,GAAAI,AAAA,MAAAA,EAAAP,MAAA,EAAA,MAAAO,EAAAP,MAAA,EAAA,QAAA,CAAA,GAAAI,EAAA,MAAAC,CAAA,CAAA,CAGD,OADA,IAAI,CAACxG,GAAG,CAAA,2BAAA0C,MAAA,CAA4ByC,EAAKpC,MAAM,CAAA,mBACxCoC,CACR,CAEA,MAAM9C,wBAAyB,CAC9B,OAAO1D,EAASiI,IAAI,CAAC,CAAEhC,IAAK,IAAI,CAAC9C,MAAM,CAAEjD,EAAG,MAAOqB,IAAK,SAAU,GAAG2G,OAAO,CAAC,MAAAC,IAA2B,GAApB,CAAE/E,IAAAA,CAAAA,CAAa,CAAA+E,EAAL9D,EAAGhF,EAAA8I,EAAAC,GAChGpI,EAASoG,MAAM,CAAC,CAAEhD,IAAAA,CAAI,EAAG,MAAM,IAAI,CAAC+C,cAAc,CAAC9B,GACpD,EACD,CAGA,MAAML,WAAY,CACjB,GAAKzC,EAAIyD,OAAO,IAIZ,CAAA,IAAI,CAAC/B,KAAK,GAAK9C,EAAakC,aAAa,EAAI,IAAI,CAACY,KAAK,GAAK9C,EAAa+B,WAAW,AAAXA,GAI7E,IAAI,CAAC+B,QAAQ,CAAC9D,EAAagC,YAAY,EAEvC,GAAI,CACH,IAAMkG,EAAWtI,EAAciG,OAAO,CAAC,CAAEC,IAAK,IAAI,CAAC9C,MAAAA,AAAO,GAAGiE,MAAM,CACnE,GAAIiB,EAAU,CACb,MAAM,IAAI,CAACC,cAAc,CAACD,GAC1B,IAAI,CAACpE,QAAQ,CAAC9D,EAAamC,KAAK,EAChC,MACD,CACD,CAAE,MAAOkC,EAAO,CACf,IAAI,CAACP,QAAQ,CAAC9D,EAAasC,KAAK,EAChC,IAAI,CAAC+B,KAAK,CAAC,6BAA8BA,GACzC,MACD,CAEA,GAAI,CACH,IAAMxB,EAAOlD,EAASkG,OAAO,CAAC,CAAE5C,IAAK,IAAI,CAACD,MAAAA,AAAO,GAEjD,GAAI,CAACH,EAAKO,QAAQ,EAAI,IAAI,CAACgF,oBAAoB,CAACvF,GAAO,CACtD,IAAI,CAACiB,QAAQ,CAAC9D,EAAaoC,aAAa,EACxC,MAAM,IAAI,CAACiG,cAAc,GACzB,IAAI,CAACvE,QAAQ,CAAC9D,EAAamC,KAAK,EAChC,MACD,CAEA,IAAI,CAAC2B,QAAQ,CAAC9D,EAAaqC,YAAY,EACvC,IAAI,CAACnB,GAAG,CAAC,uBACTpB,EAAIwI,OAAO,CAAC,oBAAqB,CAAA,GAAA1E,MAAA,CAAI,IAAI,CAACZ,MAAM,CAAA,kBAAkB,IAAI,CAACA,MAAM,CAAEH,EAAKO,QAAQ,CAAC,CAC9F,CAAE,MAAOiB,EAAO,CAEf,IAAI,CAACP,QAAQ,CAAC9D,EAAasC,KAAK,CACjC,EACD,CAEA8F,qBAAqBvF,CAAI,CAAE,OAE1B,AAAe,MAAXA,EAAK9C,CAAC,EAIH8C,EAAK0F,CAAC,CAACtF,GAAG,GAAK,IAAI,CAACL,MAAM,AAClC,CAEA4F,oBAAoBC,CAAI,CAAE,CACzB,OAAOhJ,EAAgBiJ,iBAAiB,CAACD,GAAME,sBAAsB,CAAC,CAAC,EAAGjJ,EAAiBkJ,GAAG,CAC/F,CAEA,MAAM5B,kBAAkBH,CAAG,CAAE,CAC5B,OAAOlG,EAAakI,KAAKC,KAAK,CAAC,MAAM,IAAI,CAACjB,gBAAgB,CAAChB,IAC5D,CAEA,MAAMgB,iBAAiBhB,CAAG,CAAE,CAC3BA,EAAMA,EAAIkC,KAAK,CAAC,IAChBlC,EAAMxH,EAAO2J,MAAM,CAACnC,GAEpB,IAAMoC,EAAe,MAAM1I,EAAWa,EAAI8H,UAAU,CAAErC,GACtD,OAAO5G,EAASgJ,EACjB,CAEA,MAAMd,eAAeD,CAAQ,CAAE,CAC9B,IAAI,CAAChH,GAAG,CAAC,wBAAyB,IAAI,CAAC8B,MAAM,EAG7CkF,EAAWA,EAASa,KAAK,CAAC,IAC1Bb,EAAW7I,EAAO2J,MAAM,CAACd,GAGzB,GAAI,CACH,IAAMe,EAAe,MAAM1I,EAAWa,EAAI8H,UAAU,CAAEhB,EACtD,CAAA,IAAI,CAACiB,wBAAwB,CAAGlJ,EAASgJ,EAC1C,CAAE,MAAO5E,EAAO,CAEf,OADA,IAAI,CAACA,KAAK,CAAC,+BAAgCA,GACpC,CAAA,CACR,CAIK,IAAI,CAACqB,KAAK,EACd,CAAA,IAAI,CAACA,KAAK,CAAG,IAAI,CAACvC,SAAS,EAAI,AAAC,CAAA,MAAMlC,EAAyB,IAAI,CAACkI,wBAAwB,CAAA,EAAGJ,KAAK,CAAC,EAAG,GAAE,EAI3G,GAAI,CACH,IAAMlC,EAAM,MAAMlG,EAAakI,KAAKC,KAAK,CAAC,IAAI,CAACK,wBAAwB,EAEvE,CAAA,IAAI,CAAC1E,eAAe,CAAGoC,CACxB,CAAE,MAAOxC,EAAO,CAEf,OADA,IAAI,CAACA,KAAK,CAAC,8BAA+BA,GACnC,CAAA,CACR,CAEA,MAAO,CAAA,CACR,CAEA,MAAM+E,mBAAoB,CACzB,IAAI,CAAC3E,eAAe,CAAG,MAAMhE,IAE7B,IAAM4I,EAAqB,MAAM3I,EAAa,IAAI,CAAC+D,eAAe,CAClE,CAAA,IAAI,CAAC0E,wBAAwB,CAAGN,KAAKS,SAAS,CAACD,GAC/C,IAAI,CAAC3D,KAAK,CAAG,AAAC,CAAA,MAAMzE,EAAyB,IAAI,CAACkI,wBAAwB,CAAA,EAAGJ,KAAK,CAAC,EAAG,GACvF,CAEA,MAAMV,gBAAiB,CACtB,IAAI,CAACnH,GAAG,CAAC,qBACT,GAAI,CACH,MAAM,IAAI,CAACkI,iBAAiB,GAE5B,MAAMtJ,EAAIyJ,IAAI,CAAC,mBAAoB,IAAI,CAACvG,MAAM,CAAE,IAAI,CAAC0C,KAAK,EAC1D,MAAM5F,EAAI0J,IAAI,CAACC,IAAI,CAAC,yBAA0B,CAC7C3D,IAAK,IAAI,CAAC9C,MAAM,CAChB0G,IAAK,IAAI,CAAC9G,MAAM,CAChBiE,IAAK,MAAM,IAAI,CAAC8C,6BAA6B,CAACvI,EAAIwI,SAAS,CAC5D,GACA,MAAM,IAAI,CAACC,8BAA8B,EAC1C,CAAE,MAAOxF,EAAO,CAEf,MADA,IAAI,CAACA,KAAK,CAAC,8BAA+BA,GACpCA,CACP,CACD,CAEA,MAAMyF,cAAe,CAEpB,GADA,IAAI,CAAC5I,GAAG,CAAC,sBACL,CAACE,EAAIwI,SAAS,CAAE,CACnB,IAAI,CAACvF,KAAK,CAAC,+CACX,MACD,CAEA,IAAI,CAACP,QAAQ,CAAC9D,EAAaoC,aAAa,EACxC,GAAI,CACH,MAAM,IAAI,CAACgH,iBAAiB,GAE5B,IAAMW,EAAa,CAAE3G,SAAU,IAAI,CAACsC,KAAK,CAAEsE,OAAQ,MAAM,IAAI,CAACL,6BAA6B,CAACvI,EAAIwI,SAAS,CAAE,EAK3G,OAHA,IAAI,CAAC9F,QAAQ,CAAC9D,EAAamC,KAAK,EAChC,IAAI,CAACjB,GAAG,CAAA,gCAAA0C,MAAA,CAAiC,IAAI,CAACZ,MAAM,GAE7C+G,CACR,CAAE,MAAO1F,EAAO,CAEf,MADA,IAAI,CAACA,KAAK,CAAC,8BAA+BA,GACpCA,CACP,CACD,CAEA4F,eAAevE,CAAK,CAAE,CACrB,IAAI,CAACxE,GAAG,CAAA,oCAAA0C,MAAA,CAAqC8B,EAAK,qBAAA9B,MAAA,CAAoB,IAAI,CAAC8B,KAAK,GAChF,IAAI,CAAC5B,QAAQ,CAAC9D,EAAaqC,YAAY,EACvC,IAAI,CAACqD,KAAK,CAAGA,EACb,IAAI,CAACjB,eAAe,CAAG1B,KAAAA,EACvB,IAAI,CAACoG,wBAAwB,CAAGpG,KAAAA,EAChC,IAAI,CAACsG,kBAAkB,CAAGtG,KAAAA,EAC1B,IAAI,CAACuE,OAAO,CAAGvE,KAAAA,CAChB,CAEA,MAAM8G,gCAAiC,CAEtC,GAAI,CACH,IAAMK,EAAQtK,EAAciG,OAAO,CAAC,CAAEC,IAAK,IAAI,CAAC9C,MAAAA,AAAO,GACjDmH,EAAwB,MAAM,IAAI,CAAC5C,iBAAiB,CAAC2C,MAAAA,EAAK,KAAA,EAALA,EAAO9D,WAAW,EACvEgE,EAAQ,AAAC,CAAA,MAAMtK,EAAIyJ,IAAI,CAAC,+BAAgC,IAAI,CAACvG,MAAM,CAAA,EAAGoH,KAAK,CAACC,MAAM,CAAEC,IAAI,IAAAC,EAAA,OAAKD,MAAAA,EAAI,KAAA,EAAA,AAAK,OAALC,CAAAA,EAAJD,EAAMlJ,GAAG,AAAHA,GAAGmJ,AAAA,KAAA,IAAAA,EAAA,KAAA,EAATA,EAAWC,UAAU,GAExH,GAAI,CAACJ,EAAMnG,MAAM,CAChB,OAGD,IAAMwG,EAA0B,CAAE,CAAC,IAAI,CAACzH,MAAM,CAAA,CAAG,EAAA,AAAG,EAAE,IAAA0H,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAA,GAAA,CACtD,IAAA,IADsDC,EACxBC,EAA9BC,EAAA1L,EAAyBgL,GAAKM,EAAA,CAAA,AAAAG,CAAAA,EAAA,MAAAC,EAAAnE,IAAA,EAAA,EAAAC,IAAA,CAAA8D,EAAA,CAAA,EAAE,CAAA,IAAfJ,EAAIO,EAAA/D,KAAA,EACpB,IAAMiE,EAAoB,MAAM,IAAI,CAACpB,6BAA6B,CAACW,EAAKlJ,GAAG,CAACoJ,UAAU,EAChFlD,EAAU,MAAM,IAAI,CAAC0D,4BAA4B,CAACV,EAAKlJ,GAAG,CAACoJ,UAAU,CAAEL,GAE7EM,CAAuB,CAAC,IAAI,CAACzH,MAAM,CAAC,CAACkE,IAAI,CAAA/H,EAAA,CAAG8D,IAAKqH,EAAKrH,GAAG,CAAE4D,IAAKkE,CAAiB,EAAMzD,GAAW,CAAEA,QAAAA,CAAQ,GAAM,CACnH,CAAC,CAAA,MAAAF,EAAA,CAAAuD,EAAA,CAAA,EAAAC,EAAAxD,CAAA,QAAA,CAAA,GAAA,CAAAsD,GAAAI,AAAA,MAAAA,EAAAzD,MAAA,EAAA,MAAAyD,EAAAzD,MAAA,EAAA,QAAA,CAAA,GAAAsD,EAAA,MAAAC,CAAA,CAAA,CAED,MAAM9K,EAAI0J,IAAI,CAACC,IAAI,CAAC,yCAA0C,CAAEgB,wBAAAA,CAAwB,EACzF,CAAE,MAAOpG,EAAO,CACf,OAAO,IAAI,CAACA,KAAK,CAAC,6BAA8BA,EACjD,CACD,CAEA,MAAM2G,6BAA6BR,CAAU,CAAEpE,CAAW,CAAE,KAKvD6E,EAJJ,GAAI,AAAC7E,GAAeA,AAAuB,IAAvBA,EAAYnC,MAAM,EAMtC,GAAI,CACHgH,EAAU,MAAMrK,EAAaiI,KAAKC,KAAK,CAAC0B,GAAa,CAAC,UAAU,CACjE,CAAE,MAAOnG,EAAO,CACf,OAAO,IAAI,CAACA,KAAK,CAAC,6BAA8BA,EACjD,CAEA,GAAI,CACH,IAAMgC,EAAO,EAAE,CAAC,IAAA6E,EAAA,CAAA,EAAAC,EAAA,CAAA,EAAA,GAAA,CAChB,IAAA,IADgBC,EAC0BC,EAA1CC,EAAAlM,EAA+BgH,GAAW8E,EAAA,CAAA,AAAAG,CAAAA,EAAA,MAAAC,EAAA3E,IAAA,EAAA,EAAAC,IAAA,CAAAsE,EAAA,CAAA,EAAE,CAAA,IAA3BK,EAAUF,EAAAvE,KAAA,EAC1B,GAAI,CAACyE,EAAWtE,MAAM,CACrB,SAED,IAAMuE,EAAe,MAAMnL,EAAW4K,EAAS/K,EAAcqL,EAAWtE,MAAM,GACxEwE,EAAuBF,EAAWnI,QAAQ,CAAG/D,EAAOqM,MAAM,CAAC,IAAIC,WAAWH,IAEhFnF,EAAKa,IAAI,CAAA/H,EAAAA,EAAA,CAAA,EAAMoM,GAAU,CAAA,EAAA,CAAEtE,OAAQwE,CAAoB,GAAI,CAC5D,CAAC,CAAA,MAAArE,EAAA,CAAA+D,EAAA,CAAA,EAAAC,EAAAhE,CAAA,QAAA,CAAA,GAAA,CAAA8D,GAAAI,AAAA,MAAAA,EAAAjE,MAAA,EAAA,MAAAiE,EAAAjE,MAAA,EAAA,QAAA,CAAA,GAAA8D,EAAA,MAAAC,CAAA,CAAA,CACD,OAAO/E,CACR,CAAE,MAAOhC,EAAO,CACf,OAAO,IAAI,CAACA,KAAK,CAAC,8BAA+BA,EAClD,EACD,CAEA,MAAMsF,8BAA8Ba,CAAU,CAAE,CAC/C,IAAIS,EACJ,GAAI,CACHA,EAAU,MAAMrK,EAAaiI,KAAKC,KAAK,CAAC0B,GAAa,CAAC,UAAU,CACjE,CAAE,MAAOnG,EAAO,CACf,OAAO,IAAI,CAACA,KAAK,CAAC,6BAA8BA,EACjD,CAIA,GAAI,CACH,IAAMuH,EAAmB,MAAMvL,EAAW4K,EAAS/K,EAAc,IAAI,CAACiJ,wBAAwB,GACxF0C,EAA2B,IAAI,CAACnG,KAAK,CAAGrG,EAAOqM,MAAM,CAAC,IAAIC,WAAWC,IAC3E,OAAOC,CACR,CAAE,MAAOxH,EAAO,CACf,OAAO,IAAI,CAACA,KAAK,CAAC,8BAA+BA,EAClD,CACD,CAGA,MAAMyH,YAAYC,CAAI,CAAE,KAWnBC,EANJ,IAAMC,EAAkB,MAAMpL,EAAsBkL,GAE9CG,EAAO,MAAMlL,EAA0B,IAAI2K,WAAWM,IAEtDE,EAASC,OAAOC,eAAe,CAAC,IAAIV,WAAW,KAC/C9E,EAAM,MAAM9F,IAElB,GAAI,CACHiL,EAAS,MAAMlL,EAAcqL,EAAQtF,EAAKoF,EAC3C,CAAE,MAAO5H,EAAO,CAEf,OADAiI,QAAQpL,GAAG,CAACmD,GACL,IAAI,CAACA,KAAK,CAAC,+BAAgCA,EACnD,CAEA,IAAMkI,EAAc,MAAMC,OAAOJ,MAAM,CAACK,MAAM,CAACC,SAAS,CAAC,MAAO7F,GAE1D8F,EAAW,MAAM1L,EAAyB8K,EAAKa,IAAI,EAEnDC,EAAgB,IAAIC,KAAK,CAAC5M,EAAc8L,GAAQ,CAAEW,GAExD,MAAO,CACNZ,KAAMc,EACNhG,IAAK0F,EACLQ,GAAI1N,EAAOqM,MAAM,CAACS,GAClB1D,KAAMsD,EAAKtD,IAAI,CACfyD,KAAAA,CACD,CACD,CAGA,MAAMc,YAAYjB,CAAI,CAAElF,CAAG,CAAEkG,CAAE,CAAE,CAChC,IAAME,EAAU5N,EAAO2J,MAAM,CAAC+D,GACxBG,EAAY,MAAMV,OAAOJ,MAAM,CAACK,MAAM,CAACU,SAAS,CAAC,MAAOtG,EAAK,CAAE+F,KAAM,SAAU,EAAG,CAAA,EAAM,CAAC,UAAW,UAAU,EAEpH,OAAOJ,OAAOJ,MAAM,CAACK,MAAM,CAACW,OAAO,CAAC,CAAER,KAAM,UAAWS,QAASJ,EAAShJ,OAAQ,EAAG,EAAGiJ,EAAWnB,EACnG,CAGA,MAAMuB,YAAYC,CAAI,CAAE,CACvB,IAAMpB,EAASC,OAAOC,eAAe,CAAC,IAAIV,WAAW,KAErD,GAAI,CACH,IAAMK,EAAS,MAAM1L,EAAW6L,EAAQ,IAAI,CAAC1H,eAAe,CAAE8I,GAC9D,OAAO,IAAI,CAAC7H,KAAK,CAAGrG,EAAOqM,MAAM,CAACvL,EAA0BgM,EAAQH,GACrE,CAAE,MAAO3H,EAAO,CAEf,MADA,IAAI,CAACA,KAAK,CAAC,6BAA8BA,GACnCA,CACP,CACD,CAGA,MAAMmJ,sBAAsBC,CAAoB,CAAE,CACjD,IAAMF,EAAO,IAAIG,cAAchC,MAAM,CAACnM,EAAM+J,SAAS,CAACmE,IAEtD,MAAO,CACNE,UAAW,iBACXC,WAAY,MAAM,IAAI,CAACN,WAAW,CAACC,EACpC,CACD,CAGA,MAAMM,eAAexI,CAAO,CAAE,CAC7B,GAAM,CAAEnB,IAAAA,CAAG,CAAE4J,YAAAA,CAAAA,CAAsB,CAAGzI,EAATmE,EAAItK,EAAKmG,EAAO0I,GAEvCC,EAAU,MAAM,IAAI,CAACR,qBAAqB,CAAC,CAAEtJ,IAAAA,EAAK4J,YAAAA,CAAY,GAEpE,OAAA3O,EAAAA,EAAA,CAAA,EACIqK,GAAI,CAAA,EAAA,CACPwE,QAAAA,EACAjO,EAAG,MACHqB,IAAK,SAAS,EAEhB,CAGA6M,QAAQ5I,CAAO,CAAE,CAChB,GAAI,CAAC,IAAI,CAACmD,mBAAmB,CAAC,IAAI,CAACtF,UAAU,EAC5C,OAGD,GAAI,CAAC,IAAI,CAACuB,eAAe,CACxB,MAAM,AAAIyJ,MAAMnO,EAAE,oBAGnB,IAAMoO,EAAK,IAAIC,KAETb,EAAO,IAAIG,YAAY,SAAShC,MAAM,CAC3CnM,EAAM+J,SAAS,CAAC,CACfrG,IAAKoC,EAAQpC,GAAG,CAChBoL,KAAMhJ,EAAQnB,GAAG,CACjBtB,OAAQ,IAAI,CAACA,MAAM,CACnBuL,GAAAA,CACD,IAGD,OAAO,IAAI,CAACb,WAAW,CAACC,EACzB,CAEA,MAAMe,eAAef,CAAI,CAAE,CAC1B,GAAIA,EAAKS,OAAO,EAAIT,AAA2B,mBAA3BA,EAAKS,OAAO,CAACL,SAAS,CAAuB,CAChE,IAAMK,EAAU,MAAM,IAAI,CAACZ,OAAO,CAACG,EAAKS,OAAO,CAACJ,UAAU,EAC1DW,OAAOC,MAAM,CAACjB,EAAMS,EACrB,CAEA,OAAOT,CACR,CAGA,MAAMvH,eAAeX,CAAO,CAAE,CAC7B,GAAIA,AAAc,QAAdA,EAAQtF,CAAC,EAAcsF,AAAgB,SAAhBA,EAAQjE,GAAG,CACrC,OAAOiE,EAGR,GAAIA,EAAQnB,GAAG,CAAE,CAChB,IAAMqJ,EAAO,MAAM,IAAI,CAACH,OAAO,CAAC/H,EAAQnB,GAAG,QAEvCqJ,GAAAA,EAAMc,IAAI,EACbhJ,CAAAA,EAAQnB,GAAG,CAAGqJ,EAAKc,IAAI,AAAJA,CAErB,CAIA,OAFAhJ,EAAU,MAAM,IAAI,CAACiJ,cAAc,CAACjJ,GAEpClG,EAAAA,EAAA,CAAA,EACIkG,GAAO,CAAA,EAAA,CACVjE,IAAK,MAAM,EAEb,CAEA,MAAMqN,UAAUtC,CAAM,CAAEtF,CAAG,CAAE6H,CAAU,CAAE,CACxC,IAAM1C,EAAS,MAAMxL,EAAW2L,EAAQtF,EAAK6H,GAC7C,OAAOnP,EAAMuJ,KAAK,CAAC,IAAI6F,YAAY,SAAS3F,MAAM,CAAC,IAAI2C,WAAWK,IACnE,CAEA,MAAMoB,QAAQ/H,CAAO,CAAE,CACtB,IAAMK,EAAQL,EAAQ0D,KAAK,CAAC,EAAG,IAC/B1D,EAAUA,EAAQ0D,KAAK,CAAC,IAExB,GAAM,CAACoD,EAAQuC,EAAW,CAAGtO,EAA2Bf,EAAO2J,MAAM,CAAC3D,IAElEuJ,EAAS,GACb,GAAIlJ,IAAU,IAAI,CAACA,KAAK,CAAE,CAAA,IAAAmJ,EACzB,IAAMtD,EAAU,AAAe,OAAfsD,CAAAA,EAAG,IAAI,CAACvH,OAAO,AAAPA,GAAOuH,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAZA,EAAc/G,IAAI,CAAEjB,GAAQA,EAAIzD,QAAQ,GAAKsC,GAMhE,GAAI,CAAC6F,EACJ,GAAI,CACH,OAAO,MAAM,IAAI,CAACkD,SAAS,CAACtC,EAAQ,IAAI,CAAC1H,eAAe,CAAEiK,EAC3D,CAAE,MAAOrK,EAAO,CAEf,OADA,IAAI,CAACA,KAAK,CAAC,6BAA8BA,EAAOgB,GACzC,CAAEnB,IAAKnE,EAAE,qBAAsB,CACvC,CAED6O,EAASrD,EAAWtE,MAAM,AAC3B,CAEA,GAAI,CACH,OAAO,MAAM,IAAI,CAACwH,SAAS,CAACtC,EAAQyC,GAAU,IAAI,CAACnK,eAAe,CAAEiK,EACrE,CAAE,MAAOrK,EAAO,CAEf,OADA,IAAI,CAACA,KAAK,CAAC,6BAA8BA,EAAOgB,GACzC,CAAEnB,IAAKnE,EAAE,gBAAiB,CAClC,CACD,CAEA+O,iBAAiBC,CAAK,CAAE,CACnB,IAAI,CAACrJ,KAAK,GAAKqJ,IAInB,IAAI,CAAClF,8BAA8B,GACnC,IAAI,CAAC/F,QAAQ,CAAC9D,EAAamC,KAAK,EACjC,CAEA6M,cAAcC,CAAE,CAAE,CAEjB,OADA,IAAI,CAACxL,EAAE,CAAC,gBAAiBwL,GAClB,IAAM,IAAI,CAACC,GAAG,CAAC,gBAAiBD,EACxC,CAEA,MAAME,gDAAgD/E,CAAK,CAAE,CAC5D,GAAI,CAAC,IAAI,CAACvF,OAAO,GAChB,OAGD,IAAMqF,EAAQtK,EAAciG,OAAO,CAAC,CAAEC,IAAK,IAAI,CAAC9C,MAAAA,AAAO,GACjDmH,EAAwB,MAAM,IAAI,CAAC5C,iBAAiB,CAAC2C,MAAAA,EAAK,KAAA,EAALA,EAAO9D,WAAW,EACvEgJ,EAAgB,MAAM9J,QAAQ+J,GAAG,CACtCjF,EAAMkF,GAAG,CAAC,MAAOhF,IAChB,GAAM,CAAErH,IAAAA,CAAG,CAAEuH,WAAAA,CAAAA,CAAY,CAAGF,EACtBzD,EAAM,MAAM,IAAI,CAAC8C,6BAA6B,CAACa,GAC/ClD,EAAU,MAAM,IAAI,CAAC0D,4BAA4B,CAACR,EAAYL,GACpE,OAAAhL,EAAA,CAAS8D,IAAAA,EAAK4D,IAAAA,CAAG,EAAMS,GAAW,CAAEA,QAAAA,CAAQ,EAC7C,IAGD,OAAO8H,CACR,CACD\"}"}