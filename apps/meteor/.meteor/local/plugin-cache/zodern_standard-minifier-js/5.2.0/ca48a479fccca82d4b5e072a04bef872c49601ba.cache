{"code":"function module(e,t,s){let a,r,n,c,u;s.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){a=e}},0),s.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){r=e},useToastMessageDispatch(e){n=e}},0),s.link(\"@tanstack/react-query\",{useQuery(e){c=e}},1),s.link(\"react\",{useMemo(e){u=e}},2),s.exportDefault(e=>{let{searchTerm:t,prevSearchTerm:s,sortData:o,paginationData:i,tab:l,selectedRoles:d}=e,{setCurrent:g,itemsPerPage:p,current:h}=i,{sortBy:k,sortDirection:y}=o,f=u(()=>(t!==s.current&&g(0),a(a({},{all:{},pending:{hasLoggedIn:!1,type:\"user\"},active:{hasLoggedIn:!0,status:\"active\"},deactivated:{hasLoggedIn:!0,status:\"deactivated\"}}[l]),{},{searchTerm:t,roles:d,sort:'{ \"'.concat(k,'\": ').concat(\"asc\"===y?1:-1,\" }\"),count:p,offset:t===s.current?h:0})),[h,p,s,t,d,g,k,y,l]),v=r(\"GET\",\"/v1/users.listByStatus\"),m=n(),b=c([\"users.list\",f,l],async()=>v(f),{onError:e=>{m({type:\"error\",message:e})}});return b})}","map":"{\"version\":3,\"sources\":[\"client/views/admin/users/hooks/useFilteredUsers.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { UsersListStatusParamsGET } from '@rocket.chat/rest-typings';\\nimport { useEndpoint, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\\nimport { useQuery } from '@tanstack/react-query';\\nimport type { MutableRefObject } from 'react';\\nimport { useMemo } from 'react';\\n\\nimport type { usePagination } from '../../../../components/GenericTable/hooks/usePagination';\\nimport type { useSort } from '../../../../components/GenericTable/hooks/useSort';\\nimport type { AdminUsersTab, UsersTableSortingOption } from '../AdminUsersPage';\\n\\ntype UseFilteredUsersOptions = {\\n\\tsearchTerm: string;\\n\\tprevSearchTerm: MutableRefObject<string>;\\n\\ttab: AdminUsersTab;\\n\\tpaginationData: ReturnType<typeof usePagination>;\\n\\tsortData: ReturnType<typeof useSort<UsersTableSortingOption>>;\\n\\tselectedRoles: string[];\\n};\\n\\nconst useFilteredUsers = ({ searchTerm, prevSearchTerm, sortData, paginationData, tab, selectedRoles }: UseFilteredUsersOptions) => {\\n\\tconst { setCurrent, itemsPerPage, current } = paginationData;\\n\\tconst { sortBy, sortDirection } = sortData;\\n\\n\\tconst payload = useMemo(() => {\\n\\t\\tif (searchTerm !== prevSearchTerm.current) {\\n\\t\\t\\tsetCurrent(0);\\n\\t\\t}\\n\\n\\t\\tconst listUsersPayload: Partial<Record<AdminUsersTab, UsersListStatusParamsGET>> = {\\n\\t\\t\\tall: {},\\n\\t\\t\\tpending: {\\n\\t\\t\\t\\thasLoggedIn: false,\\n\\t\\t\\t\\ttype: 'user',\\n\\t\\t\\t},\\n\\t\\t\\tactive: {\\n\\t\\t\\t\\thasLoggedIn: true,\\n\\t\\t\\t\\tstatus: 'active',\\n\\t\\t\\t},\\n\\t\\t\\tdeactivated: {\\n\\t\\t\\t\\thasLoggedIn: true,\\n\\t\\t\\t\\tstatus: 'deactivated',\\n\\t\\t\\t},\\n\\t\\t};\\n\\n\\t\\treturn {\\n\\t\\t\\t...listUsersPayload[tab],\\n\\t\\t\\tsearchTerm,\\n\\t\\t\\troles: selectedRoles,\\n\\t\\t\\tsort: `{ \\\"${sortBy}\\\": ${sortDirection === 'asc' ? 1 : -1} }`,\\n\\t\\t\\tcount: itemsPerPage,\\n\\t\\t\\toffset: searchTerm === prevSearchTerm.current ? current : 0,\\n\\t\\t};\\n\\t}, [current, itemsPerPage, prevSearchTerm, searchTerm, selectedRoles, setCurrent, sortBy, sortDirection, tab]);\\n\\tconst getUsers = useEndpoint('GET', '/v1/users.listByStatus');\\n\\tconst dispatchToastMessage = useToastMessageDispatch();\\n\\tconst usersListQueryResult = useQuery(['users.list', payload, tab], async () => getUsers(payload), {\\n\\t\\tonError: (error) => {\\n\\t\\t\\tdispatchToastMessage({ type: 'error', message: error });\\n\\t\\t},\\n\\t});\\n\\treturn usersListQueryResult;\\n};\\nexport default useFilteredUsers;\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useToastMessageDispatch\",\"useQuery\",\"useMemo\",\"module\",\"link\",\"default\",\"v\",\"exportDefault\",\"_ref\",\"searchTerm\",\"prevSearchTerm\",\"sortData\",\"paginationData\",\"tab\",\"selectedRoles\",\"setCurrent\",\"itemsPerPage\",\"current\",\"sortBy\",\"sortDirection\",\"payload\",\"listUsersPayload\",\"all\",\"pending\",\"hasLoggedIn\",\"type\",\"active\",\"status\",\"deactivated\",\"roles\",\"sort\",\"concat\",\"count\",\"offset\",\"getUsers\",\"dispatchToastMessage\",\"usersListQueryResult\",\"onError\",\"error\",\"message\"],\"mappings\":\"2BACAA,EAAAC,EAASC,EAAuEC,EAAAC,EAAvEC,EAAaC,IAAA,CAAA,uCAA+B,CAAAC,QAAAC,CAA0B,EAACR,EAAAQ,CAAA,CAAA,EAAA,GAA1DH,EAAyBC,IAAA,CAAA,2BAAgC,CAACL,YAAAO,CAAA,EAAAP,EAAAO,CAAA,EAAAN,wBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAH,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,QAAA,CAAAF,QAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAAhFH,EAAOI,aAAa,CAkBKC,IAA0G,GAAzG,CAAEC,WAAAA,CAAU,CAAEC,eAAAA,CAAc,CAAEC,SAAAA,CAAQ,CAAEC,eAAAA,CAAc,CAAEC,IAAAA,CAAG,CAAEC,cAAAA,CAAAA,CAAwC,CAAAN,EACxH,CAAEO,WAAAA,CAAU,CAAEC,aAAAA,CAAY,CAAEC,QAAAA,CAAAA,CAAS,CAAGL,EACxC,CAAEM,OAAAA,CAAM,CAAEC,cAAAA,CAAAA,CAAe,CAAGR,EAE5BS,EAAUlB,EAAQ,KACnBO,IAAeC,EAAeO,OAAO,EACxCF,EAAW,GAmBZjB,EAAAA,EAAA,CAAA,EACIuB,AAjB+E,CAClFC,IAAK,CAAA,EACLC,QAAS,CACRC,YAAa,CAAA,EACbC,KAAM,QAEPC,OAAQ,CACPF,YAAa,CAAA,EACbG,OAAQ,UAETC,YAAa,CACZJ,YAAa,CAAA,EACbG,OAAQ,eAKU,CAACd,EAAI,EAAA,CAAA,EAAA,CACxBJ,WAAAA,EACAoB,MAAOf,EACPgB,KAAI,MAAAC,MAAA,CAAQb,EAAM,OAAAa,MAAA,CAAMZ,AAAkB,QAAlBA,EAA0B,EAAI,GAAE,MACxDa,MAAOhB,EACPiB,OAAQxB,IAAeC,EAAeO,OAAO,CAAGA,EAAU,CAAC,IAE1D,CAACA,EAASD,EAAcN,EAAgBD,EAAYK,EAAeC,EAAYG,EAAQC,EAAeN,EAAI,EACvGqB,EAAWnC,EAAY,MAAO,0BAC9BoC,EAAuBnC,IACvBoC,EAAuBnC,EAAS,CAAC,aAAcmB,EAASP,EAAI,CAAE,SAAYqB,EAASd,GAAU,CAClGiB,QAAUC,IACTH,EAAqB,CAAEV,KAAM,QAASc,QAASD,CAAK,EACrD,IAED,OAAOF,CACR\"}"}