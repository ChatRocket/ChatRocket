{"code":"function module(e,t,r){let o,i,l,n;r.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){o=e}},0),r.export({overrideLoginMethod:()=>a,handleLogin:()=>s,callLoginMethod:()=>c}),r.link(\"./utils\",{isTotpInvalidError(e){i=e},isTotpMaxAttemptsError(e){l=e},isTotpRequiredError(e){n=e}},0);let a=(e,t,o,a)=>{e(...t,async(e,s)=>{if(!n(e)){null==o||o(e);return}let{process2faReturn:c}=await r.dynamicImport(\"./process2faReturn\");await c({error:e,result:s,emailOrUsername:\"string\"==typeof t[0]?t[0]:void 0,originalCallback:o,onCode:e=>{a(...t,e,(e,t)=>{if(!e){null==o||o(void 0,t);return}if(i(e)){null==o||o(e);return}Promise.all([r.dynamicImport(\"../../../app/utils/lib/i18n\"),r.dynamicImport(\"../toast\")]).then(t=>{let[{t:r},{dispatchToastMessage:i}]=t;if(l(e)){i({type:\"error\",message:r(\"totp-max-attempts\")}),null==o||o(void 0);return}i({type:\"error\",message:r(\"Invalid_two_factor_code\")}),null==o||o(void 0)})})}})})},s=(e,t)=>function(){for(var o=arguments.length,l=Array(o),a=0;a<o;a++)l[a]=arguments[a];let s=l.slice(0,-1),c=l.slice(-1)[0];return e(...s).catch(async e=>{if(!n(e))return Promise.reject(e);let{process2faAsyncReturn:o}=await r.dynamicImport(\"./process2faReturn\");return o({emailOrUsername:\"string\"==typeof s[0]?s[0]:void 0,error:e,onCode:e=>t(...s,e)})}).then(e=>null==c?void 0:c(void 0,e)).catch(e=>{if(!i(e)){null==c||c(e);return}Promise.all([r.dynamicImport(\"../../../app/utils/lib/i18n\"),r.dynamicImport(\"../toast\")]).then(e=>{let[{t},{dispatchToastMessage:r}]=e;r({type:\"error\",message:t(\"Invalid_two_factor_code\")}),null==c||c(void 0)})})},c=e=>new Promise((t,r)=>{Accounts.callLoginMethod(o(o({},e),{},{userCallback:e=>{e?r(e):t()}}))})}","map":"{\"version\":3,\"sources\":[\"client/lib/2fa/overrideLoginMethod.ts\",\"<anon>\"],\"sourcesContent\":[\"import { isTotpInvalidError, isTotpMaxAttemptsError, isTotpRequiredError } from './utils';\\n\\ntype LoginError = globalThis.Error | Meteor.Error | Meteor.TypedError;\\n\\nexport type LoginCallback = (error: LoginError | undefined, result?: unknown) => void;\\n\\nexport const overrideLoginMethod = <TArgs extends any[]>(\\n\\tloginMethod: (...args: [...args: TArgs, cb: LoginCallback]) => void,\\n\\tloginArgs: TArgs,\\n\\tcallback: LoginCallback | undefined,\\n\\tloginMethodTOTP: (...args: [...args: TArgs, code: string, cb: LoginCallback]) => void,\\n) => {\\n\\tloginMethod(...loginArgs, async (error: LoginError | undefined, result?: unknown) => {\\n\\t\\tif (!isTotpRequiredError(error)) {\\n\\t\\t\\tcallback?.(error);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst { process2faReturn } = await import('./process2faReturn');\\n\\n\\t\\tawait process2faReturn({\\n\\t\\t\\terror,\\n\\t\\t\\tresult,\\n\\t\\t\\temailOrUsername: typeof loginArgs[0] === 'string' ? loginArgs[0] : undefined,\\n\\t\\t\\toriginalCallback: callback,\\n\\t\\t\\tonCode: (code: string) => {\\n\\t\\t\\t\\tloginMethodTOTP(...loginArgs, code, (error: LoginError | undefined, result?: unknown) => {\\n\\t\\t\\t\\t\\tif (!error) {\\n\\t\\t\\t\\t\\t\\tcallback?.(undefined, result);\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (isTotpInvalidError(error)) {\\n\\t\\t\\t\\t\\t\\tcallback?.(error);\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tPromise.all([import('../../../app/utils/lib/i18n'), import('../toast')]).then(([{ t }, { dispatchToastMessage }]) => {\\n\\t\\t\\t\\t\\t\\tif (isTotpMaxAttemptsError(error)) {\\n\\t\\t\\t\\t\\t\\t\\tdispatchToastMessage({\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'error',\\n\\t\\t\\t\\t\\t\\t\\t\\tmessage: t('totp-max-attempts'),\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\tcallback?.(undefined);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tdispatchToastMessage({ type: 'error', message: t('Invalid_two_factor_code') });\\n\\t\\t\\t\\t\\t\\tcallback?.(undefined);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t});\\n\\t});\\n};\\n\\nexport const handleLogin = <TLoginFunction extends (...args: any[]) => Promise<any>>(\\n\\tlogin: TLoginFunction,\\n\\tloginWithTOTP: (...args: [...args: Parameters<TLoginFunction>, code: string]) => ReturnType<TLoginFunction>,\\n) => {\\n\\treturn (...args: [...loginArgs: Parameters<TLoginFunction>, callback?: LoginCallback]) => {\\n\\t\\tconst loginArgs = args.slice(0, -1) as Parameters<TLoginFunction>;\\n\\t\\tconst callback = args.slice(-1)[0] as LoginCallback | undefined;\\n\\n\\t\\treturn login(...loginArgs)\\n\\t\\t\\t.catch(async (error: LoginError | undefined) => {\\n\\t\\t\\t\\tif (!isTotpRequiredError(error)) {\\n\\t\\t\\t\\t\\treturn Promise.reject(error);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst { process2faAsyncReturn } = await import('./process2faReturn');\\n\\t\\t\\t\\treturn process2faAsyncReturn({\\n\\t\\t\\t\\t\\temailOrUsername: typeof loginArgs[0] === 'string' ? loginArgs[0] : undefined,\\n\\t\\t\\t\\t\\terror,\\n\\t\\t\\t\\t\\tonCode: (code: string) => loginWithTOTP(...loginArgs, code),\\n\\t\\t\\t\\t});\\n\\t\\t\\t})\\n\\t\\t\\t.then((result: unknown) => callback?.(undefined, result))\\n\\t\\t\\t.catch((error: LoginError | undefined) => {\\n\\t\\t\\t\\tif (!isTotpInvalidError(error)) {\\n\\t\\t\\t\\t\\tcallback?.(error);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tPromise.all([import('../../../app/utils/lib/i18n'), import('../toast')]).then(([{ t }, { dispatchToastMessage }]) => {\\n\\t\\t\\t\\t\\tdispatchToastMessage({ type: 'error', message: t('Invalid_two_factor_code') });\\n\\t\\t\\t\\t\\tcallback?.(undefined);\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t};\\n};\\n\\nexport const callLoginMethod = (options: Omit<Accounts.LoginMethodOptions, 'userCallback'>) =>\\n\\tnew Promise<void>((resolve, reject) => {\\n\\t\\tAccounts.callLoginMethod({\\n\\t\\t\\t...options,\\n\\t\\t\\tuserCallback: (error) => {\\n\\t\\t\\t\\tif (error) {\\n\\t\\t\\t\\t\\treject(error);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tresolve();\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t});\\n\\t});\\n\",null],\"names\":[\"_objectSpread\",\"isTotpInvalidError\",\"isTotpMaxAttemptsError\",\"isTotpRequiredError\",\"module\",\"link\",\"default\",\"v\",\"export\",\"overrideLoginMethod\",\"handleLogin\",\"callLoginMethod\",\"loginMethod\",\"loginArgs\",\"callback\",\"loginMethodTOTP\",\"error\",\"result\",\"process2faReturn\",\"dynamicImport\",\"emailOrUsername\",\"undefined\",\"originalCallback\",\"onCode\",\"code\",\"Promise\",\"all\",\"then\",\"_ref\",\"t\",\"dispatchToastMessage\",\"type\",\"message\",\"login\",\"loginWithTOTP\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"slice\",\"catch\",\"reject\",\"process2faAsyncReturn\",\"_ref2\",\"options\",\"resolve\",\"Accounts\",\"userCallback\"],\"mappings\":\"2BAAAA,EAA0FC,EAAAC,EAAAC,EAAjFC,EAAAC,IAAoB,CAAA,uCAAwB,CAAAC,QAAqBC,CAAA,EAAMP,EAAUO,CAAA,CAAA,EAAA,GAA1FH,EAAOI,MAAE,CAAA,CAAAC,oBAAoBA,IAAAA,EAAwBC,YAAAA,IAAqBA,EAAMC,gBAAUA,IAAAA,CAAA,GAAAP,EAAAC,IAAA,CAAA,UAAA,CAAAJ,mBAAAM,CAAA,EAAAN,EAAAM,CAAA,EAAAL,uBAAAK,CAAA,EAAAL,EAAAK,CAAA,EAAAJ,oBAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAMnF,IAAME,EAAsBA,CAClCG,EACAC,EACAC,EACAC,KAEAH,KAAeC,EAAW,MAAOG,EAA+BC,KAC/D,GAAI,CAACd,EAAoBa,GAAQ,CAChCF,MAAAA,GAAAA,EAAWE,GACX,MACD,CAEA,GAAM,CAAEE,iBAAAA,CAAAA,CAAkB,CAAG,MAAMd,EAAAe,aAAA,CAAO,qBAE1C,OAAMD,EAAiB,CACtBF,MAAAA,EACAC,OAAAA,EACAG,gBAAiB,AAAwB,UAAxB,OAAOP,CAAS,CAAC,EAAE,CAAgBA,CAAS,CAAC,EAAE,CAAGQ,KAAAA,EACnEC,iBAAkBR,EAClBS,OAASC,IACRT,KAAmBF,EAAWW,EAAM,CAACR,EAA+BC,KACnE,GAAI,CAACD,EAAO,CACXF,MAAAA,GAAAA,EAAWO,KAAAA,EAAWJ,GACtB,MACD,CAEA,GAAIhB,EAAmBe,GAAQ,CAC9BF,MAAAA,GAAAA,EAAWE,GACX,MACD,CAEAS,QAAQC,GAAG,CAAC,CAACtB,EAAAe,aAAA,CAAO,+BAAgCf,EAAAe,aAAA,CAAO,YAAY,EAAEQ,IAAI,CAACC,IAAsC,GAArC,CAAC,CAAEC,EAAAA,CAAAA,CAAG,CAAE,CAAEC,qBAAAA,CAAAA,CAAsB,CAAC,CAAAF,EAC/G,GAAI1B,EAAuBc,GAAQ,CAClCc,EAAqB,CACpBC,KAAM,QACNC,QAASH,EAAE,uBAEZf,MAAAA,GAAAA,EAAWO,KAAAA,GACX,MACD,CAEAS,EAAqB,CAAEC,KAAM,QAASC,QAASH,EAAE,0BAA0B,GAC3Ef,MAAAA,GAAAA,EAAWO,KAAAA,EACZ,EACD,EACD,GAEF,EACD,EAEaX,EAAcA,CAC1BuB,EACAC,IAEO,WAAkF,IAAA,IAAAC,EAAAC,UAAAC,MAAA,CAA9EC,EAA0E,AAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAA1EF,CAA0E,CAAAE,EAAA,CAAAJ,SAAA,CAAAI,EAAA,CACpF,IAAM3B,EAAYyB,EAAKG,KAAK,CAAC,EAAG,IAC1B3B,EAAWwB,EAAKG,KAAK,CAAC,GAAG,CAAC,EAA+B,CAE/D,OAAOR,KAASpB,GACd6B,KAAK,CAAC,MAAO1B,IACb,GAAI,CAACb,EAAoBa,GACxB,OAAOS,QAAQkB,MAAM,CAAC3B,GAGvB,GAAM,CAAE4B,sBAAAA,CAAAA,CAAuB,CAAG,MAAMxC,EAAAe,aAAA,CAAO,sBAC/C,OAAOyB,EAAsB,CAC5BxB,gBAAiB,AAAwB,UAAxB,OAAOP,CAAS,CAAC,EAAE,CAAgBA,CAAS,CAAC,EAAE,CAAGQ,KAAAA,EACnEL,MAAAA,EACAO,OAASC,GAAiBU,KAAiBrB,EAAWW,IAExD,GACCG,IAAI,CAAEV,GAAoBH,MAAAA,EAAQ,KAAA,EAARA,EAAWO,KAAAA,EAAWJ,IAChDyB,KAAK,CAAE1B,IACP,GAAI,CAACf,EAAmBe,GAAQ,CAC/BF,MAAAA,GAAAA,EAAWE,GACX,MACD,CAEAS,QAAQC,GAAG,CAAC,CAACtB,EAAAe,aAAA,CAAO,+BAAgCf,EAAAe,aAAA,CAAO,YAAY,EAAEQ,IAAI,CAACkB,IAAsC,GAArC,CAAC,CAAEhB,CAAAA,CAAG,CAAE,CAAEC,qBAAAA,CAAAA,CAAsB,CAAC,CAAAe,EAC/Gf,EAAqB,CAAEC,KAAM,QAASC,QAASH,EAAE,0BAA0B,GAC3Ef,MAAAA,GAAAA,EAAWO,KAAAA,EACZ,EACD,EACF,EAGYV,EAAmBmC,GAC/B,IAAIrB,QAAc,CAACsB,EAASJ,KAC3BK,SAASrC,eAAe,CAAAX,EAAAA,EAAA,CAAA,EACpB8C,GAAO,CAAA,EAAA,CACVG,aAAejC,IACVA,EACH2B,EAAO3B,GAEP+B,GAEF,CAAC,GAEH\"}"}