{"code":"function module(n,r,e){var t,u,c,o;function a(n){return\"string\"==typeof n?n:o.wrap(n).toString(\"binary\")}function i(n){if(void 0!==n){if(\"object\"===u(n)&&Object.getPrototypeOf(n)===ArrayBuffer.prototype)return n;if(\"string\"!=typeof n)throw Error(\"Tried to convert a non-string of type \"+u(n)+\" to an array buffer\");return o.wrap(n,\"binary\").toArrayBuffer()}}function s(n,r){var e=new Uint8Array(r),t=new Uint8Array(n.length+e.length);return t.set(n,0),t.set(e,n.length),t}function l(n){return[n.slice(0,16),n.slice(16)]}function p(n,r){return t.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",crypto.subtle.encrypt({name:\"RSA-OAEP\"},n,r));case 1:case\"end\":return e.stop()}},null,null,null,Promise)}function f(n,r,e){return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",crypto.subtle.encrypt({name:\"AES-CBC\",iv:n},r,e));case 1:case\"end\":return t.stop()}},null,null,null,Promise)}function y(n,r,e){return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",crypto.subtle.encrypt({name:\"AES-CTR\",counter:n,length:64},r,e));case 1:case\"end\":return t.stop()}},null,null,null,Promise)}function d(n,r){return t.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt(\"return\",crypto.subtle.decrypt({name:\"RSA-OAEP\"},n,r));case 1:case\"end\":return e.stop()}},null,null,null,Promise)}function m(n,r,e){return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",crypto.subtle.decrypt({name:\"AES-CBC\",iv:n},r,e));case 1:case\"end\":return t.stop()}},null,null,null,Promise)}function A(){return t.async(function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt(\"return\",crypto.subtle.generateKey({name:\"AES-CBC\",length:128},!0,[\"encrypt\",\"decrypt\"]));case 1:case\"end\":return n.stop()}},null,null,null,Promise)}function h(){return t.async(function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt(\"return\",crypto.subtle.generateKey({name:\"AES-CTR\",length:256},!0,[\"encrypt\",\"decrypt\"]));case 1:case\"end\":return n.stop()}},null,null,null,Promise)}function b(){return t.async(function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt(\"return\",crypto.subtle.generateKey({name:\"RSA-OAEP\",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:{name:\"SHA-256\"}},!0,[\"encrypt\",\"decrypt\"]));case 1:case\"end\":return n.stop()}},null,null,null,Promise)}function v(n){return t.async(function(r){for(;;)switch(r.prev=r.next){case 0:return r.abrupt(\"return\",crypto.subtle.exportKey(\"jwk\",n));case 1:case\"end\":return r.stop()}},null,null,null,Promise)}function w(n){var r,e=arguments;return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.length>1&&void 0!==e[1]?e[1]:[\"encrypt\",\"decrypt\"],t.abrupt(\"return\",crypto.subtle.importKey(\"jwk\",n,{name:\"RSA-OAEP\",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:{name:\"SHA-256\"}},!0,r));case 2:case\"end\":return t.stop()}},null,null,null,Promise)}function g(n){var r,e=arguments;return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.length>1&&void 0!==e[1]?e[1]:[\"encrypt\",\"decrypt\"],t.abrupt(\"return\",crypto.subtle.importKey(\"jwk\",n,{name:\"AES-CBC\"},!0,r));case 2:case\"end\":return t.stop()}},null,null,null,Promise)}function S(n){var r,e=arguments;return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.length>1&&void 0!==e[1]?e[1]:[\"deriveKey\"],t.abrupt(\"return\",crypto.subtle.importKey(\"raw\",n,{name:\"PBKDF2\"},!1,r));case 2:case\"end\":return t.stop()}},null,null,null,Promise)}function x(n,r){var e,u=arguments;return t.async(function(t){for(;;)switch(t.prev=t.next){case 0:return e=u.length>2&&void 0!==u[2]?u[2]:[\"encrypt\",\"decrypt\"],t.abrupt(\"return\",crypto.subtle.deriveKey({name:\"PBKDF2\",salt:n,iterations:1e3,hash:\"SHA-256\"},r,{name:\"AES-CBC\",length:256},!0,e));case 4:case\"end\":return t.stop()}},null,null,null,Promise)}function P(n){return t.async(function(r){for(;;)switch(r.prev=r.next){case 0:return r.abrupt(\"return\",new Promise(function(r,e){var t=new FileReader;t.onload=function(n){var e;r(null===(e=n.target)||void 0===e?void 0:e.result)},t.onerror=function(n){e(n)},t.readAsArrayBuffer(n)}));case 1:case\"end\":return r.stop()}},null,null,null,Promise)}function E(n){var r,u,o,a,i,s,l=arguments;return t.async(function(p){for(;;)switch(p.prev=p.next){case 0:return r=l.length>1&&void 0!==l[1]?l[1]:\" \",p.next=3,t.awrap(e.dynamicImport(\"./wordList\"));case 3:for(u=p.sent.default,o=Array(n),i=Array(a=u.length);n--;)s=Math.floor(c.fraction()*a),o[n]=u[s in i?i[s]:s],i[s]=--a in i?i[a]:a;return p.abrupt(\"return\",o.join(r));case 10:case\"end\":return p.stop()}},null,null,null,Promise)}function K(n){var r;return t.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.awrap(crypto.subtle.digest(\"SHA-256\",new TextEncoder().encode(n)));case 2:return r=e.sent,e.abrupt(\"return\",Array.from(new Uint8Array(r)).map(function(n){return n.toString(16).padStart(2,\"0\")}).join(\"\"));case 4:case\"end\":return e.stop()}},null,null,null,Promise)}function R(n){var r;return t.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=Array,e.t1=Uint8Array,e.next=4,t.awrap(crypto.subtle.digest(\"SHA-256\",n));case 4:return e.t2=e.sent,e.t3=new e.t1(e.t2),r=e.t0.from.call(e.t0,e.t3),e.abrupt(\"return\",r.map(function(n){return n.toString(16).padStart(2,\"0\")}).join(\"\"));case 8:case\"end\":return e.stop()}},null,null,null,Promise)}e.link(\"@babel/runtime/regenerator\",{default:function(n){t=n}},0),e.link(\"@babel/runtime/helpers/typeof\",{default:function(n){u=n}},1),e.export({toString:function(){return a},toArrayBuffer:function(){return i},joinVectorAndEcryptedData:function(){return s},splitVectorAndEcryptedData:function(){return l},encryptRSA:function(){return p},encryptAES:function(){return f},encryptAESCTR:function(){return y},decryptRSA:function(){return d},decryptAES:function(){return m},generateAESKey:function(){return A},generateAESCTRKey:function(){return h},generateRSAKey:function(){return b},exportJWKKey:function(){return v},importRSAKey:function(){return w},importAESKey:function(){return g},importRawKey:function(){return S},deriveKey:function(){return x},readFileAsArrayBuffer:function(){return P},generateMnemonicPhrase:function(){return E},createSha256HashFromText:function(){return K},sha256HashFromArrayBuffer:function(){return R}}),e.link(\"@rocket.chat/random\",{Random:function(n){c=n}},0),e.link(\"bytebuffer\",{default:function(n){o=n}},1)}","map":"{\"version\":3,\"sources\":[\"app/e2e/client/helper.ts\",\"<anon>\"],\"sourcesContent\":[\"import { Random } from '@rocket.chat/random';\\nimport ByteBuffer from 'bytebuffer';\\n\\nexport function toString(thing: any) {\\n\\tif (typeof thing === 'string') {\\n\\t\\treturn thing;\\n\\t}\\n\\n\\treturn ByteBuffer.wrap(thing).toString('binary');\\n}\\n\\nexport function toArrayBuffer(thing: any) {\\n\\tif (thing === undefined) {\\n\\t\\treturn undefined;\\n\\t}\\n\\tif (typeof thing === 'object') {\\n\\t\\tif (Object.getPrototypeOf(thing) === ArrayBuffer.prototype) {\\n\\t\\t\\treturn thing;\\n\\t\\t}\\n\\t}\\n\\n\\tif (typeof thing !== 'string') {\\n\\t\\tthrow new Error(`Tried to convert a non-string of type ${typeof thing} to an array buffer`);\\n\\t}\\n\\n\\treturn ByteBuffer.wrap(thing, 'binary').toArrayBuffer();\\n}\\n\\nexport function joinVectorAndEcryptedData(vector: any, encryptedData: any) {\\n\\tconst cipherText = new Uint8Array(encryptedData);\\n\\tconst output = new Uint8Array(vector.length + cipherText.length);\\n\\toutput.set(vector, 0);\\n\\toutput.set(cipherText, vector.length);\\n\\treturn output;\\n}\\n\\nexport function splitVectorAndEcryptedData(cipherText: any) {\\n\\tconst vector = cipherText.slice(0, 16);\\n\\tconst encryptedData = cipherText.slice(16);\\n\\n\\treturn [vector, encryptedData];\\n}\\n\\nexport async function encryptRSA(key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'RSA-OAEP' }, key, data);\\n}\\n\\nexport async function encryptAES(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'AES-CBC', iv: vector }, key, data);\\n}\\n\\nexport async function encryptAESCTR(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'AES-CTR', counter: vector, length: 64 }, key, data);\\n}\\n\\nexport async function decryptRSA(key: any, data: any) {\\n\\treturn crypto.subtle.decrypt({ name: 'RSA-OAEP' }, key, data);\\n}\\n\\nexport async function decryptAES(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.decrypt({ name: 'AES-CBC', iv: vector }, key, data);\\n}\\n\\nexport async function generateAESKey() {\\n\\treturn crypto.subtle.generateKey({ name: 'AES-CBC', length: 128 }, true, ['encrypt', 'decrypt']);\\n}\\n\\nexport async function generateAESCTRKey() {\\n\\treturn crypto.subtle.generateKey({ name: 'AES-CTR', length: 256 }, true, ['encrypt', 'decrypt']);\\n}\\n\\nexport async function generateRSAKey() {\\n\\treturn crypto.subtle.generateKey(\\n\\t\\t{\\n\\t\\t\\tname: 'RSA-OAEP',\\n\\t\\t\\tmodulusLength: 2048,\\n\\t\\t\\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\\n\\t\\t\\thash: { name: 'SHA-256' },\\n\\t\\t},\\n\\t\\ttrue,\\n\\t\\t['encrypt', 'decrypt'],\\n\\t);\\n}\\n\\nexport async function exportJWKKey(key: any) {\\n\\treturn crypto.subtle.exportKey('jwk', key);\\n}\\n\\nexport async function importRSAKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\treturn crypto.subtle.importKey(\\n\\t\\t'jwk' as any,\\n\\t\\tkeyData,\\n\\t\\t{\\n\\t\\t\\tname: 'RSA-OAEP',\\n\\t\\t\\tmodulusLength: 2048,\\n\\t\\t\\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\\n\\t\\t\\thash: { name: 'SHA-256' },\\n\\t\\t} as any,\\n\\t\\ttrue,\\n\\t\\tkeyUsages,\\n\\t);\\n}\\n\\nexport async function importAESKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\treturn crypto.subtle.importKey('jwk', keyData, { name: 'AES-CBC' }, true, keyUsages);\\n}\\n\\nexport async function importRawKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['deriveKey']) {\\n\\treturn crypto.subtle.importKey('raw', keyData, { name: 'PBKDF2' }, false, keyUsages);\\n}\\n\\nexport async function deriveKey(salt: any, baseKey: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\tconst iterations = 1000;\\n\\tconst hash = 'SHA-256';\\n\\n\\treturn crypto.subtle.deriveKey({ name: 'PBKDF2', salt, iterations, hash }, baseKey, { name: 'AES-CBC', length: 256 }, true, keyUsages);\\n}\\n\\nexport async function readFileAsArrayBuffer(file: any) {\\n\\treturn new Promise<any>((resolve, reject) => {\\n\\t\\tconst reader = new FileReader();\\n\\t\\treader.onload = (evt) => {\\n\\t\\t\\tresolve(evt.target?.result);\\n\\t\\t};\\n\\t\\treader.onerror = (evt) => {\\n\\t\\t\\treject(evt);\\n\\t\\t};\\n\\t\\treader.readAsArrayBuffer(file);\\n\\t});\\n}\\n\\nexport async function generateMnemonicPhrase(n: any, sep = ' ') {\\n\\tconst { default: wordList } = await import('./wordList');\\n\\tconst result = new Array(n);\\n\\tlet len = wordList.length;\\n\\tconst taken = new Array(len);\\n\\n\\twhile (n--) {\\n\\t\\tconst x = Math.floor(Random.fraction() * len);\\n\\t\\tresult[n] = wordList[x in taken ? taken[x] : x];\\n\\t\\ttaken[x] = --len in taken ? taken[len] : len;\\n\\t}\\n\\treturn result.join(sep);\\n}\\n\\nexport async function createSha256HashFromText(data: any) {\\n\\tconst hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(data));\\n\\treturn Array.from(new Uint8Array(hash))\\n\\t\\t.map((b) => b.toString(16).padStart(2, '0'))\\n\\t\\t.join('');\\n}\\n\\nexport async function sha256HashFromArrayBuffer(arrayBuffer: any) {\\n\\tconst hashArray = Array.from(new Uint8Array(await crypto.subtle.digest('SHA-256', arrayBuffer)));\\n\\treturn hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\\n}\\n\",null],\"names\":[\"_regeneratorRuntime\",\"_typeof\",\"Random\",\"ByteBuffer\",\"toString\",\"thing\",\"wrap\",\"toArrayBuffer\",\"undefined\",\"Object\",\"getPrototypeOf\",\"ArrayBuffer\",\"prototype\",\"Error\",\"joinVectorAndEcryptedData\",\"vector\",\"encryptedData\",\"cipherText\",\"Uint8Array\",\"output\",\"length\",\"set\",\"splitVectorAndEcryptedData\",\"slice\",\"encryptRSA\",\"key\",\"data\",\"async\",\"_context\",\"prev\",\"next\",\"abrupt\",\"crypto\",\"subtle\",\"encrypt\",\"name\",\"stop\",\"Promise\",\"encryptAES\",\"_context2\",\"iv\",\"encryptAESCTR\",\"_context3\",\"counter\",\"decryptRSA\",\"_context4\",\"decrypt\",\"decryptAES\",\"_context5\",\"generateAESKey\",\"_context6\",\"generateKey\",\"generateAESCTRKey\",\"_context7\",\"generateRSAKey\",\"_context8\",\"modulusLength\",\"publicExponent\",\"hash\",\"exportJWKKey\",\"_context9\",\"exportKey\",\"importRSAKey\",\"keyData\",\"keyUsages\",\"_args10\",\"arguments\",\"_context10\",\"importKey\",\"importAESKey\",\"_args11\",\"_context11\",\"importRawKey\",\"_args12\",\"_context12\",\"deriveKey\",\"salt\",\"baseKey\",\"_args13\",\"_context13\",\"iterations\",\"readFileAsArrayBuffer\",\"file\",\"_context14\",\"resolve\",\"reject\",\"reader\",\"FileReader\",\"onload\",\"evt\",\"_evt$target\",\"target\",\"result\",\"onerror\",\"readAsArrayBuffer\",\"generateMnemonicPhrase\",\"n\",\"sep\",\"wordList\",\"len\",\"taken\",\"x\",\"_args15\",\"_context15\",\"awrap\",\"module\",\"dynamicImport\",\"_await$module$dynamic\",\"sent\",\"default\",\"Array\",\"Math\",\"floor\",\"fraction\",\"join\",\"createSha256HashFromText\",\"_context16\",\"digest\",\"TextEncoder\",\"encode\",\"from\",\"map\",\"b\",\"padStart\",\"sha256HashFromArrayBuffer\",\"arrayBuffer\",\"hashArray\",\"_context17\",\"t0\",\"t1\",\"t2\",\"t3\",\"call\",\"link\",\"v\",\"export\"],\"mappings\":\"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\"}"}