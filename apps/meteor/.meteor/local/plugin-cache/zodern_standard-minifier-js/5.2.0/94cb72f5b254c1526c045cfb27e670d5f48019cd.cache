{"code":"function module(e,t,a){function n(e,t,a){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(a){case\"invalidate_license\":case\"prevent_installation\":case\"disable_modules\":default:return t>e;case\"start_fair_policy\":return t>=e;case\"prevent_action\":return n?t>e:t>=e}}function i(e,t,a){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;switch(a){case\"invalidate_license\":case\"prevent_installation\":case\"disable_modules\":case\"start_fair_policy\":default:return t>e;case\"prevent_action\":return n?t>e:t>=e}}a.export({validateLimit:function(){return n},validateWarnLimit:function(){return i}})}","map":"{\"version\":3,\"sources\":[\"node_modules/@rocket.chat/license/src/validation/validateLimit.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { LicenseBehavior } from '@rocket.chat/core-typings';\\n\\n/**\\n * The difference between validateLimit and validateWarnLimit is that the first one\\n * is used to trigger the client so for start_fair_policy we trigger as soon the limit is reached\\n * for the visual warning we trigger when the limit is reached + 1\\n\\n/**\\n * Validates if the current value is over the limit\\n * @param max The maximum value allowed\\n * @param currentValue The current value\\n * @param behavior The behavior to be applied if the limit is reached\\n * @param extraCount The extra count to be added to the current value\\n * @returns\\n * - true if the limit is reached\\n * - false if the limit is not reached\\n */\\nexport function validateLimit(max: number, currentValue: number, behavior: LicenseBehavior, extraCount = 0) {\\n\\tswitch (behavior) {\\n\\t\\tcase 'invalidate_license':\\n\\t\\tcase 'prevent_installation':\\n\\t\\tcase 'disable_modules':\\n\\t\\tdefault:\\n\\t\\t\\treturn currentValue > max;\\n\\t\\tcase 'start_fair_policy':\\n\\t\\t\\treturn currentValue >= max;\\n\\t\\tcase 'prevent_action':\\n\\t\\t\\t/**\\n\\t\\t\\t * if we are validating the current count the limit should be equal or over the max, if we are validating the future count the limit should be over the max\\n\\t\\t\\t */\\n\\n\\t\\t\\treturn extraCount ? currentValue > max : currentValue >= max;\\n\\t}\\n}\\n\\n/**\\n * Validates if the current value is over the limit\\n * @param max The maximum value allowed\\n * @param currentValue The current value\\n * @param behavior The behavior to be applied if the limit is reached\\n * @param extraCount The extra count to be added to the current value\\n * @returns\\n * - true if the limit is reached\\n * - false if the limit is not reached\\n */\\n\\nexport function validateWarnLimit(max: number, currentValue: number, behavior: LicenseBehavior, extraCount = 0) {\\n\\tswitch (behavior) {\\n\\t\\tcase 'invalidate_license':\\n\\t\\tcase 'prevent_installation':\\n\\t\\tcase 'disable_modules':\\n\\t\\tcase 'start_fair_policy':\\n\\t\\tdefault:\\n\\t\\t\\treturn currentValue > max;\\n\\t\\tcase 'prevent_action':\\n\\t\\t\\t/**\\n\\t\\t\\t * if we are validating the current count the limit should be equal or over the max, if we are validating the future count the limit should be over the max\\n\\t\\t\\t */\\n\\n\\t\\t\\treturn extraCount ? currentValue > max : currentValue >= max;\\n\\t}\\n}\\n\",null],\"names\":[\"validateLimit\",\"max\",\"currentValue\",\"behavior\",\"extraCount\",\"arguments\",\"length\",\"undefined\",\"validateWarnLimit\",\"module\",\"export\"],\"mappings\":\"uBAiBM,SAAUA,EAAcC,CAAW,CAAEC,CAAoB,CAAEC,CAAyB,EAAgB,IAAdC,EAAUC,UAAAC,MAAA,CAAA,GAAAD,AAAAE,KAAAA,IAAAF,SAAA,CAAA,EAAA,CAAAA,SAAA,CAAA,EAAA,CAAG,EACxG,OAAQF,GACP,IAAK,qBACL,IAAK,uBACL,IAAK,kBACL,QACC,OAAOD,EAAeD,CACvB,KAAK,oBACJ,OAAOC,GAAgBD,CACxB,KAAK,iBAKJ,OAAOG,EAAaF,EAAeD,EAAMC,GAAgBD,CAC3D,CACD,CAaM,SAAUO,EAAkBP,CAAW,CAAEC,CAAoB,CAAEC,CAAyB,EAAgB,IAAdC,EAAUC,UAAAC,MAAA,CAAA,GAAAD,AAAAE,KAAAA,IAAAF,SAAA,CAAA,EAAA,CAAAA,SAAA,CAAA,EAAA,CAAG,EAC5G,OAAQF,GACP,IAAK,qBACL,IAAK,uBACL,IAAK,kBACL,IAAK,oBACL,QACC,OAAOD,EAAeD,CACvB,KAAK,iBAKJ,OAAOG,EAAaF,EAAeD,EAAMC,GAAgBD,CAC3D,CACD,CA3DAQ,EAAAC,MAAA,CAAA,CAAAV,cAAA,WAAA,OAAAA,CAAA,EAAAQ,kBAAA,WAAA,OAAAA,CAAA,CAAA\"}"}