{"code":"function module(e,t,s){let i,r,a,o,n,l,c,d,y,h,u,p,g,E,m,v,w,b,S,_,k,K,R,I,f,A,D,P,B,M,O,L,T,C,F,N,j,W,x,G,U,Y,q,V,H;let J=[\"_id\"];s.link(\"@babel/runtime/helpers/objectWithoutProperties\",{default(e){i=e}},0),s.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){r=e}},1),s.link(\"@babel/runtime/helpers/asyncIterator\",{default(e){a=e}},2),s.export({e2e:()=>z}),s.link(\"querystring\",{default(e){o=e}},0),s.link(\"url\",{default(e){n=e}},1),s.link(\"@rocket.chat/core-typings\",{isE2EEMessage(e){l=e}},2),s.link(\"@rocket.chat/emitter\",{Emitter(e){c=e}},3),s.link(\"ejson\",{default(e){d=e}},4),s.link(\"lodash\",{default(e){y=e}},5),s.link(\"meteor/accounts-base\",{Accounts(e){h=e}},6),s.link(\"meteor/meteor\",{Meteor(e){u=e}},7),s.link(\"meteor/tracker\",{Tracker(e){p=e}},8),s.link(\"../../../client/lib/banners\",{\"*\"(e){g=e}},9),s.link(\"../../../client/lib/imperativeModal\",{imperativeModal(e){E=e}},10),s.link(\"../../../client/lib/toast\",{dispatchToastMessage(e){m=e}},11),s.link(\"../../../client/lib/utils/mapMessageFromApi\",{mapMessageFromApi(e){v=e}},12),s.link(\"../../../client/lib/utils/waitUntilFind\",{waitUntilFind(e){w=e}},13),s.link(\"../../../client/views/e2e/EnterE2EPasswordModal\",{default(e){b=e}},14),s.link(\"../../../client/views/e2e/SaveE2EPasswordModal\",{default(e){S=e}},15),s.link(\"../../../lib/createQuoteAttachment\",{createQuoteAttachment(e){_=e}},16),s.link(\"../../../lib/getMessageUrlRegex\",{getMessageUrlRegex(e){k=e}},17),s.link(\"../../../lib/isTruthy\",{isTruthy(e){K=e}},18),s.link(\"../../models/client\",{ChatRoom(e){R=e},Subscriptions(e){I=e},Messages(e){f=e}},19),s.link(\"../../settings/client\",{settings(e){A=e}},20),s.link(\"../../utils/client\",{getUserAvatarURL(e){D=e}},21),s.link(\"../../utils/client/lib/SDKClient\",{sdk(e){P=e}},22),s.link(\"../../utils/lib/i18n\",{t(e){B=e}},23),s.link(\"./E2EEState\",{E2EEState(e){M=e}},24),s.link(\"./helper\",{toString(e){O=e},toArrayBuffer(e){L=e},joinVectorAndEcryptedData(e){T=e},splitVectorAndEcryptedData(e){C=e},encryptAES(e){F=e},decryptAES(e){N=e},generateRSAKey(e){j=e},exportJWKKey(e){W=e},importRSAKey(e){x=e},importRawKey(e){G=e},deriveKey(e){U=e},generateMnemonicPhrase(e){Y=e}},25),s.link(\"./logger\",{log(e){q=e},logError(e){V=e}},26),s.link(\"./rocketchat.e2e.room\",{E2ERoom(e){H=e}},27),s.link(\"./events.js\");let Q=!1,$=new p.Dependency,z=new class e extends c{constructor(){super(),this.started=void 0,this.instancesByRoomId=void 0,this.db_public_key=void 0,this.db_private_key=void 0,this.privateKey=void 0,this.publicKey=void 0,this.keyDistributionInterval=void 0,this.state=void 0,this.observable=void 0,this.started=!1,this.instancesByRoomId={},this.keyDistributionInterval=null,this.observable=void 0,this.on(\"E2E_STATE_CHANGED\",e=>{let{prevState:t,nextState:s}=e;this.log(\"\".concat(t,\" -> \").concat(s))}),this.on(M.READY,async()=>{await this.onE2EEReady()}),this.on(M.SAVE_PASSWORD,async()=>{await this.onE2EEReady()}),this.on(M.DISABLED,()=>{var e;null===(e=this.observable)||void 0===e||e.stop()}),this.on(M.NOT_STARTED,()=>{var e;null===(e=this.observable)||void 0===e||e.stop()}),this.on(M.ERROR,()=>{var e;null===(e=this.observable)||void 0===e||e.stop()}),this.setState(M.NOT_STARTED)}log(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];q(\"E2E\",...t)}error(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];V(\"E2E\",...t)}getState(){return this.state}isEnabled(){return this.state!==M.DISABLED}isReady(){return $.depend(),this.state===M.READY||this.state===M.SAVE_PASSWORD}async onE2EEReady(){this.log(\"startClient -> Done\"),this.initiateHandshake(),await this.handleAsyncE2EESuggestedKey(),this.log(\"decryptSubscriptions\"),await this.decryptSubscriptions(),this.log(\"decryptSubscriptions -> Done\"),await this.initiateKeyDistribution(),this.log(\"initiateKeyDistribution -> Done\"),this.observeSubscriptions(),this.log(\"observing subscriptions\")}async onSubscriptionChanged(e){if(this.log(\"Subscription changed\",e),!e.encrypted&&!e.E2EKey){this.removeInstanceByRoomId(e.rid);return}let t=await this.getInstanceByRoomId(e.rid);if(t){if(e.E2ESuggestedKey&&(await t.importGroupKey(e.E2ESuggestedKey)?(await this.acceptSuggestedKey(e.rid),t.keyReceived()):(console.warn(\"Invalid E2ESuggestedKey, rejecting\",e.E2ESuggestedKey),await this.rejectSuggestedKey(e.rid))),e.encrypted?t.resume():t.pause(),!t.isSupportedRoomType(e.t)){t.disable();return}if(e.E2EKey&&t.isWaitingKeys()){t.keyReceived();return}t.isReady()&&await t.decryptSubscription()}}observeSubscriptions(){var e;null===(e=this.observable)||void 0===e||e.stop(),this.observable=I.find().observe({changed:e=>{setTimeout(()=>this.onSubscriptionChanged(e),0)},added:e=>{setTimeout(async()=>{if(this.log(\"Subscription added\",e),e.encrypted||e.E2EKey)return this.getInstanceByRoomId(e.rid)},0)},removed:e=>{this.log(\"Subscription removed\",e),this.removeInstanceByRoomId(e.rid)}})}shouldAskForE2EEPassword(){let{private_key:e}=this.getKeysFromLocalStorage();return this.db_private_key&&!e}setState(e){let t=this.state;this.state=e,$.changed(),this.emit(\"E2E_STATE_CHANGED\",{prevState:t,nextState:e}),this.emit(e)}async handleAsyncE2EESuggestedKey(){let e=I.find({E2ESuggestedKey:{$exists:!0}}).fetch();await Promise.all(e.filter(e=>e.E2ESuggestedKey&&!e.E2EKey).map(async e=>{let t=await z.getInstanceByRoomId(e.rid);t&&(await t.importGroupKey(e.E2ESuggestedKey)?(this.log(\"Imported valid E2E suggested key\"),await z.acceptSuggestedKey(e.rid),t.keyReceived()):(this.error(\"Invalid E2ESuggestedKey, rejecting\",e.E2ESuggestedKey),await z.rejectSuggestedKey(e.rid)),e.encrypted?t.resume():t.pause())}))}async getInstanceByRoomId(e){let t=await w(()=>R.findOne({_id:e}));return(\"d\"===t.t||\"p\"===t.t)&&t.encrypted?(this.instancesByRoomId[e]||(this.instancesByRoomId[e]=new H(u.userId(),t)),void 0!==this.instancesByRoomId[e].keyID&&void 0!==t.e2eKeyId&&this.instancesByRoomId[e].keyID!==t.e2eKeyId&&this.instancesByRoomId[e].onRoomKeyReset(t.e2eKeyId),this.instancesByRoomId[e]):null}removeInstanceByRoomId(e){delete this.instancesByRoomId[e]}async persistKeys(e,t){let{public_key:s,private_key:i}=e,{force:r}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{force:!1};if(\"string\"!=typeof s||\"string\"!=typeof i)throw Error(\"Failed to persist keys as they are not strings.\");let a=await this.encodePrivateKey(i,t);if(!a)throw Error(\"Failed to encode private key with provided password.\");await P.rest.post(\"/v1/e2e.setUserPublicAndPrivateKeys\",{public_key:s,private_key:a,force:r})}async acceptSuggestedKey(e){await P.rest.post(\"/v1/e2e.acceptSuggestedGroupKey\",{rid:e})}async rejectSuggestedKey(e){await P.rest.post(\"/v1/e2e.rejectSuggestedGroupKey\",{rid:e})}getKeysFromLocalStorage(){return{public_key:h.storageLocation.getItem(\"public_key\"),private_key:h.storageLocation.getItem(\"private_key\")}}initiateHandshake(){Object.keys(this.instancesByRoomId).map(e=>this.instancesByRoomId[e].handshake())}openSaveE2EEPasswordModal(e){E.open({component:S,props:{randomPassword:e,onClose:E.close,onCancel:()=>{this.closeAlert(),E.close()},onConfirm:()=>{h.storageLocation.removeItem(\"e2e.randomPassword\"),this.setState(M.READY),m({type:\"success\",message:B(\"End_To_End_Encryption_Enabled\")}),this.closeAlert(),E.close()}}})}async startClient(){if(this.started)return;this.log(\"startClient -> STARTED\"),this.started=!0;let{public_key:e,private_key:t}=this.getKeysFromLocalStorage();if(await this.loadKeysFromDB(),!e&&this.db_public_key&&(e=this.db_public_key),this.shouldAskForE2EEPassword())try{this.setState(M.ENTER_PASSWORD),t=await this.decodePrivateKey(this.db_private_key)}catch(e){this.started=!1,Q=!0,this.openAlert({title:\"Wasn't possible to decode your encryption key to be imported.\",html:\"<div>Your encryption password seems wrong. Click here to try again.</div>\",modifiers:[\"large\",\"danger\"],closable:!0,icon:\"key\",action:async()=>{await this.startClient(),this.closeAlert()}});return}e&&t?await this.loadKeys({public_key:e,private_key:t}):await this.createAndLoadKeys(),this.setState(M.READY),this.db_public_key&&this.db_private_key||(this.setState(M.LOADING_KEYS),await this.persistKeys(this.getKeysFromLocalStorage(),await this.createRandomPassword()));let s=h.storageLocation.getItem(\"e2e.randomPassword\");s&&(this.setState(M.SAVE_PASSWORD),this.openAlert({title:()=>B(\"Save_your_encryption_password\"),html:()=>B(\"Click_here_to_view_and_copy_your_password\"),modifiers:[\"large\"],closable:!1,icon:\"key\",action:()=>this.openSaveE2EEPasswordModal(s)}))}async stopClient(){this.log(\"-> Stop Client\"),this.closeAlert(),h.storageLocation.removeItem(\"public_key\"),h.storageLocation.removeItem(\"private_key\"),this.instancesByRoomId={},this.privateKey=void 0,this.publicKey=void 0,this.started=!1,this.keyDistributionInterval&&clearInterval(this.keyDistributionInterval),this.keyDistributionInterval=null,this.setState(M.DISABLED)}async changePassword(e){await this.persistKeys(this.getKeysFromLocalStorage(),e,{force:!0}),h.storageLocation.getItem(\"e2e.randomPassword\")&&h.storageLocation.setItem(\"e2e.randomPassword\",e)}async loadKeysFromDB(){try{this.setState(M.LOADING_KEYS);let{public_key:e,private_key:t}=await P.rest.get(\"/v1/e2e.fetchMyKeys\");this.db_public_key=e,this.db_private_key=t}catch(e){throw this.setState(M.ERROR),this.error(\"Error fetching RSA keys: \",e),e}}async loadKeys(e){let{public_key:t,private_key:s}=e;h.storageLocation.setItem(\"public_key\",t),this.publicKey=t;try{this.privateKey=await x(d.parse(s),[\"decrypt\"]),h.storageLocation.setItem(\"private_key\",s)}catch(e){return this.setState(M.ERROR),this.error(\"Error importing private key: \",e)}}async createAndLoadKeys(){let e;this.setState(M.LOADING_KEYS);try{e=await j(),this.privateKey=e.privateKey}catch(e){return this.setState(M.ERROR),this.error(\"Error generating key: \",e)}try{let t=await W(e.publicKey);this.publicKey=JSON.stringify(t),h.storageLocation.setItem(\"public_key\",JSON.stringify(t))}catch(e){return this.setState(M.ERROR),this.error(\"Error exporting public key: \",e)}try{let t=await W(e.privateKey);h.storageLocation.setItem(\"private_key\",JSON.stringify(t))}catch(e){return this.setState(M.ERROR),this.error(\"Error exporting private key: \",e)}await this.requestSubscriptionKeys()}async requestSubscriptionKeys(){await P.call(\"e2e.requestSubscriptionKeys\")}async createRandomPassword(){let e=await Y(5);return h.storageLocation.setItem(\"e2e.randomPassword\",e),e}async encodePrivateKey(e,t){let s=await this.getMasterKey(t),i=crypto.getRandomValues(new Uint8Array(16));try{let t=await F(i,s,L(e));return d.stringify(T(i,t))}catch(e){return this.setState(M.ERROR),this.error(\"Error encrypting encodedPrivateKey: \",e)}}async getMasterKey(e){let t;null==e&&alert(\"You should provide a password\");try{t=await G(L(e))}catch(e){return this.setState(M.ERROR),this.error(\"Error creating a key based on user password: \",e)}try{return await U(L(u.userId()),t)}catch(e){return this.setState(M.ERROR),this.error(\"Error deriving baseKey: \",e)}}openEnterE2EEPasswordModal(e){E.open({component:b,props:{onClose:E.close,onCancel:()=>{Q=!1,m({type:\"info\",message:B(\"End_To_End_Encryption_Not_Enabled\")}),this.closeAlert(),E.close()},onConfirm:t=>{null==e||e(t),this.closeAlert(),E.close()}}})}async requestPasswordAlert(){return new Promise(e=>{let t=()=>this.openEnterE2EEPasswordModal(t=>e(t));Q?t():(()=>{this.openAlert({title:()=>B(\"Enter_your_E2E_password\"),html:()=>B(\"Click_here_to_enter_your_encryption_password\"),modifiers:[\"large\"],closable:!1,icon:\"key\",action(){t()}})})()})}async requestPasswordModal(){return new Promise(e=>this.openEnterE2EEPasswordModal(t=>e(t)))}async decodePrivateKeyFlow(){let e=await this.requestPasswordModal(),t=await this.getMasterKey(e);if(!this.db_private_key)return;let[s,i]=C(d.parse(this.db_private_key));try{let e=await N(s,t,i),r=O(e);this.db_public_key&&r?await this.loadKeys({public_key:this.db_public_key,private_key:r}):await this.createAndLoadKeys(),this.setState(M.READY),m({type:\"success\",message:B(\"End_To_End_Encryption_Enabled\")})}catch(e){throw this.setState(M.ENTER_PASSWORD),m({type:\"error\",message:B(\"Your_E2EE_password_is_incorrect\")}),m({type:\"info\",message:B(\"End_To_End_Encryption_Not_Enabled\")}),Error(\"E2E -> Error decrypting private key\")}}async decodePrivateKey(e){let t=await this.requestPasswordAlert(),s=await this.getMasterKey(t),[i,r]=C(d.parse(e));try{let e=await N(i,s,r);return O(e)}catch(e){throw this.setState(M.ENTER_PASSWORD),m({type:\"error\",message:B(\"Your_E2EE_password_is_incorrect\")}),m({type:\"info\",message:B(\"End_To_End_Encryption_Not_Enabled\")}),Error(\"E2E -> Error decrypting private key\")}}async decryptFileContent(e){if(!e.rid)return e;let t=await this.getInstanceByRoomId(e.rid);return t?t.decryptContent(e):e}async decryptMessage(e){if(!l(e)||\"done\"===e.e2e)return e;let t=await this.getInstanceByRoomId(e.rid);if(!t)return e;let s=await t.decryptMessage(e),i=await this.parseQuoteAttachment(s);return i}async decryptPinnedMessage(e){var t,s;let i=null==e?void 0:null===(t=e.attachments)||void 0===t?void 0:null===(s=t[0])||void 0===s?void 0:s.text;if(!i)return e;let a=await this.getInstanceByRoomId(e.rid);if(!a)return e;let o=await a.decrypt(i);if(!o)return e;let n=r({},e);return n.attachments[0].text=o.text,n}async decryptPendingMessages(){return f.find({t:\"e2e\",e2e:\"pending\"}).forEach(async e=>{let{_id:t}=e,s=i(e,J);f.update({_id:t},await this.decryptMessage(s))})}async decryptSubscription(e){let t=await this.getInstanceByRoomId(e);this.log(\"decryptSubscription ->\",e),await (null==t?void 0:t.decryptSubscription())}async decryptSubscriptions(){I.find({encrypted:!0}).forEach(e=>this.decryptSubscription(e._id))}openAlert(e){g.open(r({id:\"e2e\"},e))}closeAlert(){g.closeById(\"e2e\")}async parseQuoteAttachment(e){if(!(null!=e&&e.msg))return e;let t=e.msg.match(k())||[];return await Promise.all(t.map(async t=>{if(!t.includes(A.get(\"Site_Url\")))return;let s=n.parse(t);if(!s.query)return;let{msg:i}=o.parse(s.query);if(!i||Array.isArray(i))return;let r=await P.rest.get(\"/v1/chat.getMessage\",{msgId:i}),a=null==r?void 0:r.message;if(!a)return;let l=await this.decryptMessage(v(a));e.attachments=e.attachments||[];let c=A.get(\"UI_Use_Real_Name\"),d=_(l,t,c,D(l.u.username||\"\"));e.attachments.push(d)})),e}async getSuggestedE2EEKeys(e){let t=Object.keys(e);return Object.fromEntries((await Promise.all(t.map(async t=>{let s=await this.getInstanceByRoomId(t);if(!s)return;let i=await s.encryptGroupKeyForParticipantsWaitingForTheKeys(e[t]);if(i)return[t,i]}))).filter(K))}async getSample(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(0===t)return[];let s=y.sampleSize(e,10),i=[];var r=!1,o=!1;try{for(var n,l,c=a(s);r=!(l=await c.next()).done;r=!1){let e=l.value;{let t=await this.getInstanceByRoomId(e);if(!(null!=t&&t.hasSessionKey()))continue;i.push(e)}}}catch(e){o=!0,n=e}finally{try{r&&null!=c.return&&await c.return()}finally{if(o)throw n}}return i.length?i:this.getSample(e,t-1)}async initiateKeyDistribution(){if(this.keyDistributionInterval)return;let e=async()=>{let e=R.find({usersWaitingForE2EKeys:{$exists:!0},\"usersWaitingForE2EKeys.userId\":{$ne:u.userId()}}).map(e=>e._id);if(!e.length)return;let t=await this.getSample(e);if(!t.length)return;let{usersWaitingForE2EKeys:s={}}=await P.rest.get(\"/v1/e2e.fetchUsersWaitingForGroupKey\",{roomIds:t});if(!Object.keys(s).length)return;let i=await this.getSuggestedE2EEKeys(s);if(Object.keys(i).length)try{await P.rest.post(\"/v1/e2e.provideUsersSuggestedGroupKeys\",{usersSuggestedGroupKeys:i})}catch(e){return this.error(\"Error providing group key to users: \",e)}};await e(),this.keyDistributionInterval=setInterval(e,1e4)}}}","map":"{\"version\":3,\"sources\":[\"app/e2e/client/rocketchat.e2e.ts\",\"<anon>\"],\"sourcesContent\":[\"import QueryString from 'querystring';\\nimport URL from 'url';\\n\\nimport type { IE2EEMessage, IMessage, IRoom, ISubscription, IUser, IUploadWithUser, MessageAttachment } from '@rocket.chat/core-typings';\\nimport { isE2EEMessage } from '@rocket.chat/core-typings';\\nimport { Emitter } from '@rocket.chat/emitter';\\nimport EJSON from 'ejson';\\nimport _ from 'lodash';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport { Meteor } from 'meteor/meteor';\\nimport { Tracker } from 'meteor/tracker';\\n\\nimport * as banners from '../../../client/lib/banners';\\nimport type { LegacyBannerPayload } from '../../../client/lib/banners';\\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\\nimport { dispatchToastMessage } from '../../../client/lib/toast';\\nimport { mapMessageFromApi } from '../../../client/lib/utils/mapMessageFromApi';\\nimport { waitUntilFind } from '../../../client/lib/utils/waitUntilFind';\\nimport EnterE2EPasswordModal from '../../../client/views/e2e/EnterE2EPasswordModal';\\nimport SaveE2EPasswordModal from '../../../client/views/e2e/SaveE2EPasswordModal';\\nimport { createQuoteAttachment } from '../../../lib/createQuoteAttachment';\\nimport { getMessageUrlRegex } from '../../../lib/getMessageUrlRegex';\\nimport { isTruthy } from '../../../lib/isTruthy';\\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\\nimport { settings } from '../../settings/client';\\nimport { getUserAvatarURL } from '../../utils/client';\\nimport { sdk } from '../../utils/client/lib/SDKClient';\\nimport { t } from '../../utils/lib/i18n';\\nimport { E2EEState } from './E2EEState';\\nimport {\\n\\ttoString,\\n\\ttoArrayBuffer,\\n\\tjoinVectorAndEcryptedData,\\n\\tsplitVectorAndEcryptedData,\\n\\tencryptAES,\\n\\tdecryptAES,\\n\\tgenerateRSAKey,\\n\\texportJWKKey,\\n\\timportRSAKey,\\n\\timportRawKey,\\n\\tderiveKey,\\n\\tgenerateMnemonicPhrase,\\n} from './helper';\\nimport { log, logError } from './logger';\\nimport { E2ERoom } from './rocketchat.e2e.room';\\n\\nimport './events.js';\\n\\nlet failedToDecodeKey = false;\\n\\ntype KeyPair = {\\n\\tpublic_key: string | null;\\n\\tprivate_key: string | null;\\n};\\n\\nconst ROOM_KEY_EXCHANGE_SIZE = 10;\\nconst E2EEStateDependency = new Tracker.Dependency();\\n\\nclass E2E extends Emitter {\\n\\tprivate started: boolean;\\n\\n\\tprivate instancesByRoomId: Record<IRoom['_id'], E2ERoom>;\\n\\n\\tprivate db_public_key: string | null | undefined;\\n\\n\\tprivate db_private_key: string | null | undefined;\\n\\n\\tpublic privateKey: CryptoKey | undefined;\\n\\n\\tpublic publicKey: string | undefined;\\n\\n\\tprivate keyDistributionInterval: ReturnType<typeof setInterval> | null;\\n\\n\\tprivate state: E2EEState;\\n\\n\\tprivate observable: Meteor.LiveQueryHandle | undefined;\\n\\n\\tconstructor() {\\n\\t\\tsuper();\\n\\t\\tthis.started = false;\\n\\t\\tthis.instancesByRoomId = {};\\n\\t\\tthis.keyDistributionInterval = null;\\n\\t\\tthis.observable = undefined;\\n\\n\\t\\tthis.on('E2E_STATE_CHANGED', ({ prevState, nextState }) => {\\n\\t\\t\\tthis.log(`${prevState} -> ${nextState}`);\\n\\t\\t});\\n\\n\\t\\tthis.on(E2EEState.READY, async () => {\\n\\t\\t\\tawait this.onE2EEReady();\\n\\t\\t});\\n\\n\\t\\tthis.on(E2EEState.SAVE_PASSWORD, async () => {\\n\\t\\t\\tawait this.onE2EEReady();\\n\\t\\t});\\n\\n\\t\\tthis.on(E2EEState.DISABLED, () => {\\n\\t\\t\\tthis.observable?.stop();\\n\\t\\t});\\n\\n\\t\\tthis.on(E2EEState.NOT_STARTED, () => {\\n\\t\\t\\tthis.observable?.stop();\\n\\t\\t});\\n\\n\\t\\tthis.on(E2EEState.ERROR, () => {\\n\\t\\t\\tthis.observable?.stop();\\n\\t\\t});\\n\\n\\t\\tthis.setState(E2EEState.NOT_STARTED);\\n\\t}\\n\\n\\tlog(...msg: unknown[]) {\\n\\t\\tlog('E2E', ...msg);\\n\\t}\\n\\n\\terror(...msg: unknown[]) {\\n\\t\\tlogError('E2E', ...msg);\\n\\t}\\n\\n\\tgetState() {\\n\\t\\treturn this.state;\\n\\t}\\n\\n\\tisEnabled(): boolean {\\n\\t\\treturn this.state !== E2EEState.DISABLED;\\n\\t}\\n\\n\\tisReady(): boolean {\\n\\t\\tE2EEStateDependency.depend();\\n\\n\\t\\t// Save_Password state is also a ready state for E2EE\\n\\t\\treturn this.state === E2EEState.READY || this.state === E2EEState.SAVE_PASSWORD;\\n\\t}\\n\\n\\tasync onE2EEReady() {\\n\\t\\tthis.log('startClient -> Done');\\n\\t\\tthis.initiateHandshake();\\n\\t\\tawait this.handleAsyncE2EESuggestedKey();\\n\\t\\tthis.log('decryptSubscriptions');\\n\\t\\tawait this.decryptSubscriptions();\\n\\t\\tthis.log('decryptSubscriptions -> Done');\\n\\t\\tawait this.initiateKeyDistribution();\\n\\t\\tthis.log('initiateKeyDistribution -> Done');\\n\\t\\tthis.observeSubscriptions();\\n\\t\\tthis.log('observing subscriptions');\\n\\t}\\n\\n\\tasync onSubscriptionChanged(sub: ISubscription) {\\n\\t\\tthis.log('Subscription changed', sub);\\n\\t\\tif (!sub.encrypted && !sub.E2EKey) {\\n\\t\\t\\tthis.removeInstanceByRoomId(sub.rid);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst e2eRoom = await this.getInstanceByRoomId(sub.rid);\\n\\t\\tif (!e2eRoom) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (sub.E2ESuggestedKey) {\\n\\t\\t\\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\\n\\t\\t\\t\\tawait this.acceptSuggestedKey(sub.rid);\\n\\t\\t\\t\\te2eRoom.keyReceived();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tconsole.warn('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\\n\\t\\t\\t\\tawait this.rejectSuggestedKey(sub.rid);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\\n\\n\\t\\t// Cover private groups and direct messages\\n\\t\\tif (!e2eRoom.isSupportedRoomType(sub.t)) {\\n\\t\\t\\te2eRoom.disable();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (sub.E2EKey && e2eRoom.isWaitingKeys()) {\\n\\t\\t\\te2eRoom.keyReceived();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (!e2eRoom.isReady()) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tawait e2eRoom.decryptSubscription();\\n\\t}\\n\\n\\tobserveSubscriptions() {\\n\\t\\tthis.observable?.stop();\\n\\n\\t\\tthis.observable = Subscriptions.find().observe({\\n\\t\\t\\tchanged: (sub: ISubscription) => {\\n\\t\\t\\t\\tsetTimeout(() => this.onSubscriptionChanged(sub), 0);\\n\\t\\t\\t},\\n\\t\\t\\tadded: (sub: ISubscription) => {\\n\\t\\t\\t\\tsetTimeout(async () => {\\n\\t\\t\\t\\t\\tthis.log('Subscription added', sub);\\n\\t\\t\\t\\t\\tif (!sub.encrypted && !sub.E2EKey) {\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn this.getInstanceByRoomId(sub.rid);\\n\\t\\t\\t\\t}, 0);\\n\\t\\t\\t},\\n\\t\\t\\tremoved: (sub: ISubscription) => {\\n\\t\\t\\t\\tthis.log('Subscription removed', sub);\\n\\t\\t\\t\\tthis.removeInstanceByRoomId(sub.rid);\\n\\t\\t\\t},\\n\\t\\t});\\n\\t}\\n\\n\\tshouldAskForE2EEPassword() {\\n\\t\\tconst { private_key } = this.getKeysFromLocalStorage();\\n\\t\\treturn this.db_private_key && !private_key;\\n\\t}\\n\\n\\tsetState(nextState: E2EEState) {\\n\\t\\tconst prevState = this.state;\\n\\n\\t\\tthis.state = nextState;\\n\\n\\t\\tE2EEStateDependency.changed();\\n\\n\\t\\tthis.emit('E2E_STATE_CHANGED', { prevState, nextState });\\n\\n\\t\\tthis.emit(nextState);\\n\\t}\\n\\n\\tasync handleAsyncE2EESuggestedKey() {\\n\\t\\tconst subs = Subscriptions.find({ E2ESuggestedKey: { $exists: true } }).fetch();\\n\\t\\tawait Promise.all(\\n\\t\\t\\tsubs\\n\\t\\t\\t\\t.filter((sub) => sub.E2ESuggestedKey && !sub.E2EKey)\\n\\t\\t\\t\\t.map(async (sub) => {\\n\\t\\t\\t\\t\\tconst e2eRoom = await e2e.getInstanceByRoomId(sub.rid);\\n\\n\\t\\t\\t\\t\\tif (!e2eRoom) {\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\\n\\t\\t\\t\\t\\t\\tthis.log('Imported valid E2E suggested key');\\n\\t\\t\\t\\t\\t\\tawait e2e.acceptSuggestedKey(sub.rid);\\n\\t\\t\\t\\t\\t\\te2eRoom.keyReceived();\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tthis.error('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\\n\\t\\t\\t\\t\\t\\tawait e2e.rejectSuggestedKey(sub.rid);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\\n\\t\\t\\t\\t}),\\n\\t\\t);\\n\\t}\\n\\n\\tasync getInstanceByRoomId(rid: IRoom['_id']): Promise<E2ERoom | null> {\\n\\t\\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\\n\\n\\t\\tif (room.t !== 'd' && room.t !== 'p') {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tif (!room.encrypted) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tif (!this.instancesByRoomId[rid]) {\\n\\t\\t\\tthis.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), room);\\n\\t\\t}\\n\\n\\t\\t// When the key was already set and is changed via an update, we update the room instance\\n\\t\\tif (\\n\\t\\t\\tthis.instancesByRoomId[rid].keyID !== undefined &&\\n\\t\\t\\troom.e2eKeyId !== undefined &&\\n\\t\\t\\tthis.instancesByRoomId[rid].keyID !== room.e2eKeyId\\n\\t\\t) {\\n\\t\\t\\t// KeyID was changed, update instance with new keyID and put room in waiting keys status\\n\\t\\t\\tthis.instancesByRoomId[rid].onRoomKeyReset(room.e2eKeyId);\\n\\t\\t}\\n\\n\\t\\treturn this.instancesByRoomId[rid];\\n\\t}\\n\\n\\tremoveInstanceByRoomId(rid: IRoom['_id']): void {\\n\\t\\tdelete this.instancesByRoomId[rid];\\n\\t}\\n\\n\\tprivate async persistKeys(\\n\\t\\t{ public_key, private_key }: KeyPair,\\n\\t\\tpassword: string,\\n\\t\\t{ force }: { force: boolean } = { force: false },\\n\\t): Promise<void> {\\n\\t\\tif (typeof public_key !== 'string' || typeof private_key !== 'string') {\\n\\t\\t\\tthrow new Error('Failed to persist keys as they are not strings.');\\n\\t\\t}\\n\\n\\t\\tconst encodedPrivateKey = await this.encodePrivateKey(private_key, password);\\n\\n\\t\\tif (!encodedPrivateKey) {\\n\\t\\t\\tthrow new Error('Failed to encode private key with provided password.');\\n\\t\\t}\\n\\n\\t\\tawait sdk.rest.post('/v1/e2e.setUserPublicAndPrivateKeys', {\\n\\t\\t\\tpublic_key,\\n\\t\\t\\tprivate_key: encodedPrivateKey,\\n\\t\\t\\tforce,\\n\\t\\t});\\n\\t}\\n\\n\\tasync acceptSuggestedKey(rid: string): Promise<void> {\\n\\t\\tawait sdk.rest.post('/v1/e2e.acceptSuggestedGroupKey', {\\n\\t\\t\\trid,\\n\\t\\t});\\n\\t}\\n\\n\\tasync rejectSuggestedKey(rid: string): Promise<void> {\\n\\t\\tawait sdk.rest.post('/v1/e2e.rejectSuggestedGroupKey', {\\n\\t\\t\\trid,\\n\\t\\t});\\n\\t}\\n\\n\\tgetKeysFromLocalStorage(): KeyPair {\\n\\t\\treturn {\\n\\t\\t\\tpublic_key: Accounts.storageLocation.getItem('public_key'),\\n\\t\\t\\tprivate_key: Accounts.storageLocation.getItem('private_key'),\\n\\t\\t};\\n\\t}\\n\\n\\tinitiateHandshake() {\\n\\t\\tObject.keys(this.instancesByRoomId).map((key) => this.instancesByRoomId[key].handshake());\\n\\t}\\n\\n\\topenSaveE2EEPasswordModal(randomPassword: string) {\\n\\t\\timperativeModal.open({\\n\\t\\t\\tcomponent: SaveE2EPasswordModal,\\n\\t\\t\\tprops: {\\n\\t\\t\\t\\trandomPassword,\\n\\t\\t\\t\\tonClose: imperativeModal.close,\\n\\t\\t\\t\\tonCancel: () => {\\n\\t\\t\\t\\t\\tthis.closeAlert();\\n\\t\\t\\t\\t\\timperativeModal.close();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tonConfirm: () => {\\n\\t\\t\\t\\t\\tAccounts.storageLocation.removeItem('e2e.randomPassword');\\n\\t\\t\\t\\t\\tthis.setState(E2EEState.READY);\\n\\t\\t\\t\\t\\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\\n\\t\\t\\t\\t\\tthis.closeAlert();\\n\\t\\t\\t\\t\\timperativeModal.close();\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t});\\n\\t}\\n\\n\\tasync startClient(): Promise<void> {\\n\\t\\tif (this.started) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.log('startClient -> STARTED');\\n\\n\\t\\tthis.started = true;\\n\\n\\t\\tlet { public_key, private_key } = this.getKeysFromLocalStorage();\\n\\n\\t\\tawait this.loadKeysFromDB();\\n\\n\\t\\tif (!public_key && this.db_public_key) {\\n\\t\\t\\tpublic_key = this.db_public_key;\\n\\t\\t}\\n\\n\\t\\tif (this.shouldAskForE2EEPassword()) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tthis.setState(E2EEState.ENTER_PASSWORD);\\n\\t\\t\\t\\tprivate_key = await this.decodePrivateKey(this.db_private_key as string);\\n\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\tthis.started = false;\\n\\t\\t\\t\\tfailedToDecodeKey = true;\\n\\t\\t\\t\\tthis.openAlert({\\n\\t\\t\\t\\t\\ttitle: \\\"Wasn't possible to decode your encryption key to be imported.\\\", // TODO: missing translation\\n\\t\\t\\t\\t\\thtml: '<div>Your encryption password seems wrong. Click here to try again.</div>', // TODO: missing translation\\n\\t\\t\\t\\t\\tmodifiers: ['large', 'danger'],\\n\\t\\t\\t\\t\\tclosable: true,\\n\\t\\t\\t\\t\\ticon: 'key',\\n\\t\\t\\t\\t\\taction: async () => {\\n\\t\\t\\t\\t\\t\\tawait this.startClient();\\n\\t\\t\\t\\t\\t\\tthis.closeAlert();\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (public_key && private_key) {\\n\\t\\t\\tawait this.loadKeys({ public_key, private_key });\\n\\t\\t\\tthis.setState(E2EEState.READY);\\n\\t\\t} else {\\n\\t\\t\\tawait this.createAndLoadKeys();\\n\\t\\t\\tthis.setState(E2EEState.READY);\\n\\t\\t}\\n\\n\\t\\tif (!this.db_public_key || !this.db_private_key) {\\n\\t\\t\\tthis.setState(E2EEState.LOADING_KEYS);\\n\\t\\t\\tawait this.persistKeys(this.getKeysFromLocalStorage(), await this.createRandomPassword());\\n\\t\\t}\\n\\n\\t\\tconst randomPassword = Accounts.storageLocation.getItem('e2e.randomPassword');\\n\\t\\tif (randomPassword) {\\n\\t\\t\\tthis.setState(E2EEState.SAVE_PASSWORD);\\n\\t\\t\\tthis.openAlert({\\n\\t\\t\\t\\ttitle: () => t('Save_your_encryption_password'),\\n\\t\\t\\t\\thtml: () => t('Click_here_to_view_and_copy_your_password'),\\n\\t\\t\\t\\tmodifiers: ['large'],\\n\\t\\t\\t\\tclosable: false,\\n\\t\\t\\t\\ticon: 'key',\\n\\t\\t\\t\\taction: () => this.openSaveE2EEPasswordModal(randomPassword),\\n\\t\\t\\t});\\n\\t\\t}\\n\\t}\\n\\n\\tasync stopClient(): Promise<void> {\\n\\t\\tthis.log('-> Stop Client');\\n\\t\\tthis.closeAlert();\\n\\n\\t\\tAccounts.storageLocation.removeItem('public_key');\\n\\t\\tAccounts.storageLocation.removeItem('private_key');\\n\\t\\tthis.instancesByRoomId = {};\\n\\t\\tthis.privateKey = undefined;\\n\\t\\tthis.publicKey = undefined;\\n\\t\\tthis.started = false;\\n\\t\\tthis.keyDistributionInterval && clearInterval(this.keyDistributionInterval);\\n\\t\\tthis.keyDistributionInterval = null;\\n\\t\\tthis.setState(E2EEState.DISABLED);\\n\\t}\\n\\n\\tasync changePassword(newPassword: string): Promise<void> {\\n\\t\\tawait this.persistKeys(this.getKeysFromLocalStorage(), newPassword, { force: true });\\n\\n\\t\\tif (Accounts.storageLocation.getItem('e2e.randomPassword')) {\\n\\t\\t\\tAccounts.storageLocation.setItem('e2e.randomPassword', newPassword);\\n\\t\\t}\\n\\t}\\n\\n\\tasync loadKeysFromDB(): Promise<void> {\\n\\t\\ttry {\\n\\t\\t\\tthis.setState(E2EEState.LOADING_KEYS);\\n\\t\\t\\tconst { public_key, private_key } = await sdk.rest.get('/v1/e2e.fetchMyKeys');\\n\\n\\t\\t\\tthis.db_public_key = public_key;\\n\\t\\t\\tthis.db_private_key = private_key;\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\tthis.error('Error fetching RSA keys: ', error);\\n\\t\\t\\t// Stop any process since we can't communicate with the server\\n\\t\\t\\t// to get the keys. This prevents new key generation\\n\\t\\t\\tthrow error;\\n\\t\\t}\\n\\t}\\n\\n\\tasync loadKeys({ public_key, private_key }: { public_key: string; private_key: string }): Promise<void> {\\n\\t\\tAccounts.storageLocation.setItem('public_key', public_key);\\n\\t\\tthis.publicKey = public_key;\\n\\n\\t\\ttry {\\n\\t\\t\\tthis.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\\n\\n\\t\\t\\tAccounts.storageLocation.setItem('private_key', private_key);\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error importing private key: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\tasync createAndLoadKeys(): Promise<void> {\\n\\t\\t// Could not obtain public-private keypair from server.\\n\\t\\tthis.setState(E2EEState.LOADING_KEYS);\\n\\t\\tlet key;\\n\\t\\ttry {\\n\\t\\t\\tkey = await generateRSAKey();\\n\\t\\t\\tthis.privateKey = key.privateKey;\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error generating key: ', error);\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\tconst publicKey = await exportJWKKey(key.publicKey);\\n\\n\\t\\t\\tthis.publicKey = JSON.stringify(publicKey);\\n\\t\\t\\tAccounts.storageLocation.setItem('public_key', JSON.stringify(publicKey));\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error exporting public key: ', error);\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\tconst privateKey = await exportJWKKey(key.privateKey);\\n\\n\\t\\t\\tAccounts.storageLocation.setItem('private_key', JSON.stringify(privateKey));\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error exporting private key: ', error);\\n\\t\\t}\\n\\n\\t\\tawait this.requestSubscriptionKeys();\\n\\t}\\n\\n\\tasync requestSubscriptionKeys(): Promise<void> {\\n\\t\\tawait sdk.call('e2e.requestSubscriptionKeys');\\n\\t}\\n\\n\\tasync createRandomPassword(): Promise<string> {\\n\\t\\tconst randomPassword = await generateMnemonicPhrase(5);\\n\\t\\tAccounts.storageLocation.setItem('e2e.randomPassword', randomPassword);\\n\\t\\treturn randomPassword;\\n\\t}\\n\\n\\tasync encodePrivateKey(privateKey: string, password: string): Promise<string | void> {\\n\\t\\tconst masterKey = await this.getMasterKey(password);\\n\\n\\t\\tconst vector = crypto.getRandomValues(new Uint8Array(16));\\n\\t\\ttry {\\n\\t\\t\\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\\n\\n\\t\\t\\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error encrypting encodedPrivateKey: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\tasync getMasterKey(password: string): Promise<void | CryptoKey> {\\n\\t\\tif (password == null) {\\n\\t\\t\\talert('You should provide a password');\\n\\t\\t}\\n\\n\\t\\t// First, create a PBKDF2 \\\"key\\\" containing the password\\n\\t\\tlet baseKey;\\n\\t\\ttry {\\n\\t\\t\\tbaseKey = await importRawKey(toArrayBuffer(password));\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error creating a key based on user password: ', error);\\n\\t\\t}\\n\\n\\t\\t// Derive a key from the password\\n\\t\\ttry {\\n\\t\\t\\treturn await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ERROR);\\n\\t\\t\\treturn this.error('Error deriving baseKey: ', error);\\n\\t\\t}\\n\\t}\\n\\n\\topenEnterE2EEPasswordModal(onEnterE2EEPassword?: (password: string) => void) {\\n\\t\\timperativeModal.open({\\n\\t\\t\\tcomponent: EnterE2EPasswordModal,\\n\\t\\t\\tprops: {\\n\\t\\t\\t\\tonClose: imperativeModal.close,\\n\\t\\t\\t\\tonCancel: () => {\\n\\t\\t\\t\\t\\tfailedToDecodeKey = false;\\n\\t\\t\\t\\t\\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\\n\\t\\t\\t\\t\\tthis.closeAlert();\\n\\t\\t\\t\\t\\timperativeModal.close();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tonConfirm: (password) => {\\n\\t\\t\\t\\t\\tonEnterE2EEPassword?.(password);\\n\\t\\t\\t\\t\\tthis.closeAlert();\\n\\t\\t\\t\\t\\timperativeModal.close();\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t});\\n\\t}\\n\\n\\tasync requestPasswordAlert(): Promise<string> {\\n\\t\\treturn new Promise((resolve) => {\\n\\t\\t\\tconst showModal = () => this.openEnterE2EEPasswordModal((password) => resolve(password));\\n\\n\\t\\t\\tconst showAlert = () => {\\n\\t\\t\\t\\tthis.openAlert({\\n\\t\\t\\t\\t\\ttitle: () => t('Enter_your_E2E_password'),\\n\\t\\t\\t\\t\\thtml: () => t('Click_here_to_enter_your_encryption_password'),\\n\\t\\t\\t\\t\\tmodifiers: ['large'],\\n\\t\\t\\t\\t\\tclosable: false,\\n\\t\\t\\t\\t\\ticon: 'key',\\n\\t\\t\\t\\t\\taction() {\\n\\t\\t\\t\\t\\t\\tshowModal();\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t});\\n\\t\\t\\t};\\n\\n\\t\\t\\tif (failedToDecodeKey) {\\n\\t\\t\\t\\tshowModal();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tshowAlert();\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tasync requestPasswordModal(): Promise<string> {\\n\\t\\treturn new Promise((resolve) => this.openEnterE2EEPasswordModal((password) => resolve(password)));\\n\\t}\\n\\n\\tasync decodePrivateKeyFlow() {\\n\\t\\tconst password = await this.requestPasswordModal();\\n\\t\\tconst masterKey = await this.getMasterKey(password);\\n\\n\\t\\tif (!this.db_private_key) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(this.db_private_key));\\n\\n\\t\\ttry {\\n\\t\\t\\tconst privKey = await decryptAES(vector, masterKey, cipherText);\\n\\t\\t\\tconst privateKey = toString(privKey) as string;\\n\\n\\t\\t\\tif (this.db_public_key && privateKey) {\\n\\t\\t\\t\\tawait this.loadKeys({ public_key: this.db_public_key, private_key: privateKey });\\n\\t\\t\\t\\tthis.setState(E2EEState.READY);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tawait this.createAndLoadKeys();\\n\\t\\t\\t\\tthis.setState(E2EEState.READY);\\n\\t\\t\\t}\\n\\t\\t\\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ENTER_PASSWORD);\\n\\t\\t\\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\\n\\t\\t\\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\\n\\t\\t\\tthrow new Error('E2E -> Error decrypting private key');\\n\\t\\t}\\n\\t}\\n\\n\\tasync decodePrivateKey(privateKey: string): Promise<string> {\\n\\t\\tconst password = await this.requestPasswordAlert();\\n\\n\\t\\tconst masterKey = await this.getMasterKey(password);\\n\\n\\t\\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\\n\\n\\t\\ttry {\\n\\t\\t\\tconst privKey = await decryptAES(vector, masterKey, cipherText);\\n\\t\\t\\treturn toString(privKey);\\n\\t\\t} catch (error) {\\n\\t\\t\\tthis.setState(E2EEState.ENTER_PASSWORD);\\n\\t\\t\\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\\n\\t\\t\\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\\n\\t\\t\\tthrow new Error('E2E -> Error decrypting private key');\\n\\t\\t}\\n\\t}\\n\\n\\tasync decryptFileContent(file: IUploadWithUser): Promise<IUploadWithUser> {\\n\\t\\tif (!file.rid) {\\n\\t\\t\\treturn file;\\n\\t\\t}\\n\\n\\t\\tconst e2eRoom = await this.getInstanceByRoomId(file.rid);\\n\\n\\t\\tif (!e2eRoom) {\\n\\t\\t\\treturn file;\\n\\t\\t}\\n\\n\\t\\treturn e2eRoom.decryptContent(file);\\n\\t}\\n\\n\\tasync decryptMessage(message: IMessage | IE2EEMessage): Promise<IMessage> {\\n\\t\\tif (!isE2EEMessage(message) || message.e2e === 'done') {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\\n\\n\\t\\tif (!e2eRoom) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst decryptedMessage: IE2EEMessage = await e2eRoom.decryptMessage(message);\\n\\n\\t\\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\\n\\n\\t\\treturn decryptedMessageWithQuote;\\n\\t}\\n\\n\\tasync decryptPinnedMessage(message: IMessage) {\\n\\t\\tconst pinnedMessage = message?.attachments?.[0]?.text;\\n\\n\\t\\tif (!pinnedMessage) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\\n\\n\\t\\tif (!e2eRoom) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst data = await e2eRoom.decrypt(pinnedMessage);\\n\\n\\t\\tif (!data) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst decryptedPinnedMessage = { ...message } as IMessage & { attachments: MessageAttachment[] };\\n\\t\\tdecryptedPinnedMessage.attachments[0].text = data.text;\\n\\n\\t\\treturn decryptedPinnedMessage;\\n\\t}\\n\\n\\tasync decryptPendingMessages(): Promise<void> {\\n\\t\\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\\n\\t\\t\\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));\\n\\t\\t});\\n\\t}\\n\\n\\tasync decryptSubscription(subscriptionId: ISubscription['_id']): Promise<void> {\\n\\t\\tconst e2eRoom = await this.getInstanceByRoomId(subscriptionId);\\n\\t\\tthis.log('decryptSubscription ->', subscriptionId);\\n\\t\\tawait e2eRoom?.decryptSubscription();\\n\\t}\\n\\n\\tasync decryptSubscriptions(): Promise<void> {\\n\\t\\tSubscriptions.find({\\n\\t\\t\\tencrypted: true,\\n\\t\\t}).forEach((subscription) => this.decryptSubscription(subscription._id));\\n\\t}\\n\\n\\topenAlert(config: Omit<LegacyBannerPayload, 'id'>): void {\\n\\t\\tbanners.open({ id: 'e2e', ...config });\\n\\t}\\n\\n\\tcloseAlert(): void {\\n\\t\\tbanners.closeById('e2e');\\n\\t}\\n\\n\\tasync parseQuoteAttachment(message: IE2EEMessage): Promise<IE2EEMessage> {\\n\\t\\tif (!message?.msg) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\t\\tconst urls = message.msg.match(getMessageUrlRegex()) || [];\\n\\n\\t\\tawait Promise.all(\\n\\t\\t\\turls.map(async (url) => {\\n\\t\\t\\t\\tif (!url.includes(settings.get('Site_Url'))) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst urlObj = URL.parse(url);\\n\\t\\t\\t\\t// if the URL doesn't have query params (doesn't reference message) skip\\n\\t\\t\\t\\tif (!urlObj.query) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst { msg: msgId } = QueryString.parse(urlObj.query);\\n\\n\\t\\t\\t\\tif (!msgId || Array.isArray(msgId)) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\\n\\t\\t\\t\\tconst quotedMessage = getQuotedMessage?.message;\\n\\n\\t\\t\\t\\tif (!quotedMessage) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tconst decryptedQuoteMessage = await this.decryptMessage(mapMessageFromApi(quotedMessage));\\n\\n\\t\\t\\t\\tmessage.attachments = message.attachments || [];\\n\\n\\t\\t\\t\\tconst useRealName = settings.get('UI_Use_Real_Name');\\n\\t\\t\\t\\tconst quoteAttachment = createQuoteAttachment(\\n\\t\\t\\t\\t\\tdecryptedQuoteMessage,\\n\\t\\t\\t\\t\\turl,\\n\\t\\t\\t\\t\\tuseRealName,\\n\\t\\t\\t\\t\\tgetUserAvatarURL(decryptedQuoteMessage.u.username || '') as string,\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tmessage.attachments.push(quoteAttachment);\\n\\t\\t\\t}),\\n\\t\\t);\\n\\n\\t\\treturn message;\\n\\t}\\n\\n\\tasync getSuggestedE2EEKeys(usersWaitingForE2EKeys: Record<IRoom['_id'], { _id: IUser['_id']; public_key: string }[]>) {\\n\\t\\tconst roomIds = Object.keys(usersWaitingForE2EKeys);\\n\\t\\treturn Object.fromEntries(\\n\\t\\t\\t(\\n\\t\\t\\t\\tawait Promise.all(\\n\\t\\t\\t\\t\\troomIds.map(async (room) => {\\n\\t\\t\\t\\t\\t\\tconst e2eRoom = await this.getInstanceByRoomId(room);\\n\\n\\t\\t\\t\\t\\t\\tif (!e2eRoom) {\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tconst usersWithKeys = await e2eRoom.encryptGroupKeyForParticipantsWaitingForTheKeys(usersWaitingForE2EKeys[room]);\\n\\n\\t\\t\\t\\t\\t\\tif (!usersWithKeys) {\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\treturn [room, usersWithKeys];\\n\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t)\\n\\t\\t\\t).filter(isTruthy),\\n\\t\\t);\\n\\t}\\n\\n\\tasync getSample(roomIds: string[], limit = 3): Promise<string[]> {\\n\\t\\tif (limit === 0) {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\n\\t\\tconst randomRoomIds = _.sampleSize(roomIds, ROOM_KEY_EXCHANGE_SIZE);\\n\\n\\t\\tconst sampleIds: string[] = [];\\n\\t\\tfor await (const roomId of randomRoomIds) {\\n\\t\\t\\tconst e2eroom = await this.getInstanceByRoomId(roomId);\\n\\t\\t\\tif (!e2eroom?.hasSessionKey()) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tsampleIds.push(roomId);\\n\\t\\t}\\n\\n\\t\\tif (!sampleIds.length) {\\n\\t\\t\\treturn this.getSample(roomIds, limit - 1);\\n\\t\\t}\\n\\n\\t\\treturn sampleIds;\\n\\t}\\n\\n\\tasync initiateKeyDistribution() {\\n\\t\\tif (this.keyDistributionInterval) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst keyDistribution = async () => {\\n\\t\\t\\tconst roomIds = ChatRoom.find({\\n\\t\\t\\t\\t'usersWaitingForE2EKeys': { $exists: true },\\n\\t\\t\\t\\t'usersWaitingForE2EKeys.userId': { $ne: Meteor.userId() },\\n\\t\\t\\t}).map((room) => room._id);\\n\\t\\t\\tif (!roomIds.length) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Prevent function from running and doing nothing when theres something to do\\n\\t\\t\\tconst sampleIds = await this.getSample(roomIds);\\n\\n\\t\\t\\tif (!sampleIds.length) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst { usersWaitingForE2EKeys = {} } = await sdk.rest.get('/v1/e2e.fetchUsersWaitingForGroupKey', { roomIds: sampleIds });\\n\\n\\t\\t\\tif (!Object.keys(usersWaitingForE2EKeys).length) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst userKeysWithRooms = await this.getSuggestedE2EEKeys(usersWaitingForE2EKeys);\\n\\n\\t\\t\\tif (!Object.keys(userKeysWithRooms).length) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys: userKeysWithRooms });\\n\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\treturn this.error('Error providing group key to users: ', error);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Run first call right away, then schedule for 10s in the future\\n\\t\\tawait keyDistribution();\\n\\t\\tthis.keyDistributionInterval = setInterval(keyDistribution, 10000);\\n\\t}\\n}\\n\\nexport const e2e = new E2E();\\n\",null],\"names\":[\"_objectWithoutProperties\",\"_objectSpread\",\"_asyncIterator\",\"QueryString\",\"URL\",\"isE2EEMessage\",\"Emitter\",\"EJSON\",\"_\",\"Accounts\",\"Meteor\",\"Tracker\",\"banners\",\"imperativeModal\",\"dispatchToastMessage\",\"mapMessageFromApi\",\"waitUntilFind\",\"EnterE2EPasswordModal\",\"SaveE2EPasswordModal\",\"createQuoteAttachment\",\"getMessageUrlRegex\",\"isTruthy\",\"ChatRoom\",\"Subscriptions\",\"Messages\",\"settings\",\"getUserAvatarURL\",\"sdk\",\"t\",\"E2EEState\",\"toString\",\"toArrayBuffer\",\"joinVectorAndEcryptedData\",\"splitVectorAndEcryptedData\",\"encryptAES\",\"decryptAES\",\"generateRSAKey\",\"exportJWKKey\",\"importRSAKey\",\"importRawKey\",\"deriveKey\",\"generateMnemonicPhrase\",\"log\",\"logError\",\"E2ERoom\",\"module\",\"link\",\"default\",\"v\",\"export\",\"e2e\",\"failedToDecodeKey\",\"E2EEStateDependency\",\"Dependency\",\"E2E\",\"constructor\",\"started\",\"instancesByRoomId\",\"db_public_key\",\"db_private_key\",\"privateKey\",\"publicKey\",\"keyDistributionInterval\",\"state\",\"observable\",\"undefined\",\"on\",\"_ref\",\"prevState\",\"nextState\",\"concat\",\"READY\",\"onE2EEReady\",\"SAVE_PASSWORD\",\"DISABLED\",\"_this$observable\",\"stop\",\"NOT_STARTED\",\"_this$observable2\",\"ERROR\",\"_this$observable3\",\"setState\",\"_len\",\"arguments\",\"length\",\"msg\",\"Array\",\"_key\",\"error\",\"_len2\",\"_key2\",\"getState\",\"isEnabled\",\"isReady\",\"depend\",\"initiateHandshake\",\"handleAsyncE2EESuggestedKey\",\"decryptSubscriptions\",\"initiateKeyDistribution\",\"observeSubscriptions\",\"onSubscriptionChanged\",\"sub\",\"encrypted\",\"E2EKey\",\"removeInstanceByRoomId\",\"rid\",\"e2eRoom\",\"getInstanceByRoomId\",\"E2ESuggestedKey\",\"importGroupKey\",\"acceptSuggestedKey\",\"keyReceived\",\"console\",\"warn\",\"rejectSuggestedKey\",\"resume\",\"pause\",\"isSupportedRoomType\",\"disable\",\"isWaitingKeys\",\"decryptSubscription\",\"_this$observable4\",\"find\",\"observe\",\"changed\",\"setTimeout\",\"added\",\"removed\",\"shouldAskForE2EEPassword\",\"private_key\",\"getKeysFromLocalStorage\",\"emit\",\"subs\",\"$exists\",\"fetch\",\"Promise\",\"all\",\"filter\",\"map\",\"room\",\"findOne\",\"_id\",\"userId\",\"keyID\",\"e2eKeyId\",\"onRoomKeyReset\",\"persistKeys\",\"_ref2\",\"password\",\"public_key\",\"force\",\"Error\",\"encodedPrivateKey\",\"encodePrivateKey\",\"rest\",\"post\",\"storageLocation\",\"getItem\",\"Object\",\"keys\",\"key\",\"handshake\",\"openSaveE2EEPasswordModal\",\"randomPassword\",\"open\",\"component\",\"props\",\"onClose\",\"close\",\"onCancel\",\"closeAlert\",\"onConfirm\",\"removeItem\",\"type\",\"message\",\"startClient\",\"loadKeysFromDB\",\"ENTER_PASSWORD\",\"decodePrivateKey\",\"openAlert\",\"title\",\"html\",\"modifiers\",\"closable\",\"icon\",\"action\",\"loadKeys\",\"createAndLoadKeys\",\"LOADING_KEYS\",\"createRandomPassword\",\"stopClient\",\"clearInterval\",\"changePassword\",\"newPassword\",\"setItem\",\"get\",\"_ref3\",\"parse\",\"JSON\",\"stringify\",\"requestSubscriptionKeys\",\"call\",\"masterKey\",\"getMasterKey\",\"vector\",\"crypto\",\"getRandomValues\",\"Uint8Array\",\"baseKey\",\"alert\",\"openEnterE2EEPasswordModal\",\"onEnterE2EEPassword\",\"requestPasswordAlert\",\"resolve\",\"showModal\",\"showAlert\",\"requestPasswordModal\",\"decodePrivateKeyFlow\",\"cipherText\",\"privKey\",\"decryptFileContent\",\"file\",\"decryptContent\",\"decryptMessage\",\"decryptedMessage\",\"decryptedMessageWithQuote\",\"parseQuoteAttachment\",\"decryptPinnedMessage\",\"_message$attachments\",\"_message$attachments$\",\"pinnedMessage\",\"attachments\",\"text\",\"data\",\"decrypt\",\"decryptedPinnedMessage\",\"decryptPendingMessages\",\"forEach\",\"_ref4\",\"_excluded\",\"update\",\"subscriptionId\",\"subscription\",\"config\",\"id\",\"closeById\",\"urls\",\"match\",\"url\",\"includes\",\"urlObj\",\"query\",\"msgId\",\"isArray\",\"getQuotedMessage\",\"quotedMessage\",\"decryptedQuoteMessage\",\"useRealName\",\"quoteAttachment\",\"u\",\"username\",\"push\",\"getSuggestedE2EEKeys\",\"usersWaitingForE2EKeys\",\"roomIds\",\"fromEntries\",\"usersWithKeys\",\"encryptGroupKeyForParticipantsWaitingForTheKeys\",\"getSample\",\"limit\",\"randomRoomIds\",\"sampleSize\",\"sampleIds\",\"_iteratorAbruptCompletion\",\"_didIteratorError\",\"_iteratorError\",\"_step\",\"_iterator\",\"next\",\"done\",\"roomId\",\"value\",\"e2eroom\",\"hasSessionKey\",\"err\",\"return\",\"keyDistribution\",\"$ne\",\"userKeysWithRooms\",\"usersSuggestedGroupKeys\",\"setInterval\"],\"mappings\":\"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\"}"}