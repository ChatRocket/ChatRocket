{"code":"function module(n,r,o){o.link(\"@babel/runtime/helpers/toConsumableArray\",{default:function(n){e=n}},0),o.link(\"@babel/runtime/helpers/slicedToArray\",{default:function(n){t=n}},1),o.export({compileSort:function(){return l}}),o.link(\"./bson\",{compareBSONValues:function(n){u=n}},0),o.link(\"./comparisons\",{isEmptyArray:function(n){i=n}},1),o.link(\"./lookups\",{createLookupFunction:function(n){a=n}},2);var e,t,u,i,a,c=function(n,r){var o;return(o=[]).concat.apply(o,e(n.map(function(n){return Array.isArray(n)?i(n)?[void 0]:n:[n]}))).reduce(function(n,o){var e=u(n,o);return r&&e>0||!r&&e<0?o:n})},l=function(n){var r=Array.isArray(n)?n.map(function(n){return\"string\"==typeof n?{lookup:a(n),ascending:!0}:{lookup:a(n[0]),ascending:\"desc\"!==n[1]}}):Object.entries(n).map(function(n){var r=t(n,2),o=r[0],e=r[1];return{lookup:a(o),ascending:e>=0}});return 0===r.length?function(){return 0}:function(n,o){for(var e=0;e<r.length;++e){var t=r[e],i=c(t.lookup(n),t.ascending),a=c(t.lookup(o),t.ascending),l=u(i,a);if(0!==l)return t.ascending?l:-l}return 0}}}","map":"{\"version\":3,\"sources\":[\"client/lib/minimongo/sort.ts\",\"<anon>\"],\"sourcesContent\":[\"import { compareBSONValues } from './bson';\\nimport { isEmptyArray } from './comparisons';\\nimport { createLookupFunction } from './lookups';\\nimport type { Sort } from './types';\\n\\nconst createSortSpecParts = <T>(\\n\\tspec: Sort,\\n): {\\n\\tlookup: (doc: T) => unknown[];\\n\\tascending: boolean;\\n}[] => {\\n\\tif (Array.isArray(spec)) {\\n\\t\\treturn spec.map((value) => {\\n\\t\\t\\tif (typeof value === 'string') {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\tlookup: createLookupFunction<T>(value),\\n\\t\\t\\t\\t\\tascending: true,\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tlookup: createLookupFunction<T>(value[0]),\\n\\t\\t\\t\\tascending: value[1] !== 'desc',\\n\\t\\t\\t};\\n\\t\\t});\\n\\t}\\n\\n\\treturn Object.entries(spec).map(([key, value]) => ({\\n\\t\\tlookup: createLookupFunction<T>(key),\\n\\t\\tascending: value >= 0,\\n\\t}));\\n};\\n\\nconst reduceValue = (branchValues: unknown[], ascending: boolean): unknown =>\\n\\t([] as unknown[])\\n\\t\\t.concat(\\n\\t\\t\\t...branchValues.map<unknown[]>((branchValue) => {\\n\\t\\t\\t\\tif (!Array.isArray(branchValue)) {\\n\\t\\t\\t\\t\\treturn [branchValue];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (isEmptyArray(branchValue)) {\\n\\t\\t\\t\\t\\treturn [undefined];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn branchValue;\\n\\t\\t\\t}),\\n\\t\\t)\\n\\t\\t.reduce((reduced, value) => {\\n\\t\\t\\tconst cmp = compareBSONValues(reduced, value);\\n\\t\\t\\tif ((ascending && cmp > 0) || (!ascending && cmp < 0)) {\\n\\t\\t\\t\\treturn value;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn reduced;\\n\\t\\t});\\n\\nexport const compileSort = (spec: Sort): ((a: unknown, b: unknown) => number) => {\\n\\tconst sortSpecParts = createSortSpecParts(spec);\\n\\n\\tif (sortSpecParts.length === 0) {\\n\\t\\treturn (): number => 0;\\n\\t}\\n\\n\\treturn (a: unknown, b: unknown): number => {\\n\\t\\tfor (let i = 0; i < sortSpecParts.length; ++i) {\\n\\t\\t\\tconst specPart = sortSpecParts[i];\\n\\t\\t\\tconst aValue = reduceValue(specPart.lookup(a), specPart.ascending);\\n\\t\\t\\tconst bValue = reduceValue(specPart.lookup(b), specPart.ascending);\\n\\t\\t\\tconst compare = compareBSONValues(aValue, bValue);\\n\\n\\t\\t\\tif (compare !== 0) {\\n\\t\\t\\t\\treturn specPart.ascending ? compare : -compare;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t};\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_toConsumableArray\",\"_slicedToArray\",\"export\",\"compileSort\",\"compareBSONValues\",\"isEmptyArray\",\"createLookupFunction\",\"reduceValue\",\"branchValues\",\"ascending\",\"_ref3\",\"concat\",\"apply\",\"map\",\"branchValue\",\"Array\",\"isArray\",\"undefined\",\"reduce\",\"reduced\",\"value\",\"cmp\",\"spec\",\"sortSpecParts\",\"lookup\",\"Object\",\"entries\",\"_ref\",\"_ref2\",\"key\",\"length\",\"a\",\"b\",\"i\",\"specPart\",\"aValue\",\"bValue\",\"compare\"],\"mappings\":\"uBAASA,EAAmBC,IAAM,CAAA,2CAAS,CAAAC,QAAA,SAAAC,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,uCAAA,CAAAC,QAAA,SAAAC,CAAA,EAAAE,EAAAF,CAAA,CAAA,EAAA,GAA3CH,EAAOM,MAAE,CAAA,CAAAC,YAAiB,WAAQ,OAASA,CAAA,CAAA,GAAAP,EAAAC,IAAA,CAAA,SAAA,CAAAO,kBAAA,SAAAL,CAAA,EAAAK,EAAAL,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,gBAAA,CAAAQ,aAAA,SAAAN,CAAA,EAAAM,EAAAN,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,YAAA,CAAAS,qBAAA,SAAAP,CAAA,EAAAO,EAAAP,CAAA,CAAA,EAAA,GAiC3C,IAjCAC,EAA2CC,EAAAG,EAAAC,EAAAC,EAiCrCC,EAAc,SAACC,CAAuB,CAAEC,CAAkB,EAAA,IAAAC,EAAA,MAC9D,AAAAA,CAAAA,EAAA,EAAgB,AAAhB,EACCC,MAAM,CAAAC,KAAA,CAAAF,EAAAV,EACHQ,EAAaK,GAAG,CAAY,SAACC,CAAW,SAC1C,AAAKC,MAAMC,OAAO,CAACF,GAIfT,EAAaS,GACT,CAACG,KAAAA,EAAU,CAGZH,EAPC,CAACA,EAAY,AAQtB,KAEAI,MAAM,CAAC,SAACC,CAAO,CAAEC,CAAK,EACtB,IAAMC,EAAMjB,EAAkBe,EAASC,UACvC,AAAKX,GAAaY,EAAM,GAAO,CAACZ,GAAaY,EAAM,EAC3CD,EAGDD,CACR,EAAE,EAEShB,EAAc,SAACmB,CAAU,EACrC,IAAMC,EA/CN,AAAIR,MAAMC,OAAO,CA+CyBM,GA9ClCA,AA8CkCA,EA9C7BT,GAAG,CAAC,SAACO,CAAK,QACrB,AAAI,AAAiB,UAAjB,OAAOA,EACH,CACNI,OAAQlB,EAAwBc,GAChCX,UAAW,CAAA,GAIN,CACNe,OAAQlB,EAAwBc,CAAK,CAAC,EAAE,EACxCX,UAAWW,AAAa,SAAbA,CAAK,CAAC,EAAE,CAErB,GAGMK,OAAOC,OAAO,CA+BqBJ,GA/BdT,GAAG,CAAC,SAAAc,CAAA,EAAA,IAAAC,EAAA3B,EAAA0B,EAAA,GAAEE,EAAGD,CAAA,CAAA,EAAA,CAAER,EAAKQ,CAAA,CAAA,EAAA,CAAA,MAAO,CAClDJ,OAAQlB,EAAwBuB,GAChCpB,UAAWW,GAAS,EACpB,UA8BD,AAAIG,AAAyB,IAAzBA,EAAcO,MAAM,CAChB,WAAA,OAAc,CAAC,EAGhB,SAACC,CAAU,CAAEC,CAAU,EAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAcO,MAAM,CAAE,EAAEG,EAAG,CAC9C,IAAMC,EAAWX,CAAa,CAACU,EAAE,CAC3BE,EAAS5B,EAAY2B,EAASV,MAAM,CAACO,GAAIG,EAASzB,SAAS,EAC3D2B,EAAS7B,EAAY2B,EAASV,MAAM,CAACQ,GAAIE,EAASzB,SAAS,EAC3D4B,EAAUjC,EAAkB+B,EAAQC,GAE1C,GAAIC,AAAY,IAAZA,EACH,OAAOH,EAASzB,SAAS,CAAG4B,EAAU,CAACA,CAEzC,CAEA,OAAO,CACR,CACD\"}"}