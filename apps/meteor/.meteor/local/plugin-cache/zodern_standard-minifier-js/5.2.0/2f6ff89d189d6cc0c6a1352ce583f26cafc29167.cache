{"code":"function module(e,t,r){let n,i,l,o,a,s,u,c,d,f;r.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){n=e}},0),r.link(\"@rocket.chat/core-typings\",{isOTRMessage(e){i=e}},0),r.link(\"meteor/meteor\",{Meteor(e){l=e}},1),r.link(\"meteor/tracker\",{Tracker(e){o=e}},2),r.link(\"../../app/otr/client/OTR\",{default(e){a=e}},3),r.link(\"../../app/otr/lib/OtrRoomState\",{OtrRoomState(e){s=e}},4),r.link(\"../../app/utils/client/lib/SDKClient\",{sdk(e){u=e}},5),r.link(\"../../app/utils/lib/i18n\",{t(e){c=e}},6),r.link(\"../lib/onClientBeforeSendMessage\",{onClientBeforeSendMessage(e){d=e}},7),r.link(\"../lib/onClientMessageReceived\",{onClientMessageReceived(e){f=e}},8),l.startup(()=>{o.autorun(()=>{let e=l.userId();e&&u.stream(\"notify-user\",[\"\".concat(e,\"/otr\")],(t,r)=>{if(!r.roomId||!r.userId||r.userId===e)return;let n=a.getInstanceByRoomId(e,r.roomId);null==n||n.onUserStream(t,r)})}),d.use(async e=>{let t=l.userId();if(!t)return e;let r=a.getInstanceByRoomId(t,e.rid);if(r&&r.getState()===s.ESTABLISHED){let t=await r.encrypt(e);return n(n({},e),{},{msg:t,t:\"otr\"})}return e}),f.use(async e=>{let t=l.userId();if(!t||!i(e))return e;if(\"notification\"in e)return n(n({},e),{},{msg:c(\"Encrypted_message\")});let r=a.getInstanceByRoomId(t,e.rid);if(r&&r.getState()===s.ESTABLISHED){let t=await r.decrypt(e.msg);if(\"string\"==typeof t)return n(n({},e),{},{msg:t});let{_id:i,text:o,ack:a,ts:s,userId:c}=t;if(s&&(e.ts=s),e.otrAck){let t=await r.decrypt(e.otrAck);if(\"string\"==typeof t)return n(n({},e),{},{msg:t});if(a===t.text)return n(n({},e),{},{_id:i,t:\"otr-ack\",msg:o})}else if(c!==l.userId()){let t=await r.encryptText(a);u.call(\"updateOTRAck\",{message:e,ack:t})}return n(n({},e),{},{_id:i,msg:o})}return\"otr\"===e.t&&(e.msg=\"\"),e})})}","map":"{\"version\":3,\"sources\":[\"client/startup/otr.ts\",\"<anon>\"],\"sourcesContent\":[\"import { isOTRMessage } from '@rocket.chat/core-typings';\\nimport { Meteor } from 'meteor/meteor';\\nimport { Tracker } from 'meteor/tracker';\\n\\nimport OTR from '../../app/otr/client/OTR';\\nimport { OtrRoomState } from '../../app/otr/lib/OtrRoomState';\\nimport { sdk } from '../../app/utils/client/lib/SDKClient';\\nimport { t } from '../../app/utils/lib/i18n';\\nimport { onClientBeforeSendMessage } from '../lib/onClientBeforeSendMessage';\\nimport { onClientMessageReceived } from '../lib/onClientMessageReceived';\\n\\nMeteor.startup(() => {\\n\\tTracker.autorun(() => {\\n\\t\\tconst uid = Meteor.userId();\\n\\n\\t\\tif (!uid) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tsdk.stream('notify-user', [`${uid}/otr`], (type, data) => {\\n\\t\\t\\tif (!data.roomId || !data.userId || data.userId === uid) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst otrRoom = OTR.getInstanceByRoomId(uid, data.roomId);\\n\\t\\t\\totrRoom?.onUserStream(type, data);\\n\\t\\t});\\n\\t});\\n\\n\\tonClientBeforeSendMessage.use(async (message) => {\\n\\t\\tconst uid = Meteor.userId();\\n\\n\\t\\tif (!uid) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\\n\\n\\t\\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\\n\\t\\t\\tconst msg = await otrRoom.encrypt(message);\\n\\t\\t\\treturn { ...message, msg, t: 'otr' };\\n\\t\\t}\\n\\t\\treturn message;\\n\\t});\\n\\n\\tonClientMessageReceived.use(async (message) => {\\n\\t\\tconst uid = Meteor.userId();\\n\\n\\t\\tif (!uid) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tif (!isOTRMessage(message)) {\\n\\t\\t\\treturn message;\\n\\t\\t}\\n\\n\\t\\tif ('notification' in message) {\\n\\t\\t\\treturn { ...message, msg: t('Encrypted_message') };\\n\\t\\t}\\n\\n\\t\\tconst otrRoom = OTR.getInstanceByRoomId(uid, message.rid);\\n\\n\\t\\tif (otrRoom && otrRoom.getState() === OtrRoomState.ESTABLISHED) {\\n\\t\\t\\tconst decrypted = await otrRoom.decrypt(message.msg);\\n\\t\\t\\tif (typeof decrypted === 'string') {\\n\\t\\t\\t\\treturn { ...message, msg: decrypted };\\n\\t\\t\\t}\\n\\t\\t\\tconst { _id, text: msg, ack, ts, userId } = decrypted;\\n\\n\\t\\t\\tif (ts) message.ts = ts;\\n\\n\\t\\t\\tif (message.otrAck) {\\n\\t\\t\\t\\tconst otrAck = await otrRoom.decrypt(message.otrAck);\\n\\t\\t\\t\\tif (typeof otrAck === 'string') {\\n\\t\\t\\t\\t\\treturn { ...message, msg: otrAck };\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (ack === otrAck.text) {\\n\\t\\t\\t\\t\\treturn { ...message, _id, t: 'otr-ack', msg };\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (userId !== Meteor.userId()) {\\n\\t\\t\\t\\tconst encryptedAck = await otrRoom.encryptText(ack);\\n\\n\\t\\t\\t\\tvoid sdk.call('updateOTRAck', { message, ack: encryptedAck });\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn { ...message, _id, msg };\\n\\t\\t}\\n\\t\\tif (message.t === 'otr') message.msg = '';\\n\\n\\t\\treturn message;\\n\\t});\\n});\\n\",null],\"names\":[\"_objectSpread\",\"isOTRMessage\",\"Meteor\",\"Tracker\",\"OTR\",\"OtrRoomState\",\"sdk\",\"t\",\"onClientBeforeSendMessage\",\"onClientMessageReceived\",\"module\",\"link\",\"default\",\"v\",\"startup\",\"autorun\",\"uid\",\"userId\",\"stream\",\"concat\",\"type\",\"data\",\"roomId\",\"otrRoom\",\"getInstanceByRoomId\",\"onUserStream\",\"use\",\"message\",\"rid\",\"getState\",\"ESTABLISHED\",\"msg\",\"encrypt\",\"decrypted\",\"decrypt\",\"_id\",\"text\",\"ack\",\"ts\",\"otrAck\",\"encryptedAck\",\"encryptText\",\"call\"],\"mappings\":\"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\"}"}