{"code":"function module(t,i,e){let s,o;e.export({ThreadsList:()=>u}),e.link(\"@rocket.chat/string-helpers\",{escapeRegExp(t){s=t}},0),e.link(\"./MessageList\",{MessageList(t){o=t}},1);let n=(t,i)=>t.rid===i&&\"number\"==typeof t.tcount,r=(t,i)=>{var e,s;return null!==(e=null===(s=t.replies)||void 0===s?void 0:s.includes(i))&&void 0!==e&&e},l=(t,i)=>!!(null==i?void 0:i.includes(t._id)),p=(t,i)=>i.test(t.msg);class u extends o{constructor(t){super(),this._options=void 0,this._options=t}get options(){return this._options}updateFilters(t){this._options=t,this.clear()}filter(t){let{rid:i}=this._options;if(!n(t,i))return!1;if(\"following\"===this._options.type){let{uid:i}=this._options;if(!r(t,i))return!1}if(\"unread\"===this._options.type){let{tunread:i}=this._options;if(!l(t,i))return!1}if(this._options.text){let i=RegExp(s(this._options.text),\"i\");if(!p(t,i))return!1}return!0}compare(t,i){var e,s;return(null!==(e=i.tlm)&&void 0!==e?e:i.ts).getTime()-(null!==(s=t.tlm)&&void 0!==s?s:t.ts).getTime()}}}","map":"{\"version\":3,\"sources\":[\"client/lib/lists/ThreadsList.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\\n\\nimport { MessageList } from './MessageList';\\n\\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\\n\\nexport type ThreadsListOptions = {\\n\\trid: IMessage['rid'];\\n\\ttext?: string;\\n} & (\\n\\t| {\\n\\t\\t\\ttype: 'unread';\\n\\t\\t\\ttunread: ISubscription['tunread'];\\n\\t  }\\n\\t| {\\n\\t\\t\\ttype: 'following';\\n\\t\\t\\tuid: IUser['_id'];\\n\\t  }\\n\\t| {\\n\\t\\t\\ttype: undefined;\\n\\t  }\\n);\\n\\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\\n\\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\\n\\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\\n\\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\\n\\tBoolean(tunread?.includes(threadMessage._id));\\n\\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\\n\\nexport class ThreadsList extends MessageList {\\n\\tpublic constructor(private _options: ThreadsListOptions) {\\n\\t\\tsuper();\\n\\t}\\n\\n\\tpublic get options(): ThreadsListOptions {\\n\\t\\treturn this._options;\\n\\t}\\n\\n\\tpublic updateFilters(options: ThreadsListOptions): void {\\n\\t\\tthis._options = options;\\n\\t\\tthis.clear();\\n\\t}\\n\\n\\tprotected filter(message: IMessage): boolean {\\n\\t\\tconst { rid } = this._options;\\n\\n\\t\\tif (!isThreadMessageInRoom(message, rid)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tif (this._options.type === 'following') {\\n\\t\\t\\tconst { uid } = this._options;\\n\\t\\t\\tif (!isThreadFollowedByUser(message, uid)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (this._options.type === 'unread') {\\n\\t\\t\\tconst { tunread } = this._options;\\n\\t\\t\\tif (!isThreadUnread(message, tunread)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (this._options.text) {\\n\\t\\t\\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\\n\\t\\t\\tif (!isThreadTextMatching(message, regex)) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tprotected compare(a: IMessage, b: IMessage): number {\\n\\t\\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\\n\\t}\\n}\\n\",null],\"names\":[\"escapeRegExp\",\"MessageList\",\"module\",\"export\",\"ThreadsList\",\"link\",\"v\",\"isThreadMessageInRoom\",\"message\",\"rid\",\"tcount\",\"isThreadFollowedByUser\",\"threadMessage\",\"uid\",\"_threadMessage$replie\",\"_threadMessage$replie2\",\"replies\",\"includes\",\"isThreadUnread\",\"tunread\",\"Boolean\",\"_id\",\"isThreadTextMatching\",\"regex\",\"test\",\"msg\",\"constructor\",\"_options\",\"options\",\"updateFilters\",\"clear\",\"filter\",\"type\",\"text\",\"RegExp\",\"compare\",\"a\",\"b\",\"_b$tlm\",\"_a$tlm\",\"tlm\",\"ts\",\"getTime\"],\"mappings\":\"2BAC6BA,EAA8BC,EAA3DC,EAAOC,MAAE,CAAA,CAAAC,YAAcA,IAAMA,CAAA,GAA8BF,EAAAG,IAAA,CAAA,8BAAA,CAAAL,aAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gBAAA,CAAAJ,YAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAuB3D,IAAMC,EAAwBA,CAACC,EAAmBC,IACjDD,EAAQC,GAAG,GAAKA,GAAO,AAA6C,UAA7C,OAAQD,EAA0BE,MAAM,CAE1DC,EAAyBA,CAACC,EAA8BC,KAAiB,IAAAC,EAAAC,EAAA,OAAA,AAAkD,OAAlDD,CAAAA,EAAA,AAAmC,OAAnCC,CAAAA,EAAcH,EAAcI,OAAO,AAAPA,GAAOD,AAAA,KAAA,IAAAA,EAAA,KAAA,EAArBA,EAAuBE,QAAQ,CAACJ,EAAG,GAACC,AAAA,KAAA,IAAAA,GAAAA,CAAS,EAEpII,EAAiBA,CAACN,EAA8BO,IACrDC,CAAAA,CAAQD,CAAAA,MAAAA,EAAO,KAAA,EAAPA,EAASF,QAAQ,CAACL,EAAcS,GAAG,CAAA,EAEtCC,EAAuBA,CAACV,EAA8BW,IAA2BA,EAAMC,IAAI,CAACZ,EAAca,GAAG,CAE7G,OAAOrB,UAAoBH,EAChCyB,YAA2BC,CAA4B,CAAA,CACtD,KAAK,GAAG,IAAA,CADkBA,QAAA,CAAA,KAAA,EAAA,IAAA,CAAAA,QAAQ,CAARA,CAE3B,CAEA,IAAWC,SAAO,CACjB,OAAO,IAAI,CAACD,QAAQ,AACrB,CAEOE,cAAcD,CAA2B,CAAA,CAC/C,IAAI,CAACD,QAAQ,CAAGC,EAChB,IAAI,CAACE,KAAK,EACX,CAEUC,OAAOvB,CAAiB,CAAA,CACjC,GAAM,CAAEC,IAAAA,CAAAA,CAAK,CAAG,IAAI,CAACkB,QAAQ,CAE7B,GAAI,CAACpB,EAAsBC,EAASC,GACnC,MAAO,CAAA,EAGR,GAAI,AAAuB,cAAvB,IAAI,CAACkB,QAAQ,CAACK,IAAI,CAAkB,CACvC,GAAM,CAAEnB,IAAAA,CAAAA,CAAK,CAAG,IAAI,CAACc,QAAQ,CAC7B,GAAI,CAAChB,EAAuBH,EAASK,GACpC,MAAO,CAAA,CAET,CAEA,GAAI,AAAuB,WAAvB,IAAI,CAACc,QAAQ,CAACK,IAAI,CAAe,CACpC,GAAM,CAAEb,QAAAA,CAAAA,CAAS,CAAG,IAAI,CAACQ,QAAQ,CACjC,GAAI,CAACT,EAAeV,EAASW,GAC5B,MAAO,CAAA,CAET,CAEA,GAAI,IAAI,CAACQ,QAAQ,CAACM,IAAI,CAAE,CACvB,IAAMV,EAAQ,AAAIW,OAAOlC,EAAa,IAAI,CAAC2B,QAAQ,CAACM,IAAI,EAAG,KAC3D,GAAI,CAACX,EAAqBd,EAASe,GAClC,MAAO,CAAA,CAET,CAEA,MAAO,CAAA,CACR,CAEUY,QAAQC,CAAW,CAAEC,CAAW,CAAA,CAAA,IAAAC,EAAAC,EACzC,MAAO,CAAA,AAAM,OAAND,CAAAA,EAACD,EAAEG,GAAG,AAAHA,GAAGF,AAAA,KAAA,IAAAA,EAAAA,EAAID,EAAEI,EAAE,AAAFA,EAAIC,OAAO,GAAK,CAAA,AAAM,OAANH,CAAAA,EAACH,EAAEI,GAAG,AAAHA,GAAGD,AAAA,KAAA,IAAAA,EAAAA,EAAIH,EAAEK,EAAE,AAAFA,EAAIC,OAAO,EAC3D\"}"}