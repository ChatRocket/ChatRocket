{"code":"Package[\"core-runtime\"].queue(\"google-oauth\",function(){Package.meteor.Meteor,Package.meteor.global,Package.meteor.meteorEnv;var e,o=Package.oauth.OAuth,t=Package[\"service-configuration\"].ServiceConfiguration,n=Package.random.Random,r=Package.modules.meteorInstall;return Package.promise.Promise,{export:function(){return{Google:e}},require:r({node_modules:{meteor:{\"google-oauth\":{\"google_client.js\":function e(e,r,a){let l;a.link(\"./namespace.js\",{default(e){l=e}},0);let i=Object.prototype.hasOwnProperty,c={response_type:1,client_id:1,scope:1,redirect_uri:1,state:1};l.requestCredential=(e,r)=>{r||\"function\"!=typeof e?e||(e={}):(r=e,e={});let a=t.configurations.findOne({service:\"google\"});if(!a){r&&r(new t.ConfigError);return}let l=n.secret(),s={email:1},g=e.requestPermissions||[\"profile\"];g.forEach(e=>s[e]=1),g=Object.keys(s);let u={};a.loginUrlParameters&&Object.assign(u,a.loginUrlParameters),e.loginUrlParameters&&Object.assign(u,e.loginUrlParameters),Object.keys(u).forEach(e=>{if(i.call(c,e))throw Error(\"Google.requestCredential: Invalid loginUrlParameter: \".concat(e))}),null!=e.requestOfflineToken&&(u.access_type=e.requestOfflineToken?\"offline\":\"online\"),null!=e.prompt?u.prompt=e.prompt:e.forceApprovalPrompt&&(u.prompt=\"consent\"),e.loginHint&&(u.login_hint=e.loginHint);let m=o._loginStyle(\"google\",a,e);Object.assign(u,{response_type:\"code\",client_id:a.clientId,scope:g.join(\" \"),redirect_uri:o._redirectUri(\"google\",a),state:o._stateParam(m,l,e.redirectUrl)});let p=\"https://accounts.google.com/o/oauth2/auth?\"+Object.keys(u).map(e=>\"\".concat(encodeURIComponent(e),\"=\").concat(encodeURIComponent(u[e]))).join(\"&\");o.launchLogin({loginService:\"google\",loginStyle:m,loginUrl:p,credentialRequestCompleteCallback:r,credentialToken:l,popupOptions:{height:600}})}},\"namespace.js\":function o(o,t,n){(function(o){(e=n.exports).Google=e}).call(this,n)}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/google-oauth/google_client.js\",\"/node_modules/meteor/google-oauth/namespace.js\"],mainModulePath:\"/node_modules/meteor/google-oauth/namespace.js\"}});","map":"{\"version\":3,\"sources\":[\"packages/google-oauth/google_client.js\",\"packages/google-oauth/namespace.js\",\"<anon>\"],\"sourcesContent\":[\"import Google from './namespace.js';\\n\\nconst hasOwn = Object.prototype.hasOwnProperty;\\n\\nconst ILLEGAL_PARAMETERS = {\\n  'response_type': 1,\\n  'client_id': 1,\\n  'scope': 1,\\n  'redirect_uri': 1,\\n  'state': 1\\n};\\n\\n// Request Google credentials for the user\\n// @param options {optional}\\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\\n//   completion. Takes one argument, credentialToken on success, or Error on\\n//   error.\\nGoogle.requestCredential = (options, credentialRequestCompleteCallback) => {\\n  // support both (options, callback) and (callback).\\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\\n    credentialRequestCompleteCallback = options;\\n    options = {};\\n  } else if (!options) {\\n    options = {};\\n  }\\n\\n  const config = ServiceConfiguration.configurations.findOne({service: 'google'});\\n  if (!config) {\\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\\n      new ServiceConfiguration.ConfigError());\\n    return;\\n  }\\n\\n  const credentialToken = Random.secret();\\n\\n  // we need the email scope to get user id from google.\\n  const requiredScopes = { 'email': 1 };\\n  let scopes = options.requestPermissions || ['profile'];\\n  scopes.forEach(scope => requiredScopes[scope] = 1);\\n  scopes = Object.keys(requiredScopes);\\n\\n  const loginUrlParameters = {};\\n  if (config.loginUrlParameters){\\n    Object.assign(loginUrlParameters, config.loginUrlParameters);\\n  }\\n  if (options.loginUrlParameters){\\n    Object.assign(loginUrlParameters, options.loginUrlParameters);\\n  }\\n\\n  // validate options keys\\n  Object.keys(loginUrlParameters).forEach(key => {\\n    if (hasOwn.call(ILLEGAL_PARAMETERS, key)) {\\n      throw new Error(`Google.requestCredential: Invalid loginUrlParameter: ${key}`);\\n    }\\n  });\\n\\n  // backwards compatible options\\n  if (options.requestOfflineToken != null){\\n    loginUrlParameters.access_type = options.requestOfflineToken ? 'offline' : 'online'\\n  }\\n  if (options.prompt != null) {\\n    loginUrlParameters.prompt = options.prompt;\\n  } else if (options.forceApprovalPrompt) {\\n    loginUrlParameters.prompt = 'consent'\\n  }\\n\\n  if (options.loginHint) {\\n    loginUrlParameters.login_hint = options.loginHint;\\n  }\\n\\n  const loginStyle = OAuth._loginStyle('google', config, options);\\n  // https://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\\n  Object.assign(loginUrlParameters, {\\n    \\\"response_type\\\": \\\"code\\\",\\n    \\\"client_id\\\":  config.clientId,\\n    \\\"scope\\\": scopes.join(' '), // space delimited\\n    \\\"redirect_uri\\\": OAuth._redirectUri('google', config),\\n    \\\"state\\\": OAuth._stateParam(loginStyle, credentialToken, options.redirectUrl)\\n  });\\n  const loginUrl = 'https://accounts.google.com/o/oauth2/auth?' +\\n    Object.keys(loginUrlParameters).map(param => \\n      `${encodeURIComponent(param)}=${encodeURIComponent(loginUrlParameters[param])}`\\n    ).join(\\\"&\\\");\\n\\n  OAuth.launchLogin({\\n    loginService: \\\"google\\\",\\n    loginStyle,\\n    loginUrl,\\n    credentialRequestCompleteCallback,\\n    credentialToken,\\n    popupOptions: { height: 600 }\\n  });\\n};\\n\",\"// The module.exports object of this module becomes the Google namespace\\n// for other modules in this package.\\nGoogle = module.exports;\\n\\n// So that api.export finds the \\\"Google\\\" property.\\nGoogle.Google = Google;\\n\",null],\"names\":[\"Google\",\"module\",\"link\",\"default\",\"v\",\"hasOwn\",\"Object\",\"prototype\",\"hasOwnProperty\",\"ILLEGAL_PARAMETERS\",\"requestCredential\",\"options\",\"credentialRequestCompleteCallback\",\"config\",\"ServiceConfiguration\",\"configurations\",\"findOne\",\"service\",\"ConfigError\",\"credentialToken\",\"Random\",\"secret\",\"requiredScopes\",\"scopes\",\"requestPermissions\",\"forEach\",\"scope\",\"keys\",\"loginUrlParameters\",\"assign\",\"key\",\"call\",\"Error\",\"concat\",\"requestOfflineToken\",\"access_type\",\"prompt\",\"forceApprovalPrompt\",\"loginHint\",\"login_hint\",\"loginStyle\",\"OAuth\",\"_loginStyle\",\"clientId\",\"join\",\"_redirectUri\",\"_stateParam\",\"redirectUrl\",\"loginUrl\",\"map\",\"param\",\"encodeURIComponent\",\"launchLogin\",\"loginService\",\"popupOptions\",\"height\",\"exports\"],\"mappings\":\"uaAAIA,EAAOC,EAAOC,IAAI,CAAC,iBAAiB,CAACC,QAAQC,CAAC,EAAEJ,EAAOI,CAAC,CAAC,EAAE,GAE/D,IAAMC,EAASC,OAAOC,SAAS,CAACC,cAAc,CAExCC,EAAqB,CACzB,cAAiB,EACjB,UAAa,EACb,MAAS,EACT,aAAgB,EAChB,MAAS,CACX,CAOAT,CAAAA,EAAOU,iBAAiB,CAAG,CAACC,EAASC,KAE/B,AAACA,GAAqC,AAAmB,YAAnB,OAAOD,EAGrCA,GACVA,CAAAA,EAAU,CAAC,CAAA,GAHXC,EAAoCD,EACpCA,EAAU,CAAC,GAKb,IAAME,EAASC,EAAqBC,cAAc,CAACC,OAAO,CAAC,CAACC,QAAS,QAAQ,GAC7E,GAAI,CAACJ,EAAQ,CACXD,GAAqCA,EACnC,IAAIE,EAAqBI,WAAW,EACtC,MACF,CAEA,IAAMC,EAAkBC,EAAOC,MAAM,GAG/BC,EAAiB,CAAE,MAAS,CAAE,EAChCC,EAASZ,EAAQa,kBAAkB,EAAI,CAAC,UAAU,CACtDD,EAAOE,OAAO,CAACC,GAASJ,CAAc,CAACI,EAAM,CAAG,GAChDH,EAASjB,OAAOqB,IAAI,CAACL,GAErB,IAAMM,EAAqB,CAAC,CACxBf,CAAAA,EAAOe,kBAAkB,EAC3BtB,OAAOuB,MAAM,CAACD,EAAoBf,EAAOe,kBAAkB,EAEzDjB,EAAQiB,kBAAkB,EAC5BtB,OAAOuB,MAAM,CAACD,EAAoBjB,EAAQiB,kBAAkB,EAI9DtB,OAAOqB,IAAI,CAACC,GAAoBH,OAAO,CAACK,IACtC,GAAIzB,EAAO0B,IAAI,CAACtB,EAAoBqB,GAClC,MAAM,AAAIE,MAAK,wDAAAC,MAAA,CAAyDH,GAE5E,GAGmC,MAA/BnB,EAAQuB,mBAAmB,EAC7BN,CAAAA,EAAmBO,WAAW,CAAGxB,EAAQuB,mBAAmB,CAAG,UAAY,QAAA,EAEzEvB,AAAkB,MAAlBA,EAAQyB,MAAM,CAChBR,EAAmBQ,MAAM,CAAGzB,EAAQyB,MAAM,CACjCzB,EAAQ0B,mBAAmB,EACpCT,CAAAA,EAAmBQ,MAAM,CAAG,SAAA,EAG1BzB,EAAQ2B,SAAS,EACnBV,CAAAA,EAAmBW,UAAU,CAAG5B,EAAQ2B,SAAS,AAATA,EAG1C,IAAME,EAAaC,EAAMC,WAAW,CAAC,SAAU7B,EAAQF,GAEvDL,OAAOuB,MAAM,CAACD,EAAoB,CAChC,cAAiB,OACjB,UAAcf,EAAO8B,QAAQ,CAC7B,MAASpB,EAAOqB,IAAI,CAAC,KACrB,aAAgBH,EAAMI,YAAY,CAAC,SAAUhC,GAC7C,MAAS4B,EAAMK,WAAW,CAACN,EAAYrB,EAAiBR,EAAQoC,WAAW,CAC7E,GACA,IAAMC,EAAW,6CACf1C,OAAOqB,IAAI,CAACC,GAAoBqB,GAAG,CAACC,GAAK,GAAAjB,MAAA,CACpCkB,mBAAmBD,GAAM,KAAAjB,MAAA,CAAIkB,mBAAmBvB,CAAkB,CAACsB,EAAM,IAC5EN,IAAI,CAAC,KAETH,EAAMW,WAAW,CAAC,CAChBC,aAAc,SACdb,WAAAA,EACAQ,SAAAA,EACApC,kCAAAA,EACAO,gBAAAA,EACAmC,aAAc,CAAEC,OAAQ,GAAI,CAC9B,EACF,iDCvFAvD,AAHAA,CAAAA,EAASC,EAAOuD,OAAO,AAAPA,EAGTxD,MAAM,CAAGA,CAAO,CAAA,EAAA+B,IAAA,CAAA,IAAA,CAAA9B\"}"}