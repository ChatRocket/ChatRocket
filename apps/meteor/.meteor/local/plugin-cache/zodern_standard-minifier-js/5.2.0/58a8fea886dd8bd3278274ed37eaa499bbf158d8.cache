{"code":"function module(e,t,n){let r,l,u,a,i;function o(e,t){let n=[\"rooms\",e],o=l(n,async()=>{var t;return null!==(t=a.findOne({_id:e},{reactive:!1}))&&void 0!==t?t:null},r({staleTime:1/0},t)),{refetch:c}=o;return u(()=>{let t=a.find({_id:e}).observe({added:()=>i(()=>c({exact:!1})),changed:()=>i(()=>c({exact:!1})),removed:()=>i(()=>c({exact:!1}))});return()=>{t.stop()}},[c,e]),o}n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){r=e}},0),n.export({useRoomQuery:()=>o}),n.link(\"@tanstack/react-query\",{useQuery(e){l=e}},0),n.link(\"react\",{useEffect(e){u=e}},1),n.link(\"../../../../../app/models/client\",{ChatRoom(e){a=e}},2),n.link(\"../../../../lib/utils/queueMicrotask\",{queueMicrotask(e){i=e}},3)}","map":"{\"version\":3,\"sources\":[\"client/views/room/providers/hooks/useRoomQuery.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom } from '@rocket.chat/core-typings';\\nimport type { UseQueryOptions, UseQueryResult } from '@tanstack/react-query';\\nimport { useQuery } from '@tanstack/react-query';\\nimport { useEffect } from 'react';\\n\\nimport { ChatRoom } from '../../../../../app/models/client';\\nimport { queueMicrotask } from '../../../../lib/utils/queueMicrotask';\\n\\nexport function useRoomQuery(\\n\\trid: IRoom['_id'],\\n\\toptions?: UseQueryOptions<IRoom | null, Error, IRoom | null, readonly ['rooms', IRoom['_id']]>,\\n): UseQueryResult<IRoom | null, Error> {\\n\\tconst queryKey = ['rooms', rid] as const;\\n\\n\\tconst queryResult = useQuery(queryKey, async (): Promise<IRoom | null> => ChatRoom.findOne({ _id: rid }, { reactive: false }) ?? null, {\\n\\t\\tstaleTime: Infinity,\\n\\t\\t...options,\\n\\t});\\n\\n\\tconst { refetch } = queryResult;\\n\\n\\tuseEffect(() => {\\n\\t\\tconst liveQueryHandle = ChatRoom.find({ _id: rid }).observe({\\n\\t\\t\\tadded: () => queueMicrotask(() => refetch({ exact: false })),\\n\\t\\t\\tchanged: () => queueMicrotask(() => refetch({ exact: false })),\\n\\t\\t\\tremoved: () => queueMicrotask(() => refetch({ exact: false })),\\n\\t\\t});\\n\\n\\t\\treturn () => {\\n\\t\\t\\tliveQueryHandle.stop();\\n\\t\\t};\\n\\t}, [refetch, rid]);\\n\\n\\treturn queryResult;\\n}\\n\",null],\"names\":[\"_objectSpread\",\"useQuery\",\"useEffect\",\"ChatRoom\",\"queueMicrotask\",\"useRoomQuery\",\"rid\",\"options\",\"queryKey\",\"queryResult\",\"_ChatRoom$findOne\",\"findOne\",\"_id\",\"reactive\",\"staleTime\",\"Infinity\",\"refetch\",\"liveQueryHandle\",\"find\",\"observe\",\"added\",\"exact\",\"changed\",\"removed\",\"stop\",\"module\",\"link\",\"default\",\"v\",\"export\"],\"mappings\":\"2BAEAA,EAAiDC,EAAAC,EAAAC,EAAAC,EAM3C,SAAUC,EACfC,CAAiB,CACjBC,CAA8F,EAE9F,IAAMC,EAAW,CAAC,QAASF,EAAa,CAElCG,EAAcR,EAASO,EAAU,UAAA,IAAAE,EAAA,OAAA,AAAsF,OAAtFA,CAAAA,EAAmCP,EAASQ,OAAO,CAAC,CAAEC,IAAKN,CAAG,EAAI,CAAEO,SAAU,CAAA,CAAK,EAAE,GAACH,AAAA,KAAA,IAAAA,EAAAA,EAAI,IAAI,EAAAV,EAAA,CACpIc,UAAWC,GAAQ,EAChBR,IAGE,CAAES,QAAAA,CAAAA,CAAS,CAAGP,EAcpB,OAZAP,EAAU,KACT,IAAMe,EAAkBd,EAASe,IAAI,CAAC,CAAEN,IAAKN,CAAG,GAAIa,OAAO,CAAC,CAC3DC,MAAOA,IAAMhB,EAAe,IAAMY,EAAQ,CAAEK,MAAO,CAAA,CAAK,IACxDC,QAASA,IAAMlB,EAAe,IAAMY,EAAQ,CAAEK,MAAO,CAAA,CAAK,IAC1DE,QAASA,IAAMnB,EAAe,IAAMY,EAAQ,CAAEK,MAAO,CAAA,CAAK,MAG3D,MAAO,KACNJ,EAAgBO,IAAI,EACrB,CACD,EAAG,CAACR,EAASV,EAAI,EAEVG,CACR,CAhCiBgB,EAAQC,IAAA,CAAA,uCAAwB,CAAAC,QAAAC,CAAA,EAAA5B,EAAA4B,CAAA,CAAA,EAAA,GAAjDH,EAAOI,MAAE,CAAA,CAAAxB,aAAgBA,IAAAA,CAAA,GAAwBoB,EAAAC,IAAA,CAAA,wBAAA,CAAAzB,SAAA2B,CAAA,EAAA3B,EAAA2B,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,QAAA,CAAAxB,UAAA0B,CAAA,EAAA1B,EAAA0B,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,mCAAA,CAAAvB,SAAAyB,CAAA,EAAAzB,EAAAyB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,uCAAA,CAAAtB,eAAAwB,CAAA,EAAAxB,EAAAwB,CAAA,CAAA,EAAA\"}"}