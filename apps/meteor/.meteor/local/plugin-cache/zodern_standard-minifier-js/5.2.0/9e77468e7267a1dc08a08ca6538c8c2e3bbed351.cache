{"code":"Package[\"core-runtime\"].queue(\"ejson\",function(){var n,e=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv;var r=Package.base64.Base64,t=Package.modules.meteorInstall;Package.modules.meteorBabelHelpers,Package.promise.Promise,Package[\"ecmascript-runtime-client\"].Symbol;var u=Package[\"ecmascript-runtime-client\"].Map;return Package[\"ecmascript-runtime-client\"].Set,{export:function(){return{EJSON:n}},require:t({node_modules:{meteor:{ejson:{\"ejson.js\":function n(n,t,a){a.export({EJSON:function(){return g}}),a.link(\"./utils\",{isFunction:function(n){i=n},isObject:function(n){o=n},keysOf:function(n){c=n},lengthOf:function(n){f=n},hasOwn:function(n){l=n},convertMapToObject:function(n){s=n},isArguments:function(n){m=n},isInfOrNaN:function(n){y=n},handleError:function(n){O=n}},0);var i,o,c,f,l,s,m,y,O,g={},N=new u;g.addType=function(n,e){if(N.has(n))throw Error(\"Type \"+n+\" already present\");N.set(n,e)};var h=[{matchJSONValue:function(n){return l(n,\"$date\")&&1===f(n)},matchObject:function(n){return n instanceof Date},toJSONValue:function(n){return{$date:n.getTime()}},fromJSONValue:function(n){return new Date(n.$date)}},{matchJSONValue:function(n){return l(n,\"$regexp\")&&l(n,\"$flags\")&&2===f(n)},matchObject:function(n){return n instanceof RegExp},toJSONValue:function(n){return{$regexp:n.source,$flags:n.flags}},fromJSONValue:function(n){return new RegExp(n.$regexp,n.$flags.slice(0,50).replace(/[^gimuy]/g,\"\").replace(/(.)(?=.*\\1)/g,\"\"))}},{matchJSONValue:function(n){return l(n,\"$InfNaN\")&&1===f(n)},matchObject:y,toJSONValue:function(n){var e;return{$InfNaN:e=Number.isNaN(n)?0:n===1/0?1:-1}},fromJSONValue:function(n){return n.$InfNaN/0}},{matchJSONValue:function(n){return l(n,\"$binary\")&&1===f(n)},matchObject:function(n){return\"undefined\"!=typeof Uint8Array&&n instanceof Uint8Array||n&&l(n,\"$Uint8ArrayPolyfill\")},toJSONValue:function(n){return{$binary:r.encode(n)}},fromJSONValue:function(n){return r.decode(n.$binary)}},{matchJSONValue:function(n){return l(n,\"$escape\")&&1===f(n)},matchObject:function(n){var e=!1;if(n){var r=f(n);(1===r||2===r)&&(e=h.some(function(e){return e.matchJSONValue(n)}))}return e},toJSONValue:function(n){var e={};return c(n).forEach(function(r){e[r]=g.toJSONValue(n[r])}),{$escape:e}},fromJSONValue:function(n){var e={};return c(n.$escape).forEach(function(r){e[r]=g.fromJSONValue(n.$escape[r])}),e}},{matchJSONValue:function(n){return l(n,\"$type\")&&l(n,\"$value\")&&2===f(n)},matchObject:function(n){return g._isCustomType(n)},toJSONValue:function(n){var r=e._noYieldsAllowed(function(){return n.toJSONValue()});return{$type:n.typeName(),$value:r}},fromJSONValue:function(n){var r=n.$type;if(!N.has(r))throw Error(\"Custom EJSON type \"+r+\" is not defined\");var t=N.get(r);return e._noYieldsAllowed(function(){return t(n.$value)})}}];g._isCustomType=function(n){return n&&i(n.toJSONValue)&&i(n.typeName)&&N.has(n.typeName())},g._getTypes=function(){var n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return n?N:s(N)},g._getConverters=function(){return h};var p=function(n){for(var e=0;e<h.length;e++){var r=h[e];if(r.matchObject(n))return r.toJSONValue(n)}},v=function(n){if(null===n)return null;var e=p(n);return void 0!==e?e:(o(n)&&c(n).forEach(function(e){var r=n[e];if(o(r)||void 0===r||y(r)){var t=p(r);if(t){n[e]=t;return}v(r)}}),n)};g._adjustTypesToJSONValue=v,g.toJSONValue=function(n){var e=p(n);if(void 0!==e)return e;var r=n;return o(n)&&v(r=g.clone(n)),r};var d=function(n){if(o(n)&&null!==n){var e=c(n);if(e.length<=2&&e.every(function(n){return\"string\"==typeof n&&\"$\"===n.substr(0,1)}))for(var r=0;r<h.length;r++){var t=h[r];if(t.matchJSONValue(n))return t.fromJSONValue(n)}}return n},S=function(n){if(null===n)return null;var e=d(n);return e!==n?e:(o(n)&&c(n).forEach(function(e){var r=n[e];if(o(r)){var t=d(r);if(r!==t){n[e]=t;return}S(r)}}),n)};g._adjustTypesFromJSONValue=S,g.fromJSONValue=function(n){var e=d(n);return e===n&&o(n)&&S(e=g.clone(n)),e},g.stringify=O(function(n,e){var r,t,u=g.toJSONValue(n);return e&&(e.canonical||e.indent)?(a.link(\"./stringify\",{default:function(n){t=n}},1),r=t(u,e)):r=JSON.stringify(u),r}),g.parse=function(n){if(\"string\"!=typeof n)throw Error(\"EJSON.parse argument should be a string\");return g.fromJSONValue(JSON.parse(n))},g.isBinary=function(n){return!!(\"undefined\"!=typeof Uint8Array&&n instanceof Uint8Array||n&&n.$Uint8ArrayPolyfill)},g.equals=function(n,e,r){var t,u,a=!!(r&&r.keyOrderSensitive);if(n===e||Number.isNaN(n)&&Number.isNaN(e))return!0;if(!n||!e||!(o(n)&&o(e)))return!1;if(n instanceof Date&&e instanceof Date)return n.valueOf()===e.valueOf();if(g.isBinary(n)&&g.isBinary(e)){if(n.length!==e.length)return!1;for(t=0;t<n.length;t++)if(n[t]!==e[t])return!1;return!0}if(i(n.equals))return n.equals(e,r);if(i(e.equals))return e.equals(n,r);var f=Array.isArray(n),s=Array.isArray(e);if(f!==s)return!1;if(f&&s){if(n.length!==e.length)return!1;for(t=0;t<n.length;t++)if(!g.equals(n[t],e[t],r))return!1;return!0}switch(g._isCustomType(n)+g._isCustomType(e)){case 1:return!1;case 2:return g.equals(g.toJSONValue(n),g.toJSONValue(e))}var m=c(n),y=c(e);return a?(t=0,u=m.every(function(u){return!(t>=y.length)&&u===y[t]&&!!g.equals(n[u],e[y[t]],r)&&(t++,!0)})):(t=0,u=m.every(function(u){return!!(l(e,u)&&g.equals(n[u],e[u],r))&&(t++,!0)})),u&&t===y.length},g.clone=function(n){var e;if(!o(n))return n;if(null===n)return null;if(n instanceof Date)return new Date(n.getTime());if(n instanceof RegExp)return n;if(g.isBinary(n)){e=g.newBinary(n.length);for(var r=0;r<n.length;r++)e[r]=n[r];return e}return Array.isArray(n)?n.map(g.clone):m(n)?Array.from(n).map(g.clone):i(n.clone)?n.clone():g._isCustomType(n)?g.fromJSONValue(g.clone(g.toJSONValue(n)),!0):(e={},c(n).forEach(function(r){e[r]=g.clone(n[r])}),e)},g.newBinary=r.newBinary},\"stringify.js\":function n(n,e,r){function t(n){return JSON.stringify(n)}r.link(\"@babel/runtime/helpers/typeof\",{default:function(n){u=n}},0);var u,a=function(n,e,r,i,o){var c=e[n];switch(u(c)){case\"string\":return t(c);case\"number\":return isFinite(c)?String(c):\"null\";case\"boolean\":return String(c);case\"object\":if(!c)return\"null\";var f,l=i+r,s=[];if(Array.isArray(c)||({}).hasOwnProperty.call(c,\"callee\")){for(var m=c.length,y=0;y<m;y+=1)s[y]=a(y,c,r,l,o)||\"null\";return f=0===s.length?\"[]\":l?\"[\\n\"+l+s.join(\",\\n\"+l)+\"\\n\"+i+\"]\":\"[\"+s.join(\",\")+\"]\"}var O=Object.keys(c);return o&&(O=O.sort()),O.forEach(function(n){(f=a(n,c,r,l,o))&&s.push(t(n)+(l?\": \":\":\")+f)}),f=0===s.length?\"{}\":l?\"{\\n\"+l+s.join(\",\\n\"+l)+\"\\n\"+i+\"}\":\"{\"+s.join(\",\")+\"}\"}};r.exportDefault(function(n,e){var r=Object.assign({indent:\"\",canonical:!1},e);if(!0===r.indent)r.indent=\"  \";else if(\"number\"==typeof r.indent){for(var t=\"\",u=0;u<r.indent;u++)t+=\" \";r.indent=t}return a(\"\",{\"\":n},r.indent,\"\",r.canonical)})},\"utils.js\":function n(n,e,r){r.link(\"@babel/runtime/helpers/slicedToArray\",{default:function(n){t=n}},0),r.link(\"@babel/runtime/helpers/typeof\",{default:function(n){u=n}},1),r.export({isFunction:function(){return a},isObject:function(){return i},keysOf:function(){return o},lengthOf:function(){return c},hasOwn:function(){return f},convertMapToObject:function(){return l},isArguments:function(){return s},isInfOrNaN:function(){return m},checkError:function(){return y},handleError:function(){return O}});var t,u,a=function(n){return\"function\"==typeof n},i=function(n){return\"object\"===u(n)},o=function(n){return Object.keys(n)},c=function(n){return Object.keys(n).length},f=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},l=function(n){return Array.from(n).reduce(function(n,e){var r=t(e,2),u=r[0],a=r[1];return n[u]=a,n},{})},s=function(n){return null!=n&&f(n,\"callee\")},m=function(n){return Number.isNaN(n)||n===1/0||n===-1/0},y={maxStack:function(n){return RegExp(\"Maximum call stack size exceeded\",\"g\").test(n)}},O=function(n){return function(){try{return n.apply(this,arguments)}catch(n){if(y.maxStack(n.message))throw Error(\"Converting circular structure to JSON\");throw n}}}}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/ejson/ejson.js\"],mainModulePath:\"/node_modules/meteor/ejson/ejson.js\"}});","map":"{\"version\":3,\"sources\":[\"packages/ejson/ejson.js\",\"packages/ejson/stringify.js\",\"packages/ejson/utils.js\",\"<anon>\"],\"sourcesContent\":[\"import {\\n  isFunction,\\n  isObject,\\n  keysOf,\\n  lengthOf,\\n  hasOwn,\\n  convertMapToObject,\\n  isArguments,\\n  isInfOrNaN,\\n  handleError,\\n} from './utils';\\n\\n/**\\n * @namespace\\n * @summary Namespace for EJSON functions\\n */\\nconst EJSON = {};\\n\\n// Custom type interface definition\\n/**\\n * @class CustomType\\n * @instanceName customType\\n * @memberOf EJSON\\n * @summary The interface that a class must satisfy to be able to become an\\n * EJSON custom type via EJSON.addType.\\n */\\n\\n/**\\n * @function typeName\\n * @memberOf EJSON.CustomType\\n * @summary Return the tag used to identify this type.  This must match the\\n *          tag used to register this type with\\n *          [`EJSON.addType`](#ejson_add_type).\\n * @locus Anywhere\\n * @instance\\n */\\n\\n/**\\n * @function toJSONValue\\n * @memberOf EJSON.CustomType\\n * @summary Serialize this instance into a JSON-compatible value.\\n * @locus Anywhere\\n * @instance\\n */\\n\\n/**\\n * @function clone\\n * @memberOf EJSON.CustomType\\n * @summary Return a value `r` such that `this.equals(r)` is true, and\\n *          modifications to `r` do not affect `this` and vice versa.\\n * @locus Anywhere\\n * @instance\\n */\\n\\n/**\\n * @function equals\\n * @memberOf EJSON.CustomType\\n * @summary Return `true` if `other` has a value equal to `this`; `false`\\n *          otherwise.\\n * @locus Anywhere\\n * @param {Object} other Another object to compare this to.\\n * @instance\\n */\\n\\nconst customTypes = new Map();\\n\\n// Add a custom type, using a method of your choice to get to and\\n// from a basic JSON-able representation.  The factory argument\\n// is a function of JSON-able --> your object\\n// The type you add must have:\\n// - A toJSONValue() method, so that Meteor can serialize it\\n// - a typeName() method, to show how to look it up in our type table.\\n// It is okay if these methods are monkey-patched on.\\n// EJSON.clone will use toJSONValue and the given factory to produce\\n// a clone, but you may specify a method clone() that will be\\n// used instead.\\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\\n// but you may provide a method equals() instead.\\n/**\\n * @summary Add a custom datatype to EJSON.\\n * @locus Anywhere\\n * @param {String} name A tag for your custom type; must be unique among\\n *                      custom data types defined in your project, and must\\n *                      match the result of your type's `typeName` method.\\n * @param {Function} factory A function that deserializes a JSON-compatible\\n *                           value into an instance of your type.  This should\\n *                           match the serialization performed by your\\n *                           type's `toJSONValue` method.\\n */\\nEJSON.addType = (name, factory) => {\\n  if (customTypes.has(name)) {\\n    throw new Error(`Type ${name} already present`);\\n  }\\n  customTypes.set(name, factory);\\n};\\n\\nconst builtinConverters = [\\n  { // Date\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$date') && lengthOf(obj) === 1;\\n    },\\n    matchObject(obj) {\\n      return obj instanceof Date;\\n    },\\n    toJSONValue(obj) {\\n      return {$date: obj.getTime()};\\n    },\\n    fromJSONValue(obj) {\\n      return new Date(obj.$date);\\n    },\\n  },\\n  { // RegExp\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$regexp')\\n        && hasOwn(obj, '$flags')\\n        && lengthOf(obj) === 2;\\n    },\\n    matchObject(obj) {\\n      return obj instanceof RegExp;\\n    },\\n    toJSONValue(regexp) {\\n      return {\\n        $regexp: regexp.source,\\n        $flags: regexp.flags\\n      };\\n    },\\n    fromJSONValue(obj) {\\n      // Replaces duplicate / invalid flags.\\n      return new RegExp(\\n        obj.$regexp,\\n        obj.$flags\\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\\n          .slice(0, 50)\\n          .replace(/[^gimuy]/g,'')\\n          .replace(/(.)(?=.*\\\\1)/g, '')\\n      );\\n    },\\n  },\\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\\n    // which we match.)\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$InfNaN') && lengthOf(obj) === 1;\\n    },\\n    matchObject: isInfOrNaN,\\n    toJSONValue(obj) {\\n      let sign;\\n      if (Number.isNaN(obj)) {\\n        sign = 0;\\n      } else if (obj === Infinity) {\\n        sign = 1;\\n      } else {\\n        sign = -1;\\n      }\\n      return {$InfNaN: sign};\\n    },\\n    fromJSONValue(obj) {\\n      return obj.$InfNaN / 0;\\n    },\\n  },\\n  { // Binary\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$binary') && lengthOf(obj) === 1;\\n    },\\n    matchObject(obj) {\\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\\n    },\\n    toJSONValue(obj) {\\n      return {$binary: Base64.encode(obj)};\\n    },\\n    fromJSONValue(obj) {\\n      return Base64.decode(obj.$binary);\\n    },\\n  },\\n  { // Escaping one level\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$escape') && lengthOf(obj) === 1;\\n    },\\n    matchObject(obj) {\\n      let match = false;\\n      if (obj) {\\n        const keyCount = lengthOf(obj);\\n        if (keyCount === 1 || keyCount === 2) {\\n          match =\\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\\n        }\\n      }\\n      return match;\\n    },\\n    toJSONValue(obj) {\\n      const newObj = {};\\n      keysOf(obj).forEach(key => {\\n        newObj[key] = EJSON.toJSONValue(obj[key]);\\n      });\\n      return {$escape: newObj};\\n    },\\n    fromJSONValue(obj) {\\n      const newObj = {};\\n      keysOf(obj.$escape).forEach(key => {\\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\\n      });\\n      return newObj;\\n    },\\n  },\\n  { // Custom\\n    matchJSONValue(obj) {\\n      return hasOwn(obj, '$type')\\n        && hasOwn(obj, '$value') && lengthOf(obj) === 2;\\n    },\\n    matchObject(obj) {\\n      return EJSON._isCustomType(obj);\\n    },\\n    toJSONValue(obj) {\\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\\n      return {$type: obj.typeName(), $value: jsonValue};\\n    },\\n    fromJSONValue(obj) {\\n      const typeName = obj.$type;\\n      if (!customTypes.has(typeName)) {\\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\\n      }\\n      const converter = customTypes.get(typeName);\\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\\n    },\\n  },\\n];\\n\\nEJSON._isCustomType = (obj) => (\\n  obj &&\\n  isFunction(obj.toJSONValue) &&\\n  isFunction(obj.typeName) &&\\n  customTypes.has(obj.typeName())\\n);\\n\\nEJSON._getTypes = (isOriginal = false) => (isOriginal ? customTypes : convertMapToObject(customTypes));\\n\\nEJSON._getConverters = () => builtinConverters;\\n\\n// Either return the JSON-compatible version of the argument, or undefined (if\\n// the item isn't itself replaceable, but maybe some fields in it are)\\nconst toJSONValueHelper = item => {\\n  for (let i = 0; i < builtinConverters.length; i++) {\\n    const converter = builtinConverters[i];\\n    if (converter.matchObject(item)) {\\n      return converter.toJSONValue(item);\\n    }\\n  }\\n  return undefined;\\n};\\n\\n// for both arrays and objects, in-place modification.\\nconst adjustTypesToJSONValue = obj => {\\n  // Is it an atom that we need to adjust?\\n  if (obj === null) {\\n    return null;\\n  }\\n\\n  const maybeChanged = toJSONValueHelper(obj);\\n  if (maybeChanged !== undefined) {\\n    return maybeChanged;\\n  }\\n\\n  // Other atoms are unchanged.\\n  if (!isObject(obj)) {\\n    return obj;\\n  }\\n\\n  // Iterate over array or object structure.\\n  keysOf(obj).forEach(key => {\\n    const value = obj[key];\\n    if (!isObject(value) && value !== undefined &&\\n        !isInfOrNaN(value)) {\\n      return; // continue\\n    }\\n\\n    const changed = toJSONValueHelper(value);\\n    if (changed) {\\n      obj[key] = changed;\\n      return; // on to the next key\\n    }\\n    // if we get here, value is an object but not adjustable\\n    // at this level.  recurse.\\n    adjustTypesToJSONValue(value);\\n  });\\n  return obj;\\n};\\n\\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\\n\\n/**\\n * @summary Serialize an EJSON-compatible value into its plain JSON\\n *          representation.\\n * @locus Anywhere\\n * @param {EJSON} val A value to serialize to plain JSON.\\n */\\nEJSON.toJSONValue = item => {\\n  const changed = toJSONValueHelper(item);\\n  if (changed !== undefined) {\\n    return changed;\\n  }\\n\\n  let newItem = item;\\n  if (isObject(item)) {\\n    newItem = EJSON.clone(item);\\n    adjustTypesToJSONValue(newItem);\\n  }\\n  return newItem;\\n};\\n\\n// Either return the argument changed to have the non-json\\n// rep of itself (the Object version) or the argument itself.\\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\\n// EJSON.fromJSONValue\\nconst fromJSONValueHelper = value => {\\n  if (isObject(value) && value !== null) {\\n    const keys = keysOf(value);\\n    if (keys.length <= 2\\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\\n      for (let i = 0; i < builtinConverters.length; i++) {\\n        const converter = builtinConverters[i];\\n        if (converter.matchJSONValue(value)) {\\n          return converter.fromJSONValue(value);\\n        }\\n      }\\n    }\\n  }\\n  return value;\\n};\\n\\n// for both arrays and objects. Tries its best to just\\n// use the object you hand it, but may return something\\n// different if the object you hand it itself needs changing.\\nconst adjustTypesFromJSONValue = obj => {\\n  if (obj === null) {\\n    return null;\\n  }\\n\\n  const maybeChanged = fromJSONValueHelper(obj);\\n  if (maybeChanged !== obj) {\\n    return maybeChanged;\\n  }\\n\\n  // Other atoms are unchanged.\\n  if (!isObject(obj)) {\\n    return obj;\\n  }\\n\\n  keysOf(obj).forEach(key => {\\n    const value = obj[key];\\n    if (isObject(value)) {\\n      const changed = fromJSONValueHelper(value);\\n      if (value !== changed) {\\n        obj[key] = changed;\\n        return;\\n      }\\n      // if we get here, value is an object but not adjustable\\n      // at this level.  recurse.\\n      adjustTypesFromJSONValue(value);\\n    }\\n  });\\n  return obj;\\n};\\n\\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\\n\\n/**\\n * @summary Deserialize an EJSON value from its plain JSON representation.\\n * @locus Anywhere\\n * @param {JSONCompatible} val A value to deserialize into EJSON.\\n */\\nEJSON.fromJSONValue = item => {\\n  let changed = fromJSONValueHelper(item);\\n  if (changed === item && isObject(item)) {\\n    changed = EJSON.clone(item);\\n    adjustTypesFromJSONValue(changed);\\n  }\\n  return changed;\\n};\\n\\n/**\\n * @summary Serialize a value to a string. For EJSON values, the serialization\\n *          fully represents the value. For non-EJSON values, serializes the\\n *          same way as `JSON.stringify`.\\n * @locus Anywhere\\n * @param {EJSON} val A value to stringify.\\n * @param {Object} [options]\\n * @param {Boolean | Integer | String} [options.indent] Indents objects and\\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\\n * integer, indents by that number of spaces; and when a string, uses the\\n * string as the indentation pattern.\\n * @param {Boolean} [options.canonical] When `true`, stringifies keys in an\\n *                                    object in sorted order.\\n */\\nEJSON.stringify = handleError((item, options) => {\\n  let serialized;\\n  const json = EJSON.toJSONValue(item);\\n  if (options && (options.canonical || options.indent)) {\\n    import canonicalStringify from './stringify';\\n    serialized = canonicalStringify(json, options);\\n  } else {\\n    serialized = JSON.stringify(json);\\n  }\\n  return serialized;\\n});\\n\\n/**\\n * @summary Parse a string into an EJSON value. Throws an error if the string\\n *          is not valid EJSON.\\n * @locus Anywhere\\n * @param {String} str A string to parse into an EJSON value.\\n */\\nEJSON.parse = item => {\\n  if (typeof item !== 'string') {\\n    throw new Error('EJSON.parse argument should be a string');\\n  }\\n  return EJSON.fromJSONValue(JSON.parse(item));\\n};\\n\\n/**\\n * @summary Returns true if `x` is a buffer of binary data, as returned from\\n *          [`EJSON.newBinary`](#ejson_new_binary).\\n * @param {Object} x The variable to check.\\n * @locus Anywhere\\n */\\nEJSON.isBinary = obj => {\\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\\n    (obj && obj.$Uint8ArrayPolyfill));\\n};\\n\\n/**\\n * @summary Return true if `a` and `b` are equal to each other.  Return false\\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\\n *          performs a deep comparison.\\n * @locus Anywhere\\n * @param {EJSON} a\\n * @param {EJSON} b\\n * @param {Object} [options]\\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\\n * default is `false`.\\n */\\nEJSON.equals = (a, b, options) => {\\n  let i;\\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\\n  if (a === b) {\\n    return true;\\n  }\\n\\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\\n  if (Number.isNaN(a) && Number.isNaN(b)) {\\n    return true;\\n  }\\n\\n  // if either one is falsy, they'd have to be === to be equal\\n  if (!a || !b) {\\n    return false;\\n  }\\n\\n  if (!(isObject(a) && isObject(b))) {\\n    return false;\\n  }\\n\\n  if (a instanceof Date && b instanceof Date) {\\n    return a.valueOf() === b.valueOf();\\n  }\\n\\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\\n    if (a.length !== b.length) {\\n      return false;\\n    }\\n    for (i = 0; i < a.length; i++) {\\n      if (a[i] !== b[i]) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  if (isFunction(a.equals)) {\\n    return a.equals(b, options);\\n  }\\n\\n  if (isFunction(b.equals)) {\\n    return b.equals(a, options);\\n  }\\n\\n  // Array.isArray works across iframes while instanceof won't\\n  const aIsArray = Array.isArray(a);\\n  const bIsArray = Array.isArray(b);\\n\\n  // if not both or none are array they are not equal\\n  if (aIsArray !== bIsArray) {\\n    return false;\\n  }\\n\\n  if (aIsArray && bIsArray) {\\n    if (a.length !== b.length) {\\n      return false;\\n    }\\n    for (i = 0; i < a.length; i++) {\\n      if (!EJSON.equals(a[i], b[i], options)) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  // fallback for custom types that don't implement their own equals\\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\\n    case 1: return false;\\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\\n    default: // Do nothing\\n  }\\n\\n  // fall back to structural equality of objects\\n  let ret;\\n  const aKeys = keysOf(a);\\n  const bKeys = keysOf(b);\\n  if (keyOrderSensitive) {\\n    i = 0;\\n    ret = aKeys.every(key => {\\n      if (i >= bKeys.length) {\\n        return false;\\n      }\\n      if (key !== bKeys[i]) {\\n        return false;\\n      }\\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\\n        return false;\\n      }\\n      i++;\\n      return true;\\n    });\\n  } else {\\n    i = 0;\\n    ret = aKeys.every(key => {\\n      if (!hasOwn(b, key)) {\\n        return false;\\n      }\\n      if (!EJSON.equals(a[key], b[key], options)) {\\n        return false;\\n      }\\n      i++;\\n      return true;\\n    });\\n  }\\n  return ret && i === bKeys.length;\\n};\\n\\n/**\\n * @summary Return a deep copy of `val`.\\n * @locus Anywhere\\n * @param {EJSON} val A value to copy.\\n */\\nEJSON.clone = v => {\\n  let ret;\\n  if (!isObject(v)) {\\n    return v;\\n  }\\n\\n  if (v === null) {\\n    return null; // null has typeof \\\"object\\\"\\n  }\\n\\n  if (v instanceof Date) {\\n    return new Date(v.getTime());\\n  }\\n\\n  // RegExps are not really EJSON elements (eg we don't define a serialization\\n  // for them), but they're immutable anyway, so we can support them in clone.\\n  if (v instanceof RegExp) {\\n    return v;\\n  }\\n\\n  if (EJSON.isBinary(v)) {\\n    ret = EJSON.newBinary(v.length);\\n    for (let i = 0; i < v.length; i++) {\\n      ret[i] = v[i];\\n    }\\n    return ret;\\n  }\\n\\n  if (Array.isArray(v)) {\\n    return v.map(EJSON.clone);\\n  }\\n\\n  if (isArguments(v)) {\\n    return Array.from(v).map(EJSON.clone);\\n  }\\n\\n  // handle general user-defined typed Objects if they have a clone method\\n  if (isFunction(v.clone)) {\\n    return v.clone();\\n  }\\n\\n  // handle other custom types\\n  if (EJSON._isCustomType(v)) {\\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\\n  }\\n\\n  // handle other objects\\n  ret = {};\\n  keysOf(v).forEach((key) => {\\n    ret[key] = EJSON.clone(v[key]);\\n  });\\n  return ret;\\n};\\n\\n/**\\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\\n * @locus Anywhere\\n * @param {Number} size The number of bytes of binary data to allocate.\\n */\\n// EJSON.newBinary is the public documented API for this functionality,\\n// but the implementation is in the 'base64' package to avoid\\n// introducing a circular dependency. (If the implementation were here,\\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\\n// also have to use 'base64'.)\\nEJSON.newBinary = Base64.newBinary;\\n\\nexport { EJSON };\\n\",\"// Based on json2.js from https://github.com/douglascrockford/JSON-js\\n//\\n//    json2.js\\n//    2012-10-08\\n//\\n//    Public Domain.\\n//\\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\\n\\nfunction quote(string) {\\n  return JSON.stringify(string);\\n}\\n\\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\\n  const value = holder[key];\\n\\n  // What happens next depends on the value's type.\\n  switch (typeof value) {\\n  case 'string':\\n    return quote(value);\\n  case 'number':\\n    // JSON numbers must be finite. Encode non-finite numbers as null.\\n    return isFinite(value) ? String(value) : 'null';\\n  case 'boolean':\\n    return String(value);\\n  // If the type is 'object', we might be dealing with an object or an array or\\n  // null.\\n  case 'object': {\\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\\n    // so watch out for that case.\\n    if (!value) {\\n      return 'null';\\n    }\\n    // Make an array to hold the partial results of stringifying this object\\n    // value.\\n    const innerIndent = outerIndent + singleIndent;\\n    const partial = [];\\n    let v;\\n\\n    // Is the value an array?\\n    if (Array.isArray(value) || ({}).hasOwnProperty.call(value, 'callee')) {\\n      // The value is an array. Stringify every element. Use null as a\\n      // placeholder for non-JSON values.\\n      const length = value.length;\\n      for (let i = 0; i < length; i += 1) {\\n        partial[i] =\\n          str(i, value, singleIndent, innerIndent, canonical) || 'null';\\n      }\\n\\n      // Join all of the elements together, separated with commas, and wrap\\n      // them in brackets.\\n      if (partial.length === 0) {\\n        v = '[]';\\n      } else if (innerIndent) {\\n        v = '[\\\\n' +\\n          innerIndent +\\n          partial.join(',\\\\n' +\\n          innerIndent) +\\n          '\\\\n' +\\n          outerIndent +\\n          ']';\\n      } else {\\n        v = '[' + partial.join(',') + ']';\\n      }\\n      return v;\\n    }\\n\\n    // Iterate through all of the keys in the object.\\n    let keys = Object.keys(value);\\n    if (canonical) {\\n      keys = keys.sort();\\n    }\\n    keys.forEach(k => {\\n      v = str(k, value, singleIndent, innerIndent, canonical);\\n      if (v) {\\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\\n      }\\n    });\\n\\n    // Join all of the member texts together, separated with commas,\\n    // and wrap them in braces.\\n    if (partial.length === 0) {\\n      v = '{}';\\n    } else if (innerIndent) {\\n      v = '{\\\\n' +\\n        innerIndent +\\n        partial.join(',\\\\n' +\\n        innerIndent) +\\n        '\\\\n' +\\n        outerIndent +\\n        '}';\\n    } else {\\n      v = '{' + partial.join(',') + '}';\\n    }\\n    return v;\\n  }\\n\\n  default: // Do nothing\\n  }\\n};\\n\\n// If the JSON object does not yet have a stringify method, give it one.\\nconst canonicalStringify = (value, options) => {\\n  // Make a fake root object containing our value under the key of ''.\\n  // Return the result of stringifying the value.\\n  const allOptions = Object.assign({\\n    indent: '',\\n    canonical: false,\\n  }, options);\\n  if (allOptions.indent === true) {\\n    allOptions.indent = '  ';\\n  } else if (typeof allOptions.indent === 'number') {\\n    let newIndent = '';\\n    for (let i = 0; i < allOptions.indent; i++) {\\n      newIndent += ' ';\\n    }\\n    allOptions.indent = newIndent;\\n  }\\n  return str('', {'': value}, allOptions.indent, '', allOptions.canonical);\\n};\\n\\nexport default canonicalStringify;\\n\",\"export const isFunction = (fn) => typeof fn === 'function';\\n\\nexport const isObject = (fn) => typeof fn === 'object';\\n\\nexport const keysOf = (obj) => Object.keys(obj);\\n\\nexport const lengthOf = (obj) => Object.keys(obj).length;\\n\\nexport const hasOwn = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\\n\\nexport const convertMapToObject = (map) => Array.from(map).reduce((acc, [key, value]) => {\\n  // reassign to not create new object\\n  acc[key] = value;\\n  return acc;\\n}, {});\\n\\nexport const isArguments = obj => obj != null && hasOwn(obj, 'callee');\\n\\nexport const isInfOrNaN =\\n  obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;\\n\\nexport const checkError = {\\n  maxStack: (msgError) => new RegExp('Maximum call stack size exceeded', 'g').test(msgError),\\n};\\n\\nexport const handleError = (fn) => function() {\\n  try {\\n    return fn.apply(this, arguments);\\n  } catch (error) {\\n    const isMaxStack = checkError.maxStack(error.message);\\n    if (isMaxStack) {\\n      throw new Error('Converting circular structure to JSON')\\n    }\\n    throw error;\\n  }\\n};\\n\",null],\"names\":[\"module\",\"export\",\"EJSON\",\"link\",\"isFunction\",\"v\",\"isObject\",\"keysOf\",\"lengthOf\",\"hasOwn\",\"convertMapToObject\",\"isArguments\",\"isInfOrNaN\",\"handleError\",\"customTypes\",\"Map\",\"addType\",\"name\",\"factory\",\"has\",\"Error\",\"set\",\"builtinConverters\",\"matchJSONValue\",\"obj\",\"matchObject\",\"Date\",\"toJSONValue\",\"$date\",\"getTime\",\"fromJSONValue\",\"RegExp\",\"regexp\",\"$regexp\",\"source\",\"$flags\",\"flags\",\"slice\",\"replace\",\"sign\",\"$InfNaN\",\"Number\",\"isNaN\",\"Infinity\",\"Uint8Array\",\"$binary\",\"Base64\",\"encode\",\"decode\",\"match\",\"keyCount\",\"some\",\"converter\",\"newObj\",\"forEach\",\"key\",\"$escape\",\"_isCustomType\",\"jsonValue\",\"Meteor\",\"_noYieldsAllowed\",\"$type\",\"typeName\",\"$value\",\"get\",\"_getTypes\",\"isOriginal\",\"arguments\",\"length\",\"undefined\",\"_getConverters\",\"toJSONValueHelper\",\"item\",\"i\",\"adjustTypesToJSONValue\",\"maybeChanged\",\"value\",\"changed\",\"_adjustTypesToJSONValue\",\"newItem\",\"clone\",\"fromJSONValueHelper\",\"keys\",\"every\",\"k\",\"substr\",\"adjustTypesFromJSONValue\",\"_adjustTypesFromJSONValue\",\"stringify\",\"options\",\"serialized\",\"canonicalStringify\",\"json\",\"canonical\",\"indent\",\"JSON\",\"parse\",\"isBinary\",\"$Uint8ArrayPolyfill\",\"equals\",\"a\",\"b\",\"ret\",\"keyOrderSensitive\",\"valueOf\",\"aIsArray\",\"Array\",\"isArray\",\"bIsArray\",\"aKeys\",\"bKeys\",\"newBinary\",\"map\",\"from\",\"quote\",\"string\",\"default\",\"_typeof\",\"str\",\"holder\",\"singleIndent\",\"outerIndent\",\"isFinite\",\"String\",\"innerIndent\",\"partial\",\"hasOwnProperty\",\"call\",\"join\",\"Object\",\"sort\",\"push\",\"exportDefault\",\"allOptions\",\"assign\",\"newIndent\",\"_slicedToArray\",\"checkError\",\"fn\",\"prop\",\"prototype\",\"reduce\",\"acc\",\"_ref\",\"_ref2\",\"maxStack\",\"msgError\",\"test\",\"apply\",\"error\",\"message\"],\"mappings\":\"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\"}"}