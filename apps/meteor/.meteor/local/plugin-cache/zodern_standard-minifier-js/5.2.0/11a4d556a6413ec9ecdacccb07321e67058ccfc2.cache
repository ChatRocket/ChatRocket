{"code":"function module(e,t,s){let a,n,l,m,r,i,o,u,c,d,g,k,h,y,p,M,S,E,b,C,x,f,U,v,L,T,D,w,A,_,F;let N=[\"message\",\"showUserAvatar\"],I=[\"method_id\",\"i18nLabel\"];s.link(\"@babel/runtime/helpers/extends\",{default(e){a=e}},0),s.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){n=e}},1),s.link(\"@babel/runtime/helpers/objectWithoutProperties\",{default(e){l=e}},2),s.link(\"@rocket.chat/fuselage\",{MessageSystem(e){m=e},MessageSystemBody(e){r=e},MessageSystemContainer(e){i=e},MessageSystemLeftContainer(e){o=e},MessageSystemName(e){u=e},MessageSystemTimestamp(e){c=e},MessageSystemBlock(e){d=e},CheckBox(e){g=e},MessageUsername(e){k=e},MessageNameContainer(e){h=e}},0),s.link(\"@rocket.chat/ui-avatar\",{UserAvatar(e){y=e}},1),s.link(\"react\",{default(e){p=e},memo(e){M=e}},2),s.link(\"react-i18next\",{useTranslation(e){S=e}},3),s.link(\"../../../../app/ui-utils/client\",{MessageTypes(e){E=e}},4),s.link(\"../../../../lib/getUserDisplayName\",{getUserDisplayName(e){b=e}},5),s.link(\"../../../hooks/useFormatDateAndTime\",{useFormatDateAndTime(e){C=e}},6),s.link(\"../../../hooks/useFormatTime\",{useFormatTime(e){x=e}},7),s.link(\"../../../hooks/useUserData\",{useUserData(e){f=e}},8),s.link(\"../../../views/room/MessageList/contexts/SelectedMessagesContext\",{useIsSelecting(e){U=e},useToggleSelect(e){v=e},useIsSelectedMessage(e){L=e},useCountSelected(e){T=e}},9),s.link(\"../../../views/room/contexts/UserCardContext\",{useUserCard(e){D=e}},10),s.link(\"../content/Attachments\",{default(e){w=e}},11),s.link(\"../content/MessageActions\",{default(e){A=e}},12),s.link(\"../list/MessageListContext\",{useMessageListShowRealName(e){_=e},useMessageListShowUsername(e){F=e}},13),s.exportDefault(M(e=>{var t;let{message:s,showUserAvatar:M}=e,q=l(e,N),{t:B}=S(),j=x(),z=C(),{triggerProps:K,openUserCard:P}=D(),R=_(),W=n(n({},s.u),{},{roles:[]},f(s.u._id)),G=!W.name||W.username===W.name,H=F()&&R&&!G,J=E.getType(s),O=U(),Q=v(s._id),V=L(s._id);return T(),p.createElement(m,a({role:\"listitem\",\"aria-roledescription\":B(\"system_message\"),tabIndex:0,onClick:O?Q:void 0,isSelected:V,\"data-qa-selected\":V,\"data-qa\":\"system-message\",\"data-system-message-type\":s.t},q),p.createElement(o,null,!O&&M&&p.createElement(y,{username:s.u.username,size:\"x18\"}),O&&p.createElement(g,{checked:V,onChange:Q})),p.createElement(i,null,p.createElement(d,null,p.createElement(h,a({tabIndex:0,role:\"button\",onClick:e=>W.username&&P(e,W.username),onKeyDown:e=>{(\"Enter\"===e.code||\"Space\"===e.code)&&P(e,s.u.username)},style:{cursor:\"pointer\"}},K),p.createElement(u,null,b(W.name,W.username,R)),H&&p.createElement(p.Fragment,null,\" \",p.createElement(k,{\"data-username\":W.username},\"@\",W.username))),J&&p.createElement(r,{\"data-qa-type\":\"system-message-body\"},B(J.message,J.data?J.data(s):{})),p.createElement(c,{title:z(s.ts)},j(s.ts))),s.attachments&&p.createElement(d,null,p.createElement(w,{attachments:s.attachments})),(null===(t=s.actionLinks)||void 0===t?void 0:t.length)&&p.createElement(A,{message:s,actions:s.actionLinks.map(e=>{let{method_id:t,i18nLabel:s}=e,a=l(e,I);return n({methodId:t,i18nLabel:s},a)})})))}))}","map":"{\"version\":3,\"sources\":[\"client/components/message/variants/SystemMessage.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport {\\n\\tMessageSystem,\\n\\tMessageSystemBody,\\n\\tMessageSystemContainer,\\n\\tMessageSystemLeftContainer,\\n\\tMessageSystemName,\\n\\tMessageSystemTimestamp,\\n\\tMessageSystemBlock,\\n\\tCheckBox,\\n\\tMessageUsername,\\n\\tMessageNameContainer,\\n} from '@rocket.chat/fuselage';\\nimport { UserAvatar } from '@rocket.chat/ui-avatar';\\nimport type { TranslationKey } from '@rocket.chat/ui-contexts';\\nimport type { ComponentProps, ReactElement, KeyboardEvent } from 'react';\\nimport React, { memo } from 'react';\\nimport { useTranslation } from 'react-i18next';\\n\\nimport { MessageTypes } from '../../../../app/ui-utils/client';\\nimport { getUserDisplayName } from '../../../../lib/getUserDisplayName';\\nimport { useFormatDateAndTime } from '../../../hooks/useFormatDateAndTime';\\nimport { useFormatTime } from '../../../hooks/useFormatTime';\\nimport { useUserData } from '../../../hooks/useUserData';\\nimport type { UserPresence } from '../../../lib/presence';\\nimport {\\n\\tuseIsSelecting,\\n\\tuseToggleSelect,\\n\\tuseIsSelectedMessage,\\n\\tuseCountSelected,\\n} from '../../../views/room/MessageList/contexts/SelectedMessagesContext';\\nimport { useUserCard } from '../../../views/room/contexts/UserCardContext';\\nimport Attachments from '../content/Attachments';\\nimport MessageActions from '../content/MessageActions';\\nimport { useMessageListShowRealName, useMessageListShowUsername } from '../list/MessageListContext';\\n\\ntype SystemMessageProps = {\\n\\tmessage: IMessage;\\n\\tshowUserAvatar: boolean;\\n} & ComponentProps<typeof MessageSystem>;\\n\\nconst SystemMessage = ({ message, showUserAvatar, ...props }: SystemMessageProps): ReactElement => {\\n\\tconst { t } = useTranslation();\\n\\tconst formatTime = useFormatTime();\\n\\tconst formatDateAndTime = useFormatDateAndTime();\\n\\tconst { triggerProps, openUserCard } = useUserCard();\\n\\n\\tconst showRealName = useMessageListShowRealName();\\n\\tconst user: UserPresence = { ...message.u, roles: [], ...useUserData(message.u._id) };\\n\\tconst usernameAndRealNameAreSame = !user.name || user.username === user.name;\\n\\tconst showUsername = useMessageListShowUsername() && showRealName && !usernameAndRealNameAreSame;\\n\\n\\tconst messageType = MessageTypes.getType(message);\\n\\n\\tconst isSelecting = useIsSelecting();\\n\\tconst toggleSelected = useToggleSelect(message._id);\\n\\tconst isSelected = useIsSelectedMessage(message._id);\\n\\tuseCountSelected();\\n\\n\\treturn (\\n\\t\\t<MessageSystem\\n\\t\\t\\trole='listitem'\\n\\t\\t\\taria-roledescription={t('system_message')}\\n\\t\\t\\ttabIndex={0}\\n\\t\\t\\tonClick={isSelecting ? toggleSelected : undefined}\\n\\t\\t\\tisSelected={isSelected}\\n\\t\\t\\tdata-qa-selected={isSelected}\\n\\t\\t\\tdata-qa='system-message'\\n\\t\\t\\tdata-system-message-type={message.t}\\n\\t\\t\\t{...props}\\n\\t\\t>\\n\\t\\t\\t<MessageSystemLeftContainer>\\n\\t\\t\\t\\t{!isSelecting && showUserAvatar && <UserAvatar username={message.u.username} size='x18' />}\\n\\t\\t\\t\\t{isSelecting && <CheckBox checked={isSelected} onChange={toggleSelected} />}\\n\\t\\t\\t</MessageSystemLeftContainer>\\n\\t\\t\\t<MessageSystemContainer>\\n\\t\\t\\t\\t<MessageSystemBlock>\\n\\t\\t\\t\\t\\t<MessageNameContainer\\n\\t\\t\\t\\t\\t\\ttabIndex={0}\\n\\t\\t\\t\\t\\t\\trole='button'\\n\\t\\t\\t\\t\\t\\tonClick={(e) => user.username && openUserCard(e, user.username)}\\n\\t\\t\\t\\t\\t\\tonKeyDown={(e: KeyboardEvent<HTMLSpanElement>) => {\\n\\t\\t\\t\\t\\t\\t\\t(e.code === 'Enter' || e.code === 'Space') && openUserCard(e, message.u.username);\\n\\t\\t\\t\\t\\t\\t}}\\n\\t\\t\\t\\t\\t\\tstyle={{ cursor: 'pointer' }}\\n\\t\\t\\t\\t\\t\\t{...triggerProps}\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<MessageSystemName>{getUserDisplayName(user.name, user.username, showRealName)}</MessageSystemName>\\n\\t\\t\\t\\t\\t\\t{showUsername && (\\n\\t\\t\\t\\t\\t\\t\\t<>\\n\\t\\t\\t\\t\\t\\t\\t\\t{' '}\\n\\t\\t\\t\\t\\t\\t\\t\\t<MessageUsername data-username={user.username}>@{user.username}</MessageUsername>\\n\\t\\t\\t\\t\\t\\t\\t</>\\n\\t\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t</MessageNameContainer>\\n\\t\\t\\t\\t\\t{messageType && (\\n\\t\\t\\t\\t\\t\\t<MessageSystemBody data-qa-type='system-message-body'>\\n\\t\\t\\t\\t\\t\\t\\t{t(messageType.message, messageType.data ? messageType.data(message) : {})}\\n\\t\\t\\t\\t\\t\\t</MessageSystemBody>\\n\\t\\t\\t\\t\\t)}\\n\\t\\t\\t\\t\\t<MessageSystemTimestamp title={formatDateAndTime(message.ts)}>{formatTime(message.ts)}</MessageSystemTimestamp>\\n\\t\\t\\t\\t</MessageSystemBlock>\\n\\t\\t\\t\\t{message.attachments && (\\n\\t\\t\\t\\t\\t<MessageSystemBlock>\\n\\t\\t\\t\\t\\t\\t<Attachments attachments={message.attachments} />\\n\\t\\t\\t\\t\\t</MessageSystemBlock>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t\\t{message.actionLinks?.length && (\\n\\t\\t\\t\\t\\t<MessageActions\\n\\t\\t\\t\\t\\t\\tmessage={message}\\n\\t\\t\\t\\t\\t\\tactions={message.actionLinks.map(({ method_id: methodId, i18nLabel, ...action }) => ({\\n\\t\\t\\t\\t\\t\\t\\tmethodId,\\n\\t\\t\\t\\t\\t\\t\\ti18nLabel: i18nLabel as TranslationKey,\\n\\t\\t\\t\\t\\t\\t\\t...action,\\n\\t\\t\\t\\t\\t\\t}))}\\n\\t\\t\\t\\t\\t/>\\n\\t\\t\\t\\t)}\\n\\t\\t\\t</MessageSystemContainer>\\n\\t\\t</MessageSystem>\\n\\t);\\n};\\n\\nexport default memo(SystemMessage);\\n\",null],\"names\":[\"_extends\",\"_objectSpread\",\"_objectWithoutProperties\",\"MessageSystem\",\"MessageSystemBody\",\"MessageSystemContainer\",\"MessageSystemLeftContainer\",\"MessageSystemName\",\"MessageSystemTimestamp\",\"MessageSystemBlock\",\"CheckBox\",\"MessageUsername\",\"MessageNameContainer\",\"UserAvatar\",\"React\",\"memo\",\"useTranslation\",\"MessageTypes\",\"getUserDisplayName\",\"useFormatDateAndTime\",\"useFormatTime\",\"useUserData\",\"useIsSelecting\",\"useToggleSelect\",\"useIsSelectedMessage\",\"useCountSelected\",\"useUserCard\",\"Attachments\",\"MessageActions\",\"useMessageListShowRealName\",\"useMessageListShowUsername\",\"module\",\"link\",\"default\",\"v\",\"exportDefault\",\"_ref\",\"_message$actionLinks\",\"message\",\"showUserAvatar\",\"props\",\"_excluded\",\"t\",\"formatTime\",\"formatDateAndTime\",\"triggerProps\",\"openUserCard\",\"showRealName\",\"user\",\"u\",\"roles\",\"_id\",\"usernameAndRealNameAreSame\",\"name\",\"username\",\"showUsername\",\"messageType\",\"getType\",\"isSelecting\",\"toggleSelected\",\"isSelected\",\"createElement\",\"role\",\"tabIndex\",\"onClick\",\"undefined\",\"size\",\"checked\",\"onChange\",\"e\",\"onKeyDown\",\"code\",\"style\",\"cursor\",\"Fragment\",\"data\",\"title\",\"ts\",\"attachments\",\"actionLinks\",\"length\",\"actions\",\"map\",\"_ref2\",\"method_id\",\"methodId\",\"i18nLabel\",\"action\",\"_excluded2\"],\"mappings\":\"2BACAA,EAICC,EAMAC,EAVDC,EACCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAAAC,EAEAC,EAE8BC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,iEAV9BC,EAAAC,IACA,CAAA,iCACA,CAAAC,QACAC,CAAA,EAAAlC,EAAAkC,CAAA,CAAA,EAAA,GACAH,EAAAC,IACA,CAAA,uCACA,CAAkBC,QAClBC,CAAA,EAAQjC,EACRiC,CAAA,CAAe,EACf,GACMH,EAAAC,IAAA,CAAA,iDAAwB,CAAAC,QAAAC,CAAA,EAAAhC,EAAAgC,CAAA,CAAA,EAAA,GAD9BH,EAAAC,IAAA,CAAA,wBACM,CAAA7B,cAAwB+B,CAAA,EAAA/B,EAAA+B,CAAA,EAAA9B,kBAAA8B,CAAA,EAAA9B,EAAA8B,CAAA,EAAA7B,uBAAA6B,CAAA,EAAA7B,EAAA6B,CAAA,EAAA5B,2BAAA4B,CAAA,EAAA5B,EAAA4B,CAAA,EAAA3B,kBAAA2B,CAAA,EAAA3B,EAAA2B,CAAA,EAAA1B,uBAAA0B,CAAA,EAAA1B,EAAA0B,CAAA,EAAAzB,mBAAAyB,CAAA,EAAAzB,EAAAyB,CAAA,EAAAxB,SAAAwB,CAAA,EAAAxB,EAAAwB,CAAA,EAAAvB,gBAAAuB,CAAA,EAAAvB,EAAAuB,CAAA,EAAAtB,qBAAAsB,CAAA,EAAAtB,EAAAsB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,yBAAA,CAAAnB,WAAAqB,CAAA,EAAArB,EAAAqB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,QAAA,CAAAC,QAAAC,CAAA,EAAApB,EAAAoB,CAAA,EAAAnB,KAAAmB,CAAA,EAAAnB,EAAAmB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,gBAAA,CAAAhB,eAAAkB,CAAA,EAAAlB,EAAAkB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,kCAAA,CAAAf,aAAAiB,CAAA,EAAAjB,EAAAiB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,qCAAA,CAAAd,mBAAAgB,CAAA,EAAAhB,EAAAgB,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,sCAAA,CAAAb,qBAAAe,CAAA,EAAAf,EAAAe,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,+BAAA,CAAAZ,cAAAc,CAAA,EAAAd,EAAAc,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,6BAAA,CAAAX,YAAAa,CAAA,EAAAb,EAAAa,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,mEAAA,CAAAV,eAAAY,CAAA,EAAAZ,EAAAY,CAAA,EAAAX,gBAAAW,CAAA,EAAAX,EAAAW,CAAA,EAAAV,qBAAAU,CAAA,EAAAV,EAAAU,CAAA,EAAAT,iBAAAS,CAAA,EAAAT,EAAAS,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,+CAAA,CAAAN,YAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,IAAAH,EAAAC,IAAA,CAAA,yBAAA,CAAAC,QAAAC,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,IAAAH,EAAAC,IAAA,CAAA,4BAAA,CAAAC,QAAAC,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,IAAAH,EAAAC,IAAA,CAAA,6BAAA,CAAAH,2BAAAK,CAAA,EAAAL,EAAAK,CAAA,EAAAJ,2BAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,IAX/BH,EAAOI,aACN,CAwHcpB,EAjFOqB,IAA4E,IAAAC,EAAA,GAA3E,CAAEC,QAAAA,CAAO,CAAEC,eAAAA,CAAAA,CAA8C,CAAAH,EAA3BI,EAAKtC,EAAAkC,EAAAK,GACnD,CAAEC,EAAAA,CAAAA,CAAG,CAAG1B,IACR2B,EAAavB,IACbwB,EAAoBzB,IACpB,CAAE0B,aAAAA,CAAY,CAAEC,aAAAA,CAAAA,CAAc,CAAGpB,IAEjCqB,EAAelB,IACfmB,EAAI/C,EAAAA,EAAA,CAAA,EAAsBqC,EAAQW,CAAC,EAAA,CAAA,EAAA,CAAEC,MAAO,EAAA,AAAE,EAAK7B,EAAYiB,EAAQW,CAAC,CAACE,GAAG,GAC5EC,EAA6B,CAACJ,EAAKK,IAAI,EAAIL,EAAKM,QAAQ,GAAKN,EAAKK,IAAI,CACtEE,EAAezB,KAAgCiB,GAAgB,CAACK,EAEhEI,EAAcvC,EAAawC,OAAO,CAACnB,GAEnCoB,EAAcpC,IACdqC,EAAiBpC,EAAgBe,EAAQa,GAAG,EAC5CS,EAAapC,EAAqBc,EAAQa,GAAG,EAGnD,OAFA1B,IAGCX,EAAA+C,aAAA,CAAC1D,EAAaH,EAAA,CACb8D,KAAK,WACL,uBAAsBpB,EAAE,kBACxBqB,SAAU,EACVC,QAASN,EAAcC,EAAiBM,KAAAA,EACxCL,WAAYA,EACZ,mBAAkBA,EAClB,UAAQ,iBACR,2BAA0BtB,EAAQI,CAAAA,AAAE,EAChCF,GAEJ1B,EAAA+C,aAAA,CAACvD,EAA0B,KACzB,CAACoD,GAAenB,GAAkBzB,EAAA+C,aAAA,CAAChD,EAAU,CAACyC,SAAUhB,EAAQW,CAAC,CAACK,QAAS,CAACY,KAAK,KAAK,GACtFR,GAAe5C,EAAA+C,aAAA,CAACnD,EAAQ,CAACyD,QAASP,EAAYQ,SAAUT,CAAe,IAEzE7C,EAAA+C,aAAA,CAACxD,EAAsB,KACtBS,EAAA+C,aAAA,CAACpD,EAAkB,KAClBK,EAAA+C,aAAA,CAACjD,EAAoBZ,EAAA,CACpB+D,SAAU,EACVD,KAAK,SACLE,QAAUK,GAAMrB,EAAKM,QAAQ,EAAIR,EAAauB,EAAGrB,EAAKM,QAAQ,EAC9DgB,UAAYD,IACX,AAACA,CAAAA,AAAW,UAAXA,EAAEE,IAAI,EAAgBF,AAAW,UAAXA,EAAEE,IAAI,AAAK,GAAYzB,EAAauB,EAAG/B,EAAQW,CAAC,CAACK,QAAQ,CACjF,EACAkB,MAAO,CAAEC,OAAQ,SAAS,CAAG,EACzB5B,GAEJ/B,EAAA+C,aAAA,CAACtD,EAAiB,KAAEW,EAAmB8B,EAAKK,IAAI,CAAEL,EAAKM,QAAQ,CAAEP,IAChEQ,GACAzC,EAAA+C,aAAA,CAAA/C,EAAA4D,QAAA,CAAA,KACE,IACD5D,EAAA+C,aAAA,CAAClD,EAAe,CAAC,gBAAeqC,EAAKM,QAAAA,AAAS,EAAC,IAAEN,EAAKM,QAA0B,IAIlFE,GACA1C,EAAA+C,aAAA,CAACzD,EAAiB,CAAC,eAAa,qBAAqB,EACnDsC,EAAEc,EAAYlB,OAAO,CAAEkB,EAAYmB,IAAI,CAAGnB,EAAYmB,IAAI,CAACrC,GAAW,CAAA,IAGzExB,EAAA+C,aAAA,CAACrD,EAAsB,CAACoE,MAAOhC,EAAkBN,EAAQuC,EAAE,CAAE,EAAElC,EAAWL,EAAQuC,EAAE,IAEpFvC,EAAQwC,WAAW,EACnBhE,EAAA+C,aAAA,CAACpD,EAAkB,KAClBK,EAAA+C,aAAA,CAAClC,EAAW,CAACmD,YAAaxC,EAAQwC,WAAAA,AAAY,IAG/C,CAAA,AAAmB,OAAnBzC,CAAAA,EAAAC,EAAQyC,WAAW,AAAXA,GAAW1C,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAnBA,EAAqB2C,MAAM,AAANA,GACrBlE,EAAA+C,aAAA,CAACjC,EAAc,CACdU,QAASA,EACT2C,QAAS3C,EAAQyC,WAAW,CAACG,GAAG,CAACC,IAAA,GAAC,CAAEC,UAAWC,CAAQ,CAAEC,UAAAA,CAAAA,CAAsB,CAAAH,EAARI,EAAMrF,EAAAiF,EAAAK,GAAA,OAAAvF,EAAA,CAC5EoF,SAAAA,EACAC,UAAWA,CAA2B,EACnCC,EAAM,EACN,IAMV\"}"}