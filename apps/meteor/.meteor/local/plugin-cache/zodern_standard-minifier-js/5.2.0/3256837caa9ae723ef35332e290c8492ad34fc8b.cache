{"code":"function module(e,t,o){let n,l,i,a,r,c;o.link(\"@rocket.chat/random\",{Random(e){n=e}},0),o.link(\"meteor/accounts-base\",{Accounts(e){l=e}},1),o.link(\"meteor/meteor\",{Meteor(e){i=e}},2),o.link(\"../../../app/settings/client\",{settings(e){a=e}},3),o.link(\"../../lib/2fa/overrideLoginMethod\",{callLoginMethod(e){r=e},handleLogin(e){c=e}},4),l.saml||(l.saml={});let{logout:s}=i;i.logout=async function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];let r=()=>s.apply(i,t);if(!a.get(\"SAML_Custom_Default\"))return r();if(\"Local\"===a.get(\"SAML_Custom_Default_logout_behaviour\"))return console.info(\"SAML session not terminated, only the Rocket.Chat session is going to be killed\"),r();let c=a.get(\"SAML_Custom_Default_provider\");if(c&&a.get(\"SAML_Custom_Default_idp_slo_redirect_url\")){console.info(\"SAML session terminated via SLO\");let{sdk:e}=await o.dynamicImport(\"../../../app/utils/client/lib/SDKClient\");e.call(\"samlLogout\",c).then(e=>{if(!e){s.apply(i);return}l.storageLocation.removeItem(l.USER_ID_KEY),window.location.replace(i.absoluteUrl(\"_saml/sloRedirect/\".concat(c,\"/?redirect=\").concat(encodeURIComponent(e))))}).catch(()=>s.apply(i));return}return r()},i.loginWithSaml=e=>{e=e||{};let t=\"id-\".concat(n.id());e.credentialToken=t,window.location.href=\"_saml/authorize/\".concat(e.provider,\"/\").concat(e.credentialToken)},i.loginWithSamlToken=c(e=>r({methodArguments:[{saml:!0,credentialToken:e}]}),(e,t)=>r({methodArguments:[{totp:{login:{saml:!0,credentialToken:e},code:t}}]}))}","map":"{\"version\":3,\"sources\":[\"client/meteorOverrides/login/saml.ts\",\"<anon>\"],\"sourcesContent\":[\"import { Random } from '@rocket.chat/random';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport { Meteor } from 'meteor/meteor';\\n\\nimport { settings } from '../../../app/settings/client';\\nimport { type LoginCallback, callLoginMethod, handleLogin } from '../../lib/2fa/overrideLoginMethod';\\n\\ndeclare module 'meteor/meteor' {\\n\\t// eslint-disable-next-line @typescript-eslint/no-namespace\\n\\tnamespace Meteor {\\n\\t\\tfunction loginWithSamlToken(credentialToken: string, callback?: LoginCallback): void;\\n\\n\\t\\tfunction loginWithSaml(options: { provider: string; credentialToken?: string }): void;\\n\\t}\\n}\\n\\ndeclare module 'meteor/accounts-base' {\\n\\t// eslint-disable-next-line @typescript-eslint/no-namespace\\n\\tnamespace Accounts {\\n\\t\\texport let saml: {\\n\\t\\t\\tcredentialToken?: string;\\n\\t\\t\\tcredentialSecret?: string;\\n\\t\\t};\\n\\n\\t\\t/**\\n\\t\\t * There is one case where the onlogout event is triggered with no user:\\n\\t\\t * during the deletion, the user is logged out, and the framework try to get the user from the database.\\n\\t\\t */\\n\\t\\tfunction onLogout(func: (options: { user?: Meteor.User; connection: Meteor.Connection }) => void): void;\\n\\t}\\n}\\n\\ndeclare module 'meteor/service-configuration' {\\n\\t// eslint-disable-next-line @typescript-eslint/naming-convention\\n\\tinterface Configuration {\\n\\t\\tlogoutBehaviour?: 'SAML' | 'Local';\\n\\t\\tidpSLORedirectURL?: string;\\n\\t}\\n}\\n\\nif (!Accounts.saml) {\\n\\tAccounts.saml = {};\\n}\\n\\nconst { logout } = Meteor;\\n\\nMeteor.logout = async function (...args) {\\n\\tconst standardLogout = () => logout.apply(Meteor, args);\\n\\n\\tif (!settings.get('SAML_Custom_Default')) {\\n\\t\\treturn standardLogout();\\n\\t}\\n\\n\\tif (settings.get('SAML_Custom_Default_logout_behaviour') === 'Local') {\\n\\t\\tconsole.info('SAML session not terminated, only the Rocket.Chat session is going to be killed');\\n\\t\\treturn standardLogout();\\n\\t}\\n\\n\\tconst provider = settings.get('SAML_Custom_Default_provider');\\n\\n\\tif (provider && settings.get('SAML_Custom_Default_idp_slo_redirect_url')) {\\n\\t\\tconsole.info('SAML session terminated via SLO');\\n\\n\\t\\tconst { sdk } = await import('../../../app/utils/client/lib/SDKClient');\\n\\t\\tsdk\\n\\t\\t\\t.call('samlLogout', provider)\\n\\t\\t\\t.then((result) => {\\n\\t\\t\\t\\tif (!result) {\\n\\t\\t\\t\\t\\tlogout.apply(Meteor);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Remove the userId from the client to prevent calls to the server while the logout is processed.\\n\\t\\t\\t\\t// If the logout fails, the userId will be reloaded on the resume call\\n\\t\\t\\t\\tAccounts.storageLocation.removeItem(Accounts.USER_ID_KEY);\\n\\n\\t\\t\\t\\t// A nasty bounce: 'result' has the SAML LogoutRequest but we need a proper 302 to redirected from the server.\\n\\t\\t\\t\\twindow.location.replace(Meteor.absoluteUrl(`_saml/sloRedirect/${provider}/?redirect=${encodeURIComponent(result)}`));\\n\\t\\t\\t})\\n\\t\\t\\t.catch(() => logout.apply(Meteor));\\n\\t\\treturn;\\n\\t}\\n\\n\\treturn standardLogout();\\n};\\n\\nMeteor.loginWithSaml = (options) => {\\n\\toptions = options || {};\\n\\tconst credentialToken = `id-${Random.id()}`;\\n\\toptions.credentialToken = credentialToken;\\n\\n\\twindow.location.href = `_saml/authorize/${options.provider}/${options.credentialToken}`;\\n};\\n\\nconst loginWithSamlToken = (credentialToken: string) =>\\n\\tcallLoginMethod({\\n\\t\\tmethodArguments: [\\n\\t\\t\\t{\\n\\t\\t\\t\\tsaml: true,\\n\\t\\t\\t\\tcredentialToken,\\n\\t\\t\\t},\\n\\t\\t],\\n\\t});\\n\\nconst loginWithSamlTokenAndTOTP = (credentialToken: string, code: string) =>\\n\\tcallLoginMethod({\\n\\t\\tmethodArguments: [\\n\\t\\t\\t{\\n\\t\\t\\t\\ttotp: {\\n\\t\\t\\t\\t\\tlogin: {\\n\\t\\t\\t\\t\\t\\tsaml: true,\\n\\t\\t\\t\\t\\t\\tcredentialToken,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\tcode,\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t],\\n\\t});\\n\\nMeteor.loginWithSamlToken = handleLogin(loginWithSamlToken, loginWithSamlTokenAndTOTP);\\n\",null],\"names\":[\"Random\",\"Accounts\",\"Meteor\",\"settings\",\"callLoginMethod\",\"handleLogin\",\"module\",\"link\",\"v\",\"saml\",\"logout\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"standardLogout\",\"apply\",\"get\",\"console\",\"info\",\"provider\",\"sdk\",\"dynamicImport\",\"call\",\"then\",\"result\",\"storageLocation\",\"removeItem\",\"USER_ID_KEY\",\"window\",\"location\",\"replace\",\"absoluteUrl\",\"concat\",\"encodeURIComponent\",\"catch\",\"loginWithSaml\",\"options\",\"credentialToken\",\"id\",\"href\",\"loginWithSamlToken\",\"methodArguments\",\"loginWithSamlTokenAndTOTP\",\"code\",\"totp\",\"login\"],\"mappings\":\"2BAAAA,EAA6CC,EAAAC,EAAAC,EAAAC,EAAAC,EAApCC,EAAQC,IAAA,CAAM,sBAAsB,CAAAP,OAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,uBAAA,CAAAN,SAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,gBAAA,CAAAL,OAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,+BAAA,CAAAJ,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,oCAAA,CAAAH,gBAAAI,CAAA,EAAAJ,EAAAI,CAAA,EAAAH,YAAAG,CAAA,EAAAH,EAAAG,CAAA,CAAA,EAAA,GAwCxCP,EAASQ,IAAI,EACjBR,CAAAA,EAASQ,IAAI,CAAG,CAAA,CAAA,EAGjB,GAAM,CAAEC,OAAAA,CAAAA,CAAQ,CAAGR,CAEnBA,CAAAA,EAAOQ,MAAM,CAAG,iBAAuB,IAAA,IAAAC,EAAAC,UAAAC,MAAA,CAAJC,EAAI,AAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAJF,CAAI,CAAAE,EAAA,CAAAJ,SAAA,CAAAI,EAAA,CACtC,IAAMC,EAAiBA,IAAMP,EAAOQ,KAAK,CAAChB,EAAQY,GAElD,GAAI,CAACX,EAASgB,GAAG,CAAC,uBACjB,OAAOF,IAGR,GAAId,AAAyD,UAAzDA,EAASgB,GAAG,CAAC,wCAEhB,OADAC,QAAQC,IAAI,CAAC,mFACNJ,IAGR,IAAMK,EAAWnB,EAASgB,GAAG,CAAC,gCAE9B,GAAIG,GAAYnB,EAASgB,GAAG,CAAC,4CAA6C,CACzEC,QAAQC,IAAI,CAAC,mCAEb,GAAM,CAAEE,IAAAA,CAAAA,CAAK,CAAG,MAAMjB,EAAAkB,aAAA,CAAO,2CAC7BD,EACEE,IAAI,CAAC,aAAcH,GACnBI,IAAI,CAAEC,IACN,GAAI,CAACA,EAAQ,CACZjB,EAAOQ,KAAK,CAAChB,GACb,MACD,CAIAD,EAAS2B,eAAe,CAACC,UAAU,CAAC5B,EAAS6B,WAAW,EAGxDC,OAAOC,QAAQ,CAACC,OAAO,CAAC/B,EAAOgC,WAAW,CAAA,qBAAAC,MAAA,CAAsBb,EAAQ,eAAAa,MAAA,CAAcC,mBAAmBT,KAC1G,GACCU,KAAK,CAAC,IAAM3B,EAAOQ,KAAK,CAAChB,IAC3B,MACD,CAEA,OAAOe,GACR,EAEAf,EAAOoC,aAAa,CAAIC,IACvBA,EAAUA,GAAW,CAAA,EACrB,IAAMC,EAAe,MAAAL,MAAA,CAASnC,EAAOyC,EAAE,GACvCF,CAAAA,EAAQC,eAAe,CAAGA,EAE1BT,OAAOC,QAAQ,CAACU,IAAI,CAAA,mBAAAP,MAAA,CAAsBI,EAAQjB,QAAQ,CAAA,KAAAa,MAAA,CAAII,EAAQC,eAAe,CACtF,EA2BAtC,EAAOyC,kBAAkB,CAAGtC,EAzBAmC,GAC3BpC,EAAgB,CACfwC,gBAAiB,CAChB,CACCnC,KAAM,CAAA,EACN+B,gBAAAA,GACA,GAI8BK,CAACL,EAAyBM,IAC3D1C,EAAgB,CACfwC,gBAAiB,CAChB,CACCG,KAAM,CACLC,MAAO,CACNvC,KAAM,CAAA,EACN+B,gBAAAA,GAEDM,KAAAA,IAED\"}"}