{"code":"function module(e,n,t){t.link(\"@babel/runtime/regenerator\",{default:function(e){r=e}},0),t.link(\"@babel/runtime/helpers/objectSpread2\",{default:function(e){u=e}},1),t.export({useScrollableMessageList:function(){return o}}),t.link(\"react\",{useCallback:function(e){i=e}},0),t.link(\"../../lib/utils/mapMessageFromApi\",{mapMessageFromApi:function(e){l=e}},1),t.link(\"./useScrollableRecordList\",{useScrollableRecordList:function(e){a=e}},2);var r,u,i,l,a,o=function(e,n,t){var o=i(function(e,t){var i;return r.async(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,r.awrap(n(e,t));case 2:return i=a.sent,a.abrupt(\"return\",u(u({},i.items&&{items:i.items.map(l)}),i.itemCount&&{itemCount:i.itemCount}));case 4:case\"end\":return a.stop()}},null,null,null,Promise)},[n]);return a(e,o,t)}}","map":"{\"version\":3,\"sources\":[\"client/hooks/lists/useScrollableMessageList.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage, Serialized } from '@rocket.chat/core-typings';\\nimport { useCallback } from 'react';\\n\\nimport type { MessageList } from '../../lib/lists/MessageList';\\nimport type { RecordListBatchChanges } from '../../lib/lists/RecordList';\\nimport { mapMessageFromApi } from '../../lib/utils/mapMessageFromApi';\\nimport { useScrollableRecordList } from './useScrollableRecordList';\\n\\nexport const useScrollableMessageList = (\\n\\tmessageList: MessageList,\\n\\tfetchMessages: (start: number, end: number) => Promise<RecordListBatchChanges<Serialized<IMessage>>>,\\n\\tinitialItemCount?: number,\\n): ReturnType<typeof useScrollableRecordList> => {\\n\\tconst fetchItems = useCallback(\\n\\t\\tasync (start: number, end: number): Promise<RecordListBatchChanges<IMessage>> => {\\n\\t\\t\\tconst batchChanges = await fetchMessages(start, end);\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...(batchChanges.items && { items: batchChanges.items.map(mapMessageFromApi) }),\\n\\t\\t\\t\\t...(batchChanges.itemCount && { itemCount: batchChanges.itemCount }),\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\t[fetchMessages],\\n\\t);\\n\\n\\treturn useScrollableRecordList(messageList, fetchItems, initialItemCount);\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_regeneratorRuntime\",\"_objectSpread\",\"export\",\"useScrollableMessageList\",\"useCallback\",\"mapMessageFromApi\",\"useScrollableRecordList\",\"messageList\",\"fetchMessages\",\"initialItemCount\",\"fetchItems\",\"start\",\"end\",\"batchChanges\",\"async\",\"_context\",\"prev\",\"next\",\"awrap\",\"sent\",\"abrupt\",\"items\",\"map\",\"itemCount\",\"stop\",\"Promise\"],\"mappings\":\"uBACsBA,EAAMC,IAAO,CAAC,6BAAA,CAAAC,QAAA,SAAAC,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,uCAAA,CAAAC,QAAA,SAAAC,CAAA,EAAAE,EAAAF,CAAA,CAAA,EAAA,GAApCH,EAAOM,MAAE,CAAA,CAAAC,yBAA2B,WAAA,OAAAA,CAAA,CAAA,GAAAP,EAAAC,IAAA,CAAA,QAAA,CAAAO,YAAA,SAAAL,CAAA,EAAAK,EAAAL,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,oCAAA,CAAAQ,kBAAA,SAAAN,CAAA,EAAAM,EAAAN,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,4BAAA,CAAAS,wBAAA,SAAAP,CAAA,EAAAO,EAAAP,CAAA,CAAA,EAAA,GAO7B,IAPPC,EAAoCC,EAAAG,EAAAC,EAAAC,EAOvBH,EAA2B,SACvCI,CAAwB,CACxBC,CAAoG,CACpGC,CAAyB,EAEzB,IAAMC,EAAaN,EAClB,SAAOO,CAAa,CAAEC,CAAW,EAAA,IAAAC,EAAA,OAAAb,EAAAc,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAAA,OAAAF,EAAAE,IAAA,CAAA,EAAAjB,EAAAkB,KAAA,CACLV,EAAcG,EAAOC,GAAI,MAAA,EAAlC,OAAZC,EAAYE,EAAAI,IAAA,CAAAJ,EAAAK,MAAA,CAAA,SAAAnB,EAAAA,EAAA,CAAA,EAEbY,EAAaQ,KAAK,EAAI,CAAEA,MAAOR,EAAaQ,KAAK,CAACC,GAAG,CAACjB,EAAkB,GACxEQ,EAAaU,SAAS,EAAI,CAAEA,UAAWV,EAAaU,SAAAA,AAAS,GAAE,MAAA,EAAA,IAAA,MAAA,OAAAR,EAAAS,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAC,QAAA,EAGrE,CAACjB,EAAc,EAGhB,OAAOF,EAAwBC,EAAaG,EAAYD,EACzD\"}"}