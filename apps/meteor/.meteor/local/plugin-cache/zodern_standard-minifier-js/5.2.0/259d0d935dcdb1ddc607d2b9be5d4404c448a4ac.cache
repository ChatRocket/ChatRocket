{"code":"function module(e,t,n){let a,r,i,o;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){a=e}},0),n.export({useChannelsList:()=>s}),n.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){r=e}},0),n.link(\"@tanstack/react-query\",{useQuery(e){i=e}},1),n.link(\"../../../../components/dashboards/periods\",{getPeriodRange(e){o=e}},2);let s=e=>{let{period:t,offset:n,count:s}=e,l=r(\"GET\",\"/v1/engagement-dashboard/channels/list\");return i([\"admin/engagement-dashboard/channels/list\",{period:t,offset:n,count:s}],async()=>{let{start:e,end:r}=o(t),i=await l({start:e.toISOString(),end:r.toISOString(),offset:n,count:s,hideRoomsWithNoActivity:!0});return i?a(a({},i),{},{start:e,end:r}):void 0},{keepPreviousData:!0,refetchInterval:3e5,useErrorBoundary:!0})}}","map":"{\"version\":3,\"sources\":[\"client/views/admin/engagementDashboard/channels/useChannelsList.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport { useQuery } from '@tanstack/react-query';\\n\\nimport type { Period } from '../../../../components/dashboards/periods';\\nimport { getPeriodRange } from '../../../../components/dashboards/periods';\\n\\ntype UseChannelsListOptions = {\\n\\tperiod: Period['key'];\\n\\toffset: number;\\n\\tcount: number;\\n};\\n\\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\\nexport const useChannelsList = ({ period, offset, count }: UseChannelsListOptions) => {\\n\\tconst getChannelsList = useEndpoint('GET', '/v1/engagement-dashboard/channels/list');\\n\\n\\treturn useQuery(\\n\\t\\t['admin/engagement-dashboard/channels/list', { period, offset, count }],\\n\\t\\tasync () => {\\n\\t\\t\\tconst { start, end } = getPeriodRange(period);\\n\\n\\t\\t\\tconst response = await getChannelsList({\\n\\t\\t\\t\\tstart: start.toISOString(),\\n\\t\\t\\t\\tend: end.toISOString(),\\n\\t\\t\\t\\toffset,\\n\\t\\t\\t\\tcount,\\n\\t\\t\\t\\thideRoomsWithNoActivity: true,\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn response\\n\\t\\t\\t\\t? {\\n\\t\\t\\t\\t\\t\\t...response,\\n\\t\\t\\t\\t\\t\\tstart,\\n\\t\\t\\t\\t\\t\\tend,\\n\\t\\t\\t\\t  }\\n\\t\\t\\t\\t: undefined;\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tkeepPreviousData: true,\\n\\t\\t\\trefetchInterval: 5 * 60 * 1000,\\n\\t\\t\\tuseErrorBoundary: true,\\n\\t\\t},\\n\\t);\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useQuery\",\"getPeriodRange\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useChannelsList\",\"_ref\",\"period\",\"offset\",\"count\",\"getChannelsList\",\"start\",\"end\",\"response\",\"toISOString\",\"hideRoomsWithNoActivity\",\"undefined\",\"keepPreviousData\",\"refetchInterval\",\"useErrorBoundary\"],\"mappings\":\"2BAAAA,EAAuDC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAC,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAvDH,EAAOI,MAAE,CAAA,CAAAC,gBAAmBA,IAAAA,CAAA,GAA2BL,EAAAC,IAAA,CAAA,2BAAA,CAAAJ,YAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAH,SAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,4CAAA,CAAAF,eAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAahD,IAAME,EAAkBC,IAAsD,GAArD,CAAEC,OAAAA,CAAM,CAAEC,OAAAA,CAAM,CAAEC,MAAAA,CAAAA,CAA+B,CAAAH,EAC1EI,EAAkBb,EAAY,MAAO,0CAE3C,OAAOC,EACN,CAAC,2CAA4C,CAAES,OAAAA,EAAQC,OAAAA,EAAQC,MAAAA,CAAK,EAAG,CACvE,UACC,GAAM,CAAEE,MAAAA,CAAK,CAAEC,IAAAA,CAAAA,CAAK,CAAGb,EAAeQ,GAEhCM,EAAW,MAAMH,EAAgB,CACtCC,MAAOA,EAAMG,WAAW,GACxBF,IAAKA,EAAIE,WAAW,GACpBN,OAAAA,EACAC,MAAAA,EACAM,wBAAyB,CAAA,IAG1B,OAAOF,EAAQjB,EAAAA,EAAA,CAAA,EAETiB,GAAQ,CAAA,EAAA,CACXF,MAAAA,EACAC,IAAAA,CAAG,GAEHI,KAAAA,CACJ,EACA,CACCC,iBAAkB,CAAA,EAClBC,gBAAiB,IACjBC,iBAAkB,CAAA,GAGrB\"}"}