{"code":"function module(e,t,n){let i,s,r,l,u,a,o,c,d,g,m;n.export({useThreadMainMessageQuery:()=>y}),n.link(\"@rocket.chat/ui-contexts\",{useStream(e){i=e}},0),n.link(\"@tanstack/react-query\",{useQueryClient(e){s=e},useQuery(e){r=e}},1),n.link(\"react\",{useCallback(e){l=e},useEffect(e){u=e},useRef(e){a=e}},2),n.link(\"../../../../../../lib/utils/highOrderFunctions\",{withDebouncing(e){o=e}},3),n.link(\"../../../../../lib/minimongo\",{createFilterFromQuery(e){c=e}},4),n.link(\"../../../../../lib/onClientMessageReceived\",{onClientMessageReceived(e){d=e}},5),n.link(\"../../../contexts/RoomContext\",{useRoom(e){g=e}},6),n.link(\"./useGetMessageByID\",{useGetMessageByID(e){m=e}},7);let k=e=>{var t;let n={};return e.ids?n._id={$in:e.ids}:n.ts=e.ts,e.excludePinned&&(n.pinned={$ne:!0}),e.ignoreDiscussion&&(n.drid={$exists:!1}),null!==(t=e.users)&&void 0!==t&&t.length&&(n[\"u.username\"]={$in:e.users}),c(n)},v=()=>{let e=i(\"room-messages\"),t=i(\"notify-room\");return l((n,i)=>{let{onMutate:s,onDelete:r}=i,l=e(n.rid,e=>{n._id===e._id&&(null==s||s(e))}),u=t(\"\".concat(n.rid,\"/deleteMessage\"),e=>{n._id===e._id&&(null==r||r())}),a=t(\"\".concat(n.rid,\"/deleteMessageBulk\"),e=>{let t=k(e);t(n)&&(null==r||r())});return()=>{l(),u(),a()}},[t,e])},y=function(e){let{onDelete:t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=g(),i=m(),l=v(),c=s(),k=a();return u(()=>()=>{var e;null===(e=k.current)||void 0===e||e.call(k),k.current=void 0},[e]),r([\"rooms\",n._id,\"threads\",e,\"main-message\"],async n=>{let{queryKey:s}=n,r=await i(e);if(!r)throw Error(\"Invalid main message\");let u=o({wait:1e4})(()=>{c.invalidateQueries(s,{exact:!0})});return k.current=k.current||l(r,{onMutate:async e=>{let t=await d(e);c.setQueryData(s,()=>t),u()},onDelete:()=>{null==t||t(),c.invalidateQueries(s,{exact:!0})}}),r})}}","map":"{\"version\":3,\"sources\":[\"client/views/room/contextualBar/Threads/hooks/useThreadMainMessageQuery.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage, IThreadMainMessage } from '@rocket.chat/core-typings';\\nimport { useStream } from '@rocket.chat/ui-contexts';\\nimport type { UseQueryResult } from '@tanstack/react-query';\\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\\nimport { useCallback, useEffect, useRef } from 'react';\\n\\nimport { withDebouncing } from '../../../../../../lib/utils/highOrderFunctions';\\nimport type { FieldExpression, Query } from '../../../../../lib/minimongo';\\nimport { createFilterFromQuery } from '../../../../../lib/minimongo';\\nimport { onClientMessageReceived } from '../../../../../lib/onClientMessageReceived';\\nimport { useRoom } from '../../../contexts/RoomContext';\\nimport { useGetMessageByID } from './useGetMessageByID';\\n\\ntype RoomMessagesRidEvent = IMessage;\\n\\ntype NotifyRoomRidDeleteMessageBulkEvent = {\\n\\trid: IMessage['rid'];\\n\\texcludePinned: boolean;\\n\\tignoreDiscussion: boolean;\\n\\tts: FieldExpression<Date>;\\n\\tusers: string[];\\n\\tids?: string[]; // message ids have priority over ts\\n\\tshowDeletedStatus?: boolean;\\n};\\n\\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\\n\\tconst query: Query<IMessage> = {};\\n\\n\\tif (params.ids) {\\n\\t\\tquery._id = { $in: params.ids };\\n\\t} else {\\n\\t\\tquery.ts = params.ts;\\n\\t}\\n\\n\\tif (params.excludePinned) {\\n\\t\\tquery.pinned = { $ne: true };\\n\\t}\\n\\n\\tif (params.ignoreDiscussion) {\\n\\t\\tquery.drid = { $exists: false };\\n\\t}\\n\\tif (params.users?.length) {\\n\\t\\tquery['u.username'] = { $in: params.users };\\n\\t}\\n\\n\\treturn createFilterFromQuery<IMessage>(query);\\n};\\n\\nconst useSubscribeToMessage = () => {\\n\\tconst subscribeToRoomMessages = useStream('room-messages');\\n\\tconst subscribeToNotifyRoom = useStream('notify-room');\\n\\n\\treturn useCallback(\\n\\t\\t(message: IMessage, { onMutate, onDelete }: { onMutate?: (message: IMessage) => void; onDelete?: () => void }) => {\\n\\t\\t\\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages(message.rid, (event: RoomMessagesRidEvent) => {\\n\\t\\t\\t\\tif (message._id === event._id) onMutate?.(event);\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom(`${message.rid}/deleteMessage`, (event) => {\\n\\t\\t\\t\\tif (message._id === event._id) onDelete?.();\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(`${message.rid}/deleteMessageBulk`, (params) => {\\n\\t\\t\\t\\tconst matchDeleteCriteria = createDeleteCriteria(params);\\n\\t\\t\\t\\tif (matchDeleteCriteria(message)) onDelete?.();\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn () => {\\n\\t\\t\\t\\tunsubscribeFromRoomMessages();\\n\\t\\t\\t\\tunsubscribeFromDeleteMessage();\\n\\t\\t\\t\\tunsubscribeFromDeleteMessageBulk();\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\t[subscribeToNotifyRoom, subscribeToRoomMessages],\\n\\t);\\n};\\n\\nexport const useThreadMainMessageQuery = (\\n\\ttmid: IMessage['_id'],\\n\\t{ onDelete }: { onDelete?: () => void } = {},\\n): UseQueryResult<IThreadMainMessage, Error> => {\\n\\tconst room = useRoom();\\n\\n\\tconst getMessage = useGetMessageByID();\\n\\tconst subscribeToMessage = useSubscribeToMessage();\\n\\n\\tconst queryClient = useQueryClient();\\n\\tconst unsubscribeRef = useRef<(() => void) | undefined>();\\n\\n\\tuseEffect(() => {\\n\\t\\treturn () => {\\n\\t\\t\\tunsubscribeRef.current?.();\\n\\t\\t\\tunsubscribeRef.current = undefined;\\n\\t\\t};\\n\\t}, [tmid]);\\n\\n\\treturn useQuery(['rooms', room._id, 'threads', tmid, 'main-message'] as const, async ({ queryKey }) => {\\n\\t\\tconst mainMessage = await getMessage(tmid);\\n\\n\\t\\tif (!mainMessage) {\\n\\t\\t\\tthrow new Error('Invalid main message');\\n\\t\\t}\\n\\n\\t\\tconst debouncedInvalidate = withDebouncing({ wait: 10000 })(() => {\\n\\t\\t\\tqueryClient.invalidateQueries(queryKey, { exact: true });\\n\\t\\t});\\n\\n\\t\\tunsubscribeRef.current =\\n\\t\\t\\tunsubscribeRef.current ||\\n\\t\\t\\tsubscribeToMessage(mainMessage, {\\n\\t\\t\\t\\tonMutate: async (message) => {\\n\\t\\t\\t\\t\\tconst msg = await onClientMessageReceived(message);\\n\\t\\t\\t\\t\\tqueryClient.setQueryData(queryKey, () => msg);\\n\\t\\t\\t\\t\\tdebouncedInvalidate();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tonDelete: () => {\\n\\t\\t\\t\\t\\tonDelete?.();\\n\\t\\t\\t\\t\\tqueryClient.invalidateQueries(queryKey, { exact: true });\\n\\t\\t\\t\\t},\\n\\t\\t\\t});\\n\\n\\t\\treturn mainMessage;\\n\\t});\\n};\\n\",null],\"names\":[\"useStream\",\"useQueryClient\",\"useQuery\",\"useCallback\",\"useEffect\",\"useRef\",\"withDebouncing\",\"createFilterFromQuery\",\"onClientMessageReceived\",\"useRoom\",\"useGetMessageByID\",\"module\",\"export\",\"useThreadMainMessageQuery\",\"link\",\"v\",\"createDeleteCriteria\",\"params\",\"_params$users\",\"query\",\"ids\",\"_id\",\"$in\",\"ts\",\"excludePinned\",\"pinned\",\"$ne\",\"ignoreDiscussion\",\"drid\",\"$exists\",\"users\",\"length\",\"useSubscribeToMessage\",\"subscribeToRoomMessages\",\"subscribeToNotifyRoom\",\"message\",\"_ref\",\"onMutate\",\"onDelete\",\"unsubscribeFromRoomMessages\",\"rid\",\"event\",\"unsubscribeFromDeleteMessage\",\"concat\",\"unsubscribeFromDeleteMessageBulk\",\"matchDeleteCriteria\",\"tmid\",\"arguments\",\"undefined\",\"room\",\"getMessage\",\"subscribeToMessage\",\"queryClient\",\"unsubscribeRef\",\"_unsubscribeRef$curre\",\"current\",\"call\",\"_ref2\",\"queryKey\",\"mainMessage\",\"Error\",\"debouncedInvalidate\",\"wait\",\"invalidateQueries\",\"exact\",\"msg\",\"setQueryData\"],\"mappings\":\"2BACqDA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAArDC,EAAOC,MAAE,CAAA,CAAAC,0BAAiBA,IAAAA,CAA2B,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAd,UAAAe,CAAA,EAAAf,EAAAe,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,wBAAA,CAAAb,eAAAc,CAAA,EAAAd,EAAAc,CAAA,EAAAb,SAAAa,CAAA,EAAAb,EAAAa,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,QAAA,CAAAX,YAAAY,CAAA,EAAAZ,EAAAY,CAAA,EAAAX,UAAAW,CAAA,EAAAX,EAAAW,CAAA,EAAAV,OAAAU,CAAA,EAAAV,EAAAU,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,iDAAA,CAAAR,eAAAS,CAAA,EAAAT,EAAAS,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,+BAAA,CAAAP,sBAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,6CAAA,CAAAN,wBAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gCAAA,CAAAL,QAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,sBAAA,CAAAJ,kBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAwBrD,IAAMC,EAAwBC,IAAiF,IAAAC,EAC9G,IAAMC,EAAyB,CAAA,EAmB/B,OAjBIF,EAAOG,GAAG,CACbD,EAAME,GAAG,CAAG,CAAEC,IAAKL,EAAOG,GAAAA,AAAG,EAE7BD,EAAMI,EAAE,CAAGN,EAAOM,EAAE,CAGjBN,EAAOO,aAAa,EACvBL,CAAAA,EAAMM,MAAM,CAAG,CAAEC,IAAK,CAAA,CAAI,CAAA,EAGvBT,EAAOU,gBAAgB,EAC1BR,CAAAA,EAAMS,IAAI,CAAG,CAAEC,QAAS,CAAA,CAAK,CAAA,EAEd,OAAhBX,CAAAA,EAAID,EAAOa,KAAK,AAALA,GAAKZ,AAAA,KAAA,IAAAA,GAAZA,EAAca,MAAM,EACvBZ,CAAAA,CAAK,CAAC,aAAa,CAAG,CAAEG,IAAKL,EAAOa,KAAAA,AAAK,CAAA,EAGnCvB,EAAgCY,EACxC,EAEMa,EAAwBA,KAC7B,IAAMC,EAA0BjC,EAAU,iBACpCkC,EAAwBlC,EAAU,eAExC,OAAOG,EACN,CAACgC,EAAiBC,KAA+F,GAA7F,CAAEC,SAAAA,CAAQ,CAAEC,SAAAA,CAAAA,CAA6E,CAAAF,EACtGG,EAA8BN,EAAwBE,EAAQK,GAAG,CAAGC,IACrEN,EAAQd,GAAG,GAAKoB,EAAMpB,GAAG,EAAEgB,CAAAA,MAAAA,GAAAA,EAAWI,EAAK,CAChD,GAEMC,EAA+BR,EAAqB,GAAAS,MAAA,CAAIR,EAAQK,GAAG,CAAA,kBAAmBC,IACvFN,EAAQd,GAAG,GAAKoB,EAAMpB,GAAG,EAAEiB,CAAAA,MAAAA,GAAAA,GAAU,CAC1C,GAEMM,EAAmCV,EAAqB,GAAAS,MAAA,CAAIR,EAAQK,GAAG,CAAA,sBAAuBvB,IACnG,IAAM4B,EAAsB7B,EAAqBC,GAC7C4B,EAAoBV,IAAUG,CAAAA,MAAAA,GAAAA,GAAU,CAC7C,GAEA,MAAO,KACNC,IACAG,IACAE,GACD,CACD,EACA,CAACV,EAAuBD,EAAwB,CAElD,EAEapB,EAA4B,SACxCiC,CAAqB,EAEyB,GAD9C,CAAER,SAAAA,CAAAA,CAAQ,CAAAS,UAAAhB,MAAA,CAAA,GAAAgB,AAAAC,KAAAA,IAAAD,SAAA,CAAA,EAAA,CAAAA,SAAA,CAAA,EAAA,CAAgC,CAAA,EAEpCE,EAAOxC,IAEPyC,EAAaxC,IACbyC,EAAqBnB,IAErBoB,EAAcnD,IACdoD,EAAiBhD,IASvB,OAPAD,EAAU,IACF,KAAK,IAAAkD,CACX,AAAsB,QAAtBA,CAAAA,EAAAD,EAAeE,OAAO,AAAPA,GAAOD,AAAA,KAAA,IAAAA,GAAtBA,EAAAE,IAAA,CAAAH,GACAA,EAAeE,OAAO,CAAGP,KAAAA,CAC1B,EACE,CAACF,EAAK,EAEF5C,EAAS,CAAC,QAAS+C,EAAK5B,GAAG,CAAE,UAAWyB,EAAM,eAAwB,CAAE,MAAAW,IAAuB,GAAhB,CAAEC,SAAAA,CAAAA,CAAU,CAAAD,EAC3FE,EAAc,MAAMT,EAAWJ,GAErC,GAAI,CAACa,EACJ,MAAM,AAAIC,MAAM,wBAGjB,IAAMC,EAAsBvD,EAAe,CAAEwD,KAAM,GAAK,GAAI,KAC3DV,EAAYW,iBAAiB,CAACL,EAAU,CAAEM,MAAO,CAAA,CAAI,EACtD,GAgBA,OAdAX,EAAeE,OAAO,CACrBF,EAAeE,OAAO,EACtBJ,EAAmBQ,EAAa,CAC/BtB,SAAU,MAAOF,IAChB,IAAM8B,EAAM,MAAMzD,EAAwB2B,GAC1CiB,EAAYc,YAAY,CAACR,EAAU,IAAMO,GACzCJ,GACD,EACAvB,SAAUA,KACTA,MAAAA,GAAAA,IACAc,EAAYW,iBAAiB,CAACL,EAAU,CAAEM,MAAO,CAAA,CAAI,EACtD,IAGKL,CACR,EACD\"}"}