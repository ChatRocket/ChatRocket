{"code":"function module(e,t,a){let l,n,i,o;a.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){l=e}},0),a.export({useToggleFollowingThreadMutation:()=>u}),a.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){n=e}},0),a.link(\"@tanstack/react-query\",{useMutation(e){i=e},useQueryClient(e){o=e}},1);let u=e=>{let t=n(\"POST\",\"/v1/chat.followMessage\"),a=n(\"POST\",\"/v1/chat.unfollowMessage\"),u=o();return i(async e=>{let{tmid:l,follow:n}=e;if(n){await t({mid:l});return}await a({mid:l})},l(l({},e),{},{onSuccess:async(t,a,l)=>{var n;return await u.invalidateQueries([\"rooms\",a.rid,\"threads\"]),null==e?void 0:null===(n=e.onSuccess)||void 0===n?void 0:n.call(e,t,a,l)}}))}}","map":"{\"version\":3,\"sources\":[\"client/views/room/contextualBar/Threads/hooks/useToggleFollowingThreadMutation.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';\\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\\n\\n// TODO: its core should be moved to the ChatContext\\n\\ntype UseToggleFollowingThreadMutationVariables = {\\n\\trid: IMessage['rid'];\\n\\ttmid: IMessage['_id'];\\n\\tfollow: boolean;\\n};\\n\\nexport const useToggleFollowingThreadMutation = (\\n\\toptions?: Omit<UseMutationOptions<void, Error, UseToggleFollowingThreadMutationVariables>, 'mutationFn'>,\\n): UseMutationResult<void, Error, UseToggleFollowingThreadMutationVariables> => {\\n\\tconst followMessage = useEndpoint('POST', '/v1/chat.followMessage');\\n\\tconst unfollowMessage = useEndpoint('POST', '/v1/chat.unfollowMessage');\\n\\n\\tconst queryClient = useQueryClient();\\n\\n\\treturn useMutation(\\n\\t\\tasync ({ tmid, follow }) => {\\n\\t\\t\\tif (follow) {\\n\\t\\t\\t\\tawait followMessage({ mid: tmid });\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tawait unfollowMessage({ mid: tmid });\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t...options,\\n\\t\\t\\tonSuccess: async (data, variables, context) => {\\n\\t\\t\\t\\tawait queryClient.invalidateQueries(['rooms', variables.rid, 'threads']);\\n\\t\\t\\t\\treturn options?.onSuccess?.(data, variables, context);\\n\\t\\t\\t},\\n\\t\\t},\\n\\t);\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useMutation\",\"useQueryClient\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useToggleFollowingThreadMutation\",\"options\",\"followMessage\",\"unfollowMessage\",\"queryClient\",\"_ref\",\"tmid\",\"follow\",\"mid\",\"onSuccess\",\"data\",\"variables\",\"context\",\"_options$onSuccess\",\"invalidateQueries\",\"rid\",\"call\"],\"mappings\":\"2BACAA,EAAuDC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAC,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAvDH,EAAOI,MAAE,CAAA,CAAAC,iCAAmBA,IAAAA,CAA2B,GAAAL,EAAAC,IAAA,CAAA,2BAAA,CAAAJ,YAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAH,YAAAK,CAAA,EAAAL,EAAAK,CAAA,EAAAJ,eAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAYhD,IAAME,EACZC,IAEA,IAAMC,EAAgBV,EAAY,OAAQ,0BACpCW,EAAkBX,EAAY,OAAQ,4BAEtCY,EAAcV,IAEpB,OAAOD,EACN,MAAAY,IAA2B,GAApB,CAAEC,KAAAA,CAAI,CAAEC,OAAAA,CAAAA,CAAQ,CAAAF,EACtB,GAAIE,EAAQ,CACX,MAAML,EAAc,CAAEM,IAAKF,CAAI,GAC/B,MACD,CAEA,MAAMH,EAAgB,CAAEK,IAAKF,CAAI,EAClC,EAACf,EAAAA,EAAA,CAAA,EAEGU,GAAO,CAAA,EAAA,CACVQ,UAAW,MAAOC,EAAMC,EAAWC,KAAW,IAAAC,EAE7C,OADA,MAAMT,EAAYU,iBAAiB,CAAC,CAAC,QAASH,EAAUI,GAAG,CAAE,UAAU,EAChEd,MAAAA,EAAO,KAAA,EAAA,AAAW,OAAXY,CAAAA,EAAPZ,EAASQ,SAAS,AAATA,GAASI,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAlBA,EAAAG,IAAA,CAAAf,EAAqBS,EAAMC,EAAWC,EAC9C,CAAC,GAGJ\"}"}