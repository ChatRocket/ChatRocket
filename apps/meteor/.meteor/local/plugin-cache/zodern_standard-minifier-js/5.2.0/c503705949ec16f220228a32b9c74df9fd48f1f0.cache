{"code":"Package[\"core-runtime\"].queue(\"accounts-password\",function(){var e=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv;var r=Package[\"accounts-base\"].Accounts,s=Package.sha.SHA256;Package.ejson.EJSON,Package[\"ddp-client\"].DDP;var o=Package.modules.meteorInstall,a=Package.promise.Promise;return{require:o({node_modules:{meteor:{\"accounts-password\":{\"password_client.js\":function o(o,t,n){let d;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){d=e}},0);let i=(e,r)=>{if(r)r(e);else throw e},c=e=>{let{selector:s,password:o,code:a,callback:t}=e;return\"string\"==typeof s&&(s=s.includes(\"@\")?{email:s}:{username:s}),r.callLoginMethod({methodArguments:[{user:s,password:r._hashPassword(o),code:a}],userCallback:(e,r)=>{e?i(e,t):t&&t(e,r)}}),s};e.loginWithPassword=(e,r,s)=>c({selector:e,password:r,callback:s}),r._hashPassword=e=>({digest:s(e),algorithm:\"sha-256\"}),e.loginWithPasswordAnd2faCode=(r,s,o,a)=>{if(null==o||\"string\"!=typeof o||!o)throw new e.Error(400,\"token is required to use loginWithPasswordAnd2faCode and must be a string\");return c({selector:r,password:s,code:o,callback:a})},r.createUser=(s,o)=>{if(\"string\"!=typeof(s=d({},s)).password)throw Error(\"options.password must be a string\");if(!s.password)return i(new e.Error(400,\"Password may not be empty\"),o);s.password=r._hashPassword(s.password),r.callLoginMethod({methodName:\"createUser\",methodArguments:[s],userCallback:o})},r.createUserAsync=e=>new a((s,o)=>r.createUser(e,e=>{e?o(e):s()})),r.changePassword=(s,o,a)=>e.user()?\"string\"==typeof o||o instanceof String?o?void r.connection.apply(\"changePassword\",[s?r._hashPassword(s):null,r._hashPassword(o)],(e,r)=>{e||!r?i(e||Error(\"No result from changePassword.\"),a):a&&a()}):i(new e.Error(400,\"Password may not be empty\"),a):i(new e.Error(400,\"Password must be a string\"),a):i(Error(\"Must be logged in to change password.\"),a),r.forgotPassword=(s,o)=>{if(!s.email)return i(new e.Error(400,\"Must pass options.email\"),o);o?r.connection.call(\"forgotPassword\",s,o):r.connection.call(\"forgotPassword\",s)},r.resetPassword=(s,o,a)=>\"string\"==typeof s||s instanceof String?\"string\"==typeof o||o instanceof String?o?void r.callLoginMethod({methodName:\"resetPassword\",methodArguments:[s,r._hashPassword(o)],userCallback:a}):i(new e.Error(400,\"Password may not be empty\"),a):i(new e.Error(400,\"Password must be a string\"),a):i(new e.Error(400,\"Token must be a string\"),a),r.verifyEmail=(s,o)=>{if(!s)return i(new e.Error(400,\"Need to pass token\"),o);r.callLoginMethod({methodName:\"verifyEmail\",methodArguments:[s],userCallback:o})}}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/accounts-password/password_client.js\"]}});","map":"{\"version\":3,\"sources\":[\"packages/accounts-password/password_client.js\",\"<anon>\"],\"sourcesContent\":[\"// Used in the various functions below to handle errors consistently\\nconst reportError = (error, callback) => {\\n   if (callback) {\\n     callback(error);\\n   } else {\\n     throw error;\\n   }\\n};\\n\\nconst internalLoginWithPassword = ({ selector, password, code, callback }) => {\\n  if (typeof selector === 'string')\\n    if (!selector.includes('@')) selector = { username: selector };\\n    else selector = { email: selector };\\n  Accounts.callLoginMethod({\\n    methodArguments: [\\n      {\\n        user: selector,\\n        password: Accounts._hashPassword(password),\\n        code,\\n      },\\n    ],\\n    userCallback: (error, result) => {\\n      if (error) {\\n        reportError(error, callback);\\n      } else {\\n        callback && callback(error, result);\\n      }\\n    },\\n  });\\n  return selector;\\n};\\n\\n// Attempt to log in with a password.\\n//\\n// @param selector {String|Object} One of the following:\\n//   - {username: (username)}\\n//   - {email: (email)}\\n//   - a string which may be a username or email, depending on whether\\n//     it contains \\\"@\\\".\\n// @param password {String}\\n// @param callback {Function(error|undefined)}\\n\\n/**\\n * @summary Log the user in with a password.\\n * @locus Client\\n * @param {Object | String} selector\\n *   Either a string interpreted as a username or an email; or an object with a\\n *   single key: `email`, `username` or `id`. Username or email match in a case\\n *   insensitive manner.\\n * @param {String} password The user's password.\\n * @param {Function} [callback] Optional callback.\\n *   Called with no arguments on success, or with a single `Error` argument\\n *   on failure.\\n * @importFromPackage meteor\\n */\\nMeteor.loginWithPassword = (selector, password, callback) => {\\n  return internalLoginWithPassword({ selector, password, callback });\\n};\\n\\nAccounts._hashPassword = password => ({\\n  digest: SHA256(password),\\n  algorithm: \\\"sha-256\\\"\\n});\\n\\n\\n/**\\n * @summary Log the user in with a password and token.\\n * @locus Client\\n * @param {Object | String} selector\\n *   Either a string interpreted as a username or an email; or an object with a\\n *   single key: `email`, `username` or `id`. Username or email match in a case\\n *   insensitive manner.\\n * @param {String} password The user's password.\\n * @param {String} token Token provide by the user's authenticator app.\\n * @param {Function} [callback] Optional callback.\\n *   Called with no arguments on success, or with a single `Error` argument\\n *   on failure.\\n * @importFromPackage meteor\\n */\\n\\nMeteor.loginWithPasswordAnd2faCode = (selector, password, code, callback) => {\\n  if (code == null || typeof code !== 'string' || !code) {\\n    throw new Meteor.Error(\\n      400,\\n      'token is required to use loginWithPasswordAnd2faCode and must be a string'\\n    );\\n  }\\n  return internalLoginWithPassword({ selector, password, code, callback });\\n};\\n\\n\\n// Attempt to log in as a new user.\\n\\n/**\\n * @summary Create a new user.\\n * @locus Anywhere\\n * @param {Object} options\\n * @param {String} options.username A unique name for this user.\\n * @param {String} options.email The user's email address.\\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\\n * @param {Object} options.profile The user's profile, typically including the `name` field.\\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.createUser = (options, callback) => {\\n  options = { ...options }; // we'll be modifying options\\n\\n  if (typeof options.password !== 'string')\\n    throw new Error(\\\"options.password must be a string\\\");\\n  if (!options.password) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  // Replace password with the hashed password.\\n  options.password = Accounts._hashPassword(options.password);\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'createUser',\\n    methodArguments: [options],\\n    userCallback: callback\\n  });\\n};\\n\\n\\n/**\\n * @summary Create a new user and returns a promise of its result.\\n * @locus Anywhere\\n * @param {Object} options\\n * @param {String} options.username A unique name for this user.\\n * @param {String} options.email The user's email address.\\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\\n * @param {Object} options.profile The user's profile, typically including the `name` field.\\n * @importFromPackage accounts-base\\n */\\nAccounts.createUserAsync = (options) => {\\n  return new Promise((resolve, reject) =>\\n    Accounts.createUser(options, (e) => {\\n      if (e) {\\n        reject(e);\\n      } else {\\n        resolve();\\n      }\\n    })\\n  );\\n};\\n\\n// Change password. Must be logged in.\\n//\\n// @param oldPassword {String|null} By default servers no longer allow\\n//   changing password without the old password, but they could so we\\n//   support passing no password to the server and letting it decide.\\n// @param newPassword {String}\\n// @param callback {Function(error|undefined)}\\n\\n/**\\n * @summary Change the current user's password. Must be logged in.\\n * @locus Client\\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\\n  if (!Meteor.user()) {\\n    return reportError(new Error(\\\"Must be logged in to change password.\\\"), callback);\\n  }\\n\\n  if (!(typeof newPassword === \\\"string\\\" || newPassword instanceof String)) {\\n    return reportError(new Meteor.Error(400, \\\"Password must be a string\\\"), callback);\\n  }\\n\\n  if (!newPassword) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  Accounts.connection.apply(\\n    'changePassword',\\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\\n     Accounts._hashPassword(newPassword)],\\n    (error, result) => {\\n    if (error || !result) {\\n        // A normal error, not an error telling us to upgrade to bcrypt\\n        reportError(\\n          error || new Error(\\\"No result from changePassword.\\\"), callback);\\n      } else {\\n        callback && callback();\\n      }\\n    }\\n  );\\n};\\n\\n// Sends an email to a user with a link that can be used to reset\\n// their password\\n//\\n// @param options {Object}\\n//   - email: (email)\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Request a forgot password email.\\n * @locus Client\\n * @param {Object} options\\n * @param {String} options.email The email address to send a password reset link.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.forgotPassword = (options, callback) => {\\n  if (!options.email) {\\n    return reportError(new Meteor.Error(400, \\\"Must pass options.email\\\"), callback);\\n  }\\n\\n  if (callback) {\\n    Accounts.connection.call(\\\"forgotPassword\\\", options, callback);\\n  } else {\\n    Accounts.connection.call(\\\"forgotPassword\\\", options);\\n  }\\n};\\n\\n// Resets a password based on a token originally created by\\n// Accounts.forgotPassword, and then logs in the matching user.\\n//\\n// @param token {String}\\n// @param newPassword {String}\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards if the user doesn't have 2FA enabled.\\n * @locus Client\\n * @param {String} token The token retrieved from the reset password URL.\\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.resetPassword = (token, newPassword, callback) => {\\n  if (!(typeof token === \\\"string\\\" || token instanceof String)) {\\n    return reportError(new Meteor.Error(400, \\\"Token must be a string\\\"), callback);\\n  }\\n\\n  if (!(typeof newPassword === \\\"string\\\" || newPassword instanceof String)) {\\n    return reportError(new Meteor.Error(400, \\\"Password must be a string\\\"), callback);\\n  }\\n\\n  if (!newPassword) {\\n    return reportError(new Meteor.Error(400, \\\"Password may not be empty\\\"), callback);\\n  }\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'resetPassword',\\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\\n    userCallback: callback});\\n};\\n\\n// Verifies a user's email address based on a token originally\\n// created by Accounts.sendVerificationEmail\\n//\\n// @param token {String}\\n// @param callback (optional) {Function(error|undefined)}\\n\\n/**\\n * @summary Marks the user's email address as verified. Logs the user in afterwards if the user doesn't have 2FA enabled.\\n * @locus Client\\n * @param {String} token The token retrieved from the verification URL.\\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\\n * @importFromPackage accounts-base\\n */\\nAccounts.verifyEmail = (token, callback) => {\\n  if (!token) {\\n    return reportError(new Meteor.Error(400, \\\"Need to pass token\\\"), callback);\\n  }\\n\\n  Accounts.callLoginMethod({\\n    methodName: 'verifyEmail',\\n    methodArguments: [token],\\n    userCallback: callback});\\n};\\n\",null],\"names\":[\"_objectSpread\",\"module\",\"link\",\"default\",\"v\",\"reportError\",\"error\",\"callback\",\"internalLoginWithPassword\",\"_ref\",\"selector\",\"password\",\"code\",\"includes\",\"email\",\"username\",\"Accounts\",\"callLoginMethod\",\"methodArguments\",\"user\",\"_hashPassword\",\"userCallback\",\"result\",\"Meteor\",\"loginWithPassword\",\"digest\",\"SHA256\",\"algorithm\",\"loginWithPasswordAnd2faCode\",\"Error\",\"createUser\",\"options\",\"methodName\",\"createUserAsync\",\"Promise\",\"resolve\",\"reject\",\"e\",\"changePassword\",\"oldPassword\",\"newPassword\",\"String\",\"connection\",\"apply\",\"forgotPassword\",\"call\",\"resetPassword\",\"token\",\"verifyEmail\"],\"mappings\":\"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\"}"}