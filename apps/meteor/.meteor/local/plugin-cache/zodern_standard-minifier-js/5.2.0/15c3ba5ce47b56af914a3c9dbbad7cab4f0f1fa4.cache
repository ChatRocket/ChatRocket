{"code":"function module(n,e,t){t.export({useUnreadMessages:function(){return o}}),t.link(\"@rocket.chat/ui-contexts\",{useSession:function(n){u=n}},0),t.link(\"react-i18next\",{useTranslation:function(n){r=n}},1);var u,r,o=function(){var n=r().t,e=u(\"unread\");return function(){if(\"number\"==typeof e)return n(\"unread_messages_counter\",{count:e})}()}}","map":"{\"version\":3,\"sources\":[\"client/views/root/hooks/useUnreadMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSession } from '@rocket.chat/ui-contexts';\\nimport { useTranslation } from 'react-i18next';\\n\\nexport const useUnreadMessages = (): string | undefined => {\\n\\tconst { t } = useTranslation();\\n\\tconst unreadMessages = useSession('unread') as number | '' | '999+' | 'â€¢';\\n\\n\\treturn (() => {\\n\\t\\t// TODO: remove this when we have a better way to handle this\\n\\t\\tif (typeof unreadMessages !== 'number') {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\treturn t('unread_messages_counter', { count: unreadMessages });\\n\\t})();\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useUnreadMessages\",\"link\",\"useSession\",\"v\",\"useTranslation\",\"t\",\"_useTranslation\",\"unreadMessages\",\"count\"],\"mappings\":\"uBAAAA,EAAOC,MAAE,CAAA,CAAAC,kBAAkB,WAAA,OAAAA,CAA2B,CAAA,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAC,WAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,gBAAA,CAAAG,eAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAG/C,IAH+CD,EAAAE,EAGzCJ,EAAoB,WAChC,IAAQK,EAACC,AAAKF,IAANC,CAAC,CACHE,EAAiBL,EAAW,UAElC,OAAQ,WAEP,GAAI,AAA0B,UAA1B,OAAOK,EAIX,OAAOF,EAAE,0BAA2B,CAAEG,MAAOD,CAAc,EAC5D,GACD\"}"}