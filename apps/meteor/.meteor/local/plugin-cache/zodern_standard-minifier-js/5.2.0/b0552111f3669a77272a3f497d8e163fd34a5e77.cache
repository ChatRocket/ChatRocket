{"code":"function module(r,e,t){let o,l;t.export({useFieldError:()=>a}),t.link(\"react-hook-form\",{get(r){o=r},useFormState(r){l=r}},0);let a=r=>{let{control:e,name:t}=r,a=Array.isArray(t)?t:[t],{errors:u}=l({control:e,name:t});return a.map(r=>o(u,r))}}","map":"{\"version\":3,\"sources\":[\"client/views/omnichannel/triggers/hooks/useFieldError.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { Control, FieldError, FieldPath, FieldValues } from 'react-hook-form';\\nimport { get, useFormState } from 'react-hook-form';\\n\\ntype UseFieldErrorProps<TFieldValues extends FieldValues> = {\\n\\tcontrol: Control<TFieldValues>;\\n\\tname: FieldPath<TFieldValues> | FieldPath<TFieldValues>[];\\n};\\n\\nexport const useFieldError = <TFieldValues extends FieldValues>({ control, name }: UseFieldErrorProps<TFieldValues>) => {\\n\\tconst names = Array.isArray(name) ? name : [name];\\n\\tconst { errors } = useFormState<TFieldValues>({ control, name });\\n\\treturn names.map<FieldError | undefined>((name) => get(errors, name));\\n};\\n\",null],\"names\":[\"get\",\"useFormState\",\"module\",\"export\",\"useFieldError\",\"link\",\"v\",\"_ref\",\"control\",\"name\",\"names\",\"Array\",\"isArray\",\"errors\",\"map\"],\"mappings\":\"2BACoDA,EAAAC,EAApDC,EAAOC,MAAK,CAAE,CAAAC,cAAcA,IAAAA,CAAM,GAAkBF,EAAAG,IAAA,CAAA,kBAAA,CAAAL,IAAAM,CAAA,EAAAN,EAAAM,CAAA,EAAAL,aAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAO7C,IAAMF,EAAgBG,IAA0F,GAAvD,CAAEC,QAAAA,CAAO,CAAEC,KAAAA,CAAAA,CAAwC,CAAAF,EAC5GG,EAAQC,MAAMC,OAAO,CAACH,GAAQA,EAAO,CAACA,EAAK,CAC3C,CAAEI,OAAAA,CAAAA,CAAQ,CAAGZ,EAA2B,CAAEO,QAAAA,EAASC,KAAAA,CAAI,GAC7D,OAAOC,EAAMI,GAAG,CAA0BL,GAAST,EAAIa,EAAQJ,GAChE\"}"}