{"code":"Package[\"core-runtime\"].queue(\"random\",function(){Package.meteor.Meteor,Package.meteor.global,Package.meteor.meteorEnv;var e,n=Package.modules.meteorInstall;return Package.modules.meteorBabelHelpers,Package.promise.Promise,Package[\"ecmascript-runtime-client\"].Symbol,Package[\"ecmascript-runtime-client\"].Map,Package[\"ecmascript-runtime-client\"].Set,{export:function(){return{Random:e}},require:n({node_modules:{meteor:{random:{\"main_client.js\":function e(e,n,t){t.export({Random:function(){return u}}),t.link(\"./BrowserRandomGenerator\",{default:function(e){r=e}},0),t.link(\"./createAleaGenerator\",{default:function(e){o=e}},1),t.link(\"./createRandom\",{default:function(e){i=e}},2),a=\"undefined\"!=typeof window&&window.crypto&&window.crypto.getRandomValues?new r:o();var r,o,i,a,u=i(a)},\"AbstractRandomGenerator.js\":function e(e,n,t){t.export({default:function(){return r}}),t.link(\"meteor/meteor\",{Meteor:function(e){}},0);var r=function(){function e(){}var n=e.prototype;return n.fraction=function(){throw Error(\"Unknown random generator type\")},n.hexString=function(e){return this._randomString(e,\"0123456789abcdef\")},n._randomString=function(e,n){for(var t=\"\",r=0;r<e;r++)t+=this.choice(n);return t},n.id=function(e){return void 0===e&&(e=17),this._randomString(e,\"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\")},n.secret=function(e){return void 0===e&&(e=43),this._randomString(e,\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_\")},n.choice=function(e){var n=Math.floor(this.fraction()*e.length);return\"string\"==typeof e?e.substr(n,1):e[n]},e}()},\"AleaRandomGenerator.js\":function e(e,n,t){t.link(\"@babel/runtime/helpers/inheritsLoose\",{default:function(e){r=e}},0),t.export({default:function(){return i}}),t.link(\"./AbstractRandomGenerator\",{default:function(e){o=e}},0);var r,o,i=function(e){function n(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.seeds,o=void 0===r?[]:r;if(n=e.call(this)||this,!o)throw Error(\"No seeds were provided for Alea PRNG\");return n.alea=function(e){var n,t,r=0,o=0,i=0,a=1;0===e.length&&(e=[+new Date]);var u=(n=4022871197,(t=function(e){e=e.toString();for(var t=0;t<e.length;t++){var r=.02519603282416938*(n+=e.charCodeAt(t));n=r>>>0,r-=n,r*=n,n=r>>>0,r-=n,n+=4294967296*r}return(n>>>0)*23283064365386963e-26}).version=\"Mash 0.9\",t);r=u(\" \"),o=u(\" \"),i=u(\" \");for(var c=0;c<e.length;c++)(r-=u(e[c]))<0&&(r+=1),(o-=u(e[c]))<0&&(o+=1),(i-=u(e[c]))<0&&(i+=1);u=null;var d=function(){var e=2091639*r+23283064365386963e-26*a;return r=o,o=i,i=e-(a=0|e)};return d.uint32=function(){return 4294967296*d()},d.fract53=function(){return d()+(2097152*d()|0)*11102230246251565e-32},d.version=\"Alea 0.9\",d.args=e,d}(o),n}return r(n,e),n.prototype.fraction=function(){return this.alea()},n}(o)},\"BrowserRandomGenerator.js\":function e(e,n,t){t.link(\"@babel/runtime/helpers/inheritsLoose\",{default:function(e){r=e}},0),t.export({default:function(){return i}}),t.link(\"./AbstractRandomGenerator\",{default:function(e){o=e}},0);var r,o,i=function(e){function n(){return e.apply(this,arguments)||this}return r(n,e),n.prototype.fraction=function(){var e=new Uint32Array(1);return window.crypto.getRandomValues(e),23283064365386963e-26*e[0]},n}(o)},\"createAleaGenerator.js\":function e(e,n,t){t.export({default:function(){return u}}),t.link(\"./AleaRandomGenerator\",{default:function(e){r=e}},0);var r,o=\"undefined\"!=typeof window&&window.innerHeight||\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.clientHeight||\"undefined\"!=typeof document&&document.body&&document.body.clientHeight||1,i=\"undefined\"!=typeof window&&window.innerWidth||\"undefined\"!=typeof document&&document.documentElement&&document.documentElement.clientWidth||\"undefined\"!=typeof document&&document.body&&document.body.clientWidth||1,a=\"undefined\"!=typeof navigator&&navigator.userAgent||\"\";function u(){return new r({seeds:[new Date,o,i,a,Math.random()]})}},\"createRandom.js\":function e(e,n,t){var r,o;function i(e){return e.createWithSeeds=function(){for(var e=arguments.length,n=Array(e),t=0;t<e;t++)n[t]=arguments[t];if(0===n.length)throw Error(\"No seeds were provided\");return new r({seeds:n})},e.insecure=o(),e}t.export({default:function(){return i}}),t.link(\"./AleaRandomGenerator\",{default:function(e){r=e}},0),t.link(\"./createAleaGenerator\",{default:function(e){o=e}},1)}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/random/main_client.js\"],mainModulePath:\"/node_modules/meteor/random/main_client.js\"}});","map":"{\"version\":3,\"sources\":[\"packages/random/main_client.js\",\"packages/random/AbstractRandomGenerator.js\",\"packages/random/AleaRandomGenerator.js\",\"packages/random/BrowserRandomGenerator.js\",\"packages/random/createAleaGenerator.js\",\"packages/random/createRandom.js\",\"<anon>\"],\"sourcesContent\":[\"// We use cryptographically strong PRNGs (window.crypto.getRandomValues())\\n// when available. If these PRNGs fail, we fall back to the Alea PRNG, which is \\n// not cryptographically strong, and we seed it with various sources \\n// such as the date, Math.random, and window size on the client.\\n// When using window.crypto.getRandomValues() or alea, the primitive is fraction \\n// and we use that to construct hex string.\\n\\nimport BrowserRandomGenerator from './BrowserRandomGenerator';\\nimport createAleaGeneratorWithGeneratedSeed from './createAleaGenerator';\\nimport createRandom from './createRandom';\\n\\nlet generator;\\nif (typeof window !== 'undefined' && window.crypto &&\\n  window.crypto.getRandomValues) {\\n  generator = new BrowserRandomGenerator();\\n} else {\\n  // On IE 10 and below, there's no browser crypto API\\n  // available. Fall back to Alea\\n  //\\n  // XXX looks like at the moment, we use Alea in IE 11 as well,\\n  // which has `window.msCrypto` instead of `window.crypto`.\\n  generator = createAleaGeneratorWithGeneratedSeed();\\n}\\n\\n\\nexport const Random = createRandom(generator);\\n\",\"// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,\\n// window.crypto.getRandomValues() in the browser) when available. If these\\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically\\n// strong, and we seed it with various sources such as the date, Math.random,\\n// and window size on the client.  When using crypto.getRandomValues(), our\\n// primitive is hexString(), from which we construct fraction(). When using\\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use\\n// that to construct hex string.\\n\\nimport { Meteor } from 'meteor/meteor';\\n\\nconst UNMISTAKABLE_CHARS = '23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz';\\nconst BASE64_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' +\\n  '0123456789-_';\\n\\n// `type` is one of `RandomGenerator.Type` as defined below.\\n//\\n// options:\\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array\\n//   whose items will be `toString`ed and used as the seed to the Alea\\n//   algorithm\\nexport default class RandomGenerator {\\n\\n  /**\\n   * @name Random.fraction\\n   * @summary Return a number between 0 and 1, like `Math.random`.\\n   * @locus Anywhere\\n   */\\n  fraction () {\\n    throw new Error(`Unknown random generator type`);\\n  }\\n\\n  /**\\n   * @name Random.hexString\\n   * @summary Return a random string of `n` hexadecimal digits.\\n   * @locus Anywhere\\n   * @param {Number} n Length of the string\\n   */\\n  hexString (digits) {\\n    return this._randomString(digits, '0123456789abcdef');\\n  }\\n\\n  _randomString (charsCount, alphabet) {\\n    let result = '';\\n    for (let i = 0; i < charsCount; i++) {\\t\\n      result += this.choice(alphabet);\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @name Random.id\\n   * @summary Return a unique identifier, such as `\\\"Jjwjg6gouWLXhMGKW\\\"`, that is\\n   * likely to be unique in the whole world.\\n   * @locus Anywhere\\n   * @param {Number} [n] Optional length of the identifier in characters\\n   *   (defaults to 17)\\n   */\\n  id (charsCount) {\\n    // 17 characters is around 96 bits of entropy, which is the amount of\\n    // state in the Alea PRNG.\\n    if (charsCount === undefined) {\\n      charsCount = 17;\\n    }\\n\\n    return this._randomString(charsCount, UNMISTAKABLE_CHARS);\\n  }\\n\\n  /**\\n   * @name Random.secret\\n   * @summary Return a random string of printable characters with 6 bits of\\n   * entropy per character. Use `Random.secret` for security-critical secrets\\n   * that are intended for machine, rather than human, consumption.\\n   * @locus Anywhere\\n   * @param {Number} [n] Optional length of the secret string (defaults to 43\\n   *   characters, or 256 bits of entropy)\\n   */\\n  secret (charsCount) {\\n    // Default to 256 bits of entropy, or 43 characters at 6 bits per\\n    // character.\\n    if (charsCount === undefined) {\\n      charsCount = 43;\\n    }\\n\\n    return this._randomString(charsCount, BASE64_CHARS);\\n  }\\n\\n  /**\\n   * @name Random.choice\\n   * @summary Return a random element of the given array or string.\\n   * @locus Anywhere\\n   * @param {Array|String} arrayOrString Array or string to choose from\\n   */\\n  choice (arrayOrString) {\\n    const index = Math.floor(this.fraction() * arrayOrString.length);\\n    if (typeof arrayOrString === 'string') {\\n      return arrayOrString.substr(index, 1);\\n    }\\n    return arrayOrString[index];\\n  }\\n}\\n\",\"import RandomGenerator from './AbstractRandomGenerator';\\n\\n// Alea PRNG, which is not cryptographically strong\\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\\n// for a full discussion and Alea implementation.\\nfunction Alea(seeds) {\\n  function Mash() {\\n    let n = 0xefc8249d;\\n\\n    const mash = (data) => {\\n      data = data.toString();\\n      for (let i = 0; i < data.length; i++) {\\n        n += data.charCodeAt(i);\\n        let h = 0.02519603282416938 * n;\\n        n = h >>> 0;\\n        h -= n;\\n        h *= n;\\n        n = h >>> 0;\\n        h -= n;\\n        n += h * 0x100000000; // 2^32\\n      }\\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\\n    };\\n\\n    mash.version = 'Mash 0.9';\\n    return mash;\\n  }\\n\\n  let s0 = 0;\\n  let s1 = 0;\\n  let s2 = 0;\\n  let c = 1;\\n  if (seeds.length === 0) {\\n    seeds = [+new Date];\\n  }\\n  let mash = Mash();\\n  s0 = mash(' ');\\n  s1 = mash(' ');\\n  s2 = mash(' ');\\n\\n  for (let i = 0; i < seeds.length; i++) {\\n    s0 -= mash(seeds[i]);\\n    if (s0 < 0) {\\n      s0 += 1;\\n    }\\n    s1 -= mash(seeds[i]);\\n    if (s1 < 0) {\\n      s1 += 1;\\n    }\\n    s2 -= mash(seeds[i]);\\n    if (s2 < 0) {\\n      s2 += 1;\\n    }\\n  }\\n  mash = null;\\n\\n  const random = () => {\\n    const t = (2091639 * s0) + (c * 2.3283064365386963e-10); // 2^-32\\n    s0 = s1;\\n    s1 = s2;\\n    return s2 = t - (c = t | 0);\\n  };\\n\\n  random.uint32 = () => random() * 0x100000000; // 2^32\\n  random.fract53 = () => random() +\\n        ((random() * 0x200000 | 0) * 1.1102230246251565e-16); // 2^-53\\n\\n  random.version = 'Alea 0.9';\\n  random.args = seeds;\\n  return random;\\n}\\n\\n// options:\\n// - seeds: an array\\n//   whose items will be `toString`ed and used as the seed to the Alea\\n//   algorithm\\nexport default class AleaRandomGenerator extends RandomGenerator {\\n  constructor ({ seeds = [] } = {}) {\\n    super();\\n    if (!seeds) {\\n      throw new Error('No seeds were provided for Alea PRNG');\\n    }\\n    this.alea = Alea(seeds);\\n  }\\n\\n  /**\\n   * @name Random.fraction\\n   * @summary Return a number between 0 and 1, like `Math.random`.\\n   * @locus Anywhere\\n   */\\n  fraction () {\\n    return this.alea();\\n  }\\n}\\n\",\"import RandomGenerator from './AbstractRandomGenerator';\\n\\n// cryptographically strong PRNGs available in modern browsers\\nexport default class BrowserRandomGenerator extends RandomGenerator {\\n  /**\\n   * @name Random.fraction\\n   * @summary Return a number between 0 and 1, like `Math.random`.\\n   * @locus Anywhere\\n   */\\n  fraction () {\\n    const array = new Uint32Array(1);\\n    window.crypto.getRandomValues(array);\\n    return array[0] * 2.3283064365386963e-10; // 2^-32\\n  }\\n}\\n\",\"import AleaRandomGenerator from './AleaRandomGenerator';\\n\\n// instantiate RNG.  Heuristically collect entropy from various sources when a\\n// cryptographic PRNG isn't available.\\n\\n// client sources\\nconst height = (typeof window !== 'undefined' && window.innerHeight) ||\\n      (typeof document !== 'undefined'\\n       && document.documentElement\\n       && document.documentElement.clientHeight) ||\\n      (typeof document !== 'undefined'\\n       && document.body\\n       && document.body.clientHeight) ||\\n      1;\\n\\nconst width = (typeof window !== 'undefined' && window.innerWidth) ||\\n      (typeof document !== 'undefined'\\n       && document.documentElement\\n       && document.documentElement.clientWidth) ||\\n      (typeof document !== 'undefined'\\n       && document.body\\n       && document.body.clientWidth) ||\\n      1;\\n\\nconst agent = (typeof navigator !== 'undefined' && navigator.userAgent) || '';\\n\\nexport default function createAleaGenerator() {\\n  return new AleaRandomGenerator({\\n    seeds: [new Date, height, width, agent, Math.random()],\\n  });\\n}\\n\",\"import AleaRandomGenerator from './AleaRandomGenerator'\\nimport createAleaGeneratorWithGeneratedSeed from './createAleaGenerator';\\n\\nexport default function createRandom(generator) {\\n  // Create a non-cryptographically secure PRNG with a given seed (using\\n  // the Alea algorithm)\\n  generator.createWithSeeds = (...seeds) => {\\n    if (seeds.length === 0) {\\n      throw new Error('No seeds were provided');\\n    }\\n    return new AleaRandomGenerator({ seeds });\\n  };\\n\\n  // Used like `Random`, but much faster and not cryptographically\\n  // secure\\n  generator.insecure = createAleaGeneratorWithGeneratedSeed();\\n\\n  return generator;\\n}\\n\",null],\"names\":[\"module\",\"export\",\"Random\",\"link\",\"v\",\"BrowserRandomGenerator\",\"createAleaGeneratorWithGeneratedSeed\",\"createRandom\",\"generator\",\"window\",\"crypto\",\"getRandomValues\",\"RandomGenerator\",\"Meteor\",\"_proto\",\"prototype\",\"fraction\",\"Error\",\"hexString\",\"digits\",\"_randomString\",\"charsCount\",\"alphabet\",\"result\",\"i\",\"choice\",\"id\",\"undefined\",\"secret\",\"arrayOrString\",\"index\",\"Math\",\"floor\",\"length\",\"substr\",\"default\",\"_inheritsLoose\",\"AleaRandomGenerator\",\"_RandomGenerator\",\"_this\",\"_ref\",\"arguments\",\"_ref$seeds\",\"seeds\",\"call\",\"alea\",\"Alea\",\"n\",\"mash\",\"s0\",\"s1\",\"s2\",\"c\",\"Date\",\"data\",\"toString\",\"h\",\"charCodeAt\",\"version\",\"random\",\"t\",\"uint32\",\"fract53\",\"args\",\"apply\",\"array\",\"Uint32Array\",\"createAleaGenerator\",\"height\",\"innerHeight\",\"document\",\"documentElement\",\"clientHeight\",\"body\",\"width\",\"innerWidth\",\"clientWidth\",\"agent\",\"navigator\",\"userAgent\",\"createWithSeeds\",\"_len\",\"Array\",\"_key\",\"insecure\"],\"mappings\":\"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\"}"}