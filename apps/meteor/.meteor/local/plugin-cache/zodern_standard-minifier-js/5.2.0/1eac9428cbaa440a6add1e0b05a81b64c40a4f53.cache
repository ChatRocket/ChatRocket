{"code":"function module(e,o,t){let n,i,a,r,l,s,c,m,d,u,p,R,g,A;t.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){n=e}},0),t.export({PublicRoomType:()=>_}),t.link(\"@rocket.chat/core-typings\",{isRoomFederated(e){i=e}},0),t.link(\"meteor/meteor\",{Meteor(e){a=e}},1),t.link(\"../../../../app/authorization/client\",{hasAtLeastOnePermission(e){r=e}},2),t.link(\"../../../../app/models/client\",{ChatRoom(e){l=e}},3),t.link(\"../../../../app/settings/client\",{settings(e){s=e}},4),t.link(\"../../../../app/utils/client\",{getUserPreference(e){c=e}},5),t.link(\"../../../../app/utils/client/getRoomAvatarURL\",{getRoomAvatarURL(e){m=e}},6),t.link(\"../../../../definition/IRoomTypeConfig\",{RoomSettingsEnum(e){d=e},RoomMemberActions(e){u=e},UiTextContext(e){p=e}},7),t.link(\"../../../../lib/rooms/roomTypes/public\",{getPublicRoomType(e){R=e}},8),t.link(\"../../federation/Federation\",{\"*\"(e){g=e}},9),t.link(\"../roomCoordinator\",{roomCoordinator(e){A=e}},10);let _=R(A);A.add(n(n({},_),{},{label:\"Channels\"}),{allowRoomSettingChange(e,o){if(i(e))return g.isRoomSettingAllowed(e,o);switch(o){case d.BROADCAST:return!!e.broadcast;case d.READ_ONLY:return!e.broadcast;case d.REACT_WHEN_READ_ONLY:return!!(!e.broadcast&&e.ro);case d.E2E:return!1;case d.SYSTEM_MESSAGES:default:return!0}},allowMemberAction:(e,o,t,n)=>i(e)?g.actionAllowed(e,o,t,n):o!==u.BLOCK,roomName:e=>e.prid||i(e)?e.fname:s.get(\"UI_Allow_room_names_with_special_chars\")&&e.fname||e.name,isGroupChat:e=>!0,getUiText(e){switch(e){case p.HIDE_WARNING:return\"Hide_Room_Warning\";case p.LEAVE_WARNING:return\"Leave_Room_Warning\";default:return\"\"}},condition(){let e=c(a.userId(),\"sidebarGroupByType\");return e&&(r([\"view-c-room\",\"view-joined-room\"])||!0===s.get(\"Accounts_AllowAnonymousRead\"))},getAvatarPath:e=>m({roomId:e._id,cache:e.avatarETag}),getIcon:e=>e.prid?\"discussion\":e.teamMain?\"team\":i(e)?\"globe\":\"hashtag\",extractOpenRoomParams(e){let{name:o}=e;return{type:\"c\",reference:o}},findRoom:e=>l.findOne({t:\"c\",name:e}),showJoinLink:e=>!!l.findOne({_id:e,t:\"c\"})})}","map":"{\"version\":3,\"sources\":[\"client/lib/rooms/roomTypes/public.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { AtLeast, IRoom } from '@rocket.chat/core-typings';\\nimport { isRoomFederated } from '@rocket.chat/core-typings';\\nimport { Meteor } from 'meteor/meteor';\\nimport type { Mongo } from 'meteor/mongo';\\n\\nimport { hasAtLeastOnePermission } from '../../../../app/authorization/client';\\nimport { ChatRoom } from '../../../../app/models/client';\\nimport { settings } from '../../../../app/settings/client';\\nimport { getUserPreference } from '../../../../app/utils/client';\\nimport { getRoomAvatarURL } from '../../../../app/utils/client/getRoomAvatarURL';\\nimport type { IRoomTypeClientDirectives } from '../../../../definition/IRoomTypeConfig';\\nimport { RoomSettingsEnum, RoomMemberActions, UiTextContext } from '../../../../definition/IRoomTypeConfig';\\nimport { getPublicRoomType } from '../../../../lib/rooms/roomTypes/public';\\nimport * as Federation from '../../federation/Federation';\\nimport { roomCoordinator } from '../roomCoordinator';\\n\\nexport const PublicRoomType = getPublicRoomType(roomCoordinator);\\n\\nroomCoordinator.add(\\n\\t{\\n\\t\\t...PublicRoomType,\\n\\t\\tlabel: 'Channels',\\n\\t},\\n\\t{\\n\\t\\tallowRoomSettingChange(room, setting) {\\n\\t\\t\\tif (isRoomFederated(room as IRoom)) {\\n\\t\\t\\t\\treturn Federation.isRoomSettingAllowed(room, setting);\\n\\t\\t\\t}\\n\\t\\t\\tswitch (setting) {\\n\\t\\t\\t\\tcase RoomSettingsEnum.BROADCAST:\\n\\t\\t\\t\\t\\treturn Boolean(room.broadcast);\\n\\t\\t\\t\\tcase RoomSettingsEnum.READ_ONLY:\\n\\t\\t\\t\\t\\treturn Boolean(!room.broadcast);\\n\\t\\t\\t\\tcase RoomSettingsEnum.REACT_WHEN_READ_ONLY:\\n\\t\\t\\t\\t\\treturn Boolean(!room.broadcast && room.ro);\\n\\t\\t\\t\\tcase RoomSettingsEnum.E2E:\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\tcase RoomSettingsEnum.SYSTEM_MESSAGES:\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tallowMemberAction(_room, action, showingUserId, userSubscription) {\\n\\t\\t\\tif (isRoomFederated(_room as IRoom)) {\\n\\t\\t\\t\\treturn Federation.actionAllowed(_room, action, showingUserId, userSubscription);\\n\\t\\t\\t}\\n\\t\\t\\tswitch (action) {\\n\\t\\t\\t\\tcase RoomMemberActions.BLOCK:\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\troomName(roomData) {\\n\\t\\t\\tif (roomData.prid || isRoomFederated(roomData)) {\\n\\t\\t\\t\\treturn roomData.fname;\\n\\t\\t\\t}\\n\\t\\t\\tif (settings.get('UI_Allow_room_names_with_special_chars')) {\\n\\t\\t\\t\\treturn roomData.fname || roomData.name;\\n\\t\\t\\t}\\n\\t\\t\\treturn roomData.name;\\n\\t\\t},\\n\\n\\t\\tisGroupChat(_room) {\\n\\t\\t\\treturn true;\\n\\t\\t},\\n\\n\\t\\tgetUiText(context) {\\n\\t\\t\\tswitch (context) {\\n\\t\\t\\t\\tcase UiTextContext.HIDE_WARNING:\\n\\t\\t\\t\\t\\treturn 'Hide_Room_Warning';\\n\\t\\t\\t\\tcase UiTextContext.LEAVE_WARNING:\\n\\t\\t\\t\\t\\treturn 'Leave_Room_Warning';\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn '';\\n\\t\\t\\t}\\n\\t\\t},\\n\\n\\t\\tcondition() {\\n\\t\\t\\tconst groupByType = getUserPreference(Meteor.userId(), 'sidebarGroupByType');\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tgroupByType &&\\n\\t\\t\\t\\t(hasAtLeastOnePermission(['view-c-room', 'view-joined-room']) || settings.get('Accounts_AllowAnonymousRead') === true)\\n\\t\\t\\t);\\n\\t\\t},\\n\\n\\t\\tgetAvatarPath(room) {\\n\\t\\t\\treturn getRoomAvatarURL({ roomId: room._id, cache: room.avatarETag });\\n\\t\\t},\\n\\n\\t\\tgetIcon(room) {\\n\\t\\t\\tif (room.prid) {\\n\\t\\t\\t\\treturn 'discussion';\\n\\t\\t\\t}\\n\\t\\t\\tif (room.teamMain) {\\n\\t\\t\\t\\treturn 'team';\\n\\t\\t\\t}\\n\\t\\t\\tif (isRoomFederated(room)) {\\n\\t\\t\\t\\treturn 'globe';\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn 'hashtag';\\n\\t\\t},\\n\\n\\t\\textractOpenRoomParams({ name }) {\\n\\t\\t\\treturn { type: 'c', reference: name };\\n\\t\\t},\\n\\n\\t\\tfindRoom(identifier) {\\n\\t\\t\\tconst query: Mongo.Selector<IRoom> = {\\n\\t\\t\\t\\tt: 'c',\\n\\t\\t\\t\\tname: identifier,\\n\\t\\t\\t};\\n\\n\\t\\t\\treturn ChatRoom.findOne(query);\\n\\t\\t},\\n\\n\\t\\tshowJoinLink(roomId) {\\n\\t\\t\\treturn !!ChatRoom.findOne({ _id: roomId, t: 'c' });\\n\\t\\t},\\n\\t} as AtLeast<IRoomTypeClientDirectives, 'isGroupChat' | 'roomName'>,\\n);\\n\",null],\"names\":[\"_objectSpread\",\"isRoomFederated\",\"Meteor\",\"hasAtLeastOnePermission\",\"ChatRoom\",\"settings\",\"getUserPreference\",\"getRoomAvatarURL\",\"RoomSettingsEnum\",\"RoomMemberActions\",\"UiTextContext\",\"getPublicRoomType\",\"Federation\",\"roomCoordinator\",\"module\",\"link\",\"default\",\"v\",\"export\",\"PublicRoomType\",\"add\",\"label\",\"allowRoomSettingChange\",\"room\",\"setting\",\"isRoomSettingAllowed\",\"BROADCAST\",\"Boolean\",\"broadcast\",\"READ_ONLY\",\"REACT_WHEN_READ_ONLY\",\"ro\",\"E2E\",\"SYSTEM_MESSAGES\",\"allowMemberAction\",\"_room\",\"action\",\"showingUserId\",\"userSubscription\",\"actionAllowed\",\"BLOCK\",\"roomName\",\"roomData\",\"prid\",\"fname\",\"get\",\"name\",\"isGroupChat\",\"getUiText\",\"context\",\"HIDE_WARNING\",\"LEAVE_WARNING\",\"condition\",\"groupByType\",\"userId\",\"getAvatarPath\",\"roomId\",\"_id\",\"cache\",\"avatarETag\",\"getIcon\",\"teamMain\",\"extractOpenRoomParams\",\"_ref\",\"type\",\"reference\",\"findRoom\",\"identifier\",\"findOne\",\"t\",\"showJoinLink\"],\"mappings\":\"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\"}"}