{"code":"function module(t,e,o){let r,i,n,a,l,d,c;o.link(\"@rocket.chat/random\",{Random(t){r=t}},0),o.link(\"meteor/meteor\",{Meteor(t){i=t}},1),o.link(\"meteor/oauth\",{OAuth(t){n=t}},2),o.link(\"meteor/twitter-oauth\",{Twitter(t){a=t}},3),o.link(\"../../lib/2fa/overrideLoginMethod\",{overrideLoginMethod(t){l=t}},4),o.link(\"../../lib/wrapRequestCredentialFn\",{wrapRequestCredentialFn(t){d=t}},5),o.link(\"./oauth\",{createOAuthTotpLoginMethod(t){c=t}},6);let{loginWithTwitter:u}=i,h=c(a);i.loginWithTwitter=(t,e)=>{l(u,[t],e,h)},a.requestCredential=d(\"twitter\",t=>{let{loginStyle:e,options:o,credentialRequestCompleteCallback:l}=t,d=r.secret(),c=\"_oauth/twitter/?requestTokenAndRedirect=true&state=\".concat(n._stateParam(e,d,null==o?void 0:o.redirectUrl));if(i.isCordova&&(c+=\"&cordova=true\",/Android/i.test(navigator.userAgent)&&(c+=\"&android=true\")),o){let t=Object.prototype.hasOwnProperty;a.validParamsAuthenticate.forEach(e=>{t.call(o,e)&&(c+=\"&\".concat(e,\"=\").concat(encodeURIComponent(o[e])))})}let u=i.absoluteUrl(c);n.launchLogin({loginService:\"twitter\",loginStyle:e,loginUrl:u,credentialRequestCompleteCallback:l,credentialToken:d})})}","map":"{\"version\":3,\"sources\":[\"client/meteorOverrides/login/twitter.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { TwitterOAuthConfiguration } from '@rocket.chat/core-typings';\\nimport { Random } from '@rocket.chat/random';\\nimport { Meteor } from 'meteor/meteor';\\nimport { OAuth } from 'meteor/oauth';\\nimport { Twitter } from 'meteor/twitter-oauth';\\n\\nimport { overrideLoginMethod } from '../../lib/2fa/overrideLoginMethod';\\nimport { wrapRequestCredentialFn } from '../../lib/wrapRequestCredentialFn';\\nimport { createOAuthTotpLoginMethod } from './oauth';\\n\\nconst { loginWithTwitter } = Meteor;\\nconst loginWithTwitterAndTOTP = createOAuthTotpLoginMethod(Twitter);\\nMeteor.loginWithTwitter = (options, callback) => {\\n\\toverrideLoginMethod(loginWithTwitter, [options], callback, loginWithTwitterAndTOTP);\\n};\\n\\nTwitter.requestCredential = wrapRequestCredentialFn<TwitterOAuthConfiguration>(\\n\\t'twitter',\\n\\t({ loginStyle, options: requestOptions, credentialRequestCompleteCallback }) => {\\n\\t\\tconst options = requestOptions as Record<string, string>;\\n\\t\\tconst credentialToken = Random.secret();\\n\\n\\t\\tlet loginPath = `_oauth/twitter/?requestTokenAndRedirect=true&state=${OAuth._stateParam(\\n\\t\\t\\tloginStyle,\\n\\t\\t\\tcredentialToken,\\n\\t\\t\\toptions?.redirectUrl,\\n\\t\\t)}`;\\n\\n\\t\\tif (Meteor.isCordova) {\\n\\t\\t\\tloginPath += '&cordova=true';\\n\\t\\t\\tif (/Android/i.test(navigator.userAgent)) {\\n\\t\\t\\t\\tloginPath += '&android=true';\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Support additional, permitted parameters\\n\\t\\tif (options) {\\n\\t\\t\\tconst hasOwn = Object.prototype.hasOwnProperty;\\n\\t\\t\\tTwitter.validParamsAuthenticate.forEach((param: string) => {\\n\\t\\t\\t\\tif (hasOwn.call(options, param)) {\\n\\t\\t\\t\\t\\tloginPath += `&${param}=${encodeURIComponent(options[param])}`;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tconst loginUrl = Meteor.absoluteUrl(loginPath);\\n\\n\\t\\tOAuth.launchLogin({\\n\\t\\t\\tloginService: 'twitter',\\n\\t\\t\\tloginStyle,\\n\\t\\t\\tloginUrl,\\n\\t\\t\\tcredentialRequestCompleteCallback,\\n\\t\\t\\tcredentialToken,\\n\\t\\t});\\n\\t},\\n);\\n\",null],\"names\":[\"Random\",\"Meteor\",\"OAuth\",\"Twitter\",\"overrideLoginMethod\",\"wrapRequestCredentialFn\",\"createOAuthTotpLoginMethod\",\"module\",\"link\",\"v\",\"loginWithTwitter\",\"loginWithTwitterAndTOTP\",\"options\",\"callback\",\"requestCredential\",\"_ref\",\"loginStyle\",\"requestOptions\",\"credentialRequestCompleteCallback\",\"credentialToken\",\"secret\",\"loginPath\",\"concat\",\"_stateParam\",\"redirectUrl\",\"isCordova\",\"test\",\"navigator\",\"userAgent\",\"hasOwn\",\"Object\",\"prototype\",\"hasOwnProperty\",\"validParamsAuthenticate\",\"forEach\",\"param\",\"call\",\"encodeURIComponent\",\"loginUrl\",\"absoluteUrl\",\"launchLogin\",\"loginService\"],\"mappings\":\"2BACAA,EAA6CC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAApCC,EAAQC,IAAA,CAAM,sBAAsB,CAAAR,OAAAS,CAAA,EAAAT,EAAAS,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,gBAAA,CAAAP,OAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,eAAA,CAAAN,MAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,uBAAA,CAAAL,QAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,oCAAA,CAAAJ,oBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,oCAAA,CAAAH,wBAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,UAAA,CAAAF,2BAAAG,CAAA,EAAAH,EAAAG,CAAA,CAAA,EAAA,GAS7C,GAAM,CAAEC,iBAAAA,CAAAA,CAAkB,CAAGT,EACvBU,EAA0BL,EAA2BH,EAC3DF,CAAAA,EAAOS,gBAAgB,CAAG,CAACE,EAASC,KACnCT,EAAoBM,EAAkB,CAACE,EAAQ,CAAEC,EAAUF,EAC5D,EAEAR,EAAQW,iBAAiB,CAAGT,EAC3B,UACAU,IAA+E,GAA9E,CAAEC,WAAAA,CAAU,CAAEJ,QAASK,CAAc,CAAEC,kCAAAA,CAAAA,CAAmC,CAAAH,EAEpEI,EAAkBnB,EAAOoB,MAAM,GAEjCC,EAAS,sDAAAC,MAAA,CAAyDpB,EAAMqB,WAAW,CACtFP,EACAG,EACAP,MANeK,EAMR,KAAA,EAAPL,AANeK,EAMNO,WAAW,GAWrB,GARIvB,EAAOwB,SAAS,GACnBJ,GAAa,gBACT,WAAWK,IAAI,CAACC,UAAUC,SAAS,GACtCP,CAAAA,GAAa,eAAA,GAZCJ,EAiBH,CACZ,IAAMY,EAASC,OAAOC,SAAS,CAACC,cAAc,CAC9C7B,EAAQ8B,uBAAuB,CAACC,OAAO,CAAEC,IACpCN,EAAOO,IAAI,CApBDnB,EAoBWkB,IACxBd,CAAAA,GAAS,IAAAC,MAAA,CAAQa,EAAK,KAAAb,MAAA,CAAIe,mBAAmBzB,AArBhCK,CAqBuC,CAACkB,EAAM,EAAC,CAE9D,EACD,CAEA,IAAMG,EAAWrC,EAAOsC,WAAW,CAAClB,GAEpCnB,EAAMsC,WAAW,CAAC,CACjBC,aAAc,UACdzB,WAAAA,EACAsB,SAAAA,EACApB,kCAAAA,EACAC,gBAAAA,GAEF\"}"}