{"code":"function module(e,n,t){t.link(\"@babel/runtime/regenerator\",{default:function(e){i=e}},0),t.export({useThreadMainMessageQuery:function(){return x}}),t.link(\"@rocket.chat/ui-contexts\",{useStream:function(e){u=e}},0),t.link(\"@tanstack/react-query\",{useQueryClient:function(e){r=e},useQuery:function(e){o=e}},1),t.link(\"react\",{useCallback:function(e){s=e},useEffect:function(e){c=e},useRef:function(e){a=e}},2),t.link(\"../../../../../../lib/utils/highOrderFunctions\",{withDebouncing:function(e){l=e}},3),t.link(\"../../../../../lib/minimongo\",{createFilterFromQuery:function(e){f=e}},4),t.link(\"../../../../../lib/onClientMessageReceived\",{onClientMessageReceived:function(e){d=e}},5),t.link(\"../../../contexts/RoomContext\",{useRoom:function(e){m=e}},6),t.link(\"./useGetMessageByID\",{useGetMessageByID:function(e){v=e}},7);var i,u,r,o,s,c,a,l,f,d,m,v,g=function(e){var n,t={};return e.ids?t._id={$in:e.ids}:t.ts=e.ts,e.excludePinned&&(t.pinned={$ne:!0}),e.ignoreDiscussion&&(t.drid={$exists:!1}),null!==(n=e.users)&&void 0!==n&&n.length&&(t[\"u.username\"]={$in:e.users}),f(t)},k=function(){var e=u(\"room-messages\"),n=u(\"notify-room\");return s(function(t,i){var u=i.onMutate,r=i.onDelete,o=e(t.rid,function(e){t._id===e._id&&(null==u||u(e))}),s=n(t.rid+\"/deleteMessage\",function(e){t._id===e._id&&(null==r||r())}),c=n(t.rid+\"/deleteMessageBulk\",function(e){g(e)(t)&&(null==r||r())});return function(){o(),s(),c()}},[n,e])},x=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.onDelete,u=m(),s=v(),f=k(),g=r(),x=a();return c(function(){return function(){var e;null===(e=x.current)||void 0===e||e.call(x),x.current=void 0}},[e]),o([\"rooms\",u._id,\"threads\",e,\"main-message\"],function(n){var u,r,o;return i.async(function(c){for(;;)switch(c.prev=c.next){case 0:return u=n.queryKey,c.next=3,i.awrap(s(e));case 3:if(r=c.sent){c.next=6;break}throw Error(\"Invalid main message\");case 6:return o=l({wait:1e4})(function(){g.invalidateQueries(u,{exact:!0})}),x.current=x.current||f(r,{onMutate:function e(e){var n;return i.async(function t(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,i.awrap(d(e));case 2:n=t.sent,g.setQueryData(u,function(){return n}),o();case 5:case\"end\":return t.stop()}},null,null,null,Promise)},onDelete:function(){null==t||t(),g.invalidateQueries(u,{exact:!0})}}),c.abrupt(\"return\",r);case 9:case\"end\":return c.stop()}},null,null,null,Promise)})}}","map":"{\"version\":3,\"sources\":[\"client/views/room/contextualBar/Threads/hooks/useThreadMainMessageQuery.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage, IThreadMainMessage } from '@rocket.chat/core-typings';\\nimport { useStream } from '@rocket.chat/ui-contexts';\\nimport type { UseQueryResult } from '@tanstack/react-query';\\nimport { useQueryClient, useQuery } from '@tanstack/react-query';\\nimport { useCallback, useEffect, useRef } from 'react';\\n\\nimport { withDebouncing } from '../../../../../../lib/utils/highOrderFunctions';\\nimport type { FieldExpression, Query } from '../../../../../lib/minimongo';\\nimport { createFilterFromQuery } from '../../../../../lib/minimongo';\\nimport { onClientMessageReceived } from '../../../../../lib/onClientMessageReceived';\\nimport { useRoom } from '../../../contexts/RoomContext';\\nimport { useGetMessageByID } from './useGetMessageByID';\\n\\ntype RoomMessagesRidEvent = IMessage;\\n\\ntype NotifyRoomRidDeleteMessageBulkEvent = {\\n\\trid: IMessage['rid'];\\n\\texcludePinned: boolean;\\n\\tignoreDiscussion: boolean;\\n\\tts: FieldExpression<Date>;\\n\\tusers: string[];\\n\\tids?: string[]; // message ids have priority over ts\\n\\tshowDeletedStatus?: boolean;\\n};\\n\\nconst createDeleteCriteria = (params: NotifyRoomRidDeleteMessageBulkEvent): ((message: IMessage) => boolean) => {\\n\\tconst query: Query<IMessage> = {};\\n\\n\\tif (params.ids) {\\n\\t\\tquery._id = { $in: params.ids };\\n\\t} else {\\n\\t\\tquery.ts = params.ts;\\n\\t}\\n\\n\\tif (params.excludePinned) {\\n\\t\\tquery.pinned = { $ne: true };\\n\\t}\\n\\n\\tif (params.ignoreDiscussion) {\\n\\t\\tquery.drid = { $exists: false };\\n\\t}\\n\\tif (params.users?.length) {\\n\\t\\tquery['u.username'] = { $in: params.users };\\n\\t}\\n\\n\\treturn createFilterFromQuery<IMessage>(query);\\n};\\n\\nconst useSubscribeToMessage = () => {\\n\\tconst subscribeToRoomMessages = useStream('room-messages');\\n\\tconst subscribeToNotifyRoom = useStream('notify-room');\\n\\n\\treturn useCallback(\\n\\t\\t(message: IMessage, { onMutate, onDelete }: { onMutate?: (message: IMessage) => void; onDelete?: () => void }) => {\\n\\t\\t\\tconst unsubscribeFromRoomMessages = subscribeToRoomMessages(message.rid, (event: RoomMessagesRidEvent) => {\\n\\t\\t\\t\\tif (message._id === event._id) onMutate?.(event);\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst unsubscribeFromDeleteMessage = subscribeToNotifyRoom(`${message.rid}/deleteMessage`, (event) => {\\n\\t\\t\\t\\tif (message._id === event._id) onDelete?.();\\n\\t\\t\\t});\\n\\n\\t\\t\\tconst unsubscribeFromDeleteMessageBulk = subscribeToNotifyRoom(`${message.rid}/deleteMessageBulk`, (params) => {\\n\\t\\t\\t\\tconst matchDeleteCriteria = createDeleteCriteria(params);\\n\\t\\t\\t\\tif (matchDeleteCriteria(message)) onDelete?.();\\n\\t\\t\\t});\\n\\n\\t\\t\\treturn () => {\\n\\t\\t\\t\\tunsubscribeFromRoomMessages();\\n\\t\\t\\t\\tunsubscribeFromDeleteMessage();\\n\\t\\t\\t\\tunsubscribeFromDeleteMessageBulk();\\n\\t\\t\\t};\\n\\t\\t},\\n\\t\\t[subscribeToNotifyRoom, subscribeToRoomMessages],\\n\\t);\\n};\\n\\nexport const useThreadMainMessageQuery = (\\n\\ttmid: IMessage['_id'],\\n\\t{ onDelete }: { onDelete?: () => void } = {},\\n): UseQueryResult<IThreadMainMessage, Error> => {\\n\\tconst room = useRoom();\\n\\n\\tconst getMessage = useGetMessageByID();\\n\\tconst subscribeToMessage = useSubscribeToMessage();\\n\\n\\tconst queryClient = useQueryClient();\\n\\tconst unsubscribeRef = useRef<(() => void) | undefined>();\\n\\n\\tuseEffect(() => {\\n\\t\\treturn () => {\\n\\t\\t\\tunsubscribeRef.current?.();\\n\\t\\t\\tunsubscribeRef.current = undefined;\\n\\t\\t};\\n\\t}, [tmid]);\\n\\n\\treturn useQuery(['rooms', room._id, 'threads', tmid, 'main-message'] as const, async ({ queryKey }) => {\\n\\t\\tconst mainMessage = await getMessage(tmid);\\n\\n\\t\\tif (!mainMessage) {\\n\\t\\t\\tthrow new Error('Invalid main message');\\n\\t\\t}\\n\\n\\t\\tconst debouncedInvalidate = withDebouncing({ wait: 10000 })(() => {\\n\\t\\t\\tqueryClient.invalidateQueries(queryKey, { exact: true });\\n\\t\\t});\\n\\n\\t\\tunsubscribeRef.current =\\n\\t\\t\\tunsubscribeRef.current ||\\n\\t\\t\\tsubscribeToMessage(mainMessage, {\\n\\t\\t\\t\\tonMutate: async (message) => {\\n\\t\\t\\t\\t\\tconst msg = await onClientMessageReceived(message);\\n\\t\\t\\t\\t\\tqueryClient.setQueryData(queryKey, () => msg);\\n\\t\\t\\t\\t\\tdebouncedInvalidate();\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tonDelete: () => {\\n\\t\\t\\t\\t\\tonDelete?.();\\n\\t\\t\\t\\t\\tqueryClient.invalidateQueries(queryKey, { exact: true });\\n\\t\\t\\t\\t},\\n\\t\\t\\t});\\n\\n\\t\\treturn mainMessage;\\n\\t});\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_regeneratorRuntime\",\"export\",\"useThreadMainMessageQuery\",\"useStream\",\"useQueryClient\",\"useQuery\",\"useCallback\",\"useEffect\",\"useRef\",\"withDebouncing\",\"createFilterFromQuery\",\"onClientMessageReceived\",\"useRoom\",\"useGetMessageByID\",\"createDeleteCriteria\",\"params\",\"_params$users\",\"query\",\"ids\",\"_id\",\"$in\",\"ts\",\"excludePinned\",\"pinned\",\"$ne\",\"ignoreDiscussion\",\"drid\",\"$exists\",\"users\",\"length\",\"useSubscribeToMessage\",\"subscribeToRoomMessages\",\"subscribeToNotifyRoom\",\"message\",\"_ref\",\"onMutate\",\"onDelete\",\"unsubscribeFromRoomMessages\",\"rid\",\"event\",\"unsubscribeFromDeleteMessage\",\"unsubscribeFromDeleteMessageBulk\",\"matchDeleteCriteria\",\"tmid\",\"_ref2\",\"arguments\",\"undefined\",\"room\",\"getMessage\",\"subscribeToMessage\",\"queryClient\",\"unsubscribeRef\",\"_unsubscribeRef$curre\",\"current\",\"call\",\"_ref3\",\"queryKey\",\"mainMessage\",\"debouncedInvalidate\",\"async\",\"_context2\",\"prev\",\"next\",\"awrap\",\"sent\",\"Error\",\"wait\",\"invalidateQueries\",\"exact\",\"_callee\",\"msg\",\"_callee$\",\"_context\",\"setQueryData\",\"stop\",\"Promise\",\"abrupt\"],\"mappings\":\"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\"}"}