{"code":"function module(e,l,t){let n,r,s,a;t.link(\"meteor/meteor\",{Meteor(e){n=e}},0),t.link(\"meteor/tracker\",{Tracker(e){r=e}},1),t.link(\"../../../app/utils/client\",{slashCommands(e){s=e}},2),t.link(\"../../../app/utils/client/lib/SDKClient\",{sdk(e){a=e}},3);let i=null;r.autorun(async()=>{let e=n.userId();null===i&&e&&a.rest.get(\"/v1/commands.list\").then(e=>{e.commands.forEach(e=>{s.add(e)})}),i=n.userId()})}","map":"{\"version\":3,\"sources\":[\"client/startup/slashCommands/list.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IUser } from '@rocket.chat/core-typings';\\nimport { Meteor } from 'meteor/meteor';\\nimport { Tracker } from 'meteor/tracker';\\n\\nimport { slashCommands } from '../../../app/utils/client';\\nimport { sdk } from '../../../app/utils/client/lib/SDKClient';\\n\\nlet oldUserId: IUser['_id'] | null = null;\\n\\nTracker.autorun(async () => {\\n\\tconst newUserId = Meteor.userId();\\n\\tif (oldUserId === null && newUserId) {\\n\\t\\tsdk.rest.get('/v1/commands.list').then((result) => {\\n\\t\\t\\tresult.commands.forEach((command) => {\\n\\t\\t\\t\\tslashCommands.add(command);\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n\\n\\toldUserId = Meteor.userId();\\n});\\n\",null],\"names\":[\"Meteor\",\"Tracker\",\"slashCommands\",\"sdk\",\"module\",\"link\",\"v\",\"oldUserId\",\"autorun\",\"newUserId\",\"userId\",\"rest\",\"get\",\"then\",\"result\",\"commands\",\"forEach\",\"command\",\"add\"],\"mappings\":\"2BACAA,EAAuCC,EAAAC,EAAAC,EAA9BC,EAAQC,IAAA,CAAM,gBAAgB,CAAAL,OAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,iBAAA,CAAAJ,QAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,4BAAA,CAAAH,cAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,0CAAA,CAAAF,IAAAG,CAAA,EAAAH,EAAAG,CAAA,CAAA,EAAA,GAMvC,IAAIC,EAAiC,KAErCN,EAAQO,OAAO,CAAC,UACf,IAAMC,EAAYT,EAAOU,MAAM,EACb,QAAdH,GAAsBE,GACzBN,EAAIQ,IAAI,CAACC,GAAG,CAAC,qBAAqBC,IAAI,CAAEC,IACvCA,EAAOC,QAAQ,CAACC,OAAO,CAAEC,IACxBf,EAAcgB,GAAG,CAACD,EACnB,EACD,GAGDV,EAAYP,EAAOU,MAAM,EAC1B\"}"}