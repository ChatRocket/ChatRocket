{"code":"Package[\"core-runtime\"].queue(\"reload\",function(){var e,o=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv;var a=Package.modules.meteorInstall;return Package.modules.meteorBabelHelpers,Package.promise.Promise,Package[\"ecmascript-runtime-client\"].Symbol,Package[\"ecmascript-runtime-client\"].Map,Package[\"ecmascript-runtime-client\"].Set,{export:function(){return{Reload:e}},require:a({node_modules:{meteor:{reload:{\"reload.js\":function e(e,a,t){t.link(\"@babel/runtime/helpers/slicedToArray\",{default:function(e){r=e}},0),t.link(\"@babel/runtime/helpers/typeof\",{default:function(e){n=e}},1),t.export({Reload:function(){return l}});var r,n,i,l={},s=o.settings&&o.settings.public&&o.settings.public.packages&&o.settings.public.packages.reload||{};function d(e,o){s.debug&&console.log(\"[reload] \"+e,JSON.stringify(o))}var c=\"Meteor_Reload\",u={},m=null;try{(m=window.sessionStorage)?(m.setItem(\"__dummy__\",\"1\"),m.removeItem(\"__dummy__\")):m=null}catch(e){m=null}l._getData=function(){return m&&m.getItem(c)},m&&(i=l._getData(),m.removeItem(c)),i||(i=\"{}\");var g={};try{g=JSON.parse(i),\"object\"!==n(g)&&(o._debug(\"Got bad data on reload. Ignoring.\"),g={})}catch(e){o._debug(\"Got invalid JSON on reload. Ignoring.\")}g.reload&&\"object\"===n(g.data)&&(u=g.data);var f=[];l._onMigrate=function(e,o){d(\"_onMigrate\",{name:e}),o||(o=e,e=void 0,d(\"_onMigrate no callback\")),f.push({name:e,callback:o})},l._migrationData=function(e){return d(\"_migrationData\",{name:e}),u[e]};var p=function(e,o){d(\"pollProviders\",{options:o}),e=e||function(){};var a=(o=o||{}).immediateMigration;d(\"pollProviders is \"+(a?\"\":\"NOT \")+\"immediateMigration\",{options:o});var t={},n=!0;return(f.forEach(function(a){var i=a||{},l=i.callback,s=i.name,c=l(e,o)||[],u=r(c,2),m=u[0],g=u[1];d(\"pollProviders provider \"+(s||\"unknown\")+\" is \"+(m?\"ready\":\"NOT ready\"),{options:o}),m||(n=!1),void 0!==g&&s&&(t[s]=g)}),n)?(d(\"pollProviders allReady\",{options:o,migrationData:t}),t):a?(d(\"pollProviders immediateMigration\",{options:o,migrationData:t}),t):null};l._migrate=function(e,a){d(\"_migrate\",{options:a});var t,r=p(e,a);if(null===r)return!1;try{t=JSON.stringify({data:r,reload:!0})}catch(e){throw o._debug(\"Couldn't serialize data for migration\",r),e}if(m)try{m.setItem(c,t)}catch(e){o._debug(\"Couldn't save data for migration to sessionStorage\",e)}else o._debug(\"Browser does not support sessionStorage. Not saving migration state.\");return!0},l._withFreshProvidersForTest=function(e){var o=f.slice(0);f=[];try{e()}finally{f=o}};var v=!1;l._reload=function(e){if(d(\"_reload\",{options:e}),e=e||{},v){d(\"reloading in progress already\",{options:e});return}function a(){d(\"tryReload\"),setTimeout(r,1)}function t(){if(d(\"forceBrowserReload\"),window.location.hash||window.location.href.endsWith(\"#\")){window.location.reload();return}window.location.replace(window.location.href)}function r(){if(d(\"reload\"),l._migrate(a,e)){if(o.isCordova){WebAppLocalServer.switchToPendingVersion(function(){t()});return}t()}}v=!0,a()}}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/reload/reload.js\"],mainModulePath:\"/node_modules/meteor/reload/reload.js\"}});","map":"{\"version\":3,\"sources\":[\"packages/reload/reload.js\",\"<anon>\"],\"sourcesContent\":[\"/**\\n * This code does _NOT_ support hot (session-restoring) reloads on\\n * IE6,7. It only works on browsers with sessionStorage support.\\n *\\n * There are a couple approaches to add IE6,7 support:\\n *\\n * - use IE's \\\"userData\\\" mechanism in combination with window.name.\\n * This mostly works, however the problem is that it can not get to the\\n * data until after DOMReady. This is a problem for us since this API\\n * relies on the data being ready before API users run. We could\\n * refactor using Meteor.startup in all API users, but that might slow\\n * page loads as we couldn't start the stream until after DOMReady.\\n * Here are some resources on this approach:\\n * https://github.com/hugeinc/USTORE.js\\n * http://thudjs.tumblr.com/post/419577524/localstorage-userdata\\n * http://www.javascriptkit.com/javatutors/domstorage2.shtml\\n *\\n * - POST the data to the server, and have the server send it back on\\n * page load. This is nice because it sidesteps all the local storage\\n * compatibility issues, however it is kinda tricky. We can use a unique\\n * token in the URL, then get rid of it with HTML5 pushstate, but that\\n * only works on pushstate browsers.\\n *\\n * This will all need to be reworked entirely when we add server-side\\n * HTML rendering. In that case, the server will need to have access to\\n * the client's session to render properly.\\n */\\n\\n// XXX when making this API public, also expose a flag for the app\\n// developer to know whether a hot code push is happening. This is\\n// useful for apps using `window.onbeforeunload`. See\\n// https://github.com/meteor/meteor/pull/657\\n\\nexport const Reload = {};\\n\\nconst reloadSettings =\\n  (Meteor.settings &&\\n    Meteor.settings.public &&\\n    Meteor.settings.public.packages &&\\n    Meteor.settings.public.packages.reload) ||\\n  {};\\n\\nfunction debug(message, context) {\\n  if (!reloadSettings.debug) {\\n    return;\\n  }\\n  // eslint-disable-next-line no-console\\n  console.log(`[reload] ${message}`, JSON.stringify(context));\\n}\\n\\nconst KEY_NAME = 'Meteor_Reload';\\n\\nlet old_data = {};\\n// read in old data at startup.\\nlet old_json;\\n\\n// This logic for sessionStorage detection is based on browserstate/history.js\\nlet safeSessionStorage = null;\\ntry {\\n  // This throws a SecurityError on Chrome if cookies & localStorage are\\n  // explicitly disabled\\n  //\\n  // On Firefox with dom.storage.enabled set to false, sessionStorage is null\\n  //\\n  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely\\n  // on the throw if sessionStorage == null; the alternative is browser\\n  // detection, but this seems better.\\n  safeSessionStorage = window.sessionStorage;\\n\\n  // Check we can actually use it\\n  if (safeSessionStorage) {\\n    safeSessionStorage.setItem('__dummy__', '1');\\n    safeSessionStorage.removeItem('__dummy__');\\n  } else {\\n    // Be consistently null, for safety\\n    safeSessionStorage = null;\\n  }\\n} catch (e) {\\n  // Expected on chrome with strict security, or if sessionStorage not supported\\n  safeSessionStorage = null;\\n}\\n\\n// Exported for test.\\nReload._getData = function () {\\n  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);\\n};\\n\\nif (safeSessionStorage) {\\n  old_json = Reload._getData();\\n  safeSessionStorage.removeItem(KEY_NAME);\\n} else {\\n  // Unsupported browser (IE 6,7) or locked down security settings.\\n  // No session resumption.\\n  // Meteor._debug(\\\"XXX UNSUPPORTED BROWSER/SETTINGS\\\");\\n}\\n\\nif (!old_json) old_json = '{}';\\nlet old_parsed = {};\\ntry {\\n  old_parsed = JSON.parse(old_json);\\n  if (typeof old_parsed !== 'object') {\\n    Meteor._debug('Got bad data on reload. Ignoring.');\\n    old_parsed = {};\\n  }\\n} catch (err) {\\n  Meteor._debug('Got invalid JSON on reload. Ignoring.');\\n}\\n\\nif (old_parsed.reload && typeof old_parsed.data === 'object') {\\n  // Meteor._debug(\\\"Restoring reload data.\\\");\\n  old_data = old_parsed.data;\\n}\\n\\nlet providers = [];\\n\\n////////// External API //////////\\n\\n// Packages that support migration should register themselves by calling\\n// this function. When it's time to migrate, callback will be called\\n// with one argument, the \\\"retry function,\\\" and an optional 'option'\\n// argument (containing a key 'immediateMigration'). If the package\\n// is ready to migrate, it should return [true, data], where data is\\n// its migration data, an arbitrary JSON value (or [true] if it has\\n// no migration data this time). If the package needs more time\\n// before it is ready to migrate, it should return false. Then, once\\n// it is ready to migrating again, it should call the retry\\n// function. The retry function will return immediately, but will\\n// schedule the migration to be retried, meaning that every package\\n// will be polled once again for its migration data. If they are all\\n// ready this time, then the migration will happen. name must be set if there\\n// is migration data. If 'immediateMigration' is set in the options\\n// argument, then it doesn't matter whether the package is ready to\\n// migrate or not; the reload will happen immediately without waiting\\n// (used for OAuth redirect login).\\n//\\nReload._onMigrate = function (name, callback) {\\n  debug('_onMigrate', {name});\\n  if (!callback) {\\n    // name not provided, so first arg is callback.\\n    callback = name;\\n    name = undefined;\\n    debug('_onMigrate no callback');\\n  }\\n\\n  providers.push({name: name, callback: callback});\\n};\\n\\n// Called by packages when they start up.\\n// Returns the object that was saved, or undefined if none saved.\\n//\\nReload._migrationData = function (name) {\\n  debug('_migrationData', {name});\\n  return old_data[name];\\n};\\n\\n// Options are the same as for `Reload._migrate`.\\nconst pollProviders = function (tryReload, options) {\\n  debug('pollProviders', {options});\\n  tryReload = tryReload || function () {\\n  };\\n  options = options || {};\\n\\n  const {immediateMigration} = options;\\n  debug(\\n    `pollProviders is ${immediateMigration ? '' : 'NOT '}immediateMigration`,\\n    {options}\\n  );\\n  const migrationData = {};\\n  let allReady = true;\\n  providers.forEach(p => {\\n    const {callback, name} = p || {};\\n    const [ready, data] = callback(tryReload, options) || [];\\n\\n    debug(\\n      `pollProviders provider ${name || 'unknown'} is ${\\n        ready ? 'ready' : 'NOT ready'\\n      }`,\\n      {options}\\n    );\\n    if (!ready) {\\n      allReady = false;\\n    }\\n\\n    if (data !== undefined && name) {\\n      migrationData[name] = data;\\n    }\\n  });\\n\\n  if (allReady) {\\n    debug('pollProviders allReady', {options, migrationData});\\n    return migrationData;\\n  }\\n\\n  if (immediateMigration) {\\n    debug('pollProviders immediateMigration', {options, migrationData});\\n    return migrationData;\\n  }\\n\\n  return null;\\n};\\n\\n// Options are:\\n//  - immediateMigration: true if the page will be reloaded immediately\\n//    regardless of whether packages report that they are ready or not.\\nReload._migrate = function (tryReload, options) {\\n  debug('_migrate', {options});\\n  // Make sure each package is ready to go, and collect their\\n  // migration data\\n  const migrationData = pollProviders(tryReload, options);\\n  if (migrationData === null) {\\n    return false; // not ready yet..\\n  }\\n\\n  let json;\\n  try {\\n    // Persist the migration data\\n    json = JSON.stringify({\\n      data: migrationData,\\n      reload: true,\\n    });\\n  } catch (err) {\\n    Meteor._debug(\\\"Couldn't serialize data for migration\\\", migrationData);\\n    throw err;\\n  }\\n\\n  if (safeSessionStorage) {\\n    try {\\n      safeSessionStorage.setItem(KEY_NAME, json);\\n    } catch (err) {\\n      // We should have already checked this, but just log - don't throw\\n      Meteor._debug(\\\"Couldn't save data for migration to sessionStorage\\\", err);\\n    }\\n  } else {\\n    Meteor._debug(\\n      'Browser does not support sessionStorage. Not saving migration state.'\\n    );\\n  }\\n\\n  return true;\\n};\\n\\n// Allows tests to isolate the list of providers.\\nReload._withFreshProvidersForTest = function (f) {\\n  const originalProviders = providers.slice(0);\\n  providers = [];\\n  try {\\n    f();\\n  } finally {\\n    providers = originalProviders;\\n  }\\n};\\n\\n// Migrating reload: reload this page (presumably to pick up a new\\n// version of the code or assets), but save the program state and\\n// migrate it over. This function returns immediately. The reload\\n// will happen at some point in the future once all of the packages\\n// are ready to migrate.\\n//\\nlet reloading = false;\\nReload._reload = function (options) {\\n  debug('_reload', {options});\\n  options = options || {};\\n\\n  if (reloading) {\\n    debug('reloading in progress already', {options});\\n    return;\\n  }\\n  reloading = true;\\n\\n  function tryReload() {\\n    debug('tryReload');\\n    setTimeout(reload, 1);\\n  }\\n\\n  function forceBrowserReload() {\\n    debug('forceBrowserReload');\\n    // We'd like to make the browser reload the page using location.replace()\\n    // instead of location.reload(), because this avoids validating assets\\n    // with the server if we still have a valid cached copy. This doesn't work\\n    // when the location contains a hash however, because that wouldn't reload\\n    // the page and just scroll to the hash location instead.\\n    if (window.location.hash || window.location.href.endsWith('#')) {\\n      window.location.reload();\\n      return;\\n    }\\n\\n    window.location.replace(window.location.href);\\n  }\\n\\n  function reload() {\\n    debug('reload');\\n    if (!Reload._migrate(tryReload, options)) {\\n      return;\\n    }\\n\\n    if (Meteor.isCordova) {\\n      WebAppLocalServer.switchToPendingVersion(() => {\\n        forceBrowserReload();\\n      });\\n      return;\\n    }\\n\\n    forceBrowserReload();\\n  }\\n\\n  tryReload();\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_slicedToArray\",\"_typeof\",\"export\",\"Reload\",\"old_json\",\"reloadSettings\",\"Meteor\",\"settings\",\"public\",\"packages\",\"reload\",\"debug\",\"message\",\"context\",\"console\",\"log\",\"JSON\",\"stringify\",\"KEY_NAME\",\"old_data\",\"safeSessionStorage\",\"window\",\"sessionStorage\",\"setItem\",\"removeItem\",\"e\",\"_getData\",\"getItem\",\"old_parsed\",\"parse\",\"_debug\",\"err\",\"data\",\"providers\",\"_onMigrate\",\"name\",\"callback\",\"undefined\",\"push\",\"_migrationData\",\"pollProviders\",\"tryReload\",\"options\",\"immediateMigration\",\"_options\",\"migrationData\",\"allReady\",\"forEach\",\"p\",\"_ref\",\"_ref2\",\"_ref3\",\"ready\",\"_migrate\",\"json\",\"_withFreshProvidersForTest\",\"f\",\"originalProviders\",\"slice\",\"reloading\",\"_reload\",\"setTimeout\",\"forceBrowserReload\",\"location\",\"hash\",\"href\",\"endsWith\",\"replace\",\"isCordova\",\"WebAppLocalServer\",\"switchToPendingVersion\"],\"mappings\":\"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\"}"}