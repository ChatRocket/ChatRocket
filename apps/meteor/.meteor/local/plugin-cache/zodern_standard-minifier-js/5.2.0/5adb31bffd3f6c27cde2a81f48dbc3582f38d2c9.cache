{"code":"function module(e,t,a){let i,s,n,r,u;a.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){i=e}},0),a.export({useResumeChatOnHoldMutation:()=>o}),a.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){s=e},useToastMessageDispatch(e){n=e}},0),a.link(\"@tanstack/react-query\",{useMutation(e){r=e},useQueryClient(e){u=e}},1);let o=e=>{let t=s(\"POST\",\"/v1/livechat/room.resumeOnHold\"),a=n(),o=u();return r(async e=>{await t({roomId:e})},i(i({},e),{},{onSuccess:async(t,a,i)=>{var s;return await o.invalidateQueries([\"current-chats\"]),await o.invalidateQueries([\"rooms\",a]),await o.invalidateQueries([\"subscriptions\",{rid:a}]),null==e?void 0:null===(s=e.onSuccess)||void 0===s?void 0:s.call(e,t,a,i)},onError:e=>{a({type:\"error\",message:e})}}))}}","map":"{\"version\":3,\"sources\":[\"client/views/room/composer/ComposerOmnichannel/hooks/useResumeChatOnHoldMutation.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom } from '@rocket.chat/core-typings';\\nimport { useEndpoint, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\\nimport type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';\\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\\n\\nexport const useResumeChatOnHoldMutation = (\\n\\toptions?: Omit<UseMutationOptions<void, Error, IRoom['_id']>, 'mutationFn'>,\\n): UseMutationResult<void, Error, IRoom['_id']> => {\\n\\tconst resumeChatOnHold = useEndpoint('POST', '/v1/livechat/room.resumeOnHold');\\n\\n\\tconst dispatchToastMessage = useToastMessageDispatch();\\n\\n\\tconst queryClient = useQueryClient();\\n\\n\\treturn useMutation(\\n\\t\\tasync (roomId) => {\\n\\t\\t\\tawait resumeChatOnHold({ roomId });\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\t...options,\\n\\t\\t\\tonSuccess: async (data, rid, context) => {\\n\\t\\t\\t\\tawait queryClient.invalidateQueries(['current-chats']);\\n\\t\\t\\t\\tawait queryClient.invalidateQueries(['rooms', rid]);\\n\\t\\t\\t\\tawait queryClient.invalidateQueries(['subscriptions', { rid }]);\\n\\t\\t\\t\\treturn options?.onSuccess?.(data, rid, context);\\n\\t\\t\\t},\\n\\t\\t\\tonError: (error) => {\\n\\t\\t\\t\\tdispatchToastMessage({ type: 'error', message: error });\\n\\t\\t\\t},\\n\\t\\t},\\n\\t);\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useToastMessageDispatch\",\"useMutation\",\"useQueryClient\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useResumeChatOnHoldMutation\",\"options\",\"resumeChatOnHold\",\"dispatchToastMessage\",\"queryClient\",\"roomId\",\"onSuccess\",\"data\",\"rid\",\"context\",\"_options$onSuccess\",\"invalidateQueries\",\"call\",\"onError\",\"error\",\"type\",\"message\"],\"mappings\":\"2BACAA,EAAgFC,EAAAC,EAAAC,EAAAC,EAAvEC,EAAaC,IAAA,CAAA,uCAA+B,CAAAC,QAAAC,CAA0B,EAACR,EAAAQ,CAAA,CAAA,EAAA,GAAhFH,EAAOI,MAAE,CAAA,CAAAC,4BAAaA,IAAyBA,CAAM,GAA2BL,EAAAC,IAAA,CAAA,2BAAA,CAAAL,YAAAO,CAAA,EAAAP,EAAAO,CAAA,EAAAN,wBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAH,YAAAK,CAAA,EAAAL,EAAAK,CAAA,EAAAJ,eAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAIzE,IAAME,EACZC,IAEA,IAAMC,EAAmBX,EAAY,OAAQ,kCAEvCY,EAAuBX,IAEvBY,EAAcV,IAEpB,OAAOD,EACN,MAAOY,IACN,MAAMH,EAAiB,CAAEG,OAAAA,CAAM,EAChC,EAACf,EAAAA,EAAA,CAAA,EAEGW,GAAO,CAAA,EAAA,CACVK,UAAW,MAAOC,EAAMC,EAAKC,KAAW,IAAAC,EAIvC,OAHA,MAAMN,EAAYO,iBAAiB,CAAC,CAAC,gBAAgB,EACrD,MAAMP,EAAYO,iBAAiB,CAAC,CAAC,QAASH,EAAI,EAClD,MAAMJ,EAAYO,iBAAiB,CAAC,CAAC,gBAAiB,CAAEH,IAAAA,CAAG,EAAG,EACvDP,MAAAA,EAAO,KAAA,EAAA,AAAW,OAAXS,CAAAA,EAAPT,EAASK,SAAS,AAATA,GAASI,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAlBA,EAAAE,IAAA,CAAAX,EAAqBM,EAAMC,EAAKC,EACxC,EACAI,QAAUC,IACTX,EAAqB,CAAEY,KAAM,QAASC,QAASF,CAAK,EACrD,CAAC,GAGJ\"}"}