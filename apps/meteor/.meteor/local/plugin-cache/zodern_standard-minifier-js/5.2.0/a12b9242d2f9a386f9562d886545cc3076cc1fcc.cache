{"code":"function module(e,n,t){let i,o,r;function l(e,n){let t=async(t,l)=>{let u=await r.loadLoginService(e);if(!u){null==l||l(new i.ConfigError);return}let c=o._loginStyle(e,u,t);n({config:u,loginStyle:c,options:t,credentialRequestCompleteCallback:l})};return(e,n)=>{if(!n&&\"function\"==typeof e){t({},e);return}t(e,n)}}t.export({wrapRequestCredentialFn:()=>l}),t.link(\"meteor/accounts-base\",{Accounts(e){i=e}},0),t.link(\"meteor/oauth\",{OAuth(e){o=e}},1),t.link(\"./loginServices\",{loginServices(e){r=e}},2)}","map":"{\"version\":3,\"sources\":[\"client/lib/wrapRequestCredentialFn.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { OAuthConfiguration } from '@rocket.chat/core-typings';\\nimport { Accounts } from 'meteor/accounts-base';\\nimport type { Meteor } from 'meteor/meteor';\\nimport { OAuth } from 'meteor/oauth';\\n\\nimport { loginServices } from './loginServices';\\n\\ntype RequestCredentialOptions = Meteor.LoginWithExternalServiceOptions;\\ntype RequestCredentialCallback = (credentialTokenOrError?: string | Error) => void;\\n\\ntype RequestCredentialConfig<T extends Partial<OAuthConfiguration>> = {\\n\\tconfig: T;\\n\\tloginStyle: string;\\n\\toptions: RequestCredentialOptions;\\n\\tcredentialRequestCompleteCallback?: RequestCredentialCallback;\\n};\\n\\nexport function wrapRequestCredentialFn<T extends Partial<OAuthConfiguration>>(\\n\\tserviceName: string,\\n\\tfn: (params: RequestCredentialConfig<T>) => void,\\n) {\\n\\tconst wrapped = async (\\n\\t\\toptions: RequestCredentialOptions,\\n\\t\\tcredentialRequestCompleteCallback?: RequestCredentialCallback,\\n\\t): Promise<void> => {\\n\\t\\tconst config = await loginServices.loadLoginService<T>(serviceName);\\n\\t\\tif (!config) {\\n\\t\\t\\tcredentialRequestCompleteCallback?.(new Accounts.ConfigError());\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst loginStyle = OAuth._loginStyle(serviceName, config, options);\\n\\t\\tfn({\\n\\t\\t\\tconfig,\\n\\t\\t\\tloginStyle,\\n\\t\\t\\toptions,\\n\\t\\t\\tcredentialRequestCompleteCallback,\\n\\t\\t});\\n\\t};\\n\\n\\treturn (\\n\\t\\toptions?: RequestCredentialOptions | RequestCredentialCallback,\\n\\t\\tcredentialRequestCompleteCallback?: RequestCredentialCallback,\\n\\t) => {\\n\\t\\tif (!credentialRequestCompleteCallback && typeof options === 'function') {\\n\\t\\t\\tvoid wrapped({}, options);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvoid wrapped(options as RequestCredentialOptions, credentialRequestCompleteCallback);\\n\\t};\\n}\\n\",null],\"names\":[\"Accounts\",\"OAuth\",\"loginServices\",\"wrapRequestCredentialFn\",\"serviceName\",\"fn\",\"wrapped\",\"options\",\"credentialRequestCompleteCallback\",\"config\",\"loadLoginService\",\"ConfigError\",\"loginStyle\",\"_loginStyle\",\"module\",\"export\",\"link\",\"v\"],\"mappings\":\"2BACgDA,EAAAC,EAAAC,EAgB1C,SAAUC,EACfC,CAAmB,CACnBC,CAAgD,EAEhD,IAAMC,EAAU,MACfC,EACAC,KAEA,IAAMC,EAAS,MAAMP,EAAcQ,gBAAgB,CAAIN,GACvD,GAAI,CAACK,EAAQ,CACZD,MAAAA,GAAAA,EAAoC,IAAIR,EAASW,WAAW,EAC5D,MACD,CAEA,IAAMC,EAAaX,EAAMY,WAAW,CAACT,EAAaK,EAAQF,GAC1DF,EAAG,CACFI,OAAAA,EACAG,WAAAA,EACAL,QAAAA,EACAC,kCAAAA,GAEF,EAEA,MAAO,CACND,EACAC,KAEA,GAAI,CAACA,GAAqC,AAAmB,YAAnB,OAAOD,EAAwB,CACnED,EAAQ,CAAA,EAAIC,GACjB,MACD,CAEKD,EAAQC,EAAqCC,EACnD,CACD,CAlDAM,EAAOC,MAAE,CAAA,CAAAZ,wBAAgBA,IAAAA,CAAuB,GAAAW,EAAAE,IAAA,CAAA,uBAAA,CAAAhB,SAAAiB,CAAA,EAAAjB,EAAAiB,CAAA,CAAA,EAAA,GAAAH,EAAAE,IAAA,CAAA,eAAA,CAAAf,MAAAgB,CAAA,EAAAhB,EAAAgB,CAAA,CAAA,EAAA,GAAAH,EAAAE,IAAA,CAAA,kBAAA,CAAAd,cAAAe,CAAA,EAAAf,EAAAe,CAAA,CAAA,EAAA\"}"}