{"code":"function module(e,t,r){let n,o;function a(e){return\"string\"==typeof e?e:o.wrap(e).toString(\"binary\")}function y(e){if(void 0!==e){if(\"object\"==typeof e&&Object.getPrototypeOf(e)===ArrayBuffer.prototype)return e;if(\"string\"!=typeof e)throw Error(\"Tried to convert a non-string of type \".concat(typeof e,\" to an array buffer\"));return o.wrap(e,\"binary\").toArrayBuffer()}}function c(e,t){let r=new Uint8Array(t),n=new Uint8Array(e.length+r.length);return n.set(e,0),n.set(r,e.length),n}function i(e){let t=e.slice(0,16),r=e.slice(16);return[t,r]}async function u(e,t){return crypto.subtle.encrypt({name:\"RSA-OAEP\"},e,t)}async function p(e,t,r){return crypto.subtle.encrypt({name:\"AES-CBC\",iv:e},t,r)}async function l(e,t,r){return crypto.subtle.encrypt({name:\"AES-CTR\",counter:e,length:64},t,r)}async function s(e,t){return crypto.subtle.decrypt({name:\"RSA-OAEP\"},e,t)}async function f(e,t,r){return crypto.subtle.decrypt({name:\"AES-CBC\",iv:e},t,r)}async function A(){return crypto.subtle.generateKey({name:\"AES-CBC\",length:128},!0,[\"encrypt\",\"decrypt\"])}async function d(){return crypto.subtle.generateKey({name:\"AES-CTR\",length:256},!0,[\"encrypt\",\"decrypt\"])}async function m(){return crypto.subtle.generateKey({name:\"RSA-OAEP\",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:{name:\"SHA-256\"}},!0,[\"encrypt\",\"decrypt\"])}async function g(e){return crypto.subtle.exportKey(\"jwk\",e)}async function S(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[\"encrypt\",\"decrypt\"];return crypto.subtle.importKey(\"jwk\",e,{name:\"RSA-OAEP\",modulusLength:2048,publicExponent:new Uint8Array([1,0,1]),hash:{name:\"SHA-256\"}},!0,t)}async function h(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[\"encrypt\",\"decrypt\"];return crypto.subtle.importKey(\"jwk\",e,{name:\"AES-CBC\"},!0,t)}async function b(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[\"deriveKey\"];return crypto.subtle.importKey(\"raw\",e,{name:\"PBKDF2\"},!1,t)}async function E(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[\"encrypt\",\"decrypt\"];return crypto.subtle.deriveKey({name:\"PBKDF2\",salt:e,iterations:1e3,hash:\"SHA-256\"},t,{name:\"AES-CBC\",length:256},!0,r)}async function w(e){return new Promise((t,r)=>{let n=new FileReader;n.onload=e=>{var r;t(null===(r=e.target)||void 0===r?void 0:r.result)},n.onerror=e=>{r(e)},n.readAsArrayBuffer(e)})}async function K(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\" \",{default:o}=await r.dynamicImport(\"./wordList\"),a=Array(e),y=o.length,c=Array(y);for(;e--;){let t=Math.floor(n.fraction()*y);a[e]=o[t in c?c[t]:t],c[t]=--y in c?c[y]:y}return a.join(t)}async function v(e){let t=await crypto.subtle.digest(\"SHA-256\",new TextEncoder().encode(e));return Array.from(new Uint8Array(t)).map(e=>e.toString(16).padStart(2,\"0\")).join(\"\")}async function R(e){let t=Array.from(new Uint8Array(await crypto.subtle.digest(\"SHA-256\",e)));return t.map(e=>e.toString(16).padStart(2,\"0\")).join(\"\")}r.export({toString:()=>a,toArrayBuffer:()=>y,joinVectorAndEcryptedData:()=>c,splitVectorAndEcryptedData:()=>i,encryptRSA:()=>u,encryptAES:()=>p,encryptAESCTR:()=>l,decryptRSA:()=>s,decryptAES:()=>f,generateAESKey:()=>A,generateAESCTRKey:()=>d,generateRSAKey:()=>m,exportJWKKey:()=>g,importRSAKey:()=>S,importAESKey:()=>h,importRawKey:()=>b,deriveKey:()=>E,readFileAsArrayBuffer:()=>w,generateMnemonicPhrase:()=>K,createSha256HashFromText:()=>v,sha256HashFromArrayBuffer:()=>R}),r.link(\"@rocket.chat/random\",{Random(e){n=e}},0),r.link(\"bytebuffer\",{default(e){o=e}},1)}","map":"{\"version\":3,\"sources\":[\"app/e2e/client/helper.ts\",\"<anon>\"],\"sourcesContent\":[\"import { Random } from '@rocket.chat/random';\\nimport ByteBuffer from 'bytebuffer';\\n\\nexport function toString(thing: any) {\\n\\tif (typeof thing === 'string') {\\n\\t\\treturn thing;\\n\\t}\\n\\n\\treturn ByteBuffer.wrap(thing).toString('binary');\\n}\\n\\nexport function toArrayBuffer(thing: any) {\\n\\tif (thing === undefined) {\\n\\t\\treturn undefined;\\n\\t}\\n\\tif (typeof thing === 'object') {\\n\\t\\tif (Object.getPrototypeOf(thing) === ArrayBuffer.prototype) {\\n\\t\\t\\treturn thing;\\n\\t\\t}\\n\\t}\\n\\n\\tif (typeof thing !== 'string') {\\n\\t\\tthrow new Error(`Tried to convert a non-string of type ${typeof thing} to an array buffer`);\\n\\t}\\n\\n\\treturn ByteBuffer.wrap(thing, 'binary').toArrayBuffer();\\n}\\n\\nexport function joinVectorAndEcryptedData(vector: any, encryptedData: any) {\\n\\tconst cipherText = new Uint8Array(encryptedData);\\n\\tconst output = new Uint8Array(vector.length + cipherText.length);\\n\\toutput.set(vector, 0);\\n\\toutput.set(cipherText, vector.length);\\n\\treturn output;\\n}\\n\\nexport function splitVectorAndEcryptedData(cipherText: any) {\\n\\tconst vector = cipherText.slice(0, 16);\\n\\tconst encryptedData = cipherText.slice(16);\\n\\n\\treturn [vector, encryptedData];\\n}\\n\\nexport async function encryptRSA(key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'RSA-OAEP' }, key, data);\\n}\\n\\nexport async function encryptAES(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'AES-CBC', iv: vector }, key, data);\\n}\\n\\nexport async function encryptAESCTR(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.encrypt({ name: 'AES-CTR', counter: vector, length: 64 }, key, data);\\n}\\n\\nexport async function decryptRSA(key: any, data: any) {\\n\\treturn crypto.subtle.decrypt({ name: 'RSA-OAEP' }, key, data);\\n}\\n\\nexport async function decryptAES(vector: any, key: any, data: any) {\\n\\treturn crypto.subtle.decrypt({ name: 'AES-CBC', iv: vector }, key, data);\\n}\\n\\nexport async function generateAESKey() {\\n\\treturn crypto.subtle.generateKey({ name: 'AES-CBC', length: 128 }, true, ['encrypt', 'decrypt']);\\n}\\n\\nexport async function generateAESCTRKey() {\\n\\treturn crypto.subtle.generateKey({ name: 'AES-CTR', length: 256 }, true, ['encrypt', 'decrypt']);\\n}\\n\\nexport async function generateRSAKey() {\\n\\treturn crypto.subtle.generateKey(\\n\\t\\t{\\n\\t\\t\\tname: 'RSA-OAEP',\\n\\t\\t\\tmodulusLength: 2048,\\n\\t\\t\\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\\n\\t\\t\\thash: { name: 'SHA-256' },\\n\\t\\t},\\n\\t\\ttrue,\\n\\t\\t['encrypt', 'decrypt'],\\n\\t);\\n}\\n\\nexport async function exportJWKKey(key: any) {\\n\\treturn crypto.subtle.exportKey('jwk', key);\\n}\\n\\nexport async function importRSAKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\treturn crypto.subtle.importKey(\\n\\t\\t'jwk' as any,\\n\\t\\tkeyData,\\n\\t\\t{\\n\\t\\t\\tname: 'RSA-OAEP',\\n\\t\\t\\tmodulusLength: 2048,\\n\\t\\t\\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\\n\\t\\t\\thash: { name: 'SHA-256' },\\n\\t\\t} as any,\\n\\t\\ttrue,\\n\\t\\tkeyUsages,\\n\\t);\\n}\\n\\nexport async function importAESKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\treturn crypto.subtle.importKey('jwk', keyData, { name: 'AES-CBC' }, true, keyUsages);\\n}\\n\\nexport async function importRawKey(keyData: any, keyUsages: ReadonlyArray<KeyUsage> = ['deriveKey']) {\\n\\treturn crypto.subtle.importKey('raw', keyData, { name: 'PBKDF2' }, false, keyUsages);\\n}\\n\\nexport async function deriveKey(salt: any, baseKey: any, keyUsages: ReadonlyArray<KeyUsage> = ['encrypt', 'decrypt']) {\\n\\tconst iterations = 1000;\\n\\tconst hash = 'SHA-256';\\n\\n\\treturn crypto.subtle.deriveKey({ name: 'PBKDF2', salt, iterations, hash }, baseKey, { name: 'AES-CBC', length: 256 }, true, keyUsages);\\n}\\n\\nexport async function readFileAsArrayBuffer(file: any) {\\n\\treturn new Promise<any>((resolve, reject) => {\\n\\t\\tconst reader = new FileReader();\\n\\t\\treader.onload = (evt) => {\\n\\t\\t\\tresolve(evt.target?.result);\\n\\t\\t};\\n\\t\\treader.onerror = (evt) => {\\n\\t\\t\\treject(evt);\\n\\t\\t};\\n\\t\\treader.readAsArrayBuffer(file);\\n\\t});\\n}\\n\\nexport async function generateMnemonicPhrase(n: any, sep = ' ') {\\n\\tconst { default: wordList } = await import('./wordList');\\n\\tconst result = new Array(n);\\n\\tlet len = wordList.length;\\n\\tconst taken = new Array(len);\\n\\n\\twhile (n--) {\\n\\t\\tconst x = Math.floor(Random.fraction() * len);\\n\\t\\tresult[n] = wordList[x in taken ? taken[x] : x];\\n\\t\\ttaken[x] = --len in taken ? taken[len] : len;\\n\\t}\\n\\treturn result.join(sep);\\n}\\n\\nexport async function createSha256HashFromText(data: any) {\\n\\tconst hash = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(data));\\n\\treturn Array.from(new Uint8Array(hash))\\n\\t\\t.map((b) => b.toString(16).padStart(2, '0'))\\n\\t\\t.join('');\\n}\\n\\nexport async function sha256HashFromArrayBuffer(arrayBuffer: any) {\\n\\tconst hashArray = Array.from(new Uint8Array(await crypto.subtle.digest('SHA-256', arrayBuffer)));\\n\\treturn hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\\n}\\n\",null],\"names\":[\"Random\",\"ByteBuffer\",\"toString\",\"thing\",\"wrap\",\"toArrayBuffer\",\"undefined\",\"Object\",\"getPrototypeOf\",\"ArrayBuffer\",\"prototype\",\"Error\",\"concat\",\"joinVectorAndEcryptedData\",\"vector\",\"encryptedData\",\"cipherText\",\"Uint8Array\",\"output\",\"length\",\"set\",\"splitVectorAndEcryptedData\",\"slice\",\"encryptRSA\",\"key\",\"data\",\"crypto\",\"subtle\",\"encrypt\",\"name\",\"encryptAES\",\"iv\",\"encryptAESCTR\",\"counter\",\"decryptRSA\",\"decrypt\",\"decryptAES\",\"generateAESKey\",\"generateKey\",\"generateAESCTRKey\",\"generateRSAKey\",\"modulusLength\",\"publicExponent\",\"hash\",\"exportJWKKey\",\"exportKey\",\"importRSAKey\",\"keyData\",\"keyUsages\",\"arguments\",\"importKey\",\"importAESKey\",\"importRawKey\",\"deriveKey\",\"salt\",\"baseKey\",\"iterations\",\"readFileAsArrayBuffer\",\"file\",\"Promise\",\"resolve\",\"reject\",\"reader\",\"FileReader\",\"onload\",\"evt\",\"_evt$target\",\"target\",\"result\",\"onerror\",\"readAsArrayBuffer\",\"generateMnemonicPhrase\",\"n\",\"sep\",\"default\",\"wordList\",\"module\",\"dynamicImport\",\"Array\",\"len\",\"taken\",\"x\",\"Math\",\"floor\",\"fraction\",\"join\",\"createSha256HashFromText\",\"digest\",\"TextEncoder\",\"encode\",\"from\",\"map\",\"b\",\"padStart\",\"sha256HashFromArrayBuffer\",\"arrayBuffer\",\"hashArray\",\"export\",\"link\",\"v\"],\"mappings\":\"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\"}"}