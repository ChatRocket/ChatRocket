{"code":"function module(e,t,n){let s,i,r,a,u;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){s=e}},0),n.export({useWorkspaceInfo:()=>o,useRefreshStatistics:()=>c}),n.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){i=e}},0),n.link(\"@tanstack/react-query\",{useMutation(e){r=e},useQueries(e){a=e},useQueryClient(e){u=e}},1);let o=function(){let{refreshStatistics:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=i(\"GET\",\"/v1/statistics\"),n=i(\"GET\",\"/v1/instances.get\"),r=i(\"GET\",\"/info\");return a({queries:[{queryKey:[\"info\",\"serverInfo\"],queryFn:async()=>{let e=await r();if(!(\"minimumClientVersions\"in e)||!(\"info\"in e)||!(\"version\"in e))throw Error(\"Invalid server info\");return e},staleTime:1/0,keepPreviousData:!0},{queryKey:[\"info\",\"instances\"],queryFn:()=>n(),staleTime:1/0,keepPreviousData:!0,select(e){let{instances:t}=e;return t.map(e=>s(s({},e),e.instanceRecord&&{instanceRecord:s(s({},e.instanceRecord),{},{_createdAt:new Date(e.instanceRecord._createdAt)})}))}},{queryKey:[\"info\",\"statistics\"],queryFn:()=>t({refresh:e?\"true\":\"false\"}),staleTime:1/0,keepPreviousData:!0,select:e=>s(s({},e),{},{lastMessageSentAt:e.lastMessageSentAt?new Date(e.lastMessageSentAt):void 0})}]})},c=()=>{let e=u();return r({mutationFn:()=>e.invalidateQueries([\"info\",\"statistics\"])})}}","map":"{\"version\":3,\"sources\":[\"client/hooks/useWorkspaceInfo.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IStats, IWorkspaceInfo, Serialized } from '@rocket.chat/core-typings';\\nimport type { IInstance } from '@rocket.chat/rest-typings';\\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport { useMutation, useQueries, useQueryClient } from '@tanstack/react-query';\\n\\nexport const useWorkspaceInfo = ({ refreshStatistics }: { refreshStatistics?: boolean } = {}) => {\\n\\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\\n\\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\\n\\tconst getServerInfo = useEndpoint('GET', '/info');\\n\\n\\treturn useQueries({\\n\\t\\tqueries: [\\n\\t\\t\\t{\\n\\t\\t\\t\\tqueryKey: ['info', 'serverInfo'],\\n\\t\\t\\t\\tqueryFn: async () => {\\n\\t\\t\\t\\t\\tconst data = await getServerInfo();\\n\\n\\t\\t\\t\\t\\tif (!('minimumClientVersions' in data)) {\\n\\t\\t\\t\\t\\t\\tthrow new Error('Invalid server info');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (!('info' in data)) {\\n\\t\\t\\t\\t\\t\\tthrow new Error('Invalid server info');\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif (!('version' in data)) {\\n\\t\\t\\t\\t\\t\\tthrow new Error('Invalid server info');\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn data as IWorkspaceInfo;\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tstaleTime: Infinity,\\n\\t\\t\\t\\tkeepPreviousData: true,\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tqueryKey: ['info', 'instances'],\\n\\t\\t\\t\\tqueryFn: () => getInstances(),\\n\\t\\t\\t\\tstaleTime: Infinity,\\n\\t\\t\\t\\tkeepPreviousData: true,\\n\\t\\t\\t\\tselect({ instances }: Serialized<{ instances: IInstance[] }>) {\\n\\t\\t\\t\\t\\treturn instances.map((instance) => ({\\n\\t\\t\\t\\t\\t\\t...instance,\\n\\t\\t\\t\\t\\t\\t...(instance.instanceRecord && {\\n\\t\\t\\t\\t\\t\\t\\tinstanceRecord: {\\n\\t\\t\\t\\t\\t\\t\\t\\t...instance.instanceRecord,\\n\\t\\t\\t\\t\\t\\t\\t\\t_createdAt: new Date(instance.instanceRecord._createdAt),\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t\\t})) as IInstance[];\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tqueryKey: ['info', 'statistics'],\\n\\t\\t\\t\\tqueryFn: () => getStatistics({ refresh: refreshStatistics ? 'true' : 'false' }),\\n\\t\\t\\t\\tstaleTime: Infinity,\\n\\t\\t\\t\\tkeepPreviousData: true,\\n\\t\\t\\t\\tselect: (data: Serialized<IStats>) => ({\\n\\t\\t\\t\\t\\t...data,\\n\\t\\t\\t\\t\\tlastMessageSentAt: data.lastMessageSentAt ? new Date(data.lastMessageSentAt) : undefined,\\n\\t\\t\\t\\t}),\\n\\t\\t\\t},\\n\\t\\t],\\n\\t});\\n};\\n\\nexport const useRefreshStatistics = () => {\\n\\tconst queryClient = useQueryClient();\\n\\treturn useMutation({\\n\\t\\tmutationFn: () => queryClient.invalidateQueries(['info', 'statistics']),\\n\\t});\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useMutation\",\"useQueries\",\"useQueryClient\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useWorkspaceInfo\",\"useRefreshStatistics\",\"refreshStatistics\",\"arguments\",\"length\",\"undefined\",\"getStatistics\",\"getInstances\",\"getServerInfo\",\"queries\",\"queryKey\",\"queryFn\",\"data\",\"Error\",\"staleTime\",\"Infinity\",\"keepPreviousData\",\"select\",\"_ref\",\"instances\",\"map\",\"instance\",\"instanceRecord\",\"_createdAt\",\"Date\",\"refresh\",\"lastMessageSentAt\",\"queryClient\",\"mutationFn\",\"invalidateQueries\"],\"mappings\":\"2BAEAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAC,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAvDH,EAAOI,MAAE,CAAA,CAAAC,iBAAmBA,IAAAA,EAAAC,qBAA2BA,IAAAA,CAAA,GAAAN,EAAAC,IAAA,CAAA,2BAAA,CAAAL,YAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAJ,YAAAM,CAAA,EAAAN,EAAAM,CAAA,EAAAL,WAAAK,CAAA,EAAAL,EAAAK,CAAA,EAAAJ,eAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAGhD,IAAME,EAAmB,WAAgE,GAA/D,CAAEE,kBAAAA,CAAAA,CAAiB,CAAAC,UAAAC,MAAA,CAAA,GAAAD,AAAAE,KAAAA,IAAAF,SAAA,CAAA,EAAA,CAAAA,SAAA,CAAA,EAAA,CAAsC,CAAA,EACnFG,EAAgBf,EAAY,MAAO,kBACnCgB,EAAehB,EAAY,MAAO,qBAClCiB,EAAgBjB,EAAY,MAAO,SAEzC,OAAOE,EAAW,CACjBgB,QAAS,CACR,CACCC,SAAU,CAAC,OAAQ,aAAa,CAChCC,QAAS,UACR,IAAMC,EAAO,MAAMJ,IAEnB,GAAI,CAAE,CAAA,0BAA2BI,CAAAA,GAG7B,CAAE,CAAA,SAAUA,CAAAA,GAGZ,CAAE,CAAA,YAAaA,CAAAA,EALlB,MAAM,AAAIC,MAAM,uBASjB,OAAOD,CACR,EACAE,UAAWC,IACXC,iBAAkB,CAAA,GAEnB,CACCN,SAAU,CAAC,OAAQ,YAAY,CAC/BC,QAASA,IAAMJ,IACfO,UAAWC,IACXC,iBAAkB,CAAA,EAClBC,OAAMC,CAAA,EAAsD,GAArD,CAAEC,UAAAA,CAAAA,CAAmD,CAAAD,EAC3D,OAAOC,EAAUC,GAAG,CAAEC,GAAQ/B,EAAAA,EAAA,CAAA,EAC1B+B,GACCA,EAASC,cAAc,EAAI,CAC9BA,eAAchC,EAAAA,EAAA,CAAA,EACV+B,EAASC,cAAc,EAAA,CAAA,EAAA,CAC1BC,WAAY,IAAIC,KAAKH,EAASC,cAAc,CAACC,UAAU,CAAC,KAI5D,GAED,CACCb,SAAU,CAAC,OAAQ,aAAa,CAChCC,QAASA,IAAML,EAAc,CAAEmB,QAASvB,EAAoB,OAAS,OAAO,GAC5EY,UAAWC,IACXC,iBAAkB,CAAA,EAClBC,OAASL,GAAwBtB,EAAAA,EAAA,CAAA,EAC7BsB,GAAI,CAAA,EAAA,CACPc,kBAAmBd,EAAKc,iBAAiB,CAAG,IAAIF,KAAKZ,EAAKc,iBAAiB,EAAIrB,KAAAA,CAAS,IAEzF,EAGJ,EAEaJ,EAAuBA,KACnC,IAAM0B,EAAcjC,IACpB,OAAOF,EAAY,CAClBoC,WAAYA,IAAMD,EAAYE,iBAAiB,CAAC,CAAC,OAAQ,aAAa,GAExE\"}"}