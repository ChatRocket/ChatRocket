{"code":"function module(e,n,t){t.link(\"@babel/runtime/regenerator\",{default:function(e){o=e}},0),t.export({useToggleAutoJoin:function(){return m}}),t.link(\"@rocket.chat/ui-contexts\",{useEndpoint:function(e){r=e},usePermission:function(e){u=e},useSetting:function(e){a=e},useToastMessageDispatch:function(e){i=e}},0),t.link(\"i18next\",{t:function(e){s=e}},1),t.link(\"../../../../../lib/rooms/roomCoordinator\",{roomCoordinator:function(e){c=e}},2);var o,r,u,a,i,s,c,m=function(e,n){var t=n.reload,m=n.mainRoom,l=i(),f=r(\"POST\",\"/v1/teams.updateRoom\"),d=u(\"edit-team-channel\",e._id),p=a(\"API_User_Limit\");return{handleToggleAutoJoin:function(){var n,r,u;return o.async(function(a){for(;;)switch(a.prev=a.next){case 0:if(p){a.next=2;break}return a.abrupt(\"return\");case 2:return a.prev=2,a.next=5,o.awrap(f({roomId:e._id,isDefault:!e.teamDefault}));case 5:(n=a.sent.room).teamDefault&&(r=m.usersCount>p?\"info\":\"success\",u=m.usersCount>p?\"Team_Auto-join_exceeded_user_limit\":\"Team_Auto-join_updated\",l({type:r,message:s(u,{channelName:c.getRoomName(e.t,e),numberOfMembers:n.usersCount,limit:p})})),null==t||t(),a.next=14;break;case 11:a.prev=11,a.t0=a.catch(2),l({type:\"error\",message:a.t0});case 14:case\"end\":return a.stop()}},null,null,[[2,11]],Promise)},canEditTeamChannel:d}}}","map":"{\"version\":3,\"sources\":[\"client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom } from '@rocket.chat/core-typings';\\nimport { useEndpoint, usePermission, useSetting, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\\nimport { t } from 'i18next';\\n\\nimport { roomCoordinator } from '../../../../../lib/rooms/roomCoordinator';\\n\\nexport const useToggleAutoJoin = (room: IRoom, { reload, mainRoom }: { reload?: () => void; mainRoom: IRoom }) => {\\n\\tconst dispatchToastMessage = useToastMessageDispatch();\\n\\tconst updateRoomEndpoint = useEndpoint('POST', '/v1/teams.updateRoom');\\n\\tconst canEditTeamChannel = usePermission('edit-team-channel', room._id);\\n\\tconst maxNumberOfAutoJoinMembers = useSetting<number>('API_User_Limit');\\n\\n\\tconst handleToggleAutoJoin = async () => {\\n\\t\\t// Sanity check, the setting has a default value, therefore it should always be defined\\n\\t\\tif (!maxNumberOfAutoJoinMembers) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\ttry {\\n\\t\\t\\tconst { room: updatedRoom } = await updateRoomEndpoint({\\n\\t\\t\\t\\troomId: room._id,\\n\\t\\t\\t\\tisDefault: !room.teamDefault,\\n\\t\\t\\t});\\n\\t\\t\\tif (updatedRoom.teamDefault) {\\n\\t\\t\\t\\t// If the number of members in the mainRoom (the team) is greater than the limit, show an info message\\n\\t\\t\\t\\t// informing that not all members will be auto-joined to the channel\\n\\t\\t\\t\\tconst messageType = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'info' : 'success';\\n\\t\\t\\t\\tconst message = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'Team_Auto-join_exceeded_user_limit' : 'Team_Auto-join_updated';\\n\\n\\t\\t\\t\\tdispatchToastMessage({\\n\\t\\t\\t\\t\\ttype: messageType,\\n\\t\\t\\t\\t\\tmessage: t(message, {\\n\\t\\t\\t\\t\\t\\tchannelName: roomCoordinator.getRoomName(room.t, room),\\n\\t\\t\\t\\t\\t\\tnumberOfMembers: updatedRoom.usersCount,\\n\\t\\t\\t\\t\\t\\tlimit: maxNumberOfAutoJoinMembers,\\n\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t\\treload?.();\\n\\t\\t} catch (error) {\\n\\t\\t\\tdispatchToastMessage({ type: 'error', message: error });\\n\\t\\t}\\n\\t};\\n\\n\\treturn { handleToggleAutoJoin, canEditTeamChannel };\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_regeneratorRuntime\",\"export\",\"useToggleAutoJoin\",\"useEndpoint\",\"usePermission\",\"useSetting\",\"useToastMessageDispatch\",\"t\",\"roomCoordinator\",\"room\",\"_ref\",\"reload\",\"mainRoom\",\"dispatchToastMessage\",\"updateRoomEndpoint\",\"canEditTeamChannel\",\"_id\",\"maxNumberOfAutoJoinMembers\",\"handleToggleAutoJoin\",\"updatedRoom\",\"messageType\",\"message\",\"async\",\"_context\",\"prev\",\"next\",\"abrupt\",\"awrap\",\"roomId\",\"isDefault\",\"teamDefault\",\"_await$updateRoomEndp\",\"sent\",\"usersCount\",\"type\",\"channelName\",\"getRoomName\",\"numberOfMembers\",\"limit\",\"t0\",\"stop\",\"Promise\"],\"mappings\":\"uBACsBA,EAAAC,IAAa,CAAA,6BAAc,CAAAC,QAAyB,SAAMC,CAAA,EAAAC,EAA0BD,CAAC,CAAA,EAAA,GAA3GH,EAAOK,MAAE,CAAA,CAAAC,kBAAa,WAAe,OAAYA,CAAA,CAAA,GAA0DN,EAAAC,IAAA,CAAA,2BAAA,CAAAM,YAAA,SAAAJ,CAAA,EAAAI,EAAAJ,CAAA,EAAAK,cAAA,SAAAL,CAAA,EAAAK,EAAAL,CAAA,EAAAM,WAAA,SAAAN,CAAA,EAAAM,EAAAN,CAAA,EAAAO,wBAAA,SAAAP,CAAA,EAAAO,EAAAP,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,UAAA,CAAAU,EAAA,SAAAR,CAAA,EAAAQ,EAAAR,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,2CAAA,CAAAW,gBAAA,SAAAT,CAAA,EAAAS,EAAAT,CAAA,CAAA,EAAA,GAKpG,IALPC,EAA0EG,EAAMC,EAAAC,EAA2BC,EAAAC,EAAAC,EAK9FN,EAAoB,SAACO,CAAW,CAAAC,CAAA,EAAoE,IAAhEC,EAAMD,EAANC,MAAM,CAAEC,EAAQF,EAARE,QAAQ,CAC1DC,EAAuBP,IACvBQ,EAAqBX,EAAY,OAAQ,wBACzCY,EAAqBX,EAAc,oBAAqBK,EAAKO,GAAG,EAChEC,EAA6BZ,EAAmB,kBAkCtD,MAAO,CAAEa,qBAhCoB,WAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAArB,EAAAsB,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAAA,GAEvBR,EAA0B,CAAAM,EAAAE,IAAA,CAAA,EAAA,KAAA,CAAA,OAAAF,EAAAG,MAAA,CAAA,SAAA,MAAA,EAAA,OAAAH,EAAAC,IAAA,CAAA,EAAAD,EAAAE,IAAA,CAAA,EAAAzB,EAAA2B,KAAA,CAKMb,EAAmB,CACtDc,OAAQnB,EAAKO,GAAG,CAChBa,UAAW,CAACpB,EAAKqB,WAAAA,GAChB,MAAA,EACEX,AAJUA,CAAAA,EAAWY,AAGvBR,EAAAS,IAAA,CAHMvB,IAAI,AAAJA,EAIQqB,WAAW,GAGpBV,EAAcR,EAASqB,UAAU,CAAGhB,EAA6B,OAAS,UAC1EI,EAAUT,EAASqB,UAAU,CAAGhB,EAA6B,qCAAuC,yBAE1GJ,EAAqB,CACpBqB,KAAMd,EACNC,QAASd,EAAEc,EAAS,CACnBc,YAAa3B,EAAgB4B,WAAW,CAAC3B,EAAKF,CAAC,CAAEE,GACjD4B,gBAAiBlB,EAAYc,UAAU,CACvCK,MAAOrB,OAIVN,MAAAA,GAAAA,IAAWY,EAAAE,IAAA,CAAA,GAAA,KAAA,MAAA,GAAAF,EAAAC,IAAA,CAAA,GAAAD,EAAAgB,EAAA,CAAAhB,EAAA,KAAA,CAAA,GAEXV,EAAqB,CAAEqB,KAAM,QAASb,QAAOE,EAAAgB,EAAAA,AAAO,EAAI,MAAA,GAAA,IAAA,MAAA,OAAAhB,EAAAiB,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAAC,QAAA,EAI3B1B,mBAAAA,CAAkB,CAClD\"}"}