{"code":"function module(e,i,t){let n,a,l,r,o,u,s,c,h,d,v,m,g,k,p,b,f,_,L,y,C,S,q,w,A,O;t.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){n=e}},0),t.link(\"@rocket.chat/fuselage-hooks\",{useSafely(e){a=e}},0),t.link(\"@rocket.chat/ui-contexts\",{useUser(e){l=e},useSetting(e){r=e},usePermission(e){o=e},useMethod(e){u=e},useEndpoint(e){s=e},useStream(e){c=e}},1),t.link(\"@tanstack/react-query\",{useQuery(e){h=e},useQueryClient(e){d=e}},2),t.link(\"react\",{default(e){v=e},useState(e){m=e},useEffect(e){g=e},useMemo(e){k=e},useCallback(e){p=e},memo(e){b=e},useRef(e){f=e}},3),t.link(\"../../app/livechat/client/collections/LivechatInquiry\",{LivechatInquiry(e){_=e}},4),t.link(\"../../app/livechat/client/lib/stream/queueManager\",{initializeLivechatInquiryStream(e){L=e}},5),t.link(\"../../app/livechat/lib/inquiries\",{getOmniChatSortQuery(e){y=e}},6),t.link(\"../../app/ui/client/lib/KonchatNotification\",{KonchatNotification(e){C=e}},7),t.link(\"../../lib/ClientLogger\",{ClientLogger(e){S=e}},8),t.link(\"../contexts/OmnichannelContext\",{OmnichannelContext(e){q=e}},9),t.link(\"../hooks/useHasLicenseModule\",{useHasLicenseModule(e){w=e}},10),t.link(\"../hooks/useReactiveValue\",{useReactiveValue(e){A=e}},11),t.link(\"../hooks/useShouldPreventAction\",{useShouldPreventAction(e){O=e}},12);let E={inquiries:{enabled:!1},enabled:!1,isEnterprise:!1,agentAvailable:!1,showOmnichannelQueueLink:!1,isOverMacLimit:!1,livechatPriorities:{enabled:!1,data:[],isLoading:!1,isError:!1}};t.exportDefault(b(e=>{var i;let{children:t}=e,b=r(\"Livechat_enabled\"),M=r(\"Livechat_Routing_Method\"),Q=r(\"Livechat_show_queue_list_link\"),R=null!==(i=r(\"Livechat_guest_pool_max_number_incoming_livechats_displayed\"))&&void 0!==i?i:0,x=r(\"Omnichannel_sorting_mechanism\"),P=f(new S(\"OmnichannelProvider\")),I=o(\"view-l-room\"),N=o(\"view-livechat-queue\"),T=l(),D=(null==T?void 0:T.statusLivechat)===\"available\",H=u(\"livechat:getRoutingConfig\"),[K,V]=a(m(void 0)),[j,z]=m(new Set),G=I&&b,J=r(\"WebRTC_Servers\"),U=!0===w(\"livechat-enterprise\"),W=s(\"GET\",\"/v1/livechat/priorities\"),B=c(\"notify-logged\"),F=d(),X=U&&G,Y=G&&!!T&&!!K,{data:{priorities:Z=[]}={},isInitialLoading:$,isError:ee}=h([\"/v1/livechat/priorities\"],()=>W({sort:JSON.stringify({sortItem:1})}),{staleTime:1/0,enabled:X}),ei=O(\"monthlyActiveContacts\");g(()=>{if(X)return B(\"omnichannel.priority-changed\",()=>{F.invalidateQueries([\"/v1/livechat/priorities\"])})},[X,F,B]),g(()=>{if(!G)return;let e=async()=>{try{let e=await H();V(e)}catch(e){P.current.error(\"update() error in routeConfig \".concat(e))}};(M||!M)&&e()},[G,H,J,M,V,!0]);let et=Y&&N&&!!K&&K.showQueue&&!K.autoAssignAgent&&D,en=c(\"notify-user\");g(()=>{if(et&&(L(null==T?void 0:T._id),null!=T&&T._id))return en(\"\".concat(T._id,\"/departmentAgentData\"),()=>{L(null==T?void 0:T._id)})},[et,en,null==T?void 0:T._id]);let ea=A(p(()=>{if(et)return _.find({status:\"queued\"},{sort:y(x),limit:R}).fetch()},[et,R,x]));null==ea||ea.map(e=>{let{rid:i}=e;if(!j.has(i))return z(e=>new Set([...e,i])),C.newRoom(i)});let el=k(()=>{if(!Y)return E;let e={enabled:X,data:Z,isLoading:$,isError:ee};return et?n(n({},E),{},{enabled:!0,isEnterprise:U,agentAvailable:D,voipCallAvailable:!0,routeConfig:K,inquiries:ea?{enabled:!0,queue:ea}:{enabled:!1},showOmnichannelQueueLink:Q&&!!D,livechatPriorities:e,isOverMacLimit:ei}):n(n({},E),{},{enabled:!0,isEnterprise:U,agentAvailable:D,voipCallAvailable:!0,routeConfig:K,livechatPriorities:e,isOverMacLimit:ei})},[Y,X,Z,$,ee,et,U,D,!0,K,ea,Q,ei]);return v.createElement(q.Provider,{children:t,value:el})}))}","map":"{\"version\":3,\"sources\":[\"client/providers/OmnichannelProvider.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type {\\n\\tIOmnichannelAgent,\\n\\tOmichannelRoutingConfig,\\n\\tOmnichannelSortingMechanismSettingType,\\n\\tILivechatInquiryRecord,\\n} from '@rocket.chat/core-typings';\\nimport { useSafely } from '@rocket.chat/fuselage-hooks';\\nimport { useUser, useSetting, usePermission, useMethod, useEndpoint, useStream } from '@rocket.chat/ui-contexts';\\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\\nimport type { ReactNode } from 'react';\\nimport React, { useState, useEffect, useMemo, useCallback, memo, useRef } from 'react';\\n\\nimport { LivechatInquiry } from '../../app/livechat/client/collections/LivechatInquiry';\\nimport { initializeLivechatInquiryStream } from '../../app/livechat/client/lib/stream/queueManager';\\nimport { getOmniChatSortQuery } from '../../app/livechat/lib/inquiries';\\nimport { KonchatNotification } from '../../app/ui/client/lib/KonchatNotification';\\nimport { ClientLogger } from '../../lib/ClientLogger';\\nimport type { OmnichannelContextValue } from '../contexts/OmnichannelContext';\\nimport { OmnichannelContext } from '../contexts/OmnichannelContext';\\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\\nimport { useReactiveValue } from '../hooks/useReactiveValue';\\nimport { useShouldPreventAction } from '../hooks/useShouldPreventAction';\\n\\nconst emptyContextValue: OmnichannelContextValue = {\\n\\tinquiries: { enabled: false },\\n\\tenabled: false,\\n\\tisEnterprise: false,\\n\\tagentAvailable: false,\\n\\tshowOmnichannelQueueLink: false,\\n\\tisOverMacLimit: false,\\n\\tlivechatPriorities: {\\n\\t\\tenabled: false,\\n\\t\\tdata: [],\\n\\t\\tisLoading: false,\\n\\t\\tisError: false,\\n\\t},\\n};\\n\\ntype OmnichannelProviderProps = {\\n\\tchildren?: ReactNode;\\n};\\n\\nconst OmnichannelProvider = ({ children }: OmnichannelProviderProps) => {\\n\\tconst omniChannelEnabled = useSetting('Livechat_enabled') as boolean;\\n\\tconst omnichannelRouting = useSetting('Livechat_Routing_Method');\\n\\tconst showOmnichannelQueueLink = useSetting('Livechat_show_queue_list_link') as boolean;\\n\\tconst omnichannelPoolMaxIncoming = useSetting<number>('Livechat_guest_pool_max_number_incoming_livechats_displayed') ?? 0;\\n\\tconst omnichannelSortingMechanism = useSetting('Omnichannel_sorting_mechanism') as OmnichannelSortingMechanismSettingType;\\n\\n\\tconst loggerRef = useRef(new ClientLogger('OmnichannelProvider'));\\n\\tconst hasAccess = usePermission('view-l-room');\\n\\tconst canViewOmnichannelQueue = usePermission('view-livechat-queue');\\n\\tconst user = useUser() as IOmnichannelAgent;\\n\\n\\tconst agentAvailable = user?.statusLivechat === 'available';\\n\\tconst voipCallAvailable = true; // TODO: use backend check;\\n\\n\\tconst getRoutingConfig = useMethod('livechat:getRoutingConfig');\\n\\n\\tconst [routeConfig, setRouteConfig] = useSafely(useState<OmichannelRoutingConfig | undefined>(undefined));\\n\\tconst [queueNotification, setQueueNotification] = useState(new Set());\\n\\n\\tconst accessible = hasAccess && omniChannelEnabled;\\n\\tconst iceServersSetting: any = useSetting('WebRTC_Servers');\\n\\tconst isEnterprise = useHasLicenseModule('livechat-enterprise') === true;\\n\\n\\tconst getPriorities = useEndpoint('GET', '/v1/livechat/priorities');\\n\\tconst subscribe = useStream('notify-logged');\\n\\tconst queryClient = useQueryClient();\\n\\tconst isPrioritiesEnabled = isEnterprise && accessible;\\n\\tconst enabled = accessible && !!user && !!routeConfig;\\n\\n\\tconst {\\n\\t\\tdata: { priorities = [] } = {},\\n\\t\\tisInitialLoading: isLoadingPriorities,\\n\\t\\tisError: isErrorPriorities,\\n\\t} = useQuery(['/v1/livechat/priorities'], () => getPriorities({ sort: JSON.stringify({ sortItem: 1 }) }), {\\n\\t\\tstaleTime: Infinity,\\n\\t\\tenabled: isPrioritiesEnabled,\\n\\t});\\n\\n\\tconst isOverMacLimit = useShouldPreventAction('monthlyActiveContacts');\\n\\n\\tuseEffect(() => {\\n\\t\\tif (!isPrioritiesEnabled) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\treturn subscribe('omnichannel.priority-changed', () => {\\n\\t\\t\\tqueryClient.invalidateQueries(['/v1/livechat/priorities']);\\n\\t\\t});\\n\\t}, [isPrioritiesEnabled, queryClient, subscribe]);\\n\\n\\tuseEffect(() => {\\n\\t\\tif (!accessible) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst update = async (): Promise<void> => {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tconst routeConfig = await getRoutingConfig();\\n\\t\\t\\t\\tsetRouteConfig(routeConfig);\\n\\t\\t\\t} catch (error) {\\n\\t\\t\\t\\tloggerRef.current.error(`update() error in routeConfig ${error}`);\\n\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\tif (omnichannelRouting || !omnichannelRouting) {\\n\\t\\t\\tupdate();\\n\\t\\t}\\n\\t}, [accessible, getRoutingConfig, iceServersSetting, omnichannelRouting, setRouteConfig, voipCallAvailable]);\\n\\n\\tconst manuallySelected =\\n\\t\\tenabled && canViewOmnichannelQueue && !!routeConfig && routeConfig.showQueue && !routeConfig.autoAssignAgent && agentAvailable;\\n\\n\\tconst streamNotifyUser = useStream('notify-user');\\n\\tuseEffect(() => {\\n\\t\\tif (!manuallySelected) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst handleDepartmentAgentData = (): void => {\\n\\t\\t\\tinitializeLivechatInquiryStream(user?._id);\\n\\t\\t};\\n\\n\\t\\tinitializeLivechatInquiryStream(user?._id);\\n\\t\\tif (!user?._id) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\treturn streamNotifyUser(`${user._id}/departmentAgentData`, handleDepartmentAgentData);\\n\\t}, [manuallySelected, streamNotifyUser, user?._id]);\\n\\n\\tconst queue = useReactiveValue<ILivechatInquiryRecord[] | undefined>(\\n\\t\\tuseCallback(() => {\\n\\t\\t\\tif (!manuallySelected) {\\n\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn LivechatInquiry.find(\\n\\t\\t\\t\\t{ status: 'queued' },\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tsort: getOmniChatSortQuery(omnichannelSortingMechanism),\\n\\t\\t\\t\\t\\tlimit: omnichannelPoolMaxIncoming,\\n\\t\\t\\t\\t},\\n\\t\\t\\t).fetch();\\n\\t\\t}, [manuallySelected, omnichannelPoolMaxIncoming, omnichannelSortingMechanism]),\\n\\t);\\n\\n\\tqueue?.map(({ rid }) => {\\n\\t\\tif (queueNotification.has(rid)) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tsetQueueNotification((prev) => new Set([...prev, rid]));\\n\\t\\treturn KonchatNotification.newRoom(rid);\\n\\t});\\n\\n\\tconst contextValue = useMemo<OmnichannelContextValue>(() => {\\n\\t\\tif (!enabled) {\\n\\t\\t\\treturn emptyContextValue;\\n\\t\\t}\\n\\n\\t\\tconst livechatPriorities = {\\n\\t\\t\\tenabled: isPrioritiesEnabled,\\n\\t\\t\\tdata: priorities,\\n\\t\\t\\tisLoading: isLoadingPriorities,\\n\\t\\t\\tisError: isErrorPriorities,\\n\\t\\t};\\n\\n\\t\\tif (!manuallySelected) {\\n\\t\\t\\treturn {\\n\\t\\t\\t\\t...emptyContextValue,\\n\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\tisEnterprise,\\n\\t\\t\\t\\tagentAvailable,\\n\\t\\t\\t\\tvoipCallAvailable,\\n\\t\\t\\t\\trouteConfig,\\n\\t\\t\\t\\tlivechatPriorities,\\n\\t\\t\\t\\tisOverMacLimit,\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn {\\n\\t\\t\\t...emptyContextValue,\\n\\t\\t\\tenabled: true,\\n\\t\\t\\tisEnterprise,\\n\\t\\t\\tagentAvailable,\\n\\t\\t\\tvoipCallAvailable,\\n\\t\\t\\trouteConfig,\\n\\t\\t\\tinquiries: queue\\n\\t\\t\\t\\t? {\\n\\t\\t\\t\\t\\t\\tenabled: true,\\n\\t\\t\\t\\t\\t\\tqueue,\\n\\t\\t\\t\\t  }\\n\\t\\t\\t\\t: { enabled: false },\\n\\t\\t\\tshowOmnichannelQueueLink: showOmnichannelQueueLink && !!agentAvailable,\\n\\t\\t\\tlivechatPriorities,\\n\\t\\t\\tisOverMacLimit,\\n\\t\\t};\\n\\t}, [\\n\\t\\tenabled,\\n\\t\\tisPrioritiesEnabled,\\n\\t\\tpriorities,\\n\\t\\tisLoadingPriorities,\\n\\t\\tisErrorPriorities,\\n\\t\\tmanuallySelected,\\n\\t\\tisEnterprise,\\n\\t\\tagentAvailable,\\n\\t\\tvoipCallAvailable,\\n\\t\\trouteConfig,\\n\\t\\tqueue,\\n\\t\\tshowOmnichannelQueueLink,\\n\\t\\tisOverMacLimit,\\n\\t]);\\n\\n\\treturn <OmnichannelContext.Provider children={children} value={contextValue} />;\\n};\\n\\nexport default memo<typeof OmnichannelProvider>(OmnichannelProvider);\\n\",null],\"names\":[\"_objectSpread\",\"useSafely\",\"useUser\",\"useSetting\",\"usePermission\",\"useMethod\",\"useEndpoint\",\"useStream\",\"useQuery\",\"useQueryClient\",\"React\",\"useState\",\"useEffect\",\"useMemo\",\"useCallback\",\"memo\",\"useRef\",\"LivechatInquiry\",\"initializeLivechatInquiryStream\",\"getOmniChatSortQuery\",\"KonchatNotification\",\"ClientLogger\",\"OmnichannelContext\",\"useHasLicenseModule\",\"useReactiveValue\",\"useShouldPreventAction\",\"module\",\"link\",\"default\",\"v\",\"emptyContextValue\",\"inquiries\",\"enabled\",\"isEnterprise\",\"agentAvailable\",\"showOmnichannelQueueLink\",\"isOverMacLimit\",\"livechatPriorities\",\"data\",\"isLoading\",\"isError\",\"exportDefault\",\"_ref\",\"_useSetting\",\"children\",\"omniChannelEnabled\",\"omnichannelRouting\",\"omnichannelPoolMaxIncoming\",\"omnichannelSortingMechanism\",\"loggerRef\",\"hasAccess\",\"canViewOmnichannelQueue\",\"user\",\"statusLivechat\",\"getRoutingConfig\",\"routeConfig\",\"setRouteConfig\",\"undefined\",\"queueNotification\",\"setQueueNotification\",\"Set\",\"accessible\",\"iceServersSetting\",\"getPriorities\",\"subscribe\",\"queryClient\",\"isPrioritiesEnabled\",\"priorities\",\"isInitialLoading\",\"isLoadingPriorities\",\"isErrorPriorities\",\"sort\",\"JSON\",\"stringify\",\"sortItem\",\"staleTime\",\"Infinity\",\"invalidateQueries\",\"update\",\"error\",\"current\",\"concat\",\"manuallySelected\",\"showQueue\",\"autoAssignAgent\",\"streamNotifyUser\",\"_id\",\"handleDepartmentAgentData\",\"queue\",\"find\",\"status\",\"limit\",\"fetch\",\"map\",\"_ref2\",\"rid\",\"has\",\"prev\",\"newRoom\",\"contextValue\",\"voipCallAvailable\",\"createElement\",\"Provider\",\"value\"],\"mappings\":\"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\"}"}