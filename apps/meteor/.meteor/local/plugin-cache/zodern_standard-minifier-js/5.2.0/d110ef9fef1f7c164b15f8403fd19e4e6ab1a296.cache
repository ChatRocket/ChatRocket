{"code":"function module(t,r,e){let i,s,a;e.export({Session:()=>o}),e.link(\"sodium-plus\",{SodiumPlus(t){i=t},X25519PublicKey(t){s=t}},0);class o{constructor(){this.stringFormatKey=\"base64\",this.stringFormatEncryptedData=\"base64\",this.stringFormatRawData=\"base64\",this.decryptKey=void 0,this.encryptKey=void 0,this.secretKey=void 0,this.publicKey=void 0}async sodium(){return a||i.auto()}get publicKeyString(){return this.publicKey.toString(this.stringFormatKey)}publicKeyFromString(t){return new s(Buffer.from(t,this.stringFormatKey))}async encryptToBuffer(t){let r=await this.sodium(),e=await r.randombytes_buf(24),i=await r.crypto_secretbox(Buffer.from(t).toString(this.stringFormatRawData),e,this.encryptKey);return Buffer.concat([e,i])}async encrypt(t){let r=await this.encryptToBuffer(t);return r.toString(this.stringFormatEncryptedData)}async decryptToBuffer(t){let r=await this.sodium(),e=Buffer.from(Buffer.isBuffer(t)?t.toString():t,this.stringFormatEncryptedData),i=await r.crypto_secretbox_open(e.slice(24),e.slice(0,24),this.decryptKey);return Buffer.from(i.toString(),this.stringFormatRawData)}async decrypt(t){let r=await this.decryptToBuffer(t);return r.toString()}}}","map":"{\"version\":3,\"sources\":[\"app/ecdh/Session.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { X25519SecretKey, CryptographyKey } from 'sodium-plus';\\nimport { SodiumPlus, X25519PublicKey } from 'sodium-plus';\\n\\nlet sodium: SodiumPlus;\\n\\nexport class Session {\\n\\t// Encoding for the key exchange, no requirements to be small\\n\\tprotected readonly stringFormatKey: BufferEncoding = 'base64';\\n\\n\\t// Encoding for the transfer of encrypted data, should be smaller as possible\\n\\tprotected readonly stringFormatEncryptedData: BufferEncoding = 'base64';\\n\\n\\t// Encoding before the encryption to keep unicode chars\\n\\tprotected readonly stringFormatRawData: BufferEncoding = 'base64';\\n\\n\\tprotected decryptKey: CryptographyKey;\\n\\n\\tprotected encryptKey: CryptographyKey;\\n\\n\\tprotected secretKey: X25519SecretKey;\\n\\n\\tpublic publicKey: X25519PublicKey;\\n\\n\\tasync sodium(): Promise<SodiumPlus> {\\n\\t\\treturn sodium || SodiumPlus.auto();\\n\\t}\\n\\n\\tget publicKeyString(): string {\\n\\t\\treturn this.publicKey.toString(this.stringFormatKey);\\n\\t}\\n\\n\\tpublicKeyFromString(text: string): X25519PublicKey {\\n\\t\\treturn new X25519PublicKey(Buffer.from(text, this.stringFormatKey));\\n\\t}\\n\\n\\tasync encryptToBuffer(plaintext: string | Buffer): Promise<Buffer> {\\n\\t\\tconst sodium = await this.sodium();\\n\\t\\tconst nonce = await sodium.randombytes_buf(24);\\n\\n\\t\\tconst ciphertext = await sodium.crypto_secretbox(Buffer.from(plaintext).toString(this.stringFormatRawData), nonce, this.encryptKey);\\n\\n\\t\\treturn Buffer.concat([nonce, ciphertext]);\\n\\t}\\n\\n\\tasync encrypt(plaintext: string | Buffer): Promise<string> {\\n\\t\\tconst buffer = await this.encryptToBuffer(plaintext);\\n\\t\\treturn buffer.toString(this.stringFormatEncryptedData);\\n\\t}\\n\\n\\tasync decryptToBuffer(data: string | Buffer): Promise<Buffer> {\\n\\t\\tconst sodium = await this.sodium();\\n\\t\\tconst buffer = Buffer.from(Buffer.isBuffer(data) ? data.toString() : data, this.stringFormatEncryptedData);\\n\\n\\t\\tconst decrypted = await sodium.crypto_secretbox_open(buffer.slice(24), buffer.slice(0, 24), this.decryptKey);\\n\\n\\t\\treturn Buffer.from(decrypted.toString(), this.stringFormatRawData);\\n\\t}\\n\\n\\tasync decrypt(data: string | Buffer): Promise<string> {\\n\\t\\tconst buffer = await this.decryptToBuffer(data);\\n\\t\\treturn buffer.toString();\\n\\t}\\n}\\n\",null],\"names\":[\"SodiumPlus\",\"X25519PublicKey\",\"sodium\",\"module\",\"export\",\"Session\",\"link\",\"v\",\"constructor\",\"stringFormatKey\",\"stringFormatEncryptedData\",\"stringFormatRawData\",\"decryptKey\",\"encryptKey\",\"secretKey\",\"publicKey\",\"auto\",\"publicKeyString\",\"toString\",\"publicKeyFromString\",\"text\",\"Buffer\",\"from\",\"encryptToBuffer\",\"plaintext\",\"nonce\",\"randombytes_buf\",\"ciphertext\",\"crypto_secretbox\",\"concat\",\"encrypt\",\"buffer\",\"decryptToBuffer\",\"data\",\"isBuffer\",\"decrypted\",\"crypto_secretbox_open\",\"slice\",\"decrypt\"],\"mappings\":\"2BACsCA,EAAMC,EAExCC,EAFJC,EAAOC,MAAE,CAAA,CAAAC,QAAYA,IAAAA,CAAA,GAAqCF,EAAAG,IAAA,CAAA,cAAA,CAAAN,WAAAO,CAAA,EAAAP,EAAAO,CAAA,EAAAN,gBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,EAIpD,OAAOF,EAAOG,aAAA,CACnB,IAAA,CACmBC,eAAe,CAAmB,SAErD,IAAA,CACmBC,yBAAyB,CAAmB,SAE/D,IAAA,CACmBC,mBAAmB,CAAmB,SAAQ,IAAA,CAEvDC,UAAU,CAAA,KAAA,EAAA,IAAA,CAEVC,UAAU,CAAA,KAAA,EAAA,IAAA,CAEVC,SAAS,CAAA,KAAA,EAAA,IAAA,CAEZC,SAAS,CAAA,KAAA,CAAA,CAEhB,MAAMb,QAAM,CACX,OAAOA,GAAUF,EAAWgB,IAAI,EACjC,CAEA,IAAIC,iBAAe,CAClB,OAAO,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,IAAI,CAACT,eAAe,CACpD,CAEAU,oBAAoBC,CAAY,CAAA,CAC/B,OAAO,IAAInB,EAAgBoB,OAAOC,IAAI,CAACF,EAAM,IAAI,CAACX,eAAe,EAClE,CAEA,MAAMc,gBAAgBC,CAA0B,CAAA,CAC/C,IAAMtB,EAAS,MAAM,IAAI,CAACA,MAAM,GAC1BuB,EAAQ,MAAMvB,EAAOwB,eAAe,CAAC,IAErCC,EAAa,MAAMzB,EAAO0B,gBAAgB,CAACP,OAAOC,IAAI,CAACE,GAAWN,QAAQ,CAAC,IAAI,CAACP,mBAAmB,EAAGc,EAAO,IAAI,CAACZ,UAAU,EAElI,OAAOQ,OAAOQ,MAAM,CAAC,CAACJ,EAAOE,EAAW,CACzC,CAEA,MAAMG,QAAQN,CAA0B,CAAA,CACvC,IAAMO,EAAS,MAAM,IAAI,CAACR,eAAe,CAACC,GAC1C,OAAOO,EAAOb,QAAQ,CAAC,IAAI,CAACR,yBAAyB,CACtD,CAEA,MAAMsB,gBAAgBC,CAAqB,CAAA,CAC1C,IAAM/B,EAAS,MAAM,IAAI,CAACA,MAAM,GAC1B6B,EAASV,OAAOC,IAAI,CAACD,OAAOa,QAAQ,CAACD,GAAQA,EAAKf,QAAQ,GAAKe,EAAM,IAAI,CAACvB,yBAAyB,EAEnGyB,EAAY,MAAMjC,EAAOkC,qBAAqB,CAACL,EAAOM,KAAK,CAAC,IAAKN,EAAOM,KAAK,CAAC,EAAG,IAAK,IAAI,CAACzB,UAAU,EAE3G,OAAOS,OAAOC,IAAI,CAACa,EAAUjB,QAAQ,GAAI,IAAI,CAACP,mBAAmB,CAClE,CAEA,MAAM2B,QAAQL,CAAqB,CAAA,CAClC,IAAMF,EAAS,MAAM,IAAI,CAACC,eAAe,CAACC,GAC1C,OAAOF,EAAOb,QAAQ,EACvB\"}"}