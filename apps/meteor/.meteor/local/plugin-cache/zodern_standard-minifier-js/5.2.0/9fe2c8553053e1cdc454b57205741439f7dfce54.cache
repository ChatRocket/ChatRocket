{"code":"function module(n,t,e){e.export({useMessageBody:function(){return a}}),e.link(\"@rocket.chat/ui-contexts\",{useUserSubscription:function(n){i=n}},0),e.link(\"react\",{useMemo:function(n){u=n}},1),e.link(\"../../../../lib/parseMessageTextToAstMarkdown\",{parseMessageTextToAstMarkdown:function(n){r=n}},2),e.link(\"./useAutoLinkDomains\",{useAutoLinkDomains:function(n){o=n}},3),e.link(\"./useAutoTranslate\",{useAutoTranslate:function(n){s=n}},4);var i,u,r,o,s,a=function(n,t){var e=i(t),a=s(e),c=o();return u(function(){if(!n)return\"\";if(n.md)return r(n,{customDomains:c,emoticons:!0},a).md;if(n.msg)return n.msg;if(n.attachments){var t=n.attachments.find(function(n){return n.title||n.description});if(null!=t&&t.description)return t.description;if(null!=t&&t.title)return t.title}return\"\"},[n,c,a])}}","map":"{\"version\":3,\"sources\":[\"client/views/room/MessageList/hooks/useMessageBody.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport type { Options, Root } from '@rocket.chat/message-parser';\\nimport { useUserSubscription } from '@rocket.chat/ui-contexts';\\nimport { useMemo } from 'react';\\n\\nimport { parseMessageTextToAstMarkdown } from '../../../../lib/parseMessageTextToAstMarkdown';\\nimport { useAutoLinkDomains } from './useAutoLinkDomains';\\nimport { useAutoTranslate } from './useAutoTranslate';\\n\\nexport const useMessageBody = (message: IMessage | undefined, rid: string): string | Root => {\\n\\tconst subscription = useUserSubscription(rid);\\n\\tconst autoTranslateOptions = useAutoTranslate(subscription);\\n\\tconst customDomains = useAutoLinkDomains();\\n\\n\\treturn useMemo(() => {\\n\\t\\tif (!message) {\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\n\\t\\tif (message.md) {\\n\\t\\t\\tconst parseOptions: Options = {\\n\\t\\t\\t\\tcustomDomains,\\n\\t\\t\\t\\temoticons: true,\\n\\t\\t\\t};\\n\\n\\t\\t\\tconst messageWithMd = parseMessageTextToAstMarkdown(message, parseOptions, autoTranslateOptions);\\n\\n\\t\\t\\treturn messageWithMd.md;\\n\\t\\t}\\n\\n\\t\\tif (message.msg) {\\n\\t\\t\\treturn message.msg;\\n\\t\\t}\\n\\n\\t\\tif (message.attachments) {\\n\\t\\t\\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\\n\\n\\t\\t\\tif (attachment?.description) {\\n\\t\\t\\t\\treturn attachment.description;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (attachment?.title) {\\n\\t\\t\\t\\treturn attachment.title;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn '';\\n\\t}, [message, customDomains, autoTranslateOptions]);\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useMessageBody\",\"link\",\"useUserSubscription\",\"v\",\"useMemo\",\"parseMessageTextToAstMarkdown\",\"useAutoLinkDomains\",\"useAutoTranslate\",\"message\",\"rid\",\"subscription\",\"autoTranslateOptions\",\"customDomains\",\"md\",\"messageWithMd\",\"emoticons\",\"msg\",\"attachments\",\"attachment\",\"find\",\"title\",\"description\"],\"mappings\":\"uBAEAA,EAAOC,MAAE,CAAA,CAAAC,eAAqB,WAAM,OAAAA,CAA0B,CAAC,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAC,oBAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,QAAA,CAAAG,QAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,gDAAA,CAAAI,8BAAA,SAAAF,CAAA,EAAAE,EAAAF,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,uBAAA,CAAAK,mBAAA,SAAAH,CAAA,EAAAG,EAAAH,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,qBAAA,CAAAM,iBAAA,SAAAJ,CAAA,EAAAI,EAAAJ,CAAA,CAAA,EAAA,GAOxD,IAPwDD,EAAAE,EAAAC,EAAAC,EAAAC,EAOlDP,EAAiB,SAACQ,CAA6B,CAAEC,CAAW,EACxE,IAAMC,EAAeR,EAAoBO,GACnCE,EAAuBJ,EAAiBG,GACxCE,EAAgBN,IAEtB,OAAOF,EAAQ,WACd,GAAI,CAACI,EACJ,MAAO,GAGR,GAAIA,EAAQK,EAAE,CAQb,OAAOC,AAFeT,EAA8BG,EALtB,CAC7BI,cAAAA,EACAG,UAAW,CAAA,GAG+DJ,GAEtDE,EAAE,CAGxB,GAAIL,EAAQQ,GAAG,CACd,OAAOR,EAAQQ,GAAG,CAGnB,GAAIR,EAAQS,WAAW,CAAE,CACxB,IAAMC,EAAaV,EAAQS,WAAW,CAACE,IAAI,CAAC,SAACD,CAAU,EAAA,OAAKA,EAAWE,KAAK,EAAIF,EAAWG,WAAW,GAEtG,GAAIH,MAAAA,GAAAA,EAAYG,WAAW,CAC1B,OAAOH,EAAWG,WAAW,CAG9B,GAAIH,MAAAA,GAAAA,EAAYE,KAAK,CACpB,OAAOF,EAAWE,KAAK,AAEzB,CAEA,MAAO,EACR,EAAG,CAACZ,EAASI,EAAeD,EAAqB,CAClD\"}"}