{"code":"function module(o,r,e){e.export({RoomContext:function(){return u},useUserIsSubscribed:function(){return c},useRoom:function(){return a},useRoomSubscription:function(){return m},useRoomMessages:function(){return f},useOmnichannelRoom:function(){return d},useVoipRoom:function(){return p}}),e.link(\"@rocket.chat/core-typings\",{isOmnichannelRoom:function(o){n=o},isVoipRoom:function(o){s=o}},0),e.link(\"react\",{createContext:function(o){i=o},useContext:function(o){t=o}},1);var n,s,i,t,u=i(null),c=function(){var o=t(u);if(!o)throw Error(\"use useRoom only inside opened rooms\");return!!o.subscription},a=function(){var o=t(u);if(!o)throw Error(\"use useRoom only inside opened rooms\");return o.room},m=function(){var o=t(u);if(!o)throw Error(\"use useRoomSubscription only inside opened rooms\");return o.subscription},f=function(){var o=t(u);if(!o)throw Error(\"use useRoomMessages only inside opened rooms\");return{hasMorePreviousMessages:o.hasMorePreviousMessages,hasMoreNextMessages:o.hasMoreNextMessages,isLoadingMoreMessages:o.isLoadingMoreMessages}},d=function(){var o=(t(u)||{}).room;if(!o)throw Error(\"use useRoom only inside opened rooms\");if(!n(o))throw Error(\"invalid room type\");return o},p=function(){var o=(t(u)||{}).room;if(!o)throw Error(\"use useRoom only inside opened rooms\");if(!s(o))throw Error(\"invalid room type\");return o}}","map":"{\"version\":3,\"sources\":[\"client/views/room/contexts/RoomContext.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom, IOmnichannelRoom, IVoipRoom, ISubscription } from '@rocket.chat/core-typings';\\nimport { isOmnichannelRoom, isVoipRoom } from '@rocket.chat/core-typings';\\nimport { createContext, useContext } from 'react';\\n\\nexport interface IRoomWithFederationOriginalName extends IRoom {\\n\\tfederationOriginalName?: string;\\n}\\n\\ntype RoomContextValue = {\\n\\trid: IRoom['_id'];\\n\\troom: IRoomWithFederationOriginalName;\\n\\tsubscription?: ISubscription;\\n\\thasMorePreviousMessages: boolean;\\n\\thasMoreNextMessages: boolean;\\n\\tisLoadingMoreMessages: boolean;\\n};\\n\\nexport const RoomContext = createContext<RoomContextValue | null>(null);\\n\\nexport const useUserIsSubscribed = (): boolean => {\\n\\tconst context = useContext(RoomContext);\\n\\n\\tif (!context) {\\n\\t\\tthrow new Error('use useRoom only inside opened rooms');\\n\\t}\\n\\n\\treturn !!context.subscription;\\n};\\n\\nexport const useRoom = (): IRoom => {\\n\\tconst context = useContext(RoomContext);\\n\\n\\tif (!context) {\\n\\t\\tthrow new Error('use useRoom only inside opened rooms');\\n\\t}\\n\\n\\treturn context.room;\\n};\\n\\nexport const useRoomSubscription = (): ISubscription | undefined => {\\n\\tconst context = useContext(RoomContext);\\n\\n\\tif (!context) {\\n\\t\\tthrow new Error('use useRoomSubscription only inside opened rooms');\\n\\t}\\n\\n\\treturn context.subscription;\\n};\\n\\nexport const useRoomMessages = (): {\\n\\thasMorePreviousMessages: boolean;\\n\\thasMoreNextMessages: boolean;\\n\\tisLoadingMoreMessages: boolean;\\n} => {\\n\\tconst context = useContext(RoomContext);\\n\\n\\tif (!context) {\\n\\t\\tthrow new Error('use useRoomMessages only inside opened rooms');\\n\\t}\\n\\n\\treturn {\\n\\t\\thasMorePreviousMessages: context.hasMorePreviousMessages,\\n\\t\\thasMoreNextMessages: context.hasMoreNextMessages,\\n\\t\\tisLoadingMoreMessages: context.isLoadingMoreMessages,\\n\\t};\\n};\\n\\nexport const useOmnichannelRoom = (): IOmnichannelRoom => {\\n\\t// TODO: today if the user do not belong in the room, the room object will not update on new changes\\n\\t// for normal rooms this is OK, but for Omnichannel rooms,\\n\\t// there are cases where an agent can be outside of the room but need to see the room changes\\n\\t// A solution would be to use subscribeToRoom to get the room updates\\n\\n\\tconst { room } = useContext(RoomContext) || {};\\n\\n\\tif (!room) {\\n\\t\\tthrow new Error('use useRoom only inside opened rooms');\\n\\t}\\n\\n\\tif (!isOmnichannelRoom(room)) {\\n\\t\\tthrow new Error('invalid room type');\\n\\t}\\n\\n\\treturn room;\\n};\\n\\nexport const useVoipRoom = (): IVoipRoom => {\\n\\tconst { room } = useContext(RoomContext) || {};\\n\\n\\tif (!room) {\\n\\t\\tthrow new Error('use useRoom only inside opened rooms');\\n\\t}\\n\\n\\tif (!isVoipRoom(room)) {\\n\\t\\tthrow new Error('invalid room type');\\n\\t}\\n\\n\\treturn room;\\n};\\n\",null],\"names\":[\"module\",\"export\",\"RoomContext\",\"useUserIsSubscribed\",\"useRoom\",\"useRoomSubscription\",\"useRoomMessages\",\"useOmnichannelRoom\",\"useVoipRoom\",\"link\",\"isOmnichannelRoom\",\"v\",\"isVoipRoom\",\"createContext\",\"useContext\",\"context\",\"Error\",\"subscription\",\"room\",\"hasMorePreviousMessages\",\"hasMoreNextMessages\",\"isLoadingMoreMessages\",\"_ref\",\"_ref2\"],\"mappings\":\"uBACAA,EAAOC,MAAE,CAAA,CAAAC,YAAiB,WAAY,OAAEA,CAAM,EAAAC,oBAA4B,WAAA,OAAAA,CAAA,EAAAC,QAAA,WAAA,OAAAA,CAAA,EAAAC,oBAAA,WAAA,OAAAA,CAAA,EAAAC,gBAAA,WAAA,OAAAA,CAAA,EAAAC,mBAAA,WAAA,OAAAA,CAAA,EAAAC,YAAA,WAAA,OAAAA,CAAA,CAAA,GAAAR,EAAAS,IAAA,CAAA,4BAAA,CAAAC,kBAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,EAAAC,WAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAX,EAAAS,IAAA,CAAA,QAAA,CAAAI,cAAA,SAAAF,CAAA,EAAAE,EAAAF,CAAA,EAAAG,WAAA,SAAAH,CAAA,EAAAG,EAAAH,CAAA,CAAA,EAAA,GAgBnE,IAhBmED,EAAAE,EAAAC,EAAAC,EAgB7DZ,EAAcW,EAAuC,MAErDV,EAAsB,WAClC,IAAMY,EAAUD,EAAWZ,GAE3B,GAAI,CAACa,EACJ,MAAM,AAAIC,MAAM,wCAGjB,MAAO,CAAC,CAACD,EAAQE,YAAY,AAC9B,EAEab,EAAU,WACtB,IAAMW,EAAUD,EAAWZ,GAE3B,GAAI,CAACa,EACJ,MAAM,AAAIC,MAAM,wCAGjB,OAAOD,EAAQG,IAAI,AACpB,EAEab,EAAsB,WAClC,IAAMU,EAAUD,EAAWZ,GAE3B,GAAI,CAACa,EACJ,MAAM,AAAIC,MAAM,oDAGjB,OAAOD,EAAQE,YAAY,AAC5B,EAEaX,EAAkB,WAK9B,IAAMS,EAAUD,EAAWZ,GAE3B,GAAI,CAACa,EACJ,MAAM,AAAIC,MAAM,gDAGjB,MAAO,CACNG,wBAAyBJ,EAAQI,uBAAuB,CACxDC,oBAAqBL,EAAQK,mBAAmB,CAChDC,sBAAuBN,EAAQM,qBAAAA,CAEjC,EAEad,EAAqB,WAMjC,IAAQW,EAAII,AAAKR,CAAAA,EAAWZ,IAAgB,CAAA,CAAA,EAApCgB,IAAI,CAEZ,GAAI,CAACA,EACJ,MAAM,AAAIF,MAAM,wCAGjB,GAAI,CAACN,EAAkBQ,GACtB,MAAM,AAAIF,MAAM,qBAGjB,OAAOE,CACR,EAEaV,EAAc,WAC1B,IAAQU,EAAIK,AAAKT,CAAAA,EAAWZ,IAAgB,CAAA,CAAA,EAApCgB,IAAI,CAEZ,GAAI,CAACA,EACJ,MAAM,AAAIF,MAAM,wCAGjB,GAAI,CAACJ,EAAWM,GACf,MAAM,AAAIF,MAAM,qBAGjB,OAAOE,CACR\"}"}