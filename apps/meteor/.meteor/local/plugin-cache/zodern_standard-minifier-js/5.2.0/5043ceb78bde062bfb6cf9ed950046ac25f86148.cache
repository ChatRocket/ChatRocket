{"code":"function module(e,t,n){let u,r,o;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){u=e}},0),n.export({useUserInfoQuery:()=>i}),n.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){r=e}},0),n.link(\"@tanstack/react-query\",{useQuery(e){o=e}},1);let i=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{keepPreviousData:!0},n=r(\"GET\",\"/v1/users.info\");return o([\"users.info\",e],()=>n(u({},e)),t)}}","map":"{\"version\":3,\"sources\":[\"client/hooks/useUserInfoQuery.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { UsersInfoParamsGet } from '@rocket.chat/rest-typings';\\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport { useQuery } from '@tanstack/react-query';\\n\\ntype UserInfoQueryOptions = {\\n\\tenabled?: boolean;\\n\\tkeepPreviousData?: boolean;\\n};\\n\\n// a hook using tanstack useQuery and useEndpoint that fetches user information from the `users.info` endpoint\\nexport const useUserInfoQuery = (params: UsersInfoParamsGet, options: UserInfoQueryOptions = { keepPreviousData: true }) => {\\n\\tconst getUserInfo = useEndpoint('GET', '/v1/users.info');\\n\\treturn useQuery(['users.info', params], () => getUserInfo({ ...params }), options);\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useQuery\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useUserInfoQuery\",\"params\",\"options\",\"arguments\",\"length\",\"undefined\",\"keepPreviousData\",\"getUserInfo\"],\"mappings\":\"2BACAA,EAAuDC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAC,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAvDH,EAAOI,MAAE,CAAA,CAAAC,iBAAmBA,IAAAA,CAAA,GAA2BL,EAAAC,IAAA,CAAA,2BAAA,CAAAH,YAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAF,SAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAShD,IAAME,EAAmB,SAACC,CAA0B,EAAgE,IAA9DC,EAAAC,UAAAC,MAAA,CAAA,GAAAD,AAAAE,KAAAA,IAAAF,SAAA,CAAA,EAAA,CAAAA,SAAA,CAAA,EAAA,CAAgC,CAAEG,iBAAkB,CAAA,CAAI,EAC9GC,EAAcd,EAAY,MAAO,kBACvC,OAAOC,EAAS,CAAC,aAAcO,EAAO,CAAE,IAAMM,EAAWf,EAAA,CAAA,EAAMS,IAAWC,EAC3E\"}"}