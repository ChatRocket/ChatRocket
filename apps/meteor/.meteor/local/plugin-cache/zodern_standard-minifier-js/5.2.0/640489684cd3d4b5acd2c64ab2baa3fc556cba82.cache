{"code":"Package[\"core-runtime\"].queue(\"ddp-common\",function(){var e,t=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv,Package.check.check,Package.check.Match;var n=Package.random.Random,a=Package.ejson.EJSON;Package.tracker.Tracker,Package.tracker.Deps,Package.retry.Retry;var r=Package.modules.meteorInstall,i=Package.modules.meteorBabelHelpers,o=Package.promise.Promise;return Package[\"ecmascript-runtime-client\"].Symbol,Package[\"ecmascript-runtime-client\"].Map,Package[\"ecmascript-runtime-client\"].Set,{export:function(){return{DDPCommon:e}},require:r({node_modules:{meteor:{\"ddp-common\":{\"namespace.js\":function t(){e={}},\"heartbeat.js\":function n(){e.Heartbeat=function(){function e(e){this.heartbeatInterval=e.heartbeatInterval,this.heartbeatTimeout=e.heartbeatTimeout,this._sendPing=e.sendPing,this._onTimeout=e.onTimeout,this._seenPacket=!1,this._heartbeatIntervalHandle=null,this._heartbeatTimeoutHandle=null}var n=e.prototype;return n.stop=function(){this._clearHeartbeatIntervalTimer(),this._clearHeartbeatTimeoutTimer()},n.start=function(){this.stop(),this._startHeartbeatIntervalTimer()},n._startHeartbeatIntervalTimer=function(){var e=this;this._heartbeatIntervalHandle=t.setInterval(function(){return e._heartbeatIntervalFired()},this.heartbeatInterval)},n._startHeartbeatTimeoutTimer=function(){var e=this;this._heartbeatTimeoutHandle=t.setTimeout(function(){return e._heartbeatTimeoutFired()},this.heartbeatTimeout)},n._clearHeartbeatIntervalTimer=function(){this._heartbeatIntervalHandle&&(t.clearInterval(this._heartbeatIntervalHandle),this._heartbeatIntervalHandle=null)},n._clearHeartbeatTimeoutTimer=function(){this._heartbeatTimeoutHandle&&(t.clearTimeout(this._heartbeatTimeoutHandle),this._heartbeatTimeoutHandle=null)},n._heartbeatIntervalFired=function(){this._seenPacket||this._heartbeatTimeoutHandle||(this._sendPing(),this._startHeartbeatTimeoutTimer()),this._seenPacket=!1},n._heartbeatTimeoutFired=function(){this._heartbeatTimeoutHandle=null,this._onTimeout()},n.messageReceived=function(){this._seenPacket=!0,this._heartbeatTimeoutHandle&&this._clearHeartbeatTimeoutTimer()},e}()},\"utils.js\":function n(n,r,o){\"use strict\";o.link(\"@babel/runtime/helpers/typeof\",{default:function(e){s=e}},0),o.export({hasOwn:function(){return c},slice:function(){return l},keys:function(){return u},isEmpty:function(){return d},last:function(){return m}});var s,c=Object.prototype.hasOwnProperty,l=Array.prototype.slice;function u(e){return Object.keys(Object(e))}function d(e){if(null==e)return!0;if(Array.isArray(e)||\"string\"==typeof e)return 0===e.length;for(var t in i.sanitizeForInObject(e))if(c.call(e,t))return!1;return!0}function m(e,t,n){return null==e?void 0:null==t||n?e[e.length-1]:l.call(e,Math.max(e.length-t,0))}e.SUPPORTED_DDP_VERSIONS=[\"1\",\"pre2\",\"pre1\"],e.parseDDP=function(e){try{var n=JSON.parse(e)}catch(n){return t._debug(\"Discarding message with invalid JSON\",e),null}return null===n||\"object\"!==s(n)?(t._debug(\"Discarding non-object DDP message\",e),null):(c.call(n,\"cleared\")&&(c.call(n,\"fields\")||(n.fields={}),n.cleared.forEach(function(e){n.fields[e]=void 0}),delete n.cleared),[\"fields\",\"params\",\"result\"].forEach(function(e){c.call(n,e)&&(n[e]=a._adjustTypesFromJSONValue(n[e]))}),n)},e.stringifyDDP=function(e){var t=a.clone(e);if(c.call(e,\"fields\")){var n=[];Object.keys(e.fields).forEach(function(a){void 0===e.fields[a]&&(n.push(a),delete t.fields[a])}),d(n)||(t.cleared=n),d(t.fields)&&delete t.fields}if([\"fields\",\"params\",\"result\"].forEach(function(e){c.call(t,e)&&(t[e]=a._adjustTypesToJSONValue(t[e]))}),e.id&&\"string\"!=typeof e.id)throw Error(\"Message id is not a string\");return JSON.stringify(t)}},\"method_invocation.js\":function t(t,n,a){var r;a.link(\"@babel/runtime/regenerator\",{default:function(e){r=e}},0),e.MethodInvocation=function(){function e(e){this.name=e.name,this.isSimulation=e.isSimulation,this._unblock=e.unblock||function(){},this._calledUnblock=!1,this._isFromCallAsync=e.isFromCallAsync,this.userId=e.userId,this._setUserId=e.setUserId||function(){},this.connection=e.connection,this.randomSeed=e.randomSeed,this.randomStream=null,this.fence=e.fence}var t=e.prototype;return t.unblock=function(){this._calledUnblock=!0,this._unblock()},t.setUserId=function(e){return r.async(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this._calledUnblock){t.next=2;break}throw Error(\"Can't call setUserId in a method after calling unblock\");case 2:return this.userId=e,t.next=5,r.awrap(this._setUserId(e));case 5:case\"end\":return t.stop()}},null,this,null,o)},e}()},\"random_stream.js\":function t(){e.RandomStream=function(){function e(e){this.seed=[].concat(e.seed||n.hexString(20)),this.sequences=Object.create(null)}return e.prototype._sequence=function(e){var t=this.sequences[e]||null;if(null===t){for(var a=this.seed.concat(e),r=0;r<a.length;r++)\"function\"==typeof a[r]&&(a[r]=a[r]());this.sequences[e]=t=n.createWithSeeds.apply(null,a)}return t},e}(),e.RandomStream.get=function(t,a){if(a||(a=\"default\"),!t)return n.insecure;var r=t.randomStream;return r||(t.randomStream=r=new e.RandomStream({seed:t.randomSeed})),r._sequence(a)},e.makeRpcSeed=function(t,n){return e.RandomStream.get(t,\"/rpc/\"+n).hexString(20)}}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/ddp-common/namespace.js\",\"/node_modules/meteor/ddp-common/heartbeat.js\",\"/node_modules/meteor/ddp-common/utils.js\",\"/node_modules/meteor/ddp-common/method_invocation.js\",\"/node_modules/meteor/ddp-common/random_stream.js\"]}});","map":"{\"version\":3,\"sources\":[\"packages/ddp-common/namespace.js\",\"packages/ddp-common/heartbeat.js\",\"packages/ddp-common/utils.js\",\"packages/ddp-common/method_invocation.js\",\"packages/ddp-common/random_stream.js\",\"<anon>\"],\"sourcesContent\":[\"/**\\n * @namespace DDPCommon\\n * @summary Namespace for DDPCommon-related methods/classes. Shared between \\n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation\\n * of a ddp client for both client AND server; and the ddp server is the\\n * implementation of the livedata server and stream server. Common \\n * functionality shared between both can be shared under this namespace\\n */\\nDDPCommon = {};\\n\",\"// Heartbeat options:\\n//   heartbeatInterval: interval to send pings, in milliseconds.\\n//   heartbeatTimeout: timeout to close the connection if a reply isn't\\n//     received, in milliseconds.\\n//   sendPing: function to call to send a ping on the connection.\\n//   onTimeout: function to call to close the connection.\\n\\nDDPCommon.Heartbeat = class Heartbeat {\\n  constructor(options) {\\n    this.heartbeatInterval = options.heartbeatInterval;\\n    this.heartbeatTimeout = options.heartbeatTimeout;\\n    this._sendPing = options.sendPing;\\n    this._onTimeout = options.onTimeout;\\n    this._seenPacket = false;\\n\\n    this._heartbeatIntervalHandle = null;\\n    this._heartbeatTimeoutHandle = null;\\n  }\\n\\n  stop() {\\n    this._clearHeartbeatIntervalTimer();\\n    this._clearHeartbeatTimeoutTimer();\\n  }\\n\\n  start() {\\n    this.stop();\\n    this._startHeartbeatIntervalTimer();\\n  }\\n\\n  _startHeartbeatIntervalTimer() {\\n    this._heartbeatIntervalHandle = Meteor.setInterval(\\n      () => this._heartbeatIntervalFired(),\\n      this.heartbeatInterval\\n    );\\n  }\\n\\n  _startHeartbeatTimeoutTimer() {\\n    this._heartbeatTimeoutHandle = Meteor.setTimeout(\\n      () => this._heartbeatTimeoutFired(),\\n      this.heartbeatTimeout\\n    );\\n  }\\n\\n  _clearHeartbeatIntervalTimer() {\\n    if (this._heartbeatIntervalHandle) {\\n      Meteor.clearInterval(this._heartbeatIntervalHandle);\\n      this._heartbeatIntervalHandle = null;\\n    }\\n  }\\n\\n  _clearHeartbeatTimeoutTimer() {\\n    if (this._heartbeatTimeoutHandle) {\\n      Meteor.clearTimeout(this._heartbeatTimeoutHandle);\\n      this._heartbeatTimeoutHandle = null;\\n    }\\n  }\\n\\n  // The heartbeat interval timer is fired when we should send a ping.\\n  _heartbeatIntervalFired() {\\n    // don't send ping if we've seen a packet since we last checked,\\n    // *or* if we have already sent a ping and are awaiting a timeout.\\n    // That shouldn't happen, but it's possible if\\n    // `this.heartbeatInterval` is smaller than\\n    // `this.heartbeatTimeout`.\\n    if (! this._seenPacket && ! this._heartbeatTimeoutHandle) {\\n      this._sendPing();\\n      // Set up timeout, in case a pong doesn't arrive in time.\\n      this._startHeartbeatTimeoutTimer();\\n    }\\n    this._seenPacket = false;\\n  }\\n\\n  // The heartbeat timeout timer is fired when we sent a ping, but we\\n  // timed out waiting for the pong.\\n  _heartbeatTimeoutFired() {\\n    this._heartbeatTimeoutHandle = null;\\n    this._onTimeout();\\n  }\\n\\n  messageReceived() {\\n    // Tell periodic checkin that we have seen a packet, and thus it\\n    // does not need to send a ping this cycle.\\n    this._seenPacket = true;\\n    // If we were waiting for a pong, we got it.\\n    if (this._heartbeatTimeoutHandle) {\\n      this._clearHeartbeatTimeoutTimer();\\n    }\\n  }\\n};\\n\",\"\\\"use strict\\\";\\n\\nexport const hasOwn = Object.prototype.hasOwnProperty;\\nexport const slice = Array.prototype.slice;\\n\\nexport function keys(obj) {\\n  return Object.keys(Object(obj));\\n}\\n\\nexport function isEmpty(obj) {\\n  if (obj == null) {\\n    return true;\\n  }\\n\\n  if (Array.isArray(obj) ||\\n      typeof obj === \\\"string\\\") {\\n    return obj.length === 0;\\n  }\\n\\n  for (const key in obj) {\\n    if (hasOwn.call(obj, key)) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n}\\n\\nexport function last(array, n, guard) {\\n  if (array == null) {\\n    return;\\n  }\\n\\n  if ((n == null) || guard) {\\n    return array[array.length - 1];\\n  }\\n\\n  return slice.call(array, Math.max(array.length - n, 0));\\n}\\n\\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];\\n\\nDDPCommon.parseDDP = function (stringMessage) {\\n  try {\\n    var msg = JSON.parse(stringMessage);\\n  } catch (e) {\\n    Meteor._debug(\\\"Discarding message with invalid JSON\\\", stringMessage);\\n    return null;\\n  }\\n  // DDP messages must be objects.\\n  if (msg === null || typeof msg !== 'object') {\\n    Meteor._debug(\\\"Discarding non-object DDP message\\\", stringMessage);\\n    return null;\\n  }\\n\\n  // massage msg to get it into \\\"abstract ddp\\\" rather than \\\"wire ddp\\\" format.\\n\\n  // switch between \\\"cleared\\\" rep of unsetting fields and \\\"undefined\\\"\\n  // rep of same\\n  if (hasOwn.call(msg, 'cleared')) {\\n    if (! hasOwn.call(msg, 'fields')) {\\n      msg.fields = {};\\n    }\\n    msg.cleared.forEach(clearKey => {\\n      msg.fields[clearKey] = undefined;\\n    });\\n    delete msg.cleared;\\n  }\\n\\n  ['fields', 'params', 'result'].forEach(field => {\\n    if (hasOwn.call(msg, field)) {\\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);\\n    }\\n  });\\n\\n  return msg;\\n};\\n\\nDDPCommon.stringifyDDP = function (msg) {\\n  const copy = EJSON.clone(msg);\\n\\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields\\n  // and cleared' rep\\n  if (hasOwn.call(msg, 'fields')) {\\n    const cleared = [];\\n\\n    Object.keys(msg.fields).forEach(key => {\\n      const value = msg.fields[key];\\n\\n      if (typeof value === \\\"undefined\\\") {\\n        cleared.push(key);\\n        delete copy.fields[key];\\n      }\\n    });\\n\\n    if (! isEmpty(cleared)) {\\n      copy.cleared = cleared;\\n    }\\n\\n    if (isEmpty(copy.fields)) {\\n      delete copy.fields;\\n    }\\n  }\\n\\n  // adjust types to basic\\n  ['fields', 'params', 'result'].forEach(field => {\\n    if (hasOwn.call(copy, field)) {\\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);\\n    }\\n  });\\n\\n  if (msg.id && typeof msg.id !== 'string') {\\n    throw new Error(\\\"Message id is not a string\\\");\\n  }\\n\\n  return JSON.stringify(copy);\\n};\\n\",\"// Instance name is this because it is usually referred to as this inside a\\n// method definition\\n/**\\n * @summary The state for a single invocation of a method, referenced by this\\n * inside a method definition.\\n * @param {Object} options\\n * @instanceName this\\n * @showInstanceName true\\n */\\nDDPCommon.MethodInvocation = class MethodInvocation {\\n  constructor(options) {\\n    // true if we're running not the actual method, but a stub (that is,\\n    // if we're on a client (which may be a browser, or in the future a\\n    // server connecting to another server) and presently running a\\n    // simulation of a server-side method for latency compensation\\n    // purposes). not currently true except in a client such as a browser,\\n    // since there's usually no point in running stubs unless you have a\\n    // zero-latency connection to the user.\\n\\n    /**\\n     * @summary The name given to the method.\\n     * @locus Anywhere\\n     * @name  name\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     * @type {String}\\n     */\\n    this.name = options.name;\\n\\n    /**\\n     * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.\\n     * @locus Anywhere\\n     * @name  isSimulation\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     * @type {Boolean}\\n     */\\n    this.isSimulation = options.isSimulation;\\n\\n    // call this function to allow other method invocations (from the\\n    // same client) to continue running without waiting for this one to\\n    // complete.\\n    this._unblock = options.unblock || function () {};\\n    this._calledUnblock = false;\\n\\n    // used to know when the function apply was called by callAsync\\n    this._isFromCallAsync = options.isFromCallAsync;\\n\\n    // current user id\\n\\n    /**\\n     * @summary The id of the user that made this method call, or `null` if no user was logged in.\\n     * @locus Anywhere\\n     * @name  userId\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     */\\n    this.userId = options.userId;\\n\\n    // sets current user id in all appropriate server contexts and\\n    // reruns subscriptions\\n    this._setUserId = options.setUserId || function () {};\\n\\n    // On the server, the connection this method call came in on.\\n\\n    /**\\n     * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call. Calls to methods made from a server method which was in turn initiated from the client share the same `connection`.\\n     * @locus Server\\n     * @name  connection\\n     * @memberOf DDPCommon.MethodInvocation\\n     * @instance\\n     */\\n    this.connection = options.connection;\\n\\n    // The seed for randomStream value generation\\n    this.randomSeed = options.randomSeed;\\n\\n    // This is set by RandomStream.get; and holds the random stream state\\n    this.randomStream = null;\\n\\n    this.fence = options.fence;\\n  }\\n\\n  /**\\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\\n   * @locus Server\\n   * @memberOf DDPCommon.MethodInvocation\\n   * @instance\\n   */\\n  unblock() {\\n    this._calledUnblock = true;\\n    this._unblock();\\n  }\\n\\n  /**\\n   * @summary Set the logged in user.\\n   * @locus Server\\n   * @memberOf DDPCommon.MethodInvocation\\n   * @instance\\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\\n   */\\n  async setUserId(userId) {\\n    if (this._calledUnblock) {\\n      throw new Error(\\\"Can't call setUserId in a method after calling unblock\\\");\\n    }\\n    this.userId = userId;\\n    await this._setUserId(userId);\\n  }\\n};\\n\",\"// RandomStream allows for generation of pseudo-random values, from a seed.\\n//\\n// We use this for consistent 'random' numbers across the client and server.\\n// We want to generate probably-unique IDs on the client, and we ideally want\\n// the server to generate the same IDs when it executes the method.\\n//\\n// For generated values to be the same, we must seed ourselves the same way,\\n// and we must keep track of the current state of our pseudo-random generators.\\n// We call this state the scope. By default, we use the current DDP method\\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.\\n// If a randomSeed is provided it will be used to seed our random sequences.\\n// In this way, client and server method calls will generate the same values.\\n//\\n// We expose multiple named streams; each stream is independent\\n// and is seeded differently (but predictably from the name).\\n// By using multiple streams, we support reordering of requests,\\n// as long as they occur on different streams.\\n//\\n// @param options {Optional Object}\\n//   seed: Array or value - Seed value(s) for the generator.\\n//                          If an array, will be used as-is\\n//                          If a value, will be converted to a single-value array\\n//                          If omitted, a random array will be used as the seed.\\nDDPCommon.RandomStream = class RandomStream {\\n  constructor(options) {\\n    this.seed = [].concat(options.seed || randomToken());\\n    this.sequences = Object.create(null);\\n  }\\n\\n  // Get a random sequence with the specified name, creating it if does not exist.\\n  // New sequences are seeded with the seed concatenated with the name.\\n  // By passing a seed into Random.create, we use the Alea generator.\\n  _sequence(name) {\\n    var self = this;\\n\\n    var sequence = self.sequences[name] || null;\\n    if (sequence === null) {\\n      var sequenceSeed = self.seed.concat(name);\\n      for (var i = 0; i < sequenceSeed.length; i++) {\\n        if (typeof sequenceSeed[i] === \\\"function\\\") {\\n          sequenceSeed[i] = sequenceSeed[i]();\\n        }\\n      }\\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);\\n    }\\n    return sequence;\\n  }\\n};\\n\\n// Returns a random string of sufficient length for a random seed.\\n// This is a placeholder function; a similar function is planned\\n// for Random itself; when that is added we should remove this function,\\n// and call Random's randomToken instead.\\nfunction randomToken() {\\n  return Random.hexString(20);\\n};\\n\\n// Returns the random stream with the specified name, in the specified\\n// scope. If a scope is passed, then we use that to seed a (not\\n// cryptographically secure) PRNG using the fast Alea algorithm.  If\\n// scope is null (or otherwise falsey) then we use a generated seed.\\n//\\n// However, scope will normally be the current DDP method invocation,\\n// so we'll use the stream with the specified name, and we should get\\n// consistent values on the client and server sides of a method call.\\nDDPCommon.RandomStream.get = function (scope, name) {\\n  if (!name) {\\n    name = \\\"default\\\";\\n  }\\n  if (!scope) {\\n    // There was no scope passed in; the sequence won't actually be\\n    // reproducible. but make it fast (and not cryptographically\\n    // secure) anyways, so that the behavior is similar to what you'd\\n    // get by passing in a scope.\\n    return Random.insecure;\\n  }\\n  var randomStream = scope.randomStream;\\n  if (!randomStream) {\\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({\\n      seed: scope.randomSeed\\n    });\\n  }\\n  return randomStream._sequence(name);\\n};\\n\\n// Creates a randomSeed for passing to a method call.\\n// Note that we take enclosing as an argument,\\n// though we expect it to be DDP._CurrentMethodInvocation.get()\\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant\\n// invocation may not be the one currently in scope.\\n// If enclosing is null, we'll use Random and values won't be repeatable.\\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {\\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);\\n  return stream.hexString(20);\\n};\\n\",null],\"names\":[\"DDPCommon\",\"Heartbeat\",\"options\",\"heartbeatInterval\",\"heartbeatTimeout\",\"_sendPing\",\"sendPing\",\"_onTimeout\",\"onTimeout\",\"_seenPacket\",\"_heartbeatIntervalHandle\",\"_heartbeatTimeoutHandle\",\"_proto\",\"prototype\",\"stop\",\"_clearHeartbeatIntervalTimer\",\"_clearHeartbeatTimeoutTimer\",\"start\",\"_startHeartbeatIntervalTimer\",\"_this\",\"Meteor\",\"setInterval\",\"_heartbeatIntervalFired\",\"_startHeartbeatTimeoutTimer\",\"_this2\",\"setTimeout\",\"_heartbeatTimeoutFired\",\"clearInterval\",\"clearTimeout\",\"messageReceived\",\"module\",\"link\",\"default\",\"v\",\"_typeof\",\"export\",\"hasOwn\",\"slice\",\"keys\",\"isEmpty\",\"last\",\"Object\",\"hasOwnProperty\",\"Array\",\"obj\",\"isArray\",\"length\",\"key\",\"meteorBabelHelpers\",\"sanitizeForInObject\",\"call\",\"array\",\"n\",\"guard\",\"Math\",\"max\",\"SUPPORTED_DDP_VERSIONS\",\"parseDDP\",\"stringMessage\",\"msg\",\"JSON\",\"parse\",\"e\",\"_debug\",\"fields\",\"cleared\",\"forEach\",\"clearKey\",\"undefined\",\"field\",\"EJSON\",\"_adjustTypesFromJSONValue\",\"stringifyDDP\",\"copy\",\"clone\",\"push\",\"_adjustTypesToJSONValue\",\"id\",\"Error\",\"stringify\",\"_regeneratorRuntime\",\"MethodInvocation\",\"name\",\"isSimulation\",\"_unblock\",\"unblock\",\"_calledUnblock\",\"_isFromCallAsync\",\"isFromCallAsync\",\"userId\",\"_setUserId\",\"setUserId\",\"connection\",\"randomSeed\",\"randomStream\",\"fence\",\"async\",\"_context\",\"prev\",\"next\",\"awrap\",\"Promise\",\"RandomStream\",\"seed\",\"concat\",\"Random\",\"hexString\",\"sequences\",\"create\",\"_sequence\",\"sequence\",\"self\",\"sequenceSeed\",\"i\",\"createWithSeeds\",\"apply\",\"get\",\"scope\",\"insecure\",\"makeRpcSeed\",\"enclosing\",\"methodName\",\"stream\"],\"mappings\":\"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\"}"}