{"code":"function module(e,r,t){let i,n,s;t.export({useWebRtcServers:()=>o}),t.link(\"@rocket.chat/ui-contexts\",{useSetting(e){i=e}},0),t.link(\"react\",{useMemo(e){n=e}},1),t.link(\"../lib/parseStringToIceServers\",{parseStringToIceServers(e){s=e}},2);let o=()=>{let e=i(\"WebRTC_Servers\");return n(()=>\"string\"==typeof e&&e.trim()?s(e):[],[e])}}","map":"{\"version\":3,\"sources\":[\"client/providers/CallProvider/hooks/useWebRtcServers.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSetting } from '@rocket.chat/ui-contexts';\\nimport { useMemo } from 'react';\\n\\nimport type { IceServer } from '../definitions/IceServer';\\nimport { parseStringToIceServers } from '../lib/parseStringToIceServers';\\n\\nexport const useWebRtcServers = (): IceServer[] => {\\n\\tconst servers = useSetting('WebRTC_Servers');\\n\\n\\treturn useMemo(() => {\\n\\t\\tif (typeof servers !== 'string' || !servers.trim()) {\\n\\t\\t\\treturn [];\\n\\t\\t}\\n\\t\\treturn parseStringToIceServers(servers);\\n\\t}, [servers]);\\n};\\n\",null],\"names\":[\"useSetting\",\"useMemo\",\"parseStringToIceServers\",\"module\",\"export\",\"useWebRtcServers\",\"link\",\"v\",\"servers\",\"trim\"],\"mappings\":\"2BAAsDA,EAAAC,EAAAC,EAAtDC,EAAOC,MAAE,CAAA,CAAAC,iBAAkBA,IAAAA,CAAA,GAA2BF,EAAAG,IAAA,CAAA,2BAAA,CAAAN,WAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,QAAA,CAAAL,QAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,iCAAA,CAAAJ,wBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAM/C,IAAMF,EAAmBA,KAC/B,IAAMG,EAAUR,EAAW,kBAE3B,OAAOC,EAAQ,IACd,AAAI,AAAmB,UAAnB,OAAOO,GAAyBA,EAAQC,IAAI,GAGzCP,EAAwBM,GAFvB,EAAE,CAGR,CAACA,EAAQ,CACb\"}"}