{"code":"function module(r,n,o){o.export({useFieldError:function(){return u}}),o.link(\"react-hook-form\",{get:function(r){t=r},useFormState:function(r){e=r}},0);var t,e,u=function(r){var n=r.control,o=r.name,u=Array.isArray(o)?o:[o],a=e({control:n,name:o}).errors;return u.map(function(r){return t(a,r)})}}","map":"{\"version\":3,\"sources\":[\"client/views/omnichannel/triggers/hooks/useFieldError.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { Control, FieldError, FieldPath, FieldValues } from 'react-hook-form';\\nimport { get, useFormState } from 'react-hook-form';\\n\\ntype UseFieldErrorProps<TFieldValues extends FieldValues> = {\\n\\tcontrol: Control<TFieldValues>;\\n\\tname: FieldPath<TFieldValues> | FieldPath<TFieldValues>[];\\n};\\n\\nexport const useFieldError = <TFieldValues extends FieldValues>({ control, name }: UseFieldErrorProps<TFieldValues>) => {\\n\\tconst names = Array.isArray(name) ? name : [name];\\n\\tconst { errors } = useFormState<TFieldValues>({ control, name });\\n\\treturn names.map<FieldError | undefined>((name) => get(errors, name));\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useFieldError\",\"link\",\"get\",\"v\",\"useFormState\",\"_ref\",\"control\",\"name\",\"names\",\"Array\",\"isArray\",\"errors\",\"_useFormState\",\"map\"],\"mappings\":\"uBACAA,EAAOC,MAAK,CAAE,CAAAC,cAAc,WAAM,OAAAA,CAAkB,CAAA,GAAAF,EAAAG,IAAA,CAAA,kBAAA,CAAAC,IAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,EAAAC,aAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAO7C,IAP6CD,EAAAE,EAOvCJ,EAAgB,SAAAK,CAAA,EAA0F,IAArDC,EAAOD,EAAPC,OAAO,CAAEC,EAAIF,EAAJE,IAAI,CACxEC,EAAQC,MAAMC,OAAO,CAACH,GAAQA,EAAO,CAACA,EAAK,CACzCI,EAAMC,AAAKR,EAA2B,CAAEE,QAAAA,EAASC,KAAAA,CAAI,GAArDI,MAAM,CACd,OAAOH,EAAMK,GAAG,CAAyB,SAACN,CAAI,EAAA,OAAKL,EAAIS,EAAQJ,EAAK,EACrE\"}"}