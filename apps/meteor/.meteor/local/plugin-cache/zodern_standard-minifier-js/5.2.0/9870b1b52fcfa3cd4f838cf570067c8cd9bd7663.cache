{"code":"function module(e,t,n){let r,a,s;n.export({default:()=>u}),n.link(\"../../_virtual/_commonjsHelpers.mjs\",{getDefaultExportFromCjs(e){r=e}},0),n.link(\"../node_modules_ret_lib/index.mjs\",{l(e){a=e}},1),n.link(\"../node_modules_drange_lib/index.mjs\",{l(e){s=e}},2);let i=a,o=s,l=i.types;var u=r(class e{constructor(e,t){if(this._setDefaults(e),e instanceof RegExp)this.ignoreCase=e.ignoreCase,this.multiline=e.multiline,e=e.source;else if(\"string\"==typeof e)this.ignoreCase=t&&-1!==t.indexOf(\"i\"),this.multiline=t&&-1!==t.indexOf(\"m\");else throw Error(\"Expected a regexp or string\");this.tokens=i(e)}_setDefaults(t){this.max=null!=t.max?t.max:null!=e.prototype.max?e.prototype.max:100,this.defaultRange=t.defaultRange?t.defaultRange:this.defaultRange.clone(),t.randInt&&(this.randInt=t.randInt)}gen(){return this._gen(this.tokens,[])}_gen(e,t){switch(e.type){case l.ROOT:case l.GROUP:if(e.followedBy||e.notFollowedBy)return\"\";for(e.remember&&void 0===e.groupNumber&&(e.groupNumber=t.push(null)-1),n=e.options?this._randSelect(e.options):e.stack,r=\"\",s=0,i=n.length;s<i;s++)r+=this._gen(n[s],t);return e.remember&&(t[e.groupNumber]=r),r;case l.POSITION:return\"\";case l.SET:var n,r,a,s,i,o=this._expand(e);if(!o.length)return\"\";return String.fromCharCode(this._randSelect(o));case l.REPETITION:for(s=0,a=this.randInt(e.min,e.max===1/0?e.min+this.max:e.max),r=\"\";s<a;s++)r+=this._gen(e.value,t);return r;case l.REFERENCE:return t[e.value-1]||\"\";case l.CHAR:return String.fromCharCode(this.ignoreCase&&this._randBool()?this._toOtherCase(e.value):e.value)}}_toOtherCase(e){return e+(97<=e&&e<=122?-32:65<=e&&e<=90?32:0)}_randBool(){return!this.randInt(0,1)}_randSelect(e){return e instanceof o?e.index(this.randInt(0,e.length-1)):e[this.randInt(0,e.length-1)]}_expand(e){if(e.type===i.types.CHAR)return new o(e.value);if(e.type===i.types.RANGE)return new o(e.from,e.to);{let t=new o;for(let n=0;n<e.set.length;n++){let r=this._expand(e.set[n]);if(t.add(r),this.ignoreCase)for(let e=0;e<r.length;e++){let n=r.index(e),a=this._toOtherCase(n);n!==a&&t.add(a)}}return e.not?this.defaultRange.clone().subtract(t):this.defaultRange.clone().intersect(t)}}randInt(e,t){return e+Math.floor(Math.random()*(1+t-e))}get defaultRange(){return this._range=this._range||new o(32,126)}set defaultRange(e){this._range=e}static randexp(t,n){var r;return\"string\"==typeof t&&(t=new RegExp(t,n)),void 0===t._randexp?(r=new e(t,n),t._randexp=r):(r=t._randexp)._setDefaults(t),r.gen()}static sugar(){RegExp.prototype.gen=function(){return e.randexp(this)}}})}","map":"{\"version\":3,\"sources\":[\"../../../node_modules/randexp/lib/randexp.js\",\"<anon>\"],\"sourcesContent\":[\"const ret    = require('ret');\\nconst DRange = require('drange');\\nconst types  = ret.types;\\n\\n\\nmodule.exports = class RandExp {\\n  /**\\n   * @constructor\\n   * @param {RegExp|String} regexp\\n   * @param {String} m\\n   */\\n  constructor(regexp, m) {\\n    this._setDefaults(regexp);\\n    if (regexp instanceof RegExp) {\\n      this.ignoreCase = regexp.ignoreCase;\\n      this.multiline = regexp.multiline;\\n      regexp = regexp.source;\\n\\n    } else if (typeof regexp === 'string') {\\n      this.ignoreCase = m && m.indexOf('i') !== -1;\\n      this.multiline = m && m.indexOf('m') !== -1;\\n    } else {\\n      throw new Error('Expected a regexp or string');\\n    }\\n\\n    this.tokens = ret(regexp);\\n  }\\n\\n\\n  /**\\n   * Checks if some custom properties have been set for this regexp.\\n   *\\n   * @param {RandExp} randexp\\n   * @param {RegExp} regexp\\n   */\\n  _setDefaults(regexp) {\\n    // When a repetitional token has its max set to Infinite,\\n    // randexp won't actually generate a random amount between min and Infinite\\n    // instead it will see Infinite as min + 100.\\n    this.max = regexp.max != null ? regexp.max :\\n      RandExp.prototype.max != null ? RandExp.prototype.max : 100;\\n\\n    // This allows expanding to include additional characters\\n    // for instance: RandExp.defaultRange.add(0, 65535);\\n    this.defaultRange = regexp.defaultRange ?\\n      regexp.defaultRange : this.defaultRange.clone();\\n\\n    if (regexp.randInt) {\\n      this.randInt = regexp.randInt;\\n    }\\n  }\\n\\n\\n  /**\\n   * Generates the random string.\\n   *\\n   * @return {String}\\n   */\\n  gen() {\\n    return this._gen(this.tokens, []);\\n  }\\n\\n\\n  /**\\n   * Generate random string modeled after given tokens.\\n   *\\n   * @param {Object} token\\n   * @param {Array.<String>} groups\\n   * @return {String}\\n   */\\n  _gen(token, groups) {\\n    var stack, str, n, i, l;\\n\\n    switch (token.type) {\\n      case types.ROOT:\\n      case types.GROUP:\\n        // Ignore lookaheads for now.\\n        if (token.followedBy || token.notFollowedBy) { return ''; }\\n\\n        // Insert placeholder until group string is generated.\\n        if (token.remember && token.groupNumber === undefined) {\\n          token.groupNumber = groups.push(null) - 1;\\n        }\\n\\n        stack = token.options ?\\n          this._randSelect(token.options) : token.stack;\\n\\n        str = '';\\n        for (i = 0, l = stack.length; i < l; i++) {\\n          str += this._gen(stack[i], groups);\\n        }\\n\\n        if (token.remember) {\\n          groups[token.groupNumber] = str;\\n        }\\n        return str;\\n\\n      case types.POSITION:\\n        // Do nothing for now.\\n        return '';\\n\\n      case types.SET:\\n        var expandedSet = this._expand(token);\\n        if (!expandedSet.length) { return ''; }\\n        return String.fromCharCode(this._randSelect(expandedSet));\\n\\n      case types.REPETITION:\\n        // Randomly generate number between min and max.\\n        n = this.randInt(token.min,\\n          token.max === Infinity ? token.min + this.max : token.max);\\n\\n        str = '';\\n        for (i = 0; i < n; i++) {\\n          str += this._gen(token.value, groups);\\n        }\\n\\n        return str;\\n\\n      case types.REFERENCE:\\n        return groups[token.value - 1] || '';\\n\\n      case types.CHAR:\\n        var code = this.ignoreCase && this._randBool() ?\\n          this._toOtherCase(token.value) : token.value;\\n        return String.fromCharCode(code);\\n    }\\n  }\\n\\n\\n  /**\\n   * If code is alphabetic, converts to other case.\\n   * If not alphabetic, returns back code.\\n   *\\n   * @param {Number} code\\n   * @return {Number}\\n   */\\n  _toOtherCase(code) {\\n    return code + (97 <= code && code <= 122 ? -32 :\\n      65 <= code && code <= 90  ?  32 : 0);\\n  }\\n\\n\\n  /**\\n   * Randomly returns a true or false value.\\n   *\\n   * @return {Boolean}\\n   */\\n  _randBool() {\\n    return !this.randInt(0, 1);\\n  }\\n\\n\\n  /**\\n   * Randomly selects and returns a value from the array.\\n   *\\n   * @param {Array.<Object>} arr\\n   * @return {Object}\\n   */\\n  _randSelect(arr) {\\n    if (arr instanceof DRange) {\\n      return arr.index(this.randInt(0, arr.length - 1));\\n    }\\n    return arr[this.randInt(0, arr.length - 1)];\\n  }\\n\\n\\n  /**\\n   * expands a token to a DiscontinuousRange of characters which has a\\n   * length and an index function (for random selecting)\\n   *\\n   * @param {Object} token\\n   * @return {DiscontinuousRange}\\n   */\\n  _expand(token) {\\n    if (token.type === ret.types.CHAR) {\\n      return new DRange(token.value);\\n    } else if (token.type === ret.types.RANGE) {\\n      return new DRange(token.from, token.to);\\n    } else {\\n      let drange = new DRange();\\n      for (let i = 0; i < token.set.length; i++) {\\n        let subrange = this._expand(token.set[i]);\\n        drange.add(subrange);\\n        if (this.ignoreCase) {\\n          for (let j = 0; j < subrange.length; j++) {\\n            let code = subrange.index(j);\\n            let otherCaseCode = this._toOtherCase(code);\\n            if (code !== otherCaseCode) {\\n              drange.add(otherCaseCode);\\n            }\\n          }\\n        }\\n      }\\n      if (token.not) {\\n        return this.defaultRange.clone().subtract(drange);\\n      } else {\\n        return this.defaultRange.clone().intersect(drange);\\n      }\\n    }\\n  }\\n\\n\\n  /**\\n   * Randomly generates and returns a number between a and b (inclusive).\\n   *\\n   * @param {Number} a\\n   * @param {Number} b\\n   * @return {Number}\\n   */\\n  randInt(a, b) {\\n    return a + Math.floor(Math.random() * (1 + b - a));\\n  }\\n\\n\\n  /**\\n   * Default range of characters to generate from.\\n   */\\n  get defaultRange() {\\n    return this._range = this._range || new DRange(32, 126);\\n  }\\n\\n  set defaultRange(range) {\\n    this._range = range;\\n  }\\n\\n\\n  /**\\n   *\\n   * Enables use of randexp with a shorter call.\\n   *\\n   * @param {RegExp|String| regexp}\\n   * @param {String} m\\n   * @return {String}\\n   */\\n  static randexp(regexp, m) {\\n    var randexp;\\n    if(typeof regexp === 'string') {\\n      regexp = new RegExp(regexp, m);\\n    }\\n\\n    if (regexp._randexp === undefined) {\\n      randexp = new RandExp(regexp, m);\\n      regexp._randexp = randexp;\\n    } else {\\n      randexp = regexp._randexp;\\n      randexp._setDefaults(regexp);\\n    }\\n    return randexp.gen();\\n  }\\n\\n\\n  /**\\n   * Enables sugary /regexp/.gen syntax.\\n   */\\n  static sugar() {\\n    /* eshint freeze:false */\\n    RegExp.prototype.gen = function() {\\n      return RandExp.randexp(this);\\n    };\\n  }\\n};\\n\",null],\"names\":[\"ret\",\"libExports\",\"DRange\",\"lib\",\"types\",\"RandExp\",\"constructor\",\"regexp\",\"m\",\"_setDefaults\",\"RegExp\",\"ignoreCase\",\"multiline\",\"source\",\"indexOf\",\"Error\",\"tokens\",\"max\",\"prototype\",\"defaultRange\",\"clone\",\"randInt\",\"gen\",\"_gen\",\"token\",\"groups\",\"type\",\"ROOT\",\"GROUP\",\"followedBy\",\"notFollowedBy\",\"i\",\"remember\",\"undefined\",\"groupNumber\",\"push\",\"stack\",\"options\",\"_randSelect\",\"str\",\"l\",\"length\",\"POSITION\",\"SET\",\"n\",\"expandedSet\",\"_expand\",\"String\",\"fromCharCode\",\"REPETITION\",\"min\",\"Infinity\",\"value\",\"REFERENCE\",\"CHAR\",\"_randBool\",\"_toOtherCase\",\"code\",\"arr\",\"index\",\"RANGE\",\"from\",\"to\",\"drange\",\"set\",\"subrange\",\"add\",\"j\",\"otherCaseCode\",\"not\",\"subtract\",\"intersect\",\"a\",\"b\",\"Math\",\"floor\",\"random\",\"_range\",\"range\",\"randexp\",\"_randexp\",\"sugar\"],\"mappings\":\"oQAAA,IAAMA,EAASC,EACTC,EAASC,EACTC,EAASJ,EAAII,KAAK,SAGP,MAAMC,EAMrBC,YAAYC,CAAM,CAAEC,CAAC,CAAE,CAErB,GADA,IAAI,CAACC,YAAY,CAACF,GACdA,aAAkBG,OACpB,IAAI,CAACC,UAAU,CAAGJ,EAAOI,UAAU,CACnC,IAAI,CAACC,SAAS,CAAGL,EAAOK,SAAS,CACjCL,EAASA,EAAOM,MAAM,MAEjB,GAAI,AAAkB,UAAlB,OAAON,EAChB,IAAI,CAACI,UAAU,CAAGH,GAAKA,AAAmB,KAAnBA,EAAEM,OAAO,CAAC,KACjC,IAAI,CAACF,SAAS,CAAGJ,GAAKA,AAAmB,KAAnBA,EAAEM,OAAO,CAAC,UAEhC,MAAM,AAAIC,MAAM,8BAGlB,CAAA,IAAI,CAACC,MAAM,CAAGhB,EAAIO,EACtB,CASEE,aAAaF,CAAM,CAAE,CAInB,IAAI,CAACU,GAAG,CAAGV,AAAc,MAAdA,EAAOU,GAAG,CAAWV,EAAOU,GAAG,CACxCZ,AAAyB,MAAzBA,EAAQa,SAAS,CAACD,GAAG,CAAWZ,EAAQa,SAAS,CAACD,GAAG,CAAG,IAI1D,IAAI,CAACE,YAAY,CAAGZ,EAAOY,YAAY,CACrCZ,EAAOY,YAAY,CAAG,IAAI,CAACA,YAAY,CAACC,KAAK,GAE3Cb,EAAOc,OAAO,EAChB,CAAA,IAAI,CAACA,OAAO,CAAGd,EAAOc,OAAO,AAAPA,CAE5B,CAQEC,KAAM,CACJ,OAAO,IAAI,CAACC,IAAI,CAAC,IAAI,CAACP,MAAM,CAAE,EAAE,CACpC,CAUEO,KAAKC,CAAK,CAAEC,CAAM,CAAE,CAGlB,OAAQD,EAAME,IAAI,EAChB,KAAKtB,EAAMuB,IAAI,CACf,KAAKvB,EAAMwB,KAAK,CAEd,GAAIJ,EAAMK,UAAU,EAAIL,EAAMM,aAAa,CAAI,MAAO,GAWtD,IAAKC,AARDP,EAAMQ,QAAQ,EAAIR,AAAsBS,KAAAA,IAAtBT,EAAMU,WAAW,EACrCV,CAAAA,EAAMU,WAAW,CAAGT,EAAOU,IAAI,CAAC,MAAQ,CAAA,EAG1CC,EAAQZ,EAAMa,OAAO,CACnB,IAAI,CAACC,WAAW,CAACd,EAAMa,OAAO,EAAIb,EAAMY,KAAK,CAE/CG,EAAM,GACDR,EAAI,EAAGS,EAAIJ,EAAMK,MAAM,CAAEV,EAAIS,EAAGT,IACnCQ,GAAO,IAAI,CAAChB,IAAI,CAACa,CAAK,CAACL,EAAE,CAAEN,GAM7B,OAHID,EAAMQ,QAAQ,EAChBP,CAAAA,CAAM,CAACD,EAAMU,WAAW,CAAC,CAAGK,CAAAA,EAEvBA,CAET,MAAKnC,EAAMsC,QAAQ,CAEjB,MAAO,EAET,MAAKtC,EAAMuC,GAAG,CACZ,IA/BAP,EAAOG,EAAKK,EAAGb,EAAGS,EA+BdK,EAAc,IAAI,CAACC,OAAO,CAACtB,GAC/B,GAAI,CAACqB,EAAYJ,MAAM,CAAI,MAAO,GAClC,OAAOM,OAAOC,YAAY,CAAC,IAAI,CAACV,WAAW,CAACO,GAE9C,MAAKzC,EAAM6C,UAAU,CAMnB,IAAKlB,EAAI,EAJTa,EAAI,IAAI,CAACvB,OAAO,CAACG,EAAM0B,GAAG,CACxB1B,EAAMP,GAAG,GAAKkC,IAAW3B,EAAM0B,GAAG,CAAG,IAAI,CAACjC,GAAG,CAAGO,EAAMP,GAAG,EAE3DsB,EAAM,GACMR,EAAIa,EAAGb,IACjBQ,GAAO,IAAI,CAAChB,IAAI,CAACC,EAAM4B,KAAK,CAAE3B,GAGhC,OAAOc,CAET,MAAKnC,EAAMiD,SAAS,CAClB,OAAO5B,CAAM,CAACD,EAAM4B,KAAK,CAAG,EAAE,EAAI,EAEpC,MAAKhD,EAAMkD,IAAI,CAGb,OAAOP,OAAOC,YAAY,CAFf,IAAI,CAACrC,UAAU,EAAI,IAAI,CAAC4C,SAAS,GAC1C,IAAI,CAACC,YAAY,CAAChC,EAAM4B,KAAK,EAAI5B,EAAM4B,KAAK,CAEtD,CACA,CAUEI,aAAaC,CAAI,CAAE,CACjB,OAAOA,EAAQ,CAAA,IAAMA,GAAQA,GAAQ,IAAM,IACzC,IAAMA,GAAQA,GAAQ,GAAO,GAAK,CAAA,CACxC,CAQEF,WAAY,CACV,MAAO,CAAC,IAAI,CAAClC,OAAO,CAAC,EAAG,EAC5B,CASEiB,YAAYoB,CAAG,CAAE,QACf,AAAIA,aAAexD,EACVwD,EAAIC,KAAK,CAAC,IAAI,CAACtC,OAAO,CAAC,EAAGqC,EAAIjB,MAAM,CAAG,IAEzCiB,CAAG,CAAC,IAAI,CAACrC,OAAO,CAAC,EAAGqC,EAAIjB,MAAM,CAAG,GAAG,AAC/C,CAUEK,QAAQtB,CAAK,CAAE,CACb,GAAIA,EAAME,IAAI,GAAK1B,EAAII,KAAK,CAACkD,IAAI,CAC/B,OAAO,IAAIpD,EAAOsB,EAAM4B,KAAK,EACxB,GAAI5B,EAAME,IAAI,GAAK1B,EAAII,KAAK,CAACwD,KAAK,CACvC,OAAO,IAAI1D,EAAOsB,EAAMqC,IAAI,CAAErC,EAAMsC,EAAE,CACjC,EACL,IAAIC,EAAS,IAAI7D,EACjB,IAAK,IAAI6B,EAAI,EAAGA,EAAIP,EAAMwC,GAAG,CAACvB,MAAM,CAAEV,IAAK,CACzC,IAAIkC,EAAW,IAAI,CAACnB,OAAO,CAACtB,EAAMwC,GAAG,CAACjC,EAAE,EAExC,GADAgC,EAAOG,GAAG,CAACD,GACP,IAAI,CAACtD,UAAU,CACjB,IAAK,IAAIwD,EAAI,EAAGA,EAAIF,EAASxB,MAAM,CAAE0B,IAAK,CACxC,IAAIV,EAAOQ,EAASN,KAAK,CAACQ,GACtBC,EAAgB,IAAI,CAACZ,YAAY,CAACC,GAClCA,IAASW,GACXL,EAAOG,GAAG,CAACE,EAEzB,CAEA,QACM,AAAI5C,EAAM6C,GAAG,CACJ,IAAI,CAAClD,YAAY,CAACC,KAAK,GAAGkD,QAAQ,CAACP,GAEnC,IAAI,CAAC5C,YAAY,CAACC,KAAK,GAAGmD,SAAS,CAACR,EAEnD,CACA,CAUE1C,QAAQmD,CAAC,CAAEC,CAAC,CAAE,CACZ,OAAOD,EAAIE,KAAKC,KAAK,CAACD,KAAKE,MAAM,GAAM,CAAA,EAAIH,EAAID,CAAAA,EACnD,CAME,IAAIrD,cAAe,CACjB,OAAO,IAAI,CAAC0D,MAAM,CAAG,IAAI,CAACA,MAAM,EAAI,IAAI3E,EAAO,GAAI,IACvD,CAEE,IAAIiB,aAAa2D,CAAK,CAAE,CACtB,IAAI,CAACD,MAAM,CAAGC,CAClB,CAWE,OAAOC,QAAQxE,CAAM,CAAEC,CAAC,CAAE,CACxB,IAAIuE,EAYJ,MAXqB,UAAlB,OAAOxE,GACRA,CAAAA,EAAS,IAAIG,OAAOH,EAAQC,EAAC,EAG3BD,AAAoB0B,KAAAA,IAApB1B,EAAOyE,QAAQ,EACjBD,EAAU,IAAI1E,EAAQE,EAAQC,GAC9BD,EAAOyE,QAAQ,CAAGD,GAGlBA,AADAA,CAAAA,EAAUxE,EAAOyE,QAAQ,AAARA,EACTvE,YAAY,CAACF,GAEhBwE,EAAQzD,GAAG,EACtB,CAME,OAAO2D,OAAQ,CAEbvE,OAAOQ,SAAS,CAACI,GAAG,CAAG,WACrB,OAAOjB,EAAQ0E,OAAO,CAAC,IAAI,CACjC,CACA,CACA\"}"}