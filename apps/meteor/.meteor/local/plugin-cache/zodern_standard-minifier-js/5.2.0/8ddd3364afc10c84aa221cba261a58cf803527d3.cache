{"code":"function module(e,n,t){let r,s;t.export({useUnreadMessages:()=>u}),t.link(\"@rocket.chat/ui-contexts\",{useSession(e){r=e}},0),t.link(\"react-i18next\",{useTranslation(e){s=e}},1);let u=()=>{let{t:e}=s(),n=r(\"unread\");return(()=>{if(\"number\"==typeof n)return e(\"unread_messages_counter\",{count:n})})()}}","map":"{\"version\":3,\"sources\":[\"client/views/root/hooks/useUnreadMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSession } from '@rocket.chat/ui-contexts';\\nimport { useTranslation } from 'react-i18next';\\n\\nexport const useUnreadMessages = (): string | undefined => {\\n\\tconst { t } = useTranslation();\\n\\tconst unreadMessages = useSession('unread') as number | '' | '999+' | 'â€¢';\\n\\n\\treturn (() => {\\n\\t\\t// TODO: remove this when we have a better way to handle this\\n\\t\\tif (typeof unreadMessages !== 'number') {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\treturn t('unread_messages_counter', { count: unreadMessages });\\n\\t})();\\n};\\n\",null],\"names\":[\"useSession\",\"useTranslation\",\"module\",\"export\",\"useUnreadMessages\",\"link\",\"v\",\"t\",\"unreadMessages\",\"count\"],\"mappings\":\"2BAAsDA,EAAAC,EAAtDC,EAAOC,MAAE,CAAA,CAAAC,kBAAkBA,IAAAA,CAA2B,GAAAF,EAAAG,IAAA,CAAA,2BAAA,CAAAL,WAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gBAAA,CAAAJ,eAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAG/C,IAAMF,EAAoBA,KAChC,GAAM,CAAEG,EAAAA,CAAAA,CAAG,CAAGN,IACRO,EAAiBR,EAAW,UAElC,MAAO,AAAC,CAAA,KAEP,GAAI,AAA0B,UAA1B,OAAOQ,EAIX,OAAOD,EAAE,0BAA2B,CAAEE,MAAOD,CAAc,EAC5D,CAAA,GACD\"}"}