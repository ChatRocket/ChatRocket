{"code":"Package[\"core-runtime\"].queue(\"service-configuration\",function(){var e,o=Package.meteor.Meteor;Package.meteor.global,Package.meteor.meteorEnv;var n=Package[\"accounts-base\"].Accounts,r=Package.mongo.Mongo,i=Package.modules.meteorInstall;return Package.promise.Promise,{export:function(){return{ServiceConfiguration:e}},require:i({node_modules:{meteor:{\"service-configuration\":{\"service_configuration_common.js\":function i(){void 0===e&&(e={}),e.configurations=new r.Collection(\"meteor_accounts_loginServiceConfiguration\",{_preventAutopublish:!0,connection:o.isClient?n.connection:o.connection}),e.ConfigError=function(e){o.isClient&&!n.loginServicesConfigured()?this.message=\"Login service configuration not yet loaded\":e?this.message=\"Service \"+e+\" not configured\":this.message=\"Service not configured\"},e.ConfigError.prototype=Error(),e.ConfigError.prototype.name=\"ServiceConfiguration.ConfigError\"}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/service-configuration/service_configuration_common.js\"]}});","map":"{\"version\":3,\"sources\":[\"packages/service-configuration/service_configuration_common.js\",\"<anon>\"],\"sourcesContent\":[\"if (typeof ServiceConfiguration === 'undefined') {\\n  ServiceConfiguration = {};\\n}\\n\\n// Table containing documents with configuration options for each\\n// login service\\nServiceConfiguration.configurations = new Mongo.Collection(\\n  'meteor_accounts_loginServiceConfiguration',\\n  {\\n    _preventAutopublish: true,\\n    connection: Meteor.isClient ? Accounts.connection : Meteor.connection,\\n  }\\n);\\n// Leave this collection open in insecure mode. In theory, someone could\\n// hijack your oauth connect requests to a different endpoint or appId,\\n// but you did ask for 'insecure'. The advantage is that it is much\\n// easier to write a configuration wizard that works only in insecure\\n// mode.\\n\\n// Thrown when trying to use a login service which is not configured\\nServiceConfiguration.ConfigError = function(serviceName) {\\n  if (Meteor.isClient && !Accounts.loginServicesConfigured()) {\\n    this.message = 'Login service configuration not yet loaded';\\n  } else if (serviceName) {\\n    this.message = 'Service ' + serviceName + ' not configured';\\n  } else {\\n    this.message = 'Service not configured';\\n  }\\n};\\nServiceConfiguration.ConfigError.prototype = new Error();\\nServiceConfiguration.ConfigError.prototype.name =\\n  'ServiceConfiguration.ConfigError';\\n\",null],\"names\":[\"ServiceConfiguration\",\"configurations\",\"Mongo\",\"Collection\",\"_preventAutopublish\",\"connection\",\"Meteor\",\"isClient\",\"Accounts\",\"ConfigError\",\"serviceName\",\"loginServicesConfigured\",\"message\",\"prototype\",\"Error\",\"name\"],\"mappings\":\"uaAAoC,KAAA,IAAzBA,GACTA,CAAAA,EAAuB,CAAC,CAAA,EAK1BA,EAAqBC,cAAc,CAAG,IAAIC,EAAMC,UAAU,CACxD,4CACA,CACEC,oBAAqB,CAAA,EACrBC,WAAYC,EAAOC,QAAQ,CAAGC,EAASH,UAAU,CAAGC,EAAOD,UAAAA,AAC7D,GASFL,EAAqBS,WAAW,CAAG,SAASC,CAAW,EACjDJ,EAAOC,QAAQ,EAAI,CAACC,EAASG,uBAAuB,GACtD,IAAI,CAACC,OAAO,CAAG,6CACNF,EACT,IAAI,CAACE,OAAO,CAAG,WAAaF,EAAc,kBAE1C,IAAI,CAACE,OAAO,CAAG,wBAEnB,EACAZ,EAAqBS,WAAW,CAACI,SAAS,CAAG,AAAIC,QACjDd,EAAqBS,WAAW,CAACI,SAAS,CAACE,IAAI,CAC7C\"}"}