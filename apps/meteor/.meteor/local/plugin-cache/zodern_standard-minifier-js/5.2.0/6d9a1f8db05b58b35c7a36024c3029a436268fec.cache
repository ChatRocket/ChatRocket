{"code":"function module(n,e,u){u.export({useUnreadMessages:function(){return o}}),u.link(\"@rocket.chat/ui-contexts\",{useSession:function(n){t=n},useTranslation:function(n){r=n}},0);var t,r,o=function(){var n=r(),e=t(\"unread\");return function(){if(\"number\"==typeof e)return n(\"unread_messages_counter\",{count:e})}()}}","map":"{\"version\":3,\"sources\":[\"client/views/root/hooks/useUnreadMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSession, useTranslation } from '@rocket.chat/ui-contexts';\\n\\nexport const useUnreadMessages = (): string | undefined => {\\n\\tconst t = useTranslation();\\n\\tconst unreadMessages = useSession('unread') as number | '' | '999+' | 'â€¢';\\n\\n\\treturn (() => {\\n\\t\\t// TODO: remove this when we have a better way to handle this\\n\\t\\tif (typeof unreadMessages !== 'number') {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\treturn t('unread_messages_counter', { count: unreadMessages });\\n\\t})();\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useUnreadMessages\",\"link\",\"useSession\",\"v\",\"useTranslation\",\"t\",\"unreadMessages\",\"count\"],\"mappings\":\"uBAAAA,EAAOC,MAAE,CAAA,CAAAC,kBAAY,WAAsB,OAAAA,CAAA,CAA0B,GAACF,EAAAG,IAAA,CAAA,2BAAA,CAAAC,WAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,EAAAC,eAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAE/D,IAF+DD,EAAAE,EAEzDJ,EAAoB,WAChC,IAAMK,EAAID,IACJE,EAAiBJ,EAAW,UAElC,OAAQ,WAEP,GAAI,AAA0B,UAA1B,OAAOI,EAIX,OAAOD,EAAE,0BAA2B,CAAEE,MAAOD,CAAc,EAC5D,GACD\"}"}