{"code":"function module(o,e,n){n.export({useMessageComposerIsArchived:function(){return u}}),n.link(\"react\",{useCallback:function(o){r=o}},0),n.link(\"../../../../hooks/useReactiveValue\",{useReactiveValue:function(o){i=o}},1),n.link(\"../../../../lib/rooms/roomCoordinator\",{roomCoordinator:function(o){t=o}},2);var r,i,t,u=function(o,e){return!!i(r(function(){return t.archived(o)||!!(e&&\"d\"===e.t&&e.archived)},[o,e]))}}","map":"{\"version\":3,\"sources\":[\"client/views/room/composer/hooks/useMessageComposerIsArchived.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { ISubscription } from '@rocket.chat/core-typings';\\nimport { useCallback } from 'react';\\n\\nimport { useReactiveValue } from '../../../../hooks/useReactiveValue';\\nimport { roomCoordinator } from '../../../../lib/rooms/roomCoordinator';\\n\\nexport const useMessageComposerIsArchived = (rid: string, subscription?: ISubscription): boolean => {\\n\\tconst isArchived = useReactiveValue(\\n\\t\\tuseCallback(\\n\\t\\t\\t() => roomCoordinator.archived(rid) || Boolean(subscription && subscription.t === 'd' && subscription.archived),\\n\\t\\t\\t[rid, subscription],\\n\\t\\t),\\n\\t);\\n\\n\\treturn Boolean(isArchived);\\n};\\n\",null],\"names\":[\"module\",\"export\",\"useMessageComposerIsArchived\",\"link\",\"useCallback\",\"v\",\"useReactiveValue\",\"roomCoordinator\",\"rid\",\"subscription\",\"Boolean\",\"archived\",\"t\"],\"mappings\":\"uBACAA,EAAOC,MAAE,CAAA,CAAAC,6BAA2B,WAAA,OAAAA,CAAA,CAAA,GAAAF,EAAAG,IAAA,CAAA,QAAA,CAAAC,YAAA,SAAAC,CAAA,EAAAD,EAAAC,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,qCAAA,CAAAG,iBAAA,SAAAD,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAAL,EAAAG,IAAA,CAAA,wCAAA,CAAAI,gBAAA,SAAAF,CAAA,EAAAE,EAAAF,CAAA,CAAA,EAAA,GAK7B,IAL6BD,EAAAE,EAAAC,EAKvBL,EAA+B,SAACM,CAAW,CAAEC,CAA4B,EAQrF,MAAOC,CAAAA,CAPYJ,EAClBF,EACC,WAAA,OAAMG,EAAgBI,QAAQ,CAACH,IAAQE,CAAAA,CAAQD,CAAAA,GAAgBA,AAAmB,MAAnBA,EAAaG,CAAC,EAAYH,EAAaE,QAAQ,AAARA,CAAS,EAC/G,CAACH,EAAKC,EAAa,EAKtB\"}"}