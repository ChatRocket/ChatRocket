{"code":"function module(e,n,t){let s,u;t.export({useUnreadMessages:()=>r}),t.link(\"@rocket.chat/ui-contexts\",{useSession(e){s=e},useTranslation(e){u=e}},0);let r=()=>{let e=u(),n=s(\"unread\");return(()=>{if(\"number\"==typeof n)return e(\"unread_messages_counter\",{count:n})})()}}","map":"{\"version\":3,\"sources\":[\"client/views/root/hooks/useUnreadMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useSession, useTranslation } from '@rocket.chat/ui-contexts';\\n\\nexport const useUnreadMessages = (): string | undefined => {\\n\\tconst t = useTranslation();\\n\\tconst unreadMessages = useSession('unread') as number | '' | '999+' | 'â€¢';\\n\\n\\treturn (() => {\\n\\t\\t// TODO: remove this when we have a better way to handle this\\n\\t\\tif (typeof unreadMessages !== 'number') {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\n\\t\\treturn t('unread_messages_counter', { count: unreadMessages });\\n\\t})();\\n};\\n\",null],\"names\":[\"useSession\",\"useTranslation\",\"module\",\"export\",\"useUnreadMessages\",\"link\",\"v\",\"t\",\"unreadMessages\",\"count\"],\"mappings\":\"2BAA2CA,EAA2BC,EAAtEC,EAAOC,MAAE,CAAA,CAAAC,kBAAYA,IAAgBA,CAAM,GAA2BF,EAAAG,IAAA,CAAA,2BAAA,CAAAL,WAAAM,CAAA,EAAAN,EAAAM,CAAA,EAAAL,eAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAE/D,IAAMF,EAAoBA,KAChC,IAAMG,EAAIN,IACJO,EAAiBR,EAAW,UAElC,MAAO,AAAC,CAAA,KAEP,GAAI,AAA0B,UAA1B,OAAOQ,EAIX,OAAOD,EAAE,0BAA2B,CAAEE,MAAOD,CAAc,EAC5D,CAAA,GACD\"}"}