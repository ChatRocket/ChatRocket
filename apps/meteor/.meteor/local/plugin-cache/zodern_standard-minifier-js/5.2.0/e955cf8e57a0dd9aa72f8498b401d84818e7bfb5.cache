{"code":"function module(e,d,t){let i,u,l,o,r,s;let a=[\"_id\"],n=[\"type\"];t.link(\"@babel/runtime/helpers/objectWithoutProperties\",{default(e){i=e}},0),t.export({useRoomRolesManagement:()=>_}),t.link(\"@rocket.chat/ui-contexts\",{useMethod(e){u=e},useStream(e){l=e}},0),t.link(\"react\",{useEffect(e){o=e}},1),t.link(\"../../../../../app/models/client\",{RoomRoles(e){r=e},ChatMessage(e){s=e}},2);let _=e=>{let d=u(\"getRoomRoles\");o(()=>{d(e).then(e=>{Array.from(e).forEach(e=>{let{_id:d}=e,t=i(e,a),{rid:u,u:{_id:l}}=t;r.upsert({rid:u,\"u._id\":l},{$set:t})})})},[d,e]),o(()=>{let d=r.find({rid:e}).observe({added:d=>{var t;null!==(t=d.u)&&void 0!==t&&t._id&&s.update({rid:e,\"u._id\":d.u._id},{$addToSet:{roles:d._id}},{multi:!0})},changed:d=>{var t;null!==(t=d.u)&&void 0!==t&&t._id&&s.update({rid:e,\"u._id\":d.u._id},{$inc:{rerender:1}},{multi:!0})},removed:d=>{var t;null!==(t=d.u)&&void 0!==t&&t._id&&s.update({rid:e,\"u._id\":d.u._id},{$pull:{roles:d._id}},{multi:!0})}});return()=>{d.stop()}},[d,e]);let t=l(\"notify-logged\");o(()=>t(\"roles-change\",e=>{var d;let{type:t}=e,u=i(e,n);if(u.scope&&null!==(d=u.u)&&void 0!==d&&d._id)switch(t){case\"added\":r.upsert({rid:u.scope,\"u._id\":u.u._id},{$setOnInsert:{u:u.u},$addToSet:{roles:u._id}});break;case\"removed\":r.update({rid:u.scope,\"u._id\":u.u._id},{$pull:{roles:u._id}})}}),[t]),o(()=>t(\"Users:NameChanged\",e=>{let{_id:d,name:t}=e;r.update({\"u._id\":d},{$set:{\"u.name\":t}},{multi:!0})}),[t])}}","map":"{\"version\":3,\"sources\":[\"client/views/room/body/hooks/useRoomRolesManagement.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom, IUser } from '@rocket.chat/core-typings';\\nimport { useMethod, useStream } from '@rocket.chat/ui-contexts';\\nimport { useEffect } from 'react';\\n\\nimport { RoomRoles, ChatMessage } from '../../../../../app/models/client';\\n\\n// const roomRoles = RoomRoles as Mongo.Collection<Pick<ISubscription, 'rid' | 'u' | 'roles'>>;\\n\\nexport const useRoomRolesManagement = (rid: IRoom['_id']): void => {\\n\\tconst getRoomRoles = useMethod('getRoomRoles');\\n\\n\\tuseEffect(() => {\\n\\t\\tgetRoomRoles(rid).then((results) => {\\n\\t\\t\\tArray.from(results).forEach(({ _id, ...data }) => {\\n\\t\\t\\t\\tconst {\\n\\t\\t\\t\\t\\trid,\\n\\t\\t\\t\\t\\tu: { _id: uid },\\n\\t\\t\\t\\t} = data;\\n\\t\\t\\t\\tRoomRoles.upsert({ rid, 'u._id': uid }, { $set: data });\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}, [getRoomRoles, rid]);\\n\\n\\tuseEffect(() => {\\n\\t\\tconst rolesObserve = RoomRoles.find({ rid }).observe({\\n\\t\\t\\tadded: (role) => {\\n\\t\\t\\t\\tif (!role.u?._id) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tChatMessage.update({ rid, 'u._id': role.u._id }, { $addToSet: { roles: role._id } }, { multi: true });\\n\\t\\t\\t},\\n\\t\\t\\tchanged: (role) => {\\n\\t\\t\\t\\tif (!role.u?._id) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tChatMessage.update({ rid, 'u._id': role.u._id }, { $inc: { rerender: 1 } }, { multi: true });\\n\\t\\t\\t},\\n\\t\\t\\tremoved: (role) => {\\n\\t\\t\\t\\tif (!role.u?._id) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tChatMessage.update({ rid, 'u._id': role.u._id }, { $pull: { roles: role._id } }, { multi: true });\\n\\t\\t\\t},\\n\\t\\t});\\n\\n\\t\\treturn (): void => {\\n\\t\\t\\trolesObserve.stop();\\n\\t\\t};\\n\\t}, [getRoomRoles, rid]);\\n\\n\\tconst subscribeToNotifyLoggedIn = useStream('notify-logged');\\n\\n\\tuseEffect(\\n\\t\\t() =>\\n\\t\\t\\tsubscribeToNotifyLoggedIn('roles-change', ({ type, ...role }) => {\\n\\t\\t\\t\\tif (!role.scope) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (!role.u?._id) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\t\\tcase 'added':\\n\\t\\t\\t\\t\\t\\tRoomRoles.upsert({ 'rid': role.scope, 'u._id': role.u._id }, { $setOnInsert: { u: role.u }, $addToSet: { roles: role._id } });\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase 'removed':\\n\\t\\t\\t\\t\\t\\tRoomRoles.update({ 'rid': role.scope, 'u._id': role.u._id }, { $pull: { roles: role._id } });\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}),\\n\\t\\t[subscribeToNotifyLoggedIn],\\n\\t);\\n\\n\\tuseEffect(\\n\\t\\t() =>\\n\\t\\t\\tsubscribeToNotifyLoggedIn('Users:NameChanged', ({ _id: uid, name }: Partial<IUser>) => {\\n\\t\\t\\t\\tRoomRoles.update(\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t'u._id': uid,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t$set: {\\n\\t\\t\\t\\t\\t\\t\\t'u.name': name,\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tmulti: true,\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t);\\n\\t\\t\\t}),\\n\\t\\t[subscribeToNotifyLoggedIn],\\n\\t);\\n};\\n\",null],\"names\":[\"_objectWithoutProperties\",\"useMethod\",\"useStream\",\"useEffect\",\"RoomRoles\",\"ChatMessage\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useRoomRolesManagement\",\"rid\",\"getRoomRoles\",\"then\",\"results\",\"Array\",\"from\",\"forEach\",\"_ref\",\"_id\",\"data\",\"_excluded\",\"u\",\"uid\",\"upsert\",\"$set\",\"rolesObserve\",\"find\",\"observe\",\"added\",\"role\",\"_role$u\",\"update\",\"$addToSet\",\"roles\",\"multi\",\"changed\",\"_role$u2\",\"$inc\",\"rerender\",\"removed\",\"_role$u3\",\"$pull\",\"stop\",\"subscribeToNotifyLoggedIn\",\"_ref2\",\"_role$u4\",\"type\",\"_excluded2\",\"scope\",\"$setOnInsert\",\"_ref3\",\"name\"],\"mappings\":\"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\"}"}