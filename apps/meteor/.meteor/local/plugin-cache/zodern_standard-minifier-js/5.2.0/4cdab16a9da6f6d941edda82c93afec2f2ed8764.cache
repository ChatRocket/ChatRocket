{"code":"function module(e,t,n){let a,r,l,s,u;n.link(\"@babel/runtime/helpers/objectSpread2\",{default(e){a=e}},0),n.export({useLoadSurroundingMessages:()=>o}),n.link(\"@rocket.chat/ui-contexts\",{useEndpoint(e){r=e}},0),n.link(\"@tanstack/react-query\",{useQueryClient(e){l=e}},1),n.link(\"react\",{useEffect(e){s=e}},2),n.link(\"../../../../lib/utils/legacyJumpToMessage\",{legacyJumpToMessage(e){u=e}},3);let o=e=>{let t=l(),n=r(\"GET\",\"/v1/chat.getMessage\");s(()=>{if(!e)return;let r=new AbortController;return t.fetchQuery({queryKey:[\"chat.getMessage\",e],queryFn:()=>n({msgId:e})}).then(e=>{let{message:t}=e;r.signal.aborted||u(a(a({},t),{},{ts:new Date(t.ts)}))}).catch(e=>{console.warn(e)}),()=>{r.abort()}},[e,t,n])}}","map":"{\"version\":3,\"sources\":[\"client/views/room/MessageList/hooks/useLoadSurroundingMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport { useQueryClient } from '@tanstack/react-query';\\nimport { useEffect } from 'react';\\n\\nimport { legacyJumpToMessage } from '../../../../lib/utils/legacyJumpToMessage';\\n\\nexport const useLoadSurroundingMessages = (msgId?: IMessage['_id']) => {\\n\\tconst queryClient = useQueryClient();\\n\\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\\n\\n\\tuseEffect(() => {\\n\\t\\tif (!msgId) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tconst abort = new AbortController();\\n\\n\\t\\tqueryClient\\n\\t\\t\\t.fetchQuery({\\n\\t\\t\\t\\tqueryKey: ['chat.getMessage', msgId],\\n\\t\\t\\t\\tqueryFn: () => {\\n\\t\\t\\t\\t\\treturn getMessage({ msgId });\\n\\t\\t\\t\\t},\\n\\t\\t\\t})\\n\\t\\t\\t.then(({ message }) => {\\n\\t\\t\\t\\tif (abort.signal.aborted) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Serialized IMessage dates are strings. For this function, only ts is needed\\n\\t\\t\\t\\tlegacyJumpToMessage({ ...message, ts: new Date(message.ts) } as any as IMessage);\\n\\t\\t\\t})\\n\\t\\t\\t.catch((error) => {\\n\\t\\t\\t\\tconsole.warn(error);\\n\\t\\t\\t});\\n\\t\\treturn () => {\\n\\t\\t\\tabort.abort();\\n\\t\\t};\\n\\t}, [msgId, queryClient, getMessage]);\\n};\\n\",null],\"names\":[\"_objectSpread\",\"useEndpoint\",\"useQueryClient\",\"useEffect\",\"legacyJumpToMessage\",\"module\",\"link\",\"default\",\"v\",\"export\",\"useLoadSurroundingMessages\",\"msgId\",\"queryClient\",\"getMessage\",\"abort\",\"AbortController\",\"fetchQuery\",\"queryKey\",\"queryFn\",\"then\",\"_ref\",\"message\",\"signal\",\"aborted\",\"ts\",\"Date\",\"catch\",\"error\",\"console\",\"warn\"],\"mappings\":\"2BACAA,EAAuDC,EAAAC,EAAAC,EAAAC,EAA9CC,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAAC,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAvDH,EAAOI,MAAE,CAAA,CAAAC,2BAAmBA,IAAAA,CAA2B,GAAAL,EAAAC,IAAA,CAAA,2BAAA,CAAAL,YAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAJ,eAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,QAAA,CAAAH,UAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,4CAAA,CAAAF,oBAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAMhD,IAAME,EAA8BC,IAC1C,IAAMC,EAAcV,IACdW,EAAaZ,EAAY,MAAO,uBAEtCE,EAAU,KACT,GAAI,CAACQ,EACJ,OAED,IAAMG,EAAQ,IAAIC,gBAmBlB,OAjBAH,EACEI,UAAU,CAAC,CACXC,SAAU,CAAC,kBAAmBN,EAAM,CACpCO,QAASA,IACDL,EAAW,CAAEF,MAAAA,CAAK,KAG1BQ,IAAI,CAACC,IAAgB,GAAf,CAAEC,QAAAA,CAAAA,CAAS,CAAAD,CACbN,CAAAA,EAAMQ,MAAM,CAACC,OAAO,EAIxBnB,EAAmBJ,EAAAA,EAAA,CAAA,EAAMqB,GAAO,CAAA,EAAA,CAAEG,GAAI,IAAIC,KAAKJ,EAAQG,EAAE,CAAC,GAC3D,GACCE,KAAK,CAAEC,IACPC,QAAQC,IAAI,CAACF,EACd,GACM,KACNb,EAAMA,KAAK,EACZ,CACD,EAAG,CAACH,EAAOC,EAAaC,EAAW,CACpC\"}"}