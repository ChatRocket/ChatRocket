{"code":"function module(e,n,t){t.link(\"@babel/runtime/helpers/objectSpread2\",{default:function(e){u=e}},0),t.export({useLoadSurroundingMessages:function(){return i}}),t.link(\"@rocket.chat/ui-contexts\",{useEndpoint:function(e){o=e}},0),t.link(\"@tanstack/react-query\",{useQueryClient:function(e){r=e}},1),t.link(\"react\",{useEffect:function(e){a=e}},2),t.link(\"../../../../lib/utils/legacyJumpToMessage\",{legacyJumpToMessage:function(e){c=e}},3);var u,o,r,a,c,i=function(e){var n=r(),t=o(\"GET\",\"/v1/chat.getMessage\");a(function(){if(e){var o=new AbortController;return n.fetchQuery({queryKey:[\"chat.getMessage\",e],queryFn:function(){return t({msgId:e})}}).then(function(e){var n=e.message;o.signal.aborted||c(u(u({},n),{},{ts:new Date(n.ts)}))}).catch(function(e){console.warn(e)}),function(){o.abort()}}},[e,n,t])}}","map":"{\"version\":3,\"sources\":[\"client/views/room/MessageList/hooks/useLoadSurroundingMessages.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport { useQueryClient } from '@tanstack/react-query';\\nimport { useEffect } from 'react';\\n\\nimport { legacyJumpToMessage } from '../../../../lib/utils/legacyJumpToMessage';\\n\\nexport const useLoadSurroundingMessages = (msgId?: IMessage['_id']) => {\\n\\tconst queryClient = useQueryClient();\\n\\tconst getMessage = useEndpoint('GET', '/v1/chat.getMessage');\\n\\n\\tuseEffect(() => {\\n\\t\\tif (!msgId) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tconst abort = new AbortController();\\n\\n\\t\\tqueryClient\\n\\t\\t\\t.fetchQuery({\\n\\t\\t\\t\\tqueryKey: ['chat.getMessage', msgId],\\n\\t\\t\\t\\tqueryFn: () => {\\n\\t\\t\\t\\t\\treturn getMessage({ msgId });\\n\\t\\t\\t\\t},\\n\\t\\t\\t})\\n\\t\\t\\t.then(({ message }) => {\\n\\t\\t\\t\\tif (abort.signal.aborted) {\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// Serialized IMessage dates are strings. For this function, only ts is needed\\n\\t\\t\\t\\tlegacyJumpToMessage({ ...message, ts: new Date(message.ts) } as any as IMessage);\\n\\t\\t\\t})\\n\\t\\t\\t.catch((error) => {\\n\\t\\t\\t\\tconsole.warn(error);\\n\\t\\t\\t});\\n\\t\\treturn () => {\\n\\t\\t\\tabort.abort();\\n\\t\\t};\\n\\t}, [msgId, queryClient, getMessage]);\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_objectSpread\",\"export\",\"useLoadSurroundingMessages\",\"useEndpoint\",\"useQueryClient\",\"useEffect\",\"legacyJumpToMessage\",\"msgId\",\"queryClient\",\"getMessage\",\"abort\",\"AbortController\",\"fetchQuery\",\"queryKey\",\"queryFn\",\"then\",\"_ref\",\"message\",\"signal\",\"aborted\",\"ts\",\"Date\",\"catch\",\"error\",\"console\",\"warn\"],\"mappings\":\"uBACSA,EAAaC,IAAM,CAAA,uCAA2B,CAAAC,QAAA,SAAAC,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAvDH,EAAOK,MAAE,CAAA,CAAAC,2BAAmB,WAAA,OAA2BA,CAAA,CAAA,GAAAN,EAAAC,IAAA,CAAA,2BAAA,CAAAM,YAAA,SAAAJ,CAAA,EAAAI,EAAAJ,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAO,eAAA,SAAAL,CAAA,EAAAK,EAAAL,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,QAAA,CAAAQ,UAAA,SAAAN,CAAA,EAAAM,EAAAN,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,4CAAA,CAAAS,oBAAA,SAAAP,CAAA,EAAAO,EAAAP,CAAA,CAAA,EAAA,GAMhD,IANPC,EAAuDG,EAAAC,EAAAC,EAAAC,EAM1CJ,EAA6B,SAACK,CAAuB,EACjE,IAAMC,EAAcJ,IACdK,EAAaN,EAAY,MAAO,uBAEtCE,EAAU,WACT,GAAKE,GAGL,IAAMG,EAAQ,IAAIC,gBAmBlB,OAjBAH,EACEI,UAAU,CAAC,CACXC,SAAU,CAAC,kBAAmBN,EAAM,CACpCO,QAAS,WACR,OAAOL,EAAW,CAAEF,MAAAA,CAAK,EAC1B,IAEAQ,IAAI,CAAC,SAAAC,CAAA,EAAgB,IAAbC,EAAOD,EAAPC,OAAO,AACXP,CAAAA,EAAMQ,MAAM,CAACC,OAAO,EAIxBb,EAAmBN,EAAAA,EAAA,CAAA,EAAMiB,GAAO,CAAA,EAAA,CAAEG,GAAI,IAAIC,KAAKJ,EAAQG,EAAE,CAAC,GAC3D,GACCE,KAAK,CAAC,SAACC,CAAK,EACZC,QAAQC,IAAI,CAACF,EACd,GACM,WACNb,EAAMA,KAAK,EACZ,EACD,EAAG,CAACH,EAAOC,EAAaC,EAAW,CACpC\"}"}