{"code":"function module(e,n,t){let u,o,l,a,i,r,s;t.export({useDialPad:()=>h}),t.link(\"react\",{useCallback(e){u=e},useEffect(e){o=e},useState(e){l=e}},0),t.link(\"react-hook-form\",{useForm(e){a=e}},1),t.link(\"react-i18next\",{useTranslation(e){i=e}},2),t.link(\"../../../../hooks/useDialModal\",{useDialModal(e){r=e}},3),t.link(\"../../../../hooks/useOutboundDialer\",{useOutboundDialer(e){s=e}},4);let h=e=>{var n;let{initialValue:t,initialErrorMessage:h}=e,{t:p}=i(),d=s(),{closeDialModal:P}=r(),{setFocus:k,register:I,setValue:m,setError:f,clearErrors:D,watch:c,formState:{errors:g,isDirty:_}}=a({defaultValues:{PhoneInput:t||\"\"}}),{ref:b,onChange:v}=I(\"PhoneInput\"),y=c(\"PhoneInput\"),[S,w]=l(!0),x=u(()=>{D(),m(\"PhoneInput\",y.slice(0,-1),{shouldDirty:!0})},[D,m,y]),C=u(e=>{D(),m(\"PhoneInput\",y+e,{shouldDirty:!0})},[D,m,y]),E=u(e=>{\"+\"===e&&m(\"PhoneInput\",y+e)},[m,y]),M=u(()=>{if(!d)return f(\"PhoneInput\",{message:p(\"Something_went_wrong_try_again_later\")});d.makeCall(y),P()},[d,f,p,y,P]),O=u(e=>v(e),[v]);return o(()=>{w(!y)},[y]),o(()=>{k(\"PhoneInput\")},[k]),{inputName:\"PhoneInput\",inputRef:b,inputError:_?null===(n=g.PhoneInput)||void 0===n?void 0:n.message:h,isButtonDisabled:S,handleOnChange:O,handleBackspaceClick:x,handlePadButtonClick:C,handlePadButtonLongPressed:E,handleCallButtonClick:M}}}","map":"{\"version\":3,\"sources\":[\"client/voip/modal/DialPad/hooks/useDialPad.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { ChangeEvent, RefCallback } from 'react';\\nimport { useCallback, useEffect, useState } from 'react';\\nimport { useForm } from 'react-hook-form';\\nimport { useTranslation } from 'react-i18next';\\n\\nimport { useDialModal } from '../../../../hooks/useDialModal';\\nimport { useOutboundDialer } from '../../../../hooks/useOutboundDialer';\\nimport type { PadDigit } from '../Pad';\\n\\ntype DialPadStateHandlers = {\\n\\tinputName: string;\\n\\tinputRef: RefCallback<HTMLInputElement>;\\n\\tinputError: string | undefined;\\n\\tisButtonDisabled: boolean;\\n\\thandleOnChange: (e: ChangeEvent<HTMLInputElement>) => void;\\n\\thandleBackspaceClick: () => void;\\n\\thandlePadButtonClick: (digit: PadDigit[0]) => void;\\n\\thandlePadButtonLongPressed: (digit: PadDigit[1]) => void;\\n\\thandleCallButtonClick: () => void;\\n};\\n\\ntype DialPadProps = {\\n\\tinitialValue?: string;\\n\\tinitialErrorMessage?: string;\\n};\\n\\nexport const useDialPad = ({ initialValue, initialErrorMessage }: DialPadProps): DialPadStateHandlers => {\\n\\tconst { t } = useTranslation();\\n\\tconst outboundClient = useOutboundDialer();\\n\\tconst { closeDialModal } = useDialModal();\\n\\n\\tconst {\\n\\t\\tsetFocus,\\n\\t\\tregister,\\n\\t\\tsetValue,\\n\\t\\tsetError,\\n\\t\\tclearErrors,\\n\\t\\twatch,\\n\\t\\tformState: { errors, isDirty },\\n\\t} = useForm<{ PhoneInput: string }>({\\n\\t\\tdefaultValues: {\\n\\t\\t\\tPhoneInput: initialValue || '',\\n\\t\\t},\\n\\t});\\n\\n\\tconst { ref, onChange } = register('PhoneInput');\\n\\n\\tconst value = watch('PhoneInput');\\n\\n\\tconst [disabled, setDisabled] = useState(true);\\n\\n\\tconst handleBackspaceClick = useCallback((): void => {\\n\\t\\tclearErrors();\\n\\t\\tsetValue('PhoneInput', value.slice(0, -1), { shouldDirty: true });\\n\\t}, [clearErrors, setValue, value]);\\n\\n\\tconst handlePadButtonClick = useCallback(\\n\\t\\t(digit: PadDigit[0]): void => {\\n\\t\\t\\tclearErrors();\\n\\n\\t\\t\\tsetValue('PhoneInput', value + digit, { shouldDirty: true });\\n\\t\\t},\\n\\t\\t[clearErrors, setValue, value],\\n\\t);\\n\\n\\tconst handlePadButtonLongPressed = useCallback(\\n\\t\\t(digit: PadDigit[1]): void => {\\n\\t\\t\\tif (digit !== '+') {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tsetValue('PhoneInput', value + digit);\\n\\t\\t},\\n\\t\\t[setValue, value],\\n\\t);\\n\\n\\tconst handleCallButtonClick = useCallback((): void => {\\n\\t\\tif (!outboundClient) {\\n\\t\\t\\treturn setError('PhoneInput', { message: t('Something_went_wrong_try_again_later') });\\n\\t\\t}\\n\\n\\t\\toutboundClient.makeCall(value);\\n\\t\\tcloseDialModal();\\n\\t}, [outboundClient, setError, t, value, closeDialModal]);\\n\\n\\tconst handleOnChange = useCallback((e) => onChange(e), [onChange]);\\n\\n\\tuseEffect(() => {\\n\\t\\tsetDisabled(!value);\\n\\t}, [value]);\\n\\n\\tuseEffect(() => {\\n\\t\\tsetFocus('PhoneInput');\\n\\t}, [setFocus]);\\n\\n\\treturn {\\n\\t\\tinputName: 'PhoneInput',\\n\\t\\tinputRef: ref,\\n\\t\\tinputError: isDirty ? errors.PhoneInput?.message : initialErrorMessage,\\n\\t\\tisButtonDisabled: disabled,\\n\\t\\thandleOnChange,\\n\\t\\thandleBackspaceClick,\\n\\t\\thandlePadButtonClick,\\n\\t\\thandlePadButtonLongPressed,\\n\\t\\thandleCallButtonClick,\\n\\t};\\n};\\n\",null],\"names\":[\"useCallback\",\"useEffect\",\"useState\",\"useForm\",\"useTranslation\",\"useDialModal\",\"useOutboundDialer\",\"module\",\"export\",\"useDialPad\",\"link\",\"v\",\"_ref\",\"_errors$PhoneInput\",\"initialValue\",\"initialErrorMessage\",\"t\",\"outboundClient\",\"closeDialModal\",\"setFocus\",\"register\",\"setValue\",\"setError\",\"clearErrors\",\"watch\",\"formState\",\"errors\",\"isDirty\",\"defaultValues\",\"PhoneInput\",\"ref\",\"onChange\",\"value\",\"disabled\",\"setDisabled\",\"handleBackspaceClick\",\"slice\",\"shouldDirty\",\"handlePadButtonClick\",\"digit\",\"handlePadButtonLongPressed\",\"handleCallButtonClick\",\"message\",\"makeCall\",\"handleOnChange\",\"e\",\"inputName\",\"inputRef\",\"inputError\",\"isButtonDisabled\"],\"mappings\":\"2BAC2CA,EAAcC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAzDC,EAAOC,MAAE,CAAA,CAAAC,WAAaA,IAAAA,CAAW,GAAwBF,EAAAG,IAAA,CAAA,QAAA,CAAAV,YAAAW,CAAA,EAAAX,EAAAW,CAAA,EAAAV,UAAAU,CAAA,EAAAV,EAAAU,CAAA,EAAAT,SAAAS,CAAA,EAAAT,EAAAS,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,kBAAA,CAAAP,QAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gBAAA,CAAAN,eAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,iCAAA,CAAAL,aAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,sCAAA,CAAAJ,kBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAyBlD,IAAMF,EAAaG,IAA8E,IAAAC,EAAA,GAA7E,CAAEC,aAAAA,CAAY,CAAEC,oBAAAA,CAAAA,CAAmC,CAAAH,EACvE,CAAEI,EAAAA,CAAAA,CAAG,CAAGZ,IACRa,EAAiBX,IACjB,CAAEY,eAAAA,CAAAA,CAAgB,CAAGb,IAErB,CACLc,SAAAA,CAAQ,CACRC,SAAAA,CAAQ,CACRC,SAAAA,CAAQ,CACRC,SAAAA,CAAQ,CACRC,YAAAA,CAAW,CACXC,MAAAA,CAAK,CACLC,UAAW,CAAEC,OAAAA,CAAM,CAAEC,QAAAA,CAAAA,CAAO,CAC5B,CAAGxB,EAAgC,CACnCyB,cAAe,CACdC,WAAYf,GAAgB,MAIxB,CAAEgB,IAAAA,CAAG,CAAEC,SAAAA,CAAAA,CAAU,CAAGX,EAAS,cAE7BY,EAAQR,EAAM,cAEd,CAACS,EAAUC,EAAY,CAAGhC,EAAS,CAAA,GAEnCiC,EAAuBnC,EAAY,KACxCuB,IACAF,EAAS,aAAcW,EAAMI,KAAK,CAAC,EAAG,IAAK,CAAEC,YAAa,CAAA,CAAI,EAC/D,EAAG,CAACd,EAAaF,EAAUW,EAAM,EAE3BM,EAAuBtC,EAC3BuC,IACAhB,IAEAF,EAAS,aAAcW,EAAQO,EAAO,CAAEF,YAAa,CAAA,CAAI,EAC1D,EACA,CAACd,EAAaF,EAAUW,EAAM,EAGzBQ,EAA6BxC,EACjCuC,IACc,MAAVA,GAIJlB,EAAS,aAAcW,EAAQO,EAChC,EACA,CAAClB,EAAUW,EAAM,EAGZS,EAAwBzC,EAAY,KACzC,GAAI,CAACiB,EACJ,OAAOK,EAAS,aAAc,CAAEoB,QAAS1B,EAAE,uCAAuC,GAGnFC,EAAe0B,QAAQ,CAACX,GACxBd,GACD,EAAG,CAACD,EAAgBK,EAAUN,EAAGgB,EAAOd,EAAe,EAEjD0B,EAAiB5C,EAAa6C,GAAMd,EAASc,GAAI,CAACd,EAAS,EAUjE,OARA9B,EAAU,KACTiC,EAAY,CAACF,EACd,EAAG,CAACA,EAAM,EAEV/B,EAAU,KACTkB,EAAS,aACV,EAAG,CAACA,EAAS,EAEN,CACN2B,UAAW,aACXC,SAAUjB,EACVkB,WAAYrB,EAAO,AAAoB,OAApBd,CAAAA,EAAGa,EAAOG,UAAU,AAAVA,GAAUhB,AAAA,KAAA,IAAAA,EAAA,KAAA,EAAjBA,EAAmB6B,OAAO,CAAG3B,EACnDkC,iBAAkBhB,EAClBW,eAAAA,EACAT,qBAAAA,EACAG,qBAAAA,EACAE,2BAAAA,EACAC,sBAAAA,EAEF\"}"}