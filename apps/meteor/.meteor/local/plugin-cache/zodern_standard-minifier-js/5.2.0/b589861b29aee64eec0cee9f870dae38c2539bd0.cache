{"code":"Package[\"core-runtime\"].queue(\"mongo-id\",function(){Package.meteor.Meteor,Package.meteor.global,Package.meteor.meteorEnv,Package.ejson.EJSON,Package.random.Random;var e,t=Package.modules.meteorInstall;return Package.modules.meteorBabelHelpers,Package.promise.Promise,Package[\"ecmascript-runtime-client\"].Symbol,Package[\"ecmascript-runtime-client\"].Map,Package[\"ecmascript-runtime-client\"].Set,{export:function(){return{MongoID:e}},require:t({node_modules:{meteor:{\"mongo-id\":{\"id.js\":function e(e,t,r){r.link(\"@babel/runtime/helpers/typeof\",{default:function(e){n=e}},0),r.export({MongoID:function(){return u}}),r.link(\"meteor/ejson\",{EJSON:function(e){o=e}},0),r.link(\"meteor/random\",{Random:function(e){i=e}},1);var n,o,i,u={};u._looksLikeObjectID=function(e){return 24===e.length&&/^[0-9a-f]*$/.test(e)},u.ObjectID=function(){function e(e){if(e){if(e=e.toLowerCase(),!u._looksLikeObjectID(e))throw Error(\"Invalid hexadecimal string for creating an ObjectID\");this._str=e}else this._str=i.hexString(24)}var t=e.prototype;return t.equals=function(e){return e instanceof u.ObjectID&&this.valueOf()===e.valueOf()},t.toString=function(){return'ObjectID(\"'+this._str+'\")'},t.clone=function(){return new u.ObjectID(this._str)},t.typeName=function(){return\"oid\"},t.getTimestamp=function(){return Number.parseInt(this._str.substr(0,8),16)},t.valueOf=function(){return this._str},t.toJSONValue=function(){return this.valueOf()},t.toHexString=function(){return this.valueOf()},e}(),o.addType(\"oid\",function(e){return new u.ObjectID(e)}),u.idStringify=function(e){if(e instanceof u.ObjectID)return e.valueOf();if(\"string\"==typeof e){var t=e.charAt(0);return\"\"===e?e:\"-\"===t||\"~\"===t||u._looksLikeObjectID(e)||\"{\"===t?\"-\"+e:e}if(void 0===e)return\"-\";if(\"object\"!==n(e)||null===e)return\"~\"+JSON.stringify(e);throw Error(\"Meteor does not currently support objects other than ObjectID as ids\")},u.idParse=function(e){var t=e.charAt(0);if(\"\"===e)return e;if(\"-\"!==e){if(\"-\"===t)return e.substr(1);if(\"~\"===t)return JSON.parse(e.substr(1));else if(u._looksLikeObjectID(e))return new u.ObjectID(e);else return e}}}}}}},{extensions:[\".js\",\".json\"]}),eagerModulePaths:[\"/node_modules/meteor/mongo-id/id.js\"],mainModulePath:\"/node_modules/meteor/mongo-id/id.js\"}});","map":"{\"version\":3,\"sources\":[\"packages/mongo-id/id.js\",\"<anon>\"],\"sourcesContent\":[\"import { EJSON } from 'meteor/ejson';\\nimport { Random } from 'meteor/random';\\n\\nconst MongoID = {};\\n\\nMongoID._looksLikeObjectID = str => str.length === 24 && /^[0-9a-f]*$/.test(str);\\n\\nMongoID.ObjectID = class ObjectID {\\n  constructor (hexString) {\\n    //random-based impl of Mongo ObjectID\\n    if (hexString) {\\n      hexString = hexString.toLowerCase();\\n      if (!MongoID._looksLikeObjectID(hexString)) {\\n        throw new Error('Invalid hexadecimal string for creating an ObjectID');\\n      }\\n      // meant to work with _.isEqual(), which relies on structural equality\\n      this._str = hexString;\\n    } else {\\n      this._str = Random.hexString(24);\\n    }\\n  }\\n\\n  equals(other) {\\n    return other instanceof MongoID.ObjectID &&\\n    this.valueOf() === other.valueOf();\\n  }\\n\\n  toString() {\\n    return `ObjectID(\\\"${this._str}\\\")`;\\n  }\\n\\n  clone() {\\n    return new MongoID.ObjectID(this._str);\\n  }\\n\\n  typeName() {\\n    return 'oid';\\n  }\\n\\n  getTimestamp() {\\n    return Number.parseInt(this._str.substr(0, 8), 16);\\n  }\\n\\n  valueOf() {\\n    return this._str;\\n  }\\n\\n  toJSONValue() {\\n    return this.valueOf();\\n  }\\n\\n  toHexString() {\\n    return this.valueOf();\\n  }\\n\\n}\\n\\nEJSON.addType('oid', str => new MongoID.ObjectID(str));\\n\\nMongoID.idStringify = (id) => {\\n  if (id instanceof MongoID.ObjectID) {\\n    return id.valueOf();\\n  } else if (typeof id === 'string') {\\n    var firstChar = id.charAt(0);\\n    if (id === '') {\\n      return id;\\n    } else if (firstChar === '-' || // escape previously dashed strings\\n               firstChar === '~' || // escape escaped numbers, true, false\\n               MongoID._looksLikeObjectID(id) || // escape object-id-form strings\\n               firstChar === '{') { // escape object-form strings, for maybe implementing later\\n      return `-${id}`;\\n    } else {\\n      return id; // other strings go through unchanged.\\n    }\\n  } else if (id === undefined) {\\n    return '-';\\n  } else if (typeof id === 'object' && id !== null) {\\n    throw new Error('Meteor does not currently support objects other than ObjectID as ids');\\n  } else { // Numbers, true, false, null\\n    return `~${JSON.stringify(id)}`;\\n  }\\n};\\n\\nMongoID.idParse = (id) => {\\n  var firstChar = id.charAt(0);\\n  if (id === '') {\\n    return id;\\n  } else if (id === '-') {\\n    return undefined;\\n  } else if (firstChar === '-') {\\n    return id.substr(1);\\n  } else if (firstChar === '~') {\\n    return JSON.parse(id.substr(1));\\n  } else if (MongoID._looksLikeObjectID(id)) {\\n    return new MongoID.ObjectID(id);\\n  } else {\\n    return id;\\n  }\\n};\\n\\nexport { MongoID };\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_typeof\",\"export\",\"MongoID\",\"EJSON\",\"Random\",\"_looksLikeObjectID\",\"str\",\"length\",\"test\",\"ObjectID\",\"hexString\",\"toLowerCase\",\"Error\",\"_str\",\"_proto\",\"prototype\",\"equals\",\"other\",\"valueOf\",\"toString\",\"clone\",\"typeName\",\"getTimestamp\",\"Number\",\"parseInt\",\"substr\",\"toJSONValue\",\"toHexString\",\"addType\",\"idStringify\",\"id\",\"firstChar\",\"charAt\",\"undefined\",\"JSON\",\"stringify\",\"idParse\",\"parse\"],\"mappings\":\"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\"}"}