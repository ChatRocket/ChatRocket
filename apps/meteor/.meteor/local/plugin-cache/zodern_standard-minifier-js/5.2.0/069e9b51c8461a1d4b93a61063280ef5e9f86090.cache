{"code":"function module(e,t,n){let s,i,r,u,o;n.export({useMessageBody:()=>l}),n.link(\"@rocket.chat/ui-contexts\",{useUserSubscription(e){s=e}},0),n.link(\"react\",{useMemo(e){i=e}},1),n.link(\"../../../../lib/parseMessageTextToAstMarkdown\",{parseMessageTextToAstMarkdown(e){r=e}},2),n.link(\"./useAutoLinkDomains\",{useAutoLinkDomains(e){u=e}},3),n.link(\"./useAutoTranslate\",{useAutoTranslate(e){o=e}},4);let l=(e,t)=>{let n=s(t),l=o(n),a=u();return i(()=>{if(!e)return\"\";if(e.md){let t=r(e,{customDomains:a,emoticons:!0},l);return t.md}if(e.msg)return e.msg;if(e.attachments){let t=e.attachments.find(e=>e.title||e.description);if(null!=t&&t.description)return t.description;if(null!=t&&t.title)return t.title}return\"\"},[e,a,l])}}","map":"{\"version\":3,\"sources\":[\"client/views/room/MessageList/hooks/useMessageBody.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { IMessage } from '@rocket.chat/core-typings';\\nimport type { Options, Root } from '@rocket.chat/message-parser';\\nimport { useUserSubscription } from '@rocket.chat/ui-contexts';\\nimport { useMemo } from 'react';\\n\\nimport { parseMessageTextToAstMarkdown } from '../../../../lib/parseMessageTextToAstMarkdown';\\nimport { useAutoLinkDomains } from './useAutoLinkDomains';\\nimport { useAutoTranslate } from './useAutoTranslate';\\n\\nexport const useMessageBody = (message: IMessage | undefined, rid: string): string | Root => {\\n\\tconst subscription = useUserSubscription(rid);\\n\\tconst autoTranslateOptions = useAutoTranslate(subscription);\\n\\tconst customDomains = useAutoLinkDomains();\\n\\n\\treturn useMemo(() => {\\n\\t\\tif (!message) {\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\n\\t\\tif (message.md) {\\n\\t\\t\\tconst parseOptions: Options = {\\n\\t\\t\\t\\tcustomDomains,\\n\\t\\t\\t\\temoticons: true,\\n\\t\\t\\t};\\n\\n\\t\\t\\tconst messageWithMd = parseMessageTextToAstMarkdown(message, parseOptions, autoTranslateOptions);\\n\\n\\t\\t\\treturn messageWithMd.md;\\n\\t\\t}\\n\\n\\t\\tif (message.msg) {\\n\\t\\t\\treturn message.msg;\\n\\t\\t}\\n\\n\\t\\tif (message.attachments) {\\n\\t\\t\\tconst attachment = message.attachments.find((attachment) => attachment.title || attachment.description);\\n\\n\\t\\t\\tif (attachment?.description) {\\n\\t\\t\\t\\treturn attachment.description;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (attachment?.title) {\\n\\t\\t\\t\\treturn attachment.title;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn '';\\n\\t}, [message, customDomains, autoTranslateOptions]);\\n};\\n\",null],\"names\":[\"useUserSubscription\",\"useMemo\",\"parseMessageTextToAstMarkdown\",\"useAutoLinkDomains\",\"useAutoTranslate\",\"module\",\"export\",\"useMessageBody\",\"link\",\"v\",\"message\",\"rid\",\"subscription\",\"autoTranslateOptions\",\"customDomains\",\"md\",\"messageWithMd\",\"emoticons\",\"msg\",\"attachments\",\"attachment\",\"find\",\"title\",\"description\"],\"mappings\":\"2BAEoCA,EAA2BC,EAAAC,EAAAC,EAAAC,EAA/DC,EAAOC,MAAE,CAAA,CAAAC,eAAqBA,IAAAA,CAAM,GAA2BF,EAAAG,IAAA,CAAA,2BAAA,CAAAR,oBAAAS,CAAA,EAAAT,EAAAS,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,QAAA,CAAAP,QAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,gDAAA,CAAAN,8BAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,uBAAA,CAAAL,mBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,qBAAA,CAAAJ,iBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAOxD,IAAMF,EAAiBA,CAACG,EAA+BC,KAC7D,IAAMC,EAAeZ,EAAoBW,GACnCE,EAAuBT,EAAiBQ,GACxCE,EAAgBX,IAEtB,OAAOF,EAAQ,KACd,GAAI,CAACS,EACJ,MAAO,GAGR,GAAIA,EAAQK,EAAE,CAAE,CAMf,IAAMC,EAAgBd,EAA8BQ,EALtB,CAC7BI,cAAAA,EACAG,UAAW,CAAA,GAG+DJ,GAE3E,OAAOG,EAAcD,EAAE,AACxB,CAEA,GAAIL,EAAQQ,GAAG,CACd,OAAOR,EAAQQ,GAAG,CAGnB,GAAIR,EAAQS,WAAW,CAAE,CACxB,IAAMC,EAAaV,EAAQS,WAAW,CAACE,IAAI,CAAED,GAAeA,EAAWE,KAAK,EAAIF,EAAWG,WAAW,EAEtG,GAAIH,MAAAA,GAAAA,EAAYG,WAAW,CAC1B,OAAOH,EAAWG,WAAW,CAG9B,GAAIH,MAAAA,GAAAA,EAAYE,KAAK,CACpB,OAAOF,EAAWE,KAAK,AAEzB,CAEA,MAAO,EACR,EAAG,CAACZ,EAASI,EAAeD,EAAqB,CAClD\"}"}