{"code":"function module(t,e,o){let m;o.export({formatQueuedAt:()=>r}),o.link(\"moment\",{default(t){m=t}},0);let r=t=>{let{servedBy:e,closedAt:o,open:r,queuedAt:f,ts:l}=t||{},u=f||l;return e?m(e.ts).from(m(u),!0):r?m(u).fromNow(!0):o&&u?m(o).from(m(u),!0):\"\"}}","map":"{\"version\":3,\"sources\":[\"client/views/omnichannel/directory/utils/formatQueuedAt.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IOmnichannelRoom, Serialized } from '@rocket.chat/core-typings';\\nimport moment from 'moment';\\n\\nexport const formatQueuedAt = (room: Serialized<IOmnichannelRoom>) => {\\n\\tconst { servedBy, closedAt, open, queuedAt, ts } = room || {};\\n\\tconst queueStartedAt = queuedAt || ts;\\n\\n\\t// Room served\\n\\tif (servedBy) {\\n\\t\\treturn moment(servedBy.ts).from(moment(queueStartedAt), true);\\n\\t}\\n\\n\\t// Room open and not served\\n\\tif (open) {\\n\\t\\treturn moment(queueStartedAt).fromNow(true);\\n\\t}\\n\\n\\t// Room closed and not served\\n\\tif (closedAt && queueStartedAt) {\\n\\t\\treturn moment(closedAt).from(moment(queueStartedAt), true);\\n\\t}\\n\\n\\treturn '';\\n};\\n\",null],\"names\":[\"moment\",\"module\",\"export\",\"formatQueuedAt\",\"link\",\"default\",\"v\",\"room\",\"servedBy\",\"closedAt\",\"open\",\"queuedAt\",\"ts\",\"queueStartedAt\",\"from\",\"fromNow\"],\"mappings\":\"2BAC4BA,EAA5BC,EAAOC,MAAM,CAAA,CAAAC,eAAeA,IAAAA,CAAA,GAAAF,EAAAG,IAAA,CAAA,SAAA,CAAAC,QAAAC,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAErB,IAAMH,EAAkBI,IAC9B,GAAM,CAAEC,SAAAA,CAAQ,CAAEC,SAAAA,CAAQ,CAAEC,KAAAA,CAAI,CAAEC,SAAAA,CAAQ,CAAEC,GAAAA,CAAAA,CAAI,CAAGL,GAAQ,CAAA,EACrDM,EAAiBF,GAAYC,SAGnC,AAAIJ,EACIR,EAAOQ,EAASI,EAAE,EAAEE,IAAI,CAACd,EAAOa,GAAiB,CAAA,GAIrDH,EACIV,EAAOa,GAAgBE,OAAO,CAAC,CAAA,GAInCN,GAAYI,EACRb,EAAOS,GAAUK,IAAI,CAACd,EAAOa,GAAiB,CAAA,GAG/C,EACR\"}"}