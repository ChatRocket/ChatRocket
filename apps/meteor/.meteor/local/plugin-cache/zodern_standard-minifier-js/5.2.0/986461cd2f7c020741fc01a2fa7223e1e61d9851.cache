{"code":"function module(e,i,n){let o,t,r,l,c,s,g,u;n.link(\"@rocket.chat/string-helpers\",{capitalize(e){o=e}},0),n.link(\"@rocket.chat/ui-contexts\",{AuthenticationContext(e){t=e},useSetting(e){r=e}},1),n.link(\"meteor/meteor\",{Meteor(e){l=e}},2),n.link(\"react\",{default(e){c=e},useMemo(e){s=e}},3),n.link(\"../../lib/loginServices\",{loginServices(e){g=e}},4),n.link(\"./hooks/useLDAPAndCrowdCollisionWarning\",{useLDAPAndCrowdCollisionWarning(e){u=e}},5),n.exportDefault(e=>{let{children:i}=e,n=r(\"LDAP_Enable\"),a=r(\"CROWD_Enable\"),d=n&&\"loginWithLDAP\"||a&&\"loginWithCrowd\"||\"loginWithPassword\";u();let h=s(()=>({loginWithToken:e=>new Promise((i,n)=>l.loginWithToken(e,e=>{if(e)return n(e);i(void 0)})),loginWithPassword:(e,i)=>new Promise((n,o)=>{l[d](e,i,e=>{if(e){o(e);return}n()})}),loginWithService:e=>{let{service:i}=e,n=\"clientConfig\"in e&&e.clientConfig||{},t=\"loginWith\".concat({\"meteor-developer\":\"MeteorDeveloperAccount\"}[i]||o(String(i||\"\"))),r=l[t];return r?()=>new Promise((e,i)=>{r(n,n=>{if(!n){e(!0);return}i(n)})}):()=>Promise.reject(Error(\"Login method not found\"))},queryLoginServices:{getCurrentValue:()=>g.getLoginServiceButtons(),subscribe:e=>g.on(\"changed\",e)}}),[d]);return c.createElement(t.Provider,{children:i,value:h})})}","map":"{\"version\":3,\"sources\":[\"client/providers/AuthenticationProvider/AuthenticationProvider.tsx\",\"<anon>\"],\"sourcesContent\":[\"import type { LoginServiceConfiguration } from '@rocket.chat/core-typings';\\nimport { capitalize } from '@rocket.chat/string-helpers';\\nimport { AuthenticationContext, useSetting } from '@rocket.chat/ui-contexts';\\nimport { Meteor } from 'meteor/meteor';\\nimport type { ContextType, ReactElement, ReactNode } from 'react';\\nimport React, { useMemo } from 'react';\\n\\nimport { loginServices } from '../../lib/loginServices';\\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\\n\\nexport type LoginMethods = keyof typeof Meteor extends infer T ? (T extends `loginWith${string}` ? T : never) : never;\\n\\ntype AuthenticationProviderProps = {\\n\\tchildren: ReactNode;\\n};\\n\\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\\n\\tconst isLdapEnabled = useSetting<boolean>('LDAP_Enable');\\n\\tconst isCrowdEnabled = useSetting<boolean>('CROWD_Enable');\\n\\n\\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\\n\\n\\tuseLDAPAndCrowdCollisionWarning();\\n\\n\\tconst contextValue = useMemo(\\n\\t\\t(): ContextType<typeof AuthenticationContext> => ({\\n\\t\\t\\tloginWithToken: (token: string): Promise<void> =>\\n\\t\\t\\t\\tnew Promise((resolve, reject) =>\\n\\t\\t\\t\\t\\tMeteor.loginWithToken(token, (err) => {\\n\\t\\t\\t\\t\\t\\tif (err) {\\n\\t\\t\\t\\t\\t\\t\\treturn reject(err);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tresolve(undefined);\\n\\t\\t\\t\\t\\t}),\\n\\t\\t\\t\\t),\\n\\t\\t\\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\\n\\t\\t\\t\\tnew Promise((resolve, reject) => {\\n\\t\\t\\t\\t\\tMeteor[loginMethod](user, password, (error) => {\\n\\t\\t\\t\\t\\t\\tif (error) {\\n\\t\\t\\t\\t\\t\\t\\treject(error);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tresolve();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}),\\n\\t\\t\\tloginWithService: <T extends LoginServiceConfiguration>(serviceConfig: T): (() => Promise<true>) => {\\n\\t\\t\\t\\tconst loginMethods: Record<string, string | undefined> = {\\n\\t\\t\\t\\t\\t'meteor-developer': 'MeteorDeveloperAccount',\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tconst { service: serviceName } = serviceConfig;\\n\\t\\t\\t\\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\\n\\n\\t\\t\\t\\tconst loginWithService = `loginWith${loginMethods[serviceName] || capitalize(String(serviceName || ''))}`;\\n\\n\\t\\t\\t\\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\\n\\n\\t\\t\\t\\tif (!method) {\\n\\t\\t\\t\\t\\treturn () => Promise.reject(new Error('Login method not found'));\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn () =>\\n\\t\\t\\t\\t\\tnew Promise((resolve, reject) => {\\n\\t\\t\\t\\t\\t\\tmethod(clientConfig, (error: any): void => {\\n\\t\\t\\t\\t\\t\\t\\tif (!error) {\\n\\t\\t\\t\\t\\t\\t\\t\\tresolve(true);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treject(error);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\n\\t\\t\\tqueryLoginServices: {\\n\\t\\t\\t\\tgetCurrentValue: () => loginServices.getLoginServiceButtons(),\\n\\t\\t\\t\\tsubscribe: (onStoreChange: () => void) => loginServices.on('changed', onStoreChange),\\n\\t\\t\\t},\\n\\t\\t}),\\n\\t\\t[loginMethod],\\n\\t);\\n\\n\\treturn <AuthenticationContext.Provider children={children} value={contextValue} />;\\n};\\n\\nexport default AuthenticationProvider;\\n\",null],\"names\":[\"capitalize\",\"AuthenticationContext\",\"useSetting\",\"Meteor\",\"React\",\"useMemo\",\"loginServices\",\"useLDAPAndCrowdCollisionWarning\",\"module\",\"link\",\"v\",\"default\",\"exportDefault\",\"_ref\",\"children\",\"isLdapEnabled\",\"isCrowdEnabled\",\"loginMethod\",\"contextValue\",\"loginWithToken\",\"token\",\"Promise\",\"resolve\",\"reject\",\"err\",\"undefined\",\"loginWithPassword\",\"user\",\"password\",\"error\",\"loginWithService\",\"serviceConfig\",\"service\",\"serviceName\",\"clientConfig\",\"concat\",\"loginMethods\",\"String\",\"method\",\"Error\",\"queryLoginServices\",\"getCurrentValue\",\"getLoginServiceButtons\",\"subscribe\",\"onStoreChange\",\"on\",\"createElement\",\"Provider\",\"value\"],\"mappings\":\"2BACAA,EAAyDC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAhDC,EAAYC,IAAA,CAAM,8BAA8B,CAAAT,WAAAU,CAAA,EAAAV,EAAAU,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,2BAAA,CAAAR,sBAAAS,CAAA,EAAAT,EAAAS,CAAA,EAAAR,WAAAQ,CAAA,EAAAR,EAAAQ,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,gBAAA,CAAAN,OAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,QAAA,CAAAE,QAAAD,CAAA,EAAAN,EAAAM,CAAA,EAAAL,QAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,0BAAA,CAAAH,cAAAI,CAAA,EAAAJ,EAAAI,CAAA,CAAA,EAAA,GAAAF,EAAAC,IAAA,CAAA,0CAAA,CAAAF,gCAAAG,CAAA,EAAAH,EAAAG,CAAA,CAAA,EAAA,GAAzDF,EAAOI,aAAY,CAeYC,IAA4D,GAA3D,CAAEC,SAAAA,CAAAA,CAAuC,CAAAD,EAClEE,EAAgBb,EAAoB,eACpCc,EAAiBd,EAAoB,gBAErCe,EAA6BF,GAAiB,iBAAqBC,GAAkB,kBAAqB,oBAEhHT,IAEA,IAAMW,EAAeb,EACpB,IAAkD,CAAA,CACjDc,eAAiBC,GAChB,IAAIC,QAAQ,CAACC,EAASC,IACrBpB,EAAOgB,cAAc,CAACC,EAAQI,IAC7B,GAAIA,EACH,OAAOD,EAAOC,GAEfF,EAAQG,KAAAA,EACT,IAEFC,kBAAmBA,CAACC,EAA0EC,IAC7F,IAAIP,QAAQ,CAACC,EAASC,KACrBpB,CAAM,CAACc,EAAY,CAACU,EAAMC,EAAWC,IACpC,GAAIA,EAAO,CACVN,EAAOM,GACP,MACD,CAEAP,GACD,EACD,GACDQ,iBAAwDC,IAKvD,GAAM,CAAEC,QAASC,CAAAA,CAAa,CAAGF,EAC3BG,EAAgB,iBAAkBH,GAAiBA,EAAcG,YAAY,EAAK,CAAA,EAElFJ,EAAgB,YAAAK,MAAA,CAAeC,AAPoB,CACxD,mBAAoB,yBAM4B,CAACH,EAAY,EAAIjC,EAAWqC,OAAOJ,GAAe,MAE7FK,EAAwEnC,CAAc,CAAC2B,EAAwB,QAErH,AAAKQ,EAIE,IACN,IAAIjB,QAAQ,CAACC,EAASC,KACrBe,EAAOJ,EAAeL,IACrB,GAAI,CAACA,EAAO,CACXP,EAAQ,CAAA,GACR,MACD,CACAC,EAAOM,EACR,EACD,GAZO,IAAMR,QAAQE,MAAM,CAAC,AAAIgB,MAAM,0BAaxC,EAEAC,mBAAoB,CACnBC,gBAAiBA,IAAMnC,EAAcoC,sBAAsB,GAC3DC,UAAYC,GAA8BtC,EAAcuC,EAAE,CAAC,UAAWD,MAGxE,CAAC3B,EAAY,EAGd,OAAOb,EAAA0C,aAAA,CAAC7C,EAAsB8C,QAAQ,CAAA,CAACjC,SAAUA,EAAUkC,MAAO9B,CAAa,EAChF\"}"}