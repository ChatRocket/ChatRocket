{"code":"function module(e,o,r){let a,i,l;r.export({useMessageComposerIsArchived:()=>t}),r.link(\"react\",{useCallback(e){a=e}},0),r.link(\"../../../../hooks/useReactiveValue\",{useReactiveValue(e){i=e}},1),r.link(\"../../../../lib/rooms/roomCoordinator\",{roomCoordinator(e){l=e}},2);let t=(e,o)=>{let r=i(a(()=>l.archived(e)||!!(o&&\"d\"===o.t&&o.archived),[e,o]));return!!r}}","map":"{\"version\":3,\"sources\":[\"client/views/room/composer/hooks/useMessageComposerIsArchived.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { ISubscription } from '@rocket.chat/core-typings';\\nimport { useCallback } from 'react';\\n\\nimport { useReactiveValue } from '../../../../hooks/useReactiveValue';\\nimport { roomCoordinator } from '../../../../lib/rooms/roomCoordinator';\\n\\nexport const useMessageComposerIsArchived = (rid: string, subscription?: ISubscription): boolean => {\\n\\tconst isArchived = useReactiveValue(\\n\\t\\tuseCallback(\\n\\t\\t\\t() => roomCoordinator.archived(rid) || Boolean(subscription && subscription.t === 'd' && subscription.archived),\\n\\t\\t\\t[rid, subscription],\\n\\t\\t),\\n\\t);\\n\\n\\treturn Boolean(isArchived);\\n};\\n\",null],\"names\":[\"useCallback\",\"useReactiveValue\",\"roomCoordinator\",\"module\",\"export\",\"useMessageComposerIsArchived\",\"link\",\"v\",\"rid\",\"subscription\",\"isArchived\",\"archived\",\"Boolean\",\"t\"],\"mappings\":\"2BACoCA,EAAAC,EAAAC,EAApCC,EAAOC,MAAE,CAAA,CAAAC,6BAA2BA,IAAAA,CAAA,GAAAF,EAAAG,IAAA,CAAA,QAAA,CAAAN,YAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,qCAAA,CAAAL,iBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,wCAAA,CAAAJ,gBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAK7B,IAAMF,EAA+BA,CAACG,EAAaC,KACzD,IAAMC,EAAaT,EAClBD,EACC,IAAME,EAAgBS,QAAQ,CAACH,IAAQI,CAAAA,CAAQH,CAAAA,GAAgBA,AAAmB,MAAnBA,EAAaI,CAAC,EAAYJ,EAAaE,QAAQ,AAARA,EACtG,CAACH,EAAKC,EAAa,GAIrB,MAAOG,CAAAA,CAAQF,CAChB\"}"}