{"code":"function module(e,r,l){let n,a,o,t,u;l.export({CallContext:()=>i,useIsVoipEnterprise:()=>C,useIsCallEnabled:()=>f,useIsCallReady:()=>y,useIsCallError:()=>E,useCallActions:()=>c,useCallerInfo:()=>h,useCallCreateRoom:()=>p,useCallOpenRoom:()=>b,useCallClient:()=>I,useQueueName:()=>w,useQueueCounter:()=>m,useOpenedRoomInfo:()=>R,useChangeAudioOutputDevice:()=>g,useChangeAudioInputDevice:()=>v,useCallRegisterClient:()=>A,useCallUnregisterClient:()=>O,useVoipOutboundStates:()=>N,useVoipNetworkStatus:()=>D}),l.link(\"react\",{createContext(e){n=e},useContext(e){a=e},useMemo(e){o=e}},0),l.link(\"use-sync-external-store/shim\",{useSyncExternalStore(e){t=e}},1),l.link(\"../hooks/useHasLicenseModule\",{useHasLicenseModule(e){u=e}},2);let s=e=>e.ready,d=e=>void 0!==e.error,i=n({enabled:!1,ready:!1,outBoundCallsAllowed:void 0,outBoundCallsEnabled:void 0,outBoundCallsEnabledForUser:void 0}),C=()=>!0===u(\"voip-enterprise\"),f=()=>{let{enabled:e}=a(i);return e},y=()=>{let{ready:e}=a(i);return!!e},E=()=>{let e=a(i);return!!d(e)},c=()=>{let e=a(i);if(!s(e))throw Error(\"useCallActions only if Calls are enabled and ready\");return e.actions},h=()=>{let e=a(i);if(!s(e))throw Error(\"useCallerInfo only if Calls are enabled and ready\");let{voipClient:r}=e,[l,n]=o(()=>{let e=r.callerInfo;return[l=>r.on(\"stateChanged\",()=>{e=r.callerInfo,l()}),()=>e]},[r]);return t(l,n)},p=()=>{let e=a(i);if(!s(e))throw Error(\"useCallCreateRoom only if Calls are enabled and ready\");return e.createRoom},b=()=>{let e=a(i);if(!s(e))throw Error(\"useCallOpenRoom only if Calls are enabled and ready\");return e.openRoom},I=()=>{let e=a(i);if(!s(e))throw Error(\"useCallClient only if Calls are enabled and ready\");return e.voipClient},w=()=>{let e=a(i);if(!s(e))throw Error(\"useQueueName only if Calls are enabled and ready\");return e.queueName},m=()=>{let e=a(i);if(!s(e))throw Error(\"useQueueCounter only if Calls are enabled and ready\");return e.queueCounter},R=()=>{let e=a(i);if(!s(e))throw Error(\"useOpenedRoomInfo only if Calls are enabled and ready\");return e.openedRoomInfo},g=()=>{let e=a(i);if(!s(e))throw Error(\"useChangeAudioOutputDevice only if Calls are enabled and ready\");return e.changeAudioOutputDevice},v=()=>{let e=a(i);if(!s(e))throw Error(\"useChangeAudioInputDevice only if Calls are enabled and ready\");return e.changeAudioInputDevice},A=()=>{let e=a(i);if(!s(e))throw Error(\"useCallRegisterClient only if Calls are enabled and ready\");return e.register},O=()=>{let e=a(i);if(!s(e))throw Error(\"useCallUnregisterClient only if Calls are enabled and ready\");return e.unregister},N=()=>{let e=C(),r=h();return{outBoundCallsAllowed:e,outBoundCallsEnabled:e,outBoundCallsEnabledForUser:e&&![\"IN_CALL\",\"ON_HOLD\",\"UNREGISTERED\",\"INITIAL\"].includes(r.state)}},D=()=>{let e=a(i);if(!s(e))throw Error(\"useVoipNetworkStatus only if Calls are enabled and ready\");return e.networkStatus}}","map":"{\"version\":3,\"sources\":[\"client/contexts/CallContext.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\\nimport type { Device } from '@rocket.chat/ui-contexts';\\nimport { createContext, useContext, useMemo } from 'react';\\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\\n\\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\\n\\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\\n\\ntype CallContextDisabled = {\\n\\tenabled: false;\\n\\tready: false;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n};\\n\\ntype CallContextEnabled = {\\n\\tenabled: true;\\n\\tready: unknown;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n};\\n\\ntype CallContextReady = {\\n\\toutBoundCallsEnabled: boolean;\\n\\toutBoundCallsAllowed: boolean;\\n\\toutBoundCallsEnabledForUser: boolean;\\n\\tenabled: true;\\n\\tready: true;\\n\\tvoipClient: VoIPUser;\\n\\tactions: CallActionsType;\\n\\tqueueName: string;\\n\\tqueueCounter: number;\\n\\tnetworkStatus: 'online' | 'offline';\\n\\topenedRoomInfo: { v: { token?: string }; rid: string };\\n\\topenWrapUpModal: () => void;\\n\\topenRoom: (rid: IVoipRoom['_id']) => void;\\n\\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\\n\\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\\n\\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\\n\\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\\n\\tregister: () => void;\\n\\tunregister: () => void;\\n};\\n\\ntype CallContextError = {\\n\\tenabled: true;\\n\\tready: false;\\n\\toutBoundCallsAllowed: undefined;\\n\\toutBoundCallsEnabled: undefined;\\n\\toutBoundCallsEnabledForUser: undefined;\\n\\terror: Error | unknown;\\n};\\n\\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\\n\\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\\n\\nexport type CallActionsType = {\\n\\tmute: () => unknown;\\n\\tunmute: () => unknown;\\n\\tpause: () => unknown;\\n\\tresume: () => unknown;\\n\\tend: () => unknown;\\n\\tpickUp: () => unknown;\\n\\treject: () => unknown;\\n};\\n\\nconst CallContextValueDefault: CallContextValue = {\\n\\tenabled: false,\\n\\tready: false,\\n\\toutBoundCallsAllowed: undefined,\\n\\toutBoundCallsEnabled: undefined,\\n\\toutBoundCallsEnabledForUser: undefined,\\n};\\n\\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\\n\\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\\n\\nexport const useIsCallEnabled = (): boolean => {\\n\\tconst { enabled } = useContext(CallContext);\\n\\treturn enabled;\\n};\\n\\nexport const useIsCallReady = (): boolean => {\\n\\tconst { ready } = useContext(CallContext);\\n\\n\\treturn Boolean(ready);\\n};\\nexport const useIsCallError = (): boolean => {\\n\\tconst context = useContext(CallContext);\\n\\treturn Boolean(isCallContextError(context));\\n};\\n\\nexport const useCallActions = (): CallActionsType => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallActions only if Calls are enabled and ready');\\n\\t}\\n\\treturn context.actions;\\n};\\n\\nexport const useCallerInfo = (): VoIpCallerInfo => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\\n\\t}\\n\\n\\tconst { voipClient } = context;\\n\\n\\tconst [subscribe, getSnapshot] = useMemo(() => {\\n\\t\\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\\n\\n\\t\\tconst callback = (cb: () => void): (() => void) =>\\n\\t\\t\\tvoipClient.on('stateChanged', () => {\\n\\t\\t\\t\\tcaller = voipClient.callerInfo;\\n\\t\\t\\t\\tcb();\\n\\t\\t\\t});\\n\\n\\t\\tconst getSnapshot = (): VoIpCallerInfo => caller;\\n\\t\\treturn [callback, getSnapshot];\\n\\t}, [voipClient]);\\n\\n\\treturn useSyncExternalStore(subscribe, getSnapshot);\\n};\\n\\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.createRoom;\\n};\\n\\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.openRoom;\\n};\\n\\nexport const useCallClient = (): VoIPUser => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.voipClient;\\n};\\n\\nexport const useQueueName = (): CallContextReady['queueName'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useQueueName only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.queueName;\\n};\\n\\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.queueCounter;\\n};\\n\\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.openedRoomInfo;\\n};\\n\\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.changeAudioOutputDevice;\\n};\\n\\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.changeAudioInputDevice;\\n};\\n\\nexport const useCallRegisterClient = (): (() => void) => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.register;\\n};\\n\\nexport const useCallUnregisterClient = (): (() => void) => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.unregister;\\n};\\n\\nexport const useVoipOutboundStates = (): {\\n\\toutBoundCallsAllowed: boolean;\\n\\toutBoundCallsEnabled: boolean;\\n\\toutBoundCallsEnabledForUser: boolean;\\n} => {\\n\\tconst isEnterprise = useIsVoipEnterprise();\\n\\tconst callerInfo = useCallerInfo();\\n\\n\\treturn {\\n\\t\\toutBoundCallsAllowed: isEnterprise,\\n\\t\\toutBoundCallsEnabled: isEnterprise,\\n\\t\\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\\n\\t};\\n};\\n\\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\\n\\tconst context = useContext(CallContext);\\n\\n\\tif (!isCallContextReady(context)) {\\n\\t\\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\\n\\t}\\n\\n\\treturn context.networkStatus;\\n};\\n\",null],\"names\":[\"createContext\",\"useContext\",\"useMemo\",\"useSyncExternalStore\",\"useHasLicenseModule\",\"module\",\"export\",\"CallContext\",\"useIsVoipEnterprise\",\"useIsCallEnabled\",\"useIsCallReady\",\"useIsCallError\",\"useCallActions\",\"useCallerInfo\",\"useCallCreateRoom\",\"useCallOpenRoom\",\"useCallClient\",\"useQueueName\",\"useQueueCounter\",\"useOpenedRoomInfo\",\"useChangeAudioOutputDevice\",\"useChangeAudioInputDevice\",\"useCallRegisterClient\",\"useCallUnregisterClient\",\"useVoipOutboundStates\",\"useVoipNetworkStatus\",\"link\",\"v\",\"isCallContextReady\",\"context\",\"ready\",\"isCallContextError\",\"undefined\",\"error\",\"enabled\",\"outBoundCallsAllowed\",\"outBoundCallsEnabled\",\"outBoundCallsEnabledForUser\",\"Boolean\",\"Error\",\"actions\",\"voipClient\",\"subscribe\",\"getSnapshot\",\"caller\",\"callerInfo\",\"cb\",\"on\",\"createRoom\",\"openRoom\",\"queueName\",\"queueCounter\",\"openedRoomInfo\",\"changeAudioOutputDevice\",\"changeAudioInputDevice\",\"register\",\"unregister\",\"isEnterprise\",\"includes\",\"state\",\"networkStatus\"],\"mappings\":\"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\"}"}