{"code":"function module(e,n,s){let i,t,a;s.export({useRoomName:()=>o}),s.link(\"@rocket.chat/core-typings\",{isDirectMessageRoom(e){i=e}},0),s.link(\"@rocket.chat/ui-contexts\",{useUserSubscription(e){t=e}},1),s.link(\"./useUserDisplayName\",{useUserDisplayName(e){a=e}},2);let o=e=>{let n=t(e._id),s=a({name:null==n?void 0:n.fname,username:null==n?void 0:n.name});return i(e)?s:e.fname||e.name}}","map":"{\"version\":3,\"sources\":[\"client/hooks/useRoomName.ts\",\"<anon>\"],\"sourcesContent\":[\"import type { IRoom } from '@rocket.chat/core-typings';\\nimport { isDirectMessageRoom } from '@rocket.chat/core-typings';\\nimport { useUserSubscription } from '@rocket.chat/ui-contexts';\\n\\nimport { useUserDisplayName } from './useUserDisplayName';\\n\\n/**\\n *\\n * Hook to get the name of the room\\n *\\n * @param room - Room object\\n * @returns Room name\\n * @public\\n *\\n */\\nexport const useRoomName = (room: IRoom) => {\\n\\tconst subscription = useUserSubscription(room._id);\\n\\tconst username = useUserDisplayName({ name: subscription?.fname, username: subscription?.name });\\n\\n\\tif (isDirectMessageRoom(room)) {\\n\\t\\treturn username;\\n\\t}\\n\\n\\treturn room.fname || room.name;\\n};\\n\",null],\"names\":[\"isDirectMessageRoom\",\"useUserSubscription\",\"useUserDisplayName\",\"module\",\"export\",\"useRoomName\",\"link\",\"v\",\"room\",\"subscription\",\"_id\",\"username\",\"name\",\"fname\"],\"mappings\":\"2BACoCA,EAA4BC,EAAAC,EAAhEC,EAAOC,MAAE,CAAA,CAAAC,YAAAA,IAAqBA,CAAM,GAA4BF,EAAAG,IAAA,CAAA,4BAAA,CAAAN,oBAAAO,CAAA,EAAAP,EAAAO,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,2BAAA,CAAAL,oBAAAM,CAAA,EAAAN,EAAAM,CAAA,CAAA,EAAA,GAAAJ,EAAAG,IAAA,CAAA,uBAAA,CAAAJ,mBAAAK,CAAA,EAAAL,EAAAK,CAAA,CAAA,EAAA,GAczD,IAAMF,EAAeG,IAC3B,IAAMC,EAAeR,EAAoBO,EAAKE,GAAG,EAC3CC,EAAWT,EAAmB,CAAEU,KAAMH,MAAAA,EAAY,KAAA,EAAZA,EAAcI,KAAK,CAAEF,SAAUF,MAAAA,EAAY,KAAA,EAAZA,EAAcG,IAAAA,AAAI,UAE7F,AAAIZ,EAAoBQ,GAChBG,EAGDH,EAAKK,KAAK,EAAIL,EAAKI,IAAI,AAC/B\"}"}