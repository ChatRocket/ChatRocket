{"code":"function module(n,e,r){r.link(\"@babel/runtime/regenerator\",{default:function(n){t=n}},0),r.export({useClearUnreadAllMessagesMutation:function(){return o}}),r.link(\"@rocket.chat/ui-contexts\",{useEndpoint:function(n){a=n}},0),r.link(\"@tanstack/react-query\",{useMutation:function(n){i=n}},1),r.link(\"../../../../app/models/client\",{ChatSubscription:function(n){u=n}},2);var t,a,i,u,o=function(n){var e=a(\"POST\",\"/v1/subscriptions.read\");return i(function(){var n;return t.async(function(r){for(;;)switch(r.prev=r.next){case 0:return n=u.find({open:!0},{fields:{unread:1,alert:1,rid:1,t:1,name:1,ls:1}}).map(function(n){return n.alert||n.unread>0?e({rid:n.rid,readThreads:!0}):Promise.resolve()}),r.next=3,t.awrap(Promise.all(n));case 3:case\"end\":return r.stop()}},null,null,null,Promise)},n)}}","map":"{\"version\":3,\"sources\":[\"client/views/root/hooks/useClearUnreadAllMessagesMutation.ts\",\"<anon>\"],\"sourcesContent\":[\"import { useEndpoint } from '@rocket.chat/ui-contexts';\\nimport type { UseMutationOptions } from '@tanstack/react-query';\\nimport { useMutation } from '@tanstack/react-query';\\n\\nimport { ChatSubscription } from '../../../../app/models/client';\\n\\nexport const useClearUnreadAllMessagesMutation = (options?: Omit<UseMutationOptions<void, unknown, void, unknown>, 'mutationFn'>) => {\\n\\tconst readSubscription = useEndpoint('POST', '/v1/subscriptions.read');\\n\\n\\treturn useMutation(async () => {\\n\\t\\tconst promises = ChatSubscription.find(\\n\\t\\t\\t{\\n\\t\\t\\t\\topen: true,\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tfields: {\\n\\t\\t\\t\\t\\tunread: 1,\\n\\t\\t\\t\\t\\talert: 1,\\n\\t\\t\\t\\t\\trid: 1,\\n\\t\\t\\t\\t\\tt: 1,\\n\\t\\t\\t\\t\\tname: 1,\\n\\t\\t\\t\\t\\tls: 1,\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t).map((subscription) => {\\n\\t\\t\\tif (subscription.alert || subscription.unread > 0) {\\n\\t\\t\\t\\treturn readSubscription({ rid: subscription.rid, readThreads: true });\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn Promise.resolve();\\n\\t\\t});\\n\\n\\t\\tawait Promise.all(promises);\\n\\t}, options);\\n};\\n\",null],\"names\":[\"module\",\"link\",\"default\",\"v\",\"_regeneratorRuntime\",\"export\",\"useClearUnreadAllMessagesMutation\",\"useEndpoint\",\"useMutation\",\"ChatSubscription\",\"options\",\"readSubscription\",\"promises\",\"async\",\"_context\",\"prev\",\"next\",\"find\",\"open\",\"fields\",\"unread\",\"alert\",\"rid\",\"t\",\"name\",\"ls\",\"map\",\"subscription\",\"readThreads\",\"Promise\",\"resolve\",\"awrap\",\"all\",\"stop\"],\"mappings\":\"uBAAsBA,EAAMC,IAAA,CAAA,6BAA2B,CAAAC,QAAA,SAAAC,CAAA,EAAAC,EAAAD,CAAA,CAAA,EAAA,GAAvDH,EAAOK,MAAE,CAAA,CAAAC,kCAAmB,WAA2B,OAAAA,CAAA,CAAA,GAAAN,EAAAC,IAAA,CAAA,2BAAA,CAAAM,YAAA,SAAAJ,CAAA,EAAAI,EAAAJ,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,wBAAA,CAAAO,YAAA,SAAAL,CAAA,EAAAK,EAAAL,CAAA,CAAA,EAAA,GAAAH,EAAAC,IAAA,CAAA,gCAAA,CAAAQ,iBAAA,SAAAN,CAAA,EAAAM,EAAAN,CAAA,CAAA,EAAA,GAMhD,IANPC,EAAuDG,EAAAC,EAAAC,EAM1CH,EAAoC,SAACI,CAA8E,EAC/H,IAAMC,EAAmBJ,EAAY,OAAQ,0BAE7C,OAAOC,EAAY,WAAA,IAAAI,EAAA,OAAAR,EAAAS,KAAA,CAAA,SAAAC,CAAA,EAAA,OAAA,OAAAA,EAAAC,IAAA,CAAAD,EAAAE,IAAA,EAAA,KAAA,EAqBhB,OApBIJ,EAAWH,EAAiBQ,IAAI,CACrC,CACCC,KAAM,CAAA,GAEP,CACCC,OAAQ,CACPC,OAAQ,EACRC,MAAO,EACPC,IAAK,EACLC,EAAG,EACHC,KAAM,EACNC,GAAI,KAGLC,GAAG,CAAC,SAACC,CAAY,SAClB,AAAIA,EAAaN,KAAK,EAAIM,EAAaP,MAAM,CAAG,EACxCT,EAAiB,CAAEW,IAAKK,EAAaL,GAAG,CAAEM,YAAa,CAAA,CAAI,GAG5DC,QAAQC,OAAO,EACvB,GAAEhB,EAAAE,IAAA,CAAA,EAAAZ,EAAA2B,KAAA,CAEIF,QAAQG,GAAG,CAACpB,GAAS,MAAA,EAAA,IAAA,MAAA,OAAAE,EAAAmB,IAAA,EAAA,CAAA,EAAA,KAAA,KAAA,KAAAJ,QAAA,EACzBnB,EACJ\"}"}