{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/client/sodium-plus/lib/backend/sodiumnative.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/sodiumnative.js"}},"code":"!function (module1) {\n  let loaded = false;\n  let _sodium;\n  /* istanbul ignore next */\n  try {\n    _sodium = require('sodium-native');\n    loaded = true;\n  } catch (e) {\n    _sodium = {};\n  }\n  const Backend = require('../backend');\n  const CryptographyKey = require('../cryptography-key');\n  const SodiumError = require('../sodium-error');\n  const Util = require('../util');\n  const toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n  if (typeof Buffer === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n  }\n\n  /* istanbul ignore next */\n  module.exports = class SodiumNativeBackend extends Backend {\n    constructor(lib) {\n      super(lib);\n      this.sodium = lib;\n      this.backendName = 'SodiumNativeBackend';\n    }\n    static async init() {\n      if (!loaded) {\n        throw new SodiumError('sodium-native not installed');\n      }\n      return new SodiumNativeBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n      const plaintext = Buffer.alloc(ciphertext.length - 16, 0);\n      this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(plaintext, null, await Util.toBuffer(ciphertext), await Util.toBuffer(assocData), await Util.toBuffer(nonce), key.getBuffer());\n      return plaintext;\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n      const ciphertext = Buffer.alloc(plaintext.length + 16, 0);\n      this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(ciphertext, await Util.toBuffer(plaintext), await Util.toBuffer(assocData), null, await Util.toBuffer(nonce), key.getBuffer());\n      return ciphertext;\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n      const output = Buffer.alloc(32);\n      this.sodium.crypto_auth(output, await Util.toBuffer(message), key.getBuffer());\n      return toBuffer(output);\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n      return this.sodium.crypto_auth_verify(mac, await Util.toBuffer(message), key.getBuffer());\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n      const ciphertext = Buffer.alloc(plaintext.length + 16);\n      this.sodium.crypto_box_easy(ciphertext, await Util.toBuffer(plaintext), nonce, pk.getBuffer(), sk.getBuffer());\n      return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n      const plaintext = Buffer.alloc(ciphertext.length - 16);\n      const success = this.sodium.crypto_box_open_easy(plaintext, ciphertext, nonce, pk.getBuffer(), sk.getBuffer());\n      if (!success) {\n        throw new SodiumError('Decryption failed');\n      }\n      return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n      const ciphertext = Buffer.alloc(plaintext.length + 48);\n      this.sodium.crypto_box_seal(ciphertext, await Util.toBuffer(plaintext), pk.getBuffer());\n      return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n      const plaintext = Buffer.alloc(ciphertext.length - 48);\n      const success = this.sodium.crypto_box_seal_open(plaintext, await Util.toBuffer(ciphertext), pk.getBuffer(), sk.getBuffer());\n      if (!success) {\n        throw new SodiumError('Decryption failed');\n      }\n      return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n      const sK = Buffer.alloc(32, 0);\n      const pK = Buffer.alloc(32, 0);\n      this.sodium.crypto_box_keypair(sK, pK);\n      return new CryptographyKey(Buffer.concat([pK, sK]));\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message) {\n      let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let outputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n      const hash = Buffer.alloc(outputLength);\n      if (key) {\n        this.sodium.crypto_generichash(hash, await Util.toBuffer(message), key.getBuffer());\n      } else {\n        this.sodium.crypto_generichash(hash, await Util.toBuffer(message));\n      }\n      return hash;\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init() {\n      let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      const state = Buffer.alloc(this.CRYPTO_GENERICHASH_STATEBYTES);\n      if (key) {\n        this.sodium.crypto_generichash_init(state, key.getBuffer(), outputLength);\n      } else {\n        this.sodium.crypto_generichash_init(state, null, outputLength);\n      }\n      return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n      this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n      return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state) {\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      const output = Buffer.alloc(outputLength);\n      this.sodium.crypto_generichash_final(state, output);\n      return output;\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n      const subkey = Buffer.alloc(length, 0);\n      this.sodium.crypto_kdf_derive_from_key(subkey, subKeyId | 0, await Util.toBuffer(context), key.getBuffer());\n      return new CryptographyKey(subkey);\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n      const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n      const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n      this.sodium.crypto_kx_client_session_keys(rx, tx, clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n      return [new CryptographyKey(rx), new CryptographyKey(tx)];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n      const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n      const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n      this.sodium.crypto_kx_server_session_keys(rx, tx, serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n      return [new CryptographyKey(rx), new CryptographyKey(tx)];\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n      const output = Buffer.alloc(16);\n      this.sodium.crypto_onetimeauth(output, await Util.toBuffer(message), key.getBuffer());\n      return output;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n      return this.sodium.crypto_onetimeauth_verify(tag, await Util.toBuffer(message), key.getBuffer());\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n      const hashed = Buffer.alloc(length, 0);\n      const bufPass = await Util.toBuffer(password);\n      const bufSalt = await Util.toBuffer(salt);\n      await new Promise((resolve, reject) => {\n        this.sodium.crypto_pwhash_async(hashed, bufPass, bufSalt, opslimit, memlimit, algorithm, (e, res) => {\n          if (e) return reject(e);\n          return resolve(res);\n        });\n      });\n      return hashed;\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n      const hashed = Buffer.alloc(128, 0);\n      const bufPass = await Util.toBuffer(password);\n      await new Promise((resolve, reject) => {\n        this.sodium.crypto_pwhash_str_async(hashed, bufPass, opslimit, memlimit, (e, res) => {\n          if (e) return reject(e);\n          return resolve(res);\n        });\n      });\n      return hashed.toString();\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n      const allocated = Buffer.alloc(128, 0);\n      (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n      const bufPass = await Util.toBuffer(password);\n      return new Promise((resolve, reject) => {\n        this.sodium.crypto_pwhash_str_verify_async(allocated, bufPass, (e, res) => {\n          if (e) return reject(e);\n          return resolve(res);\n        });\n      });\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n      const allocated = Buffer.alloc(128, 0);\n      (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n      return this.sodium.crypto_pwhash_str_needs_rehash(allocated, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n      const shared = Buffer.alloc(32);\n      this.sodium.crypto_scalarmult(shared, secretKey.getBuffer(), publicKey.getBuffer());\n      return new CryptographyKey(await Util.toBuffer(shared));\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n      const buf = Buffer.alloc(32);\n      this.sodium.crypto_scalarmult_base(buf, secretKey.getBuffer());\n      return buf;\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n      const encrypted = Buffer.alloc(plaintext.length + 16);\n      this.sodium.crypto_secretbox_easy(encrypted, await Util.toBuffer(plaintext), nonce, key.getBuffer());\n      return encrypted;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n      const output = Buffer.alloc(8);\n      this.sodium.crypto_shorthash(output, await Util.toBuffer(message), key.getBuffer());\n      return output;\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n      const decrypted = Buffer.alloc(ciphertext.length - 16);\n      if (!this.sodium.crypto_secretbox_open_easy(decrypted, ciphertext, nonce, key.getBuffer())) {\n        throw new SodiumError('Decryption failure');\n      }\n      return decrypted;\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n      const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n      const header = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n      this.sodium.randombytes_buf(header);\n      this.sodium.crypto_secretstream_xchacha20poly1305_init_push(state, header, key.getBuffer());\n      return [state, header];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n      if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n        throw new SodiumError(\"Header must be \".concat(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES, \" bytes long\"));\n      }\n      const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n      this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(state, header, key.getBuffer());\n      return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      const ciphertext = Buffer.alloc(message.length + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n      this.sodium.crypto_secretstream_xchacha20poly1305_push(state, ciphertext, await Util.toBuffer(message), ad.length > 0 ? await Util.toBuffer(ad) : null, Buffer.from([tag]));\n      return ciphertext;\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n        throw new SodiumError('Invalid ciphertext size');\n      }\n      const plaintext = Buffer.alloc(ciphertext.length - this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n      this.sodium.crypto_secretstream_xchacha20poly1305_pull(state, plaintext, Buffer.from([tag]), ciphertext, ad.length > 0 ? await Util.toBuffer(ad) : null);\n      return plaintext;\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n      this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n      const signed = Buffer.alloc(message.length + 64);\n      this.sodium.crypto_sign(signed, await Util.toBuffer(message), secretKey.getBuffer());\n      return signed;\n    }\n\n    /**\n     * @param {Buffer} signedMessage,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(signedMessage, publicKey) {\n      const original = Buffer.alloc(signedMessage.length - 64);\n      this.sodium.crypto_sign_open(original, await Util.toBuffer(signedMessage), publicKey.getBuffer());\n      return original;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n      const signature = Buffer.alloc(64);\n      this.sodium.crypto_sign_detached(signature, await Util.toBuffer(message), secretKey.getBuffer());\n      return signature;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n      return this.sodium.crypto_sign_verify_detached(signature, await Util.toBuffer(message), publicKey.getBuffer());\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n      const sK = Buffer.alloc(64, 0);\n      const pK = Buffer.alloc(32, 0);\n      this.sodium.crypto_sign_keypair(pK, sK);\n      return new CryptographyKey(Buffer.concat([sK, pK]));\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n      const sK = Buffer.alloc(64, 0);\n      const pK = Buffer.alloc(32, 0);\n      this.sodium.crypto_sign_seed_keypair(pK, sK, seed);\n      return new CryptographyKey(Buffer.concat([sK, pK]));\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n      const xsk = Buffer.alloc(32);\n      this.sodium.crypto_sign_ed25519_sk_to_curve25519(xsk, sk.getBuffer());\n      return xsk;\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n      const xpk = Buffer.alloc(32);\n      this.sodium.crypto_sign_ed25519_pk_to_curve25519(xpk, pk.getBuffer());\n      return xpk;\n    }\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n      const output = Buffer.alloc(length);\n      this.sodium.crypto_stream(output, await Util.toBuffer(nonce), key.getBuffer());\n      return output;\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n      const output = Buffer.alloc(plaintext.length);\n      this.sodium.crypto_stream_xor(output, await Util.toBuffer(plaintext), await Util.toBuffer(nonce), key.getBuffer());\n      return output;\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n      let buf = Buffer.alloc(number);\n      this.sodium.randombytes_buf(buf);\n      return buf;\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n      return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n      const buf = await Util.cloneBuffer(val);\n      this.sodium.sodium_add(buf, addv);\n      return buf;\n    }\n\n    /**\n     * @param {Buffer} input\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(input) {\n      let str = \"\",\n        b,\n        c,\n        x;\n      for (let i = 0; i < input.length; i++) {\n        c = input[i] & 0xf;\n        b = input[i] >>> 4;\n        x = 87 + c + (c - 10 >> 8 & ~38) << 8 | 87 + b + (b - 10 >> 8 & ~38);\n        str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);\n      }\n      return str;\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n      return this.sodium.sodium_compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} hex\n     * @param {string|null} ignore\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(hex) {\n      let ignore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let bin_pos = 0,\n        hex_pos = 0,\n        c = 0,\n        c_acc = 0,\n        c_alpha0 = 0,\n        c_alpha = 0,\n        c_num0 = 0,\n        c_num = 0,\n        c_val = 0,\n        state = 0;\n      const bin = Buffer.alloc(hex.length >> 1, 0);\n      while (hex_pos < hex.length) {\n        c = hex.charCodeAt(hex_pos);\n        c_num = c ^ 48;\n        c_num0 = c_num - 10 >> 8;\n        c_alpha = (c & ~32) - 55;\n        c_alpha0 = (c_alpha - 10 ^ c_alpha - 16) >> 8;\n        if ((c_num0 | c_alpha0) === 0) {\n          if (ignore && state === 0 && ignore.indexOf(c) >= 0) {\n            hex_pos++;\n            continue;\n          }\n          break;\n        }\n        c_val = c_num0 & c_num | c_alpha0 & c_alpha;\n        if (state === 0) {\n          c_acc = c_val * 16;\n        } else {\n          bin[bin_pos++] = c_acc | c_val;\n        }\n        state = ~state;\n        hex_pos++;\n      }\n      return bin;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n      return this.sodium.sodium_increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n      return this.sodium.sodium_is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n      return this.sodium.sodium_memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n      this.sodium.sodium_memzero(buf);\n    }\n\n    /**\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n      buf = await Util.toBuffer(buf);\n      let length = buf.length + buf.length % blockSize;\n      if (length < blockSize) {\n        length += blockSize;\n      }\n      const padded = Buffer.alloc(length + 100);\n      buf.copy(padded, 0, 0);\n      const sliceto = this.sodium.sodium_pad(padded, buf.length, blockSize);\n      return padded.slice(0, sliceto);\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n      const outlen = this.sodium.sodium_unpad(buf, buf.length, blockSize);\n      return buf.slice(0, outlen);\n    }\n  };\n}.call(this, module);","map":{"version":3,"names":["loaded","_sodium","require","e","Backend","CryptographyKey","SodiumError","Util","toBuffer","Buffer","module","exports","SodiumNativeBackend","constructor","lib","sodium","backendName","init","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","plaintext","alloc","length","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_auth","message","output","crypto_auth_verify","mac","crypto_box","sk","pk","crypto_box_easy","crypto_box_open","success","crypto_box_open_easy","crypto_box_seal","crypto_box_seal_open","crypto_box_keypair","sK","pK","concat","crypto_generichash","arguments","undefined","outputLength","hash","crypto_generichash_init","state","CRYPTO_GENERICHASH_STATEBYTES","crypto_generichash_update","crypto_generichash_final","crypto_kdf_derive_from_key","subKeyId","context","subkey","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","rx","CRYPTO_KX_SESSIONKEYBYTES","tx","crypto_kx_server_session_keys","serverSecretKey","crypto_onetimeauth","crypto_onetimeauth_verify","tag","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","hashed","bufPass","bufSalt","Promise","resolve","reject","crypto_pwhash_async","res","crypto_pwhash_str","crypto_pwhash_str_async","toString","crypto_pwhash_str_verify","allocated","copy","crypto_pwhash_str_verify_async","crypto_pwhash_str_needs_rehash","crypto_scalarmult","secretKey","publicKey","shared","crypto_scalarmult_base","buf","crypto_secretbox","encrypted","crypto_secretbox_easy","crypto_shorthash","crypto_secretbox_open","decrypted","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_push","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES","header","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","randombytes_buf","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_push","ad","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","from","crypto_secretstream_xchacha20poly1305_pull","crypto_secretstream_xchacha20poly1305_rekey","crypto_sign","signed","crypto_sign_open","signedMessage","original","crypto_sign_detached","signature","crypto_sign_verify_detached","crypto_sign_keypair","crypto_sign_seed_keypair","seed","crypto_sign_ed25519_sk_to_curve25519","xsk","crypto_sign_ed25519_pk_to_curve25519","xpk","crypto_stream","crypto_stream_xor","number","randombytes_uniform","upperBound","sodium_add","val","addv","cloneBuffer","sodium_bin2hex","input","str","b","c","x","i","String","fromCharCode","sodium_compare","b1","b2","sodium_hex2bin","hex","ignore","bin_pos","hex_pos","c_acc","c_alpha0","c_alpha","c_num0","c_num","c_val","bin","charCodeAt","indexOf","sodium_increment","sodium_is_zero","len","sodium_memcmp","sodium_memzero","sodium_pad","blockSize","padded","sliceto","slice","sodium_unpad","outlen","call"],"sources":["imports/client/sodium-plus/lib/backend/sodiumnative.js"],"sourcesContent":["let loaded = false;\nlet _sodium;\n/* istanbul ignore next */\ntry {\n    _sodium = require('sodium-native');\n    loaded = true;\n} catch (e) {\n    _sodium = {};\n}\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst SodiumError = require('../sodium-error');\nconst Util = require('../util');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class SodiumNativeBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'SodiumNativeBackend';\n    }\n\n    static async init() {\n        if (!loaded) {\n            throw new SodiumError('sodium-native not installed');\n        }\n        return new SodiumNativeBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        const plaintext = Buffer.alloc(ciphertext.length - 16, 0);\n        this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n            plaintext,\n            null,\n            await Util.toBuffer(ciphertext),\n            await Util.toBuffer(assocData),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return plaintext;\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        const ciphertext = Buffer.alloc(plaintext.length + 16, 0);\n        this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(assocData),\n            null,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return ciphertext;\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        const output = Buffer.alloc(32);\n        this.sodium.crypto_auth(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return toBuffer(output);\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        const ciphertext = Buffer.alloc(plaintext.length + 16);\n        this.sodium.crypto_box_easy(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            nonce,\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        const plaintext = Buffer.alloc(ciphertext.length - 16);\n        const success = this.sodium.crypto_box_open_easy(\n            plaintext,\n            ciphertext,\n            nonce,\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        if (!success) {\n            throw new SodiumError('Decryption failed');\n        }\n        return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        const ciphertext = Buffer.alloc(plaintext.length + 48);\n        this.sodium.crypto_box_seal(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            pk.getBuffer()\n        );\n        return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        const plaintext = Buffer.alloc(ciphertext.length - 48);\n        const success = this.sodium.crypto_box_seal_open(\n            plaintext,\n            await Util.toBuffer(ciphertext),\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        if (!success) {\n            throw new SodiumError('Decryption failed');\n        }\n        return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const sK = Buffer.alloc(32, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_box_keypair(sK, pK);\n        return new CryptographyKey(\n            Buffer.concat([pK, sK])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        const hash = Buffer.alloc(outputLength);\n        if (key) {\n            this.sodium.crypto_generichash(hash, await Util.toBuffer(message), key.getBuffer());\n        } else {\n            this.sodium.crypto_generichash(hash, await Util.toBuffer(message));\n        }\n        return hash;\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        const state = Buffer.alloc(this.CRYPTO_GENERICHASH_STATEBYTES);\n        if (key) {\n            this.sodium.crypto_generichash_init(state, key.getBuffer(), outputLength);\n        } else {\n            this.sodium.crypto_generichash_init(state, null, outputLength);\n        }\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        const output = Buffer.alloc(outputLength);\n        this.sodium.crypto_generichash_final(state, output);\n        return output;\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        const subkey = Buffer.alloc(length, 0);\n        this.sodium.crypto_kdf_derive_from_key(\n            subkey,\n            subKeyId | 0,\n            await Util.toBuffer(context),\n            key.getBuffer()\n        );\n        return new CryptographyKey(subkey);\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        this.sodium.crypto_kx_client_session_keys(\n            rx,\n            tx,\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(rx),\n            new CryptographyKey(tx)\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        this.sodium.crypto_kx_server_session_keys(\n            rx,\n            tx,\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(rx),\n            new CryptographyKey(tx)\n        ];\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        const output = Buffer.alloc(16);\n        this.sodium.crypto_onetimeauth(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        const hashed = Buffer.alloc(length, 0);\n        const bufPass = await Util.toBuffer(password);\n        const bufSalt = await Util.toBuffer(salt);\n        await new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_async(\n                hashed,\n                bufPass,\n                bufSalt,\n                opslimit,\n                memlimit,\n                algorithm,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n        return hashed;\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        const hashed = Buffer.alloc(128, 0);\n        const bufPass = await Util.toBuffer(password);\n        await new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_str_async(\n                hashed,\n                bufPass,\n                opslimit,\n                memlimit,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n        return hashed.toString();\n\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        const allocated = Buffer.alloc(128, 0);\n        (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n        const bufPass = await Util.toBuffer(password);\n        return new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_str_verify_async(\n                allocated,\n                bufPass,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        const allocated = Buffer.alloc(128, 0);\n        (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n        return this.sodium.crypto_pwhash_str_needs_rehash(\n            allocated,\n            opslimit,\n            memlimit\n        );\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        const shared = Buffer.alloc(32);\n        this.sodium.crypto_scalarmult(shared, secretKey.getBuffer(), publicKey.getBuffer());\n        return new CryptographyKey(\n            await Util.toBuffer(shared)\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        const buf = Buffer.alloc(32);\n        this.sodium.crypto_scalarmult_base(buf, secretKey.getBuffer());\n        return buf;\n    }\n\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        const encrypted = Buffer.alloc(plaintext.length + 16);\n        this.sodium.crypto_secretbox_easy(\n            encrypted,\n            await Util.toBuffer(plaintext),\n            nonce,\n            key.getBuffer()\n        );\n        return encrypted;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        const output = Buffer.alloc(8);\n        this.sodium.crypto_shorthash(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        const decrypted = Buffer.alloc(ciphertext.length - 16);\n        if (!this.sodium.crypto_secretbox_open_easy(\n            decrypted,\n            ciphertext,\n            nonce,\n            key.getBuffer()\n        )) {\n            throw new SodiumError('Decryption failure');\n        }\n        return decrypted;\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n        const header = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n        this.sodium.randombytes_buf(header);\n        this.sodium.crypto_secretstream_xchacha20poly1305_init_push(state, header, key.getBuffer());\n        return [state, header];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(state, header, key.getBuffer());\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        const ciphertext = Buffer.alloc(message.length + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_push(\n            state,\n            ciphertext,\n            await Util.toBuffer(message),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            Buffer.from([tag])\n        );\n        return ciphertext;\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const plaintext = Buffer.alloc(ciphertext.length - this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            plaintext,\n            Buffer.from([tag]),\n            ciphertext,\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null\n        );\n        return plaintext;\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        const signed = Buffer.alloc(message.length + 64);\n        this.sodium.crypto_sign(signed, await Util.toBuffer(message), secretKey.getBuffer());\n        return signed;\n    }\n\n    /**\n     * @param {Buffer} signedMessage,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(signedMessage, publicKey) {\n        const original = Buffer.alloc(signedMessage.length - 64);\n        this.sodium.crypto_sign_open(original, await Util.toBuffer(signedMessage), publicKey.getBuffer());\n        return original;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        const signature = Buffer.alloc(64);\n        this.sodium.crypto_sign_detached(signature, await Util.toBuffer(message), secretKey.getBuffer());\n        return signature;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const sK = Buffer.alloc(64, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_sign_keypair(pK, sK);\n        return new CryptographyKey(\n            Buffer.concat([sK, pK])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const sK = Buffer.alloc(64, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_sign_seed_keypair(pK, sK, seed);\n        return new CryptographyKey(\n            Buffer.concat([sK, pK])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        const xsk = Buffer.alloc(32);\n        this.sodium.crypto_sign_ed25519_sk_to_curve25519(xsk, sk.getBuffer());\n        return xsk;\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        const xpk = Buffer.alloc(32);\n        this.sodium.crypto_sign_ed25519_pk_to_curve25519(xpk, pk.getBuffer());\n        return xpk;\n    }\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        const output = Buffer.alloc(length);\n        this.sodium.crypto_stream(\n            output,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        const output = Buffer.alloc(plaintext.length);\n        this.sodium.crypto_stream_xor(\n            output,\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        let buf = Buffer.alloc(number);\n        this.sodium.randombytes_buf(buf);\n        return buf;\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.sodium_add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} input\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(input) {\n        let str = \"\", b, c, x;\n        for (let i = 0; i < input.length; i++) {\n            c = input[i] & 0xf;\n            b = input[i] >>> 4;\n            x =\n                ((87 + c + (((c - 10) >> 8) & ~38)) << 8) |\n                (87 + b + (((b - 10) >> 8) & ~38));\n            str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);\n        }\n        return str;\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.sodium_compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} hex\n     * @param {string|null} ignore\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(hex, ignore = null) {\n        let bin_pos = 0,\n            hex_pos = 0,\n            c = 0,\n            c_acc = 0,\n            c_alpha0 = 0,\n            c_alpha = 0,\n            c_num0 = 0,\n            c_num = 0,\n            c_val = 0,\n            state = 0;\n        const bin = Buffer.alloc(hex.length >> 1, 0);\n\n        while (hex_pos < hex.length) {\n            c = hex.charCodeAt(hex_pos);\n            c_num = c ^ 48;\n            c_num0 = (c_num - 10) >> 8;\n            c_alpha = (c & ~32) - 55;\n            c_alpha0 = ((c_alpha - 10) ^ (c_alpha - 16)) >> 8;\n            if ((c_num0 | c_alpha0) === 0) {\n                if (ignore && state === 0 && ignore.indexOf(c) >= 0) {\n                    hex_pos++;\n                    continue;\n                }\n                break;\n            }\n            c_val = (c_num0 & c_num) | (c_alpha0 & c_alpha);\n            if (state === 0) {\n                c_acc = c_val * 16;\n            } else {\n                bin[bin_pos++] = c_acc | c_val;\n            }\n            state = ~state;\n            hex_pos++;\n        }\n        return bin;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.sodium_increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.sodium_is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.sodium_memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.sodium_memzero(buf);\n    }\n\n    /**\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        buf = await Util.toBuffer(buf);\n        let length = buf.length + (buf.length % blockSize);\n        if (length < blockSize) {\n            length += blockSize;\n        }\n        const padded = Buffer.alloc(length + 100);\n        buf.copy(padded, 0, 0);\n        const sliceto = this.sodium.sodium_pad(padded, buf.length, blockSize);\n        return padded.slice(0, sliceto);\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        const outlen = this.sodium.sodium_unpad(buf, buf.length, blockSize);\n        return buf.slice(0, outlen);\n    }\n};\n"],"mappings":";EAAA,IAAIA,MAAM,GAAG,KAAK;EAClB,IAAIC,OAAO;EACX;EACA,IAAI;IACAA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;IAClCF,MAAM,GAAG,IAAI;EACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRF,OAAO,GAAG,CAAC,CAAC;EAChB;EACA,MAAMG,OAAO,GAAGF,OAAO,CAAC,YAAY,CAAC;EACrC,MAAMG,eAAe,GAAGH,OAAO,CAAC,qBAAqB,CAAC;EACtD,MAAMI,WAAW,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;EAC9C,MAAMK,IAAI,GAAGL,OAAO,CAAC,SAAS,CAAC;EAC/B,MAAMM,QAAQ,GAAGN,OAAO,CAAC,sBAAsB,CAAC;EAChD;EACA,IAAI,OAAQO,MAAO,KAAK,WAAW,EAAE;IACjC,IAAIA,MAAM,GAAGP,OAAO,CAAC,SAAS,CAAC,CAACO,MAAM;EAC1C;;EAEA;EACAC,MAAM,CAACC,OAAO,GAAG,MAAMC,mBAAmB,SAASR,OAAO,CAAC;IACvDS,WAAWA,CAACC,GAAG,EAAE;MACb,KAAK,CAACA,GAAG,CAAC;MACV,IAAI,CAACC,MAAM,GAAGD,GAAG;MACjB,IAAI,CAACE,WAAW,GAAG,qBAAqB;IAC5C;IAEA,aAAaC,IAAIA,CAAA,EAAG;MAChB,IAAI,CAACjB,MAAM,EAAE;QACT,MAAM,IAAIM,WAAW,CAAC,6BAA6B,CAAC;MACxD;MACA,OAAO,IAAIM,mBAAmB,CAACX,OAAO,CAAC;IAC3C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMiB,0CAA0CA,CAACC,UAAU,EAAEC,SAAS,EAAEC,KAAK,EAAEC,GAAG,EAAE;MAChF,MAAMC,SAAS,GAAGd,MAAM,CAACe,KAAK,CAACL,UAAU,CAACM,MAAM,GAAG,EAAE,EAAE,CAAC,CAAC;MACzD,IAAI,CAACV,MAAM,CAACG,0CAA0C,CAClDK,SAAS,EACT,IAAI,EACJ,MAAMhB,IAAI,CAACC,QAAQ,CAACW,UAAU,CAAC,EAC/B,MAAMZ,IAAI,CAACC,QAAQ,CAACY,SAAS,CAAC,EAC9B,MAAMb,IAAI,CAACC,QAAQ,CAACa,KAAK,CAAC,EAC1BC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOH,SAAS;IACpB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMI,0CAA0CA,CAACJ,SAAS,EAAEH,SAAS,EAAEC,KAAK,EAAEC,GAAG,EAAE;MAC/E,MAAMH,UAAU,GAAGV,MAAM,CAACe,KAAK,CAACD,SAAS,CAACE,MAAM,GAAG,EAAE,EAAE,CAAC,CAAC;MACzD,IAAI,CAACV,MAAM,CAACY,0CAA0C,CAClDR,UAAU,EACV,MAAMZ,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC,EAC9B,MAAMhB,IAAI,CAACC,QAAQ,CAACY,SAAS,CAAC,EAC9B,IAAI,EACJ,MAAMb,IAAI,CAACC,QAAQ,CAACa,KAAK,CAAC,EAC1BC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOP,UAAU;IACrB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMS,WAAWA,CAACC,OAAO,EAAEP,GAAG,EAAE;MAC5B,MAAMQ,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC/B,IAAI,CAACT,MAAM,CAACa,WAAW,CACnBE,MAAM,EACN,MAAMvB,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BP,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOlB,QAAQ,CAACsB,MAAM,CAAC;IAC3B;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,kBAAkBA,CAACC,GAAG,EAAEH,OAAO,EAAEP,GAAG,EAAE;MACxC,OAAO,IAAI,CAACP,MAAM,CAACgB,kBAAkB,CACjCC,GAAG,EACH,MAAMzB,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BP,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAMO,UAAUA,CAACV,SAAS,EAAEF,KAAK,EAAEa,EAAE,EAAEC,EAAE,EAAE;MACvC,MAAMhB,UAAU,GAAGV,MAAM,CAACe,KAAK,CAACD,SAAS,CAACE,MAAM,GAAG,EAAE,CAAC;MACtD,IAAI,CAACV,MAAM,CAACqB,eAAe,CACvBjB,UAAU,EACV,MAAMZ,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC,EAC9BF,KAAK,EACLc,EAAE,CAACT,SAAS,CAAC,CAAC,EACdQ,EAAE,CAACR,SAAS,CAAC,CACjB,CAAC;MACD,OAAOnB,IAAI,CAACC,QAAQ,CAACW,UAAU,CAAC;IACpC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAMkB,eAAeA,CAAClB,UAAU,EAAEE,KAAK,EAAEa,EAAE,EAAEC,EAAE,EAAE;MAC7C,MAAMZ,SAAS,GAAGd,MAAM,CAACe,KAAK,CAACL,UAAU,CAACM,MAAM,GAAG,EAAE,CAAC;MACtD,MAAMa,OAAO,GAAG,IAAI,CAACvB,MAAM,CAACwB,oBAAoB,CAC5ChB,SAAS,EACTJ,UAAU,EACVE,KAAK,EACLc,EAAE,CAACT,SAAS,CAAC,CAAC,EACdQ,EAAE,CAACR,SAAS,CAAC,CACjB,CAAC;MACD,IAAI,CAACY,OAAO,EAAE;QACV,MAAM,IAAIhC,WAAW,CAAC,mBAAmB,CAAC;MAC9C;MACA,OAAOC,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMiB,eAAeA,CAACjB,SAAS,EAAEY,EAAE,EAAE;MACjC,MAAMhB,UAAU,GAAGV,MAAM,CAACe,KAAK,CAACD,SAAS,CAACE,MAAM,GAAG,EAAE,CAAC;MACtD,IAAI,CAACV,MAAM,CAACyB,eAAe,CACvBrB,UAAU,EACV,MAAMZ,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC,EAC9BY,EAAE,CAACT,SAAS,CAAC,CACjB,CAAC;MACD,OAAOnB,IAAI,CAACC,QAAQ,CAACW,UAAU,CAAC;IACpC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMsB,oBAAoBA,CAACtB,UAAU,EAAEgB,EAAE,EAAED,EAAE,EAAE;MAC3C,MAAMX,SAAS,GAAGd,MAAM,CAACe,KAAK,CAACL,UAAU,CAACM,MAAM,GAAG,EAAE,CAAC;MACtD,MAAMa,OAAO,GAAG,IAAI,CAACvB,MAAM,CAAC0B,oBAAoB,CAC5ClB,SAAS,EACT,MAAMhB,IAAI,CAACC,QAAQ,CAACW,UAAU,CAAC,EAC/BgB,EAAE,CAACT,SAAS,CAAC,CAAC,EACdQ,EAAE,CAACR,SAAS,CAAC,CACjB,CAAC;MACD,IAAI,CAACY,OAAO,EAAE;QACV,MAAM,IAAIhC,WAAW,CAAC,mBAAmB,CAAC;MAC9C;MACA,OAAOC,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC;IACnC;;IAEA;AACJ;AACA;IACI,MAAMmB,kBAAkBA,CAAA,EAAG;MACvB,MAAMC,EAAE,GAAGlC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,MAAMoB,EAAE,GAAGnC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,IAAI,CAACT,MAAM,CAAC2B,kBAAkB,CAACC,EAAE,EAAEC,EAAE,CAAC;MACtC,OAAO,IAAIvC,eAAe,CACtBI,MAAM,CAACoC,MAAM,CAAC,CAACD,EAAE,EAAED,EAAE,CAAC,CAC1B,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMG,kBAAkBA,CAACjB,OAAO,EAAiC;MAAA,IAA/BP,GAAG,GAAAyB,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;MAAA,IAAEE,YAAY,GAAAF,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAC3D,MAAMG,IAAI,GAAGzC,MAAM,CAACe,KAAK,CAACyB,YAAY,CAAC;MACvC,IAAI3B,GAAG,EAAE;QACL,IAAI,CAACP,MAAM,CAAC+B,kBAAkB,CAACI,IAAI,EAAE,MAAM3C,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAAEP,GAAG,CAACI,SAAS,CAAC,CAAC,CAAC;MACvF,CAAC,MAAM;QACH,IAAI,CAACX,MAAM,CAAC+B,kBAAkB,CAACI,IAAI,EAAE,MAAM3C,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,CAAC;MACtE;MACA,OAAOqB,IAAI;IACf;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,uBAAuBA,CAAA,EAAgC;MAAA,IAA/B7B,GAAG,GAAAyB,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;MAAA,IAAEE,YAAY,GAAAF,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MACvD,MAAMK,KAAK,GAAG3C,MAAM,CAACe,KAAK,CAAC,IAAI,CAAC6B,6BAA6B,CAAC;MAC9D,IAAI/B,GAAG,EAAE;QACL,IAAI,CAACP,MAAM,CAACoC,uBAAuB,CAACC,KAAK,EAAE9B,GAAG,CAACI,SAAS,CAAC,CAAC,EAAEuB,YAAY,CAAC;MAC7E,CAAC,MAAM;QACH,IAAI,CAAClC,MAAM,CAACoC,uBAAuB,CAACC,KAAK,EAAE,IAAI,EAAEH,YAAY,CAAC;MAClE;MACA,OAAOG,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAME,yBAAyBA,CAACF,KAAK,EAAEvB,OAAO,EAAE;MAC5C,IAAI,CAACd,MAAM,CAACuC,yBAAyB,CAACF,KAAK,EAAE,MAAM7C,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,CAAC;MAC1E,OAAOuB,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMG,wBAAwBA,CAACH,KAAK,EAAqB;MAAA,IAAnBH,YAAY,GAAAF,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MACnD,MAAMjB,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAACyB,YAAY,CAAC;MACzC,IAAI,CAAClC,MAAM,CAACwC,wBAAwB,CAACH,KAAK,EAAEtB,MAAM,CAAC;MACnD,OAAOA,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAM0B,0BAA0BA,CAAC/B,MAAM,EAAEgC,QAAQ,EAAEC,OAAO,EAAEpC,GAAG,EAAE;MAC7D,MAAMqC,MAAM,GAAGlD,MAAM,CAACe,KAAK,CAACC,MAAM,EAAE,CAAC,CAAC;MACtC,IAAI,CAACV,MAAM,CAACyC,0BAA0B,CAClCG,MAAM,EACNF,QAAQ,GAAG,CAAC,EACZ,MAAMlD,IAAI,CAACC,QAAQ,CAACkD,OAAO,CAAC,EAC5BpC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAO,IAAIrB,eAAe,CAACsD,MAAM,CAAC;IACtC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,6BAA6BA,CAACC,eAAe,EAAEC,eAAe,EAAEC,eAAe,EAAE;MACnF,MAAMC,EAAE,GAAGvD,MAAM,CAACe,KAAK,CAAC,IAAI,CAACyC,yBAAyB,CAAC;MACvD,MAAMC,EAAE,GAAGzD,MAAM,CAACe,KAAK,CAAC,IAAI,CAACyC,yBAAyB,CAAC;MACvD,IAAI,CAAClD,MAAM,CAAC6C,6BAA6B,CACrCI,EAAE,EACFE,EAAE,EACFL,eAAe,CAACnC,SAAS,CAAC,CAAC,EAC3BoC,eAAe,CAACpC,SAAS,CAAC,CAAC,EAC3BqC,eAAe,CAACrC,SAAS,CAAC,CAC9B,CAAC;MACD,OAAO,CACH,IAAIrB,eAAe,CAAC2D,EAAE,CAAC,EACvB,IAAI3D,eAAe,CAAC6D,EAAE,CAAC,CAC1B;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,6BAA6BA,CAACJ,eAAe,EAAEK,eAAe,EAAEP,eAAe,EAAE;MACnF,MAAMG,EAAE,GAAGvD,MAAM,CAACe,KAAK,CAAC,IAAI,CAACyC,yBAAyB,CAAC;MACvD,MAAMC,EAAE,GAAGzD,MAAM,CAACe,KAAK,CAAC,IAAI,CAACyC,yBAAyB,CAAC;MACvD,IAAI,CAAClD,MAAM,CAACoD,6BAA6B,CACrCH,EAAE,EACFE,EAAE,EACFH,eAAe,CAACrC,SAAS,CAAC,CAAC,EAC3B0C,eAAe,CAAC1C,SAAS,CAAC,CAAC,EAC3BmC,eAAe,CAACnC,SAAS,CAAC,CAC9B,CAAC;MACD,OAAO,CACH,IAAIrB,eAAe,CAAC2D,EAAE,CAAC,EACvB,IAAI3D,eAAe,CAAC6D,EAAE,CAAC,CAC1B;IACL;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMG,kBAAkBA,CAACxC,OAAO,EAAEP,GAAG,EAAE;MACnC,MAAMQ,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC/B,IAAI,CAACT,MAAM,CAACsD,kBAAkB,CAC1BvC,MAAM,EACN,MAAMvB,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BP,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOI,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMwC,yBAAyBA,CAACzC,OAAO,EAAEP,GAAG,EAAEiD,GAAG,EAAE;MAC/C,OAAO,IAAI,CAACxD,MAAM,CAACuD,yBAAyB,CACxCC,GAAG,EACH,MAAMhE,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BP,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,MAAM8C,aAAaA,CAAC/C,MAAM,EAAEgD,QAAQ,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,EAAE;MACvE,MAAMC,MAAM,GAAGrE,MAAM,CAACe,KAAK,CAACC,MAAM,EAAE,CAAC,CAAC;MACtC,MAAMsD,OAAO,GAAG,MAAMxE,IAAI,CAACC,QAAQ,CAACiE,QAAQ,CAAC;MAC7C,MAAMO,OAAO,GAAG,MAAMzE,IAAI,CAACC,QAAQ,CAACkE,IAAI,CAAC;MACzC,MAAM,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACnC,IAAI,CAACpE,MAAM,CAACqE,mBAAmB,CAC3BN,MAAM,EACNC,OAAO,EACPC,OAAO,EACPL,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACT,CAAC1E,CAAC,EAAEkF,GAAG,KAAK;UACR,IAAIlF,CAAC,EAAE,OAAOgF,MAAM,CAAChF,CAAC,CAAC;UACvB,OAAO+E,OAAO,CAACG,GAAG,CAAC;QACvB,CACJ,CAAC;MACL,CAAC,CAAC;MACF,OAAOP,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMQ,iBAAiBA,CAACb,QAAQ,EAAEE,QAAQ,EAAEC,QAAQ,EAAE;MAClD,MAAME,MAAM,GAAGrE,MAAM,CAACe,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;MACnC,MAAMuD,OAAO,GAAG,MAAMxE,IAAI,CAACC,QAAQ,CAACiE,QAAQ,CAAC;MAC7C,MAAM,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACnC,IAAI,CAACpE,MAAM,CAACwE,uBAAuB,CAC/BT,MAAM,EACNC,OAAO,EACPJ,QAAQ,EACRC,QAAQ,EACR,CAACzE,CAAC,EAAEkF,GAAG,KAAK;UACR,IAAIlF,CAAC,EAAE,OAAOgF,MAAM,CAAChF,CAAC,CAAC;UACvB,OAAO+E,OAAO,CAACG,GAAG,CAAC;QACvB,CACJ,CAAC;MACL,CAAC,CAAC;MACF,OAAOP,MAAM,CAACU,QAAQ,CAAC,CAAC;IAE5B;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,wBAAwBA,CAAChB,QAAQ,EAAEvB,IAAI,EAAE;MAC3C,MAAMwC,SAAS,GAAGjF,MAAM,CAACe,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;MACtC,CAAC,MAAMjB,IAAI,CAACC,QAAQ,CAAC0C,IAAI,CAAC,EAAEyC,IAAI,CAACD,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;MACjD,MAAMX,OAAO,GAAG,MAAMxE,IAAI,CAACC,QAAQ,CAACiE,QAAQ,CAAC;MAC7C,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC,IAAI,CAACpE,MAAM,CAAC6E,8BAA8B,CACtCF,SAAS,EACTX,OAAO,EACP,CAAC5E,CAAC,EAAEkF,GAAG,KAAK;UACR,IAAIlF,CAAC,EAAE,OAAOgF,MAAM,CAAChF,CAAC,CAAC;UACvB,OAAO+E,OAAO,CAACG,GAAG,CAAC;QACvB,CACJ,CAAC;MACL,CAAC,CAAC;IACN;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMQ,8BAA8BA,CAAC3C,IAAI,EAAEyB,QAAQ,EAAEC,QAAQ,EAAE;MAC3D,MAAMc,SAAS,GAAGjF,MAAM,CAACe,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;MACtC,CAAC,MAAMjB,IAAI,CAACC,QAAQ,CAAC0C,IAAI,CAAC,EAAEyC,IAAI,CAACD,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;MACjD,OAAO,IAAI,CAAC3E,MAAM,CAAC8E,8BAA8B,CAC7CH,SAAS,EACTf,QAAQ,EACRC,QACJ,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMkB,iBAAiBA,CAACC,SAAS,EAAEC,SAAS,EAAE;MAC1C,MAAMC,MAAM,GAAGxF,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC/B,IAAI,CAACT,MAAM,CAAC+E,iBAAiB,CAACG,MAAM,EAAEF,SAAS,CAACrE,SAAS,CAAC,CAAC,EAAEsE,SAAS,CAACtE,SAAS,CAAC,CAAC,CAAC;MACnF,OAAO,IAAIrB,eAAe,CACtB,MAAME,IAAI,CAACC,QAAQ,CAACyF,MAAM,CAC9B,CAAC;IACL;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,sBAAsBA,CAACH,SAAS,EAAE;MACpC,MAAMI,GAAG,GAAG1F,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC5B,IAAI,CAACT,MAAM,CAACmF,sBAAsB,CAACC,GAAG,EAAEJ,SAAS,CAACrE,SAAS,CAAC,CAAC,CAAC;MAC9D,OAAOyE,GAAG;IACd;;IAGA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,gBAAgBA,CAAC7E,SAAS,EAAEF,KAAK,EAAEC,GAAG,EAAE;MAC1C,MAAM+E,SAAS,GAAG5F,MAAM,CAACe,KAAK,CAACD,SAAS,CAACE,MAAM,GAAG,EAAE,CAAC;MACrD,IAAI,CAACV,MAAM,CAACuF,qBAAqB,CAC7BD,SAAS,EACT,MAAM9F,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC,EAC9BF,KAAK,EACLC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAO2E,SAAS;IACpB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAME,gBAAgBA,CAAC1E,OAAO,EAAEP,GAAG,EAAE;MACjC,MAAMQ,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC;MAC9B,IAAI,CAACT,MAAM,CAACwF,gBAAgB,CACxBzE,MAAM,EACN,MAAMvB,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BP,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOI,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAM0E,qBAAqBA,CAACrF,UAAU,EAAEE,KAAK,EAAEC,GAAG,EAAE;MAChD,MAAMmF,SAAS,GAAGhG,MAAM,CAACe,KAAK,CAACL,UAAU,CAACM,MAAM,GAAG,EAAE,CAAC;MACtD,IAAI,CAAC,IAAI,CAACV,MAAM,CAAC2F,0BAA0B,CACvCD,SAAS,EACTtF,UAAU,EACVE,KAAK,EACLC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC,EAAE;QACC,MAAM,IAAIpB,WAAW,CAAC,oBAAoB,CAAC;MAC/C;MACA,OAAOmG,SAAS;IACpB;;IAEA;AACJ;AACA;AACA;IACI,MAAME,+CAA+CA,CAACrF,GAAG,EAAE;MACvD,MAAM8B,KAAK,GAAG3C,MAAM,CAACe,KAAK,CAAC,IAAI,CAACoF,gDAAgD,CAAC;MACjF,MAAMC,MAAM,GAAGpG,MAAM,CAACe,KAAK,CAAC,IAAI,CAACsF,iDAAiD,CAAC;MACnF,IAAI,CAAC/F,MAAM,CAACgG,eAAe,CAACF,MAAM,CAAC;MACnC,IAAI,CAAC9F,MAAM,CAAC4F,+CAA+C,CAACvD,KAAK,EAAEyD,MAAM,EAAEvF,GAAG,CAACI,SAAS,CAAC,CAAC,CAAC;MAC3F,OAAO,CAAC0B,KAAK,EAAEyD,MAAM,CAAC;IAC1B;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMG,+CAA+CA,CAACH,MAAM,EAAEvF,GAAG,EAAE;MAC/D,IAAIuF,MAAM,CAACpF,MAAM,KAAK,IAAI,CAACqF,iDAAiD,EAAE;QAC1E,MAAM,IAAIxG,WAAW,mBAAAuC,MAAA,CAAmB,IAAI,CAACiE,iDAAiD,gBAAa,CAAC;MAChH;MACA,MAAM1D,KAAK,GAAG3C,MAAM,CAACe,KAAK,CAAC,IAAI,CAACoF,gDAAgD,CAAC;MACjF,IAAI,CAAC7F,MAAM,CAACiG,+CAA+C,CAAC5D,KAAK,EAAEyD,MAAM,EAAEvF,GAAG,CAACI,SAAS,CAAC,CAAC,CAAC;MAC3F,OAAO0B,KAAK;IAChB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAM6D,0CAA0CA,CAAC7D,KAAK,EAAEvB,OAAO,EAAoB;MAAA,IAAlBqF,EAAE,GAAAnE,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAAA,IAAEwB,GAAG,GAAAxB,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;MAC7E,MAAM5B,UAAU,GAAGV,MAAM,CAACe,KAAK,CAACK,OAAO,CAACJ,MAAM,GAAG,IAAI,CAAC0F,4CAA4C,CAAC;MACnG,IAAI,CAACpG,MAAM,CAACkG,0CAA0C,CAClD7D,KAAK,EACLjC,UAAU,EACV,MAAMZ,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BqF,EAAE,CAACzF,MAAM,GAAG,CAAC,GAAI,MAAMlB,IAAI,CAACC,QAAQ,CAAC0G,EAAE,CAAC,GAAI,IAAI,EAChDzG,MAAM,CAAC2G,IAAI,CAAC,CAAC7C,GAAG,CAAC,CACrB,CAAC;MACD,OAAOpD,UAAU;IACrB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAMkG,0CAA0CA,CAACjE,KAAK,EAAEjC,UAAU,EAAoB;MAAA,IAAlB+F,EAAE,GAAAnE,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MAAA,IAAEwB,GAAG,GAAAxB,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;MAChF,IAAI5B,UAAU,CAACM,MAAM,GAAG,IAAI,CAAC0F,4CAA4C,EAAE;QACvE,MAAM,IAAI7G,WAAW,CAAC,yBAAyB,CAAC;MACpD;MACA,MAAMiB,SAAS,GAAGd,MAAM,CAACe,KAAK,CAACL,UAAU,CAACM,MAAM,GAAG,IAAI,CAAC0F,4CAA4C,CAAC;MACrG,IAAI,CAACpG,MAAM,CAACsG,0CAA0C,CAClDjE,KAAK,EACL7B,SAAS,EACTd,MAAM,CAAC2G,IAAI,CAAC,CAAC7C,GAAG,CAAC,CAAC,EAClBpD,UAAU,EACV+F,EAAE,CAACzF,MAAM,GAAG,CAAC,GAAI,MAAMlB,IAAI,CAACC,QAAQ,CAAC0G,EAAE,CAAC,GAAI,IAChD,CAAC;MACD,OAAO3F,SAAS;IACpB;;IAEA;AACJ;AACA;AACA;IACI,MAAM+F,2CAA2CA,CAAClE,KAAK,EAAE;MACrD,IAAI,CAACrC,MAAM,CAACuG,2CAA2C,CAAClE,KAAK,CAAC;IAClE;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMmE,WAAWA,CAAC1F,OAAO,EAAEkE,SAAS,EAAE;MAClC,MAAMyB,MAAM,GAAG/G,MAAM,CAACe,KAAK,CAACK,OAAO,CAACJ,MAAM,GAAG,EAAE,CAAC;MAChD,IAAI,CAACV,MAAM,CAACwG,WAAW,CAACC,MAAM,EAAE,MAAMjH,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAAEkE,SAAS,CAACrE,SAAS,CAAC,CAAC,CAAC;MACpF,OAAO8F,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,gBAAgBA,CAACC,aAAa,EAAE1B,SAAS,EAAE;MAC7C,MAAM2B,QAAQ,GAAGlH,MAAM,CAACe,KAAK,CAACkG,aAAa,CAACjG,MAAM,GAAG,EAAE,CAAC;MACxD,IAAI,CAACV,MAAM,CAAC0G,gBAAgB,CAACE,QAAQ,EAAE,MAAMpH,IAAI,CAACC,QAAQ,CAACkH,aAAa,CAAC,EAAE1B,SAAS,CAACtE,SAAS,CAAC,CAAC,CAAC;MACjG,OAAOiG,QAAQ;IACnB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,oBAAoBA,CAAC/F,OAAO,EAAEkE,SAAS,EAAE;MAC3C,MAAM8B,SAAS,GAAGpH,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAClC,IAAI,CAACT,MAAM,CAAC6G,oBAAoB,CAACC,SAAS,EAAE,MAAMtH,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAAEkE,SAAS,CAACrE,SAAS,CAAC,CAAC,CAAC;MAChG,OAAOmG,SAAS;IACpB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,2BAA2BA,CAACjG,OAAO,EAAEmE,SAAS,EAAE6B,SAAS,EAAE;MAC7D,OAAO,IAAI,CAAC9G,MAAM,CAAC+G,2BAA2B,CAC1CD,SAAS,EACT,MAAMtH,IAAI,CAACC,QAAQ,CAACqB,OAAO,CAAC,EAC5BmE,SAAS,CAACtE,SAAS,CAAC,CACxB,CAAC;IACL;;IAEA;AACJ;AACA;IACI,MAAMqG,mBAAmBA,CAAA,EAAG;MACxB,MAAMpF,EAAE,GAAGlC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,MAAMoB,EAAE,GAAGnC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,IAAI,CAACT,MAAM,CAACgH,mBAAmB,CAACnF,EAAE,EAAED,EAAE,CAAC;MACvC,OAAO,IAAItC,eAAe,CACtBI,MAAM,CAACoC,MAAM,CAAC,CAACF,EAAE,EAAEC,EAAE,CAAC,CAC1B,CAAC;IACL;;IAEA;AACJ;AACA;AACA;IACI,MAAMoF,wBAAwBA,CAACC,IAAI,EAAE;MACjC,MAAMtF,EAAE,GAAGlC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,MAAMoB,EAAE,GAAGnC,MAAM,CAACe,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;MAC9B,IAAI,CAACT,MAAM,CAACiH,wBAAwB,CAACpF,EAAE,EAAED,EAAE,EAAEsF,IAAI,CAAC;MAClD,OAAO,IAAI5H,eAAe,CACtBI,MAAM,CAACoC,MAAM,CAAC,CAACF,EAAE,EAAEC,EAAE,CAAC,CAC1B,CAAC;IACL;;IAEA;AACJ;AACA;AACA;IACI,MAAMsF,oCAAoCA,CAAChG,EAAE,EAAE;MAC3C,MAAMiG,GAAG,GAAG1H,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC5B,IAAI,CAACT,MAAM,CAACmH,oCAAoC,CAACC,GAAG,EAAEjG,EAAE,CAACR,SAAS,CAAC,CAAC,CAAC;MACrE,OAAOyG,GAAG;IACd;;IAEA;AACJ;AACA;AACA;IACI,MAAMC,oCAAoCA,CAACjG,EAAE,EAAE;MAC3C,MAAMkG,GAAG,GAAG5H,MAAM,CAACe,KAAK,CAAC,EAAE,CAAC;MAC5B,IAAI,CAACT,MAAM,CAACqH,oCAAoC,CAACC,GAAG,EAAElG,EAAE,CAACT,SAAS,CAAC,CAAC,CAAC;MACrE,OAAO2G,GAAG;IACd;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMC,aAAaA,CAAC7G,MAAM,EAAEJ,KAAK,EAAEC,GAAG,EAAE;MACpC,MAAMQ,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAACC,MAAM,CAAC;MACnC,IAAI,CAACV,MAAM,CAACuH,aAAa,CACrBxG,MAAM,EACN,MAAMvB,IAAI,CAACC,QAAQ,CAACa,KAAK,CAAC,EAC1BC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOI,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMyG,iBAAiBA,CAAChH,SAAS,EAAEF,KAAK,EAAEC,GAAG,EAAE;MAC3C,MAAMQ,MAAM,GAAGrB,MAAM,CAACe,KAAK,CAACD,SAAS,CAACE,MAAM,CAAC;MAC7C,IAAI,CAACV,MAAM,CAACwH,iBAAiB,CACzBzG,MAAM,EACN,MAAMvB,IAAI,CAACC,QAAQ,CAACe,SAAS,CAAC,EAC9B,MAAMhB,IAAI,CAACC,QAAQ,CAACa,KAAK,CAAC,EAC1BC,GAAG,CAACI,SAAS,CAAC,CAClB,CAAC;MACD,OAAOI,MAAM;IACjB;;IAEA;AACJ;AACA;AACA;IACI,MAAMiF,eAAeA,CAACyB,MAAM,EAAE;MAC1B,IAAIrC,GAAG,GAAG1F,MAAM,CAACe,KAAK,CAACgH,MAAM,CAAC;MAC9B,IAAI,CAACzH,MAAM,CAACgG,eAAe,CAACZ,GAAG,CAAC;MAChC,OAAOA,GAAG;IACd;;IAEA;AACJ;AACA;AACA;IACI,MAAMsC,mBAAmBA,CAACC,UAAU,EAAE;MAClC,OAAO,IAAI,CAAC3H,MAAM,CAAC0H,mBAAmB,CAACC,UAAU,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,UAAUA,CAACC,GAAG,EAAEC,IAAI,EAAE;MACxB,MAAM1C,GAAG,GAAG,MAAM5F,IAAI,CAACuI,WAAW,CAACF,GAAG,CAAC;MACvC,IAAI,CAAC7H,MAAM,CAAC4H,UAAU,CAACxC,GAAG,EAAE0C,IAAI,CAAC;MACjC,OAAO1C,GAAG;IACd;;IAEA;AACJ;AACA;AACA;IACI,MAAM4C,cAAcA,CAACC,KAAK,EAAE;MACxB,IAAIC,GAAG,GAAG,EAAE;QAAEC,CAAC;QAAEC,CAAC;QAAEC,CAAC;MACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACvH,MAAM,EAAE4H,CAAC,EAAE,EAAE;QACnCF,CAAC,GAAGH,KAAK,CAACK,CAAC,CAAC,GAAG,GAAG;QAClBH,CAAC,GAAGF,KAAK,CAACK,CAAC,CAAC,KAAK,CAAC;QAClBD,CAAC,GACK,EAAE,GAAGD,CAAC,IAAMA,CAAC,GAAG,EAAE,IAAK,CAAC,GAAI,CAAC,EAAE,CAAC,IAAK,CAAC,GACvC,EAAE,GAAGD,CAAC,IAAMA,CAAC,GAAG,EAAE,IAAK,CAAC,GAAI,CAAC,EAAE,CAAE;QACtCD,GAAG,IAAIK,MAAM,CAACC,YAAY,CAACH,CAAC,GAAG,IAAI,CAAC,GAAGE,MAAM,CAACC,YAAY,CAACH,CAAC,KAAK,CAAC,CAAC;MACvE;MACA,OAAOH,GAAG;IACd;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMO,cAAcA,CAACC,EAAE,EAAEC,EAAE,EAAE;MACzB,OAAO,IAAI,CAAC3I,MAAM,CAACyI,cAAc,CAACC,EAAE,EAAEC,EAAE,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,cAAcA,CAACC,GAAG,EAAiB;MAAA,IAAfC,MAAM,GAAA9G,SAAA,CAAAtB,MAAA,QAAAsB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,IAAI;MACnC,IAAI+G,OAAO,GAAG,CAAC;QACXC,OAAO,GAAG,CAAC;QACXZ,CAAC,GAAG,CAAC;QACLa,KAAK,GAAG,CAAC;QACTC,QAAQ,GAAG,CAAC;QACZC,OAAO,GAAG,CAAC;QACXC,MAAM,GAAG,CAAC;QACVC,KAAK,GAAG,CAAC;QACTC,KAAK,GAAG,CAAC;QACTjH,KAAK,GAAG,CAAC;MACb,MAAMkH,GAAG,GAAG7J,MAAM,CAACe,KAAK,CAACoI,GAAG,CAACnI,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC;MAE5C,OAAOsI,OAAO,GAAGH,GAAG,CAACnI,MAAM,EAAE;QACzB0H,CAAC,GAAGS,GAAG,CAACW,UAAU,CAACR,OAAO,CAAC;QAC3BK,KAAK,GAAGjB,CAAC,GAAG,EAAE;QACdgB,MAAM,GAAIC,KAAK,GAAG,EAAE,IAAK,CAAC;QAC1BF,OAAO,GAAG,CAACf,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE;QACxBc,QAAQ,GAAG,CAAEC,OAAO,GAAG,EAAE,GAAKA,OAAO,GAAG,EAAG,KAAK,CAAC;QACjD,IAAI,CAACC,MAAM,GAAGF,QAAQ,MAAM,CAAC,EAAE;UAC3B,IAAIJ,MAAM,IAAIzG,KAAK,KAAK,CAAC,IAAIyG,MAAM,CAACW,OAAO,CAACrB,CAAC,CAAC,IAAI,CAAC,EAAE;YACjDY,OAAO,EAAE;YACT;UACJ;UACA;QACJ;QACAM,KAAK,GAAIF,MAAM,GAAGC,KAAK,GAAKH,QAAQ,GAAGC,OAAQ;QAC/C,IAAI9G,KAAK,KAAK,CAAC,EAAE;UACb4G,KAAK,GAAGK,KAAK,GAAG,EAAE;QACtB,CAAC,MAAM;UACHC,GAAG,CAACR,OAAO,EAAE,CAAC,GAAGE,KAAK,GAAGK,KAAK;QAClC;QACAjH,KAAK,GAAG,CAACA,KAAK;QACd2G,OAAO,EAAE;MACb;MACA,OAAOO,GAAG;IACd;;IAEA;AACJ;AACA;AACA;IACI,MAAMG,gBAAgBA,CAACtE,GAAG,EAAE;MACxB,OAAO,IAAI,CAACpF,MAAM,CAAC0J,gBAAgB,CAACtE,GAAG,CAAC;IAC5C;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMuE,cAAcA,CAACvE,GAAG,EAAEwE,GAAG,EAAE;MAC3B,OAAO,IAAI,CAAC5J,MAAM,CAAC2J,cAAc,CAACvE,GAAG,EAAEwE,GAAG,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,aAAaA,CAACnB,EAAE,EAAEC,EAAE,EAAE;MACxB,OAAO,IAAI,CAAC3I,MAAM,CAAC6J,aAAa,CAACnB,EAAE,EAAEC,EAAE,CAAC;IAC5C;;IAEA;AACJ;AACA;AACA;IACI,MAAMmB,cAAcA,CAAC1E,GAAG,EAAE;MACtB,IAAI,CAACpF,MAAM,CAAC8J,cAAc,CAAC1E,GAAG,CAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAM2E,UAAUA,CAAC3E,GAAG,EAAE4E,SAAS,EAAE;MAC7B5E,GAAG,GAAG,MAAM5F,IAAI,CAACC,QAAQ,CAAC2F,GAAG,CAAC;MAC9B,IAAI1E,MAAM,GAAG0E,GAAG,CAAC1E,MAAM,GAAI0E,GAAG,CAAC1E,MAAM,GAAGsJ,SAAU;MAClD,IAAItJ,MAAM,GAAGsJ,SAAS,EAAE;QACpBtJ,MAAM,IAAIsJ,SAAS;MACvB;MACA,MAAMC,MAAM,GAAGvK,MAAM,CAACe,KAAK,CAACC,MAAM,GAAG,GAAG,CAAC;MACzC0E,GAAG,CAACR,IAAI,CAACqF,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MACtB,MAAMC,OAAO,GAAG,IAAI,CAAClK,MAAM,CAAC+J,UAAU,CAACE,MAAM,EAAE7E,GAAG,CAAC1E,MAAM,EAAEsJ,SAAS,CAAC;MACrE,OAAOC,MAAM,CAACE,KAAK,CAAC,CAAC,EAAED,OAAO,CAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAME,YAAYA,CAAChF,GAAG,EAAE4E,SAAS,EAAE;MAC/B,MAAMK,MAAM,GAAG,IAAI,CAACrK,MAAM,CAACoK,YAAY,CAAChF,GAAG,EAAEA,GAAG,CAAC1E,MAAM,EAAEsJ,SAAS,CAAC;MACnE,OAAO5E,GAAG,CAAC+E,KAAK,CAAC,CAAC,EAAEE,MAAM,CAAC;IAC/B;EACJ,CAAC;AAAC,EAAAC,IAAA,OAAA3K,MAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"385cb9bcd830e3192991140fcf42defabf62bc8e"}
