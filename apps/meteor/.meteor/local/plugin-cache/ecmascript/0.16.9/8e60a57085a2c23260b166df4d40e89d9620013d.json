{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"}},"code":"!function (module1) {\n  var _regeneratorRuntime;\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n  var _inheritsLoose;\n  module1.link(\"@babel/runtime/helpers/inheritsLoose\", {\n    default: function (v) {\n      _inheritsLoose = v;\n    }\n  }, 1);\n  var _sodium = require('libsodium-wrappers');\n  var Backend = require('../backend');\n  var CryptographyKey = require('../cryptography-key');\n  var Polyfill = require('../polyfill');\n  var Util = require('../util');\n  var SodiumError = require('../sodium-error');\n  var toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n  if (typeof Buffer === 'undefined') {\n    var _Buffer = require('buffer/').Buffer;\n  }\n\n  /* istanbul ignore next */\n  module.exports = /*#__PURE__*/function (_Backend) {\n    function LibsodiumWrappersBackend(lib) {\n      var _this;\n      _this = _Backend.call(this, lib) || this;\n      _this.sodium = lib;\n      _this.backendName = 'LibsodiumWrappersBackend';\n      return _this;\n    }\n    _inheritsLoose(LibsodiumWrappersBackend, _Backend);\n    LibsodiumWrappersBackend.init = function () {\n      function init() {\n        return _regeneratorRuntime.async(function () {\n          function init$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(_sodium.ready);\n              case 2:\n                return _context.abrupt(\"return\", new LibsodiumWrappersBackend(_sodium));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return init$;\n        }(), null, null, null, Promise);\n      }\n      return init;\n    }()\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    var _proto = LibsodiumWrappersBackend.prototype;\n    _proto.crypto_aead_xchacha20poly1305_ietf_decrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_decrypt$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(null, ciphertext, assocData, nonce, key.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_decrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_decrypt;\n    }()\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_aead_xchacha20poly1305_ietf_encrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_encrypt$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, null, nonce, key.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_encrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_encrypt;\n    }()\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    ;\n    _proto.crypto_auth = function () {\n      function crypto_auth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", toBuffer(this.sodium.crypto_auth(message, key.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n          return crypto_auth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth;\n    }()\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_auth_verify = function () {\n      function crypto_auth_verify(mac, message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth_verify$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.sodium.crypto_auth_verify(mac, message, key.getBuffer()));\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n          return crypto_auth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth_verify;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n    _proto.crypto_box = function () {\n      function crypto_box(plaintext, nonce, sk, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.t0 = Util;\n                _context6.t1 = _regeneratorRuntime;\n                _context6.t2 = this.sodium;\n                _context6.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context6.t3 = _context6.sent;\n                _context6.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 8:\n                _context6.t4 = _context6.sent;\n                _context6.t5 = pk.getBuffer();\n                _context6.t6 = sk.getBuffer();\n                _context6.t7 = _context6.t2.crypto_box_easy.call(_context6.t2, _context6.t3, _context6.t4, _context6.t5, _context6.t6);\n                _context6.next = 14;\n                return _context6.t1.awrap.call(_context6.t1, _context6.t7);\n              case 14:\n                _context6.t8 = _context6.sent;\n                return _context6.abrupt(\"return\", _context6.t0.toBuffer.call(_context6.t0, _context6.t8));\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n          return crypto_box$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_open = function () {\n      function crypto_box_open(ciphertext, nonce, sk, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_open$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.t0 = Util;\n                _context7.t1 = _regeneratorRuntime;\n                _context7.t2 = this.sodium;\n                _context7.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 5:\n                _context7.t3 = _context7.sent;\n                _context7.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 8:\n                _context7.t4 = _context7.sent;\n                _context7.t5 = pk.getBuffer();\n                _context7.t6 = sk.getBuffer();\n                _context7.t7 = _context7.t2.crypto_box_open_easy.call(_context7.t2, _context7.t3, _context7.t4, _context7.t5, _context7.t6);\n                _context7.next = 14;\n                return _context7.t1.awrap.call(_context7.t1, _context7.t7);\n              case 14:\n                _context7.t8 = _context7.sent;\n                return _context7.abrupt(\"return\", _context7.t0.toBuffer.call(_context7.t0, _context7.t8));\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n          return crypto_box_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_open;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n    _proto.crypto_box_seal = function () {\n      function crypto_box_seal(plaintext, pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.t0 = Util;\n                _context8.t1 = _regeneratorRuntime;\n                _context8.t2 = this.sodium;\n                _context8.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context8.t3 = _context8.sent;\n                _context8.t4 = pk.getBuffer();\n                _context8.t5 = _context8.t2.crypto_box_seal.call(_context8.t2, _context8.t3, _context8.t4);\n                _context8.next = 10;\n                return _context8.t1.awrap.call(_context8.t1, _context8.t5);\n              case 10:\n                _context8.t6 = _context8.sent;\n                return _context8.abrupt(\"return\", _context8.t0.toBuffer.call(_context8.t0, _context8.t6));\n              case 12:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n          return crypto_box_seal$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_seal_open = function () {\n      function crypto_box_seal_open(ciphertext, pk, sk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal_open$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.t0 = Util;\n                _context9.t1 = _regeneratorRuntime;\n                _context9.t2 = this.sodium;\n                _context9.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 5:\n                _context9.t3 = _context9.sent;\n                _context9.t4 = pk.getBuffer();\n                _context9.t5 = sk.getBuffer();\n                _context9.t6 = _context9.t2.crypto_box_seal_open.call(_context9.t2, _context9.t3, _context9.t4, _context9.t5);\n                _context9.next = 11;\n                return _context9.t1.awrap.call(_context9.t1, _context9.t6);\n              case 11:\n                _context9.t7 = _context9.sent;\n                return _context9.abrupt(\"return\", _context9.t0.toBuffer.call(_context9.t0, _context9.t7));\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n          return crypto_box_seal_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal_open;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_box_keypair = function () {\n      function crypto_box_keypair() {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_keypair$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                obj = this.sodium.crypto_box_keypair();\n                _context10.t0 = CryptographyKey;\n                _context10.t1 = Buffer;\n                _context10.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n              case 5:\n                _context10.t2 = _context10.sent;\n                _context10.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n              case 8:\n                _context10.t3 = _context10.sent;\n                _context10.t4 = [_context10.t2, _context10.t3];\n                _context10.t5 = _context10.t1.concat.call(_context10.t1, _context10.t4);\n                return _context10.abrupt(\"return\", new _context10.t0(_context10.t5));\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n          return crypto_box_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_keypair;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash = function () {\n      function crypto_generichash(message) {\n        var key,\n          outputLength,\n          _args11 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash$(_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                key = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n                outputLength = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : 32;\n                if (!key) {\n                  _context11.next = 12;\n                  break;\n                }\n                _context11.t0 = Util;\n                _context11.t1 = this.sodium;\n                _context11.t2 = outputLength;\n                _context11.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 8:\n                _context11.t3 = _context11.sent;\n                _context11.t4 = key.getBuffer();\n                _context11.t5 = _context11.t1.crypto_generichash.call(_context11.t1, _context11.t2, _context11.t3, _context11.t4);\n                return _context11.abrupt(\"return\", _context11.t0.toBuffer.call(_context11.t0, _context11.t5));\n              case 12:\n                _context11.t6 = Util;\n                _context11.t7 = this.sodium;\n                _context11.t8 = outputLength;\n                _context11.next = 17;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 17:\n                _context11.t9 = _context11.sent;\n                _context11.t10 = _context11.t7.crypto_generichash.call(_context11.t7, _context11.t8, _context11.t9);\n                return _context11.abrupt(\"return\", _context11.t6.toBuffer.call(_context11.t6, _context11.t10));\n              case 20:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n          return crypto_generichash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash;\n    }()\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_init = function () {\n      function crypto_generichash_init() {\n        var key,\n          outputLength,\n          _args12 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_init$(_context12) {\n            while (1) switch (_context12.prev = _context12.next) {\n              case 0:\n                key = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : null;\n                outputLength = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : 32;\n                if (!key) {\n                  _context12.next = 4;\n                  break;\n                }\n                return _context12.abrupt(\"return\", this.sodium.crypto_generichash_init(key.getBuffer(), outputLength));\n              case 4:\n                return _context12.abrupt(\"return\", this.sodium.crypto_generichash_init(null, outputLength));\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n          return crypto_generichash_init$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_init;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    ;\n    _proto.crypto_generichash_update = function () {\n      function crypto_generichash_update(state, message) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_update$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.t0 = this.sodium;\n                _context13.t1 = state;\n                _context13.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context13.t2 = _context13.sent;\n                return _context13.abrupt(\"return\", _context13.t0.crypto_generichash_update.call(_context13.t0, _context13.t1, _context13.t2));\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n          return crypto_generichash_update$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_update;\n    }()\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_final = function () {\n      function crypto_generichash_final(state) {\n        var outputLength,\n          _args14 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_final$(_context14) {\n            while (1) switch (_context14.prev = _context14.next) {\n              case 0:\n                outputLength = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 32;\n                return _context14.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_generichash_final(state, outputLength)));\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n          return crypto_generichash_final$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_final;\n    }()\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_client_session_keys = function () {\n      function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        var gen;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_client_session_keys$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                gen = this.sodium.crypto_kx_client_session_keys(clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n                _context15.t0 = CryptographyKey;\n                _context15.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedRx));\n              case 4:\n                _context15.t1 = _context15.sent;\n                _context15.t2 = new _context15.t0(_context15.t1);\n                _context15.t3 = CryptographyKey;\n                _context15.next = 9;\n                return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedTx));\n              case 9:\n                _context15.t4 = _context15.sent;\n                _context15.t5 = new _context15.t3(_context15.t4);\n                return _context15.abrupt(\"return\", [_context15.t2, _context15.t5]);\n              case 12:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n          return crypto_kx_client_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_client_session_keys;\n    }()\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_server_session_keys = function () {\n      function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        var gen;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_server_session_keys$(_context16) {\n            while (1) switch (_context16.prev = _context16.next) {\n              case 0:\n                gen = this.sodium.crypto_kx_server_session_keys(serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n                _context16.t0 = CryptographyKey;\n                _context16.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedRx));\n              case 4:\n                _context16.t1 = _context16.sent;\n                _context16.t2 = new _context16.t0(_context16.t1);\n                _context16.t3 = CryptographyKey;\n                _context16.next = 9;\n                return _regeneratorRuntime.awrap(Util.toBuffer(gen.sharedTx));\n              case 9:\n                _context16.t4 = _context16.sent;\n                _context16.t5 = new _context16.t3(_context16.t4);\n                return _context16.abrupt(\"return\", [_context16.t2, _context16.t5]);\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n          return crypto_kx_server_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_server_session_keys;\n    }()\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kdf_derive_from_key = function () {\n      function crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kdf_derive_from_key$(_context17) {\n            while (1) switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.t0 = CryptographyKey;\n                _context17.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(this.sodium.crypto_kdf_derive_from_key(length, subKeyId | 0, context, key.getBuffer())));\n              case 3:\n                _context17.t1 = _context17.sent;\n                return _context17.abrupt(\"return\", new _context17.t0(_context17.t1));\n              case 5:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n          return crypto_kdf_derive_from_key$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kdf_derive_from_key;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_onetimeauth = function () {\n      function crypto_onetimeauth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth$(_context18) {\n            while (1) switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(typeof this.sodium.crypto_onetimeauth === 'undefined')) {\n                  _context18.next = 7;\n                  break;\n                }\n                _context18.t0 = Polyfill;\n                _context18.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context18.t1 = _context18.sent;\n                _context18.t2 = key;\n                return _context18.abrupt(\"return\", _context18.t0.crypto_onetimeauth.call(_context18.t0, _context18.t1, _context18.t2));\n              case 7:\n                _context18.t3 = this.sodium;\n                _context18.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 10:\n                _context18.t4 = _context18.sent;\n                _context18.t5 = key.getBuffer();\n                return _context18.abrupt(\"return\", _context18.t3.crypto_onetimeauth.call(_context18.t3, _context18.t4, _context18.t5));\n              case 13:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n          return crypto_onetimeauth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_onetimeauth_verify = function () {\n      function crypto_onetimeauth_verify(message, key, tag) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_verify$(_context19) {\n            while (1) switch (_context19.prev = _context19.next) {\n              case 0:\n                if (!(typeof this.sodium.crypto_onetimeauth_verify === 'undefined')) {\n                  _context19.next = 8;\n                  break;\n                }\n                _context19.t0 = Polyfill;\n                _context19.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context19.t1 = _context19.sent;\n                _context19.t2 = key;\n                _context19.t3 = tag;\n                return _context19.abrupt(\"return\", _context19.t0.crypto_onetimeauth_verify.call(_context19.t0, _context19.t1, _context19.t2, _context19.t3));\n              case 8:\n                _context19.t4 = this.sodium;\n                _context19.t5 = tag;\n                _context19.next = 12;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 12:\n                _context19.t6 = _context19.sent;\n                _context19.t7 = key.getBuffer();\n                return _context19.abrupt(\"return\", _context19.t4.crypto_onetimeauth_verify.call(_context19.t4, _context19.t5, _context19.t6, _context19.t7));\n              case 15:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n          return crypto_onetimeauth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth_verify;\n    }()\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_pwhash = function () {\n      function crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.t0 = Util;\n                _context20.t1 = this.sodium;\n                _context20.t2 = length;\n                _context20.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 5:\n                _context20.t3 = _context20.sent;\n                _context20.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(salt));\n              case 8:\n                _context20.t4 = _context20.sent;\n                _context20.t5 = opslimit;\n                _context20.t6 = memlimit;\n                _context20.t7 = algorithm;\n                _context20.t8 = _context20.t1.crypto_pwhash.call(_context20.t1, _context20.t2, _context20.t3, _context20.t4, _context20.t5, _context20.t6, _context20.t7);\n                return _context20.abrupt(\"return\", _context20.t0.toBuffer.call(_context20.t0, _context20.t8));\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n          return crypto_pwhash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.crypto_pwhash_str = function () {\n      function crypto_pwhash_str(password, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str$(_context21) {\n            while (1) switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.t0 = _regeneratorRuntime;\n                _context21.t1 = Util;\n                _context21.t2 = this.sodium;\n                _context21.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 5:\n                _context21.t3 = _context21.sent;\n                _context21.t4 = opslimit;\n                _context21.t5 = memlimit;\n                _context21.t6 = _context21.t2.crypto_pwhash_str.call(_context21.t2, _context21.t3, _context21.t4, _context21.t5);\n                _context21.t7 = _context21.t1.toBuffer.call(_context21.t1, _context21.t6);\n                _context21.next = 12;\n                return _context21.t0.awrap.call(_context21.t0, _context21.t7);\n              case 12:\n                return _context21.abrupt(\"return\", _context21.sent.toString('utf-8'));\n              case 13:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n          return crypto_pwhash_str$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_verify = function () {\n      function crypto_pwhash_str_verify(password, hash) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_verify$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.t0 = this.sodium;\n                _context22.t1 = hash.toString('utf-8');\n                _context22.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 4:\n                _context22.t2 = _context22.sent;\n                return _context22.abrupt(\"return\", _context22.t0.crypto_pwhash_str_verify.call(_context22.t0, _context22.t1, _context22.t2));\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n          return crypto_pwhash_str_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str_verify;\n    }()\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_needs_rehash = function () {\n      function crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_needs_rehash$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(typeof this.sodium.crypto_pwhash_str_needs_rehash !== 'function')) {\n                  _context23.next = 4;\n                  break;\n                }\n                _context23.next = 3;\n                return _regeneratorRuntime.awrap(Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit));\n              case 3:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 4:\n                return _context23.abrupt(\"return\", this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit));\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n          return crypto_pwhash_str_needs_rehash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str_needs_rehash;\n    }()\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_scalarmult = function () {\n      function crypto_scalarmult(secretKey, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult$(_context24) {\n            while (1) switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.t0 = CryptographyKey;\n                _context24.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())));\n              case 3:\n                _context24.t1 = _context24.sent;\n                return _context24.abrupt(\"return\", new _context24.t0(_context24.t1));\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n          return crypto_scalarmult$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox = function () {\n      function crypto_secretbox(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox$(_context25) {\n            while (1) switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.t0 = Util;\n                _context25.t1 = this.sodium;\n                _context25.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 4:\n                _context25.t2 = _context25.sent;\n                _context25.t3 = nonce;\n                _context25.t4 = key.getBuffer();\n                _context25.t5 = _context25.t1.crypto_secretbox_easy.call(_context25.t1, _context25.t2, _context25.t3, _context25.t4);\n                return _context25.abrupt(\"return\", _context25.t0.toBuffer.call(_context25.t0, _context25.t5));\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n          return crypto_secretbox$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox_open = function () {\n      function crypto_secretbox_open(ciphertext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox_open$(_context26) {\n            while (1) switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.t0 = Util;\n                _context26.t1 = this.sodium;\n                _context26.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 4:\n                _context26.t2 = _context26.sent;\n                _context26.t3 = nonce;\n                _context26.t4 = key.getBuffer();\n                _context26.t5 = _context26.t1.crypto_secretbox_open_easy.call(_context26.t1, _context26.t2, _context26.t3, _context26.t4);\n                return _context26.abrupt(\"return\", _context26.t0.toBuffer.call(_context26.t0, _context26.t5));\n              case 9:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n          return crypto_secretbox_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox_open;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_shorthash = function () {\n      function crypto_shorthash(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_shorthash$(_context27) {\n            while (1) switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.t0 = Util;\n                _context27.t1 = this.sodium;\n                _context27.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context27.t2 = _context27.sent;\n                _context27.t3 = key.getBuffer();\n                _context27.t4 = _context27.t1.crypto_shorthash.call(_context27.t1, _context27.t2, _context27.t3);\n                return _context27.abrupt(\"return\", _context27.t0.toBuffer.call(_context27.t0, _context27.t4));\n              case 8:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n          return crypto_shorthash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_shorthash;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign = function () {\n      function crypto_sign(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign$(_context28) {\n            while (1) switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.t0 = Util;\n                _context28.t1 = this.sodium;\n                _context28.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context28.t2 = _context28.sent;\n                _context28.t3 = secretKey.getBuffer();\n                _context28.t4 = _context28.t1.crypto_sign.call(_context28.t1, _context28.t2, _context28.t3);\n                return _context28.abrupt(\"return\", _context28.t0.toBuffer.call(_context28.t0, _context28.t4));\n              case 8:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n          return crypto_sign$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_open = function () {\n      function crypto_sign_open(message, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_open$(_context29) {\n            while (1) switch (_context29.prev = _context29.next) {\n              case 0:\n                return _context29.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_open(message, publicKey.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n          return crypto_sign_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_open;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_detached = function () {\n      function crypto_sign_detached(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_detached$(_context30) {\n            while (1) switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.t0 = Util;\n                _context30.t1 = this.sodium;\n                _context30.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context30.t2 = _context30.sent;\n                _context30.t3 = secretKey.getBuffer();\n                _context30.t4 = _context30.t1.crypto_sign_detached.call(_context30.t1, _context30.t2, _context30.t3);\n                return _context30.abrupt(\"return\", _context30.t0.toBuffer.call(_context30.t0, _context30.t4));\n              case 8:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n          return crypto_sign_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_detached;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_verify_detached = function () {\n      function crypto_sign_verify_detached(message, publicKey, signature) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_verify_detached$(_context31) {\n            while (1) switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.t0 = this.sodium;\n                _context31.t1 = signature;\n                _context31.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context31.t2 = _context31.sent;\n                _context31.t3 = publicKey.getBuffer();\n                return _context31.abrupt(\"return\", _context31.t0.crypto_sign_verify_detached.call(_context31.t0, _context31.t1, _context31.t2, _context31.t3));\n              case 7:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n          return crypto_sign_verify_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_verify_detached;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_keypair = function () {\n      function crypto_sign_keypair() {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_keypair$(_context32) {\n            while (1) switch (_context32.prev = _context32.next) {\n              case 0:\n                obj = this.sodium.crypto_sign_keypair();\n                _context32.t0 = CryptographyKey;\n                _context32.t1 = Buffer;\n                _context32.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n              case 5:\n                _context32.t2 = _context32.sent;\n                _context32.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n              case 8:\n                _context32.t3 = _context32.sent;\n                _context32.t4 = [_context32.t2, _context32.t3];\n                _context32.t5 = _context32.t1.concat.call(_context32.t1, _context32.t4);\n                return _context32.abrupt(\"return\", new _context32.t0(_context32.t5));\n              case 12:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n          return crypto_sign_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_keypair;\n    }()\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_seed_keypair = function () {\n      function crypto_sign_seed_keypair(seed) {\n        var obj;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_seed_keypair$(_context33) {\n            while (1) switch (_context33.prev = _context33.next) {\n              case 0:\n                obj = this.sodium.crypto_sign_seed_keypair(seed);\n                _context33.t0 = CryptographyKey;\n                _context33.t1 = Buffer;\n                _context33.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.privateKey));\n              case 5:\n                _context33.t2 = _context33.sent;\n                _context33.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(obj.publicKey));\n              case 8:\n                _context33.t3 = _context33.sent;\n                _context33.t4 = [_context33.t2, _context33.t3];\n                _context33.t5 = _context33.t1.concat.call(_context33.t1, _context33.t4);\n                return _context33.abrupt(\"return\", new _context33.t0(_context33.t5));\n              case 12:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n          return crypto_sign_seed_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_seed_keypair;\n    }()\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_sk_to_curve25519 = function () {\n      function crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_sk_to_curve25519$(_context34) {\n            while (1) switch (_context34.prev = _context34.next) {\n              case 0:\n                return _context34.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n          return crypto_sign_ed25519_sk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_sk_to_curve25519;\n    }()\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_pk_to_curve25519 = function () {\n      function crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_pk_to_curve25519$(_context35) {\n            while (1) switch (_context35.prev = _context35.next) {\n              case 0:\n                return _context35.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n          return crypto_sign_ed25519_pk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_pk_to_curve25519;\n    }()\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream = function () {\n      function crypto_stream(length, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream$(_context36) {\n            while (1) switch (_context36.prev = _context36.next) {\n              case 0:\n                if (!(typeof this.sodium.crypto_stream_xor === 'undefined')) {\n                  _context36.next = 8;\n                  break;\n                }\n                _context36.t0 = Polyfill;\n                _context36.t1 = Buffer.alloc(length, 0);\n                _context36.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 5:\n                _context36.t2 = _context36.sent;\n                _context36.t3 = key;\n                return _context36.abrupt(\"return\", _context36.t0.crypto_stream_xor.call(_context36.t0, _context36.t1, _context36.t2, _context36.t3));\n              case 8:\n                _context36.t4 = this.sodium;\n                _context36.t5 = length;\n                _context36.next = 12;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 12:\n                _context36.t6 = _context36.sent;\n                _context36.t7 = key.getBuffer();\n                return _context36.abrupt(\"return\", _context36.t4.crypto_stream.call(_context36.t4, _context36.t5, _context36.t6, _context36.t7));\n              case 15:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n          return crypto_stream$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream_xor = function () {\n      function crypto_stream_xor(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_xor$(_context37) {\n            while (1) switch (_context37.prev = _context37.next) {\n              case 0:\n                if (!(typeof this.sodium.crypto_stream_xor === 'undefined')) {\n                  _context37.next = 10;\n                  break;\n                }\n                _context37.t0 = Polyfill;\n                _context37.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 4:\n                _context37.t1 = _context37.sent;\n                _context37.next = 7;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 7:\n                _context37.t2 = _context37.sent;\n                _context37.t3 = key;\n                return _context37.abrupt(\"return\", _context37.t0.crypto_stream_xor.call(_context37.t0, _context37.t1, _context37.t2, _context37.t3));\n              case 10:\n                _context37.t4 = this.sodium;\n                _context37.next = 13;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 13:\n                _context37.t5 = _context37.sent;\n                _context37.next = 16;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 16:\n                _context37.t6 = _context37.sent;\n                _context37.t7 = key.getBuffer();\n                return _context37.abrupt(\"return\", _context37.t4.crypto_stream_xor.call(_context37.t4, _context37.t5, _context37.t6, _context37.t7));\n              case 19:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n          return crypto_stream_xor$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream_xor;\n    }()\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_scalarmult_base = function () {\n      function crypto_scalarmult_base(secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult_base$(_context38) {\n            while (1) switch (_context38.prev = _context38.next) {\n              case 0:\n                return _context38.abrupt(\"return\", Util.toBuffer(this.sodium.crypto_scalarmult_base(secretKey.getBuffer())));\n              case 1:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n          return crypto_scalarmult_base$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult_base;\n    }()\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_push = function () {\n      function crypto_secretstream_xchacha20poly1305_init_push(key) {\n        var res;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_push$(_context39) {\n            while (1) switch (_context39.prev = _context39.next) {\n              case 0:\n                res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n                _context39.t0 = res.state;\n                _context39.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(res.header));\n              case 4:\n                _context39.t1 = _context39.sent;\n                return _context39.abrupt(\"return\", [_context39.t0, _context39.t1]);\n              case 6:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_push;\n    }()\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_pull$(_context40) {\n            while (1) switch (_context40.prev = _context40.next) {\n              case 0:\n                if (!(header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES)) {\n                  _context40.next = 2;\n                  break;\n                }\n                throw new SodiumError(\"Header must be \" + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES + \" bytes long\");\n              case 2:\n                return _context40.abrupt(\"return\", this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer()));\n              case 3:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_pull;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_push = function () {\n      function crypto_secretstream_xchacha20poly1305_push(state, message) {\n        var ad,\n          tag,\n          _args41 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_push$(_context41) {\n            while (1) switch (_context41.prev = _context41.next) {\n              case 0:\n                ad = _args41.length > 2 && _args41[2] !== undefined ? _args41[2] : '';\n                tag = _args41.length > 3 && _args41[3] !== undefined ? _args41[3] : 0;\n                _context41.t0 = Util;\n                _context41.t1 = this.sodium;\n                _context41.t2 = state;\n                _context41.next = 7;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 7:\n                _context41.t3 = _context41.sent;\n                if (!(ad.length > 0)) {\n                  _context41.next = 14;\n                  break;\n                }\n                _context41.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n              case 11:\n                _context41.t4 = _context41.sent;\n                _context41.next = 15;\n                break;\n              case 14:\n                _context41.t4 = null;\n              case 15:\n                _context41.t5 = _context41.t4;\n                _context41.t6 = tag;\n                _context41.t7 = _context41.t1.crypto_secretstream_xchacha20poly1305_push.call(_context41.t1, _context41.t2, _context41.t3, _context41.t5, _context41.t6);\n                return _context41.abrupt(\"return\", _context41.t0.toBuffer.call(_context41.t0, _context41.t7));\n              case 19:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_push;\n    }()\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n        var ad,\n          tag,\n          out,\n          _args42 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_pull$(_context42) {\n            while (1) switch (_context42.prev = _context42.next) {\n              case 0:\n                ad = _args42.length > 2 && _args42[2] !== undefined ? _args42[2] : '';\n                tag = _args42.length > 3 && _args42[3] !== undefined ? _args42[3] : 0;\n                if (!(ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES)) {\n                  _context42.next = 4;\n                  break;\n                }\n                throw new SodiumError('Invalid ciphertext size');\n              case 4:\n                _context42.t0 = this.sodium;\n                _context42.t1 = state;\n                _context42.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 8:\n                _context42.t2 = _context42.sent;\n                if (!(ad.length > 0)) {\n                  _context42.next = 15;\n                  break;\n                }\n                _context42.next = 12;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n              case 12:\n                _context42.t3 = _context42.sent;\n                _context42.next = 16;\n                break;\n              case 15:\n                _context42.t3 = null;\n              case 16:\n                _context42.t4 = _context42.t3;\n                _context42.t5 = tag;\n                out = _context42.t0.crypto_secretstream_xchacha20poly1305_pull.call(_context42.t0, _context42.t1, _context42.t2, _context42.t4, _context42.t5);\n                if (!(tag !== out.tag)) {\n                  _context42.next = 21;\n                  break;\n                }\n                throw new SodiumError(\"Invalid tag (Given: \" + tag + \"; Expected: \" + out.tag + \")\");\n              case 21:\n                return _context42.abrupt(\"return\", Util.toBuffer(out.message));\n              case 22:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_pull;\n    }()\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_rekey = function () {\n      function crypto_secretstream_xchacha20poly1305_rekey(state) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_rekey$(_context43) {\n            while (1) switch (_context43.prev = _context43.next) {\n              case 0:\n                this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n              case 1:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_rekey$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_rekey;\n    }()\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.randombytes_buf = function () {\n      function randombytes_buf(number) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_buf$(_context44) {\n            while (1) switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.t0 = Util;\n                _context44.next = 3;\n                return _regeneratorRuntime.awrap(this.sodium.randombytes_buf(number));\n              case 3:\n                _context44.t1 = _context44.sent;\n                return _context44.abrupt(\"return\", _context44.t0.toBuffer.call(_context44.t0, _context44.t1));\n              case 5:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n          return randombytes_buf$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_buf;\n    }()\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.randombytes_uniform = function () {\n      function randombytes_uniform(upperBound) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_uniform$(_context45) {\n            while (1) switch (_context45.prev = _context45.next) {\n              case 0:\n                return _context45.abrupt(\"return\", this.sodium.randombytes_uniform(upperBound));\n              case 1:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n          return randombytes_uniform$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_uniform;\n    }()\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_add = function () {\n      function sodium_add(val, addv) {\n        var buf;\n        return _regeneratorRuntime.async(function () {\n          function sodium_add$(_context46) {\n            while (1) switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return _regeneratorRuntime.awrap(Util.cloneBuffer(val));\n              case 2:\n                buf = _context46.sent;\n                this.sodium.add(buf, addv);\n                return _context46.abrupt(\"return\", buf);\n              case 5:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n          return sodium_add$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_add;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.sodium_bin2hex = function () {\n      function sodium_bin2hex(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_bin2hex$(_context47) {\n            while (1) switch (_context47.prev = _context47.next) {\n              case 0:\n                return _context47.abrupt(\"return\", this.sodium.to_hex(buf));\n              case 1:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n          return sodium_bin2hex$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_bin2hex;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.sodium_compare = function () {\n      function sodium_compare(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_compare$(_context48) {\n            while (1) switch (_context48.prev = _context48.next) {\n              case 0:\n                return _context48.abrupt(\"return\", this.sodium.compare(b1, b2));\n              case 1:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n          return sodium_compare$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_compare;\n    }()\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_hex2bin = function () {\n      function sodium_hex2bin(encoded) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_hex2bin$(_context49) {\n            while (1) switch (_context49.prev = _context49.next) {\n              case 0:\n                return _context49.abrupt(\"return\", Buffer.from(this.sodium.from_hex(encoded)));\n              case 1:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n          return sodium_hex2bin$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_hex2bin;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_increment = function () {\n      function sodium_increment(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_increment$(_context50) {\n            while (1) switch (_context50.prev = _context50.next) {\n              case 0:\n                return _context50.abrupt(\"return\", this.sodium.increment(buf));\n              case 1:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n          return sodium_increment$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_increment;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_is_zero = function () {\n      function sodium_is_zero(buf, len) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_is_zero$(_context51) {\n            while (1) switch (_context51.prev = _context51.next) {\n              case 0:\n                return _context51.abrupt(\"return\", this.sodium.is_zero(buf, len));\n              case 1:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n          return sodium_is_zero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_is_zero;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.sodium_memcmp = function () {\n      function sodium_memcmp(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memcmp$(_context52) {\n            while (1) switch (_context52.prev = _context52.next) {\n              case 0:\n                return _context52.abrupt(\"return\", this.sodium.memcmp(b1, b2));\n              case 1:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n          return sodium_memcmp$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memcmp;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.sodium_memzero = function () {\n      function sodium_memzero(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memzero$(_context53) {\n            while (1) switch (_context53.prev = _context53.next) {\n              case 0:\n                this.sodium.memzero(buf);\n              case 1:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n          return sodium_memzero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memzero;\n    }()\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_pad = function () {\n      function sodium_pad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_pad$(_context54) {\n            while (1) switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.t0 = Util;\n                _context54.t1 = this.sodium;\n                _context54.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(buf));\n              case 4:\n                _context54.t2 = _context54.sent;\n                _context54.t3 = blockSize;\n                _context54.t4 = _context54.t1.pad.call(_context54.t1, _context54.t2, _context54.t3);\n                return _context54.abrupt(\"return\", _context54.t0.toBuffer.call(_context54.t0, _context54.t4));\n              case 8:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n          return sodium_pad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_pad;\n    }()\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_unpad = function () {\n      function sodium_unpad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_unpad$(_context55) {\n            while (1) switch (_context55.prev = _context55.next) {\n              case 0:\n                return _context55.abrupt(\"return\", Util.toBuffer(this.sodium.unpad(buf, blockSize)));\n              case 1:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n          return sodium_unpad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_unpad;\n    }();\n    return LibsodiumWrappersBackend;\n  }(Backend);\n}.call(this, module);","map":{"version":3,"names":["_regeneratorRuntime","module1","link","default","v","_inheritsLoose","_sodium","require","Backend","CryptographyKey","Polyfill","Util","SodiumError","toBuffer","Buffer","module","exports","_Backend","LibsodiumWrappersBackend","lib","_this","call","sodium","backendName","init","async","init$","_context","prev","next","awrap","ready","abrupt","stop","Promise","_proto","prototype","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","crypto_aead_xchacha20poly1305_ietf_decrypt$","_context2","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","plaintext","crypto_aead_xchacha20poly1305_ietf_encrypt$","_context3","crypto_auth","message","crypto_auth$","_context4","crypto_auth_verify","mac","crypto_auth_verify$","_context5","crypto_box","sk","pk","crypto_box$","_context6","t0","t1","t2","t3","sent","t4","t5","t6","t7","crypto_box_easy","t8","crypto_box_open","crypto_box_open$","_context7","crypto_box_open_easy","crypto_box_seal","crypto_box_seal$","_context8","crypto_box_seal_open","crypto_box_seal_open$","_context9","crypto_box_keypair","obj","crypto_box_keypair$","_context10","privateKey","publicKey","concat","crypto_generichash","outputLength","_args11","arguments","crypto_generichash$","_context11","length","undefined","t9","t10","crypto_generichash_init","_args12","crypto_generichash_init$","_context12","crypto_generichash_update","state","crypto_generichash_update$","_context13","crypto_generichash_final","_args14","crypto_generichash_final$","_context14","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","gen","crypto_kx_client_session_keys$","_context15","sharedRx","sharedTx","crypto_kx_server_session_keys","serverSecretKey","crypto_kx_server_session_keys$","_context16","crypto_kdf_derive_from_key","subKeyId","context","crypto_kdf_derive_from_key$","_context17","crypto_onetimeauth","crypto_onetimeauth$","_context18","crypto_onetimeauth_verify","tag","crypto_onetimeauth_verify$","_context19","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","crypto_pwhash$","_context20","crypto_pwhash_str","crypto_pwhash_str$","_context21","toString","crypto_pwhash_str_verify","hash","crypto_pwhash_str_verify$","_context22","crypto_pwhash_str_needs_rehash","crypto_pwhash_str_needs_rehash$","_context23","crypto_scalarmult","secretKey","crypto_scalarmult$","_context24","crypto_secretbox","crypto_secretbox$","_context25","crypto_secretbox_easy","crypto_secretbox_open","crypto_secretbox_open$","_context26","crypto_secretbox_open_easy","crypto_shorthash","crypto_shorthash$","_context27","crypto_sign","crypto_sign$","_context28","crypto_sign_open","crypto_sign_open$","_context29","crypto_sign_detached","crypto_sign_detached$","_context30","crypto_sign_verify_detached","signature","crypto_sign_verify_detached$","_context31","crypto_sign_keypair","crypto_sign_keypair$","_context32","crypto_sign_seed_keypair","seed","crypto_sign_seed_keypair$","_context33","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519$","_context34","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_pk_to_curve25519$","_context35","crypto_stream","crypto_stream$","_context36","crypto_stream_xor","alloc","crypto_stream_xor$","_context37","crypto_scalarmult_base","crypto_scalarmult_base$","_context38","crypto_secretstream_xchacha20poly1305_init_push","res","crypto_secretstream_xchacha20poly1305_init_push$","_context39","header","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_pull$","_context40","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_push","ad","_args41","crypto_secretstream_xchacha20poly1305_push$","_context41","crypto_secretstream_xchacha20poly1305_pull","out","_args42","crypto_secretstream_xchacha20poly1305_pull$","_context42","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","crypto_secretstream_xchacha20poly1305_rekey","crypto_secretstream_xchacha20poly1305_rekey$","_context43","randombytes_buf","number","randombytes_buf$","_context44","randombytes_uniform","upperBound","randombytes_uniform$","_context45","sodium_add","val","addv","buf","sodium_add$","_context46","cloneBuffer","add","sodium_bin2hex","sodium_bin2hex$","_context47","to_hex","sodium_compare","b1","b2","sodium_compare$","_context48","compare","sodium_hex2bin","encoded","sodium_hex2bin$","_context49","from","from_hex","sodium_increment","sodium_increment$","_context50","increment","sodium_is_zero","len","sodium_is_zero$","_context51","is_zero","sodium_memcmp","sodium_memcmp$","_context52","memcmp","sodium_memzero","sodium_memzero$","_context53","memzero","sodium_pad","blockSize","sodium_pad$","_context54","pad","sodium_unpad","sodium_unpad$","_context55","unpad"],"sources":["imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"],"sourcesContent":["const _sodium = require('libsodium-wrappers');\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst Polyfill = require('../polyfill');\nconst Util = require('../util');\nconst SodiumError = require('../sodium-error');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'LibsodiumWrappersBackend';\n    }\n\n    static async init() {\n        await _sodium.ready;\n        return new LibsodiumWrappersBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n                null,\n                ciphertext,\n                assocData,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n                plaintext,\n                assocData,\n                null,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        return toBuffer(\n            this.sodium.crypto_auth(\n                message,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            message,\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_easy(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_open_easy(\n                await Util.toBuffer(ciphertext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal(\n                await Util.toBuffer(plaintext),\n                pk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal_open(\n                await Util.toBuffer(ciphertext),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const obj = this.sodium.crypto_box_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        if (key) {\n            return Util.toBuffer(\n                this.sodium.crypto_generichash(\n                    outputLength,\n                    await Util.toBuffer(message),\n                    key.getBuffer()\n                )\n            );\n        }\n        return Util.toBuffer(\n            this.sodium.crypto_generichash(\n                outputLength,\n                await Util.toBuffer(message)\n            )\n        );\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        if (key) {\n            return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n        }\n        return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        return Util.toBuffer(\n            this.sodium.crypto_generichash_final(state, outputLength)\n        );\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const gen = this.sodium.crypto_kx_client_session_keys(\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const gen = this.sodium.crypto_kx_server_session_keys(\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_kdf_derive_from_key(\n                    length,\n                    subKeyId | 0,\n                    context,\n                    key.getBuffer()\n                )\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n            return Polyfill.crypto_onetimeauth(\n                await Util.toBuffer(message),\n                key\n            );\n        }\n        return this.sodium.crypto_onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n            return Polyfill.crypto_onetimeauth_verify(\n                await Util.toBuffer(message),\n                key,\n                tag\n            );\n        }\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return Util.toBuffer(\n            this.sodium.crypto_pwhash(\n                length,\n                await Util.toBuffer(password),\n                await Util.toBuffer(salt),\n                opslimit,\n                memlimit,\n                algorithm\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        return (await Util.toBuffer(\n            this.sodium.crypto_pwhash_str(\n                await Util.toBuffer(password),\n                opslimit,\n                memlimit\n            ))\n        ).toString('utf-8');\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        return this.sodium.crypto_pwhash_str_verify(\n            hash.toString('utf-8'),\n            await Util.toBuffer(password)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        if (typeof (this.sodium.crypto_pwhash_str_needs_rehash) !== 'function') {\n            return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n        }\n        return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_easy(\n                await Util.toBuffer(plaintext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_open_easy(\n                await Util.toBuffer(ciphertext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_shorthash(\n                await Util.toBuffer(message),\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_open(\n                message,\n                publicKey.getBuffer()\n            )\n        );\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_detached(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const obj = this.sodium.crypto_sign_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const obj = this.sodium.crypto_sign_seed_keypair(seed);\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())\n        );\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())\n        );\n    }\n\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                Buffer.alloc(length, 0),\n                await Util.toBuffer(nonce),\n                key\n            );\n        }\n        return this.sodium.crypto_stream(\n            length,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                key\n            )\n        }\n        return this.sodium.crypto_stream_xor(\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_scalarmult_base(secretKey.getBuffer())\n        );\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n        return [res.state, await Util.toBuffer(res.header)];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretstream_xchacha20poly1305_push(\n                state,\n                await Util.toBuffer(message),\n                ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n                tag\n            )\n        );\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            await Util.toBuffer(ciphertext),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            tag\n        );\n        if (tag !== out.tag) {\n            throw new SodiumError(`Invalid tag (Given: ${tag}; Expected: ${out.tag})`);\n        }\n        return Util.toBuffer(out.message);\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(buf) {\n        return this.sodium.to_hex(buf);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(encoded) {\n        return Buffer.from(this.sodium.from_hex(encoded));\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.memzero(buf);\n    }\n\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        return Util.toBuffer(\n            this.sodium.pad(await Util.toBuffer(buf), blockSize)\n        );\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8e60a57085a2c23260b166df4d40e89d9620013d"}
