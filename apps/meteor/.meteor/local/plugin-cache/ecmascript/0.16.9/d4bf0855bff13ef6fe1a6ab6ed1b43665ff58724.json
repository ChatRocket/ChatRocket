{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/RocketAdapter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/RocketAdapter.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/RocketAdapter.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/RocketAdapter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/RocketAdapter.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      default: () => RocketAdapter\n    });\n    let util;\n    module.link(\"util\", {\n      default(v) {\n        util = v;\n      }\n    }, 0);\n    let Messages, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 5);\n    let rocketLogger;\n    module.link(\"./logger\", {\n      rocketLogger(v) {\n        rocketLogger = v;\n      }\n    }, 6);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 7);\n    let sleep;\n    module.link(\"../../../lib/utils/sleep\", {\n      sleep(v) {\n        sleep = v;\n      }\n    }, 8);\n    let createRoom;\n    module.link(\"../../lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 9);\n    let sendMessage;\n    module.link(\"../../lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 10);\n    let setUserAvatar;\n    module.link(\"../../lib/server/functions/setUserAvatar\", {\n      setUserAvatar(v) {\n        setUserAvatar = v;\n      }\n    }, 11);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RocketAdapter {\n      constructor(slackBridge) {\n        rocketLogger.debug('constructor');\n        this.slackBridge = slackBridge;\n        this.util = util;\n        this.userTags = {};\n        this.slackAdapters = [];\n      }\n      connect() {\n        this.registerForEvents();\n      }\n      disconnect() {\n        this.unregisterForEvents();\n      }\n      addSlack(slack) {\n        if (this.slackAdapters.indexOf(slack) < 0) {\n          this.slackAdapters.push(slack);\n        }\n      }\n      clearSlackAdapters() {\n        this.slackAdapters = [];\n      }\n      registerForEvents() {\n        rocketLogger.debug('Register for events');\n        callbacks.add('afterSaveMessage', this.onMessage.bind(this), callbacks.priority.LOW, 'SlackBridge_Out');\n        callbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), callbacks.priority.LOW, 'SlackBridge_Delete');\n        callbacks.add('afterSetReaction', this.onSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_SetReaction');\n        callbacks.add('afterUnsetReaction', this.onUnSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n      }\n      unregisterForEvents() {\n        rocketLogger.debug('Unregister for events');\n        callbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n        callbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n        callbacks.remove('afterSetReaction', 'SlackBridge_SetReaction');\n        callbacks.remove('afterUnsetReaction', 'SlackBridge_UnSetReaction');\n      }\n      async onMessageDelete(rocketMessageDeleted) {\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(this.slackAdapters), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const slack = _step.value;\n            {\n              try {\n                if (!slack.getSlackChannel(rocketMessageDeleted.rid)) {\n                  // This is on a channel that the rocket bot is not subscribed on this slack server\n                  return;\n                }\n                rocketLogger.debug('onRocketMessageDelete', rocketMessageDeleted);\n                await slack.postDeleteMessage(rocketMessageDeleted);\n              } catch (err) {\n                rocketLogger.error({\n                  msg: 'Unhandled error onMessageDelete',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async onSetReaction(rocketMsg, _ref) {\n        let {\n          reaction\n        } = _ref;\n        try {\n          if (!this.slackBridge.isReactionsEnabled) {\n            return;\n          }\n          rocketLogger.debug('onRocketSetReaction');\n          if (rocketMsg._id && reaction) {\n            if (this.slackBridge.reactionsMap.delete(\"set\".concat(rocketMsg._id).concat(reaction))) {\n              // This was a Slack reaction, we don't need to tell Slack about it\n              return;\n            }\n            if (rocketMsg) {\n              var _iteratorAbruptCompletion2 = false;\n              var _didIteratorError2 = false;\n              var _iteratorError2;\n              try {\n                for (var _iterator2 = _asyncIterator(this.slackAdapters), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n                  const slack = _step2.value;\n                  {\n                    const slackChannel = slack.getSlackChannel(rocketMsg.rid);\n                    if (slackChannel != null) {\n                      const slackTS = slack.getTimeStamp(rocketMsg);\n                      await slack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n                    await _iterator2.return();\n                  }\n                } finally {\n                  if (_didIteratorError2) {\n                    throw _iteratorError2;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          rocketLogger.error({\n            msg: 'Unhandled error onSetReaction',\n            err\n          });\n        }\n      }\n      async onUnSetReaction(rocketMsg, _ref2) {\n        let {\n          reaction\n        } = _ref2;\n        try {\n          if (!this.slackBridge.isReactionsEnabled) {\n            return;\n          }\n          rocketLogger.debug('onRocketUnSetReaction');\n          if (rocketMsg._id && reaction) {\n            if (this.slackBridge.reactionsMap.delete(\"unset\".concat(rocketMsg._id).concat(reaction))) {\n              // This was a Slack unset reaction, we don't need to tell Slack about it\n              return;\n            }\n            if (rocketMsg) {\n              var _iteratorAbruptCompletion3 = false;\n              var _didIteratorError3 = false;\n              var _iteratorError3;\n              try {\n                for (var _iterator3 = _asyncIterator(this.slackAdapters), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n                  const slack = _step3.value;\n                  {\n                    const slackChannel = slack.getSlackChannel(rocketMsg.rid);\n                    if (slackChannel != null) {\n                      const slackTS = slack.getTimeStamp(rocketMsg);\n                      await slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                    await _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            }\n          }\n        } catch (err) {\n          rocketLogger.error({\n            msg: 'Unhandled error onUnSetReaction',\n            err\n          });\n        }\n      }\n      async onMessage(rocketMessage) {\n        var _iteratorAbruptCompletion4 = false;\n        var _didIteratorError4 = false;\n        var _iteratorError4;\n        try {\n          for (var _iterator4 = _asyncIterator(this.slackAdapters), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n            const slack = _step4.value;\n            {\n              try {\n                if (!slack.getSlackChannel(rocketMessage.rid)) {\n                  // This is on a channel that the rocket bot is not subscribed\n                  return;\n                }\n                rocketLogger.debug('onRocketMessage', rocketMessage);\n                if (rocketMessage.editedAt) {\n                  // This is an Edit Event\n                  await this.processMessageChanged(rocketMessage, slack);\n                  return rocketMessage;\n                }\n                // Ignore messages originating from Slack\n                if (rocketMessage._id.indexOf('slack-') === 0) {\n                  return rocketMessage;\n                }\n                if (rocketMessage.file) {\n                  return this.processFileShare(rocketMessage, slack);\n                }\n\n                // A new message from Rocket.Chat\n                await this.processSendMessage(rocketMessage, slack);\n              } catch (err) {\n                rocketLogger.error({\n                  msg: 'Unhandled error onMessage',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n              await _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n        return rocketMessage;\n      }\n      async processSendMessage(rocketMessage, slack) {\n        // Since we got this message, SlackBridge_Out_Enabled is true\n        if (settings.get('SlackBridge_Out_All') === true) {\n          await slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n        } else {\n          // They want to limit to certain groups\n          const outSlackChannels = _.pluck(settings.get('SlackBridge_Out_Channels'), '_id') || [];\n          // rocketLogger.debug('Out SlackChannels: ', outSlackChannels);\n          if (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n            await slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n          }\n        }\n      }\n      getMessageAttachment(rocketMessage) {\n        if (!rocketMessage.file) {\n          return;\n        }\n        if (!rocketMessage.attachments || !rocketMessage.attachments.length) {\n          return;\n        }\n        const fileId = rocketMessage.file._id;\n        return rocketMessage.attachments.find(attachment => attachment.title_link && attachment.title_link.indexOf(\"/\".concat(fileId, \"/\")) >= 0);\n      }\n      async processFileShare(rocketMessage, slack) {\n        if (!settings.get('SlackBridge_FileUpload_Enabled')) {\n          return;\n        }\n        if (rocketMessage.file.name) {\n          let fileName = rocketMessage.file.name;\n          let text = rocketMessage.msg;\n          const attachment = this.getMessageAttachment(rocketMessage);\n          if (attachment) {\n            fileName = Meteor.absoluteUrl(attachment.title_link);\n            if (!text) {\n              text = attachment.description;\n            }\n          }\n          const message = \"\".concat(text, \" \").concat(fileName);\n          rocketMessage.msg = message;\n          await slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n        }\n      }\n      async processMessageChanged(rocketMessage, slack) {\n        if (rocketMessage) {\n          if (rocketMessage.updatedBySlack) {\n            // We have already processed this\n            delete rocketMessage.updatedBySlack;\n            return;\n          }\n\n          // This was a change from Rocket.Chat\n          const slackChannel = slack.getSlackChannel(rocketMessage.rid);\n          await slack.postMessageUpdate(slackChannel, rocketMessage);\n        }\n      }\n      async getChannel(slackMessage) {\n        return slackMessage.channel ? (await this.findChannel(slackMessage.channel)) || this.addChannel(slackMessage.channel) : null;\n      }\n      async getUser(slackUser) {\n        return slackUser ? (await this.findUser(slackUser)) || this.addUser(slackUser) : null;\n      }\n      createRocketID(slackChannel, ts) {\n        return \"slack-\".concat(slackChannel, \"-\").concat(ts.replace(/\\./g, '-'));\n      }\n      async findChannel(slackChannelId) {\n        return Rooms.findOneByImportId(slackChannelId);\n      }\n      async getRocketUsers(members, slackChannel) {\n        const rocketUsers = [];\n        var _iteratorAbruptCompletion5 = false;\n        var _didIteratorError5 = false;\n        var _iteratorError5;\n        try {\n          for (var _iterator5 = _asyncIterator(members), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n            const member = _step5.value;\n            {\n              if (member !== slackChannel.creator) {\n                const rocketUser = (await this.findUser(member)) || (await this.addUser(member));\n                if (rocketUser && rocketUser.username) {\n                  rocketUsers.push(rocketUser.username);\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n              await _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n        return rocketUsers;\n      }\n      async getRocketUserCreator(slackChannel) {\n        return slackChannel.creator ? (await this.findUser(slackChannel.creator)) || this.addUser(slackChannel.creator) : null;\n      }\n      async addChannel(slackChannelID) {\n        let hasRetried = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        rocketLogger.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n        let addedRoom;\n        var _iteratorAbruptCompletion6 = false;\n        var _didIteratorError6 = false;\n        var _iteratorError6;\n        try {\n          for (var _iterator6 = _asyncIterator(this.slackAdapters), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n            const slack = _step6.value;\n            {\n              if (addedRoom) {\n                return;\n              }\n              const slackChannel = await slack.slackAPI.getRoomInfo(slackChannelID);\n              if (slackChannel) {\n                const members = await slack.slackAPI.getMembers(slackChannelID);\n                if (!members) {\n                  rocketLogger.error('Could not fetch room members');\n                  return;\n                }\n                const rocketRoom = await Rooms.findOneByName(slackChannel.name);\n                if (rocketRoom || slackChannel.is_general) {\n                  slackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n                  await Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n                } else {\n                  const rocketUsers = await this.getRocketUsers(members, slackChannel);\n                  const rocketUserCreator = await this.getRocketUserCreator(slackChannel);\n                  if (!rocketUserCreator) {\n                    rocketLogger.error({\n                      msg: 'Could not fetch room creator information',\n                      creator: slackChannel.creator\n                    });\n                    return;\n                  }\n                  try {\n                    const isPrivate = slackChannel.is_private;\n                    const rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator, rocketUsers);\n                    slackChannel.rocketId = rocketChannel.rid;\n                  } catch (e) {\n                    if (!hasRetried) {\n                      rocketLogger.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n                      // If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n                      await sleep(1000);\n                      return (await this.findChannel(slackChannelID)) || this.addChannel(slackChannelID, true);\n                    }\n                    rocketLogger.error(e);\n                  }\n                  const roomUpdate = {\n                    ts: new Date(slackChannel.created * 1000)\n                  };\n                  let lastSetTopic = 0;\n                  if (slackChannel.topic && slackChannel.topic.value) {\n                    roomUpdate.topic = slackChannel.topic.value;\n                    lastSetTopic = slackChannel.topic.last_set;\n                  }\n                  if (slackChannel.purpose && slackChannel.purpose.value && slackChannel.purpose.last_set > lastSetTopic) {\n                    roomUpdate.topic = slackChannel.purpose.value;\n                  }\n                  await Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n                  slack.addSlackChannel(slackChannel.rocketId, slackChannelID);\n                }\n                addedRoom = await Rooms.findOneById(slackChannel.rocketId);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n              await _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n        if (!addedRoom) {\n          rocketLogger.debug('Channel not added');\n        }\n        return addedRoom;\n      }\n      async findUser(slackUserID) {\n        const rocketUser = await Users.findOneByImportId(slackUserID);\n        if (rocketUser && !this.userTags[slackUserID]) {\n          this.userTags[slackUserID] = {\n            slack: \"<@\".concat(slackUserID, \">\"),\n            rocket: \"@\".concat(rocketUser.username)\n          };\n        }\n        return rocketUser;\n      }\n      async addUser(slackUserID) {\n        rocketLogger.debug('Adding Rocket.Chat user from Slack', slackUserID);\n        let addedUser;\n        var _iteratorAbruptCompletion7 = false;\n        var _didIteratorError7 = false;\n        var _iteratorError7;\n        try {\n          for (var _iterator7 = _asyncIterator(this.slackAdapters), _step7; _iteratorAbruptCompletion7 = !(_step7 = await _iterator7.next()).done; _iteratorAbruptCompletion7 = false) {\n            const slack = _step7.value;\n            {\n              if (addedUser) {\n                return;\n              }\n              const user = await slack.slackAPI.getUser(slackUserID);\n              if (user) {\n                const rocketUserData = user;\n                const isBot = rocketUserData.is_bot === true;\n                const email = rocketUserData.profile && rocketUserData.profile.email || '';\n                let existingRocketUser;\n                if (!isBot) {\n                  existingRocketUser = (await Users.findOneByEmailAddress(email)) || (await Users.findOneByUsernameIgnoringCase(rocketUserData.name));\n                } else {\n                  existingRocketUser = await Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n                }\n                if (existingRocketUser) {\n                  rocketUserData.rocketId = existingRocketUser._id;\n                  rocketUserData.name = existingRocketUser.username;\n                } else {\n                  const newUser = {\n                    password: Random.id(),\n                    username: rocketUserData.name\n                  };\n                  if (!isBot && email) {\n                    newUser.email = email;\n                  }\n                  if (isBot) {\n                    newUser.joinDefaultChannels = false;\n                  }\n                  rocketUserData.rocketId = await Accounts.createUserAsync(newUser);\n                  const userUpdate = {\n                    utcOffset: rocketUserData.tz_offset / 3600,\n                    // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n                    roles: isBot ? ['bot'] : ['user']\n                  };\n                  if (rocketUserData.profile && rocketUserData.profile.real_name) {\n                    userUpdate.name = rocketUserData.profile.real_name;\n                  }\n                  if (rocketUserData.deleted) {\n                    userUpdate.active = false;\n                    userUpdate['services.resume.loginTokens'] = [];\n                  }\n                  await Users.updateOne({\n                    _id: rocketUserData.rocketId\n                  }, {\n                    $set: userUpdate\n                  });\n                  const user = await Users.findOneById(rocketUserData.rocketId);\n                  let url = null;\n                  if (rocketUserData.profile) {\n                    if (rocketUserData.profile.image_original) {\n                      url = rocketUserData.profile.image_original;\n                    } else if (rocketUserData.profile.image_512) {\n                      url = rocketUserData.profile.image_512;\n                    }\n                  }\n                  if (url) {\n                    try {\n                      await setUserAvatar(user, url, null, 'url');\n                    } catch (error) {\n                      rocketLogger.debug('Error setting user avatar', error.message);\n                    }\n                  }\n                }\n                const importIds = [rocketUserData.id];\n                if (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n                  importIds.push(rocketUserData.profile.bot_id);\n                }\n                await Users.addImportIds(rocketUserData.rocketId, importIds);\n                if (!this.userTags[slackUserID]) {\n                  this.userTags[slackUserID] = {\n                    slack: \"<@\".concat(slackUserID, \">\"),\n                    rocket: \"@\".concat(rocketUserData.name)\n                  };\n                }\n                addedUser = await Users.findOneById(rocketUserData.rocketId);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n              await _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n        if (!addedUser) {\n          rocketLogger.debug('User not added');\n        }\n        return addedUser;\n      }\n      addAliasToMsg(rocketUserName, rocketMsgObj) {\n        const aliasFormat = settings.get('SlackBridge_AliasFormat');\n        if (aliasFormat) {\n          const alias = this.util.format(aliasFormat, rocketUserName);\n          if (alias !== rocketUserName) {\n            rocketMsgObj.alias = alias;\n          }\n        }\n        return rocketMsgObj;\n      }\n      async createAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting, slack) {\n        if (slackMessage.type === 'message') {\n          let rocketMsgObj = {};\n          if (!_.isEmpty(slackMessage.subtype)) {\n            rocketMsgObj = await slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n            if (!rocketMsgObj) {\n              return;\n            }\n          } else {\n            rocketMsgObj = {\n              msg: await this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n              rid: rocketChannel._id,\n              u: {\n                _id: rocketUser._id,\n                username: rocketUser.username\n              }\n            };\n            this.addAliasToMsg(rocketUser.username, rocketMsgObj);\n          }\n          _.extend(rocketMsgObj, rocketMsgDataDefaults);\n          if (slackMessage.edited) {\n            rocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n          }\n          rocketMsgObj.slackTs = slackMessage.ts;\n          if (slackMessage.thread_ts) {\n            const tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n            if (tmessage) {\n              rocketMsgObj.tmid = tmessage._id;\n            }\n          }\n          if (slackMessage.subtype === 'bot_message') {\n            rocketUser = await Users.findOneById('rocket.cat', {\n              projection: {\n                username: 1\n              }\n            });\n          }\n          if (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n            rocketMsgObj.pinned = true;\n            rocketMsgObj.pinnedAt = Date.now;\n            rocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n          }\n          if (slackMessage.subtype === 'bot_message') {\n            setTimeout(async () => {\n              if (slackMessage.bot_id && slackMessage.ts) {\n                // Make sure that a message with the same bot_id and timestamp doesn't already exists\n                const msg = await Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts);\n                if (!msg) {\n                  void sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n                }\n              }\n            }, 500);\n          } else {\n            rocketLogger.debug('Send message to Rocket.Chat');\n            await sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n          }\n        }\n      }\n      async convertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n        const regex = /(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g;\n        if (!_.isEmpty(slackMsgTxt)) {\n          slackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n          slackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n          slackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n          slackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n          slackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n          slackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n          slackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n          slackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n          slackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n          slackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n          slackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n          const promises = [];\n          slackMsgTxt.replace(regex, async (match, userId) => {\n            if (!this.userTags[userId]) {\n              (await this.findUser(userId)) || (await this.addUser(userId)); // This adds userTags for the userId\n            }\n            const userTags = this.userTags[userId];\n            if (userTags) {\n              promises.push(slackMsgTxt.replace(userTags.slack, userTags.rocket));\n            }\n          });\n          const result = await Promise.all(promises);\n          slackMsgTxt = slackMsgTxt.replace(regex, () => result.shift());\n        } else {\n          slackMsgTxt = '';\n        }\n        return slackMsgTxt;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","RocketAdapter","util","Messages","Rooms","Users","Random","Accounts","Meteor","_","rocketLogger","callbacks","sleep","createRoom","sendMessage","setUserAvatar","settings","__reifyWaitForDeps__","constructor","slackBridge","debug","userTags","slackAdapters","connect","registerForEvents","disconnect","unregisterForEvents","addSlack","slack","indexOf","push","clearSlackAdapters","add","onMessage","bind","priority","LOW","onMessageDelete","onSetReaction","onUnSetReaction","remove","rocketMessageDeleted","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","getSlackChannel","rid","postDeleteMessage","err","error","msg","return","rocketMsg","_ref","reaction","isReactionsEnabled","_id","reactionsMap","delete","concat","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","slackChannel","slackTS","getTimeStamp","postReactionAdded","replace","id","_ref2","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","postReactionRemove","rocketMessage","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","editedAt","processMessageChanged","file","processFileShare","processSendMessage","get","postMessage","outSlackChannels","pluck","getMessageAttachment","attachments","length","fileId","find","attachment","title_link","name","fileName","text","absoluteUrl","description","message","updatedBySlack","postMessageUpdate","getChannel","slackMessage","channel","findChannel","addChannel","getUser","slackUser","findUser","addUser","createRocketID","ts","slackChannelId","findOneByImportId","getRocketUsers","members","rocketUsers","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","member","creator","rocketUser","username","getRocketUserCreator","slackChannelID","hasRetried","arguments","undefined","addedRoom","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","slackAPI","getRoomInfo","getMembers","rocketRoom","findOneByName","is_general","rocketId","addImportIds","rocketUserCreator","isPrivate","is_private","rocketChannel","e","roomUpdate","Date","created","lastSetTopic","topic","last_set","purpose","addSlackChannel","findOneById","slackUserID","rocket","addedUser","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","user","rocketUserData","isBot","is_bot","email","profile","existingRocketUser","findOneByEmailAddress","findOneByUsernameIgnoringCase","newUser","password","joinDefaultChannels","createUserAsync","userUpdate","utcOffset","tz_offset","roles","real_name","deleted","active","updateOne","$set","url","image_original","image_512","importIds","bot_id","addAliasToMsg","rocketUserName","rocketMsgObj","aliasFormat","alias","format","createAndSaveMessage","rocketMsgDataDefaults","isImporting","type","isEmpty","subtype","processSubtypedMessage","convertSlackMsgTxtToRocketTxtFormat","u","extend","edited","parseInt","split","slackTs","thread_ts","tmessage","findOneBySlackTs","tmid","projection","pinned_to","pinned","pinnedAt","now","pinnedBy","pick","setTimeout","findOneBySlackBotIdAndSlackTs","slackMsgTxt","regex","promises","match","userId","result","Promise","all","shift","__reify_async_result__","_reifyError","self","async"],"sources":["app/slackbridge/server/RocketAdapter.js"],"sourcesContent":["import util from 'util';\n\nimport { Messages, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { rocketLogger } from './logger';\nimport { callbacks } from '../../../lib/callbacks';\nimport { sleep } from '../../../lib/utils/sleep';\nimport { createRoom } from '../../lib/server/functions/createRoom';\nimport { sendMessage } from '../../lib/server/functions/sendMessage';\nimport { setUserAvatar } from '../../lib/server/functions/setUserAvatar';\nimport { settings } from '../../settings/server';\n\nexport default class RocketAdapter {\n\tconstructor(slackBridge) {\n\t\trocketLogger.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.util = util;\n\t\tthis.userTags = {};\n\t\tthis.slackAdapters = [];\n\t}\n\n\tconnect() {\n\t\tthis.registerForEvents();\n\t}\n\n\tdisconnect() {\n\t\tthis.unregisterForEvents();\n\t}\n\n\taddSlack(slack) {\n\t\tif (this.slackAdapters.indexOf(slack) < 0) {\n\t\t\tthis.slackAdapters.push(slack);\n\t\t}\n\t}\n\n\tclearSlackAdapters() {\n\t\tthis.slackAdapters = [];\n\t}\n\n\tregisterForEvents() {\n\t\trocketLogger.debug('Register for events');\n\t\tcallbacks.add('afterSaveMessage', this.onMessage.bind(this), callbacks.priority.LOW, 'SlackBridge_Out');\n\t\tcallbacks.add('afterDeleteMessage', this.onMessageDelete.bind(this), callbacks.priority.LOW, 'SlackBridge_Delete');\n\t\tcallbacks.add('afterSetReaction', this.onSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_SetReaction');\n\t\tcallbacks.add('afterUnsetReaction', this.onUnSetReaction.bind(this), callbacks.priority.LOW, 'SlackBridge_UnSetReaction');\n\t}\n\n\tunregisterForEvents() {\n\t\trocketLogger.debug('Unregister for events');\n\t\tcallbacks.remove('afterSaveMessage', 'SlackBridge_Out');\n\t\tcallbacks.remove('afterDeleteMessage', 'SlackBridge_Delete');\n\t\tcallbacks.remove('afterSetReaction', 'SlackBridge_SetReaction');\n\t\tcallbacks.remove('afterUnsetReaction', 'SlackBridge_UnSetReaction');\n\t}\n\n\tasync onMessageDelete(rocketMessageDeleted) {\n\t\tfor await (const slack of this.slackAdapters) {\n\t\t\ttry {\n\t\t\t\tif (!slack.getSlackChannel(rocketMessageDeleted.rid)) {\n\t\t\t\t\t// This is on a channel that the rocket bot is not subscribed on this slack server\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\trocketLogger.debug('onRocketMessageDelete', rocketMessageDeleted);\n\t\t\t\tawait slack.postDeleteMessage(rocketMessageDeleted);\n\t\t\t} catch (err) {\n\t\t\t\trocketLogger.error({ msg: 'Unhandled error onMessageDelete', err });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync onSetReaction(rocketMsg, { reaction }) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trocketLogger.debug('onRocketSetReaction');\n\n\t\t\tif (rocketMsg._id && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`set${rocketMsg._id}${reaction}`)) {\n\t\t\t\t\t// This was a Slack reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tfor await (const slack of this.slackAdapters) {\n\t\t\t\t\t\tconst slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\t\tif (slackChannel != null) {\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tawait slack.postReactionAdded(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\trocketLogger.error({ msg: 'Unhandled error onSetReaction', err });\n\t\t}\n\t}\n\n\tasync onUnSetReaction(rocketMsg, { reaction }) {\n\t\ttry {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trocketLogger.debug('onRocketUnSetReaction');\n\n\t\t\tif (rocketMsg._id && reaction) {\n\t\t\t\tif (this.slackBridge.reactionsMap.delete(`unset${rocketMsg._id}${reaction}`)) {\n\t\t\t\t\t// This was a Slack unset reaction, we don't need to tell Slack about it\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsg) {\n\t\t\t\t\tfor await (const slack of this.slackAdapters) {\n\t\t\t\t\t\tconst slackChannel = slack.getSlackChannel(rocketMsg.rid);\n\t\t\t\t\t\tif (slackChannel != null) {\n\t\t\t\t\t\t\tconst slackTS = slack.getTimeStamp(rocketMsg);\n\t\t\t\t\t\t\tawait slack.postReactionRemove(reaction.replace(/:/g, ''), slackChannel.id, slackTS);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\trocketLogger.error({ msg: 'Unhandled error onUnSetReaction', err });\n\t\t}\n\t}\n\n\tasync onMessage(rocketMessage) {\n\t\tfor await (const slack of this.slackAdapters) {\n\t\t\ttry {\n\t\t\t\tif (!slack.getSlackChannel(rocketMessage.rid)) {\n\t\t\t\t\t// This is on a channel that the rocket bot is not subscribed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\trocketLogger.debug('onRocketMessage', rocketMessage);\n\n\t\t\t\tif (rocketMessage.editedAt) {\n\t\t\t\t\t// This is an Edit Event\n\t\t\t\t\tawait this.processMessageChanged(rocketMessage, slack);\n\t\t\t\t\treturn rocketMessage;\n\t\t\t\t}\n\t\t\t\t// Ignore messages originating from Slack\n\t\t\t\tif (rocketMessage._id.indexOf('slack-') === 0) {\n\t\t\t\t\treturn rocketMessage;\n\t\t\t\t}\n\n\t\t\t\tif (rocketMessage.file) {\n\t\t\t\t\treturn this.processFileShare(rocketMessage, slack);\n\t\t\t\t}\n\n\t\t\t\t// A new message from Rocket.Chat\n\t\t\t\tawait this.processSendMessage(rocketMessage, slack);\n\t\t\t} catch (err) {\n\t\t\t\trocketLogger.error({ msg: 'Unhandled error onMessage', err });\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMessage;\n\t}\n\n\tasync processSendMessage(rocketMessage, slack) {\n\t\t// Since we got this message, SlackBridge_Out_Enabled is true\n\t\tif (settings.get('SlackBridge_Out_All') === true) {\n\t\t\tawait slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t} else {\n\t\t\t// They want to limit to certain groups\n\t\t\tconst outSlackChannels = _.pluck(settings.get('SlackBridge_Out_Channels'), '_id') || [];\n\t\t\t// rocketLogger.debug('Out SlackChannels: ', outSlackChannels);\n\t\t\tif (outSlackChannels.indexOf(rocketMessage.rid) !== -1) {\n\t\t\t\tawait slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetMessageAttachment(rocketMessage) {\n\t\tif (!rocketMessage.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!rocketMessage.attachments || !rocketMessage.attachments.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst fileId = rocketMessage.file._id;\n\t\treturn rocketMessage.attachments.find((attachment) => attachment.title_link && attachment.title_link.indexOf(`/${fileId}/`) >= 0);\n\t}\n\n\tasync processFileShare(rocketMessage, slack) {\n\t\tif (!settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (rocketMessage.file.name) {\n\t\t\tlet fileName = rocketMessage.file.name;\n\t\t\tlet text = rocketMessage.msg;\n\n\t\t\tconst attachment = this.getMessageAttachment(rocketMessage);\n\t\t\tif (attachment) {\n\t\t\t\tfileName = Meteor.absoluteUrl(attachment.title_link);\n\t\t\t\tif (!text) {\n\t\t\t\t\ttext = attachment.description;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst message = `${text} ${fileName}`;\n\n\t\t\trocketMessage.msg = message;\n\t\t\tawait slack.postMessage(slack.getSlackChannel(rocketMessage.rid), rocketMessage);\n\t\t}\n\t}\n\n\tasync processMessageChanged(rocketMessage, slack) {\n\t\tif (rocketMessage) {\n\t\t\tif (rocketMessage.updatedBySlack) {\n\t\t\t\t// We have already processed this\n\t\t\t\tdelete rocketMessage.updatedBySlack;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This was a change from Rocket.Chat\n\t\t\tconst slackChannel = slack.getSlackChannel(rocketMessage.rid);\n\t\t\tawait slack.postMessageUpdate(slackChannel, rocketMessage);\n\t\t}\n\t}\n\n\tasync getChannel(slackMessage) {\n\t\treturn slackMessage.channel ? (await this.findChannel(slackMessage.channel)) || this.addChannel(slackMessage.channel) : null;\n\t}\n\n\tasync getUser(slackUser) {\n\t\treturn slackUser ? (await this.findUser(slackUser)) || this.addUser(slackUser) : null;\n\t}\n\n\tcreateRocketID(slackChannel, ts) {\n\t\treturn `slack-${slackChannel}-${ts.replace(/\\./g, '-')}`;\n\t}\n\n\tasync findChannel(slackChannelId) {\n\t\treturn Rooms.findOneByImportId(slackChannelId);\n\t}\n\n\tasync getRocketUsers(members, slackChannel) {\n\t\tconst rocketUsers = [];\n\t\tfor await (const member of members) {\n\t\t\tif (member !== slackChannel.creator) {\n\t\t\t\tconst rocketUser = (await this.findUser(member)) || (await this.addUser(member));\n\t\t\t\tif (rocketUser && rocketUser.username) {\n\t\t\t\t\trocketUsers.push(rocketUser.username);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn rocketUsers;\n\t}\n\n\tasync getRocketUserCreator(slackChannel) {\n\t\treturn slackChannel.creator ? (await this.findUser(slackChannel.creator)) || this.addUser(slackChannel.creator) : null;\n\t}\n\n\tasync addChannel(slackChannelID, hasRetried = false) {\n\t\trocketLogger.debug('Adding Rocket.Chat channel from Slack', slackChannelID);\n\t\tlet addedRoom;\n\n\t\tfor await (const slack of this.slackAdapters) {\n\t\t\tif (addedRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst slackChannel = await slack.slackAPI.getRoomInfo(slackChannelID);\n\t\t\tif (slackChannel) {\n\t\t\t\tconst members = await slack.slackAPI.getMembers(slackChannelID);\n\t\t\t\tif (!members) {\n\t\t\t\t\trocketLogger.error('Could not fetch room members');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rocketRoom = await Rooms.findOneByName(slackChannel.name);\n\n\t\t\t\tif (rocketRoom || slackChannel.is_general) {\n\t\t\t\t\tslackChannel.rocketId = slackChannel.is_general ? 'GENERAL' : rocketRoom._id;\n\t\t\t\t\tawait Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t} else {\n\t\t\t\t\tconst rocketUsers = await this.getRocketUsers(members, slackChannel);\n\t\t\t\t\tconst rocketUserCreator = await this.getRocketUserCreator(slackChannel);\n\n\t\t\t\t\tif (!rocketUserCreator) {\n\t\t\t\t\t\trocketLogger.error({ msg: 'Could not fetch room creator information', creator: slackChannel.creator });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst isPrivate = slackChannel.is_private;\n\t\t\t\t\t\tconst rocketChannel = await createRoom(isPrivate ? 'p' : 'c', slackChannel.name, rocketUserCreator, rocketUsers);\n\t\t\t\t\t\tslackChannel.rocketId = rocketChannel.rid;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (!hasRetried) {\n\t\t\t\t\t\t\trocketLogger.debug('Error adding channel from Slack. Will retry in 1s.', e.message);\n\t\t\t\t\t\t\t// If first time trying to create channel fails, could be because of multiple messages received at the same time. Try again once after 1s.\n\t\t\t\t\t\t\tawait sleep(1000);\n\t\t\t\t\t\t\treturn (await this.findChannel(slackChannelID)) || this.addChannel(slackChannelID, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\trocketLogger.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst roomUpdate = {\n\t\t\t\t\t\tts: new Date(slackChannel.created * 1000),\n\t\t\t\t\t};\n\n\t\t\t\t\tlet lastSetTopic = 0;\n\t\t\t\t\tif (slackChannel.topic && slackChannel.topic.value) {\n\t\t\t\t\t\troomUpdate.topic = slackChannel.topic.value;\n\t\t\t\t\t\tlastSetTopic = slackChannel.topic.last_set;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (slackChannel.purpose && slackChannel.purpose.value && slackChannel.purpose.last_set > lastSetTopic) {\n\t\t\t\t\t\troomUpdate.topic = slackChannel.purpose.value;\n\t\t\t\t\t}\n\t\t\t\t\tawait Rooms.addImportIds(slackChannel.rocketId, slackChannel.id);\n\t\t\t\t\tslack.addSlackChannel(slackChannel.rocketId, slackChannelID);\n\t\t\t\t}\n\n\t\t\t\taddedRoom = await Rooms.findOneById(slackChannel.rocketId);\n\t\t\t}\n\t\t}\n\n\t\tif (!addedRoom) {\n\t\t\trocketLogger.debug('Channel not added');\n\t\t}\n\t\treturn addedRoom;\n\t}\n\n\tasync findUser(slackUserID) {\n\t\tconst rocketUser = await Users.findOneByImportId(slackUserID);\n\t\tif (rocketUser && !this.userTags[slackUserID]) {\n\t\t\tthis.userTags[slackUserID] = {\n\t\t\t\tslack: `<@${slackUserID}>`,\n\t\t\t\trocket: `@${rocketUser.username}`,\n\t\t\t};\n\t\t}\n\t\treturn rocketUser;\n\t}\n\n\tasync addUser(slackUserID) {\n\t\trocketLogger.debug('Adding Rocket.Chat user from Slack', slackUserID);\n\t\tlet addedUser;\n\t\tfor await (const slack of this.slackAdapters) {\n\t\t\tif (addedUser) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst user = await slack.slackAPI.getUser(slackUserID);\n\t\t\tif (user) {\n\t\t\t\tconst rocketUserData = user;\n\t\t\t\tconst isBot = rocketUserData.is_bot === true;\n\t\t\t\tconst email = (rocketUserData.profile && rocketUserData.profile.email) || '';\n\t\t\t\tlet existingRocketUser;\n\t\t\t\tif (!isBot) {\n\t\t\t\t\texistingRocketUser =\n\t\t\t\t\t\t(await Users.findOneByEmailAddress(email)) || (await Users.findOneByUsernameIgnoringCase(rocketUserData.name));\n\t\t\t\t} else {\n\t\t\t\t\texistingRocketUser = await Users.findOneByUsernameIgnoringCase(rocketUserData.name);\n\t\t\t\t}\n\n\t\t\t\tif (existingRocketUser) {\n\t\t\t\t\trocketUserData.rocketId = existingRocketUser._id;\n\t\t\t\t\trocketUserData.name = existingRocketUser.username;\n\t\t\t\t} else {\n\t\t\t\t\tconst newUser = {\n\t\t\t\t\t\tpassword: Random.id(),\n\t\t\t\t\t\tusername: rocketUserData.name,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (!isBot && email) {\n\t\t\t\t\t\tnewUser.email = email;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isBot) {\n\t\t\t\t\t\tnewUser.joinDefaultChannels = false;\n\t\t\t\t\t}\n\n\t\t\t\t\trocketUserData.rocketId = await Accounts.createUserAsync(newUser);\n\t\t\t\t\tconst userUpdate = {\n\t\t\t\t\t\tutcOffset: rocketUserData.tz_offset / 3600, // Slack's is -18000 which translates to Rocket.Chat's after dividing by 3600,\n\t\t\t\t\t\troles: isBot ? ['bot'] : ['user'],\n\t\t\t\t\t};\n\n\t\t\t\t\tif (rocketUserData.profile && rocketUserData.profile.real_name) {\n\t\t\t\t\t\tuserUpdate.name = rocketUserData.profile.real_name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rocketUserData.deleted) {\n\t\t\t\t\t\tuserUpdate.active = false;\n\t\t\t\t\t\tuserUpdate['services.resume.loginTokens'] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tawait Users.updateOne({ _id: rocketUserData.rocketId }, { $set: userUpdate });\n\n\t\t\t\t\tconst user = await Users.findOneById(rocketUserData.rocketId);\n\n\t\t\t\t\tlet url = null;\n\t\t\t\t\tif (rocketUserData.profile) {\n\t\t\t\t\t\tif (rocketUserData.profile.image_original) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_original;\n\t\t\t\t\t\t} else if (rocketUserData.profile.image_512) {\n\t\t\t\t\t\t\turl = rocketUserData.profile.image_512;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (url) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait setUserAvatar(user, url, null, 'url');\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\trocketLogger.debug('Error setting user avatar', error.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst importIds = [rocketUserData.id];\n\t\t\t\tif (isBot && rocketUserData.profile && rocketUserData.profile.bot_id) {\n\t\t\t\t\timportIds.push(rocketUserData.profile.bot_id);\n\t\t\t\t}\n\t\t\t\tawait Users.addImportIds(rocketUserData.rocketId, importIds);\n\t\t\t\tif (!this.userTags[slackUserID]) {\n\t\t\t\t\tthis.userTags[slackUserID] = {\n\t\t\t\t\t\tslack: `<@${slackUserID}>`,\n\t\t\t\t\t\trocket: `@${rocketUserData.name}`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\taddedUser = await Users.findOneById(rocketUserData.rocketId);\n\t\t\t}\n\t\t}\n\n\t\tif (!addedUser) {\n\t\t\trocketLogger.debug('User not added');\n\t\t}\n\n\t\treturn addedUser;\n\t}\n\n\taddAliasToMsg(rocketUserName, rocketMsgObj) {\n\t\tconst aliasFormat = settings.get('SlackBridge_AliasFormat');\n\t\tif (aliasFormat) {\n\t\t\tconst alias = this.util.format(aliasFormat, rocketUserName);\n\n\t\t\tif (alias !== rocketUserName) {\n\t\t\t\trocketMsgObj.alias = alias;\n\t\t\t}\n\t\t}\n\n\t\treturn rocketMsgObj;\n\t}\n\n\tasync createAndSaveMessage(rocketChannel, rocketUser, slackMessage, rocketMsgDataDefaults, isImporting, slack) {\n\t\tif (slackMessage.type === 'message') {\n\t\t\tlet rocketMsgObj = {};\n\t\t\tif (!_.isEmpty(slackMessage.subtype)) {\n\t\t\t\trocketMsgObj = await slack.processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trocketMsgObj = {\n\t\t\t\t\tmsg: await this.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tthis.addAliasToMsg(rocketUser.username, rocketMsgObj);\n\t\t\t}\n\t\t\t_.extend(rocketMsgObj, rocketMsgDataDefaults);\n\t\t\tif (slackMessage.edited) {\n\t\t\t\trocketMsgObj.editedAt = new Date(parseInt(slackMessage.edited.ts.split('.')[0]) * 1000);\n\t\t\t}\n\t\t\trocketMsgObj.slackTs = slackMessage.ts;\n\t\t\tif (slackMessage.thread_ts) {\n\t\t\t\tconst tmessage = await Messages.findOneBySlackTs(slackMessage.thread_ts);\n\t\t\t\tif (tmessage) {\n\t\t\t\t\trocketMsgObj.tmid = tmessage._id;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\t\t}\n\n\t\t\tif (slackMessage.pinned_to && slackMessage.pinned_to.indexOf(slackMessage.channel) !== -1) {\n\t\t\t\trocketMsgObj.pinned = true;\n\t\t\t\trocketMsgObj.pinnedAt = Date.now;\n\t\t\t\trocketMsgObj.pinnedBy = _.pick(rocketUser, '_id', 'username');\n\t\t\t}\n\t\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tif (slackMessage.bot_id && slackMessage.ts) {\n\t\t\t\t\t\t// Make sure that a message with the same bot_id and timestamp doesn't already exists\n\t\t\t\t\t\tconst msg = await Messages.findOneBySlackBotIdAndSlackTs(slackMessage.bot_id, slackMessage.ts);\n\t\t\t\t\t\tif (!msg) {\n\t\t\t\t\t\t\tvoid sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 500);\n\t\t\t} else {\n\t\t\t\trocketLogger.debug('Send message to Rocket.Chat');\n\t\t\t\tawait sendMessage(rocketUser, rocketMsgObj, rocketChannel, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync convertSlackMsgTxtToRocketTxtFormat(slackMsgTxt) {\n\t\tconst regex = /(?:<@)([a-zA-Z0-9]+)(?:\\|.+)?(?:>)/g;\n\t\tif (!_.isEmpty(slackMsgTxt)) {\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!everyone>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!channel>/g, '@all');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<!here>/g, '@here');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&gt;/g, '>');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&lt;/g, '<');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/&amp;/g, '&');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:simple_smile:/g, ':smile:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:memo:/g, ':pencil:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:piggy:/g, ':pig:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/:uk:/g, ':gb:');\n\t\t\tslackMsgTxt = slackMsgTxt.replace(/<(http[s]?:[^>]*)>/g, '$1');\n\n\t\t\tconst promises = [];\n\n\t\t\tslackMsgTxt.replace(regex, async (match, userId) => {\n\t\t\t\tif (!this.userTags[userId]) {\n\t\t\t\t\t(await this.findUser(userId)) || (await this.addUser(userId)); // This adds userTags for the userId\n\t\t\t\t}\n\t\t\t\tconst userTags = this.userTags[userId];\n\t\t\t\tif (userTags) {\n\t\t\t\t\tpromises.push(slackMsgTxt.replace(userTags.slack, userTags.rocket));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst result = await Promise.all(promises);\n\t\t\tslackMsgTxt = slackMsgTxt.replace(regex, () => result.shift());\n\t\t} else {\n\t\t\tslackMsgTxt = '';\n\t\t}\n\t\treturn slackMsgTxt;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d4bf0855bff13ef6fe1a6ab6ed1b43665ff58724"}
