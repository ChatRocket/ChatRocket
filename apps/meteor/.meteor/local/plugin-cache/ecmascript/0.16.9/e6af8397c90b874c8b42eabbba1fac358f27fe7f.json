{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/sodiumplus.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/sodium-plus/lib/sodiumplus.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/sodiumplus.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/sodiumplus.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/sodiumplus.js"}},"code":"!function (module1) {\n  var _slicedToArray;\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 0);\n  var _regeneratorRuntime;\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 1);\n  var Backend = require('./backend');\n  var CryptographyKey = require('./cryptography-key');\n  var Ed25519SecretKey = require('./keytypes/ed25519sk');\n  var Ed25519PublicKey = require('./keytypes/ed25519pk');\n  var LibsodiumWrappersBackend = require('./backend/libsodium-wrappers');\n  var SodiumError = require('./sodium-error');\n  var SodiumNativeBackend = require('./backend/sodiumnative');\n  var X25519PublicKey = require('./keytypes/x25519pk');\n  var X25519SecretKey = require('./keytypes/x25519sk');\n  var Util = require('./util');\n\n  /* istanbul ignore if */\n  if (typeof Buffer === 'undefined') {\n    var _Buffer = require('buffer/').Buffer;\n  }\n  var SodiumPlus = /*#__PURE__*/function () {\n    function SodiumPlus(backend) {\n      /* istanbul ignore if */\n      if (!(backend instanceof Backend)) {\n        throw new TypeError('Backend object must implement the backend function');\n      }\n      this.backend = backend;\n      Util.populateConstants(this);\n    }\n\n    /**\n     * Returns the name of the current active backend.\n     * This method is NOT async.\n     *\n     * @return {string}\n     */\n    var _proto = SodiumPlus.prototype;\n    _proto.getBackendName = function () {\n      function getBackendName() {\n        return this.backend.backendName;\n      }\n      return getBackendName;\n    }()\n    /**\n     * Is this powered by sodium-native?\n     * This method is NOT async.\n     *\n     * @return {boolean}\n     */\n    ;\n    _proto.isSodiumNative = function () {\n      function isSodiumNative() {\n        return this.backend instanceof SodiumNativeBackend;\n      }\n      return isSodiumNative;\n    }()\n    /**\n     * Is this powered by libsodium-wrappers?\n     * This method is NOT async.\n     *\n     * @return {boolean}\n     */\n    ;\n    _proto.isLibsodiumWrappers = function () {\n      function isLibsodiumWrappers() {\n        return this.backend instanceof LibsodiumWrappersBackend;\n      }\n      return isLibsodiumWrappers;\n    }()\n    /**\n     * Automatically select a backend.\n     *\n     * @return {Promise<SodiumPlus>}\n     */\n    ;\n    SodiumPlus.auto = function () {\n      function auto() {\n        var backend;\n        return _regeneratorRuntime.async(function () {\n          function auto$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(SodiumNativeBackend.init());\n              case 3:\n                backend = _context.sent;\n                _context.next = 11;\n                break;\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](0);\n                _context.next = 10;\n                return _regeneratorRuntime.awrap(LibsodiumWrappersBackend.init());\n              case 10:\n                backend = _context.sent;\n              case 11:\n                if (backend) {\n                  _context.next = 15;\n                  break;\n                }\n                _context.next = 14;\n                return _regeneratorRuntime.awrap(LibsodiumWrappersBackend.init());\n              case 14:\n                backend = _context.sent;\n              case 15:\n                Util.populateConstants(backend);\n                return _context.abrupt(\"return\", new SodiumPlus(backend));\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return auto$;\n        }(), null, null, [[0, 6]], Promise);\n      }\n      return auto;\n    }()\n    /**\n     * If our backend isn't defined, it will trigger an autoload.\n     *\n     * Mostly used internally. `await SodiumPlus.auto()` provides the same\n     * exact guarantee as this method.\n     *\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.ensureLoaded = function () {\n      function ensureLoaded() {\n        return _regeneratorRuntime.async(function () {\n          function ensureLoaded$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof this.backend === 'undefined')) {\n                  _context2.next = 11;\n                  break;\n                }\n                _context2.prev = 1;\n                _context2.next = 4;\n                return _regeneratorRuntime.awrap(SodiumPlus.auto());\n              case 4:\n                _context2.next = 11;\n                break;\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n                _context2.next = 10;\n                return _regeneratorRuntime.awrap(LibsodiumWrappersBackend.init());\n              case 10:\n                this.backend = _context2.sent;\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n          return ensureLoaded$;\n        }(), null, this, [[1, 6]], Promise);\n      }\n      return ensureLoaded;\n    }()\n    /**\n     * Decrypt a message (and optional associated data) with XChaCha20-Poly1305\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @param {String|Buffer} assocData\n     * @return {Promise<Buffer>}\n     * @throws {SodiumError}\n     */\n    ;\n    _proto.crypto_aead_xchacha20poly1305_ietf_decrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, nonce, key) {\n        var assocData,\n          _args3 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_decrypt$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                assocData = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : '';\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 3:\n                if (!(nonce.length !== 24)) {\n                  _context3.next = 5;\n                  break;\n                }\n                throw new SodiumError('Argument 2 must be 24 bytes');\n              case 5:\n                if (key instanceof CryptographyKey) {\n                  _context3.next = 7;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of CryptographyKey');\n              case 7:\n                _context3.t0 = _regeneratorRuntime;\n                _context3.t1 = this.backend;\n                _context3.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 11:\n                _context3.t2 = _context3.sent;\n                if (!(assocData.length > 0)) {\n                  _context3.next = 18;\n                  break;\n                }\n                _context3.next = 15;\n                return _regeneratorRuntime.awrap(Util.toBuffer(assocData));\n              case 15:\n                _context3.t3 = _context3.sent;\n                _context3.next = 19;\n                break;\n              case 18:\n                _context3.t3 = null;\n              case 19:\n                _context3.t4 = _context3.t3;\n                _context3.next = 22;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 22:\n                _context3.t5 = _context3.sent;\n                _context3.t6 = key;\n                _context3.t7 = _context3.t1.crypto_aead_xchacha20poly1305_ietf_decrypt.call(_context3.t1, _context3.t2, _context3.t4, _context3.t5, _context3.t6);\n                _context3.next = 27;\n                return _context3.t0.awrap.call(_context3.t0, _context3.t7);\n              case 27:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 28:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_decrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_decrypt;\n    }()\n    /**\n     * Encrypt a message (and optional associated data) with XChaCha20-Poly1305.\n     *\n     * Throws a SodiumError if an invalid ciphertext/AAD is provided for this\n     * nonce and key.\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @param {String|Buffer} assocData\n     * @return {Promise<Buffer>}\n     * @throws {SodiumError}\n     */\n    ;\n    _proto.crypto_aead_xchacha20poly1305_ietf_encrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, nonce, key) {\n        var assocData,\n          _args4 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_encrypt$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                assocData = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : '';\n                _context4.next = 3;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 3:\n                if (!(nonce.length !== 24)) {\n                  _context4.next = 5;\n                  break;\n                }\n                throw new SodiumError('Argument 2 must be 24 bytes');\n              case 5:\n                if (key instanceof CryptographyKey) {\n                  _context4.next = 7;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of CryptographyKey');\n              case 7:\n                _context4.t0 = _regeneratorRuntime;\n                _context4.t1 = this.backend;\n                _context4.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 11:\n                _context4.t2 = _context4.sent;\n                if (!(assocData.length > 0)) {\n                  _context4.next = 18;\n                  break;\n                }\n                _context4.next = 15;\n                return _regeneratorRuntime.awrap(Util.toBuffer(assocData));\n              case 15:\n                _context4.t3 = _context4.sent;\n                _context4.next = 19;\n                break;\n              case 18:\n                _context4.t3 = null;\n              case 19:\n                _context4.t4 = _context4.t3;\n                _context4.next = 22;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 22:\n                _context4.t5 = _context4.sent;\n                _context4.t6 = key;\n                _context4.t7 = _context4.t1.crypto_aead_xchacha20poly1305_ietf_encrypt.call(_context4.t1, _context4.t2, _context4.t4, _context4.t5, _context4.t6);\n                _context4.next = 27;\n                return _context4.t0.awrap.call(_context4.t0, _context4.t7);\n              case 27:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 28:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_encrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_encrypt;\n    }()\n    /**\n     * Generate an XChaCha20-Poly1305 key.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_aead_xchacha20poly1305_ietf_keygen = function () {\n      function crypto_aead_xchacha20poly1305_ietf_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_keygen$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = CryptographyKey;\n                _context5.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(32));\n              case 3:\n                _context5.t1 = _context5.sent;\n                return _context5.abrupt(\"return\", new _context5.t0(_context5.t1));\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_keygen;\n    }()\n    /**\n     * Get an authenticator for a message for a given key.\n     *\n     * Algorithm: HMAC-SHA512 truncated to 32 bytes.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_auth = function () {\n      function crypto_auth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (key instanceof CryptographyKey) {\n                  _context6.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n              case 4:\n                _context6.next = 6;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 6:\n                _context6.t0 = _regeneratorRuntime;\n                _context6.t1 = this.backend;\n                _context6.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 10:\n                _context6.t2 = _context6.sent;\n                _context6.t3 = key;\n                _context6.t4 = _context6.t1.crypto_auth.call(_context6.t1, _context6.t2, _context6.t3);\n                _context6.next = 15;\n                return _context6.t0.awrap.call(_context6.t0, _context6.t4);\n              case 15:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n          return crypto_auth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_auth_keygen = function () {\n      function crypto_auth_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth_keygen$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.t0 = CryptographyKey;\n                _context7.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(32));\n              case 3:\n                _context7.t1 = _context7.sent;\n                return _context7.abrupt(\"return\", new _context7.t0(_context7.t1));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n          return crypto_auth_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth_keygen;\n    }()\n    /**\n     * Verify an authenticator for a message for a given key.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} mac\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_auth_verify = function () {\n      function crypto_auth_verify(message, key, mac) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth_verify$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (key instanceof CryptographyKey) {\n                  _context8.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n              case 4:\n                _context8.next = 6;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 6:\n                _context8.t0 = _regeneratorRuntime;\n                _context8.t1 = this.backend;\n                _context8.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(mac));\n              case 10:\n                _context8.t2 = _context8.sent;\n                _context8.next = 13;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 13:\n                _context8.t3 = _context8.sent;\n                _context8.t4 = key;\n                _context8.t5 = _context8.t1.crypto_auth_verify.call(_context8.t1, _context8.t2, _context8.t3, _context8.t4);\n                _context8.next = 18;\n                return _context8.t0.awrap.call(_context8.t0, _context8.t5);\n              case 18:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 19:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n          return crypto_auth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth_verify;\n    }()\n    /**\n     * Public-key authenticated encryption.\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {X25519SecretKey} myPrivateKey\n     * @param {X25519PublicKey} theirPublicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box = function () {\n      function crypto_box(plaintext, nonce, myPrivateKey, theirPublicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (myPrivateKey instanceof X25519SecretKey) {\n                  _context9.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n              case 4:\n                if (theirPublicKey instanceof X25519PublicKey) {\n                  _context9.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 4 must be an instance of X25519PublicKey');\n              case 6:\n                _context9.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 8:\n                nonce = _context9.sent;\n                if (!(nonce.length !== 24)) {\n                  _context9.next = 11;\n                  break;\n                }\n                throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n              case 11:\n                _context9.t0 = this.backend;\n                _context9.next = 14;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 14:\n                _context9.t1 = _context9.sent;\n                _context9.next = 17;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 17:\n                _context9.t2 = _context9.sent;\n                _context9.t3 = myPrivateKey;\n                _context9.t4 = theirPublicKey;\n                return _context9.abrupt(\"return\", _context9.t0.crypto_box.call(_context9.t0, _context9.t1, _context9.t2, _context9.t3, _context9.t4));\n              case 21:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n          return crypto_box$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box;\n    }()\n    /**\n     * Public-key authenticated decryption.\n     *\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {X25519SecretKey} myPrivateKey\n     * @param {X25519PublicKey} theirPublicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_open = function () {\n      function crypto_box_open(ciphertext, nonce, myPrivateKey, theirPublicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_open$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (myPrivateKey instanceof X25519SecretKey) {\n                  _context10.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n              case 4:\n                if (theirPublicKey instanceof X25519PublicKey) {\n                  _context10.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 4 must be an instance of X25519PublicKey');\n              case 6:\n                _context10.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 8:\n                ciphertext = _context10.sent;\n                if (!(ciphertext.length < 16)) {\n                  _context10.next = 11;\n                  break;\n                }\n                throw new SodiumError('Ciphertext must be a buffer of at least 16 bytes');\n              case 11:\n                _context10.next = 13;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 13:\n                nonce = _context10.sent;\n                if (!(nonce.length !== 24)) {\n                  _context10.next = 16;\n                  break;\n                }\n                throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n              case 16:\n                return _context10.abrupt(\"return\", this.backend.crypto_box_open(ciphertext, nonce, myPrivateKey, theirPublicKey));\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n          return crypto_box_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_open;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_box_keypair = function () {\n      function crypto_box_keypair() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_keypair$(_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context11.abrupt(\"return\", this.backend.crypto_box_keypair());\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n          return crypto_box_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_keypair;\n    }()\n    /**\n     * Combine two X25519 keys (secret, public) into a keypair object.\n     *\n     * @param {X25519SecretKey} sKey\n     * @param {X25519PublicKey} pKey\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_box_keypair_from_secretkey_and_publickey = function () {\n      function crypto_box_keypair_from_secretkey_and_publickey(sKey, pKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_keypair_from_secretkey_and_publickey$(_context12) {\n            while (1) switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (sKey instanceof X25519SecretKey) {\n                  _context12.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n              case 4:\n                if (pKey instanceof X25519PublicKey) {\n                  _context12.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n              case 6:\n                _context12.next = 8;\n                return _regeneratorRuntime.awrap(this.backend.crypto_box_keypair_from_secretkey_and_publickey(sKey, pKey));\n              case 8:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 9:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n          return crypto_box_keypair_from_secretkey_and_publickey$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_keypair_from_secretkey_and_publickey;\n    }()\n    /**\n     * Extract the secret key from an X25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<X25519SecretKey>}\n     */\n    ;\n    _proto.crypto_box_secretkey = function () {\n      function crypto_box_secretkey(keypair) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_secretkey$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(keypair.getLength() !== 64)) {\n                  _context13.next = 2;\n                  break;\n                }\n                throw new SodiumError('Keypair must be 64 bytes');\n              case 2:\n                return _context13.abrupt(\"return\", new X25519SecretKey(Buffer.from(keypair.getBuffer().slice(0, 32))));\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n          return crypto_box_secretkey$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_box_secretkey;\n    }()\n    /**\n     * Extract the public key from an X25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<X25519PublicKey>}\n     */\n    ;\n    _proto.crypto_box_publickey = function () {\n      function crypto_box_publickey(keypair) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_publickey$(_context14) {\n            while (1) switch (_context14.prev = _context14.next) {\n              case 0:\n                if (!(keypair.getLength() !== 64)) {\n                  _context14.next = 2;\n                  break;\n                }\n                throw new SodiumError('Keypair must be 64 bytes');\n              case 2:\n                return _context14.abrupt(\"return\", new X25519PublicKey(Buffer.from(keypair.getBuffer().slice(32, 64))));\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n          return crypto_box_publickey$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_box_publickey;\n    }()\n    /**\n     * Derive the public key from a given X25519 secret key.\n     *\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<X25519PublicKey>}\n     */\n    ;\n    _proto.crypto_box_publickey_from_secretkey = function () {\n      function crypto_box_publickey_from_secretkey(secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_publickey_from_secretkey$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (secretKey instanceof X25519SecretKey) {\n                  _context15.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n              case 4:\n                _context15.t0 = X25519PublicKey;\n                _context15.next = 7;\n                return _regeneratorRuntime.awrap(this.backend.crypto_scalarmult_base(secretKey));\n              case 7:\n                _context15.t1 = _context15.sent;\n                return _context15.abrupt(\"return\", new _context15.t0(_context15.t1));\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n          return crypto_box_publickey_from_secretkey$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_publickey_from_secretkey;\n    }()\n    /**\n     * Anonymous public-key encryption. (Message integrity is still assured.)\n     *\n     * @param {string|Buffer} plaintext\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_seal = function () {\n      function crypto_box_seal(plaintext, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal$(_context16) {\n            while (1) switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (publicKey instanceof X25519PublicKey) {\n                  _context16.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n              case 4:\n                _context16.next = 6;\n                return _regeneratorRuntime.awrap(this.backend.crypto_box_seal(plaintext, publicKey));\n              case 6:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 7:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n          return crypto_box_seal$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal;\n    }()\n    /**\n     * Anonymous public-key decryption. (Message integrity is still assured.)\n     *\n     * @param {Buffer} ciphertext\n     * @param {X25519PublicKey} publicKey\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_seal_open = function () {\n      function crypto_box_seal_open(ciphertext, publicKey, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal_open$(_context17) {\n            while (1) switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (publicKey instanceof X25519PublicKey) {\n                  _context17.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n              case 4:\n                if (secretKey instanceof X25519SecretKey) {\n                  _context17.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n              case 6:\n                _context17.t0 = _regeneratorRuntime;\n                _context17.t1 = this.backend;\n                _context17.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 10:\n                _context17.t2 = _context17.sent;\n                _context17.t3 = publicKey;\n                _context17.t4 = secretKey;\n                _context17.t5 = _context17.t1.crypto_box_seal_open.call(_context17.t1, _context17.t2, _context17.t3, _context17.t4);\n                _context17.next = 16;\n                return _context17.t0.awrap.call(_context17.t0, _context17.t5);\n              case 16:\n                return _context17.abrupt(\"return\", _context17.sent);\n              case 17:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n          return crypto_box_seal_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal_open;\n    }()\n    /**\n     * Generic-purpose cryptographic hash.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash = function () {\n      function crypto_generichash(message) {\n        var key,\n          outputLength,\n          _args18 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash$(_context18) {\n            while (1) switch (_context18.prev = _context18.next) {\n              case 0:\n                key = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : null;\n                outputLength = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : 32;\n                _context18.next = 4;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 4:\n                _context18.next = 6;\n                return _regeneratorRuntime.awrap(this.backend.crypto_generichash(message, key, outputLength));\n              case 6:\n                return _context18.abrupt(\"return\", _context18.sent);\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n          return crypto_generichash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash;\n    }()\n    /**\n     * Initialize a BLAKE2 hash context for stream hashing.\n     *\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_init = function () {\n      function crypto_generichash_init() {\n        var key,\n          outputLength,\n          _args19 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_init$(_context19) {\n            while (1) switch (_context19.prev = _context19.next) {\n              case 0:\n                key = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : null;\n                outputLength = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : 32;\n                _context19.next = 4;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 4:\n                _context19.next = 6;\n                return _regeneratorRuntime.awrap(this.backend.crypto_generichash_init(key, outputLength));\n              case 6:\n                return _context19.abrupt(\"return\", _context19.sent);\n              case 7:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n          return crypto_generichash_init$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_init;\n    }()\n    /**\n     * Update the BLAKE2 hash state with a block of data.\n     *\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    ;\n    _proto.crypto_generichash_update = function () {\n      function crypto_generichash_update(state, message) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_update$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context20.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_generichash_update(state, message));\n              case 4:\n                return _context20.abrupt(\"return\", _context20.sent);\n              case 5:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n          return crypto_generichash_update$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_update;\n    }()\n    /**\n     * Obtain the final BLAKE2 hash output.\n     *\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_final = function () {\n      function crypto_generichash_final(state) {\n        var outputLength,\n          _args21 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_final$(_context21) {\n            while (1) switch (_context21.prev = _context21.next) {\n              case 0:\n                outputLength = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : 32;\n                _context21.next = 3;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 3:\n                _context21.next = 5;\n                return _regeneratorRuntime.awrap(this.backend.crypto_generichash_final(state, outputLength));\n              case 5:\n                return _context21.abrupt(\"return\", _context21.sent);\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n          return crypto_generichash_final$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_final;\n    }()\n    /**\n     * Generate a 256-bit random key for BLAKE2.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_generichash_keygen = function () {\n      function crypto_generichash_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_keygen$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.t0 = CryptographyKey;\n                _context22.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_GENERICHASH_KEYBYTES));\n              case 3:\n                _context22.t1 = _context22.sent;\n                return _context22.abrupt(\"return\", new _context22.t0(_context22.t1));\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n          return crypto_generichash_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_keygen;\n    }()\n    /**\n     * Derive a subkey from a master key.\n     *\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kdf_derive_from_key = function () {\n      function crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kdf_derive_from_key$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (!(length < 1)) {\n                  _context23.next = 4;\n                  break;\n                }\n                throw new SodiumError('Length must be a positive integer.');\n              case 4:\n                if (!(subKeyId < 0)) {\n                  _context23.next = 6;\n                  break;\n                }\n                throw new SodiumError('Key ID must be an unsigned integer');\n              case 6:\n                _context23.next = 8;\n                return _regeneratorRuntime.awrap(this.backend.crypto_kdf_derive_from_key(length, subKeyId, context, key));\n              case 8:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 9:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n          return crypto_kdf_derive_from_key$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kdf_derive_from_key;\n    }()\n    /**\n     * Generate a 256-bit random key for our KDF.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kdf_keygen = function () {\n      function crypto_kdf_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kdf_keygen$(_context24) {\n            while (1) switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.t0 = CryptographyKey;\n                _context24.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_KDF_KEYBYTES));\n              case 3:\n                _context24.t1 = _context24.sent;\n                return _context24.abrupt(\"return\", new _context24.t0(_context24.t1));\n              case 5:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n          return crypto_kdf_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kdf_keygen;\n    }()\n    /**\n     * This is functionally identical to crypto_box_keypair().\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kx_keypair = function () {\n      function crypto_kx_keypair() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_keypair$(_context25) {\n            while (1) switch (_context25.prev = _context25.next) {\n              case 0:\n                return _context25.abrupt(\"return\", this.crypto_box_keypair());\n              case 1:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n          return crypto_kx_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_keypair;\n    }()\n    /**\n     * Generate an X25519 keypair from a seed.\n     *\n     * @param {string|Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kx_seed_keypair = function () {\n      function crypto_kx_seed_keypair(seed) {\n        var sk, pk;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_seed_keypair$(_context26) {\n            while (1) switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context26.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_generichash(seed, null, this.CRYPTO_KX_SECRETKEYBYTES));\n              case 4:\n                sk = _context26.sent;\n                _context26.next = 7;\n                return _regeneratorRuntime.awrap(this.backend.crypto_scalarmult_base(new CryptographyKey(sk)));\n              case 7:\n                pk = _context26.sent;\n                return _context26.abrupt(\"return\", new CryptographyKey(Buffer.concat([sk, pk])));\n              case 9:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n          return crypto_kx_seed_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_seed_keypair;\n    }()\n    /**\n     * Perform a key exchange from the client's perspective.\n     *\n     * Returns an array of two CryptographyKey objects.\n     *\n     * The first is meant for data sent from the server to the client (incoming decryption).\n     * The second is meant for data sent from the client to the server (outgoing encryption).\n     *\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_client_session_keys = function () {\n      function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_client_session_keys$(_context27) {\n            while (1) switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (clientPublicKey instanceof X25519PublicKey) {\n                  _context27.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519PublicKey');\n              case 4:\n                if (clientSecretKey instanceof X25519SecretKey) {\n                  _context27.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519SecretKey');\n              case 6:\n                if (serverPublicKey instanceof X25519PublicKey) {\n                  _context27.next = 8;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of X25519PublicKey');\n              case 8:\n                return _context27.abrupt(\"return\", this.backend.crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey));\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n          return crypto_kx_client_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_client_session_keys;\n    }()\n    /**\n     * Perform a key exchange from the server's perspective.\n     *\n     * Returns an array of two CryptographyKey objects.\n     *\n     * The first is meant for data sent from the client to the server (incoming decryption).\n     * The second is meant for data sent from the server to the client (outgoing encryption).\n     *\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_server_session_keys = function () {\n      function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_server_session_keys$(_context28) {\n            while (1) switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (serverPublicKey instanceof X25519PublicKey) {\n                  _context28.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519PublicKey');\n              case 4:\n                if (serverSecretKey instanceof X25519SecretKey) {\n                  _context28.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519SecretKey');\n              case 6:\n                if (clientPublicKey instanceof X25519PublicKey) {\n                  _context28.next = 8;\n                  break;\n                }\n                throw new TypeError('Argument 3 must be an instance of X25519PublicKey');\n              case 8:\n                return _context28.abrupt(\"return\", this.backend.crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey));\n              case 9:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n          return crypto_kx_server_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_server_session_keys;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_onetimeauth = function () {\n      function crypto_onetimeauth(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth$(_context29) {\n            while (1) switch (_context29.prev = _context29.next) {\n              case 0:\n                if (key instanceof CryptographyKey) {\n                  _context29.next = 2;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n              case 2:\n                _context29.t0 = _regeneratorRuntime;\n                _context29.t1 = this.backend;\n                _context29.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 6:\n                _context29.t2 = _context29.sent;\n                _context29.t3 = key;\n                _context29.t4 = _context29.t1.crypto_onetimeauth.call(_context29.t1, _context29.t2, _context29.t3);\n                _context29.next = 11;\n                return _context29.t0.awrap.call(_context29.t0, _context29.t4);\n              case 11:\n                return _context29.abrupt(\"return\", _context29.sent);\n              case 12:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n          return crypto_onetimeauth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_onetimeauth_verify = function () {\n      function crypto_onetimeauth_verify(message, key, tag) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_verify$(_context30) {\n            while (1) switch (_context30.prev = _context30.next) {\n              case 0:\n                if (key instanceof CryptographyKey) {\n                  _context30.next = 2;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n              case 2:\n                _context30.t0 = _regeneratorRuntime;\n                _context30.t1 = this.backend;\n                _context30.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 6:\n                _context30.t2 = _context30.sent;\n                _context30.t3 = key;\n                _context30.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(tag));\n              case 10:\n                _context30.t4 = _context30.sent;\n                _context30.t5 = _context30.t1.crypto_onetimeauth_verify.call(_context30.t1, _context30.t2, _context30.t3, _context30.t4);\n                _context30.next = 14;\n                return _context30.t0.awrap.call(_context30.t0, _context30.t5);\n              case 14:\n                return _context30.abrupt(\"return\", _context30.sent);\n              case 15:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n          return crypto_onetimeauth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth_verify;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_onetimeauth_keygen = function () {\n      function crypto_onetimeauth_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_keygen$(_context31) {\n            while (1) switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.t0 = CryptographyKey;\n                _context31.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(32));\n              case 3:\n                _context31.t1 = _context31.sent;\n                return _context31.abrupt(\"return\", new _context31.t0(_context31.t1));\n              case 5:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n          return crypto_onetimeauth_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth_keygen;\n    }()\n    /**\n     * Derive a cryptography key from a password and salt.\n     *\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number|null} algorithm\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_pwhash = function () {\n      function crypto_pwhash(length, password, salt, opslimit, memlimit) {\n        var algorithm,\n          _args32 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash$(_context32) {\n            while (1) switch (_context32.prev = _context32.next) {\n              case 0:\n                algorithm = _args32.length > 5 && _args32[5] !== undefined ? _args32[5] : null;\n                _context32.next = 3;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 3:\n                /* istanbul ignore if */\n                if (!algorithm) {\n                  algorithm = this.CRYPTO_PWHASH_ALG_DEFAULT;\n                }\n                _context32.t0 = CryptographyKey;\n                _context32.t1 = _regeneratorRuntime;\n                _context32.t2 = this.backend;\n                _context32.t3 = length;\n                _context32.next = 10;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 10:\n                _context32.t4 = _context32.sent;\n                _context32.next = 13;\n                return _regeneratorRuntime.awrap(Util.toBuffer(salt));\n              case 13:\n                _context32.t5 = _context32.sent;\n                _context32.t6 = opslimit;\n                _context32.t7 = memlimit;\n                _context32.t8 = algorithm;\n                _context32.t9 = _context32.t2.crypto_pwhash.call(_context32.t2, _context32.t3, _context32.t4, _context32.t5, _context32.t6, _context32.t7, _context32.t8);\n                _context32.next = 20;\n                return _context32.t1.awrap.call(_context32.t1, _context32.t9);\n              case 20:\n                _context32.t10 = _context32.sent;\n                return _context32.abrupt(\"return\", new _context32.t0(_context32.t10));\n              case 22:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n          return crypto_pwhash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash;\n    }()\n    /**\n     * Get a password hash (in a safe-for-storage format)\n     *\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.crypto_pwhash_str = function () {\n      function crypto_pwhash_str(password, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str$(_context33) {\n            while (1) switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context33.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_pwhash_str(password, opslimit, memlimit));\n              case 4:\n                return _context33.abrupt(\"return\", _context33.sent);\n              case 5:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n          return crypto_pwhash_str$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str;\n    }()\n    /**\n     * Verify a password against a known password hash\n     *\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_verify = function () {\n      function crypto_pwhash_str_verify(password, hash) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_verify$(_context34) {\n            while (1) switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context34.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_pwhash_str_verify(password, hash));\n              case 4:\n                return _context34.abrupt(\"return\", _context34.sent);\n              case 5:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n          return crypto_pwhash_str_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str_verify;\n    }()\n    /**\n     * Does this password need to be rehashed?\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_needs_rehash = function () {\n      function crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_needs_rehash$(_context35) {\n            while (1) switch (_context35.prev = _context35.next) {\n              case 0:\n                _context35.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context35.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit));\n              case 4:\n                return _context35.abrupt(\"return\", _context35.sent);\n              case 5:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n          return crypto_pwhash_str_needs_rehash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str_needs_rehash;\n    }()\n    /**\n     * Elliptic Curve Diffie-Hellman key exchange\n     *\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_scalarmult = function () {\n      function crypto_scalarmult(secretKey, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult$(_context36) {\n            while (1) switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (secretKey instanceof X25519SecretKey) {\n                  _context36.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n              case 4:\n                if (publicKey instanceof X25519PublicKey) {\n                  _context36.next = 6;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n              case 6:\n                _context36.next = 8;\n                return _regeneratorRuntime.awrap(this.backend.crypto_scalarmult(secretKey, publicKey));\n              case 8:\n                return _context36.abrupt(\"return\", _context36.sent);\n              case 9:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n          return crypto_scalarmult$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult;\n    }()\n    /**\n     * Generate an X25519PublicKey from an X25519SecretKey\n     *\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<X25519PublicKey>}\n     */\n    ;\n    _proto.crypto_scalarmult_base = function () {\n      function crypto_scalarmult_base(secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult_base$(_context37) {\n            while (1) switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (secretKey instanceof X25519SecretKey) {\n                  _context37.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n              case 4:\n                _context37.t0 = X25519PublicKey;\n                _context37.next = 7;\n                return _regeneratorRuntime.awrap(this.backend.crypto_scalarmult_base(secretKey));\n              case 7:\n                _context37.t1 = _context37.sent;\n                return _context37.abrupt(\"return\", new _context37.t0(_context37.t1));\n              case 9:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n          return crypto_scalarmult_base$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult_base;\n    }()\n    /**\n     * Shared-key authenticated encryption\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox = function () {\n      function crypto_secretbox(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox$(_context38) {\n            while (1) switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (!(key.isEd25519Key() || key.isX25519Key())) {\n                  _context38.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 3 must not be an asymmetric key');\n              case 4:\n                _context38.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 6:\n                nonce = _context38.sent;\n                if (!(nonce.length !== 24)) {\n                  _context38.next = 9;\n                  break;\n                }\n                throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n              case 9:\n                _context38.next = 11;\n                return _regeneratorRuntime.awrap(this.backend.crypto_secretbox(plaintext, nonce, key));\n              case 11:\n                return _context38.abrupt(\"return\", _context38.sent);\n              case 12:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n          return crypto_secretbox$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox;\n    }()\n    /**\n     * Shared-key authenticated decryption\n     *\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox_open = function () {\n      function crypto_secretbox_open(ciphertext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox_open$(_context39) {\n            while (1) switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (!(key.isEd25519Key() || key.isX25519Key())) {\n                  _context39.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 3 must not be an asymmetric key');\n              case 4:\n                _context39.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 6:\n                ciphertext = _context39.sent;\n                if (!(ciphertext.length < 16)) {\n                  _context39.next = 9;\n                  break;\n                }\n                throw new SodiumError('Ciphertext must be a buffer of at least 16 bytes');\n              case 9:\n                _context39.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 11:\n                nonce = _context39.sent;\n                if (!(nonce.length !== 24)) {\n                  _context39.next = 14;\n                  break;\n                }\n                throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n              case 14:\n                _context39.next = 16;\n                return _regeneratorRuntime.awrap(this.backend.crypto_secretbox_open(ciphertext, nonce, key));\n              case 16:\n                return _context39.abrupt(\"return\", _context39.sent);\n              case 17:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n          return crypto_secretbox_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox_open;\n    }()\n    /**\n     * Generate a key for shared-key authenticated encryption.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_secretbox_keygen = function () {\n      function crypto_secretbox_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox_keygen$(_context40) {\n            while (1) switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.t0 = CryptographyKey;\n                _context40.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_SECRETBOX_KEYBYTES));\n              case 3:\n                _context40.t1 = _context40.sent;\n                return _context40.abrupt(\"return\", new _context40.t0(_context40.t1));\n              case 5:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n          return crypto_secretbox_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox_keygen;\n    }()\n    /**\n     * Internalize the internal state and a random header for stream encryption.\n     *\n     * @param {CryptographyKey} key\n     * @return {Promise<array>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_push = function () {\n      function crypto_secretstream_xchacha20poly1305_init_push(key) {\n        var _await$this$backend$c, _await$this$backend$c2, state, header;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_push$(_context41) {\n            while (1) switch (_context41.prev = _context41.next) {\n              case 0:\n                _context41.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (key instanceof CryptographyKey) {\n                  _context41.next = 4;\n                  break;\n                }\n                throw new TypeError('Key must be an instance of CryptographyKey');\n              case 4:\n                if (!(key.getLength() !== 32)) {\n                  _context41.next = 6;\n                  break;\n                }\n                throw new SodiumError('crypto_secretstream keys must be 32 bytes long');\n              case 6:\n                _context41.next = 8;\n                return _regeneratorRuntime.awrap(this.backend.crypto_secretstream_xchacha20poly1305_init_push(key));\n              case 8:\n                _await$this$backend$c = _context41.sent;\n                _await$this$backend$c2 = _slicedToArray(_await$this$backend$c, 2);\n                state = _await$this$backend$c2[0];\n                header = _await$this$backend$c2[1];\n                return _context41.abrupt(\"return\", Object.freeze({\n                  header: header,\n                  push: this.crypto_secretstream_xchacha20poly1305_push.bind(this, state),\n                  rekey: this.crypto_secretstream_xchacha20poly1305_rekey.bind(this, state)\n                }));\n              case 13:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_push;\n    }()\n    /**\n     * Initialize the internal state for stream decryption.\n     *\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_init_pull(key, header) {\n        var state;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_pull$(_context42) {\n            while (1) switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context42.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(header));\n              case 4:\n                header = _context42.sent;\n                if (!(header.length !== 24)) {\n                  _context42.next = 7;\n                  break;\n                }\n                throw new SodiumError('crypto_secretstream headers must be 24 bytes long');\n              case 7:\n                if (key instanceof CryptographyKey) {\n                  _context42.next = 9;\n                  break;\n                }\n                throw new TypeError('Key must be an instance of CryptographyKey');\n              case 9:\n                if (!(key.getLength() !== 32)) {\n                  _context42.next = 11;\n                  break;\n                }\n                throw new SodiumError('crypto_secretstream keys must be 32 bytes long');\n              case 11:\n                _context42.next = 13;\n                return _regeneratorRuntime.awrap(this.backend.crypto_secretstream_xchacha20poly1305_init_pull(header, key));\n              case 13:\n                state = _context42.sent;\n                return _context42.abrupt(\"return\", Object.freeze({\n                  pull: this.crypto_secretstream_xchacha20poly1305_pull.bind(this, state)\n                }));\n              case 15:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_pull;\n    }()\n    /**\n     * Stream encryption.\n     *\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_push = function () {\n      function crypto_secretstream_xchacha20poly1305_push(state, message) {\n        var ad,\n          tag,\n          _args43 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_push$(_context43) {\n            while (1) switch (_context43.prev = _context43.next) {\n              case 0:\n                ad = _args43.length > 2 && _args43[2] !== undefined ? _args43[2] : '';\n                tag = _args43.length > 3 && _args43[3] !== undefined ? _args43[3] : 0;\n                _context43.next = 4;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 4:\n                return _context43.abrupt(\"return\", this.backend.crypto_secretstream_xchacha20poly1305_push(state, message, ad, tag));\n              case 5:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_push;\n    }()\n    /**\n     * Stream decryption.\n     *\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n        var ad,\n          tag,\n          _args44 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_pull$(_context44) {\n            while (1) switch (_context44.prev = _context44.next) {\n              case 0:\n                ad = _args44.length > 2 && _args44[2] !== undefined ? _args44[2] : '';\n                tag = _args44.length > 3 && _args44[3] !== undefined ? _args44[3] : 0;\n                _context44.next = 4;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 4:\n                return _context44.abrupt(\"return\", this.backend.crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad, tag));\n              case 5:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_pull;\n    }()\n    /**\n     * Deterministic rekeying.\n     *\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_rekey = function () {\n      function crypto_secretstream_xchacha20poly1305_rekey(state) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_rekey$(_context45) {\n            while (1) switch (_context45.prev = _context45.next) {\n              case 0:\n                _context45.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context45.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.crypto_secretstream_xchacha20poly1305_rekey(state));\n              case 4:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_rekey$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_rekey;\n    }()\n    /**\n     * Generate a key for shared-key authenticated encryption.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_keygen = function () {\n      function crypto_secretstream_xchacha20poly1305_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_keygen$(_context46) {\n            while (1) switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.t0 = CryptographyKey;\n                _context46.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES));\n              case 3:\n                _context46.t1 = _context46.sent;\n                return _context46.abrupt(\"return\", new _context46.t0(_context46.t1));\n              case 5:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_keygen;\n    }()\n    /**\n     * Calculate a fast hash for short inputs.\n     *\n     * Algorithm: SipHash-2-4\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_shorthash = function () {\n      function crypto_shorthash(message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_shorthash$(_context47) {\n            while (1) switch (_context47.prev = _context47.next) {\n              case 0:\n                _context47.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context47.t0 = _regeneratorRuntime;\n                _context47.t1 = this.backend;\n                _context47.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 6:\n                _context47.t2 = _context47.sent;\n                _context47.t3 = key;\n                _context47.t4 = _context47.t1.crypto_shorthash.call(_context47.t1, _context47.t2, _context47.t3);\n                _context47.next = 11;\n                return _context47.t0.awrap.call(_context47.t0, _context47.t4);\n              case 11:\n                return _context47.abrupt(\"return\", _context47.sent);\n              case 12:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n          return crypto_shorthash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_shorthash;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_shorthash_keygen = function () {\n      function crypto_shorthash_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_shorthash_keygen$(_context48) {\n            while (1) switch (_context48.prev = _context48.next) {\n              case 0:\n                _context48.t0 = CryptographyKey;\n                _context48.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_SHORTHASH_KEYBYTES));\n              case 3:\n                _context48.t1 = _context48.sent;\n                return _context48.abrupt(\"return\", new _context48.t0(_context48.t1));\n              case 5:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n          return crypto_shorthash_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_shorthash_keygen;\n    }()\n    /**\n     * Returns a signed message.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign = function () {\n      function crypto_sign(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign$(_context49) {\n            while (1) switch (_context49.prev = _context49.next) {\n              case 0:\n                _context49.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (secretKey instanceof Ed25519SecretKey) {\n                  _context49.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of Ed25519SecretKey');\n              case 4:\n                return _context49.abrupt(\"return\", this.backend.crypto_sign(message, secretKey));\n              case 5:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n          return crypto_sign$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign;\n    }()\n    /**\n     * Given a signed message, verify the Ed25519 signature. If it matches, return the\n     * bare message (no signature).\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_open = function () {\n      function crypto_sign_open(message, publicKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_open$(_context50) {\n            while (1) switch (_context50.prev = _context50.next) {\n              case 0:\n                _context50.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (publicKey instanceof Ed25519PublicKey) {\n                  _context50.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of Ed25519PublicKey');\n              case 4:\n                return _context50.abrupt(\"return\", this.backend.crypto_sign_open(message, publicKey));\n              case 5:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n          return crypto_sign_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_open;\n    }()\n    /**\n     * Returns the Ed25519 signature of the message, for the given secret key.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_detached = function () {\n      function crypto_sign_detached(message, secretKey) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_detached$(_context51) {\n            while (1) switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (secretKey instanceof Ed25519SecretKey) {\n                  _context51.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of Ed25519SecretKey');\n              case 4:\n                return _context51.abrupt(\"return\", this.backend.crypto_sign_detached(message, secretKey));\n              case 5:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n          return crypto_sign_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_detached;\n    }()\n    /**\n     * Returns true if the Ed25519 signature is valid for a given message and public key.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_sign_verify_detached = function () {\n      function crypto_sign_verify_detached(message, publicKey, signature) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_verify_detached$(_context52) {\n            while (1) switch (_context52.prev = _context52.next) {\n              case 0:\n                _context52.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (publicKey instanceof Ed25519PublicKey) {\n                  _context52.next = 4;\n                  break;\n                }\n                throw new TypeError('Argument 2 must be an instance of Ed25519PublicKey');\n              case 4:\n                return _context52.abrupt(\"return\", this.backend.crypto_sign_verify_detached(message, publicKey, signature));\n              case 5:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n          return crypto_sign_verify_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_verify_detached;\n    }()\n    /**\n     * Extract the secret key from an Ed25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<Ed25519SecretKey>}\n     */\n    ;\n    _proto.crypto_sign_secretkey = function () {\n      function crypto_sign_secretkey(keypair) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_secretkey$(_context53) {\n            while (1) switch (_context53.prev = _context53.next) {\n              case 0:\n                if (!(keypair.getLength() !== 96)) {\n                  _context53.next = 2;\n                  break;\n                }\n                throw new SodiumError('Keypair must be 96 bytes');\n              case 2:\n                _context53.t0 = Ed25519SecretKey;\n                _context53.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(keypair.getBuffer().slice(0, 64)));\n              case 5:\n                _context53.t1 = _context53.sent;\n                return _context53.abrupt(\"return\", new _context53.t0(_context53.t1));\n              case 7:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n          return crypto_sign_secretkey$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_sign_secretkey;\n    }()\n    /**\n     * Extract the public key from an Ed25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<Ed25519PublicKey>}\n     */\n    ;\n    _proto.crypto_sign_publickey = function () {\n      function crypto_sign_publickey(keypair) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_publickey$(_context54) {\n            while (1) switch (_context54.prev = _context54.next) {\n              case 0:\n                if (!(keypair.getLength() !== 96)) {\n                  _context54.next = 2;\n                  break;\n                }\n                throw new SodiumError('Keypair must be 96 bytes');\n              case 2:\n                return _context54.abrupt(\"return\", new Ed25519PublicKey(keypair.getBuffer().slice(64, 96)));\n              case 3:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n          return crypto_sign_publickey$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_sign_publickey;\n    }()\n    /**\n     * Generate an Ed25519 keypair object.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_keypair = function () {\n      function crypto_sign_keypair() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_keypair$(_context55) {\n            while (1) switch (_context55.prev = _context55.next) {\n              case 0:\n                _context55.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context55.abrupt(\"return\", this.backend.crypto_sign_keypair());\n              case 3:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n          return crypto_sign_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_keypair;\n    }()\n    /**\n     * Generate an Ed25519 keypair object from a seed.\n     *\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_seed_keypair = function () {\n      function crypto_sign_seed_keypair(seed) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_seed_keypair$(_context56) {\n            while (1) switch (_context56.prev = _context56.next) {\n              case 0:\n                _context56.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                if (seed instanceof CryptographyKey) {\n                  seed = seed.getBuffer();\n                }\n                _context56.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(seed));\n              case 5:\n                seed = _context56.sent;\n                if (!(seed.length !== 32)) {\n                  _context56.next = 8;\n                  break;\n                }\n                throw new SodiumError(\"Seed must be 32 bytes long; got \" + seed.length);\n              case 8:\n                return _context56.abrupt(\"return\", this.backend.crypto_sign_seed_keypair(seed));\n              case 9:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n          return crypto_sign_seed_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_seed_keypair;\n    }()\n    /**\n     * Obtain a birationally equivalent X25519 secret key,\n     * given an Ed25519 secret key.\n     *\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<X25519SecretKey>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_sk_to_curve25519 = function () {\n      function crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_sk_to_curve25519$(_context57) {\n            while (1) switch (_context57.prev = _context57.next) {\n              case 0:\n                _context57.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context57.t0 = X25519SecretKey;\n                _context57.next = 5;\n                return _regeneratorRuntime.awrap(this.backend.crypto_sign_ed25519_sk_to_curve25519(sk));\n              case 5:\n                _context57.t1 = _context57.sent;\n                return _context57.abrupt(\"return\", new _context57.t0(_context57.t1));\n              case 7:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n          return crypto_sign_ed25519_sk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_sk_to_curve25519;\n    }()\n    /**\n     * Obtain a birationally equivalent X25519 public key,\n     * given an Ed25519 public key.\n     *\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<X25519PublicKey>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_pk_to_curve25519 = function () {\n      function crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_pk_to_curve25519$(_context58) {\n            while (1) switch (_context58.prev = _context58.next) {\n              case 0:\n                _context58.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context58.t0 = X25519PublicKey;\n                _context58.next = 5;\n                return _regeneratorRuntime.awrap(this.backend.crypto_sign_ed25519_pk_to_curve25519(pk));\n              case 5:\n                _context58.t1 = _context58.sent;\n                return _context58.abrupt(\"return\", new _context58.t0(_context58.t1));\n              case 7:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n          return crypto_sign_ed25519_pk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_pk_to_curve25519;\n    }()\n    /**\n     * Generate an arbitrary number of pseudorandom bytes from a given\n     * nonce and key.\n     *\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream = function () {\n      function crypto_stream(length, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream$(_context59) {\n            while (1) switch (_context59.prev = _context59.next) {\n              case 0:\n                _context59.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context59.abrupt(\"return\", this.backend.crypto_stream(length, nonce, key));\n              case 3:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n          return crypto_stream$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream;\n    }()\n    /**\n     * Encrypts a string (without authentication).\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream_xor = function () {\n      function crypto_stream_xor(plaintext, nonce, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_xor$(_context60) {\n            while (1) switch (_context60.prev = _context60.next) {\n              case 0:\n                _context60.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context60.abrupt(\"return\", this.backend.crypto_stream_xor(plaintext, nonce, key));\n              case 3:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n          return crypto_stream_xor$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream_xor;\n    }()\n    /**\n     * Generate a key for stream ciphers.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_stream_keygen = function () {\n      function crypto_stream_keygen() {\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_keygen$(_context61) {\n            while (1) switch (_context61.prev = _context61.next) {\n              case 0:\n                _context61.t0 = CryptographyKey;\n                _context61.next = 3;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(this.CRYPTO_STREAM_KEYBYTES));\n              case 3:\n                _context61.t1 = _context61.sent;\n                return _context61.abrupt(\"return\", new _context61.t0(_context61.t1));\n              case 5:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n          return crypto_stream_keygen$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream_keygen;\n    }()\n    /**\n     * Returns a buffer filled with random bytes.\n     *\n     * @param {number} num\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.randombytes_buf = function () {\n      function randombytes_buf(num) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_buf$(_context62) {\n            while (1) switch (_context62.prev = _context62.next) {\n              case 0:\n                _context62.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context62.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.randombytes_buf(num));\n              case 4:\n                return _context62.abrupt(\"return\", _context62.sent);\n              case 5:\n              case \"end\":\n                return _context62.stop();\n            }\n          }\n          return randombytes_buf$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_buf;\n    }()\n    /**\n     * Generate an integer between 0 and upperBound (non-inclusive).\n     *\n     * For example, randombytes_uniform(10) returns an integer between 0 and 9.\n     *\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.randombytes_uniform = function () {\n      function randombytes_uniform(upperBound) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_uniform$(_context63) {\n            while (1) switch (_context63.prev = _context63.next) {\n              case 0:\n                _context63.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context63.abrupt(\"return\", this.backend.randombytes_uniform(upperBound));\n              case 3:\n              case \"end\":\n                return _context63.stop();\n            }\n          }\n          return randombytes_uniform$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_uniform;\n    }()\n    /**\n     * Add two buffers (little-endian). Returns the value.\n     *\n     * @param {Buffer} val\n     * @param {Buffer} addv\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_add = function () {\n      function sodium_add(val, addv) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_add$(_context64) {\n            while (1) switch (_context64.prev = _context64.next) {\n              case 0:\n                _context64.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context64.t0 = _regeneratorRuntime;\n                _context64.t1 = this.backend;\n                _context64.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(val));\n              case 6:\n                _context64.t2 = _context64.sent;\n                _context64.next = 9;\n                return _regeneratorRuntime.awrap(Util.toBuffer(addv));\n              case 9:\n                _context64.t3 = _context64.sent;\n                _context64.t4 = _context64.t1.sodium_add.call(_context64.t1, _context64.t2, _context64.t3);\n                _context64.next = 13;\n                return _context64.t0.awrap.call(_context64.t0, _context64.t4);\n              case 13:\n                return _context64.abrupt(\"return\", _context64.sent);\n              case 14:\n              case \"end\":\n                return _context64.stop();\n            }\n          }\n          return sodium_add$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_add;\n    }()\n    /**\n     * Convert to hex.\n     *\n     * @param {Buffer} decoded\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_bin2hex = function () {\n      function sodium_bin2hex(decoded) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_bin2hex$(_context65) {\n            while (1) switch (_context65.prev = _context65.next) {\n              case 0:\n                _context65.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context65.abrupt(\"return\", this.backend.sodium_bin2hex(decoded));\n              case 3:\n              case \"end\":\n                return _context65.stop();\n            }\n          }\n          return sodium_bin2hex$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_bin2hex;\n    }()\n    /**\n     * Compare two buffers in constant time.\n     *\n     * Returns -1 if b1 is less than b2.\n     * Returns  1 if b1 is greater than b2.\n     * Returns  0 if b1 is equal to b2.\n     *\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.sodium_compare = function () {\n      function sodium_compare(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_compare$(_context66) {\n            while (1) switch (_context66.prev = _context66.next) {\n              case 0:\n                _context66.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context66.abrupt(\"return\", this.backend.sodium_compare(b1, b2));\n              case 3:\n              case \"end\":\n                return _context66.stop();\n            }\n          }\n          return sodium_compare$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_compare;\n    }()\n    /**\n     * Convert to hex.\n     *\n     * @param {Buffer|string} encoded\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.sodium_hex2bin = function () {\n      function sodium_hex2bin(encoded) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_hex2bin$(_context67) {\n            while (1) switch (_context67.prev = _context67.next) {\n              case 0:\n                _context67.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context67.abrupt(\"return\", this.backend.sodium_hex2bin(encoded));\n              case 3:\n              case \"end\":\n                return _context67.stop();\n            }\n          }\n          return sodium_hex2bin$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_hex2bin;\n    }()\n    /**\n     * Increment a buffer (little endian). Overwrites the buffer in-place.\n     *\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_increment = function () {\n      function sodium_increment(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_increment$(_context68) {\n            while (1) switch (_context68.prev = _context68.next) {\n              case 0:\n                _context68.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context68.abrupt(\"return\", this.backend.sodium_increment(buf));\n              case 3:\n              case \"end\":\n                return _context68.stop();\n            }\n          }\n          return sodium_increment$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_increment;\n    }()\n    /**\n     * Returns true if the buffer is zero.\n     *\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_is_zero = function () {\n      function sodium_is_zero(buf, len) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_is_zero$(_context69) {\n            while (1) switch (_context69.prev = _context69.next) {\n              case 0:\n                _context69.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context69.abrupt(\"return\", this.backend.sodium_is_zero(buf, len));\n              case 3:\n              case \"end\":\n                return _context69.stop();\n            }\n          }\n          return sodium_is_zero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_is_zero;\n    }()\n    /**\n     * Timing-safe buffer comparison.\n     *\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.sodium_memcmp = function () {\n      function sodium_memcmp(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memcmp$(_context70) {\n            while (1) switch (_context70.prev = _context70.next) {\n              case 0:\n                _context70.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context70.abrupt(\"return\", this.backend.sodium_memcmp(b1, b2));\n              case 3:\n              case \"end\":\n                return _context70.stop();\n            }\n          }\n          return sodium_memcmp$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memcmp;\n    }()\n    /**\n     * Zero out a buffer. Overwrites the buffer in-place.\n     *\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.sodium_memzero = function () {\n      function sodium_memzero(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memzero$(_context71) {\n            while (1) switch (_context71.prev = _context71.next) {\n              case 0:\n                _context71.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                _context71.next = 4;\n                return _regeneratorRuntime.awrap(this.backend.sodium_memzero(buf));\n              case 4:\n              case \"end\":\n                return _context71.stop();\n            }\n          }\n          return sodium_memzero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memzero;\n    }()\n    /**\n     * Pad a string.\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_pad = function () {\n      function sodium_pad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_pad$(_context72) {\n            while (1) switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context72.abrupt(\"return\", this.backend.sodium_pad(buf, blockSize));\n              case 3:\n              case \"end\":\n                return _context72.stop();\n            }\n          }\n          return sodium_pad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_pad;\n    }()\n    /**\n     * Unpad a string.\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_unpad = function () {\n      function sodium_unpad(buf, blockSize) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_unpad$(_context73) {\n            while (1) switch (_context73.prev = _context73.next) {\n              case 0:\n                _context73.next = 2;\n                return _regeneratorRuntime.awrap(this.ensureLoaded());\n              case 2:\n                return _context73.abrupt(\"return\", this.backend.sodium_unpad(buf, blockSize));\n              case 3:\n              case \"end\":\n                return _context73.stop();\n            }\n          }\n          return sodium_unpad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_unpad;\n    }();\n    return SodiumPlus;\n  }();\n  module.exports = SodiumPlus;\n}.call(this, module);","map":{"version":3,"names":["_slicedToArray","module1","link","default","v","_regeneratorRuntime","Backend","require","CryptographyKey","Ed25519SecretKey","Ed25519PublicKey","LibsodiumWrappersBackend","SodiumError","SodiumNativeBackend","X25519PublicKey","X25519SecretKey","Util","Buffer","SodiumPlus","backend","TypeError","populateConstants","_proto","prototype","getBackendName","backendName","isSodiumNative","isLibsodiumWrappers","auto","async","auto$","_context","prev","next","awrap","init","sent","t0","abrupt","stop","Promise","ensureLoaded","ensureLoaded$","_context2","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","nonce","key","assocData","_args3","arguments","crypto_aead_xchacha20poly1305_ietf_decrypt$","_context3","length","undefined","t1","toBuffer","t2","t3","t4","t5","t6","t7","call","crypto_aead_xchacha20poly1305_ietf_encrypt","plaintext","_args4","crypto_aead_xchacha20poly1305_ietf_encrypt$","_context4","crypto_aead_xchacha20poly1305_ietf_keygen","crypto_aead_xchacha20poly1305_ietf_keygen$","_context5","randombytes_buf","crypto_auth","message","crypto_auth$","_context6","crypto_auth_keygen","crypto_auth_keygen$","_context7","crypto_auth_verify","mac","crypto_auth_verify$","_context8","crypto_box","myPrivateKey","theirPublicKey","crypto_box$","_context9","crypto_box_open","crypto_box_open$","_context10","crypto_box_keypair","crypto_box_keypair$","_context11","crypto_box_keypair_from_secretkey_and_publickey","sKey","pKey","crypto_box_keypair_from_secretkey_and_publickey$","_context12","crypto_box_secretkey","keypair","crypto_box_secretkey$","_context13","getLength","from","getBuffer","slice","crypto_box_publickey","crypto_box_publickey$","_context14","crypto_box_publickey_from_secretkey","secretKey","crypto_box_publickey_from_secretkey$","_context15","crypto_scalarmult_base","crypto_box_seal","publicKey","crypto_box_seal$","_context16","crypto_box_seal_open","crypto_box_seal_open$","_context17","crypto_generichash","outputLength","_args18","crypto_generichash$","_context18","crypto_generichash_init","_args19","crypto_generichash_init$","_context19","crypto_generichash_update","state","crypto_generichash_update$","_context20","crypto_generichash_final","_args21","crypto_generichash_final$","_context21","crypto_generichash_keygen","crypto_generichash_keygen$","_context22","CRYPTO_GENERICHASH_KEYBYTES","crypto_kdf_derive_from_key","subKeyId","context","crypto_kdf_derive_from_key$","_context23","crypto_kdf_keygen","crypto_kdf_keygen$","_context24","CRYPTO_KDF_KEYBYTES","crypto_kx_keypair","crypto_kx_keypair$","_context25","crypto_kx_seed_keypair","seed","sk","pk","crypto_kx_seed_keypair$","_context26","CRYPTO_KX_SECRETKEYBYTES","concat","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","crypto_kx_client_session_keys$","_context27","crypto_kx_server_session_keys","serverSecretKey","crypto_kx_server_session_keys$","_context28","crypto_onetimeauth","crypto_onetimeauth$","_context29","crypto_onetimeauth_verify","tag","crypto_onetimeauth_verify$","_context30","crypto_onetimeauth_keygen","crypto_onetimeauth_keygen$","_context31","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","_args32","crypto_pwhash$","_context32","CRYPTO_PWHASH_ALG_DEFAULT","t8","t9","t10","crypto_pwhash_str","crypto_pwhash_str$","_context33","crypto_pwhash_str_verify","hash","crypto_pwhash_str_verify$","_context34","crypto_pwhash_str_needs_rehash","crypto_pwhash_str_needs_rehash$","_context35","crypto_scalarmult","crypto_scalarmult$","_context36","crypto_scalarmult_base$","_context37","crypto_secretbox","crypto_secretbox$","_context38","isEd25519Key","isX25519Key","crypto_secretbox_open","crypto_secretbox_open$","_context39","crypto_secretbox_keygen","crypto_secretbox_keygen$","_context40","CRYPTO_SECRETBOX_KEYBYTES","crypto_secretstream_xchacha20poly1305_init_push","_await$this$backend$c","_await$this$backend$c2","header","crypto_secretstream_xchacha20poly1305_init_push$","_context41","Object","freeze","push","crypto_secretstream_xchacha20poly1305_push","bind","rekey","crypto_secretstream_xchacha20poly1305_rekey","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_pull$","_context42","pull","crypto_secretstream_xchacha20poly1305_pull","ad","_args43","crypto_secretstream_xchacha20poly1305_push$","_context43","_args44","crypto_secretstream_xchacha20poly1305_pull$","_context44","crypto_secretstream_xchacha20poly1305_rekey$","_context45","crypto_secretstream_xchacha20poly1305_keygen","crypto_secretstream_xchacha20poly1305_keygen$","_context46","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES","crypto_shorthash","crypto_shorthash$","_context47","crypto_shorthash_keygen","crypto_shorthash_keygen$","_context48","CRYPTO_SHORTHASH_KEYBYTES","crypto_sign","crypto_sign$","_context49","crypto_sign_open","crypto_sign_open$","_context50","crypto_sign_detached","crypto_sign_detached$","_context51","crypto_sign_verify_detached","signature","crypto_sign_verify_detached$","_context52","crypto_sign_secretkey","crypto_sign_secretkey$","_context53","crypto_sign_publickey","crypto_sign_publickey$","_context54","crypto_sign_keypair","crypto_sign_keypair$","_context55","crypto_sign_seed_keypair","crypto_sign_seed_keypair$","_context56","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_sk_to_curve25519$","_context57","crypto_sign_ed25519_pk_to_curve25519","crypto_sign_ed25519_pk_to_curve25519$","_context58","crypto_stream","crypto_stream$","_context59","crypto_stream_xor","crypto_stream_xor$","_context60","crypto_stream_keygen","crypto_stream_keygen$","_context61","CRYPTO_STREAM_KEYBYTES","num","randombytes_buf$","_context62","randombytes_uniform","upperBound","randombytes_uniform$","_context63","sodium_add","val","addv","sodium_add$","_context64","sodium_bin2hex","decoded","sodium_bin2hex$","_context65","sodium_compare","b1","b2","sodium_compare$","_context66","sodium_hex2bin","encoded","sodium_hex2bin$","_context67","sodium_increment","buf","sodium_increment$","_context68","sodium_is_zero","len","sodium_is_zero$","_context69","sodium_memcmp","sodium_memcmp$","_context70","sodium_memzero","sodium_memzero$","_context71","sodium_pad","blockSize","sodium_pad$","_context72","sodium_unpad","sodium_unpad$","_context73","module","exports"],"sources":["imports/client/sodium-plus/lib/sodiumplus.js"],"sourcesContent":["const Backend = require('./backend');\nconst CryptographyKey = require('./cryptography-key');\nconst Ed25519SecretKey = require('./keytypes/ed25519sk');\nconst Ed25519PublicKey = require('./keytypes/ed25519pk');\nconst LibsodiumWrappersBackend = require('./backend/libsodium-wrappers');\nconst SodiumError = require('./sodium-error');\nconst SodiumNativeBackend = require('./backend/sodiumnative');\nconst X25519PublicKey = require('./keytypes/x25519pk');\nconst X25519SecretKey = require('./keytypes/x25519sk');\nconst Util = require('./util');\n\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\nclass SodiumPlus {\n    constructor(backend) {\n        /* istanbul ignore if */\n        if (!(backend instanceof Backend)) {\n            throw new TypeError('Backend object must implement the backend function');\n        }\n        this.backend = backend;\n        Util.populateConstants(this);\n    }\n\n    /**\n     * Returns the name of the current active backend.\n     * This method is NOT async.\n     *\n     * @return {string}\n     */\n    getBackendName() {\n        return this.backend.backendName;\n    }\n\n    /**\n     * Is this powered by sodium-native?\n     * This method is NOT async.\n     *\n     * @return {boolean}\n     */\n    isSodiumNative() {\n        return (this.backend instanceof SodiumNativeBackend);\n    }\n\n    /**\n     * Is this powered by libsodium-wrappers?\n     * This method is NOT async.\n     *\n     * @return {boolean}\n     */\n    isLibsodiumWrappers() {\n        return (this.backend instanceof LibsodiumWrappersBackend);\n    }\n\n    /**\n     * Automatically select a backend.\n     *\n     * @return {Promise<SodiumPlus>}\n     */\n    static async auto() {\n        let backend;\n        try {\n            backend = await SodiumNativeBackend.init();\n        } catch (e) {\n            backend = await LibsodiumWrappersBackend.init();\n        }\n        /* istanbul ignore if */\n        if (!backend) {\n            backend = await LibsodiumWrappersBackend.init();\n        }\n        Util.populateConstants(backend);\n        return new SodiumPlus(backend);\n    }\n\n    /**\n     * If our backend isn't defined, it will trigger an autoload.\n     *\n     * Mostly used internally. `await SodiumPlus.auto()` provides the same\n     * exact guarantee as this method.\n     *\n     * @return {Promise<void>}\n     */\n    async ensureLoaded() {\n        /* istanbul ignore if */\n        if (typeof (this.backend) === 'undefined') {\n            try {\n                await SodiumPlus.auto();\n            } catch (e) {\n                this.backend = await LibsodiumWrappersBackend.init();\n            }\n        }\n    }\n\n    /**\n     * Decrypt a message (and optional associated data) with XChaCha20-Poly1305\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @param {String|Buffer} assocData\n     * @return {Promise<Buffer>}\n     * @throws {SodiumError}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, nonce, key, assocData = '') {\n        await this.ensureLoaded();\n        if (nonce.length !== 24) {\n            throw new SodiumError('Argument 2 must be 24 bytes');\n        }\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 3 must be an instance of CryptographyKey');\n        }\n        return await this.backend.crypto_aead_xchacha20poly1305_ietf_decrypt(\n            await Util.toBuffer(ciphertext),\n            assocData.length > 0 ? await Util.toBuffer(assocData) : null,\n            await Util.toBuffer(nonce),\n            key\n        );\n    }\n\n    /**\n     * Encrypt a message (and optional associated data) with XChaCha20-Poly1305.\n     *\n     * Throws a SodiumError if an invalid ciphertext/AAD is provided for this\n     * nonce and key.\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @param {String|Buffer} assocData\n     * @return {Promise<Buffer>}\n     * @throws {SodiumError}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, nonce, key, assocData = '') {\n        await this.ensureLoaded();\n        if (nonce.length !== 24) {\n            throw new SodiumError('Argument 2 must be 24 bytes');\n        }\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 3 must be an instance of CryptographyKey');\n        }\n\n        return await this.backend.crypto_aead_xchacha20poly1305_ietf_encrypt(\n            await Util.toBuffer(plaintext),\n            assocData.length > 0 ? await Util.toBuffer(assocData) : null,\n            await Util.toBuffer(nonce),\n            key\n        );\n    }\n\n    /**\n     * Generate an XChaCha20-Poly1305 key.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_keygen() {\n        return new CryptographyKey(await this.backend.randombytes_buf(32));\n    }\n\n    /**\n     * Get an authenticator for a message for a given key.\n     *\n     * Algorithm: HMAC-SHA512 truncated to 32 bytes.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_auth(message, key) {\n        await this.ensureLoaded();\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n        }\n        await this.ensureLoaded();\n        return await this.backend.crypto_auth(\n            await Util.toBuffer(message),\n            key\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_auth_keygen() {\n        return new CryptographyKey(await this.backend.randombytes_buf(32));\n    }\n\n    /**\n     * Verify an authenticator for a message for a given key.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} mac\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(message, key, mac) {\n        await this.ensureLoaded();\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n        }\n        await this.ensureLoaded();\n        return await this.backend.crypto_auth_verify(\n            await Util.toBuffer(mac),\n            await Util.toBuffer(message),\n            key\n        );\n    }\n\n    /**\n     * Public-key authenticated encryption.\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {X25519SecretKey} myPrivateKey\n     * @param {X25519PublicKey} theirPublicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box(plaintext, nonce, myPrivateKey, theirPublicKey) {\n        await this.ensureLoaded();\n        if (!(myPrivateKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n        }\n        if (!(theirPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 4 must be an instance of X25519PublicKey');\n        }\n        nonce = await Util.toBuffer(nonce);\n        if (nonce.length !== 24) {\n            throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n        }\n        return this.backend.crypto_box(\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            myPrivateKey,\n            theirPublicKey\n        );\n    }\n\n    /**\n     * Public-key authenticated decryption.\n     *\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {X25519SecretKey} myPrivateKey\n     * @param {X25519PublicKey} theirPublicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, myPrivateKey, theirPublicKey) {\n        await this.ensureLoaded();\n        if (!(myPrivateKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n        }\n        if (!(theirPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 4 must be an instance of X25519PublicKey');\n        }\n        ciphertext = await Util.toBuffer(ciphertext);\n        if (ciphertext.length < 16) {\n            throw new SodiumError('Ciphertext must be a buffer of at least 16 bytes');\n        }\n        nonce = await Util.toBuffer(nonce);\n        if (nonce.length !== 24) {\n            throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n        }\n        return this.backend.crypto_box_open(\n            ciphertext,\n            nonce,\n            myPrivateKey,\n            theirPublicKey\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        await this.ensureLoaded();\n        return this.backend.crypto_box_keypair();\n    }\n\n    /**\n     * Combine two X25519 keys (secret, public) into a keypair object.\n     *\n     * @param {X25519SecretKey} sKey\n     * @param {X25519PublicKey} pKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair_from_secretkey_and_publickey(sKey, pKey) {\n        await this.ensureLoaded();\n        if (!(sKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n        }\n        if (!(pKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n        }\n        return await this.backend.crypto_box_keypair_from_secretkey_and_publickey(sKey, pKey);\n    }\n\n    /**\n     * Extract the secret key from an X25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<X25519SecretKey>}\n     */\n    async crypto_box_secretkey(keypair) {\n        if (keypair.getLength()!== 64) {\n            throw new SodiumError('Keypair must be 64 bytes');\n        }\n        return new X25519SecretKey(\n            Buffer.from(keypair.getBuffer().slice(0, 32))\n        );\n    }\n\n    /**\n     * Extract the public key from an X25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<X25519PublicKey>}\n     */\n    async crypto_box_publickey(keypair) {\n        if (keypair.getLength() !== 64) {\n            throw new SodiumError('Keypair must be 64 bytes');\n        }\n        return new X25519PublicKey(\n            Buffer.from(keypair.getBuffer().slice(32, 64))\n        );\n    }\n\n    /**\n     * Derive the public key from a given X25519 secret key.\n     *\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<X25519PublicKey>}\n     */\n    async crypto_box_publickey_from_secretkey(secretKey) {\n        await this.ensureLoaded();\n        if (!(secretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n        }\n        return new X25519PublicKey(\n            await this.backend.crypto_scalarmult_base(secretKey)\n        );\n    }\n\n    /**\n     * Anonymous public-key encryption. (Message integrity is still assured.)\n     *\n     * @param {string|Buffer} plaintext\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal(plaintext, publicKey) {\n        await this.ensureLoaded();\n        if (!(publicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n        }\n        return await this.backend.crypto_box_seal(plaintext, publicKey);\n    }\n\n    /**\n     * Anonymous public-key decryption. (Message integrity is still assured.)\n     *\n     * @param {Buffer} ciphertext\n     * @param {X25519PublicKey} publicKey\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, publicKey, secretKey) {\n        await this.ensureLoaded();\n        if (!(publicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n        }\n        if (!(secretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 3 must be an instance of X25519SecretKey');\n        }\n        return await this.backend.crypto_box_seal_open(\n            await Util.toBuffer(ciphertext),\n            publicKey,\n            secretKey\n        );\n    }\n\n    /**\n     * Generic-purpose cryptographic hash.\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_generichash(message, key, outputLength);\n    }\n\n    /**\n     * Initialize a BLAKE2 hash context for stream hashing.\n     *\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_generichash_init(key, outputLength);\n    }\n\n\n    /**\n     * Update the BLAKE2 hash state with a block of data.\n     *\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_generichash_update(state, message);\n    }\n\n    /**\n     * Obtain the final BLAKE2 hash output.\n     *\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_generichash_final(state, outputLength);\n    }\n\n    /**\n     * Generate a 256-bit random key for BLAKE2.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_generichash_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_GENERICHASH_KEYBYTES)\n        );\n    }\n\n    /**\n     * Derive a subkey from a master key.\n     *\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        await this.ensureLoaded();\n        if (length < 1) {\n            throw new SodiumError('Length must be a positive integer.');\n        }\n        if (subKeyId < 0) {\n            throw new SodiumError('Key ID must be an unsigned integer');\n        }\n        return await this.backend.crypto_kdf_derive_from_key(\n            length,\n            subKeyId,\n            context,\n            key\n        );\n    }\n\n    /**\n     * Generate a 256-bit random key for our KDF.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_KDF_KEYBYTES)\n        );\n    }\n\n    /**\n     * This is functionally identical to crypto_box_keypair().\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kx_keypair() {\n        return this.crypto_box_keypair();\n    }\n\n    /**\n     * Generate an X25519 keypair from a seed.\n     *\n     * @param {string|Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kx_seed_keypair(seed) {\n        await this.ensureLoaded();\n        const sk = await this.backend.crypto_generichash(seed, null, this.CRYPTO_KX_SECRETKEYBYTES);\n        const pk = await this.backend.crypto_scalarmult_base(new CryptographyKey(sk));\n        return new CryptographyKey(Buffer.concat([sk, pk]));\n    }\n\n    /**\n     * Perform a key exchange from the client's perspective.\n     *\n     * Returns an array of two CryptographyKey objects.\n     *\n     * The first is meant for data sent from the server to the client (incoming decryption).\n     * The second is meant for data sent from the client to the server (outgoing encryption).\n     *\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        await this.ensureLoaded();\n        if (!(clientPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519PublicKey');\n        }\n        if (!(clientSecretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519SecretKey');\n        }\n        if (!(serverPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 3 must be an instance of X25519PublicKey');\n        }\n        return this.backend.crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey);\n    }\n\n    /**\n     * Perform a key exchange from the server's perspective.\n     *\n     * Returns an array of two CryptographyKey objects.\n     *\n     * The first is meant for data sent from the client to the server (incoming decryption).\n     * The second is meant for data sent from the server to the client (outgoing encryption).\n     *\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        await this.ensureLoaded();\n        if (!(serverPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519PublicKey');\n        }\n        if (!(serverSecretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519SecretKey');\n        }\n        if (!(clientPublicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 3 must be an instance of X25519PublicKey');\n        }\n        return this.backend.crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey);\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n        }\n        return await this.backend.crypto_onetimeauth(await Util.toBuffer(message), key);\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Argument 2 must be an instance of CryptographyKey');\n        }\n        return await this.backend.crypto_onetimeauth_verify(\n            await Util.toBuffer(message),\n            key,\n            await Util.toBuffer(tag)\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_onetimeauth_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(32)\n        );\n    }\n\n    /**\n     * Derive a cryptography key from a password and salt.\n     *\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number|null} algorithm\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm = null) {\n        await this.ensureLoaded();\n        /* istanbul ignore if */\n        if (!algorithm) {\n            algorithm = this.CRYPTO_PWHASH_ALG_DEFAULT;\n        }\n        return new CryptographyKey(\n            await this.backend.crypto_pwhash(\n                length,\n                await Util.toBuffer(password),\n                await Util.toBuffer(salt),\n                opslimit,\n                memlimit,\n                algorithm\n            )\n        );\n    }\n\n    /**\n     * Get a password hash (in a safe-for-storage format)\n     *\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_pwhash_str(password, opslimit, memlimit);\n    }\n\n    /**\n     * Verify a password against a known password hash\n     *\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_pwhash_str_verify(password, hash);\n    }\n\n    /**\n     * Does this password need to be rehashed?\n     *\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * Elliptic Curve Diffie-Hellman key exchange\n     *\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        await this.ensureLoaded();\n        if (!(secretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n        }\n        if (!(publicKey instanceof X25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of X25519PublicKey');\n        }\n        return await this.backend.crypto_scalarmult(secretKey, publicKey);\n    }\n\n    /**\n     * Generate an X25519PublicKey from an X25519SecretKey\n     *\n     * @param {X25519SecretKey} secretKey\n     * @return {Promise<X25519PublicKey>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        await this.ensureLoaded();\n        if (!(secretKey instanceof X25519SecretKey)) {\n            throw new TypeError('Argument 1 must be an instance of X25519SecretKey');\n        }\n        return new X25519PublicKey(\n            await this.backend.crypto_scalarmult_base(secretKey)\n        );\n    }\n\n    /**\n     * Shared-key authenticated encryption\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        await this.ensureLoaded();\n        if (key.isEd25519Key() || key.isX25519Key()) {\n            throw new TypeError('Argument 3 must not be an asymmetric key');\n        }\n        nonce = await Util.toBuffer(nonce);\n        if (nonce.length !== 24) {\n            throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n        }\n\n        return await this.backend.crypto_secretbox(\n            plaintext,\n            nonce,\n            key\n        );\n    }\n\n    /**\n     * Shared-key authenticated decryption\n     *\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        await this.ensureLoaded();\n        if (key.isEd25519Key() || key.isX25519Key()) {\n            throw new TypeError('Argument 3 must not be an asymmetric key');\n        }\n        ciphertext = await Util.toBuffer(ciphertext);\n        if (ciphertext.length < 16) {\n            throw new SodiumError('Ciphertext must be a buffer of at least 16 bytes');\n        }\n        nonce = await Util.toBuffer(nonce);\n        if (nonce.length !== 24) {\n            throw new SodiumError('Nonce must be a buffer of exactly 24 bytes');\n        }\n        return await this.backend.crypto_secretbox_open(\n            ciphertext,\n            nonce,\n            key\n        );\n    }\n\n    /**\n     * Generate a key for shared-key authenticated encryption.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_secretbox_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_SECRETBOX_KEYBYTES)\n        );\n    }\n\n    /**\n     * Internalize the internal state and a random header for stream encryption.\n     *\n     * @param {CryptographyKey} key\n     * @return {Promise<array>}\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        await this.ensureLoaded();\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Key must be an instance of CryptographyKey');\n        }\n        if (key.getLength() !== 32) {\n            throw new SodiumError('crypto_secretstream keys must be 32 bytes long');\n        }\n        const [state, header] = await this.backend.crypto_secretstream_xchacha20poly1305_init_push(key);\n        return Object.freeze({\n            header: header,\n            push: this.crypto_secretstream_xchacha20poly1305_push.bind(this, state),\n            rekey: this.crypto_secretstream_xchacha20poly1305_rekey.bind(this, state)\n        });\n    }\n\n    /**\n     * Initialize the internal state for stream decryption.\n     *\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>}\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(key, header) {\n        await this.ensureLoaded();\n        header = await Util.toBuffer(header);\n        if (header.length !== 24) {\n            throw new SodiumError('crypto_secretstream headers must be 24 bytes long');\n        }\n        if (!(key instanceof CryptographyKey)) {\n            throw new TypeError('Key must be an instance of CryptographyKey');\n        }\n        if (key.getLength() !== 32) {\n            throw new SodiumError('crypto_secretstream keys must be 32 bytes long');\n        }\n        const state = await this.backend.crypto_secretstream_xchacha20poly1305_init_pull(header, key);\n        return Object.freeze({\n            pull: this.crypto_secretstream_xchacha20poly1305_pull.bind(this, state)\n        });\n    }\n\n    /**\n     * Stream encryption.\n     *\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        await this.ensureLoaded();\n        return this.backend.crypto_secretstream_xchacha20poly1305_push(state, message, ad, tag);\n    }\n\n    /**\n     * Stream decryption.\n     *\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        await this.ensureLoaded();\n        return this.backend.crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad, tag);\n    }\n\n    /**\n     * Deterministic rekeying.\n     *\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        await this.ensureLoaded();\n        await this.backend.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * Generate a key for shared-key authenticated encryption.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_secretstream_xchacha20poly1305_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_KEYBYTES)\n        );\n    }\n\n    /**\n     * Calculate a fast hash for short inputs.\n     *\n     * Algorithm: SipHash-2-4\n     *\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        await this.ensureLoaded();\n        return await this.backend.crypto_shorthash(await Util.toBuffer(message), key);\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_shorthash_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_SHORTHASH_KEYBYTES)\n        );\n    }\n\n    /**\n     * Returns a signed message.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        await this.ensureLoaded();\n        if (!(secretKey instanceof Ed25519SecretKey)) {\n            throw new TypeError('Argument 2 must be an instance of Ed25519SecretKey');\n        }\n        return this.backend.crypto_sign(message, secretKey);\n    }\n\n    /**\n     * Given a signed message, verify the Ed25519 signature. If it matches, return the\n     * bare message (no signature).\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n        await this.ensureLoaded();\n        if (!(publicKey instanceof Ed25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of Ed25519PublicKey');\n        }\n        return this.backend.crypto_sign_open(message, publicKey);\n    }\n\n    /**\n     * Returns the Ed25519 signature of the message, for the given secret key.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        await this.ensureLoaded();\n        if (!(secretKey instanceof Ed25519SecretKey)) {\n            throw new TypeError('Argument 2 must be an instance of Ed25519SecretKey');\n        }\n        return this.backend.crypto_sign_detached(message, secretKey);\n    }\n\n    /**\n     * Returns true if the Ed25519 signature is valid for a given message and public key.\n     *\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<boolean>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        await this.ensureLoaded();\n        if (!(publicKey instanceof Ed25519PublicKey)) {\n            throw new TypeError('Argument 2 must be an instance of Ed25519PublicKey');\n        }\n        return this.backend.crypto_sign_verify_detached(message, publicKey, signature);\n    }\n\n    /**\n     * Extract the secret key from an Ed25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<Ed25519SecretKey>}\n     */\n    async crypto_sign_secretkey(keypair) {\n        if (keypair.getLength() !== 96) {\n            throw new SodiumError('Keypair must be 96 bytes');\n        }\n        return new Ed25519SecretKey(\n            await Util.toBuffer(\n                keypair.getBuffer().slice(0, 64)\n            )\n        );\n    }\n\n    /**\n     * Extract the public key from an Ed25519 keypair object.\n     *\n     * @param {CryptographyKey} keypair\n     * @return {Promise<Ed25519PublicKey>}\n     */\n    async crypto_sign_publickey(keypair) {\n        if (keypair.getLength() !== 96) {\n            throw new SodiumError('Keypair must be 96 bytes');\n        }\n        return new Ed25519PublicKey(\n            keypair.getBuffer().slice(64, 96)\n        );\n    }\n\n    /**\n     * Generate an Ed25519 keypair object.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        await this.ensureLoaded();\n        return this.backend.crypto_sign_keypair();\n    }\n\n    /**\n     * Generate an Ed25519 keypair object from a seed.\n     *\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        await this.ensureLoaded();\n        if (seed instanceof CryptographyKey) {\n            seed = seed.getBuffer();\n        }\n        seed = await Util.toBuffer(seed);\n        if (seed.length !== 32) {\n            throw new SodiumError(`Seed must be 32 bytes long; got ${seed.length}`);\n        }\n        return this.backend.crypto_sign_seed_keypair(seed);\n    }\n\n    /**\n     * Obtain a birationally equivalent X25519 secret key,\n     * given an Ed25519 secret key.\n     *\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<X25519SecretKey>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        await this.ensureLoaded();\n        return new X25519SecretKey(\n            await this.backend.crypto_sign_ed25519_sk_to_curve25519(sk)\n        );\n    }\n\n    /**\n     * Obtain a birationally equivalent X25519 public key,\n     * given an Ed25519 public key.\n     *\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<X25519PublicKey>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        await this.ensureLoaded();\n        return new X25519PublicKey(\n            await this.backend.crypto_sign_ed25519_pk_to_curve25519(pk)\n        );\n    }\n\n    /**\n     * Generate an arbitrary number of pseudorandom bytes from a given\n     * nonce and key.\n     *\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        await this.ensureLoaded();\n        return this.backend.crypto_stream(length, nonce, key);\n    }\n\n    /**\n     * Encrypts a string (without authentication).\n     *\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        await this.ensureLoaded();\n        return this.backend.crypto_stream_xor(plaintext, nonce, key);\n    }\n    /**\n     * Generate a key for stream ciphers.\n     *\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_stream_keygen() {\n        return new CryptographyKey(\n            await this.backend.randombytes_buf(this.CRYPTO_STREAM_KEYBYTES)\n        );\n    }\n\n    /**\n     * Returns a buffer filled with random bytes.\n     *\n     * @param {number} num\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(num) {\n        await this.ensureLoaded();\n        return await this.backend.randombytes_buf(num);\n    }\n\n    /**\n     * Generate an integer between 0 and upperBound (non-inclusive).\n     *\n     * For example, randombytes_uniform(10) returns an integer between 0 and 9.\n     *\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        await this.ensureLoaded();\n        return this.backend.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * Add two buffers (little-endian). Returns the value.\n     *\n     * @param {Buffer} val\n     * @param {Buffer} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        await this.ensureLoaded();\n        return await this.backend.sodium_add(\n            await Util.toBuffer(val),\n            await Util.toBuffer(addv)\n        );\n    }\n\n    /**\n     * Convert to hex.\n     *\n     * @param {Buffer} decoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_bin2hex(decoded) {\n        await this.ensureLoaded();\n        return this.backend.sodium_bin2hex(decoded);\n    }\n\n    /**\n     * Compare two buffers in constant time.\n     *\n     * Returns -1 if b1 is less than b2.\n     * Returns  1 if b1 is greater than b2.\n     * Returns  0 if b1 is equal to b2.\n     *\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        await this.ensureLoaded();\n        return this.backend.sodium_compare(b1, b2);\n    }\n    /**\n     * Convert to hex.\n     *\n     * @param {Buffer|string} encoded\n     * @return {Promise<string>}\n     */\n    async sodium_hex2bin(encoded) {\n        await this.ensureLoaded();\n        return this.backend.sodium_hex2bin(encoded);\n    }\n\n    /**\n     * Increment a buffer (little endian). Overwrites the buffer in-place.\n     *\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        await this.ensureLoaded();\n        return this.backend.sodium_increment(buf);\n    }\n\n    /**\n     * Returns true if the buffer is zero.\n     *\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        await this.ensureLoaded();\n        return this.backend.sodium_is_zero(buf, len);\n    }\n\n    /**\n     * Timing-safe buffer comparison.\n     *\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        await this.ensureLoaded();\n        return this.backend.sodium_memcmp(b1, b2);\n    }\n\n    /**\n     * Zero out a buffer. Overwrites the buffer in-place.\n     *\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        await this.ensureLoaded();\n        await this.backend.sodium_memzero(buf);\n    }\n\n    /**\n     * Pad a string.\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        await this.ensureLoaded();\n        return this.backend.sodium_pad(buf, blockSize);\n    }\n\n    /**\n     * Unpad a string.\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        await this.ensureLoaded();\n        return this.backend.sodium_unpad(buf, blockSize);\n    }\n}\n\nmodule.exports = SodiumPlus;\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e6af8397c90b874c8b42eabbba1fac358f27fe7f"}
