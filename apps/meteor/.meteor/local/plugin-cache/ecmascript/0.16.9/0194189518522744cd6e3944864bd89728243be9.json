{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/autoupdate/autoupdate_client.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_client.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_client.js"}},"code":"!function (module1) {\n  module1.export({\n    Autoupdate: () => Autoupdate\n  });\n  let ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions(v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  const clientArch = Meteor.isCordova ? 'web.cordova' : Meteor.isModern ? 'web.browser' : 'web.browser.legacy';\n  const autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: 'unknown',\n    versionRefreshable: 'unknown',\n    versionNonRefreshable: 'unknown',\n    assets: []\n  };\n  const Autoupdate = {};\n  // Stores acceptable client versions.\n  const clientVersions = Autoupdate._clientVersions =\n  // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n  Meteor.connection.registerStoreClient('meteor_autoupdate_clientVersions', clientVersions.createStore());\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(clientArch, ['versionRefreshable', 'versionNonRefreshable'], autoupdateVersions);\n  };\n\n  // Set to true if the link.onload callback ever fires for any <link> node.\n  let knownToSupportCssOnLoad = false;\n  const retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n  });\n  let failures = 0;\n  Autoupdate._retrySubscription = () => {\n    Meteor.subscribe('meteor_autoupdate_clientVersions', {\n      onError(error) {\n        Meteor._debug('autoupdate subscription failed', error);\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady() {\n        // Call checkNewVersionDocument with a slight delay, so that the\n        // const handle declaration is guaranteed to be initialized, even if\n        // the added or changed callbacks are called synchronously.\n        const resolved = Promise.resolve();\n        function check(doc) {\n          resolved.then(() => checkNewVersionDocument(doc));\n        }\n        const stop = clientVersions.watch(check);\n        const reloadDelayInSeconds = Meteor.isProduction ? 60 : 0;\n        function checkNewVersionDocument(doc) {\n          if (doc._id !== clientArch) {\n            return;\n          }\n          if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n            // Non-refreshable assets have changed, so we have to reload the\n            // whole page rather than just replacing <link> tags.\n            if (stop) stop();\n            if (Package.reload) {\n              // The reload package should be provided by ddp-client, which\n              // is provided by the ddp package that autoupdate depends on.\n\n              // Delay reload in 60 seconds\n              console.warn('Client version changed from', autoupdateVersions.versionNonRefreshable, 'to', doc.versionNonRefreshable, \"Page will reload in \".concat(reloadDelayInSeconds, \" seconds\"));\n              setTimeout(() => {\n                Package.reload.Reload._reload();\n              }, reloadDelayInSeconds * 1000);\n            }\n            return;\n          }\n          if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n            autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = doc.assets || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n            function waitUntilCssLoads(link, callback) {\n              var called;\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                if (!called) {\n                  called = true;\n                  callback();\n                }\n              };\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    if (!called) {\n                      called = true;\n                      callback();\n                    }\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            }\n            let newLinksLeftToLoad = newCss.length;\n            function removeOldLinks() {\n              if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n                oldLinks.splice(0).forEach(link => {\n                  link.parentNode.removeChild(link);\n                });\n              }\n            }\n            if (newCss.length > 0) {\n              newCss.forEach(css => {\n                const newLink = document.createElement('link');\n                newLink.setAttribute('rel', 'stylesheet');\n                newLink.setAttribute('type', 'text/css');\n                newLink.setAttribute('class', '__meteor-css__');\n                newLink.setAttribute('href', css.url);\n                waitUntilCssLoads(newLink, function () {\n                  Meteor.setTimeout(removeOldLinks, 200);\n                });\n                const head = document.getElementsByTagName('head').item(0);\n                head.appendChild(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          }\n        }\n      }\n    });\n  };\n  Autoupdate._retrySubscription();\n}.call(this, module);","map":{"version":3,"names":["module1","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStoreClient","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","reloadDelayInSeconds","isProduction","_id","Package","reload","console","warn","concat","setTimeout","Reload","_reload","newCss","oldLinks","Array","prototype","forEach","call","document","getElementsByTagName","className","push","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","newLinksLeftToLoad","length","removeOldLinks","splice","parentNode","removeChild","css","newLink","createElement","setAttribute","url","head","item","appendChild","module"],"sources":["packages/autoupdate/autoupdate_client.js"],"sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from './client_versions.js';\n\nconst clientArch = Meteor.isCordova ? 'web.cordova' : Meteor.isModern ? 'web.browser' : 'web.browser.legacy';\n\nconst autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n\tversion: 'unknown',\n\tversionRefreshable: 'unknown',\n\tversionNonRefreshable: 'unknown',\n\tassets: [],\n};\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions = (Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n\tnew ClientVersions());\n\nMeteor.connection.registerStoreClient('meteor_autoupdate_clientVersions', clientVersions.createStore());\n\nAutoupdate.newClientAvailable = function () {\n\treturn clientVersions.newClientAvailable(clientArch, ['versionRefreshable', 'versionNonRefreshable'], autoupdateVersions);\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n\t// Unlike the stream reconnect use of Retry, which we want to be instant\n\t// in normal operation, this is a wacky failure. We don't want to retry\n\t// right away, we can start slowly.\n\t//\n\t// A better way than timeconstants here might be to use the knowledge\n\t// of when we reconnect to help trigger these retries. Typically, the\n\t// server fixing code will result in a restart and reconnect, but\n\t// potentially the subscription could have a transient error.\n\tminCount: 0, // don't do any immediate retries\n\tbaseTimeout: 30 * 1000, // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n\tMeteor.subscribe('meteor_autoupdate_clientVersions', {\n\t\tonError(error) {\n\t\t\tMeteor._debug('autoupdate subscription failed', error);\n\t\t\tfailures++;\n\t\t\tretry.retryLater(failures, function () {\n\t\t\t\t// Just retry making the subscription, don't reload the whole\n\t\t\t\t// page. While reloading would catch more cases (for example,\n\t\t\t\t// the server went back a version and is now doing old-style hot\n\t\t\t\t// code push), it would also be more prone to reload loops,\n\t\t\t\t// which look really bad to the user. Just retrying the\n\t\t\t\t// subscription over DDP means it is at least possible to fix by\n\t\t\t\t// updating the server.\n\t\t\t\tAutoupdate._retrySubscription();\n\t\t\t});\n\t\t},\n\n\t\tonReady() {\n\t\t\t// Call checkNewVersionDocument with a slight delay, so that the\n\t\t\t// const handle declaration is guaranteed to be initialized, even if\n\t\t\t// the added or changed callbacks are called synchronously.\n\t\t\tconst resolved = Promise.resolve();\n\t\t\tfunction check(doc) {\n\t\t\t\tresolved.then(() => checkNewVersionDocument(doc));\n\t\t\t}\n\n\t\t\tconst stop = clientVersions.watch(check);\n\n\t\t\tconst reloadDelayInSeconds = Meteor.isProduction ? 60 : 0;\n\n\t\t\tfunction checkNewVersionDocument(doc) {\n\t\t\t\tif (doc._id !== clientArch) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n\t\t\t\t\t// Non-refreshable assets have changed, so we have to reload the\n\t\t\t\t\t// whole page rather than just replacing <link> tags.\n\t\t\t\t\tif (stop) stop();\n\t\t\t\t\tif (Package.reload) {\n\t\t\t\t\t\t// The reload package should be provided by ddp-client, which\n\t\t\t\t\t\t// is provided by the ddp package that autoupdate depends on.\n\n\t\t\t\t\t\t// Delay reload in 60 seconds\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t'Client version changed from',\n\t\t\t\t\t\t\tautoupdateVersions.versionNonRefreshable,\n\t\t\t\t\t\t\t'to',\n\t\t\t\t\t\t\tdoc.versionNonRefreshable,\n\t\t\t\t\t\t\t`Page will reload in ${reloadDelayInSeconds} seconds`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tPackage.reload.Reload._reload();\n\t\t\t\t\t\t}, reloadDelayInSeconds * 1000);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n\t\t\t\t\tautoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n\t\t\t\t\t// Switch out old css links for the new css links. Inspired by:\n\t\t\t\t\t// https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\t\t\t\t\tvar newCss = doc.assets || [];\n\t\t\t\t\tvar oldLinks = [];\n\n\t\t\t\t\tArray.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n\t\t\t\t\t\tif (link.className === '__meteor-css__') {\n\t\t\t\t\t\t\toldLinks.push(link);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tfunction waitUntilCssLoads(link, callback) {\n\t\t\t\t\t\tvar called;\n\n\t\t\t\t\t\tlink.onload = function () {\n\t\t\t\t\t\t\tknownToSupportCssOnLoad = true;\n\t\t\t\t\t\t\tif (!called) {\n\t\t\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!knownToSupportCssOnLoad) {\n\t\t\t\t\t\t\tvar id = Meteor.setInterval(function () {\n\t\t\t\t\t\t\t\tif (link.sheet) {\n\t\t\t\t\t\t\t\t\tif (!called) {\n\t\t\t\t\t\t\t\t\t\tcalled = true;\n\t\t\t\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tMeteor.clearInterval(id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, 50);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet newLinksLeftToLoad = newCss.length;\n\t\t\t\t\tfunction removeOldLinks() {\n\t\t\t\t\t\tif (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n\t\t\t\t\t\t\toldLinks.splice(0).forEach((link) => {\n\t\t\t\t\t\t\t\tlink.parentNode.removeChild(link);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (newCss.length > 0) {\n\t\t\t\t\t\tnewCss.forEach((css) => {\n\t\t\t\t\t\t\tconst newLink = document.createElement('link');\n\t\t\t\t\t\t\tnewLink.setAttribute('rel', 'stylesheet');\n\t\t\t\t\t\t\tnewLink.setAttribute('type', 'text/css');\n\t\t\t\t\t\t\tnewLink.setAttribute('class', '__meteor-css__');\n\t\t\t\t\t\t\tnewLink.setAttribute('href', css.url);\n\n\t\t\t\t\t\t\twaitUntilCssLoads(newLink, function () {\n\t\t\t\t\t\t\t\tMeteor.setTimeout(removeOldLinks, 200);\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst head = document.getElementsByTagName('head').item(0);\n\t\t\t\t\t\t\thead.appendChild(newLink);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoveOldLinks();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t});\n};\n\nAutoupdate._retrySubscription();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0194189518522744cd6e3944864bd89728243be9"}
