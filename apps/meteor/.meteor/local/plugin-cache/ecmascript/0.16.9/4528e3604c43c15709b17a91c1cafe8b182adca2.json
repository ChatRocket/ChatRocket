{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/rooms.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/converters/rooms.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/rooms.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/converters/rooms.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/converters/rooms.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      AppRoomsConverter: () => AppRoomsConverter\n    });\n    let RoomType;\n    module.link(\"@rocket.chat/apps-engine/definition/rooms\", {\n      RoomType(v) {\n        RoomType = v;\n      }\n    }, 0);\n    let LivechatVisitors, Rooms, LivechatDepartment, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let transformMappedData;\n    module.link(\"./transformMappedData\", {\n      transformMappedData(v) {\n        transformMappedData = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppRoomsConverter {\n      constructor(orch) {\n        this.orch = orch;\n      }\n      async convertById(roomId) {\n        const room = await Rooms.findOneById(roomId);\n        return this.convertRoom(room);\n      }\n      async convertByName(roomName) {\n        const room = await Rooms.findOneByName(roomName);\n        return this.convertRoom(room);\n      }\n      async convertAppRoom(room) {\n        if (!room) {\n          return undefined;\n        }\n        let u;\n        if (room.creator) {\n          const creator = await Users.findOneById(room.creator.id);\n          u = {\n            _id: creator._id,\n            username: creator.username,\n            name: creator.name\n          };\n        }\n        let v;\n        if (room.visitor) {\n          const visitor = await LivechatVisitors.findOneEnabledById(room.visitor.id);\n          const {\n            lastMessageTs,\n            phone\n          } = room.visitorChannelInfo;\n          v = _objectSpread(_objectSpread({\n            _id: visitor._id,\n            username: visitor.username,\n            token: visitor.token,\n            status: visitor.status || 'online'\n          }, lastMessageTs && {\n            lastMessageTs\n          }), phone && {\n            phone\n          });\n        }\n        let departmentId;\n        if (room.department) {\n          const department = await LivechatDepartment.findOneById(room.department.id, {\n            projection: {\n              _id: 1\n            }\n          });\n          departmentId = department._id;\n        }\n        let servedBy;\n        if (room.servedBy) {\n          const user = await Users.findOneById(room.servedBy.id);\n          servedBy = {\n            _id: user._id,\n            username: user.username\n          };\n        }\n        let closedBy;\n        if (room.closedBy) {\n          const user = await Users.findOneById(room.closedBy.id);\n          closedBy = {\n            _id: user._id,\n            username: user.username\n          };\n        }\n        const newRoom = _objectSpread(_objectSpread(_objectSpread({}, room.id && {\n          _id: room.id\n        }), {}, {\n          fname: room.displayName,\n          name: room.slugifiedName,\n          t: room.type,\n          u,\n          v,\n          departmentId,\n          servedBy,\n          closedBy,\n          members: room.members,\n          uids: room.userIds,\n          default: typeof room.isDefault === 'undefined' ? false : room.isDefault,\n          ro: typeof room.isReadOnly === 'undefined' ? false : room.isReadOnly,\n          sysMes: typeof room.displaySystemMessages === 'undefined' ? true : room.displaySystemMessages,\n          waitingResponse: typeof room.isWaitingResponse === 'undefined' ? undefined : !!room.isWaitingResponse,\n          open: typeof room.isOpen === 'undefined' ? undefined : !!room.isOpen,\n          msgs: room.messageCount || 0,\n          ts: room.createdAt,\n          _updatedAt: room.updatedAt,\n          closedAt: room.closedAt,\n          lm: room.lastModifiedAt,\n          customFields: room.customFields,\n          livechatData: room.livechatData,\n          prid: typeof room.parentRoom === 'undefined' ? undefined : room.parentRoom.id\n        }, room._USERNAMES && {\n          _USERNAMES: room._USERNAMES\n        }), room.source && {\n          source: _objectSpread({}, room.source)\n        });\n        return Object.assign(newRoom, room._unmappedProperties_);\n      }\n      async convertRoom(originalRoom) {\n        if (!originalRoom) {\n          return undefined;\n        }\n        const map = {\n          id: '_id',\n          displayName: 'fname',\n          slugifiedName: 'name',\n          members: 'members',\n          userIds: 'uids',\n          messageCount: 'msgs',\n          createdAt: 'ts',\n          updatedAt: '_updatedAt',\n          closedAt: 'closedAt',\n          lastModifiedAt: 'lm',\n          customFields: 'customFields',\n          livechatData: 'livechatData',\n          isWaitingResponse: 'waitingResponse',\n          isOpen: 'open',\n          _USERNAMES: '_USERNAMES',\n          description: 'description',\n          source: 'source',\n          closer: 'closer',\n          isDefault: room => {\n            const result = !!room.default;\n            delete room.default;\n            return result;\n          },\n          isReadOnly: room => {\n            const result = !!room.ro;\n            delete room.ro;\n            return result;\n          },\n          displaySystemMessages: room => {\n            const {\n              sysMes\n            } = room;\n            if (typeof sysMes === 'undefined') {\n              return true;\n            }\n            delete room.sysMes;\n            return sysMes;\n          },\n          type: room => {\n            const result = this._convertTypeToApp(room.t);\n            delete room.t;\n            return result;\n          },\n          creator: async room => {\n            const {\n              u\n            } = room;\n            if (!u) {\n              return undefined;\n            }\n            delete room.u;\n            return this.orch.getConverters().get('users').convertById(u._id);\n          },\n          visitor: room => {\n            const {\n              v\n            } = room;\n            if (!v) {\n              return undefined;\n            }\n            return this.orch.getConverters().get('visitors').convertById(v._id);\n          },\n          // Note: room.v is not just visitor, it also contains channel related visitor data\n          // so we need to pass this data to the converter\n          // So suppose you have a contact whom we're contacting using SMS via 2 phone no's,\n          // let's call X and Y. Then if the contact sends a message using X phone number,\n          // then room.v.phoneNo would be X and correspondingly we'll store the timestamp of\n          // the last message from this visitor from X phone no on room.v.lastMessageTs\n          visitorChannelInfo: room => {\n            const {\n              v\n            } = room;\n            if (!v) {\n              return undefined;\n            }\n            const {\n              lastMessageTs,\n              phone\n            } = v;\n            return _objectSpread(_objectSpread({}, phone && {\n              phone\n            }), lastMessageTs && {\n              lastMessageTs\n            });\n          },\n          department: async room => {\n            const {\n              departmentId\n            } = room;\n            if (!departmentId) {\n              return undefined;\n            }\n            delete room.departmentId;\n            return this.orch.getConverters().get('departments').convertById(departmentId);\n          },\n          closedBy: async room => {\n            const {\n              closedBy\n            } = room;\n            if (!closedBy) {\n              return undefined;\n            }\n            delete room.closedBy;\n            if (originalRoom.closer === 'user') {\n              return this.orch.getConverters().get('users').convertById(closedBy._id);\n            }\n            return this.orch.getConverters().get('visitors').convertById(closedBy._id);\n          },\n          servedBy: async room => {\n            const {\n              servedBy\n            } = room;\n            if (!servedBy) {\n              return undefined;\n            }\n            delete room.servedBy;\n            return this.orch.getConverters().get('users').convertById(servedBy._id);\n          },\n          responseBy: async room => {\n            const {\n              responseBy\n            } = room;\n            if (!responseBy) {\n              return undefined;\n            }\n            delete room.responseBy;\n            return this.orch.getConverters().get('users').convertById(responseBy._id);\n          },\n          parentRoom: async room => {\n            const {\n              prid\n            } = room;\n            if (!prid) {\n              return undefined;\n            }\n            delete room.prid;\n            return this.orch.getConverters().get('rooms').convertById(prid);\n          }\n        };\n        return transformMappedData(originalRoom, map);\n      }\n      _convertTypeToApp(typeChar) {\n        switch (typeChar) {\n          case 'c':\n            return RoomType.CHANNEL;\n          case 'p':\n            return RoomType.PRIVATE_GROUP;\n          case 'd':\n            return RoomType.DIRECT_MESSAGE;\n          case 'l':\n            return RoomType.LIVE_CHAT;\n          default:\n            return typeChar;\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","AppRoomsConverter","RoomType","LivechatVisitors","Rooms","LivechatDepartment","Users","transformMappedData","__reifyWaitForDeps__","constructor","orch","convertById","roomId","room","findOneById","convertRoom","convertByName","roomName","findOneByName","convertAppRoom","undefined","u","creator","id","_id","username","name","visitor","findOneEnabledById","lastMessageTs","phone","visitorChannelInfo","token","status","departmentId","department","projection","servedBy","user","closedBy","newRoom","fname","displayName","slugifiedName","t","type","members","uids","userIds","isDefault","ro","isReadOnly","sysMes","displaySystemMessages","waitingResponse","isWaitingResponse","open","isOpen","msgs","messageCount","ts","createdAt","_updatedAt","updatedAt","closedAt","lm","lastModifiedAt","customFields","livechatData","prid","parentRoom","_USERNAMES","source","Object","assign","_unmappedProperties_","originalRoom","map","description","closer","result","_convertTypeToApp","getConverters","get","responseBy","typeChar","CHANNEL","PRIVATE_GROUP","DIRECT_MESSAGE","LIVE_CHAT","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/converters/rooms.js"],"sourcesContent":["import { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport { LivechatVisitors, Rooms, LivechatDepartment, Users } from '@rocket.chat/models';\n\nimport { transformMappedData } from './transformMappedData';\n\nexport class AppRoomsConverter {\n\tconstructor(orch) {\n\t\tthis.orch = orch;\n\t}\n\n\tasync convertById(roomId) {\n\t\tconst room = await Rooms.findOneById(roomId);\n\n\t\treturn this.convertRoom(room);\n\t}\n\n\tasync convertByName(roomName) {\n\t\tconst room = await Rooms.findOneByName(roomName);\n\n\t\treturn this.convertRoom(room);\n\t}\n\n\tasync convertAppRoom(room) {\n\t\tif (!room) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet u;\n\t\tif (room.creator) {\n\t\t\tconst creator = await Users.findOneById(room.creator.id);\n\t\t\tu = {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t\tname: creator.name,\n\t\t\t};\n\t\t}\n\n\t\tlet v;\n\t\tif (room.visitor) {\n\t\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.visitor.id);\n\n\t\t\tconst { lastMessageTs, phone } = room.visitorChannelInfo;\n\n\t\t\tv = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tstatus: visitor.status || 'online',\n\t\t\t\t...(lastMessageTs && { lastMessageTs }),\n\t\t\t\t...(phone && { phone }),\n\t\t\t};\n\t\t}\n\n\t\tlet departmentId;\n\t\tif (room.department) {\n\t\t\tconst department = await LivechatDepartment.findOneById(room.department.id, { projection: { _id: 1 } });\n\t\t\tdepartmentId = department._id;\n\t\t}\n\n\t\tlet servedBy;\n\t\tif (room.servedBy) {\n\t\t\tconst user = await Users.findOneById(room.servedBy.id);\n\t\t\tservedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tlet closedBy;\n\t\tif (room.closedBy) {\n\t\t\tconst user = await Users.findOneById(room.closedBy.id);\n\t\t\tclosedBy = {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t};\n\t\t}\n\n\t\tconst newRoom = {\n\t\t\t...(room.id && { _id: room.id }),\n\t\t\tfname: room.displayName,\n\t\t\tname: room.slugifiedName,\n\t\t\tt: room.type,\n\t\t\tu,\n\t\t\tv,\n\t\t\tdepartmentId,\n\t\t\tservedBy,\n\t\t\tclosedBy,\n\t\t\tmembers: room.members,\n\t\t\tuids: room.userIds,\n\t\t\tdefault: typeof room.isDefault === 'undefined' ? false : room.isDefault,\n\t\t\tro: typeof room.isReadOnly === 'undefined' ? false : room.isReadOnly,\n\t\t\tsysMes: typeof room.displaySystemMessages === 'undefined' ? true : room.displaySystemMessages,\n\t\t\twaitingResponse: typeof room.isWaitingResponse === 'undefined' ? undefined : !!room.isWaitingResponse,\n\t\t\topen: typeof room.isOpen === 'undefined' ? undefined : !!room.isOpen,\n\t\t\tmsgs: room.messageCount || 0,\n\t\t\tts: room.createdAt,\n\t\t\t_updatedAt: room.updatedAt,\n\t\t\tclosedAt: room.closedAt,\n\t\t\tlm: room.lastModifiedAt,\n\t\t\tcustomFields: room.customFields,\n\t\t\tlivechatData: room.livechatData,\n\t\t\tprid: typeof room.parentRoom === 'undefined' ? undefined : room.parentRoom.id,\n\t\t\t...(room._USERNAMES && { _USERNAMES: room._USERNAMES }),\n\t\t\t...(room.source && {\n\t\t\t\tsource: {\n\t\t\t\t\t...room.source,\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\n\t\treturn Object.assign(newRoom, room._unmappedProperties_);\n\t}\n\n\tasync convertRoom(originalRoom) {\n\t\tif (!originalRoom) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst map = {\n\t\t\tid: '_id',\n\t\t\tdisplayName: 'fname',\n\t\t\tslugifiedName: 'name',\n\t\t\tmembers: 'members',\n\t\t\tuserIds: 'uids',\n\t\t\tmessageCount: 'msgs',\n\t\t\tcreatedAt: 'ts',\n\t\t\tupdatedAt: '_updatedAt',\n\t\t\tclosedAt: 'closedAt',\n\t\t\tlastModifiedAt: 'lm',\n\t\t\tcustomFields: 'customFields',\n\t\t\tlivechatData: 'livechatData',\n\t\t\tisWaitingResponse: 'waitingResponse',\n\t\t\tisOpen: 'open',\n\t\t\t_USERNAMES: '_USERNAMES',\n\t\t\tdescription: 'description',\n\t\t\tsource: 'source',\n\t\t\tcloser: 'closer',\n\t\t\tisDefault: (room) => {\n\t\t\t\tconst result = !!room.default;\n\t\t\t\tdelete room.default;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tisReadOnly: (room) => {\n\t\t\t\tconst result = !!room.ro;\n\t\t\t\tdelete room.ro;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tdisplaySystemMessages: (room) => {\n\t\t\t\tconst { sysMes } = room;\n\n\t\t\t\tif (typeof sysMes === 'undefined') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tdelete room.sysMes;\n\t\t\t\treturn sysMes;\n\t\t\t},\n\t\t\ttype: (room) => {\n\t\t\t\tconst result = this._convertTypeToApp(room.t);\n\t\t\t\tdelete room.t;\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tcreator: async (room) => {\n\t\t\t\tconst { u } = room;\n\n\t\t\t\tif (!u) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.u;\n\n\t\t\t\treturn this.orch.getConverters().get('users').convertById(u._id);\n\t\t\t},\n\t\t\tvisitor: (room) => {\n\t\t\t\tconst { v } = room;\n\n\t\t\t\tif (!v) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this.orch.getConverters().get('visitors').convertById(v._id);\n\t\t\t},\n\t\t\t// Note: room.v is not just visitor, it also contains channel related visitor data\n\t\t\t// so we need to pass this data to the converter\n\t\t\t// So suppose you have a contact whom we're contacting using SMS via 2 phone no's,\n\t\t\t// let's call X and Y. Then if the contact sends a message using X phone number,\n\t\t\t// then room.v.phoneNo would be X and correspondingly we'll store the timestamp of\n\t\t\t// the last message from this visitor from X phone no on room.v.lastMessageTs\n\t\t\tvisitorChannelInfo: (room) => {\n\t\t\t\tconst { v } = room;\n\n\t\t\t\tif (!v) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst { lastMessageTs, phone } = v;\n\n\t\t\t\treturn {\n\t\t\t\t\t...(phone && { phone }),\n\t\t\t\t\t...(lastMessageTs && { lastMessageTs }),\n\t\t\t\t};\n\t\t\t},\n\t\t\tdepartment: async (room) => {\n\t\t\t\tconst { departmentId } = room;\n\n\t\t\t\tif (!departmentId) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.departmentId;\n\n\t\t\t\treturn this.orch.getConverters().get('departments').convertById(departmentId);\n\t\t\t},\n\t\t\tclosedBy: async (room) => {\n\t\t\t\tconst { closedBy } = room;\n\n\t\t\t\tif (!closedBy) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.closedBy;\n\t\t\t\tif (originalRoom.closer === 'user') {\n\t\t\t\t\treturn this.orch.getConverters().get('users').convertById(closedBy._id);\n\t\t\t\t}\n\t\t\t\treturn this.orch.getConverters().get('visitors').convertById(closedBy._id);\n\t\t\t},\n\t\t\tservedBy: async (room) => {\n\t\t\t\tconst { servedBy } = room;\n\n\t\t\t\tif (!servedBy) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.servedBy;\n\n\t\t\t\treturn this.orch.getConverters().get('users').convertById(servedBy._id);\n\t\t\t},\n\t\t\tresponseBy: async (room) => {\n\t\t\t\tconst { responseBy } = room;\n\n\t\t\t\tif (!responseBy) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.responseBy;\n\n\t\t\t\treturn this.orch.getConverters().get('users').convertById(responseBy._id);\n\t\t\t},\n\t\t\tparentRoom: async (room) => {\n\t\t\t\tconst { prid } = room;\n\n\t\t\t\tif (!prid) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tdelete room.prid;\n\n\t\t\t\treturn this.orch.getConverters().get('rooms').convertById(prid);\n\t\t\t},\n\t\t};\n\n\t\treturn transformMappedData(originalRoom, map);\n\t}\n\n\t_convertTypeToApp(typeChar) {\n\t\tswitch (typeChar) {\n\t\t\tcase 'c':\n\t\t\t\treturn RoomType.CHANNEL;\n\t\t\tcase 'p':\n\t\t\t\treturn RoomType.PRIVATE_GROUP;\n\t\t\tcase 'd':\n\t\t\t\treturn RoomType.DIRECT_MESSAGE;\n\t\t\tcase 'l':\n\t\t\t\treturn RoomType.LIVE_CHAT;\n\t\t\tdefault:\n\t\t\t\treturn typeChar;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4528e3604c43c15709b17a91c1cafe8b182adca2"}
