{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js"}},"code":"var _excluded = [\"_id\"],\n  _excluded2 = [\"msg\", \"attachments\"];\nvar _permitedMutations;\nvar _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 0);\nvar _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default: function (v) {\n    _objectWithoutProperties = v;\n  }\n}, 1);\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 2);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 3);\nvar _createClass;\nmodule.link(\"@babel/runtime/helpers/createClass\", {\n  default: function (v) {\n    _createClass = v;\n  }\n}, 4);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 5);\nvar _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default: function (v) {\n    _asyncIterator = v;\n  }\n}, 6);\nmodule.export({\n  E2ERoom: function () {\n    return E2ERoom;\n  }\n});\nvar Base64;\nmodule.link(\"@rocket.chat/base64\", {\n  Base64: function (v) {\n    Base64 = v;\n  }\n}, 0);\nvar Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter: function (v) {\n    Emitter = v;\n  }\n}, 1);\nvar EJSON;\nmodule.link(\"ejson\", {\n  \"default\": function (v) {\n    EJSON = v;\n  }\n}, 2);\nvar RoomManager;\nmodule.link(\"../../../client/lib/RoomManager\", {\n  RoomManager: function (v) {\n    RoomManager = v;\n  }\n}, 3);\nvar roomCoordinator;\nmodule.link(\"../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator: function (v) {\n    roomCoordinator = v;\n  }\n}, 4);\nvar RoomSettingsEnum;\nmodule.link(\"../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum: function (v) {\n    RoomSettingsEnum = v;\n  }\n}, 5);\nvar ChatRoom, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  ChatRoom: function (v) {\n    ChatRoom = v;\n  },\n  Subscriptions: function (v) {\n    Subscriptions = v;\n  },\n  Messages: function (v) {\n    Messages = v;\n  }\n}, 6);\nvar sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk: function (v) {\n    sdk = v;\n  }\n}, 7);\nvar t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t: function (v) {\n    t = v;\n  }\n}, 8);\nvar E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState: function (v) {\n    E2ERoomState = v;\n  }\n}, 9);\nvar toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer, encryptAESCTR, generateAESCTRKey, sha256HashFromArrayBuffer, createSha256HashFromText;\nmodule.link(\"./helper\", {\n  toString: function (v) {\n    toString = v;\n  },\n  toArrayBuffer: function (v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData: function (v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData: function (v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptRSA: function (v) {\n    encryptRSA = v;\n  },\n  encryptAES: function (v) {\n    encryptAES = v;\n  },\n  decryptRSA: function (v) {\n    decryptRSA = v;\n  },\n  decryptAES: function (v) {\n    decryptAES = v;\n  },\n  generateAESKey: function (v) {\n    generateAESKey = v;\n  },\n  exportJWKKey: function (v) {\n    exportJWKKey = v;\n  },\n  importAESKey: function (v) {\n    importAESKey = v;\n  },\n  importRSAKey: function (v) {\n    importRSAKey = v;\n  },\n  readFileAsArrayBuffer: function (v) {\n    readFileAsArrayBuffer = v;\n  },\n  encryptAESCTR: function (v) {\n    encryptAESCTR = v;\n  },\n  generateAESCTRKey: function (v) {\n    generateAESCTRKey = v;\n  },\n  sha256HashFromArrayBuffer: function (v) {\n    sha256HashFromArrayBuffer = v;\n  },\n  createSha256HashFromText: function (v) {\n    createSha256HashFromText = v;\n  }\n}, 10);\nvar _log, logError;\nmodule.link(\"./logger\", {\n  log: function (v) {\n    _log = v;\n  },\n  logError: function (v) {\n    logError = v;\n  }\n}, 11);\nvar e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e: function (v) {\n    e2e = v;\n  }\n}, 12);\nvar KEY_ID = Symbol('keyID');\nvar PAUSED = Symbol('PAUSED');\nvar permitedMutations = (_permitedMutations = {}, _permitedMutations[E2ERoomState.NOT_STARTED] = [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED], _permitedMutations[E2ERoomState.READY] = [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS], _permitedMutations[E2ERoomState.ERROR] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED], _permitedMutations[E2ERoomState.WAITING_KEYS] = [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED], _permitedMutations[E2ERoomState.ESTABLISHING] = [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS, E2ERoomState.CREATING_KEYS], _permitedMutations);\nvar filterMutation = function (currentState, nextState) {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n  return false;\n};\nvar E2ERoom = /*#__PURE__*/function (_Emitter) {\n  function E2ERoom(userId, room) {\n    var _this;\n    _this = _Emitter.call(this) || this;\n    _this.state = undefined;\n    _this[PAUSED] = undefined;\n    _this.userId = userId;\n    _this.roomId = room._id;\n    _this.typeOfRoom = room.t;\n    _this.roomKeyId = room.e2eKeyId;\n    _this.once(E2ERoomState.READY, function () {\n      function _callee() {\n        return _regeneratorRuntime.async(function () {\n          function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(_this.decryptOldRoomKeys());\n              case 2:\n                return _context.abrupt(\"return\", _this.decryptPendingMessages());\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return _callee$;\n        }(), null, null, null, Promise);\n      }\n      return _callee;\n    }());\n    _this.once(E2ERoomState.READY, function () {\n      return _this.decryptSubscription();\n    });\n    _this.on('STATE_CHANGED', function (prev) {\n      if (_this.roomId === RoomManager.opened) {\n        _this.log(\"[PREV: \" + prev + \"]\", 'State CHANGED');\n      }\n    });\n    _this.on('STATE_CHANGED', function () {\n      return _this.handshake();\n    });\n    _this.setState(E2ERoomState.NOT_STARTED);\n    return _this;\n  }\n  _inheritsLoose(E2ERoom, _Emitter);\n  var _proto = E2ERoom.prototype;\n  _proto.log = function () {\n    function log() {\n      for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n        msg[_key] = arguments[_key];\n      }\n      _log.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n    return log;\n  }();\n  _proto.error = function () {\n    function error() {\n      for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        msg[_key2] = arguments[_key2];\n      }\n      logError.apply(void 0, [\"E2E ROOM { state: \" + this.state + \", rid: \" + this.roomId + \" }\"].concat(msg));\n    }\n    return error;\n  }();\n  _proto.hasSessionKey = function () {\n    function hasSessionKey() {\n      return !!this.groupSessionKey;\n    }\n    return hasSessionKey;\n  }();\n  _proto.getState = function () {\n    function getState() {\n      return this.state;\n    }\n    return getState;\n  }();\n  _proto.setState = function () {\n    function setState(requestedState) {\n      var currentState = this.state;\n      var nextState = filterMutation(currentState, requestedState);\n      if (!nextState) {\n        this.error(\"invalid state \" + currentState + \" -> \" + requestedState);\n        return;\n      }\n      this.state = nextState;\n      this.log(currentState, '->', nextState);\n      this.emit('STATE_CHANGED', currentState, nextState, this);\n      this.emit(nextState, this);\n    }\n    return setState;\n  }();\n  _proto.isReady = function () {\n    function isReady() {\n      return this.state === E2ERoomState.READY;\n    }\n    return isReady;\n  }();\n  _proto.isDisabled = function () {\n    function isDisabled() {\n      return this.state === E2ERoomState.DISABLED;\n    }\n    return isDisabled;\n  }();\n  _proto.enable = function () {\n    function enable() {\n      if (this.state === E2ERoomState.READY) {\n        return;\n      }\n      this.setState(E2ERoomState.READY);\n    }\n    return enable;\n  }();\n  _proto.disable = function () {\n    function disable() {\n      this.setState(E2ERoomState.DISABLED);\n    }\n    return disable;\n  }();\n  _proto.pause = function () {\n    function pause() {\n      this.log('PAUSED', this[PAUSED], '->', true);\n      this[PAUSED] = true;\n      this.emit('PAUSED', true);\n    }\n    return pause;\n  }();\n  _proto.resume = function () {\n    function resume() {\n      this.log('PAUSED', this[PAUSED], '->', false);\n      this[PAUSED] = false;\n      this.emit('PAUSED', false);\n    }\n    return resume;\n  }();\n  _proto.keyReceived = function () {\n    function keyReceived() {\n      this.setState(E2ERoomState.KEYS_RECEIVED);\n    }\n    return keyReceived;\n  }();\n  _proto.shouldConvertSentMessages = function () {\n    function shouldConvertSentMessages(message) {\n      var _this2 = this;\n      return _regeneratorRuntime.async(function () {\n        function shouldConvertSentMessages$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(!this.isReady() || this[PAUSED])) {\n                _context2.next = 2;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 2:\n              if (!(this[PAUSED] === undefined)) {\n                _context2.next = 4;\n                break;\n              }\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                _this2.once('PAUSED', resolve);\n              }));\n            case 4:\n              if (!(message.msg[0] === '/')) {\n                _context2.next = 6;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 6:\n              return _context2.abrupt(\"return\", true);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n        return shouldConvertSentMessages$;\n      }(), null, this, null, Promise);\n    }\n    return shouldConvertSentMessages;\n  }();\n  _proto.shouldConvertReceivedMessages = function () {\n    function shouldConvertReceivedMessages() {\n      return this.isReady();\n    }\n    return shouldConvertReceivedMessages;\n  }();\n  _proto.isWaitingKeys = function () {\n    function isWaitingKeys() {\n      return this.state === E2ERoomState.WAITING_KEYS;\n    }\n    return isWaitingKeys;\n  }();\n  _proto.decryptSubscription = function () {\n    function decryptSubscription() {\n      var _subscription$lastMes;\n      var subscription, message;\n      return _regeneratorRuntime.async(function () {\n        function decryptSubscription$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              subscription = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              if (!(((_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.t) !== 'e2e')) {\n                _context3.next = 4;\n                break;\n              }\n              this.log('decryptSubscriptions nothing to do');\n              return _context3.abrupt(\"return\");\n            case 4:\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(this.decryptMessage(subscription.lastMessage));\n            case 6:\n              message = _context3.sent;\n              Subscriptions.update({\n                _id: subscription._id\n              }, {\n                $set: {\n                  lastMessage: message\n                }\n              });\n              this.log('decryptSubscriptions Done');\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n        return decryptSubscription$;\n      }(), null, this, null, Promise);\n    }\n    return decryptSubscription;\n  }();\n  _proto.decryptOldRoomKeys = function () {\n    function decryptOldRoomKeys() {\n      var sub, keys, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, k;\n      return _regeneratorRuntime.async(function () {\n        function decryptOldRoomKeys$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              sub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              if (!(!(sub !== null && sub !== void 0 && sub.oldRoomKeys) || (sub === null || sub === void 0 ? void 0 : sub.oldRoomKeys.length) === 0)) {\n                _context4.next = 4;\n                break;\n              }\n              this.log('decryptOldRoomKeys nothing to do');\n              return _context4.abrupt(\"return\");\n            case 4:\n              keys = [];\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context4.prev = 7;\n              _iterator = _asyncIterator(sub.oldRoomKeys);\n            case 9:\n              _context4.next = 11;\n              return _regeneratorRuntime.awrap(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context4.sent).done)) {\n                _context4.next = 27;\n                break;\n              }\n              key = _step.value;\n              _context4.prev = 13;\n              _context4.next = 16;\n              return _regeneratorRuntime.awrap(this.decryptSessionKey(key.E2EKey));\n            case 16:\n              k = _context4.sent;\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: k\n              }));\n              _context4.next = 24;\n              break;\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](13);\n              this.error(\"Cannot decrypt old room key with id \" + key.e2eKeyId + \". This is likely because user private key changed or is missing. Skipping\");\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: null\n              }));\n            case 24:\n              _iteratorAbruptCompletion = false;\n              _context4.next = 9;\n              break;\n            case 27:\n              _context4.next = 33;\n              break;\n            case 29:\n              _context4.prev = 29;\n              _context4.t1 = _context4[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context4.t1;\n            case 33:\n              _context4.prev = 33;\n              _context4.prev = 34;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context4.next = 38;\n                break;\n              }\n              _context4.next = 38;\n              return _regeneratorRuntime.awrap(_iterator.return());\n            case 38:\n              _context4.prev = 38;\n              if (!_didIteratorError) {\n                _context4.next = 41;\n                break;\n              }\n              throw _iteratorError;\n            case 41:\n              return _context4.finish(38);\n            case 42:\n              return _context4.finish(33);\n            case 43:\n              this.oldKeys = keys;\n              this.log('decryptOldRoomKeys Done');\n            case 45:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n        return decryptOldRoomKeys$;\n      }(), null, this, [[7, 29, 33, 43], [13, 20], [34,, 38, 42]], Promise);\n    }\n    return decryptOldRoomKeys;\n  }();\n  _proto.exportOldRoomKeys = function () {\n    function exportOldRoomKeys(oldKeys) {\n      var keys, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key, k;\n      return _regeneratorRuntime.async(function () {\n        function exportOldRoomKeys$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this.log('exportOldRoomKeys starting');\n              if (!(!oldKeys || oldKeys.length === 0)) {\n                _context5.next = 4;\n                break;\n              }\n              this.log('exportOldRoomKeys nothing to do');\n              return _context5.abrupt(\"return\");\n            case 4:\n              keys = [];\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context5.prev = 7;\n              _iterator2 = _asyncIterator(oldKeys);\n            case 9:\n              _context5.next = 11;\n              return _regeneratorRuntime.awrap(_iterator2.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context5.sent).done)) {\n                _context5.next = 28;\n                break;\n              }\n              key = _step2.value;\n              _context5.prev = 13;\n              if (key.E2EKey) {\n                _context5.next = 16;\n                break;\n              }\n              return _context5.abrupt(\"continue\", 25);\n            case 16:\n              _context5.next = 18;\n              return _regeneratorRuntime.awrap(this.exportSessionKey(key.E2EKey));\n            case 18:\n              k = _context5.sent;\n              keys.push(_objectSpread(_objectSpread({}, key), {}, {\n                E2EKey: k\n              }));\n              _context5.next = 25;\n              break;\n            case 22:\n              _context5.prev = 22;\n              _context5.t0 = _context5[\"catch\"](13);\n              this.error(\"Cannot decrypt old room key with id \" + key.e2eKeyId + \". This is likely because user private key changed or is missing. Skipping\");\n            case 25:\n              _iteratorAbruptCompletion2 = false;\n              _context5.next = 9;\n              break;\n            case 28:\n              _context5.next = 34;\n              break;\n            case 30:\n              _context5.prev = 30;\n              _context5.t1 = _context5[\"catch\"](7);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context5.t1;\n            case 34:\n              _context5.prev = 34;\n              _context5.prev = 35;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context5.next = 39;\n                break;\n              }\n              _context5.next = 39;\n              return _regeneratorRuntime.awrap(_iterator2.return());\n            case 39:\n              _context5.prev = 39;\n              if (!_didIteratorError2) {\n                _context5.next = 42;\n                break;\n              }\n              throw _iteratorError2;\n            case 42:\n              return _context5.finish(39);\n            case 43:\n              return _context5.finish(34);\n            case 44:\n              this.log(\"exportOldRoomKeys Done: \" + keys.length + \" keys exported\");\n              return _context5.abrupt(\"return\", keys);\n            case 46:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n        return exportOldRoomKeys$;\n      }(), null, this, [[7, 30, 34, 44], [13, 22], [35,, 39, 43]], Promise);\n    }\n    return exportOldRoomKeys;\n  }();\n  _proto.decryptPendingMessages = function () {\n    function decryptPendingMessages() {\n      var _this3 = this;\n      return _regeneratorRuntime.async(function () {\n        function decryptPendingMessages$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", Messages.find({\n                rid: this.roomId,\n                t: 'e2e',\n                e2e: 'pending'\n              }).forEach(function () {\n                function _callee2(_ref) {\n                  var _id, msg;\n                  return _regeneratorRuntime.async(function () {\n                    function _callee2$(_context6) {\n                      while (1) switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _id = _ref._id, msg = _objectWithoutProperties(_ref, _excluded);\n                          _context6.t0 = Messages;\n                          _context6.t1 = {\n                            _id: _id\n                          };\n                          _context6.next = 5;\n                          return _regeneratorRuntime.awrap(_this3.decryptMessage(msg));\n                        case 5:\n                          _context6.t2 = _context6.sent;\n                          _context6.t0.update.call(_context6.t0, _context6.t1, _context6.t2);\n                        case 7:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                    return _callee2$;\n                  }(), null, null, null, Promise);\n                }\n                return _callee2;\n              }()));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n        return decryptPendingMessages$;\n      }(), null, this, null, Promise);\n    }\n    return decryptPendingMessages;\n  }() // Initiates E2E Encryption\n  ;\n  _proto.handshake = function () {\n    function handshake() {\n      var groupKey, room;\n      return _regeneratorRuntime.async(function () {\n        function handshake$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (e2e.isReady()) {\n                _context8.next = 2;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 2:\n              if (!(this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED)) {\n                _context8.next = 4;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 4:\n              this.setState(E2ERoomState.ESTABLISHING);\n              _context8.prev = 5;\n              groupKey = Subscriptions.findOne({\n                rid: this.roomId\n              }).E2EKey;\n              if (!groupKey) {\n                _context8.next = 12;\n                break;\n              }\n              _context8.next = 10;\n              return _regeneratorRuntime.awrap(this.importGroupKey(groupKey));\n            case 10:\n              this.setState(E2ERoomState.READY);\n              return _context8.abrupt(\"return\");\n            case 12:\n              _context8.next = 19;\n              break;\n            case 14:\n              _context8.prev = 14;\n              _context8.t0 = _context8[\"catch\"](5);\n              this.setState(E2ERoomState.ERROR);\n              this.error('Error fetching group key: ', _context8.t0);\n              return _context8.abrupt(\"return\");\n            case 19:\n              _context8.prev = 19;\n              room = ChatRoom.findOne({\n                _id: this.roomId\n              }); // Only room creator can set keys for room\n              if (!(!room.e2eKeyId && room.u._id === this.userId)) {\n                _context8.next = 27;\n                break;\n              }\n              this.setState(E2ERoomState.CREATING_KEYS);\n              _context8.next = 25;\n              return _regeneratorRuntime.awrap(this.createGroupKey());\n            case 25:\n              this.setState(E2ERoomState.READY);\n              return _context8.abrupt(\"return\");\n            case 27:\n              this.setState(E2ERoomState.WAITING_KEYS);\n              this.log('Requesting room key');\n              sdk.publish('notify-room-users', [this.roomId + \"/e2ekeyRequest\", this.roomId, room.e2eKeyId]);\n              _context8.next = 35;\n              break;\n            case 32:\n              _context8.prev = 32;\n              _context8.t1 = _context8[\"catch\"](19);\n              // this.error = error;\n              this.setState(E2ERoomState.ERROR);\n            case 35:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n        return handshake$;\n      }(), null, this, [[5, 14], [19, 32]], Promise);\n    }\n    return handshake;\n  }();\n  _proto.isSupportedRoomType = function () {\n    function isSupportedRoomType(type) {\n      return roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n    }\n    return isSupportedRoomType;\n  }();\n  _proto.decryptSessionKey = function () {\n    function decryptSessionKey(key) {\n      return _regeneratorRuntime.async(function () {\n        function decryptSessionKey$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.t0 = importAESKey;\n              _context9.t1 = JSON;\n              _context9.next = 4;\n              return _regeneratorRuntime.awrap(this.exportSessionKey(key));\n            case 4:\n              _context9.t2 = _context9.sent;\n              _context9.t3 = _context9.t1.parse.call(_context9.t1, _context9.t2);\n              return _context9.abrupt(\"return\", (0, _context9.t0)(_context9.t3));\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n        return decryptSessionKey$;\n      }(), null, this, null, Promise);\n    }\n    return decryptSessionKey;\n  }();\n  _proto.exportSessionKey = function () {\n    function exportSessionKey(key) {\n      var decryptedKey;\n      return _regeneratorRuntime.async(function () {\n        function exportSessionKey$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              key = key.slice(12);\n              key = Base64.decode(key);\n              _context10.next = 4;\n              return _regeneratorRuntime.awrap(decryptRSA(e2e.privateKey, key));\n            case 4:\n              decryptedKey = _context10.sent;\n              return _context10.abrupt(\"return\", toString(decryptedKey));\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n        return exportSessionKey$;\n      }(), null, null, null, Promise);\n    }\n    return exportSessionKey;\n  }();\n  _proto.importGroupKey = function () {\n    function importGroupKey(groupKey) {\n      var decryptedKey, key;\n      return _regeneratorRuntime.async(function () {\n        function importGroupKey$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              this.log('Importing room key ->', this.roomId);\n              // Get existing group key\n              // const keyID = groupKey.slice(0, 12);\n              groupKey = groupKey.slice(12);\n              groupKey = Base64.decode(groupKey);\n\n              // Decrypt obtained encrypted session key\n              _context11.prev = 3;\n              _context11.next = 6;\n              return _regeneratorRuntime.awrap(decryptRSA(e2e.privateKey, groupKey));\n            case 6:\n              decryptedKey = _context11.sent;\n              this.sessionKeyExportedString = toString(decryptedKey);\n              _context11.next = 14;\n              break;\n            case 10:\n              _context11.prev = 10;\n              _context11.t0 = _context11[\"catch\"](3);\n              this.error('Error decrypting group key: ', _context11.t0);\n              return _context11.abrupt(\"return\", false);\n            case 14:\n              if (this.keyID) {\n                _context11.next = 21;\n                break;\n              }\n              _context11.t1 = this.roomKeyId;\n              if (_context11.t1) {\n                _context11.next = 20;\n                break;\n              }\n              _context11.next = 19;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(this.sessionKeyExportedString));\n            case 19:\n              _context11.t1 = _context11.sent.slice(0, 12);\n            case 20:\n              this.keyID = _context11.t1;\n            case 21:\n              _context11.prev = 21;\n              _context11.next = 24;\n              return _regeneratorRuntime.awrap(importAESKey(JSON.parse(this.sessionKeyExportedString)));\n            case 24:\n              key = _context11.sent;\n              // Key has been obtained. E2E is now in session.\n              this.groupSessionKey = key;\n              _context11.next = 32;\n              break;\n            case 28:\n              _context11.prev = 28;\n              _context11.t2 = _context11[\"catch\"](21);\n              this.error('Error importing group key: ', _context11.t2);\n              return _context11.abrupt(\"return\", false);\n            case 32:\n              return _context11.abrupt(\"return\", true);\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n        return importGroupKey$;\n      }(), null, this, [[3, 10], [21, 28]], Promise);\n    }\n    return importGroupKey;\n  }();\n  _proto.createNewGroupKey = function () {\n    function createNewGroupKey() {\n      var sessionKeyExported;\n      return _regeneratorRuntime.async(function () {\n        function createNewGroupKey$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(generateAESKey());\n            case 2:\n              this.groupSessionKey = _context12.sent;\n              _context12.next = 5;\n              return _regeneratorRuntime.awrap(exportJWKKey(this.groupSessionKey));\n            case 5:\n              sessionKeyExported = _context12.sent;\n              this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n              _context12.next = 9;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(this.sessionKeyExportedString));\n            case 9:\n              this.keyID = _context12.sent.slice(0, 12);\n            case 10:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n        return createNewGroupKey$;\n      }(), null, this, null, Promise);\n    }\n    return createNewGroupKey;\n  }();\n  _proto.createGroupKey = function () {\n    function createGroupKey() {\n      return _regeneratorRuntime.async(function () {\n        function createGroupKey$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              this.log('Creating room key');\n              _context13.prev = 1;\n              _context13.next = 4;\n              return _regeneratorRuntime.awrap(this.createNewGroupKey());\n            case 4:\n              _context13.next = 6;\n              return _regeneratorRuntime.awrap(sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID));\n            case 6:\n              _context13.t0 = _regeneratorRuntime;\n              _context13.t1 = sdk.rest;\n              _context13.t2 = this.roomId;\n              _context13.t3 = this.userId;\n              _context13.next = 12;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(e2e.publicKey));\n            case 12:\n              _context13.t4 = _context13.sent;\n              _context13.t5 = {\n                rid: _context13.t2,\n                uid: _context13.t3,\n                key: _context13.t4\n              };\n              _context13.t6 = _context13.t1.post.call(_context13.t1, '/v1/e2e.updateGroupKey', _context13.t5);\n              _context13.next = 17;\n              return _context13.t0.awrap.call(_context13.t0, _context13.t6);\n            case 17:\n              _context13.next = 19;\n              return _regeneratorRuntime.awrap(this.encryptKeyForOtherParticipants());\n            case 19:\n              _context13.next = 25;\n              break;\n            case 21:\n              _context13.prev = 21;\n              _context13.t7 = _context13[\"catch\"](1);\n              this.error('Error exporting group key: ', _context13.t7);\n              throw _context13.t7;\n            case 25:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n        return createGroupKey$;\n      }(), null, this, [[1, 21]], Promise);\n    }\n    return createGroupKey;\n  }();\n  _proto.resetRoomKey = function () {\n    function resetRoomKey() {\n      var e2eNewKeys;\n      return _regeneratorRuntime.async(function () {\n        function resetRoomKey$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              this.log('Resetting room key');\n              if (e2e.publicKey) {\n                _context14.next = 4;\n                break;\n              }\n              this.error('Cannot reset room key. No public key found.');\n              return _context14.abrupt(\"return\");\n            case 4:\n              this.setState(E2ERoomState.CREATING_KEYS);\n              _context14.prev = 5;\n              _context14.next = 8;\n              return _regeneratorRuntime.awrap(this.createNewGroupKey());\n            case 8:\n              _context14.t0 = this.keyID;\n              _context14.next = 11;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(e2e.publicKey));\n            case 11:\n              _context14.t1 = _context14.sent;\n              e2eNewKeys = {\n                e2eKeyId: _context14.t0,\n                e2eKey: _context14.t1\n              };\n              this.setState(E2ERoomState.READY);\n              this.log(\"Room key reset done for room \" + this.roomId);\n              return _context14.abrupt(\"return\", e2eNewKeys);\n            case 18:\n              _context14.prev = 18;\n              _context14.t2 = _context14[\"catch\"](5);\n              this.error('Error resetting group key: ', _context14.t2);\n              throw _context14.t2;\n            case 22:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n        return resetRoomKey$;\n      }(), null, this, [[5, 18]], Promise);\n    }\n    return resetRoomKey;\n  }();\n  _proto.onRoomKeyReset = function () {\n    function onRoomKeyReset(keyID) {\n      this.log(\"Room keyID was reset. New keyID: \" + keyID + \" Previous keyID: \" + this.keyID);\n      this.setState(E2ERoomState.WAITING_KEYS);\n      this.keyID = keyID;\n      this.groupSessionKey = undefined;\n      this.sessionKeyExportedString = undefined;\n      this.sessionKeyExported = undefined;\n      this.oldKeys = undefined;\n    }\n    return onRoomKeyReset;\n  }();\n  _proto.encryptKeyForOtherParticipants = function () {\n    function encryptKeyForOtherParticipants() {\n      var _usersSuggestedGroupK, mySub, decryptedOldGroupKeys, users, usersSuggestedGroupKeys, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, user, encryptedGroupKey, oldKeys;\n      return _regeneratorRuntime.async(function () {\n        function encryptKeyForOtherParticipants$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.prev = 0;\n              mySub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              _context15.next = 4;\n              return _regeneratorRuntime.awrap(this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys));\n            case 4:\n              decryptedOldGroupKeys = _context15.sent;\n              _context15.next = 7;\n              return _regeneratorRuntime.awrap(sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId));\n            case 7:\n              users = _context15.sent.users.filter(function (user) {\n                var _user$e2e;\n                return user === null || user === void 0 ? void 0 : (_user$e2e = user.e2e) === null || _user$e2e === void 0 ? void 0 : _user$e2e.public_key;\n              });\n              if (users.length) {\n                _context15.next = 10;\n                break;\n              }\n              return _context15.abrupt(\"return\");\n            case 10:\n              usersSuggestedGroupKeys = (_usersSuggestedGroupK = {}, _usersSuggestedGroupK[this.roomId] = [], _usersSuggestedGroupK);\n              _iteratorAbruptCompletion3 = false;\n              _didIteratorError3 = false;\n              _context15.prev = 13;\n              _iterator3 = _asyncIterator(users);\n            case 15:\n              _context15.next = 17;\n              return _regeneratorRuntime.awrap(_iterator3.next());\n            case 17:\n              if (!(_iteratorAbruptCompletion3 = !(_step3 = _context15.sent).done)) {\n                _context15.next = 29;\n                break;\n              }\n              user = _step3.value;\n              _context15.next = 21;\n              return _regeneratorRuntime.awrap(this.encryptGroupKeyForParticipant(user.e2e.public_key));\n            case 21:\n              encryptedGroupKey = _context15.sent;\n              _context15.next = 24;\n              return _regeneratorRuntime.awrap(this.encryptOldKeysForParticipant(user.e2e.public_key, decryptedOldGroupKeys));\n            case 24:\n              oldKeys = _context15.sent;\n              usersSuggestedGroupKeys[this.roomId].push(_objectSpread({\n                _id: user._id,\n                key: encryptedGroupKey\n              }, oldKeys && {\n                oldKeys: oldKeys\n              }));\n            case 26:\n              _iteratorAbruptCompletion3 = false;\n              _context15.next = 15;\n              break;\n            case 29:\n              _context15.next = 35;\n              break;\n            case 31:\n              _context15.prev = 31;\n              _context15.t0 = _context15[\"catch\"](13);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context15.t0;\n            case 35:\n              _context15.prev = 35;\n              _context15.prev = 36;\n              if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n                _context15.next = 40;\n                break;\n              }\n              _context15.next = 40;\n              return _regeneratorRuntime.awrap(_iterator3.return());\n            case 40:\n              _context15.prev = 40;\n              if (!_didIteratorError3) {\n                _context15.next = 43;\n                break;\n              }\n              throw _iteratorError3;\n            case 43:\n              return _context15.finish(40);\n            case 44:\n              return _context15.finish(35);\n            case 45:\n              _context15.next = 47;\n              return _regeneratorRuntime.awrap(sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', {\n                usersSuggestedGroupKeys: usersSuggestedGroupKeys\n              }));\n            case 47:\n              _context15.next = 52;\n              break;\n            case 49:\n              _context15.prev = 49;\n              _context15.t1 = _context15[\"catch\"](0);\n              return _context15.abrupt(\"return\", this.error('Error getting room users: ', _context15.t1));\n            case 52:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n        return encryptKeyForOtherParticipants$;\n      }(), null, this, [[0, 49], [13, 31, 35, 45], [36,, 40, 44]], Promise);\n    }\n    return encryptKeyForOtherParticipants;\n  }();\n  _proto.encryptOldKeysForParticipant = function () {\n    function encryptOldKeysForParticipant(public_key, oldRoomKeys) {\n      var userKey, keys, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, oldRoomKey, encryptedKey, encryptedKeyToString;\n      return _regeneratorRuntime.async(function () {\n        function encryptOldKeysForParticipant$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!(!oldRoomKeys || oldRoomKeys.length === 0)) {\n                _context16.next = 2;\n                break;\n              }\n              return _context16.abrupt(\"return\");\n            case 2:\n              _context16.prev = 2;\n              _context16.next = 5;\n              return _regeneratorRuntime.awrap(importRSAKey(JSON.parse(public_key), ['encrypt']));\n            case 5:\n              userKey = _context16.sent;\n              _context16.next = 11;\n              break;\n            case 8:\n              _context16.prev = 8;\n              _context16.t0 = _context16[\"catch\"](2);\n              return _context16.abrupt(\"return\", this.error('Error importing user key: ', _context16.t0));\n            case 11:\n              _context16.prev = 11;\n              keys = [];\n              _iteratorAbruptCompletion4 = false;\n              _didIteratorError4 = false;\n              _context16.prev = 15;\n              _iterator4 = _asyncIterator(oldRoomKeys);\n            case 17:\n              _context16.next = 19;\n              return _regeneratorRuntime.awrap(_iterator4.next());\n            case 19:\n              if (!(_iteratorAbruptCompletion4 = !(_step4 = _context16.sent).done)) {\n                _context16.next = 31;\n                break;\n              }\n              oldRoomKey = _step4.value;\n              if (oldRoomKey.E2EKey) {\n                _context16.next = 23;\n                break;\n              }\n              return _context16.abrupt(\"continue\", 28);\n            case 23:\n              _context16.next = 25;\n              return _regeneratorRuntime.awrap(encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey)));\n            case 25:\n              encryptedKey = _context16.sent;\n              encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n              keys.push(_objectSpread(_objectSpread({}, oldRoomKey), {}, {\n                E2EKey: encryptedKeyToString\n              }));\n            case 28:\n              _iteratorAbruptCompletion4 = false;\n              _context16.next = 17;\n              break;\n            case 31:\n              _context16.next = 37;\n              break;\n            case 33:\n              _context16.prev = 33;\n              _context16.t1 = _context16[\"catch\"](15);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context16.t1;\n            case 37:\n              _context16.prev = 37;\n              _context16.prev = 38;\n              if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n                _context16.next = 42;\n                break;\n              }\n              _context16.next = 42;\n              return _regeneratorRuntime.awrap(_iterator4.return());\n            case 42:\n              _context16.prev = 42;\n              if (!_didIteratorError4) {\n                _context16.next = 45;\n                break;\n              }\n              throw _iteratorError4;\n            case 45:\n              return _context16.finish(42);\n            case 46:\n              return _context16.finish(37);\n            case 47:\n              return _context16.abrupt(\"return\", keys);\n            case 50:\n              _context16.prev = 50;\n              _context16.t2 = _context16[\"catch\"](11);\n              return _context16.abrupt(\"return\", this.error('Error encrypting user key: ', _context16.t2));\n            case 53:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n        return encryptOldKeysForParticipant$;\n      }(), null, this, [[2, 8], [11, 50], [15, 33, 37, 47], [38,, 42, 46]], Promise);\n    }\n    return encryptOldKeysForParticipant;\n  }();\n  _proto.encryptGroupKeyForParticipant = function () {\n    function encryptGroupKeyForParticipant(public_key) {\n      var userKey, encryptedUserKey, encryptedUserKeyToString;\n      return _regeneratorRuntime.async(function () {\n        function encryptGroupKeyForParticipant$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.prev = 0;\n              _context17.next = 3;\n              return _regeneratorRuntime.awrap(importRSAKey(JSON.parse(public_key), ['encrypt']));\n            case 3:\n              userKey = _context17.sent;\n              _context17.next = 9;\n              break;\n            case 6:\n              _context17.prev = 6;\n              _context17.t0 = _context17[\"catch\"](0);\n              return _context17.abrupt(\"return\", this.error('Error importing user key: ', _context17.t0));\n            case 9:\n              _context17.prev = 9;\n              _context17.next = 12;\n              return _regeneratorRuntime.awrap(encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString)));\n            case 12:\n              encryptedUserKey = _context17.sent;\n              encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n              return _context17.abrupt(\"return\", encryptedUserKeyToString);\n            case 17:\n              _context17.prev = 17;\n              _context17.t1 = _context17[\"catch\"](9);\n              return _context17.abrupt(\"return\", this.error('Error encrypting user key: ', _context17.t1));\n            case 20:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n        return encryptGroupKeyForParticipant$;\n      }(), null, this, [[0, 6], [9, 17]], Promise);\n    }\n    return encryptGroupKeyForParticipant;\n  }() // Encrypts files before upload. I/O is in arraybuffers.\n  ;\n  _proto.encryptFile = function () {\n    function encryptFile(file) {\n      var fileArrayBuffer, hash, vector, key, result, exportedKey, fileName, encryptedFile;\n      return _regeneratorRuntime.async(function () {\n        function encryptFile$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return _regeneratorRuntime.awrap(readFileAsArrayBuffer(file));\n            case 2:\n              fileArrayBuffer = _context18.sent;\n              _context18.next = 5;\n              return _regeneratorRuntime.awrap(sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer)));\n            case 5:\n              hash = _context18.sent;\n              vector = crypto.getRandomValues(new Uint8Array(16));\n              _context18.next = 9;\n              return _regeneratorRuntime.awrap(generateAESCTRKey());\n            case 9:\n              key = _context18.sent;\n              _context18.prev = 10;\n              _context18.next = 13;\n              return _regeneratorRuntime.awrap(encryptAESCTR(vector, key, fileArrayBuffer));\n            case 13:\n              result = _context18.sent;\n              _context18.next = 20;\n              break;\n            case 16:\n              _context18.prev = 16;\n              _context18.t0 = _context18[\"catch\"](10);\n              console.log(_context18.t0);\n              return _context18.abrupt(\"return\", this.error('Error encrypting group key: ', _context18.t0));\n            case 20:\n              _context18.next = 22;\n              return _regeneratorRuntime.awrap(window.crypto.subtle.exportKey('jwk', key));\n            case 22:\n              exportedKey = _context18.sent;\n              _context18.next = 25;\n              return _regeneratorRuntime.awrap(createSha256HashFromText(file.name));\n            case 25:\n              fileName = _context18.sent;\n              encryptedFile = new File([toArrayBuffer(result)], fileName);\n              return _context18.abrupt(\"return\", {\n                file: encryptedFile,\n                key: exportedKey,\n                iv: Base64.encode(vector),\n                type: file.type,\n                hash: hash\n              });\n            case 28:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n        return encryptFile$;\n      }(), null, this, [[10, 16]], Promise);\n    }\n    return encryptFile;\n  }() // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n  ;\n  _proto.decryptFile = function () {\n    function decryptFile(file, key, iv) {\n      var ivArray, cryptoKey;\n      return _regeneratorRuntime.async(function () {\n        function decryptFile$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              ivArray = Base64.decode(iv);\n              _context19.next = 3;\n              return _regeneratorRuntime.awrap(window.crypto.subtle.importKey('jwk', key, {\n                name: 'AES-CTR'\n              }, true, ['encrypt', 'decrypt']));\n            case 3:\n              cryptoKey = _context19.sent;\n              return _context19.abrupt(\"return\", window.crypto.subtle.decrypt({\n                name: 'AES-CTR',\n                counter: ivArray,\n                length: 64\n              }, cryptoKey, file));\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n        return decryptFile$;\n      }(), null, null, null, Promise);\n    }\n    return decryptFile;\n  }() // Encrypts messages\n  ;\n  _proto.encryptText = function () {\n    function encryptText(data) {\n      var vector, result;\n      return _regeneratorRuntime.async(function () {\n        function encryptText$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              vector = crypto.getRandomValues(new Uint8Array(16));\n              _context20.prev = 1;\n              _context20.next = 4;\n              return _regeneratorRuntime.awrap(encryptAES(vector, this.groupSessionKey, data));\n            case 4:\n              result = _context20.sent;\n              return _context20.abrupt(\"return\", this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result)));\n            case 8:\n              _context20.prev = 8;\n              _context20.t0 = _context20[\"catch\"](1);\n              this.error('Error encrypting message: ', _context20.t0);\n              throw _context20.t0;\n            case 12:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n        return encryptText$;\n      }(), null, this, [[1, 8]], Promise);\n    }\n    return encryptText;\n  }() // Helper function for encryption of content\n  ;\n  _proto.encryptMessageContent = function () {\n    function encryptMessageContent(contentToBeEncrypted) {\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function encryptMessageContent$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n              _context21.next = 3;\n              return _regeneratorRuntime.awrap(this.encryptText(data));\n            case 3:\n              _context21.t0 = _context21.sent;\n              return _context21.abrupt(\"return\", {\n                algorithm: 'rc.v1.aes-sha2',\n                ciphertext: _context21.t0\n              });\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n        return encryptMessageContent$;\n      }(), null, this, null, Promise);\n    }\n    return encryptMessageContent;\n  }() // Helper function for encryption of content\n  ;\n  _proto.encryptMessage = function () {\n    function encryptMessage(message) {\n      var msg, attachments, rest, content;\n      return _regeneratorRuntime.async(function () {\n        function encryptMessage$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              msg = message.msg, attachments = message.attachments, rest = _objectWithoutProperties(message, _excluded2);\n              _context22.next = 3;\n              return _regeneratorRuntime.awrap(this.encryptMessageContent({\n                msg: msg,\n                attachments: attachments\n              }));\n            case 3:\n              content = _context22.sent;\n              return _context22.abrupt(\"return\", _objectSpread(_objectSpread({}, rest), {}, {\n                content: content,\n                t: 'e2e',\n                e2e: 'pending'\n              }));\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n        return encryptMessage$;\n      }(), null, this, null, Promise);\n    }\n    return encryptMessage;\n  }() // Helper function for encryption of messages\n  ;\n  _proto.encrypt = function () {\n    function encrypt(message) {\n      if (!this.isSupportedRoomType(this.typeOfRoom)) {\n        return;\n      }\n      if (!this.groupSessionKey) {\n        throw new Error(t('E2E_Invalid_Key'));\n      }\n      var ts = new Date();\n      var data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n        _id: message._id,\n        text: message.msg,\n        userId: this.userId,\n        ts: ts\n      }));\n      return this.encryptText(data);\n    }\n    return encrypt;\n  }();\n  _proto.decryptContent = function () {\n    function decryptContent(data) {\n      var content;\n      return _regeneratorRuntime.async(function () {\n        function decryptContent$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!(data.content && data.content.algorithm === 'rc.v1.aes-sha2')) {\n                _context23.next = 5;\n                break;\n              }\n              _context23.next = 3;\n              return _regeneratorRuntime.awrap(this.decrypt(data.content.ciphertext));\n            case 3:\n              content = _context23.sent;\n              Object.assign(data, content);\n            case 5:\n              return _context23.abrupt(\"return\", data);\n            case 6:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n        return decryptContent$;\n      }(), null, this, null, Promise);\n    }\n    return decryptContent;\n  }() // Decrypt messages\n  ;\n  _proto.decryptMessage = function () {\n    function decryptMessage(message) {\n      var data;\n      return _regeneratorRuntime.async(function () {\n        function decryptMessage$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              if (!(message.t !== 'e2e' || message.e2e === 'done')) {\n                _context24.next = 2;\n                break;\n              }\n              return _context24.abrupt(\"return\", message);\n            case 2:\n              if (!message.msg) {\n                _context24.next = 7;\n                break;\n              }\n              _context24.next = 5;\n              return _regeneratorRuntime.awrap(this.decrypt(message.msg));\n            case 5:\n              data = _context24.sent;\n              if (data !== null && data !== void 0 && data.text) {\n                message.msg = data.text;\n              }\n            case 7:\n              _context24.next = 9;\n              return _regeneratorRuntime.awrap(this.decryptContent(message));\n            case 9:\n              message = _context24.sent;\n              return _context24.abrupt(\"return\", _objectSpread(_objectSpread({}, message), {}, {\n                e2e: 'done'\n              }));\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n        return decryptMessage$;\n      }(), null, this, null, Promise);\n    }\n    return decryptMessage;\n  }();\n  _proto.decrypt = function () {\n    function decrypt(message) {\n      var keyID, oldKey, _this$oldKeys, oldRoomKey, _splitVectorAndEcrypt, _splitVectorAndEcrypt2, vector, cipherText, result;\n      return _regeneratorRuntime.async(function () {\n        function decrypt$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              keyID = message.slice(0, 12);\n              oldKey = '';\n              if (!(keyID !== this.keyID)) {\n                _context25.next = 8;\n                break;\n              }\n              oldRoomKey = (_this$oldKeys = this.oldKeys) === null || _this$oldKeys === void 0 ? void 0 : _this$oldKeys.find(function (key) {\n                return key.e2eKeyId === keyID;\n              }); // Messages already contain a keyID stored with them\n              // That means that if we cannot find a keyID for the key the message has preppended to\n              // The message is indecipherable.\n              if (oldRoomKey) {\n                _context25.next = 7;\n                break;\n              }\n              this.error(\"Message is indecipherable. Message KeyID \" + keyID + \" not found in old room keys\");\n              return _context25.abrupt(\"return\", {\n                msg: t('E2E_indecipherable')\n              });\n            case 7:\n              oldKey = oldRoomKey.E2EKey;\n            case 8:\n              message = message.slice(12);\n              _splitVectorAndEcrypt = splitVectorAndEcryptedData(Base64.decode(message)), _splitVectorAndEcrypt2 = _slicedToArray(_splitVectorAndEcrypt, 2), vector = _splitVectorAndEcrypt2[0], cipherText = _splitVectorAndEcrypt2[1];\n              _context25.prev = 10;\n              _context25.next = 13;\n              return _regeneratorRuntime.awrap(decryptAES(vector, oldKey || this.groupSessionKey, cipherText));\n            case 13:\n              result = _context25.sent;\n              return _context25.abrupt(\"return\", EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result))));\n            case 17:\n              _context25.prev = 17;\n              _context25.t0 = _context25[\"catch\"](10);\n              this.error('Error decrypting message: ', _context25.t0, message);\n              return _context25.abrupt(\"return\", {\n                msg: t('E2E_Key_Error')\n              });\n            case 21:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n        return decrypt$;\n      }(), null, this, [[10, 17]], Promise);\n    }\n    return decrypt;\n  }();\n  _proto.provideKeyToUser = function () {\n    function provideKeyToUser(keyId) {\n      if (this.keyID !== keyId) {\n        return;\n      }\n      this.encryptKeyForOtherParticipants();\n      this.setState(E2ERoomState.READY);\n    }\n    return provideKeyToUser;\n  }();\n  _proto.onStateChange = function () {\n    function onStateChange(cb) {\n      var _this4 = this;\n      this.on('STATE_CHANGED', cb);\n      return function () {\n        return _this4.off('STATE_CHANGED', cb);\n      };\n    }\n    return onStateChange;\n  }();\n  _proto.encryptGroupKeyForParticipantsWaitingForTheKeys = function () {\n    function encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n      var _this5 = this;\n      var mySub, decryptedOldGroupKeys, usersWithKeys;\n      return _regeneratorRuntime.async(function () {\n        function encryptGroupKeyForParticipantsWaitingForTheKeys$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              if (this.isReady()) {\n                _context27.next = 2;\n                break;\n              }\n              return _context27.abrupt(\"return\");\n            case 2:\n              mySub = Subscriptions.findOne({\n                rid: this.roomId\n              });\n              _context27.next = 5;\n              return _regeneratorRuntime.awrap(this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys));\n            case 5:\n              decryptedOldGroupKeys = _context27.sent;\n              _context27.next = 8;\n              return _regeneratorRuntime.awrap(Promise.all(users.map(function () {\n                function _callee3(user) {\n                  var _id, public_key, key, oldKeys;\n                  return _regeneratorRuntime.async(function () {\n                    function _callee3$(_context26) {\n                      while (1) switch (_context26.prev = _context26.next) {\n                        case 0:\n                          _id = user._id, public_key = user.public_key;\n                          _context26.next = 3;\n                          return _regeneratorRuntime.awrap(_this5.encryptGroupKeyForParticipant(public_key));\n                        case 3:\n                          key = _context26.sent;\n                          _context26.next = 6;\n                          return _regeneratorRuntime.awrap(_this5.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys));\n                        case 6:\n                          oldKeys = _context26.sent;\n                          return _context26.abrupt(\"return\", _objectSpread({\n                            _id: _id,\n                            key: key\n                          }, oldKeys && {\n                            oldKeys: oldKeys\n                          }));\n                        case 8:\n                        case \"end\":\n                          return _context26.stop();\n                      }\n                    }\n                    return _callee3$;\n                  }(), null, null, null, Promise);\n                }\n                return _callee3;\n              }())));\n            case 8:\n              usersWithKeys = _context27.sent;\n              return _context27.abrupt(\"return\", usersWithKeys);\n            case 10:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n        return encryptGroupKeyForParticipantsWaitingForTheKeys$;\n      }(), null, this, null, Promise);\n    }\n    return encryptGroupKeyForParticipantsWaitingForTheKeys;\n  }();\n  return _createClass(E2ERoom, [{\n    key: \"keyID\",\n    get: function () {\n      return this[KEY_ID];\n    },\n    set: function (keyID) {\n      this[KEY_ID] = keyID;\n    }\n  }]);\n}(Emitter);","map":{"version":3,"names":["_slicedToArray","module","link","default","v","_objectWithoutProperties","_regeneratorRuntime","_objectSpread","_createClass","_inheritsLoose","_asyncIterator","export","E2ERoom","Base64","Emitter","EJSON","RoomManager","roomCoordinator","RoomSettingsEnum","ChatRoom","Subscriptions","Messages","sdk","t","E2ERoomState","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","encryptAESCTR","generateAESCTRKey","sha256HashFromArrayBuffer","createSha256HashFromText","log","logError","e2e","KEY_ID","Symbol","PAUSED","permitedMutations","_permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","CREATING_KEYS","WAITING_KEYS","ERROR","filterMutation","currentState","nextState","includes","_Emitter","userId","room","_this","call","state","undefined","roomId","_id","typeOfRoom","roomKeyId","e2eKeyId","once","_callee","async","_callee$","_context","prev","next","awrap","decryptOldRoomKeys","abrupt","decryptPendingMessages","stop","Promise","decryptSubscription","on","opened","handshake","setState","_proto","prototype","_len","arguments","length","msg","Array","_key","apply","concat","error","_len2","_key2","hasSessionKey","groupSessionKey","getState","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","message","_this2","shouldConvertSentMessages$","_context2","resolve","shouldConvertReceivedMessages","isWaitingKeys","_subscription$lastMes","subscription","decryptSubscription$","_context3","findOne","rid","lastMessage","decryptMessage","sent","update","$set","sub","keys","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","key","k","decryptOldRoomKeys$","_context4","oldRoomKeys","done","value","decryptSessionKey","E2EKey","push","t0","t1","return","finish","oldKeys","exportOldRoomKeys","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","exportOldRoomKeys$","_context5","exportSessionKey","_this3","decryptPendingMessages$","_context7","find","forEach","_callee2","_ref","_callee2$","_context6","_excluded","t2","groupKey","handshake$","_context8","importGroupKey","u","createGroupKey","publish","isSupportedRoomType","type","getRoomDirectives","allowRoomSettingChange","E2E","decryptSessionKey$","_context9","JSON","t3","parse","decryptedKey","exportSessionKey$","_context10","slice","decode","privateKey","importGroupKey$","_context11","sessionKeyExportedString","keyID","createNewGroupKey","sessionKeyExported","createNewGroupKey$","_context12","stringify","createGroupKey$","_context13","rest","encryptGroupKeyForParticipant","publicKey","t4","t5","uid","t6","post","encryptKeyForOtherParticipants","t7","resetRoomKey","e2eNewKeys","resetRoomKey$","_context14","e2eKey","onRoomKeyReset","_usersSuggestedGroupK","mySub","decryptedOldGroupKeys","users","usersSuggestedGroupKeys","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","user","encryptedGroupKey","encryptKeyForOtherParticipants$","_context15","filter","_user$e2e","public_key","encryptOldKeysForParticipant","userKey","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","oldRoomKey","encryptedKey","encryptedKeyToString","encryptOldKeysForParticipant$","_context16","encode","Uint8Array","encryptedUserKey","encryptedUserKeyToString","encryptGroupKeyForParticipant$","_context17","encryptFile","file","fileArrayBuffer","hash","vector","result","exportedKey","fileName","encryptedFile","encryptFile$","_context18","crypto","getRandomValues","console","window","subtle","exportKey","name","File","iv","decryptFile","ivArray","cryptoKey","decryptFile$","_context19","importKey","decrypt","counter","encryptText","data","encryptText$","_context20","encryptMessageContent","contentToBeEncrypted","encryptMessageContent$","_context21","TextEncoder","algorithm","ciphertext","encryptMessage","attachments","content","encryptMessage$","_context22","_excluded2","encrypt","Error","ts","Date","text","decryptContent","decryptContent$","_context23","Object","assign","decryptMessage$","_context24","oldKey","_this$oldKeys","_splitVectorAndEcrypt","_splitVectorAndEcrypt2","cipherText","decrypt$","_context25","TextDecoder","provideKeyToUser","keyId","onStateChange","cb","_this4","off","encryptGroupKeyForParticipantsWaitingForTheKeys","_this5","usersWithKeys","encryptGroupKeyForParticipantsWaitingForTheKeys$","_context27","all","map","_callee3","_callee3$","_context26","get","set"],"sources":["app/e2e/client/rocketchat.e2e.room.js"],"sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState, nextState) => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate = undefined;\n\n\t[PAUSED] = undefined;\n\n\tconstructor(userId, room) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState, nextState, this);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && room.u._id === this.userId) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tisSupportedRoomType(type) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey),\n\t\t\t});\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e.public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(public_key, oldRoomKeys) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(public_key) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file, key, iv) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder('UTF-8').encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync decrypt(message) {\n\t\tconst keyID = message.slice(0, 12);\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\tthis.error(`Message is indecipherable. Message KeyID ${keyID} not found in old room keys`);\n\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\ttry {\n\t\t\tconst result = await decryptAES(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0f4c1e467c0198b48073f9302fe67bbb937cfa49"}
