{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAdapter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/SlackAdapter.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAdapter.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAdapter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/SlackAdapter.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      default: () => SlackAdapter\n    });\n    let http;\n    module.link(\"http\", {\n      default(v) {\n        http = v;\n      }\n    }, 0);\n    let https;\n    module.link(\"https\", {\n      default(v) {\n        https = v;\n      }\n    }, 1);\n    let url;\n    module.link(\"url\", {\n      default(v) {\n        url = v;\n      }\n    }, 2);\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 3);\n    let Messages, Rooms, Users, ReadReceipts;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      }\n    }, 4);\n    let SlackApp;\n    module.link(\"@slack/bolt\", {\n      App(v) {\n        SlackApp = v;\n      }\n    }, 5);\n    let RTMClient;\n    module.link(\"@slack/rtm-api\", {\n      RTMClient(v) {\n        RTMClient = v;\n      }\n    }, 6);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 7);\n    let saveRoomName, saveRoomTopic;\n    module.link(\"../../channel-settings/server\", {\n      saveRoomName(v) {\n        saveRoomName = v;\n      },\n      saveRoomTopic(v) {\n        saveRoomTopic = v;\n      }\n    }, 8);\n    let FileUpload;\n    module.link(\"../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 9);\n    let addUserToRoom;\n    module.link(\"../../lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 10);\n    let archiveRoom;\n    module.link(\"../../lib/server/functions/archiveRoom\", {\n      archiveRoom(v) {\n        archiveRoom = v;\n      }\n    }, 11);\n    let deleteMessage;\n    module.link(\"../../lib/server/functions/deleteMessage\", {\n      deleteMessage(v) {\n        deleteMessage = v;\n      }\n    }, 12);\n    let removeUserFromRoom;\n    module.link(\"../../lib/server/functions/removeUserFromRoom\", {\n      removeUserFromRoom(v) {\n        removeUserFromRoom = v;\n      }\n    }, 13);\n    let sendMessage;\n    module.link(\"../../lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 14);\n    let unarchiveRoom;\n    module.link(\"../../lib/server/functions/unarchiveRoom\", {\n      unarchiveRoom(v) {\n        unarchiveRoom = v;\n      }\n    }, 15);\n    let updateMessage;\n    module.link(\"../../lib/server/functions/updateMessage\", {\n      updateMessage(v) {\n        updateMessage = v;\n      }\n    }, 16);\n    let executeSetReaction;\n    module.link(\"../../reactions/server/setReaction\", {\n      executeSetReaction(v) {\n        executeSetReaction = v;\n      }\n    }, 17);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 18);\n    let getUserAvatarURL;\n    module.link(\"../../utils/server/getUserAvatarURL\", {\n      getUserAvatarURL(v) {\n        getUserAvatarURL = v;\n      }\n    }, 19);\n    let SlackAPI;\n    module.link(\"./SlackAPI\", {\n      SlackAPI(v) {\n        SlackAPI = v;\n      }\n    }, 20);\n    let slackLogger;\n    module.link(\"./logger\", {\n      slackLogger(v) {\n        slackLogger = v;\n      }\n    }, 21);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class SlackAdapter {\n      constructor(slackBridge) {\n        slackLogger.debug('constructor');\n        this.slackBridge = slackBridge;\n        this.rtm = {}; // slack-client Real Time Messaging API\n        this.apiToken = {}; // Slack API Token passed in via Connect\n        this.slackApp = {};\n        this.appCredential = {};\n        // On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n        this.slackChannelRocketBotMembershipMap = new Map(); // Key=RocketChannelID, Value=SlackChannel\n        this.rocket = {};\n        this.messagesBeingSent = [];\n        this.slackBotId = false;\n        this.slackAPI = {};\n      }\n      async connect(_ref) {\n        let {\n          apiToken,\n          appCredential\n        } = _ref;\n        try {\n          const connectResult = await (appCredential ? this.connectApp(appCredential) : this.connectLegacy(apiToken));\n          if (connectResult) {\n            slackLogger.info('Connected to Slack');\n            slackLogger.debug('Slack connection result: ', connectResult);\n            Meteor.startup(async () => {\n              try {\n                await this.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n              } catch (err) {\n                slackLogger.error({\n                  msg: 'Error attempting to connect to Slack',\n                  err\n                });\n                if (err.data.error === 'invalid_auth') {\n                  slackLogger.error('The provided token is invalid');\n                }\n                this.slackBridge.disconnect();\n              }\n            });\n          }\n        } catch (err) {\n          slackLogger.error({\n            msg: 'Error attempting to connect to Slack',\n            err\n          });\n          this.slackBridge.disconnect();\n        }\n      }\n\n      /**\n       * Connect to the remote Slack server using the passed in app credential and register for Slack events.\n       * @typedef {Object} AppCredential\n       * @property {string} botToken\n       * @property {string} appToken\n       * @property {string} signingSecret\n       * @param {AppCredential} appCredential\n       */\n      async connectApp(appCredential) {\n        this.appCredential = appCredential;\n\n        // Invalid app credentials causes unhandled errors\n        if (!(await SlackAPI.verifyAppCredentials(appCredential))) {\n          throw new Error('Invalid app credentials (botToken or appToken) for the slack app');\n        }\n        this.slackAPI = new SlackAPI(this.appCredential.botToken);\n        this.slackApp = new SlackApp({\n          appToken: this.appCredential.appToken,\n          signingSecret: this.appCredential.signingSecret,\n          token: this.appCredential.botToken,\n          socketMode: true\n        });\n        this.registerForEvents();\n        const connectionResult = await this.slackApp.start();\n        return connectionResult;\n      }\n\n      /**\n       * Connect to the remote Slack server using the passed in token API and register for Slack events.\n       * @param apiToken\n       * @deprecated\n       */\n      async connectLegacy(apiToken) {\n        this.apiToken = apiToken;\n\n        // Invalid apiToken causes unhandled errors\n        if (!(await SlackAPI.verifyToken(apiToken))) {\n          throw new Error('Invalid ApiToken for the slack legacy bot integration');\n        }\n        if (RTMClient != null) {\n          RTMClient.disconnect;\n        }\n        this.slackAPI = new SlackAPI(this.apiToken);\n        this.rtm = new RTMClient(this.apiToken);\n        this.registerForEventsLegacy();\n        const connectionResult = await this.rtm.start();\n        return connectionResult;\n      }\n\n      /**\n       * Unregister for slack events and disconnect from Slack\n       */\n      async disconnect() {\n        if (this.rtm.connected && this.rtm.disconnect) {\n          await this.rtm.disconnect();\n        } else if (this.slackApp.stop) {\n          await this.slackApp.stop();\n        }\n      }\n      setRocket(rocket) {\n        this.rocket = rocket;\n      }\n      registerForEvents() {\n        /**\n         * message: {\n         * \"client_msg_id\": \"caab144d-41e7-47cc-87fa-af5d50c02784\",\n         * \"type\": \"message\",\n         * \"text\": \"heyyyyy\",\n         * \"user\": \"U060WD4QW81\",\n         * \"ts\": \"1697054782.214569\",\n         * \"blocks\": [],\n         * \"team\": \"T060383CUDV\",\n         * \"channel\": \"C060HSLQPCN\",\n         * \"event_ts\": \"1697054782.214569\",\n         * \"channel_type\": \"channel\"\n         * }\n         */\n        this.slackApp.message(async _ref2 => {\n          let {\n            message\n          } = _ref2;\n          slackLogger.debug('OnSlackEvent-MESSAGE: ', message);\n          if (message) {\n            try {\n              await this.onMessage(message);\n            } catch (err) {\n              slackLogger.error({\n                msg: 'Unhandled error onMessage',\n                err\n              });\n            }\n          }\n        });\n\n        /**\n         * Event fired when a message is reacted in a channel or group app is added in\n         * event: {\n         * \"type\": \"reaction_added\",\n         * \"user\": \"U060WD4QW81\",\n         * \"reaction\": \"telephone_receiver\",\n         * \"item\": {\n         *   \"type\": \"message\",\n         *   \"channel\": \"C06196XMUMN\",\n         *   \"ts\": \"1697037020.309679\"\n         * },\n         * \"item_user\": \"U060WD4QW81\",\n         * \"event_ts\": \"1697037219.001600\"\n         * }\n         */\n        this.slackApp.event('reaction_added', async _ref3 => {\n          let {\n            event\n          } = _ref3;\n          slackLogger.debug('OnSlackEvent-REACTION_ADDED: ', event);\n          try {\n            slackLogger.error({\n              event\n            });\n            await this.onReactionAdded(event);\n          } catch (err) {\n            slackLogger.error({\n              msg: 'Unhandled error onReactionAdded',\n              err\n            });\n          }\n        });\n\n        /**\n         * Event fired when a reaction is removed from a message in a channel or group app is added in.\n         * event: {\n         * \"type\": \"reaction_removed\",\n         * \"user\": \"U060WD4QW81\",\n         * \"reaction\": \"raised_hands\",\n         * \"item\": {\n         *   \"type\": \"message\",\n         *   \"channel\": \"C06196XMUMN\",\n         *   \"ts\": \"1697028997.057629\"\n         * },\n         * \"item_user\": \"U060WD4QW81\",\n         * \"event_ts\": \"1697029220.000600\"\n         * }\n         */\n        this.slackApp.event('reaction_removed', async _ref4 => {\n          let {\n            event\n          } = _ref4;\n          slackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', event);\n          try {\n            await this.onReactionRemoved(event);\n          } catch (err) {\n            slackLogger.error({\n              msg: 'Unhandled error onReactionRemoved',\n              err\n            });\n          }\n        });\n\n        /**\n         * Event fired when a members joins a channel\n         * event: {\n         * \"type\": \"member_joined_channel\",\n         * \"user\": \"U06039U8WK1\",\n         * \"channel\": \"C060HT033E2\",\n         * \"channel_type\": \"C\",\n         * \"team\": \"T060383CUDV\",\n         * \"inviter\": \"U060WD4QW81\",\n         * \"event_ts\": \"1697042377.000800\"\n         * }\n         */\n        this.slackApp.event('member_joined_channel', async _ref5 => {\n          let {\n            event,\n            context\n          } = _ref5;\n          slackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', event);\n          try {\n            await this.processMemberJoinChannel(event, context);\n          } catch (err) {\n            slackLogger.error({\n              msg: 'Unhandled error onChannelLeft',\n              err\n            });\n          }\n        });\n        this.slackApp.event('channel_left', async _ref6 => {\n          let {\n            event\n          } = _ref6;\n          slackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', event);\n          try {\n            this.onChannelLeft(event);\n          } catch (err) {\n            slackLogger.error({\n              msg: 'Unhandled error onChannelLeft',\n              err\n            });\n          }\n        });\n        this.slackApp.error(error => {\n          slackLogger.error({\n            msg: 'Error on SlackApp',\n            error\n          });\n        });\n      }\n\n      /**\n       * @deprecated\n       */\n      registerForEventsLegacy() {\n        slackLogger.debug('Register for events');\n        this.rtm.on('authenticated', () => {\n          slackLogger.info('Connected to Slack');\n        });\n        this.rtm.on('unable_to_rtm_start', () => {\n          this.slackBridge.disconnect();\n        });\n        this.rtm.on('disconnected', () => {\n          slackLogger.info('Disconnected from Slack');\n          this.slackBridge.disconnect();\n        });\n\n        /**\n         * Event fired when someone messages a channel the bot is in\n         * {\n         *\ttype: 'message',\n         * \tchannel: [channel_id],\n         * \tuser: [user_id],\n         * \ttext: [message],\n         * \tts: [ts.milli],\n         * \tteam: [team_id],\n         * \tsubtype: [message_subtype],\n         * \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n         * }\n         **/\n        this.rtm.on('message', async slackMessage => {\n          slackLogger.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n          if (slackMessage) {\n            try {\n              await this.onMessage(slackMessage);\n            } catch (err) {\n              slackLogger.error({\n                msg: 'Unhandled error onMessage',\n                err\n              });\n            }\n          }\n        });\n        this.rtm.on('reaction_added', async reactionMsg => {\n          slackLogger.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n          if (reactionMsg) {\n            try {\n              await this.onReactionAdded(reactionMsg);\n            } catch (err) {\n              slackLogger.error({\n                msg: 'Unhandled error onReactionAdded',\n                err\n              });\n            }\n          }\n        });\n        this.rtm.on('reaction_removed', async reactionMsg => {\n          slackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n          if (reactionMsg) {\n            try {\n              await this.onReactionRemoved(reactionMsg);\n            } catch (err) {\n              slackLogger.error({\n                msg: 'Unhandled error onReactionRemoved',\n                err\n              });\n            }\n          }\n        });\n\n        /**\n         * Event fired when someone creates a public channel\n         * {\n         *\ttype: 'channel_created',\n         *\tchannel: {\n         *\t\tid: [channel_id],\n         *\t\tis_channel: true,\n         *\t\tname: [channel_name],\n         *\t\tcreated: [ts],\n         *\t\tcreator: [user_id],\n         *\t\tis_shared: false,\n         *\t\tis_org_shared: false\n         *\t},\n         *\tevent_ts: [ts.milli]\n         * }\n         **/\n        this.rtm.on('channel_created', () => {});\n\n        /**\n         * Event fired when the bot joins a public channel\n         * {\n         * \ttype: 'channel_joined',\n         * \tchannel: {\n         * \t\tid: [channel_id],\n         * \t\tname: [channel_name],\n         * \t\tis_channel: true,\n         * \t\tcreated: [ts],\n         * \t\tcreator: [user_id],\n         * \t\tis_archived: false,\n         * \t\tis_general: false,\n         * \t\tis_member: true,\n         * \t\tlast_read: [ts.milli],\n         * \t\tlatest: [message_obj],\n         * \t\tunread_count: 0,\n         * \t\tunread_count_display: 0,\n         * \t\tmembers: [ user_ids ],\n         * \t\ttopic: {\n         * \t\t\tvalue: [channel_topic],\n         * \t\t\tcreator: [user_id],\n         * \t\t\tlast_set: 0\n         * \t\t},\n         * \t\tpurpose: {\n         * \t\t\tvalue: [channel_purpose],\n         * \t\t\tcreator: [user_id],\n         * \t\t\tlast_set: 0\n         * \t\t}\n         * \t}\n         * }\n         **/\n        this.rtm.on('channel_joined', () => {});\n\n        /**\n         * Event fired when the bot leaves (or is removed from) a public channel\n         * {\n         * \ttype: 'channel_left',\n         * \tchannel: [channel_id]\n         * }\n         **/\n        this.rtm.on('channel_left', channelLeftMsg => {\n          slackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n          if (channelLeftMsg) {\n            try {\n              this.onChannelLeft(channelLeftMsg);\n            } catch (err) {\n              slackLogger.error({\n                msg: 'Unhandled error onChannelLeft',\n                err\n              });\n            }\n          }\n        });\n\n        /**\n         * Event fired when an archived channel is deleted by an admin\n         * {\n         * \ttype: 'channel_deleted',\n         * \tchannel: [channel_id],\n         *\tevent_ts: [ts.milli]\n         * }\n         **/\n        this.rtm.on('channel_deleted', () => {});\n\n        /**\n         * Event fired when the channel has its name changed\n         * {\n         * \ttype: 'channel_rename',\n         * \tchannel: {\n         * \t\tid: [channel_id],\n         * \t\tname: [channel_name],\n         * \t\tis_channel: true,\n         * \t\tcreated: [ts]\n         * \t},\n         *\tevent_ts: [ts.milli]\n         * }\n         **/\n        this.rtm.on('channel_rename', () => {});\n\n        /**\n         * Event fired when the bot joins a private channel\n         * {\n         * \ttype: 'group_joined',\n         * \tchannel: {\n         * \t\tid: [channel_id],\n         * \t\tname: [channel_name],\n         * \t\tis_group: true,\n         * \t\tcreated: [ts],\n         * \t\tcreator: [user_id],\n         * \t\tis_archived: false,\n         * \t\tis_mpim: false,\n         * \t\tis_open: true,\n         * \t\tlast_read: [ts.milli],\n         * \t\tlatest: [message_obj],\n         * \t\tunread_count: 0,\n         * \t\tunread_count_display: 0,\n         * \t\tmembers: [ user_ids ],\n         * \t\ttopic: {\n         * \t\t\tvalue: [channel_topic],\n         * \t\t\tcreator: [user_id],\n         * \t\t\tlast_set: 0\n         * \t\t},\n         * \t\tpurpose: {\n         * \t\t\tvalue: [channel_purpose],\n         * \t\t\tcreator: [user_id],\n         * \t\t\tlast_set: 0\n         * \t\t}\n         * \t}\n         * }\n         **/\n        this.rtm.on('group_joined', () => {});\n\n        /**\n         * Event fired when the bot leaves (or is removed from) a private channel\n         * {\n         * \ttype: 'group_left',\n         * \tchannel: [channel_id]\n         * }\n         **/\n        this.rtm.on('group_left', () => {});\n\n        /**\n         * Event fired when the private channel has its name changed\n         * {\n         * \ttype: 'group_rename',\n         * \tchannel: {\n         * \t\tid: [channel_id],\n         * \t\tname: [channel_name],\n         * \t\tis_group: true,\n         * \t\tcreated: [ts]\n         * \t},\n         *\tevent_ts: [ts.milli]\n         * }\n         **/\n        this.rtm.on('group_rename', () => {});\n\n        /**\n         * Event fired when a new user joins the team\n         * {\n         * \ttype: 'team_join',\n         * \tuser:\n         * \t{\n         * \t\tid: [user_id],\n         * \t\tteam_id: [team_id],\n         * \t\tname: [user_name],\n         * \t\tdeleted: false,\n         * \t\tstatus: null,\n         * \t\tcolor: [color_code],\n         * \t\treal_name: '',\n         * \t\ttz: [timezone],\n         * \t\ttz_label: [timezone_label],\n         * \t\ttz_offset: [timezone_offset],\n         * \t\tprofile:\n         * \t\t{\n         * \t\t\tavatar_hash: '',\n         * \t\t\treal_name: '',\n         * \t\t\treal_name_normalized: '',\n         * \t\t\temail: '',\n         * \t\t\timage_24: '',\n         * \t\t\timage_32: '',\n         * \t\t\timage_48: '',\n         * \t\t\timage_72: '',\n         * \t\t\timage_192: '',\n         * \t\t\timage_512: '',\n         * \t\t\tfields: null\n         * \t\t},\n         * \t\tis_admin: false,\n         * \t\tis_owner: false,\n         * \t\tis_primary_owner: false,\n         * \t\tis_restricted: false,\n         * \t\tis_ultra_restricted: false,\n         * \t\tis_bot: false,\n         * \t\tpresence: [user_presence]\n         * \t},\n         * \tcache_ts: [ts]\n         * }\n         **/\n        this.rtm.on('team_join', () => {});\n      }\n\n      /*\n       https://api.slack.com/events/reaction_removed\n       */\n      async onReactionRemoved(slackReactionMsg) {\n        if (slackReactionMsg) {\n          if (!this.slackBridge.isReactionsEnabled) {\n            return;\n          }\n          const rocketUser = await this.rocket.getUser(slackReactionMsg.user);\n          // Lets find our Rocket originated message\n          let rocketMsg = await Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n          if (!rocketMsg) {\n            // Must have originated from Slack\n            const rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n            rocketMsg = await Messages.findOneById(rocketID);\n          }\n          if (rocketMsg && rocketUser) {\n            const rocketReaction = \":\".concat(slackReactionMsg.reaction, \":\");\n            const theReaction = (rocketMsg.reactions || {})[rocketReaction];\n\n            // If the Rocket user has already been removed, then this is an echo back from slack\n            if (rocketMsg.reactions && theReaction) {\n              if (rocketUser.roles.includes('bot')) {\n                return;\n              }\n              if (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n                return; // Reaction already removed\n              }\n            } else {\n              // Reaction already removed\n              return;\n            }\n\n            // Stash this away to key off it later so we don't send it back to Slack\n            this.slackBridge.reactionsMap.set(\"unset\".concat(rocketMsg._id).concat(rocketReaction), rocketUser);\n            slackLogger.debug('Removing reaction from Slack');\n            await executeSetReaction(rocketUser._id, rocketReaction, rocketMsg._id);\n          }\n        }\n      }\n\n      /*\n       https://api.slack.com/events/reaction_added\n       */\n      async onReactionAdded(slackReactionMsg) {\n        if (slackReactionMsg) {\n          if (!this.slackBridge.isReactionsEnabled) {\n            return;\n          }\n          const rocketUser = await this.rocket.getUser(slackReactionMsg.user);\n          if (rocketUser.roles.includes('bot')) {\n            return;\n          }\n\n          // Lets find our Rocket originated message\n          let rocketMsg = await Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n          if (!rocketMsg) {\n            // Must have originated from Slack\n            const rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n            rocketMsg = await Messages.findOneById(rocketID);\n          }\n          if (rocketMsg && rocketUser) {\n            const rocketReaction = \":\".concat(slackReactionMsg.reaction, \":\");\n\n            // If the Rocket user has already reacted, then this is Slack echoing back to us\n            if (rocketMsg.reactions) {\n              const theReaction = rocketMsg.reactions[rocketReaction];\n              if (theReaction) {\n                if (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n                  return; // Already reacted\n                }\n              }\n            }\n\n            // Stash this away to key off it later so we don't send it back to Slack\n            this.slackBridge.reactionsMap.set(\"set\".concat(rocketMsg._id).concat(rocketReaction), rocketUser);\n            slackLogger.debug('Adding reaction from Slack');\n            await executeSetReaction(rocketUser._id, rocketReaction, rocketMsg._id);\n          }\n        }\n      }\n      onChannelLeft(channelLeftMsg) {\n        this.removeSlackChannel(channelLeftMsg.channel);\n      }\n\n      /**\n       * We have received a message from slack and we need to save/delete/update it into rocket\n       * https://api.slack.com/events/message\n       */\n      async onMessage(slackMessage, isImporting) {\n        const isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n        if (isAFileShare) {\n          await this.processFileShare(slackMessage);\n          return;\n        }\n        if (slackMessage.subtype) {\n          switch (slackMessage.subtype) {\n            case 'message_deleted':\n              await this.processMessageDeleted(slackMessage);\n              break;\n            case 'message_changed':\n              await this.processMessageChanged(slackMessage);\n              break;\n            case 'channel_join':\n              await this.processChannelJoin(slackMessage);\n              break;\n            default:\n              // Keeping backwards compatability for now, refactor later\n              await this.processNewMessage(slackMessage, isImporting);\n          }\n        } else {\n          // Simple message\n          await this.processNewMessage(slackMessage, isImporting);\n        }\n      }\n      async postFindChannel(rocketChannelName) {\n        slackLogger.debug('Searching for Slack channel or group', rocketChannelName);\n        const channels = await this.slackAPI.getChannels();\n        if (channels && channels.length > 0) {\n          for (const channel of channels) {\n            if (channel.name === rocketChannelName && channel.is_member === true) {\n              return channel;\n            }\n          }\n        }\n        const groups = await this.slackAPI.getGroups();\n        if (groups && groups.length > 0) {\n          for (const group of groups) {\n            if (group.name === rocketChannelName) {\n              return group;\n            }\n          }\n        }\n      }\n\n      /**\n       * Retrieves the Slack TS from a Rocket msg that originated from Slack\n       * @param rocketMsg\n       * @returns Slack TS or undefined if not a message that originated from slack\n       * @private\n       */\n      getTimeStamp(rocketMsg) {\n        // slack-G3KJGGE15-1483081061-000169\n        let slackTS;\n        let index = rocketMsg._id.indexOf('slack-');\n        if (index === 0) {\n          // This is a msg that originated from Slack\n          slackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n          index = slackTS.indexOf('-');\n          slackTS = slackTS.substr(index + 1, slackTS.length);\n          slackTS = slackTS.replace('-', '.');\n        } else {\n          // This probably originated as a Rocket msg, but has been sent to Slack\n          slackTS = rocketMsg.slackTs;\n        }\n        return slackTS;\n      }\n\n      /**\n       * Adds a slack channel to our collection that the rocketbot is a member of on slack\n       * @param rocketChID\n       * @param slackChID\n       */\n      addSlackChannel(rocketChID, slackChID) {\n        const ch = this.getSlackChannel(rocketChID);\n        if (ch == null) {\n          slackLogger.debug('Added channel', {\n            rocketChID,\n            slackChID\n          });\n          this.slackChannelRocketBotMembershipMap.set(rocketChID, {\n            id: slackChID,\n            family: slackChID.charAt(0) === 'C' ? 'channels' : 'groups'\n          });\n        }\n      }\n      removeSlackChannel(slackChID) {\n        const keys = this.slackChannelRocketBotMembershipMap.keys();\n        let slackChannel;\n        let key;\n        while ((key = keys.next().value) != null) {\n          slackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n          if (slackChannel.id === slackChID) {\n            // Found it, need to delete it\n            this.slackChannelRocketBotMembershipMap.delete(key);\n            break;\n          }\n        }\n      }\n      getSlackChannel(rocketChID) {\n        return this.slackChannelRocketBotMembershipMap.get(rocketChID);\n      }\n      async populateMembershipChannelMapByChannels() {\n        const channels = await this.slackAPI.getChannels();\n        if (!channels || channels.length <= 0) {\n          return;\n        }\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(channels), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const slackChannel = _step.value;\n            {\n              const rocketchat_room = (await Rooms.findOneByName(slackChannel.name, {\n                projection: {\n                  _id: 1\n                }\n              })) || (await Rooms.findOneByImportId(slackChannel.id, {\n                projection: {\n                  _id: 1\n                }\n              }));\n              if (rocketchat_room && slackChannel.is_member) {\n                this.addSlackChannel(rocketchat_room._id, slackChannel.id);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async populateMembershipChannelMapByGroups() {\n        const groups = await this.slackAPI.getGroups();\n        if (!groups || groups.length <= 0) {\n          return;\n        }\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(groups), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const slackGroup = _step2.value;\n            {\n              const rocketchat_room = (await Rooms.findOneByName(slackGroup.name, {\n                projection: {\n                  _id: 1\n                }\n              })) || (await Rooms.findOneByImportId(slackGroup.id, {\n                projection: {\n                  _id: 1\n                }\n              }));\n              if (rocketchat_room && slackGroup.is_member) {\n                this.addSlackChannel(rocketchat_room._id, slackGroup.id);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n      async populateMembershipChannelMap() {\n        slackLogger.debug('Populating channel map');\n        await this.populateMembershipChannelMapByChannels();\n        await this.populateMembershipChannelMapByGroups();\n      }\n\n      /*\n       https://api.slack.com/methods/reactions.add\n       */\n      async postReactionAdded(reaction, slackChannel, slackTS) {\n        if (reaction && slackChannel && slackTS) {\n          const data = {\n            name: reaction,\n            channel: slackChannel,\n            timestamp: slackTS\n          };\n          slackLogger.debug('Posting Add Reaction to Slack');\n          const postResult = await this.slackAPI.react(data);\n          if (postResult) {\n            slackLogger.debug('Reaction added to Slack');\n          }\n        }\n      }\n\n      /*\n       https://api.slack.com/methods/reactions.remove\n       */\n      async postReactionRemove(reaction, slackChannel, slackTS) {\n        if (reaction && slackChannel && slackTS) {\n          const data = {\n            name: reaction,\n            channel: slackChannel,\n            timestamp: slackTS\n          };\n          slackLogger.debug('Posting Remove Reaction to Slack');\n          const postResult = await this.slackAPI.removeReaction(data);\n          if (postResult) {\n            slackLogger.debug('Reaction removed from Slack');\n          }\n        }\n      }\n      async postDeleteMessage(rocketMessage) {\n        if (rocketMessage) {\n          const slackChannel = this.getSlackChannel(rocketMessage.rid);\n          if (slackChannel != null) {\n            const data = {\n              ts: this.getTimeStamp(rocketMessage),\n              channel: this.getSlackChannel(rocketMessage.rid).id,\n              as_user: true\n            };\n            slackLogger.debug('Post Delete Message to Slack', data);\n            const postResult = await this.slackAPI.removeMessage(data);\n            if (postResult) {\n              slackLogger.debug('Message deleted on Slack');\n            }\n          }\n        }\n      }\n      storeMessageBeingSent(data) {\n        this.messagesBeingSent.push(data);\n      }\n      removeMessageBeingSent(data) {\n        const idx = this.messagesBeingSent.indexOf(data);\n        if (idx >= 0) {\n          this.messagesBeingSent.splice(idx, 1);\n        }\n      }\n      isMessageBeingSent(username, channel) {\n        if (!this.messagesBeingSent.length) {\n          return false;\n        }\n        return this.messagesBeingSent.some(messageData => {\n          if (messageData.username !== username) {\n            return false;\n          }\n          if (messageData.channel !== channel) {\n            return false;\n          }\n          return true;\n        });\n      }\n      createSlackMessageId(ts, channelId) {\n        return \"slack\".concat(channelId ? \"-\".concat(channelId) : '', \"-\").concat(ts.replace(/\\./g, '-'));\n      }\n      async postMessage(slackChannel, rocketMessage) {\n        if (slackChannel && slackChannel.id) {\n          let iconUrl = getUserAvatarURL(rocketMessage.u && rocketMessage.u.username);\n          if (iconUrl) {\n            iconUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n          }\n          const data = {\n            text: rocketMessage.msg,\n            channel: slackChannel.id,\n            username: rocketMessage.u && rocketMessage.u.username,\n            icon_url: iconUrl,\n            link_names: 1\n          };\n          if (rocketMessage.tmid) {\n            const tmessage = await Messages.findOneById(rocketMessage.tmid);\n            if (tmessage && tmessage.slackTs) {\n              data.thread_ts = tmessage.slackTs;\n            }\n          }\n          slackLogger.debug('Post Message To Slack', data);\n\n          // If we don't have the bot id yet and we have multiple slack bridges, we need to keep track of the messages that are being sent\n          if (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n            this.storeMessageBeingSent(data);\n          }\n          const postResult = await this.slackAPI.sendMessage(data);\n          if (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n            this.removeMessageBeingSent(data);\n          }\n          if (postResult && postResult.message && postResult.message.bot_id && postResult.message.ts) {\n            this.slackBotId = postResult.message.bot_id;\n            await Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.message.bot_id, postResult.message.ts);\n            slackLogger.debug(\"RocketMsgID=\".concat(rocketMessage._id, \" SlackMsgID=\").concat(postResult.message.ts, \" SlackBotID=\").concat(postResult.message.bot_id));\n          }\n        }\n      }\n\n      /*\n       https://api.slack.com/methods/chat.update\n       */\n      async postMessageUpdate(slackChannel, rocketMessage) {\n        if (slackChannel && slackChannel.id) {\n          const data = {\n            ts: this.getTimeStamp(rocketMessage),\n            channel: slackChannel.id,\n            text: rocketMessage.msg,\n            as_user: true\n          };\n          slackLogger.debug('Post UpdateMessage To Slack', data);\n          const postResult = await this.slackAPI.updateMessage(data);\n          if (postResult) {\n            slackLogger.debug('Message updated on Slack');\n          }\n        }\n      }\n      async processMemberJoinChannel(event, context) {\n        slackLogger.debug('Member join channel', event.channel);\n        const rocketCh = await this.rocket.getChannel({\n          channel: event.channel\n        });\n        if (rocketCh != null) {\n          this.addSlackChannel(rocketCh._id, event.channel);\n          if ((context === null || context === void 0 ? void 0 : context.botUserId) !== (event === null || event === void 0 ? void 0 : event.user)) {\n            const rocketChatUser = await this.rocket.getUser(event.user);\n            await addUserToRoom(rocketCh._id, rocketChatUser);\n          }\n        }\n      }\n      async processChannelJoin(slackMessage) {\n        slackLogger.debug('Channel join', slackMessage.channel.id);\n        const rocketCh = await this.rocket.addChannel(slackMessage.channel);\n        if (rocketCh != null) {\n          this.addSlackChannel(rocketCh._id, slackMessage.channel);\n        }\n      }\n      async processFileShare(slackMessage) {\n        if (!settings.get('SlackBridge_FileUpload_Enabled')) {\n          return;\n        }\n        const file = slackMessage.files[0];\n        if (file && file.url_private_download !== undefined) {\n          const rocketChannel = await this.rocket.getChannel(slackMessage);\n          const rocketUser = await this.rocket.getUser(slackMessage.user);\n\n          // Hack to notify that a file was attempted to be uploaded\n          delete slackMessage.subtype;\n\n          // If the text includes the file link, simply use the same text for the rocket message.\n          // If the link was not included, then use it instead of the message.\n\n          if (slackMessage.text.indexOf(file.permalink) < 0) {\n            slackMessage.text = file.permalink;\n          }\n          const ts = new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000);\n          const msgDataDefaults = {\n            _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n            ts,\n            updatedBySlack: true\n          };\n          await this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, false);\n        }\n      }\n\n      /*\n       https://api.slack.com/events/message/message_deleted\n       */\n      async processMessageDeleted(slackMessage) {\n        if (slackMessage.previous_message) {\n          const rocketChannel = await this.rocket.getChannel(slackMessage);\n          const rocketUser = await Users.findOneById('rocket.cat', {\n            projection: {\n              username: 1\n            }\n          });\n          if (rocketChannel && rocketUser) {\n            // Find the Rocket message to delete\n            let rocketMsgObj = await Messages.findOneBySlackBotIdAndSlackTs(slackMessage.previous_message.bot_id, slackMessage.previous_message.ts);\n            if (!rocketMsgObj) {\n              // Must have been a Slack originated msg\n              const _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n              rocketMsgObj = await Messages.findOneById(_id);\n            }\n            if (rocketMsgObj) {\n              await deleteMessage(rocketMsgObj, rocketUser);\n              slackLogger.debug('Rocket message deleted by Slack');\n            }\n          }\n        }\n      }\n\n      /*\n       https://api.slack.com/events/message/message_changed\n       */\n      async processMessageChanged(slackMessage) {\n        if (slackMessage.previous_message) {\n          const currentMsg = await Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n          // Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n          if (currentMsg && slackMessage.message.text !== currentMsg.msg) {\n            const rocketChannel = await this.rocket.getChannel(slackMessage);\n            const rocketUser = slackMessage.previous_message.user ? (await this.rocket.findUser(slackMessage.previous_message.user)) || (await this.rocket.addUser(slackMessage.previous_message.user)) : null;\n            const rocketMsgObj = {\n              // @TODO _id\n              _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n              rid: rocketChannel._id,\n              msg: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n              updatedBySlack: true // We don't want to notify slack about this change since Slack initiated it\n            };\n            await updateMessage(rocketMsgObj, rocketUser);\n            slackLogger.debug('Rocket message updated by Slack');\n          }\n        }\n      }\n\n      /*\n       This method will get refactored and broken down into single responsibilities\n       */\n      async processNewMessage(slackMessage, isImporting) {\n        const rocketChannel = await this.rocket.getChannel(slackMessage);\n        let rocketUser = null;\n        if (slackMessage.subtype === 'bot_message') {\n          rocketUser = await Users.findOneById('rocket.cat', {\n            projection: {\n              username: 1\n            }\n          });\n        } else {\n          rocketUser = slackMessage.user ? (await this.rocket.findUser(slackMessage.user)) || (await this.rocket.addUser(slackMessage.user)) : null;\n        }\n        if (rocketChannel && rocketUser) {\n          const msgDataDefaults = {\n            _id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000)\n          };\n          if (isImporting) {\n            msgDataDefaults.imported = 'slackbridge';\n          }\n          try {\n            await this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting, this);\n          } catch (e) {\n            // http://www.mongodb.org/about/contributors/error-codes/\n            // 11000 == duplicate key error\n            if (e.name === 'MongoError' && e.code === 11000) {\n              return;\n            }\n            throw e;\n          }\n        }\n      }\n      async processBotMessage(rocketChannel, slackMessage) {\n        const excludeBotNames = settings.get('SlackBridge_ExcludeBotnames');\n        if (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n          return;\n        }\n        if (this.slackBotId) {\n          if (slackMessage.bot_id === this.slackBotId) {\n            return;\n          }\n        } else {\n          const slackChannel = this.getSlackChannel(rocketChannel._id);\n          if (this.isMessageBeingSent(slackMessage.username || slackMessage.bot_id, slackChannel.id)) {\n            return;\n          }\n        }\n        const rocketMsgObj = {\n          msg: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n          rid: rocketChannel._id,\n          bot: true,\n          attachments: slackMessage.attachments,\n          username: slackMessage.username || slackMessage.bot_id\n        };\n        this.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n        if (slackMessage.icons) {\n          rocketMsgObj.emoji = slackMessage.icons.emoji;\n        }\n        return rocketMsgObj;\n      }\n      async processMeMessage(rocketUser, slackMessage) {\n        return this.rocket.addAliasToMsg(rocketUser.username, {\n          msg: \"_\".concat(await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text), \"_\")\n        });\n      }\n      async processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (isImporting) {\n          await Message.saveSystemMessage('uj', rocketChannel._id, rocketUser.username, rocketUser, {\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n            imported: 'slackbridge'\n          });\n        } else {\n          await addUserToRoom(rocketChannel._id, rocketUser);\n        }\n      }\n      async processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (slackMessage.inviter) {\n          const inviter = slackMessage.inviter ? (await this.rocket.findUser(slackMessage.inviter)) || (await this.rocket.addUser(slackMessage.inviter)) : null;\n          if (isImporting) {\n            await Message.saveSystemMessage('au', rocketChannel._id, rocketUser.username, inviter, {\n              ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n              imported: 'slackbridge'\n            });\n          } else {\n            await addUserToRoom(rocketChannel._id, rocketUser, inviter);\n          }\n        }\n      }\n      async processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (isImporting) {\n          await Message.saveSystemMessage('ul', rocketChannel._id, rocketUser.username, rocketUser, {\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n            imported: 'slackbridge'\n          });\n        } else {\n          await removeUserFromRoom(rocketChannel._id, rocketUser);\n        }\n      }\n      async processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (isImporting) {\n          await Message.saveSystemMessage('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, {\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n            imported: 'slackbridge'\n          });\n        } else {\n          await saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n        }\n      }\n      async processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (isImporting) {\n          await Message.saveSystemMessage('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, {\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n            imported: 'slackbridge'\n          });\n        } else {\n          await saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n        }\n      }\n      async processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (isImporting) {\n          await Message.saveSystemMessage('r', rocketChannel._id, slackMessage.name, rocketUser, {\n            ts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n            imported: 'slackbridge'\n          });\n        } else {\n          await saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n        }\n      }\n      async processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n          const details = {\n            message_id: this.createSlackMessageId(slackMessage.ts),\n            name: slackMessage.file.name,\n            size: slackMessage.file.size,\n            type: slackMessage.file.mimetype,\n            rid: rocketChannel._id\n          };\n          return this.uploadFileFromSlack(details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n        }\n      }\n      async processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        if (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n          // TODO: refactor this logic to use the service to send this system message instead of using sendMessage\n          const rocketMsgObj = {\n            rid: rocketChannel._id,\n            t: 'message_pinned',\n            msg: '',\n            u: {\n              _id: rocketUser._id,\n              username: rocketUser.username\n            },\n            attachments: [{\n              text: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n              author_name: slackMessage.attachments[0].author_subname,\n              author_icon: getUserAvatarURL(slackMessage.attachments[0].author_subname),\n              ts: new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000)\n            }]\n          };\n          if (!isImporting && slackMessage.attachments[0].channel_id && slackMessage.attachments[0].ts) {\n            const messageId = this.createSlackMessageId(slackMessage.attachments[0].ts, slackMessage.attachments[0].channel_id);\n            await Messages.setPinnedByIdAndUserId(messageId, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n            if (settings.get('Message_Read_Receipt_Store_Users')) {\n              await ReadReceipts.setPinnedByMessageId(messageId, true);\n            }\n          }\n          return rocketMsgObj;\n        }\n        slackLogger.error('Pinned item with no attachment');\n      }\n      async processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n        switch (slackMessage.subtype) {\n          case 'bot_message':\n            return this.processBotMessage(rocketChannel, slackMessage);\n          case 'me_message':\n            return this.processMeMessage(rocketUser, slackMessage);\n          case 'channel_join':\n            return this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'group_join':\n            return this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'channel_leave':\n          case 'group_leave':\n            return this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'channel_topic':\n          case 'group_topic':\n            return this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'channel_purpose':\n          case 'group_purpose':\n            return this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'channel_name':\n          case 'group_name':\n            return this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'channel_archive':\n          case 'group_archive':\n            if (!isImporting) {\n              await archiveRoom(rocketChannel, rocketUser);\n            }\n            return;\n          case 'channel_unarchive':\n          case 'group_unarchive':\n            if (!isImporting) {\n              await unarchiveRoom(rocketChannel);\n            }\n            return;\n          case 'file_share':\n            return this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'file_comment':\n            slackLogger.error('File comment not implemented');\n            return;\n          case 'file_mention':\n            slackLogger.error('File mentioned not implemented');\n            return;\n          case 'pinned_item':\n            return this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n          case 'unpinned_item':\n            slackLogger.error('Unpinned item not implemented');\n        }\n      }\n\n      /**\n      Uploads the file to the storage.\n      @param [Object] details an object with details about the upload. name, size, type, and rid\n      @param [String] fileUrl url of the file to download/import\n      @param [Object] user the Rocket.Chat user\n      @param [Object] room the Rocket.Chat room\n      @param [Date] timeStamp the timestamp the file was uploaded\n      **/\n      // details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n      async uploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n        const requestModule = /https/i.test(slackFileURL) ? https : http;\n        const parsedUrl = url.parse(slackFileURL, true);\n        parsedUrl.headers = {\n          Authorization: \"Bearer \".concat(this.apiToken)\n        };\n        await requestModule.get(parsedUrl, async stream => {\n          const fileStore = FileUpload.getStore('Uploads');\n          const file = await fileStore.insert(details, stream);\n          const url = file.url.replace(Meteor.absoluteUrl(), '/');\n          const attachment = {\n            title: file.name,\n            title_link: url\n          };\n          if (/^image\\/.+/.test(file.type)) {\n            attachment.image_url = url;\n            attachment.image_type = file.type;\n            attachment.image_size = file.size;\n            attachment.image_dimensions = file.identify && file.identify.size;\n          }\n          if (/^audio\\/.+/.test(file.type)) {\n            attachment.audio_url = url;\n            attachment.audio_type = file.type;\n            attachment.audio_size = file.size;\n          }\n          if (/^video\\/.+/.test(file.type)) {\n            attachment.video_url = url;\n            attachment.video_type = file.type;\n            attachment.video_size = file.size;\n          }\n          const msg = {\n            rid: details.rid,\n            ts: timeStamp,\n            msg: '',\n            file: {\n              _id: file._id\n            },\n            groupable: false,\n            attachments: [attachment]\n          };\n          if (isImporting) {\n            msg.imported = 'slackbridge';\n          }\n          if (details.message_id && typeof details.message_id === 'string') {\n            msg._id = details.message_id;\n          }\n          void sendMessage(rocketUser, msg, rocketChannel, true);\n        });\n      }\n      async importFromHistory(options) {\n        slackLogger.debug('Importing messages history');\n        const data = await this.slackAPI.getHistory(options);\n        if (Array.isArray(data.messages) && data.messages.length) {\n          let latest = 0;\n          var _iteratorAbruptCompletion3 = false;\n          var _didIteratorError3 = false;\n          var _iteratorError3;\n          try {\n            for (var _iterator3 = _asyncIterator(data.messages.reverse()), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n              const message = _step3.value;\n              {\n                slackLogger.debug('MESSAGE: ', message);\n                if (!latest || message.ts > latest) {\n                  latest = message.ts;\n                }\n                message.channel = options.channel;\n                await this.onMessage(message, true);\n              }\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                await _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n          return {\n            has_more: data.has_more,\n            ts: latest\n          };\n        }\n      }\n      async copyChannelInfo(rid, channelMap) {\n        slackLogger.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n        const channel = await this.slackAPI.getRoomInfo(channelMap.id);\n        if (channel) {\n          const members = await this.slackAPI.getMembers(channelMap.id);\n          if (members && Array.isArray(members) && members.length) {\n            var _iteratorAbruptCompletion4 = false;\n            var _didIteratorError4 = false;\n            var _iteratorError4;\n            try {\n              for (var _iterator4 = _asyncIterator(members), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n                const member = _step4.value;\n                {\n                  const user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n                  if (user) {\n                    slackLogger.debug('Adding user to room', user.username, rid);\n                    await addUserToRoom(rid, user, null, {\n                      skipSystemMessage: true\n                    });\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n                  await _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          }\n          let topic = '';\n          let topic_last_set = 0;\n          let topic_creator = null;\n          if (channel && channel.topic && channel.topic.value) {\n            topic = channel.topic.value;\n            topic_last_set = channel.topic.last_set;\n            topic_creator = channel.topic.creator;\n          }\n          if (channel && channel.purpose && channel.purpose.value) {\n            if (topic_last_set) {\n              if (topic_last_set < channel.purpose.last_set) {\n                topic = channel.purpose.topic;\n                topic_creator = channel.purpose.creator;\n              }\n            } else {\n              topic = channel.purpose.topic;\n              topic_creator = channel.purpose.creator;\n            }\n          }\n          if (topic) {\n            const creator = (await this.rocket.findUser(topic_creator)) || (await this.rocket.addUser(topic_creator));\n            slackLogger.debug('Setting room topic', rid, topic, creator.username);\n            await saveRoomTopic(rid, topic, creator, false);\n          }\n        }\n      }\n      async copyPins(rid, channelMap) {\n        const items = await this.slackAPI.getPins(channelMap.id);\n        if (items && Array.isArray(items) && items.length) {\n          var _iteratorAbruptCompletion5 = false;\n          var _didIteratorError5 = false;\n          var _iteratorError5;\n          try {\n            for (var _iterator5 = _asyncIterator(items), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n              const pin = _step5.value;\n              {\n                if (pin.message) {\n                  const user = await this.rocket.findUser(pin.message.user);\n                  // TODO: send this system message to the room as well (using the service)\n                  const msgObj = {\n                    rid,\n                    t: 'message_pinned',\n                    msg: '',\n                    u: {\n                      _id: user._id,\n                      username: user.username\n                    },\n                    attachments: [{\n                      text: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n                      author_name: user.username,\n                      author_icon: getUserAvatarURL(user.username),\n                      ts: new Date(parseInt(pin.message.ts.split('.')[0]) * 1000)\n                    }]\n                  };\n                  const messageId = this.createSlackMessageId(pin.message.ts, pin.channel);\n                  await Messages.setPinnedByIdAndUserId(messageId, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n                  if (settings.get('Message_Read_Receipt_Store_Users')) {\n                    await ReadReceipts.setPinnedByMessageId(messageId, true);\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                await _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n      }\n      async importMessages(rid, callback) {\n        slackLogger.info('importMessages: ', rid);\n        const rocketchat_room = await Rooms.findOneById(rid);\n        if (rocketchat_room) {\n          if (this.getSlackChannel(rid)) {\n            await this.copyChannelInfo(rid, this.getSlackChannel(rid));\n            slackLogger.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n            let results = await this.importFromHistory({\n              channel: this.getSlackChannel(rid).id,\n              oldest: 1\n            });\n            while (results && results.has_more) {\n              // eslint-disable-next-line no-await-in-loop\n              results = await this.importFromHistory({\n                channel: this.getSlackChannel(rid).id,\n                oldest: results.ts\n              });\n            }\n            slackLogger.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n            await this.copyPins(rid, this.getSlackChannel(rid));\n            return callback();\n          }\n          const slack_room = await this.postFindChannel(rocketchat_room.name);\n          if (slack_room) {\n            this.addSlackChannel(rid, slack_room.id);\n            return this.importMessages(rid, callback);\n          }\n          slackLogger.error({\n            msg: 'Could not find Slack room with specified name',\n            roomName: rocketchat_room.name\n          });\n          return callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n        }\n        slackLogger.error({\n          msg: 'Could not find Rocket.Chat room with specified id',\n          rid\n        });\n        return callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","SlackAdapter","http","https","url","Message","Messages","Rooms","Users","ReadReceipts","SlackApp","App","RTMClient","Meteor","saveRoomName","saveRoomTopic","FileUpload","addUserToRoom","archiveRoom","deleteMessage","removeUserFromRoom","sendMessage","unarchiveRoom","updateMessage","executeSetReaction","settings","getUserAvatarURL","SlackAPI","slackLogger","__reifyWaitForDeps__","constructor","slackBridge","debug","rtm","apiToken","slackApp","appCredential","slackChannelRocketBotMembershipMap","Map","rocket","messagesBeingSent","slackBotId","slackAPI","connect","_ref","connectResult","connectApp","connectLegacy","info","startup","populateMembershipChannelMap","err","error","msg","data","disconnect","verifyAppCredentials","Error","botToken","appToken","signingSecret","token","socketMode","registerForEvents","connectionResult","start","verifyToken","registerForEventsLegacy","connected","stop","setRocket","message","_ref2","onMessage","event","_ref3","onReactionAdded","_ref4","onReactionRemoved","_ref5","context","processMemberJoinChannel","_ref6","onChannelLeft","on","slackMessage","reactionMsg","channelLeftMsg","slackReactionMsg","isReactionsEnabled","rocketUser","getUser","user","rocketMsg","findOneBySlackTs","item","ts","rocketID","createRocketID","channel","findOneById","rocketReaction","concat","reaction","theReaction","reactions","roles","includes","usernames","indexOf","username","reactionsMap","set","_id","removeSlackChannel","isImporting","isAFileShare","files","Array","isArray","length","processFileShare","subtype","processMessageDeleted","processMessageChanged","processChannelJoin","processNewMessage","postFindChannel","rocketChannelName","channels","getChannels","name","is_member","groups","getGroups","group","getTimeStamp","slackTS","index","substr","replace","slackTs","addSlackChannel","rocketChID","slackChID","ch","getSlackChannel","id","family","charAt","keys","slackChannel","key","next","value","get","delete","populateMembershipChannelMapByChannels","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","rocketchat_room","findOneByName","projection","findOneByImportId","return","populateMembershipChannelMapByGroups","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","slackGroup","postReactionAdded","timestamp","postResult","react","postReactionRemove","removeReaction","postDeleteMessage","rocketMessage","rid","as_user","removeMessage","storeMessageBeingSent","push","removeMessageBeingSent","idx","splice","isMessageBeingSent","some","messageData","createSlackMessageId","channelId","postMessage","iconUrl","u","absoluteUrl","text","icon_url","link_names","tmid","tmessage","thread_ts","slackAdapters","bot_id","setSlackBotIdAndSlackTs","postMessageUpdate","rocketCh","getChannel","botUserId","rocketChatUser","addChannel","file","url_private_download","undefined","rocketChannel","permalink","Date","parseInt","split","msgDataDefaults","updatedBySlack","createAndSaveMessage","previous_message","rocketMsgObj","findOneBySlackBotIdAndSlackTs","currentMsg","findUser","addUser","convertSlackMsgTxtToRocketTxtFormat","imported","e","code","processBotMessage","excludeBotNames","match","bot","attachments","addAliasToMsg","icons","emoji","processMeMessage","processChannelJoinMessage","saveSystemMessage","processGroupJoinMessage","inviter","processLeaveMessage","processTopicMessage","topic","processPurposeMessage","purpose","processNameMessage","processShareMessage","details","message_id","size","type","mimetype","uploadFileFromSlack","processPinnedItemMessage","t","author_name","author_subname","author_icon","channel_id","messageId","setPinnedByIdAndUserId","setPinnedByMessageId","processSubtypedMessage","slackFileURL","timeStamp","requestModule","test","parsedUrl","parse","headers","Authorization","stream","fileStore","getStore","insert","attachment","title","title_link","image_url","image_type","image_size","image_dimensions","identify","audio_url","audio_type","audio_size","video_url","video_type","video_size","groupable","importFromHistory","options","getHistory","messages","latest","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","reverse","_step3","has_more","copyChannelInfo","channelMap","getRoomInfo","members","getMembers","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","member","skipSystemMessage","topic_last_set","topic_creator","last_set","creator","copyPins","items","getPins","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","pin","msgObj","importMessages","callback","results","oldest","slack_room","roomName","__reify_async_result__","_reifyError","self","async"],"sources":["app/slackbridge/server/SlackAdapter.js"],"sourcesContent":["import http from 'http';\nimport https from 'https';\nimport url from 'url';\n\nimport { Message } from '@rocket.chat/core-services';\nimport { Messages, Rooms, Users, ReadReceipts } from '@rocket.chat/models';\nimport { App as SlackApp } from '@slack/bolt';\nimport { RTMClient } from '@slack/rtm-api';\nimport { Meteor } from 'meteor/meteor';\n\nimport { saveRoomName, saveRoomTopic } from '../../channel-settings/server';\nimport { FileUpload } from '../../file-upload/server';\nimport { addUserToRoom } from '../../lib/server/functions/addUserToRoom';\nimport { archiveRoom } from '../../lib/server/functions/archiveRoom';\nimport { deleteMessage } from '../../lib/server/functions/deleteMessage';\nimport { removeUserFromRoom } from '../../lib/server/functions/removeUserFromRoom';\nimport { sendMessage } from '../../lib/server/functions/sendMessage';\nimport { unarchiveRoom } from '../../lib/server/functions/unarchiveRoom';\nimport { updateMessage } from '../../lib/server/functions/updateMessage';\nimport { executeSetReaction } from '../../reactions/server/setReaction';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\nimport { SlackAPI } from './SlackAPI';\nimport { slackLogger } from './logger';\n\nexport default class SlackAdapter {\n\tconstructor(slackBridge) {\n\t\tslackLogger.debug('constructor');\n\t\tthis.slackBridge = slackBridge;\n\t\tthis.rtm = {}; // slack-client Real Time Messaging API\n\t\tthis.apiToken = {}; // Slack API Token passed in via Connect\n\t\tthis.slackApp = {};\n\t\tthis.appCredential = {};\n\t\t// On Slack, a rocket integration bot will be added to slack channels, this is the list of those channels, key is Rocket Ch ID\n\t\tthis.slackChannelRocketBotMembershipMap = new Map(); // Key=RocketChannelID, Value=SlackChannel\n\t\tthis.rocket = {};\n\t\tthis.messagesBeingSent = [];\n\t\tthis.slackBotId = false;\n\n\t\tthis.slackAPI = {};\n\t}\n\n\tasync connect({ apiToken, appCredential }) {\n\t\ttry {\n\t\t\tconst connectResult = await (appCredential ? this.connectApp(appCredential) : this.connectLegacy(apiToken));\n\n\t\t\tif (connectResult) {\n\t\t\t\tslackLogger.info('Connected to Slack');\n\t\t\t\tslackLogger.debug('Slack connection result: ', connectResult);\n\t\t\t\tMeteor.startup(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this.populateMembershipChannelMap(); // If run outside of Meteor.startup, HTTP is not defined\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tslackLogger.error({ msg: 'Error attempting to connect to Slack', err });\n\t\t\t\t\t\tif (err.data.error === 'invalid_auth') {\n\t\t\t\t\t\t\tslackLogger.error('The provided token is invalid');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.slackBridge.disconnect();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tslackLogger.error({ msg: 'Error attempting to connect to Slack', err });\n\t\t\tthis.slackBridge.disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Connect to the remote Slack server using the passed in app credential and register for Slack events.\n\t * @typedef {Object} AppCredential\n\t * @property {string} botToken\n\t * @property {string} appToken\n\t * @property {string} signingSecret\n\t * @param {AppCredential} appCredential\n\t */\n\tasync connectApp(appCredential) {\n\t\tthis.appCredential = appCredential;\n\n\t\t// Invalid app credentials causes unhandled errors\n\t\tif (!(await SlackAPI.verifyAppCredentials(appCredential))) {\n\t\t\tthrow new Error('Invalid app credentials (botToken or appToken) for the slack app');\n\t\t}\n\t\tthis.slackAPI = new SlackAPI(this.appCredential.botToken);\n\n\t\tthis.slackApp = new SlackApp({\n\t\t\tappToken: this.appCredential.appToken,\n\t\t\tsigningSecret: this.appCredential.signingSecret,\n\t\t\ttoken: this.appCredential.botToken,\n\t\t\tsocketMode: true,\n\t\t});\n\n\t\tthis.registerForEvents();\n\n\t\tconst connectionResult = await this.slackApp.start();\n\n\t\treturn connectionResult;\n\t}\n\n\t/**\n\t * Connect to the remote Slack server using the passed in token API and register for Slack events.\n\t * @param apiToken\n\t * @deprecated\n\t */\n\tasync connectLegacy(apiToken) {\n\t\tthis.apiToken = apiToken;\n\n\t\t// Invalid apiToken causes unhandled errors\n\t\tif (!(await SlackAPI.verifyToken(apiToken))) {\n\t\t\tthrow new Error('Invalid ApiToken for the slack legacy bot integration');\n\t\t}\n\n\t\tif (RTMClient != null) {\n\t\t\tRTMClient.disconnect;\n\t\t}\n\t\tthis.slackAPI = new SlackAPI(this.apiToken);\n\t\tthis.rtm = new RTMClient(this.apiToken);\n\n\t\tthis.registerForEventsLegacy();\n\n\t\tconst connectionResult = await this.rtm.start();\n\n\t\treturn connectionResult;\n\t}\n\n\t/**\n\t * Unregister for slack events and disconnect from Slack\n\t */\n\tasync disconnect() {\n\t\tif (this.rtm.connected && this.rtm.disconnect) {\n\t\t\tawait this.rtm.disconnect();\n\t\t} else if (this.slackApp.stop) {\n\t\t\tawait this.slackApp.stop();\n\t\t}\n\t}\n\n\tsetRocket(rocket) {\n\t\tthis.rocket = rocket;\n\t}\n\n\tregisterForEvents() {\n\t\t/**\n\t\t * message: {\n\t\t * \"client_msg_id\": \"caab144d-41e7-47cc-87fa-af5d50c02784\",\n\t\t * \"type\": \"message\",\n\t\t * \"text\": \"heyyyyy\",\n\t\t * \"user\": \"U060WD4QW81\",\n\t\t * \"ts\": \"1697054782.214569\",\n\t\t * \"blocks\": [],\n\t\t * \"team\": \"T060383CUDV\",\n\t\t * \"channel\": \"C060HSLQPCN\",\n\t\t * \"event_ts\": \"1697054782.214569\",\n\t\t * \"channel_type\": \"channel\"\n\t\t * }\n\t\t */\n\t\tthis.slackApp.message(async ({ message }) => {\n\t\t\tslackLogger.debug('OnSlackEvent-MESSAGE: ', message);\n\t\t\tif (message) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.onMessage(message);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tslackLogger.error({ msg: 'Unhandled error onMessage', err });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Event fired when a message is reacted in a channel or group app is added in\n\t\t * event: {\n\t\t * \"type\": \"reaction_added\",\n\t\t * \"user\": \"U060WD4QW81\",\n\t\t * \"reaction\": \"telephone_receiver\",\n\t\t * \"item\": {\n\t\t *   \"type\": \"message\",\n\t\t *   \"channel\": \"C06196XMUMN\",\n\t\t *   \"ts\": \"1697037020.309679\"\n\t\t * },\n\t\t * \"item_user\": \"U060WD4QW81\",\n\t\t * \"event_ts\": \"1697037219.001600\"\n\t\t * }\n\t\t */\n\t\tthis.slackApp.event('reaction_added', async ({ event }) => {\n\t\t\tslackLogger.debug('OnSlackEvent-REACTION_ADDED: ', event);\n\t\t\ttry {\n\t\t\t\tslackLogger.error({ event });\n\t\t\t\tawait this.onReactionAdded(event);\n\t\t\t} catch (err) {\n\t\t\t\tslackLogger.error({ msg: 'Unhandled error onReactionAdded', err });\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Event fired when a reaction is removed from a message in a channel or group app is added in.\n\t\t * event: {\n\t\t * \"type\": \"reaction_removed\",\n\t\t * \"user\": \"U060WD4QW81\",\n\t\t * \"reaction\": \"raised_hands\",\n\t\t * \"item\": {\n\t\t *   \"type\": \"message\",\n\t\t *   \"channel\": \"C06196XMUMN\",\n\t\t *   \"ts\": \"1697028997.057629\"\n\t\t * },\n\t\t * \"item_user\": \"U060WD4QW81\",\n\t\t * \"event_ts\": \"1697029220.000600\"\n\t\t * }\n\t\t */\n\t\tthis.slackApp.event('reaction_removed', async ({ event }) => {\n\t\t\tslackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', event);\n\t\t\ttry {\n\t\t\t\tawait this.onReactionRemoved(event);\n\t\t\t} catch (err) {\n\t\t\t\tslackLogger.error({ msg: 'Unhandled error onReactionRemoved', err });\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Event fired when a members joins a channel\n\t\t * event: {\n\t\t * \"type\": \"member_joined_channel\",\n\t\t * \"user\": \"U06039U8WK1\",\n\t\t * \"channel\": \"C060HT033E2\",\n\t\t * \"channel_type\": \"C\",\n\t\t * \"team\": \"T060383CUDV\",\n\t\t * \"inviter\": \"U060WD4QW81\",\n\t\t * \"event_ts\": \"1697042377.000800\"\n\t\t * }\n\t\t */\n\t\tthis.slackApp.event('member_joined_channel', async ({ event, context }) => {\n\t\t\tslackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', event);\n\t\t\ttry {\n\t\t\t\tawait this.processMemberJoinChannel(event, context);\n\t\t\t} catch (err) {\n\t\t\t\tslackLogger.error({ msg: 'Unhandled error onChannelLeft', err });\n\t\t\t}\n\t\t});\n\n\t\tthis.slackApp.event('channel_left', async ({ event }) => {\n\t\t\tslackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', event);\n\t\t\ttry {\n\t\t\t\tthis.onChannelLeft(event);\n\t\t\t} catch (err) {\n\t\t\t\tslackLogger.error({ msg: 'Unhandled error onChannelLeft', err });\n\t\t\t}\n\t\t});\n\n\t\tthis.slackApp.error((error) => {\n\t\t\tslackLogger.error({ msg: 'Error on SlackApp', error });\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tregisterForEventsLegacy() {\n\t\tslackLogger.debug('Register for events');\n\t\tthis.rtm.on('authenticated', () => {\n\t\t\tslackLogger.info('Connected to Slack');\n\t\t});\n\n\t\tthis.rtm.on('unable_to_rtm_start', () => {\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\tthis.rtm.on('disconnected', () => {\n\t\t\tslackLogger.info('Disconnected from Slack');\n\t\t\tthis.slackBridge.disconnect();\n\t\t});\n\n\t\t/**\n\t\t * Event fired when someone messages a channel the bot is in\n\t\t * {\n\t\t *\ttype: 'message',\n\t\t * \tchannel: [channel_id],\n\t\t * \tuser: [user_id],\n\t\t * \ttext: [message],\n\t\t * \tts: [ts.milli],\n\t\t * \tteam: [team_id],\n\t\t * \tsubtype: [message_subtype],\n\t\t * \tinviter: [message_subtype = 'group_join|channel_join' -> user_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('message', async (slackMessage) => {\n\t\t\tslackLogger.debug('OnSlackEvent-MESSAGE: ', slackMessage);\n\t\t\tif (slackMessage) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.onMessage(slackMessage);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tslackLogger.error({ msg: 'Unhandled error onMessage', err });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.rtm.on('reaction_added', async (reactionMsg) => {\n\t\t\tslackLogger.debug('OnSlackEvent-REACTION_ADDED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.onReactionAdded(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tslackLogger.error({ msg: 'Unhandled error onReactionAdded', err });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.rtm.on('reaction_removed', async (reactionMsg) => {\n\t\t\tslackLogger.debug('OnSlackEvent-REACTION_REMOVED: ', reactionMsg);\n\t\t\tif (reactionMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.onReactionRemoved(reactionMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tslackLogger.error({ msg: 'Unhandled error onReactionRemoved', err });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Event fired when someone creates a public channel\n\t\t * {\n\t\t *\ttype: 'channel_created',\n\t\t *\tchannel: {\n\t\t *\t\tid: [channel_id],\n\t\t *\t\tis_channel: true,\n\t\t *\t\tname: [channel_name],\n\t\t *\t\tcreated: [ts],\n\t\t *\t\tcreator: [user_id],\n\t\t *\t\tis_shared: false,\n\t\t *\t\tis_org_shared: false\n\t\t *\t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('channel_created', () => {});\n\n\t\t/**\n\t\t * Event fired when the bot joins a public channel\n\t\t * {\n\t\t * \ttype: 'channel_joined',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_channel: true,\n\t\t * \t\tcreated: [ts],\n\t\t * \t\tcreator: [user_id],\n\t\t * \t\tis_archived: false,\n\t\t * \t\tis_general: false,\n\t\t * \t\tis_member: true,\n\t\t * \t\tlast_read: [ts.milli],\n\t\t * \t\tlatest: [message_obj],\n\t\t * \t\tunread_count: 0,\n\t\t * \t\tunread_count_display: 0,\n\t\t * \t\tmembers: [ user_ids ],\n\t\t * \t\ttopic: {\n\t\t * \t\t\tvalue: [channel_topic],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t},\n\t\t * \t\tpurpose: {\n\t\t * \t\t\tvalue: [channel_purpose],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t}\n\t\t * \t}\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('channel_joined', () => {});\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a public channel\n\t\t * {\n\t\t * \ttype: 'channel_left',\n\t\t * \tchannel: [channel_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('channel_left', (channelLeftMsg) => {\n\t\t\tslackLogger.debug('OnSlackEvent-CHANNEL_LEFT: ', channelLeftMsg);\n\t\t\tif (channelLeftMsg) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.onChannelLeft(channelLeftMsg);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tslackLogger.error({ msg: 'Unhandled error onChannelLeft', err });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Event fired when an archived channel is deleted by an admin\n\t\t * {\n\t\t * \ttype: 'channel_deleted',\n\t\t * \tchannel: [channel_id],\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('channel_deleted', () => {});\n\n\t\t/**\n\t\t * Event fired when the channel has its name changed\n\t\t * {\n\t\t * \ttype: 'channel_rename',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_channel: true,\n\t\t * \t\tcreated: [ts]\n\t\t * \t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('channel_rename', () => {});\n\n\t\t/**\n\t\t * Event fired when the bot joins a private channel\n\t\t * {\n\t\t * \ttype: 'group_joined',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_group: true,\n\t\t * \t\tcreated: [ts],\n\t\t * \t\tcreator: [user_id],\n\t\t * \t\tis_archived: false,\n\t\t * \t\tis_mpim: false,\n\t\t * \t\tis_open: true,\n\t\t * \t\tlast_read: [ts.milli],\n\t\t * \t\tlatest: [message_obj],\n\t\t * \t\tunread_count: 0,\n\t\t * \t\tunread_count_display: 0,\n\t\t * \t\tmembers: [ user_ids ],\n\t\t * \t\ttopic: {\n\t\t * \t\t\tvalue: [channel_topic],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t},\n\t\t * \t\tpurpose: {\n\t\t * \t\t\tvalue: [channel_purpose],\n\t\t * \t\t\tcreator: [user_id],\n\t\t * \t\t\tlast_set: 0\n\t\t * \t\t}\n\t\t * \t}\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('group_joined', () => {});\n\n\t\t/**\n\t\t * Event fired when the bot leaves (or is removed from) a private channel\n\t\t * {\n\t\t * \ttype: 'group_left',\n\t\t * \tchannel: [channel_id]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('group_left', () => {});\n\n\t\t/**\n\t\t * Event fired when the private channel has its name changed\n\t\t * {\n\t\t * \ttype: 'group_rename',\n\t\t * \tchannel: {\n\t\t * \t\tid: [channel_id],\n\t\t * \t\tname: [channel_name],\n\t\t * \t\tis_group: true,\n\t\t * \t\tcreated: [ts]\n\t\t * \t},\n\t\t *\tevent_ts: [ts.milli]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('group_rename', () => {});\n\n\t\t/**\n\t\t * Event fired when a new user joins the team\n\t\t * {\n\t\t * \ttype: 'team_join',\n\t\t * \tuser:\n\t\t * \t{\n\t\t * \t\tid: [user_id],\n\t\t * \t\tteam_id: [team_id],\n\t\t * \t\tname: [user_name],\n\t\t * \t\tdeleted: false,\n\t\t * \t\tstatus: null,\n\t\t * \t\tcolor: [color_code],\n\t\t * \t\treal_name: '',\n\t\t * \t\ttz: [timezone],\n\t\t * \t\ttz_label: [timezone_label],\n\t\t * \t\ttz_offset: [timezone_offset],\n\t\t * \t\tprofile:\n\t\t * \t\t{\n\t\t * \t\t\tavatar_hash: '',\n\t\t * \t\t\treal_name: '',\n\t\t * \t\t\treal_name_normalized: '',\n\t\t * \t\t\temail: '',\n\t\t * \t\t\timage_24: '',\n\t\t * \t\t\timage_32: '',\n\t\t * \t\t\timage_48: '',\n\t\t * \t\t\timage_72: '',\n\t\t * \t\t\timage_192: '',\n\t\t * \t\t\timage_512: '',\n\t\t * \t\t\tfields: null\n\t\t * \t\t},\n\t\t * \t\tis_admin: false,\n\t\t * \t\tis_owner: false,\n\t\t * \t\tis_primary_owner: false,\n\t\t * \t\tis_restricted: false,\n\t\t * \t\tis_ultra_restricted: false,\n\t\t * \t\tis_bot: false,\n\t\t * \t\tpresence: [user_presence]\n\t\t * \t},\n\t\t * \tcache_ts: [ts]\n\t\t * }\n\t\t **/\n\t\tthis.rtm.on('team_join', () => {});\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_removed\n\t */\n\tasync onReactionRemoved(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = await this.rocket.getUser(slackReactionMsg.user);\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = await Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = await Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${slackReactionMsg.reaction}:`;\n\t\t\t\tconst theReaction = (rocketMsg.reactions || {})[rocketReaction];\n\n\t\t\t\t// If the Rocket user has already been removed, then this is an echo back from slack\n\t\t\t\tif (rocketMsg.reactions && theReaction) {\n\t\t\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) === -1) {\n\t\t\t\t\t\treturn; // Reaction already removed\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Reaction already removed\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`unset${rocketMsg._id}${rocketReaction}`, rocketUser);\n\t\t\t\tslackLogger.debug('Removing reaction from Slack');\n\t\t\t\tawait executeSetReaction(rocketUser._id, rocketReaction, rocketMsg._id);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/reaction_added\n\t */\n\tasync onReactionAdded(slackReactionMsg) {\n\t\tif (slackReactionMsg) {\n\t\t\tif (!this.slackBridge.isReactionsEnabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rocketUser = await this.rocket.getUser(slackReactionMsg.user);\n\n\t\t\tif (rocketUser.roles.includes('bot')) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Lets find our Rocket originated message\n\t\t\tlet rocketMsg = await Messages.findOneBySlackTs(slackReactionMsg.item.ts);\n\n\t\t\tif (!rocketMsg) {\n\t\t\t\t// Must have originated from Slack\n\t\t\t\tconst rocketID = this.rocket.createRocketID(slackReactionMsg.item.channel, slackReactionMsg.item.ts);\n\t\t\t\trocketMsg = await Messages.findOneById(rocketID);\n\t\t\t}\n\n\t\t\tif (rocketMsg && rocketUser) {\n\t\t\t\tconst rocketReaction = `:${slackReactionMsg.reaction}:`;\n\n\t\t\t\t// If the Rocket user has already reacted, then this is Slack echoing back to us\n\t\t\t\tif (rocketMsg.reactions) {\n\t\t\t\t\tconst theReaction = rocketMsg.reactions[rocketReaction];\n\t\t\t\t\tif (theReaction) {\n\t\t\t\t\t\tif (theReaction.usernames.indexOf(rocketUser.username) !== -1) {\n\t\t\t\t\t\t\treturn; // Already reacted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Stash this away to key off it later so we don't send it back to Slack\n\t\t\t\tthis.slackBridge.reactionsMap.set(`set${rocketMsg._id}${rocketReaction}`, rocketUser);\n\t\t\t\tslackLogger.debug('Adding reaction from Slack');\n\t\t\t\tawait executeSetReaction(rocketUser._id, rocketReaction, rocketMsg._id);\n\t\t\t}\n\t\t}\n\t}\n\n\tonChannelLeft(channelLeftMsg) {\n\t\tthis.removeSlackChannel(channelLeftMsg.channel);\n\t}\n\n\t/**\n\t * We have received a message from slack and we need to save/delete/update it into rocket\n\t * https://api.slack.com/events/message\n\t */\n\tasync onMessage(slackMessage, isImporting) {\n\t\tconst isAFileShare = slackMessage && slackMessage.files && Array.isArray(slackMessage.files) && slackMessage.files.length;\n\t\tif (isAFileShare) {\n\t\t\tawait this.processFileShare(slackMessage);\n\t\t\treturn;\n\t\t}\n\t\tif (slackMessage.subtype) {\n\t\t\tswitch (slackMessage.subtype) {\n\t\t\t\tcase 'message_deleted':\n\t\t\t\t\tawait this.processMessageDeleted(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'message_changed':\n\t\t\t\t\tawait this.processMessageChanged(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'channel_join':\n\t\t\t\t\tawait this.processChannelJoin(slackMessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// Keeping backwards compatability for now, refactor later\n\t\t\t\t\tawait this.processNewMessage(slackMessage, isImporting);\n\t\t\t}\n\t\t} else {\n\t\t\t// Simple message\n\t\t\tawait this.processNewMessage(slackMessage, isImporting);\n\t\t}\n\t}\n\n\tasync postFindChannel(rocketChannelName) {\n\t\tslackLogger.debug('Searching for Slack channel or group', rocketChannelName);\n\t\tconst channels = await this.slackAPI.getChannels();\n\t\tif (channels && channels.length > 0) {\n\t\t\tfor (const channel of channels) {\n\t\t\t\tif (channel.name === rocketChannelName && channel.is_member === true) {\n\t\t\t\t\treturn channel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst groups = await this.slackAPI.getGroups();\n\t\tif (groups && groups.length > 0) {\n\t\t\tfor (const group of groups) {\n\t\t\t\tif (group.name === rocketChannelName) {\n\t\t\t\t\treturn group;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the Slack TS from a Rocket msg that originated from Slack\n\t * @param rocketMsg\n\t * @returns Slack TS or undefined if not a message that originated from slack\n\t * @private\n\t */\n\tgetTimeStamp(rocketMsg) {\n\t\t// slack-G3KJGGE15-1483081061-000169\n\t\tlet slackTS;\n\t\tlet index = rocketMsg._id.indexOf('slack-');\n\t\tif (index === 0) {\n\t\t\t// This is a msg that originated from Slack\n\t\t\tslackTS = rocketMsg._id.substr(6, rocketMsg._id.length);\n\t\t\tindex = slackTS.indexOf('-');\n\t\t\tslackTS = slackTS.substr(index + 1, slackTS.length);\n\t\t\tslackTS = slackTS.replace('-', '.');\n\t\t} else {\n\t\t\t// This probably originated as a Rocket msg, but has been sent to Slack\n\t\t\tslackTS = rocketMsg.slackTs;\n\t\t}\n\n\t\treturn slackTS;\n\t}\n\n\t/**\n\t * Adds a slack channel to our collection that the rocketbot is a member of on slack\n\t * @param rocketChID\n\t * @param slackChID\n\t */\n\taddSlackChannel(rocketChID, slackChID) {\n\t\tconst ch = this.getSlackChannel(rocketChID);\n\t\tif (ch == null) {\n\t\t\tslackLogger.debug('Added channel', { rocketChID, slackChID });\n\t\t\tthis.slackChannelRocketBotMembershipMap.set(rocketChID, {\n\t\t\t\tid: slackChID,\n\t\t\t\tfamily: slackChID.charAt(0) === 'C' ? 'channels' : 'groups',\n\t\t\t});\n\t\t}\n\t}\n\n\tremoveSlackChannel(slackChID) {\n\t\tconst keys = this.slackChannelRocketBotMembershipMap.keys();\n\t\tlet slackChannel;\n\t\tlet key;\n\t\twhile ((key = keys.next().value) != null) {\n\t\t\tslackChannel = this.slackChannelRocketBotMembershipMap.get(key);\n\t\t\tif (slackChannel.id === slackChID) {\n\t\t\t\t// Found it, need to delete it\n\t\t\t\tthis.slackChannelRocketBotMembershipMap.delete(key);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSlackChannel(rocketChID) {\n\t\treturn this.slackChannelRocketBotMembershipMap.get(rocketChID);\n\t}\n\n\tasync populateMembershipChannelMapByChannels() {\n\t\tconst channels = await this.slackAPI.getChannels();\n\t\tif (!channels || channels.length <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor await (const slackChannel of channels) {\n\t\t\tconst rocketchat_room =\n\t\t\t\t(await Rooms.findOneByName(slackChannel.name, { projection: { _id: 1 } })) ||\n\t\t\t\t(await Rooms.findOneByImportId(slackChannel.id, { projection: { _id: 1 } }));\n\t\t\tif (rocketchat_room && slackChannel.is_member) {\n\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackChannel.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync populateMembershipChannelMapByGroups() {\n\t\tconst groups = await this.slackAPI.getGroups();\n\t\tif (!groups || groups.length <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor await (const slackGroup of groups) {\n\t\t\tconst rocketchat_room =\n\t\t\t\t(await Rooms.findOneByName(slackGroup.name, { projection: { _id: 1 } })) ||\n\t\t\t\t(await Rooms.findOneByImportId(slackGroup.id, { projection: { _id: 1 } }));\n\t\t\tif (rocketchat_room && slackGroup.is_member) {\n\t\t\t\tthis.addSlackChannel(rocketchat_room._id, slackGroup.id);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync populateMembershipChannelMap() {\n\t\tslackLogger.debug('Populating channel map');\n\t\tawait this.populateMembershipChannelMapByChannels();\n\t\tawait this.populateMembershipChannelMapByGroups();\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.add\n\t */\n\tasync postReactionAdded(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tslackLogger.debug('Posting Add Reaction to Slack');\n\t\t\tconst postResult = await this.slackAPI.react(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Reaction added to Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/reactions.remove\n\t */\n\tasync postReactionRemove(reaction, slackChannel, slackTS) {\n\t\tif (reaction && slackChannel && slackTS) {\n\t\t\tconst data = {\n\t\t\t\tname: reaction,\n\t\t\t\tchannel: slackChannel,\n\t\t\t\ttimestamp: slackTS,\n\t\t\t};\n\n\t\t\tslackLogger.debug('Posting Remove Reaction to Slack');\n\t\t\tconst postResult = await this.slackAPI.removeReaction(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Reaction removed from Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync postDeleteMessage(rocketMessage) {\n\t\tif (rocketMessage) {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketMessage.rid);\n\n\t\t\tif (slackChannel != null) {\n\t\t\t\tconst data = {\n\t\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\t\tchannel: this.getSlackChannel(rocketMessage.rid).id,\n\t\t\t\t\tas_user: true,\n\t\t\t\t};\n\n\t\t\t\tslackLogger.debug('Post Delete Message to Slack', data);\n\t\t\t\tconst postResult = await this.slackAPI.removeMessage(data);\n\t\t\t\tif (postResult) {\n\t\t\t\t\tslackLogger.debug('Message deleted on Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstoreMessageBeingSent(data) {\n\t\tthis.messagesBeingSent.push(data);\n\t}\n\n\tremoveMessageBeingSent(data) {\n\t\tconst idx = this.messagesBeingSent.indexOf(data);\n\t\tif (idx >= 0) {\n\t\t\tthis.messagesBeingSent.splice(idx, 1);\n\t\t}\n\t}\n\n\tisMessageBeingSent(username, channel) {\n\t\tif (!this.messagesBeingSent.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.messagesBeingSent.some((messageData) => {\n\t\t\tif (messageData.username !== username) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (messageData.channel !== channel) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tcreateSlackMessageId(ts, channelId) {\n\t\treturn `slack${channelId ? `-${channelId}` : ''}-${ts.replace(/\\./g, '-')}`;\n\t}\n\n\tasync postMessage(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tlet iconUrl = getUserAvatarURL(rocketMessage.u && rocketMessage.u.username);\n\t\t\tif (iconUrl) {\n\t\t\t\ticonUrl = Meteor.absoluteUrl().replace(/\\/$/, '') + iconUrl;\n\t\t\t}\n\t\t\tconst data = {\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\tusername: rocketMessage.u && rocketMessage.u.username,\n\t\t\t\ticon_url: iconUrl,\n\t\t\t\tlink_names: 1,\n\t\t\t};\n\n\t\t\tif (rocketMessage.tmid) {\n\t\t\t\tconst tmessage = await Messages.findOneById(rocketMessage.tmid);\n\t\t\t\tif (tmessage && tmessage.slackTs) {\n\t\t\t\t\tdata.thread_ts = tmessage.slackTs;\n\t\t\t\t}\n\t\t\t}\n\t\t\tslackLogger.debug('Post Message To Slack', data);\n\n\t\t\t// If we don't have the bot id yet and we have multiple slack bridges, we need to keep track of the messages that are being sent\n\t\t\tif (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n\t\t\t\tthis.storeMessageBeingSent(data);\n\t\t\t}\n\n\t\t\tconst postResult = await this.slackAPI.sendMessage(data);\n\n\t\t\tif (!this.slackBotId && this.rocket.slackAdapters && this.rocket.slackAdapters.length >= 2) {\n\t\t\t\tthis.removeMessageBeingSent(data);\n\t\t\t}\n\n\t\t\tif (postResult && postResult.message && postResult.message.bot_id && postResult.message.ts) {\n\t\t\t\tthis.slackBotId = postResult.message.bot_id;\n\t\t\t\tawait Messages.setSlackBotIdAndSlackTs(rocketMessage._id, postResult.message.bot_id, postResult.message.ts);\n\t\t\t\tslackLogger.debug(`RocketMsgID=${rocketMessage._id} SlackMsgID=${postResult.message.ts} SlackBotID=${postResult.message.bot_id}`);\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/methods/chat.update\n\t */\n\tasync postMessageUpdate(slackChannel, rocketMessage) {\n\t\tif (slackChannel && slackChannel.id) {\n\t\t\tconst data = {\n\t\t\t\tts: this.getTimeStamp(rocketMessage),\n\t\t\t\tchannel: slackChannel.id,\n\t\t\t\ttext: rocketMessage.msg,\n\t\t\t\tas_user: true,\n\t\t\t};\n\t\t\tslackLogger.debug('Post UpdateMessage To Slack', data);\n\t\t\tconst postResult = await this.slackAPI.updateMessage(data);\n\t\t\tif (postResult) {\n\t\t\t\tslackLogger.debug('Message updated on Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processMemberJoinChannel(event, context) {\n\t\tslackLogger.debug('Member join channel', event.channel);\n\t\tconst rocketCh = await this.rocket.getChannel({ channel: event.channel });\n\t\tif (rocketCh != null) {\n\t\t\tthis.addSlackChannel(rocketCh._id, event.channel);\n\t\t\tif (context?.botUserId !== event?.user) {\n\t\t\t\tconst rocketChatUser = await this.rocket.getUser(event.user);\n\t\t\t\tawait addUserToRoom(rocketCh._id, rocketChatUser);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processChannelJoin(slackMessage) {\n\t\tslackLogger.debug('Channel join', slackMessage.channel.id);\n\t\tconst rocketCh = await this.rocket.addChannel(slackMessage.channel);\n\t\tif (rocketCh != null) {\n\t\t\tthis.addSlackChannel(rocketCh._id, slackMessage.channel);\n\t\t}\n\t}\n\n\tasync processFileShare(slackMessage) {\n\t\tif (!settings.get('SlackBridge_FileUpload_Enabled')) {\n\t\t\treturn;\n\t\t}\n\t\tconst file = slackMessage.files[0];\n\n\t\tif (file && file.url_private_download !== undefined) {\n\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = await this.rocket.getUser(slackMessage.user);\n\n\t\t\t// Hack to notify that a file was attempted to be uploaded\n\t\t\tdelete slackMessage.subtype;\n\n\t\t\t// If the text includes the file link, simply use the same text for the rocket message.\n\t\t\t// If the link was not included, then use it instead of the message.\n\n\t\t\tif (slackMessage.text.indexOf(file.permalink) < 0) {\n\t\t\t\tslackMessage.text = file.permalink;\n\t\t\t}\n\n\t\t\tconst ts = new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000);\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts,\n\t\t\t\tupdatedBySlack: true,\n\t\t\t};\n\n\t\t\tawait this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, false);\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_deleted\n\t */\n\tasync processMessageDeleted(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\tconst rocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\n\t\t\tif (rocketChannel && rocketUser) {\n\t\t\t\t// Find the Rocket message to delete\n\t\t\t\tlet rocketMsgObj = await Messages.findOneBySlackBotIdAndSlackTs(\n\t\t\t\t\tslackMessage.previous_message.bot_id,\n\t\t\t\t\tslackMessage.previous_message.ts,\n\t\t\t\t);\n\n\t\t\t\tif (!rocketMsgObj) {\n\t\t\t\t\t// Must have been a Slack originated msg\n\t\t\t\t\tconst _id = this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts);\n\t\t\t\t\trocketMsgObj = await Messages.findOneById(_id);\n\t\t\t\t}\n\n\t\t\t\tif (rocketMsgObj) {\n\t\t\t\t\tawait deleteMessage(rocketMsgObj, rocketUser);\n\t\t\t\t\tslackLogger.debug('Rocket message deleted by Slack');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t https://api.slack.com/events/message/message_changed\n\t */\n\tasync processMessageChanged(slackMessage) {\n\t\tif (slackMessage.previous_message) {\n\t\t\tconst currentMsg = await Messages.findOneById(this.rocket.createRocketID(slackMessage.channel, slackMessage.message.ts));\n\n\t\t\t// Only process this change, if its an actual update (not just Slack repeating back our Rocket original change)\n\t\t\tif (currentMsg && slackMessage.message.text !== currentMsg.msg) {\n\t\t\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\t\t\tconst rocketUser = slackMessage.previous_message.user\n\t\t\t\t\t? (await this.rocket.findUser(slackMessage.previous_message.user)) ||\n\t\t\t\t\t\t(await this.rocket.addUser(slackMessage.previous_message.user))\n\t\t\t\t\t: null;\n\n\t\t\t\tconst rocketMsgObj = {\n\t\t\t\t\t// @TODO _id\n\t\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.previous_message.ts),\n\t\t\t\t\trid: rocketChannel._id,\n\t\t\t\t\tmsg: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.message.text),\n\t\t\t\t\tupdatedBySlack: true, // We don't want to notify slack about this change since Slack initiated it\n\t\t\t\t};\n\n\t\t\t\tawait updateMessage(rocketMsgObj, rocketUser);\n\t\t\t\tslackLogger.debug('Rocket message updated by Slack');\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t This method will get refactored and broken down into single responsibilities\n\t */\n\tasync processNewMessage(slackMessage, isImporting) {\n\t\tconst rocketChannel = await this.rocket.getChannel(slackMessage);\n\t\tlet rocketUser = null;\n\t\tif (slackMessage.subtype === 'bot_message') {\n\t\t\trocketUser = await Users.findOneById('rocket.cat', { projection: { username: 1 } });\n\t\t} else {\n\t\t\trocketUser = slackMessage.user\n\t\t\t\t? (await this.rocket.findUser(slackMessage.user)) || (await this.rocket.addUser(slackMessage.user))\n\t\t\t\t: null;\n\t\t}\n\t\tif (rocketChannel && rocketUser) {\n\t\t\tconst msgDataDefaults = {\n\t\t\t\t_id: this.rocket.createRocketID(slackMessage.channel, slackMessage.ts),\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t};\n\t\t\tif (isImporting) {\n\t\t\t\tmsgDataDefaults.imported = 'slackbridge';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait this.rocket.createAndSaveMessage(rocketChannel, rocketUser, slackMessage, msgDataDefaults, isImporting, this);\n\t\t\t} catch (e) {\n\t\t\t\t// http://www.mongodb.org/about/contributors/error-codes/\n\t\t\t\t// 11000 == duplicate key error\n\t\t\t\tif (e.name === 'MongoError' && e.code === 11000) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processBotMessage(rocketChannel, slackMessage) {\n\t\tconst excludeBotNames = settings.get('SlackBridge_ExcludeBotnames');\n\t\tif (slackMessage.username !== undefined && excludeBotNames && slackMessage.username.match(excludeBotNames)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.slackBotId) {\n\t\t\tif (slackMessage.bot_id === this.slackBotId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tconst slackChannel = this.getSlackChannel(rocketChannel._id);\n\t\t\tif (this.isMessageBeingSent(slackMessage.username || slackMessage.bot_id, slackChannel.id)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst rocketMsgObj = {\n\t\t\tmsg: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text),\n\t\t\trid: rocketChannel._id,\n\t\t\tbot: true,\n\t\t\tattachments: slackMessage.attachments,\n\t\t\tusername: slackMessage.username || slackMessage.bot_id,\n\t\t};\n\t\tthis.rocket.addAliasToMsg(slackMessage.username || slackMessage.bot_id, rocketMsgObj);\n\t\tif (slackMessage.icons) {\n\t\t\trocketMsgObj.emoji = slackMessage.icons.emoji;\n\t\t}\n\t\treturn rocketMsgObj;\n\t}\n\n\tasync processMeMessage(rocketUser, slackMessage) {\n\t\treturn this.rocket.addAliasToMsg(rocketUser.username, {\n\t\t\tmsg: `_${await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.text)}_`,\n\t\t});\n\t}\n\n\tasync processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tawait Message.saveSystemMessage('uj', rocketChannel._id, rocketUser.username, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tawait addUserToRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tasync processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.inviter) {\n\t\t\tconst inviter = slackMessage.inviter\n\t\t\t\t? (await this.rocket.findUser(slackMessage.inviter)) || (await this.rocket.addUser(slackMessage.inviter))\n\t\t\t\t: null;\n\t\t\tif (isImporting) {\n\t\t\t\tawait Message.saveSystemMessage('au', rocketChannel._id, rocketUser.username, inviter, {\n\t\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\t\timported: 'slackbridge',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tawait addUserToRoom(rocketChannel._id, rocketUser, inviter);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tawait Message.saveSystemMessage('ul', rocketChannel._id, rocketUser.username, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tawait removeUserFromRoom(rocketChannel._id, rocketUser);\n\t\t}\n\t}\n\n\tasync processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tawait Message.saveSystemMessage('room_changed_topic', rocketChannel._id, slackMessage.topic, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tawait saveRoomTopic(rocketChannel._id, slackMessage.topic, rocketUser, false);\n\t\t}\n\t}\n\n\tasync processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tawait Message.saveSystemMessage('room_changed_topic', rocketChannel._id, slackMessage.purpose, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tawait saveRoomTopic(rocketChannel._id, slackMessage.purpose, rocketUser, false);\n\t\t}\n\t}\n\n\tasync processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (isImporting) {\n\t\t\tawait Message.saveSystemMessage('r', rocketChannel._id, slackMessage.name, rocketUser, {\n\t\t\t\tts: new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\timported: 'slackbridge',\n\t\t\t});\n\t\t} else {\n\t\t\tawait saveRoomName(rocketChannel._id, slackMessage.name, rocketUser, false);\n\t\t}\n\t}\n\n\tasync processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.file && slackMessage.file.url_private_download !== undefined) {\n\t\t\tconst details = {\n\t\t\t\tmessage_id: this.createSlackMessageId(slackMessage.ts),\n\t\t\t\tname: slackMessage.file.name,\n\t\t\t\tsize: slackMessage.file.size,\n\t\t\t\ttype: slackMessage.file.mimetype,\n\t\t\t\trid: rocketChannel._id,\n\t\t\t};\n\t\t\treturn this.uploadFileFromSlack(\n\t\t\t\tdetails,\n\t\t\t\tslackMessage.file.url_private_download,\n\t\t\t\trocketUser,\n\t\t\t\trocketChannel,\n\t\t\t\tnew Date(parseInt(slackMessage.ts.split('.')[0]) * 1000),\n\t\t\t\tisImporting,\n\t\t\t);\n\t\t}\n\t}\n\n\tasync processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tif (slackMessage.attachments && slackMessage.attachments[0] && slackMessage.attachments[0].text) {\n\t\t\t// TODO: refactor this logic to use the service to send this system message instead of using sendMessage\n\t\t\tconst rocketMsgObj = {\n\t\t\t\trid: rocketChannel._id,\n\t\t\t\tt: 'message_pinned',\n\t\t\t\tmsg: '',\n\t\t\t\tu: {\n\t\t\t\t\t_id: rocketUser._id,\n\t\t\t\t\tusername: rocketUser.username,\n\t\t\t\t},\n\t\t\t\tattachments: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(slackMessage.attachments[0].text),\n\t\t\t\t\t\tauthor_name: slackMessage.attachments[0].author_subname,\n\t\t\t\t\t\tauthor_icon: getUserAvatarURL(slackMessage.attachments[0].author_subname),\n\t\t\t\t\t\tts: new Date(parseInt(slackMessage.attachments[0].ts.split('.')[0]) * 1000),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\n\t\t\tif (!isImporting && slackMessage.attachments[0].channel_id && slackMessage.attachments[0].ts) {\n\t\t\t\tconst messageId = this.createSlackMessageId(slackMessage.attachments[0].ts, slackMessage.attachments[0].channel_id);\n\t\t\t\tawait Messages.setPinnedByIdAndUserId(messageId, rocketMsgObj.u, true, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000));\n\t\t\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\t\t\tawait ReadReceipts.setPinnedByMessageId(messageId, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn rocketMsgObj;\n\t\t}\n\t\tslackLogger.error('Pinned item with no attachment');\n\t}\n\n\tasync processSubtypedMessage(rocketChannel, rocketUser, slackMessage, isImporting) {\n\t\tswitch (slackMessage.subtype) {\n\t\t\tcase 'bot_message':\n\t\t\t\treturn this.processBotMessage(rocketChannel, slackMessage);\n\t\t\tcase 'me_message':\n\t\t\t\treturn this.processMeMessage(rocketUser, slackMessage);\n\t\t\tcase 'channel_join':\n\t\t\t\treturn this.processChannelJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'group_join':\n\t\t\t\treturn this.processGroupJoinMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_leave':\n\t\t\tcase 'group_leave':\n\t\t\t\treturn this.processLeaveMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_topic':\n\t\t\tcase 'group_topic':\n\t\t\t\treturn this.processTopicMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_purpose':\n\t\t\tcase 'group_purpose':\n\t\t\t\treturn this.processPurposeMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_name':\n\t\t\tcase 'group_name':\n\t\t\t\treturn this.processNameMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'channel_archive':\n\t\t\tcase 'group_archive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tawait archiveRoom(rocketChannel, rocketUser);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'channel_unarchive':\n\t\t\tcase 'group_unarchive':\n\t\t\t\tif (!isImporting) {\n\t\t\t\t\tawait unarchiveRoom(rocketChannel);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\tcase 'file_share':\n\t\t\t\treturn this.processShareMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'file_comment':\n\t\t\t\tslackLogger.error('File comment not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'file_mention':\n\t\t\t\tslackLogger.error('File mentioned not implemented');\n\t\t\t\treturn;\n\t\t\tcase 'pinned_item':\n\t\t\t\treturn this.processPinnedItemMessage(rocketChannel, rocketUser, slackMessage, isImporting);\n\t\t\tcase 'unpinned_item':\n\t\t\t\tslackLogger.error('Unpinned item not implemented');\n\t\t}\n\t}\n\n\t/**\n\tUploads the file to the storage.\n\t@param [Object] details an object with details about the upload. name, size, type, and rid\n\t@param [String] fileUrl url of the file to download/import\n\t@param [Object] user the Rocket.Chat user\n\t@param [Object] room the Rocket.Chat room\n\t@param [Date] timeStamp the timestamp the file was uploaded\n\t**/\n\t// details, slackMessage.file.url_private_download, rocketUser, rocketChannel, new Date(parseInt(slackMessage.ts.split('.')[0]) * 1000), isImporting);\n\tasync uploadFileFromSlack(details, slackFileURL, rocketUser, rocketChannel, timeStamp, isImporting) {\n\t\tconst requestModule = /https/i.test(slackFileURL) ? https : http;\n\t\tconst parsedUrl = url.parse(slackFileURL, true);\n\t\tparsedUrl.headers = { Authorization: `Bearer ${this.apiToken}` };\n\t\tawait requestModule.get(parsedUrl, async (stream) => {\n\t\t\tconst fileStore = FileUpload.getStore('Uploads');\n\n\t\t\tconst file = await fileStore.insert(details, stream);\n\n\t\t\tconst url = file.url.replace(Meteor.absoluteUrl(), '/');\n\t\t\tconst attachment = {\n\t\t\t\ttitle: file.name,\n\t\t\t\ttitle_link: url,\n\t\t\t};\n\n\t\t\tif (/^image\\/.+/.test(file.type)) {\n\t\t\t\tattachment.image_url = url;\n\t\t\t\tattachment.image_type = file.type;\n\t\t\t\tattachment.image_size = file.size;\n\t\t\t\tattachment.image_dimensions = file.identify && file.identify.size;\n\t\t\t}\n\t\t\tif (/^audio\\/.+/.test(file.type)) {\n\t\t\t\tattachment.audio_url = url;\n\t\t\t\tattachment.audio_type = file.type;\n\t\t\t\tattachment.audio_size = file.size;\n\t\t\t}\n\t\t\tif (/^video\\/.+/.test(file.type)) {\n\t\t\t\tattachment.video_url = url;\n\t\t\t\tattachment.video_type = file.type;\n\t\t\t\tattachment.video_size = file.size;\n\t\t\t}\n\n\t\t\tconst msg = {\n\t\t\t\trid: details.rid,\n\t\t\t\tts: timeStamp,\n\t\t\t\tmsg: '',\n\t\t\t\tfile: {\n\t\t\t\t\t_id: file._id,\n\t\t\t\t},\n\t\t\t\tgroupable: false,\n\t\t\t\tattachments: [attachment],\n\t\t\t};\n\n\t\t\tif (isImporting) {\n\t\t\t\tmsg.imported = 'slackbridge';\n\t\t\t}\n\n\t\t\tif (details.message_id && typeof details.message_id === 'string') {\n\t\t\t\tmsg._id = details.message_id;\n\t\t\t}\n\n\t\t\tvoid sendMessage(rocketUser, msg, rocketChannel, true);\n\t\t});\n\t}\n\n\tasync importFromHistory(options) {\n\t\tslackLogger.debug('Importing messages history');\n\t\tconst data = await this.slackAPI.getHistory(options);\n\t\tif (Array.isArray(data.messages) && data.messages.length) {\n\t\t\tlet latest = 0;\n\t\t\tfor await (const message of data.messages.reverse()) {\n\t\t\t\tslackLogger.debug('MESSAGE: ', message);\n\t\t\t\tif (!latest || message.ts > latest) {\n\t\t\t\t\tlatest = message.ts;\n\t\t\t\t}\n\t\t\t\tmessage.channel = options.channel;\n\t\t\t\tawait this.onMessage(message, true);\n\t\t\t}\n\t\t\treturn { has_more: data.has_more, ts: latest };\n\t\t}\n\t}\n\n\tasync copyChannelInfo(rid, channelMap) {\n\t\tslackLogger.debug('Copying users from Slack channel to Rocket.Chat', channelMap.id, rid);\n\t\tconst channel = await this.slackAPI.getRoomInfo(channelMap.id);\n\t\tif (channel) {\n\t\t\tconst members = await this.slackAPI.getMembers(channelMap.id);\n\t\t\tif (members && Array.isArray(members) && members.length) {\n\t\t\t\tfor await (const member of members) {\n\t\t\t\t\tconst user = (await this.rocket.findUser(member)) || (await this.rocket.addUser(member));\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tslackLogger.debug('Adding user to room', user.username, rid);\n\t\t\t\t\t\tawait addUserToRoom(rid, user, null, { skipSystemMessage: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet topic = '';\n\t\t\tlet topic_last_set = 0;\n\t\t\tlet topic_creator = null;\n\t\t\tif (channel && channel.topic && channel.topic.value) {\n\t\t\t\ttopic = channel.topic.value;\n\t\t\t\ttopic_last_set = channel.topic.last_set;\n\t\t\t\ttopic_creator = channel.topic.creator;\n\t\t\t}\n\n\t\t\tif (channel && channel.purpose && channel.purpose.value) {\n\t\t\t\tif (topic_last_set) {\n\t\t\t\t\tif (topic_last_set < channel.purpose.last_set) {\n\t\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttopic = channel.purpose.topic;\n\t\t\t\t\ttopic_creator = channel.purpose.creator;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (topic) {\n\t\t\t\tconst creator = (await this.rocket.findUser(topic_creator)) || (await this.rocket.addUser(topic_creator));\n\t\t\t\tslackLogger.debug('Setting room topic', rid, topic, creator.username);\n\t\t\t\tawait saveRoomTopic(rid, topic, creator, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync copyPins(rid, channelMap) {\n\t\tconst items = await this.slackAPI.getPins(channelMap.id);\n\t\tif (items && Array.isArray(items) && items.length) {\n\t\t\tfor await (const pin of items) {\n\t\t\t\tif (pin.message) {\n\t\t\t\t\tconst user = await this.rocket.findUser(pin.message.user);\n\t\t\t\t\t// TODO: send this system message to the room as well (using the service)\n\t\t\t\t\tconst msgObj = {\n\t\t\t\t\t\trid,\n\t\t\t\t\t\tt: 'message_pinned',\n\t\t\t\t\t\tmsg: '',\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tattachments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttext: await this.rocket.convertSlackMsgTxtToRocketTxtFormat(pin.message.text),\n\t\t\t\t\t\t\t\tauthor_name: user.username,\n\t\t\t\t\t\t\t\tauthor_icon: getUserAvatarURL(user.username),\n\t\t\t\t\t\t\t\tts: new Date(parseInt(pin.message.ts.split('.')[0]) * 1000),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t};\n\n\t\t\t\t\tconst messageId = this.createSlackMessageId(pin.message.ts, pin.channel);\n\t\t\t\t\tawait Messages.setPinnedByIdAndUserId(messageId, msgObj.u, true, new Date(parseInt(pin.message.ts.split('.')[0]) * 1000));\n\t\t\t\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\t\t\t\tawait ReadReceipts.setPinnedByMessageId(messageId, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync importMessages(rid, callback) {\n\t\tslackLogger.info('importMessages: ', rid);\n\t\tconst rocketchat_room = await Rooms.findOneById(rid);\n\t\tif (rocketchat_room) {\n\t\t\tif (this.getSlackChannel(rid)) {\n\t\t\t\tawait this.copyChannelInfo(rid, this.getSlackChannel(rid));\n\n\t\t\t\tslackLogger.debug('Importing messages from Slack to Rocket.Chat', this.getSlackChannel(rid), rid);\n\n\t\t\t\tlet results = await this.importFromHistory({\n\t\t\t\t\tchannel: this.getSlackChannel(rid).id,\n\t\t\t\t\toldest: 1,\n\t\t\t\t});\n\t\t\t\twhile (results && results.has_more) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tresults = await this.importFromHistory({\n\t\t\t\t\t\tchannel: this.getSlackChannel(rid).id,\n\t\t\t\t\t\toldest: results.ts,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tslackLogger.debug('Pinning Slack channel messages to Rocket.Chat', this.getSlackChannel(rid), rid);\n\t\t\t\tawait this.copyPins(rid, this.getSlackChannel(rid));\n\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t\tconst slack_room = await this.postFindChannel(rocketchat_room.name);\n\t\t\tif (slack_room) {\n\t\t\t\tthis.addSlackChannel(rid, slack_room.id);\n\t\t\t\treturn this.importMessages(rid, callback);\n\t\t\t}\n\t\t\tslackLogger.error({ msg: 'Could not find Slack room with specified name', roomName: rocketchat_room.name });\n\t\t\treturn callback(new Meteor.Error('error-slack-room-not-found', 'Could not find Slack room with specified name'));\n\t\t}\n\t\tslackLogger.error({ msg: 'Could not find Rocket.Chat room with specified id', rid });\n\t\treturn callback(new Meteor.Error('error-invalid-room', 'Invalid room'));\n\t}\n}\n"],"mappings":";;;IAAA,IAAIA,cAAc;IAACC,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACJ,cAAc,GAACI,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAvGH,MAAM,CAACI,MAAM,CAAC;MAACF,OAAO,EAACA,CAAA,KAAIG;IAAY,CAAC,CAAC;IAAC,IAAIC,IAAI;IAACN,MAAM,CAACC,IAAI,CAAC,MAAM,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACG,IAAI,GAACH,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAII,KAAK;IAACP,MAAM,CAACC,IAAI,CAAC,OAAO,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACI,KAAK,GAACJ,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIK,GAAG;IAACR,MAAM,CAACC,IAAI,CAAC,KAAK,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACK,GAAG,GAACL,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIM,OAAO;IAACT,MAAM,CAACC,IAAI,CAAC,4BAA4B,EAAC;MAACQ,OAAOA,CAACN,CAAC,EAAC;QAACM,OAAO,GAACN,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIO,QAAQ,EAACC,KAAK,EAACC,KAAK,EAACC,YAAY;IAACb,MAAM,CAACC,IAAI,CAAC,qBAAqB,EAAC;MAACS,QAAQA,CAACP,CAAC,EAAC;QAACO,QAAQ,GAACP,CAAC;MAAA,CAAC;MAACQ,KAAKA,CAACR,CAAC,EAAC;QAACQ,KAAK,GAACR,CAAC;MAAA,CAAC;MAACS,KAAKA,CAACT,CAAC,EAAC;QAACS,KAAK,GAACT,CAAC;MAAA,CAAC;MAACU,YAAYA,CAACV,CAAC,EAAC;QAACU,YAAY,GAACV,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIW,QAAQ;IAACd,MAAM,CAACC,IAAI,CAAC,aAAa,EAAC;MAACc,GAAGA,CAACZ,CAAC,EAAC;QAACW,QAAQ,GAACX,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIa,SAAS;IAAChB,MAAM,CAACC,IAAI,CAAC,gBAAgB,EAAC;MAACe,SAASA,CAACb,CAAC,EAAC;QAACa,SAAS,GAACb,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIc,MAAM;IAACjB,MAAM,CAACC,IAAI,CAAC,eAAe,EAAC;MAACgB,MAAMA,CAACd,CAAC,EAAC;QAACc,MAAM,GAACd,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIe,YAAY,EAACC,aAAa;IAACnB,MAAM,CAACC,IAAI,CAAC,+BAA+B,EAAC;MAACiB,YAAYA,CAACf,CAAC,EAAC;QAACe,YAAY,GAACf,CAAC;MAAA,CAAC;MAACgB,aAAaA,CAAChB,CAAC,EAAC;QAACgB,aAAa,GAAChB,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIiB,UAAU;IAACpB,MAAM,CAACC,IAAI,CAAC,0BAA0B,EAAC;MAACmB,UAAUA,CAACjB,CAAC,EAAC;QAACiB,UAAU,GAACjB,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAIkB,aAAa;IAACrB,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAC;MAACoB,aAAaA,CAAClB,CAAC,EAAC;QAACkB,aAAa,GAAClB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAImB,WAAW;IAACtB,MAAM,CAACC,IAAI,CAAC,wCAAwC,EAAC;MAACqB,WAAWA,CAACnB,CAAC,EAAC;QAACmB,WAAW,GAACnB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIoB,aAAa;IAACvB,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAC;MAACsB,aAAaA,CAACpB,CAAC,EAAC;QAACoB,aAAa,GAACpB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIqB,kBAAkB;IAACxB,MAAM,CAACC,IAAI,CAAC,+CAA+C,EAAC;MAACuB,kBAAkBA,CAACrB,CAAC,EAAC;QAACqB,kBAAkB,GAACrB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIsB,WAAW;IAACzB,MAAM,CAACC,IAAI,CAAC,wCAAwC,EAAC;MAACwB,WAAWA,CAACtB,CAAC,EAAC;QAACsB,WAAW,GAACtB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIuB,aAAa;IAAC1B,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAC;MAACyB,aAAaA,CAACvB,CAAC,EAAC;QAACuB,aAAa,GAACvB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIwB,aAAa;IAAC3B,MAAM,CAACC,IAAI,CAAC,0CAA0C,EAAC;MAAC0B,aAAaA,CAACxB,CAAC,EAAC;QAACwB,aAAa,GAACxB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAIyB,kBAAkB;IAAC5B,MAAM,CAACC,IAAI,CAAC,oCAAoC,EAAC;MAAC2B,kBAAkBA,CAACzB,CAAC,EAAC;QAACyB,kBAAkB,GAACzB,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAI0B,QAAQ;IAAC7B,MAAM,CAACC,IAAI,CAAC,uBAAuB,EAAC;MAAC4B,QAAQA,CAAC1B,CAAC,EAAC;QAAC0B,QAAQ,GAAC1B,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAI2B,gBAAgB;IAAC9B,MAAM,CAACC,IAAI,CAAC,qCAAqC,EAAC;MAAC6B,gBAAgBA,CAAC3B,CAAC,EAAC;QAAC2B,gBAAgB,GAAC3B,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAI4B,QAAQ;IAAC/B,MAAM,CAACC,IAAI,CAAC,YAAY,EAAC;MAAC8B,QAAQA,CAAC5B,CAAC,EAAC;QAAC4B,QAAQ,GAAC5B,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAI6B,WAAW;IAAChC,MAAM,CAACC,IAAI,CAAC,UAAU,EAAC;MAAC+B,WAAWA,CAAC7B,CAAC,EAAC;QAAC6B,WAAW,GAAC7B,CAAC;MAAA;IAAC,CAAC,EAAC,EAAE,CAAC;IAAC,IAAI8B,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IAyBtoE,MAAM5B,YAAY,CAAC;MACjC6B,WAAWA,CAACC,WAAW,EAAE;QACxBH,WAAW,CAACI,KAAK,CAAC,aAAa,CAAC;QAChC,IAAI,CAACD,WAAW,GAAGA,WAAW;QAC9B,IAAI,CAACE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACf,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;QACvB;QACA,IAAI,CAACC,kCAAkC,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAACC,iBAAiB,GAAG,EAAE;QAC3B,IAAI,CAACC,UAAU,GAAG,KAAK;QAEvB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;MACnB;MAEA,MAAMC,OAAOA,CAAAC,IAAA,EAA8B;QAAA,IAA7B;UAAEV,QAAQ;UAAEE;QAAc,CAAC,GAAAQ,IAAA;QACxC,IAAI;UACH,MAAMC,aAAa,GAAG,OAAOT,aAAa,GAAG,IAAI,CAACU,UAAU,CAACV,aAAa,CAAC,GAAG,IAAI,CAACW,aAAa,CAACb,QAAQ,CAAC,CAAC;UAE3G,IAAIW,aAAa,EAAE;YAClBjB,WAAW,CAACoB,IAAI,CAAC,oBAAoB,CAAC;YACtCpB,WAAW,CAACI,KAAK,CAAC,2BAA2B,EAAEa,aAAa,CAAC;YAC7DhC,MAAM,CAACoC,OAAO,CAAC,YAAY;cAC1B,IAAI;gBACH,MAAM,IAAI,CAACC,4BAA4B,CAAC,CAAC,CAAC,CAAC;cAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE;gBACbvB,WAAW,CAACwB,KAAK,CAAC;kBAAEC,GAAG,EAAE,sCAAsC;kBAAEF;gBAAI,CAAC,CAAC;gBACvE,IAAIA,GAAG,CAACG,IAAI,CAACF,KAAK,KAAK,cAAc,EAAE;kBACtCxB,WAAW,CAACwB,KAAK,CAAC,+BAA+B,CAAC;gBACnD;gBACA,IAAI,CAACrB,WAAW,CAACwB,UAAU,CAAC,CAAC;cAC9B;YACD,CAAC,CAAC;UACH;QACD,CAAC,CAAC,OAAOJ,GAAG,EAAE;UACbvB,WAAW,CAACwB,KAAK,CAAC;YAAEC,GAAG,EAAE,sCAAsC;YAAEF;UAAI,CAAC,CAAC;UACvE,IAAI,CAACpB,WAAW,CAACwB,UAAU,CAAC,CAAC;QAC9B;MACD;;MAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;MACC,MAAMT,UAAUA,CAACV,aAAa,EAAE;QAC/B,IAAI,CAACA,aAAa,GAAGA,aAAa;;QAElC;QACA,IAAI,EAAE,MAAMT,QAAQ,CAAC6B,oBAAoB,CAACpB,aAAa,CAAC,CAAC,EAAE;UAC1D,MAAM,IAAIqB,KAAK,CAAC,kEAAkE,CAAC;QACpF;QACA,IAAI,CAACf,QAAQ,GAAG,IAAIf,QAAQ,CAAC,IAAI,CAACS,aAAa,CAACsB,QAAQ,CAAC;QAEzD,IAAI,CAACvB,QAAQ,GAAG,IAAIzB,QAAQ,CAAC;UAC5BiD,QAAQ,EAAE,IAAI,CAACvB,aAAa,CAACuB,QAAQ;UACrCC,aAAa,EAAE,IAAI,CAACxB,aAAa,CAACwB,aAAa;UAC/CC,KAAK,EAAE,IAAI,CAACzB,aAAa,CAACsB,QAAQ;UAClCI,UAAU,EAAE;QACb,CAAC,CAAC;QAEF,IAAI,CAACC,iBAAiB,CAAC,CAAC;QAExB,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAAC7B,QAAQ,CAAC8B,KAAK,CAAC,CAAC;QAEpD,OAAOD,gBAAgB;MACxB;;MAEA;AACD;AACA;AACA;AACA;MACC,MAAMjB,aAAaA,CAACb,QAAQ,EAAE;QAC7B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;;QAExB;QACA,IAAI,EAAE,MAAMP,QAAQ,CAACuC,WAAW,CAAChC,QAAQ,CAAC,CAAC,EAAE;UAC5C,MAAM,IAAIuB,KAAK,CAAC,uDAAuD,CAAC;QACzE;QAEA,IAAI7C,SAAS,IAAI,IAAI,EAAE;UACtBA,SAAS,CAAC2C,UAAU;QACrB;QACA,IAAI,CAACb,QAAQ,GAAG,IAAIf,QAAQ,CAAC,IAAI,CAACO,QAAQ,CAAC;QAC3C,IAAI,CAACD,GAAG,GAAG,IAAIrB,SAAS,CAAC,IAAI,CAACsB,QAAQ,CAAC;QAEvC,IAAI,CAACiC,uBAAuB,CAAC,CAAC;QAE9B,MAAMH,gBAAgB,GAAG,MAAM,IAAI,CAAC/B,GAAG,CAACgC,KAAK,CAAC,CAAC;QAE/C,OAAOD,gBAAgB;MACxB;;MAEA;AACD;AACA;MACC,MAAMT,UAAUA,CAAA,EAAG;QAClB,IAAI,IAAI,CAACtB,GAAG,CAACmC,SAAS,IAAI,IAAI,CAACnC,GAAG,CAACsB,UAAU,EAAE;UAC9C,MAAM,IAAI,CAACtB,GAAG,CAACsB,UAAU,CAAC,CAAC;QAC5B,CAAC,MAAM,IAAI,IAAI,CAACpB,QAAQ,CAACkC,IAAI,EAAE;UAC9B,MAAM,IAAI,CAAClC,QAAQ,CAACkC,IAAI,CAAC,CAAC;QAC3B;MACD;MAEAC,SAASA,CAAC/B,MAAM,EAAE;QACjB,IAAI,CAACA,MAAM,GAAGA,MAAM;MACrB;MAEAwB,iBAAiBA,CAAA,EAAG;QACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAC5B,QAAQ,CAACoC,OAAO,CAAC,MAAAC,KAAA,IAAuB;UAAA,IAAhB;YAAED;UAAQ,CAAC,GAAAC,KAAA;UACvC5C,WAAW,CAACI,KAAK,CAAC,wBAAwB,EAAEuC,OAAO,CAAC;UACpD,IAAIA,OAAO,EAAE;YACZ,IAAI;cACH,MAAM,IAAI,CAACE,SAAS,CAACF,OAAO,CAAC;YAC9B,CAAC,CAAC,OAAOpB,GAAG,EAAE;cACbvB,WAAW,CAACwB,KAAK,CAAC;gBAAEC,GAAG,EAAE,2BAA2B;gBAAEF;cAAI,CAAC,CAAC;YAC7D;UACD;QACD,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAChB,QAAQ,CAACuC,KAAK,CAAC,gBAAgB,EAAE,MAAAC,KAAA,IAAqB;UAAA,IAAd;YAAED;UAAM,CAAC,GAAAC,KAAA;UACrD/C,WAAW,CAACI,KAAK,CAAC,+BAA+B,EAAE0C,KAAK,CAAC;UACzD,IAAI;YACH9C,WAAW,CAACwB,KAAK,CAAC;cAAEsB;YAAM,CAAC,CAAC;YAC5B,MAAM,IAAI,CAACE,eAAe,CAACF,KAAK,CAAC;UAClC,CAAC,CAAC,OAAOvB,GAAG,EAAE;YACbvB,WAAW,CAACwB,KAAK,CAAC;cAAEC,GAAG,EAAE,iCAAiC;cAAEF;YAAI,CAAC,CAAC;UACnE;QACD,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAChB,QAAQ,CAACuC,KAAK,CAAC,kBAAkB,EAAE,MAAAG,KAAA,IAAqB;UAAA,IAAd;YAAEH;UAAM,CAAC,GAAAG,KAAA;UACvDjD,WAAW,CAACI,KAAK,CAAC,iCAAiC,EAAE0C,KAAK,CAAC;UAC3D,IAAI;YACH,MAAM,IAAI,CAACI,iBAAiB,CAACJ,KAAK,CAAC;UACpC,CAAC,CAAC,OAAOvB,GAAG,EAAE;YACbvB,WAAW,CAACwB,KAAK,CAAC;cAAEC,GAAG,EAAE,mCAAmC;cAAEF;YAAI,CAAC,CAAC;UACrE;QACD,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAChB,QAAQ,CAACuC,KAAK,CAAC,uBAAuB,EAAE,MAAAK,KAAA,IAA8B;UAAA,IAAvB;YAAEL,KAAK;YAAEM;UAAQ,CAAC,GAAAD,KAAA;UACrEnD,WAAW,CAACI,KAAK,CAAC,6BAA6B,EAAE0C,KAAK,CAAC;UACvD,IAAI;YACH,MAAM,IAAI,CAACO,wBAAwB,CAACP,KAAK,EAAEM,OAAO,CAAC;UACpD,CAAC,CAAC,OAAO7B,GAAG,EAAE;YACbvB,WAAW,CAACwB,KAAK,CAAC;cAAEC,GAAG,EAAE,+BAA+B;cAAEF;YAAI,CAAC,CAAC;UACjE;QACD,CAAC,CAAC;QAEF,IAAI,CAAChB,QAAQ,CAACuC,KAAK,CAAC,cAAc,EAAE,MAAAQ,KAAA,IAAqB;UAAA,IAAd;YAAER;UAAM,CAAC,GAAAQ,KAAA;UACnDtD,WAAW,CAACI,KAAK,CAAC,6BAA6B,EAAE0C,KAAK,CAAC;UACvD,IAAI;YACH,IAAI,CAACS,aAAa,CAACT,KAAK,CAAC;UAC1B,CAAC,CAAC,OAAOvB,GAAG,EAAE;YACbvB,WAAW,CAACwB,KAAK,CAAC;cAAEC,GAAG,EAAE,+BAA+B;cAAEF;YAAI,CAAC,CAAC;UACjE;QACD,CAAC,CAAC;QAEF,IAAI,CAAChB,QAAQ,CAACiB,KAAK,CAAEA,KAAK,IAAK;UAC9BxB,WAAW,CAACwB,KAAK,CAAC;YAAEC,GAAG,EAAE,mBAAmB;YAAED;UAAM,CAAC,CAAC;QACvD,CAAC,CAAC;MACH;;MAEA;AACD;AACA;MACCe,uBAAuBA,CAAA,EAAG;QACzBvC,WAAW,CAACI,KAAK,CAAC,qBAAqB,CAAC;QACxC,IAAI,CAACC,GAAG,CAACmD,EAAE,CAAC,eAAe,EAAE,MAAM;UAClCxD,WAAW,CAACoB,IAAI,CAAC,oBAAoB,CAAC;QACvC,CAAC,CAAC;QAEF,IAAI,CAACf,GAAG,CAACmD,EAAE,CAAC,qBAAqB,EAAE,MAAM;UACxC,IAAI,CAACrD,WAAW,CAACwB,UAAU,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEF,IAAI,CAACtB,GAAG,CAACmD,EAAE,CAAC,cAAc,EAAE,MAAM;UACjCxD,WAAW,CAACoB,IAAI,CAAC,yBAAyB,CAAC;UAC3C,IAAI,CAACjB,WAAW,CAACwB,UAAU,CAAC,CAAC;QAC9B,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACtB,GAAG,CAACmD,EAAE,CAAC,SAAS,EAAE,MAAOC,YAAY,IAAK;UAC9CzD,WAAW,CAACI,KAAK,CAAC,wBAAwB,EAAEqD,YAAY,CAAC;UACzD,IAAIA,YAAY,EAAE;YACjB,IAAI;cACH,MAAM,IAAI,CAACZ,SAAS,CAACY,YAAY,CAAC;YACnC,CAAC,CAAC,OAAOlC,GAAG,EAAE;cACbvB,WAAW,CAACwB,KAAK,CAAC;gBAAEC,GAAG,EAAE,2BAA2B;gBAAEF;cAAI,CAAC,CAAC;YAC7D;UACD;QACD,CAAC,CAAC;QAEF,IAAI,CAAClB,GAAG,CAACmD,EAAE,CAAC,gBAAgB,EAAE,MAAOE,WAAW,IAAK;UACpD1D,WAAW,CAACI,KAAK,CAAC,+BAA+B,EAAEsD,WAAW,CAAC;UAC/D,IAAIA,WAAW,EAAE;YAChB,IAAI;cACH,MAAM,IAAI,CAACV,eAAe,CAACU,WAAW,CAAC;YACxC,CAAC,CAAC,OAAOnC,GAAG,EAAE;cACbvB,WAAW,CAACwB,KAAK,CAAC;gBAAEC,GAAG,EAAE,iCAAiC;gBAAEF;cAAI,CAAC,CAAC;YACnE;UACD;QACD,CAAC,CAAC;QAEF,IAAI,CAAClB,GAAG,CAACmD,EAAE,CAAC,kBAAkB,EAAE,MAAOE,WAAW,IAAK;UACtD1D,WAAW,CAACI,KAAK,CAAC,iCAAiC,EAAEsD,WAAW,CAAC;UACjE,IAAIA,WAAW,EAAE;YAChB,IAAI;cACH,MAAM,IAAI,CAACR,iBAAiB,CAACQ,WAAW,CAAC;YAC1C,CAAC,CAAC,OAAOnC,GAAG,EAAE;cACbvB,WAAW,CAACwB,KAAK,CAAC;gBAAEC,GAAG,EAAE,mCAAmC;gBAAEF;cAAI,CAAC,CAAC;YACrE;UACD;QACD,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAClB,GAAG,CAACmD,EAAE,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;;QAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;;QAEvC;AACF;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,cAAc,EAAGG,cAAc,IAAK;UAC/C3D,WAAW,CAACI,KAAK,CAAC,6BAA6B,EAAEuD,cAAc,CAAC;UAChE,IAAIA,cAAc,EAAE;YACnB,IAAI;cACH,IAAI,CAACJ,aAAa,CAACI,cAAc,CAAC;YACnC,CAAC,CAAC,OAAOpC,GAAG,EAAE;cACbvB,WAAW,CAACwB,KAAK,CAAC;gBAAEC,GAAG,EAAE,+BAA+B;gBAAEF;cAAI,CAAC,CAAC;YACjE;UACD;QACD,CAAC,CAAC;;QAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAAClB,GAAG,CAACmD,EAAE,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,CAAC;;QAExC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;;QAEvC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC;;QAErC;AACF;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;;QAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC;;QAErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACE,IAAI,CAACnD,GAAG,CAACmD,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a0e510bd5c401f858eeb594aa1d491acb86dac0b"}
