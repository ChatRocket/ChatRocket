{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/poly1305-js/lib/poly1305.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/poly1305-js/lib/poly1305.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/poly1305-js/lib/poly1305.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/poly1305-js/lib/poly1305.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/poly1305-js/lib/poly1305.js"}},"code":"\"use strict\";\n\n!function (module1) {\n  var _slicedToArray;\n  module1.link(\"@babel/runtime/helpers/slicedToArray\", {\n    default: function (v) {\n      _slicedToArray = v;\n    }\n  }, 0);\n  var _regeneratorRuntime;\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 1);\n  var BigInteger = require('big-integer');\n  var crypto = require('crypto');\n  var Util = require('./util');\n  var BLOCK_SIZE = 16;\n  module.exports = /*#__PURE__*/function () {\n    /**\r\n     * @param {Buffer} key\r\n     */\n    function Poly1305(key) {\n      if (typeof key === 'undefined') {\n        this.buffer = Buffer.alloc(16, 0);\n        this.h = new Uint32Array(5);\n        this.r = [0, 0, 0, 0, 0];\n        this.pad = [0, 0, 0, 0];\n        this.leftover = 0;\n        this.final = false;\n        return;\n      }\n      if (!Buffer.isBuffer(key)) {\n        throw new TypeError(\"Poly1305 key must be a Buffer (argument 1)\");\n      }\n      if (key.length !== 32) {\n        throw new Error(\"Poly1305 requires a 32-byte key\");\n      }\n      this.buffer = Buffer.alloc(16, 0);\n      this.r = [Util.load32_le(key.slice(0, 4)) & 0x03ffffff, Util.load32_le(key.slice(3, 7)) >>> 2 & 0x03ffff03, Util.load32_le(key.slice(6, 10)) >>> 4 & 0x03ffc0ff, Util.load32_le(key.slice(9, 13)) >>> 6 & 0x03f03fff, Util.load32_le(key.slice(12, 16)) >>> 8 & 0x000fffff];\n      this.h = new Uint32Array(5);\n      this.pad = [Util.load32_le(key.slice(16, 20)), Util.load32_le(key.slice(20, 24)), Util.load32_le(key.slice(24, 28)), Util.load32_le(key.slice(28, 32))];\n      this.leftover = 0;\n      this.final = false;\n    }\n\n    /**\r\n     * Inspired by PHP's hash_copy()\r\n     *\r\n     * @return {Poly1305}\r\n     */\n    /**\r\n     * @param {Buffer} message\r\n     * @param {Buffer} key\r\n     * @return {Promise<Buffer>}\r\n     */\n    Poly1305.onetimeauth = function () {\n      function onetimeauth(message, key) {\n        var self;\n        return _regeneratorRuntime.async(function () {\n          function onetimeauth$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (!Buffer.isBuffer(message)) {\n                  message = Buffer.from(message);\n                }\n                self = new Poly1305(key);\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(self.update(message));\n              case 4:\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(self.finish());\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return onetimeauth$;\n        }(), null, null, null, Promise);\n      }\n      return onetimeauth;\n    }()\n    /**\r\n     * @param {Buffer} message\r\n     * @param {Buffer} key\r\n     * @param {Buffer} tag\r\n     * @return {Promise<boolean>}\r\n     */\n    ;\n    Poly1305.onetimeauth_verify = function () {\n      function onetimeauth_verify(message, key, tag) {\n        var self, calc;\n        return _regeneratorRuntime.async(function () {\n          function onetimeauth_verify$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!Buffer.isBuffer(message)) {\n                  message = Buffer.from(message);\n                }\n                self = new Poly1305(key);\n                _context2.next = 4;\n                return _regeneratorRuntime.awrap(self.update(message));\n              case 4:\n                _context2.next = 6;\n                return _regeneratorRuntime.awrap(self.finish());\n              case 6:\n                calc = _context2.sent;\n                return _context2.abrupt(\"return\", crypto.timingSafeEqual(calc, tag));\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n          return onetimeauth_verify$;\n        }(), null, null, null, Promise);\n      }\n      return onetimeauth_verify;\n    }();\n    var _proto = Poly1305.prototype;\n    _proto.clone = function () {\n      function clone() {\n        var clone = new Poly1305();\n        this.buffer.copy(clone.buffer, 0, 0, 16);\n        clone.r = this.r;\n        for (var i = 0; i < 5; i++) {\n          clone.h[i] = this.h[i];\n        }\n        for (var _i = 0; _i < 4; _i++) {\n          clone.pad[_i] = this.pad[_i];\n        }\n        clone.leftover = this.leftover;\n        clone.final = this.final;\n        return clone;\n      }\n      return clone;\n    }()\n    /**\r\n     *\r\n     * @param {Buffer} message\r\n     * @param {number} bytes\r\n     * @return {Promise<void>}\r\n     */\n    ;\n    _proto.blocks = function () {\n      function blocks(message, bytes) {\n        var hibit, _this$r, r0, r1, r2, r3, r4, s1, s2, s3, s4, h0, h1, h2, h3, h4, offset, c, d0, d1, d2, d3, d4;\n        return _regeneratorRuntime.async(function () {\n          function blocks$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(message.length < 16)) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw new Error('Out of range exception');\n              case 2:\n                hibit = this.final ? 0 : 1 << 24;\n                _this$r = _slicedToArray(this.r, 5), r0 = _this$r[0], r1 = _this$r[1], r2 = _this$r[2], r3 = _this$r[3], r4 = _this$r[4];\n                s1 = r1 * 5;\n                s2 = r2 * 5;\n                s3 = r3 * 5;\n                s4 = r4 * 5;\n                h0 = BigInteger(this.h[0]);\n                h1 = BigInteger(this.h[1]);\n                h2 = BigInteger(this.h[2]);\n                h3 = BigInteger(this.h[3]);\n                h4 = BigInteger(this.h[4]);\n                offset = 0;\n                while (bytes >= BLOCK_SIZE) {\n                  /* h += m[i] */\n                  h0 = h0.add(Util.load32_le(message.slice(offset, offset + 4)) & 0x03ffffff);\n                  h1 = h1.add(Util.load32_le(message.slice(offset + 3, offset + 7)) >>> 2 & 0x03ffffff);\n                  h2 = h2.add(Util.load32_le(message.slice(offset + 6, offset + 10)) >>> 4 & 0x03ffffff);\n                  h3 = h3.add(Util.load32_le(message.slice(offset + 9, offset + 13)) >>> 6 & 0x03ffffff);\n                  h4 = h4.add(Util.load32_le(message.slice(offset + 12, offset + 16)) >>> 8 | hibit);\n\n                  /* h *= r */\n                  // d0 = ((h0 * r0) + (s4 * h1) + (s3 * h2) + (s2 * h3) + (s1 * h4));\n                  d0 = BigInteger(h0.times(BigInteger(r0))).plus(BigInteger(s4).times(h1)).plus(BigInteger(s3).times(h2)).plus(BigInteger(s2).times(h3)).plus(BigInteger(s1).times(h4));\n\n                  // d1 = ((h0 * r1) + (h1 * r0) + (s4 * h2) + (s3 * h3) + (s2 * h4));\n                  d1 = BigInteger(h0.times(BigInteger(r1))).plus(h1.times(BigInteger(r0))).plus(BigInteger(s4).times(h2)).plus(BigInteger(s3).times(h3)).plus(BigInteger(s2).times(h4));\n\n                  // d2 = ((h0 * r2) + (h1 * r1) + (h2 * r0) + (s4 * h3) + (s3 * h4));\n                  d2 = BigInteger(h0.times(BigInteger(r2))).plus(h1.times(BigInteger(r1))).plus(h2.times(BigInteger(r0))).plus(BigInteger(s4).times(h3)).plus(BigInteger(s3).times(h4));\n\n                  // d3 = ((h0 * r3) + (h1 * r2) + (h2 * r1) + (h3 * r0) + (s4 * h4));\n                  d3 = BigInteger(h0.times(BigInteger(r3))).plus(h1.times(BigInteger(r2))).plus(h2.times(BigInteger(r1))).plus(h3.times(BigInteger(r0))).plus(BigInteger(s4).times(h4));\n                  // d4 = ((h0 * r4) + (h1 * r3) + (h2 * r2) + (h3 * r1) + (h4 * r0));\n                  d4 = BigInteger(h0.times(BigInteger(r4))).plus(h1.times(BigInteger(r3))).plus(h2.times(BigInteger(r2))).plus(h3.times(BigInteger(r1))).plus(h4.times(BigInteger(r0)));\n\n                  /* (partial) h %= p */\n                  c = d0.shiftRight(26);\n                  h0 = d0.and(0x3ffffff);\n                  d1 = d1.add(c);\n                  c = d1.shiftRight(26);\n                  h1 = d1.and(0x3ffffff);\n                  d2 = d2.add(c);\n                  c = d2.shiftRight(26);\n                  h2 = d2.and(0x3ffffff);\n                  d3 = d3.add(c);\n                  c = d3.shiftRight(26);\n                  h3 = d3.and(0x3ffffff);\n                  d4 = d4.add(c);\n                  c = d4.shiftRight(26);\n                  h4 = d4.and(0x3ffffff);\n                  h0 = h0.add(c.multiply(5).toJSNumber());\n                  c = h0.shiftRight(26);\n                  h0 = h0.and(0x3ffffff);\n                  h1 = h1.add(c);\n                  offset += BLOCK_SIZE;\n                  bytes -= BLOCK_SIZE;\n                }\n                this.h[0] = h0.toJSNumber() >>> 0;\n                this.h[1] = h1.toJSNumber() >>> 0;\n                this.h[2] = h2.toJSNumber() >>> 0;\n                this.h[3] = h3.toJSNumber() >>> 0;\n                this.h[4] = h4.toJSNumber() >>> 0;\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n          return blocks$;\n        }(), null, this, null, Promise);\n      }\n      return blocks;\n    }()\n    /**\r\n     *\r\n     * @param {Buffer} message\r\n     * @return {Promise<Poly1305>}\r\n     */\n    ;\n    _proto.update = function () {\n      function update(message) {\n        var want, bytes;\n        return _regeneratorRuntime.async(function () {\n          function update$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                bytes = message.length;\n                if (!(this.leftover > 0)) {\n                  _context4.next = 13;\n                  break;\n                }\n                want = BLOCK_SIZE - this.leftover;\n                if (want > bytes) {\n                  want = bytes;\n                }\n                message.slice(0, want).copy(this.buffer, this.leftover, 0);\n                this.leftover += want;\n                if (!(this.leftover < BLOCK_SIZE)) {\n                  _context4.next = 8;\n                  break;\n                }\n                return _context4.abrupt(\"return\", this);\n              case 8:\n                _context4.next = 10;\n                return _regeneratorRuntime.awrap(this.blocks(this.buffer, BLOCK_SIZE));\n              case 10:\n                this.leftover -= BLOCK_SIZE;\n                bytes -= want;\n                message = message.slice(want);\n              case 13:\n                if (!(bytes >= BLOCK_SIZE)) {\n                  _context4.next = 20;\n                  break;\n                }\n                want = bytes & ~(BLOCK_SIZE - 1);\n                if (!(want >= BLOCK_SIZE)) {\n                  _context4.next = 20;\n                  break;\n                }\n                _context4.next = 18;\n                return _regeneratorRuntime.awrap(this.blocks(message.slice(0, want), want));\n              case 18:\n                message = message.slice(want);\n                bytes = message.length;\n              case 20:\n                /* store leftover */\n                if (bytes > 0) {\n                  message.slice(0, bytes).copy(this.buffer, this.leftover, 0);\n                  this.leftover += bytes;\n                }\n                return _context4.abrupt(\"return\", this);\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n          return update$;\n        }(), null, this, null, Promise);\n      }\n      return update;\n    }()\n    /**\r\n     * @return {Promise<Buffer>}\r\n     */\n    ;\n    _proto.finish = function () {\n      function finish() {\n        var c, g0, g1, g2, g3, g4, h0, h1, h2, h3, h4, mask, i, _Util$add_overflow, _Util$add_overflow2, _Util$add_overflow3, _Util$add_overflow4, _Util$add_overflow5, _Util$add_overflow6, _Util$add_overflow7, _Util$add_overflow8;\n        return _regeneratorRuntime.async(function () {\n          function finish$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.leftover) {\n                  _context5.next = 7;\n                  break;\n                }\n                i = this.leftover;\n                this.buffer[i++] = 1;\n                for (; i < BLOCK_SIZE; i++) {\n                  this.buffer[i] = 0;\n                }\n                this.final = true;\n                _context5.next = 7;\n                return _regeneratorRuntime.awrap(this.blocks(this.buffer, BLOCK_SIZE));\n              case 7:\n                h0 = this.h[0];\n                h1 = this.h[1];\n                h2 = this.h[2];\n                h3 = this.h[3];\n                h4 = this.h[4];\n                c = h1 >>> 26;\n                h1 &= 0x3ffffff;\n                h2 += c;\n                c = h2 >>> 26;\n                h2 &= 0x3ffffff;\n                h3 += c;\n                c = h3 >>> 26;\n                h3 &= 0x3ffffff;\n                h4 += c;\n                c = h4 >>> 26;\n                h4 &= 0x3ffffff;\n                h0 += c * 5;\n                c = h0 >>> 26;\n                h0 &= 0x3ffffff;\n                h1 += c;\n\n                /* compute h + -p */\n                g0 = h0 + 5;\n                c = g0 >>> 26;\n                g0 &= 0x3ffffff;\n                g1 = h1 + c;\n                c = g1 >>> 26;\n                g1 &= 0x3ffffff;\n                g2 = h2 + c;\n                c = g2 >>> 26;\n                g2 &= 0x3ffffff;\n                g3 = h2 + c;\n                c = g3 >>> 26;\n                g3 &= 0x3ffffff;\n                g4 = h4 + c - (1 << 26) >>> 0;\n\n                /* select h if h < p, or h + -p if h >= p */\n                mask = (g4 >>> 31) - 1;\n                g0 &= mask;\n                g1 &= mask;\n                g2 &= mask;\n                g3 &= mask;\n                g4 &= mask;\n                mask = ~mask >>> 0;\n                h0 = h0 & mask | g0;\n                h1 = h1 & mask | g1;\n                h2 = h2 & mask | g2;\n                h3 = h3 & mask | g3;\n                h4 = h4 & mask | g4;\n\n                /* h = h % (2^128) */\n                h0 = (h0 | h1 << 26) >>> 0;\n                h1 = (h1 >>> 6 | h2 << 20) >>> 0;\n                h2 = (h2 >>> 12 | h3 << 14) >>> 0;\n                h3 = (h3 >>> 18 | h4 << 8) >>> 0;\n                _Util$add_overflow = Util.add_overflow(h0, this.pad[0]);\n                _Util$add_overflow2 = _slicedToArray(_Util$add_overflow, 2);\n                h0 = _Util$add_overflow2[0];\n                c = _Util$add_overflow2[1];\n                _Util$add_overflow3 = Util.add_overflow(h1, this.pad[1], c);\n                _Util$add_overflow4 = _slicedToArray(_Util$add_overflow3, 2);\n                h1 = _Util$add_overflow4[0];\n                c = _Util$add_overflow4[1];\n                _Util$add_overflow5 = Util.add_overflow(h2, this.pad[2], c);\n                _Util$add_overflow6 = _slicedToArray(_Util$add_overflow5, 2);\n                h2 = _Util$add_overflow6[0];\n                c = _Util$add_overflow6[1];\n                _Util$add_overflow7 = Util.add_overflow(h3, this.pad[3], c);\n                _Util$add_overflow8 = _slicedToArray(_Util$add_overflow7, 2);\n                h3 = _Util$add_overflow8[0];\n                c = _Util$add_overflow8[1];\n                return _context5.abrupt(\"return\", Buffer.concat([Util.store32_le(h0 >>> 0), Util.store32_le(h1 >>> 0), Util.store32_le(h2 >>> 0), Util.store32_le(h3 >>> 0)]));\n              case 73:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n          return finish$;\n        }(), null, this, null, Promise);\n      }\n      return finish;\n    }();\n    return Poly1305;\n  }();\n}.call(this, module);","map":{"version":3,"names":["module1","_slicedToArray","link","default","v","_regeneratorRuntime","BigInteger","require","crypto","Util","BLOCK_SIZE","module","exports","Poly1305","key","buffer","Buffer","alloc","h","Uint32Array","r","pad","leftover","final","isBuffer","TypeError","length","Error","load32_le","slice","onetimeauth","message","self","async","onetimeauth$","_context","prev","next","from","awrap","update","finish","abrupt","sent","stop","Promise","onetimeauth_verify","tag","calc","onetimeauth_verify$","_context2","timingSafeEqual","_proto","prototype","clone","copy","i","blocks","bytes","hibit","_this$r","r0","r1","r2","r3","r4","s1","s2","s3","s4","h0","h1","h2","h3","h4","offset","c","d0","d1","d2","d3","d4","blocks$","_context3","add","times","plus","shiftRight","and","multiply","toJSNumber","want","update$","_context4","g0","g1","g2","g3","g4","mask","_Util$add_overflow","_Util$add_overflow2","_Util$add_overflow3","_Util$add_overflow4","_Util$add_overflow5","_Util$add_overflow6","_Util$add_overflow7","_Util$add_overflow8","finish$","_context5","add_overflow","concat","store32_le","call"],"sources":["imports/client/poly1305-js/lib/poly1305.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst BigInteger = require('big-integer');\r\nconst crypto = require('crypto');\r\nconst Util = require('./util');\r\n\r\nconst BLOCK_SIZE = 16;\r\n\r\nmodule.exports = class Poly1305\r\n{\r\n    /**\r\n     * @param {Buffer} message\r\n     * @param {Buffer} key\r\n     * @return {Promise<Buffer>}\r\n     */\r\n    static async onetimeauth(message, key)\r\n    {\r\n        if (!Buffer.isBuffer(message)) {\r\n            message = Buffer.from(message);\r\n        }\r\n        let self = new Poly1305(key);\r\n        await self.update(message);\r\n        return await self.finish();\r\n    }\r\n\r\n    /**\r\n     * @param {Buffer} message\r\n     * @param {Buffer} key\r\n     * @param {Buffer} tag\r\n     * @return {Promise<boolean>}\r\n     */\r\n    static async onetimeauth_verify(message, key, tag)\r\n    {\r\n        if (!Buffer.isBuffer(message)) {\r\n            message = Buffer.from(message);\r\n        }\r\n        let self = new Poly1305(key);\r\n        await self.update(message);\r\n        let calc = await self.finish();\r\n        return crypto.timingSafeEqual(calc, tag);\r\n    }\r\n\r\n    /**\r\n     * @param {Buffer} key\r\n     */\r\n    constructor(key)\r\n    {\r\n        if (typeof (key) === 'undefined') {\r\n            this.buffer = Buffer.alloc(16, 0);\r\n            this.h = new Uint32Array(5);\r\n            this.r = [0,0,0,0,0];\r\n            this.pad = [0,0,0,0];\r\n            this.leftover = 0;\r\n            this.final = false;\r\n            return;\r\n        }\r\n        if (!Buffer.isBuffer(key)) {\r\n            throw new TypeError(\"Poly1305 key must be a Buffer (argument 1)\");\r\n        }\r\n        if (key.length !== 32) {\r\n            throw new Error(\"Poly1305 requires a 32-byte key\");\r\n        }\r\n        this.buffer = Buffer.alloc(16, 0);\r\n\r\n        this.r = [\r\n            Util.load32_le(key.slice(0, 4))           & 0x03ffffff,\r\n            (Util.load32_le(key.slice(3, 7)) >>> 2)   & 0x03ffff03,\r\n            (Util.load32_le(key.slice(6, 10)) >>> 4)  & 0x03ffc0ff,\r\n            (Util.load32_le(key.slice(9, 13)) >>> 6)  & 0x03f03fff,\r\n            (Util.load32_le(key.slice(12, 16)) >>> 8) & 0x000fffff\r\n        ];\r\n        this.h = new Uint32Array(5);\r\n        this.pad = [\r\n            Util.load32_le(key.slice(16, 20)),\r\n            Util.load32_le(key.slice(20, 24)),\r\n            Util.load32_le(key.slice(24, 28)),\r\n            Util.load32_le(key.slice(28, 32))\r\n        ];\r\n\r\n        this.leftover = 0;\r\n        this.final = false;\r\n    }\r\n\r\n    /**\r\n     * Inspired by PHP's hash_copy()\r\n     *\r\n     * @return {Poly1305}\r\n     */\r\n    clone()\r\n    {\r\n        let clone = new Poly1305();\r\n        this.buffer.copy(clone.buffer, 0, 0, 16);\r\n        clone.r = this.r;\r\n        for (let i = 0; i < 5; i++) {\r\n            clone.h[i] = this.h[i];\r\n        }\r\n        for (let i = 0; i < 4; i++) {\r\n            clone.pad[i] = this.pad[i];\r\n        }\r\n        clone.leftover = this.leftover;\r\n        clone.final = this.final;\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Buffer} message\r\n     * @param {number} bytes\r\n     * @return {Promise<void>}\r\n     */\r\n    async blocks(message, bytes)\r\n    {\r\n        if (message.length < 16) {\r\n            throw new Error('Out of range exception');\r\n        }\r\n\r\n        let hibit = this.final ? 0 : 1 << 24;\r\n        let [r0, r1, r2, r3, r4] = this.r;\r\n\r\n        let s1 = r1 * 5;\r\n        let s2 = r2 * 5;\r\n        let s3 = r3 * 5;\r\n        let s4 = r4 * 5;\r\n\r\n        let h0 = BigInteger(this.h[0]);\r\n        let h1 = BigInteger(this.h[1]);\r\n        let h2 = BigInteger(this.h[2]);\r\n        let h3 = BigInteger(this.h[3]);\r\n        let h4 = BigInteger(this.h[4]);\r\n\r\n        let offset = 0;\r\n        let c, d0, d1, d2, d3, d4;\r\n        while (bytes >= BLOCK_SIZE) {\r\n            /* h += m[i] */\r\n            h0 = h0.add((Util.load32_le(message.slice(offset,     offset + 4)))        & 0x03ffffff);\r\n            h1 = h1.add((Util.load32_le(message.slice(offset + 3, offset + 7)) >>> 2)  & 0x03ffffff);\r\n            h2 = h2.add((Util.load32_le(message.slice(offset + 6, offset + 10)) >>> 4) & 0x03ffffff);\r\n            h3 = h3.add((Util.load32_le(message.slice(offset + 9, offset + 13)) >>> 6) & 0x03ffffff);\r\n            h4 = h4.add((Util.load32_le(message.slice(offset + 12, offset + 16)) >>> 8) | hibit);\r\n\r\n            /* h *= r */\r\n            // d0 = ((h0 * r0) + (s4 * h1) + (s3 * h2) + (s2 * h3) + (s1 * h4));\r\n            d0 = BigInteger(h0.times(BigInteger(r0)))\r\n                .plus(BigInteger(s4).times(h1))\r\n                .plus(BigInteger(s3).times(h2))\r\n                .plus(BigInteger(s2).times(h3))\r\n                .plus(BigInteger(s1).times(h4));\r\n\r\n            // d1 = ((h0 * r1) + (h1 * r0) + (s4 * h2) + (s3 * h3) + (s2 * h4));\r\n            d1 = BigInteger(h0.times(BigInteger(r1)))\r\n                .plus(h1.times(BigInteger(r0)))\r\n                .plus(BigInteger(s4).times(h2))\r\n                .plus(BigInteger(s3).times(h3))\r\n                .plus(BigInteger(s2).times(h4));\r\n\r\n            // d2 = ((h0 * r2) + (h1 * r1) + (h2 * r0) + (s4 * h3) + (s3 * h4));\r\n            d2 = BigInteger(h0.times(BigInteger(r2)))\r\n                .plus(h1.times(BigInteger(r1)))\r\n                .plus(h2.times(BigInteger(r0)))\r\n                .plus(BigInteger(s4).times(h3))\r\n                .plus(BigInteger(s3).times(h4));\r\n\r\n            // d3 = ((h0 * r3) + (h1 * r2) + (h2 * r1) + (h3 * r0) + (s4 * h4));\r\n            d3 = BigInteger(h0.times(BigInteger(r3)))\r\n                .plus(h1.times(BigInteger(r2)))\r\n                .plus(h2.times(BigInteger(r1)))\r\n                .plus(h3.times(BigInteger(r0)))\r\n                .plus(BigInteger(s4).times(h4));\r\n            // d4 = ((h0 * r4) + (h1 * r3) + (h2 * r2) + (h3 * r1) + (h4 * r0));\r\n            d4 = BigInteger(h0.times(BigInteger(r4)))\r\n                .plus(h1.times(BigInteger(r3)))\r\n                .plus(h2.times(BigInteger(r2)))\r\n                .plus(h3.times(BigInteger(r1)))\r\n                .plus(h4.times(BigInteger(r0)));\r\n\r\n            /* (partial) h %= p */\r\n            c = d0.shiftRight(26);\r\n            h0 = d0.and(0x3ffffff);\r\n            d1 = d1.add(c);\r\n            c = d1.shiftRight(26);\r\n            h1 = d1.and(0x3ffffff);\r\n            d2 = d2.add(c);\r\n            c = d2.shiftRight(26);\r\n            h2 = d2.and(0x3ffffff);\r\n            d3 = d3.add(c);\r\n            c = d3.shiftRight(26);\r\n            h3 = d3.and(0x3ffffff);\r\n            d4 = d4.add(c);\r\n            c = d4.shiftRight(26);\r\n            h4 = d4.and(0x3ffffff);\r\n            h0 = h0.add(c.multiply(5).toJSNumber());\r\n\r\n            c = h0.shiftRight(26);\r\n            h0 = h0.and(0x3ffffff);\r\n            h1 = h1.add(c);\r\n\r\n            offset += BLOCK_SIZE;\r\n            bytes -= BLOCK_SIZE;\r\n        }\r\n        this.h[0] = h0.toJSNumber() >>> 0;\r\n        this.h[1] = h1.toJSNumber() >>> 0;\r\n        this.h[2] = h2.toJSNumber() >>> 0;\r\n        this.h[3] = h3.toJSNumber() >>> 0;\r\n        this.h[4] = h4.toJSNumber() >>> 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Buffer} message\r\n     * @return {Promise<Poly1305>}\r\n     */\r\n    async update(message)\r\n    {\r\n        let want;\r\n        let bytes = message.length;\r\n\r\n        if (this.leftover > 0) {\r\n            want = BLOCK_SIZE - this.leftover;\r\n            if (want > bytes) {\r\n                want = bytes;\r\n            }\r\n            message.slice(0, want).copy(this.buffer, this.leftover, 0);\r\n            this.leftover += want;\r\n            if (this.leftover < BLOCK_SIZE) {\r\n                // We still don't have enough to run this.blocks()\r\n                return this;\r\n            }\r\n            await this.blocks(this.buffer, BLOCK_SIZE);\r\n            this.leftover -= BLOCK_SIZE;\r\n            bytes -= want;\r\n            message = message.slice(want);\r\n        }\r\n\r\n        /* process full blocks */\r\n        if (bytes >= BLOCK_SIZE) {\r\n            want = bytes & ~(BLOCK_SIZE - 1);\r\n            if (want >= BLOCK_SIZE) {\r\n                await this.blocks(message.slice(0, want), want);\r\n                message = message.slice(want);\r\n                bytes = message.length;\r\n            }\r\n        }\r\n\r\n        /* store leftover */\r\n        if (bytes > 0) {\r\n            message.slice(0, bytes).copy(this.buffer, this.leftover, 0);\r\n            this.leftover += bytes;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @return {Promise<Buffer>}\r\n     */\r\n    async finish()\r\n    {\r\n        let c, g0, g1, g2, g3, g4, h0, h1, h2, h3, h4, mask;\r\n        if (this.leftover) {\r\n            let i = this.leftover;\r\n            this.buffer[i++] = 1;\r\n            for (; i < BLOCK_SIZE; i++) {\r\n                this.buffer[i] = 0;\r\n            }\r\n            this.final = true;\r\n            await this.blocks(this.buffer, BLOCK_SIZE);\r\n        }\r\n\r\n        h0 = this.h[0];\r\n        h1 = this.h[1];\r\n        h2 = this.h[2];\r\n        h3 = this.h[3];\r\n        h4 = this.h[4];\r\n\r\n        c = h1 >>> 26;\r\n        h1 &= 0x3ffffff;\r\n        h2 += c;\r\n        c = h2 >>> 26;\r\n        h2 &= 0x3ffffff;\r\n        h3 += c;\r\n        c = h3 >>> 26;\r\n        h3 &= 0x3ffffff;\r\n        h4 += c;\r\n        c = h4 >>> 26;\r\n        h4 &= 0x3ffffff;\r\n        h0 += c * 5;\r\n        c = h0 >>> 26;\r\n        h0 &= 0x3ffffff;\r\n        h1 += c;\r\n\r\n        /* compute h + -p */\r\n        g0 = h0 + 5;\r\n        c = g0 >>> 26;\r\n        g0 &= 0x3ffffff;\r\n\r\n        g1 = h1 + c;\r\n        c = g1 >>> 26;\r\n        g1 &= 0x3ffffff;\r\n\r\n        g2 = h2 + c;\r\n        c = g2 >>> 26;\r\n        g2 &= 0x3ffffff;\r\n\r\n        g3 = h2 + c;\r\n        c = g3 >>> 26;\r\n        g3 &= 0x3ffffff;\r\n\r\n        g4 = (h4 +c - (1 << 26)) >>> 0;\r\n\r\n        /* select h if h < p, or h + -p if h >= p */\r\n        mask = (g4 >>> 31) - 1;\r\n\r\n        g0 &= mask;\r\n        g1 &= mask;\r\n        g2 &= mask;\r\n        g3 &= mask;\r\n        g4 &= mask;\r\n\r\n        mask = ~mask >>> 0;\r\n        h0 = (h0 & mask) | g0;\r\n        h1 = (h1 & mask) | g1;\r\n        h2 = (h2 & mask) | g2;\r\n        h3 = (h3 & mask) | g3;\r\n        h4 = (h4 & mask) | g4;\r\n\r\n        /* h = h % (2^128) */\r\n        h0 = ((h0) | (h1 << 26)) >>> 0;\r\n        h1 = ((h1 >>>  6) | (h2 << 20)) >>> 0;\r\n        h2 = ((h2 >>> 12) | (h3 << 14)) >>> 0;\r\n        h3 = ((h3 >>> 18) | (h4 <<  8)) >>> 0;\r\n\r\n        [h0, c] = Util.add_overflow(h0, this.pad[0]);\r\n        [h1, c] = Util.add_overflow(h1, this.pad[1], c);\r\n        [h2, c] = Util.add_overflow(h2, this.pad[2], c);\r\n        [h3, c] = Util.add_overflow(h3, this.pad[3], c);\r\n\r\n        return Buffer.concat([\r\n            Util.store32_le(h0 >>> 0),\r\n            Util.store32_le(h1 >>> 0),\r\n            Util.store32_le(h2 >>> 0),\r\n            Util.store32_le(h3 >>> 0)\r\n        ]);\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"be9db6dda3d37dc6151aa63cc1244a55723b5a20"}
