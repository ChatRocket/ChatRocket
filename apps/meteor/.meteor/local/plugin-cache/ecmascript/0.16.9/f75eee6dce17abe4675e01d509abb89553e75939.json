{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/code.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/markdown/lib/parser/original/code.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/code.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/code.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/markdown/lib/parser/original/code.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      code: () => code\n    });\n    let unescapeHTML;\n    module.link(\"@rocket.chat/string-helpers\", {\n      unescapeHTML(v) {\n        unescapeHTML = v;\n      }\n    }, 0);\n    let addAsToken;\n    module.link(\"./token\", {\n      addAsToken(v) {\n        addAsToken = v;\n      }\n    }, 1);\n    let hljs, register;\n    module.link(\"../../hljs\", {\n      default(v) {\n        hljs = v;\n      },\n      register(v) {\n        register = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const inlinecode = message => {\n      // Support `text`\n      message.html = message.html.replace(/\\`([^`\\r\\n]+)\\`([<_*~]|\\B|\\b|$)/gm, (match, p1, p2) => addAsToken(message, \"<span class=\\\"copyonly\\\">`</span><span><code class=\\\"code-colors inline\\\">\".concat(p1, \"</code></span><span class=\\\"copyonly\\\">`</span>\").concat(p2), 'inlinecode', {\n        noHtml: match\n      }));\n    };\n    const codeblocks = message => {\n      // Count occurencies of ```\n      const count = (message.html.match(/```/gm) || []).length;\n      if (count) {\n        // Check if we need to add a final ```\n        if (count % 2 > 0) {\n          message.html = \"\".concat(message.html, \"\\n```\");\n          message.msg = \"\".concat(message.msg, \"\\n```\");\n        }\n\n        // Separate text in code blocks and non code blocks\n        const msgParts = message.html.split(/(^.*)(```(?:[a-zA-Z]+)?(?:(?:.|\\r|\\n)*?)```)(.*\\n?)$/gm);\n        for (let index = 0; index < msgParts.length; index++) {\n          // Verify if this part is code\n          const part = msgParts[index];\n          const codeMatch = part.match(/^```[\\r\\n]*(.*[\\r\\n\\ ]?)[\\r\\n]*([\\s\\S]*?)```+?$/);\n          if (codeMatch) {\n            // Process highlight if this part is code\n            const singleLine = codeMatch[0].indexOf('\\n') === -1;\n            const lang = !singleLine && Array.from(hljs.listLanguages()).includes(codeMatch[1].trim()) ? codeMatch[1].trim() : '';\n            const emptyLanguage = lang === '' ? unescapeHTML(codeMatch[1] + codeMatch[2]) : unescapeHTML(codeMatch[2]);\n            const code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n            const result = (() => {\n              if (lang) {\n                try {\n                  register(lang);\n                  return hljs.highlight(lang, code);\n                } catch (error) {\n                  console.error(error);\n                }\n              }\n              return hljs.highlightAuto(lang + code);\n            })();\n            const token = addAsToken(message, \"<pre><code class='code-colors hljs \".concat(result.language, \"'><span class='copyonly'>```<br></span>\").concat(result.value, \"<span class='copyonly'><br>```</span></code></pre>\"), 'code', {\n              noHtml: codeMatch[0],\n              highlight: true\n            });\n            msgParts[index] = token;\n          } else {\n            msgParts[index] = part;\n          }\n        }\n\n        // Re-mount message\n        message.html = msgParts.join('');\n      }\n    };\n    const code = message => {\n      var _message$html;\n      if ((_message$html = message.html) !== null && _message$html !== void 0 && _message$html.trim()) {\n        codeblocks(message);\n        inlinecode(message);\n      }\n      return message;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","code","unescapeHTML","link","v","addAsToken","hljs","register","default","__reifyWaitForDeps__","inlinecode","message","html","replace","match","p1","p2","concat","noHtml","codeblocks","count","length","msg","msgParts","split","index","part","codeMatch","singleLine","indexOf","lang","Array","from","listLanguages","includes","trim","emptyLanguage","result","highlight","error","console","highlightAuto","token","language","value","join","_message$html","__reify_async_result__","_reifyError","self","async"],"sources":["app/markdown/lib/parser/original/code.js"],"sourcesContent":["/*\n * code() is a named function that will parse `inline code` and ```codeblock``` syntaxes\n * @param {Object} message - The message object\n */\nimport { unescapeHTML } from '@rocket.chat/string-helpers';\n\nimport { addAsToken } from './token';\nimport hljs, { register } from '../../hljs';\n\nconst inlinecode = (message) => {\n\t// Support `text`\n\tmessage.html = message.html.replace(/\\`([^`\\r\\n]+)\\`([<_*~]|\\B|\\b|$)/gm, (match, p1, p2) =>\n\t\taddAsToken(\n\t\t\tmessage,\n\t\t\t`<span class=\\\"copyonly\\\">\\`</span><span><code class=\\\"code-colors inline\\\">${p1}</code></span><span class=\\\"copyonly\\\">\\`</span>${p2}`,\n\t\t\t'inlinecode',\n\t\t\t{ noHtml: match },\n\t\t),\n\t);\n};\n\nconst codeblocks = (message) => {\n\t// Count occurencies of ```\n\tconst count = (message.html.match(/```/gm) || []).length;\n\n\tif (count) {\n\t\t// Check if we need to add a final ```\n\t\tif (count % 2 > 0) {\n\t\t\tmessage.html = `${message.html}\\n\\`\\`\\``;\n\t\t\tmessage.msg = `${message.msg}\\n\\`\\`\\``;\n\t\t}\n\n\t\t// Separate text in code blocks and non code blocks\n\t\tconst msgParts = message.html.split(/(^.*)(```(?:[a-zA-Z]+)?(?:(?:.|\\r|\\n)*?)```)(.*\\n?)$/gm);\n\n\t\tfor (let index = 0; index < msgParts.length; index++) {\n\t\t\t// Verify if this part is code\n\t\t\tconst part = msgParts[index];\n\t\t\tconst codeMatch = part.match(/^```[\\r\\n]*(.*[\\r\\n\\ ]?)[\\r\\n]*([\\s\\S]*?)```+?$/);\n\n\t\t\tif (codeMatch) {\n\t\t\t\t// Process highlight if this part is code\n\t\t\t\tconst singleLine = codeMatch[0].indexOf('\\n') === -1;\n\t\t\t\tconst lang = !singleLine && Array.from(hljs.listLanguages()).includes(codeMatch[1].trim()) ? codeMatch[1].trim() : '';\n\t\t\t\tconst emptyLanguage = lang === '' ? unescapeHTML(codeMatch[1] + codeMatch[2]) : unescapeHTML(codeMatch[2]);\n\t\t\t\tconst code = singleLine ? unescapeHTML(codeMatch[1]) : emptyLanguage;\n\n\t\t\t\tconst result = (() => {\n\t\t\t\t\tif (lang) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tregister(lang);\n\t\t\t\t\t\t\treturn hljs.highlight(lang, code);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn hljs.highlightAuto(lang + code);\n\t\t\t\t})();\n\t\t\t\tconst token = addAsToken(\n\t\t\t\t\tmessage,\n\t\t\t\t\t`<pre><code class='code-colors hljs ${result.language}'><span class='copyonly'>\\`\\`\\`<br></span>${result.value}<span class='copyonly'><br>\\`\\`\\`</span></code></pre>`,\n\t\t\t\t\t'code',\n\t\t\t\t\t{\n\t\t\t\t\t\tnoHtml: codeMatch[0],\n\t\t\t\t\t\thighlight: true,\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tmsgParts[index] = token;\n\t\t\t} else {\n\t\t\t\tmsgParts[index] = part;\n\t\t\t}\n\t\t}\n\n\t\t// Re-mount message\n\t\tmessage.html = msgParts.join('');\n\t}\n};\n\nexport const code = (message) => {\n\tif (message.html?.trim()) {\n\t\tcodeblocks(message);\n\t\tinlinecode(message);\n\t}\n\n\treturn message;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"f75eee6dce17abe4675e01d509abb89553e75939"}
