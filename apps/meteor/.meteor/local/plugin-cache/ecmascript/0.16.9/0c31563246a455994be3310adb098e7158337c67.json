{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.js"}},"code":"const _excluded = [\"_id\"],\n  _excluded2 = [\"msg\", \"attachments\"];\nlet _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n}, 0);\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 1);\nlet _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n}, 2);\nmodule.export({\n  E2ERoom: () => E2ERoom\n});\nlet Base64;\nmodule.link(\"@rocket.chat/base64\", {\n  Base64(v) {\n    Base64 = v;\n  }\n}, 0);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n}, 1);\nlet EJSON;\nmodule.link(\"ejson\", {\n  default(v) {\n    EJSON = v;\n  }\n}, 2);\nlet RoomManager;\nmodule.link(\"../../../client/lib/RoomManager\", {\n  RoomManager(v) {\n    RoomManager = v;\n  }\n}, 3);\nlet roomCoordinator;\nmodule.link(\"../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n}, 4);\nlet RoomSettingsEnum;\nmodule.link(\"../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum(v) {\n    RoomSettingsEnum = v;\n  }\n}, 5);\nlet ChatRoom, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  ChatRoom(v) {\n    ChatRoom = v;\n  },\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n  Messages(v) {\n    Messages = v;\n  }\n}, 6);\nlet sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk(v) {\n    sdk = v;\n  }\n}, 7);\nlet t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t(v) {\n    t = v;\n  }\n}, 8);\nlet E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState(v) {\n    E2ERoomState = v;\n  }\n}, 9);\nlet toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer, encryptAESCTR, generateAESCTRKey, sha256HashFromArrayBuffer, createSha256HashFromText;\nmodule.link(\"./helper\", {\n  toString(v) {\n    toString = v;\n  },\n  toArrayBuffer(v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData(v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData(v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptRSA(v) {\n    encryptRSA = v;\n  },\n  encryptAES(v) {\n    encryptAES = v;\n  },\n  decryptRSA(v) {\n    decryptRSA = v;\n  },\n  decryptAES(v) {\n    decryptAES = v;\n  },\n  generateAESKey(v) {\n    generateAESKey = v;\n  },\n  exportJWKKey(v) {\n    exportJWKKey = v;\n  },\n  importAESKey(v) {\n    importAESKey = v;\n  },\n  importRSAKey(v) {\n    importRSAKey = v;\n  },\n  readFileAsArrayBuffer(v) {\n    readFileAsArrayBuffer = v;\n  },\n  encryptAESCTR(v) {\n    encryptAESCTR = v;\n  },\n  generateAESCTRKey(v) {\n    generateAESCTRKey = v;\n  },\n  sha256HashFromArrayBuffer(v) {\n    sha256HashFromArrayBuffer = v;\n  },\n  createSha256HashFromText(v) {\n    createSha256HashFromText = v;\n  }\n}, 10);\nlet log, logError;\nmodule.link(\"./logger\", {\n  log(v) {\n    log = v;\n  },\n  logError(v) {\n    logError = v;\n  }\n}, 11);\nlet e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e(v) {\n    e2e = v;\n  }\n}, 12);\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\nconst permitedMutations = {\n  [E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n  [E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n  [E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n  [E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n  [E2ERoomState.ESTABLISHING]: [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS, E2ERoomState.CREATING_KEYS]\n};\nconst filterMutation = (currentState, nextState) => {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n  return false;\n};\nclass E2ERoom extends Emitter {\n  constructor(userId, room) {\n    super();\n    this.state = undefined;\n    this[PAUSED] = undefined;\n    this.userId = userId;\n    this.roomId = room._id;\n    this.typeOfRoom = room.t;\n    this.roomKeyId = room.e2eKeyId;\n    this.once(E2ERoomState.READY, async () => {\n      await this.decryptOldRoomKeys();\n      return this.decryptPendingMessages();\n    });\n    this.once(E2ERoomState.READY, () => this.decryptSubscription());\n    this.on('STATE_CHANGED', prev => {\n      if (this.roomId === RoomManager.opened) {\n        this.log(\"[PREV: \".concat(prev, \"]\"), 'State CHANGED');\n      }\n    });\n    this.on('STATE_CHANGED', () => this.handshake());\n    this.setState(E2ERoomState.NOT_STARTED);\n  }\n  log() {\n    for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n      msg[_key] = arguments[_key];\n    }\n    log(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n  error() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n    logError(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n  hasSessionKey() {\n    return !!this.groupSessionKey;\n  }\n  getState() {\n    return this.state;\n  }\n  setState(requestedState) {\n    const currentState = this.state;\n    const nextState = filterMutation(currentState, requestedState);\n    if (!nextState) {\n      this.error(\"invalid state \".concat(currentState, \" -> \").concat(requestedState));\n      return;\n    }\n    this.state = nextState;\n    this.log(currentState, '->', nextState);\n    this.emit('STATE_CHANGED', currentState, nextState, this);\n    this.emit(nextState, this);\n  }\n  isReady() {\n    return this.state === E2ERoomState.READY;\n  }\n  isDisabled() {\n    return this.state === E2ERoomState.DISABLED;\n  }\n  enable() {\n    if (this.state === E2ERoomState.READY) {\n      return;\n    }\n    this.setState(E2ERoomState.READY);\n  }\n  disable() {\n    this.setState(E2ERoomState.DISABLED);\n  }\n  pause() {\n    this.log('PAUSED', this[PAUSED], '->', true);\n    this[PAUSED] = true;\n    this.emit('PAUSED', true);\n  }\n  resume() {\n    this.log('PAUSED', this[PAUSED], '->', false);\n    this[PAUSED] = false;\n    this.emit('PAUSED', false);\n  }\n  keyReceived() {\n    this.setState(E2ERoomState.KEYS_RECEIVED);\n  }\n  async shouldConvertSentMessages(message) {\n    if (!this.isReady() || this[PAUSED]) {\n      return false;\n    }\n    if (this[PAUSED] === undefined) {\n      return new Promise(resolve => {\n        this.once('PAUSED', resolve);\n      });\n    }\n    if (message.msg[0] === '/') {\n      return false;\n    }\n    return true;\n  }\n  shouldConvertReceivedMessages() {\n    return this.isReady();\n  }\n  isWaitingKeys() {\n    return this.state === E2ERoomState.WAITING_KEYS;\n  }\n  get keyID() {\n    return this[KEY_ID];\n  }\n  set keyID(keyID) {\n    this[KEY_ID] = keyID;\n  }\n  async decryptSubscription() {\n    var _subscription$lastMes;\n    const subscription = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    if (((_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.t) !== 'e2e') {\n      this.log('decryptSubscriptions nothing to do');\n      return;\n    }\n    const message = await this.decryptMessage(subscription.lastMessage);\n    Subscriptions.update({\n      _id: subscription._id\n    }, {\n      $set: {\n        lastMessage: message\n      }\n    });\n    this.log('decryptSubscriptions Done');\n  }\n  async decryptOldRoomKeys() {\n    const sub = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    if (!(sub !== null && sub !== void 0 && sub.oldRoomKeys) || (sub === null || sub === void 0 ? void 0 : sub.oldRoomKeys.length) === 0) {\n      this.log('decryptOldRoomKeys nothing to do');\n      return;\n    }\n    const keys = [];\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(sub.oldRoomKeys), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const key = _step.value;\n        {\n          try {\n            const k = await this.decryptSessionKey(key.E2EKey);\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: k\n            }));\n          } catch (e) {\n            this.error(\"Cannot decrypt old room key with id \".concat(key.e2eKeyId, \". This is likely because user private key changed or is missing. Skipping\"));\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: null\n            }));\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    this.oldKeys = keys;\n    this.log('decryptOldRoomKeys Done');\n  }\n  async exportOldRoomKeys(oldKeys) {\n    this.log('exportOldRoomKeys starting');\n    if (!oldKeys || oldKeys.length === 0) {\n      this.log('exportOldRoomKeys nothing to do');\n      return;\n    }\n    const keys = [];\n    var _iteratorAbruptCompletion2 = false;\n    var _didIteratorError2 = false;\n    var _iteratorError2;\n    try {\n      for (var _iterator2 = _asyncIterator(oldKeys), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n        const key = _step2.value;\n        {\n          try {\n            if (!key.E2EKey) {\n              continue;\n            }\n            const k = await this.exportSessionKey(key.E2EKey);\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: k\n            }));\n          } catch (e) {\n            this.error(\"Cannot decrypt old room key with id \".concat(key.e2eKeyId, \". This is likely because user private key changed or is missing. Skipping\"));\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n    this.log(\"exportOldRoomKeys Done: \".concat(keys.length, \" keys exported\"));\n    return keys;\n  }\n  async decryptPendingMessages() {\n    return Messages.find({\n      rid: this.roomId,\n      t: 'e2e',\n      e2e: 'pending'\n    }).forEach(async _ref => {\n      let {\n          _id\n        } = _ref,\n        msg = _objectWithoutProperties(_ref, _excluded);\n      Messages.update({\n        _id\n      }, await this.decryptMessage(msg));\n    });\n  }\n\n  // Initiates E2E Encryption\n  async handshake() {\n    if (!e2e.isReady()) {\n      return;\n    }\n    if (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n      return;\n    }\n    this.setState(E2ERoomState.ESTABLISHING);\n    try {\n      const groupKey = Subscriptions.findOne({\n        rid: this.roomId\n      }).E2EKey;\n      if (groupKey) {\n        await this.importGroupKey(groupKey);\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n    } catch (error) {\n      this.setState(E2ERoomState.ERROR);\n      this.error('Error fetching group key: ', error);\n      return;\n    }\n    try {\n      const room = ChatRoom.findOne({\n        _id: this.roomId\n      });\n      // Only room creator can set keys for room\n      if (!room.e2eKeyId && room.u._id === this.userId) {\n        this.setState(E2ERoomState.CREATING_KEYS);\n        await this.createGroupKey();\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n      this.setState(E2ERoomState.WAITING_KEYS);\n      this.log('Requesting room key');\n      sdk.publish('notify-room-users', [\"\".concat(this.roomId, \"/e2ekeyRequest\"), this.roomId, room.e2eKeyId]);\n    } catch (error) {\n      // this.error = error;\n      this.setState(E2ERoomState.ERROR);\n    }\n  }\n  isSupportedRoomType(type) {\n    return roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n  }\n  async decryptSessionKey(key) {\n    return importAESKey(JSON.parse(await this.exportSessionKey(key)));\n  }\n  async exportSessionKey(key) {\n    key = key.slice(12);\n    key = Base64.decode(key);\n    const decryptedKey = await decryptRSA(e2e.privateKey, key);\n    return toString(decryptedKey);\n  }\n  async importGroupKey(groupKey) {\n    this.log('Importing room key ->', this.roomId);\n    // Get existing group key\n    // const keyID = groupKey.slice(0, 12);\n    groupKey = groupKey.slice(12);\n    groupKey = Base64.decode(groupKey);\n\n    // Decrypt obtained encrypted session key\n    try {\n      const decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n      this.sessionKeyExportedString = toString(decryptedKey);\n    } catch (error) {\n      this.error('Error decrypting group key: ', error);\n      return false;\n    }\n\n    // When a new e2e room is created, it will be initialized without an e2e key id\n    // This will prevent new rooms from storing `undefined` as the keyid\n    if (!this.keyID) {\n      this.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n    }\n\n    // Import session key for use.\n    try {\n      const key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n      // Key has been obtained. E2E is now in session.\n      this.groupSessionKey = key;\n    } catch (error) {\n      this.error('Error importing group key: ', error);\n      return false;\n    }\n    return true;\n  }\n  async createNewGroupKey() {\n    this.groupSessionKey = await generateAESKey();\n    const sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n    this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n    this.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n  }\n  async createGroupKey() {\n    this.log('Creating room key');\n    try {\n      await this.createNewGroupKey();\n      await sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n      await sdk.rest.post('/v1/e2e.updateGroupKey', {\n        rid: this.roomId,\n        uid: this.userId,\n        key: await this.encryptGroupKeyForParticipant(e2e.publicKey)\n      });\n      await this.encryptKeyForOtherParticipants();\n    } catch (error) {\n      this.error('Error exporting group key: ', error);\n      throw error;\n    }\n  }\n  async resetRoomKey() {\n    this.log('Resetting room key');\n    if (!e2e.publicKey) {\n      this.error('Cannot reset room key. No public key found.');\n      return;\n    }\n    this.setState(E2ERoomState.CREATING_KEYS);\n    try {\n      await this.createNewGroupKey();\n      const e2eNewKeys = {\n        e2eKeyId: this.keyID,\n        e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey)\n      };\n      this.setState(E2ERoomState.READY);\n      this.log(\"Room key reset done for room \".concat(this.roomId));\n      return e2eNewKeys;\n    } catch (error) {\n      this.error('Error resetting group key: ', error);\n      throw error;\n    }\n  }\n  onRoomKeyReset(keyID) {\n    this.log(\"Room keyID was reset. New keyID: \".concat(keyID, \" Previous keyID: \").concat(this.keyID));\n    this.setState(E2ERoomState.WAITING_KEYS);\n    this.keyID = keyID;\n    this.groupSessionKey = undefined;\n    this.sessionKeyExportedString = undefined;\n    this.sessionKeyExported = undefined;\n    this.oldKeys = undefined;\n  }\n  async encryptKeyForOtherParticipants() {\n    // Encrypt generated session key for every user in room and publish to subscription model.\n    try {\n      const mySub = Subscriptions.findOne({\n        rid: this.roomId\n      });\n      const decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys);\n      const users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter(user => {\n        var _user$e2e;\n        return user === null || user === void 0 ? void 0 : (_user$e2e = user.e2e) === null || _user$e2e === void 0 ? void 0 : _user$e2e.public_key;\n      });\n      if (!users.length) {\n        return;\n      }\n      const usersSuggestedGroupKeys = {\n        [this.roomId]: []\n      };\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n      var _iteratorError3;\n      try {\n        for (var _iterator3 = _asyncIterator(users), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n          const user = _step3.value;\n          {\n            const encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e.public_key);\n            const oldKeys = await this.encryptOldKeysForParticipant(user.e2e.public_key, decryptedOldGroupKeys);\n            usersSuggestedGroupKeys[this.roomId].push(_objectSpread({\n              _id: user._id,\n              key: encryptedGroupKey\n            }, oldKeys && {\n              oldKeys\n            }));\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            await _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      await sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', {\n        usersSuggestedGroupKeys\n      });\n    } catch (error) {\n      return this.error('Error getting room users: ', error);\n    }\n  }\n  async encryptOldKeysForParticipant(public_key, oldRoomKeys) {\n    if (!oldRoomKeys || oldRoomKeys.length === 0) {\n      return;\n    }\n    let userKey;\n    try {\n      userKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n    } catch (error) {\n      return this.error('Error importing user key: ', error);\n    }\n    try {\n      const keys = [];\n      var _iteratorAbruptCompletion4 = false;\n      var _didIteratorError4 = false;\n      var _iteratorError4;\n      try {\n        for (var _iterator4 = _asyncIterator(oldRoomKeys), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n          const oldRoomKey = _step4.value;\n          {\n            if (!oldRoomKey.E2EKey) {\n              continue;\n            }\n            const encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n            const encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n            keys.push(_objectSpread(_objectSpread({}, oldRoomKey), {}, {\n              E2EKey: encryptedKeyToString\n            }));\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n            await _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n      return keys;\n    } catch (error) {\n      return this.error('Error encrypting user key: ', error);\n    }\n  }\n  async encryptGroupKeyForParticipant(public_key) {\n    let userKey;\n    try {\n      userKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n    } catch (error) {\n      return this.error('Error importing user key: ', error);\n    }\n    // const vector = crypto.getRandomValues(new Uint8Array(16));\n\n    // Encrypt session key for this user with his/her public key\n    try {\n      const encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n      const encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n      return encryptedUserKeyToString;\n    } catch (error) {\n      return this.error('Error encrypting user key: ', error);\n    }\n  }\n\n  // Encrypts files before upload. I/O is in arraybuffers.\n  async encryptFile(file) {\n    // if (!this.isSupportedRoomType(this.typeOfRoom)) {\n    // \treturn;\n    // }\n\n    const fileArrayBuffer = await readFileAsArrayBuffer(file);\n    const hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    const key = await generateAESCTRKey();\n    let result;\n    try {\n      result = await encryptAESCTR(vector, key, fileArrayBuffer);\n    } catch (error) {\n      console.log(error);\n      return this.error('Error encrypting group key: ', error);\n    }\n    const exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n    const fileName = await createSha256HashFromText(file.name);\n    const encryptedFile = new File([toArrayBuffer(result)], fileName);\n    return {\n      file: encryptedFile,\n      key: exportedKey,\n      iv: Base64.encode(vector),\n      type: file.type,\n      hash\n    };\n  }\n\n  // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n  async decryptFile(file, key, iv) {\n    const ivArray = Base64.decode(iv);\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', key, {\n      name: 'AES-CTR'\n    }, true, ['encrypt', 'decrypt']);\n    return window.crypto.subtle.decrypt({\n      name: 'AES-CTR',\n      counter: ivArray,\n      length: 64\n    }, cryptoKey, file);\n  }\n\n  // Encrypts messages\n  async encryptText(data) {\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    try {\n      const result = await encryptAES(vector, this.groupSessionKey, data);\n      return this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n    } catch (error) {\n      this.error('Error encrypting message: ', error);\n      throw error;\n    }\n  }\n\n  // Helper function for encryption of content\n  async encryptMessageContent(contentToBeEncrypted) {\n    const data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n    return {\n      algorithm: 'rc.v1.aes-sha2',\n      ciphertext: await this.encryptText(data)\n    };\n  }\n\n  // Helper function for encryption of content\n  async encryptMessage(message) {\n    const {\n        msg,\n        attachments\n      } = message,\n      rest = _objectWithoutProperties(message, _excluded2);\n    const content = await this.encryptMessageContent({\n      msg,\n      attachments\n    });\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      content,\n      t: 'e2e',\n      e2e: 'pending'\n    });\n  }\n\n  // Helper function for encryption of messages\n  encrypt(message) {\n    if (!this.isSupportedRoomType(this.typeOfRoom)) {\n      return;\n    }\n    if (!this.groupSessionKey) {\n      throw new Error(t('E2E_Invalid_Key'));\n    }\n    const ts = new Date();\n    const data = new TextEncoder('UTF-8').encode(EJSON.stringify({\n      _id: message._id,\n      text: message.msg,\n      userId: this.userId,\n      ts\n    }));\n    return this.encryptText(data);\n  }\n  async decryptContent(data) {\n    if (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n      const content = await this.decrypt(data.content.ciphertext);\n      Object.assign(data, content);\n    }\n    return data;\n  }\n\n  // Decrypt messages\n  async decryptMessage(message) {\n    if (message.t !== 'e2e' || message.e2e === 'done') {\n      return message;\n    }\n    if (message.msg) {\n      const data = await this.decrypt(message.msg);\n      if (data !== null && data !== void 0 && data.text) {\n        message.msg = data.text;\n      }\n    }\n    message = await this.decryptContent(message);\n    return _objectSpread(_objectSpread({}, message), {}, {\n      e2e: 'done'\n    });\n  }\n  async decrypt(message) {\n    const keyID = message.slice(0, 12);\n    let oldKey = '';\n    if (keyID !== this.keyID) {\n      var _this$oldKeys;\n      const oldRoomKey = (_this$oldKeys = this.oldKeys) === null || _this$oldKeys === void 0 ? void 0 : _this$oldKeys.find(key => key.e2eKeyId === keyID);\n      // Messages already contain a keyID stored with them\n      // That means that if we cannot find a keyID for the key the message has preppended to\n      // The message is indecipherable.\n      if (!oldRoomKey) {\n        this.error(\"Message is indecipherable. Message KeyID \".concat(keyID, \" not found in old room keys\"));\n        return {\n          msg: t('E2E_indecipherable')\n        };\n      }\n      oldKey = oldRoomKey.E2EKey;\n    }\n    message = message.slice(12);\n    const [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n    try {\n      const result = await decryptAES(vector, oldKey || this.groupSessionKey, cipherText);\n      return EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n    } catch (error) {\n      this.error('Error decrypting message: ', error, message);\n      return {\n        msg: t('E2E_Key_Error')\n      };\n    }\n  }\n  provideKeyToUser(keyId) {\n    if (this.keyID !== keyId) {\n      return;\n    }\n    this.encryptKeyForOtherParticipants();\n    this.setState(E2ERoomState.READY);\n  }\n  onStateChange(cb) {\n    this.on('STATE_CHANGED', cb);\n    return () => this.off('STATE_CHANGED', cb);\n  }\n  async encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n    if (!this.isReady()) {\n      return;\n    }\n    const mySub = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    const decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys);\n    const usersWithKeys = await Promise.all(users.map(async user => {\n      const {\n        _id,\n        public_key\n      } = user;\n      const key = await this.encryptGroupKeyForParticipant(public_key);\n      const oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n      return _objectSpread({\n        _id,\n        key\n      }, oldKeys && {\n        oldKeys\n      });\n    }));\n    return usersWithKeys;\n  }\n}","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","export","E2ERoom","Base64","Emitter","EJSON","RoomManager","roomCoordinator","RoomSettingsEnum","ChatRoom","Subscriptions","Messages","sdk","t","E2ERoomState","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","encryptAESCTR","generateAESCTRKey","sha256HashFromArrayBuffer","createSha256HashFromText","log","logError","e2e","KEY_ID","Symbol","PAUSED","permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","CREATING_KEYS","WAITING_KEYS","ERROR","filterMutation","currentState","nextState","includes","constructor","userId","room","state","undefined","roomId","_id","typeOfRoom","roomKeyId","e2eKeyId","once","decryptOldRoomKeys","decryptPendingMessages","decryptSubscription","on","prev","opened","concat","handshake","setState","_len","arguments","length","msg","Array","_key","error","_len2","_key2","hasSessionKey","groupSessionKey","getState","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","message","Promise","resolve","shouldConvertReceivedMessages","isWaitingKeys","keyID","_subscription$lastMes","subscription","findOne","rid","lastMessage","decryptMessage","update","$set","sub","oldRoomKeys","keys","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","key","value","k","decryptSessionKey","E2EKey","push","e","err","return","oldKeys","exportOldRoomKeys","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","exportSessionKey","find","forEach","_ref","_excluded","groupKey","importGroupKey","u","createGroupKey","publish","isSupportedRoomType","type","getRoomDirectives","allowRoomSettingChange","E2E","JSON","parse","slice","decode","decryptedKey","privateKey","sessionKeyExportedString","createNewGroupKey","sessionKeyExported","stringify","call","rest","post","uid","encryptGroupKeyForParticipant","publicKey","encryptKeyForOtherParticipants","resetRoomKey","e2eNewKeys","e2eKey","onRoomKeyReset","mySub","decryptedOldGroupKeys","users","filter","user","_user$e2e","public_key","usersSuggestedGroupKeys","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","encryptedGroupKey","encryptOldKeysForParticipant","userKey","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","oldRoomKey","encryptedKey","encryptedKeyToString","encode","Uint8Array","encryptedUserKey","encryptedUserKeyToString","encryptFile","file","fileArrayBuffer","hash","vector","crypto","getRandomValues","result","console","exportedKey","window","subtle","exportKey","fileName","name","encryptedFile","File","iv","decryptFile","ivArray","cryptoKey","importKey","decrypt","counter","encryptText","data","encryptMessageContent","contentToBeEncrypted","TextEncoder","algorithm","ciphertext","encryptMessage","attachments","_excluded2","content","encrypt","Error","ts","Date","text","decryptContent","Object","assign","oldKey","_this$oldKeys","cipherText","TextDecoder","provideKeyToUser","keyId","onStateChange","cb","off","encryptGroupKeyForParticipantsWaitingForTheKeys","usersWithKeys","all","map"],"sources":["app/e2e/client/rocketchat.e2e.room.js"],"sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState, nextState) => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate = undefined;\n\n\t[PAUSED] = undefined;\n\n\tconstructor(userId, room) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState, nextState, this);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId }).E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId });\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && room.u._id === this.userId) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tisSupportedRoomType(type) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey),\n\t\t\t});\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e.public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(public_key, oldRoomKeys) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(public_key) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(public_key), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file, key, iv) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder('UTF-8').encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync decrypt(message) {\n\t\tconst keyID = message.slice(0, 12);\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\tthis.error(`Message is indecipherable. Message KeyID ${keyID} not found in old room keys`);\n\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\ttry {\n\t\t\tconst result = await decryptAES(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"],"mappings":";;AAAA,IAAIA,wBAAwB;AAACC,MAAM,CAACC,IAAI,CAAC,gDAAgD,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACJ,wBAAwB,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,aAAa;AAACJ,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACC,aAAa,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIE,cAAc;AAACL,MAAM,CAACC,IAAI,CAAC,sCAAsC,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACE,cAAc,GAACF,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAnVH,MAAM,CAACM,MAAM,CAAC;EAACC,OAAO,EAACA,CAAA,KAAIA;AAAO,CAAC,CAAC;AAAC,IAAIC,MAAM;AAACR,MAAM,CAACC,IAAI,CAAC,qBAAqB,EAAC;EAACO,MAAMA,CAACL,CAAC,EAAC;IAACK,MAAM,GAACL,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIM,OAAO;AAACT,MAAM,CAACC,IAAI,CAAC,sBAAsB,EAAC;EAACQ,OAAOA,CAACN,CAAC,EAAC;IAACM,OAAO,GAACN,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIO,KAAK;AAACV,MAAM,CAACC,IAAI,CAAC,OAAO,EAAC;EAACC,OAAOA,CAACC,CAAC,EAAC;IAACO,KAAK,GAACP,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIQ,WAAW;AAACX,MAAM,CAACC,IAAI,CAAC,iCAAiC,EAAC;EAACU,WAAWA,CAACR,CAAC,EAAC;IAACQ,WAAW,GAACR,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIS,eAAe;AAACZ,MAAM,CAACC,IAAI,CAAC,2CAA2C,EAAC;EAACW,eAAeA,CAACT,CAAC,EAAC;IAACS,eAAe,GAACT,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIU,gBAAgB;AAACb,MAAM,CAACC,IAAI,CAAC,qCAAqC,EAAC;EAACY,gBAAgBA,CAACV,CAAC,EAAC;IAACU,gBAAgB,GAACV,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIW,QAAQ,EAACC,aAAa,EAACC,QAAQ;AAAChB,MAAM,CAACC,IAAI,CAAC,qBAAqB,EAAC;EAACa,QAAQA,CAACX,CAAC,EAAC;IAACW,QAAQ,GAACX,CAAC;EAAA,CAAC;EAACY,aAAaA,CAACZ,CAAC,EAAC;IAACY,aAAa,GAACZ,CAAC;EAAA,CAAC;EAACa,QAAQA,CAACb,CAAC,EAAC;IAACa,QAAQ,GAACb,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIc,GAAG;AAACjB,MAAM,CAACC,IAAI,CAAC,kCAAkC,EAAC;EAACgB,GAAGA,CAACd,CAAC,EAAC;IAACc,GAAG,GAACd,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIe,CAAC;AAAClB,MAAM,CAACC,IAAI,CAAC,sBAAsB,EAAC;EAACiB,CAACA,CAACf,CAAC,EAAC;IAACe,CAAC,GAACf,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIgB,YAAY;AAACnB,MAAM,CAACC,IAAI,CAAC,gBAAgB,EAAC;EAACkB,YAAYA,CAAChB,CAAC,EAAC;IAACgB,YAAY,GAAChB,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIiB,QAAQ,EAACC,aAAa,EAACC,yBAAyB,EAACC,0BAA0B,EAACC,UAAU,EAACC,UAAU,EAACC,UAAU,EAACC,UAAU,EAACC,cAAc,EAACC,YAAY,EAACC,YAAY,EAACC,YAAY,EAACC,qBAAqB,EAACC,aAAa,EAACC,iBAAiB,EAACC,yBAAyB,EAACC,wBAAwB;AAACpC,MAAM,CAACC,IAAI,CAAC,UAAU,EAAC;EAACmB,QAAQA,CAACjB,CAAC,EAAC;IAACiB,QAAQ,GAACjB,CAAC;EAAA,CAAC;EAACkB,aAAaA,CAAClB,CAAC,EAAC;IAACkB,aAAa,GAAClB,CAAC;EAAA,CAAC;EAACmB,yBAAyBA,CAACnB,CAAC,EAAC;IAACmB,yBAAyB,GAACnB,CAAC;EAAA,CAAC;EAACoB,0BAA0BA,CAACpB,CAAC,EAAC;IAACoB,0BAA0B,GAACpB,CAAC;EAAA,CAAC;EAACqB,UAAUA,CAACrB,CAAC,EAAC;IAACqB,UAAU,GAACrB,CAAC;EAAA,CAAC;EAACsB,UAAUA,CAACtB,CAAC,EAAC;IAACsB,UAAU,GAACtB,CAAC;EAAA,CAAC;EAACuB,UAAUA,CAACvB,CAAC,EAAC;IAACuB,UAAU,GAACvB,CAAC;EAAA,CAAC;EAACwB,UAAUA,CAACxB,CAAC,EAAC;IAACwB,UAAU,GAACxB,CAAC;EAAA,CAAC;EAACyB,cAAcA,CAACzB,CAAC,EAAC;IAACyB,cAAc,GAACzB,CAAC;EAAA,CAAC;EAAC0B,YAAYA,CAAC1B,CAAC,EAAC;IAAC0B,YAAY,GAAC1B,CAAC;EAAA,CAAC;EAAC2B,YAAYA,CAAC3B,CAAC,EAAC;IAAC2B,YAAY,GAAC3B,CAAC;EAAA,CAAC;EAAC4B,YAAYA,CAAC5B,CAAC,EAAC;IAAC4B,YAAY,GAAC5B,CAAC;EAAA,CAAC;EAAC6B,qBAAqBA,CAAC7B,CAAC,EAAC;IAAC6B,qBAAqB,GAAC7B,CAAC;EAAA,CAAC;EAAC8B,aAAaA,CAAC9B,CAAC,EAAC;IAAC8B,aAAa,GAAC9B,CAAC;EAAA,CAAC;EAAC+B,iBAAiBA,CAAC/B,CAAC,EAAC;IAAC+B,iBAAiB,GAAC/B,CAAC;EAAA,CAAC;EAACgC,yBAAyBA,CAAChC,CAAC,EAAC;IAACgC,yBAAyB,GAAChC,CAAC;EAAA,CAAC;EAACiC,wBAAwBA,CAACjC,CAAC,EAAC;IAACiC,wBAAwB,GAACjC,CAAC;EAAA;AAAC,CAAC,EAAC,EAAE,CAAC;AAAC,IAAIkC,GAAG,EAACC,QAAQ;AAACtC,MAAM,CAACC,IAAI,CAAC,UAAU,EAAC;EAACoC,GAAGA,CAAClC,CAAC,EAAC;IAACkC,GAAG,GAAClC,CAAC;EAAA,CAAC;EAACmC,QAAQA,CAACnC,CAAC,EAAC;IAACmC,QAAQ,GAACnC,CAAC;EAAA;AAAC,CAAC,EAAC,EAAE,CAAC;AAAC,IAAIoC,GAAG;AAACvC,MAAM,CAACC,IAAI,CAAC,kBAAkB,EAAC;EAACsC,GAAGA,CAACpC,CAAC,EAAC;IAACoC,GAAG,GAACpC,CAAC;EAAA;AAAC,CAAC,EAAC,EAAE,CAAC;AAiCpgE,MAAMqC,MAAM,GAAGC,MAAM,CAAC,OAAO,CAAC;AAC9B,MAAMC,MAAM,GAAGD,MAAM,CAAC,QAAQ,CAAC;AAE/B,MAAME,iBAAiB,GAAG;EACzB,CAACxB,YAAY,CAACyB,WAAW,GAAG,CAACzB,YAAY,CAAC0B,YAAY,EAAE1B,YAAY,CAAC2B,QAAQ,EAAE3B,YAAY,CAAC4B,aAAa,CAAC;EAC1G,CAAC5B,YAAY,CAAC6B,KAAK,GAAG,CAAC7B,YAAY,CAAC2B,QAAQ,EAAE3B,YAAY,CAAC8B,aAAa,EAAE9B,YAAY,CAAC+B,YAAY,CAAC;EACpG,CAAC/B,YAAY,CAACgC,KAAK,GAAG,CAAChC,YAAY,CAAC4B,aAAa,EAAE5B,YAAY,CAACyB,WAAW,CAAC;EAC5E,CAACzB,YAAY,CAAC+B,YAAY,GAAG,CAAC/B,YAAY,CAAC4B,aAAa,EAAE5B,YAAY,CAACgC,KAAK,EAAEhC,YAAY,CAAC2B,QAAQ,CAAC;EACpG,CAAC3B,YAAY,CAAC0B,YAAY,GAAG,CAC5B1B,YAAY,CAAC6B,KAAK,EAClB7B,YAAY,CAAC4B,aAAa,EAC1B5B,YAAY,CAACgC,KAAK,EAClBhC,YAAY,CAAC2B,QAAQ,EACrB3B,YAAY,CAAC+B,YAAY,EACzB/B,YAAY,CAAC8B,aAAa;AAE5B,CAAC;AAED,MAAMG,cAAc,GAAGA,CAACC,YAAY,EAAEC,SAAS,KAAK;EACnD,IAAID,YAAY,KAAKC,SAAS,EAAE;IAC/B,OAAOA,SAAS,KAAKnC,YAAY,CAACgC,KAAK;EACxC;EAEA,IAAI,EAAEE,YAAY,IAAIV,iBAAiB,CAAC,EAAE;IACzC,OAAOW,SAAS;EACjB;EAEA,IAAIX,iBAAiB,CAACU,YAAY,CAAC,CAACE,QAAQ,CAACD,SAAS,CAAC,EAAE;IACxD,OAAOA,SAAS;EACjB;EAEA,OAAO,KAAK;AACb,CAAC;AAEM,MAAM/C,OAAO,SAASE,OAAO,CAAC;EAKpC+C,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAE;IACzB,KAAK,CAAC,CAAC;IAAC,KALTC,KAAK,GAAGC,SAAS;IAAA,KAEhBlB,MAAM,IAAIkB,SAAS;IAKnB,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,MAAM,GAAGH,IAAI,CAACI,GAAG;IACtB,IAAI,CAACC,UAAU,GAAGL,IAAI,CAACxC,CAAC;IACxB,IAAI,CAAC8C,SAAS,GAAGN,IAAI,CAACO,QAAQ;IAE9B,IAAI,CAACC,IAAI,CAAC/C,YAAY,CAAC6B,KAAK,EAAE,YAAY;MACzC,MAAM,IAAI,CAACmB,kBAAkB,CAAC,CAAC;MAC/B,OAAO,IAAI,CAACC,sBAAsB,CAAC,CAAC;IACrC,CAAC,CAAC;IACF,IAAI,CAACF,IAAI,CAAC/C,YAAY,CAAC6B,KAAK,EAAE,MAAM,IAAI,CAACqB,mBAAmB,CAAC,CAAC,CAAC;IAC/D,IAAI,CAACC,EAAE,CAAC,eAAe,EAAGC,IAAI,IAAK;MAClC,IAAI,IAAI,CAACV,MAAM,KAAKlD,WAAW,CAAC6D,MAAM,EAAE;QACvC,IAAI,CAACnC,GAAG,WAAAoC,MAAA,CAAWF,IAAI,QAAK,eAAe,CAAC;MAC7C;IACD,CAAC,CAAC;IACF,IAAI,CAACD,EAAE,CAAC,eAAe,EAAE,MAAM,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC;IAEhD,IAAI,CAACC,QAAQ,CAACxD,YAAY,CAACyB,WAAW,CAAC;EACxC;EAEAP,GAAGA,CAAA,EAAS;IAAA,SAAAuC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAALC,GAAG,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAHF,GAAG,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IACT5C,GAAG,sBAAAoC,MAAA,CAAsB,IAAI,CAACd,KAAK,aAAAc,MAAA,CAAU,IAAI,CAACZ,MAAM,SAAM,GAAGkB,GAAG,CAAC;EACtE;EAEAG,KAAKA,CAAA,EAAS;IAAA,SAAAC,KAAA,GAAAN,SAAA,CAAAC,MAAA,EAALC,GAAG,OAAAC,KAAA,CAAAG,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAHL,GAAG,CAAAK,KAAA,IAAAP,SAAA,CAAAO,KAAA;IAAA;IACX9C,QAAQ,sBAAAmC,MAAA,CAAsB,IAAI,CAACd,KAAK,aAAAc,MAAA,CAAU,IAAI,CAACZ,MAAM,SAAM,GAAGkB,GAAG,CAAC;EAC3E;EAEAM,aAAaA,CAAA,EAAG;IACf,OAAO,CAAC,CAAC,IAAI,CAACC,eAAe;EAC9B;EAEAC,QAAQA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC5B,KAAK;EAClB;EAEAgB,QAAQA,CAACa,cAAc,EAAE;IACxB,MAAMnC,YAAY,GAAG,IAAI,CAACM,KAAK;IAC/B,MAAML,SAAS,GAAGF,cAAc,CAACC,YAAY,EAAEmC,cAAc,CAAC;IAE9D,IAAI,CAAClC,SAAS,EAAE;MACf,IAAI,CAAC4B,KAAK,kBAAAT,MAAA,CAAkBpB,YAAY,UAAAoB,MAAA,CAAOe,cAAc,CAAE,CAAC;MAChE;IACD;IAEA,IAAI,CAAC7B,KAAK,GAAGL,SAAS;IACtB,IAAI,CAACjB,GAAG,CAACgB,YAAY,EAAE,IAAI,EAAEC,SAAS,CAAC;IACvC,IAAI,CAACmC,IAAI,CAAC,eAAe,EAAEpC,YAAY,EAAEC,SAAS,EAAE,IAAI,CAAC;IACzD,IAAI,CAACmC,IAAI,CAACnC,SAAS,EAAE,IAAI,CAAC;EAC3B;EAEAoC,OAAOA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC/B,KAAK,KAAKxC,YAAY,CAAC6B,KAAK;EACzC;EAEA2C,UAAUA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAChC,KAAK,KAAKxC,YAAY,CAAC2B,QAAQ;EAC5C;EAEA8C,MAAMA,CAAA,EAAG;IACR,IAAI,IAAI,CAACjC,KAAK,KAAKxC,YAAY,CAAC6B,KAAK,EAAE;MACtC;IACD;IAEA,IAAI,CAAC2B,QAAQ,CAACxD,YAAY,CAAC6B,KAAK,CAAC;EAClC;EAEA6C,OAAOA,CAAA,EAAG;IACT,IAAI,CAAClB,QAAQ,CAACxD,YAAY,CAAC2B,QAAQ,CAAC;EACrC;EAEAgD,KAAKA,CAAA,EAAG;IACP,IAAI,CAACzD,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACK,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5C,IAAI,CAACA,MAAM,CAAC,GAAG,IAAI;IACnB,IAAI,CAAC+C,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;EAC1B;EAEAM,MAAMA,CAAA,EAAG;IACR,IAAI,CAAC1D,GAAG,CAAC,QAAQ,EAAE,IAAI,CAACK,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IAC7C,IAAI,CAACA,MAAM,CAAC,GAAG,KAAK;IACpB,IAAI,CAAC+C,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC;EAC3B;EAEAO,WAAWA,CAAA,EAAG;IACb,IAAI,CAACrB,QAAQ,CAACxD,YAAY,CAAC4B,aAAa,CAAC;EAC1C;EAEA,MAAMkD,yBAAyBA,CAACC,OAAO,EAAE;IACxC,IAAI,CAAC,IAAI,CAACR,OAAO,CAAC,CAAC,IAAI,IAAI,CAAChD,MAAM,CAAC,EAAE;MACpC,OAAO,KAAK;IACb;IAEA,IAAI,IAAI,CAACA,MAAM,CAAC,KAAKkB,SAAS,EAAE;MAC/B,OAAO,IAAIuC,OAAO,CAAEC,OAAO,IAAK;QAC/B,IAAI,CAAClC,IAAI,CAAC,QAAQ,EAAEkC,OAAO,CAAC;MAC7B,CAAC,CAAC;IACH;IAEA,IAAIF,OAAO,CAACnB,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC3B,OAAO,KAAK;IACb;IAEA,OAAO,IAAI;EACZ;EAEAsB,6BAA6BA,CAAA,EAAG;IAC/B,OAAO,IAAI,CAACX,OAAO,CAAC,CAAC;EACtB;EAEAY,aAAaA,CAAA,EAAG;IACf,OAAO,IAAI,CAAC3C,KAAK,KAAKxC,YAAY,CAAC+B,YAAY;EAChD;EAEA,IAAIqD,KAAKA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC/D,MAAM,CAAC;EACpB;EAEA,IAAI+D,KAAKA,CAACA,KAAK,EAAE;IAChB,IAAI,CAAC/D,MAAM,CAAC,GAAG+D,KAAK;EACrB;EAEA,MAAMlC,mBAAmBA,CAAA,EAAG;IAAA,IAAAmC,qBAAA;IAC3B,MAAMC,YAAY,GAAG1F,aAAa,CAAC2F,OAAO,CAAC;MAAEC,GAAG,EAAE,IAAI,CAAC9C;IAAO,CAAC,CAAC;IAEhE,IAAI,EAAA2C,qBAAA,GAAAC,YAAY,CAACG,WAAW,cAAAJ,qBAAA,uBAAxBA,qBAAA,CAA0BtF,CAAC,MAAK,KAAK,EAAE;MAC1C,IAAI,CAACmB,GAAG,CAAC,oCAAoC,CAAC;MAC9C;IACD;IAEA,MAAM6D,OAAO,GAAG,MAAM,IAAI,CAACW,cAAc,CAACJ,YAAY,CAACG,WAAW,CAAC;IAEnE7F,aAAa,CAAC+F,MAAM,CACnB;MACChD,GAAG,EAAE2C,YAAY,CAAC3C;IACnB,CAAC,EACD;MACCiD,IAAI,EAAE;QACLH,WAAW,EAAEV;MACd;IACD,CACD,CAAC;IACD,IAAI,CAAC7D,GAAG,CAAC,2BAA2B,CAAC;EACtC;EAEA,MAAM8B,kBAAkBA,CAAA,EAAG;IAC1B,MAAM6C,GAAG,GAAGjG,aAAa,CAAC2F,OAAO,CAAC;MAAEC,GAAG,EAAE,IAAI,CAAC9C;IAAO,CAAC,CAAC;IAEvD,IAAI,EAACmD,GAAG,aAAHA,GAAG,eAAHA,GAAG,CAAEC,WAAW,KAAI,CAAAD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,WAAW,CAACnC,MAAM,MAAK,CAAC,EAAE;MACvD,IAAI,CAACzC,GAAG,CAAC,kCAAkC,CAAC;MAC5C;IACD;IAEA,MAAM6E,IAAI,GAAG,EAAE;IAAC,IAAAC,yBAAA;IAAA,IAAAC,iBAAA;IAAA,IAAAC,cAAA;IAAA;MAChB,SAAAC,SAAA,GAAAjH,cAAA,CAAwB2G,GAAG,CAACC,WAAW,GAAAM,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAC,IAAA,EAAAN,yBAAA,UAAE;QAAA,MAAxBO,GAAG,GAAAH,KAAA,CAAAI,KAAA;QAAA;UACnB,IAAI;YACH,MAAMC,CAAC,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACH,GAAG,CAACI,MAAM,CAAC;YAClDZ,IAAI,CAACa,IAAI,CAAA3H,aAAA,CAAAA,aAAA,KACLsH,GAAG;cACNI,MAAM,EAAEF;YAAC,EACT,CAAC;UACH,CAAC,CAAC,OAAOI,CAAC,EAAE;YACX,IAAI,CAAC9C,KAAK,wCAAAT,MAAA,CAC8BiD,GAAG,CAACzD,QAAQ,8EACpD,CAAC;YACDiD,IAAI,CAACa,IAAI,CAAA3H,aAAA,CAAAA,aAAA,KAAMsH,GAAG;cAAEI,MAAM,EAAE;YAAI,EAAE,CAAC;UACpC;QAAC;MACF;IAAC,SAAAG,GAAA;MAAAb,iBAAA;MAAAC,cAAA,GAAAY,GAAA;IAAA;MAAA;QAAA,IAAAd,yBAAA,IAAAG,SAAA,CAAAY,MAAA;UAAA,MAAAZ,SAAA,CAAAY,MAAA;QAAA;MAAA;QAAA,IAAAd,iBAAA;UAAA,MAAAC,cAAA;QAAA;MAAA;IAAA;IAED,IAAI,CAACc,OAAO,GAAGjB,IAAI;IACnB,IAAI,CAAC7E,GAAG,CAAC,yBAAyB,CAAC;EACpC;EAEA,MAAM+F,iBAAiBA,CAACD,OAAO,EAAE;IAChC,IAAI,CAAC9F,GAAG,CAAC,4BAA4B,CAAC;IACtC,IAAI,CAAC8F,OAAO,IAAIA,OAAO,CAACrD,MAAM,KAAK,CAAC,EAAE;MACrC,IAAI,CAACzC,GAAG,CAAC,iCAAiC,CAAC;MAC3C;IACD;IAEA,MAAM6E,IAAI,GAAG,EAAE;IAAC,IAAAmB,0BAAA;IAAA,IAAAC,kBAAA;IAAA,IAAAC,eAAA;IAAA;MAChB,SAAAC,UAAA,GAAAnI,cAAA,CAAwB8H,OAAO,GAAAM,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAD,UAAA,CAAAhB,IAAA,IAAAC,IAAA,EAAAY,0BAAA,UAAE;QAAA,MAAhBX,GAAG,GAAAe,MAAA,CAAAd,KAAA;QAAA;UACnB,IAAI;YACH,IAAI,CAACD,GAAG,CAACI,MAAM,EAAE;cAChB;YACD;YAEA,MAAMF,CAAC,GAAG,MAAM,IAAI,CAACc,gBAAgB,CAAChB,GAAG,CAACI,MAAM,CAAC;YACjDZ,IAAI,CAACa,IAAI,CAAA3H,aAAA,CAAAA,aAAA,KACLsH,GAAG;cACNI,MAAM,EAAEF;YAAC,EACT,CAAC;UACH,CAAC,CAAC,OAAOI,CAAC,EAAE;YACX,IAAI,CAAC9C,KAAK,wCAAAT,MAAA,CAC8BiD,GAAG,CAACzD,QAAQ,8EACpD,CAAC;UACF;QAAC;MACF;IAAC,SAAAgE,GAAA;MAAAK,kBAAA;MAAAC,eAAA,GAAAN,GAAA;IAAA;MAAA;QAAA,IAAAI,0BAAA,IAAAG,UAAA,CAAAN,MAAA;UAAA,MAAAM,UAAA,CAAAN,MAAA;QAAA;MAAA;QAAA,IAAAI,kBAAA;UAAA,MAAAC,eAAA;QAAA;MAAA;IAAA;IAED,IAAI,CAAClG,GAAG,4BAAAoC,MAAA,CAA4ByC,IAAI,CAACpC,MAAM,mBAAgB,CAAC;IAChE,OAAOoC,IAAI;EACZ;EAEA,MAAM9C,sBAAsBA,CAAA,EAAG;IAC9B,OAAOpD,QAAQ,CAAC2H,IAAI,CAAC;MAAEhC,GAAG,EAAE,IAAI,CAAC9C,MAAM;MAAE3C,CAAC,EAAE,KAAK;MAAEqB,GAAG,EAAE;IAAU,CAAC,CAAC,CAACqG,OAAO,CAAC,MAAAC,IAAA,IAA2B;MAAA,IAApB;UAAE/E;QAAY,CAAC,GAAA+E,IAAA;QAAL9D,GAAG,GAAAhF,wBAAA,CAAA8I,IAAA,EAAAC,SAAA;MAChG9H,QAAQ,CAAC8F,MAAM,CAAC;QAAEhD;MAAI,CAAC,EAAE,MAAM,IAAI,CAAC+C,cAAc,CAAC9B,GAAG,CAAC,CAAC;IACzD,CAAC,CAAC;EACH;;EAEA;EACA,MAAML,SAASA,CAAA,EAAG;IACjB,IAAI,CAACnC,GAAG,CAACmD,OAAO,CAAC,CAAC,EAAE;MACnB;IACD;IAEA,IAAI,IAAI,CAAC/B,KAAK,KAAKxC,YAAY,CAAC4B,aAAa,IAAI,IAAI,CAACY,KAAK,KAAKxC,YAAY,CAACyB,WAAW,EAAE;MACzF;IACD;IAEA,IAAI,CAAC+B,QAAQ,CAACxD,YAAY,CAAC0B,YAAY,CAAC;IAExC,IAAI;MACH,MAAMkG,QAAQ,GAAGhI,aAAa,CAAC2F,OAAO,CAAC;QAAEC,GAAG,EAAE,IAAI,CAAC9C;MAAO,CAAC,CAAC,CAACiE,MAAM;MACnE,IAAIiB,QAAQ,EAAE;QACb,MAAM,IAAI,CAACC,cAAc,CAACD,QAAQ,CAAC;QACnC,IAAI,CAACpE,QAAQ,CAACxD,YAAY,CAAC6B,KAAK,CAAC;QACjC;MACD;IACD,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACf,IAAI,CAACP,QAAQ,CAACxD,YAAY,CAACgC,KAAK,CAAC;MACjC,IAAI,CAAC+B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAC/C;IACD;IAEA,IAAI;MACH,MAAMxB,IAAI,GAAG5C,QAAQ,CAAC4F,OAAO,CAAC;QAAE5C,GAAG,EAAE,IAAI,CAACD;MAAO,CAAC,CAAC;MACnD;MACA,IAAI,CAACH,IAAI,CAACO,QAAQ,IAAIP,IAAI,CAACuF,CAAC,CAACnF,GAAG,KAAK,IAAI,CAACL,MAAM,EAAE;QACjD,IAAI,CAACkB,QAAQ,CAACxD,YAAY,CAAC8B,aAAa,CAAC;QACzC,MAAM,IAAI,CAACiG,cAAc,CAAC,CAAC;QAC3B,IAAI,CAACvE,QAAQ,CAACxD,YAAY,CAAC6B,KAAK,CAAC;QACjC;MACD;MAEA,IAAI,CAAC2B,QAAQ,CAACxD,YAAY,CAAC+B,YAAY,CAAC;MACxC,IAAI,CAACb,GAAG,CAAC,qBAAqB,CAAC;MAC/BpB,GAAG,CAACkI,OAAO,CAAC,mBAAmB,EAAE,IAAA1E,MAAA,CAAI,IAAI,CAACZ,MAAM,qBAAkB,IAAI,CAACA,MAAM,EAAEH,IAAI,CAACO,QAAQ,CAAC,CAAC;IAC/F,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACf;MACA,IAAI,CAACP,QAAQ,CAACxD,YAAY,CAACgC,KAAK,CAAC;IAClC;EACD;EAEAiG,mBAAmBA,CAACC,IAAI,EAAE;IACzB,OAAOzI,eAAe,CAAC0I,iBAAiB,CAACD,IAAI,CAAC,CAACE,sBAAsB,CAAC,CAAC,CAAC,EAAE1I,gBAAgB,CAAC2I,GAAG,CAAC;EAChG;EAEA,MAAM3B,iBAAiBA,CAACH,GAAG,EAAE;IAC5B,OAAO5F,YAAY,CAAC2H,IAAI,CAACC,KAAK,CAAC,MAAM,IAAI,CAAChB,gBAAgB,CAAChB,GAAG,CAAC,CAAC,CAAC;EAClE;EAEA,MAAMgB,gBAAgBA,CAAChB,GAAG,EAAE;IAC3BA,GAAG,GAAGA,GAAG,CAACiC,KAAK,CAAC,EAAE,CAAC;IACnBjC,GAAG,GAAGlH,MAAM,CAACoJ,MAAM,CAAClC,GAAG,CAAC;IAExB,MAAMmC,YAAY,GAAG,MAAMnI,UAAU,CAACa,GAAG,CAACuH,UAAU,EAAEpC,GAAG,CAAC;IAC1D,OAAOtG,QAAQ,CAACyI,YAAY,CAAC;EAC9B;EAEA,MAAMb,cAAcA,CAACD,QAAQ,EAAE;IAC9B,IAAI,CAAC1G,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACwB,MAAM,CAAC;IAC9C;IACA;IACAkF,QAAQ,GAAGA,QAAQ,CAACY,KAAK,CAAC,EAAE,CAAC;IAC7BZ,QAAQ,GAAGvI,MAAM,CAACoJ,MAAM,CAACb,QAAQ,CAAC;;IAElC;IACA,IAAI;MACH,MAAMc,YAAY,GAAG,MAAMnI,UAAU,CAACa,GAAG,CAACuH,UAAU,EAAEf,QAAQ,CAAC;MAC/D,IAAI,CAACgB,wBAAwB,GAAG3I,QAAQ,CAACyI,YAAY,CAAC;IACvD,CAAC,CAAC,OAAO3E,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACjD,OAAO,KAAK;IACb;;IAEA;IACA;IACA,IAAI,CAAC,IAAI,CAACqB,KAAK,EAAE;MAChB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACvC,SAAS,IAAI,CAAC,MAAM5B,wBAAwB,CAAC,IAAI,CAAC2H,wBAAwB,CAAC,EAAEJ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5G;;IAEA;IACA,IAAI;MACH,MAAMjC,GAAG,GAAG,MAAM5F,YAAY,CAAC2H,IAAI,CAACC,KAAK,CAAC,IAAI,CAACK,wBAAwB,CAAC,CAAC;MACzE;MACA,IAAI,CAACzE,eAAe,GAAGoC,GAAG;IAC3B,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAChD,OAAO,KAAK;IACb;IAEA,OAAO,IAAI;EACZ;EAEA,MAAM8E,iBAAiBA,CAAA,EAAG;IACzB,IAAI,CAAC1E,eAAe,GAAG,MAAM1D,cAAc,CAAC,CAAC;IAE7C,MAAMqI,kBAAkB,GAAG,MAAMpI,YAAY,CAAC,IAAI,CAACyD,eAAe,CAAC;IACnE,IAAI,CAACyE,wBAAwB,GAAGN,IAAI,CAACS,SAAS,CAACD,kBAAkB,CAAC;IAClE,IAAI,CAAC1D,KAAK,GAAG,CAAC,MAAMnE,wBAAwB,CAAC,IAAI,CAAC2H,wBAAwB,CAAC,EAAEJ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC1F;EAEA,MAAMT,cAAcA,CAAA,EAAG;IACtB,IAAI,CAAC7G,GAAG,CAAC,mBAAmB,CAAC;IAC7B,IAAI;MACH,MAAM,IAAI,CAAC2H,iBAAiB,CAAC,CAAC;MAE9B,MAAM/I,GAAG,CAACkJ,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAACtG,MAAM,EAAE,IAAI,CAAC0C,KAAK,CAAC;MAC3D,MAAMtF,GAAG,CAACmJ,IAAI,CAACC,IAAI,CAAC,wBAAwB,EAAE;QAC7C1D,GAAG,EAAE,IAAI,CAAC9C,MAAM;QAChByG,GAAG,EAAE,IAAI,CAAC7G,MAAM;QAChBiE,GAAG,EAAE,MAAM,IAAI,CAAC6C,6BAA6B,CAAChI,GAAG,CAACiI,SAAS;MAC5D,CAAC,CAAC;MACF,MAAM,IAAI,CAACC,8BAA8B,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOvF,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACZ;EACD;EAEA,MAAMwF,YAAYA,CAAA,EAAG;IACpB,IAAI,CAACrI,GAAG,CAAC,oBAAoB,CAAC;IAC9B,IAAI,CAACE,GAAG,CAACiI,SAAS,EAAE;MACnB,IAAI,CAACtF,KAAK,CAAC,6CAA6C,CAAC;MACzD;IACD;IAEA,IAAI,CAACP,QAAQ,CAACxD,YAAY,CAAC8B,aAAa,CAAC;IACzC,IAAI;MACH,MAAM,IAAI,CAAC+G,iBAAiB,CAAC,CAAC;MAE9B,MAAMW,UAAU,GAAG;QAAE1G,QAAQ,EAAE,IAAI,CAACsC,KAAK;QAAEqE,MAAM,EAAE,MAAM,IAAI,CAACL,6BAA6B,CAAChI,GAAG,CAACiI,SAAS;MAAE,CAAC;MAE5G,IAAI,CAAC7F,QAAQ,CAACxD,YAAY,CAAC6B,KAAK,CAAC;MACjC,IAAI,CAACX,GAAG,iCAAAoC,MAAA,CAAiC,IAAI,CAACZ,MAAM,CAAE,CAAC;MAEvD,OAAO8G,UAAU;IAClB,CAAC,CAAC,OAAOzF,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACZ;EACD;EAEA2F,cAAcA,CAACtE,KAAK,EAAE;IACrB,IAAI,CAAClE,GAAG,qCAAAoC,MAAA,CAAqC8B,KAAK,uBAAA9B,MAAA,CAAoB,IAAI,CAAC8B,KAAK,CAAE,CAAC;IACnF,IAAI,CAAC5B,QAAQ,CAACxD,YAAY,CAAC+B,YAAY,CAAC;IACxC,IAAI,CAACqD,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACjB,eAAe,GAAG1B,SAAS;IAChC,IAAI,CAACmG,wBAAwB,GAAGnG,SAAS;IACzC,IAAI,CAACqG,kBAAkB,GAAGrG,SAAS;IACnC,IAAI,CAACuE,OAAO,GAAGvE,SAAS;EACzB;EAEA,MAAM6G,8BAA8BA,CAAA,EAAG;IACtC;IACA,IAAI;MACH,MAAMK,KAAK,GAAG/J,aAAa,CAAC2F,OAAO,CAAC;QAAEC,GAAG,EAAE,IAAI,CAAC9C;MAAO,CAAC,CAAC;MACzD,MAAMkH,qBAAqB,GAAG,MAAM,IAAI,CAAC3C,iBAAiB,CAAC0C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE7D,WAAW,CAAC;MAC9E,MAAM+D,KAAK,GAAG,CAAC,MAAM/J,GAAG,CAACkJ,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAACtG,MAAM,CAAC,EAAEmH,KAAK,CAACC,MAAM,CAAEC,IAAI;QAAA,IAAAC,SAAA;QAAA,OAAKD,IAAI,aAAJA,IAAI,wBAAAC,SAAA,GAAJD,IAAI,CAAE3I,GAAG,cAAA4I,SAAA,uBAATA,SAAA,CAAWC,UAAU;MAAA,EAAC;MAEzH,IAAI,CAACJ,KAAK,CAAClG,MAAM,EAAE;QAClB;MACD;MAEA,MAAMuG,uBAAuB,GAAG;QAAE,CAAC,IAAI,CAACxH,MAAM,GAAG;MAAG,CAAC;MAAC,IAAAyH,0BAAA;MAAA,IAAAC,kBAAA;MAAA,IAAAC,eAAA;MAAA;QACtD,SAAAC,UAAA,GAAApL,cAAA,CAAyB2K,KAAK,GAAAU,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAD,UAAA,CAAAjE,IAAA,IAAAC,IAAA,EAAA6D,0BAAA,UAAE;UAAA,MAAfJ,IAAI,GAAAQ,MAAA,CAAA/D,KAAA;UAAA;YACpB,MAAMgE,iBAAiB,GAAG,MAAM,IAAI,CAACpB,6BAA6B,CAACW,IAAI,CAAC3I,GAAG,CAAC6I,UAAU,CAAC;YACvF,MAAMjD,OAAO,GAAG,MAAM,IAAI,CAACyD,4BAA4B,CAACV,IAAI,CAAC3I,GAAG,CAAC6I,UAAU,EAAEL,qBAAqB,CAAC;YAEnGM,uBAAuB,CAAC,IAAI,CAACxH,MAAM,CAAC,CAACkE,IAAI,CAAA3H,aAAA;cAAG0D,GAAG,EAAEoH,IAAI,CAACpH,GAAG;cAAE4D,GAAG,EAAEiE;YAAiB,GAAMxD,OAAO,IAAI;cAAEA;YAAQ,CAAC,CAAG,CAAC;UAAC;QACnH;MAAC,SAAAF,GAAA;QAAAsD,kBAAA;QAAAC,eAAA,GAAAvD,GAAA;MAAA;QAAA;UAAA,IAAAqD,0BAAA,IAAAG,UAAA,CAAAvD,MAAA;YAAA,MAAAuD,UAAA,CAAAvD,MAAA;UAAA;QAAA;UAAA,IAAAqD,kBAAA;YAAA,MAAAC,eAAA;UAAA;QAAA;MAAA;MAED,MAAMvK,GAAG,CAACmJ,IAAI,CAACC,IAAI,CAAC,wCAAwC,EAAE;QAAEgB;MAAwB,CAAC,CAAC;IAC3F,CAAC,CAAC,OAAOnG,KAAK,EAAE;MACf,OAAO,IAAI,CAACA,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACvD;EACD;EAEA,MAAM0G,4BAA4BA,CAACR,UAAU,EAAEnE,WAAW,EAAE;IAC3D,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACnC,MAAM,KAAK,CAAC,EAAE;MAC7C;IACD;IAEA,IAAI+G,OAAO;IAEX,IAAI;MACHA,OAAO,GAAG,MAAM9J,YAAY,CAAC0H,IAAI,CAACC,KAAK,CAAC0B,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOlG,KAAK,EAAE;MACf,OAAO,IAAI,CAACA,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACvD;IAEA,IAAI;MACH,MAAMgC,IAAI,GAAG,EAAE;MAAC,IAAA4E,0BAAA;MAAA,IAAAC,kBAAA;MAAA,IAAAC,eAAA;MAAA;QAChB,SAAAC,UAAA,GAAA5L,cAAA,CAA+B4G,WAAW,GAAAiF,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAD,UAAA,CAAAzE,IAAA,IAAAC,IAAA,EAAAqE,0BAAA,UAAE;UAAA,MAA3BK,UAAU,GAAAD,MAAA,CAAAvE,KAAA;UAAA;YAC1B,IAAI,CAACwE,UAAU,CAACrE,MAAM,EAAE;cACvB;YACD;YACA,MAAMsE,YAAY,GAAG,MAAM5K,UAAU,CAACqK,OAAO,EAAExK,aAAa,CAAC8K,UAAU,CAACrE,MAAM,CAAC,CAAC;YAChF,MAAMuE,oBAAoB,GAAGF,UAAU,CAAClI,QAAQ,GAAGzD,MAAM,CAAC8L,MAAM,CAAC,IAAIC,UAAU,CAACH,YAAY,CAAC,CAAC;YAE9FlF,IAAI,CAACa,IAAI,CAAA3H,aAAA,CAAAA,aAAA,KAAM+L,UAAU;cAAErE,MAAM,EAAEuE;YAAoB,EAAE,CAAC;UAAC;QAC5D;MAAC,SAAApE,GAAA;QAAA8D,kBAAA;QAAAC,eAAA,GAAA/D,GAAA;MAAA;QAAA;UAAA,IAAA6D,0BAAA,IAAAG,UAAA,CAAA/D,MAAA;YAAA,MAAA+D,UAAA,CAAA/D,MAAA;UAAA;QAAA;UAAA,IAAA6D,kBAAA;YAAA,MAAAC,eAAA;UAAA;QAAA;MAAA;MACD,OAAO9E,IAAI;IACZ,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACf,OAAO,IAAI,CAACA,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACxD;EACD;EAEA,MAAMqF,6BAA6BA,CAACa,UAAU,EAAE;IAC/C,IAAIS,OAAO;IACX,IAAI;MACHA,OAAO,GAAG,MAAM9J,YAAY,CAAC0H,IAAI,CAACC,KAAK,CAAC0B,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOlG,KAAK,EAAE;MACf,OAAO,IAAI,CAACA,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACvD;IACA;;IAEA;IACA,IAAI;MACH,MAAMsH,gBAAgB,GAAG,MAAMhL,UAAU,CAACqK,OAAO,EAAExK,aAAa,CAAC,IAAI,CAAC0I,wBAAwB,CAAC,CAAC;MAChG,MAAM0C,wBAAwB,GAAG,IAAI,CAAClG,KAAK,GAAG/F,MAAM,CAAC8L,MAAM,CAAC,IAAIC,UAAU,CAACC,gBAAgB,CAAC,CAAC;MAC7F,OAAOC,wBAAwB;IAChC,CAAC,CAAC,OAAOvH,KAAK,EAAE;MACf,OAAO,IAAI,CAACA,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACxD;EACD;;EAEA;EACA,MAAMwH,WAAWA,CAACC,IAAI,EAAE;IACvB;IACA;IACA;;IAEA,MAAMC,eAAe,GAAG,MAAM5K,qBAAqB,CAAC2K,IAAI,CAAC;IAEzD,MAAME,IAAI,GAAG,MAAM1K,yBAAyB,CAAC,IAAIoK,UAAU,CAACK,eAAe,CAAC,CAAC;IAE7E,MAAME,MAAM,GAAGC,MAAM,CAACC,eAAe,CAAC,IAAIT,UAAU,CAAC,EAAE,CAAC,CAAC;IACzD,MAAM7E,GAAG,GAAG,MAAMxF,iBAAiB,CAAC,CAAC;IACrC,IAAI+K,MAAM;IACV,IAAI;MACHA,MAAM,GAAG,MAAMhL,aAAa,CAAC6K,MAAM,EAAEpF,GAAG,EAAEkF,eAAe,CAAC;IAC3D,CAAC,CAAC,OAAO1H,KAAK,EAAE;MACfgI,OAAO,CAAC7K,GAAG,CAAC6C,KAAK,CAAC;MAClB,OAAO,IAAI,CAACA,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACzD;IAEA,MAAMiI,WAAW,GAAG,MAAMC,MAAM,CAACL,MAAM,CAACM,MAAM,CAACC,SAAS,CAAC,KAAK,EAAE5F,GAAG,CAAC;IAEpE,MAAM6F,QAAQ,GAAG,MAAMnL,wBAAwB,CAACuK,IAAI,CAACa,IAAI,CAAC;IAE1D,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAAC,CAACrM,aAAa,CAAC4L,MAAM,CAAC,CAAC,EAAEM,QAAQ,CAAC;IAEjE,OAAO;MACNZ,IAAI,EAAEc,aAAa;MACnB/F,GAAG,EAAEyF,WAAW;MAChBQ,EAAE,EAAEnN,MAAM,CAAC8L,MAAM,CAACQ,MAAM,CAAC;MACzBzD,IAAI,EAAEsD,IAAI,CAACtD,IAAI;MACfwD;IACD,CAAC;EACF;;EAEA;EACA,MAAMe,WAAWA,CAACjB,IAAI,EAAEjF,GAAG,EAAEiG,EAAE,EAAE;IAChC,MAAME,OAAO,GAAGrN,MAAM,CAACoJ,MAAM,CAAC+D,EAAE,CAAC;IACjC,MAAMG,SAAS,GAAG,MAAMV,MAAM,CAACL,MAAM,CAACM,MAAM,CAACU,SAAS,CAAC,KAAK,EAAErG,GAAG,EAAE;MAAE8F,IAAI,EAAE;IAAU,CAAC,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAErH,OAAOJ,MAAM,CAACL,MAAM,CAACM,MAAM,CAACW,OAAO,CAAC;MAAER,IAAI,EAAE,SAAS;MAAES,OAAO,EAAEJ,OAAO;MAAE/I,MAAM,EAAE;IAAG,CAAC,EAAEgJ,SAAS,EAAEnB,IAAI,CAAC;EACxG;;EAEA;EACA,MAAMuB,WAAWA,CAACC,IAAI,EAAE;IACvB,MAAMrB,MAAM,GAAGC,MAAM,CAACC,eAAe,CAAC,IAAIT,UAAU,CAAC,EAAE,CAAC,CAAC;IAEzD,IAAI;MACH,MAAMU,MAAM,GAAG,MAAMxL,UAAU,CAACqL,MAAM,EAAE,IAAI,CAACxH,eAAe,EAAE6I,IAAI,CAAC;MACnE,OAAO,IAAI,CAAC5H,KAAK,GAAG/F,MAAM,CAAC8L,MAAM,CAAChL,yBAAyB,CAACwL,MAAM,EAAEG,MAAM,CAAC,CAAC;IAC7E,CAAC,CAAC,OAAO/H,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACZ;EACD;;EAEA;EACA,MAAMkJ,qBAAqBA,CAACC,oBAAoB,EAAE;IACjD,MAAMF,IAAI,GAAG,IAAIG,WAAW,CAAC,CAAC,CAAChC,MAAM,CAAC5L,KAAK,CAACwJ,SAAS,CAACmE,oBAAoB,CAAC,CAAC;IAE5E,OAAO;MACNE,SAAS,EAAE,gBAAgB;MAC3BC,UAAU,EAAE,MAAM,IAAI,CAACN,WAAW,CAACC,IAAI;IACxC,CAAC;EACF;;EAEA;EACA,MAAMM,cAAcA,CAACvI,OAAO,EAAE;IAC7B,MAAM;QAAEnB,GAAG;QAAE2J;MAAqB,CAAC,GAAGxI,OAAO;MAAhBkE,IAAI,GAAArK,wBAAA,CAAKmG,OAAO,EAAAyI,UAAA;IAE7C,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACR,qBAAqB,CAAC;MAAErJ,GAAG;MAAE2J;IAAY,CAAC,CAAC;IAEtE,OAAAtO,aAAA,CAAAA,aAAA,KACIgK,IAAI;MACPwE,OAAO;MACP1N,CAAC,EAAE,KAAK;MACRqB,GAAG,EAAE;IAAS;EAEhB;;EAEA;EACAsM,OAAOA,CAAC3I,OAAO,EAAE;IAChB,IAAI,CAAC,IAAI,CAACkD,mBAAmB,CAAC,IAAI,CAACrF,UAAU,CAAC,EAAE;MAC/C;IACD;IAEA,IAAI,CAAC,IAAI,CAACuB,eAAe,EAAE;MAC1B,MAAM,IAAIwJ,KAAK,CAAC5N,CAAC,CAAC,iBAAiB,CAAC,CAAC;IACtC;IAEA,MAAM6N,EAAE,GAAG,IAAIC,IAAI,CAAC,CAAC;IAErB,MAAMb,IAAI,GAAG,IAAIG,WAAW,CAAC,OAAO,CAAC,CAAChC,MAAM,CAC3C5L,KAAK,CAACwJ,SAAS,CAAC;MACfpG,GAAG,EAAEoC,OAAO,CAACpC,GAAG;MAChBmL,IAAI,EAAE/I,OAAO,CAACnB,GAAG;MACjBtB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBsL;IACD,CAAC,CACF,CAAC;IAED,OAAO,IAAI,CAACb,WAAW,CAACC,IAAI,CAAC;EAC9B;EAEA,MAAMe,cAAcA,CAACf,IAAI,EAAE;IAC1B,IAAIA,IAAI,CAACS,OAAO,IAAIT,IAAI,CAACS,OAAO,CAACL,SAAS,KAAK,gBAAgB,EAAE;MAChE,MAAMK,OAAO,GAAG,MAAM,IAAI,CAACZ,OAAO,CAACG,IAAI,CAACS,OAAO,CAACJ,UAAU,CAAC;MAC3DW,MAAM,CAACC,MAAM,CAACjB,IAAI,EAAES,OAAO,CAAC;IAC7B;IAEA,OAAOT,IAAI;EACZ;;EAEA;EACA,MAAMtH,cAAcA,CAACX,OAAO,EAAE;IAC7B,IAAIA,OAAO,CAAChF,CAAC,KAAK,KAAK,IAAIgF,OAAO,CAAC3D,GAAG,KAAK,MAAM,EAAE;MAClD,OAAO2D,OAAO;IACf;IAEA,IAAIA,OAAO,CAACnB,GAAG,EAAE;MAChB,MAAMoJ,IAAI,GAAG,MAAM,IAAI,CAACH,OAAO,CAAC9H,OAAO,CAACnB,GAAG,CAAC;MAE5C,IAAIoJ,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEc,IAAI,EAAE;QACf/I,OAAO,CAACnB,GAAG,GAAGoJ,IAAI,CAACc,IAAI;MACxB;IACD;IAEA/I,OAAO,GAAG,MAAM,IAAI,CAACgJ,cAAc,CAAChJ,OAAO,CAAC;IAE5C,OAAA9F,aAAA,CAAAA,aAAA,KACI8F,OAAO;MACV3D,GAAG,EAAE;IAAM;EAEb;EAEA,MAAMyL,OAAOA,CAAC9H,OAAO,EAAE;IACtB,MAAMK,KAAK,GAAGL,OAAO,CAACyD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAElC,IAAI0F,MAAM,GAAG,EAAE;IACf,IAAI9I,KAAK,KAAK,IAAI,CAACA,KAAK,EAAE;MAAA,IAAA+I,aAAA;MACzB,MAAMnD,UAAU,IAAAmD,aAAA,GAAG,IAAI,CAACnH,OAAO,cAAAmH,aAAA,uBAAZA,aAAA,CAAc3G,IAAI,CAAEjB,GAAG,IAAKA,GAAG,CAACzD,QAAQ,KAAKsC,KAAK,CAAC;MACtE;MACA;MACA;MACA,IAAI,CAAC4F,UAAU,EAAE;QAChB,IAAI,CAACjH,KAAK,6CAAAT,MAAA,CAA6C8B,KAAK,gCAA6B,CAAC;QAC1F,OAAO;UAAExB,GAAG,EAAE7D,CAAC,CAAC,oBAAoB;QAAE,CAAC;MACxC;MACAmO,MAAM,GAAGlD,UAAU,CAACrE,MAAM;IAC3B;IAEA5B,OAAO,GAAGA,OAAO,CAACyD,KAAK,CAAC,EAAE,CAAC;IAE3B,MAAM,CAACmD,MAAM,EAAEyC,UAAU,CAAC,GAAGhO,0BAA0B,CAACf,MAAM,CAACoJ,MAAM,CAAC1D,OAAO,CAAC,CAAC;IAE/E,IAAI;MACH,MAAM+G,MAAM,GAAG,MAAMtL,UAAU,CAACmL,MAAM,EAAEuC,MAAM,IAAI,IAAI,CAAC/J,eAAe,EAAEiK,UAAU,CAAC;MACnF,OAAO7O,KAAK,CAACgJ,KAAK,CAAC,IAAI8F,WAAW,CAAC,OAAO,CAAC,CAAC5F,MAAM,CAAC,IAAI2C,UAAU,CAACU,MAAM,CAAC,CAAC,CAAC;IAC5E,CAAC,CAAC,OAAO/H,KAAK,EAAE;MACf,IAAI,CAACA,KAAK,CAAC,4BAA4B,EAAEA,KAAK,EAAEgB,OAAO,CAAC;MACxD,OAAO;QAAEnB,GAAG,EAAE7D,CAAC,CAAC,eAAe;MAAE,CAAC;IACnC;EACD;EAEAuO,gBAAgBA,CAACC,KAAK,EAAE;IACvB,IAAI,IAAI,CAACnJ,KAAK,KAAKmJ,KAAK,EAAE;MACzB;IACD;IAEA,IAAI,CAACjF,8BAA8B,CAAC,CAAC;IACrC,IAAI,CAAC9F,QAAQ,CAACxD,YAAY,CAAC6B,KAAK,CAAC;EAClC;EAEA2M,aAAaA,CAACC,EAAE,EAAE;IACjB,IAAI,CAACtL,EAAE,CAAC,eAAe,EAAEsL,EAAE,CAAC;IAC5B,OAAO,MAAM,IAAI,CAACC,GAAG,CAAC,eAAe,EAAED,EAAE,CAAC;EAC3C;EAEA,MAAME,+CAA+CA,CAAC9E,KAAK,EAAE;IAC5D,IAAI,CAAC,IAAI,CAACtF,OAAO,CAAC,CAAC,EAAE;MACpB;IACD;IAEA,MAAMoF,KAAK,GAAG/J,aAAa,CAAC2F,OAAO,CAAC;MAAEC,GAAG,EAAE,IAAI,CAAC9C;IAAO,CAAC,CAAC;IACzD,MAAMkH,qBAAqB,GAAG,MAAM,IAAI,CAAC3C,iBAAiB,CAAC0C,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE7D,WAAW,CAAC;IAC9E,MAAM8I,aAAa,GAAG,MAAM5J,OAAO,CAAC6J,GAAG,CACtChF,KAAK,CAACiF,GAAG,CAAC,MAAO/E,IAAI,IAAK;MACzB,MAAM;QAAEpH,GAAG;QAAEsH;MAAW,CAAC,GAAGF,IAAI;MAChC,MAAMxD,GAAG,GAAG,MAAM,IAAI,CAAC6C,6BAA6B,CAACa,UAAU,CAAC;MAChE,MAAMjD,OAAO,GAAG,MAAM,IAAI,CAACyD,4BAA4B,CAACR,UAAU,EAAEL,qBAAqB,CAAC;MAC1F,OAAA3K,aAAA;QAAS0D,GAAG;QAAE4D;MAAG,GAAMS,OAAO,IAAI;QAAEA;MAAQ,CAAC;IAC9C,CAAC,CACF,CAAC;IAED,OAAO4H,aAAa;EACrB;AACD","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0c31563246a455994be3310adb098e7158337c67"}
