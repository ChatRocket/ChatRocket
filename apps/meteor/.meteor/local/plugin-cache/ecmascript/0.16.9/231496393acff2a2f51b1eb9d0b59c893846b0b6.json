{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/startup/index.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/authentication/server/startup/index.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/startup/index.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/authentication/server/startup/index.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/authentication/server/startup/index.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 0);\n    let User;\n    module.link(\"@rocket.chat/core-services\", {\n      User(v) {\n        User = v;\n      }\n    }, 1);\n    let Roles, Settings, Users;\n    module.link(\"@rocket.chat/models\", {\n      Roles(v) {\n        Roles = v;\n      },\n      Settings(v) {\n        Settings = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let escapeRegExp, escapeHTML;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      },\n      escapeHTML(v) {\n        escapeHTML = v;\n      }\n    }, 3);\n    let getLoginExpirationInDays;\n    module.link(\"@rocket.chat/tools\", {\n      getLoginExpirationInDays(v) {\n        getLoginExpirationInDays = v;\n      }\n    }, 4);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 5);\n    let Match;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      }\n    }, 6);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 7);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 8);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 9);\n    let beforeCreateUserCallback;\n    module.link(\"../../../../lib/callbacks/beforeCreateUserCallback\", {\n      beforeCreateUserCallback(v) {\n        beforeCreateUserCallback = v;\n      }\n    }, 10);\n    let parseCSV;\n    module.link(\"../../../../lib/utils/parseCSV\", {\n      parseCSV(v) {\n        parseCSV = v;\n      }\n    }, 11);\n    let safeHtmlDots;\n    module.link(\"../../../../lib/utils/safeHtmlDots\", {\n      safeHtmlDots(v) {\n        safeHtmlDots = v;\n      }\n    }, 12);\n    let getClientAddress;\n    module.link(\"../../../../server/lib/getClientAddress\", {\n      getClientAddress(v) {\n        getClientAddress = v;\n      }\n    }, 13);\n    let getMaxLoginTokens;\n    module.link(\"../../../../server/lib/getMaxLoginTokens\", {\n      getMaxLoginTokens(v) {\n        getMaxLoginTokens = v;\n      }\n    }, 14);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 15);\n    let addUserRolesAsync;\n    module.link(\"../../../../server/lib/roles/addUserRoles\", {\n      addUserRolesAsync(v) {\n        addUserRolesAsync = v;\n      }\n    }, 16);\n    let getNewUserRoles;\n    module.link(\"../../../../server/services/user/lib/getNewUserRoles\", {\n      getNewUserRoles(v) {\n        getNewUserRoles = v;\n      }\n    }, 17);\n    let getAvatarSuggestionForUser;\n    module.link(\"../../../lib/server/functions/getAvatarSuggestionForUser\", {\n      getAvatarSuggestionForUser(v) {\n        getAvatarSuggestionForUser = v;\n      }\n    }, 18);\n    let joinDefaultChannels;\n    module.link(\"../../../lib/server/functions/joinDefaultChannels\", {\n      joinDefaultChannels(v) {\n        joinDefaultChannels = v;\n      }\n    }, 19);\n    let setAvatarFromServiceWithValidation;\n    module.link(\"../../../lib/server/functions/setUserAvatar\", {\n      setAvatarFromServiceWithValidation(v) {\n        setAvatarFromServiceWithValidation = v;\n      }\n    }, 20);\n    let notifyOnSettingChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 21);\n    let Mailer;\n    module.link(\"../../../mailer/server/api\", {\n      \"*\"(v) {\n        Mailer = v;\n      }\n    }, 22);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 23);\n    let safeGetMeteorUser;\n    module.link(\"../../../utils/server/functions/safeGetMeteorUser\", {\n      safeGetMeteorUser(v) {\n        safeGetMeteorUser = v;\n      }\n    }, 24);\n    let isValidAttemptByUser, isValidLoginAttemptByIp;\n    module.link(\"../lib/restrictLoginAttempts\", {\n      isValidAttemptByUser(v) {\n        isValidAttemptByUser = v;\n      },\n      isValidLoginAttemptByIp(v) {\n        isValidLoginAttemptByIp = v;\n      }\n    }, 25);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Accounts.config({\n      forbidClientAccountCreation: true,\n      defaultFieldSelector: {\n        username: 1,\n        email: 1,\n        settings: 1,\n        active: 1\n      }\n    });\n    Meteor.startup(() => {\n      settings.watchMultiple(['Accounts_LoginExpiration', 'Site_Name', 'From_Email'], () => {\n        Accounts._options.loginExpirationInDays = getLoginExpirationInDays(settings.get('Accounts_LoginExpiration'));\n        Accounts.emailTemplates.siteName = settings.get('Site_Name');\n        Accounts.emailTemplates.from = \"\".concat(settings.get('Site_Name'), \" <\").concat(settings.get('From_Email'), \">\");\n      });\n    });\n    Accounts.emailTemplates.userToActivate = {\n      subject() {\n        const subject = i18n.t('Accounts_Admin_Email_Approval_Needed_Subject_Default');\n        const siteName = settings.get('Site_Name');\n        return \"[\".concat(siteName, \"] \").concat(subject);\n      },\n      html() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const email = options.reason ? 'Accounts_Admin_Email_Approval_Needed_With_Reason_Default' : 'Accounts_Admin_Email_Approval_Needed_Default';\n        return Mailer.replace(i18n.t(email), {\n          name: escapeHTML(options.name),\n          email: escapeHTML(options.email),\n          reason: escapeHTML(options.reason)\n        });\n      }\n    };\n    Accounts.emailTemplates.userActivated = {\n      subject(_ref) {\n        let {\n          active,\n          username\n        } = _ref;\n        const activated = username ? 'Activated' : 'Approved';\n        const action = active ? activated : 'Deactivated';\n        const subject = \"Accounts_Email_\".concat(action, \"_Subject\");\n        const siteName = settings.get('Site_Name');\n        return \"[\".concat(siteName, \"] \").concat(i18n.t(subject));\n      },\n      html(_ref2) {\n        let {\n          active,\n          name,\n          username\n        } = _ref2;\n        const activated = username ? 'Activated' : 'Approved';\n        const action = active ? activated : 'Deactivated';\n        return Mailer.replace(i18n.t(\"Accounts_Email_\".concat(action)), {\n          name: escapeHTML(name)\n        });\n      }\n    };\n    let verifyEmailTemplate = '';\n    let enrollAccountTemplate = '';\n    let resetPasswordTemplate = '';\n    Meteor.startup(() => {\n      Mailer.getTemplateWrapped('Verification_Email', value => {\n        verifyEmailTemplate = value;\n      });\n      Mailer.getTemplateWrapped('Accounts_Enrollment_Email', value => {\n        enrollAccountTemplate = value;\n      });\n      Mailer.getTemplateWrapped('Forgot_Password_Email', value => {\n        resetPasswordTemplate = value;\n      });\n    });\n    Accounts.emailTemplates.verifyEmail.html = function (userModel, url) {\n      const name = safeHtmlDots(userModel.name);\n      return Mailer.replace(verifyEmailTemplate, {\n        Verification_Url: url,\n        name\n      });\n    };\n    Accounts.emailTemplates.verifyEmail.subject = function () {\n      const subject = settings.get('Verification_Email_Subject');\n      return Mailer.replace(subject || '');\n    };\n    Accounts.urls.resetPassword = function (token) {\n      return Meteor.absoluteUrl(\"reset-password/\".concat(token));\n    };\n    Accounts.emailTemplates.resetPassword.subject = function (userModel) {\n      return Mailer.replace(settings.get('Forgot_Password_Email_Subject') || '', {\n        name: userModel.name\n      });\n    };\n    Accounts.emailTemplates.resetPassword.html = function (userModel, url) {\n      return Mailer.replacekey(Mailer.replace(resetPasswordTemplate, {\n        name: userModel.name\n      }), 'Forgot_Password_Url', url);\n    };\n    Accounts.emailTemplates.enrollAccount.subject = function (user) {\n      const subject = settings.get('Accounts_Enrollment_Email_Subject');\n      return Mailer.replace(subject, user);\n    };\n    Accounts.emailTemplates.enrollAccount.html = function () {\n      let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Mailer.replace(enrollAccountTemplate, {\n        name: escapeHTML(user.name),\n        email: user.emails && user.emails[0] && escapeHTML(user.emails[0].address)\n      });\n    };\n    const getLinkedInName = _ref3 => {\n      let {\n        firstName,\n        lastName\n      } = _ref3;\n      const {\n        preferredLocale,\n        localized: firstNameLocalized\n      } = firstName;\n      const {\n        localized: lastNameLocalized\n      } = lastName;\n\n      // LinkedIn new format\n      if (preferredLocale && firstNameLocalized && preferredLocale.language && preferredLocale.country) {\n        const locale = \"\".concat(preferredLocale.language, \"_\").concat(preferredLocale.country);\n        if (firstNameLocalized[locale] && lastNameLocalized[locale]) {\n          return \"\".concat(firstNameLocalized[locale], \" \").concat(lastNameLocalized[locale]);\n        }\n        if (firstNameLocalized[locale]) {\n          return firstNameLocalized[locale];\n        }\n      }\n\n      // LinkedIn old format\n      if (!lastName) {\n        return firstName;\n      }\n      return \"\".concat(firstName, \" \").concat(lastName);\n    };\n    const validateEmailDomain = user => {\n      var _domainWhiteList;\n      if (user.type === 'visitor') {\n        return true;\n      }\n      let domainWhiteList = settings.get('Accounts_AllowedDomainsList');\n      if (_.isEmpty((_domainWhiteList = domainWhiteList) === null || _domainWhiteList === void 0 ? void 0 : _domainWhiteList.trim())) {\n        return true;\n      }\n      domainWhiteList = domainWhiteList.split(',').map(domain => domain.trim());\n      if (user.emails && user.emails.length > 0) {\n        const email = user.emails[0].address;\n        const inWhiteList = domainWhiteList.some(domain => email.match(\"@\".concat(escapeRegExp(domain), \"$\")));\n        if (!inWhiteList) {\n          throw new Meteor.Error('error-invalid-domain');\n        }\n      }\n      return true;\n    };\n    const onCreateUserAsync = async function (options) {\n      let user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!options.skipBeforeCreateUserCallback) {\n        await beforeCreateUserCallback.run(options, user);\n      }\n      user.status = 'offline';\n      user.active = user.active !== undefined ? user.active : !settings.get('Accounts_ManuallyApproveNewUsers');\n      if (!user.name) {\n        if (options.profile) {\n          if (options.profile.name) {\n            user.name = options.profile.name;\n          } else if (options.profile.firstName) {\n            // LinkedIn format\n            user.name = getLinkedInName(options.profile);\n          }\n        }\n      }\n      if (user.services) {\n        const verified = settings.get('Accounts_Verify_Email_For_External_Accounts');\n        for (const service of Object.values(user.services)) {\n          if (!user.name) {\n            user.name = service.name || service.username;\n          }\n          if (!user.emails && service.email) {\n            user.emails = [{\n              address: service.email,\n              verified\n            }];\n          }\n        }\n      }\n      if (!options.skipAdminEmail && !user.active) {\n        var _options$profile;\n        const destinations = [];\n        const usersInRole = await Roles.findUsersInRole('admin');\n        await usersInRole.forEach(adminUser => {\n          if (Array.isArray(adminUser.emails)) {\n            adminUser.emails.forEach(email => {\n              destinations.push(\"\".concat(adminUser.name, \"<\").concat(email.address, \">\"));\n            });\n          }\n        });\n        const email = {\n          to: destinations,\n          from: settings.get('From_Email'),\n          subject: Accounts.emailTemplates.userToActivate.subject(),\n          html: Accounts.emailTemplates.userToActivate.html(_objectSpread(_objectSpread({}, options), {}, {\n            name: options.name || ((_options$profile = options.profile) === null || _options$profile === void 0 ? void 0 : _options$profile.name),\n            email: options.email || user.emails[0].address\n          }))\n        };\n        await Mailer.send(email);\n      }\n      if (!options.skipOnCreateUserCallback) {\n        await callbacks.run('onCreateUser', options, user);\n      }\n      if (!options.skipEmailValidation && !validateEmailDomain(user)) {\n        throw new Meteor.Error(403, 'User validation failed');\n      }\n      return user;\n    };\n    Accounts.onCreateUser(function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      // Depends on meteor support for Async\n      return onCreateUserAsync.call(this, ...args);\n    });\n    const {\n      insertUserDoc\n    } = Accounts;\n    Accounts.insertUserDoc = async function (options, user) {\n      const globalRoles = new Set();\n      if (Match.test(options.globalRoles, [String]) && options.globalRoles.length > 0) {\n        options.globalRoles.map(role => globalRoles.add(role));\n      }\n      if (Match.test(user.globalRoles, [String]) && user.globalRoles.length > 0) {\n        user.globalRoles.map(role => globalRoles.add(role));\n      }\n      delete user.globalRoles;\n      if (user.services && !user.services.password) {\n        const defaultAuthServiceRoles = parseCSV(settings.get('Accounts_Registration_AuthenticationServices_Default_Roles') || '');\n        if (defaultAuthServiceRoles.length > 0) {\n          defaultAuthServiceRoles.map(role => globalRoles.add(role));\n        }\n      }\n      const arrayGlobalRoles = [...globalRoles];\n      const roles = options.skipNewUserRolesSetting ? arrayGlobalRoles : getNewUserRoles(arrayGlobalRoles);\n      if (!user.type) {\n        user.type = 'user';\n      }\n      if (settings.get('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In')) {\n        user.services = user.services || {};\n        user.services.email2fa = {\n          enabled: true,\n          changedAt: new Date()\n        };\n      }\n\n      // Make sure that the user has the field 'roles'\n      if (!user.roles) {\n        user.roles = [];\n      }\n      const _id = await insertUserDoc.call(Accounts, options, user);\n      user = await Users.findOne({\n        _id\n      });\n\n      /**\n       * if settings shows setup wizard to be pending\n       * and no admin's been found,\n       * and existing role list doesn't include admin\n       * create this user admin.\n       * count this as the completion of setup wizard step 1.\n       */\n      if (!options.skipAdminCheck) {\n        const hasAdmin = await Users.findOneByRolesAndType('admin', 'user', {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!roles.includes('admin') && !hasAdmin) {\n          roles.push('admin');\n          if (settings.get('Show_Setup_Wizard') === 'pending') {\n            (await Settings.updateValueById('Show_Setup_Wizard', 'in_progress')).modifiedCount && void notifyOnSettingChangedById('Show_Setup_Wizard');\n          }\n        }\n      }\n      await addUserRolesAsync(_id, roles);\n\n      // Make user's roles to be present on callback\n      user = await Users.findOneById(_id, {\n        projection: {\n          username: 1,\n          type: 1,\n          roles: 1\n        }\n      });\n      if (user.username) {\n        if (options.joinDefaultChannels !== false) {\n          await joinDefaultChannels(_id, options.joinDefaultChannelsSilenced);\n        }\n        if (!options.skipAfterCreateUserCallback && user.type !== 'visitor') {\n          setImmediate(() => {\n            return callbacks.run('afterCreateUser', user);\n          });\n        }\n        if (!options.skipDefaultAvatar && settings.get('Accounts_SetDefaultAvatar') === true) {\n          const avatarSuggestions = await getAvatarSuggestionForUser(user);\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(Object.keys(avatarSuggestions)), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              const service = _step.value;\n              {\n                const avatarData = avatarSuggestions[service];\n                if (service !== 'gravatar') {\n                  await setAvatarFromServiceWithValidation(_id, avatarData.blob, '', service);\n                  break;\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n      if (!options.skipAppsEngineEvent) {\n        var _Apps$self;\n        // `post` triggered events don't need to wait for the promise to resolve\n        (_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : _Apps$self.triggerEvent(AppEvents.IPostUserCreated, {\n          user,\n          performedBy: await safeGetMeteorUser()\n        }).catch(e => {\n          var _Apps$self2;\n          (_Apps$self2 = Apps.self) === null || _Apps$self2 === void 0 ? void 0 : _Apps$self2.getRocketChatLogger().error('Error while executing post user created event:', e);\n        });\n      }\n      return _id;\n    };\n    const validateLoginAttemptAsync = async function (login) {\n      login = await callbacks.run('beforeValidateLogin', login);\n      if (!(await isValidLoginAttemptByIp(getClientAddress(login.connection)))) {\n        throw new Meteor.Error('error-login-blocked-for-ip', 'Login has been temporarily blocked For IP', {\n          function: 'Accounts.validateLoginAttempt'\n        });\n      }\n      if (!(await isValidAttemptByUser(login))) {\n        throw new Meteor.Error('error-login-blocked-for-user', 'Login has been temporarily blocked For User', {\n          function: 'Accounts.validateLoginAttempt'\n        });\n      }\n      if (login.allowed !== true) {\n        return login.allowed;\n      }\n      if (login.user.type === 'visitor') {\n        return true;\n      }\n      if (login.user.type === 'app') {\n        throw new Meteor.Error('error-app-user-is-not-allowed-to-login', 'App user is not allowed to login', {\n          function: 'Accounts.validateLoginAttempt'\n        });\n      }\n      if (!!login.user.active !== true) {\n        throw new Meteor.Error('error-user-is-not-activated', 'User is not activated', {\n          function: 'Accounts.validateLoginAttempt'\n        });\n      }\n      if (!login.user.roles || !Array.isArray(login.user.roles)) {\n        throw new Meteor.Error('error-user-has-no-roles', 'User has no roles', {\n          function: 'Accounts.validateLoginAttempt'\n        });\n      }\n      if (login.user.roles.includes('admin') === false && login.type === 'password' && settings.get('Accounts_EmailVerification') === true) {\n        const validEmail = login.user.emails.filter(email => email.verified === true);\n        if (validEmail.length === 0) {\n          throw new Meteor.Error('error-invalid-email', 'Invalid email __email__');\n        }\n      }\n      login = await callbacks.run('onValidateLogin', login);\n      await Users.updateLastLoginById(login.user._id);\n      setImmediate(() => {\n        return callbacks.run('afterValidateLogin', login);\n      });\n\n      /**\n       * Trigger the event only when the\n       * user does login in Rocket.chat\n       */\n      if (login.type !== 'resume') {\n        var _Apps$self3;\n        // App IPostUserLoggedIn event hook\n        await ((_Apps$self3 = Apps.self) === null || _Apps$self3 === void 0 ? void 0 : _Apps$self3.triggerEvent(AppEvents.IPostUserLoggedIn, login.user));\n      }\n      return true;\n    };\n    Accounts.validateLoginAttempt(function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      // Depends on meteor support for Async\n      return validateLoginAttemptAsync.call(this, ...args);\n    });\n    Accounts.validateNewUser(user => {\n      if (user.type === 'visitor') {\n        return true;\n      }\n      if (settings.get('Accounts_Registration_AuthenticationServices_Enabled') === false && settings.get('LDAP_Enable') === false && !(user.services && user.services.password)) {\n        throw new Meteor.Error('registration-disabled-authentication-services', 'User registration is disabled for authentication services');\n      }\n      return true;\n    });\n    Accounts.validateNewUser(user => {\n      var _domainWhiteList2;\n      if (user.type === 'visitor') {\n        return true;\n      }\n      let domainWhiteList = settings.get('Accounts_AllowedDomainsList');\n      if (_.isEmpty((_domainWhiteList2 = domainWhiteList) === null || _domainWhiteList2 === void 0 ? void 0 : _domainWhiteList2.trim())) {\n        return true;\n      }\n      domainWhiteList = domainWhiteList.split(',').map(domain => domain.trim());\n      if (user.emails && user.emails.length > 0) {\n        const email = user.emails[0].address;\n        const inWhiteList = domainWhiteList.some(domain => email.match(\"@\".concat(escapeRegExp(domain), \"$\")));\n        if (inWhiteList === false) {\n          throw new Meteor.Error('error-invalid-domain');\n        }\n      }\n      return true;\n    });\n    Accounts.onLogin(async _ref4 => {\n      let {\n        user\n      } = _ref4;\n      if (!user || !user.services || !user.services.resume || !user.services.resume.loginTokens || !user._id) {\n        return;\n      }\n      if (user.services.resume.loginTokens.length < getMaxLoginTokens()) {\n        return;\n      }\n      await User.ensureLoginTokensLimit(user._id);\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","Apps","AppEvents","User","Roles","Settings","Users","escapeRegExp","escapeHTML","getLoginExpirationInDays","Accounts","Match","Meteor","_","callbacks","beforeCreateUserCallback","parseCSV","safeHtmlDots","getClientAddress","getMaxLoginTokens","i18n","addUserRolesAsync","getNewUserRoles","getAvatarSuggestionForUser","joinDefaultChannels","setAvatarFromServiceWithValidation","notifyOnSettingChangedById","Mailer","*","settings","safeGetMeteorUser","isValidAttemptByUser","isValidLoginAttemptByIp","__reifyWaitForDeps__","config","forbidClientAccountCreation","defaultFieldSelector","username","email","active","startup","watchMultiple","_options","loginExpirationInDays","get","emailTemplates","siteName","from","concat","userToActivate","subject","t","html","options","arguments","length","undefined","reason","replace","name","userActivated","_ref","activated","action","_ref2","verifyEmailTemplate","enrollAccountTemplate","resetPasswordTemplate","getTemplateWrapped","value","verifyEmail","userModel","url","Verification_Url","urls","resetPassword","token","absoluteUrl","replacekey","enrollAccount","user","emails","address","getLinkedInName","_ref3","firstName","lastName","preferredLocale","localized","firstNameLocalized","lastNameLocalized","language","country","locale","validateEmailDomain","_domainWhiteList","type","domainWhiteList","isEmpty","trim","split","map","domain","inWhiteList","some","match","Error","onCreateUserAsync","skipBeforeCreateUserCallback","run","status","profile","services","verified","service","Object","values","skipAdminEmail","_options$profile","destinations","usersInRole","findUsersInRole","forEach","adminUser","Array","isArray","push","to","send","skipOnCreateUserCallback","skipEmailValidation","onCreateUser","_len","args","_key","call","insertUserDoc","globalRoles","Set","test","String","role","add","password","defaultAuthServiceRoles","arrayGlobalRoles","roles","skipNewUserRolesSetting","email2fa","enabled","changedAt","Date","_id","findOne","skipAdminCheck","hasAdmin","findOneByRolesAndType","projection","includes","updateValueById","modifiedCount","findOneById","joinDefaultChannelsSilenced","skipAfterCreateUserCallback","setImmediate","skipDefaultAvatar","avatarSuggestions","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","keys","_step","next","done","avatarData","blob","err","return","skipAppsEngineEvent","_Apps$self","self","triggerEvent","IPostUserCreated","performedBy","catch","e","_Apps$self2","getRocketChatLogger","error","validateLoginAttemptAsync","login","connection","function","allowed","validEmail","filter","updateLastLoginById","_Apps$self3","IPostUserLoggedIn","validateLoginAttempt","_len2","_key2","validateNewUser","_domainWhiteList2","onLogin","_ref4","resume","loginTokens","ensureLoginTokensLimit","__reify_async_result__","_reifyError","async"],"sources":["app/authentication/server/startup/index.js"],"sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { User } from '@rocket.chat/core-services';\nimport { Roles, Settings, Users } from '@rocket.chat/models';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\nimport { getLoginExpirationInDays } from '@rocket.chat/tools';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { beforeCreateUserCallback } from '../../../../lib/callbacks/beforeCreateUserCallback';\nimport { parseCSV } from '../../../../lib/utils/parseCSV';\nimport { safeHtmlDots } from '../../../../lib/utils/safeHtmlDots';\nimport { getClientAddress } from '../../../../server/lib/getClientAddress';\nimport { getMaxLoginTokens } from '../../../../server/lib/getMaxLoginTokens';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { addUserRolesAsync } from '../../../../server/lib/roles/addUserRoles';\nimport { getNewUserRoles } from '../../../../server/services/user/lib/getNewUserRoles';\nimport { getAvatarSuggestionForUser } from '../../../lib/server/functions/getAvatarSuggestionForUser';\nimport { joinDefaultChannels } from '../../../lib/server/functions/joinDefaultChannels';\nimport { setAvatarFromServiceWithValidation } from '../../../lib/server/functions/setUserAvatar';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport { safeGetMeteorUser } from '../../../utils/server/functions/safeGetMeteorUser';\nimport { isValidAttemptByUser, isValidLoginAttemptByIp } from '../lib/restrictLoginAttempts';\n\nAccounts.config({\n\tforbidClientAccountCreation: true,\n\tdefaultFieldSelector: { username: 1, email: 1, settings: 1, active: 1 },\n});\n\nMeteor.startup(() => {\n\tsettings.watchMultiple(['Accounts_LoginExpiration', 'Site_Name', 'From_Email'], () => {\n\t\tAccounts._options.loginExpirationInDays = getLoginExpirationInDays(settings.get('Accounts_LoginExpiration'));\n\n\t\tAccounts.emailTemplates.siteName = settings.get('Site_Name');\n\n\t\tAccounts.emailTemplates.from = `${settings.get('Site_Name')} <${settings.get('From_Email')}>`;\n\t});\n});\n\nAccounts.emailTemplates.userToActivate = {\n\tsubject() {\n\t\tconst subject = i18n.t('Accounts_Admin_Email_Approval_Needed_Subject_Default');\n\t\tconst siteName = settings.get('Site_Name');\n\n\t\treturn `[${siteName}] ${subject}`;\n\t},\n\n\thtml(options = {}) {\n\t\tconst email = options.reason\n\t\t\t? 'Accounts_Admin_Email_Approval_Needed_With_Reason_Default'\n\t\t\t: 'Accounts_Admin_Email_Approval_Needed_Default';\n\n\t\treturn Mailer.replace(i18n.t(email), {\n\t\t\tname: escapeHTML(options.name),\n\t\t\temail: escapeHTML(options.email),\n\t\t\treason: escapeHTML(options.reason),\n\t\t});\n\t},\n};\n\nAccounts.emailTemplates.userActivated = {\n\tsubject({ active, username }) {\n\t\tconst activated = username ? 'Activated' : 'Approved';\n\t\tconst action = active ? activated : 'Deactivated';\n\t\tconst subject = `Accounts_Email_${action}_Subject`;\n\t\tconst siteName = settings.get('Site_Name');\n\n\t\treturn `[${siteName}] ${i18n.t(subject)}`;\n\t},\n\n\thtml({ active, name, username }) {\n\t\tconst activated = username ? 'Activated' : 'Approved';\n\t\tconst action = active ? activated : 'Deactivated';\n\n\t\treturn Mailer.replace(i18n.t(`Accounts_Email_${action}`), {\n\t\t\tname: escapeHTML(name),\n\t\t});\n\t},\n};\n\nlet verifyEmailTemplate = '';\nlet enrollAccountTemplate = '';\nlet resetPasswordTemplate = '';\nMeteor.startup(() => {\n\tMailer.getTemplateWrapped('Verification_Email', (value) => {\n\t\tverifyEmailTemplate = value;\n\t});\n\tMailer.getTemplateWrapped('Accounts_Enrollment_Email', (value) => {\n\t\tenrollAccountTemplate = value;\n\t});\n\tMailer.getTemplateWrapped('Forgot_Password_Email', (value) => {\n\t\tresetPasswordTemplate = value;\n\t});\n});\n\nAccounts.emailTemplates.verifyEmail.html = function (userModel, url) {\n\tconst name = safeHtmlDots(userModel.name);\n\n\treturn Mailer.replace(verifyEmailTemplate, { Verification_Url: url, name });\n};\n\nAccounts.emailTemplates.verifyEmail.subject = function () {\n\tconst subject = settings.get('Verification_Email_Subject');\n\treturn Mailer.replace(subject || '');\n};\n\nAccounts.urls.resetPassword = function (token) {\n\treturn Meteor.absoluteUrl(`reset-password/${token}`);\n};\n\nAccounts.emailTemplates.resetPassword.subject = function (userModel) {\n\treturn Mailer.replace(settings.get('Forgot_Password_Email_Subject') || '', {\n\t\tname: userModel.name,\n\t});\n};\n\nAccounts.emailTemplates.resetPassword.html = function (userModel, url) {\n\treturn Mailer.replacekey(\n\t\tMailer.replace(resetPasswordTemplate, {\n\t\t\tname: userModel.name,\n\t\t}),\n\t\t'Forgot_Password_Url',\n\t\turl,\n\t);\n};\n\nAccounts.emailTemplates.enrollAccount.subject = function (user) {\n\tconst subject = settings.get('Accounts_Enrollment_Email_Subject');\n\treturn Mailer.replace(subject, user);\n};\n\nAccounts.emailTemplates.enrollAccount.html = function (user = {} /* , url*/) {\n\treturn Mailer.replace(enrollAccountTemplate, {\n\t\tname: escapeHTML(user.name),\n\t\temail: user.emails && user.emails[0] && escapeHTML(user.emails[0].address),\n\t});\n};\n\nconst getLinkedInName = ({ firstName, lastName }) => {\n\tconst { preferredLocale, localized: firstNameLocalized } = firstName;\n\tconst { localized: lastNameLocalized } = lastName;\n\n\t// LinkedIn new format\n\tif (preferredLocale && firstNameLocalized && preferredLocale.language && preferredLocale.country) {\n\t\tconst locale = `${preferredLocale.language}_${preferredLocale.country}`;\n\n\t\tif (firstNameLocalized[locale] && lastNameLocalized[locale]) {\n\t\t\treturn `${firstNameLocalized[locale]} ${lastNameLocalized[locale]}`;\n\t\t}\n\t\tif (firstNameLocalized[locale]) {\n\t\t\treturn firstNameLocalized[locale];\n\t\t}\n\t}\n\n\t// LinkedIn old format\n\tif (!lastName) {\n\t\treturn firstName;\n\t}\n\treturn `${firstName} ${lastName}`;\n};\n\nconst validateEmailDomain = (user) => {\n\tif (user.type === 'visitor') {\n\t\treturn true;\n\t}\n\n\tlet domainWhiteList = settings.get('Accounts_AllowedDomainsList');\n\tif (_.isEmpty(domainWhiteList?.trim())) {\n\t\treturn true;\n\t}\n\n\tdomainWhiteList = domainWhiteList.split(',').map((domain) => domain.trim());\n\n\tif (user.emails && user.emails.length > 0) {\n\t\tconst email = user.emails[0].address;\n\t\tconst inWhiteList = domainWhiteList.some((domain) => email.match(`@${escapeRegExp(domain)}$`));\n\n\t\tif (!inWhiteList) {\n\t\t\tthrow new Meteor.Error('error-invalid-domain');\n\t\t}\n\t}\n\n\treturn true;\n};\n\nconst onCreateUserAsync = async function (options, user = {}) {\n\tif (!options.skipBeforeCreateUserCallback) {\n\t\tawait beforeCreateUserCallback.run(options, user);\n\t}\n\n\tuser.status = 'offline';\n\tuser.active = user.active !== undefined ? user.active : !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\tif (!user.name) {\n\t\tif (options.profile) {\n\t\t\tif (options.profile.name) {\n\t\t\t\tuser.name = options.profile.name;\n\t\t\t} else if (options.profile.firstName) {\n\t\t\t\t// LinkedIn format\n\t\t\t\tuser.name = getLinkedInName(options.profile);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (user.services) {\n\t\tconst verified = settings.get('Accounts_Verify_Email_For_External_Accounts');\n\n\t\tfor (const service of Object.values(user.services)) {\n\t\t\tif (!user.name) {\n\t\t\t\tuser.name = service.name || service.username;\n\t\t\t}\n\n\t\t\tif (!user.emails && service.email) {\n\t\t\t\tuser.emails = [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: service.email,\n\t\t\t\t\t\tverified,\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!options.skipAdminEmail && !user.active) {\n\t\tconst destinations = [];\n\t\tconst usersInRole = await Roles.findUsersInRole('admin');\n\t\tawait usersInRole.forEach((adminUser) => {\n\t\t\tif (Array.isArray(adminUser.emails)) {\n\t\t\t\tadminUser.emails.forEach((email) => {\n\t\t\t\t\tdestinations.push(`${adminUser.name}<${email.address}>`);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tconst email = {\n\t\t\tto: destinations,\n\t\t\tfrom: settings.get('From_Email'),\n\t\t\tsubject: Accounts.emailTemplates.userToActivate.subject(),\n\t\t\thtml: Accounts.emailTemplates.userToActivate.html({\n\t\t\t\t...options,\n\t\t\t\tname: options.name || options.profile?.name,\n\t\t\t\temail: options.email || user.emails[0].address,\n\t\t\t}),\n\t\t};\n\n\t\tawait Mailer.send(email);\n\t}\n\n\tif (!options.skipOnCreateUserCallback) {\n\t\tawait callbacks.run('onCreateUser', options, user);\n\t}\n\n\tif (!options.skipEmailValidation && !validateEmailDomain(user)) {\n\t\tthrow new Meteor.Error(403, 'User validation failed');\n\t}\n\n\treturn user;\n};\n\nAccounts.onCreateUser(function (...args) {\n\t// Depends on meteor support for Async\n\treturn onCreateUserAsync.call(this, ...args);\n});\n\nconst { insertUserDoc } = Accounts;\n\nAccounts.insertUserDoc = async function (options, user) {\n\tconst globalRoles = new Set();\n\n\tif (Match.test(options.globalRoles, [String]) && options.globalRoles.length > 0) {\n\t\toptions.globalRoles.map((role) => globalRoles.add(role));\n\t}\n\n\tif (Match.test(user.globalRoles, [String]) && user.globalRoles.length > 0) {\n\t\tuser.globalRoles.map((role) => globalRoles.add(role));\n\t}\n\n\tdelete user.globalRoles;\n\n\tif (user.services && !user.services.password) {\n\t\tconst defaultAuthServiceRoles = parseCSV(settings.get('Accounts_Registration_AuthenticationServices_Default_Roles') || '');\n\n\t\tif (defaultAuthServiceRoles.length > 0) {\n\t\t\tdefaultAuthServiceRoles.map((role) => globalRoles.add(role));\n\t\t}\n\t}\n\n\tconst arrayGlobalRoles = [...globalRoles];\n\tconst roles = options.skipNewUserRolesSetting ? arrayGlobalRoles : getNewUserRoles(arrayGlobalRoles);\n\n\tif (!user.type) {\n\t\tuser.type = 'user';\n\t}\n\n\tif (settings.get('Accounts_TwoFactorAuthentication_By_Email_Auto_Opt_In')) {\n\t\tuser.services = user.services || {};\n\t\tuser.services.email2fa = {\n\t\t\tenabled: true,\n\t\t\tchangedAt: new Date(),\n\t\t};\n\t}\n\n\t// Make sure that the user has the field 'roles'\n\tif (!user.roles) {\n\t\tuser.roles = [];\n\t}\n\n\tconst _id = await insertUserDoc.call(Accounts, options, user);\n\n\tuser = await Users.findOne({\n\t\t_id,\n\t});\n\n\t/**\n\t * if settings shows setup wizard to be pending\n\t * and no admin's been found,\n\t * and existing role list doesn't include admin\n\t * create this user admin.\n\t * count this as the completion of setup wizard step 1.\n\t */\n\tif (!options.skipAdminCheck) {\n\t\tconst hasAdmin = await Users.findOneByRolesAndType('admin', 'user', { projection: { _id: 1 } });\n\t\tif (!roles.includes('admin') && !hasAdmin) {\n\t\t\troles.push('admin');\n\t\t\tif (settings.get('Show_Setup_Wizard') === 'pending') {\n\t\t\t\t(await Settings.updateValueById('Show_Setup_Wizard', 'in_progress')).modifiedCount &&\n\t\t\t\t\tvoid notifyOnSettingChangedById('Show_Setup_Wizard');\n\t\t\t}\n\t\t}\n\t}\n\n\tawait addUserRolesAsync(_id, roles);\n\n\t// Make user's roles to be present on callback\n\tuser = await Users.findOneById(_id, { projection: { username: 1, type: 1, roles: 1 } });\n\n\tif (user.username) {\n\t\tif (options.joinDefaultChannels !== false) {\n\t\t\tawait joinDefaultChannels(_id, options.joinDefaultChannelsSilenced);\n\t\t}\n\n\t\tif (!options.skipAfterCreateUserCallback && user.type !== 'visitor') {\n\t\t\tsetImmediate(() => {\n\t\t\t\treturn callbacks.run('afterCreateUser', user);\n\t\t\t});\n\t\t}\n\t\tif (!options.skipDefaultAvatar && settings.get('Accounts_SetDefaultAvatar') === true) {\n\t\t\tconst avatarSuggestions = await getAvatarSuggestionForUser(user);\n\t\t\tfor await (const service of Object.keys(avatarSuggestions)) {\n\t\t\t\tconst avatarData = avatarSuggestions[service];\n\t\t\t\tif (service !== 'gravatar') {\n\t\t\t\t\tawait setAvatarFromServiceWithValidation(_id, avatarData.blob, '', service);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!options.skipAppsEngineEvent) {\n\t\t// `post` triggered events don't need to wait for the promise to resolve\n\t\tApps.self?.triggerEvent(AppEvents.IPostUserCreated, { user, performedBy: await safeGetMeteorUser() }).catch((e) => {\n\t\t\tApps.self?.getRocketChatLogger().error('Error while executing post user created event:', e);\n\t\t});\n\t}\n\n\treturn _id;\n};\n\nconst validateLoginAttemptAsync = async function (login) {\n\tlogin = await callbacks.run('beforeValidateLogin', login);\n\n\tif (!(await isValidLoginAttemptByIp(getClientAddress(login.connection)))) {\n\t\tthrow new Meteor.Error('error-login-blocked-for-ip', 'Login has been temporarily blocked For IP', {\n\t\t\tfunction: 'Accounts.validateLoginAttempt',\n\t\t});\n\t}\n\n\tif (!(await isValidAttemptByUser(login))) {\n\t\tthrow new Meteor.Error('error-login-blocked-for-user', 'Login has been temporarily blocked For User', {\n\t\t\tfunction: 'Accounts.validateLoginAttempt',\n\t\t});\n\t}\n\n\tif (login.allowed !== true) {\n\t\treturn login.allowed;\n\t}\n\n\tif (login.user.type === 'visitor') {\n\t\treturn true;\n\t}\n\n\tif (login.user.type === 'app') {\n\t\tthrow new Meteor.Error('error-app-user-is-not-allowed-to-login', 'App user is not allowed to login', {\n\t\t\tfunction: 'Accounts.validateLoginAttempt',\n\t\t});\n\t}\n\n\tif (!!login.user.active !== true) {\n\t\tthrow new Meteor.Error('error-user-is-not-activated', 'User is not activated', {\n\t\t\tfunction: 'Accounts.validateLoginAttempt',\n\t\t});\n\t}\n\n\tif (!login.user.roles || !Array.isArray(login.user.roles)) {\n\t\tthrow new Meteor.Error('error-user-has-no-roles', 'User has no roles', {\n\t\t\tfunction: 'Accounts.validateLoginAttempt',\n\t\t});\n\t}\n\n\tif (login.user.roles.includes('admin') === false && login.type === 'password' && settings.get('Accounts_EmailVerification') === true) {\n\t\tconst validEmail = login.user.emails.filter((email) => email.verified === true);\n\t\tif (validEmail.length === 0) {\n\t\t\tthrow new Meteor.Error('error-invalid-email', 'Invalid email __email__');\n\t\t}\n\t}\n\n\tlogin = await callbacks.run('onValidateLogin', login);\n\n\tawait Users.updateLastLoginById(login.user._id);\n\tsetImmediate(() => {\n\t\treturn callbacks.run('afterValidateLogin', login);\n\t});\n\n\t/**\n\t * Trigger the event only when the\n\t * user does login in Rocket.chat\n\t */\n\tif (login.type !== 'resume') {\n\t\t// App IPostUserLoggedIn event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostUserLoggedIn, login.user);\n\t}\n\n\treturn true;\n};\n\nAccounts.validateLoginAttempt(function (...args) {\n\t// Depends on meteor support for Async\n\treturn validateLoginAttemptAsync.call(this, ...args);\n});\n\nAccounts.validateNewUser((user) => {\n\tif (user.type === 'visitor') {\n\t\treturn true;\n\t}\n\n\tif (\n\t\tsettings.get('Accounts_Registration_AuthenticationServices_Enabled') === false &&\n\t\tsettings.get('LDAP_Enable') === false &&\n\t\t!(user.services && user.services.password)\n\t) {\n\t\tthrow new Meteor.Error('registration-disabled-authentication-services', 'User registration is disabled for authentication services');\n\t}\n\n\treturn true;\n});\n\nAccounts.validateNewUser((user) => {\n\tif (user.type === 'visitor') {\n\t\treturn true;\n\t}\n\n\tlet domainWhiteList = settings.get('Accounts_AllowedDomainsList');\n\tif (_.isEmpty(domainWhiteList?.trim())) {\n\t\treturn true;\n\t}\n\n\tdomainWhiteList = domainWhiteList.split(',').map((domain) => domain.trim());\n\n\tif (user.emails && user.emails.length > 0) {\n\t\tconst email = user.emails[0].address;\n\t\tconst inWhiteList = domainWhiteList.some((domain) => email.match(`@${escapeRegExp(domain)}$`));\n\n\t\tif (inWhiteList === false) {\n\t\t\tthrow new Meteor.Error('error-invalid-domain');\n\t\t}\n\t}\n\n\treturn true;\n});\n\nAccounts.onLogin(async ({ user }) => {\n\tif (!user || !user.services || !user.services.resume || !user.services.resume.loginTokens || !user._id) {\n\t\treturn;\n\t}\n\n\tif (user.services.resume.loginTokens.length < getMaxLoginTokens()) {\n\t\treturn;\n\t}\n\n\tawait User.ensureLoginTokensLimit(user._id);\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"231496393acff2a2f51b1eb9d0b59c893846b0b6"}
