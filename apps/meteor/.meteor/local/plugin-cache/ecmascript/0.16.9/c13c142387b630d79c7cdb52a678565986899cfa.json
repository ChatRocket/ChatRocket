{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"packages/autoupdate/autoupdate_server.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_server.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/autoupdate/autoupdate_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_server.js"}},"code":"!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module1.export({\n      Autoupdate: () => Autoupdate\n    });\n    let ClientVersions;\n    module1.link(\"./client_versions.js\", {\n      ClientVersions(v) {\n        ClientVersions = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const Autoupdate = __meteor_runtime_config__.autoupdate = {\n      // Map from client architectures (web.browser, web.browser.legacy,\n      // web.cordova) to version fields { version, versionRefreshable,\n      // versionNonRefreshable, refreshable } that will be stored in\n      // ClientVersions documents (whose IDs are client architectures). This\n      // data gets serialized into the boilerplate because it's stored in\n      // __meteor_runtime_config__.autoupdate.versions.\n      versions: {}\n    };\n    // Stores acceptable client versions.\n    const clientVersions = new ClientVersions();\n\n    // The client hash includes __meteor_runtime_config__, so wait until\n    // all packages have loaded and have had a chance to populate the\n    // runtime config before using the client hash as our default auto\n    // update version id.\n\n    // Note: Tests allow people to override Autoupdate.autoupdateVersion before\n    // startup.\n    Autoupdate.autoupdateVersion = null;\n    Autoupdate.autoupdateVersionRefreshable = null;\n    Autoupdate.autoupdateVersionCordova = null;\n    Autoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n    var syncQueue = new Meteor._AsynchronousQueue();\n    async function updateVersions(shouldReloadClientProgram) {\n      // Step 1: load the current client program on the server\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.reloadClientPrograms();\n      }\n      const {\n        // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n        // precedence, but Autoupdate.autoupdateVersion is still supported as\n        // a fallback. In most cases neither of these values will be defined.\n        AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n      } = process.env;\n\n      // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n      const clientArchs = Object.keys(WebApp.clientPrograms);\n      clientArchs.forEach(arch => {\n        Autoupdate.versions[arch] = {\n          version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n          versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n          versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n          versionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n          versionHmr: WebApp.clientPrograms[arch].hmrVersion\n        };\n      });\n\n      // Step 3: form the new client boilerplate which contains the updated\n      // assets and __meteor_runtime_config__.\n      if (shouldReloadClientProgram) {\n        await WebAppInternals.generateBoilerplate();\n      }\n\n      // Step 4: update the ClientVersions collection.\n      // We use `onListening` here because we need to use\n      // `WebApp.getRefreshableAssets`, which is only set after\n      // `WebApp.generateBoilerplate` is called by `main` in webapp.\n      WebApp.onListening(() => {\n        clientArchs.forEach(arch => {\n          const payload = _objectSpread(_objectSpread({}, Autoupdate.versions[arch]), {}, {\n            assets: WebApp.getRefreshableAssets(arch)\n          });\n          clientVersions.set(arch, payload);\n        });\n      });\n    }\n    Meteor.publish('meteor_autoupdate_clientVersions', function (appId) {\n      // `null` happens when a client doesn't have an appId and passes\n      // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n      // `null` as JSON doesn't have `undefined.\n      check(appId, Match.OneOf(String, undefined, null));\n\n      // Don't notify clients using wrong appId such as mobile apps built with a\n      // different server but pointing at the same local url\n      if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n\n      // Random value to delay the updates for 2-10 minutes\n      const randomInterval = Meteor.isProduction ? (Math.floor(Math.random() * 8) + 2) * 1000 * 60 : 0;\n      const stop = clientVersions.watch((version, isNew) => {\n        setTimeout(() => {\n          (isNew ? this.added : this.changed).call(this, 'meteor_autoupdate_clientVersions', version._id, version);\n        }, randomInterval);\n      });\n      this.onStop(() => stop());\n      this.ready();\n    }, {\n      is_auto: true\n    });\n    Meteor.startup(async function () {\n      await updateVersions(false);\n\n      // Force any connected clients that are still looking for these older\n      // document IDs to reload.\n      ['version', 'version-refreshable', 'version-cordova'].forEach(_id => {\n        clientVersions.set(_id, {\n          version: 'outdated'\n        });\n      });\n    });\n    function enqueueVersionsRefresh() {\n      syncQueue.queueTask(async function () {\n        await updateVersions(true);\n      });\n    }\n    const setupListeners = () => {\n      let onMessage;\n      module1.link(\"meteor/inter-process-messaging\", {\n        onMessage(v) {\n          onMessage = v;\n        }\n      }, 1);\n      onMessage('client-refresh', enqueueVersionsRefresh);\n\n      // Another way to tell the process to refresh: send SIGHUP signal\n      process.on('SIGHUP', Meteor.bindEnvironment(function () {\n        enqueueVersionsRefresh();\n      }, 'handling SIGHUP signal for refresh'));\n    };\n    WebApp.onListening(function () {\n      Promise.resolve(setupListeners());\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module1","link","default","v","export","Autoupdate","ClientVersions","__reifyWaitForDeps__","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_AsynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","versionReplaceable","calculateClientHashReplaceable","versionHmr","hmrVersion","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","randomInterval","isProduction","Math","floor","random","stop","watch","isNew","setTimeout","added","changed","call","_id","onStop","ready","is_auto","startup","enqueueVersionsRefresh","queueTask","setupListeners","onMessage","on","bindEnvironment","Promise","resolve","__reify_async_result__","_reifyError","self","async"],"sources":["packages/autoupdate/autoupdate_server.js"],"sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page. Changes to the replaceable version are ignored\n// and handled by the hot-module-replacement package.\n//\n// There are four versions for any given client architecture: `version`,\n// `versionRefreshable`, `versionNonRefreshable`, and\n// `versionReplaceable`. The refreshable version is a hash of just the\n// client resources that are refreshable, such as CSS. The replaceable\n// version is a hash of files that can be updated with HMR. The\n// non-refreshable version is a hash of the rest of the client assets,\n// excluding the refreshable ones: HTML, JS that is not replaceable, and\n// static files in the `public` directory. The `version` version is a\n// combined hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from './client_versions.js';\n\nexport const Autoupdate = (__meteor_runtime_config__.autoupdate = {\n\t// Map from client architectures (web.browser, web.browser.legacy,\n\t// web.cordova) to version fields { version, versionRefreshable,\n\t// versionNonRefreshable, refreshable } that will be stored in\n\t// ClientVersions documents (whose IDs are client architectures). This\n\t// data gets serialized into the boilerplate because it's stored in\n\t// __meteor_runtime_config__.autoupdate.versions.\n\tversions: {},\n});\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._AsynchronousQueue();\n\nasync function updateVersions(shouldReloadClientProgram) {\n\t// Step 1: load the current client program on the server\n\tif (shouldReloadClientProgram) {\n\t\tawait WebAppInternals.reloadClientPrograms();\n\t}\n\n\tconst {\n\t\t// If the AUTOUPDATE_VERSION environment variable is defined, it takes\n\t\t// precedence, but Autoupdate.autoupdateVersion is still supported as\n\t\t// a fallback. In most cases neither of these values will be defined.\n\t\tAUTOUPDATE_VERSION = Autoupdate.autoupdateVersion,\n\t} = process.env;\n\n\t// Step 2: update __meteor_runtime_config__.autoupdate.versions.\n\tconst clientArchs = Object.keys(WebApp.clientPrograms);\n\tclientArchs.forEach((arch) => {\n\t\tAutoupdate.versions[arch] = {\n\t\t\tversion: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n\t\t\tversionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n\t\t\tversionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n\t\t\tversionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n\t\t\tversionHmr: WebApp.clientPrograms[arch].hmrVersion,\n\t\t};\n\t});\n\n\t// Step 3: form the new client boilerplate which contains the updated\n\t// assets and __meteor_runtime_config__.\n\tif (shouldReloadClientProgram) {\n\t\tawait WebAppInternals.generateBoilerplate();\n\t}\n\n\t// Step 4: update the ClientVersions collection.\n\t// We use `onListening` here because we need to use\n\t// `WebApp.getRefreshableAssets`, which is only set after\n\t// `WebApp.generateBoilerplate` is called by `main` in webapp.\n\tWebApp.onListening(() => {\n\t\tclientArchs.forEach((arch) => {\n\t\t\tconst payload = {\n\t\t\t\t...Autoupdate.versions[arch],\n\t\t\t\tassets: WebApp.getRefreshableAssets(arch),\n\t\t\t};\n\n\t\t\tclientVersions.set(arch, payload);\n\t\t});\n\t});\n}\n\nMeteor.publish(\n\t'meteor_autoupdate_clientVersions',\n\tfunction (appId) {\n\t\t// `null` happens when a client doesn't have an appId and passes\n\t\t// `undefined` to `Meteor.subscribe`. `undefined` is translated to\n\t\t// `null` as JSON doesn't have `undefined.\n\t\tcheck(appId, Match.OneOf(String, undefined, null));\n\n\t\t// Don't notify clients using wrong appId such as mobile apps built with a\n\t\t// different server but pointing at the same local url\n\t\tif (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n\n\t\t// Random value to delay the updates for 2-10 minutes\n\t\tconst randomInterval = Meteor.isProduction ? (Math.floor(Math.random() * 8) + 2) * 1000 * 60 : 0;\n\n\t\tconst stop = clientVersions.watch((version, isNew) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\t(isNew ? this.added : this.changed).call(this, 'meteor_autoupdate_clientVersions', version._id, version);\n\t\t\t}, randomInterval);\n\t\t});\n\n\t\tthis.onStop(() => stop());\n\t\tthis.ready();\n\t},\n\t{ is_auto: true },\n);\n\nMeteor.startup(async function () {\n\tawait updateVersions(false);\n\n\t// Force any connected clients that are still looking for these older\n\t// document IDs to reload.\n\t['version', 'version-refreshable', 'version-cordova'].forEach((_id) => {\n\t\tclientVersions.set(_id, {\n\t\t\tversion: 'outdated',\n\t\t});\n\t});\n});\n\nfunction enqueueVersionsRefresh() {\n\tsyncQueue.queueTask(async function () {\n\t\tawait updateVersions(true);\n\t});\n}\n\nconst setupListeners = () => {\n\t// Listen for messages pertaining to the client-refresh topic.\n\timport { onMessage } from 'meteor/inter-process-messaging';\n\tonMessage('client-refresh', enqueueVersionsRefresh);\n\n\t// Another way to tell the process to refresh: send SIGHUP signal\n\tprocess.on(\n\t\t'SIGHUP',\n\t\tMeteor.bindEnvironment(function () {\n\t\t\tenqueueVersionsRefresh();\n\t\t}, 'handling SIGHUP signal for refresh'),\n\t);\n};\n\nWebApp.onListening(function () {\n\tPromise.resolve(setupListeners());\n});\n"],"mappings":";;;IAAA,IAAIA,aAAa;IAACC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAC;MAACC,OAAOA,CAACC,CAAC,EAAC;QAACJ,aAAa,GAACI,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAtGH,OAAO,CAACI,MAAM,CAAC;MAACC,UAAU,EAACA,CAAA,KAAIA;IAAU,CAAC,CAAC;IAAC,IAAIC,cAAc;IAACN,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAC;MAACK,cAAcA,CAACH,CAAC,EAAC;QAACG,cAAc,GAACH,CAAC;MAAA;IAAC,CAAC,EAAC,CAAC,CAAC;IAAC,IAAII,oBAAoB,CAAC,CAAC,EAAE,CAAC,MAAMA,oBAAoB,CAAC,CAAC,EAAE,CAAC;IA6BjM,MAAMF,UAAU,GAAIG,yBAAyB,CAACC,UAAU,GAAG;MACjE;MACA;MACA;MACA;MACA;MACA;MACAC,QAAQ,EAAE,CAAC;IACZ,CAAE;IAEF;IACA,MAAMC,cAAc,GAAG,IAAIL,cAAc,CAAC,CAAC;;IAE3C;IACA;IACA;IACA;;IAEA;IACA;IACAD,UAAU,CAACO,iBAAiB,GAAG,IAAI;IACnCP,UAAU,CAACQ,4BAA4B,GAAG,IAAI;IAC9CR,UAAU,CAACS,wBAAwB,GAAG,IAAI;IAC1CT,UAAU,CAACU,KAAK,GAAGP,yBAAyB,CAACO,KAAK,GAAGC,OAAO,CAACC,GAAG,CAACC,MAAM;IAEvE,IAAIC,SAAS,GAAG,IAAIC,MAAM,CAACC,kBAAkB,CAAC,CAAC;IAE/C,eAAeC,cAAcA,CAACC,yBAAyB,EAAE;MACxD;MACA,IAAIA,yBAAyB,EAAE;QAC9B,MAAMC,eAAe,CAACC,oBAAoB,CAAC,CAAC;MAC7C;MAEA,MAAM;QACL;QACA;QACA;QACAC,kBAAkB,GAAGrB,UAAU,CAACO;MACjC,CAAC,GAAGI,OAAO,CAACC,GAAG;;MAEf;MACA,MAAMU,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,cAAc,CAAC;MACtDJ,WAAW,CAACK,OAAO,CAAEC,IAAI,IAAK;QAC7B5B,UAAU,CAACK,QAAQ,CAACuB,IAAI,CAAC,GAAG;UAC3BC,OAAO,EAAER,kBAAkB,IAAII,MAAM,CAACK,mBAAmB,CAACF,IAAI,CAAC;UAC/DG,kBAAkB,EAAEV,kBAAkB,IAAII,MAAM,CAACO,8BAA8B,CAACJ,IAAI,CAAC;UACrFK,qBAAqB,EAAEZ,kBAAkB,IAAII,MAAM,CAACS,iCAAiC,CAACN,IAAI,CAAC;UAC3FO,kBAAkB,EAAEd,kBAAkB,IAAII,MAAM,CAACW,8BAA8B,CAACR,IAAI,CAAC;UACrFS,UAAU,EAAEZ,MAAM,CAACC,cAAc,CAACE,IAAI,CAAC,CAACU;QACzC,CAAC;MACF,CAAC,CAAC;;MAEF;MACA;MACA,IAAIpB,yBAAyB,EAAE;QAC9B,MAAMC,eAAe,CAACoB,mBAAmB,CAAC,CAAC;MAC5C;;MAEA;MACA;MACA;MACA;MACAd,MAAM,CAACe,WAAW,CAAC,MAAM;QACxBlB,WAAW,CAACK,OAAO,CAAEC,IAAI,IAAK;UAC7B,MAAMa,OAAO,GAAA/C,aAAA,CAAAA,aAAA,KACTM,UAAU,CAACK,QAAQ,CAACuB,IAAI,CAAC;YAC5Bc,MAAM,EAAEjB,MAAM,CAACkB,oBAAoB,CAACf,IAAI;UAAC,EACzC;UAEDtB,cAAc,CAACsC,GAAG,CAAChB,IAAI,EAAEa,OAAO,CAAC;QAClC,CAAC,CAAC;MACH,CAAC,CAAC;IACH;IAEA1B,MAAM,CAAC8B,OAAO,CACb,kCAAkC,EAClC,UAAUnC,KAAK,EAAE;MAChB;MACA;MACA;MACAoC,KAAK,CAACpC,KAAK,EAAEqC,KAAK,CAACC,KAAK,CAACC,MAAM,EAAEC,SAAS,EAAE,IAAI,CAAC,CAAC;;MAElD;MACA;MACA,IAAIlD,UAAU,CAACU,KAAK,IAAIA,KAAK,IAAIV,UAAU,CAACU,KAAK,KAAKA,KAAK,EAAE,OAAO,EAAE;;MAEtE;MACA,MAAMyC,cAAc,GAAGpC,MAAM,CAACqC,YAAY,GAAG,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,EAAE,GAAG,CAAC;MAEhG,MAAMC,IAAI,GAAGlD,cAAc,CAACmD,KAAK,CAAC,CAAC5B,OAAO,EAAE6B,KAAK,KAAK;QACrDC,UAAU,CAAC,MAAM;UAChB,CAACD,KAAK,GAAG,IAAI,CAACE,KAAK,GAAG,IAAI,CAACC,OAAO,EAAEC,IAAI,CAAC,IAAI,EAAE,kCAAkC,EAAEjC,OAAO,CAACkC,GAAG,EAAElC,OAAO,CAAC;QACzG,CAAC,EAAEsB,cAAc,CAAC;MACnB,CAAC,CAAC;MAEF,IAAI,CAACa,MAAM,CAAC,MAAMR,IAAI,CAAC,CAAC,CAAC;MACzB,IAAI,CAACS,KAAK,CAAC,CAAC;IACb,CAAC,EACD;MAAEC,OAAO,EAAE;IAAK,CACjB,CAAC;IAEDnD,MAAM,CAACoD,OAAO,CAAC,kBAAkB;MAChC,MAAMlD,cAAc,CAAC,KAAK,CAAC;;MAE3B;MACA;MACA,CAAC,SAAS,EAAE,qBAAqB,EAAE,iBAAiB,CAAC,CAACU,OAAO,CAAEoC,GAAG,IAAK;QACtEzD,cAAc,CAACsC,GAAG,CAACmB,GAAG,EAAE;UACvBlC,OAAO,EAAE;QACV,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC,CAAC;IAEF,SAASuC,sBAAsBA,CAAA,EAAG;MACjCtD,SAAS,CAACuD,SAAS,CAAC,kBAAkB;QACrC,MAAMpD,cAAc,CAAC,IAAI,CAAC;MAC3B,CAAC,CAAC;IACH;IAEA,MAAMqD,cAAc,GAAGA,CAAA,KAAM;MApJ7B,IAAIC,SAAS;MAAC5E,OAAO,CAACC,IAAI,CAAC,gCAAgC,EAAC;QAAC2E,SAASA,CAACzE,CAAC,EAAC;UAACyE,SAAS,GAACzE,CAAC;QAAA;MAAC,CAAC,EAAC,CAAC,CAAC;MAuJzFyE,SAAS,CAAC,gBAAgB,EAAEH,sBAAsB,CAAC;;MAEnD;MACAzD,OAAO,CAAC6D,EAAE,CACT,QAAQ,EACRzD,MAAM,CAAC0D,eAAe,CAAC,YAAY;QAClCL,sBAAsB,CAAC,CAAC;MACzB,CAAC,EAAE,oCAAoC,CACxC,CAAC;IACF,CAAC;IAED3C,MAAM,CAACe,WAAW,CAAC,YAAY;MAC9BkC,OAAO,CAACC,OAAO,CAACL,cAAc,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;IAACM,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c13c142387b630d79c7cdb52a678565986899cfa"}
