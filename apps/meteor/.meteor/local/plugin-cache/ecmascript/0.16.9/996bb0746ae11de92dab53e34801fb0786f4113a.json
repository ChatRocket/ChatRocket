{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/libsodium-wrappers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"}},"code":"!function (module1) {\n  const _sodium = require('libsodium-wrappers');\n  const Backend = require('../backend');\n  const CryptographyKey = require('../cryptography-key');\n  const Polyfill = require('../polyfill');\n  const Util = require('../util');\n  const SodiumError = require('../sodium-error');\n  const toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n  if (typeof Buffer === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n  }\n\n  /* istanbul ignore next */\n  module.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n      super(lib);\n      this.sodium = lib;\n      this.backendName = 'LibsodiumWrappersBackend';\n    }\n    static async init() {\n      await _sodium.ready;\n      return new LibsodiumWrappersBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n      return toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(null, ciphertext, assocData, nonce, key.getBuffer()));\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n      return toBuffer(this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, null, nonce, key.getBuffer()));\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n      return toBuffer(this.sodium.crypto_auth(message, key.getBuffer()));\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n      return this.sodium.crypto_auth_verify(mac, message, key.getBuffer());\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_easy(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), pk.getBuffer(), sk.getBuffer()));\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_open_easy(await Util.toBuffer(ciphertext), await Util.toBuffer(nonce), pk.getBuffer(), sk.getBuffer()));\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n      return Util.toBuffer(await this.sodium.crypto_box_seal(await Util.toBuffer(plaintext), pk.getBuffer()));\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n      return Util.toBuffer(await this.sodium.crypto_box_seal_open(await Util.toBuffer(ciphertext), pk.getBuffer(), sk.getBuffer()));\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n      const obj = this.sodium.crypto_box_keypair();\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message) {\n      let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let outputLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 32;\n      if (key) {\n        return Util.toBuffer(this.sodium.crypto_generichash(outputLength, await Util.toBuffer(message), key.getBuffer()));\n      }\n      return Util.toBuffer(this.sodium.crypto_generichash(outputLength, await Util.toBuffer(message)));\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init() {\n      let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      if (key) {\n        return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n      }\n      return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n      return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state) {\n      let outputLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n      return Util.toBuffer(this.sodium.crypto_generichash_final(state, outputLength));\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n      const gen = this.sodium.crypto_kx_client_session_keys(clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n      return [new CryptographyKey(await Util.toBuffer(gen.sharedRx)), new CryptographyKey(await Util.toBuffer(gen.sharedTx))];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n      const gen = this.sodium.crypto_kx_server_session_keys(serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n      return [new CryptographyKey(await Util.toBuffer(gen.sharedRx)), new CryptographyKey(await Util.toBuffer(gen.sharedTx))];\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n      return new CryptographyKey(await Util.toBuffer(this.sodium.crypto_kdf_derive_from_key(length, subKeyId | 0, context, key.getBuffer())));\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n      if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n        return Polyfill.crypto_onetimeauth(await Util.toBuffer(message), key);\n      }\n      return this.sodium.crypto_onetimeauth(await Util.toBuffer(message), key.getBuffer());\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n      if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n        return Polyfill.crypto_onetimeauth_verify(await Util.toBuffer(message), key, tag);\n      }\n      return this.sodium.crypto_onetimeauth_verify(tag, await Util.toBuffer(message), key.getBuffer());\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n      return Util.toBuffer(this.sodium.crypto_pwhash(length, await Util.toBuffer(password), await Util.toBuffer(salt), opslimit, memlimit, algorithm));\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n      return (await Util.toBuffer(this.sodium.crypto_pwhash_str(await Util.toBuffer(password), opslimit, memlimit))).toString('utf-8');\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n      return this.sodium.crypto_pwhash_str_verify(hash.toString('utf-8'), await Util.toBuffer(password));\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n      if (typeof this.sodium.crypto_pwhash_str_needs_rehash !== 'function') {\n        return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n      }\n      return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n      return new CryptographyKey(await Util.toBuffer(this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())));\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n      return Util.toBuffer(this.sodium.crypto_secretbox_easy(await Util.toBuffer(plaintext), nonce, key.getBuffer()));\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n      return Util.toBuffer(this.sodium.crypto_secretbox_open_easy(await Util.toBuffer(ciphertext), nonce, key.getBuffer()));\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n      return Util.toBuffer(this.sodium.crypto_shorthash(await Util.toBuffer(message), key.getBuffer()));\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n      return Util.toBuffer(this.sodium.crypto_sign(await Util.toBuffer(message), secretKey.getBuffer()));\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n      return Util.toBuffer(this.sodium.crypto_sign_open(message, publicKey.getBuffer()));\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n      return Util.toBuffer(this.sodium.crypto_sign_detached(await Util.toBuffer(message), secretKey.getBuffer()));\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n      return this.sodium.crypto_sign_verify_detached(signature, await Util.toBuffer(message), publicKey.getBuffer());\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n      const obj = this.sodium.crypto_sign_keypair();\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n      const obj = this.sodium.crypto_sign_seed_keypair(seed);\n      return new CryptographyKey(Buffer.concat([await Util.toBuffer(obj.privateKey), await Util.toBuffer(obj.publicKey)]));\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n      return Util.toBuffer(this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer()));\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n      return Util.toBuffer(this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer()));\n    }\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n      if (typeof this.sodium.crypto_stream_xor === 'undefined') {\n        return Polyfill.crypto_stream_xor(Buffer.alloc(length, 0), await Util.toBuffer(nonce), key);\n      }\n      return this.sodium.crypto_stream(length, await Util.toBuffer(nonce), key.getBuffer());\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n      if (typeof this.sodium.crypto_stream_xor === 'undefined') {\n        return Polyfill.crypto_stream_xor(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), key);\n      }\n      return this.sodium.crypto_stream_xor(await Util.toBuffer(plaintext), await Util.toBuffer(nonce), key.getBuffer());\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n      return Util.toBuffer(this.sodium.crypto_scalarmult_base(secretKey.getBuffer()));\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n      const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n      return [res.state, await Util.toBuffer(res.header)];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n      if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n        throw new SodiumError(\"Header must be \".concat(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES, \" bytes long\"));\n      }\n      return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return Util.toBuffer(this.sodium.crypto_secretstream_xchacha20poly1305_push(state, await Util.toBuffer(message), ad.length > 0 ? await Util.toBuffer(ad) : null, tag));\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n      let ad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let tag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n        throw new SodiumError('Invalid ciphertext size');\n      }\n      const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(state, await Util.toBuffer(ciphertext), ad.length > 0 ? await Util.toBuffer(ad) : null, tag);\n      if (tag !== out.tag) {\n        throw new SodiumError(\"Invalid tag (Given: \".concat(tag, \"; Expected: \").concat(out.tag, \")\"));\n      }\n      return Util.toBuffer(out.message);\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n      this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n      return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n      return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n      const buf = await Util.cloneBuffer(val);\n      this.sodium.add(buf, addv);\n      return buf;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(buf) {\n      return this.sodium.to_hex(buf);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n      return this.sodium.compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(encoded) {\n      return Buffer.from(this.sodium.from_hex(encoded));\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n      return this.sodium.increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n      return this.sodium.is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n      return this.sodium.memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n      this.sodium.memzero(buf);\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n      return Util.toBuffer(this.sodium.pad(await Util.toBuffer(buf), blockSize));\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n      return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n  };\n}.call(this, module);","map":{"version":3,"names":["_sodium","require","Backend","CryptographyKey","Polyfill","Util","SodiumError","toBuffer","Buffer","module","exports","LibsodiumWrappersBackend","constructor","lib","sodium","backendName","init","ready","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","plaintext","crypto_auth","message","crypto_auth_verify","mac","crypto_box","sk","pk","crypto_box_easy","crypto_box_open","crypto_box_open_easy","crypto_box_seal","crypto_box_seal_open","crypto_box_keypair","obj","concat","privateKey","publicKey","crypto_generichash","arguments","length","undefined","outputLength","crypto_generichash_init","crypto_generichash_update","state","crypto_generichash_final","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","gen","sharedRx","sharedTx","crypto_kx_server_session_keys","serverSecretKey","crypto_kdf_derive_from_key","subKeyId","context","crypto_onetimeauth","crypto_onetimeauth_verify","tag","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","crypto_pwhash_str","toString","crypto_pwhash_str_verify","hash","crypto_pwhash_str_needs_rehash","crypto_scalarmult","secretKey","crypto_secretbox","crypto_secretbox_easy","crypto_secretbox_open","crypto_secretbox_open_easy","crypto_shorthash","crypto_sign","crypto_sign_open","crypto_sign_detached","crypto_sign_verify_detached","signature","crypto_sign_keypair","crypto_sign_seed_keypair","seed","crypto_sign_ed25519_sk_to_curve25519","crypto_sign_ed25519_pk_to_curve25519","crypto_stream","crypto_stream_xor","alloc","crypto_scalarmult_base","crypto_secretstream_xchacha20poly1305_init_push","res","header","crypto_secretstream_xchacha20poly1305_init_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","crypto_secretstream_xchacha20poly1305_push","ad","crypto_secretstream_xchacha20poly1305_pull","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","out","crypto_secretstream_xchacha20poly1305_rekey","randombytes_buf","number","randombytes_uniform","upperBound","sodium_add","val","addv","buf","cloneBuffer","add","sodium_bin2hex","to_hex","sodium_compare","b1","b2","compare","sodium_hex2bin","encoded","from","from_hex","sodium_increment","increment","sodium_is_zero","len","is_zero","sodium_memcmp","memcmp","sodium_memzero","memzero","sodium_pad","blockSize","pad","sodium_unpad","unpad","call"],"sources":["imports/client/sodium-plus/lib/backend/libsodium-wrappers.js"],"sourcesContent":["const _sodium = require('libsodium-wrappers');\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst Polyfill = require('../polyfill');\nconst Util = require('../util');\nconst SodiumError = require('../sodium-error');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class LibsodiumWrappersBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'LibsodiumWrappersBackend';\n    }\n\n    static async init() {\n        await _sodium.ready;\n        return new LibsodiumWrappersBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n                null,\n                ciphertext,\n                assocData,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        return toBuffer(\n            this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n                plaintext,\n                assocData,\n                null,\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        return toBuffer(\n            this.sodium.crypto_auth(\n                message,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            message,\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_easy(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_open_easy(\n                await Util.toBuffer(ciphertext),\n                await Util.toBuffer(nonce),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal(\n                await Util.toBuffer(plaintext),\n                pk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        return Util.toBuffer(\n            await this.sodium.crypto_box_seal_open(\n                await Util.toBuffer(ciphertext),\n                pk.getBuffer(),\n                sk.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const obj = this.sodium.crypto_box_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        if (key) {\n            return Util.toBuffer(\n                this.sodium.crypto_generichash(\n                    outputLength,\n                    await Util.toBuffer(message),\n                    key.getBuffer()\n                )\n            );\n        }\n        return Util.toBuffer(\n            this.sodium.crypto_generichash(\n                outputLength,\n                await Util.toBuffer(message)\n            )\n        );\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        if (key) {\n            return this.sodium.crypto_generichash_init(key.getBuffer(), outputLength);\n        }\n        return this.sodium.crypto_generichash_init(null, outputLength);\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        return this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        return Util.toBuffer(\n            this.sodium.crypto_generichash_final(state, outputLength)\n        );\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const gen = this.sodium.crypto_kx_client_session_keys(\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const gen = this.sodium.crypto_kx_server_session_keys(\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(await Util.toBuffer(gen.sharedRx)),\n            new CryptographyKey(await Util.toBuffer(gen.sharedTx))\n        ];\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_kdf_derive_from_key(\n                    length,\n                    subKeyId | 0,\n                    context,\n                    key.getBuffer()\n                )\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        if (typeof this.sodium.crypto_onetimeauth === 'undefined') {\n            return Polyfill.crypto_onetimeauth(\n                await Util.toBuffer(message),\n                key\n            );\n        }\n        return this.sodium.crypto_onetimeauth(\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        if (typeof this.sodium.crypto_onetimeauth_verify === 'undefined') {\n            return Polyfill.crypto_onetimeauth_verify(\n                await Util.toBuffer(message),\n                key,\n                tag\n            );\n        }\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        return Util.toBuffer(\n            this.sodium.crypto_pwhash(\n                length,\n                await Util.toBuffer(password),\n                await Util.toBuffer(salt),\n                opslimit,\n                memlimit,\n                algorithm\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        return (await Util.toBuffer(\n            this.sodium.crypto_pwhash_str(\n                await Util.toBuffer(password),\n                opslimit,\n                memlimit\n            ))\n        ).toString('utf-8');\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        return this.sodium.crypto_pwhash_str_verify(\n            hash.toString('utf-8'),\n            await Util.toBuffer(password)\n        );\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        if (typeof (this.sodium.crypto_pwhash_str_needs_rehash) !== 'function') {\n            return await Polyfill.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n        }\n        return this.sodium.crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit);\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        return new CryptographyKey(\n            await Util.toBuffer(\n                this.sodium.crypto_scalarmult(secretKey.getBuffer(), publicKey.getBuffer())\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_easy(\n                await Util.toBuffer(plaintext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretbox_open_easy(\n                await Util.toBuffer(ciphertext),\n                nonce,\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        return Util.toBuffer(\n            this.sodium.crypto_shorthash(\n                await Util.toBuffer(message),\n                key.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(message, publicKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_open(\n                message,\n                publicKey.getBuffer()\n            )\n        );\n    }\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_detached(\n                await Util.toBuffer(message),\n                secretKey.getBuffer()\n            )\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const obj = this.sodium.crypto_sign_keypair();\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const obj = this.sodium.crypto_sign_seed_keypair(seed);\n        return new CryptographyKey(\n            Buffer.concat([\n                await Util.toBuffer(obj.privateKey),\n                await Util.toBuffer(obj.publicKey)\n            ])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_sk_to_curve25519(sk.getBuffer())\n        );\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        return Util.toBuffer(\n            this.sodium.crypto_sign_ed25519_pk_to_curve25519(pk.getBuffer())\n        );\n    }\n\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                Buffer.alloc(length, 0),\n                await Util.toBuffer(nonce),\n                key\n            );\n        }\n        return this.sodium.crypto_stream(\n            length,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        if (typeof (this.sodium.crypto_stream_xor) === 'undefined') {\n            return Polyfill.crypto_stream_xor(\n                await Util.toBuffer(plaintext),\n                await Util.toBuffer(nonce),\n                key\n            )\n        }\n        return this.sodium.crypto_stream_xor(\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        return Util.toBuffer(\n            this.sodium.crypto_scalarmult_base(secretKey.getBuffer())\n        );\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const res = this.sodium.crypto_secretstream_xchacha20poly1305_init_push(key.getBuffer());\n        return [res.state, await Util.toBuffer(res.header)];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        return this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(header, key.getBuffer());\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        return Util.toBuffer(\n            this.sodium.crypto_secretstream_xchacha20poly1305_push(\n                state,\n                await Util.toBuffer(message),\n                ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n                tag\n            )\n        );\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const out = this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            await Util.toBuffer(ciphertext),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            tag\n        );\n        if (tag !== out.tag) {\n            throw new SodiumError(`Invalid tag (Given: ${tag}; Expected: ${out.tag})`);\n        }\n        return Util.toBuffer(out.message);\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        return Util.toBuffer(await this.sodium.randombytes_buf(number));\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(buf) {\n        return this.sodium.to_hex(buf);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} encoded\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(encoded) {\n        return Buffer.from(this.sodium.from_hex(encoded));\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.memzero(buf);\n    }\n\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        return Util.toBuffer(\n            this.sodium.pad(await Util.toBuffer(buf), blockSize)\n        );\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        return Util.toBuffer(this.sodium.unpad(buf, blockSize));\n    }\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"996bb0746ae11de92dab53e34801fb0786f4113a"}
