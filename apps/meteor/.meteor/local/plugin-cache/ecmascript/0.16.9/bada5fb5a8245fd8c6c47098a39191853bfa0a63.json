{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/message-read-receipt/ReadReceipt.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/message-read-receipt/ReadReceipt.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/message-read-receipt/ReadReceipt.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/message-read-receipt/ReadReceipt.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/message-read-receipt/ReadReceipt.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      ReadReceipt: () => ReadReceipt\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let LivechatVisitors, ReadReceipts, Messages, Rooms, Subscriptions, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let notifyOnRoomChangedById, notifyOnMessageChange;\n    module.link(\"../../../../app/lib/server/lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let SystemLogger;\n    module.link(\"../../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 5);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\n    const list = {};\n    const debounceByRoomId = function (fn) {\n      return function (roomId) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        clearTimeout(list[roomId]);\n        list[roomId] = setTimeout(() => {\n          fn.call(this, roomId, ...args);\n          delete list[roomId];\n        }, 2000);\n      };\n    };\n    const updateMessages = debounceByRoomId(async _ref => {\n      let {\n        _id,\n        lm\n      } = _ref;\n      // @TODO maybe store firstSubscription in room object so we don't need to call the above update method\n      const firstSubscription = await Subscriptions.getMinimumLastSeenByRoomId(_id);\n      if (!firstSubscription || !firstSubscription.ls) {\n        return;\n      }\n      const result = await Messages.setVisibleMessagesAsRead(_id, firstSubscription.ls);\n      if (result.modifiedCount > 0) {\n        void api.broadcast('notify.messagesRead', {\n          rid: _id,\n          until: firstSubscription.ls\n        });\n      }\n      if (lm <= firstSubscription.ls) {\n        await Rooms.setLastMessageAsRead(_id);\n        void notifyOnRoomChangedById(_id);\n      }\n    });\n    const ReadReceipt = {\n      async markMessagesAsRead(roomId, userId, userLastSeen) {\n        if (!settings.get('Message_Read_Receipt_Enabled')) {\n          return;\n        }\n        const room = await Rooms.findOneById(roomId, {\n          projection: {\n            lm: 1\n          }\n        });\n\n        // if users last seen is greater than room's last message, it means the user already have this room marked as read\n        if (!room || userLastSeen > room.lm) {\n          return;\n        }\n        this.storeReadReceipts(await Messages.findVisibleUnreadMessagesByRoomAndDate(roomId, userLastSeen).toArray(), roomId, userId);\n        await updateMessages(room);\n      },\n      async markMessageAsReadBySender(message, _ref2, userId) {\n        let {\n          _id: roomId,\n          t\n        } = _ref2;\n        if (!settings.get('Message_Read_Receipt_Enabled')) {\n          return;\n        }\n        if (!message.unread) {\n          return;\n        }\n\n        // mark message as read if the sender is the only one in the room\n        const isUserAlone = (await Subscriptions.countByRoomIdAndNotUserId(roomId, userId)) === 0;\n        if (isUserAlone) {\n          const result = await Messages.setAsReadById(message._id);\n          if (result.modifiedCount > 0) {\n            void notifyOnMessageChange({\n              id: message._id\n            });\n          }\n        }\n        const extraData = roomCoordinator.getRoomDirectives(t).getReadReceiptsExtraData(message);\n        this.storeReadReceipts([message], roomId, userId, extraData);\n      },\n      async storeThreadMessagesReadReceipts(tmid, userId, userLastSeen) {\n        if (!settings.get('Message_Read_Receipt_Enabled')) {\n          return;\n        }\n        const message = await Messages.findOneById(tmid, {\n          projection: {\n            tlm: 1,\n            rid: 1\n          }\n        });\n\n        // if users last seen is greater than thread's last message, it means the user has already marked this thread as read\n        if (!message || userLastSeen > message.tlm) {\n          return;\n        }\n        this.storeReadReceipts(await Messages.findUnreadThreadMessagesByDate(tmid, userId, userLastSeen).toArray(), message.rid, userId);\n      },\n      async storeReadReceipts(messages, roomId, userId) {\n        let extraData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        if (settings.get('Message_Read_Receipt_Store_Users')) {\n          const ts = new Date();\n          const receipts = messages.map(message => _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n            _id: Random.id(),\n            roomId,\n            userId,\n            messageId: message._id,\n            ts\n          }, message.t && {\n            t: message.t\n          }), message.pinned && {\n            pinned: true\n          }), message.drid && {\n            drid: message.drid\n          }), message.tmid && {\n            tmid: message.tmid\n          }), extraData));\n          if (receipts.length === 0) {\n            return;\n          }\n          try {\n            await ReadReceipts.insertMany(receipts);\n          } catch (err) {\n            SystemLogger.error({\n              msg: 'Error inserting read receipts per user',\n              err\n            });\n          }\n        }\n      },\n      async getReceipts(message) {\n        const receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n        return Promise.all(receipts.map(async receipt => _objectSpread(_objectSpread({}, receipt), {}, {\n          user: receipt.token ? await LivechatVisitors.getVisitorByToken(receipt.token, {\n            projection: {\n              username: 1,\n              name: 1\n            }\n          }) : await Users.findOneById(receipt.userId, {\n            projection: {\n              username: 1,\n              name: 1\n            }\n          })\n        })));\n      }\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","ReadReceipt","api","LivechatVisitors","ReadReceipts","Messages","Rooms","Subscriptions","Users","Random","notifyOnRoomChangedById","notifyOnMessageChange","settings","SystemLogger","roomCoordinator","__reifyWaitForDeps__","list","debounceByRoomId","fn","roomId","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","call","updateMessages","_ref","_id","lm","firstSubscription","getMinimumLastSeenByRoomId","ls","result","setVisibleMessagesAsRead","modifiedCount","broadcast","rid","until","setLastMessageAsRead","markMessagesAsRead","userId","userLastSeen","get","room","findOneById","projection","storeReadReceipts","findVisibleUnreadMessagesByRoomAndDate","toArray","markMessageAsReadBySender","message","_ref2","t","unread","isUserAlone","countByRoomIdAndNotUserId","setAsReadById","id","extraData","getRoomDirectives","getReadReceiptsExtraData","storeThreadMessagesReadReceipts","tmid","tlm","findUnreadThreadMessagesByDate","messages","undefined","ts","Date","receipts","map","messageId","pinned","drid","insertMany","err","error","msg","getReceipts","findByMessageId","Promise","all","receipt","user","token","getVisitorByToken","username","name","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/lib/message-read-receipt/ReadReceipt.js"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { LivechatVisitors, ReadReceipts, Messages, Rooms, Subscriptions, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\n\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../../app/settings/server';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\n// debounced function by roomId, so multiple calls within 2 seconds to same roomId runs only once\nconst list = {};\nconst debounceByRoomId = function (fn) {\n\treturn function (roomId, ...args) {\n\t\tclearTimeout(list[roomId]);\n\t\tlist[roomId] = setTimeout(() => {\n\t\t\tfn.call(this, roomId, ...args);\n\t\t\tdelete list[roomId];\n\t\t}, 2000);\n\t};\n};\n\nconst updateMessages = debounceByRoomId(async ({ _id, lm }) => {\n\t// @TODO maybe store firstSubscription in room object so we don't need to call the above update method\n\tconst firstSubscription = await Subscriptions.getMinimumLastSeenByRoomId(_id);\n\tif (!firstSubscription || !firstSubscription.ls) {\n\t\treturn;\n\t}\n\n\tconst result = await Messages.setVisibleMessagesAsRead(_id, firstSubscription.ls);\n\tif (result.modifiedCount > 0) {\n\t\tvoid api.broadcast('notify.messagesRead', { rid: _id, until: firstSubscription.ls });\n\t}\n\n\tif (lm <= firstSubscription.ls) {\n\t\tawait Rooms.setLastMessageAsRead(_id);\n\t\tvoid notifyOnRoomChangedById(_id);\n\t}\n});\n\nexport const ReadReceipt = {\n\tasync markMessagesAsRead(roomId, userId, userLastSeen) {\n\t\tif (!settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { lm: 1 } });\n\n\t\t// if users last seen is greater than room's last message, it means the user already have this room marked as read\n\t\tif (!room || userLastSeen > room.lm) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.storeReadReceipts(await Messages.findVisibleUnreadMessagesByRoomAndDate(roomId, userLastSeen).toArray(), roomId, userId);\n\n\t\tawait updateMessages(room);\n\t},\n\n\tasync markMessageAsReadBySender(message, { _id: roomId, t }, userId) {\n\t\tif (!settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!message.unread) {\n\t\t\treturn;\n\t\t}\n\n\t\t// mark message as read if the sender is the only one in the room\n\t\tconst isUserAlone = (await Subscriptions.countByRoomIdAndNotUserId(roomId, userId)) === 0;\n\t\tif (isUserAlone) {\n\t\t\tconst result = await Messages.setAsReadById(message._id);\n\t\t\tif (result.modifiedCount > 0) {\n\t\t\t\tvoid notifyOnMessageChange({\n\t\t\t\t\tid: message._id,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst extraData = roomCoordinator.getRoomDirectives(t).getReadReceiptsExtraData(message);\n\t\tthis.storeReadReceipts([message], roomId, userId, extraData);\n\t},\n\n\tasync storeThreadMessagesReadReceipts(tmid, userId, userLastSeen) {\n\t\tif (!settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await Messages.findOneById(tmid, { projection: { tlm: 1, rid: 1 } });\n\n\t\t// if users last seen is greater than thread's last message, it means the user has already marked this thread as read\n\t\tif (!message || userLastSeen > message.tlm) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.storeReadReceipts(await Messages.findUnreadThreadMessagesByDate(tmid, userId, userLastSeen).toArray(), message.rid, userId);\n\t},\n\n\tasync storeReadReceipts(messages, roomId, userId, extraData = {}) {\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tconst ts = new Date();\n\t\t\tconst receipts = messages.map((message) => ({\n\t\t\t\t_id: Random.id(),\n\t\t\t\troomId,\n\t\t\t\tuserId,\n\t\t\t\tmessageId: message._id,\n\t\t\t\tts,\n\t\t\t\t...(message.t && { t: message.t }),\n\t\t\t\t...(message.pinned && { pinned: true }),\n\t\t\t\t...(message.drid && { drid: message.drid }),\n\t\t\t\t...(message.tmid && { tmid: message.tmid }),\n\t\t\t\t...extraData,\n\t\t\t}));\n\n\t\t\tif (receipts.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait ReadReceipts.insertMany(receipts);\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error inserting read receipts per user', err });\n\t\t\t}\n\t\t}\n\t},\n\n\tasync getReceipts(message) {\n\t\tconst receipts = await ReadReceipts.findByMessageId(message._id).toArray();\n\n\t\treturn Promise.all(\n\t\t\treceipts.map(async (receipt) => ({\n\t\t\t\t...receipt,\n\t\t\t\tuser: receipt.token\n\t\t\t\t\t? await LivechatVisitors.getVisitorByToken(receipt.token, { projection: { username: 1, name: 1 } })\n\t\t\t\t\t: await Users.findOneById(receipt.userId, { projection: { username: 1, name: 1 } }),\n\t\t\t})),\n\t\t);\n\t},\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"bada5fb5a8245fd8c6c47098a39191853bfa0a63"}
