{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"imports/client/sodium-plus/lib/backend/sodiumnative.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/imports/client/sodium-plus/lib/backend/sodiumnative.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/client/sodium-plus/lib/backend/sodiumnative.js"}},"code":"!function (module1) {\n  var _regeneratorRuntime;\n  module1.link(\"@babel/runtime/regenerator\", {\n    default: function (v) {\n      _regeneratorRuntime = v;\n    }\n  }, 0);\n  var _inheritsLoose;\n  module1.link(\"@babel/runtime/helpers/inheritsLoose\", {\n    default: function (v) {\n      _inheritsLoose = v;\n    }\n  }, 1);\n  var loaded = false;\n  var _sodium;\n  /* istanbul ignore next */\n  try {\n    _sodium = require('sodium-native');\n    loaded = true;\n  } catch (e) {\n    _sodium = {};\n  }\n  var Backend = require('../backend');\n  var CryptographyKey = require('../cryptography-key');\n  var SodiumError = require('../sodium-error');\n  var Util = require('../util');\n  var toBuffer = require('typedarray-to-buffer');\n  /* istanbul ignore if */\n  if (typeof Buffer === 'undefined') {\n    var _Buffer = require('buffer/').Buffer;\n  }\n\n  /* istanbul ignore next */\n  module.exports = /*#__PURE__*/function (_Backend) {\n    function SodiumNativeBackend(lib) {\n      var _this;\n      _this = _Backend.call(this, lib) || this;\n      _this.sodium = lib;\n      _this.backendName = 'SodiumNativeBackend';\n      return _this;\n    }\n    _inheritsLoose(SodiumNativeBackend, _Backend);\n    SodiumNativeBackend.init = function () {\n      function init() {\n        return _regeneratorRuntime.async(function () {\n          function init$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (loaded) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new SodiumError('sodium-native not installed');\n              case 2:\n                return _context.abrupt(\"return\", new SodiumNativeBackend(_sodium));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n          return init$;\n        }(), null, null, null, Promise);\n      }\n      return init;\n    }()\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    var _proto = SodiumNativeBackend.prototype;\n    _proto.crypto_aead_xchacha20poly1305_ietf_decrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        var plaintext;\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_decrypt$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                plaintext = Buffer.alloc(ciphertext.length - 16, 0);\n                _context2.t0 = this.sodium;\n                _context2.t1 = plaintext;\n                _context2.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 5:\n                _context2.t2 = _context2.sent;\n                _context2.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(assocData));\n              case 8:\n                _context2.t3 = _context2.sent;\n                _context2.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 11:\n                _context2.t4 = _context2.sent;\n                _context2.t5 = key.getBuffer();\n                _context2.t0.crypto_aead_xchacha20poly1305_ietf_decrypt.call(_context2.t0, _context2.t1, null, _context2.t2, _context2.t3, _context2.t4, _context2.t5);\n                return _context2.abrupt(\"return\", plaintext);\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_decrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_decrypt;\n    }()\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_aead_xchacha20poly1305_ietf_encrypt = function () {\n      function crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        var ciphertext;\n        return _regeneratorRuntime.async(function () {\n          function crypto_aead_xchacha20poly1305_ietf_encrypt$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                ciphertext = Buffer.alloc(plaintext.length + 16, 0);\n                _context3.t0 = this.sodium;\n                _context3.t1 = ciphertext;\n                _context3.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context3.t2 = _context3.sent;\n                _context3.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(assocData));\n              case 8:\n                _context3.t3 = _context3.sent;\n                _context3.next = 11;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 11:\n                _context3.t4 = _context3.sent;\n                _context3.t5 = key.getBuffer();\n                _context3.t0.crypto_aead_xchacha20poly1305_ietf_encrypt.call(_context3.t0, _context3.t1, _context3.t2, _context3.t3, null, _context3.t4, _context3.t5);\n                return _context3.abrupt(\"return\", ciphertext);\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n          return crypto_aead_xchacha20poly1305_ietf_encrypt$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_aead_xchacha20poly1305_ietf_encrypt;\n    }()\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    ;\n    _proto.crypto_auth = function () {\n      function crypto_auth(message, key) {\n        var output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                output = Buffer.alloc(32);\n                _context4.t0 = this.sodium;\n                _context4.t1 = output;\n                _context4.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 5:\n                _context4.t2 = _context4.sent;\n                _context4.t3 = key.getBuffer();\n                _context4.t0.crypto_auth.call(_context4.t0, _context4.t1, _context4.t2, _context4.t3);\n                return _context4.abrupt(\"return\", toBuffer(output));\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n          return crypto_auth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth;\n    }()\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_auth_verify = function () {\n      function crypto_auth_verify(mac, message, key) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_auth_verify$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = this.sodium;\n                _context5.t1 = mac;\n                _context5.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context5.t2 = _context5.sent;\n                _context5.t3 = key.getBuffer();\n                return _context5.abrupt(\"return\", _context5.t0.crypto_auth_verify.call(_context5.t0, _context5.t1, _context5.t2, _context5.t3));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n          return crypto_auth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_auth_verify;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n    _proto.crypto_box = function () {\n      function crypto_box(plaintext, nonce, sk, pk) {\n        var ciphertext;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                ciphertext = Buffer.alloc(plaintext.length + 16);\n                _context6.t0 = this.sodium;\n                _context6.t1 = ciphertext;\n                _context6.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context6.t2 = _context6.sent;\n                _context6.t3 = nonce;\n                _context6.t4 = pk.getBuffer();\n                _context6.t5 = sk.getBuffer();\n                _context6.t0.crypto_box_easy.call(_context6.t0, _context6.t1, _context6.t2, _context6.t3, _context6.t4, _context6.t5);\n                return _context6.abrupt(\"return\", Util.toBuffer(ciphertext));\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n          return crypto_box$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_open = function () {\n      function crypto_box_open(ciphertext, nonce, sk, pk) {\n        var plaintext, success;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_open$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                plaintext = Buffer.alloc(ciphertext.length - 16);\n                success = this.sodium.crypto_box_open_easy(plaintext, ciphertext, nonce, pk.getBuffer(), sk.getBuffer());\n                if (success) {\n                  _context7.next = 4;\n                  break;\n                }\n                throw new SodiumError('Decryption failed');\n              case 4:\n                return _context7.abrupt(\"return\", Util.toBuffer(plaintext));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n          return crypto_box_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_open;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    ;\n    _proto.crypto_box_seal = function () {\n      function crypto_box_seal(plaintext, pk) {\n        var ciphertext;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                ciphertext = Buffer.alloc(plaintext.length + 48);\n                _context8.t0 = this.sodium;\n                _context8.t1 = ciphertext;\n                _context8.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context8.t2 = _context8.sent;\n                _context8.t3 = pk.getBuffer();\n                _context8.t0.crypto_box_seal.call(_context8.t0, _context8.t1, _context8.t2, _context8.t3);\n                return _context8.abrupt(\"return\", Util.toBuffer(ciphertext));\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n          return crypto_box_seal$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_box_seal_open = function () {\n      function crypto_box_seal_open(ciphertext, pk, sk) {\n        var plaintext, success;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_seal_open$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                plaintext = Buffer.alloc(ciphertext.length - 48);\n                _context9.t0 = this.sodium;\n                _context9.t1 = plaintext;\n                _context9.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ciphertext));\n              case 5:\n                _context9.t2 = _context9.sent;\n                _context9.t3 = pk.getBuffer();\n                _context9.t4 = sk.getBuffer();\n                success = _context9.t0.crypto_box_seal_open.call(_context9.t0, _context9.t1, _context9.t2, _context9.t3, _context9.t4);\n                if (success) {\n                  _context9.next = 11;\n                  break;\n                }\n                throw new SodiumError('Decryption failed');\n              case 11:\n                return _context9.abrupt(\"return\", Util.toBuffer(plaintext));\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n          return crypto_box_seal_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_seal_open;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_box_keypair = function () {\n      function crypto_box_keypair() {\n        var sK, pK;\n        return _regeneratorRuntime.async(function () {\n          function crypto_box_keypair$(_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                sK = Buffer.alloc(32, 0);\n                pK = Buffer.alloc(32, 0);\n                this.sodium.crypto_box_keypair(sK, pK);\n                return _context10.abrupt(\"return\", new CryptographyKey(Buffer.concat([pK, sK])));\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n          return crypto_box_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_box_keypair;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash = function () {\n      function crypto_generichash(message) {\n        var key,\n          outputLength,\n          hash,\n          _args11 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash$(_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                key = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n                outputLength = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : 32;\n                hash = Buffer.alloc(outputLength);\n                if (!key) {\n                  _context11.next = 13;\n                  break;\n                }\n                _context11.t0 = this.sodium;\n                _context11.t1 = hash;\n                _context11.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 8:\n                _context11.t2 = _context11.sent;\n                _context11.t3 = key.getBuffer();\n                _context11.t0.crypto_generichash.call(_context11.t0, _context11.t1, _context11.t2, _context11.t3);\n                _context11.next = 19;\n                break;\n              case 13:\n                _context11.t4 = this.sodium;\n                _context11.t5 = hash;\n                _context11.next = 17;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 17:\n                _context11.t6 = _context11.sent;\n                _context11.t4.crypto_generichash.call(_context11.t4, _context11.t5, _context11.t6);\n              case 19:\n                return _context11.abrupt(\"return\", hash);\n              case 20:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n          return crypto_generichash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash;\n    }()\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_init = function () {\n      function crypto_generichash_init() {\n        var key,\n          outputLength,\n          state,\n          _args12 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_init$(_context12) {\n            while (1) switch (_context12.prev = _context12.next) {\n              case 0:\n                key = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : null;\n                outputLength = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : 32;\n                state = Buffer.alloc(this.CRYPTO_GENERICHASH_STATEBYTES);\n                if (key) {\n                  this.sodium.crypto_generichash_init(state, key.getBuffer(), outputLength);\n                } else {\n                  this.sodium.crypto_generichash_init(state, null, outputLength);\n                }\n                return _context12.abrupt(\"return\", state);\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n          return crypto_generichash_init$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_init;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    ;\n    _proto.crypto_generichash_update = function () {\n      function crypto_generichash_update(state, message) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_update$(_context13) {\n            while (1) switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.t0 = this.sodium;\n                _context13.t1 = state;\n                _context13.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context13.t2 = _context13.sent;\n                _context13.t0.crypto_generichash_update.call(_context13.t0, _context13.t1, _context13.t2);\n                return _context13.abrupt(\"return\", state);\n              case 7:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n          return crypto_generichash_update$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_update;\n    }()\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_generichash_final = function () {\n      function crypto_generichash_final(state) {\n        var outputLength,\n          output,\n          _args14 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_generichash_final$(_context14) {\n            while (1) switch (_context14.prev = _context14.next) {\n              case 0:\n                outputLength = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 32;\n                output = Buffer.alloc(outputLength);\n                this.sodium.crypto_generichash_final(state, output);\n                return _context14.abrupt(\"return\", output);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n          return crypto_generichash_final$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_generichash_final;\n    }()\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_kdf_derive_from_key = function () {\n      function crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        var subkey;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kdf_derive_from_key$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                subkey = Buffer.alloc(length, 0);\n                _context15.t0 = this.sodium;\n                _context15.t1 = subkey;\n                _context15.t2 = subKeyId | 0;\n                _context15.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(context));\n              case 6:\n                _context15.t3 = _context15.sent;\n                _context15.t4 = key.getBuffer();\n                _context15.t0.crypto_kdf_derive_from_key.call(_context15.t0, _context15.t1, _context15.t2, _context15.t3, _context15.t4);\n                return _context15.abrupt(\"return\", new CryptographyKey(subkey));\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n          return crypto_kdf_derive_from_key$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kdf_derive_from_key;\n    }()\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_client_session_keys = function () {\n      function crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        var rx, tx;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_client_session_keys$(_context16) {\n            while (1) switch (_context16.prev = _context16.next) {\n              case 0:\n                rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n                tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n                this.sodium.crypto_kx_client_session_keys(rx, tx, clientPublicKey.getBuffer(), clientSecretKey.getBuffer(), serverPublicKey.getBuffer());\n                return _context16.abrupt(\"return\", [new CryptographyKey(rx), new CryptographyKey(tx)]);\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n          return crypto_kx_client_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_client_session_keys;\n    }()\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    ;\n    _proto.crypto_kx_server_session_keys = function () {\n      function crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        var rx, tx;\n        return _regeneratorRuntime.async(function () {\n          function crypto_kx_server_session_keys$(_context17) {\n            while (1) switch (_context17.prev = _context17.next) {\n              case 0:\n                rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n                tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n                this.sodium.crypto_kx_server_session_keys(rx, tx, serverPublicKey.getBuffer(), serverSecretKey.getBuffer(), clientPublicKey.getBuffer());\n                return _context17.abrupt(\"return\", [new CryptographyKey(rx), new CryptographyKey(tx)]);\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n          return crypto_kx_server_session_keys$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_kx_server_session_keys;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_onetimeauth = function () {\n      function crypto_onetimeauth(message, key) {\n        var output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth$(_context18) {\n            while (1) switch (_context18.prev = _context18.next) {\n              case 0:\n                output = Buffer.alloc(16);\n                _context18.t0 = this.sodium;\n                _context18.t1 = output;\n                _context18.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 5:\n                _context18.t2 = _context18.sent;\n                _context18.t3 = key.getBuffer();\n                _context18.t0.crypto_onetimeauth.call(_context18.t0, _context18.t1, _context18.t2, _context18.t3);\n                return _context18.abrupt(\"return\", output);\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n          return crypto_onetimeauth$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_onetimeauth_verify = function () {\n      function crypto_onetimeauth_verify(message, key, tag) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_onetimeauth_verify$(_context19) {\n            while (1) switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.t0 = this.sodium;\n                _context19.t1 = tag;\n                _context19.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context19.t2 = _context19.sent;\n                _context19.t3 = key.getBuffer();\n                return _context19.abrupt(\"return\", _context19.t0.crypto_onetimeauth_verify.call(_context19.t0, _context19.t1, _context19.t2, _context19.t3));\n              case 7:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n          return crypto_onetimeauth_verify$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_onetimeauth_verify;\n    }()\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_pwhash = function () {\n      function crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        var _this2 = this;\n        var hashed, bufPass, bufSalt;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                hashed = Buffer.alloc(length, 0);\n                _context20.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 3:\n                bufPass = _context20.sent;\n                _context20.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(salt));\n              case 6:\n                bufSalt = _context20.sent;\n                _context20.next = 9;\n                return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                  _this2.sodium.crypto_pwhash_async(hashed, bufPass, bufSalt, opslimit, memlimit, algorithm, function (e, res) {\n                    if (e) return reject(e);\n                    return resolve(res);\n                  });\n                }));\n              case 9:\n                return _context20.abrupt(\"return\", hashed);\n              case 10:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n          return crypto_pwhash$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_pwhash;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.crypto_pwhash_str = function () {\n      function crypto_pwhash_str(password, opslimit, memlimit) {\n        var _this3 = this;\n        var hashed, bufPass;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str$(_context21) {\n            while (1) switch (_context21.prev = _context21.next) {\n              case 0:\n                hashed = Buffer.alloc(128, 0);\n                _context21.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 3:\n                bufPass = _context21.sent;\n                _context21.next = 6;\n                return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                  _this3.sodium.crypto_pwhash_str_async(hashed, bufPass, opslimit, memlimit, function (e, res) {\n                    if (e) return reject(e);\n                    return resolve(res);\n                  });\n                }));\n              case 6:\n                return _context21.abrupt(\"return\", hashed.toString());\n              case 7:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n          return crypto_pwhash_str$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_pwhash_str;\n    }()\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_verify = function () {\n      function crypto_pwhash_str_verify(password, hash) {\n        var _this4 = this;\n        var allocated, bufPass;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_verify$(_context22) {\n            while (1) switch (_context22.prev = _context22.next) {\n              case 0:\n                allocated = Buffer.alloc(128, 0);\n                _context22.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(hash));\n              case 3:\n                _context22.sent.copy(allocated, 0, 0);\n                _context22.next = 6;\n                return _regeneratorRuntime.awrap(Util.toBuffer(password));\n              case 6:\n                bufPass = _context22.sent;\n                return _context22.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this4.sodium.crypto_pwhash_str_verify_async(allocated, bufPass, function (e, res) {\n                    if (e) return reject(e);\n                    return resolve(res);\n                  });\n                }));\n              case 8:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n          return crypto_pwhash_str_verify$;\n        }(), null, null, null, Promise);\n      }\n      return crypto_pwhash_str_verify;\n    }()\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.crypto_pwhash_str_needs_rehash = function () {\n      function crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        var allocated;\n        return _regeneratorRuntime.async(function () {\n          function crypto_pwhash_str_needs_rehash$(_context23) {\n            while (1) switch (_context23.prev = _context23.next) {\n              case 0:\n                allocated = Buffer.alloc(128, 0);\n                _context23.next = 3;\n                return _regeneratorRuntime.awrap(Util.toBuffer(hash));\n              case 3:\n                _context23.sent.copy(allocated, 0, 0);\n                return _context23.abrupt(\"return\", this.sodium.crypto_pwhash_str_needs_rehash(allocated, opslimit, memlimit));\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n          return crypto_pwhash_str_needs_rehash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_pwhash_str_needs_rehash;\n    }()\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_scalarmult = function () {\n      function crypto_scalarmult(secretKey, publicKey) {\n        var shared;\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult$(_context24) {\n            while (1) switch (_context24.prev = _context24.next) {\n              case 0:\n                shared = Buffer.alloc(32);\n                this.sodium.crypto_scalarmult(shared, secretKey.getBuffer(), publicKey.getBuffer());\n                _context24.t0 = CryptographyKey;\n                _context24.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(shared));\n              case 5:\n                _context24.t1 = _context24.sent;\n                return _context24.abrupt(\"return\", new _context24.t0(_context24.t1));\n              case 7:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n          return crypto_scalarmult$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult;\n    }()\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_scalarmult_base = function () {\n      function crypto_scalarmult_base(secretKey) {\n        var buf;\n        return _regeneratorRuntime.async(function () {\n          function crypto_scalarmult_base$(_context25) {\n            while (1) switch (_context25.prev = _context25.next) {\n              case 0:\n                buf = Buffer.alloc(32);\n                this.sodium.crypto_scalarmult_base(buf, secretKey.getBuffer());\n                return _context25.abrupt(\"return\", buf);\n              case 3:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n          return crypto_scalarmult_base$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_scalarmult_base;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox = function () {\n      function crypto_secretbox(plaintext, nonce, key) {\n        var encrypted;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox$(_context26) {\n            while (1) switch (_context26.prev = _context26.next) {\n              case 0:\n                encrypted = Buffer.alloc(plaintext.length + 16);\n                _context26.t0 = this.sodium;\n                _context26.t1 = encrypted;\n                _context26.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context26.t2 = _context26.sent;\n                _context26.t3 = nonce;\n                _context26.t4 = key.getBuffer();\n                _context26.t0.crypto_secretbox_easy.call(_context26.t0, _context26.t1, _context26.t2, _context26.t3, _context26.t4);\n                return _context26.abrupt(\"return\", encrypted);\n              case 10:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n          return crypto_secretbox$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox;\n    }()\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_shorthash = function () {\n      function crypto_shorthash(message, key) {\n        var output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_shorthash$(_context27) {\n            while (1) switch (_context27.prev = _context27.next) {\n              case 0:\n                output = Buffer.alloc(8);\n                _context27.t0 = this.sodium;\n                _context27.t1 = output;\n                _context27.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 5:\n                _context27.t2 = _context27.sent;\n                _context27.t3 = key.getBuffer();\n                _context27.t0.crypto_shorthash.call(_context27.t0, _context27.t1, _context27.t2, _context27.t3);\n                return _context27.abrupt(\"return\", output);\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n          return crypto_shorthash$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_shorthash;\n    }()\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretbox_open = function () {\n      function crypto_secretbox_open(ciphertext, nonce, key) {\n        var decrypted;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretbox_open$(_context28) {\n            while (1) switch (_context28.prev = _context28.next) {\n              case 0:\n                decrypted = Buffer.alloc(ciphertext.length - 16);\n                if (this.sodium.crypto_secretbox_open_easy(decrypted, ciphertext, nonce, key.getBuffer())) {\n                  _context28.next = 3;\n                  break;\n                }\n                throw new SodiumError('Decryption failure');\n              case 3:\n                return _context28.abrupt(\"return\", decrypted);\n              case 4:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n          return crypto_secretbox_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretbox_open;\n    }()\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_push = function () {\n      function crypto_secretstream_xchacha20poly1305_init_push(key) {\n        var state, header;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_push$(_context29) {\n            while (1) switch (_context29.prev = _context29.next) {\n              case 0:\n                state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n                header = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n                this.sodium.randombytes_buf(header);\n                this.sodium.crypto_secretstream_xchacha20poly1305_init_push(state, header, key.getBuffer());\n                return _context29.abrupt(\"return\", [state, header]);\n              case 5:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_push;\n    }()\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_init_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        var state;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_init_pull$(_context30) {\n            while (1) switch (_context30.prev = _context30.next) {\n              case 0:\n                if (!(header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES)) {\n                  _context30.next = 2;\n                  break;\n                }\n                throw new SodiumError(\"Header must be \" + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES + \" bytes long\");\n              case 2:\n                state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n                this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(state, header, key.getBuffer());\n                return _context30.abrupt(\"return\", state);\n              case 5:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_init_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_init_pull;\n    }()\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_push = function () {\n      function crypto_secretstream_xchacha20poly1305_push(state, message) {\n        var ad,\n          tag,\n          ciphertext,\n          _args31 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_push$(_context31) {\n            while (1) switch (_context31.prev = _context31.next) {\n              case 0:\n                ad = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : '';\n                tag = _args31.length > 3 && _args31[3] !== undefined ? _args31[3] : 0;\n                ciphertext = Buffer.alloc(message.length + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n                _context31.t0 = this.sodium;\n                _context31.t1 = state;\n                _context31.t2 = ciphertext;\n                _context31.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 8:\n                _context31.t3 = _context31.sent;\n                if (!(ad.length > 0)) {\n                  _context31.next = 15;\n                  break;\n                }\n                _context31.next = 12;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n              case 12:\n                _context31.t4 = _context31.sent;\n                _context31.next = 16;\n                break;\n              case 15:\n                _context31.t4 = null;\n              case 16:\n                _context31.t5 = _context31.t4;\n                _context31.t6 = Buffer.from([tag]);\n                _context31.t0.crypto_secretstream_xchacha20poly1305_push.call(_context31.t0, _context31.t1, _context31.t2, _context31.t3, _context31.t5, _context31.t6);\n                return _context31.abrupt(\"return\", ciphertext);\n              case 20:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_push$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_push;\n    }()\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_pull = function () {\n      function crypto_secretstream_xchacha20poly1305_pull(state, ciphertext) {\n        var ad,\n          tag,\n          plaintext,\n          _args32 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_pull$(_context32) {\n            while (1) switch (_context32.prev = _context32.next) {\n              case 0:\n                ad = _args32.length > 2 && _args32[2] !== undefined ? _args32[2] : '';\n                tag = _args32.length > 3 && _args32[3] !== undefined ? _args32[3] : 0;\n                if (!(ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES)) {\n                  _context32.next = 4;\n                  break;\n                }\n                throw new SodiumError('Invalid ciphertext size');\n              case 4:\n                plaintext = Buffer.alloc(ciphertext.length - this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n                _context32.t0 = this.sodium;\n                _context32.t1 = state;\n                _context32.t2 = plaintext;\n                _context32.t3 = Buffer.from([tag]);\n                _context32.t4 = ciphertext;\n                if (!(ad.length > 0)) {\n                  _context32.next = 16;\n                  break;\n                }\n                _context32.next = 13;\n                return _regeneratorRuntime.awrap(Util.toBuffer(ad));\n              case 13:\n                _context32.t5 = _context32.sent;\n                _context32.next = 17;\n                break;\n              case 16:\n                _context32.t5 = null;\n              case 17:\n                _context32.t6 = _context32.t5;\n                _context32.t0.crypto_secretstream_xchacha20poly1305_pull.call(_context32.t0, _context32.t1, _context32.t2, _context32.t3, _context32.t4, _context32.t6);\n                return _context32.abrupt(\"return\", plaintext);\n              case 20:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_pull$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_pull;\n    }()\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.crypto_secretstream_xchacha20poly1305_rekey = function () {\n      function crypto_secretstream_xchacha20poly1305_rekey(state) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_secretstream_xchacha20poly1305_rekey$(_context33) {\n            while (1) switch (_context33.prev = _context33.next) {\n              case 0:\n                this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n              case 1:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n          return crypto_secretstream_xchacha20poly1305_rekey$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_secretstream_xchacha20poly1305_rekey;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign = function () {\n      function crypto_sign(message, secretKey) {\n        var signed;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign$(_context34) {\n            while (1) switch (_context34.prev = _context34.next) {\n              case 0:\n                signed = Buffer.alloc(message.length + 64);\n                _context34.t0 = this.sodium;\n                _context34.t1 = signed;\n                _context34.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 5:\n                _context34.t2 = _context34.sent;\n                _context34.t3 = secretKey.getBuffer();\n                _context34.t0.crypto_sign.call(_context34.t0, _context34.t1, _context34.t2, _context34.t3);\n                return _context34.abrupt(\"return\", signed);\n              case 9:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n          return crypto_sign$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign;\n    }()\n    /**\n     * @param {Buffer} signedMessage,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_open = function () {\n      function crypto_sign_open(signedMessage, publicKey) {\n        var original;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_open$(_context35) {\n            while (1) switch (_context35.prev = _context35.next) {\n              case 0:\n                original = Buffer.alloc(signedMessage.length - 64);\n                _context35.t0 = this.sodium;\n                _context35.t1 = original;\n                _context35.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(signedMessage));\n              case 5:\n                _context35.t2 = _context35.sent;\n                _context35.t3 = publicKey.getBuffer();\n                _context35.t0.crypto_sign_open.call(_context35.t0, _context35.t1, _context35.t2, _context35.t3);\n                return _context35.abrupt(\"return\", original);\n              case 9:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n          return crypto_sign_open$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_open;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_detached = function () {\n      function crypto_sign_detached(message, secretKey) {\n        var signature;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_detached$(_context36) {\n            while (1) switch (_context36.prev = _context36.next) {\n              case 0:\n                signature = Buffer.alloc(64);\n                _context36.t0 = this.sodium;\n                _context36.t1 = signature;\n                _context36.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 5:\n                _context36.t2 = _context36.sent;\n                _context36.t3 = secretKey.getBuffer();\n                _context36.t0.crypto_sign_detached.call(_context36.t0, _context36.t1, _context36.t2, _context36.t3);\n                return _context36.abrupt(\"return\", signature);\n              case 9:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n          return crypto_sign_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_detached;\n    }()\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_verify_detached = function () {\n      function crypto_sign_verify_detached(message, publicKey, signature) {\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_verify_detached$(_context37) {\n            while (1) switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.t0 = this.sodium;\n                _context37.t1 = signature;\n                _context37.next = 4;\n                return _regeneratorRuntime.awrap(Util.toBuffer(message));\n              case 4:\n                _context37.t2 = _context37.sent;\n                _context37.t3 = publicKey.getBuffer();\n                return _context37.abrupt(\"return\", _context37.t0.crypto_sign_verify_detached.call(_context37.t0, _context37.t1, _context37.t2, _context37.t3));\n              case 7:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n          return crypto_sign_verify_detached$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_verify_detached;\n    }()\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_keypair = function () {\n      function crypto_sign_keypair() {\n        var sK, pK;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_keypair$(_context38) {\n            while (1) switch (_context38.prev = _context38.next) {\n              case 0:\n                sK = Buffer.alloc(64, 0);\n                pK = Buffer.alloc(32, 0);\n                this.sodium.crypto_sign_keypair(pK, sK);\n                return _context38.abrupt(\"return\", new CryptographyKey(Buffer.concat([sK, pK])));\n              case 4:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n          return crypto_sign_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_keypair;\n    }()\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    ;\n    _proto.crypto_sign_seed_keypair = function () {\n      function crypto_sign_seed_keypair(seed) {\n        var sK, pK;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_seed_keypair$(_context39) {\n            while (1) switch (_context39.prev = _context39.next) {\n              case 0:\n                sK = Buffer.alloc(64, 0);\n                pK = Buffer.alloc(32, 0);\n                this.sodium.crypto_sign_seed_keypair(pK, sK, seed);\n                return _context39.abrupt(\"return\", new CryptographyKey(Buffer.concat([sK, pK])));\n              case 4:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n          return crypto_sign_seed_keypair$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_seed_keypair;\n    }()\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_sk_to_curve25519 = function () {\n      function crypto_sign_ed25519_sk_to_curve25519(sk) {\n        var xsk;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_sk_to_curve25519$(_context40) {\n            while (1) switch (_context40.prev = _context40.next) {\n              case 0:\n                xsk = Buffer.alloc(32);\n                this.sodium.crypto_sign_ed25519_sk_to_curve25519(xsk, sk.getBuffer());\n                return _context40.abrupt(\"return\", xsk);\n              case 3:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n          return crypto_sign_ed25519_sk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_sk_to_curve25519;\n    }()\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_sign_ed25519_pk_to_curve25519 = function () {\n      function crypto_sign_ed25519_pk_to_curve25519(pk) {\n        var xpk;\n        return _regeneratorRuntime.async(function () {\n          function crypto_sign_ed25519_pk_to_curve25519$(_context41) {\n            while (1) switch (_context41.prev = _context41.next) {\n              case 0:\n                xpk = Buffer.alloc(32);\n                this.sodium.crypto_sign_ed25519_pk_to_curve25519(xpk, pk.getBuffer());\n                return _context41.abrupt(\"return\", xpk);\n              case 3:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n          return crypto_sign_ed25519_pk_to_curve25519$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_sign_ed25519_pk_to_curve25519;\n    }()\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream = function () {\n      function crypto_stream(length, nonce, key) {\n        var output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream$(_context42) {\n            while (1) switch (_context42.prev = _context42.next) {\n              case 0:\n                output = Buffer.alloc(length);\n                _context42.t0 = this.sodium;\n                _context42.t1 = output;\n                _context42.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 5:\n                _context42.t2 = _context42.sent;\n                _context42.t3 = key.getBuffer();\n                _context42.t0.crypto_stream.call(_context42.t0, _context42.t1, _context42.t2, _context42.t3);\n                return _context42.abrupt(\"return\", output);\n              case 9:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n          return crypto_stream$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream;\n    }()\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.crypto_stream_xor = function () {\n      function crypto_stream_xor(plaintext, nonce, key) {\n        var output;\n        return _regeneratorRuntime.async(function () {\n          function crypto_stream_xor$(_context43) {\n            while (1) switch (_context43.prev = _context43.next) {\n              case 0:\n                output = Buffer.alloc(plaintext.length);\n                _context43.t0 = this.sodium;\n                _context43.t1 = output;\n                _context43.next = 5;\n                return _regeneratorRuntime.awrap(Util.toBuffer(plaintext));\n              case 5:\n                _context43.t2 = _context43.sent;\n                _context43.next = 8;\n                return _regeneratorRuntime.awrap(Util.toBuffer(nonce));\n              case 8:\n                _context43.t3 = _context43.sent;\n                _context43.t4 = key.getBuffer();\n                _context43.t0.crypto_stream_xor.call(_context43.t0, _context43.t1, _context43.t2, _context43.t3, _context43.t4);\n                return _context43.abrupt(\"return\", output);\n              case 12:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n          return crypto_stream_xor$;\n        }(), null, this, null, Promise);\n      }\n      return crypto_stream_xor;\n    }()\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.randombytes_buf = function () {\n      function randombytes_buf(number) {\n        var buf;\n        return _regeneratorRuntime.async(function () {\n          function randombytes_buf$(_context44) {\n            while (1) switch (_context44.prev = _context44.next) {\n              case 0:\n                buf = Buffer.alloc(number);\n                this.sodium.randombytes_buf(buf);\n                return _context44.abrupt(\"return\", buf);\n              case 3:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n          return randombytes_buf$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_buf;\n    }()\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.randombytes_uniform = function () {\n      function randombytes_uniform(upperBound) {\n        return _regeneratorRuntime.async(function () {\n          function randombytes_uniform$(_context45) {\n            while (1) switch (_context45.prev = _context45.next) {\n              case 0:\n                return _context45.abrupt(\"return\", this.sodium.randombytes_uniform(upperBound));\n              case 1:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n          return randombytes_uniform$;\n        }(), null, this, null, Promise);\n      }\n      return randombytes_uniform;\n    }()\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_add = function () {\n      function sodium_add(val, addv) {\n        var buf;\n        return _regeneratorRuntime.async(function () {\n          function sodium_add$(_context46) {\n            while (1) switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return _regeneratorRuntime.awrap(Util.cloneBuffer(val));\n              case 2:\n                buf = _context46.sent;\n                this.sodium.sodium_add(buf, addv);\n                return _context46.abrupt(\"return\", buf);\n              case 5:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n          return sodium_add$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_add;\n    }()\n    /**\n     * @param {Buffer} input\n     * @return {Promise<string>}\n     */\n    ;\n    _proto.sodium_bin2hex = function () {\n      function sodium_bin2hex(input) {\n        var str, b, c, x, i;\n        return _regeneratorRuntime.async(function () {\n          function sodium_bin2hex$(_context47) {\n            while (1) switch (_context47.prev = _context47.next) {\n              case 0:\n                str = \"\";\n                for (i = 0; i < input.length; i++) {\n                  c = input[i] & 0xf;\n                  b = input[i] >>> 4;\n                  x = 87 + c + (c - 10 >> 8 & ~38) << 8 | 87 + b + (b - 10 >> 8 & ~38);\n                  str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);\n                }\n                return _context47.abrupt(\"return\", str);\n              case 3:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n          return sodium_bin2hex$;\n        }(), null, null, null, Promise);\n      }\n      return sodium_bin2hex;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    ;\n    _proto.sodium_compare = function () {\n      function sodium_compare(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_compare$(_context48) {\n            while (1) switch (_context48.prev = _context48.next) {\n              case 0:\n                return _context48.abrupt(\"return\", this.sodium.sodium_compare(b1, b2));\n              case 1:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n          return sodium_compare$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_compare;\n    }()\n    /**\n     * @param {Buffer|string} hex\n     * @param {string|null} ignore\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_hex2bin = function () {\n      function sodium_hex2bin(hex) {\n        var ignore,\n          bin_pos,\n          hex_pos,\n          c,\n          c_acc,\n          c_alpha0,\n          c_alpha,\n          c_num0,\n          c_num,\n          c_val,\n          state,\n          bin,\n          _args49 = arguments;\n        return _regeneratorRuntime.async(function () {\n          function sodium_hex2bin$(_context49) {\n            while (1) switch (_context49.prev = _context49.next) {\n              case 0:\n                ignore = _args49.length > 1 && _args49[1] !== undefined ? _args49[1] : null;\n                bin_pos = 0, hex_pos = 0, c = 0, c_acc = 0, c_alpha0 = 0, c_alpha = 0, c_num0 = 0, c_num = 0, c_val = 0, state = 0;\n                bin = Buffer.alloc(hex.length >> 1, 0);\n              case 3:\n                if (!(hex_pos < hex.length)) {\n                  _context49.next = 20;\n                  break;\n                }\n                c = hex.charCodeAt(hex_pos);\n                c_num = c ^ 48;\n                c_num0 = c_num - 10 >> 8;\n                c_alpha = (c & ~32) - 55;\n                c_alpha0 = (c_alpha - 10 ^ c_alpha - 16) >> 8;\n                if (!((c_num0 | c_alpha0) === 0)) {\n                  _context49.next = 14;\n                  break;\n                }\n                if (!(ignore && state === 0 && ignore.indexOf(c) >= 0)) {\n                  _context49.next = 13;\n                  break;\n                }\n                hex_pos++;\n                return _context49.abrupt(\"continue\", 3);\n              case 13:\n                return _context49.abrupt(\"break\", 20);\n              case 14:\n                c_val = c_num0 & c_num | c_alpha0 & c_alpha;\n                if (state === 0) {\n                  c_acc = c_val * 16;\n                } else {\n                  bin[bin_pos++] = c_acc | c_val;\n                }\n                state = ~state;\n                hex_pos++;\n                _context49.next = 3;\n                break;\n              case 20:\n                return _context49.abrupt(\"return\", bin);\n              case 21:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n          return sodium_hex2bin$;\n        }(), null, null, null, Promise);\n      }\n      return sodium_hex2bin;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_increment = function () {\n      function sodium_increment(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_increment$(_context50) {\n            while (1) switch (_context50.prev = _context50.next) {\n              case 0:\n                return _context50.abrupt(\"return\", this.sodium.sodium_increment(buf));\n              case 1:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n          return sodium_increment$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_increment;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_is_zero = function () {\n      function sodium_is_zero(buf, len) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_is_zero$(_context51) {\n            while (1) switch (_context51.prev = _context51.next) {\n              case 0:\n                return _context51.abrupt(\"return\", this.sodium.sodium_is_zero(buf, len));\n              case 1:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n          return sodium_is_zero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_is_zero;\n    }()\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    ;\n    _proto.sodium_memcmp = function () {\n      function sodium_memcmp(b1, b2) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memcmp$(_context52) {\n            while (1) switch (_context52.prev = _context52.next) {\n              case 0:\n                return _context52.abrupt(\"return\", this.sodium.sodium_memcmp(b1, b2));\n              case 1:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n          return sodium_memcmp$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memcmp;\n    }()\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    ;\n    _proto.sodium_memzero = function () {\n      function sodium_memzero(buf) {\n        return _regeneratorRuntime.async(function () {\n          function sodium_memzero$(_context53) {\n            while (1) switch (_context53.prev = _context53.next) {\n              case 0:\n                this.sodium.sodium_memzero(buf);\n              case 1:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n          return sodium_memzero$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_memzero;\n    }()\n    /**\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_pad = function () {\n      function sodium_pad(buf, blockSize) {\n        var length, padded, sliceto;\n        return _regeneratorRuntime.async(function () {\n          function sodium_pad$(_context54) {\n            while (1) switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.next = 2;\n                return _regeneratorRuntime.awrap(Util.toBuffer(buf));\n              case 2:\n                buf = _context54.sent;\n                length = buf.length + buf.length % blockSize;\n                if (length < blockSize) {\n                  length += blockSize;\n                }\n                padded = Buffer.alloc(length + 100);\n                buf.copy(padded, 0, 0);\n                sliceto = this.sodium.sodium_pad(padded, buf.length, blockSize);\n                return _context54.abrupt(\"return\", padded.slice(0, sliceto));\n              case 9:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n          return sodium_pad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_pad;\n    }()\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    ;\n    _proto.sodium_unpad = function () {\n      function sodium_unpad(buf, blockSize) {\n        var outlen;\n        return _regeneratorRuntime.async(function () {\n          function sodium_unpad$(_context55) {\n            while (1) switch (_context55.prev = _context55.next) {\n              case 0:\n                outlen = this.sodium.sodium_unpad(buf, buf.length, blockSize);\n                return _context55.abrupt(\"return\", buf.slice(0, outlen));\n              case 2:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n          return sodium_unpad$;\n        }(), null, this, null, Promise);\n      }\n      return sodium_unpad;\n    }();\n    return SodiumNativeBackend;\n  }(Backend);\n}.call(this, module);","map":{"version":3,"names":["_regeneratorRuntime","module1","link","default","v","_inheritsLoose","loaded","_sodium","require","e","Backend","CryptographyKey","SodiumError","Util","toBuffer","Buffer","module","exports","_Backend","SodiumNativeBackend","lib","_this","call","sodium","backendName","init","async","init$","_context","prev","next","abrupt","stop","Promise","_proto","prototype","crypto_aead_xchacha20poly1305_ietf_decrypt","ciphertext","assocData","nonce","key","plaintext","crypto_aead_xchacha20poly1305_ietf_decrypt$","_context2","alloc","length","t0","t1","awrap","t2","sent","t3","t4","t5","getBuffer","crypto_aead_xchacha20poly1305_ietf_encrypt","crypto_aead_xchacha20poly1305_ietf_encrypt$","_context3","crypto_auth","message","output","crypto_auth$","_context4","crypto_auth_verify","mac","crypto_auth_verify$","_context5","crypto_box","sk","pk","crypto_box$","_context6","crypto_box_easy","crypto_box_open","success","crypto_box_open$","_context7","crypto_box_open_easy","crypto_box_seal","crypto_box_seal$","_context8","crypto_box_seal_open","crypto_box_seal_open$","_context9","crypto_box_keypair","sK","pK","crypto_box_keypair$","_context10","concat","crypto_generichash","outputLength","hash","_args11","arguments","crypto_generichash$","_context11","undefined","t6","crypto_generichash_init","state","_args12","crypto_generichash_init$","_context12","CRYPTO_GENERICHASH_STATEBYTES","crypto_generichash_update","crypto_generichash_update$","_context13","crypto_generichash_final","_args14","crypto_generichash_final$","_context14","crypto_kdf_derive_from_key","subKeyId","context","subkey","crypto_kdf_derive_from_key$","_context15","crypto_kx_client_session_keys","clientPublicKey","clientSecretKey","serverPublicKey","rx","tx","crypto_kx_client_session_keys$","_context16","CRYPTO_KX_SESSIONKEYBYTES","crypto_kx_server_session_keys","serverSecretKey","crypto_kx_server_session_keys$","_context17","crypto_onetimeauth","crypto_onetimeauth$","_context18","crypto_onetimeauth_verify","tag","crypto_onetimeauth_verify$","_context19","crypto_pwhash","password","salt","opslimit","memlimit","algorithm","_this2","hashed","bufPass","bufSalt","crypto_pwhash$","_context20","resolve","reject","crypto_pwhash_async","res","crypto_pwhash_str","_this3","crypto_pwhash_str$","_context21","crypto_pwhash_str_async","toString","crypto_pwhash_str_verify","_this4","allocated","crypto_pwhash_str_verify$","_context22","copy","crypto_pwhash_str_verify_async","crypto_pwhash_str_needs_rehash","crypto_pwhash_str_needs_rehash$","_context23","crypto_scalarmult","secretKey","publicKey","shared","crypto_scalarmult$","_context24","crypto_scalarmult_base","buf","crypto_scalarmult_base$","_context25","crypto_secretbox","encrypted","crypto_secretbox$","_context26","crypto_secretbox_easy","crypto_shorthash","crypto_shorthash$","_context27","crypto_secretbox_open","decrypted","crypto_secretbox_open$","_context28","crypto_secretbox_open_easy","crypto_secretstream_xchacha20poly1305_init_push","header","crypto_secretstream_xchacha20poly1305_init_push$","_context29","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES","randombytes_buf","crypto_secretstream_xchacha20poly1305_init_pull","crypto_secretstream_xchacha20poly1305_init_pull$","_context30","crypto_secretstream_xchacha20poly1305_push","ad","_args31","crypto_secretstream_xchacha20poly1305_push$","_context31","CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES","from","crypto_secretstream_xchacha20poly1305_pull","_args32","crypto_secretstream_xchacha20poly1305_pull$","_context32","crypto_secretstream_xchacha20poly1305_rekey","crypto_secretstream_xchacha20poly1305_rekey$","_context33","crypto_sign","signed","crypto_sign$","_context34","crypto_sign_open","signedMessage","original","crypto_sign_open$","_context35","crypto_sign_detached","signature","crypto_sign_detached$","_context36","crypto_sign_verify_detached","crypto_sign_verify_detached$","_context37","crypto_sign_keypair","crypto_sign_keypair$","_context38","crypto_sign_seed_keypair","seed","crypto_sign_seed_keypair$","_context39","crypto_sign_ed25519_sk_to_curve25519","xsk","crypto_sign_ed25519_sk_to_curve25519$","_context40","crypto_sign_ed25519_pk_to_curve25519","xpk","crypto_sign_ed25519_pk_to_curve25519$","_context41","crypto_stream","crypto_stream$","_context42","crypto_stream_xor","crypto_stream_xor$","_context43","number","randombytes_buf$","_context44","randombytes_uniform","upperBound","randombytes_uniform$","_context45","sodium_add","val","addv","sodium_add$","_context46","cloneBuffer","sodium_bin2hex","input","str","b","c","x","i","sodium_bin2hex$","_context47","String","fromCharCode","sodium_compare","b1","b2","sodium_compare$","_context48","sodium_hex2bin","hex","ignore","bin_pos","hex_pos","c_acc","c_alpha0","c_alpha","c_num0","c_num","c_val","bin","_args49","sodium_hex2bin$","_context49","charCodeAt","indexOf","sodium_increment","sodium_increment$","_context50","sodium_is_zero","len","sodium_is_zero$","_context51","sodium_memcmp","sodium_memcmp$","_context52","sodium_memzero","sodium_memzero$","_context53","sodium_pad","blockSize","padded","sliceto","sodium_pad$","_context54","slice","sodium_unpad","outlen","sodium_unpad$","_context55"],"sources":["imports/client/sodium-plus/lib/backend/sodiumnative.js"],"sourcesContent":["let loaded = false;\nlet _sodium;\n/* istanbul ignore next */\ntry {\n    _sodium = require('sodium-native');\n    loaded = true;\n} catch (e) {\n    _sodium = {};\n}\nconst Backend = require('../backend');\nconst CryptographyKey = require('../cryptography-key');\nconst SodiumError = require('../sodium-error');\nconst Util = require('../util');\nconst toBuffer = require('typedarray-to-buffer');\n/* istanbul ignore if */\nif (typeof (Buffer) === 'undefined') {\n    let Buffer = require('buffer/').Buffer;\n}\n\n/* istanbul ignore next */\nmodule.exports = class SodiumNativeBackend extends Backend {\n    constructor(lib) {\n        super(lib);\n        this.sodium = lib;\n        this.backendName = 'SodiumNativeBackend';\n    }\n\n    static async init() {\n        if (!loaded) {\n            throw new SodiumError('sodium-native not installed');\n        }\n        return new SodiumNativeBackend(_sodium);\n    }\n\n    /**\n     *\n     * @param {String|Buffer} ciphertext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, assocData, nonce, key) {\n        const plaintext = Buffer.alloc(ciphertext.length - 16, 0);\n        this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(\n            plaintext,\n            null,\n            await Util.toBuffer(ciphertext),\n            await Util.toBuffer(assocData),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return plaintext;\n    }\n\n    /**\n     *\n     * @param {String|Buffer} plaintext\n     * @param {String|Buffer} assocData\n     * @param {String|Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_aead_xchacha20poly1305_ietf_encrypt(plaintext, assocData, nonce, key) {\n        const ciphertext = Buffer.alloc(plaintext.length + 16, 0);\n        this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(assocData),\n            null,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return ciphertext;\n    }\n\n    /**\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<buffer>}\n     */\n    async crypto_auth(message, key) {\n        const output = Buffer.alloc(32);\n        this.sodium.crypto_auth(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return toBuffer(output);\n    }\n\n    /**\n     * @param {Buffer} mac\n     * @param {String|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<boolean>}\n     */\n    async crypto_auth_verify(mac, message, key) {\n        return this.sodium.crypto_auth_verify(\n            mac,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box(plaintext, nonce, sk, pk) {\n        const ciphertext = Buffer.alloc(plaintext.length + 16);\n        this.sodium.crypto_box_easy(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            nonce,\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} sk\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_open(ciphertext, nonce, sk, pk) {\n        const plaintext = Buffer.alloc(ciphertext.length - 16);\n        const success = this.sodium.crypto_box_open_easy(\n            plaintext,\n            ciphertext,\n            nonce,\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        if (!success) {\n            throw new SodiumError('Decryption failed');\n        }\n        return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {CryptographyKey} pk\n     * @return {Promise<Buffer>}\n     *\n     */\n    async crypto_box_seal(plaintext, pk) {\n        const ciphertext = Buffer.alloc(plaintext.length + 48);\n        this.sodium.crypto_box_seal(\n            ciphertext,\n            await Util.toBuffer(plaintext),\n            pk.getBuffer()\n        );\n        return Util.toBuffer(ciphertext);\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {CryptographyKey} pk\n     * @param {CryptographyKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_box_seal_open(ciphertext, pk, sk) {\n        const plaintext = Buffer.alloc(ciphertext.length - 48);\n        const success = this.sodium.crypto_box_seal_open(\n            plaintext,\n            await Util.toBuffer(ciphertext),\n            pk.getBuffer(),\n            sk.getBuffer()\n        );\n        if (!success) {\n            throw new SodiumError('Decryption failed');\n        }\n        return Util.toBuffer(plaintext);\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_box_keypair() {\n        const sK = Buffer.alloc(32, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_box_keypair(sK, pK);\n        return new CryptographyKey(\n            Buffer.concat([pK, sK])\n        );\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash(message, key = null, outputLength = 32) {\n        const hash = Buffer.alloc(outputLength);\n        if (key) {\n            this.sodium.crypto_generichash(hash, await Util.toBuffer(message), key.getBuffer());\n        } else {\n            this.sodium.crypto_generichash(hash, await Util.toBuffer(message));\n        }\n        return hash;\n    }\n\n    /**\n     * @param {CryptographyKey|null} key\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_init(key = null, outputLength = 32) {\n        const state = Buffer.alloc(this.CRYPTO_GENERICHASH_STATEBYTES);\n        if (key) {\n            this.sodium.crypto_generichash_init(state, key.getBuffer(), outputLength);\n        } else {\n            this.sodium.crypto_generichash_init(state, null, outputLength);\n        }\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @return {Promise<*>}\n     */\n    async crypto_generichash_update(state, message) {\n        this.sodium.crypto_generichash_update(state, await Util.toBuffer(message));\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {number} outputLength\n     * @return {Promise<Buffer>}\n     */\n    async crypto_generichash_final(state, outputLength = 32) {\n        const output = Buffer.alloc(outputLength);\n        this.sodium.crypto_generichash_final(state, output);\n        return output;\n    }\n\n    /**\n     * @param {number} length\n     * @param {number} subKeyId\n     * @param {string|Buffer} context\n     * @param {CryptographyKey} key\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_kdf_derive_from_key(length, subKeyId, context, key) {\n        const subkey = Buffer.alloc(length, 0);\n        this.sodium.crypto_kdf_derive_from_key(\n            subkey,\n            subKeyId | 0,\n            await Util.toBuffer(context),\n            key.getBuffer()\n        );\n        return new CryptographyKey(subkey);\n    }\n\n    /**\n     * @param {X25519PublicKey} clientPublicKey\n     * @param {X25519SecretKey} clientSecretKey\n     * @param {X25519PublicKey} serverPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_client_session_keys(clientPublicKey, clientSecretKey, serverPublicKey) {\n        const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        this.sodium.crypto_kx_client_session_keys(\n            rx,\n            tx,\n            clientPublicKey.getBuffer(),\n            clientSecretKey.getBuffer(),\n            serverPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(rx),\n            new CryptographyKey(tx)\n        ];\n    }\n\n    /**\n     * @param {X25519PublicKey} serverPublicKey\n     * @param {X25519SecretKey} serverSecretKey\n     * @param {X25519PublicKey} clientPublicKey\n     * @return {Promise<CryptographyKey[]>}\n     */\n    async crypto_kx_server_session_keys(serverPublicKey, serverSecretKey, clientPublicKey) {\n        const rx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        const tx = Buffer.alloc(this.CRYPTO_KX_SESSIONKEYBYTES);\n        this.sodium.crypto_kx_server_session_keys(\n            rx,\n            tx,\n            serverPublicKey.getBuffer(),\n            serverSecretKey.getBuffer(),\n            clientPublicKey.getBuffer(),\n        );\n        return [\n            new CryptographyKey(rx),\n            new CryptographyKey(tx)\n        ];\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_onetimeauth(message, key) {\n        const output = Buffer.alloc(16);\n        this.sodium.crypto_onetimeauth(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @param {Buffer} tag\n     * @return {Promise<boolean>}\n     */\n    async crypto_onetimeauth_verify(message, key, tag) {\n        return this.sodium.crypto_onetimeauth_verify(\n            tag,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n    }\n\n    /**\n     * @param {number} length\n     * @param {string|Buffer} password\n     * @param {Buffer} salt\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @param {number} algorithm\n     * @return {Promise<Buffer>}\n     */\n    async crypto_pwhash(length, password, salt, opslimit, memlimit, algorithm) {\n        const hashed = Buffer.alloc(length, 0);\n        const bufPass = await Util.toBuffer(password);\n        const bufSalt = await Util.toBuffer(salt);\n        await new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_async(\n                hashed,\n                bufPass,\n                bufSalt,\n                opslimit,\n                memlimit,\n                algorithm,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n        return hashed;\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<string>}\n     */\n    async crypto_pwhash_str(password, opslimit, memlimit) {\n        const hashed = Buffer.alloc(128, 0);\n        const bufPass = await Util.toBuffer(password);\n        await new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_str_async(\n                hashed,\n                bufPass,\n                opslimit,\n                memlimit,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n        return hashed.toString();\n\n    }\n\n    /**\n     * @param {string|Buffer} password\n     * @param {string|Buffer} hash\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_verify(password, hash) {\n        const allocated = Buffer.alloc(128, 0);\n        (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n        const bufPass = await Util.toBuffer(password);\n        return new Promise((resolve, reject) => {\n            this.sodium.crypto_pwhash_str_verify_async(\n                allocated,\n                bufPass,\n                (e, res) => {\n                    if (e) return reject(e);\n                    return resolve(res);\n                }\n            );\n        });\n    }\n\n    /**\n     * @param {string|Buffer} hash\n     * @param {number} opslimit\n     * @param {number} memlimit\n     * @return {Promise<boolean>}\n     */\n    async crypto_pwhash_str_needs_rehash(hash, opslimit, memlimit) {\n        const allocated = Buffer.alloc(128, 0);\n        (await Util.toBuffer(hash)).copy(allocated, 0, 0);\n        return this.sodium.crypto_pwhash_str_needs_rehash(\n            allocated,\n            opslimit,\n            memlimit\n        );\n    }\n\n    /**\n     * @param {X25519SecretKey} secretKey\n     * @param {X25519PublicKey} publicKey\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_scalarmult(secretKey, publicKey) {\n        const shared = Buffer.alloc(32);\n        this.sodium.crypto_scalarmult(shared, secretKey.getBuffer(), publicKey.getBuffer());\n        return new CryptographyKey(\n            await Util.toBuffer(shared)\n        );\n    }\n\n    /**\n     *\n     * @param {CryptographyKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_scalarmult_base(secretKey) {\n        const buf = Buffer.alloc(32);\n        this.sodium.crypto_scalarmult_base(buf, secretKey.getBuffer());\n        return buf;\n    }\n\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox(plaintext, nonce, key) {\n        const encrypted = Buffer.alloc(plaintext.length + 16);\n        this.sodium.crypto_secretbox_easy(\n            encrypted,\n            await Util.toBuffer(plaintext),\n            nonce,\n            key.getBuffer()\n        );\n        return encrypted;\n    }\n\n    /**\n     * @param {string|Buffer} message\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_shorthash(message, key) {\n        const output = Buffer.alloc(8);\n        this.sodium.crypto_shorthash(\n            output,\n            await Util.toBuffer(message),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {Buffer} ciphertext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretbox_open(ciphertext, nonce, key) {\n        const decrypted = Buffer.alloc(ciphertext.length - 16);\n        if (!this.sodium.crypto_secretbox_open_easy(\n            decrypted,\n            ciphertext,\n            nonce,\n            key.getBuffer()\n        )) {\n            throw new SodiumError('Decryption failure');\n        }\n        return decrypted;\n    }\n\n    /**\n     * @param {CryptographyKey} key\n     * @return {Promise<array>} [state, header]\n     */\n    async crypto_secretstream_xchacha20poly1305_init_push(key) {\n        const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n        const header = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES);\n        this.sodium.randombytes_buf(header);\n        this.sodium.crypto_secretstream_xchacha20poly1305_init_push(state, header, key.getBuffer());\n        return [state, header];\n    }\n\n    /**\n     * @param {Buffer} header\n     * @param {CryptographyKey} key\n     * @return {Promise<*>} Returns the opaque state object\n     */\n    async crypto_secretstream_xchacha20poly1305_init_pull(header, key) {\n        if (header.length !== this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES) {\n            throw new SodiumError(`Header must be ${this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_HEADERBYTES} bytes long`);\n        }\n        const state = Buffer.alloc(this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_STATEBYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_init_pull(state, header, key.getBuffer());\n        return state;\n    }\n\n    /**\n     * @param {*} state\n     * @param {string|Buffer} message\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_push(state, message, ad = '', tag = 0) {\n        const ciphertext = Buffer.alloc(message.length + this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_push(\n            state,\n            ciphertext,\n            await Util.toBuffer(message),\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null,\n            Buffer.from([tag])\n        );\n        return ciphertext;\n    }\n\n    /**\n     * @param {*} state\n     * @param {Buffer} ciphertext\n     * @param {string|Buffer} ad\n     * @param {number} tag\n     * @return {Promise<Buffer>}\n     */\n    async crypto_secretstream_xchacha20poly1305_pull(state, ciphertext, ad = '', tag = 0) {\n        if (ciphertext.length < this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES) {\n            throw new SodiumError('Invalid ciphertext size');\n        }\n        const plaintext = Buffer.alloc(ciphertext.length - this.CRYPTO_SECRETSTREAM_XCHACHA20POLY1305_ABYTES);\n        this.sodium.crypto_secretstream_xchacha20poly1305_pull(\n            state,\n            plaintext,\n            Buffer.from([tag]),\n            ciphertext,\n            ad.length > 0 ? (await Util.toBuffer(ad)) : null\n        );\n        return plaintext;\n    }\n\n    /**\n     * @param {*} state\n     * @return {Promise<void>}\n     */\n    async crypto_secretstream_xchacha20poly1305_rekey(state) {\n        this.sodium.crypto_secretstream_xchacha20poly1305_rekey(state);\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign(message, secretKey) {\n        const signed = Buffer.alloc(message.length + 64);\n        this.sodium.crypto_sign(signed, await Util.toBuffer(message), secretKey.getBuffer());\n        return signed;\n    }\n\n    /**\n     * @param {Buffer} signedMessage,\n     * @param {Ed25519PublicKey} publicKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_open(signedMessage, publicKey) {\n        const original = Buffer.alloc(signedMessage.length - 64);\n        this.sodium.crypto_sign_open(original, await Util.toBuffer(signedMessage), publicKey.getBuffer());\n        return original;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519SecretKey} secretKey\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_detached(message, secretKey) {\n        const signature = Buffer.alloc(64);\n        this.sodium.crypto_sign_detached(signature, await Util.toBuffer(message), secretKey.getBuffer());\n        return signature;\n    }\n\n    /**\n     * @param {string|Buffer} message,\n     * @param {Ed25519PublicKey} publicKey\n     * @param {Buffer} signature\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_verify_detached(message, publicKey, signature) {\n        return this.sodium.crypto_sign_verify_detached(\n            signature,\n            await Util.toBuffer(message),\n            publicKey.getBuffer()\n        );\n    }\n\n    /**\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_keypair() {\n        const sK = Buffer.alloc(64, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_sign_keypair(pK, sK);\n        return new CryptographyKey(\n            Buffer.concat([sK, pK])\n        );\n    }\n\n    /**\n     * @param {Buffer} seed\n     * @return {Promise<CryptographyKey>}\n     */\n    async crypto_sign_seed_keypair(seed) {\n        const sK = Buffer.alloc(64, 0);\n        const pK = Buffer.alloc(32, 0);\n        this.sodium.crypto_sign_seed_keypair(pK, sK, seed);\n        return new CryptographyKey(\n            Buffer.concat([sK, pK])\n        );\n    }\n\n    /**\n     * @param {Ed25519SecretKey} sk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_sk_to_curve25519(sk) {\n        const xsk = Buffer.alloc(32);\n        this.sodium.crypto_sign_ed25519_sk_to_curve25519(xsk, sk.getBuffer());\n        return xsk;\n    }\n\n    /**\n     * @param {Ed25519PublicKey} pk\n     * @return {Promise<Buffer>}\n     */\n    async crypto_sign_ed25519_pk_to_curve25519(pk) {\n        const xpk = Buffer.alloc(32);\n        this.sodium.crypto_sign_ed25519_pk_to_curve25519(xpk, pk.getBuffer());\n        return xpk;\n    }\n\n    /**\n     * @param {number} length\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream(length, nonce, key) {\n        const output = Buffer.alloc(length);\n        this.sodium.crypto_stream(\n            output,\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {string|Buffer} plaintext\n     * @param {Buffer} nonce\n     * @param {CryptographyKey} key\n     * @return {Promise<Buffer>}\n     */\n    async crypto_stream_xor(plaintext, nonce, key) {\n        const output = Buffer.alloc(plaintext.length);\n        this.sodium.crypto_stream_xor(\n            output,\n            await Util.toBuffer(plaintext),\n            await Util.toBuffer(nonce),\n            key.getBuffer()\n        );\n        return output;\n    }\n\n    /**\n     * @param {number} number\n     * @return {Promise<Buffer>}\n     */\n    async randombytes_buf(number) {\n        let buf = Buffer.alloc(number);\n        this.sodium.randombytes_buf(buf);\n        return buf;\n    }\n\n    /**\n     * @param {number} upperBound\n     * @return {Promise<number>}\n     */\n    async randombytes_uniform(upperBound) {\n        return this.sodium.randombytes_uniform(upperBound);\n    }\n\n    /**\n     * @param {Uint8Array} val\n     * @param {Uint8Array} addv\n     * @return {Promise<Buffer>}\n     */\n    async sodium_add(val, addv) {\n        const buf = await Util.cloneBuffer(val);\n        this.sodium.sodium_add(buf, addv);\n        return buf;\n    }\n\n    /**\n     * @param {Buffer} input\n     * @return {Promise<string>}\n     */\n    async sodium_bin2hex(input) {\n        let str = \"\", b, c, x;\n        for (let i = 0; i < input.length; i++) {\n            c = input[i] & 0xf;\n            b = input[i] >>> 4;\n            x =\n                ((87 + c + (((c - 10) >> 8) & ~38)) << 8) |\n                (87 + b + (((b - 10) >> 8) & ~38));\n            str += String.fromCharCode(x & 0xff) + String.fromCharCode(x >>> 8);\n        }\n        return str;\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<number>}\n     */\n    async sodium_compare(b1, b2) {\n        return this.sodium.sodium_compare(b1, b2);\n    }\n\n    /**\n     * @param {Buffer|string} hex\n     * @param {string|null} ignore\n     * @return {Promise<Buffer>}\n     */\n    async sodium_hex2bin(hex, ignore = null) {\n        let bin_pos = 0,\n            hex_pos = 0,\n            c = 0,\n            c_acc = 0,\n            c_alpha0 = 0,\n            c_alpha = 0,\n            c_num0 = 0,\n            c_num = 0,\n            c_val = 0,\n            state = 0;\n        const bin = Buffer.alloc(hex.length >> 1, 0);\n\n        while (hex_pos < hex.length) {\n            c = hex.charCodeAt(hex_pos);\n            c_num = c ^ 48;\n            c_num0 = (c_num - 10) >> 8;\n            c_alpha = (c & ~32) - 55;\n            c_alpha0 = ((c_alpha - 10) ^ (c_alpha - 16)) >> 8;\n            if ((c_num0 | c_alpha0) === 0) {\n                if (ignore && state === 0 && ignore.indexOf(c) >= 0) {\n                    hex_pos++;\n                    continue;\n                }\n                break;\n            }\n            c_val = (c_num0 & c_num) | (c_alpha0 & c_alpha);\n            if (state === 0) {\n                c_acc = c_val * 16;\n            } else {\n                bin[bin_pos++] = c_acc | c_val;\n            }\n            state = ~state;\n            hex_pos++;\n        }\n        return bin;\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<Buffer>}\n     */\n    async sodium_increment(buf) {\n        return this.sodium.sodium_increment(buf);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @param {number} len\n     * @return {Promise<Buffer>}\n     */\n    async sodium_is_zero(buf, len) {\n        return this.sodium.sodium_is_zero(buf, len);\n    }\n\n    /**\n     * @param {Buffer} b1\n     * @param {Buffer} b2\n     * @return {Promise<boolean>}\n     */\n    async sodium_memcmp(b1, b2) {\n        return this.sodium.sodium_memcmp(b1, b2);\n    }\n\n    /**\n     * @param {Buffer} buf\n     * @return {Promise<void>}\n     */\n    async sodium_memzero(buf) {\n        this.sodium.sodium_memzero(buf);\n    }\n\n    /**\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_pad(buf, blockSize) {\n        buf = await Util.toBuffer(buf);\n        let length = buf.length + (buf.length % blockSize);\n        if (length < blockSize) {\n            length += blockSize;\n        }\n        const padded = Buffer.alloc(length + 100);\n        buf.copy(padded, 0, 0);\n        const sliceto = this.sodium.sodium_pad(padded, buf.length, blockSize);\n        return padded.slice(0, sliceto);\n    }\n\n    /**\n     *\n     * @param {string|Buffer} buf\n     * @param {number} blockSize\n     * @return {Promise<Buffer>}\n     */\n    async sodium_unpad(buf, blockSize) {\n        const outlen = this.sodium.sodium_unpad(buf, buf.length, blockSize);\n        return buf.slice(0, outlen);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"de4b7e06dd9ab2ae7ffc8f44ae85725a6ba59308"}
