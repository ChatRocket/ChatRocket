{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/markdown.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/markdown/lib/parser/original/markdown.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/markdown.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/markdown/lib/parser/original/markdown.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/markdown/lib/parser/original/markdown.js"}},"code":"module.export({\n  markdown: () => markdown\n});\nlet addAsToken, isToken, validateAllowedTokens;\nmodule.link(\"./token\", {\n  addAsToken(v) {\n    addAsToken = v;\n  },\n  isToken(v) {\n    isToken = v;\n  },\n  validateAllowedTokens(v) {\n    validateAllowedTokens = v;\n  }\n}, 0);\nconst validateUrl = (url, message) => {\n  var _message$tokens;\n  // Don't render markdown inside links\n  if (message !== null && message !== void 0 && (_message$tokens = message.tokens) !== null && _message$tokens !== void 0 && _message$tokens.some(token => url.includes(token.token))) {\n    return false;\n  }\n\n  // Valid urls don't contain whitespaces\n  if (/\\s/.test(url.trim())) {\n    return false;\n  }\n  try {\n    new URL(url);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nconst endsWithWhitespace = text => text.substring(text.length - 1).match(/\\s/);\nconst getParseableMarkersCount = (start, end) => {\n  const usableMarkers = start.length > 1 ? 2 : 1;\n  return end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\nconst getTextWrapper = (marker, tagName) => (textPrepend, wrappedText, textAppend) => \"\".concat(textPrepend, \"<span class=\\\"copyonly\\\">\").concat(marker, \"</span><\").concat(tagName, \">\").concat(wrappedText, \"</\").concat(tagName, \"><span class=\\\"copyonly\\\">\").concat(marker, \"</span>\").concat(textAppend);\nconst getRegexReplacer = (replaceFunction, getRegex) => (marker, tagName) => {\n  const wrapper = getTextWrapper(marker, tagName);\n  return msg => msg.replace(getRegex(marker), function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return replaceFunction(wrapper, ...args);\n  });\n};\nconst getParserWithCustomMarker = getRegexReplacer((wrapper, match, p1, p2, p3) => {\n  if (endsWithWhitespace(p2)) {\n    return match;\n  }\n  const finalMarkerCount = getParseableMarkersCount(p1, p3);\n  return wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n}, marker => new RegExp(\"(\\\\\".concat(marker, \"+(?!\\\\s))([^\\\\\").concat(marker, \"\\\\r\\\\n]+)(\\\\\").concat(marker, \"+)\"), 'gm'));\nconst parseBold = getParserWithCustomMarker('*', 'strong');\nconst parseStrike = getParserWithCustomMarker('~', 'strike');\nconst parseItalic = getRegexReplacer((wrapper, match, p1, p2, p3, p4, p5) => {\n  if (p1 || p5 || endsWithWhitespace(p3)) {\n    return match;\n  }\n  const finalMarkerCount = getParseableMarkersCount(p2, p4);\n  return wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n}, () => new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm'))('_', 'em');\nconst parseNotEscaped = (message, _ref) => {\n  let {\n    supportSchemesForLink,\n    headers,\n    rootUrl\n  } = _ref;\n  let msg = message.html;\n  if (!message.tokens) {\n    message.tokens = [];\n  }\n  const schemes = (supportSchemesForLink || '').split(',').join('|');\n  if (headers) {\n    // Support # Text for h1\n    msg = msg.replace(/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h1>$1</h1>');\n\n    // Support # Text for h2\n    msg = msg.replace(/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h2>$1</h2>');\n\n    // Support # Text for h3\n    msg = msg.replace(/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h3>$1</h3>');\n\n    // Support # Text for h4\n    msg = msg.replace(/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm, '<h4>$1</h4>');\n  }\n\n  // Support *text* to make bold\n  msg = parseBold(msg);\n\n  // Support _text_ to make italics\n  msg = parseItalic(msg);\n\n  // // Support ~text~ to strike through text\n  msg = parseStrike(msg);\n\n  // Support for block quote\n  // >>>\n  // Text\n  // <<<\n  msg = msg.replace(/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g, '<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>');\n\n  // Support >Text for quote\n  msg = msg.replace(/^&gt;(.*)$/gm, '<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>');\n\n  // Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n  msg = msg.replace(/\\s*<blockquote class=\"background-transparent-darker-before\">/gm, '<blockquote class=\"background-transparent-darker-before\">');\n  msg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>');\n\n  // Remove new-line between blockquotes.\n  msg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote');\n\n  // Support ![alt text](http://image url)\n  msg = msg.replace(new RegExp(\"!\\\\[([^\\\\]]+)\\\\]\\\\(((?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\s]+)\\\\)\"), 'gm'), (match, title, url) => {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n    url = encodeURI(url);\n    const target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    return addAsToken(message, \"<a data-title=\\\"\".concat(url, \"\\\" href=\\\"\").concat(url, \"\\\" title=\\\"\").concat(title, \"\\\" target=\\\"\").concat(target, \"\\\" rel=\\\"noopener noreferrer\\\"><div class=\\\"inline-image\\\" style=\\\"background-image: url(\").concat(url, \");\\\"></div></a>\"), 'link');\n  });\n\n  // Support [Text](http://link)\n  msg = msg.replace(new RegExp(\"\\\\[([^\\\\]]+)\\\\]\\\\(((?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\s]+)\\\\)\"), 'gm'), (match, title, url) => {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n    const target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    title = title.replace(/&amp;/g, '&');\n    const escapedUrl = encodeURI(url);\n    return addAsToken(message, \"<a data-title=\\\"\".concat(escapedUrl, \"\\\" href=\\\"\").concat(escapedUrl, \"\\\" target=\\\"\").concat(target, \"\\\" rel=\\\"noopener noreferrer\\\">\").concat(title, \"</a>\"), 'link');\n  });\n\n  // Support <http://link|Text>\n  msg = msg.replace(new RegExp(\"(?:<|&lt;)((?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)\"), 'gm'), (match, url, title) => {\n    if (!validateUrl(url, message)) {\n      return match;\n    }\n    if (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n      return match;\n    }\n    url = encodeURI(url);\n    const target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n    return addAsToken(message, \"<a data-title=\\\"\".concat(url, \"\\\" href=\\\"\").concat(url, \"\\\" target=\\\"\").concat(target, \"\\\" rel=\\\"noopener noreferrer\\\">\").concat(title, \"</a>\"), 'link');\n  });\n  return msg;\n};\nconst markdown = (message, options) => {\n  message.html = parseNotEscaped(message, options);\n  return message;\n};","map":{"version":3,"names":["module","export","markdown","addAsToken","isToken","validateAllowedTokens","link","v","validateUrl","url","message","_message$tokens","tokens","some","token","includes","test","trim","URL","e","endsWithWhitespace","text","substring","length","match","getParseableMarkersCount","start","end","usableMarkers","getTextWrapper","marker","tagName","textPrepend","wrappedText","textAppend","concat","getRegexReplacer","replaceFunction","getRegex","wrapper","msg","replace","_len","arguments","args","Array","_key","getParserWithCustomMarker","p1","p2","p3","finalMarkerCount","RegExp","parseBold","parseStrike","parseItalic","p4","p5","parseNotEscaped","_ref","supportSchemesForLink","headers","rootUrl","html","schemes","split","join","title","encodeURI","target","indexOf","escapedUrl","options"],"sources":["app/markdown/lib/parser/original/markdown.js"],"sourcesContent":["import { addAsToken, isToken, validateAllowedTokens } from './token';\n\nconst validateUrl = (url, message) => {\n\t// Don't render markdown inside links\n\tif (message?.tokens?.some((token) => url.includes(token.token))) {\n\t\treturn false;\n\t}\n\n\t// Valid urls don't contain whitespaces\n\tif (/\\s/.test(url.trim())) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\n\nconst endsWithWhitespace = (text) => text.substring(text.length - 1).match(/\\s/);\n\nconst getParseableMarkersCount = (start, end) => {\n\tconst usableMarkers = start.length > 1 ? 2 : 1;\n\treturn end.length - usableMarkers >= 0 ? usableMarkers : 1;\n};\n\nconst getTextWrapper = (marker, tagName) => (textPrepend, wrappedText, textAppend) =>\n\t`${textPrepend}<span class=\"copyonly\">${marker}</span><${tagName}>${wrappedText}</${tagName}><span class=\"copyonly\">${marker}</span>${textAppend}`;\n\nconst getRegexReplacer = (replaceFunction, getRegex) => (marker, tagName) => {\n\tconst wrapper = getTextWrapper(marker, tagName);\n\treturn (msg) => msg.replace(getRegex(marker), (...args) => replaceFunction(wrapper, ...args));\n};\n\nconst getParserWithCustomMarker = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3) => {\n\t\tif (endsWithWhitespace(p2)) {\n\t\t\treturn match;\n\t\t}\n\t\tconst finalMarkerCount = getParseableMarkersCount(p1, p3);\n\t\treturn wrapper(p1.substring(finalMarkerCount), p2, p3.substring(finalMarkerCount));\n\t},\n\t(marker) => new RegExp(`(\\\\${marker}+(?!\\\\s))([^\\\\${marker}\\\\r\\\\n]+)(\\\\${marker}+)`, 'gm'),\n);\n\nconst parseBold = getParserWithCustomMarker('*', 'strong');\n\nconst parseStrike = getParserWithCustomMarker('~', 'strike');\n\nconst parseItalic = getRegexReplacer(\n\t(wrapper, match, p1, p2, p3, p4, p5) => {\n\t\tif (p1 || p5 || endsWithWhitespace(p3)) {\n\t\t\treturn match;\n\t\t}\n\n\t\tconst finalMarkerCount = getParseableMarkersCount(p2, p4);\n\t\treturn wrapper(p2.substring(finalMarkerCount), p3, p4.substring(finalMarkerCount));\n\t},\n\t() => new RegExp('([^\\\\r\\\\n\\\\s~*_]){0,1}(\\\\_+(?!\\\\s))([^\\\\_\\\\r\\\\n]+)(\\\\_+)([^\\\\r\\\\n\\\\s]){0,1}', 'gm'),\n)('_', 'em');\n\nconst parseNotEscaped = (message, { supportSchemesForLink, headers, rootUrl }) => {\n\tlet msg = message.html;\n\tif (!message.tokens) {\n\t\tmessage.tokens = [];\n\t}\n\n\tconst schemes = (supportSchemesForLink || '').split(',').join('|');\n\n\tif (headers) {\n\t\t// Support # Text for h1\n\t\tmsg = msg.replace(\n\t\t\t/^# (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h1>$1</h1>',\n\t\t);\n\n\t\t// Support # Text for h2\n\t\tmsg = msg.replace(\n\t\t\t/^## (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h2>$1</h2>',\n\t\t);\n\n\t\t// Support # Text for h3\n\t\tmsg = msg.replace(\n\t\t\t/^### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h3>$1</h3>',\n\t\t);\n\n\t\t// Support # Text for h4\n\t\tmsg = msg.replace(\n\t\t\t/^#### (([\\S\\w\\d-_\\/\\*\\.,\\\\][ \\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]?)+)/gm,\n\t\t\t'<h4>$1</h4>',\n\t\t);\n\t}\n\n\t// Support *text* to make bold\n\tmsg = parseBold(msg);\n\n\t// Support _text_ to make italics\n\tmsg = parseItalic(msg);\n\n\t// // Support ~text~ to strike through text\n\tmsg = parseStrike(msg);\n\n\t// Support for block quote\n\t// >>>\n\t// Text\n\t// <<<\n\tmsg = msg.replace(\n\t\t/(?:&gt;){3}\\n+([\\s\\S]*?)\\n+(?:&lt;){3}/g,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;&gt;&gt;</span>$1<span class=\"copyonly\">&lt;&lt;&lt;</span></blockquote>',\n\t);\n\n\t// Support >Text for quote\n\tmsg = msg.replace(\n\t\t/^&gt;(.*)$/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\"><span class=\"copyonly\">&gt;</span>$1</blockquote>',\n\t);\n\n\t// Remove white-space around blockquote (prevent <br>). Because blockquote is block element.\n\tmsg = msg.replace(\n\t\t/\\s*<blockquote class=\"background-transparent-darker-before\">/gm,\n\t\t'<blockquote class=\"background-transparent-darker-before\">',\n\t);\n\tmsg = msg.replace(/<\\/blockquote>\\s*/gm, '</blockquote>');\n\n\t// Remove new-line between blockquotes.\n\tmsg = msg.replace(/<\\/blockquote>\\n<blockquote/gm, '</blockquote><blockquote');\n\n\t// Support ![alt text](http://image url)\n\tmsg = msg.replace(new RegExp(`!\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${url}\" href=\"${url}\" title=\"${title}\" target=\"${target}\" rel=\"noopener noreferrer\"><div class=\"inline-image\" style=\"background-image: url(${url});\"></div></a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support [Text](http://link)\n\tmsg = msg.replace(new RegExp(`\\\\[([^\\\\]]+)\\\\]\\\\(((?:${schemes}):\\\\/\\\\/[^\\\\s]+)\\\\)`, 'gm'), (match, title, url) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\ttitle = title.replace(/&amp;/g, '&');\n\n\t\tconst escapedUrl = encodeURI(url);\n\n\t\treturn addAsToken(\n\t\t\tmessage,\n\t\t\t`<a data-title=\"${escapedUrl}\" href=\"${escapedUrl}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`,\n\t\t\t'link',\n\t\t);\n\t});\n\n\t// Support <http://link|Text>\n\tmsg = msg.replace(new RegExp(`(?:<|&lt;)((?:${schemes}):\\\\\\/\\\\\\/[^\\\\|]+)\\\\|(.+?)(?=>|&gt;)(?:>|&gt;)`, 'gm'), (match, url, title) => {\n\t\tif (!validateUrl(url, message)) {\n\t\t\treturn match;\n\t\t}\n\t\tif (isToken(title) && !validateAllowedTokens(message, title, ['bold', 'italic', 'strike'])) {\n\t\t\treturn match;\n\t\t}\n\t\turl = encodeURI(url);\n\t\tconst target = url.indexOf(rootUrl) === 0 ? '' : '_blank';\n\t\treturn addAsToken(message, `<a data-title=\"${url}\" href=\"${url}\" target=\"${target}\" rel=\"noopener noreferrer\">${title}</a>`, 'link');\n\t});\n\treturn msg;\n};\n\nexport const markdown = (message, options) => {\n\tmessage.html = parseNotEscaped(message, options);\n\treturn message;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e021839b9d0a23994e0d010417607db0711f3e53"}
