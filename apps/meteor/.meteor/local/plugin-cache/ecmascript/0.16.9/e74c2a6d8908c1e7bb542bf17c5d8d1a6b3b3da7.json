{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Users.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Users.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Users.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Users.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Users.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      UsersRaw: () => UsersRaw\n    });\n    let ILivechatAgentStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      ILivechatAgentStatus(v) {\n        ILivechatAgentStatus = v;\n      }\n    }, 0);\n    let Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const queryStatusAgentOnline = function () {\n      let extraFilters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let isLivechatEnabledWhenAgentIdle = arguments.length > 1 ? arguments[1] : undefined;\n      return _objectSpread(_objectSpread(_objectSpread({\n        statusLivechat: 'available',\n        roles: 'livechat-agent',\n        // ignore deactivated users\n        active: true\n      }, !isLivechatEnabledWhenAgentIdle && {\n        $or: [{\n          status: {\n            $exists: true,\n            $ne: 'offline'\n          },\n          roles: {\n            $ne: 'bot'\n          }\n        }, {\n          roles: 'bot'\n        }]\n      }), extraFilters), isLivechatEnabledWhenAgentIdle === false && {\n        statusConnection: {\n          $ne: 'away'\n        }\n      });\n    };\n    class UsersRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'users', trash, {\n          collectionNameResolver(name) {\n            return name;\n          }\n        });\n        this.defaultFields = {\n          __rooms: 0\n        };\n      }\n\n      // Move index from constructor to here\n      modelIndexes() {\n        return [{\n          key: {\n            __rooms: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            roles: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            name: 1\n          }\n        }, {\n          key: {\n            bio: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            nickname: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            createdAt: 1\n          }\n        }, {\n          key: {\n            lastLogin: 1\n          }\n        }, {\n          key: {\n            status: 1\n          }\n        }, {\n          key: {\n            statusText: 1\n          }\n        }, {\n          key: {\n            statusConnection: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            appId: 1\n          },\n          sparse: 1\n        }, {\n          key: {\n            type: 1\n          }\n        }, {\n          key: {\n            federated: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            federation: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            isRemote: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'services.saml.inResponseTo': 1\n          }\n        }, {\n          key: {\n            openBusinessHours: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            statusLivechat: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            extension: 1\n          },\n          sparse: true,\n          unique: true\n        }, {\n          key: {\n            freeSwitchExtension: 1\n          },\n          sparse: true,\n          unique: true\n        }, {\n          key: {\n            language: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'active': 1,\n            'services.email2fa.enabled': 1\n          },\n          sparse: true\n        },\n        // used by statistics\n        {\n          key: {\n            'active': 1,\n            'services.totp.enabled': 1\n          },\n          sparse: true\n        },\n        // used by statistics\n        {\n          key: {\n            importIds: 1\n          },\n          sparse: true\n        },\n        // Used for case insensitive queries\n        // @deprecated\n        // Should be converted to unique index later within a migration to prevent errors of duplicated\n        // records. Those errors does not helps to identify the duplicated value so we need to find a\n        // way to help the migration in case it happens.\n        {\n          key: {\n            'emails.address': 1\n          },\n          unique: false,\n          sparse: true,\n          name: 'emails.address_insensitive',\n          collation: {\n            locale: 'en',\n            strength: 2,\n            caseLevel: false\n          }\n        },\n        // Used for case insensitive queries\n        // @deprecated\n        // Should be converted to unique index later within a migration to prevent errors of duplicated\n        // records. Those errors does not helps to identify the duplicated value so we need to find a\n        // way to help the migration in case it happens.\n        {\n          key: {\n            username: 1\n          },\n          unique: false,\n          sparse: true,\n          name: 'username_insensitive',\n          collation: {\n            locale: 'en',\n            strength: 2,\n            caseLevel: false\n          }\n        }];\n      }\n\n      /**\n       * @param {string} uid\n       * @param {IRole['_id'][]} roles list of role ids\n       */\n      addRolesByUserId(uid, roles) {\n        if (!Array.isArray(roles)) {\n          roles = [roles];\n          process.env.NODE_ENV === 'development' && console.warn('[WARN] Users.addRolesByUserId: roles should be an array');\n        }\n        const query = {\n          _id: uid\n        };\n        const update = {\n          $addToSet: {\n            roles: {\n              $each: roles\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n\n      /**\n       * @param {IRole['_id'][]} roles list of role ids\n       * @param {null} scope the value for the role scope (room id) - not used in the users collection\n       * @param {any} options\n       */\n      findUsersInRoles(roles, scope, options) {\n        roles = [].concat(roles);\n        const query = {\n          roles: {\n            $in: roles\n          }\n        };\n        return this.find(query, options);\n      }\n      countUsersInRoles(roles) {\n        roles = [].concat(roles);\n        const query = {\n          roles: {\n            $in: roles\n          }\n        };\n        return this.countDocuments(query);\n      }\n      findPaginatedUsersInRoles(roles, options) {\n        roles = [].concat(roles);\n        const query = {\n          roles: {\n            $in: roles\n          }\n        };\n        return this.findPaginated(query, options);\n      }\n      findOneByUsername(username) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        const query = {\n          username\n        };\n        return this.findOne(query, options);\n      }\n      findOneAgentById(_id, options) {\n        const query = {\n          _id,\n          roles: 'livechat-agent'\n        };\n        return this.findOne(query, options);\n      }\n\n      /**\n       * @param {IRole['_id'][] | IRole['_id']} roles the list of role ids\n       * @param {any} query\n       * @param {any} options\n       */\n      findUsersInRolesWithQuery(roles, query, options) {\n        roles = [].concat(roles);\n        Object.assign(query, {\n          roles: {\n            $in: roles\n          }\n        });\n        return this.find(query, options);\n      }\n\n      /**\n       * @param {IRole['_id'][] | IRole['_id']} roles the list of role ids\n       * @param {any} query\n       * @param {any} options\n       */\n      findPaginatedUsersInRolesWithQuery(roles, query, options) {\n        roles = [].concat(roles);\n        Object.assign(query, {\n          roles: {\n            $in: roles\n          }\n        });\n        return this.findPaginated(query, options);\n      }\n      findAgentsWithDepartments(role, query, options) {\n        const roles = [].concat(role);\n        Object.assign(query, {\n          roles: {\n            $in: roles\n          }\n        });\n        const aggregate = [{\n          $match: query\n        }, {\n          $lookup: {\n            from: 'rocketchat_livechat_department_agents',\n            localField: '_id',\n            foreignField: 'agentId',\n            as: 'departments'\n          }\n        }, {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        }, {\n          $group: {\n            _id: '$_id',\n            username: {\n              $first: '$username'\n            },\n            status: {\n              $first: '$status'\n            },\n            statusLivechat: {\n              $first: '$statusLivechat'\n            },\n            name: {\n              $first: '$name'\n            },\n            emails: {\n              $first: '$emails'\n            },\n            livechat: {\n              $first: '$livechat'\n            },\n            departments: {\n              $push: '$departments.departmentId'\n            }\n          }\n        }, {\n          $facet: {\n            sortedResults: [{\n              $sort: options.sort\n            }, {\n              $skip: options.skip\n            }, options.limit && {\n              $limit: options.limit\n            }],\n            totalCount: [{\n              $group: {\n                _id: null,\n                total: {\n                  $sum: 1\n                }\n              }\n            }]\n          }\n        }];\n        return this.col.aggregate(aggregate).toArray();\n      }\n      findOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n        if (typeof username === 'string') {\n          username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n        }\n        const query = {\n          __rooms: rid,\n          username\n        };\n        return this.findOne(query, options);\n      }\n      findOneByIdAndLoginHashedToken(_id, token) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          _id,\n          'services.resume.loginTokens.hashedToken': token\n        };\n        return this.findOne(query, options);\n      }\n      findByActiveUsersExcept(searchTerm, exceptions, options, searchFields) {\n        let extraQuery = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        let {\n          startsWith = false,\n          endsWith = false\n        } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        if (exceptions == null) {\n          exceptions = [];\n        }\n        if (options == null) {\n          options = {};\n        }\n        if (!Array.isArray(exceptions)) {\n          exceptions = [exceptions];\n        }\n        const termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n        const orStmt = (searchFields || []).reduce((acc, el) => {\n          acc.push({\n            [el.trim()]: termRegex\n          });\n          return acc;\n        }, []);\n        const query = {\n          $and: [_objectSpread({\n            active: true,\n            username: _objectSpread({\n              $exists: true\n            }, exceptions.length > 0 && {\n              $nin: exceptions\n            })\n          }, searchTerm && orStmt.length > 0 && {\n            $or: orStmt\n          }), ...extraQuery]\n        };\n        return this.find(query, options);\n      }\n      findPaginatedByActiveUsersExcept(searchTerm, exceptions, options, searchFields) {\n        let extraQuery = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        let {\n          startsWith = false,\n          endsWith = false\n        } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        if (exceptions == null) {\n          exceptions = [];\n        }\n        if (options == null) {\n          options = {};\n        }\n        if (!Array.isArray(exceptions)) {\n          exceptions = [exceptions];\n        }\n        const termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n        const orStmt = (searchFields || []).reduce((acc, el) => {\n          acc.push({\n            [el.trim()]: termRegex\n          });\n          return acc;\n        }, []);\n        const query = {\n          $and: [_objectSpread({\n            active: true,\n            username: _objectSpread({\n              $exists: true\n            }, exceptions.length > 0 && {\n              $nin: exceptions\n            })\n          }, searchTerm && orStmt.length > 0 && {\n            $or: orStmt\n          }), ...extraQuery]\n        };\n        return this.findPaginated(query, options);\n      }\n      findPaginatedByActiveLocalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n        const extraQuery = [{\n          $or: [{\n            federation: {\n              $exists: false\n            }\n          }, {\n            'federation.origin': localDomain\n          }]\n        }];\n        return this.findPaginatedByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n      }\n      findPaginatedByActiveExternalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n        const extraQuery = [{\n          federation: {\n            $exists: true\n          }\n        }, {\n          'federation.origin': {\n            $ne: localDomain\n          }\n        }];\n        return this.findPaginatedByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n      }\n      findActive(query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        Object.assign(query, {\n          active: true\n        });\n        return this.find(query, options);\n      }\n      findActiveByIds(userIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          _id: {\n            $in: userIds\n          },\n          active: true\n        };\n        return this.find(query, options);\n      }\n      findActiveByIdsOrUsernames(userIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          $or: [{\n            _id: {\n              $in: userIds\n            }\n          }, {\n            username: {\n              $in: userIds\n            }\n          }],\n          active: true\n        };\n        return this.find(query, options);\n      }\n      findByIds(userIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          _id: {\n            $in: userIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findOneByImportId(_id, options) {\n        return this.findOne({\n          importIds: _id\n        }, options);\n      }\n      findOneByUsernameIgnoringCase(username, options) {\n        if (!username) {\n          throw new Error('invalid username');\n        }\n        const query = {\n          username\n        };\n        return this.findOne(query, _objectSpread({\n          collation: {\n            locale: 'en',\n            strength: 2\n          }\n        }, options));\n      }\n      findOneWithoutLDAPByUsernameIgnoringCase(username, options) {\n        const expression = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n        const query = {\n          'username': expression,\n          'services.ldap': {\n            $exists: false\n          }\n        };\n        return this.findOne(query, options);\n      }\n      async findOneByLDAPId(id) {\n        let attribute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        const query = {\n          'services.ldap.id': id\n        };\n        if (attribute) {\n          query['services.ldap.idAttribute'] = attribute;\n        }\n        return this.findOne(query);\n      }\n      async findOneByAppId(appId, options) {\n        const query = {\n          appId\n        };\n        return this.findOne(query, options);\n      }\n      findLDAPUsers(options) {\n        const query = {\n          ldap: true\n        };\n        return this.find(query, options);\n      }\n      findLDAPUsersExceptIds(userIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          ldap: true,\n          _id: {\n            $nin: userIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findConnectedLDAPUsers(options) {\n        const query = {\n          'ldap': true,\n          'services.resume.loginTokens': {\n            $exists: true,\n            $ne: []\n          }\n        };\n        return this.find(query, options);\n      }\n      isUserInRole(userId, roleId) {\n        const query = {\n          _id: userId,\n          roles: roleId\n        };\n        return this.findOne(query, {\n          projection: {\n            roles: 1\n          }\n        });\n      }\n      getDistinctFederationDomains() {\n        return this.col.distinct('federation.origin', {\n          federation: {\n            $exists: true\n          }\n        });\n      }\n      async getNextLeastBusyAgent(department, ignoreAgentId) {\n        const aggregate = [{\n          $match: _objectSpread({\n            status: {\n              $exists: true,\n              $ne: 'offline'\n            },\n            statusLivechat: 'available',\n            roles: 'livechat-agent'\n          }, ignoreAgentId && {\n            _id: {\n              $ne: ignoreAgentId\n            }\n          })\n        }, {\n          $lookup: {\n            from: 'rocketchat_subscription',\n            let: {\n              id: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $and: [{\n                    $eq: ['$u._id', '$$id']\n                  }, {\n                    $eq: ['$open', true]\n                  }, {\n                    $ne: ['$onHold', true]\n                  }, _objectSpread({}, department && {\n                    $eq: ['$department', department]\n                  })]\n                }\n              }\n            }],\n            as: 'subs'\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_livechat_department_agents',\n            localField: '_id',\n            foreignField: 'agentId',\n            as: 'departments'\n          }\n        }, {\n          $project: {\n            agentId: '$_id',\n            username: 1,\n            lastRoutingTime: 1,\n            departments: 1,\n            count: {\n              $size: '$subs'\n            }\n          }\n        }, {\n          $sort: {\n            count: 1,\n            lastRoutingTime: 1,\n            username: 1\n          }\n        }];\n        if (department) {\n          aggregate.push({\n            $unwind: '$departments'\n          });\n          aggregate.push({\n            $match: {\n              'departments.departmentId': department\n            }\n          });\n        }\n        aggregate.push({\n          $limit: 1\n        });\n        const [agent] = await this.col.aggregate(aggregate).toArray();\n        if (agent) {\n          await this.setLastRoutingTime(agent.agentId);\n        }\n        return agent;\n      }\n      async getLastAvailableAgentRouted(department, ignoreAgentId) {\n        const aggregate = [{\n          $match: _objectSpread({\n            status: {\n              $exists: true,\n              $ne: 'offline'\n            },\n            statusLivechat: 'available',\n            roles: 'livechat-agent'\n          }, ignoreAgentId && {\n            _id: {\n              $ne: ignoreAgentId\n            }\n          })\n        }, {\n          $lookup: {\n            from: 'rocketchat_livechat_department_agents',\n            localField: '_id',\n            foreignField: 'agentId',\n            as: 'departments'\n          }\n        }, {\n          $project: {\n            agentId: '$_id',\n            username: 1,\n            lastRoutingTime: 1,\n            departments: 1\n          }\n        }, {\n          $sort: {\n            lastRoutingTime: 1,\n            username: 1\n          }\n        }];\n        if (department) {\n          aggregate.push({\n            $unwind: '$departments'\n          });\n          aggregate.push({\n            $match: {\n              'departments.departmentId': department\n            }\n          });\n        }\n        aggregate.push({\n          $limit: 1\n        });\n        const [agent] = await this.col.aggregate(aggregate).toArray();\n        if (agent) {\n          await this.setLastRoutingTime(agent.agentId);\n        }\n        return agent;\n      }\n      async setLastRoutingTime(userId) {\n        const result = await this.findOneAndUpdate({\n          _id: userId\n        }, {\n          $set: {\n            lastRoutingTime: new Date()\n          }\n        }, {\n          returnDocument: 'after'\n        });\n        return result.value;\n      }\n      setLivechatStatusIf(userId, status) {\n        let conditions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let extraFields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        // TODO: Create class Agent\n        const query = _objectSpread({\n          _id: userId\n        }, conditions);\n        const update = {\n          $set: _objectSpread({\n            statusLivechat: status\n          }, extraFields)\n        };\n        return this.updateOne(query, update);\n      }\n      async getAgentAndAmountOngoingChats(userId) {\n        const aggregate = [{\n          $match: {\n            _id: userId,\n            statusLivechat: 'available',\n            roles: 'livechat-agent'\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_subscription',\n            localField: '_id',\n            foreignField: 'u._id',\n            as: 'subs'\n          }\n        }, {\n          $project: {\n            'agentId': '$_id',\n            'username': 1,\n            'lastAssignTime': 1,\n            'lastRoutingTime': 1,\n            'queueInfo.chats': {\n              $size: {\n                $filter: {\n                  input: '$subs',\n                  as: 'sub',\n                  cond: {\n                    $and: [{\n                      $eq: ['$$sub.t', 'l']\n                    }, {\n                      $eq: ['$$sub.open', true]\n                    }, {\n                      $ne: ['$$sub.onHold', true]\n                    }]\n                  }\n                }\n              }\n            }\n          }\n        }, {\n          $sort: {\n            'queueInfo.chats': 1,\n            'lastAssignTime': 1,\n            'lastRoutingTime': 1,\n            'username': 1\n          }\n        }];\n        const [agent] = await this.col.aggregate(aggregate).toArray();\n        return agent;\n      }\n      findAllResumeTokensByUserId(userId) {\n        return this.col.aggregate([{\n          $match: {\n            _id: userId\n          }\n        }, {\n          $project: {\n            tokens: {\n              $filter: {\n                input: '$services.resume.loginTokens',\n                as: 'token',\n                cond: {\n                  $ne: ['$$token.type', 'personalAccessToken']\n                }\n              }\n            }\n          }\n        }, {\n          $unwind: '$tokens'\n        }, {\n          $sort: {\n            'tokens.when': 1\n          }\n        }, {\n          $group: {\n            _id: '$_id',\n            tokens: {\n              $push: '$tokens'\n            }\n          }\n        }]).toArray();\n      }\n      findActiveByUsernameOrNameRegexWithExceptionsAndConditions(termRegex, exceptions, conditions, options) {\n        if (exceptions == null) {\n          exceptions = [];\n        }\n        if (conditions == null) {\n          conditions = {};\n        }\n        if (options == null) {\n          options = {};\n        }\n        if (!Array.isArray(exceptions)) {\n          exceptions = [exceptions];\n        }\n        const query = {\n          $or: [{\n            username: termRegex\n          }, {\n            name: termRegex\n          }, {\n            nickname: termRegex\n          }],\n          active: true,\n          type: {\n            $in: ['user', 'bot']\n          },\n          $and: [{\n            username: {\n              $exists: true\n            }\n          }, {\n            username: {\n              $nin: exceptions\n            }\n          }, _objectSpread({}, conditions)]\n        };\n        return this.find(query, options);\n      }\n      countAllAgentsStatus(_ref) {\n        let {\n          departmentId = undefined\n        } = _ref;\n        const match = {\n          $match: {\n            roles: {\n              $in: ['livechat-agent']\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: null,\n            offline: {\n              $sum: {\n                $cond: [{\n                  $or: [{\n                    $and: [{\n                      $eq: ['$status', 'offline']\n                    }, {\n                      $eq: ['$statusLivechat', 'available']\n                    }]\n                  }, {\n                    $eq: ['$statusLivechat', 'not-available']\n                  }]\n                }, 1, 0]\n              }\n            },\n            away: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $eq: ['$status', 'away']\n                  }, {\n                    $eq: ['$statusLivechat', 'available']\n                  }]\n                }, 1, 0]\n              }\n            },\n            busy: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $eq: ['$status', 'busy']\n                  }, {\n                    $eq: ['$statusLivechat', 'available']\n                  }]\n                }, 1, 0]\n              }\n            },\n            available: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $eq: ['$status', 'online']\n                  }, {\n                    $eq: ['$statusLivechat', 'available']\n                  }]\n                }, 1, 0]\n              }\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department_agents',\n            localField: '_id',\n            foreignField: 'agentId',\n            as: 'departments'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const departmentsMatch = {\n          $match: {\n            'departments.departmentId': departmentId\n          }\n        };\n        const params = [match];\n        if (departmentId && departmentId !== 'undefined') {\n          params.push(lookup);\n          params.push(unwind);\n          params.push(departmentsMatch);\n        }\n        params.push(group);\n        return this.col.aggregate(params).toArray();\n      }\n      getTotalOfRegisteredUsersByDate(_ref2) {\n        let {\n          start,\n          end,\n          options = {}\n        } = _ref2;\n        const params = [{\n          $match: {\n            createdAt: {\n              $gte: start,\n              $lte: end\n            },\n            roles: {\n              $ne: 'anonymous'\n            }\n          }\n        }, {\n          $group: {\n            _id: {\n              $concat: [{\n                $substr: ['$createdAt', 0, 4]\n              }, {\n                $substr: ['$createdAt', 5, 2]\n              }, {\n                $substr: ['$createdAt', 8, 2]\n              }]\n            },\n            users: {\n              $sum: 1\n            }\n          }\n        }, {\n          $group: {\n            _id: '$_id',\n            users: {\n              $sum: '$users'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            date: '$_id',\n            users: 1,\n            type: 'users'\n          }\n        }];\n        if (options.sort) {\n          params.push({\n            $sort: options.sort\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params).toArray();\n      }\n      getUserLanguages() {\n        const pipeline = [{\n          $match: {\n            language: {\n              $exists: true,\n              $ne: ''\n            }\n          }\n        }, {\n          $group: {\n            _id: '$language',\n            total: {\n              $sum: 1\n            }\n          }\n        }];\n        return this.col.aggregate(pipeline).toArray();\n      }\n      updateStatusText(_id, statusText) {\n        const update = {\n          $set: {\n            statusText\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      updateStatusByAppId(appId, status) {\n        const query = {\n          appId,\n          status: {\n            $ne: status\n          }\n        };\n        const update = {\n          $set: {\n            status\n          }\n        };\n        return this.updateMany(query, update);\n      }\n\n      /**\n       * @param {string} userId\n       * @param {object} status\n       * @param {string} status.status\n       * @param {string} status.statusConnection\n       * @param {string} [status.statusDefault]\n       * @param {string} [status.statusText]\n       */\n      updateStatusById(userId, _ref3) {\n        let {\n          statusDefault,\n          status,\n          statusConnection,\n          statusText\n        } = _ref3;\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $set: _objectSpread(_objectSpread({\n            status,\n            statusConnection\n          }, statusDefault && {\n            statusDefault\n          }), statusText && {\n            statusText: String(statusText).trim().substr(0, 120)\n          })\n        };\n\n        // We don't want to update the _updatedAt field on this operation,\n        // so we can check if the status update triggered a change\n        return this.col.updateOne(query, update);\n      }\n      openAgentsBusinessHoursByBusinessHourId(businessHourIds) {\n        const query = {\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $addToSet: {\n            openBusinessHours: {\n              $each: businessHourIds\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      openAgentBusinessHoursByBusinessHourIdsAndAgentId(businessHourIds, agentId) {\n        const query = {\n          _id: agentId,\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $addToSet: {\n            openBusinessHours: {\n              $each: businessHourIds\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      addBusinessHourByAgentIds() {\n        let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n        const query = {\n          _id: {\n            $in: agentIds\n          },\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $addToSet: {\n            openBusinessHours: businessHourId\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findOnlineButNotAvailableAgents(userIds) {\n        const query = _objectSpread(_objectSpread({}, userIds && {\n          _id: {\n            $in: userIds\n          }\n        }), {}, {\n          roles: 'livechat-agent',\n          // Exclude away users\n          status: 'online',\n          // Exclude users that are already available, maybe due to other business hour\n          statusLivechat: 'not-available'\n        });\n        return this.find(query);\n      }\n      removeBusinessHourByAgentIds() {\n        let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n        const query = {\n          _id: {\n            $in: agentIds\n          },\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $pull: {\n            openBusinessHours: businessHourId\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      openBusinessHourToAgentsWithoutDepartment() {\n        let agentIdsWithDepartment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n        const query = {\n          _id: {\n            $nin: agentIdsWithDepartment\n          }\n        };\n        const update = {\n          $addToSet: {\n            openBusinessHours: businessHourId\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      closeBusinessHourToAgentsWithoutDepartment() {\n        let agentIdsWithDepartment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let businessHourId = arguments.length > 1 ? arguments[1] : undefined;\n        const query = {\n          _id: {\n            $nin: agentIdsWithDepartment\n          }\n        };\n        const update = {\n          $pull: {\n            openBusinessHours: businessHourId\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      closeAgentsBusinessHoursByBusinessHourIds(businessHourIds) {\n        const query = {\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $pull: {\n            openBusinessHours: {\n              $in: businessHourIds\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findAgentsAvailableWithoutBusinessHours() {\n        let userIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return this.find(_objectSpread({\n          $or: [{\n            openBusinessHours: {\n              $exists: false\n            }\n          }, {\n            openBusinessHours: {\n              $size: 0\n            }\n          }],\n          $and: [{\n            roles: 'livechat-agent'\n          }, {\n            roles: {\n              $ne: 'bot'\n            }\n          }],\n          // exclude deactivated users\n          active: true,\n          // Avoid unnecessary updates\n          statusLivechat: 'available'\n        }, Array.isArray(userIds) && userIds.length > 0 && {\n          _id: {\n            $in: userIds\n          }\n        }), {\n          projection: {\n            openBusinessHours: 1\n          }\n        });\n      }\n      setLivechatStatusActiveBasedOnBusinessHours(userId) {\n        const query = {\n          _id: userId,\n          statusDefault: {\n            $ne: 'offline'\n          },\n          openBusinessHours: {\n            $exists: true,\n            $not: {\n              $size: 0\n            }\n          }\n        };\n        const update = {\n          $set: {\n            statusLivechat: 'available'\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async isAgentWithinBusinessHours(agentId) {\n        const query = {\n          _id: agentId,\n          $or: [{\n            openBusinessHours: {\n              $exists: true,\n              $not: {\n                $size: 0\n              }\n            }\n          }, {\n            // Bots can ignore Business Hours and be always available\n            roles: 'bot'\n          }]\n        };\n        return (await this.col.countDocuments(query)) > 0;\n      }\n      removeBusinessHoursFromAllUsers() {\n        const query = {\n          roles: 'livechat-agent',\n          openBusinessHours: {\n            $exists: true\n          }\n        };\n        const update = {\n          $unset: {\n            openBusinessHours: 1\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      resetTOTPById(userId) {\n        return this.col.updateOne({\n          _id: userId\n        }, {\n          $unset: {\n            'services.totp': 1\n          }\n        });\n      }\n      unsetOneLoginToken(_id, token) {\n        const update = {\n          $pull: {\n            'services.resume.loginTokens': {\n              hashedToken: token\n            }\n          }\n        };\n        return this.col.updateOne({\n          _id\n        }, update);\n      }\n      unsetLoginTokens(userId) {\n        return this.col.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.resume.loginTokens': []\n          }\n        });\n      }\n      removeNonPATLoginTokensExcept(userId, authToken) {\n        return this.col.updateOne({\n          _id: userId\n        }, {\n          $pull: {\n            'services.resume.loginTokens': {\n              when: {\n                $exists: true\n              },\n              hashedToken: {\n                $ne: authToken\n              }\n            }\n          }\n        });\n      }\n      removeRoomsByRoomIdsAndUserId(rids, userId) {\n        return this.updateMany({\n          _id: userId,\n          __rooms: {\n            $in: rids\n          }\n        }, {\n          $pullAll: {\n            __rooms: rids\n          }\n        });\n      }\n\n      /**\n       * @param {string} uid\n       * @param {IRole['_id']} roles the list of role ids to remove\n       */\n      removeRolesByUserId(uid, roles) {\n        const query = {\n          _id: uid\n        };\n        const update = {\n          $pullAll: {\n            roles\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async isUserInRoleScope(uid) {\n        const query = {\n          _id: uid\n        };\n        const options = {\n          projection: {\n            _id: 1\n          }\n        };\n        const found = await this.findOne(query, options);\n        return !!found;\n      }\n      addBannerById(_id, banner) {\n        const query = {\n          _id,\n          [\"banners.\".concat(banner.id, \".read\")]: {\n            $ne: true\n          }\n        };\n        const update = {\n          $set: {\n            [\"banners.\".concat(banner.id)]: banner\n          }\n        };\n        return this.updateOne(query, update);\n      }\n\n      // Voip functions\n      findOneByAgentUsername(username, options) {\n        const query = {\n          username,\n          roles: 'livechat-agent'\n        };\n        return this.findOne(query, options);\n      }\n      findOneByExtension(extension, options) {\n        const query = {\n          extension\n        };\n        return this.findOne(query, options);\n      }\n      findByExtensions(extensions, options) {\n        const query = {\n          extension: {\n            $in: extensions\n          }\n        };\n        return this.find(query, options);\n      }\n      getVoipExtensionByUserId(userId, options) {\n        const query = {\n          _id: userId,\n          extension: {\n            $exists: true\n          }\n        };\n        return this.findOne(query, options);\n      }\n      setExtension(userId, extension) {\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $set: {\n            extension\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unsetExtension(userId) {\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $unset: {\n            extension: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      getAvailableAgentsIncludingExt(includeExt, text, options) {\n        const query = {\n          roles: {\n            $in: ['livechat-agent']\n          },\n          $and: [...(text && text.trim() ? [{\n            $or: [{\n              username: new RegExp(escapeRegExp(text), 'i')\n            }, {\n              name: new RegExp(escapeRegExp(text), 'i')\n            }]\n          }] : []), {\n            $or: [{\n              extension: {\n                $exists: false\n              }\n            }, ...(includeExt ? [{\n              extension: includeExt\n            }] : [])]\n          }]\n        };\n        return this.findPaginated(query, options);\n      }\n      findActiveUsersTOTPEnable(options) {\n        const query = {\n          'active': true,\n          'services.totp.enabled': true\n        };\n        return this.find(query, options);\n      }\n      countActiveUsersTOTPEnable(options) {\n        const query = {\n          'active': true,\n          'services.totp.enabled': true\n        };\n        return this.col.countDocuments(query, options);\n      }\n      findActiveUsersEmail2faEnable(options) {\n        const query = {\n          'active': true,\n          'services.email2fa.enabled': true\n        };\n        return this.find(query, options);\n      }\n      countActiveUsersEmail2faEnable(options) {\n        const query = {\n          'active': true,\n          'services.email2fa.enabled': true\n        };\n        return this.col.countDocuments(query, options);\n      }\n      setAsFederated(uid) {\n        const query = {\n          _id: uid\n        };\n        const update = {\n          $set: {\n            federated: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      removeRoomByRoomId(rid, options) {\n        return this.updateMany({\n          __rooms: rid\n        }, {\n          $pull: {\n            __rooms: rid\n          }\n        }, options);\n      }\n      findOneByResetToken(token, options) {\n        return this.findOne({\n          'services.password.reset.token': token\n        }, options);\n      }\n      findOneByIdWithEmailAddress(userId, options) {\n        return this.findOne({\n          _id: userId,\n          emails: {\n            $exists: true,\n            $ne: []\n          }\n        }, options);\n      }\n      setFederationAvatarUrlById(userId, federationAvatarUrl) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'federation.avatarUrl': federationAvatarUrl\n          }\n        });\n      }\n      async findSearchedServerNamesByUserId(userId) {\n        var _user$federation;\n        const user = await this.findOne({\n          _id: userId\n        }, {\n          projection: {\n            'federation.searchedServerNames': 1\n          }\n        });\n        return ((_user$federation = user.federation) === null || _user$federation === void 0 ? void 0 : _user$federation.searchedServerNames) || [];\n      }\n      addServerNameToSearchedServerNamesList(userId, serverName) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $addToSet: {\n            'federation.searchedServerNames': serverName\n          }\n        });\n      }\n      removeServerNameFromSearchedServerNamesList(userId, serverName) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $pull: {\n            'federation.searchedServerNames': serverName\n          }\n        });\n      }\n      countFederatedExternalUsers() {\n        return this.col.countDocuments({\n          federated: true\n        });\n      }\n      findOnlineUserFromList(userList, isLivechatEnabledWhenAgentIdle) {\n        // TODO: Create class Agent\n        const username = {\n          $in: [].concat(userList)\n        };\n        const query = queryStatusAgentOnline({\n          username\n        }, isLivechatEnabledWhenAgentIdle);\n        return this.find(query);\n      }\n      countOnlineUserFromList(userList, isLivechatEnabledWhenAgentIdle) {\n        // TODO: Create class Agent\n        const username = {\n          $in: [].concat(userList)\n        };\n        const query = queryStatusAgentOnline({\n          username\n        }, isLivechatEnabledWhenAgentIdle);\n        return this.countDocuments(query);\n      }\n      findOneOnlineAgentByUserList(userList, options, isLivechatEnabledWhenAgentIdle) {\n        // TODO:: Create class Agent\n        const username = {\n          $in: [].concat(userList)\n        };\n        const query = queryStatusAgentOnline({\n          username\n        }, isLivechatEnabledWhenAgentIdle);\n        return this.findOne(query, options);\n      }\n      getUnavailableAgents() {\n        return [];\n      }\n      findBotAgents(usernameList) {\n        // TODO:: Create class Agent\n        const query = _objectSpread({\n          roles: {\n            $all: ['bot', 'livechat-agent']\n          }\n        }, usernameList && {\n          username: {\n            $in: [].concat(usernameList)\n          }\n        });\n        return this.find(query);\n      }\n      countBotAgents(usernameList) {\n        // TODO:: Create class Agent\n        const query = _objectSpread({\n          roles: {\n            $all: ['bot', 'livechat-agent']\n          }\n        }, usernameList && {\n          username: {\n            $in: [].concat(usernameList)\n          }\n        });\n        return this.countDocuments(query);\n      }\n      removeAllRoomsByUserId(_id) {\n        return this.updateOne({\n          _id\n        }, {\n          $set: {\n            __rooms: []\n          }\n        });\n      }\n      removeRoomByUserId(_id, rid) {\n        return this.updateOne({\n          _id,\n          __rooms: rid\n        }, {\n          $pull: {\n            __rooms: rid\n          }\n        });\n      }\n      addRoomByUserId(_id, rid) {\n        return this.updateOne({\n          _id,\n          __rooms: {\n            $ne: rid\n          }\n        }, {\n          $addToSet: {\n            __rooms: rid\n          }\n        });\n      }\n      addRoomByUserIds(uids, rid) {\n        return this.updateMany({\n          _id: {\n            $in: uids\n          },\n          __rooms: {\n            $ne: rid\n          }\n        }, {\n          $addToSet: {\n            __rooms: rid\n          }\n        });\n      }\n      removeRoomByRoomIds(rids) {\n        return this.updateMany({\n          __rooms: {\n            $in: rids\n          }\n        }, {\n          $pullAll: {\n            __rooms: rids\n          }\n        });\n      }\n      getLoginTokensByUserId(userId) {\n        const query = {\n          'services.resume.loginTokens.type': {\n            $exists: true,\n            $eq: 'personalAccessToken'\n          },\n          '_id': userId\n        };\n        return this.find(query, {\n          projection: {\n            'services.resume.loginTokens': 1\n          }\n        });\n      }\n      addPersonalAccessTokenToUser(_ref4) {\n        let {\n          userId,\n          loginTokenObject\n        } = _ref4;\n        return this.updateOne({\n          _id: userId\n        }, {\n          $push: {\n            'services.resume.loginTokens': loginTokenObject\n          }\n        });\n      }\n      removePersonalAccessTokenOfUser(_ref5) {\n        let {\n          userId,\n          loginTokenObject\n        } = _ref5;\n        return this.updateOne({\n          _id: userId\n        }, {\n          $pull: {\n            'services.resume.loginTokens': loginTokenObject\n          }\n        });\n      }\n      findPersonalAccessTokenByTokenNameAndUserId(_ref6) {\n        let {\n          userId,\n          tokenName\n        } = _ref6;\n        const query = {\n          'services.resume.loginTokens': {\n            $elemMatch: {\n              name: tokenName,\n              type: 'personalAccessToken'\n            }\n          },\n          '_id': userId\n        };\n        return this.findOne(query);\n      }\n      setOperator(_id, operator) {\n        // TODO:: Create class Agent\n        const update = {\n          $set: {\n            operator\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      async checkOnlineAgents(agentId) {\n        // TODO:: Create class Agent\n        const query = queryStatusAgentOnline(agentId && {\n          _id: agentId\n        });\n        return !!(await this.findOne(query));\n      }\n      findOnlineAgents(agentId) {\n        // TODO:: Create class Agent\n        const query = queryStatusAgentOnline(agentId && {\n          _id: agentId\n        });\n        return this.find(query);\n      }\n      countOnlineAgents(agentId) {\n        // TODO:: Create class Agent\n        const query = queryStatusAgentOnline(agentId && {\n          _id: agentId\n        });\n        return this.col.countDocuments(query);\n      }\n      findOneBotAgent() {\n        // TODO:: Create class Agent\n        const query = {\n          roles: {\n            $all: ['bot', 'livechat-agent']\n          }\n        };\n        return this.findOne(query);\n      }\n      findOneOnlineAgentById(_id, isLivechatEnabledWhenAgentIdle) {\n        // TODO: Create class Agent\n        const query = queryStatusAgentOnline({\n          _id\n        }, isLivechatEnabledWhenAgentIdle);\n        return this.findOne(query);\n      }\n      findAgents() {\n        // TODO: Create class Agent\n        const query = {\n          roles: 'livechat-agent'\n        };\n        return this.find(query);\n      }\n      countAgents() {\n        // TODO: Create class Agent\n        const query = {\n          roles: 'livechat-agent'\n        };\n        return this.col.countDocuments(query);\n      }\n\n      // 2\n      async getNextAgent(ignoreAgentId, extraQuery) {\n        // TODO: Create class Agent\n        // fetch all unavailable agents, and exclude them from the selection\n        const unavailableAgents = (await this.getUnavailableAgents(null, extraQuery)).map(u => u.username);\n        const extraFilters = _objectSpread(_objectSpread({}, ignoreAgentId && {\n          _id: {\n            $ne: ignoreAgentId\n          }\n        }), {}, {\n          // limit query to remove booked agents\n          username: {\n            $nin: unavailableAgents\n          }\n        });\n        const query = queryStatusAgentOnline(extraFilters);\n        const sort = {\n          livechatCount: 1,\n          username: 1\n        };\n        const update = {\n          $inc: {\n            livechatCount: 1\n          }\n        };\n        const user = await this.findOneAndUpdate(query, update, {\n          sort,\n          returnDocument: 'after'\n        });\n        if (user && user.value) {\n          return {\n            agentId: user.value._id,\n            username: user.value.username\n          };\n        }\n        return null;\n      }\n      async getNextBotAgent(ignoreAgentId) {\n        // TODO: Create class Agent\n        const query = _objectSpread({\n          roles: {\n            $all: ['bot', 'livechat-agent']\n          }\n        }, ignoreAgentId && {\n          _id: {\n            $ne: ignoreAgentId\n          }\n        });\n        const sort = {\n          livechatCount: 1,\n          username: 1\n        };\n        const update = {\n          $inc: {\n            livechatCount: 1\n          }\n        };\n        const user = await this.findOneAndUpdate(query, update, {\n          sort,\n          returnDocument: 'after'\n        });\n        if (user !== null && user !== void 0 && user.value) {\n          return {\n            agentId: user.value._id,\n            username: user.value.username\n          };\n        }\n        return null;\n      }\n      setLivechatStatus(userId, status) {\n        // TODO: Create class Agent\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $set: {\n            statusLivechat: status,\n            livechatStatusSystemModified: false\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      makeAgentUnavailableAndUnsetExtension(userId) {\n        const query = {\n          _id: userId,\n          roles: 'livechat-agent'\n        };\n        const update = {\n          $set: {\n            statusLivechat: ILivechatAgentStatus.NOT_AVAILABLE\n          },\n          $unset: {\n            extension: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setLivechatData(userId) {\n        let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        // TODO: Create class Agent\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $set: {\n            livechat: data\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async closeOffice() {\n        // TODO: Create class Agent\n        const promises = [];\n        await this.findAgents().forEach(agent => promises.push(this.setLivechatStatus(agent._id, 'not-available')));\n        await Promise.all(promises);\n      }\n      async openOffice() {\n        // TODO: Create class Agent\n        const promises = [];\n        await this.findAgents().forEach(agent => promises.push(this.setLivechatStatus(agent._id, 'available')));\n        await Promise.all(promises);\n      }\n      getAgentInfo(agentId) {\n        let showAgentEmail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        // TODO: Create class Agent\n        const query = {\n          _id: agentId\n        };\n        const options = {\n          projection: _objectSpread({\n            name: 1,\n            username: 1,\n            phone: 1,\n            customFields: 1,\n            status: 1,\n            livechat: 1\n          }, showAgentEmail && {\n            emails: 1\n          })\n        };\n        return this.findOne(query, options);\n      }\n      roleBaseQuery(userId) {\n        return {\n          _id: userId\n        };\n      }\n      setE2EPublicAndPrivateKeysByUserId(userId, _ref7) {\n        let {\n          public_key,\n          private_key\n        } = _ref7;\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'e2e.public_key': public_key,\n            'e2e.private_key': private_key\n          }\n        });\n      }\n      async rocketMailUnsubscribe(_id, createdAt) {\n        const query = {\n          _id,\n          createdAt: new Date(parseInt(createdAt))\n        };\n        const update = {\n          $set: {\n            'mailer.unsubscribed': true\n          }\n        };\n        const affectedRows = (await this.updateOne(query, update)).updatedCount;\n        return affectedRows;\n      }\n      async fetchKeysByUserId(userId) {\n        var _user$e2e;\n        const user = await this.findOne({\n          _id: userId\n        }, {\n          projection: {\n            e2e: 1\n          }\n        });\n        if (!(user !== null && user !== void 0 && (_user$e2e = user.e2e) !== null && _user$e2e !== void 0 && _user$e2e.public_key)) {\n          return {};\n        }\n        return {\n          public_key: user.e2e.public_key,\n          private_key: user.e2e.private_key\n        };\n      }\n      disable2FAAndSetTempSecretByUserId(userId, tempToken) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.totp': {\n              enabled: false,\n              tempSecret: tempToken\n            }\n          }\n        });\n      }\n      enable2FAAndSetSecretAndCodesByUserId(userId, secret, backupCodes) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.totp.enabled': true,\n            'services.totp.secret': secret,\n            'services.totp.hashedBackup': backupCodes\n          },\n          $unset: {\n            'services.totp.tempSecret': 1\n          }\n        });\n      }\n      disable2FAByUserId(userId) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.totp': {\n              enabled: false\n            }\n          }\n        });\n      }\n      update2FABackupCodesByUserId(userId, backupCodes) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.totp.hashedBackup': backupCodes\n          }\n        });\n      }\n      enableEmail2FAByUserId(userId) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.email2fa': {\n              enabled: true,\n              changedAt: new Date()\n            }\n          }\n        });\n      }\n      disableEmail2FAByUserId(userId) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.email2fa': {\n              enabled: false,\n              changedAt: new Date()\n            }\n          }\n        });\n      }\n      findByIdsWithPublicE2EKey(ids, options) {\n        const query = {\n          '_id': {\n            $in: ids\n          },\n          'e2e.public_key': {\n            $exists: 1\n          }\n        };\n        return this.find(query, options);\n      }\n      resetE2EKey(userId) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $unset: {\n            e2e: ''\n          }\n        });\n      }\n      removeExpiredEmailCodeOfUserId(userId) {\n        return this.updateOne({\n          '_id': userId,\n          'services.emailCode.expire': {\n            $lt: new Date()\n          }\n        }, {\n          $unset: {\n            'services.emailCode': 1\n          }\n        });\n      }\n      removeEmailCodeOfUserId(userId) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $unset: {\n            'services.emailCode': 1\n          }\n        });\n      }\n      incrementInvalidEmailCodeAttempt(userId) {\n        return this.findOneAndUpdate({\n          _id: userId\n        }, {\n          $inc: {\n            'services.emailCode.attempts': 1\n          }\n        }, {\n          returnDocument: 'after',\n          projection: {\n            'services.emailCode.attempts': 1\n          }\n        });\n      }\n      async maxInvalidEmailCodeAttemptsReached(userId, maxAttempts) {\n        const result = await this.findOne({\n          '_id': userId,\n          'services.emailCode.attempts': {\n            $gte: maxAttempts\n          }\n        }, {\n          projection: {\n            _id: 1\n          }\n        });\n        return !!(result !== null && result !== void 0 && result._id);\n      }\n      addEmailCodeByUserId(userId, code, expire) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            'services.emailCode': {\n              code,\n              expire,\n              attempts: 0\n            }\n          }\n        });\n      }\n\n      /**\n       * @param {IRole['_id'][]} roles the list of role ids\n       * @param {any} options\n       */\n      findActiveUsersInRoles(roles, options) {\n        roles = [].concat(roles);\n        const query = {\n          roles: {\n            $in: roles\n          },\n          active: true\n        };\n        return this.find(query, options);\n      }\n      countActiveUsersInRoles(roles, options) {\n        roles = [].concat(roles);\n        const query = {\n          roles: {\n            $in: roles\n          },\n          active: true\n        };\n        return this.col.countDocuments(query, options);\n      }\n      findOneByUsernameAndServiceNameIgnoringCase(username, userId, serviceName, options) {\n        if (typeof username === 'string') {\n          username = new RegExp(\"^\".concat(escapeRegExp(username), \"$\"), 'i');\n        }\n        const query = {\n          username,\n          [\"services.\".concat(serviceName, \".id\")]: userId\n        };\n        return this.findOne(query, options);\n      }\n      findOneByEmailAddressAndServiceNameIgnoringCase(emailAddress, userId, serviceName, options) {\n        const query = {\n          'emails.address': String(emailAddress).trim(),\n          [\"services.\".concat(serviceName, \".id\")]: userId\n        };\n        return this.findOne(query, _objectSpread({\n          collation: {\n            locale: 'en',\n            strength: 2\n          }\n        }, options));\n      }\n      findOneByEmailAddress(emailAddress, options) {\n        const query = {\n          'emails.address': String(emailAddress).trim()\n        };\n        return this.findOne(query, _objectSpread({\n          collation: {\n            locale: 'en',\n            strength: 2\n          }\n        }, options));\n      }\n      findOneWithoutLDAPByEmailAddress(emailAddress, options) {\n        const query = {\n          'email.address': emailAddress.trim().toLowerCase(),\n          'services.ldap': {\n            $exists: false\n          }\n        };\n        return this.findOne(query, options);\n      }\n      findOneAdmin(userId, options) {\n        const query = {\n          roles: {\n            $in: ['admin']\n          },\n          _id: userId\n        };\n        return this.findOne(query, options);\n      }\n      findOneByIdAndLoginToken(_id, token, options) {\n        const query = {\n          _id,\n          'services.resume.loginTokens.hashedToken': token\n        };\n        return this.findOne(query, options);\n      }\n      findOneById(userId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          _id: userId\n        };\n        return this.findOne(query, options);\n      }\n      findOneActiveById(userId, options) {\n        const query = {\n          _id: userId,\n          active: true\n        };\n        return this.findOne(query, options);\n      }\n      findOneByIdOrUsername(idOrUsername, options) {\n        const query = {\n          $or: [{\n            _id: idOrUsername\n          }, {\n            username: idOrUsername\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      findOneByRolesAndType(roles, type, options) {\n        const query = {\n          roles,\n          type\n        };\n        return this.findOne(query, options);\n      }\n      findNotOfflineByIds(users, options) {\n        const query = {\n          _id: {\n            $in: users\n          },\n          status: {\n            $in: ['online', 'away', 'busy']\n          }\n        };\n        return this.find(query, options);\n      }\n      findUsersNotOffline(options) {\n        const query = {\n          username: {\n            $exists: 1\n          },\n          status: {\n            $in: ['online', 'away', 'busy']\n          }\n        };\n        return this.find(query, options);\n      }\n      countUsersNotOffline(options) {\n        const query = {\n          username: {\n            $exists: 1\n          },\n          status: {\n            $in: ['online', 'away', 'busy']\n          }\n        };\n        return this.col.countDocuments(query, options);\n      }\n      findNotIdUpdatedFrom(uid, from, options) {\n        const query = {\n          _id: {\n            $ne: uid\n          },\n          username: {\n            $exists: 1\n          },\n          _updatedAt: {\n            $gte: from\n          }\n        };\n        return this.find(query, options);\n      }\n      async findByRoomId(rid, options) {\n        const data = (await Subscriptions.findByRoomId(rid).toArray()).map(item => item.u._id);\n        const query = {\n          _id: {\n            $in: data\n          }\n        };\n        return this.find(query, options);\n      }\n      findByUsername(username, options) {\n        const query = {\n          username\n        };\n        return this.find(query, options);\n      }\n      findByUsernames(usernames, options) {\n        const query = {\n          username: {\n            $in: usernames\n          }\n        };\n        return this.find(query, options);\n      }\n      findByUsernamesIgnoringCase(usernames, options) {\n        const query = {\n          username: {\n            $in: usernames.filter(Boolean).map(u => new RegExp(\"^\".concat(escapeRegExp(u), \"$\"), 'i'))\n          }\n        };\n        return this.find(query, options);\n      }\n      findActiveByUserIds(ids) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          active: true,\n          type: {\n            $nin: ['app']\n          },\n          _id: {\n            $in: ids\n          }\n        }, options);\n      }\n      findActiveLocalGuests() {\n        let idExceptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          active: true,\n          type: {\n            $nin: ['app']\n          },\n          roles: {\n            $eq: 'guest',\n            $size: 1\n          },\n          isRemote: {\n            $ne: true\n          }\n        };\n        if (idExceptions) {\n          if (!Array.isArray(idExceptions)) {\n            idExceptions = [idExceptions];\n          }\n          query._id = {\n            $nin: idExceptions\n          };\n        }\n        return this.find(query, options);\n      }\n      countActiveLocalGuests() {\n        let idExceptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        const query = {\n          active: true,\n          type: {\n            $nin: ['app']\n          },\n          roles: {\n            $eq: 'guest',\n            $size: 1\n          },\n          isRemote: {\n            $ne: true\n          }\n        };\n        if (idExceptions) {\n          if (!Array.isArray(idExceptions)) {\n            idExceptions = [idExceptions];\n          }\n          query._id = {\n            $nin: idExceptions\n          };\n        }\n        return this.col.countDocuments(query);\n      }\n\n      // 4\n      findUsersByNameOrUsername(nameOrUsername, options) {\n        const query = {\n          username: {\n            $exists: 1\n          },\n          $or: [{\n            name: nameOrUsername\n          }, {\n            username: nameOrUsername\n          }],\n          type: {\n            $in: ['user']\n          }\n        };\n        return this.find(query, options);\n      }\n      findByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {\n        const query = {\n          $or: [{\n            name: usernameNameOrEmailAddress\n          }, {\n            username: usernameNameOrEmailAddress\n          }, {\n            'emails.address': usernameNameOrEmailAddress\n          }],\n          type: {\n            $in: ['user', 'bot']\n          }\n        };\n        return this.find(query, options);\n      }\n      findCrowdUsers(options) {\n        const query = {\n          crowd: true\n        };\n        return this.find(query, options);\n      }\n      async getLastLogin() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          projection: {\n            _id: 0,\n            lastLogin: 1\n          }\n        };\n        options.sort = {\n          lastLogin: -1\n        };\n        const user = await this.findOne({}, options);\n        return user === null || user === void 0 ? void 0 : user.lastLogin;\n      }\n      findUsersByUsernames(usernames, options) {\n        const query = {\n          username: {\n            $in: usernames\n          }\n        };\n        return this.find(query, options);\n      }\n      findUsersByIds(ids, options) {\n        const query = {\n          _id: {\n            $in: ids\n          }\n        };\n        return this.find(query, options);\n      }\n      findUsersWithUsernameByIds(ids, options) {\n        const query = {\n          _id: {\n            $in: ids\n          },\n          username: {\n            $exists: 1\n          }\n        };\n        return this.find(query, options);\n      }\n      findUsersWithUsernameByIdsNotOffline(ids, options) {\n        const query = {\n          _id: {\n            $in: ids\n          },\n          username: {\n            $exists: 1\n          },\n          status: {\n            $in: ['online', 'away', 'busy']\n          }\n        };\n        return this.find(query, options);\n      }\n\n      /**\n       * @param {import('mongodb').Filter<import('@rocket.chat/core-typings').IStats>} projection\n       */\n      getOldest(optionsParams) {\n        const query = {\n          _id: {\n            $ne: 'rocket.cat'\n          }\n        };\n        const options = _objectSpread(_objectSpread({}, optionsParams), {}, {\n          sort: {\n            createdAt: 1\n          }\n        });\n        return this.findOne(query, options);\n      }\n      countRemote() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.col.countDocuments({\n          isRemote: true\n        }, options);\n      }\n      findActiveRemote() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          active: true,\n          isRemote: true,\n          roles: {\n            $ne: ['guest']\n          }\n        }, options);\n      }\n      findActiveFederated() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          active: true,\n          federated: true\n        }, options);\n      }\n      getSAMLByIdAndSAMLProvider(_id, provider) {\n        return this.findOne({\n          _id,\n          'services.saml.provider': provider\n        }, {\n          'services.saml': 1\n        });\n      }\n      findBySAMLNameIdOrIdpSession(nameID, idpSession) {\n        return this.find({\n          $or: [{\n            'services.saml.nameID': nameID\n          }, {\n            'services.saml.idpSession': idpSession\n          }]\n        });\n      }\n      countBySAMLNameIdOrIdpSession(nameID, idpSession) {\n        return this.col.countDocuments({\n          $or: [{\n            'services.saml.nameID': nameID\n          }, {\n            'services.saml.idpSession': idpSession\n          }]\n        });\n      }\n      findBySAMLInResponseTo(inResponseTo) {\n        return this.find({\n          'services.saml.inResponseTo': inResponseTo\n        });\n      }\n      findOneByFreeSwitchExtension(freeSwitchExtension) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.findOne({\n          freeSwitchExtension\n        }, options);\n      }\n      findAssignedFreeSwitchExtensions() {\n        return this.findUsersWithAssignedFreeSwitchExtensions({\n          projection: {\n            freeSwitchExtension: 1\n          }\n        }).map(_ref8 => {\n          let {\n            freeSwitchExtension\n          } = _ref8;\n          return freeSwitchExtension;\n        });\n      }\n      findUsersWithAssignedFreeSwitchExtensions() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          freeSwitchExtension: {\n            $exists: 1\n          }\n        }, options);\n      }\n\n      // UPDATE\n      addImportIds(_id, importIds) {\n        importIds = [].concat(importIds);\n        const query = {\n          _id\n        };\n        const update = {\n          $addToSet: {\n            importIds: {\n              $each: importIds\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateInviteToken(_id, inviteToken) {\n        const update = {\n          $set: {\n            inviteToken\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      updateLastLoginById(_id) {\n        const update = {\n          $set: {\n            lastLogin: new Date()\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      addPasswordToHistory(_id, password, passwordHistoryAmount) {\n        const update = {\n          $push: {\n            'services.passwordHistory': {\n              $each: [password],\n              $slice: -Number(passwordHistoryAmount)\n            }\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setServiceId(_id, serviceName, serviceId) {\n        const update = {\n          $set: {}\n        };\n        const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n        update.$set[serviceIdKey] = serviceId;\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setUsername(_id, username) {\n        const update = {\n          $set: {\n            username\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setEmail(_id, email) {\n        const update = {\n          $set: {\n            emails: [{\n              address: email,\n              verified: false\n            }]\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n\n      // 5\n      setEmailVerified(_id, email) {\n        const query = {\n          _id,\n          emails: {\n            $elemMatch: {\n              address: email,\n              verified: false\n            }\n          }\n        };\n        const update = {\n          $set: {\n            'emails.$.verified': true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setName(_id, name) {\n        const update = {\n          $set: {\n            name\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      unsetName(_id) {\n        const update = {\n          $unset: {\n            name\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setCustomFields(_id, fields) {\n        const values = {};\n        Object.keys(fields).forEach(key => {\n          values[\"customFields.\".concat(key)] = fields[key];\n        });\n        const update = {\n          $set: values\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setAvatarData(_id, origin, etag) {\n        const update = {\n          $set: {\n            avatarOrigin: origin,\n            avatarETag: etag\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      unsetAvatarData(_id) {\n        const update = {\n          $unset: {\n            avatarOrigin: 1,\n            avatarETag: 1\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setUserActive(_id, active) {\n        if (active == null) {\n          active = true;\n        }\n        const update = {\n          $set: {\n            active\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setAllUsersActive(active) {\n        const update = {\n          $set: {\n            active\n          }\n        };\n        return this.updateMany({}, update);\n      }\n\n      /**\n       * @param latestLastLoginDate\n       * @param {IRole['_id']} role the role id\n       * @param {boolean} active\n       */\n      setActiveNotLoggedInAfterWithRole(latestLastLoginDate) {\n        let role = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'user';\n        let active = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        const neverActive = {\n          lastLogin: {\n            $exists: 0\n          },\n          createdAt: {\n            $lte: latestLastLoginDate\n          }\n        };\n        const idleTooLong = {\n          lastLogin: {\n            $lte: latestLastLoginDate\n          }\n        };\n        const query = {\n          $or: [neverActive, idleTooLong],\n          active: true,\n          roles: role\n        };\n        const update = {\n          $set: {\n            active\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      unsetRequirePasswordChange(_id) {\n        const update = {\n          $unset: {\n            requirePasswordChange: true,\n            requirePasswordChangeReason: true\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      resetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {\n        const update = {\n          $unset: {\n            'services.password': 1\n          },\n          $set: {\n            requirePasswordChange,\n            requirePasswordChangeReason\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setLanguage(_id, language) {\n        const update = {\n          $set: {\n            language\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setProfile(_id, profile) {\n        const update = {\n          $set: {\n            'settings.profile': profile\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setBio(_id) {\n        let bio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        const update = _objectSpread({}, bio.trim() ? {\n          $set: {\n            bio\n          }\n        } : {\n          $unset: {\n            bio: 1\n          }\n        });\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setNickname(_id) {\n        let nickname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n        const update = _objectSpread({}, nickname.trim() ? {\n          $set: {\n            nickname\n          }\n        } : {\n          $unset: {\n            nickname: 1\n          }\n        });\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      clearSettings(_id) {\n        const update = {\n          $set: {\n            settings: {}\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setPreferences(_id, preferences) {\n        const settingsObject = Object.assign({}, ...Object.keys(preferences).map(key => ({\n          [\"settings.preferences.\".concat(key)]: preferences[key]\n        })));\n        const update = {\n          $set: settingsObject\n        };\n        if (parseInt(preferences.clockMode) === 0) {\n          delete update.$set['settings.preferences.clockMode'];\n          update.$unset = {\n            'settings.preferences.clockMode': 1\n          };\n        }\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setTwoFactorAuthorizationHashAndUntilForUserIdAndToken(_id, token, hash, until) {\n        return this.updateOne({\n          _id,\n          'services.resume.loginTokens.hashedToken': token\n        }, {\n          $set: {\n            'services.resume.loginTokens.$.twoFactorAuthorizedHash': hash,\n            'services.resume.loginTokens.$.twoFactorAuthorizedUntil': until\n          }\n        });\n      }\n      setUtcOffset(_id, utcOffset) {\n        const query = {\n          _id,\n          utcOffset: {\n            $ne: utcOffset\n          }\n        };\n        const update = {\n          $set: {\n            utcOffset\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveUserById(_id, data) {\n        const setData = {};\n        const unsetData = {};\n        if (data.name != null) {\n          if (data.name.trim()) {\n            setData.name = data.name.trim();\n          } else {\n            unsetData.name = 1;\n          }\n        }\n        if (data.email != null) {\n          if (data.email.trim()) {\n            setData.emails = [{\n              address: data.email.trim()\n            }];\n          } else {\n            unsetData.emails = 1;\n          }\n        }\n        if (data.phone != null) {\n          if (data.phone.trim()) {\n            setData.phone = [{\n              phoneNumber: data.phone.trim()\n            }];\n          } else {\n            unsetData.phone = 1;\n          }\n        }\n        const update = {};\n        if (setData) {\n          update.$set = setData;\n        }\n        if (unsetData) {\n          update.$unset = unsetData;\n        }\n        if (update) {\n          return true;\n        }\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setReason(_id, reason) {\n        const update = {\n          $set: {\n            reason\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      unsetReason(_id) {\n        const update = {\n          $unset: {\n            reason: true\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      async bannerExistsById(_id, bannerId) {\n        const query = {\n          _id,\n          [\"banners.\".concat(bannerId)]: {\n            $exists: true\n          }\n        };\n        return (await this.col.countDocuments(query)) !== 0;\n      }\n      setBannerReadById(_id, bannerId) {\n        const update = {\n          $set: {\n            [\"banners.\".concat(bannerId, \".read\")]: true\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      removeBannerById(_id, bannerId) {\n        const update = {\n          $unset: {\n            [\"banners.\".concat(bannerId)]: true\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      removeSamlServiceSession(_id) {\n        const update = {\n          $unset: {\n            'services.saml.idpSession': ''\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      updateDefaultStatus(_id, statusDefault) {\n        return this.updateOne({\n          _id,\n          statusDefault: {\n            $ne: statusDefault\n          }\n        }, {\n          $set: {\n            statusDefault\n          }\n        });\n      }\n      setSamlInResponseTo(_id, inResponseTo) {\n        this.updateOne({\n          _id\n        }, {\n          $set: {\n            'services.saml.inResponseTo': inResponseTo\n          }\n        });\n      }\n      async setFreeSwitchExtension(_id, extension) {\n        return this.updateOne({\n          _id\n        }, _objectSpread({}, extension ? {\n          $set: {\n            freeSwitchExtension: extension\n          }\n        } : {\n          $unset: {\n            freeSwitchExtension: 1\n          }\n        }));\n      }\n\n      // INSERT\n      create(data) {\n        const user = {\n          createdAt: new Date(),\n          avatarOrigin: 'none'\n        };\n        Object.assign(user, data);\n        return this.insertOne(user);\n      }\n\n      // REMOVE\n      removeById(_id) {\n        return this.deleteOne({\n          _id\n        });\n      }\n      removeLivechatData(userId) {\n        const query = {\n          _id: userId\n        };\n        const update = {\n          $unset: {\n            livechat: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n\n      /*\n      \tFind users to send a message by email if:\n      \t- he is not online\n      \t- has a verified email\n      \t- has not disabled email notifications\n      \t- `active` is equal to true (false means they were deactivated and can't login)\n      */\n      getUsersToSendOfflineEmail(usersIds) {\n        const query = {\n          '_id': {\n            $in: usersIds\n          },\n          'active': true,\n          'status': 'offline',\n          'statusConnection': {\n            $ne: 'online'\n          },\n          'emails.verified': true\n        };\n        const options = {\n          projection: {\n            'name': 1,\n            'username': 1,\n            'emails': 1,\n            'settings.preferences.emailNotificationMode': 1,\n            'language': 1\n          }\n        };\n        return this.find(query, options);\n      }\n      countActiveUsersByService(serviceName, options) {\n        const query = {\n          active: true,\n          type: {\n            $nin: ['app']\n          },\n          roles: {\n            $ne: ['guest']\n          },\n          [\"services.\".concat(serviceName)]: {\n            $exists: true\n          }\n        };\n        return this.col.countDocuments(query, options);\n      }\n\n      // here\n      getActiveLocalUserCount() {\n        return Promise.all([\n        // Count all active users (fast based on index)\n        this.col.countDocuments({\n          active: true\n        }),\n        // Count all active that are guests, apps, bots or federated\n        // Fast based on indexes, usually based on guest index as is usually small\n        this.col.countDocuments({\n          active: true,\n          $or: [{\n            roles: ['guest']\n          }, {\n            type: {\n              $in: ['app', 'bot']\n            }\n          }, {\n            federated: true\n          }, {\n            isRemote: true\n          }]\n        })\n        // Get all active and remove the guests, apps, bots and federated\n        ]).then(results => results.reduce((a, b) => a - b));\n      }\n      getActiveLocalGuestCount() {\n        let idExceptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return this.countActiveLocalGuests(idExceptions);\n      }\n      removeOlderResumeTokensByUserId(userId, fromDate) {\n        this.updateOne({\n          _id: userId\n        }, {\n          $pull: {\n            'services.resume.loginTokens': {\n              when: {\n                $lt: fromDate\n              }\n            }\n          }\n        });\n      }\n      findAllUsersWithPendingAvatar() {\n        const query = {\n          _pendingAvatarUrl: {\n            $exists: true\n          }\n        };\n        const options = {\n          projection: {\n            _id: 1,\n            name: 1,\n            _pendingAvatarUrl: 1\n          }\n        };\n        return this.find(query, options);\n      }\n      countAllUsersWithPendingAvatar() {\n        const query = {\n          _pendingAvatarUrl: {\n            $exists: true\n          }\n        };\n        return this.countDocuments(query);\n      }\n      updateCustomFieldsById(userId, customFields) {\n        return this.updateOne({\n          _id: userId\n        }, {\n          $set: {\n            customFields\n          }\n        });\n      }\n      countRoomMembers(roomId) {\n        return this.col.countDocuments({\n          __rooms: roomId,\n          active: true\n        });\n      }\n      removeAgent(_id) {\n        const update = {\n          $set: {\n            operator: false\n          },\n          $unset: {\n            livechat: 1,\n            statusLivechat: 1,\n            extension: 1,\n            openBusinessHours: 1\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      countByRole(role) {\n        return this.col.countDocuments({\n          roles: role\n        });\n      }\n      updateLivechatStatusByAgentIds(userIds, status) {\n        return this.updateMany({\n          _id: {\n            $in: userIds\n          }\n        }, {\n          $set: {\n            statusLivechat: status\n          }\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","UsersRaw","ILivechatAgentStatus","Subscriptions","escapeRegExp","BaseRaw","__reifyWaitForDeps__","queryStatusAgentOnline","extraFilters","arguments","length","undefined","isLivechatEnabledWhenAgentIdle","statusLivechat","roles","active","$or","status","$exists","$ne","statusConnection","constructor","db","trash","collectionNameResolver","name","defaultFields","__rooms","modelIndexes","key","sparse","bio","nickname","createdAt","lastLogin","statusText","appId","type","federated","federation","isRemote","openBusinessHours","extension","unique","freeSwitchExtension","language","importIds","collation","locale","strength","caseLevel","username","addRolesByUserId","uid","Array","isArray","process","env","NODE_ENV","console","warn","query","_id","update","$addToSet","$each","updateOne","findUsersInRoles","scope","options","concat","$in","find","countUsersInRoles","countDocuments","findPaginatedUsersInRoles","findPaginated","findOneByUsername","findOne","findOneAgentById","findUsersInRolesWithQuery","Object","assign","findPaginatedUsersInRolesWithQuery","findAgentsWithDepartments","role","aggregate","$match","$lookup","from","localField","foreignField","as","$unwind","path","preserveNullAndEmptyArrays","$group","$first","emails","livechat","departments","$push","$facet","sortedResults","$sort","sort","$skip","skip","limit","$limit","totalCount","total","$sum","col","toArray","findOneByUsernameAndRoomIgnoringCase","rid","RegExp","findOneByIdAndLoginHashedToken","token","findByActiveUsersExcept","searchTerm","exceptions","searchFields","extraQuery","startsWith","endsWith","termRegex","orStmt","reduce","acc","el","push","trim","$and","$nin","findPaginatedByActiveUsersExcept","findPaginatedByActiveLocalUsersExcept","forcedSearchFields","localDomain","findPaginatedByActiveExternalUsersExcept","findActive","findActiveByIds","userIds","findActiveByIdsOrUsernames","findByIds","findOneByImportId","findOneByUsernameIgnoringCase","Error","findOneWithoutLDAPByUsernameIgnoringCase","expression","findOneByLDAPId","id","attribute","findOneByAppId","findLDAPUsers","ldap","findLDAPUsersExceptIds","findConnectedLDAPUsers","isUserInRole","userId","roleId","projection","getDistinctFederationDomains","distinct","getNextLeastBusyAgent","department","ignoreAgentId","let","pipeline","$expr","$eq","$project","agentId","lastRoutingTime","count","$size","agent","setLastRoutingTime","getLastAvailableAgentRouted","result","findOneAndUpdate","$set","Date","returnDocument","value","setLivechatStatusIf","conditions","extraFields","getAgentAndAmountOngoingChats","$filter","input","cond","findAllResumeTokensByUserId","tokens","findActiveByUsernameOrNameRegexWithExceptionsAndConditions","countAllAgentsStatus","_ref","departmentId","match","group","offline","$cond","away","busy","available","lookup","unwind","departmentsMatch","params","getTotalOfRegisteredUsersByDate","_ref2","start","end","$gte","$lte","$concat","$substr","users","date","getUserLanguages","updateStatusText","updateStatusByAppId","updateMany","updateStatusById","_ref3","statusDefault","String","substr","openAgentsBusinessHoursByBusinessHourId","businessHourIds","openAgentBusinessHoursByBusinessHourIdsAndAgentId","addBusinessHourByAgentIds","agentIds","businessHourId","findOnlineButNotAvailableAgents","removeBusinessHourByAgentIds","$pull","openBusinessHourToAgentsWithoutDepartment","agentIdsWithDepartment","closeBusinessHourToAgentsWithoutDepartment","closeAgentsBusinessHoursByBusinessHourIds","findAgentsAvailableWithoutBusinessHours","setLivechatStatusActiveBasedOnBusinessHours","$not","isAgentWithinBusinessHours","removeBusinessHoursFromAllUsers","$unset","resetTOTPById","unsetOneLoginToken","hashedToken","unsetLoginTokens","removeNonPATLoginTokensExcept","authToken","when","removeRoomsByRoomIdsAndUserId","rids","$pullAll","removeRolesByUserId","isUserInRoleScope","found","addBannerById","banner","findOneByAgentUsername","findOneByExtension","findByExtensions","extensions","getVoipExtensionByUserId","setExtension","unsetExtension","getAvailableAgentsIncludingExt","includeExt","text","findActiveUsersTOTPEnable","countActiveUsersTOTPEnable","findActiveUsersEmail2faEnable","countActiveUsersEmail2faEnable","setAsFederated","removeRoomByRoomId","findOneByResetToken","findOneByIdWithEmailAddress","setFederationAvatarUrlById","federationAvatarUrl","findSearchedServerNamesByUserId","_user$federation","user","searchedServerNames","addServerNameToSearchedServerNamesList","serverName","removeServerNameFromSearchedServerNamesList","countFederatedExternalUsers","findOnlineUserFromList","userList","countOnlineUserFromList","findOneOnlineAgentByUserList","getUnavailableAgents","findBotAgents","usernameList","$all","countBotAgents","removeAllRoomsByUserId","removeRoomByUserId","addRoomByUserId","addRoomByUserIds","uids","removeRoomByRoomIds","getLoginTokensByUserId","addPersonalAccessTokenToUser","_ref4","loginTokenObject","removePersonalAccessTokenOfUser","_ref5","findPersonalAccessTokenByTokenNameAndUserId","_ref6","tokenName","$elemMatch","setOperator","operator","checkOnlineAgents","findOnlineAgents","countOnlineAgents","findOneBotAgent","findOneOnlineAgentById","findAgents","countAgents","getNextAgent","unavailableAgents","map","u","livechatCount","$inc","getNextBotAgent","setLivechatStatus","livechatStatusSystemModified","makeAgentUnavailableAndUnsetExtension","NOT_AVAILABLE","setLivechatData","data","closeOffice","promises","forEach","Promise","all","openOffice","getAgentInfo","showAgentEmail","phone","customFields","roleBaseQuery","setE2EPublicAndPrivateKeysByUserId","_ref7","public_key","private_key","rocketMailUnsubscribe","parseInt","affectedRows","updatedCount","fetchKeysByUserId","_user$e2e","e2e","disable2FAAndSetTempSecretByUserId","tempToken","enabled","tempSecret","enable2FAAndSetSecretAndCodesByUserId","secret","backupCodes","disable2FAByUserId","update2FABackupCodesByUserId","enableEmail2FAByUserId","changedAt","disableEmail2FAByUserId","findByIdsWithPublicE2EKey","ids","resetE2EKey","removeExpiredEmailCodeOfUserId","$lt","removeEmailCodeOfUserId","incrementInvalidEmailCodeAttempt","maxInvalidEmailCodeAttemptsReached","maxAttempts","addEmailCodeByUserId","code","expire","attempts","findActiveUsersInRoles","countActiveUsersInRoles","findOneByUsernameAndServiceNameIgnoringCase","serviceName","findOneByEmailAddressAndServiceNameIgnoringCase","emailAddress","findOneByEmailAddress","findOneWithoutLDAPByEmailAddress","toLowerCase","findOneAdmin","findOneByIdAndLoginToken","findOneById","findOneActiveById","findOneByIdOrUsername","idOrUsername","findOneByRolesAndType","findNotOfflineByIds","findUsersNotOffline","countUsersNotOffline","findNotIdUpdatedFrom","_updatedAt","findByRoomId","item","findByUsername","findByUsernames","usernames","findByUsernamesIgnoringCase","filter","Boolean","findActiveByUserIds","findActiveLocalGuests","idExceptions","countActiveLocalGuests","findUsersByNameOrUsername","nameOrUsername","findByUsernameNameOrEmailAddress","usernameNameOrEmailAddress","findCrowdUsers","crowd","getLastLogin","findUsersByUsernames","findUsersByIds","findUsersWithUsernameByIds","findUsersWithUsernameByIdsNotOffline","getOldest","optionsParams","countRemote","findActiveRemote","findActiveFederated","getSAMLByIdAndSAMLProvider","provider","findBySAMLNameIdOrIdpSession","nameID","idpSession","countBySAMLNameIdOrIdpSession","findBySAMLInResponseTo","inResponseTo","findOneByFreeSwitchExtension","findAssignedFreeSwitchExtensions","findUsersWithAssignedFreeSwitchExtensions","_ref8","addImportIds","updateInviteToken","inviteToken","updateLastLoginById","addPasswordToHistory","password","passwordHistoryAmount","$slice","Number","setServiceId","serviceId","serviceIdKey","setUsername","setEmail","email","address","verified","setEmailVerified","setName","unsetName","setCustomFields","fields","values","keys","setAvatarData","origin","etag","avatarOrigin","avatarETag","unsetAvatarData","setUserActive","setAllUsersActive","setActiveNotLoggedInAfterWithRole","latestLastLoginDate","neverActive","idleTooLong","unsetRequirePasswordChange","requirePasswordChange","requirePasswordChangeReason","resetPasswordAndSetRequirePasswordChange","setLanguage","setProfile","profile","setBio","setNickname","clearSettings","settings","setPreferences","preferences","settingsObject","clockMode","setTwoFactorAuthorizationHashAndUntilForUserIdAndToken","hash","until","setUtcOffset","utcOffset","saveUserById","setData","unsetData","phoneNumber","setReason","reason","unsetReason","bannerExistsById","bannerId","setBannerReadById","removeBannerById","removeSamlServiceSession","updateDefaultStatus","setSamlInResponseTo","setFreeSwitchExtension","create","insertOne","removeById","deleteOne","removeLivechatData","getUsersToSendOfflineEmail","usersIds","countActiveUsersByService","getActiveLocalUserCount","then","results","a","b","getActiveLocalGuestCount","removeOlderResumeTokensByUserId","fromDate","findAllUsersWithPendingAvatar","_pendingAvatarUrl","countAllUsersWithPendingAvatar","updateCustomFieldsById","countRoomMembers","roomId","removeAgent","countByRole","updateLivechatStatusByAgentIds","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Users.js"],"sourcesContent":["import { ILivechatAgentStatus } from '@rocket.chat/core-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { BaseRaw } from './BaseRaw';\n\nconst queryStatusAgentOnline = (extraFilters = {}, isLivechatEnabledWhenAgentIdle) => ({\n\tstatusLivechat: 'available',\n\troles: 'livechat-agent',\n\t// ignore deactivated users\n\tactive: true,\n\t...(!isLivechatEnabledWhenAgentIdle && {\n\t\t$or: [\n\t\t\t{\n\t\t\t\tstatus: {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$ne: 'offline',\n\t\t\t\t},\n\t\t\t\troles: {\n\t\t\t\t\t$ne: 'bot',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\troles: 'bot',\n\t\t\t},\n\t\t],\n\t}),\n\t...extraFilters,\n\t...(isLivechatEnabledWhenAgentIdle === false && {\n\t\tstatusConnection: { $ne: 'away' },\n\t}),\n});\n\nexport class UsersRaw extends BaseRaw {\n\tconstructor(db, trash) {\n\t\tsuper(db, 'users', trash, {\n\t\t\tcollectionNameResolver(name) {\n\t\t\t\treturn name;\n\t\t\t},\n\t\t});\n\n\t\tthis.defaultFields = {\n\t\t\t__rooms: 0,\n\t\t};\n\t}\n\n\t// Move index from constructor to here\n\tmodelIndexes() {\n\t\treturn [\n\t\t\t{ key: { __rooms: 1 }, sparse: 1 },\n\t\t\t{ key: { roles: 1 }, sparse: 1 },\n\t\t\t{ key: { name: 1 } },\n\t\t\t{ key: { bio: 1 }, sparse: 1 },\n\t\t\t{ key: { nickname: 1 }, sparse: 1 },\n\t\t\t{ key: { createdAt: 1 } },\n\t\t\t{ key: { lastLogin: 1 } },\n\t\t\t{ key: { status: 1 } },\n\t\t\t{ key: { statusText: 1 } },\n\t\t\t{ key: { statusConnection: 1 }, sparse: 1 },\n\t\t\t{ key: { appId: 1 }, sparse: 1 },\n\t\t\t{ key: { type: 1 } },\n\t\t\t{ key: { federated: 1 }, sparse: true },\n\t\t\t{ key: { federation: 1 }, sparse: true },\n\t\t\t{ key: { isRemote: 1 }, sparse: true },\n\t\t\t{ key: { 'services.saml.inResponseTo': 1 } },\n\t\t\t{ key: { openBusinessHours: 1 }, sparse: true },\n\t\t\t{ key: { statusLivechat: 1 }, sparse: true },\n\t\t\t{ key: { extension: 1 }, sparse: true, unique: true },\n\t\t\t{ key: { freeSwitchExtension: 1 }, sparse: true, unique: true },\n\t\t\t{ key: { language: 1 }, sparse: true },\n\t\t\t{ key: { 'active': 1, 'services.email2fa.enabled': 1 }, sparse: true }, // used by statistics\n\t\t\t{ key: { 'active': 1, 'services.totp.enabled': 1 }, sparse: true }, // used by statistics\n\t\t\t{ key: { importIds: 1 }, sparse: true },\n\t\t\t// Used for case insensitive queries\n\t\t\t// @deprecated\n\t\t\t// Should be converted to unique index later within a migration to prevent errors of duplicated\n\t\t\t// records. Those errors does not helps to identify the duplicated value so we need to find a\n\t\t\t// way to help the migration in case it happens.\n\t\t\t{\n\t\t\t\tkey: { 'emails.address': 1 },\n\t\t\t\tunique: false,\n\t\t\t\tsparse: true,\n\t\t\t\tname: 'emails.address_insensitive',\n\t\t\t\tcollation: { locale: 'en', strength: 2, caseLevel: false },\n\t\t\t},\n\t\t\t// Used for case insensitive queries\n\t\t\t// @deprecated\n\t\t\t// Should be converted to unique index later within a migration to prevent errors of duplicated\n\t\t\t// records. Those errors does not helps to identify the duplicated value so we need to find a\n\t\t\t// way to help the migration in case it happens.\n\t\t\t{\n\t\t\t\tkey: { username: 1 },\n\t\t\t\tunique: false,\n\t\t\t\tsparse: true,\n\t\t\t\tname: 'username_insensitive',\n\t\t\t\tcollation: { locale: 'en', strength: 2, caseLevel: false },\n\t\t\t},\n\t\t];\n\t}\n\n\t/**\n\t * @param {string} uid\n\t * @param {IRole['_id'][]} roles list of role ids\n\t */\n\taddRolesByUserId(uid, roles) {\n\t\tif (!Array.isArray(roles)) {\n\t\t\troles = [roles];\n\t\t\tprocess.env.NODE_ENV === 'development' && console.warn('[WARN] Users.addRolesByUserId: roles should be an array');\n\t\t}\n\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\troles: { $each: roles },\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][]} roles list of role ids\n\t * @param {null} scope the value for the role scope (room id) - not used in the users collection\n\t * @param {any} options\n\t */\n\tfindUsersInRoles(roles, scope, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountUsersInRoles(roles) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tfindPaginatedUsersInRoles(roles, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindOneByUsername(username, options = null) {\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneAgentById(_id, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][] | IRole['_id']} roles the list of role ids\n\t * @param {any} query\n\t * @param {any} options\n\t */\n\tfindUsersInRolesWithQuery(roles, query, options) {\n\t\troles = [].concat(roles);\n\n\t\tObject.assign(query, { roles: { $in: roles } });\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][] | IRole['_id']} roles the list of role ids\n\t * @param {any} query\n\t * @param {any} options\n\t */\n\tfindPaginatedUsersInRolesWithQuery(roles, query, options) {\n\t\troles = [].concat(roles);\n\n\t\tObject.assign(query, { roles: { $in: roles } });\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindAgentsWithDepartments(role, query, options) {\n\t\tconst roles = [].concat(role);\n\n\t\tObject.assign(query, { roles: { $in: roles } });\n\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: query,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'agentId',\n\t\t\t\t\tas: 'departments',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$departments',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tusername: { $first: '$username' },\n\t\t\t\t\tstatus: { $first: '$status' },\n\t\t\t\t\tstatusLivechat: { $first: '$statusLivechat' },\n\t\t\t\t\tname: { $first: '$name' },\n\t\t\t\t\temails: { $first: '$emails' },\n\t\t\t\t\tlivechat: { $first: '$livechat' },\n\t\t\t\t\tdepartments: { $push: '$departments.departmentId' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$facet: {\n\t\t\t\t\tsortedResults: [{ $sort: options.sort }, { $skip: options.skip }, options.limit && { $limit: options.limit }],\n\t\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(aggregate).toArray();\n\t}\n\n\tfindOneByUsernameAndRoomIgnoringCase(username, rid, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = {\n\t\t\t__rooms: rid,\n\t\t\tusername,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndLoginHashedToken(_id, token, options = {}) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'services.resume.loginTokens.hashedToken': token,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByActiveUsersExcept(searchTerm, exceptions, options, searchFields, extraQuery = [], { startsWith = false, endsWith = false } = {}) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\n\t\tconst orStmt = (searchFields || []).reduce((acc, el) => {\n\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tactive: true,\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t...(exceptions.length > 0 && { $nin: exceptions }),\n\t\t\t\t\t},\n\t\t\t\t\t// if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\t\t\t\t\t...(searchTerm && orStmt.length > 0 && { $or: orStmt }),\n\t\t\t\t},\n\t\t\t\t...extraQuery,\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByActiveUsersExcept(\n\t\tsearchTerm,\n\t\texceptions,\n\t\toptions,\n\t\tsearchFields,\n\t\textraQuery = [],\n\t\t{ startsWith = false, endsWith = false } = {},\n\t) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst termRegex = new RegExp((startsWith ? '^' : '') + escapeRegExp(searchTerm) + (endsWith ? '$' : ''), 'i');\n\n\t\tconst orStmt = (searchFields || []).reduce((acc, el) => {\n\t\t\tacc.push({ [el.trim()]: termRegex });\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst query = {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tactive: true,\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t...(exceptions.length > 0 && { $nin: exceptions }),\n\t\t\t\t\t},\n\t\t\t\t\t// if the search term is empty, don't need to have the $or statement (because it would be an empty regex)\n\t\t\t\t\t...(searchTerm && orStmt.length > 0 && { $or: orStmt }),\n\t\t\t\t},\n\t\t\t\t...extraQuery,\n\t\t\t],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByActiveLocalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n\t\tconst extraQuery = [\n\t\t\t{\n\t\t\t\t$or: [{ federation: { $exists: false } }, { 'federation.origin': localDomain }],\n\t\t\t},\n\t\t];\n\t\treturn this.findPaginatedByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n\t}\n\n\tfindPaginatedByActiveExternalUsersExcept(searchTerm, exceptions, options, forcedSearchFields, localDomain) {\n\t\tconst extraQuery = [{ federation: { $exists: true } }, { 'federation.origin': { $ne: localDomain } }];\n\t\treturn this.findPaginatedByActiveUsersExcept(searchTerm, exceptions, options, forcedSearchFields, extraQuery);\n\t}\n\n\tfindActive(query, options = {}) {\n\t\tObject.assign(query, { active: true });\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindActiveByIds(userIds, options = {}) {\n\t\tconst query = {\n\t\t\t_id: { $in: userIds },\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindActiveByIdsOrUsernames(userIds, options = {}) {\n\t\tconst query = {\n\t\t\t$or: [{ _id: { $in: userIds } }, { username: { $in: userIds } }],\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(userIds, options = {}) {\n\t\tconst query = {\n\t\t\t_id: { $in: userIds },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByImportId(_id, options) {\n\t\treturn this.findOne({ importIds: _id }, options);\n\t}\n\n\tfindOneByUsernameIgnoringCase(username, options) {\n\t\tif (!username) {\n\t\t\tthrow new Error('invalid username');\n\t\t}\n\n\t\tconst query = { username };\n\n\t\treturn this.findOne(query, {\n\t\t\tcollation: { locale: 'en', strength: 2 }, // Case insensitive\n\t\t\t...options,\n\t\t});\n\t}\n\n\tfindOneWithoutLDAPByUsernameIgnoringCase(username, options) {\n\t\tconst expression = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\n\t\tconst query = {\n\t\t\t'username': expression,\n\t\t\t'services.ldap': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByLDAPId(id, attribute = undefined) {\n\t\tconst query = {\n\t\t\t'services.ldap.id': id,\n\t\t};\n\n\t\tif (attribute) {\n\t\t\tquery['services.ldap.idAttribute'] = attribute;\n\t\t}\n\n\t\treturn this.findOne(query);\n\t}\n\n\tasync findOneByAppId(appId, options) {\n\t\tconst query = { appId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindLDAPUsers(options) {\n\t\tconst query = { ldap: true };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindLDAPUsersExceptIds(userIds, options = {}) {\n\t\tconst query = {\n\t\t\tldap: true,\n\t\t\t_id: {\n\t\t\t\t$nin: userIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindConnectedLDAPUsers(options) {\n\t\tconst query = {\n\t\t\t'ldap': true,\n\t\t\t'services.resume.loginTokens': {\n\t\t\t\t$exists: true,\n\t\t\t\t$ne: [],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tisUserInRole(userId, roleId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\troles: roleId,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { roles: 1 } });\n\t}\n\n\tgetDistinctFederationDomains() {\n\t\treturn this.col.distinct('federation.origin', { federation: { $exists: true } });\n\t}\n\n\tasync getNextLeastBusyAgent(department, ignoreAgentId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: { $exists: true, $ne: 'offline' },\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlet: { id: '$_id' },\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t{ $eq: ['$u._id', '$$id'] },\n\t\t\t\t\t\t\t\t\t\t{ $eq: ['$open', true] },\n\t\t\t\t\t\t\t\t\t\t{ $ne: ['$onHold', true] },\n\t\t\t\t\t\t\t\t\t\t{ ...(department && { $eq: ['$department', department] }) },\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'subs',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'agentId',\n\t\t\t\t\tas: 'departments',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tagentId: '$_id',\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tlastRoutingTime: 1,\n\t\t\t\t\tdepartments: 1,\n\t\t\t\t\tcount: { $size: '$subs' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { count: 1, lastRoutingTime: 1, username: 1 } },\n\t\t];\n\n\t\tif (department) {\n\t\t\taggregate.push({ $unwind: '$departments' });\n\t\t\taggregate.push({ $match: { 'departments.departmentId': department } });\n\t\t}\n\n\t\taggregate.push({ $limit: 1 });\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync getLastAvailableAgentRouted(department, ignoreAgentId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: { $exists: true, $ne: 'offline' },\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'agentId',\n\t\t\t\t\tas: 'departments',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { agentId: '$_id', username: 1, lastRoutingTime: 1, departments: 1 } },\n\t\t\t{ $sort: { lastRoutingTime: 1, username: 1 } },\n\t\t];\n\n\t\tif (department) {\n\t\t\taggregate.push({ $unwind: '$departments' });\n\t\t\taggregate.push({ $match: { 'departments.departmentId': department } });\n\t\t}\n\n\t\taggregate.push({ $limit: 1 });\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\tif (agent) {\n\t\t\tawait this.setLastRoutingTime(agent.agentId);\n\t\t}\n\n\t\treturn agent;\n\t}\n\n\tasync setLastRoutingTime(userId) {\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastRoutingTime: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t\treturn result.value;\n\t}\n\n\tsetLivechatStatusIf(userId, status, conditions = {}, extraFields = {}) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\t...conditions,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: status,\n\t\t\t\t...extraFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getAgentAndAmountOngoingChats(userId) {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t_id: userId,\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\troles: 'livechat-agent',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: 'u._id',\n\t\t\t\t\tas: 'subs',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t'agentId': '$_id',\n\t\t\t\t\t'username': 1,\n\t\t\t\t\t'lastAssignTime': 1,\n\t\t\t\t\t'lastRoutingTime': 1,\n\t\t\t\t\t'queueInfo.chats': {\n\t\t\t\t\t\t$size: {\n\t\t\t\t\t\t\t$filter: {\n\t\t\t\t\t\t\t\tinput: '$subs',\n\t\t\t\t\t\t\t\tas: 'sub',\n\t\t\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t\t\t$and: [{ $eq: ['$$sub.t', 'l'] }, { $eq: ['$$sub.open', true] }, { $ne: ['$$sub.onHold', true] }],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { 'queueInfo.chats': 1, 'lastAssignTime': 1, 'lastRoutingTime': 1, 'username': 1 } },\n\t\t];\n\n\t\tconst [agent] = await this.col.aggregate(aggregate).toArray();\n\t\treturn agent;\n\t}\n\n\tfindAllResumeTokensByUserId(userId) {\n\t\treturn this.col\n\t\t\t.aggregate([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t_id: userId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\ttokens: {\n\t\t\t\t\t\t\t$filter: {\n\t\t\t\t\t\t\t\tinput: '$services.resume.loginTokens',\n\t\t\t\t\t\t\t\tas: 'token',\n\t\t\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t\t\t$ne: ['$$token.type', 'personalAccessToken'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $unwind: '$tokens' },\n\t\t\t\t{ $sort: { 'tokens.when': 1 } },\n\t\t\t\t{ $group: { _id: '$_id', tokens: { $push: '$tokens' } } },\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tfindActiveByUsernameOrNameRegexWithExceptionsAndConditions(termRegex, exceptions, conditions, options) {\n\t\tif (exceptions == null) {\n\t\t\texceptions = [];\n\t\t}\n\t\tif (conditions == null) {\n\t\t\tconditions = {};\n\t\t}\n\t\tif (options == null) {\n\t\t\toptions = {};\n\t\t}\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tusername: termRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: termRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tnickname: termRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t\tactive: true,\n\t\t\ttype: {\n\t\t\t\t$in: ['user', 'bot'],\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: {\n\t\t\t\t\t\t$nin: exceptions,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t...conditions,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountAllAgentsStatus({ departmentId = undefined }) {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\troles: { $in: ['livechat-agent'] },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\toffline: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'offline'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ $eq: ['$statusLivechat', 'not-available'] },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\taway: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'away'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tbusy: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'busy'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tavailable: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $eq: ['$status', 'online'] }, { $eq: ['$statusLivechat', 'available'] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'agentId',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsMatch = {\n\t\t\t$match: {\n\t\t\t\t'departments.departmentId': departmentId,\n\t\t\t},\n\t\t};\n\t\tconst params = [match];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tparams.push(lookup);\n\t\t\tparams.push(unwind);\n\t\t\tparams.push(departmentsMatch);\n\t\t}\n\t\tparams.push(group);\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tgetTotalOfRegisteredUsersByDate({ start, end, options = {} }) {\n\t\tconst params = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tcreatedAt: { $gte: start, $lte: end },\n\t\t\t\t\troles: { $ne: 'anonymous' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$concat: [{ $substr: ['$createdAt', 0, 4] }, { $substr: ['$createdAt', 5, 2] }, { $substr: ['$createdAt', 8, 2] }],\n\t\t\t\t\t},\n\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id',\n\t\t\t\t\tusers: { $sum: '$users' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tdate: '$_id',\n\t\t\t\t\tusers: 1,\n\t\t\t\t\ttype: 'users',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options.sort) {\n\t\t\tparams.push({ $sort: options.sort });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params).toArray();\n\t}\n\n\tgetUserLanguages() {\n\t\tconst pipeline = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tlanguage: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$language',\n\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(pipeline).toArray();\n\t}\n\n\tupdateStatusText(_id, statusText) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusText,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tupdateStatusByAppId(appId, status) {\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tstatus: { $ne: status },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t/**\n\t * @param {string} userId\n\t * @param {object} status\n\t * @param {string} status.status\n\t * @param {string} status.statusConnection\n\t * @param {string} [status.statusDefault]\n\t * @param {string} [status.statusText]\n\t */\n\tupdateStatusById(userId, { statusDefault, status, statusConnection, statusText }) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t\tstatusConnection,\n\t\t\t\t...(statusDefault && { statusDefault }),\n\t\t\t\t...(statusText && {\n\t\t\t\t\tstatusText: String(statusText).trim().substr(0, 120),\n\t\t\t\t}),\n\t\t\t},\n\t\t};\n\n\t\t// We don't want to update the _updatedAt field on this operation,\n\t\t// so we can check if the status update triggered a change\n\t\treturn this.col.updateOne(query, update);\n\t}\n\n\topenAgentsBusinessHoursByBusinessHourId(businessHourIds) {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: { $each: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\topenAgentBusinessHoursByBusinessHourIdsAndAgentId(businessHourIds, agentId) {\n\t\tconst query = {\n\t\t\t_id: agentId,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: { $each: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\taddBusinessHourByAgentIds(agentIds = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $in: agentIds },\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindOnlineButNotAvailableAgents(userIds) {\n\t\tconst query = {\n\t\t\t...(userIds && { _id: { $in: userIds } }),\n\t\t\troles: 'livechat-agent',\n\t\t\t// Exclude away users\n\t\t\tstatus: 'online',\n\t\t\t// Exclude users that are already available, maybe due to other business hour\n\t\t\tstatusLivechat: 'not-available',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tremoveBusinessHourByAgentIds(agentIds = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $in: agentIds },\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\topenBusinessHourToAgentsWithoutDepartment(agentIdsWithDepartment = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $nin: agentIdsWithDepartment },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcloseBusinessHourToAgentsWithoutDepartment(agentIdsWithDepartment = [], businessHourId) {\n\t\tconst query = {\n\t\t\t_id: { $nin: agentIdsWithDepartment },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: businessHourId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcloseAgentsBusinessHoursByBusinessHourIds(businessHourIds) {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\topenBusinessHours: { $in: businessHourIds },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindAgentsAvailableWithoutBusinessHours(userIds = []) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t$or: [{ openBusinessHours: { $exists: false } }, { openBusinessHours: { $size: 0 } }],\n\t\t\t\t$and: [{ roles: 'livechat-agent' }, { roles: { $ne: 'bot' } }],\n\t\t\t\t// exclude deactivated users\n\t\t\t\tactive: true,\n\t\t\t\t// Avoid unnecessary updates\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t...(Array.isArray(userIds) && userIds.length > 0 && { _id: { $in: userIds } }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { openBusinessHours: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetLivechatStatusActiveBasedOnBusinessHours(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\tstatusDefault: { $ne: 'offline' },\n\t\t\topenBusinessHours: {\n\t\t\t\t$exists: true,\n\t\t\t\t$not: { $size: 0 },\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: 'available',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isAgentWithinBusinessHours(agentId) {\n\t\tconst query = {\n\t\t\t_id: agentId,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\topenBusinessHours: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$not: { $size: 0 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// Bots can ignore Business Hours and be always available\n\t\t\t\t\troles: 'bot',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\treturn (await this.col.countDocuments(query)) > 0;\n\t}\n\n\tremoveBusinessHoursFromAllUsers() {\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t\topenBusinessHours: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\topenBusinessHours: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tresetTOTPById(userId) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'services.totp': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetOneLoginToken(_id, token) {\n\t\tconst update = {\n\t\t\t$pull: {\n\t\t\t\t'services.resume.loginTokens': { hashedToken: token },\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tunsetLoginTokens(userId) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.resume.loginTokens': [],\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveNonPATLoginTokensExcept(userId, authToken) {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.resume.loginTokens': {\n\t\t\t\t\t\twhen: { $exists: true },\n\t\t\t\t\t\thashedToken: { $ne: authToken },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomsByRoomIdsAndUserId(rids, userId) {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t\t__rooms: { $in: rids },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pullAll: { __rooms: rids },\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * @param {string} uid\n\t * @param {IRole['_id']} roles the list of role ids to remove\n\t */\n\tremoveRolesByUserId(uid, roles) {\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$pullAll: {\n\t\t\t\troles,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync isUserInRoleScope(uid) {\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: { _id: 1 },\n\t\t};\n\n\t\tconst found = await this.findOne(query, options);\n\t\treturn !!found;\n\t}\n\n\taddBannerById(_id, banner) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t[`banners.${banner.id}.read`]: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`banners.${banner.id}`]: banner,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t// Voip functions\n\tfindOneByAgentUsername(username, options) {\n\t\tconst query = { username, roles: 'livechat-agent' };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByExtension(extension, options) {\n\t\tconst query = {\n\t\t\textension,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByExtensions(extensions, options) {\n\t\tconst query = {\n\t\t\textension: {\n\t\t\t\t$in: extensions,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetVoipExtensionByUserId(userId, options) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\textension: { $exists: true },\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetExtension(userId, extension) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\textension,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunsetExtension(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\textension: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetAvailableAgentsIncludingExt(includeExt, text, options) {\n\t\tconst query = {\n\t\t\troles: { $in: ['livechat-agent'] },\n\t\t\t$and: [\n\t\t\t\t...(text && text.trim()\n\t\t\t\t\t? [{ $or: [{ username: new RegExp(escapeRegExp(text), 'i') }, { name: new RegExp(escapeRegExp(text), 'i') }] }]\n\t\t\t\t\t: []),\n\t\t\t\t{ $or: [{ extension: { $exists: false } }, ...(includeExt ? [{ extension: includeExt }] : [])] },\n\t\t\t],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindActiveUsersTOTPEnable(options) {\n\t\tconst query = {\n\t\t\t'active': true,\n\t\t\t'services.totp.enabled': true,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveUsersTOTPEnable(options) {\n\t\tconst query = {\n\t\t\t'active': true,\n\t\t\t'services.totp.enabled': true,\n\t\t};\n\t\treturn this.col.countDocuments(query, options);\n\t}\n\n\tfindActiveUsersEmail2faEnable(options) {\n\t\tconst query = {\n\t\t\t'active': true,\n\t\t\t'services.email2fa.enabled': true,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveUsersEmail2faEnable(options) {\n\t\tconst query = {\n\t\t\t'active': true,\n\t\t\t'services.email2fa.enabled': true,\n\t\t};\n\t\treturn this.col.countDocuments(query, options);\n\t}\n\n\tsetAsFederated(uid) {\n\t\tconst query = {\n\t\t\t_id: uid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tfederated: true,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveRoomByRoomId(rid, options) {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t__rooms: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: { __rooms: rid },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindOneByResetToken(token, options) {\n\t\treturn this.findOne({ 'services.password.reset.token': token }, options);\n\t}\n\n\tfindOneByIdWithEmailAddress(userId, options) {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t\temails: { $exists: true, $ne: [] },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tsetFederationAvatarUrlById(userId, federationAvatarUrl) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'federation.avatarUrl': federationAvatarUrl,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findSearchedServerNamesByUserId(userId) {\n\t\tconst user = await this.findOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'federation.searchedServerNames': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn user.federation?.searchedServerNames || [];\n\t}\n\n\taddServerNameToSearchedServerNamesList(userId, serverName) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: {\n\t\t\t\t\t'federation.searchedServerNames': serverName,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveServerNameFromSearchedServerNamesList(userId, serverName) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'federation.searchedServerNames': serverName,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcountFederatedExternalUsers() {\n\t\treturn this.col.countDocuments({\n\t\t\tfederated: true,\n\t\t});\n\t}\n\n\tfindOnlineUserFromList(userList, isLivechatEnabledWhenAgentIdle) {\n\t\t// TODO: Create class Agent\n\t\tconst username = {\n\t\t\t$in: [].concat(userList),\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline({ username }, isLivechatEnabledWhenAgentIdle);\n\n\t\treturn this.find(query);\n\t}\n\n\tcountOnlineUserFromList(userList, isLivechatEnabledWhenAgentIdle) {\n\t\t// TODO: Create class Agent\n\t\tconst username = {\n\t\t\t$in: [].concat(userList),\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline({ username }, isLivechatEnabledWhenAgentIdle);\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tfindOneOnlineAgentByUserList(userList, options, isLivechatEnabledWhenAgentIdle) {\n\t\t// TODO:: Create class Agent\n\t\tconst username = {\n\t\t\t$in: [].concat(userList),\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline({ username }, isLivechatEnabledWhenAgentIdle);\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetUnavailableAgents() {\n\t\treturn [];\n\t}\n\n\tfindBotAgents(usernameList) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t\t...(usernameList && {\n\t\t\t\tusername: {\n\t\t\t\t\t$in: [].concat(usernameList),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tcountBotAgents(usernameList) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t\t...(usernameList && {\n\t\t\t\tusername: {\n\t\t\t\t\t$in: [].concat(usernameList),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tremoveAllRoomsByUserId(_id) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { __rooms: [] },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomByUserId(_id, rid) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t__rooms: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pull: { __rooms: rid },\n\t\t\t},\n\t\t);\n\t}\n\n\taddRoomByUserId(_id, rid) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t__rooms: { $ne: rid },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: { __rooms: rid },\n\t\t\t},\n\t\t);\n\t}\n\n\taddRoomByUserIds(uids, rid) {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t_id: { $in: uids },\n\t\t\t\t__rooms: { $ne: rid },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$addToSet: { __rooms: rid },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveRoomByRoomIds(rids) {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t__rooms: { $in: rids },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$pullAll: { __rooms: rids },\n\t\t\t},\n\t\t);\n\t}\n\n\tgetLoginTokensByUserId(userId) {\n\t\tconst query = {\n\t\t\t'services.resume.loginTokens.type': {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: 'personalAccessToken',\n\t\t\t},\n\t\t\t'_id': userId,\n\t\t};\n\n\t\treturn this.find(query, { projection: { 'services.resume.loginTokens': 1 } });\n\t}\n\n\taddPersonalAccessTokenToUser({ userId, loginTokenObject }) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$push: {\n\t\t\t\t\t'services.resume.loginTokens': loginTokenObject,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremovePersonalAccessTokenOfUser({ userId, loginTokenObject }) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.resume.loginTokens': loginTokenObject,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindPersonalAccessTokenByTokenNameAndUserId({ userId, tokenName }) {\n\t\tconst query = {\n\t\t\t'services.resume.loginTokens': {\n\t\t\t\t$elemMatch: { name: tokenName, type: 'personalAccessToken' },\n\t\t\t},\n\t\t\t'_id': userId,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tsetOperator(_id, operator) {\n\t\t// TODO:: Create class Agent\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\toperator,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tasync checkOnlineAgents(agentId) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = queryStatusAgentOnline(agentId && { _id: agentId });\n\n\t\treturn !!(await this.findOne(query));\n\t}\n\n\tfindOnlineAgents(agentId) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = queryStatusAgentOnline(agentId && { _id: agentId });\n\n\t\treturn this.find(query);\n\t}\n\n\tcountOnlineAgents(agentId) {\n\t\t// TODO:: Create class Agent\n\t\tconst query = queryStatusAgentOnline(agentId && { _id: agentId });\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindOneBotAgent() {\n\t\t// TODO:: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneOnlineAgentById(_id, isLivechatEnabledWhenAgentIdle) {\n\t\t// TODO: Create class Agent\n\t\tconst query = queryStatusAgentOnline({ _id }, isLivechatEnabledWhenAgentIdle);\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindAgents() {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tcountAgents() {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\t// 2\n\tasync getNextAgent(ignoreAgentId, extraQuery) {\n\t\t// TODO: Create class Agent\n\t\t// fetch all unavailable agents, and exclude them from the selection\n\t\tconst unavailableAgents = (await this.getUnavailableAgents(null, extraQuery)).map((u) => u.username);\n\t\tconst extraFilters = {\n\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t\t// limit query to remove booked agents\n\t\t\tusername: { $nin: unavailableAgents },\n\t\t};\n\n\t\tconst query = queryStatusAgentOnline(extraFilters);\n\n\t\tconst sort = {\n\t\t\tlivechatCount: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tlivechatCount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst user = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tif (user && user.value) {\n\t\t\treturn {\n\t\t\t\tagentId: user.value._id,\n\t\t\t\tusername: user.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync getNextBotAgent(ignoreAgentId) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\troles: {\n\t\t\t\t$all: ['bot', 'livechat-agent'],\n\t\t\t},\n\t\t\t...(ignoreAgentId && { _id: { $ne: ignoreAgentId } }),\n\t\t};\n\n\t\tconst sort = {\n\t\t\tlivechatCount: 1,\n\t\t\tusername: 1,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$inc: {\n\t\t\t\tlivechatCount: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst user = await this.findOneAndUpdate(query, update, { sort, returnDocument: 'after' });\n\t\tif (user?.value) {\n\t\t\treturn {\n\t\t\t\tagentId: user.value._id,\n\t\t\t\tusername: user.value.username,\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tsetLivechatStatus(userId, status) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: status,\n\t\t\t\tlivechatStatusSystemModified: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmakeAgentUnavailableAndUnsetExtension(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\troles: 'livechat-agent',\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatusLivechat: ILivechatAgentStatus.NOT_AVAILABLE,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLivechatData(userId, data = {}) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlivechat: data,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync closeOffice() {\n\t\t// TODO: Create class Agent\n\t\tconst promises = [];\n\t\tawait this.findAgents().forEach((agent) => promises.push(this.setLivechatStatus(agent._id, 'not-available')));\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync openOffice() {\n\t\t// TODO: Create class Agent\n\t\tconst promises = [];\n\t\tawait this.findAgents().forEach((agent) => promises.push(this.setLivechatStatus(agent._id, 'available')));\n\t\tawait Promise.all(promises);\n\t}\n\n\tgetAgentInfo(agentId, showAgentEmail = false) {\n\t\t// TODO: Create class Agent\n\t\tconst query = {\n\t\t\t_id: agentId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\tname: 1,\n\t\t\t\tusername: 1,\n\t\t\t\tphone: 1,\n\t\t\t\tcustomFields: 1,\n\t\t\t\tstatus: 1,\n\t\t\t\tlivechat: 1,\n\t\t\t\t...(showAgentEmail && { emails: 1 }),\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\troleBaseQuery(userId) {\n\t\treturn { _id: userId };\n\t}\n\n\tsetE2EPublicAndPrivateKeysByUserId(userId, { public_key, private_key }) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'e2e.public_key': public_key,\n\t\t\t\t\t'e2e.private_key': private_key,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync rocketMailUnsubscribe(_id, createdAt) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tcreatedAt: new Date(parseInt(createdAt)),\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'mailer.unsubscribed': true,\n\t\t\t},\n\t\t};\n\t\tconst affectedRows = (await this.updateOne(query, update)).updatedCount;\n\t\treturn affectedRows;\n\t}\n\n\tasync fetchKeysByUserId(userId) {\n\t\tconst user = await this.findOne({ _id: userId }, { projection: { e2e: 1 } });\n\n\t\tif (!user?.e2e?.public_key) {\n\t\t\treturn {};\n\t\t}\n\n\t\treturn {\n\t\t\tpublic_key: user.e2e.public_key,\n\t\t\tprivate_key: user.e2e.private_key,\n\t\t};\n\t}\n\n\tdisable2FAAndSetTempSecretByUserId(userId, tempToken) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\ttempSecret: tempToken,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tenable2FAAndSetSecretAndCodesByUserId(userId, secret, backupCodes) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp.enabled': true,\n\t\t\t\t\t'services.totp.secret': secret,\n\t\t\t\t\t'services.totp.hashedBackup': backupCodes,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\t'services.totp.tempSecret': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdisable2FAByUserId(userId) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdate2FABackupCodesByUserId(userId, backupCodes) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.totp.hashedBackup': backupCodes,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tenableEmail2FAByUserId(userId) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.email2fa': {\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tdisableEmail2FAByUserId(userId) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: userId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.email2fa': {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindByIdsWithPublicE2EKey(ids, options) {\n\t\tconst query = {\n\t\t\t'_id': {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t'e2e.public_key': {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tresetE2EKey(userId) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\te2e: '',\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveExpiredEmailCodeOfUserId(userId) {\n\t\treturn this.updateOne(\n\t\t\t{ '_id': userId, 'services.emailCode.expire': { $lt: new Date() } },\n\t\t\t{\n\t\t\t\t$unset: { 'services.emailCode': 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tremoveEmailCodeOfUserId(userId) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$unset: { 'services.emailCode': 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tincrementInvalidEmailCodeAttempt(userId) {\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$inc: { 'services.emailCode.attempts': 1 },\n\t\t\t},\n\t\t\t{\n\t\t\t\treturnDocument: 'after',\n\t\t\t\tprojection: {\n\t\t\t\t\t'services.emailCode.attempts': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync maxInvalidEmailCodeAttemptsReached(userId, maxAttempts) {\n\t\tconst result = await this.findOne(\n\t\t\t{\n\t\t\t\t'_id': userId,\n\t\t\t\t'services.emailCode.attempts': { $gte: maxAttempts },\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\treturn !!result?._id;\n\t}\n\n\taddEmailCodeByUserId(userId, code, expire) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.emailCode': {\n\t\t\t\t\t\tcode,\n\t\t\t\t\t\texpire,\n\t\t\t\t\t\tattempts: 0,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * @param {IRole['_id'][]} roles the list of role ids\n\t * @param {any} options\n\t */\n\tfindActiveUsersInRoles(roles, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveUsersInRoles(roles, options) {\n\t\troles = [].concat(roles);\n\n\t\tconst query = {\n\t\t\troles: { $in: roles },\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.col.countDocuments(query, options);\n\t}\n\n\tfindOneByUsernameAndServiceNameIgnoringCase(username, userId, serviceName, options) {\n\t\tif (typeof username === 'string') {\n\t\t\tusername = new RegExp(`^${escapeRegExp(username)}$`, 'i');\n\t\t}\n\n\t\tconst query = { username, [`services.${serviceName}.id`]: userId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByEmailAddressAndServiceNameIgnoringCase(emailAddress, userId, serviceName, options) {\n\t\tconst query = {\n\t\t\t'emails.address': String(emailAddress).trim(),\n\t\t\t[`services.${serviceName}.id`]: userId,\n\t\t};\n\n\t\treturn this.findOne(query, {\n\t\t\tcollation: { locale: 'en', strength: 2 }, // Case insensitive\n\t\t\t...options,\n\t\t});\n\t}\n\n\tfindOneByEmailAddress(emailAddress, options) {\n\t\tconst query = { 'emails.address': String(emailAddress).trim() };\n\n\t\treturn this.findOne(query, {\n\t\t\tcollation: { locale: 'en', strength: 2 }, // Case insensitive\n\t\t\t...options,\n\t\t});\n\t}\n\n\tfindOneWithoutLDAPByEmailAddress(emailAddress, options) {\n\t\tconst query = {\n\t\t\t'email.address': emailAddress.trim().toLowerCase(),\n\t\t\t'services.ldap': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneAdmin(userId, options) {\n\t\tconst query = { roles: { $in: ['admin'] }, _id: userId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndLoginToken(_id, token, options) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'services.resume.loginTokens.hashedToken': token,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneById(userId, options = {}) {\n\t\tconst query = { _id: userId };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneActiveById(userId, options) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t\tactive: true,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdOrUsername(idOrUsername, options) {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: idOrUsername,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tusername: idOrUsername,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByRolesAndType(roles, type, options) {\n\t\tconst query = { roles, type };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindNotOfflineByIds(users, options) {\n\t\tconst query = {\n\t\t\t_id: { $in: users },\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersNotOffline(options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountUsersNotOffline(options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query, options);\n\t}\n\n\tfindNotIdUpdatedFrom(uid, from, options) {\n\t\tconst query = {\n\t\t\t_id: { $ne: uid },\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\t_updatedAt: { $gte: from },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findByRoomId(rid, options) {\n\t\tconst data = (await Subscriptions.findByRoomId(rid).toArray()).map((item) => item.u._id);\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsername(username, options) {\n\t\tconst query = { username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsernames(usernames, options) {\n\t\tconst query = { username: { $in: usernames } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsernamesIgnoringCase(usernames, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$in: usernames.filter(Boolean).map((u) => new RegExp(`^${escapeRegExp(u)}$`, 'i')),\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindActiveByUserIds(ids, options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\ttype: { $nin: ['app'] },\n\t\t\t\t_id: { $in: ids },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindActiveLocalGuests(idExceptions = [], options = {}) {\n\t\tconst query = {\n\t\t\tactive: true,\n\t\t\ttype: { $nin: ['app'] },\n\t\t\troles: {\n\t\t\t\t$eq: 'guest',\n\t\t\t\t$size: 1,\n\t\t\t},\n\t\t\tisRemote: { $ne: true },\n\t\t};\n\n\t\tif (idExceptions) {\n\t\t\tif (!Array.isArray(idExceptions)) {\n\t\t\t\tidExceptions = [idExceptions];\n\t\t\t}\n\n\t\t\tquery._id = { $nin: idExceptions };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveLocalGuests(idExceptions = []) {\n\t\tconst query = {\n\t\t\tactive: true,\n\t\t\ttype: { $nin: ['app'] },\n\t\t\troles: {\n\t\t\t\t$eq: 'guest',\n\t\t\t\t$size: 1,\n\t\t\t},\n\t\t\tisRemote: { $ne: true },\n\t\t};\n\n\t\tif (idExceptions) {\n\t\t\tif (!Array.isArray(idExceptions)) {\n\t\t\t\tidExceptions = [idExceptions];\n\t\t\t}\n\n\t\t\tquery._id = { $nin: idExceptions };\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\t// 4\n\tfindUsersByNameOrUsername(nameOrUsername, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\n\t\t\t$or: [{ name: nameOrUsername }, { username: nameOrUsername }],\n\n\t\t\ttype: {\n\t\t\t\t$in: ['user'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{ name: usernameNameOrEmailAddress },\n\t\t\t\t{ username: usernameNameOrEmailAddress },\n\t\t\t\t{ 'emails.address': usernameNameOrEmailAddress },\n\t\t\t],\n\t\t\ttype: {\n\t\t\t\t$in: ['user', 'bot'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindCrowdUsers(options) {\n\t\tconst query = { crowd: true };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync getLastLogin(options = { projection: { _id: 0, lastLogin: 1 } }) {\n\t\toptions.sort = { lastLogin: -1 };\n\t\tconst user = await this.findOne({}, options);\n\t\treturn user?.lastLogin;\n\t}\n\n\tfindUsersByUsernames(usernames, options) {\n\t\tconst query = {\n\t\t\tusername: {\n\t\t\t\t$in: usernames,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithUsernameByIds(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindUsersWithUsernameByIdsNotOffline(ids, options) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\t$exists: 1,\n\t\t\t},\n\t\t\tstatus: {\n\t\t\t\t$in: ['online', 'away', 'busy'],\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\t/**\n\t * @param {import('mongodb').Filter<import('@rocket.chat/core-typings').IStats>} projection\n\t */\n\tgetOldest(optionsParams) {\n\t\tconst query = {\n\t\t\t_id: {\n\t\t\t\t$ne: 'rocket.cat',\n\t\t\t},\n\t\t};\n\n\t\tconst options = {\n\t\t\t...optionsParams,\n\t\t\tsort: {\n\t\t\t\tcreatedAt: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcountRemote(options = {}) {\n\t\treturn this.col.countDocuments({ isRemote: true }, options);\n\t}\n\n\tfindActiveRemote(options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tisRemote: true,\n\t\t\t\troles: { $ne: ['guest'] },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindActiveFederated(options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tactive: true,\n\t\t\t\tfederated: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tgetSAMLByIdAndSAMLProvider(_id, provider) {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t'services.saml.provider': provider,\n\t\t\t},\n\t\t\t{\n\t\t\t\t'services.saml': 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindBySAMLNameIdOrIdpSession(nameID, idpSession) {\n\t\treturn this.find({\n\t\t\t$or: [{ 'services.saml.nameID': nameID }, { 'services.saml.idpSession': idpSession }],\n\t\t});\n\t}\n\n\tcountBySAMLNameIdOrIdpSession(nameID, idpSession) {\n\t\treturn this.col.countDocuments({\n\t\t\t$or: [{ 'services.saml.nameID': nameID }, { 'services.saml.idpSession': idpSession }],\n\t\t});\n\t}\n\n\tfindBySAMLInResponseTo(inResponseTo) {\n\t\treturn this.find({\n\t\t\t'services.saml.inResponseTo': inResponseTo,\n\t\t});\n\t}\n\n\tfindOneByFreeSwitchExtension(freeSwitchExtension, options = {}) {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tfreeSwitchExtension,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindAssignedFreeSwitchExtensions() {\n\t\treturn this.findUsersWithAssignedFreeSwitchExtensions({\n\t\t\tprojection: {\n\t\t\t\tfreeSwitchExtension: 1,\n\t\t\t},\n\t\t}).map(({ freeSwitchExtension }) => freeSwitchExtension);\n\t}\n\n\tfindUsersWithAssignedFreeSwitchExtensions(options = {}) {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tfreeSwitchExtension: {\n\t\t\t\t\t$exists: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\t// UPDATE\n\taddImportIds(_id, importIds) {\n\t\timportIds = [].concat(importIds);\n\n\t\tconst query = { _id };\n\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: importIds,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateInviteToken(_id, inviteToken) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tinviteToken,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tupdateLastLoginById(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastLogin: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\taddPasswordToHistory(_id, password, passwordHistoryAmount) {\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\t'services.passwordHistory': {\n\t\t\t\t\t$each: [password],\n\t\t\t\t\t$slice: -Number(passwordHistoryAmount),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetServiceId(_id, serviceName, serviceId) {\n\t\tconst update = { $set: {} };\n\n\t\tconst serviceIdKey = `services.${serviceName}.id`;\n\t\tupdate.$set[serviceIdKey] = serviceId;\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetUsername(_id, username) {\n\t\tconst update = { $set: { username } };\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetEmail(_id, email) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\temails: [\n\t\t\t\t\t{\n\t\t\t\t\t\taddress: email,\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\t// 5\n\tsetEmailVerified(_id, email) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\temails: {\n\t\t\t\t$elemMatch: {\n\t\t\t\t\taddress: email,\n\t\t\t\t\tverified: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'emails.$.verified': true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetName(_id, name) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetName(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetCustomFields(_id, fields) {\n\t\tconst values = {};\n\t\tObject.keys(fields).forEach((key) => {\n\t\t\tvalues[`customFields.${key}`] = fields[key];\n\t\t});\n\n\t\tconst update = { $set: values };\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetAvatarData(_id, origin, etag) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetAvatarData(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t\tavatarETag: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetUserActive(_id, active) {\n\t\tif (active == null) {\n\t\t\tactive = true;\n\t\t}\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetAllUsersActive(active) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({}, update);\n\t}\n\n\t/**\n\t * @param latestLastLoginDate\n\t * @param {IRole['_id']} role the role id\n\t * @param {boolean} active\n\t */\n\tsetActiveNotLoggedInAfterWithRole(latestLastLoginDate, role = 'user', active = false) {\n\t\tconst neverActive = { lastLogin: { $exists: 0 }, createdAt: { $lte: latestLastLoginDate } };\n\t\tconst idleTooLong = { lastLogin: { $lte: latestLastLoginDate } };\n\n\t\tconst query = {\n\t\t\t$or: [neverActive, idleTooLong],\n\t\t\tactive: true,\n\t\t\troles: role,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tactive,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tunsetRequirePasswordChange(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\trequirePasswordChange: true,\n\t\t\t\trequirePasswordChangeReason: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tresetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t'services.password': 1,\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\trequirePasswordChange,\n\t\t\t\trequirePasswordChangeReason,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetLanguage(_id, language) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlanguage,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetProfile(_id, profile) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'settings.profile': profile,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetBio(_id, bio = '') {\n\t\tconst update = {\n\t\t\t...(bio.trim()\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tbio,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tbio: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t};\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetNickname(_id, nickname = '') {\n\t\tconst update = {\n\t\t\t...(nickname.trim()\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tnickname,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tnickname: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t};\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tclearSettings(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsettings: {},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetPreferences(_id, preferences) {\n\t\tconst settingsObject = Object.assign(\n\t\t\t{},\n\t\t\t...Object.keys(preferences).map((key) => ({\n\t\t\t\t[`settings.preferences.${key}`]: preferences[key],\n\t\t\t})),\n\t\t);\n\n\t\tconst update = {\n\t\t\t$set: settingsObject,\n\t\t};\n\t\tif (parseInt(preferences.clockMode) === 0) {\n\t\t\tdelete update.$set['settings.preferences.clockMode'];\n\t\t\tupdate.$unset = { 'settings.preferences.clockMode': 1 };\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetTwoFactorAuthorizationHashAndUntilForUserIdAndToken(_id, token, hash, until) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\t'services.resume.loginTokens.hashedToken': token,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.resume.loginTokens.$.twoFactorAuthorizedHash': hash,\n\t\t\t\t\t'services.resume.loginTokens.$.twoFactorAuthorizedUntil': until,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetUtcOffset(_id, utcOffset) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tutcOffset: {\n\t\t\t\t$ne: utcOffset,\n\t\t\t},\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveUserById(_id, data) {\n\t\tconst setData = {};\n\t\tconst unsetData = {};\n\n\t\tif (data.name != null) {\n\t\t\tif (data.name.trim()) {\n\t\t\t\tsetData.name = data.name.trim();\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email != null) {\n\t\t\tif (data.email.trim()) {\n\t\t\t\tsetData.emails = [{ address: data.email.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.emails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone != null) {\n\t\t\tif (data.phone.trim()) {\n\t\t\t\tsetData.phone = [{ phoneNumber: data.phone.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {};\n\n\t\tif (setData) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (unsetData) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (update) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetReason(_id, reason) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\treason,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetReason(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\treason: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tasync bannerExistsById(_id, bannerId) {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t[`banners.${bannerId}`]: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn (await this.col.countDocuments(query)) !== 0;\n\t}\n\n\tsetBannerReadById(_id, bannerId) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`banners.${bannerId}.read`]: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveBannerById(_id, bannerId) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t[`banners.${bannerId}`]: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveSamlServiceSession(_id) {\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\t'services.saml.idpSession': '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tupdateDefaultStatus(_id, statusDefault) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\tstatusDefault: { $ne: statusDefault },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatusDefault,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetSamlInResponseTo(_id, inResponseTo) {\n\t\tthis.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'services.saml.inResponseTo': inResponseTo,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync setFreeSwitchExtension(_id, extension) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...(extension ? { $set: { freeSwitchExtension: extension } } : { $unset: { freeSwitchExtension: 1 } }),\n\t\t\t},\n\t\t);\n\t}\n\n\t// INSERT\n\tcreate(data) {\n\t\tconst user = {\n\t\t\tcreatedAt: new Date(),\n\t\t\tavatarOrigin: 'none',\n\t\t};\n\n\t\tObject.assign(user, data);\n\n\t\treturn this.insertOne(user);\n\t}\n\n\t// REMOVE\n\tremoveById(_id) {\n\t\treturn this.deleteOne({ _id });\n\t}\n\n\tremoveLivechatData(userId) {\n\t\tconst query = {\n\t\t\t_id: userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tlivechat: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t/*\n\t\tFind users to send a message by email if:\n\t\t- he is not online\n\t\t- has a verified email\n\t\t- has not disabled email notifications\n\t\t- `active` is equal to true (false means they were deactivated and can't login)\n\t*/\n\tgetUsersToSendOfflineEmail(usersIds) {\n\t\tconst query = {\n\t\t\t'_id': {\n\t\t\t\t$in: usersIds,\n\t\t\t},\n\t\t\t'active': true,\n\t\t\t'status': 'offline',\n\t\t\t'statusConnection': {\n\t\t\t\t$ne: 'online',\n\t\t\t},\n\t\t\t'emails.verified': true,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\t'name': 1,\n\t\t\t\t'username': 1,\n\t\t\t\t'emails': 1,\n\t\t\t\t'settings.preferences.emailNotificationMode': 1,\n\t\t\t\t'language': 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountActiveUsersByService(serviceName, options) {\n\t\tconst query = {\n\t\t\tactive: true,\n\t\t\ttype: { $nin: ['app'] },\n\t\t\troles: { $ne: ['guest'] },\n\t\t\t[`services.${serviceName}`]: { $exists: true },\n\t\t};\n\n\t\treturn this.col.countDocuments(query, options);\n\t}\n\n\t// here\n\tgetActiveLocalUserCount() {\n\t\treturn Promise.all([\n\t\t\t// Count all active users (fast based on index)\n\t\t\tthis.col.countDocuments({\n\t\t\t\tactive: true,\n\t\t\t}),\n\t\t\t// Count all active that are guests, apps, bots or federated\n\t\t\t// Fast based on indexes, usually based on guest index as is usually small\n\t\t\tthis.col.countDocuments({\n\t\t\t\tactive: true,\n\t\t\t\t$or: [{ roles: ['guest'] }, { type: { $in: ['app', 'bot'] } }, { federated: true }, { isRemote: true }],\n\t\t\t}),\n\t\t\t// Get all active and remove the guests, apps, bots and federated\n\t\t]).then((results) => results.reduce((a, b) => a - b));\n\t}\n\n\tgetActiveLocalGuestCount(idExceptions = []) {\n\t\treturn this.countActiveLocalGuests(idExceptions);\n\t}\n\n\tremoveOlderResumeTokensByUserId(userId, fromDate) {\n\t\tthis.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$pull: {\n\t\t\t\t\t'services.resume.loginTokens': {\n\t\t\t\t\t\twhen: { $lt: fromDate },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindAllUsersWithPendingAvatar() {\n\t\tconst query = {\n\t\t\t_pendingAvatarUrl: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\t_pendingAvatarUrl: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountAllUsersWithPendingAvatar() {\n\t\tconst query = {\n\t\t\t_pendingAvatarUrl: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tupdateCustomFieldsById(userId, customFields) {\n\t\treturn this.updateOne(\n\t\t\t{ _id: userId },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tcustomFields,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcountRoomMembers(roomId) {\n\t\treturn this.col.countDocuments({ __rooms: roomId, active: true });\n\t}\n\n\tremoveAgent(_id) {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\toperator: false,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tlivechat: 1,\n\t\t\t\tstatusLivechat: 1,\n\t\t\t\textension: 1,\n\t\t\t\topenBusinessHours: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tcountByRole(role) {\n\t\treturn this.col.countDocuments({ roles: role });\n\t}\n\n\tupdateLivechatStatusByAgentIds(userIds, status) {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t_id: { $in: userIds },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatusLivechat: status,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e74c2a6d8908c1e7bb542bf17c5d8d1a6b3b3da7"}
