{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/federation/server/endpoints/requestFromLatest.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/federation/server/endpoints/requestFromLatest.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/federation/server/endpoints/requestFromLatest.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/federation/server/endpoints/requestFromLatest.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/federation/server/endpoints/requestFromLatest.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let FederationRoomEvents;\n    module.link(\"@rocket.chat/models\", {\n      FederationRoomEvents(v) {\n        FederationRoomEvents = v;\n      }\n    }, 0);\n    let EJSON;\n    module.link(\"ejson\", {\n      default(v) {\n        EJSON = v;\n      }\n    }, 1);\n    let API;\n    module.link(\"../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 2);\n    let dispatchEvents;\n    module.link(\"../handler\", {\n      dispatchEvents(v) {\n        dispatchEvents = v;\n      }\n    }, 3);\n    let decryptIfNeeded;\n    module.link(\"../lib/crypt\", {\n      decryptIfNeeded(v) {\n        decryptIfNeeded = v;\n      }\n    }, 4);\n    let isFederationEnabled;\n    module.link(\"../lib/isFederationEnabled\", {\n      isFederationEnabled(v) {\n        isFederationEnabled = v;\n      }\n    }, 5);\n    let serverLogger;\n    module.link(\"../lib/logger\", {\n      serverLogger(v) {\n        serverLogger = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('federation.events.requestFromLatest', {\n      authRequired: false\n    }, {\n      async post() {\n        if (!isFederationEnabled()) {\n          return API.v1.failure('Federation not enabled');\n        }\n\n        //\n        // Decrypt the payload if needed\n        let payload;\n        try {\n          payload = await decryptIfNeeded(this.request, this.bodyParams);\n        } catch (err) {\n          return API.v1.failure('Could not decrypt payload');\n        }\n        const {\n          fromDomain,\n          contextType,\n          contextQuery,\n          latestEventIds\n        } = EJSON.fromJSONValue(payload);\n        serverLogger.debug({\n          msg: 'federation.events.requestFromLatest',\n          contextType,\n          contextQuery,\n          latestEventIds\n        });\n        let EventsModel;\n\n        // Define the model for the context\n        switch (contextType) {\n          case 'room':\n            EventsModel = FederationRoomEvents;\n            break;\n        }\n        let missingEvents = [];\n        if (latestEventIds.length) {\n          // Get the oldest event from the latestEventIds\n          const oldestEvent = await EventsModel.findOne({\n            _id: {\n              $in: latestEventIds\n            }\n          }, {\n            $sort: {\n              timestamp: 1\n            }\n          });\n          if (!oldestEvent) {\n            return;\n          }\n\n          // Get all the missing events on this context, after the oldest one\n          missingEvents = await EventsModel.find({\n            _id: {\n              $nin: latestEventIds\n            },\n            context: contextQuery,\n            timestamp: {\n              $gte: oldestEvent.timestamp\n            }\n          }, {\n            sort: {\n              timestamp: 1\n            }\n          }).toArray();\n        } else {\n          // If there are no latest events, send all of them\n          missingEvents = await EventsModel.find({\n            context: contextQuery\n          }, {\n            sort: {\n              timestamp: 1\n            }\n          }).toArray();\n        }\n\n        // Dispatch all the events, on the same request\n        await dispatchEvents([fromDomain], missingEvents);\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["FederationRoomEvents","module","link","v","EJSON","default","API","dispatchEvents","decryptIfNeeded","isFederationEnabled","serverLogger","__reifyWaitForDeps__","v1","addRoute","authRequired","post","failure","payload","request","bodyParams","err","fromDomain","contextType","contextQuery","latestEventIds","fromJSONValue","debug","msg","EventsModel","missingEvents","length","oldestEvent","findOne","_id","$in","$sort","timestamp","find","$nin","context","$gte","sort","toArray","success","__reify_async_result__","_reifyError","self","async"],"sources":["app/federation/server/endpoints/requestFromLatest.js"],"sourcesContent":["import { FederationRoomEvents } from '@rocket.chat/models';\nimport EJSON from 'ejson';\n\nimport { API } from '../../../api/server';\nimport { dispatchEvents } from '../handler';\nimport { decryptIfNeeded } from '../lib/crypt';\nimport { isFederationEnabled } from '../lib/isFederationEnabled';\nimport { serverLogger } from '../lib/logger';\n\nAPI.v1.addRoute(\n\t'federation.events.requestFromLatest',\n\t{ authRequired: false },\n\t{\n\t\tasync post() {\n\t\t\tif (!isFederationEnabled()) {\n\t\t\t\treturn API.v1.failure('Federation not enabled');\n\t\t\t}\n\n\t\t\t//\n\t\t\t// Decrypt the payload if needed\n\t\t\tlet payload;\n\n\t\t\ttry {\n\t\t\t\tpayload = await decryptIfNeeded(this.request, this.bodyParams);\n\t\t\t} catch (err) {\n\t\t\t\treturn API.v1.failure('Could not decrypt payload');\n\t\t\t}\n\n\t\t\tconst { fromDomain, contextType, contextQuery, latestEventIds } = EJSON.fromJSONValue(payload);\n\n\t\t\tserverLogger.debug({\n\t\t\t\tmsg: 'federation.events.requestFromLatest',\n\t\t\t\tcontextType,\n\t\t\t\tcontextQuery,\n\t\t\t\tlatestEventIds,\n\t\t\t});\n\n\t\t\tlet EventsModel;\n\n\t\t\t// Define the model for the context\n\t\t\tswitch (contextType) {\n\t\t\t\tcase 'room':\n\t\t\t\t\tEventsModel = FederationRoomEvents;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet missingEvents = [];\n\n\t\t\tif (latestEventIds.length) {\n\t\t\t\t// Get the oldest event from the latestEventIds\n\t\t\t\tconst oldestEvent = await EventsModel.findOne({ _id: { $in: latestEventIds } }, { $sort: { timestamp: 1 } });\n\n\t\t\t\tif (!oldestEvent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Get all the missing events on this context, after the oldest one\n\t\t\t\tmissingEvents = await EventsModel.find(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: { $nin: latestEventIds },\n\t\t\t\t\t\tcontext: contextQuery,\n\t\t\t\t\t\ttimestamp: { $gte: oldestEvent.timestamp },\n\t\t\t\t\t},\n\t\t\t\t\t{ sort: { timestamp: 1 } },\n\t\t\t\t).toArray();\n\t\t\t} else {\n\t\t\t\t// If there are no latest events, send all of them\n\t\t\t\tmissingEvents = await EventsModel.find({ context: contextQuery }, { sort: { timestamp: 1 } }).toArray();\n\t\t\t}\n\n\t\t\t// Dispatch all the events, on the same request\n\t\t\tawait dispatchEvents([fromDomain], missingEvents);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"dbd3f5f075f71c69951fa6077f1daf74341fe396"}
