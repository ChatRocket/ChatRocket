{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/startup/rateLimiter.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/startup/rateLimiter.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/startup/rateLimiter.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/startup/rateLimiter.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/startup/rateLimiter.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let DDPRateLimiter;\n    module.link(\"meteor/ddp-rate-limiter\", {\n      DDPRateLimiter(v) {\n        DDPRateLimiter = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let RateLimiter;\n    module.link(\"meteor/rate-limit\", {\n      RateLimiter(v) {\n        RateLimiter = v;\n      }\n    }, 3);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 4);\n    let sleep;\n    module.link(\"../../../../lib/utils/sleep\", {\n      sleep(v) {\n        sleep = v;\n      }\n    }, 5);\n    let metrics;\n    module.link(\"../../../metrics/server\", {\n      metrics(v) {\n        metrics = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('RateLimiter');\n    const slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\n    const rateLimiterConsoleLog = _ref => {\n      let {\n        msg,\n        reply,\n        input\n      } = _ref;\n      console.warn('DDP RATE LIMIT:', msg);\n      console.warn(JSON.stringify({\n        reply,\n        input\n      }, null, 2));\n    };\n    const rateLimiterLogger = _ref2 => {\n      let {\n        msg,\n        reply,\n        input\n      } = _ref2;\n      return logger.info({\n        msg,\n        reply,\n        input\n      });\n    };\n    const rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\n\n    // Get initial set of names already registered for rules\n    const names = new Set(Object.values(DDPRateLimiter.printRules()).map(rule => rule._matchers).filter(match => typeof match.name === 'string').map(match => match.name));\n\n    // Override the addRule to save new names added after this point\n    const {\n      addRule\n    } = DDPRateLimiter;\n    DDPRateLimiter.addRule = (matcher, calls, time, callback) => {\n      if (matcher && typeof matcher.name === 'string') {\n        names.add(matcher.name);\n      }\n      return addRule.call(DDPRateLimiter, matcher, calls, time, callback);\n    };\n    const {\n      _increment\n    } = DDPRateLimiter;\n    DDPRateLimiter._increment = function (input) {\n      const session = Meteor.server.sessions.get(input.connectionId);\n      input.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n      return _increment.call(DDPRateLimiter, input);\n    };\n\n    // Need to override the meteor's code duo to a problem with the callback reply\n    // being shared among all matchs\n    RateLimiter.prototype.check = function (input) {\n      // ==== BEGIN OVERRIDE ====\n      const session = Meteor.server.sessions.get(input.connectionId);\n      input.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n      // ==== END OVERRIDE ====\n\n      const self = this;\n      const reply = {\n        allowed: true,\n        timeToReset: 0,\n        numInvocationsLeft: Infinity\n      };\n      const matchedRules = self._findAllMatchingRules(input);\n      _.each(matchedRules, rule => {\n        // ==== BEGIN OVERRIDE ====\n        const callbackReply = {\n          allowed: true,\n          timeToReset: 0,\n          numInvocationsLeft: Infinity\n        };\n        // ==== END OVERRIDE ====\n\n        const ruleResult = rule.apply(input);\n        let numInvocations = rule.counters[ruleResult.key];\n        if (ruleResult.timeToNextReset < 0) {\n          // Reset all the counters since the rule has reset\n          rule.resetCounter();\n          ruleResult.timeSinceLastReset = new Date().getTime() - rule._lastResetTime;\n          ruleResult.timeToNextReset = rule.options.intervalTime;\n          numInvocations = 0;\n        }\n        if (numInvocations > rule.options.numRequestsAllowed) {\n          // Only update timeToReset if the new time would be longer than the\n          // previously set time. This is to ensure that if this input triggers\n          // multiple rules, we return the longest period of time until they can\n          // successfully make another call\n          if (reply.timeToReset < ruleResult.timeToNextReset) {\n            reply.timeToReset = ruleResult.timeToNextReset;\n          }\n          reply.allowed = false;\n          reply.numInvocationsLeft = 0;\n\n          // ==== BEGIN OVERRIDE ====\n          callbackReply.timeToReset = ruleResult.timeToNextReset;\n          callbackReply.allowed = false;\n          callbackReply.numInvocationsLeft = 0;\n          callbackReply.numInvocationsExceeded = numInvocations - rule.options.numRequestsAllowed;\n          rule._executeCallback(callbackReply, input);\n          // ==== END OVERRIDE ====\n        } else {\n          // If this is an allowed attempt and we haven't failed on any of the\n          // other rules that match, update the reply field.\n          if (rule.options.numRequestsAllowed - numInvocations < reply.numInvocationsLeft && reply.allowed) {\n            reply.timeToReset = ruleResult.timeToNextReset;\n            reply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n          }\n\n          // ==== BEGIN OVERRIDE ====\n          callbackReply.timeToReset = ruleResult.timeToNextReset;\n          callbackReply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n          rule._executeCallback(callbackReply, input);\n          // ==== END OVERRIDE ====\n        }\n      });\n      return reply;\n    };\n    const checkNameNonStream = name => name && !names.has(name) && !name.startsWith('stream-');\n    const checkNameForStream = name => name && !names.has(name) && name.startsWith('stream-');\n    const ruleIds = {};\n    const callback = (msg, name) => async (reply, input) => {\n      if (reply.allowed === false) {\n        rateLimiterLog({\n          msg,\n          reply,\n          input\n        });\n        metrics.ddpRateLimitExceeded.inc({\n          limit_name: name,\n          user_id: input.userId,\n          client_address: input.clientAddress,\n          type: input.type,\n          name: input.name,\n          connection_id: input.connectionId\n        });\n        // sleep before sending the error to slow down next requests\n        if (slowDownRate > 0 && reply.numInvocationsExceeded) {\n          await sleep(slowDownRate * reply.numInvocationsExceeded);\n        }\n        // } else {\n        // \tconsole.log('DDP RATE LIMIT:', message);\n        // \tconsole.log(JSON.stringify({ ...reply, ...input }, null, 2));\n      }\n    };\n    const messages = {\n      IP: 'address',\n      User: 'userId',\n      Connection: 'connectionId',\n      User_By_Method: 'userId per method',\n      Connection_By_Method: 'connectionId per method'\n    };\n    const reconfigureLimit = Meteor.bindEnvironment(function (name, rules) {\n      let factor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      if (ruleIds[name + factor]) {\n        DDPRateLimiter.removeRule(ruleIds[name + factor]);\n      }\n      if (!settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Enabled\"))) {\n        return;\n      }\n      ruleIds[name + factor] = addRule(rules, settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Requests_Allowed\")) * factor, settings.get(\"DDP_Rate_Limit_\".concat(name, \"_Interval_Time\")) * factor, callback(\"limit by \".concat(messages[name]), name));\n    });\n    const configIP = _.debounce(() => {\n      reconfigureLimit('IP', {\n        broadcastAuth: false,\n        clientAddress: clientAddress => clientAddress !== '127.0.0.1'\n      });\n    }, 1000);\n    const configUser = _.debounce(() => {\n      reconfigureLimit('User', {\n        broadcastAuth: false,\n        userId: userId => userId != null\n      });\n    }, 1000);\n    const configConnection = _.debounce(() => {\n      reconfigureLimit('Connection', {\n        broadcastAuth: false,\n        connectionId: () => true\n      });\n    }, 1000);\n    const configUserByMethod = _.debounce(() => {\n      reconfigureLimit('User_By_Method', {\n        broadcastAuth: false,\n        type: () => true,\n        name: checkNameNonStream,\n        userId: userId => userId != null\n      });\n      reconfigureLimit('User_By_Method', {\n        broadcastAuth: false,\n        type: () => true,\n        name: checkNameForStream,\n        userId: userId => userId != null\n      }, 4);\n    }, 1000);\n    const configConnectionByMethod = _.debounce(() => {\n      reconfigureLimit('Connection_By_Method', {\n        broadcastAuth: false,\n        type: () => true,\n        name: checkNameNonStream,\n        connectionId: () => true\n      });\n      reconfigureLimit('Connection_By_Method', {\n        broadcastAuth: false,\n        type: () => true,\n        name: checkNameForStream,\n        connectionId: () => true\n      }, 4);\n    }, 1000);\n    if (!process.env.TEST_MODE) {\n      settings.watchByRegex(/^DDP_Rate_Limit_IP_.+/, configIP);\n      settings.watchByRegex(/^DDP_Rate_Limit_User_[^B].+/, configUser);\n      settings.watchByRegex(/^DDP_Rate_Limit_Connection_[^B].+/, configConnection);\n      settings.watchByRegex(/^DDP_Rate_Limit_User_By_Method_.+/, configUserByMethod);\n      settings.watchByRegex(/^DDP_Rate_Limit_Connection_By_Method_.+/, configConnectionByMethod);\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Logger","module","link","v","DDPRateLimiter","Meteor","RateLimiter","_","default","sleep","metrics","settings","__reifyWaitForDeps__","logger","slowDownRate","parseInt","process","env","RATE_LIMITER_SLOWDOWN_RATE","rateLimiterConsoleLog","_ref","msg","reply","input","console","warn","JSON","stringify","rateLimiterLogger","_ref2","info","rateLimiterLog","String","RATE_LIMITER_LOGGER","names","Set","Object","values","printRules","map","rule","_matchers","filter","match","name","addRule","matcher","calls","time","callback","add","call","_increment","session","server","sessions","get","connectionId","broadcastAuth","connectionHandle","prototype","check","self","allowed","timeToReset","numInvocationsLeft","Infinity","matchedRules","_findAllMatchingRules","each","callbackReply","ruleResult","apply","numInvocations","counters","key","timeToNextReset","resetCounter","timeSinceLastReset","Date","getTime","_lastResetTime","options","intervalTime","numRequestsAllowed","numInvocationsExceeded","_executeCallback","checkNameNonStream","has","startsWith","checkNameForStream","ruleIds","ddpRateLimitExceeded","inc","limit_name","user_id","userId","client_address","clientAddress","type","connection_id","messages","IP","User","Connection","User_By_Method","Connection_By_Method","reconfigureLimit","bindEnvironment","rules","factor","arguments","length","undefined","removeRule","concat","configIP","debounce","configUser","configConnection","configUserByMethod","configConnectionByMethod","TEST_MODE","watchByRegex","__reify_async_result__","_reifyError","async"],"sources":["app/lib/server/startup/rateLimiter.js"],"sourcesContent":["import { Logger } from '@rocket.chat/logger';\nimport { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport { Meteor } from 'meteor/meteor';\nimport { RateLimiter } from 'meteor/rate-limit';\nimport _ from 'underscore';\n\nimport { sleep } from '../../../../lib/utils/sleep';\nimport { metrics } from '../../../metrics/server';\nimport { settings } from '../../../settings/server';\n\nconst logger = new Logger('RateLimiter');\n\nconst slowDownRate = parseInt(process.env.RATE_LIMITER_SLOWDOWN_RATE);\n\nconst rateLimiterConsoleLog = ({ msg, reply, input }) => {\n\tconsole.warn('DDP RATE LIMIT:', msg);\n\tconsole.warn(JSON.stringify({ reply, input }, null, 2));\n};\n\nconst rateLimiterLogger = ({ msg, reply, input }) => logger.info({ msg, reply, input });\n\nconst rateLimiterLog = String(process.env.RATE_LIMITER_LOGGER) === 'console' ? rateLimiterConsoleLog : rateLimiterLogger;\n\n// Get initial set of names already registered for rules\nconst names = new Set(\n\tObject.values(DDPRateLimiter.printRules())\n\t\t.map((rule) => rule._matchers)\n\t\t.filter((match) => typeof match.name === 'string')\n\t\t.map((match) => match.name),\n);\n\n// Override the addRule to save new names added after this point\nconst { addRule } = DDPRateLimiter;\nDDPRateLimiter.addRule = (matcher, calls, time, callback) => {\n\tif (matcher && typeof matcher.name === 'string') {\n\t\tnames.add(matcher.name);\n\t}\n\treturn addRule.call(DDPRateLimiter, matcher, calls, time, callback);\n};\n\nconst { _increment } = DDPRateLimiter;\nDDPRateLimiter._increment = function (input) {\n\tconst session = Meteor.server.sessions.get(input.connectionId);\n\tinput.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n\n\treturn _increment.call(DDPRateLimiter, input);\n};\n\n// Need to override the meteor's code duo to a problem with the callback reply\n// being shared among all matchs\nRateLimiter.prototype.check = function (input) {\n\t// ==== BEGIN OVERRIDE ====\n\tconst session = Meteor.server.sessions.get(input.connectionId);\n\tinput.broadcastAuth = (session && session.connectionHandle && session.connectionHandle.broadcastAuth) === true;\n\t// ==== END OVERRIDE ====\n\n\tconst self = this;\n\tconst reply = {\n\t\tallowed: true,\n\t\ttimeToReset: 0,\n\t\tnumInvocationsLeft: Infinity,\n\t};\n\n\tconst matchedRules = self._findAllMatchingRules(input);\n\t_.each(matchedRules, (rule) => {\n\t\t// ==== BEGIN OVERRIDE ====\n\t\tconst callbackReply = {\n\t\t\tallowed: true,\n\t\t\ttimeToReset: 0,\n\t\t\tnumInvocationsLeft: Infinity,\n\t\t};\n\t\t// ==== END OVERRIDE ====\n\n\t\tconst ruleResult = rule.apply(input);\n\t\tlet numInvocations = rule.counters[ruleResult.key];\n\n\t\tif (ruleResult.timeToNextReset < 0) {\n\t\t\t// Reset all the counters since the rule has reset\n\t\t\trule.resetCounter();\n\t\t\truleResult.timeSinceLastReset = new Date().getTime() - rule._lastResetTime;\n\t\t\truleResult.timeToNextReset = rule.options.intervalTime;\n\t\t\tnumInvocations = 0;\n\t\t}\n\n\t\tif (numInvocations > rule.options.numRequestsAllowed) {\n\t\t\t// Only update timeToReset if the new time would be longer than the\n\t\t\t// previously set time. This is to ensure that if this input triggers\n\t\t\t// multiple rules, we return the longest period of time until they can\n\t\t\t// successfully make another call\n\t\t\tif (reply.timeToReset < ruleResult.timeToNextReset) {\n\t\t\t\treply.timeToReset = ruleResult.timeToNextReset;\n\t\t\t}\n\t\t\treply.allowed = false;\n\t\t\treply.numInvocationsLeft = 0;\n\n\t\t\t// ==== BEGIN OVERRIDE ====\n\t\t\tcallbackReply.timeToReset = ruleResult.timeToNextReset;\n\t\t\tcallbackReply.allowed = false;\n\t\t\tcallbackReply.numInvocationsLeft = 0;\n\t\t\tcallbackReply.numInvocationsExceeded = numInvocations - rule.options.numRequestsAllowed;\n\t\t\trule._executeCallback(callbackReply, input);\n\t\t\t// ==== END OVERRIDE ====\n\t\t} else {\n\t\t\t// If this is an allowed attempt and we haven't failed on any of the\n\t\t\t// other rules that match, update the reply field.\n\t\t\tif (rule.options.numRequestsAllowed - numInvocations < reply.numInvocationsLeft && reply.allowed) {\n\t\t\t\treply.timeToReset = ruleResult.timeToNextReset;\n\t\t\t\treply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n\t\t\t}\n\n\t\t\t// ==== BEGIN OVERRIDE ====\n\t\t\tcallbackReply.timeToReset = ruleResult.timeToNextReset;\n\t\t\tcallbackReply.numInvocationsLeft = rule.options.numRequestsAllowed - numInvocations;\n\t\t\trule._executeCallback(callbackReply, input);\n\t\t\t// ==== END OVERRIDE ====\n\t\t}\n\t});\n\treturn reply;\n};\n\nconst checkNameNonStream = (name) => name && !names.has(name) && !name.startsWith('stream-');\nconst checkNameForStream = (name) => name && !names.has(name) && name.startsWith('stream-');\n\nconst ruleIds = {};\n\nconst callback = (msg, name) => async (reply, input) => {\n\tif (reply.allowed === false) {\n\t\trateLimiterLog({ msg, reply, input });\n\t\tmetrics.ddpRateLimitExceeded.inc({\n\t\t\tlimit_name: name,\n\t\t\tuser_id: input.userId,\n\t\t\tclient_address: input.clientAddress,\n\t\t\ttype: input.type,\n\t\t\tname: input.name,\n\t\t\tconnection_id: input.connectionId,\n\t\t});\n\t\t// sleep before sending the error to slow down next requests\n\t\tif (slowDownRate > 0 && reply.numInvocationsExceeded) {\n\t\t\tawait sleep(slowDownRate * reply.numInvocationsExceeded);\n\t\t}\n\t\t// } else {\n\t\t// \tconsole.log('DDP RATE LIMIT:', message);\n\t\t// \tconsole.log(JSON.stringify({ ...reply, ...input }, null, 2));\n\t}\n};\n\nconst messages = {\n\tIP: 'address',\n\tUser: 'userId',\n\tConnection: 'connectionId',\n\tUser_By_Method: 'userId per method',\n\tConnection_By_Method: 'connectionId per method',\n};\n\nconst reconfigureLimit = Meteor.bindEnvironment((name, rules, factor = 1) => {\n\tif (ruleIds[name + factor]) {\n\t\tDDPRateLimiter.removeRule(ruleIds[name + factor]);\n\t}\n\n\tif (!settings.get(`DDP_Rate_Limit_${name}_Enabled`)) {\n\t\treturn;\n\t}\n\n\truleIds[name + factor] = addRule(\n\t\trules,\n\t\tsettings.get(`DDP_Rate_Limit_${name}_Requests_Allowed`) * factor,\n\t\tsettings.get(`DDP_Rate_Limit_${name}_Interval_Time`) * factor,\n\t\tcallback(`limit by ${messages[name]}`, name),\n\t);\n});\n\nconst configIP = _.debounce(() => {\n\treconfigureLimit('IP', {\n\t\tbroadcastAuth: false,\n\t\tclientAddress: (clientAddress) => clientAddress !== '127.0.0.1',\n\t});\n}, 1000);\n\nconst configUser = _.debounce(() => {\n\treconfigureLimit('User', {\n\t\tbroadcastAuth: false,\n\t\tuserId: (userId) => userId != null,\n\t});\n}, 1000);\n\nconst configConnection = _.debounce(() => {\n\treconfigureLimit('Connection', {\n\t\tbroadcastAuth: false,\n\t\tconnectionId: () => true,\n\t});\n}, 1000);\n\nconst configUserByMethod = _.debounce(() => {\n\treconfigureLimit('User_By_Method', {\n\t\tbroadcastAuth: false,\n\t\ttype: () => true,\n\t\tname: checkNameNonStream,\n\t\tuserId: (userId) => userId != null,\n\t});\n\treconfigureLimit(\n\t\t'User_By_Method',\n\t\t{\n\t\t\tbroadcastAuth: false,\n\t\t\ttype: () => true,\n\t\t\tname: checkNameForStream,\n\t\t\tuserId: (userId) => userId != null,\n\t\t},\n\t\t4,\n\t);\n}, 1000);\n\nconst configConnectionByMethod = _.debounce(() => {\n\treconfigureLimit('Connection_By_Method', {\n\t\tbroadcastAuth: false,\n\t\ttype: () => true,\n\t\tname: checkNameNonStream,\n\t\tconnectionId: () => true,\n\t});\n\treconfigureLimit(\n\t\t'Connection_By_Method',\n\t\t{\n\t\t\tbroadcastAuth: false,\n\t\t\ttype: () => true,\n\t\t\tname: checkNameForStream,\n\t\t\tconnectionId: () => true,\n\t\t},\n\t\t4,\n\t);\n}, 1000);\n\nif (!process.env.TEST_MODE) {\n\tsettings.watchByRegex(/^DDP_Rate_Limit_IP_.+/, configIP);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_User_[^B].+/, configUser);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_Connection_[^B].+/, configConnection);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_User_By_Method_.+/, configUserByMethod);\n\tsettings.watchByRegex(/^DDP_Rate_Limit_Connection_By_Method_.+/, configConnectionByMethod);\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"46f59cd14bfdf843dfdb77da8360da3ddb230441"}
