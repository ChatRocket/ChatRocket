{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/custom-oauth/server/custom_oauth_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/custom-oauth/server/custom_oauth_server.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/custom-oauth/server/custom_oauth_server.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/custom-oauth/server/custom_oauth_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/custom-oauth/server/custom_oauth_server.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      CustomOAuth: () => CustomOAuth\n    });\n    let LDAP;\n    module.link(\"@rocket.chat/core-services\", {\n      LDAP(v) {\n        LDAP = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 3);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 4);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 5);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 6);\n    let OAuth;\n    module.link(\"meteor/oauth\", {\n      OAuth(v) {\n        OAuth = v;\n      }\n    }, 7);\n    let ServiceConfiguration;\n    module.link(\"meteor/service-configuration\", {\n      ServiceConfiguration(v) {\n        ServiceConfiguration = v;\n      }\n    }, 8);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 9);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 10);\n    let isURL;\n    module.link(\"../../../lib/utils/isURL\", {\n      isURL(v) {\n        isURL = v;\n      }\n    }, 11);\n    let notifyOnUserChange;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 12);\n    let registerAccessTokenService;\n    module.link(\"../../lib/server/oauth/oauth\", {\n      registerAccessTokenService(v) {\n        registerAccessTokenService = v;\n      }\n    }, 13);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 14);\n    let normalizers, fromTemplate, renameInvalidProperties;\n    module.link(\"./transform_helpers\", {\n      normalizers(v) {\n        normalizers = v;\n      },\n      fromTemplate(v) {\n        fromTemplate = v;\n      },\n      renameInvalidProperties(v) {\n        renameInvalidProperties = v;\n      }\n    }, 15);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('CustomOAuth');\n    const Services = {};\n    const BeforeUpdateOrCreateUserFromExternalService = [];\n    class CustomOAuth {\n      constructor(name, options) {\n        logger.debug('Init CustomOAuth', name, options);\n        this.name = name;\n        if (!Match.test(this.name, String)) {\n          throw new Meteor.Error('CustomOAuth: Name is required and must be String');\n        }\n        if (Services[this.name]) {\n          Services[this.name].configure(options);\n          return;\n        }\n        Services[this.name] = this;\n        this.configure(options);\n        this.userAgent = 'Meteor';\n        if (Meteor.release) {\n          this.userAgent += \"/\".concat(Meteor.release);\n        }\n        Accounts.oauth.registerService(this.name);\n        this.registerService();\n        this.addHookToProcessUser();\n        this.registerAccessTokenService(this.name, this.accessTokenParam);\n      }\n      configure(options) {\n        if (!Match.test(options, Object)) {\n          throw new Meteor.Error('CustomOAuth: Options is required and must be Object');\n        }\n        if (!Match.test(options.serverURL, String)) {\n          throw new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n        }\n        if (!Match.test(options.tokenPath, String)) {\n          options.tokenPath = '/oauth/token';\n        }\n        if (!Match.test(options.identityPath, String)) {\n          options.identityPath = '/me';\n        }\n        if (!Match.test(options.accessTokenParam, String)) {\n          options.accessTokenParam = 'access_token';\n        }\n        this.serverURL = options.serverURL;\n        this.tokenPath = options.tokenPath;\n        this.identityPath = options.identityPath;\n        this.tokenSentVia = options.tokenSentVia;\n        this.identityTokenSentVia = options.identityTokenSentVia;\n        this.keyField = options.keyField;\n        this.usernameField = (options.usernameField || '').trim();\n        this.emailField = (options.emailField || '').trim();\n        this.nameField = (options.nameField || '').trim();\n        this.avatarField = (options.avatarField || '').trim();\n        this.mergeUsers = options.mergeUsers;\n        this.mergeUsersDistinctServices = options.mergeUsersDistinctServices;\n        this.rolesClaim = options.rolesClaim || 'roles';\n        this.accessTokenParam = options.accessTokenParam;\n        this.channelsAdmin = options.channelsAdmin || 'rocket.cat';\n        if (this.identityTokenSentVia == null || this.identityTokenSentVia === 'default') {\n          this.identityTokenSentVia = this.tokenSentVia;\n        }\n        if (!isURL(this.tokenPath)) {\n          this.tokenPath = this.serverURL + this.tokenPath;\n        }\n        if (!isURL(this.identityPath)) {\n          this.identityPath = this.serverURL + this.identityPath;\n        }\n        if (Match.test(options.addAutopublishFields, Object)) {\n          Accounts.addAutopublishFields(options.addAutopublishFields);\n        }\n      }\n      async getAccessToken(query) {\n        const config = await ServiceConfiguration.configurations.findOneAsync({\n          service: this.name\n        });\n        if (!config) {\n          throw new Accounts.ConfigError();\n        }\n        let response = undefined;\n        const headers = {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'User-Agent': this.userAgent,\n          // http://doc.gitlab.com/ce/api/users.html#Current-user\n          'Accept': 'application/json'\n        };\n        const params = new URLSearchParams({\n          code: query.code,\n          redirect_uri: OAuth._redirectUri(this.name, config),\n          grant_type: 'authorization_code',\n          state: query.state\n        });\n\n        // Only send clientID / secret once on header or payload.\n        if (this.tokenSentVia === 'header') {\n          const b64 = Buffer.from(\"\".concat(config.clientId, \":\").concat(OAuth.openSecret(config.secret))).toString('base64');\n          headers.Authorization = \"Basic \".concat(b64);\n        } else {\n          params.append('client_secret', config.secret);\n          params.append('client_id', config.clientId);\n        }\n        try {\n          const request = await fetch(\"\".concat(this.tokenPath), {\n            method: 'POST',\n            headers,\n            body: params\n          });\n          if (!request.ok) {\n            throw new Error(request.statusText);\n          }\n          response = await request.json();\n        } catch (err) {\n          const error = new Error(\"Failed to complete OAuth handshake with \".concat(this.name, \" at \").concat(this.tokenPath, \". \").concat(err.message));\n          throw _.extend(error, {\n            response: err.response\n          });\n        }\n        if (response.error) {\n          // if the http response was a json object with an error attribute\n          throw new Error(\"Failed to complete OAuth handshake with \".concat(this.name, \" at \").concat(this.tokenPath, \". \").concat(response.error));\n        } else {\n          return response;\n        }\n      }\n      async getIdentity(accessToken) {\n        const params = {};\n        const headers = {\n          'User-Agent': this.userAgent,\n          // http://doc.gitlab.com/ce/api/users.html#Current-user\n          'Accept': 'application/json'\n        };\n        if (this.identityTokenSentVia === 'header') {\n          headers.Authorization = \"Bearer \".concat(accessToken);\n        } else {\n          params[this.accessTokenParam] = accessToken;\n        }\n        try {\n          const request = await fetch(\"\".concat(this.identityPath), {\n            method: 'GET',\n            headers,\n            params\n          });\n          if (!request.ok) {\n            throw new Error(request.statusText);\n          }\n          const response = await request.json();\n          logger.debug({\n            msg: 'Identity response',\n            response\n          });\n          return this.normalizeIdentity(response);\n        } catch (err) {\n          const error = new Error(\"Failed to fetch identity from \".concat(this.name, \" at \").concat(this.identityPath, \". \").concat(err.message));\n          throw _.extend(error, {\n            response: err.response\n          });\n        }\n      }\n      registerService() {\n        const self = this;\n        OAuth.registerService(this.name, 2, null, async query => {\n          const response = await self.getAccessToken(query);\n          const identity = await self.getIdentity(response.access_token, query);\n          const serviceData = {\n            _OAuthCustom: true,\n            serverURL: self.serverURL,\n            accessToken: response.access_token,\n            idToken: response.id_token,\n            expiresAt: +new Date() + 1000 * parseInt(response.expires_in, 10)\n          };\n\n          // only set the token in serviceData if it's there. this ensures\n          // that we don't lose old ones (since we only get this on the first\n          // log in attempt)\n          if (response.refresh_token) {\n            serviceData.refreshToken = response.refresh_token;\n          }\n          _.extend(serviceData, identity);\n          const data = {\n            serviceData,\n            options: {\n              profile: {\n                name: identity.name\n              }\n            }\n          };\n          return data;\n        });\n      }\n      normalizeIdentity(identity) {\n        if (identity) {\n          for (const normalizer of Object.values(normalizers)) {\n            const result = normalizer(identity);\n            if (result) {\n              identity = result;\n            }\n          }\n        }\n        if (this.usernameField) {\n          identity.username = this.getUsername(identity);\n        }\n        if (this.emailField) {\n          identity.email = this.getEmail(identity);\n        }\n        if (this.avatarField) {\n          identity.avatarUrl = this.getAvatarUrl(identity);\n        }\n        if (this.nameField) {\n          identity.name = this.getCustomName(identity);\n        } else {\n          identity.name = this.getName(identity);\n        }\n        return renameInvalidProperties(identity);\n      }\n      retrieveCredential(credentialToken, credentialSecret) {\n        return OAuth.retrieveCredential(credentialToken, credentialSecret);\n      }\n      getUsername(data) {\n        try {\n          const value = fromTemplate(this.usernameField, data);\n          if (!value) {\n            throw new Meteor.Error('field_not_found', \"Username field \\\"\".concat(this.usernameField, \"\\\" not found in data\"), data);\n          }\n          return value;\n        } catch (error) {\n          throw new Error('CustomOAuth: Failed to extract username', error.message);\n        }\n      }\n      getEmail(data) {\n        try {\n          const value = fromTemplate(this.emailField, data);\n          if (!value) {\n            throw new Meteor.Error('field_not_found', \"Email field \\\"\".concat(this.emailField, \"\\\" not found in data\"), data);\n          }\n          return value;\n        } catch (error) {\n          throw new Error('CustomOAuth: Failed to extract email', error.message);\n        }\n      }\n      getCustomName(data) {\n        try {\n          const value = fromTemplate(this.nameField, data);\n          if (!value) {\n            return this.getName(data);\n          }\n          return value;\n        } catch (error) {\n          throw new Error('CustomOAuth: Failed to extract custom name', error.message);\n        }\n      }\n      getAvatarUrl(data) {\n        try {\n          const value = fromTemplate(this.avatarField, data);\n          if (!value) {\n            logger.debug(\"Avatar field \\\"\".concat(this.avatarField, \"\\\" not found in data\"), data);\n          }\n          return value;\n        } catch (error) {\n          throw new Error('CustomOAuth: Failed to extract avatar url', error.message);\n        }\n      }\n      getName(identity) {\n        const name = identity.name || identity.username || identity.nickname || identity.CharacterName || identity.userName || identity.preferred_username || identity.user && identity.user.name;\n        return name;\n      }\n      addHookToProcessUser() {\n        BeforeUpdateOrCreateUserFromExternalService.push(async (serviceName, serviceData /* , options*/) => {\n          if (serviceName !== this.name) {\n            return;\n          }\n          if (serviceData.username) {\n            var _user$emails;\n            let user = undefined;\n            if (this.keyField === 'username') {\n              user = this.mergeUsersDistinctServices ? await Users.findOneByUsernameIgnoringCase(serviceData.username) : await Users.findOneByUsernameAndServiceNameIgnoringCase(serviceData.username, serviceData.id, serviceName);\n            } else if (this.keyField === 'email') {\n              user = this.mergeUsersDistinctServices ? await Users.findOneByEmailAddress(serviceData.email) : await Users.findOneByEmailAddressAndServiceNameIgnoringCase(serviceData.email, serviceData.id, serviceName);\n            }\n            if (!user) {\n              return;\n            }\n            await callbacks.run('afterProcessOAuthUser', {\n              serviceName,\n              serviceData,\n              user\n            });\n\n            // User already created or merged and has identical name as before\n            if (user.services && user.services[serviceName] && user.services[serviceName].id === serviceData.id && user.name === serviceData.name && (this.keyField === 'email' || !serviceData.email || (_user$emails = user.emails) !== null && _user$emails !== void 0 && _user$emails.find(_ref => {\n              let {\n                address\n              } = _ref;\n              return address === serviceData.email;\n            }))) {\n              return;\n            }\n            if (this.mergeUsers !== true) {\n              throw new Meteor.Error('CustomOAuth', \"User with username \".concat(user.username, \" already exists\"));\n            }\n            const serviceIdKey = \"services.\".concat(serviceName, \".id\");\n            const update = {\n              $set: _objectSpread(_objectSpread({\n                name: serviceData.name\n              }, this.keyField === 'username' && serviceData.email && {\n                emails: [{\n                  address: serviceData.email,\n                  verified: true\n                }]\n              }), {}, {\n                [serviceIdKey]: serviceData.id\n              })\n            };\n            await Users.update({\n              _id: user._id\n            }, update);\n            void notifyOnUserChange({\n              clientAction: 'updated',\n              id: user._id,\n              diff: update\n            });\n          }\n        });\n        Accounts.validateNewUser(user => {\n          if (!user.services || !user.services[this.name] || !user.services[this.name].id) {\n            return true;\n          }\n          if (this.usernameField) {\n            user.username = user.services[this.name].username;\n          }\n          if (this.emailField) {\n            user.email = user.services[this.name].email;\n          }\n          if (this.nameField) {\n            user.name = user.services[this.name].name;\n          }\n          return true;\n        });\n      }\n      registerAccessTokenService(name) {\n        const self = this;\n        const whitelisted = ['id', 'email', 'username', 'name', this.rolesClaim];\n        registerAccessTokenService(name, async options => {\n          check(options, Match.ObjectIncluding({\n            accessToken: String,\n            expiresIn: Match.Integer\n          }));\n          const identity = await self.getIdentity(options.accessToken);\n          const serviceData = {\n            accessToken: options.accessToken,\n            expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10)\n          };\n          const fields = _.pick(identity, whitelisted);\n          _.extend(serviceData, fields);\n          return {\n            serviceData,\n            options: {\n              profile: {\n                name: identity.name\n              }\n            }\n          };\n        });\n      }\n    }\n    const {\n      updateOrCreateUserFromExternalService\n    } = Accounts;\n    Accounts.updateOrCreateUserFromExternalService = async function () {\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      try {\n        for (var _iterator = _asyncIterator(BeforeUpdateOrCreateUserFromExternalService), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const hook = _step.value;\n          {\n            await hook.apply(this, args);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      const [serviceName, serviceData] = args;\n      const user = updateOrCreateUserFromExternalService.apply(this, args);\n      const fullUser = await Users.findOneById(user.userId);\n      if (settings.get('LDAP_Update_Data_On_OAuth_Login')) {\n        await LDAP.loginAuthenticatedUserRequest(fullUser.username);\n      }\n      await callbacks.run('afterValidateNewOAuthUser', {\n        identity: serviceData,\n        serviceName,\n        user: fullUser\n      });\n      return user;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","CustomOAuth","LDAP","Logger","Users","fetch","serverFetch","Accounts","Match","check","Meteor","OAuth","ServiceConfiguration","_","callbacks","isURL","notifyOnUserChange","registerAccessTokenService","settings","normalizers","fromTemplate","renameInvalidProperties","__reifyWaitForDeps__","logger","Services","BeforeUpdateOrCreateUserFromExternalService","constructor","name","options","debug","test","String","Error","configure","userAgent","release","concat","oauth","registerService","addHookToProcessUser","accessTokenParam","Object","serverURL","tokenPath","identityPath","tokenSentVia","identityTokenSentVia","keyField","usernameField","trim","emailField","nameField","avatarField","mergeUsers","mergeUsersDistinctServices","rolesClaim","channelsAdmin","addAutopublishFields","getAccessToken","query","config","configurations","findOneAsync","service","ConfigError","response","undefined","headers","params","URLSearchParams","code","redirect_uri","_redirectUri","grant_type","state","b64","Buffer","from","clientId","openSecret","secret","toString","Authorization","append","request","method","body","ok","statusText","json","err","error","message","extend","getIdentity","accessToken","msg","normalizeIdentity","self","identity","access_token","serviceData","_OAuthCustom","idToken","id_token","expiresAt","Date","parseInt","expires_in","refresh_token","refreshToken","data","profile","normalizer","values","result","username","getUsername","email","getEmail","avatarUrl","getAvatarUrl","getCustomName","getName","retrieveCredential","credentialToken","credentialSecret","value","nickname","CharacterName","userName","preferred_username","user","push","serviceName","_user$emails","findOneByUsernameIgnoringCase","findOneByUsernameAndServiceNameIgnoringCase","id","findOneByEmailAddress","findOneByEmailAddressAndServiceNameIgnoringCase","run","services","emails","find","_ref","address","serviceIdKey","update","$set","verified","_id","clientAction","diff","validateNewUser","whitelisted","ObjectIncluding","expiresIn","Integer","fields","pick","updateOrCreateUserFromExternalService","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_len","arguments","length","args","Array","_key","_iterator","_step","next","done","hook","apply","return","fullUser","findOneById","userId","get","loginAuthenticatedUserRequest","__reify_async_result__","_reifyError","async"],"sources":["app/custom-oauth/server/custom_oauth_server.js"],"sourcesContent":["import { LDAP } from '@rocket.chat/core-services';\nimport { Logger } from '@rocket.chat/logger';\nimport { Users } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { OAuth } from 'meteor/oauth';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport _ from 'underscore';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isURL } from '../../../lib/utils/isURL';\nimport { notifyOnUserChange } from '../../lib/server/lib/notifyListener';\nimport { registerAccessTokenService } from '../../lib/server/oauth/oauth';\nimport { settings } from '../../settings/server';\nimport { normalizers, fromTemplate, renameInvalidProperties } from './transform_helpers';\n\nconst logger = new Logger('CustomOAuth');\n\nconst Services = {};\nconst BeforeUpdateOrCreateUserFromExternalService = [];\n\nexport class CustomOAuth {\n\tconstructor(name, options) {\n\t\tlogger.debug('Init CustomOAuth', name, options);\n\n\t\tthis.name = name;\n\t\tif (!Match.test(this.name, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Name is required and must be String');\n\t\t}\n\n\t\tif (Services[this.name]) {\n\t\t\tServices[this.name].configure(options);\n\t\t\treturn;\n\t\t}\n\n\t\tServices[this.name] = this;\n\n\t\tthis.configure(options);\n\n\t\tthis.userAgent = 'Meteor';\n\t\tif (Meteor.release) {\n\t\t\tthis.userAgent += `/${Meteor.release}`;\n\t\t}\n\n\t\tAccounts.oauth.registerService(this.name);\n\t\tthis.registerService();\n\t\tthis.addHookToProcessUser();\n\t\tthis.registerAccessTokenService(this.name, this.accessTokenParam);\n\t}\n\n\tconfigure(options) {\n\t\tif (!Match.test(options, Object)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options is required and must be Object');\n\t\t}\n\n\t\tif (!Match.test(options.serverURL, String)) {\n\t\t\tthrow new Meteor.Error('CustomOAuth: Options.serverURL is required and must be String');\n\t\t}\n\n\t\tif (!Match.test(options.tokenPath, String)) {\n\t\t\toptions.tokenPath = '/oauth/token';\n\t\t}\n\n\t\tif (!Match.test(options.identityPath, String)) {\n\t\t\toptions.identityPath = '/me';\n\t\t}\n\n\t\tif (!Match.test(options.accessTokenParam, String)) {\n\t\t\toptions.accessTokenParam = 'access_token';\n\t\t}\n\n\t\tthis.serverURL = options.serverURL;\n\t\tthis.tokenPath = options.tokenPath;\n\t\tthis.identityPath = options.identityPath;\n\t\tthis.tokenSentVia = options.tokenSentVia;\n\t\tthis.identityTokenSentVia = options.identityTokenSentVia;\n\t\tthis.keyField = options.keyField;\n\t\tthis.usernameField = (options.usernameField || '').trim();\n\t\tthis.emailField = (options.emailField || '').trim();\n\t\tthis.nameField = (options.nameField || '').trim();\n\t\tthis.avatarField = (options.avatarField || '').trim();\n\t\tthis.mergeUsers = options.mergeUsers;\n\t\tthis.mergeUsersDistinctServices = options.mergeUsersDistinctServices;\n\t\tthis.rolesClaim = options.rolesClaim || 'roles';\n\t\tthis.accessTokenParam = options.accessTokenParam;\n\t\tthis.channelsAdmin = options.channelsAdmin || 'rocket.cat';\n\n\t\tif (this.identityTokenSentVia == null || this.identityTokenSentVia === 'default') {\n\t\t\tthis.identityTokenSentVia = this.tokenSentVia;\n\t\t}\n\n\t\tif (!isURL(this.tokenPath)) {\n\t\t\tthis.tokenPath = this.serverURL + this.tokenPath;\n\t\t}\n\n\t\tif (!isURL(this.identityPath)) {\n\t\t\tthis.identityPath = this.serverURL + this.identityPath;\n\t\t}\n\n\t\tif (Match.test(options.addAutopublishFields, Object)) {\n\t\t\tAccounts.addAutopublishFields(options.addAutopublishFields);\n\t\t}\n\t}\n\n\tasync getAccessToken(query) {\n\t\tconst config = await ServiceConfiguration.configurations.findOneAsync({ service: this.name });\n\t\tif (!config) {\n\t\t\tthrow new Accounts.ConfigError();\n\t\t}\n\n\t\tlet response = undefined;\n\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t'User-Agent': this.userAgent, // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t\t'Accept': 'application/json',\n\t\t};\n\t\tconst params = new URLSearchParams({\n\t\t\tcode: query.code,\n\t\t\tredirect_uri: OAuth._redirectUri(this.name, config),\n\t\t\tgrant_type: 'authorization_code',\n\t\t\tstate: query.state,\n\t\t});\n\n\t\t// Only send clientID / secret once on header or payload.\n\t\tif (this.tokenSentVia === 'header') {\n\t\t\tconst b64 = Buffer.from(`${config.clientId}:${OAuth.openSecret(config.secret)}`).toString('base64');\n\t\t\theaders.Authorization = `Basic ${b64}`;\n\t\t} else {\n\t\t\tparams.append('client_secret', config.secret);\n\t\t\tparams.append('client_id', config.clientId);\n\t\t}\n\n\t\ttry {\n\t\t\tconst request = await fetch(`${this.tokenPath}`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders,\n\t\t\t\tbody: params,\n\t\t\t});\n\n\t\t\tif (!request.ok) {\n\t\t\t\tthrow new Error(request.statusText);\n\t\t\t}\n\n\t\t\tresponse = await request.json();\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to complete OAuth handshake with ${this.name} at ${this.tokenPath}. ${err.message}`);\n\t\t\tthrow _.extend(error, { response: err.response });\n\t\t}\n\n\t\tif (response.error) {\n\t\t\t// if the http response was a json object with an error attribute\n\t\t\tthrow new Error(`Failed to complete OAuth handshake with ${this.name} at ${this.tokenPath}. ${response.error}`);\n\t\t} else {\n\t\t\treturn response;\n\t\t}\n\t}\n\n\tasync getIdentity(accessToken) {\n\t\tconst params = {};\n\t\tconst headers = {\n\t\t\t'User-Agent': this.userAgent, // http://doc.gitlab.com/ce/api/users.html#Current-user\n\t\t\t'Accept': 'application/json',\n\t\t};\n\n\t\tif (this.identityTokenSentVia === 'header') {\n\t\t\theaders.Authorization = `Bearer ${accessToken}`;\n\t\t} else {\n\t\t\tparams[this.accessTokenParam] = accessToken;\n\t\t}\n\n\t\ttry {\n\t\t\tconst request = await fetch(`${this.identityPath}`, { method: 'GET', headers, params });\n\n\t\t\tif (!request.ok) {\n\t\t\t\tthrow new Error(request.statusText);\n\t\t\t}\n\n\t\t\tconst response = await request.json();\n\n\t\t\tlogger.debug({ msg: 'Identity response', response });\n\n\t\t\treturn this.normalizeIdentity(response);\n\t\t} catch (err) {\n\t\t\tconst error = new Error(`Failed to fetch identity from ${this.name} at ${this.identityPath}. ${err.message}`);\n\t\t\tthrow _.extend(error, { response: err.response });\n\t\t}\n\t}\n\n\tregisterService() {\n\t\tconst self = this;\n\t\tOAuth.registerService(this.name, 2, null, async (query) => {\n\t\t\tconst response = await self.getAccessToken(query);\n\t\t\tconst identity = await self.getIdentity(response.access_token, query);\n\n\t\t\tconst serviceData = {\n\t\t\t\t_OAuthCustom: true,\n\t\t\t\tserverURL: self.serverURL,\n\t\t\t\taccessToken: response.access_token,\n\t\t\t\tidToken: response.id_token,\n\t\t\t\texpiresAt: +new Date() + 1000 * parseInt(response.expires_in, 10),\n\t\t\t};\n\n\t\t\t// only set the token in serviceData if it's there. this ensures\n\t\t\t// that we don't lose old ones (since we only get this on the first\n\t\t\t// log in attempt)\n\t\t\tif (response.refresh_token) {\n\t\t\t\tserviceData.refreshToken = response.refresh_token;\n\t\t\t}\n\n\t\t\t_.extend(serviceData, identity);\n\n\t\t\tconst data = {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn data;\n\t\t});\n\t}\n\n\tnormalizeIdentity(identity) {\n\t\tif (identity) {\n\t\t\tfor (const normalizer of Object.values(normalizers)) {\n\t\t\t\tconst result = normalizer(identity);\n\t\t\t\tif (result) {\n\t\t\t\t\tidentity = result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.usernameField) {\n\t\t\tidentity.username = this.getUsername(identity);\n\t\t}\n\n\t\tif (this.emailField) {\n\t\t\tidentity.email = this.getEmail(identity);\n\t\t}\n\n\t\tif (this.avatarField) {\n\t\t\tidentity.avatarUrl = this.getAvatarUrl(identity);\n\t\t}\n\n\t\tif (this.nameField) {\n\t\t\tidentity.name = this.getCustomName(identity);\n\t\t} else {\n\t\t\tidentity.name = this.getName(identity);\n\t\t}\n\n\t\treturn renameInvalidProperties(identity);\n\t}\n\n\tretrieveCredential(credentialToken, credentialSecret) {\n\t\treturn OAuth.retrieveCredential(credentialToken, credentialSecret);\n\t}\n\n\tgetUsername(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.usernameField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tthrow new Meteor.Error('field_not_found', `Username field \"${this.usernameField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract username', error.message);\n\t\t}\n\t}\n\n\tgetEmail(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.emailField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tthrow new Meteor.Error('field_not_found', `Email field \"${this.emailField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract email', error.message);\n\t\t}\n\t}\n\n\tgetCustomName(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.nameField, data);\n\n\t\t\tif (!value) {\n\t\t\t\treturn this.getName(data);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract custom name', error.message);\n\t\t}\n\t}\n\n\tgetAvatarUrl(data) {\n\t\ttry {\n\t\t\tconst value = fromTemplate(this.avatarField, data);\n\n\t\t\tif (!value) {\n\t\t\t\tlogger.debug(`Avatar field \"${this.avatarField}\" not found in data`, data);\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (error) {\n\t\t\tthrow new Error('CustomOAuth: Failed to extract avatar url', error.message);\n\t\t}\n\t}\n\n\tgetName(identity) {\n\t\tconst name =\n\t\t\tidentity.name ||\n\t\t\tidentity.username ||\n\t\t\tidentity.nickname ||\n\t\t\tidentity.CharacterName ||\n\t\t\tidentity.userName ||\n\t\t\tidentity.preferred_username ||\n\t\t\t(identity.user && identity.user.name);\n\t\treturn name;\n\t}\n\n\taddHookToProcessUser() {\n\t\tBeforeUpdateOrCreateUserFromExternalService.push(async (serviceName, serviceData /* , options*/) => {\n\t\t\tif (serviceName !== this.name) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (serviceData.username) {\n\t\t\t\tlet user = undefined;\n\n\t\t\t\tif (this.keyField === 'username') {\n\t\t\t\t\tuser = this.mergeUsersDistinctServices\n\t\t\t\t\t\t? await Users.findOneByUsernameIgnoringCase(serviceData.username)\n\t\t\t\t\t\t: await Users.findOneByUsernameAndServiceNameIgnoringCase(serviceData.username, serviceData.id, serviceName);\n\t\t\t\t} else if (this.keyField === 'email') {\n\t\t\t\t\tuser = this.mergeUsersDistinctServices\n\t\t\t\t\t\t? await Users.findOneByEmailAddress(serviceData.email)\n\t\t\t\t\t\t: await Users.findOneByEmailAddressAndServiceNameIgnoringCase(serviceData.email, serviceData.id, serviceName);\n\t\t\t\t}\n\n\t\t\t\tif (!user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait callbacks.run('afterProcessOAuthUser', { serviceName, serviceData, user });\n\n\t\t\t\t// User already created or merged and has identical name as before\n\t\t\t\tif (\n\t\t\t\t\tuser.services &&\n\t\t\t\t\tuser.services[serviceName] &&\n\t\t\t\t\tuser.services[serviceName].id === serviceData.id &&\n\t\t\t\t\tuser.name === serviceData.name &&\n\t\t\t\t\t(this.keyField === 'email' || !serviceData.email || user.emails?.find(({ address }) => address === serviceData.email))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.mergeUsers !== true) {\n\t\t\t\t\tthrow new Meteor.Error('CustomOAuth', `User with username ${user.username} already exists`);\n\t\t\t\t}\n\n\t\t\t\tconst serviceIdKey = `services.${serviceName}.id`;\n\t\t\t\tconst update = {\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tname: serviceData.name,\n\t\t\t\t\t\t...(this.keyField === 'username' && serviceData.email && { emails: [{ address: serviceData.email, verified: true }] }),\n\t\t\t\t\t\t[serviceIdKey]: serviceData.id,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tawait Users.update({ _id: user._id }, update);\n\n\t\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: user._id, diff: update });\n\t\t\t}\n\t\t});\n\n\t\tAccounts.validateNewUser((user) => {\n\t\t\tif (!user.services || !user.services[this.name] || !user.services[this.name].id) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.usernameField) {\n\t\t\t\tuser.username = user.services[this.name].username;\n\t\t\t}\n\n\t\t\tif (this.emailField) {\n\t\t\t\tuser.email = user.services[this.name].email;\n\t\t\t}\n\n\t\t\tif (this.nameField) {\n\t\t\t\tuser.name = user.services[this.name].name;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tregisterAccessTokenService(name) {\n\t\tconst self = this;\n\t\tconst whitelisted = ['id', 'email', 'username', 'name', this.rolesClaim];\n\n\t\tregisterAccessTokenService(name, async (options) => {\n\t\t\tcheck(\n\t\t\t\toptions,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\taccessToken: String,\n\t\t\t\t\texpiresIn: Match.Integer,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst identity = await self.getIdentity(options.accessToken);\n\n\t\t\tconst serviceData = {\n\t\t\t\taccessToken: options.accessToken,\n\t\t\t\texpiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10),\n\t\t\t};\n\n\t\t\tconst fields = _.pick(identity, whitelisted);\n\t\t\t_.extend(serviceData, fields);\n\n\t\t\treturn {\n\t\t\t\tserviceData,\n\t\t\t\toptions: {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tname: identity.name,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t}\n}\n\nconst { updateOrCreateUserFromExternalService } = Accounts;\n\nAccounts.updateOrCreateUserFromExternalService = async function (...args /* serviceName, serviceData, options*/) {\n\tfor await (const hook of BeforeUpdateOrCreateUserFromExternalService) {\n\t\tawait hook.apply(this, args);\n\t}\n\n\tconst [serviceName, serviceData] = args;\n\n\tconst user = updateOrCreateUserFromExternalService.apply(this, args);\n\tconst fullUser = await Users.findOneById(user.userId);\n\tif (settings.get('LDAP_Update_Data_On_OAuth_Login')) {\n\t\tawait LDAP.loginAuthenticatedUserRequest(fullUser.username);\n\t}\n\n\tawait callbacks.run('afterValidateNewOAuthUser', {\n\t\tidentity: serviceData,\n\t\tserviceName,\n\t\tuser: fullUser,\n\t});\n\n\treturn user;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"711bf2e8adedfa539d75af0be3e4895610a5970a"}
