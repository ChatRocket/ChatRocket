{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/slackbridge.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/slackbridge.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/slackbridge.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      SlackBridge: () => SlackBridge\n    });\n    let debounce;\n    module.link(\"lodash\", {\n      debounce(v) {\n        debounce = v;\n      }\n    }, 0);\n    let RocketAdapter;\n    module.link(\"./RocketAdapter.js\", {\n      default(v) {\n        RocketAdapter = v;\n      }\n    }, 1);\n    let SlackAdapter;\n    module.link(\"./SlackAdapter.js\", {\n      default(v) {\n        SlackAdapter = v;\n      }\n    }, 2);\n    let classLogger, connLogger;\n    module.link(\"./logger\", {\n      classLogger(v) {\n        classLogger = v;\n      },\n      connLogger(v) {\n        connLogger = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * SlackBridge interfaces between this Rocket installation and a remote Slack installation.\n     */\n    class SlackBridgeClass {\n      constructor() {\n        this.debouncedReconnectIfEnabled = debounce(() => {\n          if (this.isEnabled) {\n            this.reconnect();\n          }\n        }, 500);\n        this.isEnabled = false;\n        this.isLegacyRTM = true;\n        this.slackAdapters = [];\n        this.rocket = new RocketAdapter(this);\n        this.reactionsMap = new Map(); // Sync object between rocket and slack\n\n        this.connected = false;\n        this.rocket.clearSlackAdapters();\n\n        // Settings that we cache versus looking up at runtime\n        this.apiTokens = false;\n        this.botTokens = false;\n        this.appTokens = false;\n        this.signingSecrets = false;\n        this.aliasFormat = '';\n        this.excludeBotnames = '';\n        this.isReactionsEnabled = true;\n        this.processSettings();\n      }\n      connect() {\n        if (this.connected === false) {\n          this.slackAdapters = [];\n          this.rocket.clearSlackAdapters();\n          if (this.isLegacyRTM) {\n            const tokenList = this.apiTokens.split('\\n');\n            tokenList.forEach(apiToken => {\n              const slack = new SlackAdapter(this);\n              slack.setRocket(this.rocket);\n              this.rocket.addSlack(slack);\n              this.slackAdapters.push(slack);\n              slack.connect({\n                apiToken\n              }).catch(err => connLogger.error('error connecting to slack', err));\n            });\n          } else {\n            const botTokenList = this.botTokens.split('\\n'); // Bot token list\n            const appTokenList = this.appTokens.split('\\n'); // App token list\n            const signingSecretList = this.signingSecrets.split('\\n'); // Signing secret list\n\n            // Check if the number of tokens are the same\n            if (botTokenList.length !== appTokenList.length || botTokenList.length !== signingSecretList.length) {\n              connLogger.error('error connecting to slack: number of tokens are not the same');\n              return;\n            }\n            const appCredentials = botTokenList.map((botToken, i) => ({\n              botToken,\n              appToken: appTokenList[i],\n              signingSecret: signingSecretList[i]\n            }));\n            appCredentials.forEach(appCredential => {\n              const slack = new SlackAdapter(this);\n              slack.setRocket(this.rocket);\n              this.rocket.addSlack(slack);\n              this.slackAdapters.push(slack);\n              slack.connect({\n                appCredential\n              }).catch(err => connLogger.error('error connecting to slack', err));\n            });\n          }\n          if (settings.get('SlackBridge_Out_Enabled')) {\n            this.rocket.connect();\n          }\n          this.connected = true;\n          connLogger.info('Enabled');\n        }\n      }\n      async reconnect() {\n        await this.disconnect();\n        // connect if either apiTokens or appCredentials are set\n        if (this.isLegacyRTM && this.apiTokens) {\n          this.connect();\n        } else if (!this.isLegacyRTM && this.botTokens && this.appTokens && this.signingSecrets) {\n          this.connect();\n        }\n      }\n      async disconnect() {\n        try {\n          if (this.connected === true) {\n            await this.rocket.disconnect();\n            await Promise.all(this.slackAdapters.map(slack => slack.disconnect()));\n            this.slackAdapters = [];\n            this.connected = false;\n            connLogger.info('Slack Bridge Disconnected');\n          }\n        } catch (error) {\n          connLogger.error('An error occurred during disconnection', error);\n        }\n      }\n      processSettings() {\n        // Check if legacy realtime api is enabled\n        settings.watch('SlackBridge_UseLegacy', value => {\n          if (value !== this.isLegacyRTM) {\n            this.isLegacyRTM = value;\n            this.debouncedReconnectIfEnabled();\n          }\n          classLogger.debug('Setting: SlackBridge_UseLegacy', value);\n        });\n\n        // Slack installtion Bot token\n        settings.watch('SlackBridge_BotToken', value => {\n          if (value !== this.botTokens) {\n            this.botTokens = value;\n            this.debouncedReconnectIfEnabled();\n          }\n          classLogger.debug('Setting: SlackBridge_BotToken', value);\n        });\n        // Slack installtion App token\n        settings.watch('SlackBridge_AppToken', value => {\n          if (value !== this.appTokens) {\n            this.appTokens = value;\n            this.debouncedReconnectIfEnabled();\n          }\n          classLogger.debug('Setting: SlackBridge_AppToken', value);\n        });\n        // Slack installtion Signing token\n        settings.watch('SlackBridge_SigningSecret', value => {\n          if (value !== this.signingSecrets) {\n            this.signingSecrets = value;\n            this.debouncedReconnectIfEnabled();\n          }\n          classLogger.debug('Setting: SlackBridge_SigningSecret', value);\n        });\n\n        // Slack installation API token\n        settings.watch('SlackBridge_APIToken', value => {\n          if (value !== this.apiTokens) {\n            this.apiTokens = value;\n            this.debouncedReconnectIfEnabled();\n          }\n          classLogger.debug('Setting: SlackBridge_APIToken', value);\n        });\n\n        // Import messages from Slack with an alias; %s is replaced by the username of the user. If empty, no alias will be used.\n        settings.watch('SlackBridge_AliasFormat', value => {\n          this.aliasFormat = value;\n          classLogger.debug('Setting: SlackBridge_AliasFormat', value);\n        });\n\n        // Do not propagate messages from bots whose name matches the regular expression above. If left empty, all messages from bots will be propagated.\n        settings.watch('SlackBridge_ExcludeBotnames', value => {\n          this.excludeBotnames = value;\n          classLogger.debug('Setting: SlackBridge_ExcludeBotnames', value);\n        });\n\n        // Reactions\n        settings.watch('SlackBridge_Reactions_Enabled', value => {\n          this.isReactionsEnabled = value;\n          classLogger.debug('Setting: SlackBridge_Reactions_Enabled', value);\n        });\n\n        // Is this entire SlackBridge enabled\n        settings.watch('SlackBridge_Enabled', value => {\n          if (this.isEnabled !== value) {\n            this.isEnabled = value;\n            if (this.isEnabled) {\n              this.debouncedReconnectIfEnabled();\n            } else {\n              this.disconnect();\n            }\n          }\n          classLogger.debug('Setting: SlackBridge_Enabled', value);\n        });\n      }\n    }\n    const SlackBridge = new SlackBridgeClass();\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","SlackBridge","debounce","link","v","RocketAdapter","default","SlackAdapter","classLogger","connLogger","settings","__reifyWaitForDeps__","SlackBridgeClass","constructor","debouncedReconnectIfEnabled","isEnabled","reconnect","isLegacyRTM","slackAdapters","rocket","reactionsMap","Map","connected","clearSlackAdapters","apiTokens","botTokens","appTokens","signingSecrets","aliasFormat","excludeBotnames","isReactionsEnabled","processSettings","connect","tokenList","split","forEach","apiToken","slack","setRocket","addSlack","push","catch","err","error","botTokenList","appTokenList","signingSecretList","length","appCredentials","map","botToken","i","appToken","signingSecret","appCredential","get","info","disconnect","Promise","all","watch","value","debug","__reify_async_result__","_reifyError","self","async"],"sources":["app/slackbridge/server/slackbridge.js"],"sourcesContent":["import { debounce } from 'lodash';\n\nimport RocketAdapter from './RocketAdapter.js';\nimport SlackAdapter from './SlackAdapter.js';\nimport { classLogger, connLogger } from './logger';\nimport { settings } from '../../settings/server';\n\n/**\n * SlackBridge interfaces between this Rocket installation and a remote Slack installation.\n */\nclass SlackBridgeClass {\n\tconstructor() {\n\t\tthis.isEnabled = false;\n\t\tthis.isLegacyRTM = true;\n\t\tthis.slackAdapters = [];\n\t\tthis.rocket = new RocketAdapter(this);\n\t\tthis.reactionsMap = new Map(); // Sync object between rocket and slack\n\n\t\tthis.connected = false;\n\t\tthis.rocket.clearSlackAdapters();\n\n\t\t// Settings that we cache versus looking up at runtime\n\t\tthis.apiTokens = false;\n\t\tthis.botTokens = false;\n\t\tthis.appTokens = false;\n\t\tthis.signingSecrets = false;\n\t\tthis.aliasFormat = '';\n\t\tthis.excludeBotnames = '';\n\t\tthis.isReactionsEnabled = true;\n\n\t\tthis.processSettings();\n\t}\n\n\tconnect() {\n\t\tif (this.connected === false) {\n\t\t\tthis.slackAdapters = [];\n\t\t\tthis.rocket.clearSlackAdapters();\n\n\t\t\tif (this.isLegacyRTM) {\n\t\t\t\tconst tokenList = this.apiTokens.split('\\n');\n\n\t\t\t\ttokenList.forEach((apiToken) => {\n\t\t\t\t\tconst slack = new SlackAdapter(this);\n\t\t\t\t\tslack.setRocket(this.rocket);\n\t\t\t\t\tthis.rocket.addSlack(slack);\n\t\t\t\t\tthis.slackAdapters.push(slack);\n\n\t\t\t\t\tslack.connect({ apiToken }).catch((err) => connLogger.error('error connecting to slack', err));\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst botTokenList = this.botTokens.split('\\n'); // Bot token list\n\t\t\t\tconst appTokenList = this.appTokens.split('\\n'); // App token list\n\t\t\t\tconst signingSecretList = this.signingSecrets.split('\\n'); // Signing secret list\n\n\t\t\t\t// Check if the number of tokens are the same\n\t\t\t\tif (botTokenList.length !== appTokenList.length || botTokenList.length !== signingSecretList.length) {\n\t\t\t\t\tconnLogger.error('error connecting to slack: number of tokens are not the same');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst appCredentials = botTokenList.map((botToken, i) => ({\n\t\t\t\t\tbotToken,\n\t\t\t\t\tappToken: appTokenList[i],\n\t\t\t\t\tsigningSecret: signingSecretList[i],\n\t\t\t\t}));\n\n\t\t\t\tappCredentials.forEach((appCredential) => {\n\t\t\t\t\tconst slack = new SlackAdapter(this);\n\t\t\t\t\tslack.setRocket(this.rocket);\n\t\t\t\t\tthis.rocket.addSlack(slack);\n\t\t\t\t\tthis.slackAdapters.push(slack);\n\n\t\t\t\t\tslack.connect({ appCredential }).catch((err) => connLogger.error('error connecting to slack', err));\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (settings.get('SlackBridge_Out_Enabled')) {\n\t\t\t\tthis.rocket.connect();\n\t\t\t}\n\n\t\t\tthis.connected = true;\n\t\t\tconnLogger.info('Enabled');\n\t\t}\n\t}\n\n\tasync reconnect() {\n\t\tawait this.disconnect();\n\t\t// connect if either apiTokens or appCredentials are set\n\t\tif (this.isLegacyRTM && this.apiTokens) {\n\t\t\tthis.connect();\n\t\t} else if (!this.isLegacyRTM && this.botTokens && this.appTokens && this.signingSecrets) {\n\t\t\tthis.connect();\n\t\t}\n\t}\n\n\tdebouncedReconnectIfEnabled = debounce(() => {\n\t\tif (this.isEnabled) {\n\t\t\tthis.reconnect();\n\t\t}\n\t}, 500);\n\n\tasync disconnect() {\n\t\ttry {\n\t\t\tif (this.connected === true) {\n\t\t\t\tawait this.rocket.disconnect();\n\t\t\t\tawait Promise.all(this.slackAdapters.map((slack) => slack.disconnect()));\n\t\t\t\tthis.slackAdapters = [];\n\t\t\t\tthis.connected = false;\n\t\t\t\tconnLogger.info('Slack Bridge Disconnected');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconnLogger.error('An error occurred during disconnection', error);\n\t\t}\n\t}\n\n\tprocessSettings() {\n\t\t// Check if legacy realtime api is enabled\n\t\tsettings.watch('SlackBridge_UseLegacy', (value) => {\n\t\t\tif (value !== this.isLegacyRTM) {\n\t\t\t\tthis.isLegacyRTM = value;\n\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t}\n\t\t\tclassLogger.debug('Setting: SlackBridge_UseLegacy', value);\n\t\t});\n\n\t\t// Slack installtion Bot token\n\t\tsettings.watch('SlackBridge_BotToken', (value) => {\n\t\t\tif (value !== this.botTokens) {\n\t\t\t\tthis.botTokens = value;\n\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t}\n\t\t\tclassLogger.debug('Setting: SlackBridge_BotToken', value);\n\t\t});\n\t\t// Slack installtion App token\n\t\tsettings.watch('SlackBridge_AppToken', (value) => {\n\t\t\tif (value !== this.appTokens) {\n\t\t\t\tthis.appTokens = value;\n\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t}\n\t\t\tclassLogger.debug('Setting: SlackBridge_AppToken', value);\n\t\t});\n\t\t// Slack installtion Signing token\n\t\tsettings.watch('SlackBridge_SigningSecret', (value) => {\n\t\t\tif (value !== this.signingSecrets) {\n\t\t\t\tthis.signingSecrets = value;\n\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t}\n\t\t\tclassLogger.debug('Setting: SlackBridge_SigningSecret', value);\n\t\t});\n\n\t\t// Slack installation API token\n\t\tsettings.watch('SlackBridge_APIToken', (value) => {\n\t\t\tif (value !== this.apiTokens) {\n\t\t\t\tthis.apiTokens = value;\n\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t}\n\n\t\t\tclassLogger.debug('Setting: SlackBridge_APIToken', value);\n\t\t});\n\n\t\t// Import messages from Slack with an alias; %s is replaced by the username of the user. If empty, no alias will be used.\n\t\tsettings.watch('SlackBridge_AliasFormat', (value) => {\n\t\t\tthis.aliasFormat = value;\n\t\t\tclassLogger.debug('Setting: SlackBridge_AliasFormat', value);\n\t\t});\n\n\t\t// Do not propagate messages from bots whose name matches the regular expression above. If left empty, all messages from bots will be propagated.\n\t\tsettings.watch('SlackBridge_ExcludeBotnames', (value) => {\n\t\t\tthis.excludeBotnames = value;\n\t\t\tclassLogger.debug('Setting: SlackBridge_ExcludeBotnames', value);\n\t\t});\n\n\t\t// Reactions\n\t\tsettings.watch('SlackBridge_Reactions_Enabled', (value) => {\n\t\t\tthis.isReactionsEnabled = value;\n\t\t\tclassLogger.debug('Setting: SlackBridge_Reactions_Enabled', value);\n\t\t});\n\n\t\t// Is this entire SlackBridge enabled\n\t\tsettings.watch('SlackBridge_Enabled', (value) => {\n\t\t\tif (this.isEnabled !== value) {\n\t\t\t\tthis.isEnabled = value;\n\t\t\t\tif (this.isEnabled) {\n\t\t\t\t\tthis.debouncedReconnectIfEnabled();\n\t\t\t\t} else {\n\t\t\t\t\tthis.disconnect();\n\t\t\t\t}\n\t\t\t}\n\t\t\tclassLogger.debug('Setting: SlackBridge_Enabled', value);\n\t\t});\n\t}\n}\n\nexport const SlackBridge = new SlackBridgeClass();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"9a633d51d50ebdc517cf1f1b89d084ff9092b30d"}
