{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAPI.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/slackbridge/server/SlackAPI.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAPI.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/slackbridge/server/SlackAPI.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/slackbridge/server/SlackAPI.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      SlackAPI: () => SlackAPI\n    });\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class SlackAPI {\n      constructor(apiOrBotToken) {\n        this.token = apiOrBotToken;\n      }\n      async getChannels() {\n        let cursor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        let channels = [];\n        const request = await fetch('https://slack.com/api/conversations.list', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: _objectSpread({\n            types: 'public_channel',\n            exclude_archived: true,\n            limit: 1000\n          }, cursor && {\n            cursor\n          })\n        });\n        const response = await request.json();\n        if (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n          channels = channels.concat(response.channels);\n          if (response.response_metadata && response.response_metadata.next_cursor) {\n            const nextChannels = await this.getChannels(response.response_metadata.next_cursor);\n            channels = channels.concat(nextChannels);\n          }\n        }\n        return channels;\n      }\n      async getGroups() {\n        let cursor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        let groups = [];\n        const request = await fetch('https://slack.com/api/conversations.list', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: _objectSpread({\n            types: 'private_channel',\n            exclude_archived: true,\n            limit: 1000\n          }, cursor && {\n            cursor\n          })\n        });\n        const response = await request.json();\n        if (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n          groups = groups.concat(response.channels);\n          if (response.response_metadata && response.response_metadata.next_cursor) {\n            const nextGroups = await this.getGroups(response.response_metadata.next_cursor);\n            groups = groups.concat(nextGroups);\n          }\n        }\n        return groups;\n      }\n      async getRoomInfo(roomId) {\n        const request = await fetch(\"https://slack.com/api/conversations.info\", {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: {\n            channel: roomId,\n            include_num_members: true\n          }\n        });\n        const response = await request.json();\n        return response && response && request.status === 200 && request.ok && response.channel;\n      }\n      async getMembers(channelId) {\n        const {\n          num_members\n        } = this.getRoomInfo(channelId);\n        const MAX_MEMBERS_PER_CALL = 100;\n        let members = [];\n        let currentCursor = '';\n        for (let index = 0; index < num_members; index += MAX_MEMBERS_PER_CALL) {\n          // eslint-disable-next-line no-await-in-loop\n          const request = await fetch('https://slack.com/api/conversations.members', {\n            headers: {\n              Authorization: \"Bearer \".concat(this.token)\n            },\n            params: _objectSpread({\n              channel: channelId,\n              limit: MAX_MEMBERS_PER_CALL\n            }, currentCursor && {\n              cursor: currentCursor\n            })\n          });\n          // eslint-disable-next-line no-await-in-loop\n          const response = await request.json();\n          if (response && response && request.status === 200 && request.ok && Array.isArray(response.members)) {\n            members = members.concat(response.members);\n            const hasMoreItems = response.response_metadata && response.response_metadata.next_cursor;\n            if (hasMoreItems) {\n              currentCursor = response.response_metadata.next_cursor;\n            }\n          }\n        }\n        return members;\n      }\n      async react(data) {\n        const request = await fetch('https://slack.com/api/reactions.add', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          method: 'POST',\n          params: data\n        });\n        const response = await request.json();\n        return response && request.status === 200 && response && request.ok;\n      }\n      async removeReaction(data) {\n        const request = await fetch('https://slack.com/api/reactions.remove', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          method: 'POST',\n          params: data\n        });\n        const response = await request.json();\n        return response && request.status === 200 && response && request.ok;\n      }\n      async removeMessage(data) {\n        const request = await fetch('https://slack.com/api/chat.delete', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          method: 'POST',\n          params: data\n        });\n        const response = await request.json();\n        return response && request.status === 200 && response && request.ok;\n      }\n      async sendMessage(data) {\n        const request = await fetch('https://slack.com/api/chat.postMessage', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          method: 'POST',\n          params: data\n        });\n        return request.json();\n      }\n      async updateMessage(data) {\n        const request = await fetch('https://slack.com/api/chat.update', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          method: 'POST',\n          params: data\n        });\n        const response = await request.json();\n        return response && request.status === 200 && response && request.ok;\n      }\n      async getHistory(options) {\n        const request = await fetch(\"https://slack.com/api/conversations.history\", {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: options\n        });\n        const response = await request.json();\n        return response;\n      }\n      async getPins(channelId) {\n        const request = await fetch('https://slack.com/api/pins.list', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: {\n            channel: channelId\n          }\n        });\n        const response = await request.json();\n        return response && response && request.status === 200 && request.ok && response.items;\n      }\n      async getUser(userId) {\n        const request = await fetch('https://slack.com/api/users.info', {\n          headers: {\n            Authorization: \"Bearer \".concat(this.token)\n          },\n          params: {\n            user: userId\n          }\n        });\n        const response = await request.json();\n        return response && response && request.status === 200 && request.ok && response.user;\n      }\n      static async verifyToken(token) {\n        const request = await fetch('https://slack.com/api/auth.test', {\n          headers: {\n            Authorization: \"Bearer \".concat(token)\n          },\n          method: 'POST'\n        });\n        const response = await request.json();\n        return response && response && request.status === 200 && request.ok && response.ok;\n      }\n      static async verifyAppCredentials(_ref) {\n        let {\n          botToken,\n          appToken\n        } = _ref;\n        const request = await fetch('https://slack.com/api/apps.connections.open', {\n          headers: {\n            Authorization: \"Bearer \".concat(appToken)\n          },\n          method: 'POST'\n        });\n        const response = await request.json();\n        const isAppTokenOk = response && response && request.status === 200 && request.ok && response.ok;\n        const isBotTokenOk = await this.verifyToken(botToken);\n        return isAppTokenOk && isBotTokenOk;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","SlackAPI","fetch","serverFetch","__reifyWaitForDeps__","constructor","apiOrBotToken","token","getChannels","cursor","arguments","length","undefined","channels","request","headers","Authorization","concat","params","types","exclude_archived","limit","response","json","Array","isArray","response_metadata","next_cursor","nextChannels","getGroups","groups","nextGroups","getRoomInfo","roomId","channel","include_num_members","status","ok","getMembers","channelId","num_members","MAX_MEMBERS_PER_CALL","members","currentCursor","index","hasMoreItems","react","data","method","removeReaction","removeMessage","sendMessage","updateMessage","getHistory","options","getPins","items","getUser","userId","user","verifyToken","verifyAppCredentials","_ref","botToken","appToken","isAppTokenOk","isBotTokenOk","__reify_async_result__","_reifyError","self","async"],"sources":["app/slackbridge/server/SlackAPI.js"],"sourcesContent":["import { serverFetch as fetch } from '@rocket.chat/server-fetch';\n\nexport class SlackAPI {\n\tconstructor(apiOrBotToken) {\n\t\tthis.token = apiOrBotToken;\n\t}\n\n\tasync getChannels(cursor = null) {\n\t\tlet channels = [];\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\ttypes: 'public_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\t...(cursor && { cursor }),\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\n\t\tif (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n\t\t\tchannels = channels.concat(response.channels);\n\t\t\tif (response.response_metadata && response.response_metadata.next_cursor) {\n\t\t\t\tconst nextChannels = await this.getChannels(response.response_metadata.next_cursor);\n\t\t\t\tchannels = channels.concat(nextChannels);\n\t\t\t}\n\t\t}\n\n\t\treturn channels;\n\t}\n\n\tasync getGroups(cursor = null) {\n\t\tlet groups = [];\n\t\tconst request = await fetch('https://slack.com/api/conversations.list', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\ttypes: 'private_channel',\n\t\t\t\texclude_archived: true,\n\t\t\t\tlimit: 1000,\n\t\t\t\t...(cursor && { cursor }),\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\n\t\tif (response && response && Array.isArray(response.channels) && response.channels.length > 0) {\n\t\t\tgroups = groups.concat(response.channels);\n\t\t\tif (response.response_metadata && response.response_metadata.next_cursor) {\n\t\t\t\tconst nextGroups = await this.getGroups(response.response_metadata.next_cursor);\n\t\t\t\tgroups = groups.concat(nextGroups);\n\t\t\t}\n\t\t}\n\n\t\treturn groups;\n\t}\n\n\tasync getRoomInfo(roomId) {\n\t\tconst request = await fetch(`https://slack.com/api/conversations.info`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tchannel: roomId,\n\t\t\t\tinclude_num_members: true,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.channel;\n\t}\n\n\tasync getMembers(channelId) {\n\t\tconst { num_members } = this.getRoomInfo(channelId);\n\t\tconst MAX_MEMBERS_PER_CALL = 100;\n\t\tlet members = [];\n\t\tlet currentCursor = '';\n\t\tfor (let index = 0; index < num_members; index += MAX_MEMBERS_PER_CALL) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst request = await fetch('https://slack.com/api/conversations.members', {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t\t},\n\t\t\t\tparams: {\n\t\t\t\t\tchannel: channelId,\n\t\t\t\t\tlimit: MAX_MEMBERS_PER_CALL,\n\t\t\t\t\t...(currentCursor && { cursor: currentCursor }),\n\t\t\t\t},\n\t\t\t});\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst response = await request.json();\n\t\t\tif (response && response && request.status === 200 && request.ok && Array.isArray(response.members)) {\n\t\t\t\tmembers = members.concat(response.members);\n\t\t\t\tconst hasMoreItems = response.response_metadata && response.response_metadata.next_cursor;\n\t\t\t\tif (hasMoreItems) {\n\t\t\t\t\tcurrentCursor = response.response_metadata.next_cursor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn members;\n\t}\n\n\tasync react(data) {\n\t\tconst request = await fetch('https://slack.com/api/reactions.add', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tparams: data,\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && request.status === 200 && response && request.ok;\n\t}\n\n\tasync removeReaction(data) {\n\t\tconst request = await fetch('https://slack.com/api/reactions.remove', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tparams: data,\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && request.status === 200 && response && request.ok;\n\t}\n\n\tasync removeMessage(data) {\n\t\tconst request = await fetch('https://slack.com/api/chat.delete', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tparams: data,\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && request.status === 200 && response && request.ok;\n\t}\n\n\tasync sendMessage(data) {\n\t\tconst request = await fetch('https://slack.com/api/chat.postMessage', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tparams: data,\n\t\t});\n\t\treturn request.json();\n\t}\n\n\tasync updateMessage(data) {\n\t\tconst request = await fetch('https://slack.com/api/chat.update', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tparams: data,\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && request.status === 200 && response && request.ok;\n\t}\n\n\tasync getHistory(options) {\n\t\tconst request = await fetch(`https://slack.com/api/conversations.history`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: options,\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response;\n\t}\n\n\tasync getPins(channelId) {\n\t\tconst request = await fetch('https://slack.com/api/pins.list', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tchannel: channelId,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.items;\n\t}\n\n\tasync getUser(userId) {\n\t\tconst request = await fetch('https://slack.com/api/users.info', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${this.token}`,\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tuser: userId,\n\t\t\t},\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.user;\n\t}\n\n\tstatic async verifyToken(token) {\n\t\tconst request = await fetch('https://slack.com/api/auth.test', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t});\n\t\tconst response = await request.json();\n\t\treturn response && response && request.status === 200 && request.ok && response.ok;\n\t}\n\n\tstatic async verifyAppCredentials({ botToken, appToken }) {\n\t\tconst request = await fetch('https://slack.com/api/apps.connections.open', {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${appToken}`,\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t});\n\t\tconst response = await request.json();\n\t\tconst isAppTokenOk = response && response && request.status === 200 && request.ok && response.ok;\n\t\tconst isBotTokenOk = await this.verifyToken(botToken);\n\t\treturn isAppTokenOk && isBotTokenOk;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"457de4369a74fbe7a977e31c1b483fe553a4e33b"}
