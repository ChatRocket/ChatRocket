{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/accounts-base/accounts_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/accounts-base/accounts_client.js","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/accounts-base/accounts_client.js","targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/packages/accounts-base/accounts_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_client.js"}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 1);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 2);\nmodule.export({\n  AccountsClient: function () {\n    return AccountsClient;\n  },\n  AccountsTest: function () {\n    return AccountsTest;\n  }\n});\nvar AccountsCommon;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon: function (v) {\n    AccountsCommon = v;\n  }\n}, 0);\nvar AccountsClient = /*#__PURE__*/function (_AccountsCommon) {\n  function AccountsClient(options) {\n    var _this;\n    _this = _AccountsCommon.call(this, options) || this;\n    _this._loggingIn = new ReactiveVar(false);\n    _this._loggingOut = new ReactiveVar(false);\n    _this._loginServicesHandle = _this.connection.subscribe('meteor.loginServiceConfiguration');\n    _this._pageLoadLoginCallbacks = [];\n    _this._pageLoadLoginAttemptInfo = null;\n    _this.savedHash = window.location.hash;\n    _this._initUrlMatching();\n    _this.initStorageLocation();\n\n    // Defined in localstorage_token.js.\n    _this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    _this._loginFuncs = {};\n\n    // This tracks whether callbacks registered with\n    // Accounts.onLogin have been called\n    _this._loginCallbacksCalled = false;\n    return _this;\n  }\n  _inheritsLoose(AccountsClient, _AccountsCommon);\n  var _proto = AccountsClient.prototype;\n  _proto.initStorageLocation = function () {\n    function initStorageLocation(options) {\n      var _Meteor$settings, _Meteor$settings$publ, _Meteor$settings$publ2, _Meteor$settings$publ3;\n      // Determine whether to use local or session storage to storage credentials and anything else.\n      this.storageLocation = (options === null || options === void 0 ? void 0 : options.clientStorage) === 'session' || ((_Meteor$settings = Meteor.settings) === null || _Meteor$settings === void 0 ? void 0 : (_Meteor$settings$publ = _Meteor$settings.public) === null || _Meteor$settings$publ === void 0 ? void 0 : (_Meteor$settings$publ2 = _Meteor$settings$publ.packages) === null || _Meteor$settings$publ2 === void 0 ? void 0 : (_Meteor$settings$publ3 = _Meteor$settings$publ2.accounts) === null || _Meteor$settings$publ3 === void 0 ? void 0 : _Meteor$settings$publ3.clientStorage) === 'session' ? window.sessionStorage : Meteor._localStorage;\n    }\n    return initStorageLocation;\n  }();\n  _proto.config = function () {\n    function config(options) {\n      _AccountsCommon.prototype.config.call(this, options);\n      this.initStorageLocation(options);\n    }\n    return config;\n  }() ///\n  /// CURRENT USER\n  ///\n  // @override\n  ;\n  _proto.userId = function () {\n    function userId() {\n      return this.connection.userId();\n    }\n    return userId;\n  }() // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  ;\n  _proto._setLoggingIn = function () {\n    function _setLoggingIn(x) {\n      this._loggingIn.set(x);\n    }\n    return _setLoggingIn;\n  }()\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  ;\n  _proto.loggingIn = function () {\n    function loggingIn() {\n      return this._loggingIn.get();\n    }\n    return loggingIn;\n  }()\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  ;\n  _proto.loggingOut = function () {\n    function loggingOut() {\n      return this._loggingOut.get();\n    }\n    return loggingOut;\n  }()\n  /**\n    * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n    `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n    * @locus Client\n    * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n    Should be the OAuth provider name accordingly.\n    * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n    */\n  ;\n  _proto.registerClientLoginFunction = function () {\n    function registerClientLoginFunction(funcName, func) {\n      if (this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" has been defined already\");\n      }\n      this._loginFuncs[funcName] = func;\n    }\n    return registerClientLoginFunction;\n  }()\n  /**\n    * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n    arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n    all arguments for the login function.\n    * @locus Client\n    * @param {String} funcName The name of the login function you wanted to call.\n    */\n  ;\n  _proto.callLoginFunction = function () {\n    function callLoginFunction(funcName) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n      for (var _len = arguments.length, funcArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        funcArgs[_key - 1] = arguments[_key];\n      }\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n    return callLoginFunction;\n  }()\n  /**\n    * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n    function.\n    * @locus Client\n    * @param {String} funcName The name of the login function you wanted to call.\n    * @param {Array} funcArgs The `arguments` for the login function.\n    */\n  ;\n  _proto.applyLoginFunction = function () {\n    function applyLoginFunction(funcName, funcArgs) {\n      if (!this._loginFuncs[funcName]) {\n        throw new Error(funcName + \" was not defined\");\n      }\n      return this._loginFuncs[funcName].apply(this, funcArgs);\n    }\n    return applyLoginFunction;\n  }()\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  ;\n  _proto.logout = function () {\n    function logout(callback) {\n      var _this2 = this;\n      this._loggingOut.set(true);\n      this.connection.applyAsync('logout', [], {\n        // TODO[FIBERS]: Look this { wait: true } later.\n        wait: true\n      }).then(function (result) {\n        _this2._loggingOut.set(false);\n        _this2._loginCallbacksCalled = false;\n        _this2.makeClientLoggedOut();\n        callback && callback();\n      }).catch(function (e) {\n        _this2._loggingOut.set(false);\n        callback && callback(e);\n      });\n    }\n    return logout;\n  }()\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  ;\n  _proto.logoutOtherClients = function () {\n    function logoutOtherClients(callback) {\n      var _this3 = this;\n      // We need to make two method calls: one to replace our current token,\n      // and another to remove all tokens except the current one. We want to\n      // call these two methods one after the other, without any other\n      // methods running between them. For example, we don't want `logout`\n      // to be called in between our two method calls (otherwise the second\n      // method call would return an error). Another example: we don't want\n      // logout to be called before the callback for `getNewToken`;\n      // otherwise we would momentarily log the user out and then write a\n      // new token to localStorage.\n      //\n      // To accomplish this, we make both calls as wait methods, and queue\n      // them one after the other, without spinning off the event loop in\n      // between. Even though we queue `removeOtherTokens` before\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call\n      // until the `getNewToken` callback has finished running, because they\n      // are both wait methods.\n      this.connection.apply('getNewToken', [], {\n        wait: true\n      }, function (err, result) {\n        if (!err) {\n          _this3._storeLoginToken(_this3.userId(), result.token, result.tokenExpires);\n        }\n      });\n      this.connection.apply('removeOtherTokens', [], {\n        wait: true\n      }, function (err) {\n        return callback && callback(err);\n      });\n    }\n    return logoutOtherClients;\n  }() ///\n  /// LOGIN METHODS\n  ///\n  // Call a login method on the server.\n  //\n  // A login method is a method which on success calls `this.setUserId(id)` and\n  // `Accounts._setLoginToken` on the server and returns an object with fields\n  // 'id' (containing the user id), 'token' (containing a resume token), and\n  // optionally `tokenExpires`.\n  //\n  // This function takes care of:\n  //   - Updating the Meteor.loggingIn() reactive data source\n  //   - Calling the method in 'wait' mode\n  //   - On success, saving the resume token to localStorage\n  //   - On success, calling Accounts.connection.setUserId()\n  //   - Setting up an onReconnect handler which logs in with\n  //     the resume token\n  //\n  // Options:\n  // - methodName: The method to call (default 'login')\n  // - methodArguments: The arguments for the method\n  // - validateResult: If provided, will be called with the result of the\n  //                 method. If it throws, the client will not be logged in (and\n  //                 its error will be passed to the callback).\n  // - userCallback: Will be called with no arguments once the user is fully\n  //                 logged in, or with the error on error.\n  //\n  ;\n  _proto.callLoginMethod = function () {\n    function callLoginMethod(options) {\n      var _this4 = this;\n      options = _objectSpread({\n        methodName: 'login',\n        methodArguments: [{}],\n        _suppressLoggingIn: false\n      }, options);\n\n      // Set defaults for callback arguments to no-op functions; make sure we\n      // override falsey values too.\n      ['validateResult', 'userCallback'].forEach(function (f) {\n        if (!options[f]) options[f] = function () {\n          return null;\n        };\n      });\n      var called;\n      // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n      var loginCallbacks = function (_ref) {\n        var error = _ref.error,\n          loginDetails = _ref.loginDetails;\n        if (!called) {\n          called = true;\n          if (!error) {\n            _this4._onLoginHook.forEach(function (callback) {\n              callback(loginDetails);\n              return true;\n            });\n            _this4._loginCallbacksCalled = true;\n          } else {\n            _this4._loginCallbacksCalled = false;\n            _this4._onLoginFailureHook.forEach(function (callback) {\n              callback({\n                error: error\n              });\n              return true;\n            });\n          }\n          options.userCallback(error, loginDetails);\n        }\n      };\n      var reconnected = false;\n\n      // We want to set up onReconnect as soon as we get a result token back from\n      // the server, without having to wait for subscriptions to rerun. This is\n      // because if we disconnect and reconnect between getting the result and\n      // getting the results of subscription rerun, we WILL NOT re-send this\n      // method (because we never re-send methods whose results we've received)\n      // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n      // time. This will lead to makeClientLoggedIn(result.id) even though we\n      // haven't actually sent a login method!\n      //\n      // But by making sure that we send this \"resume\" login in that case (and\n      // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n      // client-side userId. (It's important that livedata_connection guarantees\n      // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n      // will occur before the callback from the resume login call.)\n      var onResultReceived = function (err, result) {\n        if (err || !result || !result.token) {\n          // Leave onReconnect alone if there was an error, so that if the user was\n          // already logged in they will still get logged in on reconnect.\n          // See issue #4970.\n        } else {\n          // First clear out any previously set Acccounts login onReconnect\n          // callback (to make sure we don't keep piling up duplicate callbacks,\n          // which would then all be triggered when reconnecting).\n          if (_this4._reconnectStopper) {\n            _this4._reconnectStopper.stop();\n          }\n          _this4._reconnectStopper = DDP.onReconnect(function (conn) {\n            if (conn != _this4.connection) {\n              return;\n            }\n            reconnected = true;\n            // If our token was updated in storage, use the latest one.\n            var storedToken = _this4._storedLoginToken();\n            if (storedToken) {\n              result = {\n                token: storedToken,\n                tokenExpires: _this4._storedLoginTokenExpires()\n              };\n            }\n            if (!result.tokenExpires) result.tokenExpires = _this4._tokenExpiration(new Date());\n            if (_this4._tokenExpiresSoon(result.tokenExpires)) {\n              _this4.makeClientLoggedOut();\n            } else {\n              _this4.callLoginMethod({\n                methodArguments: [{\n                  resume: result.token\n                }],\n                // Reconnect quiescence ensures that the user doesn't see an\n                // intermediate state before the login method finishes. So we don't\n                // need to show a logging-in animation.\n                _suppressLoggingIn: true,\n                userCallback: function (error, loginDetails) {\n                  var storedTokenNow = _this4._storedLoginToken();\n                  if (error) {\n                    // If we had a login error AND the current stored token is the\n                    // one that we tried to log in with, then declare ourselves\n                    // logged out. If there's a token in storage but it's not the\n                    // token that we tried to log in with, we don't know anything\n                    // about whether that token is valid or not, so do nothing. The\n                    // periodic localStorage poll will decide if we are logged in or\n                    // out with this token, if it hasn't already. Of course, even\n                    // with this check, another tab could insert a new valid token\n                    // immediately before we clear localStorage here, which would\n                    // lead to both tabs being logged out, but by checking the token\n                    // in storage right now we hope to make that unlikely to happen.\n                    //\n                    // If there is no token in storage right now, we don't have to\n                    // do anything; whatever code removed the token from storage was\n                    // responsible for calling `makeClientLoggedOut()`, or the\n                    // periodic localStorage poll will call `makeClientLoggedOut`\n                    // eventually if another tab wiped the token from storage.\n                    if (storedTokenNow && storedTokenNow === result.token) {\n                      _this4.makeClientLoggedOut();\n                    }\n                  }\n                  // Possibly a weird callback to call, but better than nothing if\n                  // there is a reconnect between \"login result received\" and \"data\n                  // ready\".\n                  loginCallbacks({\n                    error: error,\n                    loginDetails: loginDetails\n                  });\n                }\n              });\n            }\n          });\n        }\n      };\n\n      // This callback is called once the local cache of the current-user\n      // subscription (and all subscriptions, in fact) are guaranteed to be up to\n      // date.\n      var loggedInAndDataReadyCallback = function (error, result) {\n        // If the login method returns its result but the connection is lost\n        // before the data is in the local cache, it'll set an onReconnect (see\n        // above). The onReconnect will try to log in using the token, and *it*\n        // will call userCallback via its own version of this\n        // loggedInAndDataReadyCallback. So we don't have to do anything here.\n        if (reconnected) return;\n\n        // Note that we need to call this even if _suppressLoggingIn is true,\n        // because it could be matching a _setLoggingIn(true) from a\n        // half-completed pre-reconnect login method.\n        if (error || !result) {\n          error = error || new Error(\"No result from call to \" + options.methodName);\n          loginCallbacks({\n            error: error\n          });\n          _this4._setLoggingIn(false);\n          return;\n        }\n        try {\n          options.validateResult(result);\n        } catch (e) {\n          loginCallbacks({\n            error: e\n          });\n          _this4._setLoggingIn(false);\n          return;\n        }\n\n        // Make the client logged in. (The user data should already be loaded!)\n        _this4.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n\n        // use Tracker to make we sure have a user before calling the callbacks\n        Tracker.autorun(function () {\n          function _callee(computation) {\n            var user;\n            return _regeneratorRuntime.async(function () {\n              function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(Tracker.withComputation(computation, function () {\n                      return Meteor.userAsync();\n                    }));\n                  case 2:\n                    user = _context.sent;\n                    if (user) {\n                      loginCallbacks({\n                        loginDetails: result\n                      });\n                      _this4._setLoggingIn(false);\n                      computation.stop();\n                    }\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n              return _callee$;\n            }(), null, null, null, Promise);\n          }\n          return _callee;\n        }());\n      };\n      if (!options._suppressLoggingIn) {\n        this._setLoggingIn(true);\n      }\n      this.connection.applyAsync(options.methodName, options.methodArguments, {\n        wait: true,\n        onResultReceived: onResultReceived\n      }, loggedInAndDataReadyCallback);\n    }\n    return callLoginMethod;\n  }();\n  _proto.makeClientLoggedOut = function () {\n    function makeClientLoggedOut() {\n      // Ensure client was successfully logged in before running logout hooks.\n      if (this.connection._userId) {\n        this._onLogoutHook.each(function (callback) {\n          callback();\n          return true;\n        });\n      }\n      this._unstoreLoginToken();\n      this.connection.setUserId(null);\n      this._reconnectStopper && this._reconnectStopper.stop();\n    }\n    return makeClientLoggedOut;\n  }();\n  _proto.makeClientLoggedIn = function () {\n    function makeClientLoggedIn(userId, token, tokenExpires) {\n      this._storeLoginToken(userId, token, tokenExpires);\n      this.connection.setUserId(userId);\n    }\n    return makeClientLoggedIn;\n  }() ///\n  /// LOGIN SERVICES\n  ///\n  // A reactive function returning whether the loginServiceConfiguration\n  // subscription is ready. Used by accounts-ui to hide the login button\n  // until we have all the configuration loaded\n  //\n  ;\n  _proto.loginServicesConfigured = function () {\n    function loginServicesConfigured() {\n      return this._loginServicesHandle.ready();\n    }\n    return loginServicesConfigured;\n  }() // Some login services such as the redirect login flow or the resume\n  // login handler can log the user in at page load time.  The\n  // Meteor.loginWithX functions have a callback argument, but the\n  // callback function instance won't be in memory any longer if the\n  // page was reloaded.  The `onPageLoadLogin` function allows a\n  // callback to be registered for the case where the login was\n  // initiated in a previous VM, and we now have the result of the login\n  // attempt in a new VM.\n  // Register a callback to be called if we have information about a\n  // login attempt at page load time.  Call the callback immediately if\n  // we already have the page load login attempt info, otherwise stash\n  // the callback to be called if and when we do get the attempt info.\n  //\n  ;\n  _proto.onPageLoadLogin = function () {\n    function onPageLoadLogin(f) {\n      if (this._pageLoadLoginAttemptInfo) {\n        f(this._pageLoadLoginAttemptInfo);\n      } else {\n        this._pageLoadLoginCallbacks.push(f);\n      }\n    }\n    return onPageLoadLogin;\n  }() // Receive the information about the login attempt at page load time.\n  // Call registered callbacks, and also record the info in case\n  // someone's callback hasn't been registered yet.\n  //\n  ;\n  _proto._pageLoadLogin = function () {\n    function _pageLoadLogin(attemptInfo) {\n      if (this._pageLoadLoginAttemptInfo) {\n        Meteor._debug('Ignoring unexpected duplicate page load login attempt info');\n        return;\n      }\n      this._pageLoadLoginCallbacks.forEach(function (callback) {\n        return callback(attemptInfo);\n      });\n      this._pageLoadLoginCallbacks = [];\n      this._pageLoadLoginAttemptInfo = attemptInfo;\n    }\n    return _pageLoadLogin;\n  }() // _startupCallback executes on onLogin callbacks\n  // at registration time if already logged in\n  // this can happen when new AccountsClient is created\n  // before callbacks are registered see #10157\n  ;\n  _proto._startupCallback = function () {\n    function _startupCallback(callback) {\n      // Are we already logged in?\n      if (this._loginCallbacksCalled) {\n        // If already logged in before handler is registered, it's safe to\n        // assume type is a 'resume', so we execute the callback at the end\n        // of the queue so that Meteor.startup can complete before any\n        // embedded onLogin callbacks would execute.\n        Meteor.setTimeout(function () {\n          return callback({\n            type: 'resume'\n          });\n        }, 0);\n      }\n    }\n    return _startupCallback;\n  }() ///\n  /// LOGIN TOKENS\n  ///\n  // These methods deal with storing a login token and user id in the\n  // browser's localStorage facility. It polls local storage every few\n  // seconds to synchronize login state between multiple tabs in the same\n  // browser.\n  ;\n  _proto.loginWithToken = function () {\n    function loginWithToken(token, callback) {\n      this.callLoginMethod({\n        methodArguments: [{\n          resume: token\n        }],\n        userCallback: callback\n      });\n    }\n    return loginWithToken;\n  }() // Semi-internal API. Call this function to re-enable auto login after\n  // if it was disabled at startup.\n  ;\n  _proto._enableAutoLogin = function () {\n    function _enableAutoLogin() {\n      this._autoLoginEnabled = true;\n      this._pollStoredLoginToken();\n    }\n    return _enableAutoLogin;\n  }() ///\n  /// STORING\n  ///\n  // Call this from the top level of the test file for any test that does\n  // logging in and out, to protect multiple tabs running the same tests\n  // simultaneously from interfering with each others' localStorage.\n  ;\n  _proto._isolateLoginTokenForTest = function () {\n    function _isolateLoginTokenForTest() {\n      this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n      this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n    }\n    return _isolateLoginTokenForTest;\n  }();\n  _proto._storeLoginToken = function () {\n    function _storeLoginToken(userId, token, tokenExpires) {\n      this.storageLocation.setItem(this.USER_ID_KEY, userId);\n      this.storageLocation.setItem(this.LOGIN_TOKEN_KEY, token);\n      if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n      this.storageLocation.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n      // to ensure that the localstorage poller doesn't end up trying to\n      // connect a second time\n      this._lastLoginTokenWhenPolled = token;\n    }\n    return _storeLoginToken;\n  }();\n  _proto._unstoreLoginToken = function () {\n    function _unstoreLoginToken() {\n      this.storageLocation.removeItem(this.USER_ID_KEY);\n      this.storageLocation.removeItem(this.LOGIN_TOKEN_KEY);\n      this.storageLocation.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n      // to ensure that the localstorage poller doesn't end up trying to\n      // connect a second time\n      this._lastLoginTokenWhenPolled = null;\n    }\n    return _unstoreLoginToken;\n  }() // This is private, but it is exported for now because it is used by a\n  // test in accounts-password.\n  ;\n  _proto._storedLoginToken = function () {\n    function _storedLoginToken() {\n      return this.storageLocation.getItem(this.LOGIN_TOKEN_KEY);\n    }\n    return _storedLoginToken;\n  }();\n  _proto._storedLoginTokenExpires = function () {\n    function _storedLoginTokenExpires() {\n      return this.storageLocation.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n    }\n    return _storedLoginTokenExpires;\n  }();\n  _proto._storedUserId = function () {\n    function _storedUserId() {\n      return this.storageLocation.getItem(this.USER_ID_KEY);\n    }\n    return _storedUserId;\n  }();\n  _proto._unstoreLoginTokenIfExpiresSoon = function () {\n    function _unstoreLoginTokenIfExpiresSoon() {\n      var tokenExpires = this._storedLoginTokenExpires();\n      if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n        this._unstoreLoginToken();\n      }\n    }\n    return _unstoreLoginTokenIfExpiresSoon;\n  }() ///\n  /// AUTO-LOGIN\n  ///\n  ;\n  _proto._initLocalStorage = function () {\n    function _initLocalStorage() {\n      var _this5 = this;\n      // Key names to use in localStorage\n      this.LOGIN_TOKEN_KEY = 'Meteor.loginToken';\n      this.LOGIN_TOKEN_EXPIRES_KEY = 'Meteor.loginTokenExpires';\n      this.USER_ID_KEY = 'Meteor.userId';\n      var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n      if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n        // We want to keep using the same keys for existing apps that do not\n        // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n        // to log in again after an app updates to a version of Meteor that\n        // contains this code, but it's generally preferable to namespace the\n        // keys so that connections from distinct apps to distinct DDP URLs\n        // will be distinct in Meteor._localStorage.\n        var namespace = \":\" + this.connection._stream.rawUrl;\n        if (rootUrlPathPrefix) {\n          namespace += \":\" + rootUrlPathPrefix;\n        }\n        this.LOGIN_TOKEN_KEY += namespace;\n        this.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n        this.USER_ID_KEY += namespace;\n      }\n      var token;\n      if (this._autoLoginEnabled) {\n        // Immediately try to log in via local storage, so that any DDP\n        // messages are sent after we have established our user account\n        this._unstoreLoginTokenIfExpiresSoon();\n        token = this._storedLoginToken();\n        if (token) {\n          // On startup, optimistically present us as logged in while the\n          // request is in flight. This reduces page flicker on startup.\n          var userId = this._storedUserId();\n          userId && this.connection.setUserId(userId);\n          this.loginWithToken(token, function (err) {\n            if (err) {\n              Meteor._debug(\"Error logging in with token: \" + err);\n              _this5.makeClientLoggedOut();\n            }\n            _this5._pageLoadLogin({\n              type: 'resume',\n              allowed: !err,\n              error: err,\n              methodName: 'login',\n              // XXX This is duplicate code with loginWithToken, but\n              // loginWithToken can also be called at other times besides\n              // page load.\n              methodArguments: [{\n                resume: token\n              }]\n            });\n          });\n        }\n      }\n\n      // Poll local storage every 3 seconds to login if someone logged in in\n      // another tab\n      this._lastLoginTokenWhenPolled = token;\n      if (this._pollIntervalTimer) {\n        // Unlikely that _initLocalStorage will be called more than once for\n        // the same AccountsClient instance, but just in case...\n        clearInterval(this._pollIntervalTimer);\n      }\n      this._pollIntervalTimer = setInterval(function () {\n        _this5._pollStoredLoginToken();\n      }, 3000);\n    }\n    return _initLocalStorage;\n  }();\n  _proto._pollStoredLoginToken = function () {\n    function _pollStoredLoginToken() {\n      var _this6 = this;\n      if (!this._autoLoginEnabled) {\n        return;\n      }\n      var currentLoginToken = this._storedLoginToken();\n\n      // != instead of !== just to make sure undefined and null are treated the same\n      if (this._lastLoginTokenWhenPolled != currentLoginToken) {\n        if (currentLoginToken) {\n          this.loginWithToken(currentLoginToken, function (err) {\n            if (err) {\n              _this6.makeClientLoggedOut();\n            }\n          });\n        } else {\n          this.logout();\n        }\n      }\n      this._lastLoginTokenWhenPolled = currentLoginToken;\n    }\n    return _pollStoredLoginToken;\n  }() ///\n  /// URLS\n  ///\n  ;\n  _proto._initUrlMatching = function () {\n    function _initUrlMatching() {\n      // By default, allow the autologin process to happen.\n      this._autoLoginEnabled = true;\n\n      // We only support one callback per URL.\n      this._accountsCallbacks = {};\n\n      // Try to match the saved value of window.location.hash.\n      this._attemptToMatchHash();\n    }\n    return _initUrlMatching;\n  }() // Separate out this functionality for testing\n  ;\n  _proto._attemptToMatchHash = function () {\n    function _attemptToMatchHash() {\n      attemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n    }\n    return _attemptToMatchHash;\n  }()\n  /**\n   * @summary Register a function to call when a reset password link is clicked\n   * in an email sent by\n   * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onResetPasswordLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword).\n   * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n   * login process is suspended until this function is called, so that the\n   * password for user A can be reset even if user B was logged in.\n   * @locus Client\n   */\n  ;\n  _proto.onResetPasswordLink = function () {\n    function onResetPasswordLink(callback) {\n      if (this._accountsCallbacks['reset-password']) {\n        Meteor._debug('Accounts.onResetPasswordLink was called more than once. ' + 'Only one callback added will be executed.');\n      }\n      this._accountsCallbacks['reset-password'] = callback;\n    }\n    return onResetPasswordLink;\n  }()\n  /**\n   * @summary Register a function to call when an email verification link is\n   * clicked in an email sent by\n   * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEmailVerificationLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: An email verification token that can be passed to\n   * [`Accounts.verifyEmail`](#accounts_verifyemail).\n   * 2. `done`: A function to call when the email verification UI flow is complete.\n   * The normal login process is suspended until this function is called, so\n   * that the user can be notified that they are verifying their email before\n   * being logged in.\n   * @locus Client\n   */\n  ;\n  _proto.onEmailVerificationLink = function () {\n    function onEmailVerificationLink(callback) {\n      if (this._accountsCallbacks['verify-email']) {\n        Meteor._debug('Accounts.onEmailVerificationLink was called more than once. ' + 'Only one callback added will be executed.');\n      }\n      this._accountsCallbacks['verify-email'] = callback;\n    }\n    return onEmailVerificationLink;\n  }()\n  /**\n   * @summary Register a function to call when an account enrollment link is\n   * clicked in an email sent by\n   * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n   * This function should be called in top-level code, not inside\n   * `Meteor.startup()`.\n   * @memberof! Accounts\n   * @name onEnrollmentLink\n   * @param  {Function} callback The function to call. It is given two arguments:\n   *\n   * 1. `token`: A password reset token that can be passed to\n   * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n   * enrolled account a password.\n   * 2. `done`: A function to call when the enrollment UI flow is complete.\n   * The normal login process is suspended until this function is called, so that\n   * user A can be enrolled even if user B was logged in.\n   * @locus Client\n   */\n  ;\n  _proto.onEnrollmentLink = function () {\n    function onEnrollmentLink(callback) {\n      if (this._accountsCallbacks['enroll-account']) {\n        Meteor._debug('Accounts.onEnrollmentLink was called more than once. ' + 'Only one callback added will be executed.');\n      }\n      this._accountsCallbacks['enroll-account'] = callback;\n    }\n    return onEnrollmentLink;\n  }();\n  return AccountsClient;\n}(AccountsCommon);\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  var Template = Package.blaze.Blaze.Template;\n\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  // TODO: the code above needs to be changed to Meteor.userAsync() when we have\n  // a way to make it reactive using async.\n  // Template.registerHelper('currentUserAsync',\n  //  async () => await Meteor.userAsync());\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Template.registerHelper('loggingInOrOut', function () {\n    return Meteor.loggingIn() || Meteor.loggingOut();\n  });\n}\nvar defaultSuccessHandler = function (token, urlPart) {\n  var _this7 = this;\n  // put login in a suspended state to wait for the interaction to finish\n  this._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (_this7._accountsCallbacks[urlPart]) {\n      _this7._accountsCallbacks[urlPart](token, function () {\n        return _this7._enableAutoLogin();\n      });\n    }\n  });\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nvar attemptToMatchHash = function (accounts, hash, success) {\n  // All of the special hash URLs we support for accounts interactions\n  ['reset-password', 'verify-email', 'enroll-account'].forEach(function (urlPart) {\n    var token;\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === 'reset-password') {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === 'verify-email') {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === 'enroll-account') {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = '';\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n};\n\n// Export for testing\nvar AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","_objectSpread","_inheritsLoose","export","AccountsClient","AccountsTest","AccountsCommon","_AccountsCommon","options","_this","call","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","savedHash","window","location","hash","_initUrlMatching","initStorageLocation","_initLocalStorage","_loginFuncs","_loginCallbacksCalled","_proto","prototype","_Meteor$settings","_Meteor$settings$publ","_Meteor$settings$publ2","_Meteor$settings$publ3","storageLocation","clientStorage","Meteor","settings","public","packages","accounts","sessionStorage","_localStorage","config","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","_len","arguments","length","funcArgs","Array","_key","apply","applyLoginFunction","logout","callback","_this2","applyAsync","wait","then","result","makeClientLoggedOut","catch","e","logoutOtherClients","_this3","err","_storeLoginToken","token","tokenExpires","callLoginMethod","_this4","methodName","methodArguments","_suppressLoggingIn","forEach","f","called","loginCallbacks","_ref","error","loginDetails","_onLoginHook","_onLoginFailureHook","userCallback","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","makeClientLoggedIn","id","Tracker","autorun","_callee","computation","user","async","_callee$","_context","prev","next","awrap","withComputation","userAsync","sent","Promise","_userId","_onLogoutHook","each","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","_startupCallback","setTimeout","type","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","_this5","rootUrlPathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","allowed","_pollIntervalTimer","clearInterval","setInterval","_this6","currentLoginToken","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink","Accounts","Package","blaze","Template","Blaze","registerHelper","urlPart","_this7","startup","success","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken"],"sources":["packages/accounts-base/accounts_client.js"],"sourcesContent":["import { AccountsCommon } from './accounts_common.js';\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n * @param {'session' | 'local'} options.clientStorage Optional Define what kind of storage you want for credentials on the client. Default is 'local' to use `localStorage`. Set to 'session' to use session storage.\n */\nexport class AccountsClient extends AccountsCommon {\n\tconstructor(options) {\n\t\tsuper(options);\n\n\t\tthis._loggingIn = new ReactiveVar(false);\n\t\tthis._loggingOut = new ReactiveVar(false);\n\n\t\tthis._loginServicesHandle = this.connection.subscribe('meteor.loginServiceConfiguration');\n\n\t\tthis._pageLoadLoginCallbacks = [];\n\t\tthis._pageLoadLoginAttemptInfo = null;\n\n\t\tthis.savedHash = window.location.hash;\n\t\tthis._initUrlMatching();\n\n\t\tthis.initStorageLocation();\n\n\t\t// Defined in localstorage_token.js.\n\t\tthis._initLocalStorage();\n\n\t\t// This is for .registerClientLoginFunction & .callLoginFunction.\n\t\tthis._loginFuncs = {};\n\n\t\t// This tracks whether callbacks registered with\n\t\t// Accounts.onLogin have been called\n\t\tthis._loginCallbacksCalled = false;\n\t}\n\n\tinitStorageLocation(options) {\n\t\t// Determine whether to use local or session storage to storage credentials and anything else.\n\t\tthis.storageLocation =\n\t\t\toptions?.clientStorage === 'session' || Meteor.settings?.public?.packages?.accounts?.clientStorage === 'session'\n\t\t\t\t? window.sessionStorage\n\t\t\t\t: Meteor._localStorage;\n\t}\n\n\tconfig(options) {\n\t\tsuper.config(options);\n\n\t\tthis.initStorageLocation(options);\n\t}\n\n\t///\n\t/// CURRENT USER\n\t///\n\n\t// @override\n\tuserId() {\n\t\treturn this.connection.userId();\n\t}\n\n\t// This is mostly just called within this file, but Meteor.loginWithPassword\n\t// also uses it to make loggingIn() be true during the beginPasswordExchange\n\t// method call too.\n\t_setLoggingIn(x) {\n\t\tthis._loggingIn.set(x);\n\t}\n\n\t/**\n\t * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n\t * @locus Client\n\t */\n\tloggingIn() {\n\t\treturn this._loggingIn.get();\n\t}\n\n\t/**\n\t * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n\t * @locus Client\n\t */\n\tloggingOut() {\n\t\treturn this._loggingOut.get();\n\t}\n\n\t/**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n\tregisterClientLoginFunction(funcName, func) {\n\t\tif (this._loginFuncs[funcName]) {\n\t\t\tthrow new Error(`${funcName} has been defined already`);\n\t\t}\n\t\tthis._loginFuncs[funcName] = func;\n\t}\n\n\t/**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n\tcallLoginFunction(funcName, ...funcArgs) {\n\t\tif (!this._loginFuncs[funcName]) {\n\t\t\tthrow new Error(`${funcName} was not defined`);\n\t\t}\n\t\treturn this._loginFuncs[funcName].apply(this, funcArgs);\n\t}\n\n\t/**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n\tapplyLoginFunction(funcName, funcArgs) {\n\t\tif (!this._loginFuncs[funcName]) {\n\t\t\tthrow new Error(`${funcName} was not defined`);\n\t\t}\n\t\treturn this._loginFuncs[funcName].apply(this, funcArgs);\n\t}\n\n\t/**\n\t * @summary Log the user out.\n\t * @locus Client\n\t * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n\t */\n\tlogout(callback) {\n\t\tthis._loggingOut.set(true);\n\n\t\tthis.connection\n\t\t\t.applyAsync('logout', [], {\n\t\t\t\t// TODO[FIBERS]: Look this { wait: true } later.\n\t\t\t\twait: true,\n\t\t\t})\n\t\t\t.then((result) => {\n\t\t\t\tthis._loggingOut.set(false);\n\t\t\t\tthis._loginCallbacksCalled = false;\n\t\t\t\tthis.makeClientLoggedOut();\n\t\t\t\tcallback && callback();\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthis._loggingOut.set(false);\n\t\t\t\tcallback && callback(e);\n\t\t\t});\n\t}\n\n\t/**\n\t * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n\t * @locus Client\n\t * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n\t */\n\tlogoutOtherClients(callback) {\n\t\t// We need to make two method calls: one to replace our current token,\n\t\t// and another to remove all tokens except the current one. We want to\n\t\t// call these two methods one after the other, without any other\n\t\t// methods running between them. For example, we don't want `logout`\n\t\t// to be called in between our two method calls (otherwise the second\n\t\t// method call would return an error). Another example: we don't want\n\t\t// logout to be called before the callback for `getNewToken`;\n\t\t// otherwise we would momentarily log the user out and then write a\n\t\t// new token to localStorage.\n\t\t//\n\t\t// To accomplish this, we make both calls as wait methods, and queue\n\t\t// them one after the other, without spinning off the event loop in\n\t\t// between. Even though we queue `removeOtherTokens` before\n\t\t// `getNewToken`, we won't actually send the `removeOtherTokens` call\n\t\t// until the `getNewToken` callback has finished running, because they\n\t\t// are both wait methods.\n\t\tthis.connection.apply('getNewToken', [], { wait: true }, (err, result) => {\n\t\t\tif (!err) {\n\t\t\t\tthis._storeLoginToken(this.userId(), result.token, result.tokenExpires);\n\t\t\t}\n\t\t});\n\n\t\tthis.connection.apply('removeOtherTokens', [], { wait: true }, (err) => callback && callback(err));\n\t}\n\n\t///\n\t/// LOGIN METHODS\n\t///\n\n\t// Call a login method on the server.\n\t//\n\t// A login method is a method which on success calls `this.setUserId(id)` and\n\t// `Accounts._setLoginToken` on the server and returns an object with fields\n\t// 'id' (containing the user id), 'token' (containing a resume token), and\n\t// optionally `tokenExpires`.\n\t//\n\t// This function takes care of:\n\t//   - Updating the Meteor.loggingIn() reactive data source\n\t//   - Calling the method in 'wait' mode\n\t//   - On success, saving the resume token to localStorage\n\t//   - On success, calling Accounts.connection.setUserId()\n\t//   - Setting up an onReconnect handler which logs in with\n\t//     the resume token\n\t//\n\t// Options:\n\t// - methodName: The method to call (default 'login')\n\t// - methodArguments: The arguments for the method\n\t// - validateResult: If provided, will be called with the result of the\n\t//                 method. If it throws, the client will not be logged in (and\n\t//                 its error will be passed to the callback).\n\t// - userCallback: Will be called with no arguments once the user is fully\n\t//                 logged in, or with the error on error.\n\t//\n\tcallLoginMethod(options) {\n\t\toptions = {\n\t\t\tmethodName: 'login',\n\t\t\tmethodArguments: [{}],\n\t\t\t_suppressLoggingIn: false,\n\t\t\t...options,\n\t\t};\n\n\t\t// Set defaults for callback arguments to no-op functions; make sure we\n\t\t// override falsey values too.\n\t\t['validateResult', 'userCallback'].forEach((f) => {\n\t\t\tif (!options[f]) options[f] = () => null;\n\t\t});\n\n\t\tlet called;\n\t\t// Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n\t\tconst loginCallbacks = ({ error, loginDetails }) => {\n\t\t\tif (!called) {\n\t\t\t\tcalled = true;\n\t\t\t\tif (!error) {\n\t\t\t\t\tthis._onLoginHook.forEach((callback) => {\n\t\t\t\t\t\tcallback(loginDetails);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t\tthis._loginCallbacksCalled = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis._loginCallbacksCalled = false;\n\t\t\t\t\tthis._onLoginFailureHook.forEach((callback) => {\n\t\t\t\t\t\tcallback({ error });\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\toptions.userCallback(error, loginDetails);\n\t\t\t}\n\t\t};\n\n\t\tlet reconnected = false;\n\n\t\t// We want to set up onReconnect as soon as we get a result token back from\n\t\t// the server, without having to wait for subscriptions to rerun. This is\n\t\t// because if we disconnect and reconnect between getting the result and\n\t\t// getting the results of subscription rerun, we WILL NOT re-send this\n\t\t// method (because we never re-send methods whose results we've received)\n\t\t// but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n\t\t// time. This will lead to makeClientLoggedIn(result.id) even though we\n\t\t// haven't actually sent a login method!\n\t\t//\n\t\t// But by making sure that we send this \"resume\" login in that case (and\n\t\t// calling makeClientLoggedOut if it fails), we'll end up with an accurate\n\t\t// client-side userId. (It's important that livedata_connection guarantees\n\t\t// that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n\t\t// will occur before the callback from the resume login call.)\n\t\tconst onResultReceived = (err, result) => {\n\t\t\tif (err || !result || !result.token) {\n\t\t\t\t// Leave onReconnect alone if there was an error, so that if the user was\n\t\t\t\t// already logged in they will still get logged in on reconnect.\n\t\t\t\t// See issue #4970.\n\t\t\t} else {\n\t\t\t\t// First clear out any previously set Acccounts login onReconnect\n\t\t\t\t// callback (to make sure we don't keep piling up duplicate callbacks,\n\t\t\t\t// which would then all be triggered when reconnecting).\n\t\t\t\tif (this._reconnectStopper) {\n\t\t\t\t\tthis._reconnectStopper.stop();\n\t\t\t\t}\n\n\t\t\t\tthis._reconnectStopper = DDP.onReconnect((conn) => {\n\t\t\t\t\tif (conn != this.connection) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treconnected = true;\n\t\t\t\t\t// If our token was updated in storage, use the latest one.\n\t\t\t\t\tconst storedToken = this._storedLoginToken();\n\t\t\t\t\tif (storedToken) {\n\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\ttoken: storedToken,\n\t\t\t\t\t\t\ttokenExpires: this._storedLoginTokenExpires(),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif (!result.tokenExpires) result.tokenExpires = this._tokenExpiration(new Date());\n\t\t\t\t\tif (this._tokenExpiresSoon(result.tokenExpires)) {\n\t\t\t\t\t\tthis.makeClientLoggedOut();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.callLoginMethod({\n\t\t\t\t\t\t\tmethodArguments: [{ resume: result.token }],\n\t\t\t\t\t\t\t// Reconnect quiescence ensures that the user doesn't see an\n\t\t\t\t\t\t\t// intermediate state before the login method finishes. So we don't\n\t\t\t\t\t\t\t// need to show a logging-in animation.\n\t\t\t\t\t\t\t_suppressLoggingIn: true,\n\t\t\t\t\t\t\tuserCallback: (error, loginDetails) => {\n\t\t\t\t\t\t\t\tconst storedTokenNow = this._storedLoginToken();\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\t// If we had a login error AND the current stored token is the\n\t\t\t\t\t\t\t\t\t// one that we tried to log in with, then declare ourselves\n\t\t\t\t\t\t\t\t\t// logged out. If there's a token in storage but it's not the\n\t\t\t\t\t\t\t\t\t// token that we tried to log in with, we don't know anything\n\t\t\t\t\t\t\t\t\t// about whether that token is valid or not, so do nothing. The\n\t\t\t\t\t\t\t\t\t// periodic localStorage poll will decide if we are logged in or\n\t\t\t\t\t\t\t\t\t// out with this token, if it hasn't already. Of course, even\n\t\t\t\t\t\t\t\t\t// with this check, another tab could insert a new valid token\n\t\t\t\t\t\t\t\t\t// immediately before we clear localStorage here, which would\n\t\t\t\t\t\t\t\t\t// lead to both tabs being logged out, but by checking the token\n\t\t\t\t\t\t\t\t\t// in storage right now we hope to make that unlikely to happen.\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// If there is no token in storage right now, we don't have to\n\t\t\t\t\t\t\t\t\t// do anything; whatever code removed the token from storage was\n\t\t\t\t\t\t\t\t\t// responsible for calling `makeClientLoggedOut()`, or the\n\t\t\t\t\t\t\t\t\t// periodic localStorage poll will call `makeClientLoggedOut`\n\t\t\t\t\t\t\t\t\t// eventually if another tab wiped the token from storage.\n\t\t\t\t\t\t\t\t\tif (storedTokenNow && storedTokenNow === result.token) {\n\t\t\t\t\t\t\t\t\t\tthis.makeClientLoggedOut();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Possibly a weird callback to call, but better than nothing if\n\t\t\t\t\t\t\t\t// there is a reconnect between \"login result received\" and \"data\n\t\t\t\t\t\t\t\t// ready\".\n\t\t\t\t\t\t\t\tloginCallbacks({ error, loginDetails });\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t// This callback is called once the local cache of the current-user\n\t\t// subscription (and all subscriptions, in fact) are guaranteed to be up to\n\t\t// date.\n\t\tconst loggedInAndDataReadyCallback = (error, result) => {\n\t\t\t// If the login method returns its result but the connection is lost\n\t\t\t// before the data is in the local cache, it'll set an onReconnect (see\n\t\t\t// above). The onReconnect will try to log in using the token, and *it*\n\t\t\t// will call userCallback via its own version of this\n\t\t\t// loggedInAndDataReadyCallback. So we don't have to do anything here.\n\t\t\tif (reconnected) return;\n\n\t\t\t// Note that we need to call this even if _suppressLoggingIn is true,\n\t\t\t// because it could be matching a _setLoggingIn(true) from a\n\t\t\t// half-completed pre-reconnect login method.\n\t\t\tif (error || !result) {\n\t\t\t\terror = error || new Error(`No result from call to ${options.methodName}`);\n\t\t\t\tloginCallbacks({ error });\n\t\t\t\tthis._setLoggingIn(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\toptions.validateResult(result);\n\t\t\t} catch (e) {\n\t\t\t\tloginCallbacks({ error: e });\n\t\t\t\tthis._setLoggingIn(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make the client logged in. (The user data should already be loaded!)\n\t\t\tthis.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n\n\t\t\t// use Tracker to make we sure have a user before calling the callbacks\n\t\t\tTracker.autorun(async (computation) => {\n\t\t\t\tconst user = await Tracker.withComputation(computation, () => Meteor.userAsync());\n\n\t\t\t\tif (user) {\n\t\t\t\t\tloginCallbacks({ loginDetails: result });\n\t\t\t\t\tthis._setLoggingIn(false);\n\t\t\t\t\tcomputation.stop();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (!options._suppressLoggingIn) {\n\t\t\tthis._setLoggingIn(true);\n\t\t}\n\t\tthis.connection.applyAsync(options.methodName, options.methodArguments, { wait: true, onResultReceived }, loggedInAndDataReadyCallback);\n\t}\n\n\tmakeClientLoggedOut() {\n\t\t// Ensure client was successfully logged in before running logout hooks.\n\t\tif (this.connection._userId) {\n\t\t\tthis._onLogoutHook.each((callback) => {\n\t\t\t\tcallback();\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\t\tthis._unstoreLoginToken();\n\t\tthis.connection.setUserId(null);\n\t\tthis._reconnectStopper && this._reconnectStopper.stop();\n\t}\n\n\tmakeClientLoggedIn(userId, token, tokenExpires) {\n\t\tthis._storeLoginToken(userId, token, tokenExpires);\n\t\tthis.connection.setUserId(userId);\n\t}\n\n\t///\n\t/// LOGIN SERVICES\n\t///\n\n\t// A reactive function returning whether the loginServiceConfiguration\n\t// subscription is ready. Used by accounts-ui to hide the login button\n\t// until we have all the configuration loaded\n\t//\n\tloginServicesConfigured() {\n\t\treturn this._loginServicesHandle.ready();\n\t}\n\n\t// Some login services such as the redirect login flow or the resume\n\t// login handler can log the user in at page load time.  The\n\t// Meteor.loginWithX functions have a callback argument, but the\n\t// callback function instance won't be in memory any longer if the\n\t// page was reloaded.  The `onPageLoadLogin` function allows a\n\t// callback to be registered for the case where the login was\n\t// initiated in a previous VM, and we now have the result of the login\n\t// attempt in a new VM.\n\n\t// Register a callback to be called if we have information about a\n\t// login attempt at page load time.  Call the callback immediately if\n\t// we already have the page load login attempt info, otherwise stash\n\t// the callback to be called if and when we do get the attempt info.\n\t//\n\tonPageLoadLogin(f) {\n\t\tif (this._pageLoadLoginAttemptInfo) {\n\t\t\tf(this._pageLoadLoginAttemptInfo);\n\t\t} else {\n\t\t\tthis._pageLoadLoginCallbacks.push(f);\n\t\t}\n\t}\n\n\t// Receive the information about the login attempt at page load time.\n\t// Call registered callbacks, and also record the info in case\n\t// someone's callback hasn't been registered yet.\n\t//\n\t_pageLoadLogin(attemptInfo) {\n\t\tif (this._pageLoadLoginAttemptInfo) {\n\t\t\tMeteor._debug('Ignoring unexpected duplicate page load login attempt info');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._pageLoadLoginCallbacks.forEach((callback) => callback(attemptInfo));\n\t\tthis._pageLoadLoginCallbacks = [];\n\t\tthis._pageLoadLoginAttemptInfo = attemptInfo;\n\t}\n\n\t// _startupCallback executes on onLogin callbacks\n\t// at registration time if already logged in\n\t// this can happen when new AccountsClient is created\n\t// before callbacks are registered see #10157\n\t_startupCallback(callback) {\n\t\t// Are we already logged in?\n\t\tif (this._loginCallbacksCalled) {\n\t\t\t// If already logged in before handler is registered, it's safe to\n\t\t\t// assume type is a 'resume', so we execute the callback at the end\n\t\t\t// of the queue so that Meteor.startup can complete before any\n\t\t\t// embedded onLogin callbacks would execute.\n\t\t\tMeteor.setTimeout(() => callback({ type: 'resume' }), 0);\n\t\t}\n\t}\n\n\t///\n\t/// LOGIN TOKENS\n\t///\n\n\t// These methods deal with storing a login token and user id in the\n\t// browser's localStorage facility. It polls local storage every few\n\t// seconds to synchronize login state between multiple tabs in the same\n\t// browser.\n\n\tloginWithToken(token, callback) {\n\t\tthis.callLoginMethod({\n\t\t\tmethodArguments: [\n\t\t\t\t{\n\t\t\t\t\tresume: token,\n\t\t\t\t},\n\t\t\t],\n\t\t\tuserCallback: callback,\n\t\t});\n\t}\n\n\t// Semi-internal API. Call this function to re-enable auto login after\n\t// if it was disabled at startup.\n\t_enableAutoLogin() {\n\t\tthis._autoLoginEnabled = true;\n\t\tthis._pollStoredLoginToken();\n\t}\n\n\t///\n\t/// STORING\n\t///\n\n\t// Call this from the top level of the test file for any test that does\n\t// logging in and out, to protect multiple tabs running the same tests\n\t// simultaneously from interfering with each others' localStorage.\n\t_isolateLoginTokenForTest() {\n\t\tthis.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n\t\tthis.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n\t}\n\n\t_storeLoginToken(userId, token, tokenExpires) {\n\t\tthis.storageLocation.setItem(this.USER_ID_KEY, userId);\n\t\tthis.storageLocation.setItem(this.LOGIN_TOKEN_KEY, token);\n\t\tif (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());\n\t\tthis.storageLocation.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n\t\t// to ensure that the localstorage poller doesn't end up trying to\n\t\t// connect a second time\n\t\tthis._lastLoginTokenWhenPolled = token;\n\t}\n\n\t_unstoreLoginToken() {\n\t\tthis.storageLocation.removeItem(this.USER_ID_KEY);\n\t\tthis.storageLocation.removeItem(this.LOGIN_TOKEN_KEY);\n\t\tthis.storageLocation.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n\t\t// to ensure that the localstorage poller doesn't end up trying to\n\t\t// connect a second time\n\t\tthis._lastLoginTokenWhenPolled = null;\n\t}\n\n\t// This is private, but it is exported for now because it is used by a\n\t// test in accounts-password.\n\t_storedLoginToken() {\n\t\treturn this.storageLocation.getItem(this.LOGIN_TOKEN_KEY);\n\t}\n\n\t_storedLoginTokenExpires() {\n\t\treturn this.storageLocation.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\t}\n\n\t_storedUserId() {\n\t\treturn this.storageLocation.getItem(this.USER_ID_KEY);\n\t}\n\n\t_unstoreLoginTokenIfExpiresSoon() {\n\t\tconst tokenExpires = this._storedLoginTokenExpires();\n\t\tif (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n\t\t\tthis._unstoreLoginToken();\n\t\t}\n\t}\n\n\t///\n\t/// AUTO-LOGIN\n\t///\n\n\t_initLocalStorage() {\n\t\t// Key names to use in localStorage\n\t\tthis.LOGIN_TOKEN_KEY = 'Meteor.loginToken';\n\t\tthis.LOGIN_TOKEN_EXPIRES_KEY = 'Meteor.loginTokenExpires';\n\t\tthis.USER_ID_KEY = 'Meteor.userId';\n\n\t\tconst rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n\t\tif (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n\t\t\t// We want to keep using the same keys for existing apps that do not\n\t\t\t// set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n\t\t\t// to log in again after an app updates to a version of Meteor that\n\t\t\t// contains this code, but it's generally preferable to namespace the\n\t\t\t// keys so that connections from distinct apps to distinct DDP URLs\n\t\t\t// will be distinct in Meteor._localStorage.\n\t\t\tlet namespace = `:${this.connection._stream.rawUrl}`;\n\t\t\tif (rootUrlPathPrefix) {\n\t\t\t\tnamespace += `:${rootUrlPathPrefix}`;\n\t\t\t}\n\t\t\tthis.LOGIN_TOKEN_KEY += namespace;\n\t\t\tthis.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n\t\t\tthis.USER_ID_KEY += namespace;\n\t\t}\n\n\t\tlet token;\n\t\tif (this._autoLoginEnabled) {\n\t\t\t// Immediately try to log in via local storage, so that any DDP\n\t\t\t// messages are sent after we have established our user account\n\t\t\tthis._unstoreLoginTokenIfExpiresSoon();\n\t\t\ttoken = this._storedLoginToken();\n\t\t\tif (token) {\n\t\t\t\t// On startup, optimistically present us as logged in while the\n\t\t\t\t// request is in flight. This reduces page flicker on startup.\n\t\t\t\tconst userId = this._storedUserId();\n\t\t\t\tuserId && this.connection.setUserId(userId);\n\t\t\t\tthis.loginWithToken(token, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tMeteor._debug(`Error logging in with token: ${err}`);\n\t\t\t\t\t\tthis.makeClientLoggedOut();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._pageLoadLogin({\n\t\t\t\t\t\ttype: 'resume',\n\t\t\t\t\t\tallowed: !err,\n\t\t\t\t\t\terror: err,\n\t\t\t\t\t\tmethodName: 'login',\n\t\t\t\t\t\t// XXX This is duplicate code with loginWithToken, but\n\t\t\t\t\t\t// loginWithToken can also be called at other times besides\n\t\t\t\t\t\t// page load.\n\t\t\t\t\t\tmethodArguments: [{ resume: token }],\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Poll local storage every 3 seconds to login if someone logged in in\n\t\t// another tab\n\t\tthis._lastLoginTokenWhenPolled = token;\n\n\t\tif (this._pollIntervalTimer) {\n\t\t\t// Unlikely that _initLocalStorage will be called more than once for\n\t\t\t// the same AccountsClient instance, but just in case...\n\t\t\tclearInterval(this._pollIntervalTimer);\n\t\t}\n\n\t\tthis._pollIntervalTimer = setInterval(() => {\n\t\t\tthis._pollStoredLoginToken();\n\t\t}, 3000);\n\t}\n\n\t_pollStoredLoginToken() {\n\t\tif (!this._autoLoginEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentLoginToken = this._storedLoginToken();\n\n\t\t// != instead of !== just to make sure undefined and null are treated the same\n\t\tif (this._lastLoginTokenWhenPolled != currentLoginToken) {\n\t\t\tif (currentLoginToken) {\n\t\t\t\tthis.loginWithToken(currentLoginToken, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthis.makeClientLoggedOut();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.logout();\n\t\t\t}\n\t\t}\n\n\t\tthis._lastLoginTokenWhenPolled = currentLoginToken;\n\t}\n\n\t///\n\t/// URLS\n\t///\n\n\t_initUrlMatching() {\n\t\t// By default, allow the autologin process to happen.\n\t\tthis._autoLoginEnabled = true;\n\n\t\t// We only support one callback per URL.\n\t\tthis._accountsCallbacks = {};\n\n\t\t// Try to match the saved value of window.location.hash.\n\t\tthis._attemptToMatchHash();\n\t}\n\n\t// Separate out this functionality for testing\n\t_attemptToMatchHash() {\n\t\tattemptToMatchHash(this, this.savedHash, defaultSuccessHandler);\n\t}\n\n\t/**\n\t * @summary Register a function to call when a reset password link is clicked\n\t * in an email sent by\n\t * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n\t * This function should be called in top-level code, not inside\n\t * `Meteor.startup()`.\n\t * @memberof! Accounts\n\t * @name onResetPasswordLink\n\t * @param  {Function} callback The function to call. It is given two arguments:\n\t *\n\t * 1. `token`: A password reset token that can be passed to\n\t * [`Accounts.resetPassword`](#accounts_resetpassword).\n\t * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n\t * login process is suspended until this function is called, so that the\n\t * password for user A can be reset even if user B was logged in.\n\t * @locus Client\n\t */\n\tonResetPasswordLink(callback) {\n\t\tif (this._accountsCallbacks['reset-password']) {\n\t\t\tMeteor._debug('Accounts.onResetPasswordLink was called more than once. ' + 'Only one callback added will be executed.');\n\t\t}\n\n\t\tthis._accountsCallbacks['reset-password'] = callback;\n\t}\n\n\t/**\n\t * @summary Register a function to call when an email verification link is\n\t * clicked in an email sent by\n\t * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n\t * This function should be called in top-level code, not inside\n\t * `Meteor.startup()`.\n\t * @memberof! Accounts\n\t * @name onEmailVerificationLink\n\t * @param  {Function} callback The function to call. It is given two arguments:\n\t *\n\t * 1. `token`: An email verification token that can be passed to\n\t * [`Accounts.verifyEmail`](#accounts_verifyemail).\n\t * 2. `done`: A function to call when the email verification UI flow is complete.\n\t * The normal login process is suspended until this function is called, so\n\t * that the user can be notified that they are verifying their email before\n\t * being logged in.\n\t * @locus Client\n\t */\n\tonEmailVerificationLink(callback) {\n\t\tif (this._accountsCallbacks['verify-email']) {\n\t\t\tMeteor._debug('Accounts.onEmailVerificationLink was called more than once. ' + 'Only one callback added will be executed.');\n\t\t}\n\n\t\tthis._accountsCallbacks['verify-email'] = callback;\n\t}\n\n\t/**\n\t * @summary Register a function to call when an account enrollment link is\n\t * clicked in an email sent by\n\t * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n\t * This function should be called in top-level code, not inside\n\t * `Meteor.startup()`.\n\t * @memberof! Accounts\n\t * @name onEnrollmentLink\n\t * @param  {Function} callback The function to call. It is given two arguments:\n\t *\n\t * 1. `token`: A password reset token that can be passed to\n\t * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n\t * enrolled account a password.\n\t * 2. `done`: A function to call when the enrollment UI flow is complete.\n\t * The normal login process is suspended until this function is called, so that\n\t * user A can be enrolled even if user B was logged in.\n\t * @locus Client\n\t */\n\tonEnrollmentLink(callback) {\n\t\tif (this._accountsCallbacks['enroll-account']) {\n\t\t\tMeteor._debug('Accounts.onEnrollmentLink was called more than once. ' + 'Only one callback added will be executed.');\n\t\t}\n\n\t\tthis._accountsCallbacks['enroll-account'] = callback;\n\t}\n}\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`,\n * `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = () => Accounts.loggingIn();\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in\n * progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = () => Accounts.loggingOut();\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = (callback) => Accounts.logout(callback);\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = (callback) => Accounts.logoutOtherClients(callback);\n\n/**\n * @summary Login with a Meteor access token.\n * @locus Client\n * @param {Object} [token] Local storage token for use with login across\n * multiple tabs in the same browser.\n * @param {Function} [callback] Optional callback. Called with no arguments on\n * success.\n * @importFromPackage meteor\n */\nMeteor.loginWithToken = (token, callback) => Accounts.loginWithToken(token, callback);\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n\tconst { Template } = Package.blaze.Blaze;\n\n\t/**\n\t * @global\n\t * @name  currentUser\n\t * @isHelper true\n\t * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n\t */\n\tTemplate.registerHelper('currentUser', () => Meteor.user());\n\n\t// TODO: the code above needs to be changed to Meteor.userAsync() when we have\n\t// a way to make it reactive using async.\n\t// Template.registerHelper('currentUserAsync',\n\t//  async () => await Meteor.userAsync());\n\n\t/**\n\t * @global\n\t * @name  loggingIn\n\t * @isHelper true\n\t * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n\t */\n\tTemplate.registerHelper('loggingIn', () => Meteor.loggingIn());\n\n\t/**\n\t * @global\n\t * @name  loggingOut\n\t * @isHelper true\n\t * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n\t */\n\tTemplate.registerHelper('loggingOut', () => Meteor.loggingOut());\n\n\t/**\n\t * @global\n\t * @name  loggingInOrOut\n\t * @isHelper true\n\t * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n\t */\n\tTemplate.registerHelper('loggingInOrOut', () => Meteor.loggingIn() || Meteor.loggingOut());\n}\n\nconst defaultSuccessHandler = function (token, urlPart) {\n\t// put login in a suspended state to wait for the interaction to finish\n\tthis._autoLoginEnabled = false;\n\n\t// wait for other packages to register callbacks\n\tMeteor.startup(() => {\n\t\t// if a callback has been registered for this kind of token, call it\n\t\tif (this._accountsCallbacks[urlPart]) {\n\t\t\tthis._accountsCallbacks[urlPart](token, () => this._enableAutoLogin());\n\t\t}\n\t});\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nconst attemptToMatchHash = (accounts, hash, success) => {\n\t// All of the special hash URLs we support for accounts interactions\n\t['reset-password', 'verify-email', 'enroll-account'].forEach((urlPart) => {\n\t\tlet token;\n\n\t\tconst tokenRegex = new RegExp(`^\\\\#\\\\/${urlPart}\\\\/(.*)$`);\n\t\tconst match = hash.match(tokenRegex);\n\n\t\tif (match) {\n\t\t\ttoken = match[1];\n\n\t\t\t// XXX COMPAT WITH 0.9.3\n\t\t\tif (urlPart === 'reset-password') {\n\t\t\t\taccounts._resetPasswordToken = token;\n\t\t\t} else if (urlPart === 'verify-email') {\n\t\t\t\taccounts._verifyEmailToken = token;\n\t\t\t} else if (urlPart === 'enroll-account') {\n\t\t\t\taccounts._enrollAccountToken = token;\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// If no handlers match the hash, then maybe it's meant to be consumed\n\t\t// by some entirely different code, so we only clear it the first time\n\t\t// a handler successfully matches. Note that later handlers reuse the\n\t\t// savedHash, so clearing window.location.hash here will not interfere\n\t\t// with their needs.\n\t\twindow.location.hash = '';\n\n\t\t// Do some stuff with the token we matched\n\t\tsuccess.call(accounts, token, urlPart);\n\t});\n};\n\n// Export for testing\nexport const AccountsTest = {\n\tattemptToMatchHash: (hash, success) => attemptToMatchHash(Accounts, hash, success),\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3ad2e2f91c60235ce56a2e9424e993da837d4f16"}
