{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/markRoomResponded.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/hooks/markRoomResponded.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/markRoomResponded.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/markRoomResponded.ts","sourceRoot":"","sources":["app/livechat/server/hooks/markRoomResponded.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom, IMessage } from '@rocket.chat/core-typings';\nimport { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { LivechatRooms, LivechatVisitors, LivechatInquiry } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function markRoomResponded(\n\tmessage: IMessage,\n\troom: IOmnichannelRoom,\n\troomUpdater: Updater<IOmnichannelRoom>,\n): Promise<IOmnichannelRoom['responseBy'] | undefined> {\n\tif (isSystemMessage(message) || isEditedMessage(message) || isMessageFromVisitor(message)) {\n\t\treturn;\n\t}\n\n\tconst monthYear = moment().format('YYYY-MM');\n\tconst isVisitorActive = await LivechatVisitors.isVisitorActiveOnPeriod(room.v._id, monthYear);\n\n\t// Case: agent answers & visitor is not active, we mark visitor as active\n\tif (!isVisitorActive) {\n\t\tawait LivechatVisitors.markVisitorActiveForPeriod(room.v._id, monthYear);\n\t}\n\n\tif (!room.v?.activity?.includes(monthYear)) {\n\t\tLivechatRooms.getVisitorActiveForPeriodUpdateQuery(monthYear, roomUpdater);\n\t\tconst livechatInquiry = await LivechatInquiry.markInquiryActiveForPeriod(room._id, monthYear);\n\n\t\tif (livechatInquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiry, 'updated', { v: livechatInquiry.v });\n\t\t}\n\t}\n\n\tif (!room.waitingResponse) {\n\t\t// case where agent sends second message or any subsequent message in a room before visitor responds to the first message\n\t\t// in this case, we just need to update the lastMessageTs of the responseBy object\n\t\tif (room.responseBy) {\n\t\t\tLivechatRooms.getAgentLastMessageTsUpdateQuery(roomUpdater);\n\t\t}\n\n\t\treturn room.responseBy;\n\t}\n\n\t// Since we're updating the whole object anyways, we re-use the same values from object (or from message if not present)\n\t// And then we update the lastMessageTs, which is the only thing that should be updating here\n\tconst { responseBy: { _id, username, firstResponseTs } = {} } = room;\n\tconst responseBy: IOmnichannelRoom['responseBy'] = {\n\t\t_id: _id || message.u._id,\n\t\tusername: username || message.u.username,\n\t\tfirstResponseTs: firstResponseTs || new Date(message.ts),\n\t\tlastMessageTs: new Date(message.ts),\n\t};\n\n\tLivechatRooms.getResponseByRoomIdUpdateQuery(responseBy, roomUpdater);\n\n\treturn responseBy;\n}\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isMessageFromVisitor(message) || isSystemMessage(message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait markRoomResponded(message, room, roomUpdater);\n\t},\n\tcallbacks.priority.HIGH,\n\t'markRoomResponded',\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/markRoomResponded.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/hooks/markRoomResponded.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/markRoomResponded.ts","sourceRoot":"","sources":["app/livechat/server/hooks/markRoomResponded.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom, IMessage } from '@rocket.chat/core-typings';\nimport { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { LivechatRooms, LivechatVisitors, LivechatInquiry } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function markRoomResponded(\n\tmessage: IMessage,\n\troom: IOmnichannelRoom,\n\troomUpdater: Updater<IOmnichannelRoom>,\n): Promise<IOmnichannelRoom['responseBy'] | undefined> {\n\tif (isSystemMessage(message) || isEditedMessage(message) || isMessageFromVisitor(message)) {\n\t\treturn;\n\t}\n\n\tconst monthYear = moment().format('YYYY-MM');\n\tconst isVisitorActive = await LivechatVisitors.isVisitorActiveOnPeriod(room.v._id, monthYear);\n\n\t// Case: agent answers & visitor is not active, we mark visitor as active\n\tif (!isVisitorActive) {\n\t\tawait LivechatVisitors.markVisitorActiveForPeriod(room.v._id, monthYear);\n\t}\n\n\tif (!room.v?.activity?.includes(monthYear)) {\n\t\tLivechatRooms.getVisitorActiveForPeriodUpdateQuery(monthYear, roomUpdater);\n\t\tconst livechatInquiry = await LivechatInquiry.markInquiryActiveForPeriod(room._id, monthYear);\n\n\t\tif (livechatInquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiry, 'updated', { v: livechatInquiry.v });\n\t\t}\n\t}\n\n\tif (!room.waitingResponse) {\n\t\t// case where agent sends second message or any subsequent message in a room before visitor responds to the first message\n\t\t// in this case, we just need to update the lastMessageTs of the responseBy object\n\t\tif (room.responseBy) {\n\t\t\tLivechatRooms.getAgentLastMessageTsUpdateQuery(roomUpdater);\n\t\t}\n\n\t\treturn room.responseBy;\n\t}\n\n\t// Since we're updating the whole object anyways, we re-use the same values from object (or from message if not present)\n\t// And then we update the lastMessageTs, which is the only thing that should be updating here\n\tconst { responseBy: { _id, username, firstResponseTs } = {} } = room;\n\tconst responseBy: IOmnichannelRoom['responseBy'] = {\n\t\t_id: _id || message.u._id,\n\t\tusername: username || message.u.username,\n\t\tfirstResponseTs: firstResponseTs || new Date(message.ts),\n\t\tlastMessageTs: new Date(message.ts),\n\t};\n\n\tLivechatRooms.getResponseByRoomIdUpdateQuery(responseBy, roomUpdater);\n\n\treturn responseBy;\n}\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isMessageFromVisitor(message) || isSystemMessage(message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait markRoomResponded(message, room, roomUpdater);\n\t},\n\tcallbacks.priority.HIGH,\n\t'markRoomResponded',\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      markRoomResponded: () => markRoomResponded\n    });\n    let isEditedMessage, isMessageFromVisitor, isSystemMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      },\n      isMessageFromVisitor(v) {\n        isMessageFromVisitor = v;\n      },\n      isSystemMessage(v) {\n        isSystemMessage = v;\n      }\n    }, 0);\n    let LivechatRooms, LivechatVisitors, LivechatInquiry;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let notifyOnLivechatInquiryChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnLivechatInquiryChanged(v) {\n        notifyOnLivechatInquiryChanged = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function markRoomResponded(message, room, roomUpdater) {\n      var _room$v, _room$v$activity;\n      if (isSystemMessage(message) || isEditedMessage(message) || isMessageFromVisitor(message)) {\n        return;\n      }\n      const monthYear = moment().format('YYYY-MM');\n      const isVisitorActive = await LivechatVisitors.isVisitorActiveOnPeriod(room.v._id, monthYear);\n      // Case: agent answers & visitor is not active, we mark visitor as active\n      if (!isVisitorActive) {\n        await LivechatVisitors.markVisitorActiveForPeriod(room.v._id, monthYear);\n      }\n      if (!((_room$v = room.v) !== null && _room$v !== void 0 && (_room$v$activity = _room$v.activity) !== null && _room$v$activity !== void 0 && _room$v$activity.includes(monthYear))) {\n        LivechatRooms.getVisitorActiveForPeriodUpdateQuery(monthYear, roomUpdater);\n        const livechatInquiry = await LivechatInquiry.markInquiryActiveForPeriod(room._id, monthYear);\n        if (livechatInquiry) {\n          void notifyOnLivechatInquiryChanged(livechatInquiry, 'updated', {\n            v: livechatInquiry.v\n          });\n        }\n      }\n      if (!room.waitingResponse) {\n        // case where agent sends second message or any subsequent message in a room before visitor responds to the first message\n        // in this case, we just need to update the lastMessageTs of the responseBy object\n        if (room.responseBy) {\n          LivechatRooms.getAgentLastMessageTsUpdateQuery(roomUpdater);\n        }\n        return room.responseBy;\n      }\n      // Since we're updating the whole object anyways, we re-use the same values from object (or from message if not present)\n      // And then we update the lastMessageTs, which is the only thing that should be updating here\n      const {\n        responseBy: {\n          _id,\n          username,\n          firstResponseTs\n        } = {}\n      } = room;\n      const responseBy = {\n        _id: _id || message.u._id,\n        username: username || message.u.username,\n        firstResponseTs: firstResponseTs || new Date(message.ts),\n        lastMessageTs: new Date(message.ts)\n      };\n      LivechatRooms.getResponseByRoomIdUpdateQuery(responseBy, roomUpdater);\n      return responseBy;\n    }\n    callbacks.add('afterOmnichannelSaveMessage', async (message, _ref) => {\n      let {\n        room,\n        roomUpdater\n      } = _ref;\n      if (!message || isEditedMessage(message) || isMessageFromVisitor(message) || isSystemMessage(message)) {\n        return;\n      }\n      await markRoomResponded(message, room, roomUpdater);\n    }, callbacks.priority.HIGH, 'markRoomResponded');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","markRoomResponded","isEditedMessage","isMessageFromVisitor","isSystemMessage","link","v","LivechatRooms","LivechatVisitors","LivechatInquiry","moment","default","callbacks","notifyOnLivechatInquiryChanged","__reifyWaitForDeps__","message","room","roomUpdater","_room$v","_room$v$activity","monthYear","format","isVisitorActive","isVisitorActiveOnPeriod","_id","markVisitorActiveForPeriod","activity","includes","getVisitorActiveForPeriodUpdateQuery","livechatInquiry","markInquiryActiveForPeriod","waitingResponse","responseBy","getAgentLastMessageTsUpdateQuery","username","firstResponseTs","u","Date","ts","lastMessageTs","getResponseByRoomIdUpdateQuery","add","_ref","priority","HIGH","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/hooks/markRoomResponded.ts"],"sourcesContent":["import type { IOmnichannelRoom, IMessage } from '@rocket.chat/core-typings';\nimport { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { LivechatRooms, LivechatVisitors, LivechatInquiry } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnLivechatInquiryChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function markRoomResponded(\n\tmessage: IMessage,\n\troom: IOmnichannelRoom,\n\troomUpdater: Updater<IOmnichannelRoom>,\n): Promise<IOmnichannelRoom['responseBy'] | undefined> {\n\tif (isSystemMessage(message) || isEditedMessage(message) || isMessageFromVisitor(message)) {\n\t\treturn;\n\t}\n\n\tconst monthYear = moment().format('YYYY-MM');\n\tconst isVisitorActive = await LivechatVisitors.isVisitorActiveOnPeriod(room.v._id, monthYear);\n\n\t// Case: agent answers & visitor is not active, we mark visitor as active\n\tif (!isVisitorActive) {\n\t\tawait LivechatVisitors.markVisitorActiveForPeriod(room.v._id, monthYear);\n\t}\n\n\tif (!room.v?.activity?.includes(monthYear)) {\n\t\tLivechatRooms.getVisitorActiveForPeriodUpdateQuery(monthYear, roomUpdater);\n\t\tconst livechatInquiry = await LivechatInquiry.markInquiryActiveForPeriod(room._id, monthYear);\n\n\t\tif (livechatInquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiry, 'updated', { v: livechatInquiry.v });\n\t\t}\n\t}\n\n\tif (!room.waitingResponse) {\n\t\t// case where agent sends second message or any subsequent message in a room before visitor responds to the first message\n\t\t// in this case, we just need to update the lastMessageTs of the responseBy object\n\t\tif (room.responseBy) {\n\t\t\tLivechatRooms.getAgentLastMessageTsUpdateQuery(roomUpdater);\n\t\t}\n\n\t\treturn room.responseBy;\n\t}\n\n\t// Since we're updating the whole object anyways, we re-use the same values from object (or from message if not present)\n\t// And then we update the lastMessageTs, which is the only thing that should be updating here\n\tconst { responseBy: { _id, username, firstResponseTs } = {} } = room;\n\tconst responseBy: IOmnichannelRoom['responseBy'] = {\n\t\t_id: _id || message.u._id,\n\t\tusername: username || message.u.username,\n\t\tfirstResponseTs: firstResponseTs || new Date(message.ts),\n\t\tlastMessageTs: new Date(message.ts),\n\t};\n\n\tLivechatRooms.getResponseByRoomIdUpdateQuery(responseBy, roomUpdater);\n\n\treturn responseBy;\n}\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isMessageFromVisitor(message) || isSystemMessage(message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait markRoomResponded(message, room, roomUpdater);\n\t},\n\tcallbacks.priority.HIGH,\n\t'markRoomResponded',\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a1c6cea267ce894f085c85a6239f5250a3560752"}
