{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/autotranslate.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/autotranslate.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/autotranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/autotranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/autotranslate.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tMessageAttachment,\n\tISupportedLanguages,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { Markdown } from '../../markdown/server';\nimport { settings } from '../../settings/server';\n\nconst translationLogger = new Logger('AutoTranslate');\n\nconst Providers = Symbol('Providers');\nconst Provider = Symbol('Provider');\n\n/**\n * This class allows translation providers to\n * register,load and also returns the active provider.\n */\nexport class TranslationProviderRegistry {\n\tstatic [Providers]: { [k: string]: AutoTranslate } = {};\n\n\tstatic enabled = false;\n\n\tstatic [Provider]: string | null = null;\n\n\t/**\n\t * Registers the translation provider into the registry.\n\t * @param {*} provider\n\t */\n\tstatic registerProvider(provider: AutoTranslate): void {\n\t\t// get provider information\n\t\tconst metadata = provider._getProviderMetadata();\n\t\tif (!metadata) {\n\t\t\ttranslationLogger.error('Provider metadata is not defined');\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Providers][metadata.name] = provider;\n\t}\n\n\t/**\n\t * Return the active Translation provider\n\t */\n\tstatic getActiveProvider(): AutoTranslate | null {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\t\tconst provider = TranslationProviderRegistry[Provider];\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TranslationProviderRegistry[Providers][provider];\n\t}\n\n\tstatic async getSupportedLanguages(target: string): Promise<ISupportedLanguage[] | undefined> {\n\t\treturn TranslationProviderRegistry.enabled ? TranslationProviderRegistry.getActiveProvider()?.getSupportedLanguages(target) : undefined;\n\t}\n\n\tstatic async translateMessage(message: IMessage, room: IRoom, targetLanguage?: string): Promise<IMessage | null> {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn provider.translateMessage(message, { room, targetLanguage });\n\t}\n\n\tstatic getProviders(): AutoTranslate[] {\n\t\treturn Object.values(TranslationProviderRegistry[Providers]);\n\t}\n\n\tstatic setCurrentProvider(provider: string): void {\n\t\tif (provider === TranslationProviderRegistry[Provider]) {\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Provider] = provider;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic setEnable(enabled: boolean): void {\n\t\tTranslationProviderRegistry.enabled = enabled;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic registerCallbacks(): void {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\tcallbacks.remove('afterSaveMessage', 'autotranslate');\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'afterSaveMessage',\n\t\t\t(message, { room }) => provider.translateMessage(message, { room }),\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'autotranslate',\n\t\t);\n\t}\n}\n\n/**\n * Generic auto translate base implementation.\n * This class provides generic parts of implementation for\n * tokenization, detokenization, call back register and unregister.\n * @abstract\n * @class\n */\nexport abstract class AutoTranslate {\n\tname: string;\n\n\tlanguages: string[];\n\n\tsupportedLanguages: ISupportedLanguages;\n\n\t/**\n\t * Encapsulate the api key and provider settings.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.name = '';\n\t\tthis.languages = [];\n\t\tthis.supportedLanguages = {};\n\t}\n\n\t/**\n\t * Extracts non-translatable parts of a message\n\t * @param {object} message\n\t * @return {object} message\n\t */\n\ttokenize(message: IMessage): IMessage {\n\t\tif (!message.tokens || !Array.isArray(message.tokens)) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\t\tmessage = this.tokenizeEmojis(message);\n\t\tmessage = this.tokenizeCode(message);\n\t\tmessage = this.tokenizeURLs(message);\n\t\tmessage = this.tokenizeMentions(message);\n\t\treturn message;\n\t}\n\n\ttokenizeEmojis(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.msg = message.msg.replace(/:[+\\w\\d]+:/g, (match) => {\n\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\tmessage.tokens?.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: match,\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t}\n\n\ttokenizeURLs(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tconst schemes = 'http,https';\n\n\t\t// Support ![alt text](http://image url) and [text](http://link)\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:${schemes}):\\\\/\\\\/[^\\\\)]+\\\\))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\t// Support <http://link|Text>\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`((?:<|&lt;)(?:${schemes}):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\treturn message;\n\t}\n\n\ttokenizeCode(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.html = message.msg;\n\t\tmessage = Markdown.parseMessageNotEscaped(message);\n\n\t\t// Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n\t\tconst regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n\t\tmessage.msg = message.msg.replace(regexWrappedParagraph, '');\n\n\t\tfor (const [tokenIndex, value] of message.tokens?.entries() ?? []) {\n\t\t\tconst { token } = value;\n\t\t\tif (token.indexOf('notranslate') === -1) {\n\t\t\t\tconst newToken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.msg = message.msg.replace(token, newToken);\n\t\t\t\tmessage.tokens ? (message.tokens[tokenIndex].token = newToken) : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t}\n\n\ttokenizeMentions(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tif (message.mentions && message.mentions.length > 0) {\n\t\t\tmessage.mentions.forEach((mention) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(@${mention.username})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (message.channels && message.channels.length > 0) {\n\t\t\tmessage.channels.forEach((channel) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(#${channel.name})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tdeTokenize(message: IMessage): string {\n\t\tif (message.tokens && message.tokens?.length > 0) {\n\t\t\tfor (const { token, text, noHtml } of message.tokens) {\n\t\t\t\tmessage.msg = message.msg.replace(token, () => noHtml || text);\n\t\t\t}\n\t\t}\n\t\treturn message.msg;\n\t}\n\n\t/**\n\t * Triggers the translation of the prepared (tokenized) message\n\t * and persists the result\n\t * @public\n\t * @param {object} message\n\t * @param {object} room\n\t * @param {object} targetLanguage\n\t * @returns {object} unmodified message object.\n\t */\n\tasync translateMessage(message: IMessage, { room, targetLanguage }: { room: IRoom; targetLanguage?: string }): Promise<IMessage | null> {\n\t\tlet targetLanguages: string[];\n\t\tif (targetLanguage) {\n\t\t\ttargetLanguages = [targetLanguage];\n\t\t} else {\n\t\t\ttargetLanguages = (await Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, message.u?._id)).filter(isTruthy);\n\t\t}\n\t\tif (message.msg) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tlet targetMessage = Object.assign({}, message);\n\t\t\t\ttargetMessage.html = escapeHTML(String(targetMessage.msg));\n\t\t\t\ttargetMessage = this.tokenize(targetMessage);\n\n\t\t\t\tconst translations = await this._translateMessage(targetMessage, targetLanguages);\n\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\tawait Messages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider] || '');\n\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (message.attachments && message.attachments.length > 0) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tfor await (const [index, attachment] of message.attachments?.entries() ?? []) {\n\t\t\t\t\tif (attachment.description || attachment.text) {\n\t\t\t\t\t\t// Removes the initial link `[ ](quoterl)` from quote message before translation\n\t\t\t\t\t\tconst translatedText = attachment?.text?.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') || attachment?.text;\n\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };\n\t\t\t\t\t\tconst translations = await this._translateAttachmentDescriptions(attachmentMessage, targetLanguages);\n\n\t\t\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\t\t\tawait Messages.addAttachmentTranslations(message._id, String(index), translations);\n\t\t\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Messages.findOneById(message._id);\n\t}\n\n\tprivate notifyTranslatedMessage(messageId: string): void {\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: messageId,\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider which is used by\n\t * the generic implementation\n\t * @abstract\n\t * @protected\n\t * @returns { name, displayName, settings }\n\t\t};\n\t */\n\tabstract _getProviderMetadata(): IProviderMetadata;\n\n\t/**\n\t * Provides the possible languages _from_ which a message can be translated into a target language\n\t * @abstract\n\t * @protected\n\t * @param {string} target - the language into which shall be translated\n\t * @returns [{ language, name }]\n\t */\n\tabstract getSupportedLanguages(target: string): Promise<ISupportedLanguage[]>;\n\n\t/**\n\t * Performs the actual translation of a message,\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @protected\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @return {object}\n\t */\n\tabstract _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult>;\n\n\t/**\n\t * Performs the actual translation of an attachment (precisely its description),\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tabstract _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult>;\n}\n\nMeteor.startup(() => {\n\t/** Register the active service provider on the 'AfterSaveMessage' callback.\n\t *  So the registered provider will be invoked when a message is saved.\n\t *  All the other inactive service provider must be deactivated.\n\t */\n\tsettings.watch<string>('AutoTranslate_ServiceProvider', (providerName) => {\n\t\tTranslationProviderRegistry.setCurrentProvider(providerName);\n\t});\n\n\t// Get Auto Translate Active flag\n\tsettings.watch<boolean>('AutoTranslate_Enabled', (value) => {\n\t\tTranslationProviderRegistry.setEnable(value);\n\t});\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/autotranslate.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/autotranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/autotranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/autotranslate.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tMessageAttachment,\n\tISupportedLanguages,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { Markdown } from '../../markdown/server';\nimport { settings } from '../../settings/server';\n\nconst translationLogger = new Logger('AutoTranslate');\n\nconst Providers = Symbol('Providers');\nconst Provider = Symbol('Provider');\n\n/**\n * This class allows translation providers to\n * register,load and also returns the active provider.\n */\nexport class TranslationProviderRegistry {\n\tstatic [Providers]: { [k: string]: AutoTranslate } = {};\n\n\tstatic enabled = false;\n\n\tstatic [Provider]: string | null = null;\n\n\t/**\n\t * Registers the translation provider into the registry.\n\t * @param {*} provider\n\t */\n\tstatic registerProvider(provider: AutoTranslate): void {\n\t\t// get provider information\n\t\tconst metadata = provider._getProviderMetadata();\n\t\tif (!metadata) {\n\t\t\ttranslationLogger.error('Provider metadata is not defined');\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Providers][metadata.name] = provider;\n\t}\n\n\t/**\n\t * Return the active Translation provider\n\t */\n\tstatic getActiveProvider(): AutoTranslate | null {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\t\tconst provider = TranslationProviderRegistry[Provider];\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TranslationProviderRegistry[Providers][provider];\n\t}\n\n\tstatic async getSupportedLanguages(target: string): Promise<ISupportedLanguage[] | undefined> {\n\t\treturn TranslationProviderRegistry.enabled ? TranslationProviderRegistry.getActiveProvider()?.getSupportedLanguages(target) : undefined;\n\t}\n\n\tstatic async translateMessage(message: IMessage, room: IRoom, targetLanguage?: string): Promise<IMessage | null> {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn provider.translateMessage(message, { room, targetLanguage });\n\t}\n\n\tstatic getProviders(): AutoTranslate[] {\n\t\treturn Object.values(TranslationProviderRegistry[Providers]);\n\t}\n\n\tstatic setCurrentProvider(provider: string): void {\n\t\tif (provider === TranslationProviderRegistry[Provider]) {\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Provider] = provider;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic setEnable(enabled: boolean): void {\n\t\tTranslationProviderRegistry.enabled = enabled;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic registerCallbacks(): void {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\tcallbacks.remove('afterSaveMessage', 'autotranslate');\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'afterSaveMessage',\n\t\t\t(message, { room }) => provider.translateMessage(message, { room }),\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'autotranslate',\n\t\t);\n\t}\n}\n\n/**\n * Generic auto translate base implementation.\n * This class provides generic parts of implementation for\n * tokenization, detokenization, call back register and unregister.\n * @abstract\n * @class\n */\nexport abstract class AutoTranslate {\n\tname: string;\n\n\tlanguages: string[];\n\n\tsupportedLanguages: ISupportedLanguages;\n\n\t/**\n\t * Encapsulate the api key and provider settings.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.name = '';\n\t\tthis.languages = [];\n\t\tthis.supportedLanguages = {};\n\t}\n\n\t/**\n\t * Extracts non-translatable parts of a message\n\t * @param {object} message\n\t * @return {object} message\n\t */\n\ttokenize(message: IMessage): IMessage {\n\t\tif (!message.tokens || !Array.isArray(message.tokens)) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\t\tmessage = this.tokenizeEmojis(message);\n\t\tmessage = this.tokenizeCode(message);\n\t\tmessage = this.tokenizeURLs(message);\n\t\tmessage = this.tokenizeMentions(message);\n\t\treturn message;\n\t}\n\n\ttokenizeEmojis(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.msg = message.msg.replace(/:[+\\w\\d]+:/g, (match) => {\n\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\tmessage.tokens?.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: match,\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t}\n\n\ttokenizeURLs(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tconst schemes = 'http,https';\n\n\t\t// Support ![alt text](http://image url) and [text](http://link)\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:${schemes}):\\\\/\\\\/[^\\\\)]+\\\\))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\t// Support <http://link|Text>\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`((?:<|&lt;)(?:${schemes}):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\treturn message;\n\t}\n\n\ttokenizeCode(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.html = message.msg;\n\t\tmessage = Markdown.parseMessageNotEscaped(message);\n\n\t\t// Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n\t\tconst regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n\t\tmessage.msg = message.msg.replace(regexWrappedParagraph, '');\n\n\t\tfor (const [tokenIndex, value] of message.tokens?.entries() ?? []) {\n\t\t\tconst { token } = value;\n\t\t\tif (token.indexOf('notranslate') === -1) {\n\t\t\t\tconst newToken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.msg = message.msg.replace(token, newToken);\n\t\t\t\tmessage.tokens ? (message.tokens[tokenIndex].token = newToken) : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t}\n\n\ttokenizeMentions(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tif (message.mentions && message.mentions.length > 0) {\n\t\t\tmessage.mentions.forEach((mention) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(@${mention.username})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (message.channels && message.channels.length > 0) {\n\t\t\tmessage.channels.forEach((channel) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(#${channel.name})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tdeTokenize(message: IMessage): string {\n\t\tif (message.tokens && message.tokens?.length > 0) {\n\t\t\tfor (const { token, text, noHtml } of message.tokens) {\n\t\t\t\tmessage.msg = message.msg.replace(token, () => noHtml || text);\n\t\t\t}\n\t\t}\n\t\treturn message.msg;\n\t}\n\n\t/**\n\t * Triggers the translation of the prepared (tokenized) message\n\t * and persists the result\n\t * @public\n\t * @param {object} message\n\t * @param {object} room\n\t * @param {object} targetLanguage\n\t * @returns {object} unmodified message object.\n\t */\n\tasync translateMessage(message: IMessage, { room, targetLanguage }: { room: IRoom; targetLanguage?: string }): Promise<IMessage | null> {\n\t\tlet targetLanguages: string[];\n\t\tif (targetLanguage) {\n\t\t\ttargetLanguages = [targetLanguage];\n\t\t} else {\n\t\t\ttargetLanguages = (await Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, message.u?._id)).filter(isTruthy);\n\t\t}\n\t\tif (message.msg) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tlet targetMessage = Object.assign({}, message);\n\t\t\t\ttargetMessage.html = escapeHTML(String(targetMessage.msg));\n\t\t\t\ttargetMessage = this.tokenize(targetMessage);\n\n\t\t\t\tconst translations = await this._translateMessage(targetMessage, targetLanguages);\n\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\tawait Messages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider] || '');\n\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (message.attachments && message.attachments.length > 0) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tfor await (const [index, attachment] of message.attachments?.entries() ?? []) {\n\t\t\t\t\tif (attachment.description || attachment.text) {\n\t\t\t\t\t\t// Removes the initial link `[ ](quoterl)` from quote message before translation\n\t\t\t\t\t\tconst translatedText = attachment?.text?.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') || attachment?.text;\n\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };\n\t\t\t\t\t\tconst translations = await this._translateAttachmentDescriptions(attachmentMessage, targetLanguages);\n\n\t\t\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\t\t\tawait Messages.addAttachmentTranslations(message._id, String(index), translations);\n\t\t\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Messages.findOneById(message._id);\n\t}\n\n\tprivate notifyTranslatedMessage(messageId: string): void {\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: messageId,\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider which is used by\n\t * the generic implementation\n\t * @abstract\n\t * @protected\n\t * @returns { name, displayName, settings }\n\t\t};\n\t */\n\tabstract _getProviderMetadata(): IProviderMetadata;\n\n\t/**\n\t * Provides the possible languages _from_ which a message can be translated into a target language\n\t * @abstract\n\t * @protected\n\t * @param {string} target - the language into which shall be translated\n\t * @returns [{ language, name }]\n\t */\n\tabstract getSupportedLanguages(target: string): Promise<ISupportedLanguage[]>;\n\n\t/**\n\t * Performs the actual translation of a message,\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @protected\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @return {object}\n\t */\n\tabstract _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult>;\n\n\t/**\n\t * Performs the actual translation of an attachment (precisely its description),\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tabstract _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult>;\n}\n\nMeteor.startup(() => {\n\t/** Register the active service provider on the 'AfterSaveMessage' callback.\n\t *  So the registered provider will be invoked when a message is saved.\n\t *  All the other inactive service provider must be deactivated.\n\t */\n\tsettings.watch<string>('AutoTranslate_ServiceProvider', (providerName) => {\n\t\tTranslationProviderRegistry.setCurrentProvider(providerName);\n\t});\n\n\t// Get Auto Translate Active flag\n\tsettings.watch<boolean>('AutoTranslate_Enabled', (value) => {\n\t\tTranslationProviderRegistry.setEnable(value);\n\t});\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      TranslationProviderRegistry: () => TranslationProviderRegistry,\n      AutoTranslate: () => AutoTranslate\n    });\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let Messages, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let escapeHTML;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeHTML(v) {\n        escapeHTML = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 4);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 5);\n    let isTruthy;\n    module.link(\"../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 6);\n    let notifyOnMessageChange;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 7);\n    let Markdown;\n    module.link(\"../../markdown/server\", {\n      Markdown(v) {\n        Markdown = v;\n      }\n    }, 8);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 9);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const translationLogger = new Logger('AutoTranslate');\n    const Providers = Symbol('Providers');\n    const Provider = Symbol('Provider');\n    /**\n     * This class allows translation providers to\n     * register,load and also returns the active provider.\n     */\n    class TranslationProviderRegistry {\n      /**\n       * Registers the translation provider into the registry.\n       * @param {*} provider\n       */\n      static registerProvider(provider) {\n        // get provider information\n        const metadata = provider._getProviderMetadata();\n        if (!metadata) {\n          translationLogger.error('Provider metadata is not defined');\n          return;\n        }\n        TranslationProviderRegistry[Providers][metadata.name] = provider;\n      }\n      /**\n       * Return the active Translation provider\n       */\n      static getActiveProvider() {\n        if (!TranslationProviderRegistry.enabled) {\n          return null;\n        }\n        const provider = TranslationProviderRegistry[Provider];\n        if (!provider) {\n          return null;\n        }\n        return TranslationProviderRegistry[Providers][provider];\n      }\n      static async getSupportedLanguages(target) {\n        var _TranslationProviderR;\n        return TranslationProviderRegistry.enabled ? (_TranslationProviderR = TranslationProviderRegistry.getActiveProvider()) === null || _TranslationProviderR === void 0 ? void 0 : _TranslationProviderR.getSupportedLanguages(target) : undefined;\n      }\n      static async translateMessage(message, room, targetLanguage) {\n        if (!TranslationProviderRegistry.enabled) {\n          return null;\n        }\n        const provider = TranslationProviderRegistry.getActiveProvider();\n        if (!provider) {\n          return null;\n        }\n        return provider.translateMessage(message, {\n          room,\n          targetLanguage\n        });\n      }\n      static getProviders() {\n        return Object.values(TranslationProviderRegistry[Providers]);\n      }\n      static setCurrentProvider(provider) {\n        if (provider === TranslationProviderRegistry[Provider]) {\n          return;\n        }\n        TranslationProviderRegistry[Provider] = provider;\n        TranslationProviderRegistry.registerCallbacks();\n      }\n      static setEnable(enabled) {\n        TranslationProviderRegistry.enabled = enabled;\n        TranslationProviderRegistry.registerCallbacks();\n      }\n      static registerCallbacks() {\n        if (!TranslationProviderRegistry.enabled) {\n          callbacks.remove('afterSaveMessage', 'autotranslate');\n          return;\n        }\n        const provider = TranslationProviderRegistry.getActiveProvider();\n        if (!provider) {\n          return;\n        }\n        callbacks.add('afterSaveMessage', (message, _ref) => {\n          let {\n            room\n          } = _ref;\n          return provider.translateMessage(message, {\n            room\n          });\n        }, callbacks.priority.MEDIUM, 'autotranslate');\n      }\n    }\n    TranslationProviderRegistry[Providers] = {};\n    TranslationProviderRegistry.enabled = false;\n    TranslationProviderRegistry[Provider] = null;\n    class AutoTranslate {\n      /**\n       * Encapsulate the api key and provider settings.\n       * @constructor\n       */\n      constructor() {\n        this.name = void 0;\n        this.languages = void 0;\n        this.supportedLanguages = void 0;\n        this.name = '';\n        this.languages = [];\n        this.supportedLanguages = {};\n      }\n      /**\n       * Extracts non-translatable parts of a message\n       * @param {object} message\n       * @return {object} message\n       */\n      tokenize(message) {\n        if (!message.tokens || !Array.isArray(message.tokens)) {\n          message.tokens = [];\n        }\n        message = this.tokenizeEmojis(message);\n        message = this.tokenizeCode(message);\n        message = this.tokenizeURLs(message);\n        message = this.tokenizeMentions(message);\n        return message;\n      }\n      tokenizeEmojis(message) {\n        var _message$tokens;\n        let count = ((_message$tokens = message.tokens) === null || _message$tokens === void 0 ? void 0 : _message$tokens.length) || 0;\n        message.msg = message.msg.replace(/:[+\\w\\d]+:/g, match => {\n          var _message$tokens2;\n          const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          (_message$tokens2 = message.tokens) === null || _message$tokens2 === void 0 ? void 0 : _message$tokens2.push({\n            token,\n            text: match\n          });\n          return token;\n        });\n        return message;\n      }\n      tokenizeURLs(message) {\n        var _message$tokens3;\n        let count = ((_message$tokens3 = message.tokens) === null || _message$tokens3 === void 0 ? void 0 : _message$tokens3.length) || 0;\n        const schemes = 'http,https';\n        // Support ![alt text](http://image url) and [text](http://link)\n        message.msg = message.msg.replace(new RegExp(\"(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\)]+\\\\))\"), 'gm'), (_match, pre, text, post) => {\n          var _message$tokens4, _message$tokens5;\n          const pretoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          (_message$tokens4 = message.tokens) === null || _message$tokens4 === void 0 ? void 0 : _message$tokens4.push({\n            token: pretoken,\n            text: pre\n          });\n          const posttoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          (_message$tokens5 = message.tokens) === null || _message$tokens5 === void 0 ? void 0 : _message$tokens5.push({\n            token: posttoken,\n            text: post\n          });\n          return pretoken + text + posttoken;\n        });\n        // Support <http://link|Text>\n        message.msg = message.msg.replace(new RegExp(\"((?:<|&lt;)(?:\".concat(schemes, \"):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))\"), 'gm'), (_match, pre, text, post) => {\n          var _message$tokens6, _message$tokens7;\n          const pretoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          (_message$tokens6 = message.tokens) === null || _message$tokens6 === void 0 ? void 0 : _message$tokens6.push({\n            token: pretoken,\n            text: pre\n          });\n          const posttoken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n          (_message$tokens7 = message.tokens) === null || _message$tokens7 === void 0 ? void 0 : _message$tokens7.push({\n            token: posttoken,\n            text: post\n          });\n          return pretoken + text + posttoken;\n        });\n        return message;\n      }\n      tokenizeCode(message) {\n        var _message$tokens8;\n        let count = ((_message$tokens8 = message.tokens) === null || _message$tokens8 === void 0 ? void 0 : _message$tokens8.length) || 0;\n        message.html = message.msg;\n        message = Markdown.parseMessageNotEscaped(message);\n        // Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n        const regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n        message.msg = message.msg.replace(regexWrappedParagraph, '');\n        for (const [tokenIndex, value] of (_message$tokens$entri = (_message$tokens9 = message.tokens) === null || _message$tokens9 === void 0 ? void 0 : _message$tokens9.entries()) !== null && _message$tokens$entri !== void 0 ? _message$tokens$entri : []) {\n          var _message$tokens$entri, _message$tokens9;\n          const {\n            token\n          } = value;\n          if (token.indexOf('notranslate') === -1) {\n            const newToken = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n            message.msg = message.msg.replace(token, newToken);\n            message.tokens ? message.tokens[tokenIndex].token = newToken : undefined;\n          }\n        }\n        return message;\n      }\n      tokenizeMentions(message) {\n        var _message$tokens10;\n        let count = ((_message$tokens10 = message.tokens) === null || _message$tokens10 === void 0 ? void 0 : _message$tokens10.length) || 0;\n        if (message.mentions && message.mentions.length > 0) {\n          message.mentions.forEach(mention => {\n            message.msg = message.msg.replace(new RegExp(\"(@\".concat(mention.username, \")\"), 'gm'), match => {\n              var _message$tokens11;\n              const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n              (_message$tokens11 = message.tokens) === null || _message$tokens11 === void 0 ? void 0 : _message$tokens11.push({\n                token,\n                text: match\n              });\n              return token;\n            });\n          });\n        }\n        if (message.channels && message.channels.length > 0) {\n          message.channels.forEach(channel => {\n            message.msg = message.msg.replace(new RegExp(\"(#\".concat(channel.name, \")\"), 'gm'), match => {\n              var _message$tokens12;\n              const token = \"<i class=notranslate>{\".concat(count++, \"}</i>\");\n              (_message$tokens12 = message.tokens) === null || _message$tokens12 === void 0 ? void 0 : _message$tokens12.push({\n                token,\n                text: match\n              });\n              return token;\n            });\n          });\n        }\n        return message;\n      }\n      deTokenize(message) {\n        var _message$tokens13;\n        if (message.tokens && ((_message$tokens13 = message.tokens) === null || _message$tokens13 === void 0 ? void 0 : _message$tokens13.length) > 0) {\n          for (const {\n            token,\n            text,\n            noHtml\n          } of message.tokens) {\n            message.msg = message.msg.replace(token, () => noHtml || text);\n          }\n        }\n        return message.msg;\n      }\n      /**\n       * Triggers the translation of the prepared (tokenized) message\n       * and persists the result\n       * @public\n       * @param {object} message\n       * @param {object} room\n       * @param {object} targetLanguage\n       * @returns {object} unmodified message object.\n       */\n      async translateMessage(message, _ref2) {\n        let {\n          room,\n          targetLanguage\n        } = _ref2;\n        let targetLanguages;\n        if (targetLanguage) {\n          targetLanguages = [targetLanguage];\n        } else {\n          var _message$u;\n          targetLanguages = (await Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, (_message$u = message.u) === null || _message$u === void 0 ? void 0 : _message$u._id)).filter(isTruthy);\n        }\n        if (message.msg) {\n          setImmediate(async () => {\n            let targetMessage = Object.assign({}, message);\n            targetMessage.html = escapeHTML(String(targetMessage.msg));\n            targetMessage = this.tokenize(targetMessage);\n            const translations = await this._translateMessage(targetMessage, targetLanguages);\n            if (!_.isEmpty(translations)) {\n              await Messages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider] || '');\n              this.notifyTranslatedMessage(message._id);\n            }\n          });\n        }\n        if (message.attachments && message.attachments.length > 0) {\n          setImmediate(async () => {\n            var _iteratorAbruptCompletion = false;\n            var _didIteratorError = false;\n            var _iteratorError;\n            try {\n              for (var _iterator = _asyncIterator((_message$attachments$ = (_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments.entries()) !== null && _message$attachments$ !== void 0 ? _message$attachments$ : []), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n                var _message$attachments$, _message$attachments;\n                const [index, attachment] = _step.value;\n                {\n                  if (attachment.description || attachment.text) {\n                    var _attachment$text;\n                    // Removes the initial link `[ ](quoterl)` from quote message before translation\n                    const translatedText = (attachment === null || attachment === void 0 ? void 0 : (_attachment$text = attachment.text) === null || _attachment$text === void 0 ? void 0 : _attachment$text.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1')) || (attachment === null || attachment === void 0 ? void 0 : attachment.text);\n                    const attachmentMessage = _objectSpread(_objectSpread({}, attachment), {}, {\n                      text: translatedText\n                    });\n                    const translations = await this._translateAttachmentDescriptions(attachmentMessage, targetLanguages);\n                    if (!_.isEmpty(translations)) {\n                      await Messages.addAttachmentTranslations(message._id, String(index), translations);\n                      this.notifyTranslatedMessage(message._id);\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (_iteratorAbruptCompletion && _iterator.return != null) {\n                  await _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n          });\n        }\n        return Messages.findOneById(message._id);\n      }\n      notifyTranslatedMessage(messageId) {\n        void notifyOnMessageChange({\n          id: messageId\n        });\n      }\n    }\n    Meteor.startup(() => {\n      /** Register the active service provider on the 'AfterSaveMessage' callback.\n       *  So the registered provider will be invoked when a message is saved.\n       *  All the other inactive service provider must be deactivated.\n       */\n      settings.watch('AutoTranslate_ServiceProvider', providerName => {\n        TranslationProviderRegistry.setCurrentProvider(providerName);\n      });\n      // Get Auto Translate Active flag\n      settings.watch('AutoTranslate_Enabled', value => {\n        TranslationProviderRegistry.setEnable(value);\n      });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","TranslationProviderRegistry","AutoTranslate","Logger","Messages","Subscriptions","escapeHTML","Meteor","_","callbacks","isTruthy","notifyOnMessageChange","Markdown","settings","__reifyWaitForDeps__","translationLogger","Providers","Symbol","Provider","registerProvider","provider","metadata","_getProviderMetadata","error","name","getActiveProvider","enabled","getSupportedLanguages","target","_TranslationProviderR","undefined","translateMessage","message","room","targetLanguage","getProviders","Object","values","setCurrentProvider","registerCallbacks","setEnable","remove","add","_ref","priority","MEDIUM","constructor","languages","supportedLanguages","tokenize","tokens","Array","isArray","tokenizeEmojis","tokenizeCode","tokenizeURLs","tokenizeMentions","_message$tokens","count","length","msg","replace","match","_message$tokens2","token","concat","push","text","_message$tokens3","schemes","RegExp","_match","pre","post","_message$tokens4","_message$tokens5","pretoken","posttoken","_message$tokens6","_message$tokens7","_message$tokens8","html","parseMessageNotEscaped","regexWrappedParagraph","tokenIndex","value","_message$tokens$entri","_message$tokens9","entries","indexOf","newToken","_message$tokens10","mentions","forEach","mention","username","_message$tokens11","channels","channel","_message$tokens12","deTokenize","_message$tokens13","noHtml","_ref2","targetLanguages","_message$u","getAutoTranslateLanguagesByRoomAndNotUser","_id","u","filter","setImmediate","targetMessage","assign","String","translations","_translateMessage","isEmpty","addTranslations","notifyTranslatedMessage","attachments","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_message$attachments$","_message$attachments","_step","next","done","index","attachment","description","_attachment$text","translatedText","attachmentMessage","_translateAttachmentDescriptions","addAttachmentTranslations","err","return","findOneById","messageId","id","startup","watch","providerName","__reify_async_result__","_reifyError","self","async"],"sources":["app/autotranslate/server/autotranslate.ts"],"sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tMessageAttachment,\n\tISupportedLanguages,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { escapeHTML } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { Markdown } from '../../markdown/server';\nimport { settings } from '../../settings/server';\n\nconst translationLogger = new Logger('AutoTranslate');\n\nconst Providers = Symbol('Providers');\nconst Provider = Symbol('Provider');\n\n/**\n * This class allows translation providers to\n * register,load and also returns the active provider.\n */\nexport class TranslationProviderRegistry {\n\tstatic [Providers]: { [k: string]: AutoTranslate } = {};\n\n\tstatic enabled = false;\n\n\tstatic [Provider]: string | null = null;\n\n\t/**\n\t * Registers the translation provider into the registry.\n\t * @param {*} provider\n\t */\n\tstatic registerProvider(provider: AutoTranslate): void {\n\t\t// get provider information\n\t\tconst metadata = provider._getProviderMetadata();\n\t\tif (!metadata) {\n\t\t\ttranslationLogger.error('Provider metadata is not defined');\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Providers][metadata.name] = provider;\n\t}\n\n\t/**\n\t * Return the active Translation provider\n\t */\n\tstatic getActiveProvider(): AutoTranslate | null {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\t\tconst provider = TranslationProviderRegistry[Provider];\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TranslationProviderRegistry[Providers][provider];\n\t}\n\n\tstatic async getSupportedLanguages(target: string): Promise<ISupportedLanguage[] | undefined> {\n\t\treturn TranslationProviderRegistry.enabled ? TranslationProviderRegistry.getActiveProvider()?.getSupportedLanguages(target) : undefined;\n\t}\n\n\tstatic async translateMessage(message: IMessage, room: IRoom, targetLanguage?: string): Promise<IMessage | null> {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn provider.translateMessage(message, { room, targetLanguage });\n\t}\n\n\tstatic getProviders(): AutoTranslate[] {\n\t\treturn Object.values(TranslationProviderRegistry[Providers]);\n\t}\n\n\tstatic setCurrentProvider(provider: string): void {\n\t\tif (provider === TranslationProviderRegistry[Provider]) {\n\t\t\treturn;\n\t\t}\n\n\t\tTranslationProviderRegistry[Provider] = provider;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic setEnable(enabled: boolean): void {\n\t\tTranslationProviderRegistry.enabled = enabled;\n\n\t\tTranslationProviderRegistry.registerCallbacks();\n\t}\n\n\tstatic registerCallbacks(): void {\n\t\tif (!TranslationProviderRegistry.enabled) {\n\t\t\tcallbacks.remove('afterSaveMessage', 'autotranslate');\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = TranslationProviderRegistry.getActiveProvider();\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'afterSaveMessage',\n\t\t\t(message, { room }) => provider.translateMessage(message, { room }),\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'autotranslate',\n\t\t);\n\t}\n}\n\n/**\n * Generic auto translate base implementation.\n * This class provides generic parts of implementation for\n * tokenization, detokenization, call back register and unregister.\n * @abstract\n * @class\n */\nexport abstract class AutoTranslate {\n\tname: string;\n\n\tlanguages: string[];\n\n\tsupportedLanguages: ISupportedLanguages;\n\n\t/**\n\t * Encapsulate the api key and provider settings.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tthis.name = '';\n\t\tthis.languages = [];\n\t\tthis.supportedLanguages = {};\n\t}\n\n\t/**\n\t * Extracts non-translatable parts of a message\n\t * @param {object} message\n\t * @return {object} message\n\t */\n\ttokenize(message: IMessage): IMessage {\n\t\tif (!message.tokens || !Array.isArray(message.tokens)) {\n\t\t\tmessage.tokens = [];\n\t\t}\n\t\tmessage = this.tokenizeEmojis(message);\n\t\tmessage = this.tokenizeCode(message);\n\t\tmessage = this.tokenizeURLs(message);\n\t\tmessage = this.tokenizeMentions(message);\n\t\treturn message;\n\t}\n\n\ttokenizeEmojis(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.msg = message.msg.replace(/:[+\\w\\d]+:/g, (match) => {\n\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\tmessage.tokens?.push({\n\t\t\t\ttoken,\n\t\t\t\ttext: match,\n\t\t\t});\n\t\t\treturn token;\n\t\t});\n\n\t\treturn message;\n\t}\n\n\ttokenizeURLs(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tconst schemes = 'http,https';\n\n\t\t// Support ![alt text](http://image url) and [text](http://link)\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`(!?\\\\[)([^\\\\]]+)(\\\\]\\\\((?:${schemes}):\\\\/\\\\/[^\\\\)]+\\\\))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\t// Support <http://link|Text>\n\t\tmessage.msg = message.msg.replace(\n\t\t\tnew RegExp(`((?:<|&lt;)(?:${schemes}):\\\\/\\\\/[^\\\\|]+\\\\|)(.+?)(?=>|&gt;)((?:>|&gt;))`, 'gm'),\n\t\t\t(_match, pre, text, post) => {\n\t\t\t\tconst pretoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: pretoken,\n\t\t\t\t\ttext: pre,\n\t\t\t\t});\n\n\t\t\t\tconst posttoken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\ttoken: posttoken,\n\t\t\t\t\ttext: post,\n\t\t\t\t});\n\n\t\t\t\treturn pretoken + text + posttoken;\n\t\t\t},\n\t\t);\n\n\t\treturn message;\n\t}\n\n\ttokenizeCode(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\t\tmessage.html = message.msg;\n\t\tmessage = Markdown.parseMessageNotEscaped(message);\n\n\t\t// Some parsers (e. g. Marked) wrap the complete message in a <p> - this is unnecessary and should be ignored with respect to translations\n\t\tconst regexWrappedParagraph = new RegExp('^\\\\s*<p>|</p>\\\\s*$', 'gm');\n\t\tmessage.msg = message.msg.replace(regexWrappedParagraph, '');\n\n\t\tfor (const [tokenIndex, value] of message.tokens?.entries() ?? []) {\n\t\t\tconst { token } = value;\n\t\t\tif (token.indexOf('notranslate') === -1) {\n\t\t\t\tconst newToken = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\tmessage.msg = message.msg.replace(token, newToken);\n\t\t\t\tmessage.tokens ? (message.tokens[tokenIndex].token = newToken) : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t}\n\n\ttokenizeMentions(message: IMessage): IMessage {\n\t\tlet count = message.tokens?.length || 0;\n\n\t\tif (message.mentions && message.mentions.length > 0) {\n\t\t\tmessage.mentions.forEach((mention) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(@${mention.username})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (message.channels && message.channels.length > 0) {\n\t\t\tmessage.channels.forEach((channel) => {\n\t\t\t\tmessage.msg = message.msg.replace(new RegExp(`(#${channel.name})`, 'gm'), (match) => {\n\t\t\t\t\tconst token = `<i class=notranslate>{${count++}}</i>`;\n\t\t\t\t\tmessage.tokens?.push({\n\t\t\t\t\t\ttoken,\n\t\t\t\t\t\ttext: match,\n\t\t\t\t\t});\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tdeTokenize(message: IMessage): string {\n\t\tif (message.tokens && message.tokens?.length > 0) {\n\t\t\tfor (const { token, text, noHtml } of message.tokens) {\n\t\t\t\tmessage.msg = message.msg.replace(token, () => noHtml || text);\n\t\t\t}\n\t\t}\n\t\treturn message.msg;\n\t}\n\n\t/**\n\t * Triggers the translation of the prepared (tokenized) message\n\t * and persists the result\n\t * @public\n\t * @param {object} message\n\t * @param {object} room\n\t * @param {object} targetLanguage\n\t * @returns {object} unmodified message object.\n\t */\n\tasync translateMessage(message: IMessage, { room, targetLanguage }: { room: IRoom; targetLanguage?: string }): Promise<IMessage | null> {\n\t\tlet targetLanguages: string[];\n\t\tif (targetLanguage) {\n\t\t\ttargetLanguages = [targetLanguage];\n\t\t} else {\n\t\t\ttargetLanguages = (await Subscriptions.getAutoTranslateLanguagesByRoomAndNotUser(room._id, message.u?._id)).filter(isTruthy);\n\t\t}\n\t\tif (message.msg) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tlet targetMessage = Object.assign({}, message);\n\t\t\t\ttargetMessage.html = escapeHTML(String(targetMessage.msg));\n\t\t\t\ttargetMessage = this.tokenize(targetMessage);\n\n\t\t\t\tconst translations = await this._translateMessage(targetMessage, targetLanguages);\n\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\tawait Messages.addTranslations(message._id, translations, TranslationProviderRegistry[Provider] || '');\n\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (message.attachments && message.attachments.length > 0) {\n\t\t\tsetImmediate(async () => {\n\t\t\t\tfor await (const [index, attachment] of message.attachments?.entries() ?? []) {\n\t\t\t\t\tif (attachment.description || attachment.text) {\n\t\t\t\t\t\t// Removes the initial link `[ ](quoterl)` from quote message before translation\n\t\t\t\t\t\tconst translatedText = attachment?.text?.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') || attachment?.text;\n\t\t\t\t\t\tconst attachmentMessage = { ...attachment, text: translatedText };\n\t\t\t\t\t\tconst translations = await this._translateAttachmentDescriptions(attachmentMessage, targetLanguages);\n\n\t\t\t\t\t\tif (!_.isEmpty(translations)) {\n\t\t\t\t\t\t\tawait Messages.addAttachmentTranslations(message._id, String(index), translations);\n\t\t\t\t\t\t\tthis.notifyTranslatedMessage(message._id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Messages.findOneById(message._id);\n\t}\n\n\tprivate notifyTranslatedMessage(messageId: string): void {\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: messageId,\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider which is used by\n\t * the generic implementation\n\t * @abstract\n\t * @protected\n\t * @returns { name, displayName, settings }\n\t\t};\n\t */\n\tabstract _getProviderMetadata(): IProviderMetadata;\n\n\t/**\n\t * Provides the possible languages _from_ which a message can be translated into a target language\n\t * @abstract\n\t * @protected\n\t * @param {string} target - the language into which shall be translated\n\t * @returns [{ language, name }]\n\t */\n\tabstract getSupportedLanguages(target: string): Promise<ISupportedLanguage[]>;\n\n\t/**\n\t * Performs the actual translation of a message,\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @protected\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @return {object}\n\t */\n\tabstract _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult>;\n\n\t/**\n\t * Performs the actual translation of an attachment (precisely its description),\n\t * usually by sending a REST API call to the service provider.\n\t * @abstract\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tabstract _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult>;\n}\n\nMeteor.startup(() => {\n\t/** Register the active service provider on the 'AfterSaveMessage' callback.\n\t *  So the registered provider will be invoked when a message is saved.\n\t *  All the other inactive service provider must be deactivated.\n\t */\n\tsettings.watch<string>('AutoTranslate_ServiceProvider', (providerName) => {\n\t\tTranslationProviderRegistry.setCurrentProvider(providerName);\n\t});\n\n\t// Get Auto Translate Active flag\n\tsettings.watch<boolean>('AutoTranslate_Enabled', (value) => {\n\t\tTranslationProviderRegistry.setEnable(value);\n\t});\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b57a28a7969a7b1b2b9b6cba4bb7083e9867b928"}
