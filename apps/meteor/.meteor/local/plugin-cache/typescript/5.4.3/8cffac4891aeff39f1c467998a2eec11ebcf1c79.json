{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/ChartData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-analytics/ChartData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/ChartData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/ChartData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/ChartData.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\n/* eslint-disable new-cap */\ntype ChartDataValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Avg_reaction_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time';\n\ntype DateParam = {\n\tgte: Date;\n\tlte: Date;\n};\n\nexport class ChartData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is ChartDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends ChartDataValidActions>(action: T, ...args: [DateParam, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\treturn this.roomsModel.getTotalConversationsBetweenDate('l', date, { departmentId }, extraQuery);\n\t}\n\n\tasync Avg_chat_duration(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.chatDuration) {\n\t\t\t\ttotal += metrics.chatDuration;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgCD = count ? total / count : 0;\n\t\treturn Math.round(avgCD * 100) / 100;\n\t}\n\n\tasync Total_messages(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ msgs }) => {\n\t\t\t\tif (msgs) {\n\t\t\t\t\ttotal += msgs;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn total;\n\t}\n\n\tasync Avg_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet frt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tfrt += metrics.response.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgFrt = count ? frt / count : 0;\n\t\treturn Math.round(avgFrt * 100) / 100;\n\t}\n\n\tasync Best_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet maxFrt = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tmaxFrt = maxFrt ? Math.min(maxFrt, metrics.response.ft) : metrics.response.ft;\n\t\t\t}\n\t\t});\n\n\t\tif (!maxFrt) {\n\t\t\tmaxFrt = 0;\n\t\t}\n\n\t\treturn Math.round(maxFrt * 100) / 100;\n\t}\n\n\tasync Avg_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet art = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.avg) {\n\t\t\t\tart += metrics.response.avg;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArt = count ? art / count : 0;\n\n\t\treturn Math.round(avgArt * 100) / 100;\n\t}\n\n\tasync Avg_reaction_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet arnt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.reaction?.ft) {\n\t\t\t\tarnt += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArnt = count ? arnt / count : 0;\n\n\t\treturn Math.round(avgArnt * 100) / 100;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/ChartData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-analytics/ChartData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/ChartData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/ChartData.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\n/* eslint-disable new-cap */\ntype ChartDataValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Avg_reaction_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time';\n\ntype DateParam = {\n\tgte: Date;\n\tlte: Date;\n};\n\nexport class ChartData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is ChartDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends ChartDataValidActions>(action: T, ...args: [DateParam, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\treturn this.roomsModel.getTotalConversationsBetweenDate('l', date, { departmentId }, extraQuery);\n\t}\n\n\tasync Avg_chat_duration(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.chatDuration) {\n\t\t\t\ttotal += metrics.chatDuration;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgCD = count ? total / count : 0;\n\t\treturn Math.round(avgCD * 100) / 100;\n\t}\n\n\tasync Total_messages(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ msgs }) => {\n\t\t\t\tif (msgs) {\n\t\t\t\t\ttotal += msgs;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn total;\n\t}\n\n\tasync Avg_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet frt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tfrt += metrics.response.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgFrt = count ? frt / count : 0;\n\t\treturn Math.round(avgFrt * 100) / 100;\n\t}\n\n\tasync Best_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet maxFrt = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tmaxFrt = maxFrt ? Math.min(maxFrt, metrics.response.ft) : metrics.response.ft;\n\t\t\t}\n\t\t});\n\n\t\tif (!maxFrt) {\n\t\t\tmaxFrt = 0;\n\t\t}\n\n\t\treturn Math.round(maxFrt * 100) / 100;\n\t}\n\n\tasync Avg_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet art = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.avg) {\n\t\t\t\tart += metrics.response.avg;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArt = count ? art / count : 0;\n\n\t\treturn Math.round(avgArt * 100) / 100;\n\t}\n\n\tasync Avg_reaction_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet arnt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.reaction?.ft) {\n\t\t\t\tarnt += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArnt = count ? arnt / count : 0;\n\n\t\treturn Math.round(avgArnt * 100) / 100;\n\t}\n}\n"]}}},"code":"module.export({\n  ChartData: () => ChartData\n});\nclass ChartData {\n  constructor(roomsModel) {\n    this.roomsModel = void 0;\n    this.roomsModel = roomsModel;\n  }\n  isActionAllowed(action) {\n    if (!action) {\n      return false;\n    }\n    return ['Total_conversations', 'Avg_chat_duration', 'Total_messages', 'Avg_first_response_time', 'Avg_reaction_time', 'Best_first_response_time', 'Avg_response_time'].includes(action);\n  }\n  callAction(action) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    switch (action) {\n      case 'Total_conversations':\n        return this.Total_conversations(...args);\n      case 'Avg_chat_duration':\n        return this.Avg_chat_duration(...args);\n      case 'Total_messages':\n        return this.Total_messages(...args);\n      case 'Avg_first_response_time':\n        return this.Avg_first_response_time(...args);\n      case 'Avg_reaction_time':\n        return this.Avg_reaction_time(...args);\n      case 'Best_first_response_time':\n        return this.Best_first_response_time(...args);\n      case 'Avg_response_time':\n        return this.Avg_response_time(...args);\n      default:\n        throw new Error('Invalid action');\n    }\n  }\n  async Total_conversations(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // @ts-expect-error - Check extraquery usage on this func\n    return this.roomsModel.getTotalConversationsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery);\n  }\n  async Avg_chat_duration(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let total = 0;\n    let count = 0;\n    await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery).forEach(_ref => {\n      let {\n        metrics\n      } = _ref;\n      if (metrics !== null && metrics !== void 0 && metrics.chatDuration) {\n        total += metrics.chatDuration;\n        count++;\n      }\n    });\n    const avgCD = count ? total / count : 0;\n    return Math.round(avgCD * 100) / 100;\n  }\n  async Total_messages(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let total = 0;\n    // we don't want to count visitor messages\n    const extraFilter = {\n      $lte: ['$token', null]\n    };\n    await this.roomsModel.getAnalyticsMetricsBetweenDateWithMessages('l', date, {\n      departmentId\n    }, extraFilter, extraQuery).forEach(_ref2 => {\n      let {\n        msgs\n      } = _ref2;\n      if (msgs) {\n        total += msgs;\n      }\n    });\n    return total;\n  }\n  async Avg_first_response_time(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let frt = 0;\n    let count = 0;\n    await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery).forEach(_ref3 => {\n      var _metrics$response;\n      let {\n        metrics\n      } = _ref3;\n      if (metrics !== null && metrics !== void 0 && (_metrics$response = metrics.response) !== null && _metrics$response !== void 0 && _metrics$response.ft) {\n        frt += metrics.response.ft;\n        count++;\n      }\n    });\n    const avgFrt = count ? frt / count : 0;\n    return Math.round(avgFrt * 100) / 100;\n  }\n  async Best_first_response_time(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let maxFrt = 0;\n    await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery).forEach(_ref4 => {\n      var _metrics$response2;\n      let {\n        metrics\n      } = _ref4;\n      if (metrics !== null && metrics !== void 0 && (_metrics$response2 = metrics.response) !== null && _metrics$response2 !== void 0 && _metrics$response2.ft) {\n        maxFrt = maxFrt ? Math.min(maxFrt, metrics.response.ft) : metrics.response.ft;\n      }\n    });\n    if (!maxFrt) {\n      maxFrt = 0;\n    }\n    return Math.round(maxFrt * 100) / 100;\n  }\n  async Avg_response_time(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let art = 0;\n    let count = 0;\n    await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery).forEach(_ref5 => {\n      var _metrics$response3;\n      let {\n        metrics\n      } = _ref5;\n      if (metrics !== null && metrics !== void 0 && (_metrics$response3 = metrics.response) !== null && _metrics$response3 !== void 0 && _metrics$response3.avg) {\n        art += metrics.response.avg;\n        count++;\n      }\n    });\n    const avgArt = count ? art / count : 0;\n    return Math.round(avgArt * 100) / 100;\n  }\n  async Avg_reaction_time(date, departmentId) {\n    let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let arnt = 0;\n    let count = 0;\n    await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n      departmentId\n    }, extraQuery).forEach(_ref6 => {\n      var _metrics$reaction;\n      let {\n        metrics\n      } = _ref6;\n      if (metrics !== null && metrics !== void 0 && (_metrics$reaction = metrics.reaction) !== null && _metrics$reaction !== void 0 && _metrics$reaction.ft) {\n        arnt += metrics.reaction.ft;\n        count++;\n      }\n    });\n    const avgArnt = count ? arnt / count : 0;\n    return Math.round(avgArnt * 100) / 100;\n  }\n}","map":{"version":3,"names":["module","export","ChartData","constructor","roomsModel","isActionAllowed","action","includes","callAction","_len","arguments","length","args","Array","_key","Total_conversations","Avg_chat_duration","Total_messages","Avg_first_response_time","Avg_reaction_time","Best_first_response_time","Avg_response_time","Error","date","departmentId","extraQuery","undefined","getTotalConversationsBetweenDate","total","count","getAnalyticsMetricsBetweenDate","forEach","_ref","metrics","chatDuration","avgCD","Math","round","extraFilter","$lte","getAnalyticsMetricsBetweenDateWithMessages","_ref2","msgs","frt","_ref3","_metrics$response","response","ft","avgFrt","maxFrt","_ref4","_metrics$response2","min","art","_ref5","_metrics$response3","avg","avgArt","arnt","_ref6","_metrics$reaction","reaction","avgArnt"],"sources":["server/services/omnichannel-analytics/ChartData.ts"],"sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\n/* eslint-disable new-cap */\ntype ChartDataValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Avg_reaction_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time';\n\ntype DateParam = {\n\tgte: Date;\n\tlte: Date;\n};\n\nexport class ChartData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is ChartDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends ChartDataValidActions>(action: T, ...args: [DateParam, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\treturn this.roomsModel.getTotalConversationsBetweenDate('l', date, { departmentId }, extraQuery);\n\t}\n\n\tasync Avg_chat_duration(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.chatDuration) {\n\t\t\t\ttotal += metrics.chatDuration;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgCD = count ? total / count : 0;\n\t\treturn Math.round(avgCD * 100) / 100;\n\t}\n\n\tasync Total_messages(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ msgs }) => {\n\t\t\t\tif (msgs) {\n\t\t\t\t\ttotal += msgs;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn total;\n\t}\n\n\tasync Avg_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet frt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tfrt += metrics.response.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgFrt = count ? frt / count : 0;\n\t\treturn Math.round(avgFrt * 100) / 100;\n\t}\n\n\tasync Best_first_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet maxFrt = 0;\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.ft) {\n\t\t\t\tmaxFrt = maxFrt ? Math.min(maxFrt, metrics.response.ft) : metrics.response.ft;\n\t\t\t}\n\t\t});\n\n\t\tif (!maxFrt) {\n\t\t\tmaxFrt = 0;\n\t\t}\n\n\t\treturn Math.round(maxFrt * 100) / 100;\n\t}\n\n\tasync Avg_response_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet art = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response?.avg) {\n\t\t\t\tart += metrics.response.avg;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArt = count ? art / count : 0;\n\n\t\treturn Math.round(avgArt * 100) / 100;\n\t}\n\n\tasync Avg_reaction_time(date: DateParam, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet arnt = 0;\n\t\tlet count = 0;\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.reaction?.ft) {\n\t\t\t\tarnt += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tconst avgArnt = count ? arnt / count : 0;\n\n\t\treturn Math.round(avgArnt * 100) / 100;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8cffac4891aeff39f1c467998a2eec11ebcf1c79"}
