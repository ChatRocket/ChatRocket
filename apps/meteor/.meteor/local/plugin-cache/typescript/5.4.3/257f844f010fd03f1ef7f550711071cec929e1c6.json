{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/googleTranslate.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/googleTranslate.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/googleTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/googleTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/googleTranslate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n\tIGoogleTranslation,\n\tMessageAttachment,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { AutoTranslate, TranslationProviderRegistry } from './autotranslate';\n\n/**\n * Represents google translate class\n * @class\n * @augments AutoTranslate\n */\n\nclass GoogleAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to Google translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'google-translate';\n\t\tthis.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_GoogleAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Google'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Google Translate api provides the list of supported languages.\n\t * @private implements super abstract method.\n\t * @param {string} target : user language setting or 'en'\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\n\t\tlet result: { data?: { languages: ISupportedLanguage[] } } = {};\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t\t...(target && { target }),\n\t\t};\n\n\t\ttry {\n\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\tif (!request.ok && request.status === 400 && request.statusText === 'INVALID_ARGUMENT') {\n\t\t\t\tthrow new Error('Failed to fetch supported languages');\n\t\t\t}\n\n\t\t\tresult = (await request.json()) as typeof result;\n\t\t} catch (e: any) {\n\t\t\t// Fallback: Get the English names of the target languages\n\t\t\tif (e.message === 'Failed to fetch supported languages') {\n\t\t\t\tparams.target = 'en';\n\t\t\t\ttarget = 'en';\n\t\t\t\tif (!this.supportedLanguages[target]) {\n\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\t\t\tresult = (await request.json()) as typeof result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target || 'en'] = result?.data?.languages || [];\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: message.msg.split('\\n'),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated attachment descriptions for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register Google translation provider.\nTranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/googleTranslate.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/googleTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/googleTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/googleTranslate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n\tIGoogleTranslation,\n\tMessageAttachment,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { AutoTranslate, TranslationProviderRegistry } from './autotranslate';\n\n/**\n * Represents google translate class\n * @class\n * @augments AutoTranslate\n */\n\nclass GoogleAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to Google translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'google-translate';\n\t\tthis.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_GoogleAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Google'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Google Translate api provides the list of supported languages.\n\t * @private implements super abstract method.\n\t * @param {string} target : user language setting or 'en'\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\n\t\tlet result: { data?: { languages: ISupportedLanguage[] } } = {};\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t\t...(target && { target }),\n\t\t};\n\n\t\ttry {\n\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\tif (!request.ok && request.status === 400 && request.statusText === 'INVALID_ARGUMENT') {\n\t\t\t\tthrow new Error('Failed to fetch supported languages');\n\t\t\t}\n\n\t\t\tresult = (await request.json()) as typeof result;\n\t\t} catch (e: any) {\n\t\t\t// Fallback: Get the English names of the target languages\n\t\t\tif (e.message === 'Failed to fetch supported languages') {\n\t\t\t\tparams.target = 'en';\n\t\t\t\ttarget = 'en';\n\t\t\t\tif (!this.supportedLanguages[target]) {\n\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\t\t\tresult = (await request.json()) as typeof result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target || 'en'] = result?.data?.languages || [];\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: message.msg.split('\\n'),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated attachment descriptions for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register Google translation provider.\nTranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 1);\n    let i18n;\n    module.link(\"../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 2);\n    let SystemLogger;\n    module.link(\"../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let AutoTranslate, TranslationProviderRegistry;\n    module.link(\"./autotranslate\", {\n      AutoTranslate(v) {\n        AutoTranslate = v;\n      },\n      TranslationProviderRegistry(v) {\n        TranslationProviderRegistry = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * Represents google translate class\n     * @class\n     * @augments AutoTranslate\n     */\n    class GoogleAutoTranslate extends AutoTranslate {\n      /**\n       * setup api reference to Google translate to be used as message translation provider.\n       * @constructor\n       */\n      constructor() {\n        super();\n        this.apiKey = void 0;\n        this.apiEndPointUrl = void 0;\n        this.name = 'google-translate';\n        this.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2';\n        // Get the service provide API key.\n        settings.watch('AutoTranslate_GoogleAPIKey', value => {\n          this.apiKey = value;\n        });\n      }\n      /**\n       * Returns metadata information about the service provider\n       * @private implements super abstract method.\n       * @returns {object}\n       */\n      _getProviderMetadata() {\n        return {\n          name: this.name,\n          displayName: i18n.t('AutoTranslate_Google'),\n          settings: this._getSettings()\n        };\n      }\n      /**\n       * Returns necessary settings information about the translation service provider.\n       * @private implements super abstract method.\n       * @returns {object}\n       */\n      _getSettings() {\n        return {\n          apiKey: this.apiKey,\n          apiEndPointUrl: this.apiEndPointUrl\n        };\n      }\n      /**\n       * Returns supported languages for translation by the active service provider.\n       * Google Translate api provides the list of supported languages.\n       * @private implements super abstract method.\n       * @param {string} target : user language setting or 'en'\n       * @returns {object} code : value pair\n       */\n      async getSupportedLanguages(target) {\n        var _result, _result$data;\n        if (!this.apiKey) {\n          return [];\n        }\n        if (this.supportedLanguages[target]) {\n          return this.supportedLanguages[target];\n        }\n        let result = {};\n        const params = _objectSpread({\n          key: this.apiKey\n        }, target && {\n          target\n        });\n        try {\n          const request = await fetch(\"https://translation.googleapis.com/language/translate/v2/languages\", {\n            params\n          });\n          if (!request.ok && request.status === 400 && request.statusText === 'INVALID_ARGUMENT') {\n            throw new Error('Failed to fetch supported languages');\n          }\n          result = await request.json();\n        } catch (e) {\n          // Fallback: Get the English names of the target languages\n          if (e.message === 'Failed to fetch supported languages') {\n            params.target = 'en';\n            target = 'en';\n            if (!this.supportedLanguages[target]) {\n              const request = await fetch(\"https://translation.googleapis.com/language/translate/v2/languages\", {\n                params\n              });\n              result = await request.json();\n            }\n          }\n        }\n        if (this.supportedLanguages[target]) {\n          return this.supportedLanguages[target];\n        }\n        this.supportedLanguages[target || 'en'] = ((_result = result) === null || _result === void 0 ? void 0 : (_result$data = _result.data) === null || _result$data === void 0 ? void 0 : _result$data.languages) || [];\n        return this.supportedLanguages[target || 'en'];\n      }\n      /**\n       * Send Request REST API call to the service provider.\n       * Returns translated message for each target language in target languages.\n       * @private\n       * @param {object} message\n       * @param {object} targetLanguages\n       * @returns {object} translations: Translated messages for each language\n       */\n      async _translateMessage(message, targetLanguages) {\n        const translations = {};\n        const supportedLanguages = await this.getSupportedLanguages('en');\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(targetLanguages), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            let language = _step.value;\n            {\n              if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n                language\n              })) {\n                language = language.substr(0, 2);\n              }\n              try {\n                const result = await fetch(this.apiEndPointUrl, {\n                  params: {\n                    key: this.apiKey,\n                    target: language,\n                    format: 'text',\n                    q: message.msg.split('\\n')\n                  }\n                });\n                if (!result.ok) {\n                  throw new Error(result.statusText);\n                }\n                const body = await result.json();\n                if (result.status === 200 && body.data && body.data.translations && Array.isArray(body.data.translations) && body.data.translations.length > 0) {\n                  const txt = body.data.translations.map(translation => translation.translatedText).join('\\n');\n                  translations[language] = this.deTokenize(Object.assign({}, message, {\n                    msg: txt\n                  }));\n                }\n              } catch (err) {\n                SystemLogger.error({\n                  msg: 'Error translating message',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return translations;\n      }\n      /**\n       * Returns translated message attachment description in target languages.\n       * @private\n       * @param {object} attachment\n       * @param {object} targetLanguages\n       * @returns {object} translated attachment descriptions for each target language\n       */\n      async _translateAttachmentDescriptions(attachment, targetLanguages) {\n        const translations = {};\n        const supportedLanguages = await this.getSupportedLanguages('en');\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(targetLanguages), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            let language = _step2.value;\n            {\n              if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n                language\n              })) {\n                language = language.substr(0, 2);\n              }\n              try {\n                const result = await fetch(this.apiEndPointUrl, {\n                  params: {\n                    key: this.apiKey,\n                    target: language,\n                    format: 'text',\n                    q: attachment.description || attachment.text || ''\n                  }\n                });\n                if (!result.ok) {\n                  throw new Error(result.statusText);\n                }\n                const body = await result.json();\n                if (result.status === 200 && body.data && body.data.translations && Array.isArray(body.data.translations) && body.data.translations.length > 0) {\n                  translations[language] = body.data.translations.map(translation => translation.translatedText).join('\\n');\n                }\n              } catch (err) {\n                SystemLogger.error({\n                  msg: 'Error translating message',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return translations;\n      }\n    }\n    // Register Google translation provider.\n    TranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","fetch","serverFetch","_","i18n","SystemLogger","settings","AutoTranslate","TranslationProviderRegistry","__reifyWaitForDeps__","GoogleAutoTranslate","constructor","apiKey","apiEndPointUrl","name","watch","value","_getProviderMetadata","displayName","t","_getSettings","getSupportedLanguages","target","_result","_result$data","supportedLanguages","result","params","key","request","ok","status","statusText","Error","json","e","message","data","languages","_translateMessage","targetLanguages","translations","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","language","indexOf","findWhere","substr","format","q","msg","split","body","Array","isArray","length","txt","map","translation","translatedText","join","deTokenize","Object","assign","err","error","return","_translateAttachmentDescriptions","attachment","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","description","text","registerProvider","__reify_async_result__","_reifyError","self","async"],"sources":["app/autotranslate/server/googleTranslate.ts"],"sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIProviderMetadata,\n\tISupportedLanguage,\n\tITranslationResult,\n\tIGoogleTranslation,\n\tMessageAttachment,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { AutoTranslate, TranslationProviderRegistry } from './autotranslate';\n\n/**\n * Represents google translate class\n * @class\n * @augments AutoTranslate\n */\n\nclass GoogleAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to Google translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'google-translate';\n\t\tthis.apiEndPointUrl = 'https://translation.googleapis.com/language/translate/v2';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_GoogleAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provider\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Google'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @returns {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Google Translate api provides the list of supported languages.\n\t * @private implements super abstract method.\n\t * @param {string} target : user language setting or 'en'\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\n\t\tlet result: { data?: { languages: ISupportedLanguage[] } } = {};\n\t\tconst params = {\n\t\t\tkey: this.apiKey,\n\t\t\t...(target && { target }),\n\t\t};\n\n\t\ttry {\n\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\tif (!request.ok && request.status === 400 && request.statusText === 'INVALID_ARGUMENT') {\n\t\t\t\tthrow new Error('Failed to fetch supported languages');\n\t\t\t}\n\n\t\t\tresult = (await request.json()) as typeof result;\n\t\t} catch (e: any) {\n\t\t\t// Fallback: Get the English names of the target languages\n\t\t\tif (e.message === 'Failed to fetch supported languages') {\n\t\t\t\tparams.target = 'en';\n\t\t\t\ttarget = 'en';\n\t\t\t\tif (!this.supportedLanguages[target]) {\n\t\t\t\t\tconst request = await fetch(`https://translation.googleapis.com/language/translate/v2/languages`, { params });\n\t\t\t\t\tresult = (await request.json()) as typeof result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target || 'en'] = result?.data?.languages || [];\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: message.msg.split('\\n'),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\tconst txt = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: txt }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated attachment descriptions for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tkey: this.apiKey,\n\t\t\t\t\t\ttarget: language,\n\t\t\t\t\t\tformat: 'text',\n\t\t\t\t\t\tq: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (\n\t\t\t\t\tresult.status === 200 &&\n\t\t\t\t\tbody.data &&\n\t\t\t\t\tbody.data.translations &&\n\t\t\t\t\tArray.isArray(body.data.translations) &&\n\t\t\t\t\tbody.data.translations.length > 0\n\t\t\t\t) {\n\t\t\t\t\ttranslations[language] = body.data.translations.map((translation: IGoogleTranslation) => translation.translatedText).join('\\n');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register Google translation provider.\nTranslationProviderRegistry.registerProvider(new GoogleAutoTranslate());\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"257f844f010fd03f1ef7f550711071cec929e1c6"}
