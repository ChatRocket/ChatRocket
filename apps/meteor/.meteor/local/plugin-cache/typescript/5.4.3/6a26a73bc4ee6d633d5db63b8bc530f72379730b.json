{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/Utils.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/Utils.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/Utils.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/Utils.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport zlib from 'zlib';\n\nimport type { Logger } from '@rocket.chat/logger';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport type { IUserDataMap, IAttributeMapping } from '../definition/IAttributeMapping';\nimport type { ISAMLGlobalSettings } from '../definition/ISAMLGlobalSettings';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { StatusCode } from './constants';\n\nlet providerList: Array<IServiceProviderOptions> = [];\nlet debug = false;\nlet relayState: string | null = null;\nlet logger: Logger | undefined;\n\nconst globalSettings: ISAMLGlobalSettings = {\n\tgenerateUsername: false,\n\tnameOverwrite: false,\n\tmailOverwrite: false,\n\timmutableProperty: 'EMail',\n\tdefaultUserRole: 'user',\n\tuserDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n\tusernameNormalize: 'None',\n\tchannelsAttributeUpdate: false,\n\tincludePrivateChannelsInUpdate: false,\n};\n\nexport class SAMLUtils {\n\tpublic static events: EventEmitter;\n\n\tpublic static get isDebugging(): boolean {\n\t\treturn debug;\n\t}\n\n\tpublic static get globalSettings(): ISAMLGlobalSettings {\n\t\treturn globalSettings;\n\t}\n\n\tpublic static get serviceProviders(): Array<IServiceProviderOptions> {\n\t\treturn providerList;\n\t}\n\n\tpublic static get relayState(): string | null {\n\t\treturn relayState;\n\t}\n\n\tpublic static set relayState(value: string | null) {\n\t\trelayState = value;\n\t}\n\n\tpublic static getServiceProviderOptions(providerName: string): IServiceProviderOptions | undefined {\n\t\tthis.log(providerName, providerList);\n\n\t\treturn providerList.find((providerOptions) => providerOptions.provider === providerName);\n\t}\n\n\tpublic static setServiceProvidersList(list: Array<IServiceProviderOptions>): void {\n\t\tproviderList = list;\n\t}\n\n\tpublic static setLoggerInstance(instance: Logger): void {\n\t\tlogger = instance;\n\t}\n\n\t// TODO: Some of those should probably not be global\n\tpublic static updateGlobalSettings(samlConfigs: Record<string, any>): void {\n\t\tdebug = Boolean(samlConfigs.debug);\n\n\t\tglobalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n\t\tglobalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n\t\tglobalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n\t\tglobalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n\t\tglobalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n\t\tif (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n\t\t\tglobalSettings.immutableProperty = samlConfigs.immutableProperty;\n\t\t}\n\n\t\tif (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n\t\t\tglobalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n\t\t}\n\n\t\tif (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n\t\t\tglobalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n\t\t}\n\n\t\tif (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n\t\t\tglobalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n\t\t}\n\t}\n\n\tpublic static generateUniqueID(): string {\n\t\tconst chars = 'abcdef0123456789';\n\t\tlet uniqueID = 'id-';\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tuniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n\t\t}\n\t\treturn uniqueID;\n\t}\n\n\tpublic static generateInstant(): string {\n\t\treturn new Date().toISOString();\n\t}\n\n\tpublic static certToPEM(cert: string): string {\n\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tif (!lines) {\n\t\t\tthrow new Error('Invalid Certificate');\n\t\t}\n\n\t\tlines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n\t\tlines.push('-----END CERTIFICATE-----');\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic static fillTemplateData(template: string, data: Record<string, string>): string {\n\t\tlet newTemplate = template;\n\n\t\tfor (const variable in data) {\n\t\t\tif (variable in data) {\n\t\t\t\tconst key = `__${variable}__`;\n\t\t\t\twhile (newTemplate.includes(key)) {\n\t\t\t\t\tnewTemplate = newTemplate.replace(key, data[variable]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTemplate;\n\t}\n\n\tpublic static getValidationActionRedirectPath(credentialToken: string, redirectUrl?: string): string {\n\t\tconst redirectUrlParam = redirectUrl ? `&redirectUrl=${encodeURIComponent(redirectUrl)}` : '';\n\t\t// the saml_idp_credentialToken param is needed by the mobile app\n\t\treturn `saml/${credentialToken}?saml_idp_credentialToken=${credentialToken}${redirectUrlParam}`;\n\t}\n\n\tpublic static log(obj: any, ...args: Array<any>): void {\n\t\tif (debug && logger) {\n\t\t\tlogger.debug(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static error(obj: any, ...args: Array<any>): void {\n\t\tif (logger) {\n\t\t\tlogger.error(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static async inflateXml(\n\t\tbase64Data: string,\n\t\tsuccessCallback: (xml: string) => Promise<void>,\n\t\terrorCallback: (err: string | object | null) => Promise<void>,\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst buffer = Buffer.from(base64Data, 'base64');\n\t\t\tzlib.inflateRaw(buffer, (err, decoded) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.log(`Error while inflating. ${err}`);\n\t\t\t\t\treturn reject(errorCallback(err));\n\t\t\t\t}\n\n\t\t\t\tif (!decoded) {\n\t\t\t\t\treturn reject(errorCallback('Failed to extract request data'));\n\t\t\t\t}\n\n\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\treturn resolve(successCallback(xmlString));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {\n\t\tlet successStatus = false;\n\t\tlet status = null;\n\t\tlet messageText = '';\n\n\t\tconst statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n\t\tif (statusNodes.length) {\n\t\t\tconst statusNode = statusNodes[0];\n\t\t\tconst statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n\t\t\tif (statusMessage?.firstChild?.textContent) {\n\t\t\t\tmessageText = statusMessage.firstChild.textContent;\n\t\t\t}\n\n\t\t\tstatus = statusNode.getAttribute('Value');\n\n\t\t\tif (status === StatusCode.success) {\n\t\t\t\tsuccessStatus = true;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsuccess: successStatus,\n\t\t\tmessage: messageText,\n\t\t\tstatusCode: status || '',\n\t\t};\n\t}\n\n\tpublic static normalizeCert(cert: string): string {\n\t\tif (!cert) {\n\t\t\treturn cert;\n\t\t}\n\n\t\treturn cert\n\t\t\t.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/-+END CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t.trim();\n\t}\n\n\tpublic static getUserDataMapping(): IUserDataMap {\n\t\tconst { userDataFieldMap, immutableProperty } = globalSettings;\n\n\t\tlet map: Record<string, any>;\n\n\t\ttry {\n\t\t\tmap = JSON.parse(userDataFieldMap);\n\t\t} catch (e) {\n\t\t\tSAMLUtils.log(userDataFieldMap);\n\t\t\tSAMLUtils.log(e);\n\t\t\tthrow new Error('Failed to parse custom user field map');\n\t\t}\n\n\t\tconst parsedMap: IUserDataMap = {\n\t\t\tattributeList: new Set(),\n\t\t\temail: {\n\t\t\t\tfieldName: 'email',\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\tfieldName: 'username',\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tfieldName: 'cn',\n\t\t\t},\n\t\t\tidentifier: {\n\t\t\t\ttype: '',\n\t\t\t},\n\t\t};\n\n\t\tlet identifier = immutableProperty.toLowerCase();\n\n\t\tfor (const spFieldName in map) {\n\t\t\tif (!map.hasOwnProperty(spFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst attribute = map[spFieldName];\n\t\t\tif (typeof attribute !== 'string' && typeof attribute !== 'object') {\n\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t}\n\n\t\t\tif (spFieldName === '__identifier__') {\n\t\t\t\tif (typeof attribute !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid identifier.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = attribute;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet attributeMap: IAttributeMapping | null = null;\n\n\t\t\t// If it's a complex type, let's check what's in it\n\t\t\tif (typeof attribute === 'object') {\n\t\t\t\t// A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n\t\t\t\tif (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\n\t\t\t\tif (Array.isArray(fieldName)) {\n\t\t\t\t\tif (!fieldName.length) {\n\t\t\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const idpFieldName of fieldName) {\n\t\t\t\t\t\tparsedMap.attributeList.add(idpFieldName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparsedMap.attributeList.add(fieldName);\n\t\t\t\t}\n\n\t\t\t\tif (regex && typeof regex !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid RegEx');\n\t\t\t\t}\n\n\t\t\t\tif (template && typeof template !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid Template');\n\t\t\t\t}\n\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t...(regex && { regex }),\n\t\t\t\t\t...(template && { template }),\n\t\t\t\t};\n\t\t\t} else if (typeof attribute === 'string') {\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName: attribute,\n\t\t\t\t};\n\t\t\t\tparsedMap.attributeList.add(attribute);\n\t\t\t}\n\n\t\t\tif (attributeMap) {\n\t\t\t\tif (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n\t\t\t\t\tparsedMap[spFieldName] = attributeMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (identifier) {\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {\n\t\t\t\tparsedMap.identifier.type = 'custom';\n\t\t\t\tparsedMap.identifier.attribute = identifier;\n\t\t\t\tparsedMap.attributeList.add(identifier);\n\t\t\t}\n\t\t}\n\t\treturn parsedMap;\n\t}\n\n\tpublic static getProfileValue(profile: Record<string, any>, mapping: IAttributeMapping, forceString = false): any {\n\t\tconst values: Record<string, string> = {\n\t\t\tregex: '',\n\t\t};\n\t\tconst fieldNames = ensureArray<string>(mapping.fieldName);\n\n\t\tlet mainValue;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet profileValue = profile[fieldName];\n\n\t\t\tif (Array.isArray(profileValue)) {\n\t\t\t\tfor (let i = 0; i < profile[fieldName].length; i++) {\n\t\t\t\t\t// Add every index to the list of possible values to be used, both first to last and from last to first\n\t\t\t\t\tvalues[`${fieldName}[${i}]`] = profileValue[i];\n\t\t\t\t\tvalues[`${fieldName}[-${Math.abs(0 - profileValue.length + i)}]`] = profileValue[i];\n\t\t\t\t}\n\t\t\t\tvalues[`${fieldName}[]`] = profileValue.join(' ');\n\t\t\t\tif (forceString) {\n\t\t\t\t\tprofileValue = profileValue.join(' ');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[fieldName] = profileValue;\n\t\t\t}\n\n\t\t\tvalues[fieldName] = profileValue;\n\n\t\t\tif (!mainValue) {\n\t\t\t\tmainValue = profileValue;\n\t\t\t}\n\t\t}\n\n\t\tlet shouldRunTemplate = false;\n\t\tif (typeof mapping.template === 'string') {\n\t\t\t// unless the regex result is used on the template, we process the template first\n\t\t\tif (mapping.template.includes('__regex__')) {\n\t\t\t\tshouldRunTemplate = true;\n\t\t\t} else {\n\t\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t\t}\n\t\t}\n\n\t\tif (mapping.regex && mainValue && mainValue.match) {\n\t\t\tlet regexValue;\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {\n\t\t\t\t\tregexValue = match[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regexValue) {\n\t\t\t\tvalues.regex = regexValue;\n\t\t\t\tif (!shouldRunTemplate) {\n\t\t\t\t\tmainValue = regexValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRunTemplate && typeof mapping.template === 'string') {\n\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t}\n\n\t\treturn mainValue;\n\t}\n\n\tpublic static convertArrayBufferToString(buffer: ArrayBuffer, encoding: BufferEncoding = 'utf8'): string {\n\t\treturn Buffer.from(buffer).toString(encoding);\n\t}\n\n\tpublic static normalizeUsername(name: string): string {\n\t\tconst { globalSettings } = this;\n\n\t\tswitch (globalSettings.usernameNormalize) {\n\t\t\tcase 'Lowercase':\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic static mapProfileToUserObject(profile: Record<string, any>): ISAMLUser {\n\t\tconst userDataMap = this.getUserDataMapping();\n\t\tSAMLUtils.log('parsed userDataMap', userDataMap);\n\n\t\tif (userDataMap.identifier.type === 'custom') {\n\t\t\tif (!userDataMap.identifier.attribute) {\n\t\t\t\tthrow new Error('SAML User Data Map: invalid Identifier configuration received.');\n\t\t\t}\n\t\t\tif (!profile[userDataMap.identifier.attribute]) {\n\t\t\t\tthrow new Error(`SAML Profile did not have the expected identifier (${userDataMap.identifier.attribute}).`);\n\t\t\t}\n\t\t}\n\n\t\tconst attributeList = new Map();\n\t\tfor (const attributeName of userDataMap.attributeList) {\n\t\t\tif (profile[attributeName] === undefined) {\n\t\t\t\tthis.log(`SAML user profile is missing the attribute ${attributeName}.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributeList.set(attributeName, profile[attributeName]);\n\t\t}\n\t\tconst email = this.getProfileValue(profile, userDataMap.email);\n\t\tconst profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n\t\tconst name = this.getProfileValue(profile, userDataMap.name, true);\n\n\t\t// Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\t\tif (!email) {\n\t\t\tthrow new Error('SAML Profile did not contain an email address');\n\t\t}\n\n\t\tconst userObject: ISAMLUser = {\n\t\t\tsamlLogin: {\n\t\t\t\tprovider: this.relayState,\n\t\t\t\tidp: profile.issuer,\n\t\t\t\tidpSession: profile.sessionIndex,\n\t\t\t\tnameID: profile.nameID,\n\t\t\t},\n\t\t\temailList: ensureArray<string>(email),\n\t\t\tfullName: name || profile.displayName || profile.username,\n\t\t\teppn: profile.eppn,\n\t\t\tattributeList,\n\t\t\tidentifier: userDataMap.identifier,\n\t\t};\n\n\t\tif (profileUsername) {\n\t\t\tuserObject.username = this.normalizeUsername(profileUsername);\n\t\t}\n\n\t\tif (profile.language) {\n\t\t\tuserObject.language = profile.language;\n\t\t}\n\n\t\tif (profile.channels) {\n\t\t\tif (Array.isArray(profile.channels)) {\n\t\t\t\tuserObject.channels = profile.channels;\n\t\t\t} else {\n\t\t\t\tuserObject.channels = profile.channels.split(',');\n\t\t\t}\n\t\t}\n\n\t\tthis.events.emit('mapUser', { profile, userObject });\n\n\t\treturn userObject;\n\t}\n}\n\nSAMLUtils.events = new EventEmitter();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/Utils.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/Utils.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/Utils.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport zlib from 'zlib';\n\nimport type { Logger } from '@rocket.chat/logger';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport type { IUserDataMap, IAttributeMapping } from '../definition/IAttributeMapping';\nimport type { ISAMLGlobalSettings } from '../definition/ISAMLGlobalSettings';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { StatusCode } from './constants';\n\nlet providerList: Array<IServiceProviderOptions> = [];\nlet debug = false;\nlet relayState: string | null = null;\nlet logger: Logger | undefined;\n\nconst globalSettings: ISAMLGlobalSettings = {\n\tgenerateUsername: false,\n\tnameOverwrite: false,\n\tmailOverwrite: false,\n\timmutableProperty: 'EMail',\n\tdefaultUserRole: 'user',\n\tuserDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n\tusernameNormalize: 'None',\n\tchannelsAttributeUpdate: false,\n\tincludePrivateChannelsInUpdate: false,\n};\n\nexport class SAMLUtils {\n\tpublic static events: EventEmitter;\n\n\tpublic static get isDebugging(): boolean {\n\t\treturn debug;\n\t}\n\n\tpublic static get globalSettings(): ISAMLGlobalSettings {\n\t\treturn globalSettings;\n\t}\n\n\tpublic static get serviceProviders(): Array<IServiceProviderOptions> {\n\t\treturn providerList;\n\t}\n\n\tpublic static get relayState(): string | null {\n\t\treturn relayState;\n\t}\n\n\tpublic static set relayState(value: string | null) {\n\t\trelayState = value;\n\t}\n\n\tpublic static getServiceProviderOptions(providerName: string): IServiceProviderOptions | undefined {\n\t\tthis.log(providerName, providerList);\n\n\t\treturn providerList.find((providerOptions) => providerOptions.provider === providerName);\n\t}\n\n\tpublic static setServiceProvidersList(list: Array<IServiceProviderOptions>): void {\n\t\tproviderList = list;\n\t}\n\n\tpublic static setLoggerInstance(instance: Logger): void {\n\t\tlogger = instance;\n\t}\n\n\t// TODO: Some of those should probably not be global\n\tpublic static updateGlobalSettings(samlConfigs: Record<string, any>): void {\n\t\tdebug = Boolean(samlConfigs.debug);\n\n\t\tglobalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n\t\tglobalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n\t\tglobalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n\t\tglobalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n\t\tglobalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n\t\tif (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n\t\t\tglobalSettings.immutableProperty = samlConfigs.immutableProperty;\n\t\t}\n\n\t\tif (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n\t\t\tglobalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n\t\t}\n\n\t\tif (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n\t\t\tglobalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n\t\t}\n\n\t\tif (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n\t\t\tglobalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n\t\t}\n\t}\n\n\tpublic static generateUniqueID(): string {\n\t\tconst chars = 'abcdef0123456789';\n\t\tlet uniqueID = 'id-';\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tuniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n\t\t}\n\t\treturn uniqueID;\n\t}\n\n\tpublic static generateInstant(): string {\n\t\treturn new Date().toISOString();\n\t}\n\n\tpublic static certToPEM(cert: string): string {\n\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tif (!lines) {\n\t\t\tthrow new Error('Invalid Certificate');\n\t\t}\n\n\t\tlines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n\t\tlines.push('-----END CERTIFICATE-----');\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic static fillTemplateData(template: string, data: Record<string, string>): string {\n\t\tlet newTemplate = template;\n\n\t\tfor (const variable in data) {\n\t\t\tif (variable in data) {\n\t\t\t\tconst key = `__${variable}__`;\n\t\t\t\twhile (newTemplate.includes(key)) {\n\t\t\t\t\tnewTemplate = newTemplate.replace(key, data[variable]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTemplate;\n\t}\n\n\tpublic static getValidationActionRedirectPath(credentialToken: string, redirectUrl?: string): string {\n\t\tconst redirectUrlParam = redirectUrl ? `&redirectUrl=${encodeURIComponent(redirectUrl)}` : '';\n\t\t// the saml_idp_credentialToken param is needed by the mobile app\n\t\treturn `saml/${credentialToken}?saml_idp_credentialToken=${credentialToken}${redirectUrlParam}`;\n\t}\n\n\tpublic static log(obj: any, ...args: Array<any>): void {\n\t\tif (debug && logger) {\n\t\t\tlogger.debug(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static error(obj: any, ...args: Array<any>): void {\n\t\tif (logger) {\n\t\t\tlogger.error(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static async inflateXml(\n\t\tbase64Data: string,\n\t\tsuccessCallback: (xml: string) => Promise<void>,\n\t\terrorCallback: (err: string | object | null) => Promise<void>,\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst buffer = Buffer.from(base64Data, 'base64');\n\t\t\tzlib.inflateRaw(buffer, (err, decoded) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.log(`Error while inflating. ${err}`);\n\t\t\t\t\treturn reject(errorCallback(err));\n\t\t\t\t}\n\n\t\t\t\tif (!decoded) {\n\t\t\t\t\treturn reject(errorCallback('Failed to extract request data'));\n\t\t\t\t}\n\n\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\treturn resolve(successCallback(xmlString));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {\n\t\tlet successStatus = false;\n\t\tlet status = null;\n\t\tlet messageText = '';\n\n\t\tconst statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n\t\tif (statusNodes.length) {\n\t\t\tconst statusNode = statusNodes[0];\n\t\t\tconst statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n\t\t\tif (statusMessage?.firstChild?.textContent) {\n\t\t\t\tmessageText = statusMessage.firstChild.textContent;\n\t\t\t}\n\n\t\t\tstatus = statusNode.getAttribute('Value');\n\n\t\t\tif (status === StatusCode.success) {\n\t\t\t\tsuccessStatus = true;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsuccess: successStatus,\n\t\t\tmessage: messageText,\n\t\t\tstatusCode: status || '',\n\t\t};\n\t}\n\n\tpublic static normalizeCert(cert: string): string {\n\t\tif (!cert) {\n\t\t\treturn cert;\n\t\t}\n\n\t\treturn cert\n\t\t\t.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/-+END CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t.trim();\n\t}\n\n\tpublic static getUserDataMapping(): IUserDataMap {\n\t\tconst { userDataFieldMap, immutableProperty } = globalSettings;\n\n\t\tlet map: Record<string, any>;\n\n\t\ttry {\n\t\t\tmap = JSON.parse(userDataFieldMap);\n\t\t} catch (e) {\n\t\t\tSAMLUtils.log(userDataFieldMap);\n\t\t\tSAMLUtils.log(e);\n\t\t\tthrow new Error('Failed to parse custom user field map');\n\t\t}\n\n\t\tconst parsedMap: IUserDataMap = {\n\t\t\tattributeList: new Set(),\n\t\t\temail: {\n\t\t\t\tfieldName: 'email',\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\tfieldName: 'username',\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tfieldName: 'cn',\n\t\t\t},\n\t\t\tidentifier: {\n\t\t\t\ttype: '',\n\t\t\t},\n\t\t};\n\n\t\tlet identifier = immutableProperty.toLowerCase();\n\n\t\tfor (const spFieldName in map) {\n\t\t\tif (!map.hasOwnProperty(spFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst attribute = map[spFieldName];\n\t\t\tif (typeof attribute !== 'string' && typeof attribute !== 'object') {\n\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t}\n\n\t\t\tif (spFieldName === '__identifier__') {\n\t\t\t\tif (typeof attribute !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid identifier.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = attribute;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet attributeMap: IAttributeMapping | null = null;\n\n\t\t\t// If it's a complex type, let's check what's in it\n\t\t\tif (typeof attribute === 'object') {\n\t\t\t\t// A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n\t\t\t\tif (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\n\t\t\t\tif (Array.isArray(fieldName)) {\n\t\t\t\t\tif (!fieldName.length) {\n\t\t\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const idpFieldName of fieldName) {\n\t\t\t\t\t\tparsedMap.attributeList.add(idpFieldName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparsedMap.attributeList.add(fieldName);\n\t\t\t\t}\n\n\t\t\t\tif (regex && typeof regex !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid RegEx');\n\t\t\t\t}\n\n\t\t\t\tif (template && typeof template !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid Template');\n\t\t\t\t}\n\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t...(regex && { regex }),\n\t\t\t\t\t...(template && { template }),\n\t\t\t\t};\n\t\t\t} else if (typeof attribute === 'string') {\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName: attribute,\n\t\t\t\t};\n\t\t\t\tparsedMap.attributeList.add(attribute);\n\t\t\t}\n\n\t\t\tif (attributeMap) {\n\t\t\t\tif (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n\t\t\t\t\tparsedMap[spFieldName] = attributeMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (identifier) {\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {\n\t\t\t\tparsedMap.identifier.type = 'custom';\n\t\t\t\tparsedMap.identifier.attribute = identifier;\n\t\t\t\tparsedMap.attributeList.add(identifier);\n\t\t\t}\n\t\t}\n\t\treturn parsedMap;\n\t}\n\n\tpublic static getProfileValue(profile: Record<string, any>, mapping: IAttributeMapping, forceString = false): any {\n\t\tconst values: Record<string, string> = {\n\t\t\tregex: '',\n\t\t};\n\t\tconst fieldNames = ensureArray<string>(mapping.fieldName);\n\n\t\tlet mainValue;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet profileValue = profile[fieldName];\n\n\t\t\tif (Array.isArray(profileValue)) {\n\t\t\t\tfor (let i = 0; i < profile[fieldName].length; i++) {\n\t\t\t\t\t// Add every index to the list of possible values to be used, both first to last and from last to first\n\t\t\t\t\tvalues[`${fieldName}[${i}]`] = profileValue[i];\n\t\t\t\t\tvalues[`${fieldName}[-${Math.abs(0 - profileValue.length + i)}]`] = profileValue[i];\n\t\t\t\t}\n\t\t\t\tvalues[`${fieldName}[]`] = profileValue.join(' ');\n\t\t\t\tif (forceString) {\n\t\t\t\t\tprofileValue = profileValue.join(' ');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[fieldName] = profileValue;\n\t\t\t}\n\n\t\t\tvalues[fieldName] = profileValue;\n\n\t\t\tif (!mainValue) {\n\t\t\t\tmainValue = profileValue;\n\t\t\t}\n\t\t}\n\n\t\tlet shouldRunTemplate = false;\n\t\tif (typeof mapping.template === 'string') {\n\t\t\t// unless the regex result is used on the template, we process the template first\n\t\t\tif (mapping.template.includes('__regex__')) {\n\t\t\t\tshouldRunTemplate = true;\n\t\t\t} else {\n\t\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t\t}\n\t\t}\n\n\t\tif (mapping.regex && mainValue && mainValue.match) {\n\t\t\tlet regexValue;\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {\n\t\t\t\t\tregexValue = match[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regexValue) {\n\t\t\t\tvalues.regex = regexValue;\n\t\t\t\tif (!shouldRunTemplate) {\n\t\t\t\t\tmainValue = regexValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRunTemplate && typeof mapping.template === 'string') {\n\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t}\n\n\t\treturn mainValue;\n\t}\n\n\tpublic static convertArrayBufferToString(buffer: ArrayBuffer, encoding: BufferEncoding = 'utf8'): string {\n\t\treturn Buffer.from(buffer).toString(encoding);\n\t}\n\n\tpublic static normalizeUsername(name: string): string {\n\t\tconst { globalSettings } = this;\n\n\t\tswitch (globalSettings.usernameNormalize) {\n\t\t\tcase 'Lowercase':\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic static mapProfileToUserObject(profile: Record<string, any>): ISAMLUser {\n\t\tconst userDataMap = this.getUserDataMapping();\n\t\tSAMLUtils.log('parsed userDataMap', userDataMap);\n\n\t\tif (userDataMap.identifier.type === 'custom') {\n\t\t\tif (!userDataMap.identifier.attribute) {\n\t\t\t\tthrow new Error('SAML User Data Map: invalid Identifier configuration received.');\n\t\t\t}\n\t\t\tif (!profile[userDataMap.identifier.attribute]) {\n\t\t\t\tthrow new Error(`SAML Profile did not have the expected identifier (${userDataMap.identifier.attribute}).`);\n\t\t\t}\n\t\t}\n\n\t\tconst attributeList = new Map();\n\t\tfor (const attributeName of userDataMap.attributeList) {\n\t\t\tif (profile[attributeName] === undefined) {\n\t\t\t\tthis.log(`SAML user profile is missing the attribute ${attributeName}.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributeList.set(attributeName, profile[attributeName]);\n\t\t}\n\t\tconst email = this.getProfileValue(profile, userDataMap.email);\n\t\tconst profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n\t\tconst name = this.getProfileValue(profile, userDataMap.name, true);\n\n\t\t// Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\t\tif (!email) {\n\t\t\tthrow new Error('SAML Profile did not contain an email address');\n\t\t}\n\n\t\tconst userObject: ISAMLUser = {\n\t\t\tsamlLogin: {\n\t\t\t\tprovider: this.relayState,\n\t\t\t\tidp: profile.issuer,\n\t\t\t\tidpSession: profile.sessionIndex,\n\t\t\t\tnameID: profile.nameID,\n\t\t\t},\n\t\t\temailList: ensureArray<string>(email),\n\t\t\tfullName: name || profile.displayName || profile.username,\n\t\t\teppn: profile.eppn,\n\t\t\tattributeList,\n\t\t\tidentifier: userDataMap.identifier,\n\t\t};\n\n\t\tif (profileUsername) {\n\t\t\tuserObject.username = this.normalizeUsername(profileUsername);\n\t\t}\n\n\t\tif (profile.language) {\n\t\t\tuserObject.language = profile.language;\n\t\t}\n\n\t\tif (profile.channels) {\n\t\t\tif (Array.isArray(profile.channels)) {\n\t\t\t\tuserObject.channels = profile.channels;\n\t\t\t} else {\n\t\t\t\tuserObject.channels = profile.channels.split(',');\n\t\t\t}\n\t\t}\n\n\t\tthis.events.emit('mapUser', { profile, userObject });\n\n\t\treturn userObject;\n\t}\n}\n\nSAMLUtils.events = new EventEmitter();\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      SAMLUtils: () => SAMLUtils\n    });\n    let EventEmitter;\n    module.link(\"events\", {\n      EventEmitter(v) {\n        EventEmitter = v;\n      }\n    }, 0);\n    let zlib;\n    module.link(\"zlib\", {\n      default(v) {\n        zlib = v;\n      }\n    }, 1);\n    let ensureArray;\n    module.link(\"../../../../lib/utils/arrayUtils\", {\n      ensureArray(v) {\n        ensureArray = v;\n      }\n    }, 2);\n    let StatusCode;\n    module.link(\"./constants\", {\n      StatusCode(v) {\n        StatusCode = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    let providerList = [];\n    let debug = false;\n    let relayState = null;\n    let logger;\n    const globalSettings = {\n      generateUsername: false,\n      nameOverwrite: false,\n      mailOverwrite: false,\n      immutableProperty: 'EMail',\n      defaultUserRole: 'user',\n      userDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n      usernameNormalize: 'None',\n      channelsAttributeUpdate: false,\n      includePrivateChannelsInUpdate: false\n    };\n    class SAMLUtils {\n      static get isDebugging() {\n        return debug;\n      }\n      static get globalSettings() {\n        return globalSettings;\n      }\n      static get serviceProviders() {\n        return providerList;\n      }\n      static get relayState() {\n        return relayState;\n      }\n      static set relayState(value) {\n        relayState = value;\n      }\n      static getServiceProviderOptions(providerName) {\n        this.log(providerName, providerList);\n        return providerList.find(providerOptions => providerOptions.provider === providerName);\n      }\n      static setServiceProvidersList(list) {\n        providerList = list;\n      }\n      static setLoggerInstance(instance) {\n        logger = instance;\n      }\n      // TODO: Some of those should probably not be global\n      static updateGlobalSettings(samlConfigs) {\n        debug = Boolean(samlConfigs.debug);\n        globalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n        globalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n        globalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n        globalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n        globalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n        if (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n          globalSettings.immutableProperty = samlConfigs.immutableProperty;\n        }\n        if (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n          globalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n        }\n        if (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n          globalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n        }\n        if (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n          globalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n        }\n      }\n      static generateUniqueID() {\n        const chars = 'abcdef0123456789';\n        let uniqueID = 'id-';\n        for (let i = 0; i < 20; i++) {\n          uniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n        }\n        return uniqueID;\n      }\n      static generateInstant() {\n        return new Date().toISOString();\n      }\n      static certToPEM(cert) {\n        const lines = cert.match(/.{1,64}/g);\n        if (!lines) {\n          throw new Error('Invalid Certificate');\n        }\n        lines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n        lines.push('-----END CERTIFICATE-----');\n        return lines.join('\\n');\n      }\n      static fillTemplateData(template, data) {\n        let newTemplate = template;\n        for (const variable in data) {\n          if (variable in data) {\n            const key = \"__\".concat(variable, \"__\");\n            while (newTemplate.includes(key)) {\n              newTemplate = newTemplate.replace(key, data[variable]);\n            }\n          }\n        }\n        return newTemplate;\n      }\n      static getValidationActionRedirectPath(credentialToken, redirectUrl) {\n        const redirectUrlParam = redirectUrl ? \"&redirectUrl=\".concat(encodeURIComponent(redirectUrl)) : '';\n        // the saml_idp_credentialToken param is needed by the mobile app\n        return \"saml/\".concat(credentialToken, \"?saml_idp_credentialToken=\").concat(credentialToken).concat(redirectUrlParam);\n      }\n      static log(obj) {\n        if (debug && logger) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          logger.debug(obj, ...args);\n        }\n      }\n      static error(obj) {\n        if (logger) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          logger.error(obj, ...args);\n        }\n      }\n      static async inflateXml(base64Data, successCallback, errorCallback) {\n        return new Promise((resolve, reject) => {\n          const buffer = Buffer.from(base64Data, 'base64');\n          zlib.inflateRaw(buffer, (err, decoded) => {\n            if (err) {\n              this.log(\"Error while inflating. \".concat(err));\n              return reject(errorCallback(err));\n            }\n            if (!decoded) {\n              return reject(errorCallback('Failed to extract request data'));\n            }\n            const xmlString = this.convertArrayBufferToString(decoded);\n            return resolve(successCallback(xmlString));\n          });\n        });\n      }\n      static validateStatus(doc) {\n        let successStatus = false;\n        let status = null;\n        let messageText = '';\n        const statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n        if (statusNodes.length) {\n          var _statusMessage$firstC;\n          const statusNode = statusNodes[0];\n          const statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n          if (statusMessage !== null && statusMessage !== void 0 && (_statusMessage$firstC = statusMessage.firstChild) !== null && _statusMessage$firstC !== void 0 && _statusMessage$firstC.textContent) {\n            messageText = statusMessage.firstChild.textContent;\n          }\n          status = statusNode.getAttribute('Value');\n          if (status === StatusCode.success) {\n            successStatus = true;\n          }\n        }\n        return {\n          success: successStatus,\n          message: messageText,\n          statusCode: status || ''\n        };\n      }\n      static normalizeCert(cert) {\n        if (!cert) {\n          return cert;\n        }\n        return cert.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '').replace(/-+END CERTIFICATE-+\\r?\\n?/, '').replace(/\\r\\n/g, '\\n').trim();\n      }\n      static getUserDataMapping() {\n        const {\n          userDataFieldMap,\n          immutableProperty\n        } = globalSettings;\n        let map;\n        try {\n          map = JSON.parse(userDataFieldMap);\n        } catch (e) {\n          SAMLUtils.log(userDataFieldMap);\n          SAMLUtils.log(e);\n          throw new Error('Failed to parse custom user field map');\n        }\n        const parsedMap = {\n          attributeList: new Set(),\n          email: {\n            fieldName: 'email'\n          },\n          username: {\n            fieldName: 'username'\n          },\n          name: {\n            fieldName: 'cn'\n          },\n          identifier: {\n            type: ''\n          }\n        };\n        let identifier = immutableProperty.toLowerCase();\n        for (const spFieldName in map) {\n          if (!map.hasOwnProperty(spFieldName)) {\n            continue;\n          }\n          const attribute = map[spFieldName];\n          if (typeof attribute !== 'string' && typeof attribute !== 'object') {\n            throw new Error(\"SAML User Map: Invalid configuration for \".concat(spFieldName, \" field.\"));\n          }\n          if (spFieldName === '__identifier__') {\n            if (typeof attribute !== 'string') {\n              throw new Error('SAML User Map: Invalid identifier.');\n            }\n            identifier = attribute;\n            continue;\n          }\n          let attributeMap = null;\n          // If it's a complex type, let's check what's in it\n          if (typeof attribute === 'object') {\n            // A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n            if (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n              continue;\n            }\n            const fieldName = attribute.fieldName || attribute.fieldNames;\n            const {\n              regex,\n              template\n            } = attribute;\n            if (Array.isArray(fieldName)) {\n              if (!fieldName.length) {\n                throw new Error(\"SAML User Map: Invalid configuration for \".concat(spFieldName, \" field.\"));\n              }\n              for (const idpFieldName of fieldName) {\n                parsedMap.attributeList.add(idpFieldName);\n              }\n            } else {\n              parsedMap.attributeList.add(fieldName);\n            }\n            if (regex && typeof regex !== 'string') {\n              throw new Error('SAML User Map: Invalid RegEx');\n            }\n            if (template && typeof template !== 'string') {\n              throw new Error('SAML User Map: Invalid Template');\n            }\n            attributeMap = _objectSpread(_objectSpread({\n              fieldName\n            }, regex && {\n              regex\n            }), template && {\n              template\n            });\n          } else if (typeof attribute === 'string') {\n            attributeMap = {\n              fieldName: attribute\n            };\n            parsedMap.attributeList.add(attribute);\n          }\n          if (attributeMap) {\n            if (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n              parsedMap[spFieldName] = attributeMap;\n            }\n          }\n        }\n        if (identifier) {\n          const defaultTypes = ['email', 'username'];\n          if (defaultTypes.includes(identifier)) {\n            parsedMap.identifier.type = identifier;\n          } else {\n            parsedMap.identifier.type = 'custom';\n            parsedMap.identifier.attribute = identifier;\n            parsedMap.attributeList.add(identifier);\n          }\n        }\n        return parsedMap;\n      }\n      static getProfileValue(profile, mapping) {\n        let forceString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        const values = {\n          regex: ''\n        };\n        const fieldNames = ensureArray(mapping.fieldName);\n        let mainValue;\n        for (const fieldName of fieldNames) {\n          let profileValue = profile[fieldName];\n          if (Array.isArray(profileValue)) {\n            for (let i = 0; i < profile[fieldName].length; i++) {\n              // Add every index to the list of possible values to be used, both first to last and from last to first\n              values[\"\".concat(fieldName, \"[\").concat(i, \"]\")] = profileValue[i];\n              values[\"\".concat(fieldName, \"[-\").concat(Math.abs(0 - profileValue.length + i), \"]\")] = profileValue[i];\n            }\n            values[\"\".concat(fieldName, \"[]\")] = profileValue.join(' ');\n            if (forceString) {\n              profileValue = profileValue.join(' ');\n            }\n          } else {\n            values[fieldName] = profileValue;\n          }\n          values[fieldName] = profileValue;\n          if (!mainValue) {\n            mainValue = profileValue;\n          }\n        }\n        let shouldRunTemplate = false;\n        if (typeof mapping.template === 'string') {\n          // unless the regex result is used on the template, we process the template first\n          if (mapping.template.includes('__regex__')) {\n            shouldRunTemplate = true;\n          } else {\n            mainValue = this.fillTemplateData(mapping.template, values);\n          }\n        }\n        if (mapping.regex && mainValue && mainValue.match) {\n          let regexValue;\n          const match = mainValue.match(new RegExp(mapping.regex));\n          if (match !== null && match !== void 0 && match.length) {\n            if (match.length >= 2) {\n              regexValue = match[1];\n            } else {\n              regexValue = match[0];\n            }\n          }\n          if (regexValue) {\n            values.regex = regexValue;\n            if (!shouldRunTemplate) {\n              mainValue = regexValue;\n            }\n          }\n        }\n        if (shouldRunTemplate && typeof mapping.template === 'string') {\n          mainValue = this.fillTemplateData(mapping.template, values);\n        }\n        return mainValue;\n      }\n      static convertArrayBufferToString(buffer) {\n        let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n        return Buffer.from(buffer).toString(encoding);\n      }\n      static normalizeUsername(name) {\n        const {\n          globalSettings\n        } = this;\n        switch (globalSettings.usernameNormalize) {\n          case 'Lowercase':\n            name = name.toLowerCase();\n            break;\n        }\n        return name;\n      }\n      static mapProfileToUserObject(profile) {\n        const userDataMap = this.getUserDataMapping();\n        SAMLUtils.log('parsed userDataMap', userDataMap);\n        if (userDataMap.identifier.type === 'custom') {\n          if (!userDataMap.identifier.attribute) {\n            throw new Error('SAML User Data Map: invalid Identifier configuration received.');\n          }\n          if (!profile[userDataMap.identifier.attribute]) {\n            throw new Error(\"SAML Profile did not have the expected identifier (\".concat(userDataMap.identifier.attribute, \").\"));\n          }\n        }\n        const attributeList = new Map();\n        for (const attributeName of userDataMap.attributeList) {\n          if (profile[attributeName] === undefined) {\n            this.log(\"SAML user profile is missing the attribute \".concat(attributeName, \".\"));\n            continue;\n          }\n          attributeList.set(attributeName, profile[attributeName]);\n        }\n        const email = this.getProfileValue(profile, userDataMap.email);\n        const profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n        const name = this.getProfileValue(profile, userDataMap.name, true);\n        // Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n        if (!email) {\n          throw new Error('SAML Profile did not contain an email address');\n        }\n        const userObject = {\n          samlLogin: {\n            provider: this.relayState,\n            idp: profile.issuer,\n            idpSession: profile.sessionIndex,\n            nameID: profile.nameID\n          },\n          emailList: ensureArray(email),\n          fullName: name || profile.displayName || profile.username,\n          eppn: profile.eppn,\n          attributeList,\n          identifier: userDataMap.identifier\n        };\n        if (profileUsername) {\n          userObject.username = this.normalizeUsername(profileUsername);\n        }\n        if (profile.language) {\n          userObject.language = profile.language;\n        }\n        if (profile.channels) {\n          if (Array.isArray(profile.channels)) {\n            userObject.channels = profile.channels;\n          } else {\n            userObject.channels = profile.channels.split(',');\n          }\n        }\n        this.events.emit('mapUser', {\n          profile,\n          userObject\n        });\n        return userObject;\n      }\n    }\n    SAMLUtils.events = void 0;\n    SAMLUtils.events = new EventEmitter();\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","SAMLUtils","EventEmitter","zlib","ensureArray","StatusCode","__reifyWaitForDeps__","providerList","debug","relayState","logger","globalSettings","generateUsername","nameOverwrite","mailOverwrite","immutableProperty","defaultUserRole","userDataFieldMap","usernameNormalize","channelsAttributeUpdate","includePrivateChannelsInUpdate","isDebugging","serviceProviders","value","getServiceProviderOptions","providerName","log","find","providerOptions","provider","setServiceProvidersList","list","setLoggerInstance","instance","updateGlobalSettings","samlConfigs","Boolean","generateUniqueID","chars","uniqueID","i","substr","Math","floor","random","generateInstant","Date","toISOString","certToPEM","cert","lines","match","Error","splice","push","join","fillTemplateData","template","data","newTemplate","variable","key","concat","includes","replace","getValidationActionRedirectPath","credentialToken","redirectUrl","redirectUrlParam","encodeURIComponent","obj","_len","arguments","length","args","Array","_key","error","_len2","_key2","inflateXml","base64Data","successCallback","errorCallback","Promise","resolve","reject","buffer","Buffer","from","inflateRaw","err","decoded","xmlString","convertArrayBufferToString","validateStatus","doc","successStatus","status","messageText","statusNodes","getElementsByTagNameNS","_statusMessage$firstC","statusNode","statusMessage","firstChild","textContent","getAttribute","success","message","statusCode","normalizeCert","trim","getUserDataMapping","map","JSON","parse","e","parsedMap","attributeList","Set","email","fieldName","username","name","identifier","type","toLowerCase","spFieldName","hasOwnProperty","attribute","attributeMap","fieldNames","regex","isArray","idpFieldName","add","defaultTypes","getProfileValue","profile","mapping","forceString","undefined","values","mainValue","profileValue","abs","shouldRunTemplate","regexValue","RegExp","encoding","toString","normalizeUsername","mapProfileToUserObject","userDataMap","Map","attributeName","set","profileUsername","userObject","samlLogin","idp","issuer","idpSession","sessionIndex","nameID","emailList","fullName","displayName","eppn","language","channels","split","events","emit","__reify_async_result__","_reifyError","self","async"],"sources":["app/meteor-accounts-saml/server/lib/Utils.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport zlib from 'zlib';\n\nimport type { Logger } from '@rocket.chat/logger';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport type { IUserDataMap, IAttributeMapping } from '../definition/IAttributeMapping';\nimport type { ISAMLGlobalSettings } from '../definition/ISAMLGlobalSettings';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { StatusCode } from './constants';\n\nlet providerList: Array<IServiceProviderOptions> = [];\nlet debug = false;\nlet relayState: string | null = null;\nlet logger: Logger | undefined;\n\nconst globalSettings: ISAMLGlobalSettings = {\n\tgenerateUsername: false,\n\tnameOverwrite: false,\n\tmailOverwrite: false,\n\timmutableProperty: 'EMail',\n\tdefaultUserRole: 'user',\n\tuserDataFieldMap: '{\"username\":\"username\", \"email\":\"email\", \"cn\": \"name\"}',\n\tusernameNormalize: 'None',\n\tchannelsAttributeUpdate: false,\n\tincludePrivateChannelsInUpdate: false,\n};\n\nexport class SAMLUtils {\n\tpublic static events: EventEmitter;\n\n\tpublic static get isDebugging(): boolean {\n\t\treturn debug;\n\t}\n\n\tpublic static get globalSettings(): ISAMLGlobalSettings {\n\t\treturn globalSettings;\n\t}\n\n\tpublic static get serviceProviders(): Array<IServiceProviderOptions> {\n\t\treturn providerList;\n\t}\n\n\tpublic static get relayState(): string | null {\n\t\treturn relayState;\n\t}\n\n\tpublic static set relayState(value: string | null) {\n\t\trelayState = value;\n\t}\n\n\tpublic static getServiceProviderOptions(providerName: string): IServiceProviderOptions | undefined {\n\t\tthis.log(providerName, providerList);\n\n\t\treturn providerList.find((providerOptions) => providerOptions.provider === providerName);\n\t}\n\n\tpublic static setServiceProvidersList(list: Array<IServiceProviderOptions>): void {\n\t\tproviderList = list;\n\t}\n\n\tpublic static setLoggerInstance(instance: Logger): void {\n\t\tlogger = instance;\n\t}\n\n\t// TODO: Some of those should probably not be global\n\tpublic static updateGlobalSettings(samlConfigs: Record<string, any>): void {\n\t\tdebug = Boolean(samlConfigs.debug);\n\n\t\tglobalSettings.generateUsername = Boolean(samlConfigs.generateUsername);\n\t\tglobalSettings.nameOverwrite = Boolean(samlConfigs.nameOverwrite);\n\t\tglobalSettings.mailOverwrite = Boolean(samlConfigs.mailOverwrite);\n\t\tglobalSettings.channelsAttributeUpdate = Boolean(samlConfigs.channelsAttributeUpdate);\n\t\tglobalSettings.includePrivateChannelsInUpdate = Boolean(samlConfigs.includePrivateChannelsInUpdate);\n\n\t\tif (samlConfigs.immutableProperty && typeof samlConfigs.immutableProperty === 'string') {\n\t\t\tglobalSettings.immutableProperty = samlConfigs.immutableProperty;\n\t\t}\n\n\t\tif (samlConfigs.usernameNormalize && typeof samlConfigs.usernameNormalize === 'string') {\n\t\t\tglobalSettings.usernameNormalize = samlConfigs.usernameNormalize;\n\t\t}\n\n\t\tif (samlConfigs.defaultUserRole && typeof samlConfigs.defaultUserRole === 'string') {\n\t\t\tglobalSettings.defaultUserRole = samlConfigs.defaultUserRole;\n\t\t}\n\n\t\tif (samlConfigs.userDataFieldMap && typeof samlConfigs.userDataFieldMap === 'string') {\n\t\t\tglobalSettings.userDataFieldMap = samlConfigs.userDataFieldMap;\n\t\t}\n\t}\n\n\tpublic static generateUniqueID(): string {\n\t\tconst chars = 'abcdef0123456789';\n\t\tlet uniqueID = 'id-';\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tuniqueID += chars.substr(Math.floor(Math.random() * 15), 1);\n\t\t}\n\t\treturn uniqueID;\n\t}\n\n\tpublic static generateInstant(): string {\n\t\treturn new Date().toISOString();\n\t}\n\n\tpublic static certToPEM(cert: string): string {\n\t\tconst lines = cert.match(/.{1,64}/g);\n\t\tif (!lines) {\n\t\t\tthrow new Error('Invalid Certificate');\n\t\t}\n\n\t\tlines.splice(0, 0, '-----BEGIN CERTIFICATE-----');\n\t\tlines.push('-----END CERTIFICATE-----');\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tpublic static fillTemplateData(template: string, data: Record<string, string>): string {\n\t\tlet newTemplate = template;\n\n\t\tfor (const variable in data) {\n\t\t\tif (variable in data) {\n\t\t\t\tconst key = `__${variable}__`;\n\t\t\t\twhile (newTemplate.includes(key)) {\n\t\t\t\t\tnewTemplate = newTemplate.replace(key, data[variable]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newTemplate;\n\t}\n\n\tpublic static getValidationActionRedirectPath(credentialToken: string, redirectUrl?: string): string {\n\t\tconst redirectUrlParam = redirectUrl ? `&redirectUrl=${encodeURIComponent(redirectUrl)}` : '';\n\t\t// the saml_idp_credentialToken param is needed by the mobile app\n\t\treturn `saml/${credentialToken}?saml_idp_credentialToken=${credentialToken}${redirectUrlParam}`;\n\t}\n\n\tpublic static log(obj: any, ...args: Array<any>): void {\n\t\tif (debug && logger) {\n\t\t\tlogger.debug(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static error(obj: any, ...args: Array<any>): void {\n\t\tif (logger) {\n\t\t\tlogger.error(obj, ...args);\n\t\t}\n\t}\n\n\tpublic static async inflateXml(\n\t\tbase64Data: string,\n\t\tsuccessCallback: (xml: string) => Promise<void>,\n\t\terrorCallback: (err: string | object | null) => Promise<void>,\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst buffer = Buffer.from(base64Data, 'base64');\n\t\t\tzlib.inflateRaw(buffer, (err, decoded) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.log(`Error while inflating. ${err}`);\n\t\t\t\t\treturn reject(errorCallback(err));\n\t\t\t\t}\n\n\t\t\t\tif (!decoded) {\n\t\t\t\t\treturn reject(errorCallback('Failed to extract request data'));\n\t\t\t\t}\n\n\t\t\t\tconst xmlString = this.convertArrayBufferToString(decoded);\n\t\t\t\treturn resolve(successCallback(xmlString));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic static validateStatus(doc: Document): {\n\t\tsuccess: boolean;\n\t\tmessage: string;\n\t\tstatusCode: string;\n\t} {\n\t\tlet successStatus = false;\n\t\tlet status = null;\n\t\tlet messageText = '';\n\n\t\tconst statusNodes = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusCode');\n\n\t\tif (statusNodes.length) {\n\t\t\tconst statusNode = statusNodes[0];\n\t\t\tconst statusMessage = doc.getElementsByTagNameNS('urn:oasis:names:tc:SAML:2.0:protocol', 'StatusMessage')[0];\n\n\t\t\tif (statusMessage?.firstChild?.textContent) {\n\t\t\t\tmessageText = statusMessage.firstChild.textContent;\n\t\t\t}\n\n\t\t\tstatus = statusNode.getAttribute('Value');\n\n\t\t\tif (status === StatusCode.success) {\n\t\t\t\tsuccessStatus = true;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsuccess: successStatus,\n\t\t\tmessage: messageText,\n\t\t\tstatusCode: status || '',\n\t\t};\n\t}\n\n\tpublic static normalizeCert(cert: string): string {\n\t\tif (!cert) {\n\t\t\treturn cert;\n\t\t}\n\n\t\treturn cert\n\t\t\t.replace(/-+BEGIN CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/-+END CERTIFICATE-+\\r?\\n?/, '')\n\t\t\t.replace(/\\r\\n/g, '\\n')\n\t\t\t.trim();\n\t}\n\n\tpublic static getUserDataMapping(): IUserDataMap {\n\t\tconst { userDataFieldMap, immutableProperty } = globalSettings;\n\n\t\tlet map: Record<string, any>;\n\n\t\ttry {\n\t\t\tmap = JSON.parse(userDataFieldMap);\n\t\t} catch (e) {\n\t\t\tSAMLUtils.log(userDataFieldMap);\n\t\t\tSAMLUtils.log(e);\n\t\t\tthrow new Error('Failed to parse custom user field map');\n\t\t}\n\n\t\tconst parsedMap: IUserDataMap = {\n\t\t\tattributeList: new Set(),\n\t\t\temail: {\n\t\t\t\tfieldName: 'email',\n\t\t\t},\n\t\t\tusername: {\n\t\t\t\tfieldName: 'username',\n\t\t\t},\n\t\t\tname: {\n\t\t\t\tfieldName: 'cn',\n\t\t\t},\n\t\t\tidentifier: {\n\t\t\t\ttype: '',\n\t\t\t},\n\t\t};\n\n\t\tlet identifier = immutableProperty.toLowerCase();\n\n\t\tfor (const spFieldName in map) {\n\t\t\tif (!map.hasOwnProperty(spFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst attribute = map[spFieldName];\n\t\t\tif (typeof attribute !== 'string' && typeof attribute !== 'object') {\n\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t}\n\n\t\t\tif (spFieldName === '__identifier__') {\n\t\t\t\tif (typeof attribute !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid identifier.');\n\t\t\t\t}\n\n\t\t\t\tidentifier = attribute;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet attributeMap: IAttributeMapping | null = null;\n\n\t\t\t// If it's a complex type, let's check what's in it\n\t\t\tif (typeof attribute === 'object') {\n\t\t\t\t// A fieldName is mandatory for complex fields. If it's missing, let's skip this one.\n\t\t\t\tif (!attribute.hasOwnProperty('fieldName') && !attribute.hasOwnProperty('fieldNames')) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst fieldName = attribute.fieldName || attribute.fieldNames;\n\t\t\t\tconst { regex, template } = attribute;\n\n\t\t\t\tif (Array.isArray(fieldName)) {\n\t\t\t\t\tif (!fieldName.length) {\n\t\t\t\t\t\tthrow new Error(`SAML User Map: Invalid configuration for ${spFieldName} field.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const idpFieldName of fieldName) {\n\t\t\t\t\t\tparsedMap.attributeList.add(idpFieldName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparsedMap.attributeList.add(fieldName);\n\t\t\t\t}\n\n\t\t\t\tif (regex && typeof regex !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid RegEx');\n\t\t\t\t}\n\n\t\t\t\tif (template && typeof template !== 'string') {\n\t\t\t\t\tthrow new Error('SAML User Map: Invalid Template');\n\t\t\t\t}\n\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName,\n\t\t\t\t\t...(regex && { regex }),\n\t\t\t\t\t...(template && { template }),\n\t\t\t\t};\n\t\t\t} else if (typeof attribute === 'string') {\n\t\t\t\tattributeMap = {\n\t\t\t\t\tfieldName: attribute,\n\t\t\t\t};\n\t\t\t\tparsedMap.attributeList.add(attribute);\n\t\t\t}\n\n\t\t\tif (attributeMap) {\n\t\t\t\tif (spFieldName === 'email' || spFieldName === 'username' || spFieldName === 'name') {\n\t\t\t\t\tparsedMap[spFieldName] = attributeMap;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (identifier) {\n\t\t\tconst defaultTypes = ['email', 'username'];\n\n\t\t\tif (defaultTypes.includes(identifier)) {\n\t\t\t\tparsedMap.identifier.type = identifier;\n\t\t\t} else {\n\t\t\t\tparsedMap.identifier.type = 'custom';\n\t\t\t\tparsedMap.identifier.attribute = identifier;\n\t\t\t\tparsedMap.attributeList.add(identifier);\n\t\t\t}\n\t\t}\n\t\treturn parsedMap;\n\t}\n\n\tpublic static getProfileValue(profile: Record<string, any>, mapping: IAttributeMapping, forceString = false): any {\n\t\tconst values: Record<string, string> = {\n\t\t\tregex: '',\n\t\t};\n\t\tconst fieldNames = ensureArray<string>(mapping.fieldName);\n\n\t\tlet mainValue;\n\t\tfor (const fieldName of fieldNames) {\n\t\t\tlet profileValue = profile[fieldName];\n\n\t\t\tif (Array.isArray(profileValue)) {\n\t\t\t\tfor (let i = 0; i < profile[fieldName].length; i++) {\n\t\t\t\t\t// Add every index to the list of possible values to be used, both first to last and from last to first\n\t\t\t\t\tvalues[`${fieldName}[${i}]`] = profileValue[i];\n\t\t\t\t\tvalues[`${fieldName}[-${Math.abs(0 - profileValue.length + i)}]`] = profileValue[i];\n\t\t\t\t}\n\t\t\t\tvalues[`${fieldName}[]`] = profileValue.join(' ');\n\t\t\t\tif (forceString) {\n\t\t\t\t\tprofileValue = profileValue.join(' ');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvalues[fieldName] = profileValue;\n\t\t\t}\n\n\t\t\tvalues[fieldName] = profileValue;\n\n\t\t\tif (!mainValue) {\n\t\t\t\tmainValue = profileValue;\n\t\t\t}\n\t\t}\n\n\t\tlet shouldRunTemplate = false;\n\t\tif (typeof mapping.template === 'string') {\n\t\t\t// unless the regex result is used on the template, we process the template first\n\t\t\tif (mapping.template.includes('__regex__')) {\n\t\t\t\tshouldRunTemplate = true;\n\t\t\t} else {\n\t\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t\t}\n\t\t}\n\n\t\tif (mapping.regex && mainValue && mainValue.match) {\n\t\t\tlet regexValue;\n\t\t\tconst match = mainValue.match(new RegExp(mapping.regex));\n\t\t\tif (match?.length) {\n\t\t\t\tif (match.length >= 2) {\n\t\t\t\t\tregexValue = match[1];\n\t\t\t\t} else {\n\t\t\t\t\tregexValue = match[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regexValue) {\n\t\t\t\tvalues.regex = regexValue;\n\t\t\t\tif (!shouldRunTemplate) {\n\t\t\t\t\tmainValue = regexValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (shouldRunTemplate && typeof mapping.template === 'string') {\n\t\t\tmainValue = this.fillTemplateData(mapping.template, values);\n\t\t}\n\n\t\treturn mainValue;\n\t}\n\n\tpublic static convertArrayBufferToString(buffer: ArrayBuffer, encoding: BufferEncoding = 'utf8'): string {\n\t\treturn Buffer.from(buffer).toString(encoding);\n\t}\n\n\tpublic static normalizeUsername(name: string): string {\n\t\tconst { globalSettings } = this;\n\n\t\tswitch (globalSettings.usernameNormalize) {\n\t\t\tcase 'Lowercase':\n\t\t\t\tname = name.toLowerCase();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic static mapProfileToUserObject(profile: Record<string, any>): ISAMLUser {\n\t\tconst userDataMap = this.getUserDataMapping();\n\t\tSAMLUtils.log('parsed userDataMap', userDataMap);\n\n\t\tif (userDataMap.identifier.type === 'custom') {\n\t\t\tif (!userDataMap.identifier.attribute) {\n\t\t\t\tthrow new Error('SAML User Data Map: invalid Identifier configuration received.');\n\t\t\t}\n\t\t\tif (!profile[userDataMap.identifier.attribute]) {\n\t\t\t\tthrow new Error(`SAML Profile did not have the expected identifier (${userDataMap.identifier.attribute}).`);\n\t\t\t}\n\t\t}\n\n\t\tconst attributeList = new Map();\n\t\tfor (const attributeName of userDataMap.attributeList) {\n\t\t\tif (profile[attributeName] === undefined) {\n\t\t\t\tthis.log(`SAML user profile is missing the attribute ${attributeName}.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributeList.set(attributeName, profile[attributeName]);\n\t\t}\n\t\tconst email = this.getProfileValue(profile, userDataMap.email);\n\t\tconst profileUsername = this.getProfileValue(profile, userDataMap.username, true);\n\t\tconst name = this.getProfileValue(profile, userDataMap.name, true);\n\n\t\t// Even if we're not using the email to identify the user, it is still mandatory because it's a mandatory information on Rocket.Chat\n\t\tif (!email) {\n\t\t\tthrow new Error('SAML Profile did not contain an email address');\n\t\t}\n\n\t\tconst userObject: ISAMLUser = {\n\t\t\tsamlLogin: {\n\t\t\t\tprovider: this.relayState,\n\t\t\t\tidp: profile.issuer,\n\t\t\t\tidpSession: profile.sessionIndex,\n\t\t\t\tnameID: profile.nameID,\n\t\t\t},\n\t\t\temailList: ensureArray<string>(email),\n\t\t\tfullName: name || profile.displayName || profile.username,\n\t\t\teppn: profile.eppn,\n\t\t\tattributeList,\n\t\t\tidentifier: userDataMap.identifier,\n\t\t};\n\n\t\tif (profileUsername) {\n\t\t\tuserObject.username = this.normalizeUsername(profileUsername);\n\t\t}\n\n\t\tif (profile.language) {\n\t\t\tuserObject.language = profile.language;\n\t\t}\n\n\t\tif (profile.channels) {\n\t\t\tif (Array.isArray(profile.channels)) {\n\t\t\t\tuserObject.channels = profile.channels;\n\t\t\t} else {\n\t\t\t\tuserObject.channels = profile.channels.split(',');\n\t\t\t}\n\t\t}\n\n\t\tthis.events.emit('mapUser', { profile, userObject });\n\n\t\treturn userObject;\n\t}\n}\n\nSAMLUtils.events = new EventEmitter();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"6a26a73bc4ee6d633d5db63b8bc530f72379730b"}
