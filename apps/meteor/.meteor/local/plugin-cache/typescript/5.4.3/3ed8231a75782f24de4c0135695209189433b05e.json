{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/msTranslate.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/msTranslate.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/msTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/msTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/msTranslate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type { IMessage, IProviderMetadata, ISupportedLanguage, ITranslationResult, MessageAttachment } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\nimport { msLogger } from './logger';\n\n/**\n * Microsoft translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass MsAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\tapiDetectText: string;\n\n\tapiGetLanguages: string;\n\n\tbreakSentence: string;\n\n\t/**\n\t * setup api reference to Microsoft translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'microsoft-translate';\n\t\tthis.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n\t\tthis.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n\t\tthis.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n\t\tthis.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_MicrosoftAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Microsoft'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tconst request = await fetch(this.apiGetLanguages);\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst languages = await request.json();\n\t\tthis.supportedLanguages[target] = Object.keys(languages.translation).map((language) => ({\n\t\t\tlanguage,\n\t\t\tname: languages.translation[language].name,\n\t\t}));\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Re-use method for REST API consumption of MS translate.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @throws Communication Errors\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translate(\n\t\tdata: {\n\t\t\tText: string;\n\t\t}[],\n\t\ttargetLanguages: string[],\n\t): Promise<ITranslationResult> {\n\t\tlet translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\ttargetLanguages = targetLanguages.map((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\treturn language;\n\t\t});\n\t\tconst request = await fetch(this.apiEndPointUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Ocp-Apim-Subscription-Key': this.apiKey,\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t},\n\t\t\tbody: data,\n\t\t\tparams: {\n\t\t\t\tto: targetLanguages,\n\t\t\t},\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst result = await request.json();\n\n\t\tif (request.status === 200 && result.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...targetLanguages.map((language) => ({\n\t\t\t\t\t[language]: result\n\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t(line: { translations: { to: string; text: string }[] }) =>\n\t\t\t\t\t\t\t\tline.translations.find((translation) => translation.to === language)?.text,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n'),\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message for each target language.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\t// There are multi-sentence-messages where multiple sentences come from different languages\n\t\t// This is a problem for translation services since the language detection fails.\n\t\t// Thus, we'll split the message in sentences, get them translated, and join them again after translation\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\ttry {\n\t\t\treturn this._translate(msgs, targetLanguages);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message' });\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\ttry {\n\t\t\treturn this._translate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tText: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttargetLanguages,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message attachment' });\n\t\t}\n\t\treturn {};\n\t}\n}\n\n// Register Microsoft translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new MsAutoTranslate());\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/msTranslate.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/msTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/msTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/msTranslate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type { IMessage, IProviderMetadata, ISupportedLanguage, ITranslationResult, MessageAttachment } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\nimport { msLogger } from './logger';\n\n/**\n * Microsoft translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass MsAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\tapiDetectText: string;\n\n\tapiGetLanguages: string;\n\n\tbreakSentence: string;\n\n\t/**\n\t * setup api reference to Microsoft translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'microsoft-translate';\n\t\tthis.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n\t\tthis.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n\t\tthis.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n\t\tthis.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_MicrosoftAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Microsoft'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tconst request = await fetch(this.apiGetLanguages);\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst languages = await request.json();\n\t\tthis.supportedLanguages[target] = Object.keys(languages.translation).map((language) => ({\n\t\t\tlanguage,\n\t\t\tname: languages.translation[language].name,\n\t\t}));\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Re-use method for REST API consumption of MS translate.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @throws Communication Errors\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translate(\n\t\tdata: {\n\t\t\tText: string;\n\t\t}[],\n\t\ttargetLanguages: string[],\n\t): Promise<ITranslationResult> {\n\t\tlet translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\ttargetLanguages = targetLanguages.map((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\treturn language;\n\t\t});\n\t\tconst request = await fetch(this.apiEndPointUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Ocp-Apim-Subscription-Key': this.apiKey,\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t},\n\t\t\tbody: data,\n\t\t\tparams: {\n\t\t\t\tto: targetLanguages,\n\t\t\t},\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst result = await request.json();\n\n\t\tif (request.status === 200 && result.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...targetLanguages.map((language) => ({\n\t\t\t\t\t[language]: result\n\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t(line: { translations: { to: string; text: string }[] }) =>\n\t\t\t\t\t\t\t\tline.translations.find((translation) => translation.to === language)?.text,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n'),\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message for each target language.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\t// There are multi-sentence-messages where multiple sentences come from different languages\n\t\t// This is a problem for translation services since the language detection fails.\n\t\t// Thus, we'll split the message in sentences, get them translated, and join them again after translation\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\ttry {\n\t\t\treturn this._translate(msgs, targetLanguages);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message' });\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\ttry {\n\t\t\treturn this._translate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tText: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttargetLanguages,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message attachment' });\n\t\t}\n\t\treturn {};\n\t}\n}\n\n// Register Microsoft translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new MsAutoTranslate());\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 1);\n    let i18n;\n    module.link(\"../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 2);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 3);\n    let TranslationProviderRegistry, AutoTranslate;\n    module.link(\"./autotranslate\", {\n      TranslationProviderRegistry(v) {\n        TranslationProviderRegistry = v;\n      },\n      AutoTranslate(v) {\n        AutoTranslate = v;\n      }\n    }, 4);\n    let msLogger;\n    module.link(\"./logger\", {\n      msLogger(v) {\n        msLogger = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * Microsoft translation service provider class representation.\n     * Encapsulates the service provider settings and information.\n     * Provides languages supported by the service provider.\n     * Resolves API call to service provider to resolve the translation request.\n     * @class\n     * @augments AutoTranslate\n     */\n    class MsAutoTranslate extends AutoTranslate {\n      /**\n       * setup api reference to Microsoft translate to be used as message translation provider.\n       * @constructor\n       */\n      constructor() {\n        super();\n        this.apiKey = void 0;\n        this.apiEndPointUrl = void 0;\n        this.apiDetectText = void 0;\n        this.apiGetLanguages = void 0;\n        this.breakSentence = void 0;\n        this.name = 'microsoft-translate';\n        this.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n        this.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n        this.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n        this.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0';\n        // Get the service provide API key.\n        settings.watch('AutoTranslate_MicrosoftAPIKey', value => {\n          this.apiKey = value;\n        });\n      }\n      /**\n       * Returns metadata information about the service provide\n       * @private implements super abstract method.\n       * @return {object}\n       */\n      _getProviderMetadata() {\n        return {\n          name: this.name,\n          displayName: i18n.t('AutoTranslate_Microsoft'),\n          settings: this._getSettings()\n        };\n      }\n      /**\n       * Returns necessary settings information about the translation service provider.\n       * @private implements super abstract method.\n       * @return {object}\n       */\n      _getSettings() {\n        return {\n          apiKey: this.apiKey,\n          apiEndPointUrl: this.apiEndPointUrl\n        };\n      }\n      /**\n       * Returns supported languages for translation by the active service provider.\n       * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n       * So each supported languages are explicitly maintained.\n       * @private implements super abstract method.\n       * @param {string} target\n       * @returns {object} code : value pair\n       */\n      async getSupportedLanguages(target) {\n        if (!this.apiKey) {\n          return [];\n        }\n        if (this.supportedLanguages[target]) {\n          return this.supportedLanguages[target];\n        }\n        const request = await fetch(this.apiGetLanguages);\n        if (!request.ok) {\n          throw new Error(request.statusText);\n        }\n        const languages = await request.json();\n        this.supportedLanguages[target] = Object.keys(languages.translation).map(language => ({\n          language,\n          name: languages.translation[language].name\n        }));\n        return this.supportedLanguages[target || 'en'];\n      }\n      /**\n       * Re-use method for REST API consumption of MS translate.\n       * @private\n       * @param {object} message\n       * @param {object} targetLanguages\n       * @throws Communication Errors\n       * @returns {object} translations: Translated messages for each language\n       */\n      async _translate(data, targetLanguages) {\n        let translations = {};\n        const supportedLanguages = await this.getSupportedLanguages('en');\n        targetLanguages = targetLanguages.map(language => {\n          if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n            language\n          })) {\n            language = language.substr(0, 2);\n          }\n          return language;\n        });\n        const request = await fetch(this.apiEndPointUrl, {\n          method: 'POST',\n          headers: {\n            'Ocp-Apim-Subscription-Key': this.apiKey,\n            'Content-Type': 'application/json; charset=UTF-8'\n          },\n          body: data,\n          params: {\n            to: targetLanguages\n          }\n        });\n        if (!request.ok) {\n          throw new Error(request.statusText);\n        }\n        const result = await request.json();\n        if (request.status === 200 && result.length > 0) {\n          // store translation only when the source and target language are different.\n          translations = Object.assign({}, ...targetLanguages.map(language => ({\n            [language]: result.map(line => {\n              var _line$translations$fi;\n              return (_line$translations$fi = line.translations.find(translation => translation.to === language)) === null || _line$translations$fi === void 0 ? void 0 : _line$translations$fi.text;\n            }).join('\\n')\n          })));\n        }\n        return translations;\n      }\n      /**\n       * Returns translated message for each target language.\n       * @private\n       * @param {object} message\n       * @param {object} targetLanguages\n       * @returns {object} translations: Translated messages for each language\n       */\n      async _translateMessage(message, targetLanguages) {\n        // There are multi-sentence-messages where multiple sentences come from different languages\n        // This is a problem for translation services since the language detection fails.\n        // Thus, we'll split the message in sentences, get them translated, and join them again after translation\n        const msgs = message.msg.split('\\n').map(msg => ({\n          Text: msg\n        }));\n        try {\n          return this._translate(msgs, targetLanguages);\n        } catch (e) {\n          msLogger.error({\n            err: e,\n            msg: 'Error translating message'\n          });\n        }\n        return {};\n      }\n      /**\n       * Returns translated message attachment description in target languages.\n       * @private\n       * @param {object} attachment\n       * @param {object} targetLanguages\n       * @returns {object} translated messages for each target language\n       */\n      async _translateAttachmentDescriptions(attachment, targetLanguages) {\n        try {\n          return this._translate([{\n            Text: attachment.description || attachment.text || ''\n          }], targetLanguages);\n        } catch (e) {\n          msLogger.error({\n            err: e,\n            msg: 'Error translating message attachment'\n          });\n        }\n        return {};\n      }\n    }\n    // Register Microsoft translation provider to the registry.\n    TranslationProviderRegistry.registerProvider(new MsAutoTranslate());\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["fetch","module","link","serverFetch","v","_","default","i18n","settings","TranslationProviderRegistry","AutoTranslate","msLogger","__reifyWaitForDeps__","MsAutoTranslate","constructor","apiKey","apiEndPointUrl","apiDetectText","apiGetLanguages","breakSentence","name","watch","value","_getProviderMetadata","displayName","t","_getSettings","getSupportedLanguages","target","supportedLanguages","request","ok","Error","statusText","languages","json","Object","keys","translation","map","language","_translate","data","targetLanguages","translations","indexOf","findWhere","substr","method","headers","body","params","to","result","status","length","assign","line","_line$translations$fi","find","text","join","_translateMessage","message","msgs","msg","split","Text","e","error","err","_translateAttachmentDescriptions","attachment","description","registerProvider","__reify_async_result__","_reifyError","self","async"],"sources":["app/autotranslate/server/msTranslate.ts"],"sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type { IMessage, IProviderMetadata, ISupportedLanguage, ITranslationResult, MessageAttachment } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\nimport { msLogger } from './logger';\n\n/**\n * Microsoft translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass MsAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\tapiDetectText: string;\n\n\tapiGetLanguages: string;\n\n\tbreakSentence: string;\n\n\t/**\n\t * setup api reference to Microsoft translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'microsoft-translate';\n\t\tthis.apiEndPointUrl = 'https://api.cognitive.microsofttranslator.com/translate?api-version=3.0';\n\t\tthis.apiDetectText = 'https://api.cognitive.microsofttranslator.com/detect?api-version=3.0';\n\t\tthis.apiGetLanguages = 'https://api.cognitive.microsofttranslator.com/languages?api-version=3.0';\n\t\tthis.breakSentence = 'https://api.cognitive.microsofttranslator.com/breaksentence?api-version=3.0';\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_MicrosoftAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_Microsoft'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Microsoft does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tconst request = await fetch(this.apiGetLanguages);\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst languages = await request.json();\n\t\tthis.supportedLanguages[target] = Object.keys(languages.translation).map((language) => ({\n\t\t\tlanguage,\n\t\t\tname: languages.translation[language].name,\n\t\t}));\n\t\treturn this.supportedLanguages[target || 'en'];\n\t}\n\n\t/**\n\t * Re-use method for REST API consumption of MS translate.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @throws Communication Errors\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translate(\n\t\tdata: {\n\t\t\tText: string;\n\t\t}[],\n\t\ttargetLanguages: string[],\n\t): Promise<ITranslationResult> {\n\t\tlet translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\ttargetLanguages = targetLanguages.map((language) => {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\treturn language;\n\t\t});\n\t\tconst request = await fetch(this.apiEndPointUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Ocp-Apim-Subscription-Key': this.apiKey,\n\t\t\t\t'Content-Type': 'application/json; charset=UTF-8',\n\t\t\t},\n\t\t\tbody: data,\n\t\t\tparams: {\n\t\t\t\tto: targetLanguages,\n\t\t\t},\n\t\t});\n\t\tif (!request.ok) {\n\t\t\tthrow new Error(request.statusText);\n\t\t}\n\t\tconst result = await request.json();\n\n\t\tif (request.status === 200 && result.length > 0) {\n\t\t\t// store translation only when the source and target language are different.\n\t\t\ttranslations = Object.assign(\n\t\t\t\t{},\n\t\t\t\t...targetLanguages.map((language) => ({\n\t\t\t\t\t[language]: result\n\t\t\t\t\t\t.map(\n\t\t\t\t\t\t\t(line: { translations: { to: string; text: string }[] }) =>\n\t\t\t\t\t\t\t\tline.translations.find((translation) => translation.to === language)?.text,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n'),\n\t\t\t\t})),\n\t\t\t);\n\t\t}\n\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message for each target language.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\t// There are multi-sentence-messages where multiple sentences come from different languages\n\t\t// This is a problem for translation services since the language detection fails.\n\t\t// Thus, we'll split the message in sentences, get them translated, and join them again after translation\n\t\tconst msgs = message.msg.split('\\n').map((msg) => ({ Text: msg }));\n\t\ttry {\n\t\t\treturn this._translate(msgs, targetLanguages);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message' });\n\t\t}\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\ttry {\n\t\t\treturn this._translate(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\tText: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\ttargetLanguages,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tmsLogger.error({ err: e, msg: 'Error translating message attachment' });\n\t\t}\n\t\treturn {};\n\t}\n}\n\n// Register Microsoft translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new MsAutoTranslate());\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3ed8231a75782f24de4c0135695209189433b05e"}
