{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/saveAnalyticsData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/hooks/saveAnalyticsData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/saveAnalyticsData.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/saveAnalyticsData.ts","sourceRoot":"","sources":["app/livechat/server/hooks/saveAnalyticsData.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { normalizeMessageFileUpload } from '../../../utils/server/functions/normalizeMessageFileUpload';\n\nconst getMetricValue = <T>(metric: T | undefined, defaultValue: T): T => metric ?? defaultValue;\nconst calculateTimeDifference = <T extends Date | number>(startTime: T, now: Date): number =>\n\t(now.getTime() - new Date(startTime).getTime()) / 1000;\nconst calculateAvgResponseTime = (totalResponseTime: number, newResponseTime: number, responseCount: number) =>\n\t(totalResponseTime + newResponseTime) / (responseCount + 1);\n\nconst getFirstResponseAnalytics = (\n\tvisitorLastQuery: Date,\n\tagentJoinTime: Date,\n\ttotalResponseTime: number,\n\tresponseCount: number,\n\tnow: Date,\n) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst reactionTime = calculateTimeDifference(agentJoinTime, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tfirstResponseDate: now,\n\t\tfirstResponseTime: responseTime,\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\tfirstReactionDate: now,\n\t\tfirstReactionTime: reactionTime,\n\t\treactionTime,\n\t};\n};\n\nconst getSubsequentResponseAnalytics = (visitorLastQuery: Date, totalResponseTime: number, responseCount: number, now: Date) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\treactionTime: responseTime,\n\t};\n};\n\nconst getAnalyticsData = (room: IOmnichannelRoom, now: Date): Record<string, string | number | Date> | undefined => {\n\tconst visitorLastQuery = getMetricValue(room.metrics?.v?.lq, room.ts);\n\tconst agentLastReply = getMetricValue(room.metrics?.servedBy?.lr, room.ts);\n\tconst agentJoinTime = getMetricValue(room.servedBy?.ts, room.ts);\n\tconst totalResponseTime = getMetricValue(room.metrics?.response?.tt, 0);\n\tconst responseCount = getMetricValue(room.metrics?.response?.total, 0);\n\n\tif (agentLastReply === room.ts) {\n\t\treturn getFirstResponseAnalytics(visitorLastQuery, agentJoinTime, totalResponseTime, responseCount, now);\n\t}\n\tif (visitorLastQuery > agentLastReply) {\n\t\treturn getSubsequentResponseAnalytics(visitorLastQuery, totalResponseTime, responseCount, now);\n\t}\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isSystemMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t}\n\n\t\tif (isMessageFromVisitor(message)) {\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByVisitor(room, message, roomUpdater);\n\t\t} else {\n\t\t\tconst analyticsData = getAnalyticsData(room, new Date());\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByAgent(room, message, analyticsData, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'saveAnalyticsData',\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/saveAnalyticsData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/hooks/saveAnalyticsData.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/saveAnalyticsData.ts","sourceRoot":"","sources":["app/livechat/server/hooks/saveAnalyticsData.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { normalizeMessageFileUpload } from '../../../utils/server/functions/normalizeMessageFileUpload';\n\nconst getMetricValue = <T>(metric: T | undefined, defaultValue: T): T => metric ?? defaultValue;\nconst calculateTimeDifference = <T extends Date | number>(startTime: T, now: Date): number =>\n\t(now.getTime() - new Date(startTime).getTime()) / 1000;\nconst calculateAvgResponseTime = (totalResponseTime: number, newResponseTime: number, responseCount: number) =>\n\t(totalResponseTime + newResponseTime) / (responseCount + 1);\n\nconst getFirstResponseAnalytics = (\n\tvisitorLastQuery: Date,\n\tagentJoinTime: Date,\n\ttotalResponseTime: number,\n\tresponseCount: number,\n\tnow: Date,\n) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst reactionTime = calculateTimeDifference(agentJoinTime, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tfirstResponseDate: now,\n\t\tfirstResponseTime: responseTime,\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\tfirstReactionDate: now,\n\t\tfirstReactionTime: reactionTime,\n\t\treactionTime,\n\t};\n};\n\nconst getSubsequentResponseAnalytics = (visitorLastQuery: Date, totalResponseTime: number, responseCount: number, now: Date) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\treactionTime: responseTime,\n\t};\n};\n\nconst getAnalyticsData = (room: IOmnichannelRoom, now: Date): Record<string, string | number | Date> | undefined => {\n\tconst visitorLastQuery = getMetricValue(room.metrics?.v?.lq, room.ts);\n\tconst agentLastReply = getMetricValue(room.metrics?.servedBy?.lr, room.ts);\n\tconst agentJoinTime = getMetricValue(room.servedBy?.ts, room.ts);\n\tconst totalResponseTime = getMetricValue(room.metrics?.response?.tt, 0);\n\tconst responseCount = getMetricValue(room.metrics?.response?.total, 0);\n\n\tif (agentLastReply === room.ts) {\n\t\treturn getFirstResponseAnalytics(visitorLastQuery, agentJoinTime, totalResponseTime, responseCount, now);\n\t}\n\tif (visitorLastQuery > agentLastReply) {\n\t\treturn getSubsequentResponseAnalytics(visitorLastQuery, totalResponseTime, responseCount, now);\n\t}\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isSystemMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t}\n\n\t\tif (isMessageFromVisitor(message)) {\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByVisitor(room, message, roomUpdater);\n\t\t} else {\n\t\t\tconst analyticsData = getAnalyticsData(room, new Date());\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByAgent(room, message, analyticsData, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'saveAnalyticsData',\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let isEditedMessage, isMessageFromVisitor, isSystemMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      },\n      isMessageFromVisitor(v) {\n        isMessageFromVisitor = v;\n      },\n      isSystemMessage(v) {\n        isSystemMessage = v;\n      }\n    }, 0);\n    let LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 2);\n    let normalizeMessageFileUpload;\n    module.link(\"../../../utils/server/functions/normalizeMessageFileUpload\", {\n      normalizeMessageFileUpload(v) {\n        normalizeMessageFileUpload = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getMetricValue = (metric, defaultValue) => metric !== null && metric !== void 0 ? metric : defaultValue;\n    const calculateTimeDifference = (startTime, now) => (now.getTime() - new Date(startTime).getTime()) / 1000;\n    const calculateAvgResponseTime = (totalResponseTime, newResponseTime, responseCount) => (totalResponseTime + newResponseTime) / (responseCount + 1);\n    const getFirstResponseAnalytics = (visitorLastQuery, agentJoinTime, totalResponseTime, responseCount, now) => {\n      const responseTime = calculateTimeDifference(visitorLastQuery, now);\n      const reactionTime = calculateTimeDifference(agentJoinTime, now);\n      const avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n      return {\n        firstResponseDate: now,\n        firstResponseTime: responseTime,\n        responseTime,\n        avgResponseTime,\n        firstReactionDate: now,\n        firstReactionTime: reactionTime,\n        reactionTime\n      };\n    };\n    const getSubsequentResponseAnalytics = (visitorLastQuery, totalResponseTime, responseCount, now) => {\n      const responseTime = calculateTimeDifference(visitorLastQuery, now);\n      const avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n      return {\n        responseTime,\n        avgResponseTime,\n        reactionTime: responseTime\n      };\n    };\n    const getAnalyticsData = (room, now) => {\n      var _room$metrics, _room$metrics$v, _room$metrics2, _room$metrics2$served, _room$servedBy, _room$metrics3, _room$metrics3$respon, _room$metrics4, _room$metrics4$respon;\n      const visitorLastQuery = getMetricValue((_room$metrics = room.metrics) === null || _room$metrics === void 0 ? void 0 : (_room$metrics$v = _room$metrics.v) === null || _room$metrics$v === void 0 ? void 0 : _room$metrics$v.lq, room.ts);\n      const agentLastReply = getMetricValue((_room$metrics2 = room.metrics) === null || _room$metrics2 === void 0 ? void 0 : (_room$metrics2$served = _room$metrics2.servedBy) === null || _room$metrics2$served === void 0 ? void 0 : _room$metrics2$served.lr, room.ts);\n      const agentJoinTime = getMetricValue((_room$servedBy = room.servedBy) === null || _room$servedBy === void 0 ? void 0 : _room$servedBy.ts, room.ts);\n      const totalResponseTime = getMetricValue((_room$metrics3 = room.metrics) === null || _room$metrics3 === void 0 ? void 0 : (_room$metrics3$respon = _room$metrics3.response) === null || _room$metrics3$respon === void 0 ? void 0 : _room$metrics3$respon.tt, 0);\n      const responseCount = getMetricValue((_room$metrics4 = room.metrics) === null || _room$metrics4 === void 0 ? void 0 : (_room$metrics4$respon = _room$metrics4.response) === null || _room$metrics4$respon === void 0 ? void 0 : _room$metrics4$respon.total, 0);\n      if (agentLastReply === room.ts) {\n        return getFirstResponseAnalytics(visitorLastQuery, agentJoinTime, totalResponseTime, responseCount, now);\n      }\n      if (visitorLastQuery > agentLastReply) {\n        return getSubsequentResponseAnalytics(visitorLastQuery, totalResponseTime, responseCount, now);\n      }\n    };\n    callbacks.add('afterOmnichannelSaveMessage', async (message, _ref) => {\n      let {\n        room,\n        roomUpdater\n      } = _ref;\n      if (!message || isEditedMessage(message) || isSystemMessage(message)) {\n        return message;\n      }\n      if (message.file) {\n        message = _objectSpread(_objectSpread({}, await normalizeMessageFileUpload(message)), {\n          _updatedAt: message._updatedAt\n        });\n      }\n      if (isMessageFromVisitor(message)) {\n        LivechatRooms.getAnalyticsUpdateQueryBySentByVisitor(room, message, roomUpdater);\n      } else {\n        const analyticsData = getAnalyticsData(room, new Date());\n        LivechatRooms.getAnalyticsUpdateQueryBySentByAgent(room, message, analyticsData, roomUpdater);\n      }\n      return message;\n    }, callbacks.priority.LOW, 'saveAnalyticsData');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","isEditedMessage","isMessageFromVisitor","isSystemMessage","LivechatRooms","callbacks","normalizeMessageFileUpload","__reifyWaitForDeps__","getMetricValue","metric","defaultValue","calculateTimeDifference","startTime","now","getTime","Date","calculateAvgResponseTime","totalResponseTime","newResponseTime","responseCount","getFirstResponseAnalytics","visitorLastQuery","agentJoinTime","responseTime","reactionTime","avgResponseTime","firstResponseDate","firstResponseTime","firstReactionDate","firstReactionTime","getSubsequentResponseAnalytics","getAnalyticsData","room","_room$metrics","_room$metrics$v","_room$metrics2","_room$metrics2$served","_room$servedBy","_room$metrics3","_room$metrics3$respon","_room$metrics4","_room$metrics4$respon","metrics","lq","ts","agentLastReply","servedBy","lr","response","tt","total","add","message","_ref","roomUpdater","file","_updatedAt","getAnalyticsUpdateQueryBySentByVisitor","analyticsData","getAnalyticsUpdateQueryBySentByAgent","priority","LOW","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/hooks/saveAnalyticsData.ts"],"sourcesContent":["import { isEditedMessage, isMessageFromVisitor, isSystemMessage } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatRooms } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { normalizeMessageFileUpload } from '../../../utils/server/functions/normalizeMessageFileUpload';\n\nconst getMetricValue = <T>(metric: T | undefined, defaultValue: T): T => metric ?? defaultValue;\nconst calculateTimeDifference = <T extends Date | number>(startTime: T, now: Date): number =>\n\t(now.getTime() - new Date(startTime).getTime()) / 1000;\nconst calculateAvgResponseTime = (totalResponseTime: number, newResponseTime: number, responseCount: number) =>\n\t(totalResponseTime + newResponseTime) / (responseCount + 1);\n\nconst getFirstResponseAnalytics = (\n\tvisitorLastQuery: Date,\n\tagentJoinTime: Date,\n\ttotalResponseTime: number,\n\tresponseCount: number,\n\tnow: Date,\n) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst reactionTime = calculateTimeDifference(agentJoinTime, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tfirstResponseDate: now,\n\t\tfirstResponseTime: responseTime,\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\tfirstReactionDate: now,\n\t\tfirstReactionTime: reactionTime,\n\t\treactionTime,\n\t};\n};\n\nconst getSubsequentResponseAnalytics = (visitorLastQuery: Date, totalResponseTime: number, responseCount: number, now: Date) => {\n\tconst responseTime = calculateTimeDifference(visitorLastQuery, now);\n\tconst avgResponseTime = calculateAvgResponseTime(totalResponseTime, responseTime, responseCount);\n\n\treturn {\n\t\tresponseTime,\n\t\tavgResponseTime,\n\t\treactionTime: responseTime,\n\t};\n};\n\nconst getAnalyticsData = (room: IOmnichannelRoom, now: Date): Record<string, string | number | Date> | undefined => {\n\tconst visitorLastQuery = getMetricValue(room.metrics?.v?.lq, room.ts);\n\tconst agentLastReply = getMetricValue(room.metrics?.servedBy?.lr, room.ts);\n\tconst agentJoinTime = getMetricValue(room.servedBy?.ts, room.ts);\n\tconst totalResponseTime = getMetricValue(room.metrics?.response?.tt, 0);\n\tconst responseCount = getMetricValue(room.metrics?.response?.total, 0);\n\n\tif (agentLastReply === room.ts) {\n\t\treturn getFirstResponseAnalytics(visitorLastQuery, agentJoinTime, totalResponseTime, responseCount, now);\n\t}\n\tif (visitorLastQuery > agentLastReply) {\n\t\treturn getSubsequentResponseAnalytics(visitorLastQuery, totalResponseTime, responseCount, now);\n\t}\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!message || isEditedMessage(message) || isSystemMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t}\n\n\t\tif (isMessageFromVisitor(message)) {\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByVisitor(room, message, roomUpdater);\n\t\t} else {\n\t\t\tconst analyticsData = getAnalyticsData(room, new Date());\n\t\t\tLivechatRooms.getAnalyticsUpdateQueryBySentByAgent(room, message, analyticsData, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'saveAnalyticsData',\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ce8b35f7e3f93ded8fa169468067ddd834efad0b"}
