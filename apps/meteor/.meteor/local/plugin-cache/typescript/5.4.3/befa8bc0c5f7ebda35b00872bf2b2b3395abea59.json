{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/oauth/Manager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/oauth/Manager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/oauth/Manager.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/oauth/Manager.ts","sourceRoot":"","sources":["ee/server/lib/oauth/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Roles, Rooms, Users } from '@rocket.chat/models';\n\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { syncUserRoles } from '../syncUserRoles';\n\nconst logger = new Logger('OAuth');\n\nexport class OAuthEEManager {\n\tstatic async mapSSOGroupsToChannels(\n\t\tuser: IUser,\n\t\tidentity: Record<string, any>,\n\t\tgroupClaimName: string,\n\t\tchannelsMap: Record<string, any> | undefined,\n\t\tchannelsAdmin: string,\n\t): Promise<void> {\n\t\tif (channelsMap && user && identity && groupClaimName) {\n\t\t\tconst groupsFromSSO = identity[groupClaimName] || [];\n\n\t\t\tconst userChannelAdmin = await Users.findOneByUsernameIgnoringCase(channelsAdmin);\n\t\t\tif (!userChannelAdmin) {\n\t\t\t\tlogger.error(`could not create channel, user not found: ${channelsAdmin}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor await (const ssoGroup of Object.keys(channelsMap)) {\n\t\t\t\tif (typeof ssoGroup === 'string') {\n\t\t\t\t\tlet channels = channelsMap[ssoGroup];\n\t\t\t\t\tif (!Array.isArray(channels)) {\n\t\t\t\t\t\tchannels = [channels];\n\t\t\t\t\t}\n\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\t\tlet room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\tconst createdRoom = await createRoom('c', channel, userChannelAdmin, [], false, false);\n\t\t\t\t\t\t\tif (!createdRoom?.rid) {\n\t\t\t\t\t\t\t\tlogger.error(`could not create channel ${channel}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troom = createdRoom;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (room && Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n\t\t\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async updateRolesFromSSO(\n\t\tuser: Record<string, any>,\n\t\tidentity: Record<string, any>,\n\t\troleClaimName: string,\n\t\trolesToSync: string[],\n\t): Promise<void> {\n\t\tif (user && identity && roleClaimName) {\n\t\t\tconst rolesFromSSO = await this.mapRolesFromSSO(identity, roleClaimName);\n\n\t\t\tif (!Array.isArray(user.roles)) {\n\t\t\t\tuser.roles = [];\n\t\t\t}\n\n\t\t\tconst rolesIdsFromSSO = (await Roles.findInIdsOrNames(rolesFromSSO).toArray()).map((role) => role._id);\n\t\t\tconst allowedRoles = (await Roles.findInIdsOrNames(rolesToSync).toArray()).map((role) => role._id);\n\n\t\t\tawait syncUserRoles(user._id, rolesIdsFromSSO, {\n\t\t\t\tallowedRoles,\n\t\t\t});\n\t\t}\n\t}\n\n\t// Returns list of roles from SSO identity\n\tstatic async mapRolesFromSSO(identity: Record<string, any>, roleClaimName: string): Promise<string[]> {\n\t\tif (!identity || !roleClaimName || !identity[roleClaimName] || !Array.isArray(identity[roleClaimName])) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst baseRoles = identity[roleClaimName] as string[];\n\n\t\tconst filteredRoles = baseRoles.filter((val) => val !== 'offline_access' && val !== 'uma_authorization');\n\t\tconst validRoleList = [];\n\t\tfor await (const role of filteredRoles) {\n\t\t\tif (await Roles.findOneByIdOrName(role)) {\n\t\t\t\tvalidRoleList.push(role);\n\t\t\t}\n\t\t}\n\n\t\treturn validRoleList;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/oauth/Manager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/oauth/Manager.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/oauth/Manager.ts","sourceRoot":"","sources":["ee/server/lib/oauth/Manager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE1D,OAAO,EAAE,aAAa,EAAE,MAAM,oDAAoD,CAAC;AACnF,OAAO,EAAE,UAAU,EAAE,MAAM,iDAAiD,CAAC;AAC7E,OAAO,EAAE,gBAAgB,EAAE,MAAM,mDAAmD,CAAC;AACrF,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAEnC,MAAM,OAAO,cAAc;IAC1B,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAClC,IAAW,EACX,QAA6B,EAC7B,cAAsB,EACtB,WAA4C,EAC5C,aAAqB;QAErB,IAAI,WAAW,IAAI,IAAI,IAAI,QAAQ,IAAI,cAAc,EAAE,CAAC;YACvD,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAErD,MAAM,gBAAgB,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,aAAa,CAAC,CAAC;YAClF,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACvB,MAAM,CAAC,KAAK,CAAC,6CAA6C,aAAa,EAAE,CAAC,CAAC;gBAC3E,OAAO;YACR,CAAC;YAED,IAAI,KAAK,EAAE,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;gBACvD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;oBAClC,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;oBACrC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;wBAC9B,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACvB,CAAC;oBACD,IAAI,KAAK,EAAE,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;wBACtC,MAAM,IAAI,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;wBAC1F,IAAI,IAAI,GAAG,MAAM,KAAK,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;wBACvD,IAAI,CAAC,IAAI,EAAE,CAAC;4BACX,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,OAAO,EAAE,gBAAgB,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;4BACvF,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;gCACvB,MAAM,CAAC,KAAK,CAAC,4BAA4B,OAAO,EAAE,CAAC,CAAC;gCACpD,OAAO;4BACR,CAAC;4BAED,IAAI,GAAG,WAAW,CAAC;wBACpB,CAAC;wBAED,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;4BAC9E,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;wBACrC,CAAC;oBACF,CAAC;gBACF,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAC9B,IAAyB,EACzB,QAA6B,EAC7B,aAAqB,EACrB,WAAqB;QAErB,IAAI,IAAI,IAAI,QAAQ,IAAI,aAAa,EAAE,CAAC;YACvC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAEzE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YACjB,CAAC;YAED,MAAM,eAAe,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvG,MAAM,YAAY,GAAG,CAAC,MAAM,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEnG,MAAM,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,eAAe,EAAE;gBAC9C,YAAY;aACZ,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED,0CAA0C;IAC1C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,QAA6B,EAAE,aAAqB;QAChF,IAAI,CAAC,QAAQ,IAAI,CAAC,aAAa,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC;YACxG,OAAO,EAAE,CAAC;QACX,CAAC;QAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAa,CAAC;QAEtD,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,gBAAgB,IAAI,GAAG,KAAK,mBAAmB,CAAC,CAAC;QACzG,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,aAAa,EAAE,CAAC;YACxC,IAAI,MAAM,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACzC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,CAAC;QACF,CAAC;QAED,OAAO,aAAa,CAAC;IACtB,CAAC;CACD","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Roles, Rooms, Users } from '@rocket.chat/models';\n\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { syncUserRoles } from '../syncUserRoles';\n\nconst logger = new Logger('OAuth');\n\nexport class OAuthEEManager {\n\tstatic async mapSSOGroupsToChannels(\n\t\tuser: IUser,\n\t\tidentity: Record<string, any>,\n\t\tgroupClaimName: string,\n\t\tchannelsMap: Record<string, any> | undefined,\n\t\tchannelsAdmin: string,\n\t): Promise<void> {\n\t\tif (channelsMap && user && identity && groupClaimName) {\n\t\t\tconst groupsFromSSO = identity[groupClaimName] || [];\n\n\t\t\tconst userChannelAdmin = await Users.findOneByUsernameIgnoringCase(channelsAdmin);\n\t\t\tif (!userChannelAdmin) {\n\t\t\t\tlogger.error(`could not create channel, user not found: ${channelsAdmin}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor await (const ssoGroup of Object.keys(channelsMap)) {\n\t\t\t\tif (typeof ssoGroup === 'string') {\n\t\t\t\t\tlet channels = channelsMap[ssoGroup];\n\t\t\t\t\tif (!Array.isArray(channels)) {\n\t\t\t\t\t\tchannels = [channels];\n\t\t\t\t\t}\n\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\t\tlet room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\tconst createdRoom = await createRoom('c', channel, userChannelAdmin, [], false, false);\n\t\t\t\t\t\t\tif (!createdRoom?.rid) {\n\t\t\t\t\t\t\t\tlogger.error(`could not create channel ${channel}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troom = createdRoom;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (room && Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n\t\t\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async updateRolesFromSSO(\n\t\tuser: Record<string, any>,\n\t\tidentity: Record<string, any>,\n\t\troleClaimName: string,\n\t\trolesToSync: string[],\n\t): Promise<void> {\n\t\tif (user && identity && roleClaimName) {\n\t\t\tconst rolesFromSSO = await this.mapRolesFromSSO(identity, roleClaimName);\n\n\t\t\tif (!Array.isArray(user.roles)) {\n\t\t\t\tuser.roles = [];\n\t\t\t}\n\n\t\t\tconst rolesIdsFromSSO = (await Roles.findInIdsOrNames(rolesFromSSO).toArray()).map((role) => role._id);\n\t\t\tconst allowedRoles = (await Roles.findInIdsOrNames(rolesToSync).toArray()).map((role) => role._id);\n\n\t\t\tawait syncUserRoles(user._id, rolesIdsFromSSO, {\n\t\t\t\tallowedRoles,\n\t\t\t});\n\t\t}\n\t}\n\n\t// Returns list of roles from SSO identity\n\tstatic async mapRolesFromSSO(identity: Record<string, any>, roleClaimName: string): Promise<string[]> {\n\t\tif (!identity || !roleClaimName || !identity[roleClaimName] || !Array.isArray(identity[roleClaimName])) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst baseRoles = identity[roleClaimName] as string[];\n\n\t\tconst filteredRoles = baseRoles.filter((val) => val !== 'offline_access' && val !== 'uma_authorization');\n\t\tconst validRoleList = [];\n\t\tfor await (const role of filteredRoles) {\n\t\t\tif (await Roles.findOneByIdOrName(role)) {\n\t\t\t\tvalidRoleList.push(role);\n\t\t\t}\n\t\t}\n\n\t\treturn validRoleList;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      OAuthEEManager: () => OAuthEEManager\n    });\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let Roles, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Roles(v) {\n        Roles = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let addUserToRoom;\n    module.link(\"../../../../app/lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 2);\n    let createRoom;\n    module.link(\"../../../../app/lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 3);\n    let getValidRoomName;\n    module.link(\"../../../../app/utils/server/lib/getValidRoomName\", {\n      getValidRoomName(v) {\n        getValidRoomName = v;\n      }\n    }, 4);\n    let syncUserRoles;\n    module.link(\"../syncUserRoles\", {\n      syncUserRoles(v) {\n        syncUserRoles = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('OAuth');\n    class OAuthEEManager {\n      static async mapSSOGroupsToChannels(user, identity, groupClaimName, channelsMap, channelsAdmin) {\n        if (channelsMap && user && identity && groupClaimName) {\n          const groupsFromSSO = identity[groupClaimName] || [];\n          const userChannelAdmin = await Users.findOneByUsernameIgnoringCase(channelsAdmin);\n          if (!userChannelAdmin) {\n            logger.error(\"could not create channel, user not found: \".concat(channelsAdmin));\n            return;\n          }\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(Object.keys(channelsMap)), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              const ssoGroup = _step.value;\n              {\n                if (typeof ssoGroup === 'string') {\n                  let channels = channelsMap[ssoGroup];\n                  if (!Array.isArray(channels)) {\n                    channels = [channels];\n                  }\n                  var _iteratorAbruptCompletion2 = false;\n                  var _didIteratorError2 = false;\n                  var _iteratorError2;\n                  try {\n                    for (var _iterator2 = _asyncIterator(channels), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n                      const channel = _step2.value;\n                      {\n                        const name = await getValidRoomName(channel.trim(), undefined, {\n                          allowDuplicates: true\n                        });\n                        let room = await Rooms.findOneByNonValidatedName(name);\n                        if (!room) {\n                          const createdRoom = await createRoom('c', channel, userChannelAdmin, [], false, false);\n                          if (!(createdRoom !== null && createdRoom !== void 0 && createdRoom.rid)) {\n                            logger.error(\"could not create channel \".concat(channel));\n                            return;\n                          }\n                          room = createdRoom;\n                        }\n                        if (room && Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n                          await addUserToRoom(room._id, user);\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError2 = true;\n                    _iteratorError2 = err;\n                  } finally {\n                    try {\n                      if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n                        await _iterator2.return();\n                      }\n                    } finally {\n                      if (_didIteratorError2) {\n                        throw _iteratorError2;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n      static async updateRolesFromSSO(user, identity, roleClaimName, rolesToSync) {\n        if (user && identity && roleClaimName) {\n          const rolesFromSSO = await this.mapRolesFromSSO(identity, roleClaimName);\n          if (!Array.isArray(user.roles)) {\n            user.roles = [];\n          }\n          const rolesIdsFromSSO = (await Roles.findInIdsOrNames(rolesFromSSO).toArray()).map(role => role._id);\n          const allowedRoles = (await Roles.findInIdsOrNames(rolesToSync).toArray()).map(role => role._id);\n          await syncUserRoles(user._id, rolesIdsFromSSO, {\n            allowedRoles\n          });\n        }\n      }\n      // Returns list of roles from SSO identity\n      static async mapRolesFromSSO(identity, roleClaimName) {\n        if (!identity || !roleClaimName || !identity[roleClaimName] || !Array.isArray(identity[roleClaimName])) {\n          return [];\n        }\n        const baseRoles = identity[roleClaimName];\n        const filteredRoles = baseRoles.filter(val => val !== 'offline_access' && val !== 'uma_authorization');\n        const validRoleList = [];\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(filteredRoles), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const role = _step3.value;\n            {\n              if (await Roles.findOneByIdOrName(role)) {\n                validRoleList.push(role);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        return validRoleList;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","OAuthEEManager","Logger","Roles","Rooms","Users","addUserToRoom","createRoom","getValidRoomName","syncUserRoles","__reifyWaitForDeps__","logger","mapSSOGroupsToChannels","user","identity","groupClaimName","channelsMap","channelsAdmin","groupsFromSSO","userChannelAdmin","findOneByUsernameIgnoringCase","error","concat","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","Object","keys","_step","next","done","ssoGroup","value","channels","Array","isArray","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","channel","name","trim","undefined","allowDuplicates","room","findOneByNonValidatedName","createdRoom","rid","includes","_id","err","return","updateRolesFromSSO","roleClaimName","rolesToSync","rolesFromSSO","mapRolesFromSSO","roles","rolesIdsFromSSO","findInIdsOrNames","toArray","map","role","allowedRoles","baseRoles","filteredRoles","filter","val","validRoleList","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","findOneByIdOrName","push","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/lib/oauth/Manager.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Roles, Rooms, Users } from '@rocket.chat/models';\n\nimport { addUserToRoom } from '../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../app/lib/server/functions/createRoom';\nimport { getValidRoomName } from '../../../../app/utils/server/lib/getValidRoomName';\nimport { syncUserRoles } from '../syncUserRoles';\n\nconst logger = new Logger('OAuth');\n\nexport class OAuthEEManager {\n\tstatic async mapSSOGroupsToChannels(\n\t\tuser: IUser,\n\t\tidentity: Record<string, any>,\n\t\tgroupClaimName: string,\n\t\tchannelsMap: Record<string, any> | undefined,\n\t\tchannelsAdmin: string,\n\t): Promise<void> {\n\t\tif (channelsMap && user && identity && groupClaimName) {\n\t\t\tconst groupsFromSSO = identity[groupClaimName] || [];\n\n\t\t\tconst userChannelAdmin = await Users.findOneByUsernameIgnoringCase(channelsAdmin);\n\t\t\tif (!userChannelAdmin) {\n\t\t\t\tlogger.error(`could not create channel, user not found: ${channelsAdmin}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor await (const ssoGroup of Object.keys(channelsMap)) {\n\t\t\t\tif (typeof ssoGroup === 'string') {\n\t\t\t\t\tlet channels = channelsMap[ssoGroup];\n\t\t\t\t\tif (!Array.isArray(channels)) {\n\t\t\t\t\t\tchannels = [channels];\n\t\t\t\t\t}\n\t\t\t\t\tfor await (const channel of channels) {\n\t\t\t\t\t\tconst name = await getValidRoomName(channel.trim(), undefined, { allowDuplicates: true });\n\t\t\t\t\t\tlet room = await Rooms.findOneByNonValidatedName(name);\n\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\tconst createdRoom = await createRoom('c', channel, userChannelAdmin, [], false, false);\n\t\t\t\t\t\t\tif (!createdRoom?.rid) {\n\t\t\t\t\t\t\t\tlogger.error(`could not create channel ${channel}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\troom = createdRoom;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (room && Array.isArray(groupsFromSSO) && groupsFromSSO.includes(ssoGroup)) {\n\t\t\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async updateRolesFromSSO(\n\t\tuser: Record<string, any>,\n\t\tidentity: Record<string, any>,\n\t\troleClaimName: string,\n\t\trolesToSync: string[],\n\t): Promise<void> {\n\t\tif (user && identity && roleClaimName) {\n\t\t\tconst rolesFromSSO = await this.mapRolesFromSSO(identity, roleClaimName);\n\n\t\t\tif (!Array.isArray(user.roles)) {\n\t\t\t\tuser.roles = [];\n\t\t\t}\n\n\t\t\tconst rolesIdsFromSSO = (await Roles.findInIdsOrNames(rolesFromSSO).toArray()).map((role) => role._id);\n\t\t\tconst allowedRoles = (await Roles.findInIdsOrNames(rolesToSync).toArray()).map((role) => role._id);\n\n\t\t\tawait syncUserRoles(user._id, rolesIdsFromSSO, {\n\t\t\t\tallowedRoles,\n\t\t\t});\n\t\t}\n\t}\n\n\t// Returns list of roles from SSO identity\n\tstatic async mapRolesFromSSO(identity: Record<string, any>, roleClaimName: string): Promise<string[]> {\n\t\tif (!identity || !roleClaimName || !identity[roleClaimName] || !Array.isArray(identity[roleClaimName])) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst baseRoles = identity[roleClaimName] as string[];\n\n\t\tconst filteredRoles = baseRoles.filter((val) => val !== 'offline_access' && val !== 'uma_authorization');\n\t\tconst validRoleList = [];\n\t\tfor await (const role of filteredRoles) {\n\t\t\tif (await Roles.findOneByIdOrName(role)) {\n\t\t\t\tvalidRoleList.push(role);\n\t\t\t}\n\t\t}\n\n\t\treturn validRoleList;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"befa8bc0c5f7ebda35b00872bf2b2b3395abea59"}
