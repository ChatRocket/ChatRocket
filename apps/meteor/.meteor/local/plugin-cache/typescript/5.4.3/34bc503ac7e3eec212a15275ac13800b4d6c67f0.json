{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/messageSearch.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/methods/messageSearch.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/messageSearch.ts","inputSourceMap":{"version":3,"file":"server/methods/messageSearch.ts","sourceRoot":"","sources":["server/methods/messageSearch.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../app/authorization/server/functions/canAccessRoom';\nimport type { IRawSearchResult } from '../../app/search/server/model/ISearchResult';\nimport { settings } from '../../app/settings/server';\nimport { readSecondaryPreferred } from '../database/readSecondaryPreferred';\nimport { parseMessageSearchQuery } from '../lib/parseMessageSearchQuery';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tmessageSearch(text: string, rid?: string, limit?: number, offset?: number): IRawSearchResult | boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync messageSearch(text, rid, limit, offset) {\n\t\tcheck(text, String);\n\t\tcheck(rid, Match.Maybe(String));\n\t\tcheck(limit, Match.Optional(Number));\n\t\tcheck(offset, Match.Optional(Number));\n\n\t\tconst currentUserId = Meteor.userId();\n\t\tif (!currentUserId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'messageSearch',\n\t\t\t});\n\t\t}\n\n\t\t// Don't process anything else if the user can't access the room\n\t\tif (rid) {\n\t\t\tif (!(await canAccessRoomIdAsync(rid, currentUserId))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst user = (await Meteor.userAsync()) as IUser | undefined;\n\n\t\tconst { query, options } = parseMessageSearchQuery(text, {\n\t\t\tuser,\n\t\t\toffset,\n\t\t\tlimit,\n\t\t\tforceRegex: settings.get('Message_AlwaysSearchRegExp'),\n\t\t});\n\n\t\tif (Object.keys(query).length === 0) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tquery.t = {\n\t\t\t$ne: 'rm', // hide removed messages (useful when searching for user messages)\n\t\t};\n\t\tquery._hidden = {\n\t\t\t$ne: true, // don't return _hidden messages\n\t\t};\n\n\t\tif (rid) {\n\t\t\tquery.rid = rid;\n\t\t} else {\n\t\t\tquery.rid = {\n\t\t\t\t$in: user?._id ? (await Subscriptions.findByUserId(user._id).toArray()).map((subscription: ISubscription) => subscription.rid) : [],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: {\n\t\t\t\tdocs: await Messages.find(query, {\n\t\t\t\t\t// @ts-expect-error col.s.db is not typed\n\t\t\t\t\treadPreference: readSecondaryPreferred(Messages.col.s.db),\n\t\t\t\t\t...options,\n\t\t\t\t}).toArray(),\n\t\t\t},\n\t\t};\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/methods/messageSearch.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/methods/messageSearch.ts","inputSourceMap":{"version":3,"file":"server/methods/messageSearch.ts","sourceRoot":"","sources":["server/methods/messageSearch.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../app/authorization/server/functions/canAccessRoom';\nimport type { IRawSearchResult } from '../../app/search/server/model/ISearchResult';\nimport { settings } from '../../app/settings/server';\nimport { readSecondaryPreferred } from '../database/readSecondaryPreferred';\nimport { parseMessageSearchQuery } from '../lib/parseMessageSearchQuery';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tmessageSearch(text: string, rid?: string, limit?: number, offset?: number): IRawSearchResult | boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync messageSearch(text, rid, limit, offset) {\n\t\tcheck(text, String);\n\t\tcheck(rid, Match.Maybe(String));\n\t\tcheck(limit, Match.Optional(Number));\n\t\tcheck(offset, Match.Optional(Number));\n\n\t\tconst currentUserId = Meteor.userId();\n\t\tif (!currentUserId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'messageSearch',\n\t\t\t});\n\t\t}\n\n\t\t// Don't process anything else if the user can't access the room\n\t\tif (rid) {\n\t\t\tif (!(await canAccessRoomIdAsync(rid, currentUserId))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst user = (await Meteor.userAsync()) as IUser | undefined;\n\n\t\tconst { query, options } = parseMessageSearchQuery(text, {\n\t\t\tuser,\n\t\t\toffset,\n\t\t\tlimit,\n\t\t\tforceRegex: settings.get('Message_AlwaysSearchRegExp'),\n\t\t});\n\n\t\tif (Object.keys(query).length === 0) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tquery.t = {\n\t\t\t$ne: 'rm', // hide removed messages (useful when searching for user messages)\n\t\t};\n\t\tquery._hidden = {\n\t\t\t$ne: true, // don't return _hidden messages\n\t\t};\n\n\t\tif (rid) {\n\t\t\tquery.rid = rid;\n\t\t} else {\n\t\t\tquery.rid = {\n\t\t\t\t$in: user?._id ? (await Subscriptions.findByUserId(user._id).toArray()).map((subscription: ISubscription) => subscription.rid) : [],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: {\n\t\t\t\tdocs: await Messages.find(query, {\n\t\t\t\t\t// @ts-expect-error col.s.db is not typed\n\t\t\t\t\treadPreference: readSecondaryPreferred(Messages.col.s.db),\n\t\t\t\t\t...options,\n\t\t\t\t}).toArray(),\n\t\t\t},\n\t\t};\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Messages, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 0);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let canAccessRoomIdAsync;\n    module.link(\"../../app/authorization/server/functions/canAccessRoom\", {\n      canAccessRoomIdAsync(v) {\n        canAccessRoomIdAsync = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let readSecondaryPreferred;\n    module.link(\"../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 5);\n    let parseMessageSearchQuery;\n    module.link(\"../lib/parseMessageSearchQuery\", {\n      parseMessageSearchQuery(v) {\n        parseMessageSearchQuery = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      async messageSearch(text, rid, limit, offset) {\n        check(text, String);\n        check(rid, Match.Maybe(String));\n        check(limit, Match.Optional(Number));\n        check(offset, Match.Optional(Number));\n        const currentUserId = Meteor.userId();\n        if (!currentUserId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'messageSearch'\n          });\n        }\n        // Don't process anything else if the user can't access the room\n        if (rid) {\n          if (!(await canAccessRoomIdAsync(rid, currentUserId))) {\n            return false;\n          }\n        } else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n          return {\n            message: {\n              docs: []\n            }\n          };\n        }\n        const user = await Meteor.userAsync();\n        const {\n          query,\n          options\n        } = parseMessageSearchQuery(text, {\n          user,\n          offset,\n          limit,\n          forceRegex: settings.get('Message_AlwaysSearchRegExp')\n        });\n        if (Object.keys(query).length === 0) {\n          return {\n            message: {\n              docs: []\n            }\n          };\n        }\n        query.t = {\n          $ne: 'rm' // hide removed messages (useful when searching for user messages)\n        };\n        query._hidden = {\n          $ne: true // don't return _hidden messages\n        };\n        if (rid) {\n          query.rid = rid;\n        } else {\n          query.rid = {\n            $in: user !== null && user !== void 0 && user._id ? (await Subscriptions.findByUserId(user._id).toArray()).map(subscription => subscription.rid) : []\n          };\n        }\n        return {\n          message: {\n            docs: await Messages.find(query, _objectSpread({\n              // @ts-expect-error col.s.db is not typed\n              readPreference: readSecondaryPreferred(Messages.col.s.db)\n            }, options)).toArray()\n          }\n        };\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Messages","Subscriptions","Match","check","Meteor","canAccessRoomIdAsync","settings","readSecondaryPreferred","parseMessageSearchQuery","__reifyWaitForDeps__","methods","messageSearch","text","rid","limit","offset","String","Maybe","Optional","Number","currentUserId","userId","Error","method","get","message","docs","user","userAsync","query","options","forceRegex","Object","keys","length","t","$ne","_hidden","$in","_id","findByUserId","toArray","map","subscription","find","readPreference","col","s","db","__reify_async_result__","_reifyError","self","async"],"sources":["server/methods/messageSearch.ts"],"sourcesContent":["import type { ISubscription, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Subscriptions } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { canAccessRoomIdAsync } from '../../app/authorization/server/functions/canAccessRoom';\nimport type { IRawSearchResult } from '../../app/search/server/model/ISearchResult';\nimport { settings } from '../../app/settings/server';\nimport { readSecondaryPreferred } from '../database/readSecondaryPreferred';\nimport { parseMessageSearchQuery } from '../lib/parseMessageSearchQuery';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tmessageSearch(text: string, rid?: string, limit?: number, offset?: number): IRawSearchResult | boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync messageSearch(text, rid, limit, offset) {\n\t\tcheck(text, String);\n\t\tcheck(rid, Match.Maybe(String));\n\t\tcheck(limit, Match.Optional(Number));\n\t\tcheck(offset, Match.Optional(Number));\n\n\t\tconst currentUserId = Meteor.userId();\n\t\tif (!currentUserId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'messageSearch',\n\t\t\t});\n\t\t}\n\n\t\t// Don't process anything else if the user can't access the room\n\t\tif (rid) {\n\t\t\tif (!(await canAccessRoomIdAsync(rid, currentUserId))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (settings.get('Search.defaultProvider.GlobalSearchEnabled') !== true) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst user = (await Meteor.userAsync()) as IUser | undefined;\n\n\t\tconst { query, options } = parseMessageSearchQuery(text, {\n\t\t\tuser,\n\t\t\toffset,\n\t\t\tlimit,\n\t\t\tforceRegex: settings.get('Message_AlwaysSearchRegExp'),\n\t\t});\n\n\t\tif (Object.keys(query).length === 0) {\n\t\t\treturn {\n\t\t\t\tmessage: {\n\t\t\t\t\tdocs: [],\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tquery.t = {\n\t\t\t$ne: 'rm', // hide removed messages (useful when searching for user messages)\n\t\t};\n\t\tquery._hidden = {\n\t\t\t$ne: true, // don't return _hidden messages\n\t\t};\n\n\t\tif (rid) {\n\t\t\tquery.rid = rid;\n\t\t} else {\n\t\t\tquery.rid = {\n\t\t\t\t$in: user?._id ? (await Subscriptions.findByUserId(user._id).toArray()).map((subscription: ISubscription) => subscription.rid) : [],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tmessage: {\n\t\t\t\tdocs: await Messages.find(query, {\n\t\t\t\t\t// @ts-expect-error col.s.db is not typed\n\t\t\t\t\treadPreference: readSecondaryPreferred(Messages.col.s.db),\n\t\t\t\t\t...options,\n\t\t\t\t}).toArray(),\n\t\t\t},\n\t\t};\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"34bc503ac7e3eec212a15275ac13800b4d6c67f0"}
