{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/configuration/saml.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/configuration/saml.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/configuration/saml.ts","inputSourceMap":{"version":3,"file":"ee/server/configuration/saml.ts","sourceRoot":"","sources":["ee/server/configuration/saml.ts"],"names":[],"mappings":"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","sourcesContent":["import { License } from '@rocket.chat/license';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport type { ISAMLUser } from '../../../app/meteor-accounts-saml/server/definition/ISAMLUser';\nimport { SAMLUtils } from '../../../app/meteor-accounts-saml/server/lib/Utils';\nimport { settings } from '../../../app/settings/server';\nimport { ensureArray } from '../../../lib/utils/arrayUtils';\nimport { addSettings } from '../settings/saml';\n\nawait License.onLicense('saml-enterprise', () => {\n\tSAMLUtils.events.on('mapUser', async ({ profile, userObject }: { profile: Record<string, any>; userObject: ISAMLUser }) => {\n\t\tconst roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name') as string;\n\t\tconst roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n\t\tif (!roleAttributeSync) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (roleAttributeName && profile[roleAttributeName]) {\n\t\t\tlet value = profile[roleAttributeName] || '';\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.split(',');\n\t\t\t}\n\n\t\t\tconst savedRoles = await Roles.findInIdsOrNames(ensureArray<string>(value)).toArray();\n\n\t\t\tuserObject.roles = savedRoles.map((role) => role._id);\n\t\t}\n\t});\n\n\tSAMLUtils.events.on('loadConfigs', (service: string, configs: Record<string, any>): void => {\n\t\t// Include ee settings on the configs object so that they can be copied to the login service too\n\t\tObject.assign(configs, {\n\t\t\tcustomAuthnContext: settings.get(`${service}_custom_authn_context`),\n\t\t\tauthnContextComparison: settings.get(`${service}_authn_context_comparison`),\n\t\t\tidentifierFormat: settings.get(`${service}_identifier_format`),\n\t\t\tnameIDPolicyTemplate: settings.get(`${service}_NameId_template`),\n\t\t\tauthnContextTemplate: settings.get(`${service}_AuthnContext_template`),\n\t\t\tauthRequestTemplate: settings.get(`${service}_AuthRequest_template`),\n\t\t\tlogoutResponseTemplate: settings.get(`${service}_LogoutResponse_template`),\n\t\t\tlogoutRequestTemplate: settings.get(`${service}_LogoutRequest_template`),\n\t\t\tmetadataCertificateTemplate: settings.get(`${service}_MetadataCertificate_template`),\n\t\t\tmetadataTemplate: settings.get(`${service}_Metadata_template`),\n\t\t});\n\t});\n\n\tSAMLUtils.events.on('updateCustomFields', async (loginResult: Record<string, any>, updatedUser: { userId: string; token: string }) => {\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\n\t\tfor (const spCustomFieldName in customMap) {\n\t\t\tif (!customMap.hasOwnProperty(spCustomFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst customAttribute = customMap[spCustomFieldName];\n\t\t\tconst value = SAMLUtils.getProfileValue(loginResult.profile, {\n\t\t\t\tfieldName: spCustomFieldName,\n\t\t\t});\n\t\t\tcustomFieldsList[customAttribute] = value;\n\t\t}\n\n\t\tawait Users.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n\t});\n});\n\n// For setting creation we add the listener first because the event is emmited during startup\nSAMLUtils.events.on('addSettings', (name: string): void | Promise<void> => License.onLicense('saml-enterprise', () => addSettings(name)));\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/configuration/saml.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/configuration/saml.ts","inputSourceMap":{"version":3,"file":"ee/server/configuration/saml.ts","sourceRoot":"","sources":["ee/server/configuration/saml.ts"],"names":[],"mappings":"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","sourcesContent":["import { License } from '@rocket.chat/license';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport type { ISAMLUser } from '../../../app/meteor-accounts-saml/server/definition/ISAMLUser';\nimport { SAMLUtils } from '../../../app/meteor-accounts-saml/server/lib/Utils';\nimport { settings } from '../../../app/settings/server';\nimport { ensureArray } from '../../../lib/utils/arrayUtils';\nimport { addSettings } from '../settings/saml';\n\nawait License.onLicense('saml-enterprise', () => {\n\tSAMLUtils.events.on('mapUser', async ({ profile, userObject }: { profile: Record<string, any>; userObject: ISAMLUser }) => {\n\t\tconst roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name') as string;\n\t\tconst roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n\t\tif (!roleAttributeSync) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (roleAttributeName && profile[roleAttributeName]) {\n\t\t\tlet value = profile[roleAttributeName] || '';\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.split(',');\n\t\t\t}\n\n\t\t\tconst savedRoles = await Roles.findInIdsOrNames(ensureArray<string>(value)).toArray();\n\n\t\t\tuserObject.roles = savedRoles.map((role) => role._id);\n\t\t}\n\t});\n\n\tSAMLUtils.events.on('loadConfigs', (service: string, configs: Record<string, any>): void => {\n\t\t// Include ee settings on the configs object so that they can be copied to the login service too\n\t\tObject.assign(configs, {\n\t\t\tcustomAuthnContext: settings.get(`${service}_custom_authn_context`),\n\t\t\tauthnContextComparison: settings.get(`${service}_authn_context_comparison`),\n\t\t\tidentifierFormat: settings.get(`${service}_identifier_format`),\n\t\t\tnameIDPolicyTemplate: settings.get(`${service}_NameId_template`),\n\t\t\tauthnContextTemplate: settings.get(`${service}_AuthnContext_template`),\n\t\t\tauthRequestTemplate: settings.get(`${service}_AuthRequest_template`),\n\t\t\tlogoutResponseTemplate: settings.get(`${service}_LogoutResponse_template`),\n\t\t\tlogoutRequestTemplate: settings.get(`${service}_LogoutRequest_template`),\n\t\t\tmetadataCertificateTemplate: settings.get(`${service}_MetadataCertificate_template`),\n\t\t\tmetadataTemplate: settings.get(`${service}_Metadata_template`),\n\t\t});\n\t});\n\n\tSAMLUtils.events.on('updateCustomFields', async (loginResult: Record<string, any>, updatedUser: { userId: string; token: string }) => {\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\n\t\tfor (const spCustomFieldName in customMap) {\n\t\t\tif (!customMap.hasOwnProperty(spCustomFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst customAttribute = customMap[spCustomFieldName];\n\t\t\tconst value = SAMLUtils.getProfileValue(loginResult.profile, {\n\t\t\t\tfieldName: spCustomFieldName,\n\t\t\t});\n\t\t\tcustomFieldsList[customAttribute] = value;\n\t\t}\n\n\t\tawait Users.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n\t});\n});\n\n// For setting creation we add the listener first because the event is emmited during startup\nSAMLUtils.events.on('addSettings', (name: string): void | Promise<void> => License.onLicense('saml-enterprise', () => addSettings(name)));\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let License;\n    module.link(\"@rocket.chat/license\", {\n      License(v) {\n        License = v;\n      }\n    }, 0);\n    let Roles, Users;\n    module.link(\"@rocket.chat/models\", {\n      Roles(v) {\n        Roles = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let SAMLUtils;\n    module.link(\"../../../app/meteor-accounts-saml/server/lib/Utils\", {\n      SAMLUtils(v) {\n        SAMLUtils = v;\n      }\n    }, 2);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 3);\n    let ensureArray;\n    module.link(\"../../../lib/utils/arrayUtils\", {\n      ensureArray(v) {\n        ensureArray = v;\n      }\n    }, 4);\n    let addSettings;\n    module.link(\"../settings/saml\", {\n      addSettings(v) {\n        addSettings = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    await License.onLicense('saml-enterprise', () => {\n      SAMLUtils.events.on('mapUser', async _ref => {\n        let {\n          profile,\n          userObject\n        } = _ref;\n        const roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name');\n        const roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n        if (!roleAttributeSync) {\n          return;\n        }\n        if (roleAttributeName && profile[roleAttributeName]) {\n          let value = profile[roleAttributeName] || '';\n          if (typeof value === 'string') {\n            value = value.split(',');\n          }\n          const savedRoles = await Roles.findInIdsOrNames(ensureArray(value)).toArray();\n          userObject.roles = savedRoles.map(role => role._id);\n        }\n      });\n      SAMLUtils.events.on('loadConfigs', (service, configs) => {\n        // Include ee settings on the configs object so that they can be copied to the login service too\n        Object.assign(configs, {\n          customAuthnContext: settings.get(\"\".concat(service, \"_custom_authn_context\")),\n          authnContextComparison: settings.get(\"\".concat(service, \"_authn_context_comparison\")),\n          identifierFormat: settings.get(\"\".concat(service, \"_identifier_format\")),\n          nameIDPolicyTemplate: settings.get(\"\".concat(service, \"_NameId_template\")),\n          authnContextTemplate: settings.get(\"\".concat(service, \"_AuthnContext_template\")),\n          authRequestTemplate: settings.get(\"\".concat(service, \"_AuthRequest_template\")),\n          logoutResponseTemplate: settings.get(\"\".concat(service, \"_LogoutResponse_template\")),\n          logoutRequestTemplate: settings.get(\"\".concat(service, \"_LogoutRequest_template\")),\n          metadataCertificateTemplate: settings.get(\"\".concat(service, \"_MetadataCertificate_template\")),\n          metadataTemplate: settings.get(\"\".concat(service, \"_Metadata_template\"))\n        });\n      });\n      SAMLUtils.events.on('updateCustomFields', async (loginResult, updatedUser) => {\n        const userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap');\n        const customMap = JSON.parse(userDataCustomFieldMap);\n        const customFieldsList = {};\n        for (const spCustomFieldName in customMap) {\n          if (!customMap.hasOwnProperty(spCustomFieldName)) {\n            continue;\n          }\n          const customAttribute = customMap[spCustomFieldName];\n          const value = SAMLUtils.getProfileValue(loginResult.profile, {\n            fieldName: spCustomFieldName\n          });\n          customFieldsList[customAttribute] = value;\n        }\n        await Users.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n      });\n    });\n    // For setting creation we add the listener first because the event is emmited during startup\n    SAMLUtils.events.on('addSettings', name => License.onLicense('saml-enterprise', () => addSettings(name)));\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: true\n});","map":{"version":3,"names":["License","module","link","v","Roles","Users","SAMLUtils","settings","ensureArray","addSettings","__reifyWaitForDeps__","onLicense","events","on","_ref","profile","userObject","roleAttributeName","get","roleAttributeSync","value","split","savedRoles","findInIdsOrNames","toArray","roles","map","role","_id","service","configs","Object","assign","customAuthnContext","concat","authnContextComparison","identifierFormat","nameIDPolicyTemplate","authnContextTemplate","authRequestTemplate","logoutResponseTemplate","logoutRequestTemplate","metadataCertificateTemplate","metadataTemplate","loginResult","updatedUser","userDataCustomFieldMap","customMap","JSON","parse","customFieldsList","spCustomFieldName","hasOwnProperty","customAttribute","getProfileValue","fieldName","updateCustomFieldsById","userId","name","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/configuration/saml.ts"],"sourcesContent":["import { License } from '@rocket.chat/license';\nimport { Roles, Users } from '@rocket.chat/models';\n\nimport type { ISAMLUser } from '../../../app/meteor-accounts-saml/server/definition/ISAMLUser';\nimport { SAMLUtils } from '../../../app/meteor-accounts-saml/server/lib/Utils';\nimport { settings } from '../../../app/settings/server';\nimport { ensureArray } from '../../../lib/utils/arrayUtils';\nimport { addSettings } from '../settings/saml';\n\nawait License.onLicense('saml-enterprise', () => {\n\tSAMLUtils.events.on('mapUser', async ({ profile, userObject }: { profile: Record<string, any>; userObject: ISAMLUser }) => {\n\t\tconst roleAttributeName = settings.get('SAML_Custom_Default_role_attribute_name') as string;\n\t\tconst roleAttributeSync = settings.get('SAML_Custom_Default_role_attribute_sync');\n\n\t\tif (!roleAttributeSync) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (roleAttributeName && profile[roleAttributeName]) {\n\t\t\tlet value = profile[roleAttributeName] || '';\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = value.split(',');\n\t\t\t}\n\n\t\t\tconst savedRoles = await Roles.findInIdsOrNames(ensureArray<string>(value)).toArray();\n\n\t\t\tuserObject.roles = savedRoles.map((role) => role._id);\n\t\t}\n\t});\n\n\tSAMLUtils.events.on('loadConfigs', (service: string, configs: Record<string, any>): void => {\n\t\t// Include ee settings on the configs object so that they can be copied to the login service too\n\t\tObject.assign(configs, {\n\t\t\tcustomAuthnContext: settings.get(`${service}_custom_authn_context`),\n\t\t\tauthnContextComparison: settings.get(`${service}_authn_context_comparison`),\n\t\t\tidentifierFormat: settings.get(`${service}_identifier_format`),\n\t\t\tnameIDPolicyTemplate: settings.get(`${service}_NameId_template`),\n\t\t\tauthnContextTemplate: settings.get(`${service}_AuthnContext_template`),\n\t\t\tauthRequestTemplate: settings.get(`${service}_AuthRequest_template`),\n\t\t\tlogoutResponseTemplate: settings.get(`${service}_LogoutResponse_template`),\n\t\t\tlogoutRequestTemplate: settings.get(`${service}_LogoutRequest_template`),\n\t\t\tmetadataCertificateTemplate: settings.get(`${service}_MetadataCertificate_template`),\n\t\t\tmetadataTemplate: settings.get(`${service}_Metadata_template`),\n\t\t});\n\t});\n\n\tSAMLUtils.events.on('updateCustomFields', async (loginResult: Record<string, any>, updatedUser: { userId: string; token: string }) => {\n\t\tconst userDataCustomFieldMap = settings.get('SAML_Custom_Default_user_data_custom_fieldmap') as string;\n\t\tconst customMap: Record<string, any> = JSON.parse(userDataCustomFieldMap);\n\n\t\tconst customFieldsList: Record<string, any> = {};\n\n\t\tfor (const spCustomFieldName in customMap) {\n\t\t\tif (!customMap.hasOwnProperty(spCustomFieldName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst customAttribute = customMap[spCustomFieldName];\n\t\t\tconst value = SAMLUtils.getProfileValue(loginResult.profile, {\n\t\t\t\tfieldName: spCustomFieldName,\n\t\t\t});\n\t\t\tcustomFieldsList[customAttribute] = value;\n\t\t}\n\n\t\tawait Users.updateCustomFieldsById(updatedUser.userId, customFieldsList);\n\t});\n});\n\n// For setting creation we add the listener first because the event is emmited during startup\nSAMLUtils.events.on('addSettings', (name: string): void | Promise<void> => License.onLicense('saml-enterprise', () => addSettings(name)));\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a62120de179b98bf3f911d4d6dfbf2c43006cd51"}
