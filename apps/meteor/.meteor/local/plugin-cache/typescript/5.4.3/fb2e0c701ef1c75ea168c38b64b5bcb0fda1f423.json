{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/Bridge.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/infrastructure/matrix/Bridge.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/Bridge.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/matrix/Bridge.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/matrix/Bridge.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport type { AppServiceOutput, Bridge } from '@rocket.chat/forked-matrix-appservice-bridge';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\n\nimport type { IExternalUserProfileInformation, IFederationBridge, IFederationBridgeRegistrationFile } from '../../domain/IFederationBridge';\nimport type { RocketChatSettingsAdapter } from '../rocket-chat/adapters/Settings';\nimport { federationBridgeLogger } from '../rocket-chat/adapters/logger';\nimport { convertEmojisFromRCFormatToMatrixFormat } from './converters/room/MessageReceiver';\nimport { formatExternalUserIdToInternalUsernameFormat } from './converters/room/RoomReceiver';\nimport { toExternalMessageFormat, toExternalQuoteMessageFormat } from './converters/room/to-internal-parser-formatter';\nimport type { AbstractMatrixEvent } from './definitions/AbstractMatrixEvent';\nimport { MatrixEventType } from './definitions/MatrixEventType';\nimport { MatrixRoomType } from './definitions/MatrixRoomType';\nimport { MatrixRoomVisibility } from './definitions/MatrixRoomVisibility';\nimport { RoomMembershipChangedEventType } from './definitions/events/RoomMembershipChanged';\nimport { MatrixEnumRelatesToRelType, MatrixEnumSendMessageType } from './definitions/events/RoomMessageSent';\nimport type { MatrixEventRoomNameChanged } from './definitions/events/RoomNameChanged';\nimport type { MatrixEventRoomTopicChanged } from './definitions/events/RoomTopicChanged';\nimport { HttpStatusCodes } from './helpers/HtttpStatusCodes';\nimport { extractUserIdAndHomeserverFromMatrixId } from './helpers/MatrixIdStringTools';\nimport { VerificationStatus, MATRIX_USER_IN_USE } from './helpers/MatrixIdVerificationTypes';\n\nlet MatrixUserInstance: any;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS = 180000;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT = 60 * 1000;\n\nexport class MatrixBridge implements IFederationBridge {\n\tprotected bridgeInstance: Bridge;\n\n\tprotected isRunning = false;\n\n\tprotected isUpdatingBridgeStatus = false;\n\n\tconstructor(protected internalSettings: RocketChatSettingsAdapter, protected eventHandler: (event: AbstractMatrixEvent) => void) {} // eslint-disable-line no-empty-function\n\n\tpublic async start(): Promise<void> {\n\t\tif (this.isUpdatingBridgeStatus) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isUpdatingBridgeStatus = true;\n\t\ttry {\n\t\t\tawait this.stop();\n\t\t\tawait this.createInstance();\n\n\t\t\tif (!this.isRunning) {\n\t\t\t\tawait this.bridgeInstance.run(this.internalSettings.getBridgePort());\n\n\t\t\t\tthis.bridgeInstance.addAppServicePath({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tpath: '/_matrix/app/v1/ping',\n\t\t\t\t\tcheckToken: true,\n\t\t\t\t\thandler: (_req, res, _next) => {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * https://spec.matrix.org/v1.11/application-service-api/#post_matrixappv1ping\n\t\t\t\t\t\t * Spec does not talk about what to do with the id. It is safe to ignore it as we are already checking for\n\t\t\t\t\t\t * homeserver token to be correct.\n\t\t\t\t\t\t * From the spec this might be a bit confusing, as it shows a txn id for post, but app service doing nothing with it afterwards\n\t\t\t\t\t\t * when receiving from the homeserver.\n\t\t\t\t\t\t * From spec directly -\n\t\t\t\t\t\t\tAS ---> HS : /_matrix/client/v1/appservice/{appserviceId}/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS ---> AS : /_matrix/app/v1/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS <--- AS : 200 OK {}\n\t\t\t\t\t\t\tAS <--- HS : 200 OK {\"duration_ms\": 123}\n\t\t\t\t\t\t * https://github.com/matrix-org/matrix-spec/blob/e53e6ea8764b95f0bdb738549fca6f9f3f901298/content/application-service-api.md?plain=1#L229-L232\n\t\t\t\t\t\t * Code - wise, also doesn't care what happens with the response.\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/rest/client/appservice_ping.py#L80 - nothing done on return\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/appservice/api.py#L321-L332 - not even returning the response, caring for just the http status code - https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/http/client.py#L532-L537\n\t\t\t\t\t\t */\n\t\t\t\t\t\tres.status(200).json({});\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.isRunning = true;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Failed to initialize the matrix-appservice-bridge.', err });\n\t\t} finally {\n\t\t\tthis.isUpdatingBridgeStatus = false;\n\t\t}\n\t}\n\n\tpublic async stop(): Promise<void> {\n\t\tif (!this.isRunning) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (resolve: () => void): Promise<void> => {\n\t\t\t// the http server might take some minutes to shutdown, and this promise can take some time to be resolved\n\t\t\tawait this.bridgeInstance?.close();\n\t\t\tthis.isRunning = false;\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic async getUserProfileInformation(externalUserId: string): Promise<IExternalUserProfileInformation | undefined> {\n\t\ttry {\n\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\n\t\t\treturn {\n\t\t\t\tdisplayName: externalInformation.displayname || '',\n\t\t\t\t...(externalInformation.avatar_url\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tavatarUrl: externalInformation.avatar_url,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t};\n\t\t} catch (err) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async joinRoom(externalRoomId: string, externalUserId: string, viaServers?: string[]): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance\n\t\t\t\t.getIntent(externalUserId)\n\t\t\t\t.matrixClient.doRequest(\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/_matrix/client/v3/join/${externalRoomId}`,\n\t\t\t\t\t{ server_name: viaServers },\n\t\t\t\t\t{},\n\t\t\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS,\n\t\t\t\t);\n\t\t} catch (e) {\n\t\t\tthrow new Error('Error joining Matrix room');\n\t\t}\n\t}\n\n\tpublic async getRoomHistoricalJoinEvents(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texcludingUserIds: string[] = [],\n\t): Promise<any[]> {\n\t\tconst events = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getRoomState(externalRoomId);\n\t\tconst roomCreator = events.find((event) => event.type === MatrixEventType.ROOM_CREATED)?.content?.creator;\n\t\tif (!roomCreator) {\n\t\t\treturn [];\n\t\t}\n\t\treturn events\n\t\t\t.filter(\n\t\t\t\t(event) =>\n\t\t\t\t\tevent.type === MatrixEventType.ROOM_MEMBERSHIP_CHANGED &&\n\t\t\t\t\tevent.content.membership === RoomMembershipChangedEventType.JOIN &&\n\t\t\t\t\t!excludingUserIds.includes(event.state_key),\n\t\t\t)\n\t\t\t.map((event) => ({\n\t\t\t\t...event,\n\t\t\t\tsender: roomCreator,\n\t\t\t}));\n\t}\n\n\tpublic async getRoomData(\n\t\texternalUserId: string,\n\t\texternalRoomId: string,\n\t): Promise<{ creator: { id: string; username: string }; name: string; joinedMembers: string[] } | undefined> {\n\t\tconst includeEvents = ['join'];\n\t\tconst excludeEvents = ['leave', 'ban'];\n\t\tconst members = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.getRoomMembers(externalRoomId, undefined, includeEvents as any[], excludeEvents as any[]);\n\n\t\tconst joinedMembers = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getJoinedRoomMembers(externalRoomId);\n\n\t\tconst oldestFirst = members.sort((a, b) => a.timestamp - b.timestamp).shift();\n\t\tif (!oldestFirst) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst roomName = await this.getRoomName(externalRoomId, externalUserId);\n\t\tif (!roomName) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tcreator: {\n\t\t\t\tid: oldestFirst.sender,\n\t\t\t\tusername: formatExternalUserIdToInternalUsernameFormat(oldestFirst.sender),\n\t\t\t},\n\t\t\tjoinedMembers,\n\t\t\tname: roomName,\n\t\t};\n\t}\n\n\tpublic async inviteToRoom(externalRoomId: string, externalInviterId: string, externalInviteeId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalInviterId).invite(externalRoomId, externalInviteeId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setUserAvatar(externalUserId: string, avatarUrl: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.setAvatarUrl(avatarUrl);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async verifyInviteeIds(matrixIds: string[]): Promise<Map<string, string>> {\n\t\tconst matrixIdVerificationMap = new Map();\n\t\tconst matrixIdsVerificationPromises = matrixIds.map((matrixId) => this.verifyInviteeId(matrixId));\n\t\tconst matrixIdsVerificationPromiseResponse = await Promise.allSettled(matrixIdsVerificationPromises);\n\t\tconst matrixIdsVerificationFulfilledResults = matrixIdsVerificationPromiseResponse\n\t\t\t.filter((result): result is PromiseFulfilledResult<VerificationStatus> => result.status === 'fulfilled')\n\t\t\t.map((result) => result.value);\n\n\t\tmatrixIds.forEach((matrixId, idx) => matrixIdVerificationMap.set(matrixId, matrixIdsVerificationFulfilledResults[idx]));\n\t\treturn matrixIdVerificationMap;\n\t}\n\n\tprivate async verifyInviteeId(externalInviteeId: string): Promise<VerificationStatus> {\n\t\tconst [userId, homeserverUrl] = extractUserIdAndHomeserverFromMatrixId(externalInviteeId);\n\t\ttry {\n\t\t\tconst response = await fetch(`https://${homeserverUrl}/_matrix/client/v3/register/available`, { params: { username: userId } });\n\n\t\t\tif (response.status === HttpStatusCodes.BAD_REQUEST) {\n\t\t\t\tconst responseBody = await response.json();\n\n\t\t\t\tif (responseBody.errcode === MATRIX_USER_IN_USE) {\n\t\t\t\t\treturn VerificationStatus.VERIFIED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.status === HttpStatusCodes.OK) {\n\t\t\t\treturn VerificationStatus.UNVERIFIED;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t\t}\n\n\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t}\n\n\tpublic async createUser(username: string, name: string, domain: string, avatarUrl?: string): Promise<string> {\n\t\tif (!MatrixUserInstance) {\n\t\t\tthrow new Error('Error loading the Matrix User instance from the external library');\n\t\t}\n\t\tconst matrixUserId = `@${username?.toLowerCase()}:${domain}`;\n\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tawait this.bridgeInstance.provisionUser(newUser, { name, ...(avatarUrl ? { url: avatarUrl } : {}) });\n\n\t\treturn matrixUserId;\n\t}\n\n\tpublic async setUserDisplayName(externalUserId: string, displayName: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).setDisplayName(displayName);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async createDirectMessageRoom(\n\t\texternalCreatorId: string,\n\t\tinviteesExternalIds: string[],\n\t\textraData: Record<string, any> = {},\n\t): Promise<string> {\n\t\tconst intent = this.bridgeInstance.getIntent(externalCreatorId);\n\n\t\tconst visibility = MatrixRoomVisibility.PRIVATE;\n\t\tconst preset = MatrixRoomType.PRIVATE;\n\n\t\tconst matrixRoom = await intent.createRoom({\n\t\t\tcreateAsClient: true,\n\t\t\toptions: {\n\t\t\t\tvisibility,\n\t\t\t\tpreset,\n\t\t\t\tis_direct: true,\n\t\t\t\tinvite: inviteesExternalIds,\n\t\t\t\tcreation_content: {\n\t\t\t\t\twas_internally_programatically_created: true,\n\t\t\t\t\t...extraData,\n\t\t\t\t\tinviteesExternalIds,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\treturn matrixRoom.room_id;\n\t}\n\n\tpublic async sendMessage(externalRoomId: string, externalSenderId: string, message: IMessage): Promise<string> {\n\t\ttry {\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\tmsgtype: 'm.text',\n\t\t\t\t\tbody: this.escapeEmojis(message.msg),\n\t\t\t\t\tformatted_body: this.escapeEmojis(\n\t\t\t\t\t\tawait toExternalMessageFormat({\n\t\t\t\t\t\t\tmessage: message.msg,\n\t\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e) {\n\t\t\tthrow new Error('User is not part of the room.');\n\t\t}\n\t}\n\n\tpublic async sendThreadMessage(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tmessage: IMessage,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst text = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: message.msg,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalSenderId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': this.escapeEmojis(message.msg),\n\t\t\t\t'formatted_body': text,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\treturn messageId;\n\t}\n\n\tpublic async sendThreadReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tpublic async sendMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tprivate escapeEmojis(text: string): string {\n\t\treturn convertEmojisFromRCFormatToMatrixFormat(text);\n\t}\n\n\tpublic async getReadStreamForFileFromUrl(externalUserId: string, fileUrl: string): Promise<ReadableStream> {\n\t\tconst response = await fetch(this.convertMatrixUrlToHttp(externalUserId, fileUrl));\n\t\tif (!response.body) {\n\t\t\tthrow new Error('Not able to download the file');\n\t\t}\n\n\t\treturn response.body as unknown as ReadableStream;\n\t}\n\n\tpublic isUserIdFromTheSameHomeserver(externalUserId: string, domain: string): boolean {\n\t\tconst userDomain = this.extractHomeserverOrigin(externalUserId);\n\n\t\treturn userDomain === domain;\n\t}\n\n\tpublic extractHomeserverOrigin(externalUserId: string): string {\n\t\treturn externalUserId.includes(':') ? externalUserId.split(':').pop() || '' : this.internalSettings.getHomeServerDomain();\n\t}\n\n\tpublic isRoomFromTheSameHomeserver(externalRoomId: string, domain: string): boolean {\n\t\treturn this.isUserIdFromTheSameHomeserver(externalRoomId, domain);\n\t}\n\n\tpublic logFederationStartupInfo(info?: string): void {\n\t\tfederationBridgeLogger.info(`${info}:\n\t\t\tid: ${this.internalSettings.getApplicationServiceId()}\n\t\t\tbridgeUrl: ${this.internalSettings.getBridgeUrl()}\n\t\t\thomeserverURL: ${this.internalSettings.getHomeServerUrl()}\n\t\t\thomeserverDomain: ${this.internalSettings.getHomeServerDomain()}\n\t\t`);\n\t}\n\n\tpublic async leaveRoom(externalRoomId: string, externalUserId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).leave(externalRoomId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async kickUserFromRoom(externalRoomId: string, externalUserId: string, externalOwnerId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).kick(externalRoomId, externalUserId);\n\t}\n\n\tpublic async setRoomPowerLevels(\n\t\texternalRoomId: string,\n\t\texternalOwnerId: string,\n\t\texternalUserId: string,\n\t\tpowerLevels: number,\n\t): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).setPowerLevel(externalRoomId, externalUserId, powerLevels);\n\t}\n\n\tpublic async redactEvent(externalRoomId: string, externalUserId: string, externalEventId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.redactEvent(externalRoomId, externalEventId);\n\t}\n\n\tpublic async notifyUserTyping(externalRoomId: string, externalUserId: string, isTyping: boolean): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).sendTyping(externalRoomId, isTyping);\n\t}\n\n\tpublic async sendMessageReaction(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\treaction: string,\n\t): Promise<string> {\n\t\tconst eventId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.MESSAGE_REACTED, {\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\tevent_id: externalEventId,\n\t\t\t\t\tkey: convertEmojisFromRCFormatToMatrixFormat(reaction),\n\t\t\t\t\trel_type: 'm.annotation',\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn eventId;\n\t}\n\n\tpublic async updateMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\tnewMessageText: string,\n\t): Promise<void> {\n\t\tconst messageInExternalFormat = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: newMessageText,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t'body': ` * ${this.escapeEmojis(newMessageText)}`,\n\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t'formatted_body': messageInExternalFormat,\n\t\t\t'm.new_content': {\n\t\t\t\tbody: this.escapeEmojis(newMessageText),\n\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\tformatted_body: messageInExternalFormat,\n\t\t\t\tmsgtype: MatrixEnumSendMessageType.TEXT,\n\t\t\t},\n\t\t\t'm.relates_to': {\n\t\t\t\trel_type: MatrixEnumRelatesToRelType.REPLACE,\n\t\t\t\tevent_id: externalEventId,\n\t\t\t},\n\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t});\n\t}\n\n\tpublic async sendMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\tbody: fileDetails.filename,\n\t\t\t\tfilename: fileDetails.filename,\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\tmsgtype: this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\turl: mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t'info': {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t'url': mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate getMsgTypeBasedOnMimeType(mimeType: string): MatrixEnumSendMessageType {\n\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\n\t\tif (knownImageMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.IMAGE;\n\t\t}\n\t\tif (knownAudioMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.AUDIO;\n\t\t}\n\t\tif (knownVideoMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.VIDEO;\n\t\t}\n\t\treturn MatrixEnumSendMessageType.FILE;\n\t}\n\n\tprivate getMyHomeServerOrigin() {\n\t\treturn new URL(`https://${this.internalSettings.getHomeServerDomain()}`).hostname;\n\t}\n\n\tpublic async uploadContent(\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\toptions?: { name?: string; type?: string },\n\t): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\n\t\t\treturn mxcUrl;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error uploading content to Matrix', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async getRoomName(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_NAME_CHANGED) as MatrixEventRoomNameChanged)?.content\n\t\t\t\t?.name;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async getRoomTopic(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_TOPIC_CHANGED) as MatrixEventRoomTopicChanged)?.content\n\t\t\t\t?.topic;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setRoomName(externalRoomId: string, externalUserId: string, roomName: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomName(externalRoomId, roomName);\n\t}\n\n\tpublic async setRoomTopic(externalRoomId: string, externalUserId: string, roomTopic: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomTopic(externalRoomId, roomTopic);\n\t}\n\n\tpublic convertMatrixUrlToHttp(externalUserId: string, matrixUrl: string): string {\n\t\treturn this.bridgeInstance.getIntent(externalUserId).matrixClient.mxcToHttp(matrixUrl);\n\t}\n\n\tprotected async createInstance(): Promise<void> {\n\t\tfederationBridgeLogger.info('Performing Dynamic Import of matrix-appservice-bridge');\n\n\t\t// Dynamic import to prevent Rocket.Chat from loading the module until needed and then handle if that fails\n\t\tconst { Bridge, AppServiceRegistration, MatrixUser } = await import('@rocket.chat/forked-matrix-appservice-bridge');\n\t\tMatrixUserInstance = MatrixUser;\n\t\tconst registrationFile = this.internalSettings.getAppServiceRegistrationObject();\n\n\t\tthis.bridgeInstance = new Bridge({\n\t\t\thomeserverUrl: this.internalSettings.getHomeServerUrl(),\n\t\t\tdomain: this.internalSettings.getHomeServerDomain(),\n\t\t\tregistration: AppServiceRegistration.fromObject(this.convertRegistrationFileToMatrixFormat(registrationFile)),\n\t\t\tdisableStores: true,\n\t\t\tcontroller: {\n\t\t\t\tonEvent: (request) => {\n\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\n\t\t\t\t\t// TODO: can we ignore all events from out homeserver?\n\t\t\t\t\t// This was added particularly to avoid duplicating messages.\n\t\t\t\t\t// Messages sent from rocket.chat also causes a m.room.message event, which if gets to this bridge\n\t\t\t\t\t// before the event id promise is resolved, the respective message does not get event id attached to them any longer,\n\t\t\t\t\t// thus this event handler \"resends\" the message to the rocket.chat room (not to matrix though).\n\t\t\t\t\tif (event.type === 'm.room.message' && this.extractHomeserverOrigin(event.sender) === this.getMyHomeServerOrigin()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t},\n\t\t\t\tonLog: (line, isError) => {\n\t\t\t\t\tconsole.log(line, isError);\n\t\t\t\t},\n\t\t\t\t...(this.internalSettings.getAppServiceRegistrationObject().enableEphemeralEvents\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tonEphemeralEvent: (request) => {\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate convertRegistrationFileToMatrixFormat(registrationFile: IFederationBridgeRegistrationFile): AppServiceOutput {\n\t\treturn {\n\t\t\t'id': registrationFile.id,\n\t\t\t'hs_token': registrationFile.homeserverToken,\n\t\t\t'as_token': registrationFile.applicationServiceToken,\n\t\t\t'url': registrationFile.bridgeUrl,\n\t\t\t'sender_localpart': registrationFile.botName,\n\t\t\t'namespaces': registrationFile.listenTo,\n\t\t\t'de.sorunome.msc2409.push_ephemeral': registrationFile.enableEphemeralEvents,\n\t\t};\n\t}\n\n\tpublic async ping(): Promise<{ durationMs: number }> {\n\t\tif (!this.isRunning || !this.bridgeInstance) {\n\t\t\tthrow new Error(\"matrix bridge isn't yet running\");\n\t\t}\n\n\t\tconst { duration_ms: durationMs } = await this.bridgeInstance.getIntent().matrixClient.doRequest(\n\t\t\t'POST',\n\t\t\t`/_matrix/client/v1/appservice/${this.internalSettings.getApplicationServiceId()}/ping`,\n\t\t\t{},\n\t\t\t/*\n\t\t\t * Empty txn id as it is optional, neither does the spec says exactly what to do with it.\n\t\t\t * https://github.com/matrix-org/matrix-spec/blob/1fc8f8856fe47849f90344cfa91601c984627acb/data/api/client-server/appservice_ping.yaml#L55-L56\n\t\t\t */\n\t\t\t{},\n\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT,\n\t\t);\n\n\t\treturn { durationMs };\n\t}\n\n\tpublic async deactivateUser(uid: string): Promise<void> {\n\t\t/*\n\t\t * https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3accountdeactivate\n\t\t * Using { erase: false } since rocket.chat side on deactivation we do not delete anything.\n\t\t */\n\t\tconst resp = await this.bridgeInstance\n\t\t\t.getIntent()\n\t\t\t.matrixClient.doRequest('POST', '/_matrix/client/v3/account/deactivate', { user_id: uid }, { erase: false });\n\t\tif (resp.id_server_unbind_result !== 'success') {\n\t\t\tthrow new Error('Failed to deactivate matrix user');\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/matrix/Bridge.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/infrastructure/matrix/Bridge.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/matrix/Bridge.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/matrix/Bridge.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport type { AppServiceOutput, Bridge } from '@rocket.chat/forked-matrix-appservice-bridge';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\n\nimport type { IExternalUserProfileInformation, IFederationBridge, IFederationBridgeRegistrationFile } from '../../domain/IFederationBridge';\nimport type { RocketChatSettingsAdapter } from '../rocket-chat/adapters/Settings';\nimport { federationBridgeLogger } from '../rocket-chat/adapters/logger';\nimport { convertEmojisFromRCFormatToMatrixFormat } from './converters/room/MessageReceiver';\nimport { formatExternalUserIdToInternalUsernameFormat } from './converters/room/RoomReceiver';\nimport { toExternalMessageFormat, toExternalQuoteMessageFormat } from './converters/room/to-internal-parser-formatter';\nimport type { AbstractMatrixEvent } from './definitions/AbstractMatrixEvent';\nimport { MatrixEventType } from './definitions/MatrixEventType';\nimport { MatrixRoomType } from './definitions/MatrixRoomType';\nimport { MatrixRoomVisibility } from './definitions/MatrixRoomVisibility';\nimport { RoomMembershipChangedEventType } from './definitions/events/RoomMembershipChanged';\nimport { MatrixEnumRelatesToRelType, MatrixEnumSendMessageType } from './definitions/events/RoomMessageSent';\nimport type { MatrixEventRoomNameChanged } from './definitions/events/RoomNameChanged';\nimport type { MatrixEventRoomTopicChanged } from './definitions/events/RoomTopicChanged';\nimport { HttpStatusCodes } from './helpers/HtttpStatusCodes';\nimport { extractUserIdAndHomeserverFromMatrixId } from './helpers/MatrixIdStringTools';\nimport { VerificationStatus, MATRIX_USER_IN_USE } from './helpers/MatrixIdVerificationTypes';\n\nlet MatrixUserInstance: any;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS = 180000;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT = 60 * 1000;\n\nexport class MatrixBridge implements IFederationBridge {\n\tprotected bridgeInstance: Bridge;\n\n\tprotected isRunning = false;\n\n\tprotected isUpdatingBridgeStatus = false;\n\n\tconstructor(protected internalSettings: RocketChatSettingsAdapter, protected eventHandler: (event: AbstractMatrixEvent) => void) {} // eslint-disable-line no-empty-function\n\n\tpublic async start(): Promise<void> {\n\t\tif (this.isUpdatingBridgeStatus) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isUpdatingBridgeStatus = true;\n\t\ttry {\n\t\t\tawait this.stop();\n\t\t\tawait this.createInstance();\n\n\t\t\tif (!this.isRunning) {\n\t\t\t\tawait this.bridgeInstance.run(this.internalSettings.getBridgePort());\n\n\t\t\t\tthis.bridgeInstance.addAppServicePath({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tpath: '/_matrix/app/v1/ping',\n\t\t\t\t\tcheckToken: true,\n\t\t\t\t\thandler: (_req, res, _next) => {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * https://spec.matrix.org/v1.11/application-service-api/#post_matrixappv1ping\n\t\t\t\t\t\t * Spec does not talk about what to do with the id. It is safe to ignore it as we are already checking for\n\t\t\t\t\t\t * homeserver token to be correct.\n\t\t\t\t\t\t * From the spec this might be a bit confusing, as it shows a txn id for post, but app service doing nothing with it afterwards\n\t\t\t\t\t\t * when receiving from the homeserver.\n\t\t\t\t\t\t * From spec directly -\n\t\t\t\t\t\t\tAS ---> HS : /_matrix/client/v1/appservice/{appserviceId}/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS ---> AS : /_matrix/app/v1/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS <--- AS : 200 OK {}\n\t\t\t\t\t\t\tAS <--- HS : 200 OK {\"duration_ms\": 123}\n\t\t\t\t\t\t * https://github.com/matrix-org/matrix-spec/blob/e53e6ea8764b95f0bdb738549fca6f9f3f901298/content/application-service-api.md?plain=1#L229-L232\n\t\t\t\t\t\t * Code - wise, also doesn't care what happens with the response.\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/rest/client/appservice_ping.py#L80 - nothing done on return\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/appservice/api.py#L321-L332 - not even returning the response, caring for just the http status code - https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/http/client.py#L532-L537\n\t\t\t\t\t\t */\n\t\t\t\t\t\tres.status(200).json({});\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.isRunning = true;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Failed to initialize the matrix-appservice-bridge.', err });\n\t\t} finally {\n\t\t\tthis.isUpdatingBridgeStatus = false;\n\t\t}\n\t}\n\n\tpublic async stop(): Promise<void> {\n\t\tif (!this.isRunning) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (resolve: () => void): Promise<void> => {\n\t\t\t// the http server might take some minutes to shutdown, and this promise can take some time to be resolved\n\t\t\tawait this.bridgeInstance?.close();\n\t\t\tthis.isRunning = false;\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic async getUserProfileInformation(externalUserId: string): Promise<IExternalUserProfileInformation | undefined> {\n\t\ttry {\n\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\n\t\t\treturn {\n\t\t\t\tdisplayName: externalInformation.displayname || '',\n\t\t\t\t...(externalInformation.avatar_url\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tavatarUrl: externalInformation.avatar_url,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t};\n\t\t} catch (err) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async joinRoom(externalRoomId: string, externalUserId: string, viaServers?: string[]): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance\n\t\t\t\t.getIntent(externalUserId)\n\t\t\t\t.matrixClient.doRequest(\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/_matrix/client/v3/join/${externalRoomId}`,\n\t\t\t\t\t{ server_name: viaServers },\n\t\t\t\t\t{},\n\t\t\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS,\n\t\t\t\t);\n\t\t} catch (e) {\n\t\t\tthrow new Error('Error joining Matrix room');\n\t\t}\n\t}\n\n\tpublic async getRoomHistoricalJoinEvents(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texcludingUserIds: string[] = [],\n\t): Promise<any[]> {\n\t\tconst events = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getRoomState(externalRoomId);\n\t\tconst roomCreator = events.find((event) => event.type === MatrixEventType.ROOM_CREATED)?.content?.creator;\n\t\tif (!roomCreator) {\n\t\t\treturn [];\n\t\t}\n\t\treturn events\n\t\t\t.filter(\n\t\t\t\t(event) =>\n\t\t\t\t\tevent.type === MatrixEventType.ROOM_MEMBERSHIP_CHANGED &&\n\t\t\t\t\tevent.content.membership === RoomMembershipChangedEventType.JOIN &&\n\t\t\t\t\t!excludingUserIds.includes(event.state_key),\n\t\t\t)\n\t\t\t.map((event) => ({\n\t\t\t\t...event,\n\t\t\t\tsender: roomCreator,\n\t\t\t}));\n\t}\n\n\tpublic async getRoomData(\n\t\texternalUserId: string,\n\t\texternalRoomId: string,\n\t): Promise<{ creator: { id: string; username: string }; name: string; joinedMembers: string[] } | undefined> {\n\t\tconst includeEvents = ['join'];\n\t\tconst excludeEvents = ['leave', 'ban'];\n\t\tconst members = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.getRoomMembers(externalRoomId, undefined, includeEvents as any[], excludeEvents as any[]);\n\n\t\tconst joinedMembers = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getJoinedRoomMembers(externalRoomId);\n\n\t\tconst oldestFirst = members.sort((a, b) => a.timestamp - b.timestamp).shift();\n\t\tif (!oldestFirst) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst roomName = await this.getRoomName(externalRoomId, externalUserId);\n\t\tif (!roomName) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tcreator: {\n\t\t\t\tid: oldestFirst.sender,\n\t\t\t\tusername: formatExternalUserIdToInternalUsernameFormat(oldestFirst.sender),\n\t\t\t},\n\t\t\tjoinedMembers,\n\t\t\tname: roomName,\n\t\t};\n\t}\n\n\tpublic async inviteToRoom(externalRoomId: string, externalInviterId: string, externalInviteeId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalInviterId).invite(externalRoomId, externalInviteeId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setUserAvatar(externalUserId: string, avatarUrl: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.setAvatarUrl(avatarUrl);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async verifyInviteeIds(matrixIds: string[]): Promise<Map<string, string>> {\n\t\tconst matrixIdVerificationMap = new Map();\n\t\tconst matrixIdsVerificationPromises = matrixIds.map((matrixId) => this.verifyInviteeId(matrixId));\n\t\tconst matrixIdsVerificationPromiseResponse = await Promise.allSettled(matrixIdsVerificationPromises);\n\t\tconst matrixIdsVerificationFulfilledResults = matrixIdsVerificationPromiseResponse\n\t\t\t.filter((result): result is PromiseFulfilledResult<VerificationStatus> => result.status === 'fulfilled')\n\t\t\t.map((result) => result.value);\n\n\t\tmatrixIds.forEach((matrixId, idx) => matrixIdVerificationMap.set(matrixId, matrixIdsVerificationFulfilledResults[idx]));\n\t\treturn matrixIdVerificationMap;\n\t}\n\n\tprivate async verifyInviteeId(externalInviteeId: string): Promise<VerificationStatus> {\n\t\tconst [userId, homeserverUrl] = extractUserIdAndHomeserverFromMatrixId(externalInviteeId);\n\t\ttry {\n\t\t\tconst response = await fetch(`https://${homeserverUrl}/_matrix/client/v3/register/available`, { params: { username: userId } });\n\n\t\t\tif (response.status === HttpStatusCodes.BAD_REQUEST) {\n\t\t\t\tconst responseBody = await response.json();\n\n\t\t\t\tif (responseBody.errcode === MATRIX_USER_IN_USE) {\n\t\t\t\t\treturn VerificationStatus.VERIFIED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.status === HttpStatusCodes.OK) {\n\t\t\t\treturn VerificationStatus.UNVERIFIED;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t\t}\n\n\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t}\n\n\tpublic async createUser(username: string, name: string, domain: string, avatarUrl?: string): Promise<string> {\n\t\tif (!MatrixUserInstance) {\n\t\t\tthrow new Error('Error loading the Matrix User instance from the external library');\n\t\t}\n\t\tconst matrixUserId = `@${username?.toLowerCase()}:${domain}`;\n\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tawait this.bridgeInstance.provisionUser(newUser, { name, ...(avatarUrl ? { url: avatarUrl } : {}) });\n\n\t\treturn matrixUserId;\n\t}\n\n\tpublic async setUserDisplayName(externalUserId: string, displayName: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).setDisplayName(displayName);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async createDirectMessageRoom(\n\t\texternalCreatorId: string,\n\t\tinviteesExternalIds: string[],\n\t\textraData: Record<string, any> = {},\n\t): Promise<string> {\n\t\tconst intent = this.bridgeInstance.getIntent(externalCreatorId);\n\n\t\tconst visibility = MatrixRoomVisibility.PRIVATE;\n\t\tconst preset = MatrixRoomType.PRIVATE;\n\n\t\tconst matrixRoom = await intent.createRoom({\n\t\t\tcreateAsClient: true,\n\t\t\toptions: {\n\t\t\t\tvisibility,\n\t\t\t\tpreset,\n\t\t\t\tis_direct: true,\n\t\t\t\tinvite: inviteesExternalIds,\n\t\t\t\tcreation_content: {\n\t\t\t\t\twas_internally_programatically_created: true,\n\t\t\t\t\t...extraData,\n\t\t\t\t\tinviteesExternalIds,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\treturn matrixRoom.room_id;\n\t}\n\n\tpublic async sendMessage(externalRoomId: string, externalSenderId: string, message: IMessage): Promise<string> {\n\t\ttry {\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\tmsgtype: 'm.text',\n\t\t\t\t\tbody: this.escapeEmojis(message.msg),\n\t\t\t\t\tformatted_body: this.escapeEmojis(\n\t\t\t\t\t\tawait toExternalMessageFormat({\n\t\t\t\t\t\t\tmessage: message.msg,\n\t\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e) {\n\t\t\tthrow new Error('User is not part of the room.');\n\t\t}\n\t}\n\n\tpublic async sendThreadMessage(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tmessage: IMessage,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst text = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: message.msg,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalSenderId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': this.escapeEmojis(message.msg),\n\t\t\t\t'formatted_body': text,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\treturn messageId;\n\t}\n\n\tpublic async sendThreadReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tpublic async sendMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tprivate escapeEmojis(text: string): string {\n\t\treturn convertEmojisFromRCFormatToMatrixFormat(text);\n\t}\n\n\tpublic async getReadStreamForFileFromUrl(externalUserId: string, fileUrl: string): Promise<ReadableStream> {\n\t\tconst response = await fetch(this.convertMatrixUrlToHttp(externalUserId, fileUrl));\n\t\tif (!response.body) {\n\t\t\tthrow new Error('Not able to download the file');\n\t\t}\n\n\t\treturn response.body as unknown as ReadableStream;\n\t}\n\n\tpublic isUserIdFromTheSameHomeserver(externalUserId: string, domain: string): boolean {\n\t\tconst userDomain = this.extractHomeserverOrigin(externalUserId);\n\n\t\treturn userDomain === domain;\n\t}\n\n\tpublic extractHomeserverOrigin(externalUserId: string): string {\n\t\treturn externalUserId.includes(':') ? externalUserId.split(':').pop() || '' : this.internalSettings.getHomeServerDomain();\n\t}\n\n\tpublic isRoomFromTheSameHomeserver(externalRoomId: string, domain: string): boolean {\n\t\treturn this.isUserIdFromTheSameHomeserver(externalRoomId, domain);\n\t}\n\n\tpublic logFederationStartupInfo(info?: string): void {\n\t\tfederationBridgeLogger.info(`${info}:\n\t\t\tid: ${this.internalSettings.getApplicationServiceId()}\n\t\t\tbridgeUrl: ${this.internalSettings.getBridgeUrl()}\n\t\t\thomeserverURL: ${this.internalSettings.getHomeServerUrl()}\n\t\t\thomeserverDomain: ${this.internalSettings.getHomeServerDomain()}\n\t\t`);\n\t}\n\n\tpublic async leaveRoom(externalRoomId: string, externalUserId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).leave(externalRoomId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async kickUserFromRoom(externalRoomId: string, externalUserId: string, externalOwnerId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).kick(externalRoomId, externalUserId);\n\t}\n\n\tpublic async setRoomPowerLevels(\n\t\texternalRoomId: string,\n\t\texternalOwnerId: string,\n\t\texternalUserId: string,\n\t\tpowerLevels: number,\n\t): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).setPowerLevel(externalRoomId, externalUserId, powerLevels);\n\t}\n\n\tpublic async redactEvent(externalRoomId: string, externalUserId: string, externalEventId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.redactEvent(externalRoomId, externalEventId);\n\t}\n\n\tpublic async notifyUserTyping(externalRoomId: string, externalUserId: string, isTyping: boolean): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).sendTyping(externalRoomId, isTyping);\n\t}\n\n\tpublic async sendMessageReaction(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\treaction: string,\n\t): Promise<string> {\n\t\tconst eventId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.MESSAGE_REACTED, {\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\tevent_id: externalEventId,\n\t\t\t\t\tkey: convertEmojisFromRCFormatToMatrixFormat(reaction),\n\t\t\t\t\trel_type: 'm.annotation',\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn eventId;\n\t}\n\n\tpublic async updateMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\tnewMessageText: string,\n\t): Promise<void> {\n\t\tconst messageInExternalFormat = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: newMessageText,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t'body': ` * ${this.escapeEmojis(newMessageText)}`,\n\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t'formatted_body': messageInExternalFormat,\n\t\t\t'm.new_content': {\n\t\t\t\tbody: this.escapeEmojis(newMessageText),\n\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\tformatted_body: messageInExternalFormat,\n\t\t\t\tmsgtype: MatrixEnumSendMessageType.TEXT,\n\t\t\t},\n\t\t\t'm.relates_to': {\n\t\t\t\trel_type: MatrixEnumRelatesToRelType.REPLACE,\n\t\t\t\tevent_id: externalEventId,\n\t\t\t},\n\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t});\n\t}\n\n\tpublic async sendMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\tbody: fileDetails.filename,\n\t\t\t\tfilename: fileDetails.filename,\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\tmsgtype: this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\turl: mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t'info': {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t'url': mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate getMsgTypeBasedOnMimeType(mimeType: string): MatrixEnumSendMessageType {\n\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\n\t\tif (knownImageMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.IMAGE;\n\t\t}\n\t\tif (knownAudioMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.AUDIO;\n\t\t}\n\t\tif (knownVideoMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.VIDEO;\n\t\t}\n\t\treturn MatrixEnumSendMessageType.FILE;\n\t}\n\n\tprivate getMyHomeServerOrigin() {\n\t\treturn new URL(`https://${this.internalSettings.getHomeServerDomain()}`).hostname;\n\t}\n\n\tpublic async uploadContent(\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\toptions?: { name?: string; type?: string },\n\t): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\n\t\t\treturn mxcUrl;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error uploading content to Matrix', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async getRoomName(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_NAME_CHANGED) as MatrixEventRoomNameChanged)?.content\n\t\t\t\t?.name;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async getRoomTopic(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_TOPIC_CHANGED) as MatrixEventRoomTopicChanged)?.content\n\t\t\t\t?.topic;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setRoomName(externalRoomId: string, externalUserId: string, roomName: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomName(externalRoomId, roomName);\n\t}\n\n\tpublic async setRoomTopic(externalRoomId: string, externalUserId: string, roomTopic: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomTopic(externalRoomId, roomTopic);\n\t}\n\n\tpublic convertMatrixUrlToHttp(externalUserId: string, matrixUrl: string): string {\n\t\treturn this.bridgeInstance.getIntent(externalUserId).matrixClient.mxcToHttp(matrixUrl);\n\t}\n\n\tprotected async createInstance(): Promise<void> {\n\t\tfederationBridgeLogger.info('Performing Dynamic Import of matrix-appservice-bridge');\n\n\t\t// Dynamic import to prevent Rocket.Chat from loading the module until needed and then handle if that fails\n\t\tconst { Bridge, AppServiceRegistration, MatrixUser } = await import('@rocket.chat/forked-matrix-appservice-bridge');\n\t\tMatrixUserInstance = MatrixUser;\n\t\tconst registrationFile = this.internalSettings.getAppServiceRegistrationObject();\n\n\t\tthis.bridgeInstance = new Bridge({\n\t\t\thomeserverUrl: this.internalSettings.getHomeServerUrl(),\n\t\t\tdomain: this.internalSettings.getHomeServerDomain(),\n\t\t\tregistration: AppServiceRegistration.fromObject(this.convertRegistrationFileToMatrixFormat(registrationFile)),\n\t\t\tdisableStores: true,\n\t\t\tcontroller: {\n\t\t\t\tonEvent: (request) => {\n\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\n\t\t\t\t\t// TODO: can we ignore all events from out homeserver?\n\t\t\t\t\t// This was added particularly to avoid duplicating messages.\n\t\t\t\t\t// Messages sent from rocket.chat also causes a m.room.message event, which if gets to this bridge\n\t\t\t\t\t// before the event id promise is resolved, the respective message does not get event id attached to them any longer,\n\t\t\t\t\t// thus this event handler \"resends\" the message to the rocket.chat room (not to matrix though).\n\t\t\t\t\tif (event.type === 'm.room.message' && this.extractHomeserverOrigin(event.sender) === this.getMyHomeServerOrigin()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t},\n\t\t\t\tonLog: (line, isError) => {\n\t\t\t\t\tconsole.log(line, isError);\n\t\t\t\t},\n\t\t\t\t...(this.internalSettings.getAppServiceRegistrationObject().enableEphemeralEvents\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tonEphemeralEvent: (request) => {\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate convertRegistrationFileToMatrixFormat(registrationFile: IFederationBridgeRegistrationFile): AppServiceOutput {\n\t\treturn {\n\t\t\t'id': registrationFile.id,\n\t\t\t'hs_token': registrationFile.homeserverToken,\n\t\t\t'as_token': registrationFile.applicationServiceToken,\n\t\t\t'url': registrationFile.bridgeUrl,\n\t\t\t'sender_localpart': registrationFile.botName,\n\t\t\t'namespaces': registrationFile.listenTo,\n\t\t\t'de.sorunome.msc2409.push_ephemeral': registrationFile.enableEphemeralEvents,\n\t\t};\n\t}\n\n\tpublic async ping(): Promise<{ durationMs: number }> {\n\t\tif (!this.isRunning || !this.bridgeInstance) {\n\t\t\tthrow new Error(\"matrix bridge isn't yet running\");\n\t\t}\n\n\t\tconst { duration_ms: durationMs } = await this.bridgeInstance.getIntent().matrixClient.doRequest(\n\t\t\t'POST',\n\t\t\t`/_matrix/client/v1/appservice/${this.internalSettings.getApplicationServiceId()}/ping`,\n\t\t\t{},\n\t\t\t/*\n\t\t\t * Empty txn id as it is optional, neither does the spec says exactly what to do with it.\n\t\t\t * https://github.com/matrix-org/matrix-spec/blob/1fc8f8856fe47849f90344cfa91601c984627acb/data/api/client-server/appservice_ping.yaml#L55-L56\n\t\t\t */\n\t\t\t{},\n\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT,\n\t\t);\n\n\t\treturn { durationMs };\n\t}\n\n\tpublic async deactivateUser(uid: string): Promise<void> {\n\t\t/*\n\t\t * https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3accountdeactivate\n\t\t * Using { erase: false } since rocket.chat side on deactivation we do not delete anything.\n\t\t */\n\t\tconst resp = await this.bridgeInstance\n\t\t\t.getIntent()\n\t\t\t.matrixClient.doRequest('POST', '/_matrix/client/v3/account/deactivate', { user_id: uid }, { erase: false });\n\t\tif (resp.id_server_unbind_result !== 'success') {\n\t\t\tthrow new Error('Failed to deactivate matrix user');\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module1.export({\n      MatrixBridge: () => MatrixBridge\n    });\n    let fetch;\n    module1.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    let federationBridgeLogger;\n    module1.link(\"../rocket-chat/adapters/logger\", {\n      federationBridgeLogger(v) {\n        federationBridgeLogger = v;\n      }\n    }, 1);\n    let convertEmojisFromRCFormatToMatrixFormat;\n    module1.link(\"./converters/room/MessageReceiver\", {\n      convertEmojisFromRCFormatToMatrixFormat(v) {\n        convertEmojisFromRCFormatToMatrixFormat = v;\n      }\n    }, 2);\n    let formatExternalUserIdToInternalUsernameFormat;\n    module1.link(\"./converters/room/RoomReceiver\", {\n      formatExternalUserIdToInternalUsernameFormat(v) {\n        formatExternalUserIdToInternalUsernameFormat = v;\n      }\n    }, 3);\n    let toExternalMessageFormat, toExternalQuoteMessageFormat;\n    module1.link(\"./converters/room/to-internal-parser-formatter\", {\n      toExternalMessageFormat(v) {\n        toExternalMessageFormat = v;\n      },\n      toExternalQuoteMessageFormat(v) {\n        toExternalQuoteMessageFormat = v;\n      }\n    }, 4);\n    let MatrixEventType;\n    module1.link(\"./definitions/MatrixEventType\", {\n      MatrixEventType(v) {\n        MatrixEventType = v;\n      }\n    }, 5);\n    let MatrixRoomType;\n    module1.link(\"./definitions/MatrixRoomType\", {\n      MatrixRoomType(v) {\n        MatrixRoomType = v;\n      }\n    }, 6);\n    let MatrixRoomVisibility;\n    module1.link(\"./definitions/MatrixRoomVisibility\", {\n      MatrixRoomVisibility(v) {\n        MatrixRoomVisibility = v;\n      }\n    }, 7);\n    let RoomMembershipChangedEventType;\n    module1.link(\"./definitions/events/RoomMembershipChanged\", {\n      RoomMembershipChangedEventType(v) {\n        RoomMembershipChangedEventType = v;\n      }\n    }, 8);\n    let MatrixEnumRelatesToRelType, MatrixEnumSendMessageType;\n    module1.link(\"./definitions/events/RoomMessageSent\", {\n      MatrixEnumRelatesToRelType(v) {\n        MatrixEnumRelatesToRelType = v;\n      },\n      MatrixEnumSendMessageType(v) {\n        MatrixEnumSendMessageType = v;\n      }\n    }, 9);\n    let HttpStatusCodes;\n    module1.link(\"./helpers/HtttpStatusCodes\", {\n      HttpStatusCodes(v) {\n        HttpStatusCodes = v;\n      }\n    }, 10);\n    let extractUserIdAndHomeserverFromMatrixId;\n    module1.link(\"./helpers/MatrixIdStringTools\", {\n      extractUserIdAndHomeserverFromMatrixId(v) {\n        extractUserIdAndHomeserverFromMatrixId = v;\n      }\n    }, 11);\n    let VerificationStatus, MATRIX_USER_IN_USE;\n    module1.link(\"./helpers/MatrixIdVerificationTypes\", {\n      VerificationStatus(v) {\n        VerificationStatus = v;\n      },\n      MATRIX_USER_IN_USE(v) {\n        MATRIX_USER_IN_USE = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    let MatrixUserInstance;\n    const DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS = 180000;\n    const DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT = 60 * 1000;\n    class MatrixBridge {\n      constructor(internalSettings, eventHandler) {\n        this.internalSettings = void 0;\n        this.eventHandler = void 0;\n        this.bridgeInstance = void 0;\n        this.isRunning = false;\n        this.isUpdatingBridgeStatus = false;\n        this.internalSettings = internalSettings;\n        this.eventHandler = eventHandler;\n      } // eslint-disable-line no-empty-function\n      async start() {\n        if (this.isUpdatingBridgeStatus) {\n          return;\n        }\n        this.isUpdatingBridgeStatus = true;\n        try {\n          await this.stop();\n          await this.createInstance();\n          if (!this.isRunning) {\n            await this.bridgeInstance.run(this.internalSettings.getBridgePort());\n            this.bridgeInstance.addAppServicePath({\n              method: 'POST',\n              path: '/_matrix/app/v1/ping',\n              checkToken: true,\n              handler: (_req, res, _next) => {\n                /*\n                 * https://spec.matrix.org/v1.11/application-service-api/#post_matrixappv1ping\n                 * Spec does not talk about what to do with the id. It is safe to ignore it as we are already checking for\n                 * homeserver token to be correct.\n                 * From the spec this might be a bit confusing, as it shows a txn id for post, but app service doing nothing with it afterwards\n                 * when receiving from the homeserver.\n                 * From spec directly -\n                    AS ---> HS : /_matrix/client/v1/appservice/{appserviceId}/ping {\"transaction_id\": \"meow\"}\n                        HS ---> AS : /_matrix/app/v1/ping {\"transaction_id\": \"meow\"}\n                        HS <--- AS : 200 OK {}\n                    AS <--- HS : 200 OK {\"duration_ms\": 123}\n                 * https://github.com/matrix-org/matrix-spec/blob/e53e6ea8764b95f0bdb738549fca6f9f3f901298/content/application-service-api.md?plain=1#L229-L232\n                 * Code - wise, also doesn't care what happens with the response.\n                 * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/rest/client/appservice_ping.py#L80 - nothing done on return\n                 * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/appservice/api.py#L321-L332 - not even returning the response, caring for just the http status code - https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/http/client.py#L532-L537\n                 */\n                res.status(200).json({});\n              }\n            });\n            this.isRunning = true;\n          }\n        } catch (err) {\n          federationBridgeLogger.error({\n            msg: 'Failed to initialize the matrix-appservice-bridge.',\n            err\n          });\n        } finally {\n          this.isUpdatingBridgeStatus = false;\n        }\n      }\n      async stop() {\n        if (!this.isRunning) {\n          return;\n        }\n        return new Promise(async resolve => {\n          var _this$bridgeInstance;\n          // the http server might take some minutes to shutdown, and this promise can take some time to be resolved\n          await ((_this$bridgeInstance = this.bridgeInstance) === null || _this$bridgeInstance === void 0 ? void 0 : _this$bridgeInstance.close());\n          this.isRunning = false;\n          resolve();\n        });\n      }\n      async getUserProfileInformation(externalUserId) {\n        try {\n          const externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n          return _objectSpread({\n            displayName: externalInformation.displayname || ''\n          }, externalInformation.avatar_url ? {\n            avatarUrl: externalInformation.avatar_url\n          } : {});\n        } catch (err) {\n          // no-op\n        }\n      }\n      async joinRoom(externalRoomId, externalUserId, viaServers) {\n        try {\n          await this.bridgeInstance.getIntent(externalUserId).matrixClient.doRequest('POST', \"/_matrix/client/v3/join/\".concat(externalRoomId), {\n            server_name: viaServers\n          }, {}, DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS);\n        } catch (e) {\n          throw new Error('Error joining Matrix room');\n        }\n      }\n      async getRoomHistoricalJoinEvents(externalRoomId, externalUserId) {\n        var _events$find, _events$find$content;\n        let excludingUserIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        const events = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getRoomState(externalRoomId);\n        const roomCreator = (_events$find = events.find(event => event.type === MatrixEventType.ROOM_CREATED)) === null || _events$find === void 0 ? void 0 : (_events$find$content = _events$find.content) === null || _events$find$content === void 0 ? void 0 : _events$find$content.creator;\n        if (!roomCreator) {\n          return [];\n        }\n        return events.filter(event => event.type === MatrixEventType.ROOM_MEMBERSHIP_CHANGED && event.content.membership === RoomMembershipChangedEventType.JOIN && !excludingUserIds.includes(event.state_key)).map(event => _objectSpread(_objectSpread({}, event), {}, {\n          sender: roomCreator\n        }));\n      }\n      async getRoomData(externalUserId, externalRoomId) {\n        const includeEvents = ['join'];\n        const excludeEvents = ['leave', 'ban'];\n        const members = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getRoomMembers(externalRoomId, undefined, includeEvents, excludeEvents);\n        const joinedMembers = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getJoinedRoomMembers(externalRoomId);\n        const oldestFirst = members.sort((a, b) => a.timestamp - b.timestamp).shift();\n        if (!oldestFirst) {\n          return;\n        }\n        const roomName = await this.getRoomName(externalRoomId, externalUserId);\n        if (!roomName) {\n          return;\n        }\n        return {\n          creator: {\n            id: oldestFirst.sender,\n            username: formatExternalUserIdToInternalUsernameFormat(oldestFirst.sender)\n          },\n          joinedMembers,\n          name: roomName\n        };\n      }\n      async inviteToRoom(externalRoomId, externalInviterId, externalInviteeId) {\n        try {\n          await this.bridgeInstance.getIntent(externalInviterId).invite(externalRoomId, externalInviteeId);\n        } catch (e) {\n          // no-op\n        }\n      }\n      async setUserAvatar(externalUserId, avatarUrl) {\n        try {\n          await this.bridgeInstance.getIntent(externalUserId).matrixClient.setAvatarUrl(avatarUrl);\n        } catch (e) {\n          // no-op\n        }\n      }\n      async verifyInviteeIds(matrixIds) {\n        const matrixIdVerificationMap = new Map();\n        const matrixIdsVerificationPromises = matrixIds.map(matrixId => this.verifyInviteeId(matrixId));\n        const matrixIdsVerificationPromiseResponse = await Promise.allSettled(matrixIdsVerificationPromises);\n        const matrixIdsVerificationFulfilledResults = matrixIdsVerificationPromiseResponse.filter(result => result.status === 'fulfilled').map(result => result.value);\n        matrixIds.forEach((matrixId, idx) => matrixIdVerificationMap.set(matrixId, matrixIdsVerificationFulfilledResults[idx]));\n        return matrixIdVerificationMap;\n      }\n      async verifyInviteeId(externalInviteeId) {\n        const [userId, homeserverUrl] = extractUserIdAndHomeserverFromMatrixId(externalInviteeId);\n        try {\n          const response = await fetch(\"https://\".concat(homeserverUrl, \"/_matrix/client/v3/register/available\"), {\n            params: {\n              username: userId\n            }\n          });\n          if (response.status === HttpStatusCodes.BAD_REQUEST) {\n            const responseBody = await response.json();\n            if (responseBody.errcode === MATRIX_USER_IN_USE) {\n              return VerificationStatus.VERIFIED;\n            }\n          }\n          if (response.status === HttpStatusCodes.OK) {\n            return VerificationStatus.UNVERIFIED;\n          }\n        } catch (e) {\n          return VerificationStatus.UNABLE_TO_VERIFY;\n        }\n        return VerificationStatus.UNABLE_TO_VERIFY;\n      }\n      async createUser(username, name, domain, avatarUrl) {\n        if (!MatrixUserInstance) {\n          throw new Error('Error loading the Matrix User instance from the external library');\n        }\n        const matrixUserId = \"@\".concat(username === null || username === void 0 ? void 0 : username.toLowerCase(), \":\").concat(domain);\n        const newUser = new MatrixUserInstance(matrixUserId);\n        await this.bridgeInstance.provisionUser(newUser, _objectSpread({\n          name\n        }, avatarUrl ? {\n          url: avatarUrl\n        } : {}));\n        return matrixUserId;\n      }\n      async setUserDisplayName(externalUserId, displayName) {\n        try {\n          await this.bridgeInstance.getIntent(externalUserId).setDisplayName(displayName);\n        } catch (e) {\n          // no-op\n        }\n      }\n      async createDirectMessageRoom(externalCreatorId, inviteesExternalIds) {\n        let extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const intent = this.bridgeInstance.getIntent(externalCreatorId);\n        const visibility = MatrixRoomVisibility.PRIVATE;\n        const preset = MatrixRoomType.PRIVATE;\n        const matrixRoom = await intent.createRoom({\n          createAsClient: true,\n          options: {\n            visibility,\n            preset,\n            is_direct: true,\n            invite: inviteesExternalIds,\n            creation_content: _objectSpread(_objectSpread({\n              was_internally_programatically_created: true\n            }, extraData), {}, {\n              inviteesExternalIds\n            })\n          }\n        });\n        return matrixRoom.room_id;\n      }\n      async sendMessage(externalRoomId, externalSenderId, message) {\n        try {\n          const messageId = await this.bridgeInstance.getIntent(externalSenderId).matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n            msgtype: 'm.text',\n            body: this.escapeEmojis(message.msg),\n            formatted_body: this.escapeEmojis(await toExternalMessageFormat({\n              message: message.msg,\n              externalRoomId,\n              homeServerDomain: this.internalSettings.getHomeServerDomain()\n            })),\n            format: 'org.matrix.custom.html'\n          });\n          return messageId;\n        } catch (e) {\n          throw new Error('User is not part of the room.');\n        }\n      }\n      async sendThreadMessage(externalRoomId, externalSenderId, message, relatesToEventId) {\n        const text = this.escapeEmojis(await toExternalMessageFormat({\n          message: message.msg,\n          externalRoomId,\n          homeServerDomain: this.internalSettings.getHomeServerDomain()\n        }));\n        const messageId = await this.bridgeInstance.getIntent(externalSenderId).matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n          'msgtype': 'm.text',\n          'body': this.escapeEmojis(message.msg),\n          'formatted_body': text,\n          'format': 'org.matrix.custom.html',\n          'm.relates_to': {\n            'rel_type': 'm.thread',\n            'event_id': relatesToEventId,\n            'is_falling_back': true,\n            'm.in_reply_to': {\n              event_id: relatesToEventId\n            }\n          }\n        });\n        return messageId;\n      }\n      async sendThreadReplyToMessage(externalRoomId, externalUserId, eventToReplyTo, originalEventSender, replyMessage, relatesToEventId) {\n        const {\n          formattedMessage,\n          message\n        } = await toExternalQuoteMessageFormat({\n          externalRoomId,\n          eventToReplyTo,\n          originalEventSender,\n          message: this.escapeEmojis(replyMessage),\n          homeServerDomain: this.internalSettings.getHomeServerDomain()\n        });\n        const messageId = await this.bridgeInstance.getIntent(externalUserId).matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n          'msgtype': 'm.text',\n          'body': message,\n          'format': 'org.matrix.custom.html',\n          'formatted_body': formattedMessage,\n          'm.relates_to': {\n            'rel_type': 'm.thread',\n            'event_id': relatesToEventId,\n            'is_falling_back': false,\n            'm.in_reply_to': {\n              event_id: eventToReplyTo\n            }\n          }\n        });\n        return messageId;\n      }\n      async sendMessageFileToThread(externalRoomId, externalSenderId, content, fileDetails, relatesToEventId) {\n        try {\n          var _fileDetails$metadata, _fileDetails$metadata2, _fileDetails$metadata3, _fileDetails$metadata4;\n          const mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n          const messageId = await this.bridgeInstance.getIntent(externalSenderId).matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n            'body': fileDetails.filename,\n            'filename': fileDetails.filename,\n            'info': _objectSpread({\n              size: fileDetails.fileSize,\n              mimetype: fileDetails.mimeType\n            }, (_fileDetails$metadata = fileDetails.metadata) !== null && _fileDetails$metadata !== void 0 && _fileDetails$metadata.height && (_fileDetails$metadata2 = fileDetails.metadata) !== null && _fileDetails$metadata2 !== void 0 && _fileDetails$metadata2.width ? {\n              h: (_fileDetails$metadata3 = fileDetails.metadata) === null || _fileDetails$metadata3 === void 0 ? void 0 : _fileDetails$metadata3.height,\n              w: (_fileDetails$metadata4 = fileDetails.metadata) === null || _fileDetails$metadata4 === void 0 ? void 0 : _fileDetails$metadata4.width\n            } : {}),\n            'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n            'url': mxcUrl,\n            'm.relates_to': {\n              'rel_type': 'm.thread',\n              'event_id': relatesToEventId,\n              'is_falling_back': true,\n              'm.in_reply_to': {\n                event_id: relatesToEventId\n              }\n            }\n          });\n          return messageId;\n        } catch (e) {\n          var _e$body, _e$body2;\n          federationBridgeLogger.error({\n            msg: 'Error sending file to thread',\n            err: e\n          });\n          if ((_e$body = e.body) !== null && _e$body !== void 0 && _e$body.includes('413') || (_e$body2 = e.body) !== null && _e$body2 !== void 0 && _e$body2.includes('M_TOO_LARGE')) {\n            throw new Error('File is too large');\n          }\n          return '';\n        }\n      }\n      async sendReplyMessageFileToThread(externalRoomId, externalSenderId, content, fileDetails, eventToReplyTo, relatesToEventId) {\n        try {\n          var _fileDetails$metadata5, _fileDetails$metadata6, _fileDetails$metadata7, _fileDetails$metadata8;\n          const mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n          const messageId = await this.bridgeInstance.getIntent(externalSenderId).matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n            'body': fileDetails.filename,\n            'filename': fileDetails.filename,\n            'info': _objectSpread({\n              size: fileDetails.fileSize,\n              mimetype: fileDetails.mimeType\n            }, (_fileDetails$metadata5 = fileDetails.metadata) !== null && _fileDetails$metadata5 !== void 0 && _fileDetails$metadata5.height && (_fileDetails$metadata6 = fileDetails.metadata) !== null && _fileDetails$metadata6 !== void 0 && _fileDetails$metadata6.width ? {\n              h: (_fileDetails$metadata7 = fileDetails.metadata) === null || _fileDetails$metadata7 === void 0 ? void 0 : _fileDetails$metadata7.height,\n              w: (_fileDetails$metadata8 = fileDetails.metadata) === null || _fileDetails$metadata8 === void 0 ? void 0 : _fileDetails$metadata8.width\n            } : {}),\n            'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n            'url': mxcUrl,\n            'm.relates_to': {\n              'rel_type': 'm.thread',\n              'event_id': relatesToEventId,\n              'is_falling_back': false,\n              'm.in_reply_to': {\n                event_id: eventToReplyTo\n              }\n            }\n          });\n          return messageId;\n        } catch (e) {\n          var _e$body3, _e$body4;\n          federationBridgeLogger.error({\n            msg: 'Error sending file to thread',\n            err: e\n          });\n          if ((_e$body3 = e.body) !== null && _e$body3 !== void 0 && _e$body3.includes('413') || (_e$body4 = e.body) !== null && _e$body4 !== void 0 && _e$body4.includes('M_TOO_LARGE')) {\n            throw new Error('File is too large');\n          }\n          return '';\n        }\n      }\n      async sendReplyToMessage(externalRoomId, externalUserId, eventToReplyTo, originalEventSender, replyMessage) {\n        const {\n          formattedMessage,\n          message\n        } = await toExternalQuoteMessageFormat({\n          externalRoomId,\n          eventToReplyTo,\n          originalEventSender,\n          message: this.escapeEmojis(replyMessage),\n          homeServerDomain: this.internalSettings.getHomeServerDomain()\n        });\n        const messageId = await this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n          'body': message,\n          'format': 'org.matrix.custom.html',\n          'formatted_body': formattedMessage,\n          'm.relates_to': {\n            'm.in_reply_to': {\n              event_id: eventToReplyTo\n            }\n          },\n          'msgtype': MatrixEnumSendMessageType.TEXT\n        });\n        return messageId;\n      }\n      escapeEmojis(text) {\n        return convertEmojisFromRCFormatToMatrixFormat(text);\n      }\n      async getReadStreamForFileFromUrl(externalUserId, fileUrl) {\n        const response = await fetch(this.convertMatrixUrlToHttp(externalUserId, fileUrl));\n        if (!response.body) {\n          throw new Error('Not able to download the file');\n        }\n        return response.body;\n      }\n      isUserIdFromTheSameHomeserver(externalUserId, domain) {\n        const userDomain = this.extractHomeserverOrigin(externalUserId);\n        return userDomain === domain;\n      }\n      extractHomeserverOrigin(externalUserId) {\n        return externalUserId.includes(':') ? externalUserId.split(':').pop() || '' : this.internalSettings.getHomeServerDomain();\n      }\n      isRoomFromTheSameHomeserver(externalRoomId, domain) {\n        return this.isUserIdFromTheSameHomeserver(externalRoomId, domain);\n      }\n      logFederationStartupInfo(info) {\n        federationBridgeLogger.info(\"\".concat(info, \":\\n\\t\\t\\tid: \").concat(this.internalSettings.getApplicationServiceId(), \"\\n\\t\\t\\tbridgeUrl: \").concat(this.internalSettings.getBridgeUrl(), \"\\n\\t\\t\\thomeserverURL: \").concat(this.internalSettings.getHomeServerUrl(), \"\\n\\t\\t\\thomeserverDomain: \").concat(this.internalSettings.getHomeServerDomain(), \"\\n\\t\\t\"));\n      }\n      async leaveRoom(externalRoomId, externalUserId) {\n        try {\n          await this.bridgeInstance.getIntent(externalUserId).leave(externalRoomId);\n        } catch (e) {\n          // no-op\n        }\n      }\n      async kickUserFromRoom(externalRoomId, externalUserId, externalOwnerId) {\n        await this.bridgeInstance.getIntent(externalOwnerId).kick(externalRoomId, externalUserId);\n      }\n      async setRoomPowerLevels(externalRoomId, externalOwnerId, externalUserId, powerLevels) {\n        await this.bridgeInstance.getIntent(externalOwnerId).setPowerLevel(externalRoomId, externalUserId, powerLevels);\n      }\n      async redactEvent(externalRoomId, externalUserId, externalEventId) {\n        await this.bridgeInstance.getIntent(externalUserId).matrixClient.redactEvent(externalRoomId, externalEventId);\n      }\n      async notifyUserTyping(externalRoomId, externalUserId, isTyping) {\n        await this.bridgeInstance.getIntent(externalUserId).sendTyping(externalRoomId, isTyping);\n      }\n      async sendMessageReaction(externalRoomId, externalUserId, externalEventId, reaction) {\n        const eventId = await this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.MESSAGE_REACTED, {\n          'm.relates_to': {\n            event_id: externalEventId,\n            key: convertEmojisFromRCFormatToMatrixFormat(reaction),\n            rel_type: 'm.annotation'\n          }\n        });\n        return eventId;\n      }\n      async updateMessage(externalRoomId, externalUserId, externalEventId, newMessageText) {\n        const messageInExternalFormat = this.escapeEmojis(await toExternalMessageFormat({\n          message: newMessageText,\n          externalRoomId,\n          homeServerDomain: this.internalSettings.getHomeServerDomain()\n        }));\n        await this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n          'body': \" * \".concat(this.escapeEmojis(newMessageText)),\n          'format': 'org.matrix.custom.html',\n          'formatted_body': messageInExternalFormat,\n          'm.new_content': {\n            body: this.escapeEmojis(newMessageText),\n            format: 'org.matrix.custom.html',\n            formatted_body: messageInExternalFormat,\n            msgtype: MatrixEnumSendMessageType.TEXT\n          },\n          'm.relates_to': {\n            rel_type: MatrixEnumRelatesToRelType.REPLACE,\n            event_id: externalEventId\n          },\n          'msgtype': MatrixEnumSendMessageType.TEXT\n        });\n      }\n      async sendMessageFileToRoom(externalRoomId, externaSenderId, content, fileDetails) {\n        try {\n          var _fileDetails$metadata9, _fileDetails$metadata10, _fileDetails$metadata11, _fileDetails$metadata12;\n          const mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n          const {\n            event_id: messageId\n          } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n            body: fileDetails.filename,\n            filename: fileDetails.filename,\n            info: _objectSpread({\n              size: fileDetails.fileSize,\n              mimetype: fileDetails.mimeType\n            }, (_fileDetails$metadata9 = fileDetails.metadata) !== null && _fileDetails$metadata9 !== void 0 && _fileDetails$metadata9.height && (_fileDetails$metadata10 = fileDetails.metadata) !== null && _fileDetails$metadata10 !== void 0 && _fileDetails$metadata10.width ? {\n              h: (_fileDetails$metadata11 = fileDetails.metadata) === null || _fileDetails$metadata11 === void 0 ? void 0 : _fileDetails$metadata11.height,\n              w: (_fileDetails$metadata12 = fileDetails.metadata) === null || _fileDetails$metadata12 === void 0 ? void 0 : _fileDetails$metadata12.width\n            } : {}),\n            msgtype: this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n            url: mxcUrl\n          });\n          return messageId;\n        } catch (e) {\n          var _e$body5, _e$body6;\n          federationBridgeLogger.error({\n            msg: 'Error sending file to room',\n            err: e\n          });\n          if ((_e$body5 = e.body) !== null && _e$body5 !== void 0 && _e$body5.includes('413') || (_e$body6 = e.body) !== null && _e$body6 !== void 0 && _e$body6.includes('M_TOO_LARGE')) {\n            throw new Error('File is too large');\n          }\n          return '';\n        }\n      }\n      async sendReplyMessageFileToRoom(externalRoomId, externaSenderId, content, fileDetails, eventToReplyTo) {\n        try {\n          var _fileDetails$metadata13, _fileDetails$metadata14, _fileDetails$metadata15, _fileDetails$metadata16;\n          const mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n          const {\n            event_id: messageId\n          } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n            'body': fileDetails.filename,\n            'filename': fileDetails.filename,\n            'info': _objectSpread({\n              size: fileDetails.fileSize,\n              mimetype: fileDetails.mimeType\n            }, (_fileDetails$metadata13 = fileDetails.metadata) !== null && _fileDetails$metadata13 !== void 0 && _fileDetails$metadata13.height && (_fileDetails$metadata14 = fileDetails.metadata) !== null && _fileDetails$metadata14 !== void 0 && _fileDetails$metadata14.width ? {\n              h: (_fileDetails$metadata15 = fileDetails.metadata) === null || _fileDetails$metadata15 === void 0 ? void 0 : _fileDetails$metadata15.height,\n              w: (_fileDetails$metadata16 = fileDetails.metadata) === null || _fileDetails$metadata16 === void 0 ? void 0 : _fileDetails$metadata16.width\n            } : {}),\n            'm.relates_to': {\n              'm.in_reply_to': {\n                event_id: eventToReplyTo\n              }\n            },\n            'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n            'url': mxcUrl\n          });\n          return messageId;\n        } catch (e) {\n          var _e$body7, _e$body8;\n          federationBridgeLogger.error({\n            msg: 'Error sending file to room',\n            err: e\n          });\n          if ((_e$body7 = e.body) !== null && _e$body7 !== void 0 && _e$body7.includes('413') || (_e$body8 = e.body) !== null && _e$body8 !== void 0 && _e$body8.includes('M_TOO_LARGE')) {\n            throw new Error('File is too large');\n          }\n          return '';\n        }\n      }\n      getMsgTypeBasedOnMimeType(mimeType) {\n        const knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n        const knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n        const knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n        if (knownImageMimeTypes.includes(mimeType)) {\n          return MatrixEnumSendMessageType.IMAGE;\n        }\n        if (knownAudioMimeTypes.includes(mimeType)) {\n          return MatrixEnumSendMessageType.AUDIO;\n        }\n        if (knownVideoMimeTypes.includes(mimeType)) {\n          return MatrixEnumSendMessageType.VIDEO;\n        }\n        return MatrixEnumSendMessageType.FILE;\n      }\n      getMyHomeServerOrigin() {\n        return new URL(\"https://\".concat(this.internalSettings.getHomeServerDomain())).hostname;\n      }\n      async uploadContent(externalSenderId, content, options) {\n        try {\n          const mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n          return mxcUrl;\n        } catch (e) {\n          var _e$body9, _e$body10;\n          federationBridgeLogger.error({\n            msg: 'Error uploading content to Matrix',\n            err: e\n          });\n          if ((_e$body9 = e.body) !== null && _e$body9 !== void 0 && _e$body9.includes('413') || (_e$body10 = e.body) !== null && _e$body10 !== void 0 && _e$body10.includes('M_TOO_LARGE')) {\n            throw new Error('File is too large');\n          }\n        }\n      }\n      async getRoomName(externalRoomId, externalUserId) {\n        try {\n          var _find, _find$content;\n          const roomState = await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId);\n          return (_find = (roomState || []).find(event => (event === null || event === void 0 ? void 0 : event.type) === MatrixEventType.ROOM_NAME_CHANGED)) === null || _find === void 0 ? void 0 : (_find$content = _find.content) === null || _find$content === void 0 ? void 0 : _find$content.name;\n        } catch (error) {\n          // no-op\n        }\n      }\n      async getRoomTopic(externalRoomId, externalUserId) {\n        try {\n          var _find2, _find2$content;\n          const roomState = await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId);\n          return (_find2 = (roomState || []).find(event => (event === null || event === void 0 ? void 0 : event.type) === MatrixEventType.ROOM_TOPIC_CHANGED)) === null || _find2 === void 0 ? void 0 : (_find2$content = _find2.content) === null || _find2$content === void 0 ? void 0 : _find2$content.topic;\n        } catch (error) {\n          // no-op\n        }\n      }\n      async setRoomName(externalRoomId, externalUserId, roomName) {\n        await this.bridgeInstance.getIntent(externalUserId).setRoomName(externalRoomId, roomName);\n      }\n      async setRoomTopic(externalRoomId, externalUserId, roomTopic) {\n        await this.bridgeInstance.getIntent(externalUserId).setRoomTopic(externalRoomId, roomTopic);\n      }\n      convertMatrixUrlToHttp(externalUserId, matrixUrl) {\n        return this.bridgeInstance.getIntent(externalUserId).matrixClient.mxcToHttp(matrixUrl);\n      }\n      async createInstance() {\n        federationBridgeLogger.info('Performing Dynamic Import of matrix-appservice-bridge');\n        // Dynamic import to prevent Rocket.Chat from loading the module until needed and then handle if that fails\n        const {\n          Bridge,\n          AppServiceRegistration,\n          MatrixUser\n        } = await module1.dynamicImport('@rocket.chat/forked-matrix-appservice-bridge');\n        MatrixUserInstance = MatrixUser;\n        const registrationFile = this.internalSettings.getAppServiceRegistrationObject();\n        this.bridgeInstance = new Bridge({\n          homeserverUrl: this.internalSettings.getHomeServerUrl(),\n          domain: this.internalSettings.getHomeServerDomain(),\n          registration: AppServiceRegistration.fromObject(this.convertRegistrationFileToMatrixFormat(registrationFile)),\n          disableStores: true,\n          controller: _objectSpread({\n            onEvent: request => {\n              const event = request.getData();\n              // TODO: can we ignore all events from out homeserver?\n              // This was added particularly to avoid duplicating messages.\n              // Messages sent from rocket.chat also causes a m.room.message event, which if gets to this bridge\n              // before the event id promise is resolved, the respective message does not get event id attached to them any longer,\n              // thus this event handler \"resends\" the message to the rocket.chat room (not to matrix though).\n              if (event.type === 'm.room.message' && this.extractHomeserverOrigin(event.sender) === this.getMyHomeServerOrigin()) {\n                return;\n              }\n              this.eventHandler(event);\n            },\n            onLog: (line, isError) => {\n              console.log(line, isError);\n            }\n          }, this.internalSettings.getAppServiceRegistrationObject().enableEphemeralEvents ? {\n            onEphemeralEvent: request => {\n              const event = request.getData();\n              this.eventHandler(event);\n            }\n          } : {})\n        });\n      }\n      convertRegistrationFileToMatrixFormat(registrationFile) {\n        return {\n          'id': registrationFile.id,\n          'hs_token': registrationFile.homeserverToken,\n          'as_token': registrationFile.applicationServiceToken,\n          'url': registrationFile.bridgeUrl,\n          'sender_localpart': registrationFile.botName,\n          'namespaces': registrationFile.listenTo,\n          'de.sorunome.msc2409.push_ephemeral': registrationFile.enableEphemeralEvents\n        };\n      }\n      async ping() {\n        if (!this.isRunning || !this.bridgeInstance) {\n          throw new Error(\"matrix bridge isn't yet running\");\n        }\n        const {\n          duration_ms: durationMs\n        } = await this.bridgeInstance.getIntent().matrixClient.doRequest('POST', \"/_matrix/client/v1/appservice/\".concat(this.internalSettings.getApplicationServiceId(), \"/ping\"), {},\n        /*\n         * Empty txn id as it is optional, neither does the spec says exactly what to do with it.\n         * https://github.com/matrix-org/matrix-spec/blob/1fc8f8856fe47849f90344cfa91601c984627acb/data/api/client-server/appservice_ping.yaml#L55-L56\n         */\n        {}, DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT);\n        return {\n          durationMs\n        };\n      }\n      async deactivateUser(uid) {\n        /*\n         * https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3accountdeactivate\n         * Using { erase: false } since rocket.chat side on deactivation we do not delete anything.\n         */\n        const resp = await this.bridgeInstance.getIntent().matrixClient.doRequest('POST', '/_matrix/client/v3/account/deactivate', {\n          user_id: uid\n        }, {\n          erase: false\n        });\n        if (resp.id_server_unbind_result !== 'success') {\n          throw new Error('Failed to deactivate matrix user');\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module1","link","default","v","export","MatrixBridge","fetch","serverFetch","federationBridgeLogger","convertEmojisFromRCFormatToMatrixFormat","formatExternalUserIdToInternalUsernameFormat","toExternalMessageFormat","toExternalQuoteMessageFormat","MatrixEventType","MatrixRoomType","MatrixRoomVisibility","RoomMembershipChangedEventType","MatrixEnumRelatesToRelType","MatrixEnumSendMessageType","HttpStatusCodes","extractUserIdAndHomeserverFromMatrixId","VerificationStatus","MATRIX_USER_IN_USE","__reifyWaitForDeps__","MatrixUserInstance","DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS","DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT","constructor","internalSettings","eventHandler","bridgeInstance","isRunning","isUpdatingBridgeStatus","start","stop","createInstance","run","getBridgePort","addAppServicePath","method","path","checkToken","handler","_req","res","_next","status","json","err","error","msg","Promise","resolve","_this$bridgeInstance","close","getUserProfileInformation","externalUserId","externalInformation","getIntent","getProfileInfo","undefined","displayName","displayname","avatar_url","avatarUrl","joinRoom","externalRoomId","viaServers","matrixClient","doRequest","concat","server_name","e","Error","getRoomHistoricalJoinEvents","_events$find","_events$find$content","excludingUserIds","arguments","length","events","getRoomState","roomCreator","find","event","type","ROOM_CREATED","content","creator","filter","ROOM_MEMBERSHIP_CHANGED","membership","JOIN","includes","state_key","map","sender","getRoomData","includeEvents","excludeEvents","members","getRoomMembers","joinedMembers","getJoinedRoomMembers","oldestFirst","sort","a","b","timestamp","shift","roomName","getRoomName","id","username","name","inviteToRoom","externalInviterId","externalInviteeId","invite","setUserAvatar","setAvatarUrl","verifyInviteeIds","matrixIds","matrixIdVerificationMap","Map","matrixIdsVerificationPromises","matrixId","verifyInviteeId","matrixIdsVerificationPromiseResponse","allSettled","matrixIdsVerificationFulfilledResults","result","value","forEach","idx","set","userId","homeserverUrl","response","params","BAD_REQUEST","responseBody","errcode","VERIFIED","OK","UNVERIFIED","UNABLE_TO_VERIFY","createUser","domain","matrixUserId","toLowerCase","newUser","provisionUser","url","setUserDisplayName","setDisplayName","createDirectMessageRoom","externalCreatorId","inviteesExternalIds","extraData","intent","visibility","PRIVATE","preset","matrixRoom","createRoom","createAsClient","options","is_direct","creation_content","was_internally_programatically_created","room_id","sendMessage","externalSenderId","message","messageId","sendRawEvent","ROOM_MESSAGE_SENT","msgtype","body","escapeEmojis","formatted_body","homeServerDomain","getHomeServerDomain","format","sendThreadMessage","relatesToEventId","text","event_id","sendThreadReplyToMessage","eventToReplyTo","originalEventSender","replyMessage","formattedMessage","sendMessageFileToThread","fileDetails","_fileDetails$metadata","_fileDetails$metadata2","_fileDetails$metadata3","_fileDetails$metadata4","mxcUrl","uploadContent","filename","size","fileSize","mimetype","mimeType","metadata","height","width","h","w","getMsgTypeBasedOnMimeType","_e$body","_e$body2","sendReplyMessageFileToThread","_fileDetails$metadata5","_fileDetails$metadata6","_fileDetails$metadata7","_fileDetails$metadata8","_e$body3","_e$body4","sendReplyToMessage","sendEvent","TEXT","getReadStreamForFileFromUrl","fileUrl","convertMatrixUrlToHttp","isUserIdFromTheSameHomeserver","userDomain","extractHomeserverOrigin","split","pop","isRoomFromTheSameHomeserver","logFederationStartupInfo","info","getApplicationServiceId","getBridgeUrl","getHomeServerUrl","leaveRoom","leave","kickUserFromRoom","externalOwnerId","kick","setRoomPowerLevels","powerLevels","setPowerLevel","redactEvent","externalEventId","notifyUserTyping","isTyping","sendTyping","sendMessageReaction","reaction","eventId","MESSAGE_REACTED","key","rel_type","updateMessage","newMessageText","messageInExternalFormat","REPLACE","sendMessageFileToRoom","externaSenderId","_fileDetails$metadata9","_fileDetails$metadata10","_fileDetails$metadata11","_fileDetails$metadata12","_e$body5","_e$body6","sendReplyMessageFileToRoom","_fileDetails$metadata13","_fileDetails$metadata14","_fileDetails$metadata15","_fileDetails$metadata16","_e$body7","_e$body8","knownImageMimeTypes","knownAudioMimeTypes","knownVideoMimeTypes","IMAGE","AUDIO","VIDEO","FILE","getMyHomeServerOrigin","URL","hostname","_e$body9","_e$body10","_find","_find$content","roomState","ROOM_NAME_CHANGED","getRoomTopic","_find2","_find2$content","ROOM_TOPIC_CHANGED","topic","setRoomName","setRoomTopic","roomTopic","matrixUrl","mxcToHttp","Bridge","AppServiceRegistration","MatrixUser","dynamicImport","registrationFile","getAppServiceRegistrationObject","registration","fromObject","convertRegistrationFileToMatrixFormat","disableStores","controller","onEvent","request","getData","onLog","line","isError","console","log","enableEphemeralEvents","onEphemeralEvent","homeserverToken","applicationServiceToken","bridgeUrl","botName","listenTo","ping","duration_ms","durationMs","deactivateUser","uid","resp","user_id","erase","id_server_unbind_result","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/infrastructure/matrix/Bridge.ts"],"sourcesContent":["import type { IMessage } from '@rocket.chat/core-typings';\nimport type { AppServiceOutput, Bridge } from '@rocket.chat/forked-matrix-appservice-bridge';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\n\nimport type { IExternalUserProfileInformation, IFederationBridge, IFederationBridgeRegistrationFile } from '../../domain/IFederationBridge';\nimport type { RocketChatSettingsAdapter } from '../rocket-chat/adapters/Settings';\nimport { federationBridgeLogger } from '../rocket-chat/adapters/logger';\nimport { convertEmojisFromRCFormatToMatrixFormat } from './converters/room/MessageReceiver';\nimport { formatExternalUserIdToInternalUsernameFormat } from './converters/room/RoomReceiver';\nimport { toExternalMessageFormat, toExternalQuoteMessageFormat } from './converters/room/to-internal-parser-formatter';\nimport type { AbstractMatrixEvent } from './definitions/AbstractMatrixEvent';\nimport { MatrixEventType } from './definitions/MatrixEventType';\nimport { MatrixRoomType } from './definitions/MatrixRoomType';\nimport { MatrixRoomVisibility } from './definitions/MatrixRoomVisibility';\nimport { RoomMembershipChangedEventType } from './definitions/events/RoomMembershipChanged';\nimport { MatrixEnumRelatesToRelType, MatrixEnumSendMessageType } from './definitions/events/RoomMessageSent';\nimport type { MatrixEventRoomNameChanged } from './definitions/events/RoomNameChanged';\nimport type { MatrixEventRoomTopicChanged } from './definitions/events/RoomTopicChanged';\nimport { HttpStatusCodes } from './helpers/HtttpStatusCodes';\nimport { extractUserIdAndHomeserverFromMatrixId } from './helpers/MatrixIdStringTools';\nimport { VerificationStatus, MATRIX_USER_IN_USE } from './helpers/MatrixIdVerificationTypes';\n\nlet MatrixUserInstance: any;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS = 180000;\n\nconst DEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT = 60 * 1000;\n\nexport class MatrixBridge implements IFederationBridge {\n\tprotected bridgeInstance: Bridge;\n\n\tprotected isRunning = false;\n\n\tprotected isUpdatingBridgeStatus = false;\n\n\tconstructor(protected internalSettings: RocketChatSettingsAdapter, protected eventHandler: (event: AbstractMatrixEvent) => void) {} // eslint-disable-line no-empty-function\n\n\tpublic async start(): Promise<void> {\n\t\tif (this.isUpdatingBridgeStatus) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isUpdatingBridgeStatus = true;\n\t\ttry {\n\t\t\tawait this.stop();\n\t\t\tawait this.createInstance();\n\n\t\t\tif (!this.isRunning) {\n\t\t\t\tawait this.bridgeInstance.run(this.internalSettings.getBridgePort());\n\n\t\t\t\tthis.bridgeInstance.addAppServicePath({\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tpath: '/_matrix/app/v1/ping',\n\t\t\t\t\tcheckToken: true,\n\t\t\t\t\thandler: (_req, res, _next) => {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * https://spec.matrix.org/v1.11/application-service-api/#post_matrixappv1ping\n\t\t\t\t\t\t * Spec does not talk about what to do with the id. It is safe to ignore it as we are already checking for\n\t\t\t\t\t\t * homeserver token to be correct.\n\t\t\t\t\t\t * From the spec this might be a bit confusing, as it shows a txn id for post, but app service doing nothing with it afterwards\n\t\t\t\t\t\t * when receiving from the homeserver.\n\t\t\t\t\t\t * From spec directly -\n\t\t\t\t\t\t\tAS ---> HS : /_matrix/client/v1/appservice/{appserviceId}/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS ---> AS : /_matrix/app/v1/ping {\"transaction_id\": \"meow\"}\n\t\t\t\t\t\t\t\tHS <--- AS : 200 OK {}\n\t\t\t\t\t\t\tAS <--- HS : 200 OK {\"duration_ms\": 123}\n\t\t\t\t\t\t * https://github.com/matrix-org/matrix-spec/blob/e53e6ea8764b95f0bdb738549fca6f9f3f901298/content/application-service-api.md?plain=1#L229-L232\n\t\t\t\t\t\t * Code - wise, also doesn't care what happens with the response.\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/rest/client/appservice_ping.py#L80 - nothing done on return\n\t\t\t\t\t\t * https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/appservice/api.py#L321-L332 - not even returning the response, caring for just the http status code - https://github.com/element-hq/synapse/blob/cb6f4a84a6a8f2b79b80851f37eb5fa4c7c5264a/synapse/http/client.py#L532-L537\n\t\t\t\t\t\t */\n\t\t\t\t\t\tres.status(200).json({});\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.isRunning = true;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Failed to initialize the matrix-appservice-bridge.', err });\n\t\t} finally {\n\t\t\tthis.isUpdatingBridgeStatus = false;\n\t\t}\n\t}\n\n\tpublic async stop(): Promise<void> {\n\t\tif (!this.isRunning) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (resolve: () => void): Promise<void> => {\n\t\t\t// the http server might take some minutes to shutdown, and this promise can take some time to be resolved\n\t\t\tawait this.bridgeInstance?.close();\n\t\t\tthis.isRunning = false;\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic async getUserProfileInformation(externalUserId: string): Promise<IExternalUserProfileInformation | undefined> {\n\t\ttry {\n\t\t\tconst externalInformation = await this.bridgeInstance.getIntent(externalUserId).getProfileInfo(externalUserId, undefined, false);\n\n\t\t\treturn {\n\t\t\t\tdisplayName: externalInformation.displayname || '',\n\t\t\t\t...(externalInformation.avatar_url\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tavatarUrl: externalInformation.avatar_url,\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t};\n\t\t} catch (err) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async joinRoom(externalRoomId: string, externalUserId: string, viaServers?: string[]): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance\n\t\t\t\t.getIntent(externalUserId)\n\t\t\t\t.matrixClient.doRequest(\n\t\t\t\t\t'POST',\n\t\t\t\t\t`/_matrix/client/v3/join/${externalRoomId}`,\n\t\t\t\t\t{ server_name: viaServers },\n\t\t\t\t\t{},\n\t\t\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_JOINING_ROOMS,\n\t\t\t\t);\n\t\t} catch (e) {\n\t\t\tthrow new Error('Error joining Matrix room');\n\t\t}\n\t}\n\n\tpublic async getRoomHistoricalJoinEvents(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texcludingUserIds: string[] = [],\n\t): Promise<any[]> {\n\t\tconst events = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getRoomState(externalRoomId);\n\t\tconst roomCreator = events.find((event) => event.type === MatrixEventType.ROOM_CREATED)?.content?.creator;\n\t\tif (!roomCreator) {\n\t\t\treturn [];\n\t\t}\n\t\treturn events\n\t\t\t.filter(\n\t\t\t\t(event) =>\n\t\t\t\t\tevent.type === MatrixEventType.ROOM_MEMBERSHIP_CHANGED &&\n\t\t\t\t\tevent.content.membership === RoomMembershipChangedEventType.JOIN &&\n\t\t\t\t\t!excludingUserIds.includes(event.state_key),\n\t\t\t)\n\t\t\t.map((event) => ({\n\t\t\t\t...event,\n\t\t\t\tsender: roomCreator,\n\t\t\t}));\n\t}\n\n\tpublic async getRoomData(\n\t\texternalUserId: string,\n\t\texternalRoomId: string,\n\t): Promise<{ creator: { id: string; username: string }; name: string; joinedMembers: string[] } | undefined> {\n\t\tconst includeEvents = ['join'];\n\t\tconst excludeEvents = ['leave', 'ban'];\n\t\tconst members = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.getRoomMembers(externalRoomId, undefined, includeEvents as any[], excludeEvents as any[]);\n\n\t\tconst joinedMembers = await this.bridgeInstance.getIntent(externalUserId).matrixClient.getJoinedRoomMembers(externalRoomId);\n\n\t\tconst oldestFirst = members.sort((a, b) => a.timestamp - b.timestamp).shift();\n\t\tif (!oldestFirst) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst roomName = await this.getRoomName(externalRoomId, externalUserId);\n\t\tif (!roomName) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn {\n\t\t\tcreator: {\n\t\t\t\tid: oldestFirst.sender,\n\t\t\t\tusername: formatExternalUserIdToInternalUsernameFormat(oldestFirst.sender),\n\t\t\t},\n\t\t\tjoinedMembers,\n\t\t\tname: roomName,\n\t\t};\n\t}\n\n\tpublic async inviteToRoom(externalRoomId: string, externalInviterId: string, externalInviteeId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalInviterId).invite(externalRoomId, externalInviteeId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setUserAvatar(externalUserId: string, avatarUrl: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.setAvatarUrl(avatarUrl);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async verifyInviteeIds(matrixIds: string[]): Promise<Map<string, string>> {\n\t\tconst matrixIdVerificationMap = new Map();\n\t\tconst matrixIdsVerificationPromises = matrixIds.map((matrixId) => this.verifyInviteeId(matrixId));\n\t\tconst matrixIdsVerificationPromiseResponse = await Promise.allSettled(matrixIdsVerificationPromises);\n\t\tconst matrixIdsVerificationFulfilledResults = matrixIdsVerificationPromiseResponse\n\t\t\t.filter((result): result is PromiseFulfilledResult<VerificationStatus> => result.status === 'fulfilled')\n\t\t\t.map((result) => result.value);\n\n\t\tmatrixIds.forEach((matrixId, idx) => matrixIdVerificationMap.set(matrixId, matrixIdsVerificationFulfilledResults[idx]));\n\t\treturn matrixIdVerificationMap;\n\t}\n\n\tprivate async verifyInviteeId(externalInviteeId: string): Promise<VerificationStatus> {\n\t\tconst [userId, homeserverUrl] = extractUserIdAndHomeserverFromMatrixId(externalInviteeId);\n\t\ttry {\n\t\t\tconst response = await fetch(`https://${homeserverUrl}/_matrix/client/v3/register/available`, { params: { username: userId } });\n\n\t\t\tif (response.status === HttpStatusCodes.BAD_REQUEST) {\n\t\t\t\tconst responseBody = await response.json();\n\n\t\t\t\tif (responseBody.errcode === MATRIX_USER_IN_USE) {\n\t\t\t\t\treturn VerificationStatus.VERIFIED;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (response.status === HttpStatusCodes.OK) {\n\t\t\t\treturn VerificationStatus.UNVERIFIED;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t\t}\n\n\t\treturn VerificationStatus.UNABLE_TO_VERIFY;\n\t}\n\n\tpublic async createUser(username: string, name: string, domain: string, avatarUrl?: string): Promise<string> {\n\t\tif (!MatrixUserInstance) {\n\t\t\tthrow new Error('Error loading the Matrix User instance from the external library');\n\t\t}\n\t\tconst matrixUserId = `@${username?.toLowerCase()}:${domain}`;\n\t\tconst newUser = new MatrixUserInstance(matrixUserId);\n\t\tawait this.bridgeInstance.provisionUser(newUser, { name, ...(avatarUrl ? { url: avatarUrl } : {}) });\n\n\t\treturn matrixUserId;\n\t}\n\n\tpublic async setUserDisplayName(externalUserId: string, displayName: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).setDisplayName(displayName);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async createDirectMessageRoom(\n\t\texternalCreatorId: string,\n\t\tinviteesExternalIds: string[],\n\t\textraData: Record<string, any> = {},\n\t): Promise<string> {\n\t\tconst intent = this.bridgeInstance.getIntent(externalCreatorId);\n\n\t\tconst visibility = MatrixRoomVisibility.PRIVATE;\n\t\tconst preset = MatrixRoomType.PRIVATE;\n\n\t\tconst matrixRoom = await intent.createRoom({\n\t\t\tcreateAsClient: true,\n\t\t\toptions: {\n\t\t\t\tvisibility,\n\t\t\t\tpreset,\n\t\t\t\tis_direct: true,\n\t\t\t\tinvite: inviteesExternalIds,\n\t\t\t\tcreation_content: {\n\t\t\t\t\twas_internally_programatically_created: true,\n\t\t\t\t\t...extraData,\n\t\t\t\t\tinviteesExternalIds,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\treturn matrixRoom.room_id;\n\t}\n\n\tpublic async sendMessage(externalRoomId: string, externalSenderId: string, message: IMessage): Promise<string> {\n\t\ttry {\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\tmsgtype: 'm.text',\n\t\t\t\t\tbody: this.escapeEmojis(message.msg),\n\t\t\t\t\tformatted_body: this.escapeEmojis(\n\t\t\t\t\t\tawait toExternalMessageFormat({\n\t\t\t\t\t\t\tmessage: message.msg,\n\t\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e) {\n\t\t\tthrow new Error('User is not part of the room.');\n\t\t}\n\t}\n\n\tpublic async sendThreadMessage(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tmessage: IMessage,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst text = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: message.msg,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalSenderId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': this.escapeEmojis(message.msg),\n\t\t\t\t'formatted_body': text,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\treturn messageId;\n\t}\n\n\tpublic async sendThreadReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'msgtype': 'm.text',\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tpublic async sendMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': true,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: relatesToEventId,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToThread(\n\t\texternalRoomId: string,\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t\trelatesToEventId: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content);\n\t\t\tconst messageId = await this.bridgeInstance\n\t\t\t\t.getIntent(externalSenderId)\n\t\t\t\t.matrixClient.sendRawEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t\t'info': {\n\t\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t\t'url': mxcUrl,\n\t\t\t\t\t'm.relates_to': {\n\t\t\t\t\t\t'rel_type': 'm.thread',\n\t\t\t\t\t\t'event_id': relatesToEventId,\n\t\t\t\t\t\t'is_falling_back': false,\n\t\t\t\t\t\t'm.in_reply_to': {\n\t\t\t\t\t\t\tevent_id: eventToReplyTo,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to thread', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyToMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\teventToReplyTo: string,\n\t\toriginalEventSender: string,\n\t\treplyMessage: string,\n\t): Promise<string> {\n\t\tconst { formattedMessage, message } = await toExternalQuoteMessageFormat({\n\t\t\texternalRoomId,\n\t\t\teventToReplyTo,\n\t\t\toriginalEventSender,\n\t\t\tmessage: this.escapeEmojis(replyMessage),\n\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t});\n\t\tconst messageId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t\t'body': message,\n\t\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t\t'formatted_body': formattedMessage,\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t\t});\n\n\t\treturn messageId;\n\t}\n\n\tprivate escapeEmojis(text: string): string {\n\t\treturn convertEmojisFromRCFormatToMatrixFormat(text);\n\t}\n\n\tpublic async getReadStreamForFileFromUrl(externalUserId: string, fileUrl: string): Promise<ReadableStream> {\n\t\tconst response = await fetch(this.convertMatrixUrlToHttp(externalUserId, fileUrl));\n\t\tif (!response.body) {\n\t\t\tthrow new Error('Not able to download the file');\n\t\t}\n\n\t\treturn response.body as unknown as ReadableStream;\n\t}\n\n\tpublic isUserIdFromTheSameHomeserver(externalUserId: string, domain: string): boolean {\n\t\tconst userDomain = this.extractHomeserverOrigin(externalUserId);\n\n\t\treturn userDomain === domain;\n\t}\n\n\tpublic extractHomeserverOrigin(externalUserId: string): string {\n\t\treturn externalUserId.includes(':') ? externalUserId.split(':').pop() || '' : this.internalSettings.getHomeServerDomain();\n\t}\n\n\tpublic isRoomFromTheSameHomeserver(externalRoomId: string, domain: string): boolean {\n\t\treturn this.isUserIdFromTheSameHomeserver(externalRoomId, domain);\n\t}\n\n\tpublic logFederationStartupInfo(info?: string): void {\n\t\tfederationBridgeLogger.info(`${info}:\n\t\t\tid: ${this.internalSettings.getApplicationServiceId()}\n\t\t\tbridgeUrl: ${this.internalSettings.getBridgeUrl()}\n\t\t\thomeserverURL: ${this.internalSettings.getHomeServerUrl()}\n\t\t\thomeserverDomain: ${this.internalSettings.getHomeServerDomain()}\n\t\t`);\n\t}\n\n\tpublic async leaveRoom(externalRoomId: string, externalUserId: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.bridgeInstance.getIntent(externalUserId).leave(externalRoomId);\n\t\t} catch (e) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async kickUserFromRoom(externalRoomId: string, externalUserId: string, externalOwnerId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).kick(externalRoomId, externalUserId);\n\t}\n\n\tpublic async setRoomPowerLevels(\n\t\texternalRoomId: string,\n\t\texternalOwnerId: string,\n\t\texternalUserId: string,\n\t\tpowerLevels: number,\n\t): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalOwnerId).setPowerLevel(externalRoomId, externalUserId, powerLevels);\n\t}\n\n\tpublic async redactEvent(externalRoomId: string, externalUserId: string, externalEventId: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.redactEvent(externalRoomId, externalEventId);\n\t}\n\n\tpublic async notifyUserTyping(externalRoomId: string, externalUserId: string, isTyping: boolean): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).sendTyping(externalRoomId, isTyping);\n\t}\n\n\tpublic async sendMessageReaction(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\treaction: string,\n\t): Promise<string> {\n\t\tconst eventId = await this.bridgeInstance\n\t\t\t.getIntent(externalUserId)\n\t\t\t.matrixClient.sendEvent(externalRoomId, MatrixEventType.MESSAGE_REACTED, {\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\tevent_id: externalEventId,\n\t\t\t\t\tkey: convertEmojisFromRCFormatToMatrixFormat(reaction),\n\t\t\t\t\trel_type: 'm.annotation',\n\t\t\t\t},\n\t\t\t});\n\n\t\treturn eventId;\n\t}\n\n\tpublic async updateMessage(\n\t\texternalRoomId: string,\n\t\texternalUserId: string,\n\t\texternalEventId: string,\n\t\tnewMessageText: string,\n\t): Promise<void> {\n\t\tconst messageInExternalFormat = this.escapeEmojis(\n\t\t\tawait toExternalMessageFormat({\n\t\t\t\tmessage: newMessageText,\n\t\t\t\texternalRoomId,\n\t\t\t\thomeServerDomain: this.internalSettings.getHomeServerDomain(),\n\t\t\t}),\n\t\t);\n\n\t\tawait this.bridgeInstance.getIntent(externalUserId).matrixClient.sendEvent(externalRoomId, MatrixEventType.ROOM_MESSAGE_SENT, {\n\t\t\t'body': ` * ${this.escapeEmojis(newMessageText)}`,\n\t\t\t'format': 'org.matrix.custom.html',\n\t\t\t'formatted_body': messageInExternalFormat,\n\t\t\t'm.new_content': {\n\t\t\t\tbody: this.escapeEmojis(newMessageText),\n\t\t\t\tformat: 'org.matrix.custom.html',\n\t\t\t\tformatted_body: messageInExternalFormat,\n\t\t\t\tmsgtype: MatrixEnumSendMessageType.TEXT,\n\t\t\t},\n\t\t\t'm.relates_to': {\n\t\t\t\trel_type: MatrixEnumRelatesToRelType.REPLACE,\n\t\t\t\tevent_id: externalEventId,\n\t\t\t},\n\t\t\t'msgtype': MatrixEnumSendMessageType.TEXT,\n\t\t});\n\t}\n\n\tpublic async sendMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\tbody: fileDetails.filename,\n\t\t\t\tfilename: fileDetails.filename,\n\t\t\t\tinfo: {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\tmsgtype: this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\turl: mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tpublic async sendReplyMessageFileToRoom(\n\t\texternalRoomId: string,\n\t\texternaSenderId: string,\n\t\tcontent: Buffer,\n\t\tfileDetails: { filename: string; fileSize: number; mimeType: string; metadata?: { width?: number; height?: number; format?: string } },\n\t\teventToReplyTo: string,\n\t): Promise<string> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externaSenderId).uploadContent(content);\n\t\t\tconst { event_id: messageId } = await this.bridgeInstance.getIntent(externaSenderId).sendMessage(externalRoomId, {\n\t\t\t\t'body': fileDetails.filename,\n\t\t\t\t'filename': fileDetails.filename,\n\t\t\t\t'info': {\n\t\t\t\t\tsize: fileDetails.fileSize,\n\t\t\t\t\tmimetype: fileDetails.mimeType,\n\t\t\t\t\t...(fileDetails.metadata?.height && fileDetails.metadata?.width\n\t\t\t\t\t\t? { h: fileDetails.metadata?.height, w: fileDetails.metadata?.width }\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t'm.relates_to': {\n\t\t\t\t\t'm.in_reply_to': { event_id: eventToReplyTo },\n\t\t\t\t},\n\t\t\t\t'msgtype': this.getMsgTypeBasedOnMimeType(fileDetails.mimeType),\n\t\t\t\t'url': mxcUrl,\n\t\t\t});\n\n\t\t\treturn messageId;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error sending file to room', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate getMsgTypeBasedOnMimeType(mimeType: string): MatrixEnumSendMessageType {\n\t\tconst knownImageMimeTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\t\tconst knownAudioMimeTypes = ['audio/mpeg', 'audio/ogg', 'audio/wav'];\n\t\tconst knownVideoMimeTypes = ['video/mp4', 'video/ogg', 'video/webm'];\n\n\t\tif (knownImageMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.IMAGE;\n\t\t}\n\t\tif (knownAudioMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.AUDIO;\n\t\t}\n\t\tif (knownVideoMimeTypes.includes(mimeType)) {\n\t\t\treturn MatrixEnumSendMessageType.VIDEO;\n\t\t}\n\t\treturn MatrixEnumSendMessageType.FILE;\n\t}\n\n\tprivate getMyHomeServerOrigin() {\n\t\treturn new URL(`https://${this.internalSettings.getHomeServerDomain()}`).hostname;\n\t}\n\n\tpublic async uploadContent(\n\t\texternalSenderId: string,\n\t\tcontent: Buffer,\n\t\toptions?: { name?: string; type?: string },\n\t): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst mxcUrl = await this.bridgeInstance.getIntent(externalSenderId).uploadContent(content, options);\n\n\t\t\treturn mxcUrl;\n\t\t} catch (e: any) {\n\t\t\tfederationBridgeLogger.error({ msg: 'Error uploading content to Matrix', err: e });\n\t\t\tif (e.body?.includes('413') || e.body?.includes('M_TOO_LARGE')) {\n\t\t\t\tthrow new Error('File is too large');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async getRoomName(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_NAME_CHANGED) as MatrixEventRoomNameChanged)?.content\n\t\t\t\t?.name;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async getRoomTopic(externalRoomId: string, externalUserId: string): Promise<string | undefined> {\n\t\ttry {\n\t\t\tconst roomState = (await this.bridgeInstance.getIntent(externalUserId).roomState(externalRoomId)) as AbstractMatrixEvent[];\n\n\t\t\treturn ((roomState || []).find((event) => event?.type === MatrixEventType.ROOM_TOPIC_CHANGED) as MatrixEventRoomTopicChanged)?.content\n\t\t\t\t?.topic;\n\t\t} catch (error) {\n\t\t\t// no-op\n\t\t}\n\t}\n\n\tpublic async setRoomName(externalRoomId: string, externalUserId: string, roomName: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomName(externalRoomId, roomName);\n\t}\n\n\tpublic async setRoomTopic(externalRoomId: string, externalUserId: string, roomTopic: string): Promise<void> {\n\t\tawait this.bridgeInstance.getIntent(externalUserId).setRoomTopic(externalRoomId, roomTopic);\n\t}\n\n\tpublic convertMatrixUrlToHttp(externalUserId: string, matrixUrl: string): string {\n\t\treturn this.bridgeInstance.getIntent(externalUserId).matrixClient.mxcToHttp(matrixUrl);\n\t}\n\n\tprotected async createInstance(): Promise<void> {\n\t\tfederationBridgeLogger.info('Performing Dynamic Import of matrix-appservice-bridge');\n\n\t\t// Dynamic import to prevent Rocket.Chat from loading the module until needed and then handle if that fails\n\t\tconst { Bridge, AppServiceRegistration, MatrixUser } = await import('@rocket.chat/forked-matrix-appservice-bridge');\n\t\tMatrixUserInstance = MatrixUser;\n\t\tconst registrationFile = this.internalSettings.getAppServiceRegistrationObject();\n\n\t\tthis.bridgeInstance = new Bridge({\n\t\t\thomeserverUrl: this.internalSettings.getHomeServerUrl(),\n\t\t\tdomain: this.internalSettings.getHomeServerDomain(),\n\t\t\tregistration: AppServiceRegistration.fromObject(this.convertRegistrationFileToMatrixFormat(registrationFile)),\n\t\t\tdisableStores: true,\n\t\t\tcontroller: {\n\t\t\t\tonEvent: (request) => {\n\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\n\t\t\t\t\t// TODO: can we ignore all events from out homeserver?\n\t\t\t\t\t// This was added particularly to avoid duplicating messages.\n\t\t\t\t\t// Messages sent from rocket.chat also causes a m.room.message event, which if gets to this bridge\n\t\t\t\t\t// before the event id promise is resolved, the respective message does not get event id attached to them any longer,\n\t\t\t\t\t// thus this event handler \"resends\" the message to the rocket.chat room (not to matrix though).\n\t\t\t\t\tif (event.type === 'm.room.message' && this.extractHomeserverOrigin(event.sender) === this.getMyHomeServerOrigin()) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t},\n\t\t\t\tonLog: (line, isError) => {\n\t\t\t\t\tconsole.log(line, isError);\n\t\t\t\t},\n\t\t\t\t...(this.internalSettings.getAppServiceRegistrationObject().enableEphemeralEvents\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tonEphemeralEvent: (request) => {\n\t\t\t\t\t\t\t\tconst event = request.getData() as unknown as AbstractMatrixEvent;\n\t\t\t\t\t\t\t\tthis.eventHandler(event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {}),\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate convertRegistrationFileToMatrixFormat(registrationFile: IFederationBridgeRegistrationFile): AppServiceOutput {\n\t\treturn {\n\t\t\t'id': registrationFile.id,\n\t\t\t'hs_token': registrationFile.homeserverToken,\n\t\t\t'as_token': registrationFile.applicationServiceToken,\n\t\t\t'url': registrationFile.bridgeUrl,\n\t\t\t'sender_localpart': registrationFile.botName,\n\t\t\t'namespaces': registrationFile.listenTo,\n\t\t\t'de.sorunome.msc2409.push_ephemeral': registrationFile.enableEphemeralEvents,\n\t\t};\n\t}\n\n\tpublic async ping(): Promise<{ durationMs: number }> {\n\t\tif (!this.isRunning || !this.bridgeInstance) {\n\t\t\tthrow new Error(\"matrix bridge isn't yet running\");\n\t\t}\n\n\t\tconst { duration_ms: durationMs } = await this.bridgeInstance.getIntent().matrixClient.doRequest(\n\t\t\t'POST',\n\t\t\t`/_matrix/client/v1/appservice/${this.internalSettings.getApplicationServiceId()}/ping`,\n\t\t\t{},\n\t\t\t/*\n\t\t\t * Empty txn id as it is optional, neither does the spec says exactly what to do with it.\n\t\t\t * https://github.com/matrix-org/matrix-spec/blob/1fc8f8856fe47849f90344cfa91601c984627acb/data/api/client-server/appservice_ping.yaml#L55-L56\n\t\t\t */\n\t\t\t{},\n\t\t\tDEFAULT_TIMEOUT_IN_MS_FOR_PING_EVENT,\n\t\t);\n\n\t\treturn { durationMs };\n\t}\n\n\tpublic async deactivateUser(uid: string): Promise<void> {\n\t\t/*\n\t\t * https://spec.matrix.org/v1.11/client-server-api/#post_matrixclientv3accountdeactivate\n\t\t * Using { erase: false } since rocket.chat side on deactivation we do not delete anything.\n\t\t */\n\t\tconst resp = await this.bridgeInstance\n\t\t\t.getIntent()\n\t\t\t.matrixClient.doRequest('POST', '/_matrix/client/v3/account/deactivate', { user_id: uid }, { erase: false });\n\t\tif (resp.id_server_unbind_result !== 'success') {\n\t\t\tthrow new Error('Failed to deactivate matrix user');\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"fb2e0c701ef1c75ea168c38b64b5bcb0fda1f423"}
