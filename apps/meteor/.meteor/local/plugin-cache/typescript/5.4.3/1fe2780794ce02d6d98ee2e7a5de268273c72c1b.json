{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/hooks/messages/BeforeSaveCannedResponse.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/hooks/messages/BeforeSaveCannedResponse.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/hooks/messages/BeforeSaveCannedResponse.ts","inputSourceMap":{"version":3,"file":"ee/server/hooks/messages/BeforeSaveCannedResponse.ts","sourceRoot":"","sources":["ee/server/hooks/messages/BeforeSaveCannedResponse.ts"],"names":[],"mappings":"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","sourcesContent":["import { isILivechatVisitor, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { IMessage, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users } from '@rocket.chat/models';\nimport get from 'lodash.get';\nimport mem from 'memoize';\n\nconst placeholderFields = {\n\t'contact.name': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'name',\n\t},\n\t'contact.email': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'visitorEmails[0].address',\n\t},\n\t'contact.phone': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'phone[0].phoneNumber',\n\t},\n\t'agent.name': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'name',\n\t},\n\t'agent.email': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'emails[0].address',\n\t},\n};\n\nexport class BeforeSaveCannedResponse {\n\tstatic enabled = false;\n\n\tprivate getUser = mem((userId: string) => Users.findOneById(userId, { projection: { name: 1, _id: 1, emails: 1 } }), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tprivate getVisitor = mem((visitorId: string) => LivechatVisitors.findOneEnabledById(visitorId), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tasync replacePlaceholders({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// If the feature is disabled, return the message as is\n\t\tif (!BeforeSaveCannedResponse.enabled) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.msg || message.msg === '') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!isOmnichannelRoom(room)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// do not replace placeholders for visitors\n\t\tif (!user || isILivechatVisitor(user)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst agentId = room?.servedBy?._id;\n\t\tif (!agentId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst getAgent = (agentId: string) => {\n\t\t\tif (agentId === user._id) {\n\t\t\t\treturn user;\n\t\t\t}\n\n\t\t\treturn this.getUser(agentId);\n\t\t};\n\n\t\tmessage.msg = await Object.keys(placeholderFields).reduce(async (messageText, field) => {\n\t\t\tconst placeholderConfig = placeholderFields[field as keyof typeof placeholderFields];\n\n\t\t\tconst from = placeholderConfig.from === 'agent' ? await getAgent(agentId) : await this.getVisitor(room.v._id);\n\n\t\t\tconst data = get(from, placeholderConfig.dataKey, '');\n\n\t\t\treturn (await messageText).replace(new RegExp(`{{${field}}}`, 'g'), data);\n\t\t}, Promise.resolve(message.msg));\n\n\t\treturn message;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/hooks/messages/BeforeSaveCannedResponse.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/hooks/messages/BeforeSaveCannedResponse.ts","inputSourceMap":{"version":3,"file":"ee/server/hooks/messages/BeforeSaveCannedResponse.ts","sourceRoot":"","sources":["ee/server/hooks/messages/BeforeSaveCannedResponse.ts"],"names":[],"mappings":"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","sourcesContent":["import { isILivechatVisitor, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { IMessage, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users } from '@rocket.chat/models';\nimport get from 'lodash.get';\nimport mem from 'memoize';\n\nconst placeholderFields = {\n\t'contact.name': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'name',\n\t},\n\t'contact.email': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'visitorEmails[0].address',\n\t},\n\t'contact.phone': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'phone[0].phoneNumber',\n\t},\n\t'agent.name': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'name',\n\t},\n\t'agent.email': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'emails[0].address',\n\t},\n};\n\nexport class BeforeSaveCannedResponse {\n\tstatic enabled = false;\n\n\tprivate getUser = mem((userId: string) => Users.findOneById(userId, { projection: { name: 1, _id: 1, emails: 1 } }), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tprivate getVisitor = mem((visitorId: string) => LivechatVisitors.findOneEnabledById(visitorId), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tasync replacePlaceholders({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// If the feature is disabled, return the message as is\n\t\tif (!BeforeSaveCannedResponse.enabled) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.msg || message.msg === '') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!isOmnichannelRoom(room)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// do not replace placeholders for visitors\n\t\tif (!user || isILivechatVisitor(user)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst agentId = room?.servedBy?._id;\n\t\tif (!agentId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst getAgent = (agentId: string) => {\n\t\t\tif (agentId === user._id) {\n\t\t\t\treturn user;\n\t\t\t}\n\n\t\t\treturn this.getUser(agentId);\n\t\t};\n\n\t\tmessage.msg = await Object.keys(placeholderFields).reduce(async (messageText, field) => {\n\t\t\tconst placeholderConfig = placeholderFields[field as keyof typeof placeholderFields];\n\n\t\t\tconst from = placeholderConfig.from === 'agent' ? await getAgent(agentId) : await this.getVisitor(room.v._id);\n\n\t\t\tconst data = get(from, placeholderConfig.dataKey, '');\n\n\t\t\treturn (await messageText).replace(new RegExp(`{{${field}}}`, 'g'), data);\n\t\t}, Promise.resolve(message.msg));\n\n\t\treturn message;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      BeforeSaveCannedResponse: () => BeforeSaveCannedResponse\n    });\n    let isILivechatVisitor, isOmnichannelRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      isILivechatVisitor(v) {\n        isILivechatVisitor = v;\n      },\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      }\n    }, 0);\n    let LivechatVisitors, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let get;\n    module.link(\"lodash.get\", {\n      default(v) {\n        get = v;\n      }\n    }, 2);\n    let mem;\n    module.link(\"memoize\", {\n      default(v) {\n        mem = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const placeholderFields = {\n      'contact.name': {\n        from: 'visitor',\n        dataKey: 'name'\n      },\n      'contact.email': {\n        from: 'visitor',\n        dataKey: 'visitorEmails[0].address'\n      },\n      'contact.phone': {\n        from: 'visitor',\n        dataKey: 'phone[0].phoneNumber'\n      },\n      'agent.name': {\n        from: 'agent',\n        dataKey: 'name'\n      },\n      'agent.email': {\n        from: 'agent',\n        dataKey: 'emails[0].address'\n      }\n    };\n    class BeforeSaveCannedResponse {\n      constructor() {\n        this.getUser = mem(userId => Users.findOneById(userId, {\n          projection: {\n            name: 1,\n            _id: 1,\n            emails: 1\n          }\n        }), {\n          maxAge: 1000 * 30\n        });\n        this.getVisitor = mem(visitorId => LivechatVisitors.findOneEnabledById(visitorId), {\n          maxAge: 1000 * 30\n        });\n      }\n      async replacePlaceholders(_ref) {\n        var _room$servedBy;\n        let {\n          message,\n          room,\n          user\n        } = _ref;\n        // If the feature is disabled, return the message as is\n        if (!BeforeSaveCannedResponse.enabled) {\n          return message;\n        }\n        if (!message.msg || message.msg === '') {\n          return message;\n        }\n        if (!isOmnichannelRoom(room)) {\n          return message;\n        }\n        // do not replace placeholders for visitors\n        if (!user || isILivechatVisitor(user)) {\n          return message;\n        }\n        const agentId = room === null || room === void 0 ? void 0 : (_room$servedBy = room.servedBy) === null || _room$servedBy === void 0 ? void 0 : _room$servedBy._id;\n        if (!agentId) {\n          return message;\n        }\n        const getAgent = agentId => {\n          if (agentId === user._id) {\n            return user;\n          }\n          return this.getUser(agentId);\n        };\n        message.msg = await Object.keys(placeholderFields).reduce(async (messageText, field) => {\n          const placeholderConfig = placeholderFields[field];\n          const from = placeholderConfig.from === 'agent' ? await getAgent(agentId) : await this.getVisitor(room.v._id);\n          const data = get(from, placeholderConfig.dataKey, '');\n          return (await messageText).replace(new RegExp(\"{{\".concat(field, \"}}\"), 'g'), data);\n        }, Promise.resolve(message.msg));\n        return message;\n      }\n    }\n    BeforeSaveCannedResponse.enabled = false;\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","BeforeSaveCannedResponse","isILivechatVisitor","isOmnichannelRoom","link","v","LivechatVisitors","Users","get","default","mem","__reifyWaitForDeps__","placeholderFields","from","dataKey","constructor","getUser","userId","findOneById","projection","name","_id","emails","maxAge","getVisitor","visitorId","findOneEnabledById","replacePlaceholders","_ref","_room$servedBy","message","room","user","enabled","msg","agentId","servedBy","getAgent","Object","keys","reduce","messageText","field","placeholderConfig","data","replace","RegExp","concat","Promise","resolve","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/hooks/messages/BeforeSaveCannedResponse.ts"],"sourcesContent":["import { isILivechatVisitor, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { IMessage, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users } from '@rocket.chat/models';\nimport get from 'lodash.get';\nimport mem from 'memoize';\n\nconst placeholderFields = {\n\t'contact.name': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'name',\n\t},\n\t'contact.email': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'visitorEmails[0].address',\n\t},\n\t'contact.phone': {\n\t\tfrom: 'visitor',\n\t\tdataKey: 'phone[0].phoneNumber',\n\t},\n\t'agent.name': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'name',\n\t},\n\t'agent.email': {\n\t\tfrom: 'agent',\n\t\tdataKey: 'emails[0].address',\n\t},\n};\n\nexport class BeforeSaveCannedResponse {\n\tstatic enabled = false;\n\n\tprivate getUser = mem((userId: string) => Users.findOneById(userId, { projection: { name: 1, _id: 1, emails: 1 } }), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tprivate getVisitor = mem((visitorId: string) => LivechatVisitors.findOneEnabledById(visitorId), {\n\t\tmaxAge: 1000 * 30,\n\t});\n\n\tasync replacePlaceholders({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// If the feature is disabled, return the message as is\n\t\tif (!BeforeSaveCannedResponse.enabled) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!message.msg || message.msg === '') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!isOmnichannelRoom(room)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// do not replace placeholders for visitors\n\t\tif (!user || isILivechatVisitor(user)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst agentId = room?.servedBy?._id;\n\t\tif (!agentId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst getAgent = (agentId: string) => {\n\t\t\tif (agentId === user._id) {\n\t\t\t\treturn user;\n\t\t\t}\n\n\t\t\treturn this.getUser(agentId);\n\t\t};\n\n\t\tmessage.msg = await Object.keys(placeholderFields).reduce(async (messageText, field) => {\n\t\t\tconst placeholderConfig = placeholderFields[field as keyof typeof placeholderFields];\n\n\t\t\tconst from = placeholderConfig.from === 'agent' ? await getAgent(agentId) : await this.getVisitor(room.v._id);\n\n\t\t\tconst data = get(from, placeholderConfig.dataKey, '');\n\n\t\t\treturn (await messageText).replace(new RegExp(`{{${field}}}`, 'g'), data);\n\t\t}, Promise.resolve(message.msg));\n\n\t\treturn message;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1fe2780794ce02d6d98ee2e7a5de268273c72c1b"}
