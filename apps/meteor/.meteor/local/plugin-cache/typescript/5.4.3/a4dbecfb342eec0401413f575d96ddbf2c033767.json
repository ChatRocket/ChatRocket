{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/contexts/CallContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/contexts/CallContext.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/contexts/CallContext.ts","inputSourceMap":{"version":3,"file":"client/contexts/CallContext.ts","sourceRoot":"","sources":["client/contexts/CallContext.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\nimport type { Device } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextReady = {\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\tnetworkStatus: 'online' | 'offline';\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\n\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\n\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\n\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\n\tregister: () => void;\n\tunregister: () => void;\n};\n\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n\terror: Error | unknown;\n};\n\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n\toutBoundCallsAllowed: undefined,\n\toutBoundCallsEnabled: undefined,\n\toutBoundCallsEnabledForUser: undefined,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\tconst { voipClient } = context;\n\n\tconst [subscribe, getSnapshot] = useMemo(() => {\n\t\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\n\n\t\tconst callback = (cb: () => void): (() => void) =>\n\t\t\tvoipClient.on('stateChanged', () => {\n\t\t\t\tcaller = voipClient.callerInfo;\n\t\t\t\tcb();\n\t\t\t});\n\n\t\tconst getSnapshot = (): VoIpCallerInfo => caller;\n\t\treturn [callback, getSnapshot];\n\t}, [voipClient]);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueName only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioOutputDevice;\n};\n\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioInputDevice;\n};\n\nexport const useCallRegisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.register;\n};\n\nexport const useCallUnregisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.unregister;\n};\n\nexport const useVoipOutboundStates = (): {\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n} => {\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst callerInfo = useCallerInfo();\n\n\treturn {\n\t\toutBoundCallsAllowed: isEnterprise,\n\t\toutBoundCallsEnabled: isEnterprise,\n\t\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\n\t};\n};\n\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n\t}\n\n\treturn context.networkStatus;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/contexts/CallContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/contexts/CallContext.ts","inputSourceMap":{"version":3,"file":"client/contexts/CallContext.ts","sourceRoot":"","sources":["client/contexts/CallContext.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAC3D,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AAoDnE,MAAM,kBAAkB,GAAG,CAAC,OAAyB,EAA+B,EAAE,CAAE,OAA4B,CAAC,KAAK,CAAC;AAE3H,MAAM,kBAAkB,GAAG,CAAC,OAAyB,EAA+B,EAAE,CAAE,OAA4B,CAAC,KAAK,KAAK,SAAS,CAAC;AAYzI,MAAM,uBAAuB,GAAqB;IACjD,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,KAAK;IACZ,oBAAoB,EAAE,SAAS;IAC/B,oBAAoB,EAAE,SAAS;IAC/B,2BAA2B,EAAE,SAAS;CACtC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,aAAa,CAAmB,uBAAuB,CAAC,CAAC;AAEpF,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAY,EAAE,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAAC;AAElG,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAY,EAAE;IAC7C,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAC5C,OAAO,OAAO,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAY,EAAE;IAC3C,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAE1C,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAY,EAAE;IAC3C,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,GAAoB,EAAE;IACnD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACvE,CAAC;IACD,OAAO,OAAO,CAAC,OAAO,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,GAAmB,EAAE;IACjD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACtE,CAAC;IAED,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IAE/B,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC,GAAG,EAAE;QAC7C,IAAI,MAAM,GAAmB,UAAU,CAAC,UAAU,CAAC;QAEnD,MAAM,QAAQ,GAAG,CAAC,EAAc,EAAgB,EAAE,CACjD,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;YAClC,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC;YAC/B,EAAE,EAAE,CAAC;QACN,CAAC,CAAC,CAAC;QAEJ,MAAM,WAAW,GAAG,GAAmB,EAAE,CAAC,MAAM,CAAC;QACjD,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAChC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO,oBAAoB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAmC,EAAE;IACrE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC1E,CAAC;IAED,OAAO,OAAO,CAAC,UAAU,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAAiC,EAAE;IACjE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,OAAO,CAAC,QAAQ,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,GAAa,EAAE;IAC3C,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACtE,CAAC;IAED,OAAO,OAAO,CAAC,UAAU,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,GAAkC,EAAE;IAC/D,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,OAAO,CAAC,SAAS,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAAqC,EAAE;IACrE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,OAAO,CAAC,YAAY,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAuC,EAAE;IACzE,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC1E,CAAC;IAED,OAAO,OAAO,CAAC,cAAc,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,GAAgD,EAAE;IAC3F,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;IACnF,CAAC;IAED,OAAO,OAAO,CAAC,uBAAuB,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,GAAgD,EAAE;IAC1F,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;IAClF,CAAC;IAED,OAAO,OAAO,CAAC,sBAAsB,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAiB,EAAE;IACvD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC9E,CAAC;IAED,OAAO,OAAO,CAAC,QAAQ,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAiB,EAAE;IACzD,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;IAChF,CAAC;IAED,OAAO,OAAO,CAAC,UAAU,CAAC;AAC3B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAInC,EAAE;IACH,MAAM,YAAY,GAAG,mBAAmB,EAAE,CAAC;IAC3C,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,OAAO;QACN,oBAAoB,EAAE,YAAY;QAClC,oBAAoB,EAAE,YAAY;QAClC,2BAA2B,EAAE,YAAY,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC;KAC1H,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAyB,EAAE;IAC9D,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAExC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC7E,CAAC;IAED,OAAO,OAAO,CAAC,aAAa,CAAC;AAC9B,CAAC,CAAC","sourcesContent":["import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\nimport type { Device } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextReady = {\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\tnetworkStatus: 'online' | 'offline';\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\n\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\n\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\n\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\n\tregister: () => void;\n\tunregister: () => void;\n};\n\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n\terror: Error | unknown;\n};\n\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n\toutBoundCallsAllowed: undefined,\n\toutBoundCallsEnabled: undefined,\n\toutBoundCallsEnabledForUser: undefined,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\tconst { voipClient } = context;\n\n\tconst [subscribe, getSnapshot] = useMemo(() => {\n\t\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\n\n\t\tconst callback = (cb: () => void): (() => void) =>\n\t\t\tvoipClient.on('stateChanged', () => {\n\t\t\t\tcaller = voipClient.callerInfo;\n\t\t\t\tcb();\n\t\t\t});\n\n\t\tconst getSnapshot = (): VoIpCallerInfo => caller;\n\t\treturn [callback, getSnapshot];\n\t}, [voipClient]);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueName only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioOutputDevice;\n};\n\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioInputDevice;\n};\n\nexport const useCallRegisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.register;\n};\n\nexport const useCallUnregisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.unregister;\n};\n\nexport const useVoipOutboundStates = (): {\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n} => {\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst callerInfo = useCallerInfo();\n\n\treturn {\n\t\toutBoundCallsAllowed: isEnterprise,\n\t\toutBoundCallsEnabled: isEnterprise,\n\t\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\n\t};\n};\n\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n\t}\n\n\treturn context.networkStatus;\n};\n"]}}},"code":"module.export({\n  CallContext: () => CallContext,\n  useIsVoipEnterprise: () => useIsVoipEnterprise,\n  useIsCallEnabled: () => useIsCallEnabled,\n  useIsCallReady: () => useIsCallReady,\n  useIsCallError: () => useIsCallError,\n  useCallActions: () => useCallActions,\n  useCallerInfo: () => useCallerInfo,\n  useCallCreateRoom: () => useCallCreateRoom,\n  useCallOpenRoom: () => useCallOpenRoom,\n  useCallClient: () => useCallClient,\n  useQueueName: () => useQueueName,\n  useQueueCounter: () => useQueueCounter,\n  useOpenedRoomInfo: () => useOpenedRoomInfo,\n  useChangeAudioOutputDevice: () => useChangeAudioOutputDevice,\n  useChangeAudioInputDevice: () => useChangeAudioInputDevice,\n  useCallRegisterClient: () => useCallRegisterClient,\n  useCallUnregisterClient: () => useCallUnregisterClient,\n  useVoipOutboundStates: () => useVoipOutboundStates,\n  useVoipNetworkStatus: () => useVoipNetworkStatus\n});\nlet createContext, useContext, useMemo;\nmodule.link(\"react\", {\n  createContext(v) {\n    createContext = v;\n  },\n  useContext(v) {\n    useContext = v;\n  },\n  useMemo(v) {\n    useMemo = v;\n  }\n}, 0);\nlet useSyncExternalStore;\nmodule.link(\"use-sync-external-store/shim\", {\n  useSyncExternalStore(v) {\n    useSyncExternalStore = v;\n  }\n}, 1);\nlet useHasLicenseModule;\nmodule.link(\"../hooks/useHasLicenseModule\", {\n  useHasLicenseModule(v) {\n    useHasLicenseModule = v;\n  }\n}, 2);\nconst isCallContextReady = context => context.ready;\nconst isCallContextError = context => context.error !== undefined;\nconst CallContextValueDefault = {\n  enabled: false,\n  ready: false,\n  outBoundCallsAllowed: undefined,\n  outBoundCallsEnabled: undefined,\n  outBoundCallsEnabledForUser: undefined\n};\nconst CallContext = /*#__PURE__*/createContext(CallContextValueDefault);\nconst useIsVoipEnterprise = () => useHasLicenseModule('voip-enterprise') === true;\nconst useIsCallEnabled = () => {\n  const {\n    enabled\n  } = useContext(CallContext);\n  return enabled;\n};\nconst useIsCallReady = () => {\n  const {\n    ready\n  } = useContext(CallContext);\n  return Boolean(ready);\n};\nconst useIsCallError = () => {\n  const context = useContext(CallContext);\n  return Boolean(isCallContextError(context));\n};\nconst useCallActions = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallActions only if Calls are enabled and ready');\n  }\n  return context.actions;\n};\nconst useCallerInfo = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallerInfo only if Calls are enabled and ready');\n  }\n  const {\n    voipClient\n  } = context;\n  const [subscribe, getSnapshot] = useMemo(() => {\n    let caller = voipClient.callerInfo;\n    const callback = cb => voipClient.on('stateChanged', () => {\n      caller = voipClient.callerInfo;\n      cb();\n    });\n    const getSnapshot = () => caller;\n    return [callback, getSnapshot];\n  }, [voipClient]);\n  return useSyncExternalStore(subscribe, getSnapshot);\n};\nconst useCallCreateRoom = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallCreateRoom only if Calls are enabled and ready');\n  }\n  return context.createRoom;\n};\nconst useCallOpenRoom = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallOpenRoom only if Calls are enabled and ready');\n  }\n  return context.openRoom;\n};\nconst useCallClient = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallClient only if Calls are enabled and ready');\n  }\n  return context.voipClient;\n};\nconst useQueueName = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useQueueName only if Calls are enabled and ready');\n  }\n  return context.queueName;\n};\nconst useQueueCounter = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useQueueCounter only if Calls are enabled and ready');\n  }\n  return context.queueCounter;\n};\nconst useOpenedRoomInfo = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n  }\n  return context.openedRoomInfo;\n};\nconst useChangeAudioOutputDevice = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n  }\n  return context.changeAudioOutputDevice;\n};\nconst useChangeAudioInputDevice = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n  }\n  return context.changeAudioInputDevice;\n};\nconst useCallRegisterClient = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallRegisterClient only if Calls are enabled and ready');\n  }\n  return context.register;\n};\nconst useCallUnregisterClient = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useCallUnregisterClient only if Calls are enabled and ready');\n  }\n  return context.unregister;\n};\nconst useVoipOutboundStates = () => {\n  const isEnterprise = useIsVoipEnterprise();\n  const callerInfo = useCallerInfo();\n  return {\n    outBoundCallsAllowed: isEnterprise,\n    outBoundCallsEnabled: isEnterprise,\n    outBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state)\n  };\n};\nconst useVoipNetworkStatus = () => {\n  const context = useContext(CallContext);\n  if (!isCallContextReady(context)) {\n    throw new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n  }\n  return context.networkStatus;\n};","map":{"version":3,"names":["module","export","CallContext","useIsVoipEnterprise","useIsCallEnabled","useIsCallReady","useIsCallError","useCallActions","useCallerInfo","useCallCreateRoom","useCallOpenRoom","useCallClient","useQueueName","useQueueCounter","useOpenedRoomInfo","useChangeAudioOutputDevice","useChangeAudioInputDevice","useCallRegisterClient","useCallUnregisterClient","useVoipOutboundStates","useVoipNetworkStatus","createContext","useContext","useMemo","link","v","useSyncExternalStore","useHasLicenseModule","isCallContextReady","context","ready","isCallContextError","error","undefined","CallContextValueDefault","enabled","outBoundCallsAllowed","outBoundCallsEnabled","outBoundCallsEnabledForUser","Boolean","Error","actions","voipClient","subscribe","getSnapshot","caller","callerInfo","callback","cb","on","createRoom","openRoom","queueName","queueCounter","openedRoomInfo","changeAudioOutputDevice","changeAudioInputDevice","register","unregister","isEnterprise","includes","state","networkStatus"],"sources":["client/contexts/CallContext.ts"],"sourcesContent":["import type { IVoipRoom, ICallerInfo, VoIpCallerInfo } from '@rocket.chat/core-typings';\nimport type { Device } from '@rocket.chat/ui-contexts';\nimport { createContext, useContext, useMemo } from 'react';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nimport { useHasLicenseModule } from '../hooks/useHasLicenseModule';\nimport type { VoIPUser } from '../lib/voip/VoIPUser';\n\nexport type CallContextValue = CallContextDisabled | CallContextReady | CallContextError | CallContextEnabled;\n\ntype CallContextDisabled = {\n\tenabled: false;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextEnabled = {\n\tenabled: true;\n\tready: unknown;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n};\n\ntype CallContextReady = {\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n\tenabled: true;\n\tready: true;\n\tvoipClient: VoIPUser;\n\tactions: CallActionsType;\n\tqueueName: string;\n\tqueueCounter: number;\n\tnetworkStatus: 'online' | 'offline';\n\topenedRoomInfo: { v: { token?: string }; rid: string };\n\topenWrapUpModal: () => void;\n\topenRoom: (rid: IVoipRoom['_id']) => void;\n\tcreateRoom: (caller: ICallerInfo) => Promise<IVoipRoom['_id']>;\n\tcloseRoom: (data?: { comment?: string; tags?: string[] }) => void;\n\tchangeAudioOutputDevice: (selectedAudioDevices: Device) => void;\n\tchangeAudioInputDevice: (selectedAudioDevices: Device) => void;\n\tregister: () => void;\n\tunregister: () => void;\n};\n\ntype CallContextError = {\n\tenabled: true;\n\tready: false;\n\toutBoundCallsAllowed: undefined;\n\toutBoundCallsEnabled: undefined;\n\toutBoundCallsEnabledForUser: undefined;\n\terror: Error | unknown;\n};\n\nconst isCallContextReady = (context: CallContextValue): context is CallContextReady => (context as CallContextReady).ready;\n\nconst isCallContextError = (context: CallContextValue): context is CallContextError => (context as CallContextError).error !== undefined;\n\nexport type CallActionsType = {\n\tmute: () => unknown;\n\tunmute: () => unknown;\n\tpause: () => unknown;\n\tresume: () => unknown;\n\tend: () => unknown;\n\tpickUp: () => unknown;\n\treject: () => unknown;\n};\n\nconst CallContextValueDefault: CallContextValue = {\n\tenabled: false,\n\tready: false,\n\toutBoundCallsAllowed: undefined,\n\toutBoundCallsEnabled: undefined,\n\toutBoundCallsEnabledForUser: undefined,\n};\n\nexport const CallContext = createContext<CallContextValue>(CallContextValueDefault);\n\nexport const useIsVoipEnterprise = (): boolean => useHasLicenseModule('voip-enterprise') === true;\n\nexport const useIsCallEnabled = (): boolean => {\n\tconst { enabled } = useContext(CallContext);\n\treturn enabled;\n};\n\nexport const useIsCallReady = (): boolean => {\n\tconst { ready } = useContext(CallContext);\n\n\treturn Boolean(ready);\n};\nexport const useIsCallError = (): boolean => {\n\tconst context = useContext(CallContext);\n\treturn Boolean(isCallContextError(context));\n};\n\nexport const useCallActions = (): CallActionsType => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallActions only if Calls are enabled and ready');\n\t}\n\treturn context.actions;\n};\n\nexport const useCallerInfo = (): VoIpCallerInfo => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallerInfo only if Calls are enabled and ready');\n\t}\n\n\tconst { voipClient } = context;\n\n\tconst [subscribe, getSnapshot] = useMemo(() => {\n\t\tlet caller: VoIpCallerInfo = voipClient.callerInfo;\n\n\t\tconst callback = (cb: () => void): (() => void) =>\n\t\t\tvoipClient.on('stateChanged', () => {\n\t\t\t\tcaller = voipClient.callerInfo;\n\t\t\t\tcb();\n\t\t\t});\n\n\t\tconst getSnapshot = (): VoIpCallerInfo => caller;\n\t\treturn [callback, getSnapshot];\n\t}, [voipClient]);\n\n\treturn useSyncExternalStore(subscribe, getSnapshot);\n};\n\nexport const useCallCreateRoom = (): CallContextReady['createRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallCreateRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.createRoom;\n};\n\nexport const useCallOpenRoom = (): CallContextReady['openRoom'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallOpenRoom only if Calls are enabled and ready');\n\t}\n\n\treturn context.openRoom;\n};\n\nexport const useCallClient = (): VoIPUser => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.voipClient;\n};\n\nexport const useQueueName = (): CallContextReady['queueName'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueName only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueName;\n};\n\nexport const useQueueCounter = (): CallContextReady['queueCounter'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useQueueCounter only if Calls are enabled and ready');\n\t}\n\n\treturn context.queueCounter;\n};\n\nexport const useOpenedRoomInfo = (): CallContextReady['openedRoomInfo'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useOpenedRoomInfo only if Calls are enabled and ready');\n\t}\n\n\treturn context.openedRoomInfo;\n};\n\nexport const useChangeAudioOutputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioOutputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioOutputDevice;\n};\n\nexport const useChangeAudioInputDevice = (): CallContextReady['changeAudioOutputDevice'] => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useChangeAudioInputDevice only if Calls are enabled and ready');\n\t}\n\n\treturn context.changeAudioInputDevice;\n};\n\nexport const useCallRegisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallRegisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.register;\n};\n\nexport const useCallUnregisterClient = (): (() => void) => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useCallUnregisterClient only if Calls are enabled and ready');\n\t}\n\n\treturn context.unregister;\n};\n\nexport const useVoipOutboundStates = (): {\n\toutBoundCallsAllowed: boolean;\n\toutBoundCallsEnabled: boolean;\n\toutBoundCallsEnabledForUser: boolean;\n} => {\n\tconst isEnterprise = useIsVoipEnterprise();\n\tconst callerInfo = useCallerInfo();\n\n\treturn {\n\t\toutBoundCallsAllowed: isEnterprise,\n\t\toutBoundCallsEnabled: isEnterprise,\n\t\toutBoundCallsEnabledForUser: isEnterprise && !['IN_CALL', 'ON_HOLD', 'UNREGISTERED', 'INITIAL'].includes(callerInfo.state),\n\t};\n};\n\nexport const useVoipNetworkStatus = (): 'online' | 'offline' => {\n\tconst context = useContext(CallContext);\n\n\tif (!isCallContextReady(context)) {\n\t\tthrow new Error('useVoipNetworkStatus only if Calls are enabled and ready');\n\t}\n\n\treturn context.networkStatus;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a4dbecfb342eec0401413f575d96ddbf2c033767"}
