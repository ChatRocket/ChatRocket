{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/LivechatTyped.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/LivechatTyped.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/LivechatTyped.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/LivechatTyped.ts","sourceRoot":"","sources":["app/livechat/server/lib/LivechatTyped.ts"],"names":[],"mappings":"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","sourcesContent":["import dns from 'dns';\nimport * as util from 'util';\n\nimport { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, VideoConf, api, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tIOmnichannelRoom,\n\tIOmnichannelRoomClosingInfo,\n\tIUser,\n\tILivechatVisitor,\n\tSelectedAgent,\n\tILivechatAgent,\n\tIMessage,\n\tILivechatDepartment,\n\tAtLeast,\n\tTransferData,\n\tIOmnichannelAgent,\n\tILivechatInquiryRecord,\n\tILivechatContact,\n\tILivechatContactChannel,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType, ILivechatAgentStatus, UserStatus, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { Logger, type MainLogger } from '@rocket.chat/logger';\nimport {\n\tLivechatDepartment,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tSubscriptions,\n\tLivechatVisitors,\n\tMessages,\n\tUsers,\n\tLivechatDepartmentAgents,\n\tReadReceipts,\n\tRooms,\n\tLivechatCustomField,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter, ClientSession, MongoError } from 'mongodb';\nimport UAParser from 'ua-parser-js';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { client } from '../../../../server/database/utils';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { addUserRolesAsync } from '../../../../server/lib/roles/addUserRoles';\nimport { removeUserFromRolesAsync } from '../../../../server/lib/roles/removeUserFromRoles';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { FileUpload } from '../../../file-upload/server';\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport {\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnLivechatInquiryChangedByRoom,\n\tnotifyOnRoomChangedById,\n\tnotifyOnLivechatInquiryChangedByToken,\n\tnotifyOnUserChange,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport * as Mailer from '../../../mailer/server/api';\nimport { metrics } from '../../../metrics/server';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport { createContact, createContactFromVisitor, isSingleContactEnabled } from './Contacts';\nimport { parseAgentCustomFields, updateDepartmentAgents, validateEmail, normalizeTransferredByData } from './Helper';\nimport { QueueManager } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport type { CloseRoomParams, CloseRoomParamsByUser, CloseRoomParamsByVisitor, ILivechatMessage } from './localTypes';\nimport { parseTranscriptRequest } from './parseTranscriptRequest';\n\ntype RegisterGuestType = Partial<Pick<ILivechatVisitor, 'token' | 'name' | 'department' | 'status' | 'username' | 'source'>> & {\n\tid?: string;\n\tconnectionData?: any;\n\temail?: string;\n\tphone?: { number: string };\n};\n\ntype OfflineMessageData = {\n\tmessage: string;\n\tname: string;\n\temail: string;\n\tdepartment?: string;\n\thost?: string;\n};\n\ntype AKeyOf<T> = {\n\t[K in keyof T]?: T[K];\n};\n\ntype PageInfo = { title: string; location: { href: string }; change: string };\n\ntype ICRMData = {\n\t_id: string;\n\tlabel?: string;\n\ttopic?: string;\n\tcreatedAt: Date;\n\tlastMessageAt?: Date;\n\ttags?: string[];\n\tcustomFields?: IOmnichannelRoom['livechatData'];\n\tvisitor: Pick<ILivechatVisitor, '_id' | 'token' | 'name' | 'username' | 'department' | 'phone' | 'ip'> & {\n\t\temail?: ILivechatVisitor['visitorEmails'];\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tcustomFields: ILivechatVisitor['livechatData'];\n\t};\n\tagent?: Pick<IOmnichannelAgent, '_id' | 'username' | 'name' | 'customFields'> & {\n\t\temail?: NonNullable<IOmnichannelAgent['emails']>[number]['address'];\n\t};\n\tcrmData?: IOmnichannelRoom['crmData'];\n};\n\ntype ChatCloser = { _id: string; username: string | undefined };\n\nconst isRoomClosedByUserParams = (params: CloseRoomParams): params is CloseRoomParamsByUser =>\n\t(params as CloseRoomParamsByUser).user !== undefined;\nconst isRoomClosedByVisitorParams = (params: CloseRoomParams): params is CloseRoomParamsByVisitor =>\n\t(params as CloseRoomParamsByVisitor).visitor !== undefined;\n\nconst dnsResolveMx = util.promisify(dns.resolveMx);\n\nclass LivechatClass {\n\tlogger: Logger;\n\n\twebhookLogger: MainLogger;\n\n\tconstructor() {\n\t\tthis.logger = new Logger('Livechat');\n\t\tthis.webhookLogger = this.logger.section('Webhook');\n\t}\n\n\tasync online(department?: string, skipNoAgentSetting = false, skipFallbackCheck = false): Promise<boolean> {\n\t\tLivechat.logger.debug(`Checking online agents ${department ? `for department ${department}` : ''}`);\n\t\tif (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tLivechat.logger.debug('Can accept without online agents: true');\n\t\t\treturn true;\n\t\t}\n\n\t\tif (settings.get('Livechat_assign_new_conversation_to_bot')) {\n\t\t\tLivechat.logger.debug(`Fetching online bot agents for department ${department}`);\n\t\t\tconst botAgents = await Livechat.getBotAgents(department);\n\t\t\tif (botAgents) {\n\t\t\t\tconst onlineBots = await botAgents.count();\n\t\t\t\tthis.logger.debug(`Found ${onlineBots} online`);\n\t\t\t\tif (onlineBots > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst agentsOnline = await this.checkOnlineAgents(department, undefined, skipFallbackCheck);\n\t\tLivechat.logger.debug(`Are online agents ${department ? `for department ${department}` : ''}?: ${agentsOnline}`);\n\t\treturn agentsOnline;\n\t}\n\n\tasync closeRoom(params: CloseRoomParams, attempts = 2): Promise<void> {\n\t\tlet newRoom: IOmnichannelRoom;\n\t\tlet chatCloser: ChatCloser;\n\t\tlet removedInquiryObj: ILivechatInquiryRecord | null;\n\n\t\tconst session = client.startSession();\n\t\ttry {\n\t\t\tsession.startTransaction();\n\t\t\tconst { room, closedBy, removedInquiry } = await this.doCloseRoom(params, session);\n\t\t\tawait session.commitTransaction();\n\n\t\t\tnewRoom = room;\n\t\t\tchatCloser = closedBy;\n\t\t\tremovedInquiryObj = removedInquiry;\n\t\t} catch (e) {\n\t\t\tthis.logger.error({ err: e, msg: 'Failed to close room', afterAttempts: attempts });\n\t\t\tawait session.abortTransaction();\n\t\t\t// Dont propagate transaction errors\n\t\t\tif (\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('UnknownTransactionCommitResult') ||\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('TransientTransactionError')\n\t\t\t) {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tthis.logger.debug(`Retrying close room because of transient error. Attempts left: ${attempts}`);\n\t\t\t\t\treturn this.closeRoom(params, attempts - 1);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('error-room-cannot-be-closed-try-again');\n\t\t\t}\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tawait session.endSession();\n\t\t}\n\n\t\t// Note: when reaching this point, the room has been closed\n\t\t// Transaction is commited and so these messages can be sent here.\n\t\treturn this.afterRoomClosed(newRoom, chatCloser, removedInquiryObj, params);\n\t}\n\n\tasync afterRoomClosed(\n\t\tnewRoom: IOmnichannelRoom,\n\t\tchatCloser: ChatCloser,\n\t\tinquiry: ILivechatInquiryRecord | null,\n\t\tparams: CloseRoomParams,\n\t): Promise<void> {\n\t\tif (!chatCloser) {\n\t\t\t// this should never happen\n\t\t\treturn;\n\t\t}\n\t\t// Note: we are okay with these messages being sent outside of the transaction. The process of sending a message\n\t\t// is huge and involves multiple db calls. Making it transactionable this way would be really hard.\n\t\t// And passing just _some_ actions to the transaction creates some deadlocks since messages are updated in the afterSaveMessages callbacks.\n\t\tconst transcriptRequested =\n\t\t\t!!params.room.transcriptRequest || (!settings.get('Livechat_enable_transcript') && settings.get('Livechat_transcript_send_always'));\n\t\tthis.logger.debug(`Sending closing message to room ${newRoom._id}`);\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat-close', newRoom._id, params.comment ?? '', chatCloser, {\n\t\t\tgroupable: false,\n\t\t\ttranscriptRequested,\n\t\t\t...(isRoomClosedByVisitorParams(params) && { token: params.visitor.token }),\n\t\t});\n\n\t\tif (settings.get('Livechat_enable_transcript') && !settings.get('Livechat_transcript_send_always')) {\n\t\t\tawait Message.saveSystemMessage('command', newRoom._id, 'promptTranscript', chatCloser);\n\t\t}\n\n\t\tthis.logger.debug(`Running callbacks for room ${newRoom._id}`);\n\n\t\tprocess.nextTick(() => {\n\t\t\t/**\n\t\t\t * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n\t\t\t * in the next major version of the Apps-Engine\n\t\t\t */\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, newRoom);\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, newRoom);\n\t\t});\n\n\t\tconst visitor = isRoomClosedByVisitorParams(params) ? params.visitor : undefined;\n\t\tconst opts = await parseTranscriptRequest(params.room, params.options, visitor);\n\t\tif (process.env.TEST_MODE) {\n\t\t\tawait callbacks.run('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t} else {\n\t\t\tcallbacks.runAsync('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(newRoom._id);\n\t\tif (inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tthis.logger.debug(`Room ${newRoom._id} was closed`);\n\t}\n\n\tasync doCloseRoom(\n\t\tparams: CloseRoomParams,\n\t\tsession: ClientSession,\n\t): Promise<{ room: IOmnichannelRoom; closedBy: ChatCloser; removedInquiry: ILivechatInquiryRecord | null }> {\n\t\tconst { comment } = params;\n\t\tconst { room } = params;\n\n\t\tthis.logger.debug(`Attempting to close room ${room._id}`);\n\t\tif (!room || !isOmnichannelRoom(room) || !room.open) {\n\t\t\tthis.logger.debug(`Room ${room._id} is not open`);\n\t\t\tthrow new Error('error-room-closed');\n\t\t}\n\n\t\tconst commentRequired = settings.get('Livechat_request_comment_when_closing_conversation');\n\t\tif (commentRequired && !comment?.trim()) {\n\t\t\tthrow new Error('error-comment-is-required');\n\t\t}\n\n\t\tconst { updatedOptions: options } = await this.resolveChatTags(room, params.options);\n\t\tthis.logger.debug(`Resolved chat tags for room ${room._id}`);\n\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy } = room;\n\t\tconst serviceTimeDuration = servedBy && (now.getTime() - new Date(servedBy.ts).getTime()) / 1000;\n\n\t\tconst closeData: IOmnichannelRoomClosingInfo = {\n\t\t\tclosedAt: now,\n\t\t\tchatDuration: (now.getTime() - new Date(room.ts).getTime()) / 1000,\n\t\t\t...(serviceTimeDuration && { serviceTimeDuration }),\n\t\t\t...options,\n\t\t};\n\t\tthis.logger.debug(`Room ${room._id} was closed at ${closeData.closedAt} (duration ${closeData.chatDuration})`);\n\n\t\tif (isRoomClosedByUserParams(params)) {\n\t\t\tconst { user } = params;\n\t\t\tthis.logger.debug(`Closing by user ${user?._id}`);\n\t\t\tcloseData.closer = 'user';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: user?._id || '',\n\t\t\t\tusername: user?.username,\n\t\t\t};\n\t\t} else if (isRoomClosedByVisitorParams(params)) {\n\t\t\tconst { visitor } = params;\n\t\t\tthis.logger.debug(`Closing by visitor ${params.visitor._id}`);\n\t\t\tcloseData.closer = 'visitor';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new Error('Error: Please provide details of the user or visitor who closed the room');\n\t\t}\n\n\t\tthis.logger.debug(`Updating DB for room ${room._id} with close data`);\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { session });\n\t\tconst removedInquiry = await LivechatInquiry.removeByRoomId(rid, { session });\n\t\tif (removedInquiry && removedInquiry.deletedCount !== 1) {\n\t\t\tthrow new Error('Error removing inquiry');\n\t\t}\n\n\t\tconst updatedRoom = await LivechatRooms.closeRoomById(rid, closeData, { session });\n\t\tif (!updatedRoom || updatedRoom.modifiedCount !== 1) {\n\t\t\tthrow new Error('Error closing room');\n\t\t}\n\n\t\tconst subs = await Subscriptions.countByRoomId(rid, { session });\n\t\tconst removedSubs = await Subscriptions.removeByRoomId(rid, {\n\t\t\tasync onTrash(doc) {\n\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t},\n\t\t\tsession,\n\t\t});\n\n\t\tif (removedSubs.deletedCount !== subs) {\n\t\t\tthrow new Error('Error removing subscriptions');\n\t\t}\n\n\t\tthis.logger.debug(`DB updated for room ${room._id}`);\n\n\t\t// Retrieve the closed room\n\t\tconst newRoom = await LivechatRooms.findOneById(rid, { session });\n\t\tif (!newRoom) {\n\t\t\tthrow new Error('Error: Room not found');\n\t\t}\n\n\t\treturn { room: newRoom, closedBy: closeData.closedBy, removedInquiry: inquiry };\n\t}\n\n\tasync getRequiredDepartment(onlineRequired = true) {\n\t\tconst departments = LivechatDepartment.findEnabledWithAgents();\n\n\t\tfor await (const dept of departments) {\n\t\t\tif (!dept.showOnRegistration) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!onlineRequired) {\n\t\t\t\treturn dept;\n\t\t\t}\n\n\t\t\tconst onlineAgents = await LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n\t\t\tif (onlineAgents && (await onlineAgents.count())) {\n\t\t\t\treturn dept;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync createRoom({\n\t\tvisitor,\n\t\tmessage,\n\t\trid,\n\t\troomInfo,\n\t\tagent,\n\t\textraData,\n\t}: {\n\t\tvisitor: ILivechatVisitor;\n\t\tmessage?: string;\n\t\trid?: string;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t\textraData?: Record<string, unknown>;\n\t}) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\n\t\tconst defaultAgent = await callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, visitor);\n\t\t// if no department selected verify if there is at least one active and pick the first\n\t\tif (!defaultAgent && !visitor.department) {\n\t\t\tconst department = await this.getRequiredDepartment();\n\t\t\tLivechat.logger.debug(`No department or default agent selected for ${visitor._id}`);\n\n\t\t\tif (department) {\n\t\t\t\tLivechat.logger.debug(`Assigning ${visitor._id} to department ${department._id}`);\n\t\t\t\tvisitor.department = department._id;\n\t\t\t}\n\t\t}\n\n\t\t// delegate room creation to QueueManager\n\t\tLivechat.logger.debug(`Calling QueueManager to request a room for visitor ${visitor._id}`);\n\n\t\tconst room = await QueueManager.requestRoom({\n\t\t\tguest: visitor,\n\t\t\tmessage,\n\t\t\trid,\n\t\t\troomInfo,\n\t\t\tagent: defaultAgent,\n\t\t\textraData,\n\t\t});\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tlet { contactId } = visitor;\n\n\t\t\tif (!contactId) {\n\t\t\t\tconst visitorContact = await LivechatVisitors.findOne<\n\t\t\t\t\tPick<ILivechatVisitor, 'name' | 'contactManager' | 'livechatData' | 'phone' | 'visitorEmails' | 'username' | 'contactId'>\n\t\t\t\t>(visitor._id, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\t\tphone: 1,\n\t\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\tcontactId: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tcontactId = visitorContact?.contactId;\n\t\t\t}\n\n\t\t\tif (!contactId) {\n\t\t\t\t// ensure that old visitors have a contact\n\t\t\t\tcontactId = await createContactFromVisitor(visitor);\n\t\t\t}\n\n\t\t\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id' | 'channels'>>(contactId, {\n\t\t\t\tprojection: { _id: 1, channels: 1 },\n\t\t\t});\n\n\t\t\tif (contact) {\n\t\t\t\tconst channel = contact.channels?.find(\n\t\t\t\t\t(channel: ILivechatContactChannel) => channel.name === roomInfo.source?.type && channel.visitorId === visitor._id,\n\t\t\t\t);\n\n\t\t\t\tif (!channel) {\n\t\t\t\t\tLivechat.logger.debug(`Adding channel for contact ${contact._id}`);\n\n\t\t\t\t\tawait LivechatContacts.addChannel(contact._id, {\n\t\t\t\t\t\tname: roomInfo.source?.label || roomInfo.source?.type.toString() || OmnichannelSourceType.OTHER,\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tblocked: false,\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tdetails: roomInfo.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLivechat.logger.debug(`Room obtained for visitor ${visitor._id} -> ${room._id}`);\n\n\t\tawait Messages.setRoomIdByToken(visitor.token, room._id);\n\n\t\treturn room;\n\t}\n\n\tasync getRoom<\n\t\tE extends Record<string, unknown> & {\n\t\t\tsla?: string;\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t>(\n\t\tguest: ILivechatVisitor,\n\t\tmessage: Pick<IMessage, 'rid' | 'msg' | 'token'>,\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t},\n\t\tagent?: SelectedAgent,\n\t\textraData?: E,\n\t) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\t\tLivechat.logger.debug(`Attempting to find or create a room for visitor ${guest._id}`);\n\t\tconst room = await LivechatRooms.findOneById(message.rid);\n\n\t\tif (room && !room.open) {\n\t\t\tLivechat.logger.debug(`Last room for visitor ${guest._id} closed. Creating new one`);\n\t\t}\n\n\t\tif (!room?.open) {\n\t\t\treturn {\n\t\t\t\troom: await this.createRoom({ visitor: guest, message: message.msg, roomInfo, agent, extraData }),\n\t\t\t\tnewRoom: true,\n\t\t\t};\n\t\t}\n\n\t\tif (room.v.token !== guest.token) {\n\t\t\tLivechat.logger.debug(`Visitor ${guest._id} trying to access another visitor's room`);\n\t\t\tthrow new Meteor.Error('cannot-access-room');\n\t\t}\n\n\t\treturn { room, newRoom: false };\n\t}\n\n\tasync checkOnlineAgents(department?: string, agent?: { agentId: string }, skipFallbackCheck = false): Promise<boolean> {\n\t\tif (agent?.agentId) {\n\t\t\treturn Users.checkOnlineAgents(agent.agentId);\n\t\t}\n\n\t\tif (department) {\n\t\t\tconst onlineForDep = await LivechatDepartmentAgents.checkOnlineForDepartment(department);\n\t\t\tif (onlineForDep || skipFallbackCheck) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(department, {\n\t\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t\t});\n\t\t\tif (!dep?.fallbackForwardDepartment) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\treturn this.checkOnlineAgents(dep?.fallbackForwardDepartment);\n\t\t}\n\n\t\treturn Users.checkOnlineAgents();\n\t}\n\n\tasync setDepartmentForGuest({ token, department }: { token: string; department: string }) {\n\t\tcheck(token, String);\n\t\tcheck(department, String);\n\n\t\tLivechat.logger.debug(`Switching departments for user with token ${token} (to ${department})`);\n\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id'>>(department, { projection: { _id: 1 } });\n\t\tif (!dep) {\n\t\t\tthrow new Meteor.Error('invalid-department', 'Provided department does not exists');\n\t\t}\n\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token', 'Provided token is invalid');\n\t\t}\n\t\tawait LivechatVisitors.updateById(visitor._id, updateUser);\n\t}\n\n\tasync removeRoom(rid: string) {\n\t\tLivechat.logger.debug(`Deleting room ${rid}`);\n\t\tcheck(rid, String);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid);\n\n\t\tconst result = await Promise.allSettled([\n\t\t\tMessages.removeByRoomId(rid),\n\t\t\tReadReceipts.removeByRoomId(rid),\n\t\t\tSubscriptions.removeByRoomId(rid, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tLivechatInquiry.removeByRoomId(rid),\n\t\t\tLivechatRooms.removeById(rid),\n\t\t]);\n\n\t\tif (result[3]?.status === 'fulfilled' && result[3].value?.deletedCount && inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tfor (const r of result) {\n\t\t\tif (r.status === 'rejected') {\n\t\t\t\tthis.logger.error(`Error removing room ${rid}: ${r.reason}`);\n\t\t\t\tthrow new Meteor.Error('error-removing-room', 'Error removing room');\n\t\t\t}\n\t\t}\n\t}\n\n\tisValidObject(obj: unknown): obj is Record<string, any> {\n\t\treturn typeof obj === 'object' && obj !== null;\n\t}\n\n\tasync registerGuest({\n\t\tid,\n\t\ttoken,\n\t\tname,\n\t\tphone,\n\t\temail,\n\t\tdepartment,\n\t\tusername,\n\t\tconnectionData,\n\t\tstatus = UserStatus.ONLINE,\n\t\tsource,\n\t}: RegisterGuestType): Promise<ILivechatVisitor | null> {\n\t\tcheck(token, String);\n\t\tcheck(id, Match.Maybe(String));\n\n\t\tLivechat.logger.debug(`New incoming conversation: id: ${id} | token: ${token}`);\n\n\t\tconst visitorDataToUpdate: Partial<ILivechatVisitor> & { userAgent?: string; ip?: string; host?: string } = {\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tsource,\n\t\t\t...(phone?.number ? { phone: [{ phoneNumber: phone.number }] } : {}),\n\t\t\t...(name ? { name } : {}),\n\t\t};\n\n\t\tif (email) {\n\t\t\tconst visitorEmail = email.trim().toLowerCase();\n\t\t\tvalidateEmail(visitorEmail);\n\t\t\tvisitorDataToUpdate.visitorEmails = [{ address: visitorEmail }];\n\t\t}\n\n\t\tconst livechatVisitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (livechatVisitor?.department !== department && department) {\n\t\t\tLivechat.logger.debug(`Attempt to find a department with id/name ${department}`);\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { _id: 1 } });\n\t\t\tif (!dep) {\n\t\t\t\tLivechat.logger.debug(`Invalid department provided: ${department}`);\n\t\t\t\tthrow new Meteor.Error('error-invalid-department', 'The provided department is invalid');\n\t\t\t}\n\t\t\tLivechat.logger.debug(`Assigning visitor ${token} to department ${dep._id}`);\n\t\t\tvisitorDataToUpdate.department = dep._id;\n\t\t}\n\n\t\tvisitorDataToUpdate.token = livechatVisitor?.token || token;\n\n\t\tlet existingUser = null;\n\n\t\tif (livechatVisitor) {\n\t\t\tLivechat.logger.debug('Found matching user by token');\n\t\t\tvisitorDataToUpdate._id = livechatVisitor._id;\n\t\t} else if (phone?.number && (existingUser = await LivechatVisitors.findOneVisitorByPhone(phone.number))) {\n\t\t\tLivechat.logger.debug('Found matching user by phone number');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t\t// Don't change token when matching by phone number, use current visitor token\n\t\t\tvisitorDataToUpdate.token = existingUser.token;\n\t\t} else if (email && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(email))) {\n\t\t\tLivechat.logger.debug('Found matching user by email');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t} else if (!livechatVisitor) {\n\t\t\tLivechat.logger.debug(`No matches found. Attempting to create new user with token ${token}`);\n\n\t\t\tvisitorDataToUpdate._id = id || undefined;\n\t\t\tvisitorDataToUpdate.username = username || (await LivechatVisitors.getNextVisitorUsername());\n\t\t\tvisitorDataToUpdate.status = status;\n\t\t\tvisitorDataToUpdate.ts = new Date();\n\t\t\tvisitorDataToUpdate.source = source;\n\n\t\t\tif (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations') && Livechat.isValidObject(connectionData)) {\n\t\t\t\tLivechat.logger.debug(`Saving connection data for visitor ${token}`);\n\t\t\t\tconst { httpHeaders, clientAddress } = connectionData;\n\t\t\t\tif (Livechat.isValidObject(httpHeaders)) {\n\t\t\t\t\tvisitorDataToUpdate.userAgent = httpHeaders['user-agent'];\n\t\t\t\t\tvisitorDataToUpdate.ip = httpHeaders['x-real-ip'] || httpHeaders['x-forwarded-for'] || clientAddress;\n\t\t\t\t\tvisitorDataToUpdate.host = httpHeaders?.host;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tconst contactId = await createContact({\n\t\t\t\tname: name ?? (visitorDataToUpdate.username as string),\n\t\t\t\temails: email ? [email] : [],\n\t\t\t\tphones: phone ? [phone.number] : [],\n\t\t\t\tunknown: true,\n\t\t\t});\n\t\t\tvisitorDataToUpdate.contactId = contactId;\n\t\t}\n\n\t\tconst upsertedLivechatVisitor = await LivechatVisitors.updateOneByIdOrToken(visitorDataToUpdate, {\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t});\n\n\t\tif (!upsertedLivechatVisitor.value) {\n\t\t\tLivechat.logger.debug(`No visitor found after upsert`);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn upsertedLivechatVisitor.value;\n\t}\n\n\tprivate async getBotAgents(department?: string) {\n\t\tif (department) {\n\t\t\treturn LivechatDepartmentAgents.getBotsForDepartment(department);\n\t\t}\n\n\t\treturn Users.findBotAgents();\n\t}\n\n\tprivate async resolveChatTags(\n\t\troom: IOmnichannelRoom,\n\t\toptions: CloseRoomParams['options'] = {},\n\t): Promise<{ updatedOptions: CloseRoomParams['options'] }> {\n\t\tthis.logger.debug(`Resolving chat tags for room ${room._id}`);\n\n\t\tconst concatUnique = (...arrays: (string[] | undefined)[]): string[] => [\n\t\t\t...new Set(([] as string[]).concat(...arrays.filter((a): a is string[] => !!a))),\n\t\t];\n\n\t\tconst { departmentId, tags: optionsTags } = room;\n\t\tconst { clientAction, tags: oldRoomTags } = options;\n\t\tconst roomTags = concatUnique(oldRoomTags, optionsTags);\n\n\t\tif (!departmentId) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'requestTagBeforeClosingChat' | 'chatClosingTags'>>(\n\t\t\tdepartmentId,\n\t\t\t{\n\t\t\t\tprojection: { requestTagBeforeClosingChat: 1, chatClosingTags: 1 },\n\t\t\t},\n\t\t);\n\t\tif (!department) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst { requestTagBeforeClosingChat, chatClosingTags } = department;\n\t\tconst extraRoomTags = concatUnique(roomTags, chatClosingTags);\n\n\t\tif (!requestTagBeforeClosingChat) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst checkRoomTags = !clientAction || (roomTags && roomTags.length > 0);\n\t\tconst checkDepartmentTags = chatClosingTags && chatClosingTags.length > 0;\n\t\tif (!checkRoomTags || !checkDepartmentTags) {\n\t\t\tthrow new Error('error-tags-must-be-assigned-before-closing-chat');\n\t\t}\n\n\t\treturn {\n\t\t\tupdatedOptions: {\n\t\t\t\t...options,\n\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate async sendEmail(from: string, to: string, replyTo: string, subject: string, html: string): Promise<void> {\n\t\tawait Mailer.send({\n\t\t\tto,\n\t\t\tfrom,\n\t\t\treplyTo,\n\t\t\tsubject,\n\t\t\thtml,\n\t\t});\n\t}\n\n\tasync sendRequest(\n\t\tpostData: {\n\t\t\ttype: string;\n\t\t\t[key: string]: any;\n\t\t},\n\t\tattempts = 10,\n\t) {\n\t\tif (!attempts) {\n\t\t\tLivechat.logger.error({ msg: 'Omnichannel webhook call failed. Max attempts reached' });\n\t\t\treturn;\n\t\t}\n\t\tconst timeout = settings.get<number>('Livechat_http_timeout');\n\t\tconst secretToken = settings.get<string>('Livechat_secret_token');\n\t\tconst webhookUrl = settings.get<string>('Livechat_webhookUrl');\n\t\ttry {\n\t\t\tLivechat.webhookLogger.debug({ msg: 'Sending webhook request', postData });\n\t\t\tconst result = await fetch(webhookUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...(secretToken && { 'X-RocketChat-Livechat-Token': secretToken }),\n\t\t\t\t},\n\t\t\t\tbody: postData,\n\t\t\t\ttimeout,\n\t\t\t});\n\n\t\t\tif (result.status === 200) {\n\t\t\t\tmetrics.totalLivechatWebhooksSuccess.inc();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tmetrics.totalLivechatWebhooksFailures.inc();\n\t\t\tthrow new Error(await result.text());\n\t\t} catch (err) {\n\t\t\tconst retryAfter = timeout * 4;\n\t\t\tLivechat.webhookLogger.error({ msg: `Error response on ${11 - attempts} try ->`, err });\n\t\t\t// try 10 times after 20 seconds each\n\t\t\tattempts - 1 &&\n\t\t\t\tLivechat.webhookLogger.warn({ msg: `Webhook call failed. Retrying`, newAttemptAfterSeconds: retryAfter / 1000, webhookUrl });\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait Livechat.sendRequest(postData, attempts - 1);\n\t\t\t}, retryAfter);\n\t\t}\n\t}\n\n\tasync saveAgentInfo(_id: string, agentData: any, agentDepartments: string[]) {\n\t\tcheck(_id, String);\n\t\tcheck(agentData, Object);\n\t\tcheck(agentDepartments, [String]);\n\n\t\tconst user = await Users.findOneById(_id);\n\t\tif (!user || !(await hasRoleAsync(_id, 'livechat-agent'))) {\n\t\t\tthrow new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent');\n\t\t}\n\n\t\tawait Users.setLivechatData(_id, agentData);\n\n\t\tconst currentDepartmentsForAgent = await LivechatDepartmentAgents.findByAgentId(_id).toArray();\n\n\t\tconst toRemoveIds = currentDepartmentsForAgent\n\t\t\t.filter((dept) => !agentDepartments.includes(dept.departmentId))\n\t\t\t.map((dept) => dept.departmentId);\n\t\tconst toAddIds = agentDepartments.filter((d) => !currentDepartmentsForAgent.some((c) => c.departmentId === d));\n\n\t\tawait Promise.all(\n\t\t\tawait LivechatDepartment.findInIds([...toRemoveIds, ...toAddIds], {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tenabled: 1,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.map((dep) => {\n\t\t\t\t\treturn updateDepartmentAgents(\n\t\t\t\t\t\tdep._id,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...(toRemoveIds.includes(dep._id) ? { remove: [{ agentId: _id }] } : { upsert: [{ agentId: _id, count: 0, order: 0 }] }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdep.enabled,\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.toArray(),\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tasync updateCallStatus(callId: string, rid: string, status: 'ended' | 'declined', user: IUser | ILivechatVisitor) {\n\t\tawait Rooms.setCallStatus(rid, status);\n\t\tif (status === 'ended' || status === 'declined') {\n\t\t\tif (await VideoConf.declineLivechatCall(callId)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn updateMessage({ _id: callId, msg: status, actionLinks: [], webRtcCallEndTs: new Date(), rid }, user as unknown as IUser);\n\t\t}\n\t}\n\n\tnotifyRoomVisitorChange(roomId: string, visitor: ILivechatVisitor) {\n\t\tvoid api.broadcast('omnichannel.room', roomId, {\n\t\t\ttype: 'visitorData',\n\t\t\tvisitor,\n\t\t});\n\t}\n\n\tasync changeRoomVisitor(userId: string, room: IOmnichannelRoom, visitor: ILivechatVisitor) {\n\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-not-found');\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\tthrow new Error('error-not-allowed');\n\t\t}\n\n\t\tawait LivechatRooms.changeVisitorByRoomId(room._id, visitor);\n\n\t\tthis.notifyRoomVisitorChange(room._id, visitor);\n\n\t\treturn LivechatRooms.findOneById(room._id);\n\t}\n\n\tasync notifyAgentStatusChanged(userId: string, status?: UserStatus) {\n\t\tif (!status) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid callbacks.runAsync('livechat.agentStatusChanged', { userId, status });\n\t\tif (!settings.get('Livechat_show_agent_info')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tvoid api.broadcast('omnichannel.room', room._id, {\n\t\t\t\ttype: 'agentStatus',\n\t\t\t\tstatus,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync updateMessage({ guest, message }: { guest: ILivechatVisitor; message: AtLeast<IMessage, '_id' | 'msg' | 'rid'> }) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\n\t\tconst originalMessage = await Messages.findOneById<Pick<IMessage, 'u' | '_id'>>(message._id, { projection: { u: 1 } });\n\t\tif (!originalMessage?._id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editAllowed = settings.get('Message_AllowEditing');\n\t\tconst editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n\n\t\tif (!editAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\t// TODO: Apps sends an `any` object and apparently we just check for _id being present\n\t\t// while updateMessage expects AtLeast<id, msg, rid>\n\t\tawait updateMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync closeOpenChats(userId: string, comment?: string) {\n\t\tthis.logger.debug(`Closing open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyDepartmentRestrictions', {}, { userId });\n\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait openChats.forEach((room) => {\n\t\t\tpromises.push(this.closeRoom({ user, room, comment }));\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync transfer(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) {\n\t\tthis.logger.debug(`Transfering room ${room._id} [Transfered by: ${transferData?.transferredBy?._id}]`);\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-onHold');\n\t\t}\n\n\t\tif (transferData.departmentId) {\n\t\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'name' | '_id'>>(transferData.departmentId, {\n\t\t\t\tprojection: { name: 1 },\n\t\t\t});\n\t\t\tif (!department) {\n\t\t\t\tthrow new Error('error-invalid-department');\n\t\t\t}\n\n\t\t\ttransferData.department = department;\n\t\t\tthis.logger.debug(`Transfering room ${room._id} to department ${transferData.department?._id}`);\n\t\t}\n\n\t\treturn RoutingManager.transferRoom(room, guest, transferData);\n\t}\n\n\tasync forwardOpenChats(userId: string) {\n\t\tthis.logger.debug(`Transferring open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id, username, name } = user;\n\t\tfor await (const room of LivechatRooms.findOpenByAgent(userId)) {\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\t\tif (!guest) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tawait this.transfer(room, guest, {\n\t\t\t\ttransferredBy,\n\t\t\t\tdepartmentId: guest.department,\n\t\t\t});\n\t\t}\n\t}\n\n\tshowConnecting() {\n\t\treturn RoutingManager.getConfig()?.showConnecting || false;\n\t}\n\n\tasync getInitSettings() {\n\t\tconst validSettings = [\n\t\t\t'Livechat_title',\n\t\t\t'Livechat_title_color',\n\t\t\t'Livechat_enable_message_character_limit',\n\t\t\t'Livechat_message_character_limit',\n\t\t\t'Message_MaxAllowedSize',\n\t\t\t'Livechat_enabled',\n\t\t\t'Livechat_registration_form',\n\t\t\t'Livechat_allow_switching_departments',\n\t\t\t'Livechat_offline_title',\n\t\t\t'Livechat_offline_title_color',\n\t\t\t'Livechat_offline_message',\n\t\t\t'Livechat_offline_success_message',\n\t\t\t'Livechat_offline_form_unavailable',\n\t\t\t'Livechat_display_offline_form',\n\t\t\t'Omnichannel_call_provider',\n\t\t\t'Language',\n\t\t\t'Livechat_enable_transcript',\n\t\t\t'Livechat_transcript_message',\n\t\t\t'Livechat_fileupload_enabled',\n\t\t\t'FileUpload_Enabled',\n\t\t\t'Livechat_conversation_finished_message',\n\t\t\t'Livechat_conversation_finished_text',\n\t\t\t'Livechat_name_field_registration_form',\n\t\t\t'Livechat_email_field_registration_form',\n\t\t\t'Livechat_registration_form_message',\n\t\t\t'Livechat_force_accept_data_processing_consent',\n\t\t\t'Livechat_data_processing_consent_text',\n\t\t\t'Livechat_show_agent_info',\n\t\t\t'Livechat_clear_local_storage_when_chat_ended',\n\t\t\t'Livechat_history_monitor_type',\n\t\t\t'Livechat_hide_system_messages',\n\t\t\t'Livechat_widget_position',\n\t\t\t'Livechat_background',\n\t\t\t'Assets_livechat_widget_logo',\n\t\t\t'Livechat_hide_watermark',\n\t\t\t'Omnichannel_allow_visitors_to_close_conversation',\n\t\t] as const;\n\n\t\ttype SettingTypes = (typeof validSettings)[number] | 'Livechat_Show_Connecting';\n\n\t\tconst rcSettings = validSettings.reduce<Record<SettingTypes, string | boolean>>((acc, setting) => {\n\t\t\tacc[setting] = settings.get(setting);\n\t\t\treturn acc;\n\t\t}, {} as any);\n\n\t\trcSettings.Livechat_Show_Connecting = this.showConnecting();\n\n\t\treturn rcSettings;\n\t}\n\n\tasync sendOfflineMessage(data: OfflineMessageData) {\n\t\tif (!settings.get('Livechat_display_offline_form')) {\n\t\t\tthrow new Error('error-offline-form-disabled');\n\t\t}\n\n\t\tconst { message, name, email, department, host } = data;\n\n\t\tif (!email) {\n\t\t\tthrow new Error('error-invalid-email');\n\t\t}\n\n\t\tconst emailMessage = `${message}`.replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n\n\t\tlet html = '<h1>New livechat message</h1>';\n\t\tif (host && host !== '') {\n\t\t\thtml = html.concat(`<p><strong>Sent from:</strong><a href='${host}'> ${host}</a></p>`);\n\t\t}\n\t\thtml = html.concat(`\n\t\t\t<p><strong>Visitor name:</strong> ${name}</p>\n\t\t\t<p><strong>Visitor email:</strong> ${email}</p>\n\t\t\t<p><strong>Message:</strong><br>${emailMessage}</p>`);\n\n\t\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n\t\tlet from: string;\n\t\tif (fromEmail) {\n\t\t\tfrom = fromEmail[0];\n\t\t} else {\n\t\t\tfrom = settings.get<string>('From_Email');\n\t\t}\n\n\t\tif (settings.get('Livechat_validate_offline_email')) {\n\t\t\tconst emailDomain = email.substr(email.lastIndexOf('@') + 1);\n\n\t\t\ttry {\n\t\t\t\tawait dnsResolveMx(emailDomain);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-email-address');\n\t\t\t}\n\t\t}\n\n\t\t// TODO Block offline form if Livechat_offline_email is undefined\n\t\t// (it does not make sense to have an offline form that does nothing)\n\t\t// `this.sendEmail` will throw an error if the email is invalid\n\t\t// thus this breaks livechat, since the \"to\" email is invalid, and that returns an [invalid email] error to the livechat client\n\t\tlet emailTo = settings.get<string>('Livechat_offline_email');\n\t\tif (department && department !== '') {\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { email: 1 } });\n\t\t\tif (dep) {\n\t\t\t\temailTo = dep.email || emailTo;\n\t\t\t}\n\t\t}\n\n\t\tconst fromText = `${name} - ${email} <${from}>`;\n\t\tconst replyTo = `${name} <${email}>`;\n\t\tconst subject = `Livechat offline message from ${name}: ${`${emailMessage}`.substring(0, 20)}`;\n\t\tawait this.sendEmail(fromText, emailTo, replyTo, subject, html);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid callbacks.run('livechat.offlineMessage', data);\n\t\t});\n\t}\n\n\tasync sendMessage({\n\t\tguest,\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\tmessage: ILivechatMessage;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t}) {\n\t\tconst { room, newRoom } = await this.getRoom(guest, message, roomInfo, agent);\n\t\tif (guest.name) {\n\t\t\tmessage.alias = guest.name;\n\t\t}\n\t\treturn Object.assign(await sendMessage(guest, { ...message, token: guest.token }, room), {\n\t\t\tnewRoom,\n\t\t\tshowConnecting: this.showConnecting(),\n\t\t});\n\t}\n\n\tasync removeGuest(_id: string) {\n\t\tconst guest = await LivechatVisitors.findOneEnabledById(_id, { projection: { _id: 1, token: 1 } });\n\t\tif (!guest) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tawait this.cleanGuestHistory(guest);\n\t\treturn LivechatVisitors.disableById(_id);\n\t}\n\n\tasync cleanGuestHistory(guest: ILivechatVisitor) {\n\t\tconst { token } = guest;\n\n\t\t// This shouldn't be possible, but just in case\n\t\tif (!token) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tconst cursor = LivechatRooms.findByVisitorToken(token);\n\t\tfor await (const room of cursor) {\n\t\t\tawait Promise.all([\n\t\t\t\tSubscriptions.removeByRoomId(room._id, {\n\t\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tFileUpload.removeFilesByRoomId(room._id),\n\t\t\t\tMessages.removeByRoomId(room._id),\n\t\t\t\tReadReceipts.removeByRoomId(room._id),\n\t\t\t]);\n\t\t}\n\n\t\tawait LivechatRooms.removeByVisitorToken(token);\n\n\t\tconst livechatInquiries = await LivechatInquiry.findIdsByVisitorToken(token).toArray();\n\t\tawait LivechatInquiry.removeByIds(livechatInquiries.map(({ _id }) => _id));\n\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiries, 'removed');\n\t}\n\n\tasync deleteMessage({ guest, message }: { guest: ILivechatVisitor; message: IMessage }) {\n\t\tconst deleteAllowed = settings.get<boolean>('Message_AllowDeleting');\n\t\tconst editOwn = message.u && message.u._id === guest._id;\n\n\t\tif (!deleteAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\tawait deleteMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync setUserStatusLivechatIf(userId: string, status: ILivechatAgentStatus, condition?: Filter<IUser>, fields?: AKeyOf<ILivechatAgent>) {\n\t\tconst result = await Users.setLivechatStatusIf(userId, status, condition, fields);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: { ...fields, statusLivechat: status },\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\t\treturn result;\n\t}\n\n\tasync returnRoomAsInquiry(room: IOmnichannelRoom, departmentId?: string, overrideTransferData: any = {}) {\n\t\tthis.logger.debug({ msg: `Transfering room to ${departmentId ? 'department' : ''} queue`, room });\n\t\tif (!room.open) {\n\t\t\tthrow new Meteor.Error('room-closed');\n\t\t}\n\n\t\tif (room.onHold) {\n\t\t\tthrow new Meteor.Error('error-room-onHold');\n\t\t}\n\n\t\tif (!room.servedBy) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst user = await Users.findOneById(room.servedBy._id);\n\t\tif (!user?._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\t// find inquiry corresponding to room\n\t\tconst inquiry = await LivechatInquiry.findOne({ rid: room._id });\n\t\tif (!inquiry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst transferredBy = normalizeTransferredByData(user, room);\n\t\tthis.logger.debug(`Transfering room ${room._id} by user ${transferredBy._id}`);\n\t\tconst transferData = { roomId: room._id, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };\n\t\ttry {\n\t\t\tawait this.saveTransferHistory(room, transferData);\n\t\t\tawait RoutingManager.unassignAgent(inquiry, departmentId);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow new Meteor.Error('error-returning-inquiry');\n\t\t}\n\n\t\tcallbacks.runAsync('livechat:afterReturnRoomAsInquiry', { room });\n\n\t\treturn true;\n\t}\n\n\tasync saveTransferHistory(room: IOmnichannelRoom, transferData: TransferData) {\n\t\tconst { departmentId: previousDepartment } = room;\n\t\tconst { department: nextDepartment, transferredBy, transferredTo, scope, comment } = transferData;\n\n\t\tcheck(\n\t\t\ttransferredBy,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tuserType: String,\n\t\t\t}),\n\t\t);\n\n\t\tconst { _id, username } = transferredBy;\n\t\tconst scopeData = scope || (nextDepartment ? 'department' : 'agent');\n\t\tthis.logger.info(`Storing new chat transfer of ${room._id} [Transfered by: ${_id} to ${scopeData}]`);\n\n\t\tconst transferMessage = {\n\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),\n\t\t\t\t...(nextDepartment && { nextDepartment }),\n\t\t\t\t...(transferredTo && { transferredTo }),\n\t\t\t},\n\t\t};\n\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat_transfer_history', room._id, '', { _id, username }, transferMessage);\n\t}\n\n\tasync saveGuest(guestData: Pick<ILivechatVisitor, '_id' | 'name' | 'livechatData'> & { email?: string; phone?: string }, userId: string) {\n\t\tconst { _id, name, email, phone, livechatData = {} } = guestData;\n\n\t\tconst visitor = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tthis.logger.debug({ msg: 'Saving guest', guestData });\n\t\tconst updateData: {\n\t\t\tname?: string | undefined;\n\t\t\tusername?: string | undefined;\n\t\t\temail?: string | undefined;\n\t\t\tphone?: string | undefined;\n\t\t\tlivechatData: {\n\t\t\t\t[k: string]: any;\n\t\t\t};\n\t\t} = { livechatData: {} };\n\n\t\tif (name) {\n\t\t\tupdateData.name = name;\n\t\t}\n\t\tif (email) {\n\t\t\tupdateData.email = email;\n\t\t}\n\t\tif (phone) {\n\t\t\tupdateData.phone = phone;\n\t\t}\n\n\t\tconst customFields: Record<string, any> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tthis.logger.debug({ msg: `Saving custom fields for visitor ${_id}`, livechatData });\n\t\t\tfor await (const field of LivechatCustomField.findByScope('visitor')) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\tupdateData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields for visitor ${_id}`);\n\t\t}\n\t\tconst ret = await LivechatVisitors.saveGuestById(_id, updateData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tasync setCustomFields({ token, key, value, overwrite }: { key: string; value: string; overwrite: boolean; token: string }) {\n\t\tLivechat.logger.debug(`Setting custom fields data for visitor with token ${token}`);\n\n\t\tconst customField = await LivechatCustomField.findOneById(key);\n\t\tif (!customField) {\n\t\t\tthrow new Error('invalid-custom-field');\n\t\t}\n\n\t\tif (customField.regexp !== undefined && customField.regexp !== '') {\n\t\t\tconst regexp = new RegExp(customField.regexp);\n\t\t\tif (!regexp.test(value)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: key }));\n\t\t\t}\n\t\t}\n\n\t\tlet result;\n\t\tif (customField.scope === 'room') {\n\t\t\tresult = await LivechatRooms.updateDataByToken(token, key, value, overwrite);\n\t\t} else {\n\t\t\tresult = await LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n\t\t}\n\n\t\tif (typeof result === 'boolean') {\n\t\t\t// Note: this only happens when !overwrite is passed, in this case we don't do any db update\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn result.modifiedCount;\n\t}\n\n\tasync requestTranscript({\n\t\trid,\n\t\temail,\n\t\tsubject,\n\t\tuser,\n\t}: {\n\t\trid: string;\n\t\temail: string;\n\t\tsubject: string;\n\t\tuser: AtLeast<IUser, '_id' | 'username' | 'utcOffset' | 'name'>;\n\t}) {\n\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, open: 1, transcriptRequest: 1 } });\n\n\t\tif (!room?.open) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tif (room.transcriptRequest) {\n\t\t\tthrow new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t}\n\n\t\tconst { _id, username, name, utcOffset } = user;\n\t\tconst transcriptRequest = {\n\t\t\trequestedAt: new Date(),\n\t\t\trequestedBy: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\tname,\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t\temail,\n\t\t\tsubject,\n\t\t};\n\n\t\tawait LivechatRooms.setEmailTranscriptRequestedByRoomId(rid, transcriptRequest);\n\t\treturn true;\n\t}\n\n\tasync savePageHistory(token: string, roomId: string | undefined, pageInfo: PageInfo) {\n\t\tthis.logger.debug({\n\t\t\tmsg: `Saving page movement history for visitor with token ${token}`,\n\t\t\tpageInfo,\n\t\t\troomId,\n\t\t});\n\n\t\tif (pageInfo.change !== settings.get<string>('Livechat_history_monitor_type')) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById('rocket.cat');\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst extraData: {\n\t\t\tnavigation: {\n\t\t\t\tpage: PageInfo;\n\t\t\t\ttoken: string;\n\t\t\t};\n\t\t\texpireAt?: number;\n\t\t\t_hidden?: boolean;\n\t\t} = {\n\t\t\tnavigation: {\n\t\t\t\tpage: pageInfo,\n\t\t\t\ttoken,\n\t\t\t},\n\t\t};\n\n\t\tif (!roomId) {\n\t\t\tthis.logger.warn(`Saving page history without room id for visitor with token ${token}`);\n\t\t\t// keep history of unregistered visitors for 1 month\n\t\t\tconst keepHistoryMiliseconds = 2592000000;\n\t\t\textraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n\t\t}\n\n\t\tif (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n\t\t\textraData._hidden = true;\n\t\t}\n\n\t\t// @ts-expect-error: Investigating on which case we won't receive a roomId and where that history is supposed to be stored\n\t\treturn Message.saveSystemMessage('livechat_navigation_history', roomId, `${pageTitle} - ${pageUrl}`, user, extraData);\n\t}\n\n\tasync afterRemoveAgent(user: AtLeast<IUser, '_id' | 'username'>) {\n\t\tawait callbacks.run('livechat.afterAgentRemoved', { agent: user });\n\t\treturn true;\n\t}\n\n\tasync removeAgent(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id } = user;\n\n\t\tif (await removeUserFromRolesAsync(_id, ['livechat-agent'])) {\n\t\t\treturn this.afterRemoveAgent(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync removeManager(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\treturn removeUserFromRolesAsync(user._id, ['livechat-manager']);\n\t}\n\n\tasync getLivechatRoomGuestInfo(room: IOmnichannelRoom) {\n\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tconst agent = room.servedBy?._id ? await Users.findOneById(room.servedBy?._id) : null;\n\n\t\tconst ua = new UAParser();\n\t\tua.setUA(visitor.userAgent || '');\n\n\t\tconst postData: ICRMData = {\n\t\t\t_id: room._id,\n\t\t\tlabel: room.fname || room.label, // using same field for compatibility\n\t\t\ttopic: room.topic,\n\t\t\tcreatedAt: room.ts,\n\t\t\tlastMessageAt: room.lm,\n\t\t\ttags: room.tags,\n\t\t\tcustomFields: room.livechatData,\n\t\t\tvisitor: {\n\t\t\t\t_id: visitor._id,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tname: visitor.name,\n\t\t\t\tusername: visitor.username,\n\t\t\t\tdepartment: visitor.department,\n\t\t\t\tip: visitor.ip,\n\t\t\t\tos: ua.getOS().name && `${ua.getOS().name} ${ua.getOS().version}`,\n\t\t\t\tbrowser: ua.getBrowser().name && `${ua.getBrowser().name} ${ua.getBrowser().version}`,\n\t\t\t\tcustomFields: visitor.livechatData,\n\t\t\t},\n\t\t};\n\n\t\tif (agent) {\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\t...(customFields && { customFields }),\n\t\t\t};\n\n\t\t\tif (agent.emails && agent.emails.length > 0) {\n\t\t\t\tpostData.agent.email = agent.emails[0].address;\n\t\t\t}\n\t\t}\n\n\t\tif (room.crmData) {\n\t\t\tpostData.crmData = room.crmData;\n\t\t}\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n\t\t\tpostData.visitor.email = visitor.visitorEmails;\n\t\t}\n\t\tif (visitor.phone && visitor.phone.length > 0) {\n\t\t\tpostData.visitor.phone = visitor.phone;\n\t\t}\n\n\t\treturn postData;\n\t}\n\n\tasync allowAgentChangeServiceStatus(statusLivechat: ILivechatAgentStatus, agentId: string) {\n\t\tif (statusLivechat !== ILivechatAgentStatus.AVAILABLE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn businessHourManager.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus) {\n\t\tawait LivechatRooms.updateVisitorStatus(token, status);\n\n\t\tconst inquiryVisitorStatus = await LivechatInquiry.updateVisitorStatus(token, status);\n\n\t\tif (inquiryVisitorStatus.modifiedCount) {\n\t\t\tvoid notifyOnLivechatInquiryChangedByToken(token, 'updated', { v: { status } });\n\t\t}\n\t}\n\n\tasync setUserStatusLivechat(userId: string, status: ILivechatAgentStatus) {\n\t\tconst user = await Users.setLivechatStatus(userId, status);\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\n\t\tif (user.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: status,\n\t\t\t\t\tlivechatStatusSystemModified: false,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn user;\n\t}\n\n\tasync afterAgentAdded(user: IUser) {\n\t\tawait Promise.all([\n\t\t\tUsers.setOperator(user._id, true),\n\t\t\tthis.setUserStatusLivechat(user._id, user.status !== 'offline' ? ILivechatAgentStatus.AVAILABLE : ILivechatAgentStatus.NOT_AVAILABLE),\n\t\t]);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\n\t\treturn user;\n\t}\n\n\tasync addAgent(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-agent'])) {\n\t\t\treturn this.afterAgentAdded(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync afterAgentUserActivated(user: IUser) {\n\t\tif (!user.roles.includes('livechat-agent')) {\n\t\t\tthrow new Error('invalid-user-role');\n\t\t}\n\t\tawait Users.setOperator(user._id, true);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\t}\n\n\tasync addManager(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-manager'])) {\n\t\t\treturn user;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync saveRoomInfo(\n\t\troomData: {\n\t\t\t_id: string;\n\t\t\ttopic?: string;\n\t\t\ttags?: string[];\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t\t// For priority and SLA, if the value is blank (ie \"\"), then system will remove the priority or SLA from the room\n\t\t\tpriorityId?: string;\n\t\t\tslaId?: string;\n\t\t},\n\t\tguestData?: {\n\t\t\t_id: string;\n\t\t\tname?: string;\n\t\t\temail?: string;\n\t\t\tphone?: string;\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t},\n\t\tuserId?: string,\n\t) {\n\t\tthis.logger.debug(`Saving room information on room ${roomData._id}`);\n\t\tconst { livechatData = {} } = roomData;\n\t\tconst customFields: Record<string, string> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tconst fields = LivechatCustomField.findByScope('room');\n\t\t\tfor await (const field of fields) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Meteor.Error(i18n.t('error-invalid-custom-field-value', { field: field.label }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\troomData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields on room ${roomData._id}`);\n\t\t}\n\n\t\tawait LivechatRooms.saveRoomById(roomData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id);\n\t\t});\n\n\t\tif (guestData?.name?.trim().length) {\n\t\t\tconst { _id: rid } = roomData;\n\t\t\tconst { name } = guestData;\n\n\t\t\tconst responses = await Promise.all([\n\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t]);\n\n\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t}\n\n\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\tawait notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t}\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(roomData._id);\n\n\t\treturn true;\n\t}\n}\n\nexport const Livechat = new LivechatClass();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/LivechatTyped.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/LivechatTyped.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/LivechatTyped.ts","sourceRoot":"","sources":["app/livechat/server/lib/LivechatTyped.ts"],"names":[],"mappings":"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","sourcesContent":["import dns from 'dns';\nimport * as util from 'util';\n\nimport { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, VideoConf, api, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tIOmnichannelRoom,\n\tIOmnichannelRoomClosingInfo,\n\tIUser,\n\tILivechatVisitor,\n\tSelectedAgent,\n\tILivechatAgent,\n\tIMessage,\n\tILivechatDepartment,\n\tAtLeast,\n\tTransferData,\n\tIOmnichannelAgent,\n\tILivechatInquiryRecord,\n\tILivechatContact,\n\tILivechatContactChannel,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType, ILivechatAgentStatus, UserStatus, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { Logger, type MainLogger } from '@rocket.chat/logger';\nimport {\n\tLivechatDepartment,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tSubscriptions,\n\tLivechatVisitors,\n\tMessages,\n\tUsers,\n\tLivechatDepartmentAgents,\n\tReadReceipts,\n\tRooms,\n\tLivechatCustomField,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter, ClientSession, MongoError } from 'mongodb';\nimport UAParser from 'ua-parser-js';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { client } from '../../../../server/database/utils';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { addUserRolesAsync } from '../../../../server/lib/roles/addUserRoles';\nimport { removeUserFromRolesAsync } from '../../../../server/lib/roles/removeUserFromRoles';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { FileUpload } from '../../../file-upload/server';\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport {\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnLivechatInquiryChangedByRoom,\n\tnotifyOnRoomChangedById,\n\tnotifyOnLivechatInquiryChangedByToken,\n\tnotifyOnUserChange,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport * as Mailer from '../../../mailer/server/api';\nimport { metrics } from '../../../metrics/server';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport { createContact, createContactFromVisitor, isSingleContactEnabled } from './Contacts';\nimport { parseAgentCustomFields, updateDepartmentAgents, validateEmail, normalizeTransferredByData } from './Helper';\nimport { QueueManager } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport type { CloseRoomParams, CloseRoomParamsByUser, CloseRoomParamsByVisitor, ILivechatMessage } from './localTypes';\nimport { parseTranscriptRequest } from './parseTranscriptRequest';\n\ntype RegisterGuestType = Partial<Pick<ILivechatVisitor, 'token' | 'name' | 'department' | 'status' | 'username' | 'source'>> & {\n\tid?: string;\n\tconnectionData?: any;\n\temail?: string;\n\tphone?: { number: string };\n};\n\ntype OfflineMessageData = {\n\tmessage: string;\n\tname: string;\n\temail: string;\n\tdepartment?: string;\n\thost?: string;\n};\n\ntype AKeyOf<T> = {\n\t[K in keyof T]?: T[K];\n};\n\ntype PageInfo = { title: string; location: { href: string }; change: string };\n\ntype ICRMData = {\n\t_id: string;\n\tlabel?: string;\n\ttopic?: string;\n\tcreatedAt: Date;\n\tlastMessageAt?: Date;\n\ttags?: string[];\n\tcustomFields?: IOmnichannelRoom['livechatData'];\n\tvisitor: Pick<ILivechatVisitor, '_id' | 'token' | 'name' | 'username' | 'department' | 'phone' | 'ip'> & {\n\t\temail?: ILivechatVisitor['visitorEmails'];\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tcustomFields: ILivechatVisitor['livechatData'];\n\t};\n\tagent?: Pick<IOmnichannelAgent, '_id' | 'username' | 'name' | 'customFields'> & {\n\t\temail?: NonNullable<IOmnichannelAgent['emails']>[number]['address'];\n\t};\n\tcrmData?: IOmnichannelRoom['crmData'];\n};\n\ntype ChatCloser = { _id: string; username: string | undefined };\n\nconst isRoomClosedByUserParams = (params: CloseRoomParams): params is CloseRoomParamsByUser =>\n\t(params as CloseRoomParamsByUser).user !== undefined;\nconst isRoomClosedByVisitorParams = (params: CloseRoomParams): params is CloseRoomParamsByVisitor =>\n\t(params as CloseRoomParamsByVisitor).visitor !== undefined;\n\nconst dnsResolveMx = util.promisify(dns.resolveMx);\n\nclass LivechatClass {\n\tlogger: Logger;\n\n\twebhookLogger: MainLogger;\n\n\tconstructor() {\n\t\tthis.logger = new Logger('Livechat');\n\t\tthis.webhookLogger = this.logger.section('Webhook');\n\t}\n\n\tasync online(department?: string, skipNoAgentSetting = false, skipFallbackCheck = false): Promise<boolean> {\n\t\tLivechat.logger.debug(`Checking online agents ${department ? `for department ${department}` : ''}`);\n\t\tif (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tLivechat.logger.debug('Can accept without online agents: true');\n\t\t\treturn true;\n\t\t}\n\n\t\tif (settings.get('Livechat_assign_new_conversation_to_bot')) {\n\t\t\tLivechat.logger.debug(`Fetching online bot agents for department ${department}`);\n\t\t\tconst botAgents = await Livechat.getBotAgents(department);\n\t\t\tif (botAgents) {\n\t\t\t\tconst onlineBots = await botAgents.count();\n\t\t\t\tthis.logger.debug(`Found ${onlineBots} online`);\n\t\t\t\tif (onlineBots > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst agentsOnline = await this.checkOnlineAgents(department, undefined, skipFallbackCheck);\n\t\tLivechat.logger.debug(`Are online agents ${department ? `for department ${department}` : ''}?: ${agentsOnline}`);\n\t\treturn agentsOnline;\n\t}\n\n\tasync closeRoom(params: CloseRoomParams, attempts = 2): Promise<void> {\n\t\tlet newRoom: IOmnichannelRoom;\n\t\tlet chatCloser: ChatCloser;\n\t\tlet removedInquiryObj: ILivechatInquiryRecord | null;\n\n\t\tconst session = client.startSession();\n\t\ttry {\n\t\t\tsession.startTransaction();\n\t\t\tconst { room, closedBy, removedInquiry } = await this.doCloseRoom(params, session);\n\t\t\tawait session.commitTransaction();\n\n\t\t\tnewRoom = room;\n\t\t\tchatCloser = closedBy;\n\t\t\tremovedInquiryObj = removedInquiry;\n\t\t} catch (e) {\n\t\t\tthis.logger.error({ err: e, msg: 'Failed to close room', afterAttempts: attempts });\n\t\t\tawait session.abortTransaction();\n\t\t\t// Dont propagate transaction errors\n\t\t\tif (\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('UnknownTransactionCommitResult') ||\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('TransientTransactionError')\n\t\t\t) {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tthis.logger.debug(`Retrying close room because of transient error. Attempts left: ${attempts}`);\n\t\t\t\t\treturn this.closeRoom(params, attempts - 1);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('error-room-cannot-be-closed-try-again');\n\t\t\t}\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tawait session.endSession();\n\t\t}\n\n\t\t// Note: when reaching this point, the room has been closed\n\t\t// Transaction is commited and so these messages can be sent here.\n\t\treturn this.afterRoomClosed(newRoom, chatCloser, removedInquiryObj, params);\n\t}\n\n\tasync afterRoomClosed(\n\t\tnewRoom: IOmnichannelRoom,\n\t\tchatCloser: ChatCloser,\n\t\tinquiry: ILivechatInquiryRecord | null,\n\t\tparams: CloseRoomParams,\n\t): Promise<void> {\n\t\tif (!chatCloser) {\n\t\t\t// this should never happen\n\t\t\treturn;\n\t\t}\n\t\t// Note: we are okay with these messages being sent outside of the transaction. The process of sending a message\n\t\t// is huge and involves multiple db calls. Making it transactionable this way would be really hard.\n\t\t// And passing just _some_ actions to the transaction creates some deadlocks since messages are updated in the afterSaveMessages callbacks.\n\t\tconst transcriptRequested =\n\t\t\t!!params.room.transcriptRequest || (!settings.get('Livechat_enable_transcript') && settings.get('Livechat_transcript_send_always'));\n\t\tthis.logger.debug(`Sending closing message to room ${newRoom._id}`);\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat-close', newRoom._id, params.comment ?? '', chatCloser, {\n\t\t\tgroupable: false,\n\t\t\ttranscriptRequested,\n\t\t\t...(isRoomClosedByVisitorParams(params) && { token: params.visitor.token }),\n\t\t});\n\n\t\tif (settings.get('Livechat_enable_transcript') && !settings.get('Livechat_transcript_send_always')) {\n\t\t\tawait Message.saveSystemMessage('command', newRoom._id, 'promptTranscript', chatCloser);\n\t\t}\n\n\t\tthis.logger.debug(`Running callbacks for room ${newRoom._id}`);\n\n\t\tprocess.nextTick(() => {\n\t\t\t/**\n\t\t\t * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n\t\t\t * in the next major version of the Apps-Engine\n\t\t\t */\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, newRoom);\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, newRoom);\n\t\t});\n\n\t\tconst visitor = isRoomClosedByVisitorParams(params) ? params.visitor : undefined;\n\t\tconst opts = await parseTranscriptRequest(params.room, params.options, visitor);\n\t\tif (process.env.TEST_MODE) {\n\t\t\tawait callbacks.run('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t} else {\n\t\t\tcallbacks.runAsync('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(newRoom._id);\n\t\tif (inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tthis.logger.debug(`Room ${newRoom._id} was closed`);\n\t}\n\n\tasync doCloseRoom(\n\t\tparams: CloseRoomParams,\n\t\tsession: ClientSession,\n\t): Promise<{ room: IOmnichannelRoom; closedBy: ChatCloser; removedInquiry: ILivechatInquiryRecord | null }> {\n\t\tconst { comment } = params;\n\t\tconst { room } = params;\n\n\t\tthis.logger.debug(`Attempting to close room ${room._id}`);\n\t\tif (!room || !isOmnichannelRoom(room) || !room.open) {\n\t\t\tthis.logger.debug(`Room ${room._id} is not open`);\n\t\t\tthrow new Error('error-room-closed');\n\t\t}\n\n\t\tconst commentRequired = settings.get('Livechat_request_comment_when_closing_conversation');\n\t\tif (commentRequired && !comment?.trim()) {\n\t\t\tthrow new Error('error-comment-is-required');\n\t\t}\n\n\t\tconst { updatedOptions: options } = await this.resolveChatTags(room, params.options);\n\t\tthis.logger.debug(`Resolved chat tags for room ${room._id}`);\n\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy } = room;\n\t\tconst serviceTimeDuration = servedBy && (now.getTime() - new Date(servedBy.ts).getTime()) / 1000;\n\n\t\tconst closeData: IOmnichannelRoomClosingInfo = {\n\t\t\tclosedAt: now,\n\t\t\tchatDuration: (now.getTime() - new Date(room.ts).getTime()) / 1000,\n\t\t\t...(serviceTimeDuration && { serviceTimeDuration }),\n\t\t\t...options,\n\t\t};\n\t\tthis.logger.debug(`Room ${room._id} was closed at ${closeData.closedAt} (duration ${closeData.chatDuration})`);\n\n\t\tif (isRoomClosedByUserParams(params)) {\n\t\t\tconst { user } = params;\n\t\t\tthis.logger.debug(`Closing by user ${user?._id}`);\n\t\t\tcloseData.closer = 'user';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: user?._id || '',\n\t\t\t\tusername: user?.username,\n\t\t\t};\n\t\t} else if (isRoomClosedByVisitorParams(params)) {\n\t\t\tconst { visitor } = params;\n\t\t\tthis.logger.debug(`Closing by visitor ${params.visitor._id}`);\n\t\t\tcloseData.closer = 'visitor';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new Error('Error: Please provide details of the user or visitor who closed the room');\n\t\t}\n\n\t\tthis.logger.debug(`Updating DB for room ${room._id} with close data`);\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { session });\n\t\tconst removedInquiry = await LivechatInquiry.removeByRoomId(rid, { session });\n\t\tif (removedInquiry && removedInquiry.deletedCount !== 1) {\n\t\t\tthrow new Error('Error removing inquiry');\n\t\t}\n\n\t\tconst updatedRoom = await LivechatRooms.closeRoomById(rid, closeData, { session });\n\t\tif (!updatedRoom || updatedRoom.modifiedCount !== 1) {\n\t\t\tthrow new Error('Error closing room');\n\t\t}\n\n\t\tconst subs = await Subscriptions.countByRoomId(rid, { session });\n\t\tconst removedSubs = await Subscriptions.removeByRoomId(rid, {\n\t\t\tasync onTrash(doc) {\n\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t},\n\t\t\tsession,\n\t\t});\n\n\t\tif (removedSubs.deletedCount !== subs) {\n\t\t\tthrow new Error('Error removing subscriptions');\n\t\t}\n\n\t\tthis.logger.debug(`DB updated for room ${room._id}`);\n\n\t\t// Retrieve the closed room\n\t\tconst newRoom = await LivechatRooms.findOneById(rid, { session });\n\t\tif (!newRoom) {\n\t\t\tthrow new Error('Error: Room not found');\n\t\t}\n\n\t\treturn { room: newRoom, closedBy: closeData.closedBy, removedInquiry: inquiry };\n\t}\n\n\tasync getRequiredDepartment(onlineRequired = true) {\n\t\tconst departments = LivechatDepartment.findEnabledWithAgents();\n\n\t\tfor await (const dept of departments) {\n\t\t\tif (!dept.showOnRegistration) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!onlineRequired) {\n\t\t\t\treturn dept;\n\t\t\t}\n\n\t\t\tconst onlineAgents = await LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n\t\t\tif (onlineAgents && (await onlineAgents.count())) {\n\t\t\t\treturn dept;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync createRoom({\n\t\tvisitor,\n\t\tmessage,\n\t\trid,\n\t\troomInfo,\n\t\tagent,\n\t\textraData,\n\t}: {\n\t\tvisitor: ILivechatVisitor;\n\t\tmessage?: string;\n\t\trid?: string;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t\textraData?: Record<string, unknown>;\n\t}) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\n\t\tconst defaultAgent = await callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, visitor);\n\t\t// if no department selected verify if there is at least one active and pick the first\n\t\tif (!defaultAgent && !visitor.department) {\n\t\t\tconst department = await this.getRequiredDepartment();\n\t\t\tLivechat.logger.debug(`No department or default agent selected for ${visitor._id}`);\n\n\t\t\tif (department) {\n\t\t\t\tLivechat.logger.debug(`Assigning ${visitor._id} to department ${department._id}`);\n\t\t\t\tvisitor.department = department._id;\n\t\t\t}\n\t\t}\n\n\t\t// delegate room creation to QueueManager\n\t\tLivechat.logger.debug(`Calling QueueManager to request a room for visitor ${visitor._id}`);\n\n\t\tconst room = await QueueManager.requestRoom({\n\t\t\tguest: visitor,\n\t\t\tmessage,\n\t\t\trid,\n\t\t\troomInfo,\n\t\t\tagent: defaultAgent,\n\t\t\textraData,\n\t\t});\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tlet { contactId } = visitor;\n\n\t\t\tif (!contactId) {\n\t\t\t\tconst visitorContact = await LivechatVisitors.findOne<\n\t\t\t\t\tPick<ILivechatVisitor, 'name' | 'contactManager' | 'livechatData' | 'phone' | 'visitorEmails' | 'username' | 'contactId'>\n\t\t\t\t>(visitor._id, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\t\tphone: 1,\n\t\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\tcontactId: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tcontactId = visitorContact?.contactId;\n\t\t\t}\n\n\t\t\tif (!contactId) {\n\t\t\t\t// ensure that old visitors have a contact\n\t\t\t\tcontactId = await createContactFromVisitor(visitor);\n\t\t\t}\n\n\t\t\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id' | 'channels'>>(contactId, {\n\t\t\t\tprojection: { _id: 1, channels: 1 },\n\t\t\t});\n\n\t\t\tif (contact) {\n\t\t\t\tconst channel = contact.channels?.find(\n\t\t\t\t\t(channel: ILivechatContactChannel) => channel.name === roomInfo.source?.type && channel.visitorId === visitor._id,\n\t\t\t\t);\n\n\t\t\t\tif (!channel) {\n\t\t\t\t\tLivechat.logger.debug(`Adding channel for contact ${contact._id}`);\n\n\t\t\t\t\tawait LivechatContacts.addChannel(contact._id, {\n\t\t\t\t\t\tname: roomInfo.source?.label || roomInfo.source?.type.toString() || OmnichannelSourceType.OTHER,\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tblocked: false,\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tdetails: roomInfo.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLivechat.logger.debug(`Room obtained for visitor ${visitor._id} -> ${room._id}`);\n\n\t\tawait Messages.setRoomIdByToken(visitor.token, room._id);\n\n\t\treturn room;\n\t}\n\n\tasync getRoom<\n\t\tE extends Record<string, unknown> & {\n\t\t\tsla?: string;\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t>(\n\t\tguest: ILivechatVisitor,\n\t\tmessage: Pick<IMessage, 'rid' | 'msg' | 'token'>,\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t},\n\t\tagent?: SelectedAgent,\n\t\textraData?: E,\n\t) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\t\tLivechat.logger.debug(`Attempting to find or create a room for visitor ${guest._id}`);\n\t\tconst room = await LivechatRooms.findOneById(message.rid);\n\n\t\tif (room && !room.open) {\n\t\t\tLivechat.logger.debug(`Last room for visitor ${guest._id} closed. Creating new one`);\n\t\t}\n\n\t\tif (!room?.open) {\n\t\t\treturn {\n\t\t\t\troom: await this.createRoom({ visitor: guest, message: message.msg, roomInfo, agent, extraData }),\n\t\t\t\tnewRoom: true,\n\t\t\t};\n\t\t}\n\n\t\tif (room.v.token !== guest.token) {\n\t\t\tLivechat.logger.debug(`Visitor ${guest._id} trying to access another visitor's room`);\n\t\t\tthrow new Meteor.Error('cannot-access-room');\n\t\t}\n\n\t\treturn { room, newRoom: false };\n\t}\n\n\tasync checkOnlineAgents(department?: string, agent?: { agentId: string }, skipFallbackCheck = false): Promise<boolean> {\n\t\tif (agent?.agentId) {\n\t\t\treturn Users.checkOnlineAgents(agent.agentId);\n\t\t}\n\n\t\tif (department) {\n\t\t\tconst onlineForDep = await LivechatDepartmentAgents.checkOnlineForDepartment(department);\n\t\t\tif (onlineForDep || skipFallbackCheck) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(department, {\n\t\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t\t});\n\t\t\tif (!dep?.fallbackForwardDepartment) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\treturn this.checkOnlineAgents(dep?.fallbackForwardDepartment);\n\t\t}\n\n\t\treturn Users.checkOnlineAgents();\n\t}\n\n\tasync setDepartmentForGuest({ token, department }: { token: string; department: string }) {\n\t\tcheck(token, String);\n\t\tcheck(department, String);\n\n\t\tLivechat.logger.debug(`Switching departments for user with token ${token} (to ${department})`);\n\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id'>>(department, { projection: { _id: 1 } });\n\t\tif (!dep) {\n\t\t\tthrow new Meteor.Error('invalid-department', 'Provided department does not exists');\n\t\t}\n\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token', 'Provided token is invalid');\n\t\t}\n\t\tawait LivechatVisitors.updateById(visitor._id, updateUser);\n\t}\n\n\tasync removeRoom(rid: string) {\n\t\tLivechat.logger.debug(`Deleting room ${rid}`);\n\t\tcheck(rid, String);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid);\n\n\t\tconst result = await Promise.allSettled([\n\t\t\tMessages.removeByRoomId(rid),\n\t\t\tReadReceipts.removeByRoomId(rid),\n\t\t\tSubscriptions.removeByRoomId(rid, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tLivechatInquiry.removeByRoomId(rid),\n\t\t\tLivechatRooms.removeById(rid),\n\t\t]);\n\n\t\tif (result[3]?.status === 'fulfilled' && result[3].value?.deletedCount && inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tfor (const r of result) {\n\t\t\tif (r.status === 'rejected') {\n\t\t\t\tthis.logger.error(`Error removing room ${rid}: ${r.reason}`);\n\t\t\t\tthrow new Meteor.Error('error-removing-room', 'Error removing room');\n\t\t\t}\n\t\t}\n\t}\n\n\tisValidObject(obj: unknown): obj is Record<string, any> {\n\t\treturn typeof obj === 'object' && obj !== null;\n\t}\n\n\tasync registerGuest({\n\t\tid,\n\t\ttoken,\n\t\tname,\n\t\tphone,\n\t\temail,\n\t\tdepartment,\n\t\tusername,\n\t\tconnectionData,\n\t\tstatus = UserStatus.ONLINE,\n\t\tsource,\n\t}: RegisterGuestType): Promise<ILivechatVisitor | null> {\n\t\tcheck(token, String);\n\t\tcheck(id, Match.Maybe(String));\n\n\t\tLivechat.logger.debug(`New incoming conversation: id: ${id} | token: ${token}`);\n\n\t\tconst visitorDataToUpdate: Partial<ILivechatVisitor> & { userAgent?: string; ip?: string; host?: string } = {\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tsource,\n\t\t\t...(phone?.number ? { phone: [{ phoneNumber: phone.number }] } : {}),\n\t\t\t...(name ? { name } : {}),\n\t\t};\n\n\t\tif (email) {\n\t\t\tconst visitorEmail = email.trim().toLowerCase();\n\t\t\tvalidateEmail(visitorEmail);\n\t\t\tvisitorDataToUpdate.visitorEmails = [{ address: visitorEmail }];\n\t\t}\n\n\t\tconst livechatVisitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (livechatVisitor?.department !== department && department) {\n\t\t\tLivechat.logger.debug(`Attempt to find a department with id/name ${department}`);\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { _id: 1 } });\n\t\t\tif (!dep) {\n\t\t\t\tLivechat.logger.debug(`Invalid department provided: ${department}`);\n\t\t\t\tthrow new Meteor.Error('error-invalid-department', 'The provided department is invalid');\n\t\t\t}\n\t\t\tLivechat.logger.debug(`Assigning visitor ${token} to department ${dep._id}`);\n\t\t\tvisitorDataToUpdate.department = dep._id;\n\t\t}\n\n\t\tvisitorDataToUpdate.token = livechatVisitor?.token || token;\n\n\t\tlet existingUser = null;\n\n\t\tif (livechatVisitor) {\n\t\t\tLivechat.logger.debug('Found matching user by token');\n\t\t\tvisitorDataToUpdate._id = livechatVisitor._id;\n\t\t} else if (phone?.number && (existingUser = await LivechatVisitors.findOneVisitorByPhone(phone.number))) {\n\t\t\tLivechat.logger.debug('Found matching user by phone number');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t\t// Don't change token when matching by phone number, use current visitor token\n\t\t\tvisitorDataToUpdate.token = existingUser.token;\n\t\t} else if (email && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(email))) {\n\t\t\tLivechat.logger.debug('Found matching user by email');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t} else if (!livechatVisitor) {\n\t\t\tLivechat.logger.debug(`No matches found. Attempting to create new user with token ${token}`);\n\n\t\t\tvisitorDataToUpdate._id = id || undefined;\n\t\t\tvisitorDataToUpdate.username = username || (await LivechatVisitors.getNextVisitorUsername());\n\t\t\tvisitorDataToUpdate.status = status;\n\t\t\tvisitorDataToUpdate.ts = new Date();\n\t\t\tvisitorDataToUpdate.source = source;\n\n\t\t\tif (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations') && Livechat.isValidObject(connectionData)) {\n\t\t\t\tLivechat.logger.debug(`Saving connection data for visitor ${token}`);\n\t\t\t\tconst { httpHeaders, clientAddress } = connectionData;\n\t\t\t\tif (Livechat.isValidObject(httpHeaders)) {\n\t\t\t\t\tvisitorDataToUpdate.userAgent = httpHeaders['user-agent'];\n\t\t\t\t\tvisitorDataToUpdate.ip = httpHeaders['x-real-ip'] || httpHeaders['x-forwarded-for'] || clientAddress;\n\t\t\t\t\tvisitorDataToUpdate.host = httpHeaders?.host;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tconst contactId = await createContact({\n\t\t\t\tname: name ?? (visitorDataToUpdate.username as string),\n\t\t\t\temails: email ? [email] : [],\n\t\t\t\tphones: phone ? [phone.number] : [],\n\t\t\t\tunknown: true,\n\t\t\t});\n\t\t\tvisitorDataToUpdate.contactId = contactId;\n\t\t}\n\n\t\tconst upsertedLivechatVisitor = await LivechatVisitors.updateOneByIdOrToken(visitorDataToUpdate, {\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t});\n\n\t\tif (!upsertedLivechatVisitor.value) {\n\t\t\tLivechat.logger.debug(`No visitor found after upsert`);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn upsertedLivechatVisitor.value;\n\t}\n\n\tprivate async getBotAgents(department?: string) {\n\t\tif (department) {\n\t\t\treturn LivechatDepartmentAgents.getBotsForDepartment(department);\n\t\t}\n\n\t\treturn Users.findBotAgents();\n\t}\n\n\tprivate async resolveChatTags(\n\t\troom: IOmnichannelRoom,\n\t\toptions: CloseRoomParams['options'] = {},\n\t): Promise<{ updatedOptions: CloseRoomParams['options'] }> {\n\t\tthis.logger.debug(`Resolving chat tags for room ${room._id}`);\n\n\t\tconst concatUnique = (...arrays: (string[] | undefined)[]): string[] => [\n\t\t\t...new Set(([] as string[]).concat(...arrays.filter((a): a is string[] => !!a))),\n\t\t];\n\n\t\tconst { departmentId, tags: optionsTags } = room;\n\t\tconst { clientAction, tags: oldRoomTags } = options;\n\t\tconst roomTags = concatUnique(oldRoomTags, optionsTags);\n\n\t\tif (!departmentId) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'requestTagBeforeClosingChat' | 'chatClosingTags'>>(\n\t\t\tdepartmentId,\n\t\t\t{\n\t\t\t\tprojection: { requestTagBeforeClosingChat: 1, chatClosingTags: 1 },\n\t\t\t},\n\t\t);\n\t\tif (!department) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst { requestTagBeforeClosingChat, chatClosingTags } = department;\n\t\tconst extraRoomTags = concatUnique(roomTags, chatClosingTags);\n\n\t\tif (!requestTagBeforeClosingChat) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst checkRoomTags = !clientAction || (roomTags && roomTags.length > 0);\n\t\tconst checkDepartmentTags = chatClosingTags && chatClosingTags.length > 0;\n\t\tif (!checkRoomTags || !checkDepartmentTags) {\n\t\t\tthrow new Error('error-tags-must-be-assigned-before-closing-chat');\n\t\t}\n\n\t\treturn {\n\t\t\tupdatedOptions: {\n\t\t\t\t...options,\n\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate async sendEmail(from: string, to: string, replyTo: string, subject: string, html: string): Promise<void> {\n\t\tawait Mailer.send({\n\t\t\tto,\n\t\t\tfrom,\n\t\t\treplyTo,\n\t\t\tsubject,\n\t\t\thtml,\n\t\t});\n\t}\n\n\tasync sendRequest(\n\t\tpostData: {\n\t\t\ttype: string;\n\t\t\t[key: string]: any;\n\t\t},\n\t\tattempts = 10,\n\t) {\n\t\tif (!attempts) {\n\t\t\tLivechat.logger.error({ msg: 'Omnichannel webhook call failed. Max attempts reached' });\n\t\t\treturn;\n\t\t}\n\t\tconst timeout = settings.get<number>('Livechat_http_timeout');\n\t\tconst secretToken = settings.get<string>('Livechat_secret_token');\n\t\tconst webhookUrl = settings.get<string>('Livechat_webhookUrl');\n\t\ttry {\n\t\t\tLivechat.webhookLogger.debug({ msg: 'Sending webhook request', postData });\n\t\t\tconst result = await fetch(webhookUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...(secretToken && { 'X-RocketChat-Livechat-Token': secretToken }),\n\t\t\t\t},\n\t\t\t\tbody: postData,\n\t\t\t\ttimeout,\n\t\t\t});\n\n\t\t\tif (result.status === 200) {\n\t\t\t\tmetrics.totalLivechatWebhooksSuccess.inc();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tmetrics.totalLivechatWebhooksFailures.inc();\n\t\t\tthrow new Error(await result.text());\n\t\t} catch (err) {\n\t\t\tconst retryAfter = timeout * 4;\n\t\t\tLivechat.webhookLogger.error({ msg: `Error response on ${11 - attempts} try ->`, err });\n\t\t\t// try 10 times after 20 seconds each\n\t\t\tattempts - 1 &&\n\t\t\t\tLivechat.webhookLogger.warn({ msg: `Webhook call failed. Retrying`, newAttemptAfterSeconds: retryAfter / 1000, webhookUrl });\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait Livechat.sendRequest(postData, attempts - 1);\n\t\t\t}, retryAfter);\n\t\t}\n\t}\n\n\tasync saveAgentInfo(_id: string, agentData: any, agentDepartments: string[]) {\n\t\tcheck(_id, String);\n\t\tcheck(agentData, Object);\n\t\tcheck(agentDepartments, [String]);\n\n\t\tconst user = await Users.findOneById(_id);\n\t\tif (!user || !(await hasRoleAsync(_id, 'livechat-agent'))) {\n\t\t\tthrow new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent');\n\t\t}\n\n\t\tawait Users.setLivechatData(_id, agentData);\n\n\t\tconst currentDepartmentsForAgent = await LivechatDepartmentAgents.findByAgentId(_id).toArray();\n\n\t\tconst toRemoveIds = currentDepartmentsForAgent\n\t\t\t.filter((dept) => !agentDepartments.includes(dept.departmentId))\n\t\t\t.map((dept) => dept.departmentId);\n\t\tconst toAddIds = agentDepartments.filter((d) => !currentDepartmentsForAgent.some((c) => c.departmentId === d));\n\n\t\tawait Promise.all(\n\t\t\tawait LivechatDepartment.findInIds([...toRemoveIds, ...toAddIds], {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tenabled: 1,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.map((dep) => {\n\t\t\t\t\treturn updateDepartmentAgents(\n\t\t\t\t\t\tdep._id,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...(toRemoveIds.includes(dep._id) ? { remove: [{ agentId: _id }] } : { upsert: [{ agentId: _id, count: 0, order: 0 }] }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdep.enabled,\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.toArray(),\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tasync updateCallStatus(callId: string, rid: string, status: 'ended' | 'declined', user: IUser | ILivechatVisitor) {\n\t\tawait Rooms.setCallStatus(rid, status);\n\t\tif (status === 'ended' || status === 'declined') {\n\t\t\tif (await VideoConf.declineLivechatCall(callId)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn updateMessage({ _id: callId, msg: status, actionLinks: [], webRtcCallEndTs: new Date(), rid }, user as unknown as IUser);\n\t\t}\n\t}\n\n\tnotifyRoomVisitorChange(roomId: string, visitor: ILivechatVisitor) {\n\t\tvoid api.broadcast('omnichannel.room', roomId, {\n\t\t\ttype: 'visitorData',\n\t\t\tvisitor,\n\t\t});\n\t}\n\n\tasync changeRoomVisitor(userId: string, room: IOmnichannelRoom, visitor: ILivechatVisitor) {\n\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-not-found');\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\tthrow new Error('error-not-allowed');\n\t\t}\n\n\t\tawait LivechatRooms.changeVisitorByRoomId(room._id, visitor);\n\n\t\tthis.notifyRoomVisitorChange(room._id, visitor);\n\n\t\treturn LivechatRooms.findOneById(room._id);\n\t}\n\n\tasync notifyAgentStatusChanged(userId: string, status?: UserStatus) {\n\t\tif (!status) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid callbacks.runAsync('livechat.agentStatusChanged', { userId, status });\n\t\tif (!settings.get('Livechat_show_agent_info')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tvoid api.broadcast('omnichannel.room', room._id, {\n\t\t\t\ttype: 'agentStatus',\n\t\t\t\tstatus,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync updateMessage({ guest, message }: { guest: ILivechatVisitor; message: AtLeast<IMessage, '_id' | 'msg' | 'rid'> }) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\n\t\tconst originalMessage = await Messages.findOneById<Pick<IMessage, 'u' | '_id'>>(message._id, { projection: { u: 1 } });\n\t\tif (!originalMessage?._id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editAllowed = settings.get('Message_AllowEditing');\n\t\tconst editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n\n\t\tif (!editAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\t// TODO: Apps sends an `any` object and apparently we just check for _id being present\n\t\t// while updateMessage expects AtLeast<id, msg, rid>\n\t\tawait updateMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync closeOpenChats(userId: string, comment?: string) {\n\t\tthis.logger.debug(`Closing open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyDepartmentRestrictions', {}, { userId });\n\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait openChats.forEach((room) => {\n\t\t\tpromises.push(this.closeRoom({ user, room, comment }));\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync transfer(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) {\n\t\tthis.logger.debug(`Transfering room ${room._id} [Transfered by: ${transferData?.transferredBy?._id}]`);\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-onHold');\n\t\t}\n\n\t\tif (transferData.departmentId) {\n\t\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'name' | '_id'>>(transferData.departmentId, {\n\t\t\t\tprojection: { name: 1 },\n\t\t\t});\n\t\t\tif (!department) {\n\t\t\t\tthrow new Error('error-invalid-department');\n\t\t\t}\n\n\t\t\ttransferData.department = department;\n\t\t\tthis.logger.debug(`Transfering room ${room._id} to department ${transferData.department?._id}`);\n\t\t}\n\n\t\treturn RoutingManager.transferRoom(room, guest, transferData);\n\t}\n\n\tasync forwardOpenChats(userId: string) {\n\t\tthis.logger.debug(`Transferring open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id, username, name } = user;\n\t\tfor await (const room of LivechatRooms.findOpenByAgent(userId)) {\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\t\tif (!guest) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tawait this.transfer(room, guest, {\n\t\t\t\ttransferredBy,\n\t\t\t\tdepartmentId: guest.department,\n\t\t\t});\n\t\t}\n\t}\n\n\tshowConnecting() {\n\t\treturn RoutingManager.getConfig()?.showConnecting || false;\n\t}\n\n\tasync getInitSettings() {\n\t\tconst validSettings = [\n\t\t\t'Livechat_title',\n\t\t\t'Livechat_title_color',\n\t\t\t'Livechat_enable_message_character_limit',\n\t\t\t'Livechat_message_character_limit',\n\t\t\t'Message_MaxAllowedSize',\n\t\t\t'Livechat_enabled',\n\t\t\t'Livechat_registration_form',\n\t\t\t'Livechat_allow_switching_departments',\n\t\t\t'Livechat_offline_title',\n\t\t\t'Livechat_offline_title_color',\n\t\t\t'Livechat_offline_message',\n\t\t\t'Livechat_offline_success_message',\n\t\t\t'Livechat_offline_form_unavailable',\n\t\t\t'Livechat_display_offline_form',\n\t\t\t'Omnichannel_call_provider',\n\t\t\t'Language',\n\t\t\t'Livechat_enable_transcript',\n\t\t\t'Livechat_transcript_message',\n\t\t\t'Livechat_fileupload_enabled',\n\t\t\t'FileUpload_Enabled',\n\t\t\t'Livechat_conversation_finished_message',\n\t\t\t'Livechat_conversation_finished_text',\n\t\t\t'Livechat_name_field_registration_form',\n\t\t\t'Livechat_email_field_registration_form',\n\t\t\t'Livechat_registration_form_message',\n\t\t\t'Livechat_force_accept_data_processing_consent',\n\t\t\t'Livechat_data_processing_consent_text',\n\t\t\t'Livechat_show_agent_info',\n\t\t\t'Livechat_clear_local_storage_when_chat_ended',\n\t\t\t'Livechat_history_monitor_type',\n\t\t\t'Livechat_hide_system_messages',\n\t\t\t'Livechat_widget_position',\n\t\t\t'Livechat_background',\n\t\t\t'Assets_livechat_widget_logo',\n\t\t\t'Livechat_hide_watermark',\n\t\t\t'Omnichannel_allow_visitors_to_close_conversation',\n\t\t] as const;\n\n\t\ttype SettingTypes = (typeof validSettings)[number] | 'Livechat_Show_Connecting';\n\n\t\tconst rcSettings = validSettings.reduce<Record<SettingTypes, string | boolean>>((acc, setting) => {\n\t\t\tacc[setting] = settings.get(setting);\n\t\t\treturn acc;\n\t\t}, {} as any);\n\n\t\trcSettings.Livechat_Show_Connecting = this.showConnecting();\n\n\t\treturn rcSettings;\n\t}\n\n\tasync sendOfflineMessage(data: OfflineMessageData) {\n\t\tif (!settings.get('Livechat_display_offline_form')) {\n\t\t\tthrow new Error('error-offline-form-disabled');\n\t\t}\n\n\t\tconst { message, name, email, department, host } = data;\n\n\t\tif (!email) {\n\t\t\tthrow new Error('error-invalid-email');\n\t\t}\n\n\t\tconst emailMessage = `${message}`.replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n\n\t\tlet html = '<h1>New livechat message</h1>';\n\t\tif (host && host !== '') {\n\t\t\thtml = html.concat(`<p><strong>Sent from:</strong><a href='${host}'> ${host}</a></p>`);\n\t\t}\n\t\thtml = html.concat(`\n\t\t\t<p><strong>Visitor name:</strong> ${name}</p>\n\t\t\t<p><strong>Visitor email:</strong> ${email}</p>\n\t\t\t<p><strong>Message:</strong><br>${emailMessage}</p>`);\n\n\t\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n\t\tlet from: string;\n\t\tif (fromEmail) {\n\t\t\tfrom = fromEmail[0];\n\t\t} else {\n\t\t\tfrom = settings.get<string>('From_Email');\n\t\t}\n\n\t\tif (settings.get('Livechat_validate_offline_email')) {\n\t\t\tconst emailDomain = email.substr(email.lastIndexOf('@') + 1);\n\n\t\t\ttry {\n\t\t\t\tawait dnsResolveMx(emailDomain);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-email-address');\n\t\t\t}\n\t\t}\n\n\t\t// TODO Block offline form if Livechat_offline_email is undefined\n\t\t// (it does not make sense to have an offline form that does nothing)\n\t\t// `this.sendEmail` will throw an error if the email is invalid\n\t\t// thus this breaks livechat, since the \"to\" email is invalid, and that returns an [invalid email] error to the livechat client\n\t\tlet emailTo = settings.get<string>('Livechat_offline_email');\n\t\tif (department && department !== '') {\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { email: 1 } });\n\t\t\tif (dep) {\n\t\t\t\temailTo = dep.email || emailTo;\n\t\t\t}\n\t\t}\n\n\t\tconst fromText = `${name} - ${email} <${from}>`;\n\t\tconst replyTo = `${name} <${email}>`;\n\t\tconst subject = `Livechat offline message from ${name}: ${`${emailMessage}`.substring(0, 20)}`;\n\t\tawait this.sendEmail(fromText, emailTo, replyTo, subject, html);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid callbacks.run('livechat.offlineMessage', data);\n\t\t});\n\t}\n\n\tasync sendMessage({\n\t\tguest,\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\tmessage: ILivechatMessage;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t}) {\n\t\tconst { room, newRoom } = await this.getRoom(guest, message, roomInfo, agent);\n\t\tif (guest.name) {\n\t\t\tmessage.alias = guest.name;\n\t\t}\n\t\treturn Object.assign(await sendMessage(guest, { ...message, token: guest.token }, room), {\n\t\t\tnewRoom,\n\t\t\tshowConnecting: this.showConnecting(),\n\t\t});\n\t}\n\n\tasync removeGuest(_id: string) {\n\t\tconst guest = await LivechatVisitors.findOneEnabledById(_id, { projection: { _id: 1, token: 1 } });\n\t\tif (!guest) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tawait this.cleanGuestHistory(guest);\n\t\treturn LivechatVisitors.disableById(_id);\n\t}\n\n\tasync cleanGuestHistory(guest: ILivechatVisitor) {\n\t\tconst { token } = guest;\n\n\t\t// This shouldn't be possible, but just in case\n\t\tif (!token) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tconst cursor = LivechatRooms.findByVisitorToken(token);\n\t\tfor await (const room of cursor) {\n\t\t\tawait Promise.all([\n\t\t\t\tSubscriptions.removeByRoomId(room._id, {\n\t\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tFileUpload.removeFilesByRoomId(room._id),\n\t\t\t\tMessages.removeByRoomId(room._id),\n\t\t\t\tReadReceipts.removeByRoomId(room._id),\n\t\t\t]);\n\t\t}\n\n\t\tawait LivechatRooms.removeByVisitorToken(token);\n\n\t\tconst livechatInquiries = await LivechatInquiry.findIdsByVisitorToken(token).toArray();\n\t\tawait LivechatInquiry.removeByIds(livechatInquiries.map(({ _id }) => _id));\n\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiries, 'removed');\n\t}\n\n\tasync deleteMessage({ guest, message }: { guest: ILivechatVisitor; message: IMessage }) {\n\t\tconst deleteAllowed = settings.get<boolean>('Message_AllowDeleting');\n\t\tconst editOwn = message.u && message.u._id === guest._id;\n\n\t\tif (!deleteAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\tawait deleteMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync setUserStatusLivechatIf(userId: string, status: ILivechatAgentStatus, condition?: Filter<IUser>, fields?: AKeyOf<ILivechatAgent>) {\n\t\tconst result = await Users.setLivechatStatusIf(userId, status, condition, fields);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: { ...fields, statusLivechat: status },\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\t\treturn result;\n\t}\n\n\tasync returnRoomAsInquiry(room: IOmnichannelRoom, departmentId?: string, overrideTransferData: any = {}) {\n\t\tthis.logger.debug({ msg: `Transfering room to ${departmentId ? 'department' : ''} queue`, room });\n\t\tif (!room.open) {\n\t\t\tthrow new Meteor.Error('room-closed');\n\t\t}\n\n\t\tif (room.onHold) {\n\t\t\tthrow new Meteor.Error('error-room-onHold');\n\t\t}\n\n\t\tif (!room.servedBy) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst user = await Users.findOneById(room.servedBy._id);\n\t\tif (!user?._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\t// find inquiry corresponding to room\n\t\tconst inquiry = await LivechatInquiry.findOne({ rid: room._id });\n\t\tif (!inquiry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst transferredBy = normalizeTransferredByData(user, room);\n\t\tthis.logger.debug(`Transfering room ${room._id} by user ${transferredBy._id}`);\n\t\tconst transferData = { roomId: room._id, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };\n\t\ttry {\n\t\t\tawait this.saveTransferHistory(room, transferData);\n\t\t\tawait RoutingManager.unassignAgent(inquiry, departmentId);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow new Meteor.Error('error-returning-inquiry');\n\t\t}\n\n\t\tcallbacks.runAsync('livechat:afterReturnRoomAsInquiry', { room });\n\n\t\treturn true;\n\t}\n\n\tasync saveTransferHistory(room: IOmnichannelRoom, transferData: TransferData) {\n\t\tconst { departmentId: previousDepartment } = room;\n\t\tconst { department: nextDepartment, transferredBy, transferredTo, scope, comment } = transferData;\n\n\t\tcheck(\n\t\t\ttransferredBy,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tuserType: String,\n\t\t\t}),\n\t\t);\n\n\t\tconst { _id, username } = transferredBy;\n\t\tconst scopeData = scope || (nextDepartment ? 'department' : 'agent');\n\t\tthis.logger.info(`Storing new chat transfer of ${room._id} [Transfered by: ${_id} to ${scopeData}]`);\n\n\t\tconst transferMessage = {\n\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),\n\t\t\t\t...(nextDepartment && { nextDepartment }),\n\t\t\t\t...(transferredTo && { transferredTo }),\n\t\t\t},\n\t\t};\n\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat_transfer_history', room._id, '', { _id, username }, transferMessage);\n\t}\n\n\tasync saveGuest(guestData: Pick<ILivechatVisitor, '_id' | 'name' | 'livechatData'> & { email?: string; phone?: string }, userId: string) {\n\t\tconst { _id, name, email, phone, livechatData = {} } = guestData;\n\n\t\tconst visitor = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tthis.logger.debug({ msg: 'Saving guest', guestData });\n\t\tconst updateData: {\n\t\t\tname?: string | undefined;\n\t\t\tusername?: string | undefined;\n\t\t\temail?: string | undefined;\n\t\t\tphone?: string | undefined;\n\t\t\tlivechatData: {\n\t\t\t\t[k: string]: any;\n\t\t\t};\n\t\t} = { livechatData: {} };\n\n\t\tif (name) {\n\t\t\tupdateData.name = name;\n\t\t}\n\t\tif (email) {\n\t\t\tupdateData.email = email;\n\t\t}\n\t\tif (phone) {\n\t\t\tupdateData.phone = phone;\n\t\t}\n\n\t\tconst customFields: Record<string, any> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tthis.logger.debug({ msg: `Saving custom fields for visitor ${_id}`, livechatData });\n\t\t\tfor await (const field of LivechatCustomField.findByScope('visitor')) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\tupdateData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields for visitor ${_id}`);\n\t\t}\n\t\tconst ret = await LivechatVisitors.saveGuestById(_id, updateData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tasync setCustomFields({ token, key, value, overwrite }: { key: string; value: string; overwrite: boolean; token: string }) {\n\t\tLivechat.logger.debug(`Setting custom fields data for visitor with token ${token}`);\n\n\t\tconst customField = await LivechatCustomField.findOneById(key);\n\t\tif (!customField) {\n\t\t\tthrow new Error('invalid-custom-field');\n\t\t}\n\n\t\tif (customField.regexp !== undefined && customField.regexp !== '') {\n\t\t\tconst regexp = new RegExp(customField.regexp);\n\t\t\tif (!regexp.test(value)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: key }));\n\t\t\t}\n\t\t}\n\n\t\tlet result;\n\t\tif (customField.scope === 'room') {\n\t\t\tresult = await LivechatRooms.updateDataByToken(token, key, value, overwrite);\n\t\t} else {\n\t\t\tresult = await LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n\t\t}\n\n\t\tif (typeof result === 'boolean') {\n\t\t\t// Note: this only happens when !overwrite is passed, in this case we don't do any db update\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn result.modifiedCount;\n\t}\n\n\tasync requestTranscript({\n\t\trid,\n\t\temail,\n\t\tsubject,\n\t\tuser,\n\t}: {\n\t\trid: string;\n\t\temail: string;\n\t\tsubject: string;\n\t\tuser: AtLeast<IUser, '_id' | 'username' | 'utcOffset' | 'name'>;\n\t}) {\n\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, open: 1, transcriptRequest: 1 } });\n\n\t\tif (!room?.open) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tif (room.transcriptRequest) {\n\t\t\tthrow new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t}\n\n\t\tconst { _id, username, name, utcOffset } = user;\n\t\tconst transcriptRequest = {\n\t\t\trequestedAt: new Date(),\n\t\t\trequestedBy: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\tname,\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t\temail,\n\t\t\tsubject,\n\t\t};\n\n\t\tawait LivechatRooms.setEmailTranscriptRequestedByRoomId(rid, transcriptRequest);\n\t\treturn true;\n\t}\n\n\tasync savePageHistory(token: string, roomId: string | undefined, pageInfo: PageInfo) {\n\t\tthis.logger.debug({\n\t\t\tmsg: `Saving page movement history for visitor with token ${token}`,\n\t\t\tpageInfo,\n\t\t\troomId,\n\t\t});\n\n\t\tif (pageInfo.change !== settings.get<string>('Livechat_history_monitor_type')) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById('rocket.cat');\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst extraData: {\n\t\t\tnavigation: {\n\t\t\t\tpage: PageInfo;\n\t\t\t\ttoken: string;\n\t\t\t};\n\t\t\texpireAt?: number;\n\t\t\t_hidden?: boolean;\n\t\t} = {\n\t\t\tnavigation: {\n\t\t\t\tpage: pageInfo,\n\t\t\t\ttoken,\n\t\t\t},\n\t\t};\n\n\t\tif (!roomId) {\n\t\t\tthis.logger.warn(`Saving page history without room id for visitor with token ${token}`);\n\t\t\t// keep history of unregistered visitors for 1 month\n\t\t\tconst keepHistoryMiliseconds = 2592000000;\n\t\t\textraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n\t\t}\n\n\t\tif (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n\t\t\textraData._hidden = true;\n\t\t}\n\n\t\t// @ts-expect-error: Investigating on which case we won't receive a roomId and where that history is supposed to be stored\n\t\treturn Message.saveSystemMessage('livechat_navigation_history', roomId, `${pageTitle} - ${pageUrl}`, user, extraData);\n\t}\n\n\tasync afterRemoveAgent(user: AtLeast<IUser, '_id' | 'username'>) {\n\t\tawait callbacks.run('livechat.afterAgentRemoved', { agent: user });\n\t\treturn true;\n\t}\n\n\tasync removeAgent(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id } = user;\n\n\t\tif (await removeUserFromRolesAsync(_id, ['livechat-agent'])) {\n\t\t\treturn this.afterRemoveAgent(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync removeManager(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\treturn removeUserFromRolesAsync(user._id, ['livechat-manager']);\n\t}\n\n\tasync getLivechatRoomGuestInfo(room: IOmnichannelRoom) {\n\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tconst agent = room.servedBy?._id ? await Users.findOneById(room.servedBy?._id) : null;\n\n\t\tconst ua = new UAParser();\n\t\tua.setUA(visitor.userAgent || '');\n\n\t\tconst postData: ICRMData = {\n\t\t\t_id: room._id,\n\t\t\tlabel: room.fname || room.label, // using same field for compatibility\n\t\t\ttopic: room.topic,\n\t\t\tcreatedAt: room.ts,\n\t\t\tlastMessageAt: room.lm,\n\t\t\ttags: room.tags,\n\t\t\tcustomFields: room.livechatData,\n\t\t\tvisitor: {\n\t\t\t\t_id: visitor._id,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tname: visitor.name,\n\t\t\t\tusername: visitor.username,\n\t\t\t\tdepartment: visitor.department,\n\t\t\t\tip: visitor.ip,\n\t\t\t\tos: ua.getOS().name && `${ua.getOS().name} ${ua.getOS().version}`,\n\t\t\t\tbrowser: ua.getBrowser().name && `${ua.getBrowser().name} ${ua.getBrowser().version}`,\n\t\t\t\tcustomFields: visitor.livechatData,\n\t\t\t},\n\t\t};\n\n\t\tif (agent) {\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\t...(customFields && { customFields }),\n\t\t\t};\n\n\t\t\tif (agent.emails && agent.emails.length > 0) {\n\t\t\t\tpostData.agent.email = agent.emails[0].address;\n\t\t\t}\n\t\t}\n\n\t\tif (room.crmData) {\n\t\t\tpostData.crmData = room.crmData;\n\t\t}\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n\t\t\tpostData.visitor.email = visitor.visitorEmails;\n\t\t}\n\t\tif (visitor.phone && visitor.phone.length > 0) {\n\t\t\tpostData.visitor.phone = visitor.phone;\n\t\t}\n\n\t\treturn postData;\n\t}\n\n\tasync allowAgentChangeServiceStatus(statusLivechat: ILivechatAgentStatus, agentId: string) {\n\t\tif (statusLivechat !== ILivechatAgentStatus.AVAILABLE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn businessHourManager.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus) {\n\t\tawait LivechatRooms.updateVisitorStatus(token, status);\n\n\t\tconst inquiryVisitorStatus = await LivechatInquiry.updateVisitorStatus(token, status);\n\n\t\tif (inquiryVisitorStatus.modifiedCount) {\n\t\t\tvoid notifyOnLivechatInquiryChangedByToken(token, 'updated', { v: { status } });\n\t\t}\n\t}\n\n\tasync setUserStatusLivechat(userId: string, status: ILivechatAgentStatus) {\n\t\tconst user = await Users.setLivechatStatus(userId, status);\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\n\t\tif (user.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: status,\n\t\t\t\t\tlivechatStatusSystemModified: false,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn user;\n\t}\n\n\tasync afterAgentAdded(user: IUser) {\n\t\tawait Promise.all([\n\t\t\tUsers.setOperator(user._id, true),\n\t\t\tthis.setUserStatusLivechat(user._id, user.status !== 'offline' ? ILivechatAgentStatus.AVAILABLE : ILivechatAgentStatus.NOT_AVAILABLE),\n\t\t]);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\n\t\treturn user;\n\t}\n\n\tasync addAgent(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-agent'])) {\n\t\t\treturn this.afterAgentAdded(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync afterAgentUserActivated(user: IUser) {\n\t\tif (!user.roles.includes('livechat-agent')) {\n\t\t\tthrow new Error('invalid-user-role');\n\t\t}\n\t\tawait Users.setOperator(user._id, true);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\t}\n\n\tasync addManager(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-manager'])) {\n\t\t\treturn user;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync saveRoomInfo(\n\t\troomData: {\n\t\t\t_id: string;\n\t\t\ttopic?: string;\n\t\t\ttags?: string[];\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t\t// For priority and SLA, if the value is blank (ie \"\"), then system will remove the priority or SLA from the room\n\t\t\tpriorityId?: string;\n\t\t\tslaId?: string;\n\t\t},\n\t\tguestData?: {\n\t\t\t_id: string;\n\t\t\tname?: string;\n\t\t\temail?: string;\n\t\t\tphone?: string;\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t},\n\t\tuserId?: string,\n\t) {\n\t\tthis.logger.debug(`Saving room information on room ${roomData._id}`);\n\t\tconst { livechatData = {} } = roomData;\n\t\tconst customFields: Record<string, string> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tconst fields = LivechatCustomField.findByScope('room');\n\t\t\tfor await (const field of fields) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Meteor.Error(i18n.t('error-invalid-custom-field-value', { field: field.label }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\troomData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields on room ${roomData._id}`);\n\t\t}\n\n\t\tawait LivechatRooms.saveRoomById(roomData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id);\n\t\t});\n\n\t\tif (guestData?.name?.trim().length) {\n\t\t\tconst { _id: rid } = roomData;\n\t\t\tconst { name } = guestData;\n\n\t\t\tconst responses = await Promise.all([\n\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t]);\n\n\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t}\n\n\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\tawait notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t}\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(roomData._id);\n\n\t\treturn true;\n\t}\n}\n\nexport const Livechat = new LivechatClass();\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      Livechat: () => Livechat\n    });\n    let dns;\n    module.link(\"dns\", {\n      default(v) {\n        dns = v;\n      }\n    }, 0);\n    let util;\n    module.link(\"util\", {\n      \"*\"(v) {\n        util = v;\n      }\n    }, 1);\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 2);\n    let Message, VideoConf, api, Omnichannel;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      },\n      VideoConf(v) {\n        VideoConf = v;\n      },\n      api(v) {\n        api = v;\n      },\n      Omnichannel(v) {\n        Omnichannel = v;\n      }\n    }, 3);\n    let OmnichannelSourceType, ILivechatAgentStatus, UserStatus, isOmnichannelRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      },\n      ILivechatAgentStatus(v) {\n        ILivechatAgentStatus = v;\n      },\n      UserStatus(v) {\n        UserStatus = v;\n      },\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      }\n    }, 4);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 5);\n    let LivechatDepartment, LivechatInquiry, LivechatRooms, Subscriptions, LivechatVisitors, Messages, Users, LivechatDepartmentAgents, ReadReceipts, Rooms, LivechatCustomField, LivechatContacts;\n    module.link(\"@rocket.chat/models\", {\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      LivechatCustomField(v) {\n        LivechatCustomField = v;\n      },\n      LivechatContacts(v) {\n        LivechatContacts = v;\n      }\n    }, 6);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 7);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 8);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 9);\n    let UAParser;\n    module.link(\"ua-parser-js\", {\n      default(v) {\n        UAParser = v;\n      }\n    }, 10);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 11);\n    let trim;\n    module.link(\"../../../../lib/utils/stringUtils\", {\n      trim(v) {\n        trim = v;\n      }\n    }, 12);\n    let client;\n    module.link(\"../../../../server/database/utils\", {\n      client(v) {\n        client = v;\n      }\n    }, 13);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 14);\n    let addUserRolesAsync;\n    module.link(\"../../../../server/lib/roles/addUserRoles\", {\n      addUserRolesAsync(v) {\n        addUserRolesAsync = v;\n      }\n    }, 15);\n    let removeUserFromRolesAsync;\n    module.link(\"../../../../server/lib/roles/removeUserFromRoles\", {\n      removeUserFromRolesAsync(v) {\n        removeUserFromRolesAsync = v;\n      }\n    }, 16);\n    let canAccessRoomAsync;\n    module.link(\"../../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      }\n    }, 17);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 18);\n    let hasRoleAsync;\n    module.link(\"../../../authorization/server/functions/hasRole\", {\n      hasRoleAsync(v) {\n        hasRoleAsync = v;\n      }\n    }, 19);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 20);\n    let deleteMessage;\n    module.link(\"../../../lib/server/functions/deleteMessage\", {\n      deleteMessage(v) {\n        deleteMessage = v;\n      }\n    }, 21);\n    let sendMessage;\n    module.link(\"../../../lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 22);\n    let updateMessage;\n    module.link(\"../../../lib/server/functions/updateMessage\", {\n      updateMessage(v) {\n        updateMessage = v;\n      }\n    }, 23);\n    let notifyOnLivechatInquiryChanged, notifyOnLivechatInquiryChangedByRoom, notifyOnRoomChangedById, notifyOnLivechatInquiryChangedByToken, notifyOnUserChange, notifyOnSubscriptionChangedByRoomId, notifyOnSubscriptionChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnLivechatInquiryChanged(v) {\n        notifyOnLivechatInquiryChanged = v;\n      },\n      notifyOnLivechatInquiryChangedByRoom(v) {\n        notifyOnLivechatInquiryChangedByRoom = v;\n      },\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnLivechatInquiryChangedByToken(v) {\n        notifyOnLivechatInquiryChangedByToken = v;\n      },\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      },\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      },\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      }\n    }, 24);\n    let Mailer;\n    module.link(\"../../../mailer/server/api\", {\n      \"*\"(v) {\n        Mailer = v;\n      }\n    }, 25);\n    let metrics;\n    module.link(\"../../../metrics/server\", {\n      metrics(v) {\n        metrics = v;\n      }\n    }, 26);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 27);\n    let businessHourManager;\n    module.link(\"../business-hour\", {\n      businessHourManager(v) {\n        businessHourManager = v;\n      }\n    }, 28);\n    let createContact, createContactFromVisitor, isSingleContactEnabled;\n    module.link(\"./Contacts\", {\n      createContact(v) {\n        createContact = v;\n      },\n      createContactFromVisitor(v) {\n        createContactFromVisitor = v;\n      },\n      isSingleContactEnabled(v) {\n        isSingleContactEnabled = v;\n      }\n    }, 29);\n    let parseAgentCustomFields, updateDepartmentAgents, validateEmail, normalizeTransferredByData;\n    module.link(\"./Helper\", {\n      parseAgentCustomFields(v) {\n        parseAgentCustomFields = v;\n      },\n      updateDepartmentAgents(v) {\n        updateDepartmentAgents = v;\n      },\n      validateEmail(v) {\n        validateEmail = v;\n      },\n      normalizeTransferredByData(v) {\n        normalizeTransferredByData = v;\n      }\n    }, 30);\n    let QueueManager;\n    module.link(\"./QueueManager\", {\n      QueueManager(v) {\n        QueueManager = v;\n      }\n    }, 31);\n    let RoutingManager;\n    module.link(\"./RoutingManager\", {\n      RoutingManager(v) {\n        RoutingManager = v;\n      }\n    }, 32);\n    let parseTranscriptRequest;\n    module.link(\"./parseTranscriptRequest\", {\n      parseTranscriptRequest(v) {\n        parseTranscriptRequest = v;\n      }\n    }, 33);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const isRoomClosedByUserParams = params => params.user !== undefined;\n    const isRoomClosedByVisitorParams = params => params.visitor !== undefined;\n    const dnsResolveMx = util.promisify(dns.resolveMx);\n    class LivechatClass {\n      constructor() {\n        this.logger = void 0;\n        this.webhookLogger = void 0;\n        this.logger = new Logger('Livechat');\n        this.webhookLogger = this.logger.section('Webhook');\n      }\n      async online(department) {\n        let skipNoAgentSetting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let skipFallbackCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        Livechat.logger.debug(\"Checking online agents \".concat(department ? \"for department \".concat(department) : ''));\n        if (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n          Livechat.logger.debug('Can accept without online agents: true');\n          return true;\n        }\n        if (settings.get('Livechat_assign_new_conversation_to_bot')) {\n          Livechat.logger.debug(\"Fetching online bot agents for department \".concat(department));\n          const botAgents = await Livechat.getBotAgents(department);\n          if (botAgents) {\n            const onlineBots = await botAgents.count();\n            this.logger.debug(\"Found \".concat(onlineBots, \" online\"));\n            if (onlineBots > 0) {\n              return true;\n            }\n          }\n        }\n        const agentsOnline = await this.checkOnlineAgents(department, undefined, skipFallbackCheck);\n        Livechat.logger.debug(\"Are online agents \".concat(department ? \"for department \".concat(department) : '', \"?: \").concat(agentsOnline));\n        return agentsOnline;\n      }\n      async closeRoom(params) {\n        let attempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n        let newRoom;\n        let chatCloser;\n        let removedInquiryObj;\n        const session = client.startSession();\n        try {\n          session.startTransaction();\n          const {\n            room,\n            closedBy,\n            removedInquiry\n          } = await this.doCloseRoom(params, session);\n          await session.commitTransaction();\n          newRoom = room;\n          chatCloser = closedBy;\n          removedInquiryObj = removedInquiry;\n        } catch (e) {\n          var _e$errorLabels, _e$errorLabels2;\n          this.logger.error({\n            err: e,\n            msg: 'Failed to close room',\n            afterAttempts: attempts\n          });\n          await session.abortTransaction();\n          // Dont propagate transaction errors\n          if (e !== null && e !== void 0 && (_e$errorLabels = e.errorLabels) !== null && _e$errorLabels !== void 0 && _e$errorLabels.includes('UnknownTransactionCommitResult') || e !== null && e !== void 0 && (_e$errorLabels2 = e.errorLabels) !== null && _e$errorLabels2 !== void 0 && _e$errorLabels2.includes('TransientTransactionError')) {\n            if (attempts > 0) {\n              this.logger.debug(\"Retrying close room because of transient error. Attempts left: \".concat(attempts));\n              return this.closeRoom(params, attempts - 1);\n            }\n            throw new Error('error-room-cannot-be-closed-try-again');\n          }\n          throw e;\n        } finally {\n          await session.endSession();\n        }\n        // Note: when reaching this point, the room has been closed\n        // Transaction is commited and so these messages can be sent here.\n        return this.afterRoomClosed(newRoom, chatCloser, removedInquiryObj, params);\n      }\n      async afterRoomClosed(newRoom, chatCloser, inquiry, params) {\n        var _params$comment;\n        if (!chatCloser) {\n          // this should never happen\n          return;\n        }\n        // Note: we are okay with these messages being sent outside of the transaction. The process of sending a message\n        // is huge and involves multiple db calls. Making it transactionable this way would be really hard.\n        // And passing just _some_ actions to the transaction creates some deadlocks since messages are updated in the afterSaveMessages callbacks.\n        const transcriptRequested = !!params.room.transcriptRequest || !settings.get('Livechat_enable_transcript') && settings.get('Livechat_transcript_send_always');\n        this.logger.debug(\"Sending closing message to room \".concat(newRoom._id));\n        await Message.saveSystemMessageAndNotifyUser('livechat-close', newRoom._id, (_params$comment = params.comment) !== null && _params$comment !== void 0 ? _params$comment : '', chatCloser, _objectSpread({\n          groupable: false,\n          transcriptRequested\n        }, isRoomClosedByVisitorParams(params) && {\n          token: params.visitor.token\n        }));\n        if (settings.get('Livechat_enable_transcript') && !settings.get('Livechat_transcript_send_always')) {\n          await Message.saveSystemMessage('command', newRoom._id, 'promptTranscript', chatCloser);\n        }\n        this.logger.debug(\"Running callbacks for room \".concat(newRoom._id));\n        process.nextTick(() => {\n          var _Apps$self, _Apps$self$getBridges, _Apps$self2, _Apps$self2$getBridge;\n          /**\n           * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n           * in the next major version of the Apps-Engine\n           */\n          void ((_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : (_Apps$self$getBridges = _Apps$self.getBridges()) === null || _Apps$self$getBridges === void 0 ? void 0 : _Apps$self$getBridges.getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, newRoom));\n          void ((_Apps$self2 = Apps.self) === null || _Apps$self2 === void 0 ? void 0 : (_Apps$self2$getBridge = _Apps$self2.getBridges()) === null || _Apps$self2$getBridge === void 0 ? void 0 : _Apps$self2$getBridge.getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, newRoom));\n        });\n        const visitor = isRoomClosedByVisitorParams(params) ? params.visitor : undefined;\n        const opts = await parseTranscriptRequest(params.room, params.options, visitor);\n        if (process.env.TEST_MODE) {\n          await callbacks.run('livechat.closeRoom', {\n            room: newRoom,\n            options: opts\n          });\n        } else {\n          callbacks.runAsync('livechat.closeRoom', {\n            room: newRoom,\n            options: opts\n          });\n        }\n        void notifyOnRoomChangedById(newRoom._id);\n        if (inquiry) {\n          void notifyOnLivechatInquiryChanged(inquiry, 'removed');\n        }\n        this.logger.debug(\"Room \".concat(newRoom._id, \" was closed\"));\n      }\n      async doCloseRoom(params, session) {\n        const {\n          comment\n        } = params;\n        const {\n          room\n        } = params;\n        this.logger.debug(\"Attempting to close room \".concat(room._id));\n        if (!room || !isOmnichannelRoom(room) || !room.open) {\n          this.logger.debug(\"Room \".concat(room._id, \" is not open\"));\n          throw new Error('error-room-closed');\n        }\n        const commentRequired = settings.get('Livechat_request_comment_when_closing_conversation');\n        if (commentRequired && !(comment !== null && comment !== void 0 && comment.trim())) {\n          throw new Error('error-comment-is-required');\n        }\n        const {\n          updatedOptions: options\n        } = await this.resolveChatTags(room, params.options);\n        this.logger.debug(\"Resolved chat tags for room \".concat(room._id));\n        const now = new Date();\n        const {\n          _id: rid,\n          servedBy\n        } = room;\n        const serviceTimeDuration = servedBy && (now.getTime() - new Date(servedBy.ts).getTime()) / 1000;\n        const closeData = _objectSpread(_objectSpread({\n          closedAt: now,\n          chatDuration: (now.getTime() - new Date(room.ts).getTime()) / 1000\n        }, serviceTimeDuration && {\n          serviceTimeDuration\n        }), options);\n        this.logger.debug(\"Room \".concat(room._id, \" was closed at \").concat(closeData.closedAt, \" (duration \").concat(closeData.chatDuration, \")\"));\n        if (isRoomClosedByUserParams(params)) {\n          const {\n            user\n          } = params;\n          this.logger.debug(\"Closing by user \".concat(user === null || user === void 0 ? void 0 : user._id));\n          closeData.closer = 'user';\n          closeData.closedBy = {\n            _id: (user === null || user === void 0 ? void 0 : user._id) || '',\n            username: user === null || user === void 0 ? void 0 : user.username\n          };\n        } else if (isRoomClosedByVisitorParams(params)) {\n          const {\n            visitor\n          } = params;\n          this.logger.debug(\"Closing by visitor \".concat(params.visitor._id));\n          closeData.closer = 'visitor';\n          closeData.closedBy = {\n            _id: visitor._id,\n            username: visitor.username\n          };\n        } else {\n          throw new Error('Error: Please provide details of the user or visitor who closed the room');\n        }\n        this.logger.debug(\"Updating DB for room \".concat(room._id, \" with close data\"));\n        const inquiry = await LivechatInquiry.findOneByRoomId(rid, {\n          session\n        });\n        const removedInquiry = await LivechatInquiry.removeByRoomId(rid, {\n          session\n        });\n        if (removedInquiry && removedInquiry.deletedCount !== 1) {\n          throw new Error('Error removing inquiry');\n        }\n        const updatedRoom = await LivechatRooms.closeRoomById(rid, closeData, {\n          session\n        });\n        if (!updatedRoom || updatedRoom.modifiedCount !== 1) {\n          throw new Error('Error closing room');\n        }\n        const subs = await Subscriptions.countByRoomId(rid, {\n          session\n        });\n        const removedSubs = await Subscriptions.removeByRoomId(rid, {\n          async onTrash(doc) {\n            void notifyOnSubscriptionChanged(doc, 'removed');\n          },\n          session\n        });\n        if (removedSubs.deletedCount !== subs) {\n          throw new Error('Error removing subscriptions');\n        }\n        this.logger.debug(\"DB updated for room \".concat(room._id));\n        // Retrieve the closed room\n        const newRoom = await LivechatRooms.findOneById(rid, {\n          session\n        });\n        if (!newRoom) {\n          throw new Error('Error: Room not found');\n        }\n        return {\n          room: newRoom,\n          closedBy: closeData.closedBy,\n          removedInquiry: inquiry\n        };\n      }\n      async getRequiredDepartment() {\n        let onlineRequired = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        const departments = LivechatDepartment.findEnabledWithAgents();\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(departments), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const dept = _step.value;\n            {\n              if (!dept.showOnRegistration) {\n                continue;\n              }\n              if (!onlineRequired) {\n                return dept;\n              }\n              const onlineAgents = await LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n              if (onlineAgents && (await onlineAgents.count())) {\n                return dept;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async createRoom(_ref) {\n        let {\n          visitor,\n          message,\n          rid,\n          roomInfo,\n          agent,\n          extraData\n        } = _ref;\n        if (!settings.get('Livechat_enabled')) {\n          throw new Meteor.Error('error-omnichannel-is-disabled');\n        }\n        const defaultAgent = await callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, visitor);\n        // if no department selected verify if there is at least one active and pick the first\n        if (!defaultAgent && !visitor.department) {\n          const department = await this.getRequiredDepartment();\n          Livechat.logger.debug(\"No department or default agent selected for \".concat(visitor._id));\n          if (department) {\n            Livechat.logger.debug(\"Assigning \".concat(visitor._id, \" to department \").concat(department._id));\n            visitor.department = department._id;\n          }\n        }\n        // delegate room creation to QueueManager\n        Livechat.logger.debug(\"Calling QueueManager to request a room for visitor \".concat(visitor._id));\n        const room = await QueueManager.requestRoom({\n          guest: visitor,\n          message,\n          rid,\n          roomInfo,\n          agent: defaultAgent,\n          extraData\n        });\n        if (isSingleContactEnabled()) {\n          let {\n            contactId\n          } = visitor;\n          if (!contactId) {\n            const visitorContact = await LivechatVisitors.findOne(visitor._id, {\n              projection: {\n                name: 1,\n                contactManager: 1,\n                livechatData: 1,\n                phone: 1,\n                visitorEmails: 1,\n                username: 1,\n                contactId: 1\n              }\n            });\n            contactId = visitorContact === null || visitorContact === void 0 ? void 0 : visitorContact.contactId;\n          }\n          if (!contactId) {\n            // ensure that old visitors have a contact\n            contactId = await createContactFromVisitor(visitor);\n          }\n          const contact = await LivechatContacts.findOneById(contactId, {\n            projection: {\n              _id: 1,\n              channels: 1\n            }\n          });\n          if (contact) {\n            var _contact$channels;\n            const channel = (_contact$channels = contact.channels) === null || _contact$channels === void 0 ? void 0 : _contact$channels.find(channel => {\n              var _roomInfo$source;\n              return channel.name === ((_roomInfo$source = roomInfo.source) === null || _roomInfo$source === void 0 ? void 0 : _roomInfo$source.type) && channel.visitorId === visitor._id;\n            });\n            if (!channel) {\n              var _roomInfo$source2, _roomInfo$source3;\n              Livechat.logger.debug(\"Adding channel for contact \".concat(contact._id));\n              await LivechatContacts.addChannel(contact._id, {\n                name: ((_roomInfo$source2 = roomInfo.source) === null || _roomInfo$source2 === void 0 ? void 0 : _roomInfo$source2.label) || ((_roomInfo$source3 = roomInfo.source) === null || _roomInfo$source3 === void 0 ? void 0 : _roomInfo$source3.type.toString()) || OmnichannelSourceType.OTHER,\n                visitorId: visitor._id,\n                blocked: false,\n                verified: false,\n                details: roomInfo.source\n              });\n            }\n          }\n        }\n        Livechat.logger.debug(\"Room obtained for visitor \".concat(visitor._id, \" -> \").concat(room._id));\n        await Messages.setRoomIdByToken(visitor.token, room._id);\n        return room;\n      }\n      async getRoom(guest, message, roomInfo, agent, extraData) {\n        if (!settings.get('Livechat_enabled')) {\n          throw new Meteor.Error('error-omnichannel-is-disabled');\n        }\n        Livechat.logger.debug(\"Attempting to find or create a room for visitor \".concat(guest._id));\n        const room = await LivechatRooms.findOneById(message.rid);\n        if (room && !room.open) {\n          Livechat.logger.debug(\"Last room for visitor \".concat(guest._id, \" closed. Creating new one\"));\n        }\n        if (!(room !== null && room !== void 0 && room.open)) {\n          return {\n            room: await this.createRoom({\n              visitor: guest,\n              message: message.msg,\n              roomInfo,\n              agent,\n              extraData\n            }),\n            newRoom: true\n          };\n        }\n        if (room.v.token !== guest.token) {\n          Livechat.logger.debug(\"Visitor \".concat(guest._id, \" trying to access another visitor's room\"));\n          throw new Meteor.Error('cannot-access-room');\n        }\n        return {\n          room,\n          newRoom: false\n        };\n      }\n      async checkOnlineAgents(department, agent) {\n        let skipFallbackCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        if (agent !== null && agent !== void 0 && agent.agentId) {\n          return Users.checkOnlineAgents(agent.agentId);\n        }\n        if (department) {\n          const onlineForDep = await LivechatDepartmentAgents.checkOnlineForDepartment(department);\n          if (onlineForDep || skipFallbackCheck) {\n            return onlineForDep;\n          }\n          const dep = await LivechatDepartment.findOneById(department, {\n            projection: {\n              fallbackForwardDepartment: 1\n            }\n          });\n          if (!(dep !== null && dep !== void 0 && dep.fallbackForwardDepartment)) {\n            return onlineForDep;\n          }\n          return this.checkOnlineAgents(dep === null || dep === void 0 ? void 0 : dep.fallbackForwardDepartment);\n        }\n        return Users.checkOnlineAgents();\n      }\n      async setDepartmentForGuest(_ref2) {\n        let {\n          token,\n          department\n        } = _ref2;\n        check(token, String);\n        check(department, String);\n        Livechat.logger.debug(\"Switching departments for user with token \".concat(token, \" (to \").concat(department, \")\"));\n        const updateUser = {\n          $set: {\n            department\n          }\n        };\n        const dep = await LivechatDepartment.findOneById(department, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!dep) {\n          throw new Meteor.Error('invalid-department', 'Provided department does not exists');\n        }\n        const visitor = await LivechatVisitors.getVisitorByToken(token, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!visitor) {\n          throw new Meteor.Error('invalid-token', 'Provided token is invalid');\n        }\n        await LivechatVisitors.updateById(visitor._id, updateUser);\n      }\n      async removeRoom(rid) {\n        var _result$, _result$3$value;\n        Livechat.logger.debug(\"Deleting room \".concat(rid));\n        check(rid, String);\n        const room = await LivechatRooms.findOneById(rid);\n        if (!room) {\n          throw new Meteor.Error('error-invalid-room', 'Invalid room');\n        }\n        const inquiry = await LivechatInquiry.findOneByRoomId(rid);\n        const result = await Promise.allSettled([Messages.removeByRoomId(rid), ReadReceipts.removeByRoomId(rid), Subscriptions.removeByRoomId(rid, {\n          async onTrash(doc) {\n            void notifyOnSubscriptionChanged(doc, 'removed');\n          }\n        }), LivechatInquiry.removeByRoomId(rid), LivechatRooms.removeById(rid)]);\n        if (((_result$ = result[3]) === null || _result$ === void 0 ? void 0 : _result$.status) === 'fulfilled' && (_result$3$value = result[3].value) !== null && _result$3$value !== void 0 && _result$3$value.deletedCount && inquiry) {\n          void notifyOnLivechatInquiryChanged(inquiry, 'removed');\n        }\n        for (const r of result) {\n          if (r.status === 'rejected') {\n            this.logger.error(\"Error removing room \".concat(rid, \": \").concat(r.reason));\n            throw new Meteor.Error('error-removing-room', 'Error removing room');\n          }\n        }\n      }\n      isValidObject(obj) {\n        return typeof obj === 'object' && obj !== null;\n      }\n      async registerGuest(_ref3) {\n        let {\n          id,\n          token,\n          name,\n          phone,\n          email,\n          department,\n          username,\n          connectionData,\n          status = UserStatus.ONLINE,\n          source\n        } = _ref3;\n        check(token, String);\n        check(id, Match.Maybe(String));\n        Livechat.logger.debug(\"New incoming conversation: id: \".concat(id, \" | token: \").concat(token));\n        const visitorDataToUpdate = _objectSpread(_objectSpread({\n          token,\n          status,\n          source\n        }, phone !== null && phone !== void 0 && phone.number ? {\n          phone: [{\n            phoneNumber: phone.number\n          }]\n        } : {}), name ? {\n          name\n        } : {});\n        if (email) {\n          const visitorEmail = email.trim().toLowerCase();\n          validateEmail(visitorEmail);\n          visitorDataToUpdate.visitorEmails = [{\n            address: visitorEmail\n          }];\n        }\n        const livechatVisitor = await LivechatVisitors.getVisitorByToken(token, {\n          projection: {\n            _id: 1\n          }\n        });\n        if ((livechatVisitor === null || livechatVisitor === void 0 ? void 0 : livechatVisitor.department) !== department && department) {\n          Livechat.logger.debug(\"Attempt to find a department with id/name \".concat(department));\n          const dep = await LivechatDepartment.findOneByIdOrName(department, {\n            projection: {\n              _id: 1\n            }\n          });\n          if (!dep) {\n            Livechat.logger.debug(\"Invalid department provided: \".concat(department));\n            throw new Meteor.Error('error-invalid-department', 'The provided department is invalid');\n          }\n          Livechat.logger.debug(\"Assigning visitor \".concat(token, \" to department \").concat(dep._id));\n          visitorDataToUpdate.department = dep._id;\n        }\n        visitorDataToUpdate.token = (livechatVisitor === null || livechatVisitor === void 0 ? void 0 : livechatVisitor.token) || token;\n        let existingUser = null;\n        if (livechatVisitor) {\n          Livechat.logger.debug('Found matching user by token');\n          visitorDataToUpdate._id = livechatVisitor._id;\n        } else if (phone !== null && phone !== void 0 && phone.number && (existingUser = await LivechatVisitors.findOneVisitorByPhone(phone.number))) {\n          Livechat.logger.debug('Found matching user by phone number');\n          visitorDataToUpdate._id = existingUser._id;\n          // Don't change token when matching by phone number, use current visitor token\n          visitorDataToUpdate.token = existingUser.token;\n        } else if (email && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(email))) {\n          Livechat.logger.debug('Found matching user by email');\n          visitorDataToUpdate._id = existingUser._id;\n        } else if (!livechatVisitor) {\n          Livechat.logger.debug(\"No matches found. Attempting to create new user with token \".concat(token));\n          visitorDataToUpdate._id = id || undefined;\n          visitorDataToUpdate.username = username || (await LivechatVisitors.getNextVisitorUsername());\n          visitorDataToUpdate.status = status;\n          visitorDataToUpdate.ts = new Date();\n          visitorDataToUpdate.source = source;\n          if (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations') && Livechat.isValidObject(connectionData)) {\n            Livechat.logger.debug(\"Saving connection data for visitor \".concat(token));\n            const {\n              httpHeaders,\n              clientAddress\n            } = connectionData;\n            if (Livechat.isValidObject(httpHeaders)) {\n              visitorDataToUpdate.userAgent = httpHeaders['user-agent'];\n              visitorDataToUpdate.ip = httpHeaders['x-real-ip'] || httpHeaders['x-forwarded-for'] || clientAddress;\n              visitorDataToUpdate.host = httpHeaders === null || httpHeaders === void 0 ? void 0 : httpHeaders.host;\n            }\n          }\n        }\n        if (isSingleContactEnabled()) {\n          const contactId = await createContact({\n            name: name !== null && name !== void 0 ? name : visitorDataToUpdate.username,\n            emails: email ? [email] : [],\n            phones: phone ? [phone.number] : [],\n            unknown: true\n          });\n          visitorDataToUpdate.contactId = contactId;\n        }\n        const upsertedLivechatVisitor = await LivechatVisitors.updateOneByIdOrToken(visitorDataToUpdate, {\n          upsert: true,\n          returnDocument: 'after'\n        });\n        if (!upsertedLivechatVisitor.value) {\n          Livechat.logger.debug(\"No visitor found after upsert\");\n          return null;\n        }\n        return upsertedLivechatVisitor.value;\n      }\n      async getBotAgents(department) {\n        if (department) {\n          return LivechatDepartmentAgents.getBotsForDepartment(department);\n        }\n        return Users.findBotAgents();\n      }\n      async resolveChatTags(room) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.logger.debug(\"Resolving chat tags for room \".concat(room._id));\n        const concatUnique = function () {\n          for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n            arrays[_key] = arguments[_key];\n          }\n          return [...new Set([].concat(...arrays.filter(a => !!a)))];\n        };\n        const {\n          departmentId,\n          tags: optionsTags\n        } = room;\n        const {\n          clientAction,\n          tags: oldRoomTags\n        } = options;\n        const roomTags = concatUnique(oldRoomTags, optionsTags);\n        if (!departmentId) {\n          return {\n            updatedOptions: _objectSpread(_objectSpread({}, options), roomTags.length && {\n              tags: roomTags\n            })\n          };\n        }\n        const department = await LivechatDepartment.findOneById(departmentId, {\n          projection: {\n            requestTagBeforeClosingChat: 1,\n            chatClosingTags: 1\n          }\n        });\n        if (!department) {\n          return {\n            updatedOptions: _objectSpread(_objectSpread({}, options), roomTags.length && {\n              tags: roomTags\n            })\n          };\n        }\n        const {\n          requestTagBeforeClosingChat,\n          chatClosingTags\n        } = department;\n        const extraRoomTags = concatUnique(roomTags, chatClosingTags);\n        if (!requestTagBeforeClosingChat) {\n          return {\n            updatedOptions: _objectSpread(_objectSpread({}, options), extraRoomTags.length && {\n              tags: extraRoomTags\n            })\n          };\n        }\n        const checkRoomTags = !clientAction || roomTags && roomTags.length > 0;\n        const checkDepartmentTags = chatClosingTags && chatClosingTags.length > 0;\n        if (!checkRoomTags || !checkDepartmentTags) {\n          throw new Error('error-tags-must-be-assigned-before-closing-chat');\n        }\n        return {\n          updatedOptions: _objectSpread(_objectSpread({}, options), extraRoomTags.length && {\n            tags: extraRoomTags\n          })\n        };\n      }\n      async sendEmail(from, to, replyTo, subject, html) {\n        await Mailer.send({\n          to,\n          from,\n          replyTo,\n          subject,\n          html\n        });\n      }\n      async sendRequest(postData) {\n        let attempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n        if (!attempts) {\n          Livechat.logger.error({\n            msg: 'Omnichannel webhook call failed. Max attempts reached'\n          });\n          return;\n        }\n        const timeout = settings.get('Livechat_http_timeout');\n        const secretToken = settings.get('Livechat_secret_token');\n        const webhookUrl = settings.get('Livechat_webhookUrl');\n        try {\n          Livechat.webhookLogger.debug({\n            msg: 'Sending webhook request',\n            postData\n          });\n          const result = await fetch(webhookUrl, {\n            method: 'POST',\n            headers: _objectSpread({}, secretToken && {\n              'X-RocketChat-Livechat-Token': secretToken\n            }),\n            body: postData,\n            timeout\n          });\n          if (result.status === 200) {\n            metrics.totalLivechatWebhooksSuccess.inc();\n            return result;\n          }\n          metrics.totalLivechatWebhooksFailures.inc();\n          throw new Error(await result.text());\n        } catch (err) {\n          const retryAfter = timeout * 4;\n          Livechat.webhookLogger.error({\n            msg: \"Error response on \".concat(11 - attempts, \" try ->\"),\n            err\n          });\n          // try 10 times after 20 seconds each\n          attempts - 1 && Livechat.webhookLogger.warn({\n            msg: \"Webhook call failed. Retrying\",\n            newAttemptAfterSeconds: retryAfter / 1000,\n            webhookUrl\n          });\n          setTimeout(async () => {\n            await Livechat.sendRequest(postData, attempts - 1);\n          }, retryAfter);\n        }\n      }\n      async saveAgentInfo(_id, agentData, agentDepartments) {\n        check(_id, String);\n        check(agentData, Object);\n        check(agentDepartments, [String]);\n        const user = await Users.findOneById(_id);\n        if (!user || !(await hasRoleAsync(_id, 'livechat-agent'))) {\n          throw new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent');\n        }\n        await Users.setLivechatData(_id, agentData);\n        const currentDepartmentsForAgent = await LivechatDepartmentAgents.findByAgentId(_id).toArray();\n        const toRemoveIds = currentDepartmentsForAgent.filter(dept => !agentDepartments.includes(dept.departmentId)).map(dept => dept.departmentId);\n        const toAddIds = agentDepartments.filter(d => !currentDepartmentsForAgent.some(c => c.departmentId === d));\n        await Promise.all(await LivechatDepartment.findInIds([...toRemoveIds, ...toAddIds], {\n          projection: {\n            _id: 1,\n            enabled: 1\n          }\n        }).map(dep => {\n          return updateDepartmentAgents(dep._id, _objectSpread({}, toRemoveIds.includes(dep._id) ? {\n            remove: [{\n              agentId: _id\n            }]\n          } : {\n            upsert: [{\n              agentId: _id,\n              count: 0,\n              order: 0\n            }]\n          }), dep.enabled);\n        }).toArray());\n        return true;\n      }\n      async updateCallStatus(callId, rid, status, user) {\n        await Rooms.setCallStatus(rid, status);\n        if (status === 'ended' || status === 'declined') {\n          if (await VideoConf.declineLivechatCall(callId)) {\n            return;\n          }\n          return updateMessage({\n            _id: callId,\n            msg: status,\n            actionLinks: [],\n            webRtcCallEndTs: new Date(),\n            rid\n          }, user);\n        }\n      }\n      notifyRoomVisitorChange(roomId, visitor) {\n        void api.broadcast('omnichannel.room', roomId, {\n          type: 'visitorData',\n          visitor\n        });\n      }\n      async changeRoomVisitor(userId, room, visitor) {\n        const user = await Users.findOneById(userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!user) {\n          throw new Error('error-user-not-found');\n        }\n        if (!(await canAccessRoomAsync(room, user))) {\n          throw new Error('error-not-allowed');\n        }\n        await LivechatRooms.changeVisitorByRoomId(room._id, visitor);\n        this.notifyRoomVisitorChange(room._id, visitor);\n        return LivechatRooms.findOneById(room._id);\n      }\n      async notifyAgentStatusChanged(userId, status) {\n        if (!status) {\n          return;\n        }\n        void callbacks.runAsync('livechat.agentStatusChanged', {\n          userId,\n          status\n        });\n        if (!settings.get('Livechat_show_agent_info')) {\n          return;\n        }\n        await LivechatRooms.findOpenByAgent(userId).forEach(room => {\n          void api.broadcast('omnichannel.room', room._id, {\n            type: 'agentStatus',\n            status\n          });\n        });\n      }\n      async updateMessage(_ref4) {\n        let {\n          guest,\n          message\n        } = _ref4;\n        check(message, Match.ObjectIncluding({\n          _id: String\n        }));\n        const originalMessage = await Messages.findOneById(message._id, {\n          projection: {\n            u: 1\n          }\n        });\n        if (!(originalMessage !== null && originalMessage !== void 0 && originalMessage._id)) {\n          return;\n        }\n        const editAllowed = settings.get('Message_AllowEditing');\n        const editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n        if (!editAllowed || !editOwn) {\n          throw new Error('error-action-not-allowed');\n        }\n        // TODO: Apps sends an `any` object and apparently we just check for _id being present\n        // while updateMessage expects AtLeast<id, msg, rid>\n        await updateMessage(message, guest);\n        return true;\n      }\n      async closeOpenChats(userId, comment) {\n        this.logger.debug(\"Closing open chats for user \".concat(userId));\n        const user = await Users.findOneById(userId);\n        const extraQuery = await callbacks.run('livechat.applyDepartmentRestrictions', {}, {\n          userId\n        });\n        const openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n        const promises = [];\n        await openChats.forEach(room => {\n          promises.push(this.closeRoom({\n            user,\n            room,\n            comment\n          }));\n        });\n        await Promise.all(promises);\n      }\n      async transfer(room, guest, transferData) {\n        var _transferData$transfe;\n        this.logger.debug(\"Transfering room \".concat(room._id, \" [Transfered by: \").concat(transferData === null || transferData === void 0 ? void 0 : (_transferData$transfe = transferData.transferredBy) === null || _transferData$transfe === void 0 ? void 0 : _transferData$transfe._id, \"]\"));\n        if (room.onHold) {\n          throw new Error('error-room-onHold');\n        }\n        if (transferData.departmentId) {\n          var _transferData$departm;\n          const department = await LivechatDepartment.findOneById(transferData.departmentId, {\n            projection: {\n              name: 1\n            }\n          });\n          if (!department) {\n            throw new Error('error-invalid-department');\n          }\n          transferData.department = department;\n          this.logger.debug(\"Transfering room \".concat(room._id, \" to department \").concat((_transferData$departm = transferData.department) === null || _transferData$departm === void 0 ? void 0 : _transferData$departm._id));\n        }\n        return RoutingManager.transferRoom(room, guest, transferData);\n      }\n      async forwardOpenChats(userId) {\n        this.logger.debug(\"Transferring open chats for user \".concat(userId));\n        const user = await Users.findOneById(userId);\n        if (!user) {\n          throw new Error('error-invalid-user');\n        }\n        const {\n          _id,\n          username,\n          name\n        } = user;\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(LivechatRooms.findOpenByAgent(userId)), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const room = _step2.value;\n            {\n              const guest = await LivechatVisitors.findOneEnabledById(room.v._id);\n              if (!guest) {\n                continue;\n              }\n              const transferredBy = normalizeTransferredByData({\n                _id,\n                username,\n                name\n              }, room);\n              await this.transfer(room, guest, {\n                transferredBy,\n                departmentId: guest.department\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n      showConnecting() {\n        var _RoutingManager$getCo;\n        return ((_RoutingManager$getCo = RoutingManager.getConfig()) === null || _RoutingManager$getCo === void 0 ? void 0 : _RoutingManager$getCo.showConnecting) || false;\n      }\n      async getInitSettings() {\n        const validSettings = ['Livechat_title', 'Livechat_title_color', 'Livechat_enable_message_character_limit', 'Livechat_message_character_limit', 'Message_MaxAllowedSize', 'Livechat_enabled', 'Livechat_registration_form', 'Livechat_allow_switching_departments', 'Livechat_offline_title', 'Livechat_offline_title_color', 'Livechat_offline_message', 'Livechat_offline_success_message', 'Livechat_offline_form_unavailable', 'Livechat_display_offline_form', 'Omnichannel_call_provider', 'Language', 'Livechat_enable_transcript', 'Livechat_transcript_message', 'Livechat_fileupload_enabled', 'FileUpload_Enabled', 'Livechat_conversation_finished_message', 'Livechat_conversation_finished_text', 'Livechat_name_field_registration_form', 'Livechat_email_field_registration_form', 'Livechat_registration_form_message', 'Livechat_force_accept_data_processing_consent', 'Livechat_data_processing_consent_text', 'Livechat_show_agent_info', 'Livechat_clear_local_storage_when_chat_ended', 'Livechat_history_monitor_type', 'Livechat_hide_system_messages', 'Livechat_widget_position', 'Livechat_background', 'Assets_livechat_widget_logo', 'Livechat_hide_watermark', 'Omnichannel_allow_visitors_to_close_conversation'];\n        const rcSettings = validSettings.reduce((acc, setting) => {\n          acc[setting] = settings.get(setting);\n          return acc;\n        }, {});\n        rcSettings.Livechat_Show_Connecting = this.showConnecting();\n        return rcSettings;\n      }\n      async sendOfflineMessage(data) {\n        if (!settings.get('Livechat_display_offline_form')) {\n          throw new Error('error-offline-form-disabled');\n        }\n        const {\n          message,\n          name,\n          email,\n          department,\n          host\n        } = data;\n        if (!email) {\n          throw new Error('error-invalid-email');\n        }\n        const emailMessage = \"\".concat(message).replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n        let html = '<h1>New livechat message</h1>';\n        if (host && host !== '') {\n          html = html.concat(\"<p><strong>Sent from:</strong><a href='\".concat(host, \"'> \").concat(host, \"</a></p>\"));\n        }\n        html = html.concat(\"\\n\\t\\t\\t<p><strong>Visitor name:</strong> \".concat(name, \"</p>\\n\\t\\t\\t<p><strong>Visitor email:</strong> \").concat(email, \"</p>\\n\\t\\t\\t<p><strong>Message:</strong><br>\").concat(emailMessage, \"</p>\"));\n        const fromEmail = settings.get('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n        let from;\n        if (fromEmail) {\n          from = fromEmail[0];\n        } else {\n          from = settings.get('From_Email');\n        }\n        if (settings.get('Livechat_validate_offline_email')) {\n          const emailDomain = email.substr(email.lastIndexOf('@') + 1);\n          try {\n            await dnsResolveMx(emailDomain);\n          } catch (e) {\n            throw new Meteor.Error('error-invalid-email-address');\n          }\n        }\n        // TODO Block offline form if Livechat_offline_email is undefined\n        // (it does not make sense to have an offline form that does nothing)\n        // `this.sendEmail` will throw an error if the email is invalid\n        // thus this breaks livechat, since the \"to\" email is invalid, and that returns an [invalid email] error to the livechat client\n        let emailTo = settings.get('Livechat_offline_email');\n        if (department && department !== '') {\n          const dep = await LivechatDepartment.findOneByIdOrName(department, {\n            projection: {\n              email: 1\n            }\n          });\n          if (dep) {\n            emailTo = dep.email || emailTo;\n          }\n        }\n        const fromText = \"\".concat(name, \" - \").concat(email, \" <\").concat(from, \">\");\n        const replyTo = \"\".concat(name, \" <\").concat(email, \">\");\n        const subject = \"Livechat offline message from \".concat(name, \": \").concat(\"\".concat(emailMessage).substring(0, 20));\n        await this.sendEmail(fromText, emailTo, replyTo, subject, html);\n        setImmediate(() => {\n          void callbacks.run('livechat.offlineMessage', data);\n        });\n      }\n      async sendMessage(_ref5) {\n        let {\n          guest,\n          message,\n          roomInfo,\n          agent\n        } = _ref5;\n        const {\n          room,\n          newRoom\n        } = await this.getRoom(guest, message, roomInfo, agent);\n        if (guest.name) {\n          message.alias = guest.name;\n        }\n        return Object.assign(await sendMessage(guest, _objectSpread(_objectSpread({}, message), {}, {\n          token: guest.token\n        }), room), {\n          newRoom,\n          showConnecting: this.showConnecting()\n        });\n      }\n      async removeGuest(_id) {\n        const guest = await LivechatVisitors.findOneEnabledById(_id, {\n          projection: {\n            _id: 1,\n            token: 1\n          }\n        });\n        if (!guest) {\n          throw new Error('error-invalid-guest');\n        }\n        await this.cleanGuestHistory(guest);\n        return LivechatVisitors.disableById(_id);\n      }\n      async cleanGuestHistory(guest) {\n        const {\n          token\n        } = guest;\n        // This shouldn't be possible, but just in case\n        if (!token) {\n          throw new Error('error-invalid-guest');\n        }\n        const cursor = LivechatRooms.findByVisitorToken(token);\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(cursor), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const room = _step3.value;\n            {\n              await Promise.all([Subscriptions.removeByRoomId(room._id, {\n                async onTrash(doc) {\n                  void notifyOnSubscriptionChanged(doc, 'removed');\n                }\n              }), FileUpload.removeFilesByRoomId(room._id), Messages.removeByRoomId(room._id), ReadReceipts.removeByRoomId(room._id)]);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        await LivechatRooms.removeByVisitorToken(token);\n        const livechatInquiries = await LivechatInquiry.findIdsByVisitorToken(token).toArray();\n        await LivechatInquiry.removeByIds(livechatInquiries.map(_ref6 => {\n          let {\n            _id\n          } = _ref6;\n          return _id;\n        }));\n        void notifyOnLivechatInquiryChanged(livechatInquiries, 'removed');\n      }\n      async deleteMessage(_ref7) {\n        let {\n          guest,\n          message\n        } = _ref7;\n        const deleteAllowed = settings.get('Message_AllowDeleting');\n        const editOwn = message.u && message.u._id === guest._id;\n        if (!deleteAllowed || !editOwn) {\n          throw new Error('error-action-not-allowed');\n        }\n        await deleteMessage(message, guest);\n        return true;\n      }\n      async setUserStatusLivechatIf(userId, status, condition, fields) {\n        const result = await Users.setLivechatStatusIf(userId, status, condition, fields);\n        if (result.modifiedCount > 0) {\n          void notifyOnUserChange({\n            id: userId,\n            clientAction: 'updated',\n            diff: _objectSpread(_objectSpread({}, fields), {}, {\n              statusLivechat: status\n            })\n          });\n        }\n        callbacks.runAsync('livechat.setUserStatusLivechat', {\n          userId,\n          status\n        });\n        return result;\n      }\n      async returnRoomAsInquiry(room, departmentId) {\n        let overrideTransferData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        this.logger.debug({\n          msg: \"Transfering room to \".concat(departmentId ? 'department' : '', \" queue\"),\n          room\n        });\n        if (!room.open) {\n          throw new Meteor.Error('room-closed');\n        }\n        if (room.onHold) {\n          throw new Meteor.Error('error-room-onHold');\n        }\n        if (!room.servedBy) {\n          return false;\n        }\n        const user = await Users.findOneById(room.servedBy._id);\n        if (!(user !== null && user !== void 0 && user._id)) {\n          throw new Meteor.Error('error-invalid-user');\n        }\n        // find inquiry corresponding to room\n        const inquiry = await LivechatInquiry.findOne({\n          rid: room._id\n        });\n        if (!inquiry) {\n          return false;\n        }\n        const transferredBy = normalizeTransferredByData(user, room);\n        this.logger.debug(\"Transfering room \".concat(room._id, \" by user \").concat(transferredBy._id));\n        const transferData = _objectSpread({\n          roomId: room._id,\n          scope: 'queue',\n          departmentId,\n          transferredBy\n        }, overrideTransferData);\n        try {\n          await this.saveTransferHistory(room, transferData);\n          await RoutingManager.unassignAgent(inquiry, departmentId);\n        } catch (e) {\n          this.logger.error(e);\n          throw new Meteor.Error('error-returning-inquiry');\n        }\n        callbacks.runAsync('livechat:afterReturnRoomAsInquiry', {\n          room\n        });\n        return true;\n      }\n      async saveTransferHistory(room, transferData) {\n        const {\n          departmentId: previousDepartment\n        } = room;\n        const {\n          department: nextDepartment,\n          transferredBy,\n          transferredTo,\n          scope,\n          comment\n        } = transferData;\n        check(transferredBy, Match.ObjectIncluding({\n          _id: String,\n          username: String,\n          name: Match.Maybe(String),\n          userType: String\n        }));\n        const {\n          _id,\n          username\n        } = transferredBy;\n        const scopeData = scope || (nextDepartment ? 'department' : 'agent');\n        this.logger.info(\"Storing new chat transfer of \".concat(room._id, \" [Transfered by: \").concat(_id, \" to \").concat(scopeData, \"]\"));\n        const transferMessage = _objectSpread(_objectSpread({}, transferData.transferredBy.userType === 'visitor' && {\n          token: room.v.token\n        }), {}, {\n          transferData: _objectSpread(_objectSpread(_objectSpread({\n            transferredBy,\n            ts: new Date(),\n            scope: scopeData,\n            comment\n          }, previousDepartment && {\n            previousDepartment\n          }), nextDepartment && {\n            nextDepartment\n          }), transferredTo && {\n            transferredTo\n          })\n        });\n        await Message.saveSystemMessageAndNotifyUser('livechat_transfer_history', room._id, '', {\n          _id,\n          username\n        }, transferMessage);\n      }\n      async saveGuest(guestData, userId) {\n        const {\n          _id,\n          name,\n          email,\n          phone,\n          livechatData = {}\n        } = guestData;\n        const visitor = await LivechatVisitors.findOneById(_id, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!visitor) {\n          throw new Error('error-invalid-visitor');\n        }\n        this.logger.debug({\n          msg: 'Saving guest',\n          guestData\n        });\n        const updateData = {\n          livechatData: {}\n        };\n        if (name) {\n          updateData.name = name;\n        }\n        if (email) {\n          updateData.email = email;\n        }\n        if (phone) {\n          updateData.phone = phone;\n        }\n        const customFields = {};\n        if ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n          this.logger.debug({\n            msg: \"Saving custom fields for visitor \".concat(_id),\n            livechatData\n          });\n          var _iteratorAbruptCompletion4 = false;\n          var _didIteratorError4 = false;\n          var _iteratorError4;\n          try {\n            for (var _iterator4 = _asyncIterator(LivechatCustomField.findByScope('visitor')), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n              const field = _step4.value;\n              {\n                if (!livechatData.hasOwnProperty(field._id)) {\n                  continue;\n                }\n                const value = trim(livechatData[field._id]);\n                if (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n                  const regexp = new RegExp(field.regexp);\n                  if (!regexp.test(value)) {\n                    throw new Error(i18n.t('error-invalid-custom-field-value'));\n                  }\n                }\n                customFields[field._id] = value;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n                await _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n          updateData.livechatData = customFields;\n          Livechat.logger.debug(\"About to update \".concat(Object.keys(customFields).length, \" custom fields for visitor \").concat(_id));\n        }\n        const ret = await LivechatVisitors.saveGuestById(_id, updateData);\n        setImmediate(() => {\n          var _Apps$self3;\n          void ((_Apps$self3 = Apps.self) === null || _Apps$self3 === void 0 ? void 0 : _Apps$self3.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id));\n        });\n        return ret;\n      }\n      async setCustomFields(_ref8) {\n        let {\n          token,\n          key,\n          value,\n          overwrite\n        } = _ref8;\n        Livechat.logger.debug(\"Setting custom fields data for visitor with token \".concat(token));\n        const customField = await LivechatCustomField.findOneById(key);\n        if (!customField) {\n          throw new Error('invalid-custom-field');\n        }\n        if (customField.regexp !== undefined && customField.regexp !== '') {\n          const regexp = new RegExp(customField.regexp);\n          if (!regexp.test(value)) {\n            throw new Error(i18n.t('error-invalid-custom-field-value', {\n              field: key\n            }));\n          }\n        }\n        let result;\n        if (customField.scope === 'room') {\n          result = await LivechatRooms.updateDataByToken(token, key, value, overwrite);\n        } else {\n          result = await LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n        }\n        if (typeof result === 'boolean') {\n          // Note: this only happens when !overwrite is passed, in this case we don't do any db update\n          return 0;\n        }\n        return result.modifiedCount;\n      }\n      async requestTranscript(_ref9) {\n        let {\n          rid,\n          email,\n          subject,\n          user\n        } = _ref9;\n        const room = await LivechatRooms.findOneById(rid, {\n          projection: {\n            _id: 1,\n            open: 1,\n            transcriptRequest: 1\n          }\n        });\n        if (!(room !== null && room !== void 0 && room.open)) {\n          throw new Meteor.Error('error-invalid-room', 'Invalid room');\n        }\n        if (room.transcriptRequest) {\n          throw new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n        }\n        if (!(await Omnichannel.isWithinMACLimit(room))) {\n          throw new Error('error-mac-limit-reached');\n        }\n        const {\n          _id,\n          username,\n          name,\n          utcOffset\n        } = user;\n        const transcriptRequest = {\n          requestedAt: new Date(),\n          requestedBy: {\n            _id,\n            username,\n            name,\n            utcOffset\n          },\n          email,\n          subject\n        };\n        await LivechatRooms.setEmailTranscriptRequestedByRoomId(rid, transcriptRequest);\n        return true;\n      }\n      async savePageHistory(token, roomId, pageInfo) {\n        this.logger.debug({\n          msg: \"Saving page movement history for visitor with token \".concat(token),\n          pageInfo,\n          roomId\n        });\n        if (pageInfo.change !== settings.get('Livechat_history_monitor_type')) {\n          return;\n        }\n        const user = await Users.findOneById('rocket.cat');\n        if (!user) {\n          throw new Error('error-invalid-user');\n        }\n        const pageTitle = pageInfo.title;\n        const pageUrl = pageInfo.location.href;\n        const extraData = {\n          navigation: {\n            page: pageInfo,\n            token\n          }\n        };\n        if (!roomId) {\n          this.logger.warn(\"Saving page history without room id for visitor with token \".concat(token));\n          // keep history of unregistered visitors for 1 month\n          const keepHistoryMiliseconds = 2592000000;\n          extraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n        }\n        if (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n          extraData._hidden = true;\n        }\n        // @ts-expect-error: Investigating on which case we won't receive a roomId and where that history is supposed to be stored\n        return Message.saveSystemMessage('livechat_navigation_history', roomId, \"\".concat(pageTitle, \" - \").concat(pageUrl), user, extraData);\n      }\n      async afterRemoveAgent(user) {\n        await callbacks.run('livechat.afterAgentRemoved', {\n          agent: user\n        });\n        return true;\n      }\n      async removeAgent(username) {\n        const user = await Users.findOneByUsername(username, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        });\n        if (!user) {\n          throw new Error('error-invalid-user');\n        }\n        const {\n          _id\n        } = user;\n        if (await removeUserFromRolesAsync(_id, ['livechat-agent'])) {\n          return this.afterRemoveAgent(user);\n        }\n        return false;\n      }\n      async removeManager(username) {\n        const user = await Users.findOneByUsername(username, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!user) {\n          throw new Error('error-invalid-user');\n        }\n        return removeUserFromRolesAsync(user._id, ['livechat-manager']);\n      }\n      async getLivechatRoomGuestInfo(room) {\n        var _room$servedBy, _room$servedBy2;\n        const visitor = await LivechatVisitors.findOneEnabledById(room.v._id);\n        if (!visitor) {\n          throw new Error('error-invalid-visitor');\n        }\n        const agent = (_room$servedBy = room.servedBy) !== null && _room$servedBy !== void 0 && _room$servedBy._id ? await Users.findOneById((_room$servedBy2 = room.servedBy) === null || _room$servedBy2 === void 0 ? void 0 : _room$servedBy2._id) : null;\n        const ua = new UAParser();\n        ua.setUA(visitor.userAgent || '');\n        const postData = {\n          _id: room._id,\n          label: room.fname || room.label,\n          // using same field for compatibility\n          topic: room.topic,\n          createdAt: room.ts,\n          lastMessageAt: room.lm,\n          tags: room.tags,\n          customFields: room.livechatData,\n          visitor: {\n            _id: visitor._id,\n            token: visitor.token,\n            name: visitor.name,\n            username: visitor.username,\n            department: visitor.department,\n            ip: visitor.ip,\n            os: ua.getOS().name && \"\".concat(ua.getOS().name, \" \").concat(ua.getOS().version),\n            browser: ua.getBrowser().name && \"\".concat(ua.getBrowser().name, \" \").concat(ua.getBrowser().version),\n            customFields: visitor.livechatData\n          }\n        };\n        if (agent) {\n          const customFields = parseAgentCustomFields(agent.customFields);\n          postData.agent = _objectSpread({\n            _id: agent._id,\n            username: agent.username,\n            name: agent.name\n          }, customFields && {\n            customFields\n          });\n          if (agent.emails && agent.emails.length > 0) {\n            postData.agent.email = agent.emails[0].address;\n          }\n        }\n        if (room.crmData) {\n          postData.crmData = room.crmData;\n        }\n        if (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n          postData.visitor.email = visitor.visitorEmails;\n        }\n        if (visitor.phone && visitor.phone.length > 0) {\n          postData.visitor.phone = visitor.phone;\n        }\n        return postData;\n      }\n      async allowAgentChangeServiceStatus(statusLivechat, agentId) {\n        if (statusLivechat !== ILivechatAgentStatus.AVAILABLE) {\n          return true;\n        }\n        return businessHourManager.allowAgentChangeServiceStatus(agentId);\n      }\n      async notifyGuestStatusChanged(token, status) {\n        await LivechatRooms.updateVisitorStatus(token, status);\n        const inquiryVisitorStatus = await LivechatInquiry.updateVisitorStatus(token, status);\n        if (inquiryVisitorStatus.modifiedCount) {\n          void notifyOnLivechatInquiryChangedByToken(token, 'updated', {\n            v: {\n              status\n            }\n          });\n        }\n      }\n      async setUserStatusLivechat(userId, status) {\n        const user = await Users.setLivechatStatus(userId, status);\n        callbacks.runAsync('livechat.setUserStatusLivechat', {\n          userId,\n          status\n        });\n        if (user.modifiedCount > 0) {\n          void notifyOnUserChange({\n            id: userId,\n            clientAction: 'updated',\n            diff: {\n              statusLivechat: status,\n              livechatStatusSystemModified: false\n            }\n          });\n        }\n        return user;\n      }\n      async afterAgentAdded(user) {\n        await Promise.all([Users.setOperator(user._id, true), this.setUserStatusLivechat(user._id, user.status !== 'offline' ? ILivechatAgentStatus.AVAILABLE : ILivechatAgentStatus.NOT_AVAILABLE)]);\n        callbacks.runAsync('livechat.onNewAgentCreated', user._id);\n        return user;\n      }\n      async addAgent(username) {\n        check(username, String);\n        const user = await Users.findOneByUsername(username, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        });\n        if (!user) {\n          throw new Meteor.Error('error-invalid-user');\n        }\n        if (await addUserRolesAsync(user._id, ['livechat-agent'])) {\n          return this.afterAgentAdded(user);\n        }\n        return false;\n      }\n      async afterAgentUserActivated(user) {\n        if (!user.roles.includes('livechat-agent')) {\n          throw new Error('invalid-user-role');\n        }\n        await Users.setOperator(user._id, true);\n        callbacks.runAsync('livechat.onNewAgentCreated', user._id);\n      }\n      async addManager(username) {\n        check(username, String);\n        const user = await Users.findOneByUsername(username, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        });\n        if (!user) {\n          throw new Meteor.Error('error-invalid-user');\n        }\n        if (await addUserRolesAsync(user._id, ['livechat-manager'])) {\n          return user;\n        }\n        return false;\n      }\n      async saveRoomInfo(roomData, guestData, userId) {\n        var _guestData$name;\n        this.logger.debug(\"Saving room information on room \".concat(roomData._id));\n        const {\n          livechatData = {}\n        } = roomData;\n        const customFields = {};\n        if ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n          const fields = LivechatCustomField.findByScope('room');\n          var _iteratorAbruptCompletion5 = false;\n          var _didIteratorError5 = false;\n          var _iteratorError5;\n          try {\n            for (var _iterator5 = _asyncIterator(fields), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n              const field = _step5.value;\n              {\n                if (!livechatData.hasOwnProperty(field._id)) {\n                  continue;\n                }\n                const value = trim(livechatData[field._id]);\n                if (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n                  const regexp = new RegExp(field.regexp);\n                  if (!regexp.test(value)) {\n                    throw new Meteor.Error(i18n.t('error-invalid-custom-field-value', {\n                      field: field.label\n                    }));\n                  }\n                }\n                customFields[field._id] = value;\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                await _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n          roomData.livechatData = customFields;\n          Livechat.logger.debug(\"About to update \".concat(Object.keys(customFields).length, \" custom fields on room \").concat(roomData._id));\n        }\n        await LivechatRooms.saveRoomById(roomData);\n        setImmediate(() => {\n          var _Apps$self4;\n          void ((_Apps$self4 = Apps.self) === null || _Apps$self4 === void 0 ? void 0 : _Apps$self4.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id));\n        });\n        if (guestData !== null && guestData !== void 0 && (_guestData$name = guestData.name) !== null && _guestData$name !== void 0 && _guestData$name.trim().length) {\n          var _responses$, _responses$2;\n          const {\n            _id: rid\n          } = roomData;\n          const {\n            name\n          } = guestData;\n          const responses = await Promise.all([Rooms.setFnameById(rid, name), LivechatInquiry.setNameByRoomId(rid, name), Subscriptions.updateDisplayNameByRoomId(rid, name)]);\n          if ((_responses$ = responses[1]) !== null && _responses$ !== void 0 && _responses$.modifiedCount) {\n            void notifyOnLivechatInquiryChangedByRoom(rid, 'updated', {\n              name\n            });\n          }\n          if ((_responses$2 = responses[2]) !== null && _responses$2 !== void 0 && _responses$2.modifiedCount) {\n            await notifyOnSubscriptionChangedByRoomId(rid);\n          }\n        }\n        void notifyOnRoomChangedById(roomData._id);\n        return true;\n      }\n    }\n    const Livechat = new LivechatClass();\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","Livechat","dns","util","*","Apps","AppEvents","Message","VideoConf","api","Omnichannel","OmnichannelSourceType","ILivechatAgentStatus","UserStatus","isOmnichannelRoom","Logger","LivechatDepartment","LivechatInquiry","LivechatRooms","Subscriptions","LivechatVisitors","Messages","Users","LivechatDepartmentAgents","ReadReceipts","Rooms","LivechatCustomField","LivechatContacts","fetch","serverFetch","Match","check","Meteor","UAParser","callbacks","trim","client","i18n","addUserRolesAsync","removeUserFromRolesAsync","canAccessRoomAsync","hasPermissionAsync","hasRoleAsync","FileUpload","deleteMessage","sendMessage","updateMessage","notifyOnLivechatInquiryChanged","notifyOnLivechatInquiryChangedByRoom","notifyOnRoomChangedById","notifyOnLivechatInquiryChangedByToken","notifyOnUserChange","notifyOnSubscriptionChangedByRoomId","notifyOnSubscriptionChanged","Mailer","metrics","settings","businessHourManager","createContact","createContactFromVisitor","isSingleContactEnabled","parseAgentCustomFields","updateDepartmentAgents","validateEmail","normalizeTransferredByData","QueueManager","RoutingManager","parseTranscriptRequest","__reifyWaitForDeps__","isRoomClosedByUserParams","params","user","undefined","isRoomClosedByVisitorParams","visitor","dnsResolveMx","promisify","resolveMx","LivechatClass","constructor","logger","webhookLogger","section","online","department","skipNoAgentSetting","arguments","length","skipFallbackCheck","debug","concat","get","botAgents","getBotAgents","onlineBots","count","agentsOnline","checkOnlineAgents","closeRoom","attempts","newRoom","chatCloser","removedInquiryObj","session","startSession","startTransaction","room","closedBy","removedInquiry","doCloseRoom","commitTransaction","e","_e$errorLabels","_e$errorLabels2","error","err","msg","afterAttempts","abortTransaction","errorLabels","includes","Error","endSession","afterRoomClosed","inquiry","_params$comment","transcriptRequested","transcriptRequest","_id","saveSystemMessageAndNotifyUser","comment","groupable","token","saveSystemMessage","process","nextTick","_Apps$self","_Apps$self$getBridges","_Apps$self2","_Apps$self2$getBridge","self","getBridges","getListenerBridge","livechatEvent","ILivechatRoomClosedHandler","IPostLivechatRoomClosed","opts","options","env","TEST_MODE","run","runAsync","open","commentRequired","updatedOptions","resolveChatTags","now","Date","rid","servedBy","serviceTimeDuration","getTime","ts","closeData","closedAt","chatDuration","closer","username","findOneByRoomId","removeByRoomId","deletedCount","updatedRoom","closeRoomById","modifiedCount","subs","countByRoomId","removedSubs","onTrash","doc","findOneById","getRequiredDepartment","onlineRequired","departments","findEnabledWithAgents","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","dept","value","showOnRegistration","onlineAgents","getOnlineForDepartment","return","createRoom","_ref","message","roomInfo","agent","extraData","defaultAgent","requestRoom","guest","contactId","visitorContact","findOne","projection","name","contactManager","livechatData","phone","visitorEmails","contact","channels","_contact$channels","channel","find","_roomInfo$source","source","type","visitorId","_roomInfo$source2","_roomInfo$source3","addChannel","label","toString","OTHER","blocked","verified","details","setRoomIdByToken","getRoom","agentId","onlineForDep","checkOnlineForDepartment","dep","fallbackForwardDepartment","setDepartmentForGuest","_ref2","String","updateUser","$set","getVisitorByToken","updateById","removeRoom","_result$","_result$3$value","result","Promise","allSettled","removeById","status","r","reason","isValidObject","obj","registerGuest","_ref3","id","email","connectionData","ONLINE","Maybe","visitorDataToUpdate","number","phoneNumber","visitorEmail","toLowerCase","address","livechatVisitor","findOneByIdOrName","existingUser","findOneVisitorByPhone","findOneGuestByEmailAddress","getNextVisitorUsername","httpHeaders","clientAddress","userAgent","ip","host","emails","phones","unknown","upsertedLivechatVisitor","updateOneByIdOrToken","upsert","returnDocument","getBotsForDepartment","findBotAgents","concatUnique","_len","arrays","Array","_key","Set","filter","a","departmentId","tags","optionsTags","clientAction","oldRoomTags","roomTags","requestTagBeforeClosingChat","chatClosingTags","extraRoomTags","checkRoomTags","checkDepartmentTags","sendEmail","from","to","replyTo","subject","html","send","sendRequest","postData","timeout","secretToken","webhookUrl","method","headers","body","totalLivechatWebhooksSuccess","inc","totalLivechatWebhooksFailures","text","retryAfter","warn","newAttemptAfterSeconds","setTimeout","saveAgentInfo","agentData","agentDepartments","Object","setLivechatData","currentDepartmentsForAgent","findByAgentId","toArray","toRemoveIds","map","toAddIds","d","some","c","all","findInIds","enabled","remove","order","updateCallStatus","callId","setCallStatus","declineLivechatCall","actionLinks","webRtcCallEndTs","notifyRoomVisitorChange","roomId","broadcast","changeRoomVisitor","userId","changeVisitorByRoomId","notifyAgentStatusChanged","findOpenByAgent","forEach","_ref4","ObjectIncluding","originalMessage","u","editAllowed","editOwn","closeOpenChats","extraQuery","openChats","promises","push","transfer","transferData","_transferData$transfe","transferredBy","onHold","_transferData$departm","transferRoom","forwardOpenChats","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","findOneEnabledById","showConnecting","_RoutingManager$getCo","getConfig","getInitSettings","validSettings","rcSettings","reduce","acc","setting","Livechat_Show_Connecting","sendOfflineMessage","data","emailMessage","replace","fromEmail","match","emailDomain","substr","lastIndexOf","emailTo","fromText","substring","setImmediate","_ref5","alias","assign","removeGuest","cleanGuestHistory","disableById","cursor","findByVisitorToken","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","removeFilesByRoomId","removeByVisitorToken","livechatInquiries","findIdsByVisitorToken","removeByIds","_ref6","_ref7","deleteAllowed","setUserStatusLivechatIf","condition","fields","setLivechatStatusIf","diff","statusLivechat","returnRoomAsInquiry","overrideTransferData","scope","saveTransferHistory","unassignAgent","previousDepartment","nextDepartment","transferredTo","userType","scopeData","info","transferMessage","saveGuest","guestData","updateData","customFields","keys","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","findByScope","_step4","field","hasOwnProperty","regexp","RegExp","test","t","ret","saveGuestById","_Apps$self3","triggerEvent","IPostLivechatGuestSaved","setCustomFields","_ref8","key","overwrite","customField","updateDataByToken","updateLivechatDataByToken","requestTranscript","_ref9","isWithinMACLimit","utcOffset","requestedAt","requestedBy","setEmailTranscriptRequestedByRoomId","savePageHistory","pageInfo","change","pageTitle","title","pageUrl","location","href","navigation","page","keepHistoryMiliseconds","expireAt","_hidden","afterRemoveAgent","removeAgent","findOneByUsername","removeManager","getLivechatRoomGuestInfo","_room$servedBy","_room$servedBy2","ua","setUA","fname","topic","createdAt","lastMessageAt","lm","os","getOS","version","browser","getBrowser","crmData","allowAgentChangeServiceStatus","AVAILABLE","notifyGuestStatusChanged","updateVisitorStatus","inquiryVisitorStatus","setUserStatusLivechat","setLivechatStatus","livechatStatusSystemModified","afterAgentAdded","setOperator","NOT_AVAILABLE","addAgent","afterAgentUserActivated","roles","addManager","saveRoomInfo","roomData","_guestData$name","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","saveRoomById","_Apps$self4","IPostLivechatRoomSaved","_responses$","_responses$2","responses","setFnameById","setNameByRoomId","updateDisplayNameByRoomId","__reify_async_result__","_reifyError","async"],"sources":["app/livechat/server/lib/LivechatTyped.ts"],"sourcesContent":["import dns from 'dns';\nimport * as util from 'util';\n\nimport { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message, VideoConf, api, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tIOmnichannelRoom,\n\tIOmnichannelRoomClosingInfo,\n\tIUser,\n\tILivechatVisitor,\n\tSelectedAgent,\n\tILivechatAgent,\n\tIMessage,\n\tILivechatDepartment,\n\tAtLeast,\n\tTransferData,\n\tIOmnichannelAgent,\n\tILivechatInquiryRecord,\n\tILivechatContact,\n\tILivechatContactChannel,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType, ILivechatAgentStatus, UserStatus, isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { Logger, type MainLogger } from '@rocket.chat/logger';\nimport {\n\tLivechatDepartment,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tSubscriptions,\n\tLivechatVisitors,\n\tMessages,\n\tUsers,\n\tLivechatDepartmentAgents,\n\tReadReceipts,\n\tRooms,\n\tLivechatCustomField,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter, ClientSession, MongoError } from 'mongodb';\nimport UAParser from 'ua-parser-js';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { client } from '../../../../server/database/utils';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { addUserRolesAsync } from '../../../../server/lib/roles/addUserRoles';\nimport { removeUserFromRolesAsync } from '../../../../server/lib/roles/removeUserFromRoles';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { FileUpload } from '../../../file-upload/server';\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport {\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnLivechatInquiryChangedByRoom,\n\tnotifyOnRoomChangedById,\n\tnotifyOnLivechatInquiryChangedByToken,\n\tnotifyOnUserChange,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport * as Mailer from '../../../mailer/server/api';\nimport { metrics } from '../../../metrics/server';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport { createContact, createContactFromVisitor, isSingleContactEnabled } from './Contacts';\nimport { parseAgentCustomFields, updateDepartmentAgents, validateEmail, normalizeTransferredByData } from './Helper';\nimport { QueueManager } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport type { CloseRoomParams, CloseRoomParamsByUser, CloseRoomParamsByVisitor, ILivechatMessage } from './localTypes';\nimport { parseTranscriptRequest } from './parseTranscriptRequest';\n\ntype RegisterGuestType = Partial<Pick<ILivechatVisitor, 'token' | 'name' | 'department' | 'status' | 'username' | 'source'>> & {\n\tid?: string;\n\tconnectionData?: any;\n\temail?: string;\n\tphone?: { number: string };\n};\n\ntype OfflineMessageData = {\n\tmessage: string;\n\tname: string;\n\temail: string;\n\tdepartment?: string;\n\thost?: string;\n};\n\ntype AKeyOf<T> = {\n\t[K in keyof T]?: T[K];\n};\n\ntype PageInfo = { title: string; location: { href: string }; change: string };\n\ntype ICRMData = {\n\t_id: string;\n\tlabel?: string;\n\ttopic?: string;\n\tcreatedAt: Date;\n\tlastMessageAt?: Date;\n\ttags?: string[];\n\tcustomFields?: IOmnichannelRoom['livechatData'];\n\tvisitor: Pick<ILivechatVisitor, '_id' | 'token' | 'name' | 'username' | 'department' | 'phone' | 'ip'> & {\n\t\temail?: ILivechatVisitor['visitorEmails'];\n\t\tos?: string;\n\t\tbrowser?: string;\n\t\tcustomFields: ILivechatVisitor['livechatData'];\n\t};\n\tagent?: Pick<IOmnichannelAgent, '_id' | 'username' | 'name' | 'customFields'> & {\n\t\temail?: NonNullable<IOmnichannelAgent['emails']>[number]['address'];\n\t};\n\tcrmData?: IOmnichannelRoom['crmData'];\n};\n\ntype ChatCloser = { _id: string; username: string | undefined };\n\nconst isRoomClosedByUserParams = (params: CloseRoomParams): params is CloseRoomParamsByUser =>\n\t(params as CloseRoomParamsByUser).user !== undefined;\nconst isRoomClosedByVisitorParams = (params: CloseRoomParams): params is CloseRoomParamsByVisitor =>\n\t(params as CloseRoomParamsByVisitor).visitor !== undefined;\n\nconst dnsResolveMx = util.promisify(dns.resolveMx);\n\nclass LivechatClass {\n\tlogger: Logger;\n\n\twebhookLogger: MainLogger;\n\n\tconstructor() {\n\t\tthis.logger = new Logger('Livechat');\n\t\tthis.webhookLogger = this.logger.section('Webhook');\n\t}\n\n\tasync online(department?: string, skipNoAgentSetting = false, skipFallbackCheck = false): Promise<boolean> {\n\t\tLivechat.logger.debug(`Checking online agents ${department ? `for department ${department}` : ''}`);\n\t\tif (!skipNoAgentSetting && settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tLivechat.logger.debug('Can accept without online agents: true');\n\t\t\treturn true;\n\t\t}\n\n\t\tif (settings.get('Livechat_assign_new_conversation_to_bot')) {\n\t\t\tLivechat.logger.debug(`Fetching online bot agents for department ${department}`);\n\t\t\tconst botAgents = await Livechat.getBotAgents(department);\n\t\t\tif (botAgents) {\n\t\t\t\tconst onlineBots = await botAgents.count();\n\t\t\t\tthis.logger.debug(`Found ${onlineBots} online`);\n\t\t\t\tif (onlineBots > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst agentsOnline = await this.checkOnlineAgents(department, undefined, skipFallbackCheck);\n\t\tLivechat.logger.debug(`Are online agents ${department ? `for department ${department}` : ''}?: ${agentsOnline}`);\n\t\treturn agentsOnline;\n\t}\n\n\tasync closeRoom(params: CloseRoomParams, attempts = 2): Promise<void> {\n\t\tlet newRoom: IOmnichannelRoom;\n\t\tlet chatCloser: ChatCloser;\n\t\tlet removedInquiryObj: ILivechatInquiryRecord | null;\n\n\t\tconst session = client.startSession();\n\t\ttry {\n\t\t\tsession.startTransaction();\n\t\t\tconst { room, closedBy, removedInquiry } = await this.doCloseRoom(params, session);\n\t\t\tawait session.commitTransaction();\n\n\t\t\tnewRoom = room;\n\t\t\tchatCloser = closedBy;\n\t\t\tremovedInquiryObj = removedInquiry;\n\t\t} catch (e) {\n\t\t\tthis.logger.error({ err: e, msg: 'Failed to close room', afterAttempts: attempts });\n\t\t\tawait session.abortTransaction();\n\t\t\t// Dont propagate transaction errors\n\t\t\tif (\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('UnknownTransactionCommitResult') ||\n\t\t\t\t(e as unknown as MongoError)?.errorLabels?.includes('TransientTransactionError')\n\t\t\t) {\n\t\t\t\tif (attempts > 0) {\n\t\t\t\t\tthis.logger.debug(`Retrying close room because of transient error. Attempts left: ${attempts}`);\n\t\t\t\t\treturn this.closeRoom(params, attempts - 1);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('error-room-cannot-be-closed-try-again');\n\t\t\t}\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tawait session.endSession();\n\t\t}\n\n\t\t// Note: when reaching this point, the room has been closed\n\t\t// Transaction is commited and so these messages can be sent here.\n\t\treturn this.afterRoomClosed(newRoom, chatCloser, removedInquiryObj, params);\n\t}\n\n\tasync afterRoomClosed(\n\t\tnewRoom: IOmnichannelRoom,\n\t\tchatCloser: ChatCloser,\n\t\tinquiry: ILivechatInquiryRecord | null,\n\t\tparams: CloseRoomParams,\n\t): Promise<void> {\n\t\tif (!chatCloser) {\n\t\t\t// this should never happen\n\t\t\treturn;\n\t\t}\n\t\t// Note: we are okay with these messages being sent outside of the transaction. The process of sending a message\n\t\t// is huge and involves multiple db calls. Making it transactionable this way would be really hard.\n\t\t// And passing just _some_ actions to the transaction creates some deadlocks since messages are updated in the afterSaveMessages callbacks.\n\t\tconst transcriptRequested =\n\t\t\t!!params.room.transcriptRequest || (!settings.get('Livechat_enable_transcript') && settings.get('Livechat_transcript_send_always'));\n\t\tthis.logger.debug(`Sending closing message to room ${newRoom._id}`);\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat-close', newRoom._id, params.comment ?? '', chatCloser, {\n\t\t\tgroupable: false,\n\t\t\ttranscriptRequested,\n\t\t\t...(isRoomClosedByVisitorParams(params) && { token: params.visitor.token }),\n\t\t});\n\n\t\tif (settings.get('Livechat_enable_transcript') && !settings.get('Livechat_transcript_send_always')) {\n\t\t\tawait Message.saveSystemMessage('command', newRoom._id, 'promptTranscript', chatCloser);\n\t\t}\n\n\t\tthis.logger.debug(`Running callbacks for room ${newRoom._id}`);\n\n\t\tprocess.nextTick(() => {\n\t\t\t/**\n\t\t\t * @deprecated the `AppEvents.ILivechatRoomClosedHandler` event will be removed\n\t\t\t * in the next major version of the Apps-Engine\n\t\t\t */\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.ILivechatRoomClosedHandler, newRoom);\n\t\t\tvoid Apps.self?.getBridges()?.getListenerBridge().livechatEvent(AppEvents.IPostLivechatRoomClosed, newRoom);\n\t\t});\n\n\t\tconst visitor = isRoomClosedByVisitorParams(params) ? params.visitor : undefined;\n\t\tconst opts = await parseTranscriptRequest(params.room, params.options, visitor);\n\t\tif (process.env.TEST_MODE) {\n\t\t\tawait callbacks.run('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t} else {\n\t\t\tcallbacks.runAsync('livechat.closeRoom', {\n\t\t\t\troom: newRoom,\n\t\t\t\toptions: opts,\n\t\t\t});\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(newRoom._id);\n\t\tif (inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tthis.logger.debug(`Room ${newRoom._id} was closed`);\n\t}\n\n\tasync doCloseRoom(\n\t\tparams: CloseRoomParams,\n\t\tsession: ClientSession,\n\t): Promise<{ room: IOmnichannelRoom; closedBy: ChatCloser; removedInquiry: ILivechatInquiryRecord | null }> {\n\t\tconst { comment } = params;\n\t\tconst { room } = params;\n\n\t\tthis.logger.debug(`Attempting to close room ${room._id}`);\n\t\tif (!room || !isOmnichannelRoom(room) || !room.open) {\n\t\t\tthis.logger.debug(`Room ${room._id} is not open`);\n\t\t\tthrow new Error('error-room-closed');\n\t\t}\n\n\t\tconst commentRequired = settings.get('Livechat_request_comment_when_closing_conversation');\n\t\tif (commentRequired && !comment?.trim()) {\n\t\t\tthrow new Error('error-comment-is-required');\n\t\t}\n\n\t\tconst { updatedOptions: options } = await this.resolveChatTags(room, params.options);\n\t\tthis.logger.debug(`Resolved chat tags for room ${room._id}`);\n\n\t\tconst now = new Date();\n\t\tconst { _id: rid, servedBy } = room;\n\t\tconst serviceTimeDuration = servedBy && (now.getTime() - new Date(servedBy.ts).getTime()) / 1000;\n\n\t\tconst closeData: IOmnichannelRoomClosingInfo = {\n\t\t\tclosedAt: now,\n\t\t\tchatDuration: (now.getTime() - new Date(room.ts).getTime()) / 1000,\n\t\t\t...(serviceTimeDuration && { serviceTimeDuration }),\n\t\t\t...options,\n\t\t};\n\t\tthis.logger.debug(`Room ${room._id} was closed at ${closeData.closedAt} (duration ${closeData.chatDuration})`);\n\n\t\tif (isRoomClosedByUserParams(params)) {\n\t\t\tconst { user } = params;\n\t\t\tthis.logger.debug(`Closing by user ${user?._id}`);\n\t\t\tcloseData.closer = 'user';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: user?._id || '',\n\t\t\t\tusername: user?.username,\n\t\t\t};\n\t\t} else if (isRoomClosedByVisitorParams(params)) {\n\t\t\tconst { visitor } = params;\n\t\t\tthis.logger.debug(`Closing by visitor ${params.visitor._id}`);\n\t\t\tcloseData.closer = 'visitor';\n\t\t\tcloseData.closedBy = {\n\t\t\t\t_id: visitor._id,\n\t\t\t\tusername: visitor.username,\n\t\t\t};\n\t\t} else {\n\t\t\tthrow new Error('Error: Please provide details of the user or visitor who closed the room');\n\t\t}\n\n\t\tthis.logger.debug(`Updating DB for room ${room._id} with close data`);\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { session });\n\t\tconst removedInquiry = await LivechatInquiry.removeByRoomId(rid, { session });\n\t\tif (removedInquiry && removedInquiry.deletedCount !== 1) {\n\t\t\tthrow new Error('Error removing inquiry');\n\t\t}\n\n\t\tconst updatedRoom = await LivechatRooms.closeRoomById(rid, closeData, { session });\n\t\tif (!updatedRoom || updatedRoom.modifiedCount !== 1) {\n\t\t\tthrow new Error('Error closing room');\n\t\t}\n\n\t\tconst subs = await Subscriptions.countByRoomId(rid, { session });\n\t\tconst removedSubs = await Subscriptions.removeByRoomId(rid, {\n\t\t\tasync onTrash(doc) {\n\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t},\n\t\t\tsession,\n\t\t});\n\n\t\tif (removedSubs.deletedCount !== subs) {\n\t\t\tthrow new Error('Error removing subscriptions');\n\t\t}\n\n\t\tthis.logger.debug(`DB updated for room ${room._id}`);\n\n\t\t// Retrieve the closed room\n\t\tconst newRoom = await LivechatRooms.findOneById(rid, { session });\n\t\tif (!newRoom) {\n\t\t\tthrow new Error('Error: Room not found');\n\t\t}\n\n\t\treturn { room: newRoom, closedBy: closeData.closedBy, removedInquiry: inquiry };\n\t}\n\n\tasync getRequiredDepartment(onlineRequired = true) {\n\t\tconst departments = LivechatDepartment.findEnabledWithAgents();\n\n\t\tfor await (const dept of departments) {\n\t\t\tif (!dept.showOnRegistration) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!onlineRequired) {\n\t\t\t\treturn dept;\n\t\t\t}\n\n\t\t\tconst onlineAgents = await LivechatDepartmentAgents.getOnlineForDepartment(dept._id);\n\t\t\tif (onlineAgents && (await onlineAgents.count())) {\n\t\t\t\treturn dept;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync createRoom({\n\t\tvisitor,\n\t\tmessage,\n\t\trid,\n\t\troomInfo,\n\t\tagent,\n\t\textraData,\n\t}: {\n\t\tvisitor: ILivechatVisitor;\n\t\tmessage?: string;\n\t\trid?: string;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t\textraData?: Record<string, unknown>;\n\t}) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\n\t\tconst defaultAgent = await callbacks.run('livechat.checkDefaultAgentOnNewRoom', agent, visitor);\n\t\t// if no department selected verify if there is at least one active and pick the first\n\t\tif (!defaultAgent && !visitor.department) {\n\t\t\tconst department = await this.getRequiredDepartment();\n\t\t\tLivechat.logger.debug(`No department or default agent selected for ${visitor._id}`);\n\n\t\t\tif (department) {\n\t\t\t\tLivechat.logger.debug(`Assigning ${visitor._id} to department ${department._id}`);\n\t\t\t\tvisitor.department = department._id;\n\t\t\t}\n\t\t}\n\n\t\t// delegate room creation to QueueManager\n\t\tLivechat.logger.debug(`Calling QueueManager to request a room for visitor ${visitor._id}`);\n\n\t\tconst room = await QueueManager.requestRoom({\n\t\t\tguest: visitor,\n\t\t\tmessage,\n\t\t\trid,\n\t\t\troomInfo,\n\t\t\tagent: defaultAgent,\n\t\t\textraData,\n\t\t});\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tlet { contactId } = visitor;\n\n\t\t\tif (!contactId) {\n\t\t\t\tconst visitorContact = await LivechatVisitors.findOne<\n\t\t\t\t\tPick<ILivechatVisitor, 'name' | 'contactManager' | 'livechatData' | 'phone' | 'visitorEmails' | 'username' | 'contactId'>\n\t\t\t\t>(visitor._id, {\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\t\tphone: 1,\n\t\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\tcontactId: 1,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tcontactId = visitorContact?.contactId;\n\t\t\t}\n\n\t\t\tif (!contactId) {\n\t\t\t\t// ensure that old visitors have a contact\n\t\t\t\tcontactId = await createContactFromVisitor(visitor);\n\t\t\t}\n\n\t\t\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id' | 'channels'>>(contactId, {\n\t\t\t\tprojection: { _id: 1, channels: 1 },\n\t\t\t});\n\n\t\t\tif (contact) {\n\t\t\t\tconst channel = contact.channels?.find(\n\t\t\t\t\t(channel: ILivechatContactChannel) => channel.name === roomInfo.source?.type && channel.visitorId === visitor._id,\n\t\t\t\t);\n\n\t\t\t\tif (!channel) {\n\t\t\t\t\tLivechat.logger.debug(`Adding channel for contact ${contact._id}`);\n\n\t\t\t\t\tawait LivechatContacts.addChannel(contact._id, {\n\t\t\t\t\t\tname: roomInfo.source?.label || roomInfo.source?.type.toString() || OmnichannelSourceType.OTHER,\n\t\t\t\t\t\tvisitorId: visitor._id,\n\t\t\t\t\t\tblocked: false,\n\t\t\t\t\t\tverified: false,\n\t\t\t\t\t\tdetails: roomInfo.source,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLivechat.logger.debug(`Room obtained for visitor ${visitor._id} -> ${room._id}`);\n\n\t\tawait Messages.setRoomIdByToken(visitor.token, room._id);\n\n\t\treturn room;\n\t}\n\n\tasync getRoom<\n\t\tE extends Record<string, unknown> & {\n\t\t\tsla?: string;\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t>(\n\t\tguest: ILivechatVisitor,\n\t\tmessage: Pick<IMessage, 'rid' | 'msg' | 'token'>,\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t},\n\t\tagent?: SelectedAgent,\n\t\textraData?: E,\n\t) {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tthrow new Meteor.Error('error-omnichannel-is-disabled');\n\t\t}\n\t\tLivechat.logger.debug(`Attempting to find or create a room for visitor ${guest._id}`);\n\t\tconst room = await LivechatRooms.findOneById(message.rid);\n\n\t\tif (room && !room.open) {\n\t\t\tLivechat.logger.debug(`Last room for visitor ${guest._id} closed. Creating new one`);\n\t\t}\n\n\t\tif (!room?.open) {\n\t\t\treturn {\n\t\t\t\troom: await this.createRoom({ visitor: guest, message: message.msg, roomInfo, agent, extraData }),\n\t\t\t\tnewRoom: true,\n\t\t\t};\n\t\t}\n\n\t\tif (room.v.token !== guest.token) {\n\t\t\tLivechat.logger.debug(`Visitor ${guest._id} trying to access another visitor's room`);\n\t\t\tthrow new Meteor.Error('cannot-access-room');\n\t\t}\n\n\t\treturn { room, newRoom: false };\n\t}\n\n\tasync checkOnlineAgents(department?: string, agent?: { agentId: string }, skipFallbackCheck = false): Promise<boolean> {\n\t\tif (agent?.agentId) {\n\t\t\treturn Users.checkOnlineAgents(agent.agentId);\n\t\t}\n\n\t\tif (department) {\n\t\t\tconst onlineForDep = await LivechatDepartmentAgents.checkOnlineForDepartment(department);\n\t\t\tif (onlineForDep || skipFallbackCheck) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(department, {\n\t\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t\t});\n\t\t\tif (!dep?.fallbackForwardDepartment) {\n\t\t\t\treturn onlineForDep;\n\t\t\t}\n\n\t\t\treturn this.checkOnlineAgents(dep?.fallbackForwardDepartment);\n\t\t}\n\n\t\treturn Users.checkOnlineAgents();\n\t}\n\n\tasync setDepartmentForGuest({ token, department }: { token: string; department: string }) {\n\t\tcheck(token, String);\n\t\tcheck(department, String);\n\n\t\tLivechat.logger.debug(`Switching departments for user with token ${token} (to ${department})`);\n\n\t\tconst updateUser = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tconst dep = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id'>>(department, { projection: { _id: 1 } });\n\t\tif (!dep) {\n\t\t\tthrow new Meteor.Error('invalid-department', 'Provided department does not exists');\n\t\t}\n\n\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Meteor.Error('invalid-token', 'Provided token is invalid');\n\t\t}\n\t\tawait LivechatVisitors.updateById(visitor._id, updateUser);\n\t}\n\n\tasync removeRoom(rid: string) {\n\t\tLivechat.logger.debug(`Deleting room ${rid}`);\n\t\tcheck(rid, String);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid);\n\n\t\tconst result = await Promise.allSettled([\n\t\t\tMessages.removeByRoomId(rid),\n\t\t\tReadReceipts.removeByRoomId(rid),\n\t\t\tSubscriptions.removeByRoomId(rid, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tLivechatInquiry.removeByRoomId(rid),\n\t\t\tLivechatRooms.removeById(rid),\n\t\t]);\n\n\t\tif (result[3]?.status === 'fulfilled' && result[3].value?.deletedCount && inquiry) {\n\t\t\tvoid notifyOnLivechatInquiryChanged(inquiry, 'removed');\n\t\t}\n\n\t\tfor (const r of result) {\n\t\t\tif (r.status === 'rejected') {\n\t\t\t\tthis.logger.error(`Error removing room ${rid}: ${r.reason}`);\n\t\t\t\tthrow new Meteor.Error('error-removing-room', 'Error removing room');\n\t\t\t}\n\t\t}\n\t}\n\n\tisValidObject(obj: unknown): obj is Record<string, any> {\n\t\treturn typeof obj === 'object' && obj !== null;\n\t}\n\n\tasync registerGuest({\n\t\tid,\n\t\ttoken,\n\t\tname,\n\t\tphone,\n\t\temail,\n\t\tdepartment,\n\t\tusername,\n\t\tconnectionData,\n\t\tstatus = UserStatus.ONLINE,\n\t\tsource,\n\t}: RegisterGuestType): Promise<ILivechatVisitor | null> {\n\t\tcheck(token, String);\n\t\tcheck(id, Match.Maybe(String));\n\n\t\tLivechat.logger.debug(`New incoming conversation: id: ${id} | token: ${token}`);\n\n\t\tconst visitorDataToUpdate: Partial<ILivechatVisitor> & { userAgent?: string; ip?: string; host?: string } = {\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tsource,\n\t\t\t...(phone?.number ? { phone: [{ phoneNumber: phone.number }] } : {}),\n\t\t\t...(name ? { name } : {}),\n\t\t};\n\n\t\tif (email) {\n\t\t\tconst visitorEmail = email.trim().toLowerCase();\n\t\t\tvalidateEmail(visitorEmail);\n\t\t\tvisitorDataToUpdate.visitorEmails = [{ address: visitorEmail }];\n\t\t}\n\n\t\tconst livechatVisitor = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (livechatVisitor?.department !== department && department) {\n\t\t\tLivechat.logger.debug(`Attempt to find a department with id/name ${department}`);\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { _id: 1 } });\n\t\t\tif (!dep) {\n\t\t\t\tLivechat.logger.debug(`Invalid department provided: ${department}`);\n\t\t\t\tthrow new Meteor.Error('error-invalid-department', 'The provided department is invalid');\n\t\t\t}\n\t\t\tLivechat.logger.debug(`Assigning visitor ${token} to department ${dep._id}`);\n\t\t\tvisitorDataToUpdate.department = dep._id;\n\t\t}\n\n\t\tvisitorDataToUpdate.token = livechatVisitor?.token || token;\n\n\t\tlet existingUser = null;\n\n\t\tif (livechatVisitor) {\n\t\t\tLivechat.logger.debug('Found matching user by token');\n\t\t\tvisitorDataToUpdate._id = livechatVisitor._id;\n\t\t} else if (phone?.number && (existingUser = await LivechatVisitors.findOneVisitorByPhone(phone.number))) {\n\t\t\tLivechat.logger.debug('Found matching user by phone number');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t\t// Don't change token when matching by phone number, use current visitor token\n\t\t\tvisitorDataToUpdate.token = existingUser.token;\n\t\t} else if (email && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(email))) {\n\t\t\tLivechat.logger.debug('Found matching user by email');\n\t\t\tvisitorDataToUpdate._id = existingUser._id;\n\t\t} else if (!livechatVisitor) {\n\t\t\tLivechat.logger.debug(`No matches found. Attempting to create new user with token ${token}`);\n\n\t\t\tvisitorDataToUpdate._id = id || undefined;\n\t\t\tvisitorDataToUpdate.username = username || (await LivechatVisitors.getNextVisitorUsername());\n\t\t\tvisitorDataToUpdate.status = status;\n\t\t\tvisitorDataToUpdate.ts = new Date();\n\t\t\tvisitorDataToUpdate.source = source;\n\n\t\t\tif (settings.get('Livechat_Allow_collect_and_store_HTTP_header_informations') && Livechat.isValidObject(connectionData)) {\n\t\t\t\tLivechat.logger.debug(`Saving connection data for visitor ${token}`);\n\t\t\t\tconst { httpHeaders, clientAddress } = connectionData;\n\t\t\t\tif (Livechat.isValidObject(httpHeaders)) {\n\t\t\t\t\tvisitorDataToUpdate.userAgent = httpHeaders['user-agent'];\n\t\t\t\t\tvisitorDataToUpdate.ip = httpHeaders['x-real-ip'] || httpHeaders['x-forwarded-for'] || clientAddress;\n\t\t\t\t\tvisitorDataToUpdate.host = httpHeaders?.host;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isSingleContactEnabled()) {\n\t\t\tconst contactId = await createContact({\n\t\t\t\tname: name ?? (visitorDataToUpdate.username as string),\n\t\t\t\temails: email ? [email] : [],\n\t\t\t\tphones: phone ? [phone.number] : [],\n\t\t\t\tunknown: true,\n\t\t\t});\n\t\t\tvisitorDataToUpdate.contactId = contactId;\n\t\t}\n\n\t\tconst upsertedLivechatVisitor = await LivechatVisitors.updateOneByIdOrToken(visitorDataToUpdate, {\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t});\n\n\t\tif (!upsertedLivechatVisitor.value) {\n\t\t\tLivechat.logger.debug(`No visitor found after upsert`);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn upsertedLivechatVisitor.value;\n\t}\n\n\tprivate async getBotAgents(department?: string) {\n\t\tif (department) {\n\t\t\treturn LivechatDepartmentAgents.getBotsForDepartment(department);\n\t\t}\n\n\t\treturn Users.findBotAgents();\n\t}\n\n\tprivate async resolveChatTags(\n\t\troom: IOmnichannelRoom,\n\t\toptions: CloseRoomParams['options'] = {},\n\t): Promise<{ updatedOptions: CloseRoomParams['options'] }> {\n\t\tthis.logger.debug(`Resolving chat tags for room ${room._id}`);\n\n\t\tconst concatUnique = (...arrays: (string[] | undefined)[]): string[] => [\n\t\t\t...new Set(([] as string[]).concat(...arrays.filter((a): a is string[] => !!a))),\n\t\t];\n\n\t\tconst { departmentId, tags: optionsTags } = room;\n\t\tconst { clientAction, tags: oldRoomTags } = options;\n\t\tconst roomTags = concatUnique(oldRoomTags, optionsTags);\n\n\t\tif (!departmentId) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'requestTagBeforeClosingChat' | 'chatClosingTags'>>(\n\t\t\tdepartmentId,\n\t\t\t{\n\t\t\t\tprojection: { requestTagBeforeClosingChat: 1, chatClosingTags: 1 },\n\t\t\t},\n\t\t);\n\t\tif (!department) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(roomTags.length && { tags: roomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst { requestTagBeforeClosingChat, chatClosingTags } = department;\n\t\tconst extraRoomTags = concatUnique(roomTags, chatClosingTags);\n\n\t\tif (!requestTagBeforeClosingChat) {\n\t\t\treturn {\n\t\t\t\tupdatedOptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst checkRoomTags = !clientAction || (roomTags && roomTags.length > 0);\n\t\tconst checkDepartmentTags = chatClosingTags && chatClosingTags.length > 0;\n\t\tif (!checkRoomTags || !checkDepartmentTags) {\n\t\t\tthrow new Error('error-tags-must-be-assigned-before-closing-chat');\n\t\t}\n\n\t\treturn {\n\t\t\tupdatedOptions: {\n\t\t\t\t...options,\n\t\t\t\t...(extraRoomTags.length && { tags: extraRoomTags }),\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate async sendEmail(from: string, to: string, replyTo: string, subject: string, html: string): Promise<void> {\n\t\tawait Mailer.send({\n\t\t\tto,\n\t\t\tfrom,\n\t\t\treplyTo,\n\t\t\tsubject,\n\t\t\thtml,\n\t\t});\n\t}\n\n\tasync sendRequest(\n\t\tpostData: {\n\t\t\ttype: string;\n\t\t\t[key: string]: any;\n\t\t},\n\t\tattempts = 10,\n\t) {\n\t\tif (!attempts) {\n\t\t\tLivechat.logger.error({ msg: 'Omnichannel webhook call failed. Max attempts reached' });\n\t\t\treturn;\n\t\t}\n\t\tconst timeout = settings.get<number>('Livechat_http_timeout');\n\t\tconst secretToken = settings.get<string>('Livechat_secret_token');\n\t\tconst webhookUrl = settings.get<string>('Livechat_webhookUrl');\n\t\ttry {\n\t\t\tLivechat.webhookLogger.debug({ msg: 'Sending webhook request', postData });\n\t\t\tconst result = await fetch(webhookUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t...(secretToken && { 'X-RocketChat-Livechat-Token': secretToken }),\n\t\t\t\t},\n\t\t\t\tbody: postData,\n\t\t\t\ttimeout,\n\t\t\t});\n\n\t\t\tif (result.status === 200) {\n\t\t\t\tmetrics.totalLivechatWebhooksSuccess.inc();\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tmetrics.totalLivechatWebhooksFailures.inc();\n\t\t\tthrow new Error(await result.text());\n\t\t} catch (err) {\n\t\t\tconst retryAfter = timeout * 4;\n\t\t\tLivechat.webhookLogger.error({ msg: `Error response on ${11 - attempts} try ->`, err });\n\t\t\t// try 10 times after 20 seconds each\n\t\t\tattempts - 1 &&\n\t\t\t\tLivechat.webhookLogger.warn({ msg: `Webhook call failed. Retrying`, newAttemptAfterSeconds: retryAfter / 1000, webhookUrl });\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait Livechat.sendRequest(postData, attempts - 1);\n\t\t\t}, retryAfter);\n\t\t}\n\t}\n\n\tasync saveAgentInfo(_id: string, agentData: any, agentDepartments: string[]) {\n\t\tcheck(_id, String);\n\t\tcheck(agentData, Object);\n\t\tcheck(agentDepartments, [String]);\n\n\t\tconst user = await Users.findOneById(_id);\n\t\tif (!user || !(await hasRoleAsync(_id, 'livechat-agent'))) {\n\t\t\tthrow new Meteor.Error('error-user-is-not-agent', 'User is not a livechat agent');\n\t\t}\n\n\t\tawait Users.setLivechatData(_id, agentData);\n\n\t\tconst currentDepartmentsForAgent = await LivechatDepartmentAgents.findByAgentId(_id).toArray();\n\n\t\tconst toRemoveIds = currentDepartmentsForAgent\n\t\t\t.filter((dept) => !agentDepartments.includes(dept.departmentId))\n\t\t\t.map((dept) => dept.departmentId);\n\t\tconst toAddIds = agentDepartments.filter((d) => !currentDepartmentsForAgent.some((c) => c.departmentId === d));\n\n\t\tawait Promise.all(\n\t\t\tawait LivechatDepartment.findInIds([...toRemoveIds, ...toAddIds], {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tenabled: 1,\n\t\t\t\t},\n\t\t\t})\n\t\t\t\t.map((dep) => {\n\t\t\t\t\treturn updateDepartmentAgents(\n\t\t\t\t\t\tdep._id,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...(toRemoveIds.includes(dep._id) ? { remove: [{ agentId: _id }] } : { upsert: [{ agentId: _id, count: 0, order: 0 }] }),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdep.enabled,\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.toArray(),\n\t\t);\n\n\t\treturn true;\n\t}\n\n\tasync updateCallStatus(callId: string, rid: string, status: 'ended' | 'declined', user: IUser | ILivechatVisitor) {\n\t\tawait Rooms.setCallStatus(rid, status);\n\t\tif (status === 'ended' || status === 'declined') {\n\t\t\tif (await VideoConf.declineLivechatCall(callId)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn updateMessage({ _id: callId, msg: status, actionLinks: [], webRtcCallEndTs: new Date(), rid }, user as unknown as IUser);\n\t\t}\n\t}\n\n\tnotifyRoomVisitorChange(roomId: string, visitor: ILivechatVisitor) {\n\t\tvoid api.broadcast('omnichannel.room', roomId, {\n\t\t\ttype: 'visitorData',\n\t\t\tvisitor,\n\t\t});\n\t}\n\n\tasync changeRoomVisitor(userId: string, room: IOmnichannelRoom, visitor: ILivechatVisitor) {\n\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-not-found');\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\tthrow new Error('error-not-allowed');\n\t\t}\n\n\t\tawait LivechatRooms.changeVisitorByRoomId(room._id, visitor);\n\n\t\tthis.notifyRoomVisitorChange(room._id, visitor);\n\n\t\treturn LivechatRooms.findOneById(room._id);\n\t}\n\n\tasync notifyAgentStatusChanged(userId: string, status?: UserStatus) {\n\t\tif (!status) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid callbacks.runAsync('livechat.agentStatusChanged', { userId, status });\n\t\tif (!settings.get('Livechat_show_agent_info')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatRooms.findOpenByAgent(userId).forEach((room) => {\n\t\t\tvoid api.broadcast('omnichannel.room', room._id, {\n\t\t\t\ttype: 'agentStatus',\n\t\t\t\tstatus,\n\t\t\t});\n\t\t});\n\t}\n\n\tasync updateMessage({ guest, message }: { guest: ILivechatVisitor; message: AtLeast<IMessage, '_id' | 'msg' | 'rid'> }) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\n\t\tconst originalMessage = await Messages.findOneById<Pick<IMessage, 'u' | '_id'>>(message._id, { projection: { u: 1 } });\n\t\tif (!originalMessage?._id) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editAllowed = settings.get('Message_AllowEditing');\n\t\tconst editOwn = originalMessage.u && originalMessage.u._id === guest._id;\n\n\t\tif (!editAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\t// TODO: Apps sends an `any` object and apparently we just check for _id being present\n\t\t// while updateMessage expects AtLeast<id, msg, rid>\n\t\tawait updateMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync closeOpenChats(userId: string, comment?: string) {\n\t\tthis.logger.debug(`Closing open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyDepartmentRestrictions', {}, { userId });\n\t\tconst openChats = LivechatRooms.findOpenByAgent(userId, extraQuery);\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait openChats.forEach((room) => {\n\t\t\tpromises.push(this.closeRoom({ user, room, comment }));\n\t\t});\n\n\t\tawait Promise.all(promises);\n\t}\n\n\tasync transfer(room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) {\n\t\tthis.logger.debug(`Transfering room ${room._id} [Transfered by: ${transferData?.transferredBy?._id}]`);\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-onHold');\n\t\t}\n\n\t\tif (transferData.departmentId) {\n\t\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'name' | '_id'>>(transferData.departmentId, {\n\t\t\t\tprojection: { name: 1 },\n\t\t\t});\n\t\t\tif (!department) {\n\t\t\t\tthrow new Error('error-invalid-department');\n\t\t\t}\n\n\t\t\ttransferData.department = department;\n\t\t\tthis.logger.debug(`Transfering room ${room._id} to department ${transferData.department?._id}`);\n\t\t}\n\n\t\treturn RoutingManager.transferRoom(room, guest, transferData);\n\t}\n\n\tasync forwardOpenChats(userId: string) {\n\t\tthis.logger.debug(`Transferring open chats for user ${userId}`);\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id, username, name } = user;\n\t\tfor await (const room of LivechatRooms.findOpenByAgent(userId)) {\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\t\tif (!guest) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name }, room);\n\t\t\tawait this.transfer(room, guest, {\n\t\t\t\ttransferredBy,\n\t\t\t\tdepartmentId: guest.department,\n\t\t\t});\n\t\t}\n\t}\n\n\tshowConnecting() {\n\t\treturn RoutingManager.getConfig()?.showConnecting || false;\n\t}\n\n\tasync getInitSettings() {\n\t\tconst validSettings = [\n\t\t\t'Livechat_title',\n\t\t\t'Livechat_title_color',\n\t\t\t'Livechat_enable_message_character_limit',\n\t\t\t'Livechat_message_character_limit',\n\t\t\t'Message_MaxAllowedSize',\n\t\t\t'Livechat_enabled',\n\t\t\t'Livechat_registration_form',\n\t\t\t'Livechat_allow_switching_departments',\n\t\t\t'Livechat_offline_title',\n\t\t\t'Livechat_offline_title_color',\n\t\t\t'Livechat_offline_message',\n\t\t\t'Livechat_offline_success_message',\n\t\t\t'Livechat_offline_form_unavailable',\n\t\t\t'Livechat_display_offline_form',\n\t\t\t'Omnichannel_call_provider',\n\t\t\t'Language',\n\t\t\t'Livechat_enable_transcript',\n\t\t\t'Livechat_transcript_message',\n\t\t\t'Livechat_fileupload_enabled',\n\t\t\t'FileUpload_Enabled',\n\t\t\t'Livechat_conversation_finished_message',\n\t\t\t'Livechat_conversation_finished_text',\n\t\t\t'Livechat_name_field_registration_form',\n\t\t\t'Livechat_email_field_registration_form',\n\t\t\t'Livechat_registration_form_message',\n\t\t\t'Livechat_force_accept_data_processing_consent',\n\t\t\t'Livechat_data_processing_consent_text',\n\t\t\t'Livechat_show_agent_info',\n\t\t\t'Livechat_clear_local_storage_when_chat_ended',\n\t\t\t'Livechat_history_monitor_type',\n\t\t\t'Livechat_hide_system_messages',\n\t\t\t'Livechat_widget_position',\n\t\t\t'Livechat_background',\n\t\t\t'Assets_livechat_widget_logo',\n\t\t\t'Livechat_hide_watermark',\n\t\t\t'Omnichannel_allow_visitors_to_close_conversation',\n\t\t] as const;\n\n\t\ttype SettingTypes = (typeof validSettings)[number] | 'Livechat_Show_Connecting';\n\n\t\tconst rcSettings = validSettings.reduce<Record<SettingTypes, string | boolean>>((acc, setting) => {\n\t\t\tacc[setting] = settings.get(setting);\n\t\t\treturn acc;\n\t\t}, {} as any);\n\n\t\trcSettings.Livechat_Show_Connecting = this.showConnecting();\n\n\t\treturn rcSettings;\n\t}\n\n\tasync sendOfflineMessage(data: OfflineMessageData) {\n\t\tif (!settings.get('Livechat_display_offline_form')) {\n\t\t\tthrow new Error('error-offline-form-disabled');\n\t\t}\n\n\t\tconst { message, name, email, department, host } = data;\n\n\t\tif (!email) {\n\t\t\tthrow new Error('error-invalid-email');\n\t\t}\n\n\t\tconst emailMessage = `${message}`.replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1<br>$2');\n\n\t\tlet html = '<h1>New livechat message</h1>';\n\t\tif (host && host !== '') {\n\t\t\thtml = html.concat(`<p><strong>Sent from:</strong><a href='${host}'> ${host}</a></p>`);\n\t\t}\n\t\thtml = html.concat(`\n\t\t\t<p><strong>Visitor name:</strong> ${name}</p>\n\t\t\t<p><strong>Visitor email:</strong> ${email}</p>\n\t\t\t<p><strong>Message:</strong><br>${emailMessage}</p>`);\n\n\t\tconst fromEmail = settings.get<string>('From_Email').match(/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,4}\\b/i);\n\n\t\tlet from: string;\n\t\tif (fromEmail) {\n\t\t\tfrom = fromEmail[0];\n\t\t} else {\n\t\t\tfrom = settings.get<string>('From_Email');\n\t\t}\n\n\t\tif (settings.get('Livechat_validate_offline_email')) {\n\t\t\tconst emailDomain = email.substr(email.lastIndexOf('@') + 1);\n\n\t\t\ttry {\n\t\t\t\tawait dnsResolveMx(emailDomain);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-email-address');\n\t\t\t}\n\t\t}\n\n\t\t// TODO Block offline form if Livechat_offline_email is undefined\n\t\t// (it does not make sense to have an offline form that does nothing)\n\t\t// `this.sendEmail` will throw an error if the email is invalid\n\t\t// thus this breaks livechat, since the \"to\" email is invalid, and that returns an [invalid email] error to the livechat client\n\t\tlet emailTo = settings.get<string>('Livechat_offline_email');\n\t\tif (department && department !== '') {\n\t\t\tconst dep = await LivechatDepartment.findOneByIdOrName(department, { projection: { email: 1 } });\n\t\t\tif (dep) {\n\t\t\t\temailTo = dep.email || emailTo;\n\t\t\t}\n\t\t}\n\n\t\tconst fromText = `${name} - ${email} <${from}>`;\n\t\tconst replyTo = `${name} <${email}>`;\n\t\tconst subject = `Livechat offline message from ${name}: ${`${emailMessage}`.substring(0, 20)}`;\n\t\tawait this.sendEmail(fromText, emailTo, replyTo, subject, html);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid callbacks.run('livechat.offlineMessage', data);\n\t\t});\n\t}\n\n\tasync sendMessage({\n\t\tguest,\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\tmessage: ILivechatMessage;\n\t\troomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tagent?: SelectedAgent;\n\t}) {\n\t\tconst { room, newRoom } = await this.getRoom(guest, message, roomInfo, agent);\n\t\tif (guest.name) {\n\t\t\tmessage.alias = guest.name;\n\t\t}\n\t\treturn Object.assign(await sendMessage(guest, { ...message, token: guest.token }, room), {\n\t\t\tnewRoom,\n\t\t\tshowConnecting: this.showConnecting(),\n\t\t});\n\t}\n\n\tasync removeGuest(_id: string) {\n\t\tconst guest = await LivechatVisitors.findOneEnabledById(_id, { projection: { _id: 1, token: 1 } });\n\t\tif (!guest) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tawait this.cleanGuestHistory(guest);\n\t\treturn LivechatVisitors.disableById(_id);\n\t}\n\n\tasync cleanGuestHistory(guest: ILivechatVisitor) {\n\t\tconst { token } = guest;\n\n\t\t// This shouldn't be possible, but just in case\n\t\tif (!token) {\n\t\t\tthrow new Error('error-invalid-guest');\n\t\t}\n\n\t\tconst cursor = LivechatRooms.findByVisitorToken(token);\n\t\tfor await (const room of cursor) {\n\t\t\tawait Promise.all([\n\t\t\t\tSubscriptions.removeByRoomId(room._id, {\n\t\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\tFileUpload.removeFilesByRoomId(room._id),\n\t\t\t\tMessages.removeByRoomId(room._id),\n\t\t\t\tReadReceipts.removeByRoomId(room._id),\n\t\t\t]);\n\t\t}\n\n\t\tawait LivechatRooms.removeByVisitorToken(token);\n\n\t\tconst livechatInquiries = await LivechatInquiry.findIdsByVisitorToken(token).toArray();\n\t\tawait LivechatInquiry.removeByIds(livechatInquiries.map(({ _id }) => _id));\n\t\tvoid notifyOnLivechatInquiryChanged(livechatInquiries, 'removed');\n\t}\n\n\tasync deleteMessage({ guest, message }: { guest: ILivechatVisitor; message: IMessage }) {\n\t\tconst deleteAllowed = settings.get<boolean>('Message_AllowDeleting');\n\t\tconst editOwn = message.u && message.u._id === guest._id;\n\n\t\tif (!deleteAllowed || !editOwn) {\n\t\t\tthrow new Error('error-action-not-allowed');\n\t\t}\n\n\t\tawait deleteMessage(message, guest as unknown as IUser);\n\n\t\treturn true;\n\t}\n\n\tasync setUserStatusLivechatIf(userId: string, status: ILivechatAgentStatus, condition?: Filter<IUser>, fields?: AKeyOf<ILivechatAgent>) {\n\t\tconst result = await Users.setLivechatStatusIf(userId, status, condition, fields);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: { ...fields, statusLivechat: status },\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\t\treturn result;\n\t}\n\n\tasync returnRoomAsInquiry(room: IOmnichannelRoom, departmentId?: string, overrideTransferData: any = {}) {\n\t\tthis.logger.debug({ msg: `Transfering room to ${departmentId ? 'department' : ''} queue`, room });\n\t\tif (!room.open) {\n\t\t\tthrow new Meteor.Error('room-closed');\n\t\t}\n\n\t\tif (room.onHold) {\n\t\t\tthrow new Meteor.Error('error-room-onHold');\n\t\t}\n\n\t\tif (!room.servedBy) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst user = await Users.findOneById(room.servedBy._id);\n\t\tif (!user?._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\t// find inquiry corresponding to room\n\t\tconst inquiry = await LivechatInquiry.findOne({ rid: room._id });\n\t\tif (!inquiry) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst transferredBy = normalizeTransferredByData(user, room);\n\t\tthis.logger.debug(`Transfering room ${room._id} by user ${transferredBy._id}`);\n\t\tconst transferData = { roomId: room._id, scope: 'queue', departmentId, transferredBy, ...overrideTransferData };\n\t\ttry {\n\t\t\tawait this.saveTransferHistory(room, transferData);\n\t\t\tawait RoutingManager.unassignAgent(inquiry, departmentId);\n\t\t} catch (e) {\n\t\t\tthis.logger.error(e);\n\t\t\tthrow new Meteor.Error('error-returning-inquiry');\n\t\t}\n\n\t\tcallbacks.runAsync('livechat:afterReturnRoomAsInquiry', { room });\n\n\t\treturn true;\n\t}\n\n\tasync saveTransferHistory(room: IOmnichannelRoom, transferData: TransferData) {\n\t\tconst { departmentId: previousDepartment } = room;\n\t\tconst { department: nextDepartment, transferredBy, transferredTo, scope, comment } = transferData;\n\n\t\tcheck(\n\t\t\ttransferredBy,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tuserType: String,\n\t\t\t}),\n\t\t);\n\n\t\tconst { _id, username } = transferredBy;\n\t\tconst scopeData = scope || (nextDepartment ? 'department' : 'agent');\n\t\tthis.logger.info(`Storing new chat transfer of ${room._id} [Transfered by: ${_id} to ${scopeData}]`);\n\n\t\tconst transferMessage = {\n\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\ttransferData: {\n\t\t\t\ttransferredBy,\n\t\t\t\tts: new Date(),\n\t\t\t\tscope: scopeData,\n\t\t\t\tcomment,\n\t\t\t\t...(previousDepartment && { previousDepartment }),\n\t\t\t\t...(nextDepartment && { nextDepartment }),\n\t\t\t\t...(transferredTo && { transferredTo }),\n\t\t\t},\n\t\t};\n\n\t\tawait Message.saveSystemMessageAndNotifyUser('livechat_transfer_history', room._id, '', { _id, username }, transferMessage);\n\t}\n\n\tasync saveGuest(guestData: Pick<ILivechatVisitor, '_id' | 'name' | 'livechatData'> & { email?: string; phone?: string }, userId: string) {\n\t\tconst { _id, name, email, phone, livechatData = {} } = guestData;\n\n\t\tconst visitor = await LivechatVisitors.findOneById(_id, { projection: { _id: 1 } });\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tthis.logger.debug({ msg: 'Saving guest', guestData });\n\t\tconst updateData: {\n\t\t\tname?: string | undefined;\n\t\t\tusername?: string | undefined;\n\t\t\temail?: string | undefined;\n\t\t\tphone?: string | undefined;\n\t\t\tlivechatData: {\n\t\t\t\t[k: string]: any;\n\t\t\t};\n\t\t} = { livechatData: {} };\n\n\t\tif (name) {\n\t\t\tupdateData.name = name;\n\t\t}\n\t\tif (email) {\n\t\t\tupdateData.email = email;\n\t\t}\n\t\tif (phone) {\n\t\t\tupdateData.phone = phone;\n\t\t}\n\n\t\tconst customFields: Record<string, any> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tthis.logger.debug({ msg: `Saving custom fields for visitor ${_id}`, livechatData });\n\t\t\tfor await (const field of LivechatCustomField.findByScope('visitor')) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\tupdateData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields for visitor ${_id}`);\n\t\t}\n\t\tconst ret = await LivechatVisitors.saveGuestById(_id, updateData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatGuestSaved, _id);\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tasync setCustomFields({ token, key, value, overwrite }: { key: string; value: string; overwrite: boolean; token: string }) {\n\t\tLivechat.logger.debug(`Setting custom fields data for visitor with token ${token}`);\n\n\t\tconst customField = await LivechatCustomField.findOneById(key);\n\t\tif (!customField) {\n\t\t\tthrow new Error('invalid-custom-field');\n\t\t}\n\n\t\tif (customField.regexp !== undefined && customField.regexp !== '') {\n\t\t\tconst regexp = new RegExp(customField.regexp);\n\t\t\tif (!regexp.test(value)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: key }));\n\t\t\t}\n\t\t}\n\n\t\tlet result;\n\t\tif (customField.scope === 'room') {\n\t\t\tresult = await LivechatRooms.updateDataByToken(token, key, value, overwrite);\n\t\t} else {\n\t\t\tresult = await LivechatVisitors.updateLivechatDataByToken(token, key, value, overwrite);\n\t\t}\n\n\t\tif (typeof result === 'boolean') {\n\t\t\t// Note: this only happens when !overwrite is passed, in this case we don't do any db update\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn result.modifiedCount;\n\t}\n\n\tasync requestTranscript({\n\t\trid,\n\t\temail,\n\t\tsubject,\n\t\tuser,\n\t}: {\n\t\trid: string;\n\t\temail: string;\n\t\tsubject: string;\n\t\tuser: AtLeast<IUser, '_id' | 'username' | 'utcOffset' | 'name'>;\n\t}) {\n\t\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1, open: 1, transcriptRequest: 1 } });\n\n\t\tif (!room?.open) {\n\t\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room');\n\t\t}\n\n\t\tif (room.transcriptRequest) {\n\t\t\tthrow new Meteor.Error('error-transcript-already-requested', 'Transcript already requested');\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t}\n\n\t\tconst { _id, username, name, utcOffset } = user;\n\t\tconst transcriptRequest = {\n\t\t\trequestedAt: new Date(),\n\t\t\trequestedBy: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\tname,\n\t\t\t\tutcOffset,\n\t\t\t},\n\t\t\temail,\n\t\t\tsubject,\n\t\t};\n\n\t\tawait LivechatRooms.setEmailTranscriptRequestedByRoomId(rid, transcriptRequest);\n\t\treturn true;\n\t}\n\n\tasync savePageHistory(token: string, roomId: string | undefined, pageInfo: PageInfo) {\n\t\tthis.logger.debug({\n\t\t\tmsg: `Saving page movement history for visitor with token ${token}`,\n\t\t\tpageInfo,\n\t\t\troomId,\n\t\t});\n\n\t\tif (pageInfo.change !== settings.get<string>('Livechat_history_monitor_type')) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById('rocket.cat');\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst pageTitle = pageInfo.title;\n\t\tconst pageUrl = pageInfo.location.href;\n\t\tconst extraData: {\n\t\t\tnavigation: {\n\t\t\t\tpage: PageInfo;\n\t\t\t\ttoken: string;\n\t\t\t};\n\t\t\texpireAt?: number;\n\t\t\t_hidden?: boolean;\n\t\t} = {\n\t\t\tnavigation: {\n\t\t\t\tpage: pageInfo,\n\t\t\t\ttoken,\n\t\t\t},\n\t\t};\n\n\t\tif (!roomId) {\n\t\t\tthis.logger.warn(`Saving page history without room id for visitor with token ${token}`);\n\t\t\t// keep history of unregistered visitors for 1 month\n\t\t\tconst keepHistoryMiliseconds = 2592000000;\n\t\t\textraData.expireAt = new Date().getTime() + keepHistoryMiliseconds;\n\t\t}\n\n\t\tif (!settings.get('Livechat_Visitor_navigation_as_a_message')) {\n\t\t\textraData._hidden = true;\n\t\t}\n\n\t\t// @ts-expect-error: Investigating on which case we won't receive a roomId and where that history is supposed to be stored\n\t\treturn Message.saveSystemMessage('livechat_navigation_history', roomId, `${pageTitle} - ${pageUrl}`, user, extraData);\n\t}\n\n\tasync afterRemoveAgent(user: AtLeast<IUser, '_id' | 'username'>) {\n\t\tawait callbacks.run('livechat.afterAgentRemoved', { agent: user });\n\t\treturn true;\n\t}\n\n\tasync removeAgent(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\tconst { _id } = user;\n\n\t\tif (await removeUserFromRolesAsync(_id, ['livechat-agent'])) {\n\t\t\treturn this.afterRemoveAgent(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync removeManager(username: string) {\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Error('error-invalid-user');\n\t\t}\n\n\t\treturn removeUserFromRolesAsync(user._id, ['livechat-manager']);\n\t}\n\n\tasync getLivechatRoomGuestInfo(room: IOmnichannelRoom) {\n\t\tconst visitor = await LivechatVisitors.findOneEnabledById(room.v._id);\n\t\tif (!visitor) {\n\t\t\tthrow new Error('error-invalid-visitor');\n\t\t}\n\n\t\tconst agent = room.servedBy?._id ? await Users.findOneById(room.servedBy?._id) : null;\n\n\t\tconst ua = new UAParser();\n\t\tua.setUA(visitor.userAgent || '');\n\n\t\tconst postData: ICRMData = {\n\t\t\t_id: room._id,\n\t\t\tlabel: room.fname || room.label, // using same field for compatibility\n\t\t\ttopic: room.topic,\n\t\t\tcreatedAt: room.ts,\n\t\t\tlastMessageAt: room.lm,\n\t\t\ttags: room.tags,\n\t\t\tcustomFields: room.livechatData,\n\t\t\tvisitor: {\n\t\t\t\t_id: visitor._id,\n\t\t\t\ttoken: visitor.token,\n\t\t\t\tname: visitor.name,\n\t\t\t\tusername: visitor.username,\n\t\t\t\tdepartment: visitor.department,\n\t\t\t\tip: visitor.ip,\n\t\t\t\tos: ua.getOS().name && `${ua.getOS().name} ${ua.getOS().version}`,\n\t\t\t\tbrowser: ua.getBrowser().name && `${ua.getBrowser().name} ${ua.getBrowser().version}`,\n\t\t\t\tcustomFields: visitor.livechatData,\n\t\t\t},\n\t\t};\n\n\t\tif (agent) {\n\t\t\tconst customFields = parseAgentCustomFields(agent.customFields);\n\n\t\t\tpostData.agent = {\n\t\t\t\t_id: agent._id,\n\t\t\t\tusername: agent.username,\n\t\t\t\tname: agent.name,\n\t\t\t\t...(customFields && { customFields }),\n\t\t\t};\n\n\t\t\tif (agent.emails && agent.emails.length > 0) {\n\t\t\t\tpostData.agent.email = agent.emails[0].address;\n\t\t\t}\n\t\t}\n\n\t\tif (room.crmData) {\n\t\t\tpostData.crmData = room.crmData;\n\t\t}\n\n\t\tif (visitor.visitorEmails && visitor.visitorEmails.length > 0) {\n\t\t\tpostData.visitor.email = visitor.visitorEmails;\n\t\t}\n\t\tif (visitor.phone && visitor.phone.length > 0) {\n\t\t\tpostData.visitor.phone = visitor.phone;\n\t\t}\n\n\t\treturn postData;\n\t}\n\n\tasync allowAgentChangeServiceStatus(statusLivechat: ILivechatAgentStatus, agentId: string) {\n\t\tif (statusLivechat !== ILivechatAgentStatus.AVAILABLE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn businessHourManager.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus) {\n\t\tawait LivechatRooms.updateVisitorStatus(token, status);\n\n\t\tconst inquiryVisitorStatus = await LivechatInquiry.updateVisitorStatus(token, status);\n\n\t\tif (inquiryVisitorStatus.modifiedCount) {\n\t\t\tvoid notifyOnLivechatInquiryChangedByToken(token, 'updated', { v: { status } });\n\t\t}\n\t}\n\n\tasync setUserStatusLivechat(userId: string, status: ILivechatAgentStatus) {\n\t\tconst user = await Users.setLivechatStatus(userId, status);\n\t\tcallbacks.runAsync('livechat.setUserStatusLivechat', { userId, status });\n\n\t\tif (user.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tid: userId,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: status,\n\t\t\t\t\tlivechatStatusSystemModified: false,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\treturn user;\n\t}\n\n\tasync afterAgentAdded(user: IUser) {\n\t\tawait Promise.all([\n\t\t\tUsers.setOperator(user._id, true),\n\t\t\tthis.setUserStatusLivechat(user._id, user.status !== 'offline' ? ILivechatAgentStatus.AVAILABLE : ILivechatAgentStatus.NOT_AVAILABLE),\n\t\t]);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\n\t\treturn user;\n\t}\n\n\tasync addAgent(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-agent'])) {\n\t\t\treturn this.afterAgentAdded(user);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync afterAgentUserActivated(user: IUser) {\n\t\tif (!user.roles.includes('livechat-agent')) {\n\t\t\tthrow new Error('invalid-user-role');\n\t\t}\n\t\tawait Users.setOperator(user._id, true);\n\t\tcallbacks.runAsync('livechat.onNewAgentCreated', user._id);\n\t}\n\n\tasync addManager(username: string) {\n\t\tcheck(username, String);\n\n\t\tconst user = await Users.findOneByUsername(username, { projection: { _id: 1, username: 1 } });\n\n\t\tif (!user) {\n\t\t\tthrow new Meteor.Error('error-invalid-user');\n\t\t}\n\n\t\tif (await addUserRolesAsync(user._id, ['livechat-manager'])) {\n\t\t\treturn user;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync saveRoomInfo(\n\t\troomData: {\n\t\t\t_id: string;\n\t\t\ttopic?: string;\n\t\t\ttags?: string[];\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t\t// For priority and SLA, if the value is blank (ie \"\"), then system will remove the priority or SLA from the room\n\t\t\tpriorityId?: string;\n\t\t\tslaId?: string;\n\t\t},\n\t\tguestData?: {\n\t\t\t_id: string;\n\t\t\tname?: string;\n\t\t\temail?: string;\n\t\t\tphone?: string;\n\t\t\tlivechatData?: { [k: string]: string };\n\t\t},\n\t\tuserId?: string,\n\t) {\n\t\tthis.logger.debug(`Saving room information on room ${roomData._id}`);\n\t\tconst { livechatData = {} } = roomData;\n\t\tconst customFields: Record<string, string> = {};\n\n\t\tif ((!userId || (await hasPermissionAsync(userId, 'edit-livechat-room-customfields'))) && Object.keys(livechatData).length) {\n\t\t\tconst fields = LivechatCustomField.findByScope('room');\n\t\t\tfor await (const field of fields) {\n\t\t\t\tif (!livechatData.hasOwnProperty(field._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst value = trim(livechatData[field._id]);\n\t\t\t\tif (value !== '' && field.regexp !== undefined && field.regexp !== '') {\n\t\t\t\t\tconst regexp = new RegExp(field.regexp);\n\t\t\t\t\tif (!regexp.test(value)) {\n\t\t\t\t\t\tthrow new Meteor.Error(i18n.t('error-invalid-custom-field-value', { field: field.label }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcustomFields[field._id] = value;\n\t\t\t}\n\t\t\troomData.livechatData = customFields;\n\t\t\tLivechat.logger.debug(`About to update ${Object.keys(customFields).length} custom fields on room ${roomData._id}`);\n\t\t}\n\n\t\tawait LivechatRooms.saveRoomById(roomData);\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomSaved, roomData._id);\n\t\t});\n\n\t\tif (guestData?.name?.trim().length) {\n\t\t\tconst { _id: rid } = roomData;\n\t\t\tconst { name } = guestData;\n\n\t\t\tconst responses = await Promise.all([\n\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t]);\n\n\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t}\n\n\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\tawait notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t}\n\t\t}\n\n\t\tvoid notifyOnRoomChangedById(roomData._id);\n\n\t\treturn true;\n\t}\n}\n\nexport const Livechat = new LivechatClass();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3867b8982cfa2aa4ffd568838039e05e09ccfbe5"}
