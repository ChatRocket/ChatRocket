{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/SAML.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/lib/SAML.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/SAML.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/SAML.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/SAML.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServerResponse } from 'http';\n\nimport type { IUser, IIncomingMessage, IPersonalAccessToken } from '@rocket.chat/core-typings';\nimport { CredentialTokens, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { generateUsernameSuggestion } from '../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../lib/server/functions/saveUserIdentity';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport type { ISAMLAction } from '../definition/ISAMLAction';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { SAMLServiceProvider } from './ServiceProvider';\nimport { SAMLUtils } from './Utils';\n\nconst showErrorMessage = function (res: ServerResponse, err: string): void {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html',\n\t});\n\tconst content = `<html><body><h2>Sorry, an annoying error occured</h2><div>${escapeHTML(err)}</div></body></html>`;\n\tres.end(content, 'utf-8');\n};\n\nexport class SAML {\n\tpublic static async processRequest(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tif (samlObject.actionName === 'metadata') {\n\t\t\t\tshowErrorMessage(res, `Unexpected SAML service ${samlObject.serviceName}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Unexpected SAML service ${samlObject.serviceName}`);\n\t\t}\n\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\treturn this.processMetadataAction(res, service);\n\t\t\tcase 'logout':\n\t\t\t\treturn this.processLogoutAction(req, res, service);\n\t\t\tcase 'sloRedirect':\n\t\t\t\treturn this.processSLORedirectAction(req, res);\n\t\t\tcase 'authorize':\n\t\t\t\treturn this.processAuthorizeAction(req, res, service, samlObject);\n\t\t\tcase 'validate':\n\t\t\t\treturn this.processValidateAction(req, res, service, samlObject);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected SAML action ${samlObject.actionName}`);\n\t\t}\n\t}\n\n\tpublic static async hasCredential(credentialToken: string): Promise<boolean> {\n\t\treturn (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n\t}\n\n\tpublic static async retrieveCredential(credentialToken: string): Promise<Record<string, any> | undefined> {\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static async insertOrUpdateSAMLUser(userObject: ISAMLUser): Promise<{ userId: string; token: string }> {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tquery[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\tuser = await Users.findOne(query);\n\n\t\t\tif (user) {\n\t\t\t\tcustomIdentifierMatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// Second, try searching by username or email (according to the immutableProperty setting)\n\t\tif (!user) {\n\t\t\tconst expression = userObject.emailList.map((email) => `^${escapeRegExp(email)}$`).join('|');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = await SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;\n\t\tconst { fullName } = userObject;\n\n\t\tconst active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\t\tif (!user) {\n\t\t\t// If we received any role from the mapping, use them - otherwise use the default role for creation.\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = await generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tif (i18n.languages?.includes(userObject.language)) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = await Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = await Users.findOneById(userId);\n\n\t\t\tif (user && userObject.channels && channelsAttributeUpdate !== true) {\n\t\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t\t}\n\t\t}\n\n\t\tif (!user) {\n\t\t\tthrow new Error('Failed to create user');\n\t\t}\n\t\t// creating the token and adding to the user\n\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\tawait Users.addPersonalAccessTokenToUser({\n\t\t\tuserId: user._id,\n\t\t\tloginTokenObject: stampedToken as unknown as IPersonalAccessToken,\n\t\t});\n\n\t\tconst updateData: Record<string, any> = {\n\t\t\t'services.saml.provider': userObject.samlLogin.provider,\n\t\t\t'services.saml.idp': userObject.samlLogin.idp,\n\t\t\t'services.saml.idpSession': userObject.samlLogin.idpSession,\n\t\t\t'services.saml.nameID': userObject.samlLogin.nameID,\n\t\t};\n\n\t\t// If the user was not found through the customIdentifier property, then update it's value\n\t\tif (customIdentifierMatch === false && customIdentifierAttributeName) {\n\t\t\tupdateData[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t}\n\n\t\t// Overwrite mail if needed\n\t\tif (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n\t\t\tupdateData.emails = emails;\n\t\t}\n\n\t\t// When updating an user, we only update the roles if we received them from the mapping\n\t\tif (userObject.roles?.length) {\n\t\t\tupdateData.roles = userObject.roles;\n\t\t}\n\n\t\tif (userObject.channels && channelsAttributeUpdate === true) {\n\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{\n\t\t\t\t_id: user._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: updateData,\n\t\t\t},\n\t\t);\n\n\t\tif ((username && username !== user.username) || (nameOverwrite && fullName && fullName !== user.name)) {\n\t\t\tawait saveUserIdentity({ _id: user._id, name: nameOverwrite ? fullName || undefined : user.name, username });\n\t\t}\n\n\t\t// sending token along with the userId\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token,\n\t\t};\n\t}\n\n\tprivate static processMetadataAction(res: ServerResponse, service: IServiceProviderOptions): void {\n\t\ttry {\n\t\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\n\t\t\tres.writeHead(200);\n\t\t\tres.write(serviceProvider.generateServiceProviderMetadata());\n\t\t\tres.end();\n\t\t} catch (err: any) {\n\t\t\tshowErrorMessage(res, err);\n\t\t}\n\t}\n\n\tprivate static async processLogoutAction(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\t// This is where we receive SAML LogoutResponse\n\t\tif (req.query.SAMLRequest) {\n\t\t\treturn this.processLogoutRequest(req, res, service);\n\t\t}\n\n\t\treturn this.processLogoutResponse(req, res, service);\n\t}\n\n\tprivate static async _logoutRemoveTokens(userId: string): Promise<void> {\n\t\tSAMLUtils.log(`Found user ${userId}`);\n\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Users.removeSamlServiceSession(userId);\n\t}\n\n\tprivate static async processLogoutRequest(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutRequest(req.query.SAMLRequest, async (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tSystemLogger.error({ err });\n\t\t\t\tthrow new Meteor.Error('Unable to Validate Logout Request');\n\t\t\t}\n\n\t\t\tif (!result?.nameID || !result?.idpSession) {\n\t\t\t\tthrow new Meteor.Error('Unable to process Logout Request: missing request data.');\n\t\t\t}\n\n\t\t\tlet timeoutHandler: NodeJS.Timer | null = null;\n\t\t\tconst redirect = (url?: string | undefined): void => {\n\t\t\t\tif (!timeoutHandler) {\n\t\t\t\t\t// If the handler is null, then we already ended the response;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\ttimeoutHandler = null;\n\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url || Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t};\n\n\t\t\t// Add a timeout to end the server response\n\t\t\ttimeoutHandler = setTimeout(() => {\n\t\t\t\t// If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n\t\t\t\tredirect();\n\t\t\t}, 5000);\n\n\t\t\ttry {\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML session');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with session.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\n\t\t\t\tconst { response } = serviceProvider.generateLogoutResponse({\n\t\t\t\t\tnameID: result.nameID || '',\n\t\t\t\t\tsessionIndex: result.idpSession || '',\n\t\t\t\t\tinResponseToId: result.id || '',\n\t\t\t\t});\n\n\t\t\t\tserviceProvider.logoutResponseToUrl(response, (err, url) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tSystemLogger.error({ err });\n\t\t\t\t\t\treturn redirect();\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect(url);\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\tredirect();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async processLogoutResponse(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tif (!req.query.SAMLResponse) {\n\t\t\tSAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n\t\t\tthrow new Error('Invalid LogoutResponse received.');\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutResponse(req.query.SAMLResponse, async (err, inResponseTo) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!inResponseTo) {\n\t\t\t\tthrow new Meteor.Error('Invalid logout request: no inResponseTo value.');\n\t\t\t}\n\n\t\t\tconst logOutUser = async (inResponseTo: string): Promise<void> => {\n\t\t\t\tSAMLUtils.log(`Logging Out user via inResponseTo ${inResponseTo}`);\n\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait logOutUser(inResponseTo);\n\t\t\t} finally {\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: req.query.RelayState,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static processSLORedirectAction(req: IIncomingMessage, res: ServerResponse): void {\n\t\tres.writeHead(302, {\n\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\tLocation: req.query.redirect,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static async processAuthorizeAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\tservice.id = samlObject.credentialToken;\n\n\t\t// Allow redirecting to internal domains when login process is complete\n\t\tconst { referer } = req.headers;\n\t\tconst siteUrl = settings.get<string>('Site_Url');\n\t\tif (typeof referer === 'string' && referer.startsWith(siteUrl)) {\n\t\t\tservice.redirectUrl = referer;\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tlet url: string | undefined;\n\n\t\ttry {\n\t\t\turl = await serviceProvider.getAuthorizeUrl();\n\t\t} catch (err: any) {\n\t\t\tSAMLUtils.error('Unable to generate authorize url');\n\t\t\tSAMLUtils.error(err);\n\t\t\turl = Meteor.absoluteUrl();\n\t\t}\n\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static processValidateAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\t_samlObject: ISAMLAction,\n\t): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tSAMLUtils.relayState = req.body.RelayState;\n\t\tserviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n\t\t\ttry {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t\tthrow new Error('Unable to validate response url');\n\t\t\t\t}\n\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow new Error('No user data collected from IdP response.');\n\t\t\t\t}\n\n\t\t\t\t// create a random token to store the login result\n\t\t\t\t// to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n\t\t\t\t// http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken, service.redirectUrl));\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {\n\t\t\t\tSAMLUtils.error(error);\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async findUser(username: string | undefined, emailRegex: RegExp): Promise<IUser | undefined | null> {\n\t\tconst { globalSettings } = SAMLUtils;\n\n\t\tif (globalSettings.immutableProperty === 'Username') {\n\t\t\tif (username) {\n\t\t\t\treturn Users.findOne({\n\t\t\t\t\tusername,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn Users.findOne({\n\t\t\t'emails.address': emailRegex,\n\t\t});\n\t}\n\n\tprivate static guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprivate static async subscribeToSAMLChannels(channels: Array<string>, user: IUser): Promise<void> {\n\t\tconst { includePrivateChannelsInUpdate } = SAMLUtils.globalSettings;\n\t\ttry {\n\t\t\tfor await (let roomName of channels) {\n\t\t\t\troomName = roomName.trim();\n\t\t\t\tif (!roomName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n\n\t\t\t\tif (privRoom && includePrivateChannelsInUpdate === true) {\n\t\t\t\t\tawait addUserToRoom(privRoom._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tif (room) {\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!room && !privRoom) {\n\t\t\t\t\t// If the user doesn't have an username yet, we can't create new rooms for them\n\t\t\t\t\tif (user.username) {\n\t\t\t\t\t\tawait createRoom('c', roomName, user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tSystemLogger.error(err);\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/lib/SAML.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/lib/SAML.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/lib/SAML.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/lib/SAML.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServerResponse } from 'http';\n\nimport type { IUser, IIncomingMessage, IPersonalAccessToken } from '@rocket.chat/core-typings';\nimport { CredentialTokens, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { generateUsernameSuggestion } from '../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../lib/server/functions/saveUserIdentity';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport type { ISAMLAction } from '../definition/ISAMLAction';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { SAMLServiceProvider } from './ServiceProvider';\nimport { SAMLUtils } from './Utils';\n\nconst showErrorMessage = function (res: ServerResponse, err: string): void {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html',\n\t});\n\tconst content = `<html><body><h2>Sorry, an annoying error occured</h2><div>${escapeHTML(err)}</div></body></html>`;\n\tres.end(content, 'utf-8');\n};\n\nexport class SAML {\n\tpublic static async processRequest(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tif (samlObject.actionName === 'metadata') {\n\t\t\t\tshowErrorMessage(res, `Unexpected SAML service ${samlObject.serviceName}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Unexpected SAML service ${samlObject.serviceName}`);\n\t\t}\n\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\treturn this.processMetadataAction(res, service);\n\t\t\tcase 'logout':\n\t\t\t\treturn this.processLogoutAction(req, res, service);\n\t\t\tcase 'sloRedirect':\n\t\t\t\treturn this.processSLORedirectAction(req, res);\n\t\t\tcase 'authorize':\n\t\t\t\treturn this.processAuthorizeAction(req, res, service, samlObject);\n\t\t\tcase 'validate':\n\t\t\t\treturn this.processValidateAction(req, res, service, samlObject);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected SAML action ${samlObject.actionName}`);\n\t\t}\n\t}\n\n\tpublic static async hasCredential(credentialToken: string): Promise<boolean> {\n\t\treturn (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n\t}\n\n\tpublic static async retrieveCredential(credentialToken: string): Promise<Record<string, any> | undefined> {\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static async insertOrUpdateSAMLUser(userObject: ISAMLUser): Promise<{ userId: string; token: string }> {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tquery[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\tuser = await Users.findOne(query);\n\n\t\t\tif (user) {\n\t\t\t\tcustomIdentifierMatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// Second, try searching by username or email (according to the immutableProperty setting)\n\t\tif (!user) {\n\t\t\tconst expression = userObject.emailList.map((email) => `^${escapeRegExp(email)}$`).join('|');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = await SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;\n\t\tconst { fullName } = userObject;\n\n\t\tconst active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\t\tif (!user) {\n\t\t\t// If we received any role from the mapping, use them - otherwise use the default role for creation.\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = await generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tif (i18n.languages?.includes(userObject.language)) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = await Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = await Users.findOneById(userId);\n\n\t\t\tif (user && userObject.channels && channelsAttributeUpdate !== true) {\n\t\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t\t}\n\t\t}\n\n\t\tif (!user) {\n\t\t\tthrow new Error('Failed to create user');\n\t\t}\n\t\t// creating the token and adding to the user\n\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\tawait Users.addPersonalAccessTokenToUser({\n\t\t\tuserId: user._id,\n\t\t\tloginTokenObject: stampedToken as unknown as IPersonalAccessToken,\n\t\t});\n\n\t\tconst updateData: Record<string, any> = {\n\t\t\t'services.saml.provider': userObject.samlLogin.provider,\n\t\t\t'services.saml.idp': userObject.samlLogin.idp,\n\t\t\t'services.saml.idpSession': userObject.samlLogin.idpSession,\n\t\t\t'services.saml.nameID': userObject.samlLogin.nameID,\n\t\t};\n\n\t\t// If the user was not found through the customIdentifier property, then update it's value\n\t\tif (customIdentifierMatch === false && customIdentifierAttributeName) {\n\t\t\tupdateData[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t}\n\n\t\t// Overwrite mail if needed\n\t\tif (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n\t\t\tupdateData.emails = emails;\n\t\t}\n\n\t\t// When updating an user, we only update the roles if we received them from the mapping\n\t\tif (userObject.roles?.length) {\n\t\t\tupdateData.roles = userObject.roles;\n\t\t}\n\n\t\tif (userObject.channels && channelsAttributeUpdate === true) {\n\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{\n\t\t\t\t_id: user._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: updateData,\n\t\t\t},\n\t\t);\n\n\t\tif ((username && username !== user.username) || (nameOverwrite && fullName && fullName !== user.name)) {\n\t\t\tawait saveUserIdentity({ _id: user._id, name: nameOverwrite ? fullName || undefined : user.name, username });\n\t\t}\n\n\t\t// sending token along with the userId\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token,\n\t\t};\n\t}\n\n\tprivate static processMetadataAction(res: ServerResponse, service: IServiceProviderOptions): void {\n\t\ttry {\n\t\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\n\t\t\tres.writeHead(200);\n\t\t\tres.write(serviceProvider.generateServiceProviderMetadata());\n\t\t\tres.end();\n\t\t} catch (err: any) {\n\t\t\tshowErrorMessage(res, err);\n\t\t}\n\t}\n\n\tprivate static async processLogoutAction(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\t// This is where we receive SAML LogoutResponse\n\t\tif (req.query.SAMLRequest) {\n\t\t\treturn this.processLogoutRequest(req, res, service);\n\t\t}\n\n\t\treturn this.processLogoutResponse(req, res, service);\n\t}\n\n\tprivate static async _logoutRemoveTokens(userId: string): Promise<void> {\n\t\tSAMLUtils.log(`Found user ${userId}`);\n\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Users.removeSamlServiceSession(userId);\n\t}\n\n\tprivate static async processLogoutRequest(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutRequest(req.query.SAMLRequest, async (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tSystemLogger.error({ err });\n\t\t\t\tthrow new Meteor.Error('Unable to Validate Logout Request');\n\t\t\t}\n\n\t\t\tif (!result?.nameID || !result?.idpSession) {\n\t\t\t\tthrow new Meteor.Error('Unable to process Logout Request: missing request data.');\n\t\t\t}\n\n\t\t\tlet timeoutHandler: NodeJS.Timer | null = null;\n\t\t\tconst redirect = (url?: string | undefined): void => {\n\t\t\t\tif (!timeoutHandler) {\n\t\t\t\t\t// If the handler is null, then we already ended the response;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\ttimeoutHandler = null;\n\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url || Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t};\n\n\t\t\t// Add a timeout to end the server response\n\t\t\ttimeoutHandler = setTimeout(() => {\n\t\t\t\t// If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n\t\t\t\tredirect();\n\t\t\t}, 5000);\n\n\t\t\ttry {\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML session');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with session.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\n\t\t\t\tconst { response } = serviceProvider.generateLogoutResponse({\n\t\t\t\t\tnameID: result.nameID || '',\n\t\t\t\t\tsessionIndex: result.idpSession || '',\n\t\t\t\t\tinResponseToId: result.id || '',\n\t\t\t\t});\n\n\t\t\t\tserviceProvider.logoutResponseToUrl(response, (err, url) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tSystemLogger.error({ err });\n\t\t\t\t\t\treturn redirect();\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect(url);\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\tredirect();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async processLogoutResponse(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tif (!req.query.SAMLResponse) {\n\t\t\tSAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n\t\t\tthrow new Error('Invalid LogoutResponse received.');\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutResponse(req.query.SAMLResponse, async (err, inResponseTo) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!inResponseTo) {\n\t\t\t\tthrow new Meteor.Error('Invalid logout request: no inResponseTo value.');\n\t\t\t}\n\n\t\t\tconst logOutUser = async (inResponseTo: string): Promise<void> => {\n\t\t\t\tSAMLUtils.log(`Logging Out user via inResponseTo ${inResponseTo}`);\n\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait logOutUser(inResponseTo);\n\t\t\t} finally {\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: req.query.RelayState,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static processSLORedirectAction(req: IIncomingMessage, res: ServerResponse): void {\n\t\tres.writeHead(302, {\n\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\tLocation: req.query.redirect,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static async processAuthorizeAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\tservice.id = samlObject.credentialToken;\n\n\t\t// Allow redirecting to internal domains when login process is complete\n\t\tconst { referer } = req.headers;\n\t\tconst siteUrl = settings.get<string>('Site_Url');\n\t\tif (typeof referer === 'string' && referer.startsWith(siteUrl)) {\n\t\t\tservice.redirectUrl = referer;\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tlet url: string | undefined;\n\n\t\ttry {\n\t\t\turl = await serviceProvider.getAuthorizeUrl();\n\t\t} catch (err: any) {\n\t\t\tSAMLUtils.error('Unable to generate authorize url');\n\t\t\tSAMLUtils.error(err);\n\t\t\turl = Meteor.absoluteUrl();\n\t\t}\n\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static processValidateAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\t_samlObject: ISAMLAction,\n\t): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tSAMLUtils.relayState = req.body.RelayState;\n\t\tserviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n\t\t\ttry {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t\tthrow new Error('Unable to validate response url');\n\t\t\t\t}\n\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow new Error('No user data collected from IdP response.');\n\t\t\t\t}\n\n\t\t\t\t// create a random token to store the login result\n\t\t\t\t// to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n\t\t\t\t// http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken, service.redirectUrl));\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {\n\t\t\t\tSAMLUtils.error(error);\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async findUser(username: string | undefined, emailRegex: RegExp): Promise<IUser | undefined | null> {\n\t\tconst { globalSettings } = SAMLUtils;\n\n\t\tif (globalSettings.immutableProperty === 'Username') {\n\t\t\tif (username) {\n\t\t\t\treturn Users.findOne({\n\t\t\t\t\tusername,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn Users.findOne({\n\t\t\t'emails.address': emailRegex,\n\t\t});\n\t}\n\n\tprivate static guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprivate static async subscribeToSAMLChannels(channels: Array<string>, user: IUser): Promise<void> {\n\t\tconst { includePrivateChannelsInUpdate } = SAMLUtils.globalSettings;\n\t\ttry {\n\t\t\tfor await (let roomName of channels) {\n\t\t\t\troomName = roomName.trim();\n\t\t\t\tif (!roomName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n\n\t\t\t\tif (privRoom && includePrivateChannelsInUpdate === true) {\n\t\t\t\t\tawait addUserToRoom(privRoom._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tif (room) {\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!room && !privRoom) {\n\t\t\t\t\t// If the user doesn't have an username yet, we can't create new rooms for them\n\t\t\t\t\tif (user.username) {\n\t\t\t\t\t\tawait createRoom('c', roomName, user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tSystemLogger.error(err);\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      SAML: () => SAML\n    });\n    let CredentialTokens, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      CredentialTokens(v) {\n        CredentialTokens = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 1);\n    let escapeRegExp, escapeHTML;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      },\n      escapeHTML(v) {\n        escapeHTML = v;\n      }\n    }, 2);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let ensureArray;\n    module.link(\"../../../../lib/utils/arrayUtils\", {\n      ensureArray(v) {\n        ensureArray = v;\n      }\n    }, 5);\n    let SystemLogger;\n    module.link(\"../../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 6);\n    let addUserToRoom;\n    module.link(\"../../../lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 7);\n    let createRoom;\n    module.link(\"../../../lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 8);\n    let generateUsernameSuggestion;\n    module.link(\"../../../lib/server/functions/getUsernameSuggestion\", {\n      generateUsernameSuggestion(v) {\n        generateUsernameSuggestion = v;\n      }\n    }, 9);\n    let saveUserIdentity;\n    module.link(\"../../../lib/server/functions/saveUserIdentity\", {\n      saveUserIdentity(v) {\n        saveUserIdentity = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let i18n;\n    module.link(\"../../../utils/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 12);\n    let SAMLServiceProvider;\n    module.link(\"./ServiceProvider\", {\n      SAMLServiceProvider(v) {\n        SAMLServiceProvider = v;\n      }\n    }, 13);\n    let SAMLUtils;\n    module.link(\"./Utils\", {\n      SAMLUtils(v) {\n        SAMLUtils = v;\n      }\n    }, 14);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const showErrorMessage = function (res, err) {\n      res.writeHead(200, {\n        'Content-Type': 'text/html'\n      });\n      const content = \"<html><body><h2>Sorry, an annoying error occured</h2><div>\".concat(escapeHTML(err), \"</div></body></html>\");\n      res.end(content, 'utf-8');\n    };\n    class SAML {\n      static async processRequest(req, res, service, samlObject) {\n        // Skip everything if there's no service set by the saml middleware\n        if (!service) {\n          if (samlObject.actionName === 'metadata') {\n            showErrorMessage(res, \"Unexpected SAML service \".concat(samlObject.serviceName));\n            return;\n          }\n          throw new Error(\"Unexpected SAML service \".concat(samlObject.serviceName));\n        }\n        switch (samlObject.actionName) {\n          case 'metadata':\n            return this.processMetadataAction(res, service);\n          case 'logout':\n            return this.processLogoutAction(req, res, service);\n          case 'sloRedirect':\n            return this.processSLORedirectAction(req, res);\n          case 'authorize':\n            return this.processAuthorizeAction(req, res, service, samlObject);\n          case 'validate':\n            return this.processValidateAction(req, res, service, samlObject);\n          default:\n            throw new Error(\"Unexpected SAML action \".concat(samlObject.actionName));\n        }\n      }\n      static async hasCredential(credentialToken) {\n        return (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n      }\n      static async retrieveCredential(credentialToken) {\n        // The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n        const data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n        if (data) {\n          return data.userInfo;\n        }\n      }\n      static async storeCredential(credentialToken, loginResult) {\n        await CredentialTokens.create(credentialToken, loginResult);\n      }\n      static async insertOrUpdateSAMLUser(userObject) {\n        var _userObject$roles2;\n        const {\n          generateUsername,\n          immutableProperty,\n          nameOverwrite,\n          mailOverwrite,\n          channelsAttributeUpdate,\n          defaultUserRole = 'user'\n        } = SAMLUtils.globalSettings;\n        let customIdentifierMatch = false;\n        let customIdentifierAttributeName = null;\n        let user = null;\n        // First, try searching by custom identifier\n        if (userObject.identifier.type === 'custom' && userObject.identifier.attribute && userObject.attributeList.has(userObject.identifier.attribute)) {\n          customIdentifierAttributeName = userObject.identifier.attribute;\n          const query = {};\n          query[\"services.saml.\".concat(customIdentifierAttributeName)] = userObject.attributeList.get(customIdentifierAttributeName);\n          user = await Users.findOne(query);\n          if (user) {\n            customIdentifierMatch = true;\n          }\n        }\n        // Second, try searching by username or email (according to the immutableProperty setting)\n        if (!user) {\n          const expression = userObject.emailList.map(email => \"^\".concat(escapeRegExp(email), \"$\")).join('|');\n          const emailRegex = new RegExp(expression, 'i');\n          user = await SAML.findUser(userObject.username, emailRegex);\n        }\n        const emails = userObject.emailList.map(email => ({\n          address: email,\n          verified: settings.get('Accounts_Verify_Email_For_External_Accounts')\n        }));\n        let {\n          username\n        } = userObject;\n        const {\n          fullName\n        } = userObject;\n        const active = !settings.get('Accounts_ManuallyApproveNewUsers');\n        if (!user) {\n          var _userObject$roles;\n          // If we received any role from the mapping, use them - otherwise use the default role for creation.\n          const roles = (_userObject$roles = userObject.roles) !== null && _userObject$roles !== void 0 && _userObject$roles.length ? userObject.roles : ensureArray(defaultUserRole.split(','));\n          const newUser = {\n            name: fullName,\n            active,\n            globalRoles: roles,\n            emails,\n            services: {\n              saml: {\n                provider: userObject.samlLogin.provider,\n                idp: userObject.samlLogin.idp\n              }\n            }\n          };\n          if (customIdentifierAttributeName) {\n            newUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n          }\n          if (generateUsername === true) {\n            username = await generateUsernameSuggestion(newUser);\n          }\n          if (username) {\n            newUser.username = username;\n            newUser.name = newUser.name || SAML.guessNameFromUsername(username);\n          }\n          if (userObject.language) {\n            var _i18n$languages;\n            if ((_i18n$languages = i18n.languages) !== null && _i18n$languages !== void 0 && _i18n$languages.includes(userObject.language)) {\n              newUser.language = userObject.language;\n            }\n          }\n          const userId = await Accounts.insertUserDoc({}, newUser);\n          user = await Users.findOneById(userId);\n          if (user && userObject.channels && channelsAttributeUpdate !== true) {\n            await SAML.subscribeToSAMLChannels(userObject.channels, user);\n          }\n        }\n        if (!user) {\n          throw new Error('Failed to create user');\n        }\n        // creating the token and adding to the user\n        const stampedToken = Accounts._generateStampedLoginToken();\n        await Users.addPersonalAccessTokenToUser({\n          userId: user._id,\n          loginTokenObject: stampedToken\n        });\n        const updateData = {\n          'services.saml.provider': userObject.samlLogin.provider,\n          'services.saml.idp': userObject.samlLogin.idp,\n          'services.saml.idpSession': userObject.samlLogin.idpSession,\n          'services.saml.nameID': userObject.samlLogin.nameID\n        };\n        // If the user was not found through the customIdentifier property, then update it's value\n        if (customIdentifierMatch === false && customIdentifierAttributeName) {\n          updateData[\"services.saml.\".concat(customIdentifierAttributeName)] = userObject.attributeList.get(customIdentifierAttributeName);\n        }\n        // Overwrite mail if needed\n        if (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n          updateData.emails = emails;\n        }\n        // When updating an user, we only update the roles if we received them from the mapping\n        if ((_userObject$roles2 = userObject.roles) !== null && _userObject$roles2 !== void 0 && _userObject$roles2.length) {\n          updateData.roles = userObject.roles;\n        }\n        if (userObject.channels && channelsAttributeUpdate === true) {\n          await SAML.subscribeToSAMLChannels(userObject.channels, user);\n        }\n        await Users.updateOne({\n          _id: user._id\n        }, {\n          $set: updateData\n        });\n        if (username && username !== user.username || nameOverwrite && fullName && fullName !== user.name) {\n          await saveUserIdentity({\n            _id: user._id,\n            name: nameOverwrite ? fullName || undefined : user.name,\n            username\n          });\n        }\n        // sending token along with the userId\n        return {\n          userId: user._id,\n          token: stampedToken.token\n        };\n      }\n      static processMetadataAction(res, service) {\n        try {\n          const serviceProvider = new SAMLServiceProvider(service);\n          res.writeHead(200);\n          res.write(serviceProvider.generateServiceProviderMetadata());\n          res.end();\n        } catch (err) {\n          showErrorMessage(res, err);\n        }\n      }\n      static async processLogoutAction(req, res, service) {\n        // This is where we receive SAML LogoutResponse\n        if (req.query.SAMLRequest) {\n          return this.processLogoutRequest(req, res, service);\n        }\n        return this.processLogoutResponse(req, res, service);\n      }\n      static async _logoutRemoveTokens(userId) {\n        SAMLUtils.log(\"Found user \".concat(userId));\n        await Users.unsetLoginTokens(userId);\n        await Users.removeSamlServiceSession(userId);\n      }\n      static async processLogoutRequest(req, res, service) {\n        const serviceProvider = new SAMLServiceProvider(service);\n        await serviceProvider.validateLogoutRequest(req.query.SAMLRequest, async (err, result) => {\n          if (err) {\n            SystemLogger.error({\n              err\n            });\n            throw new Meteor.Error('Unable to Validate Logout Request');\n          }\n          if (!(result !== null && result !== void 0 && result.nameID) || !(result !== null && result !== void 0 && result.idpSession)) {\n            throw new Meteor.Error('Unable to process Logout Request: missing request data.');\n          }\n          let timeoutHandler = null;\n          const redirect = url => {\n            if (!timeoutHandler) {\n              // If the handler is null, then we already ended the response;\n              return;\n            }\n            clearTimeout(timeoutHandler);\n            timeoutHandler = null;\n            res.writeHead(302, {\n              Location: url || Meteor.absoluteUrl()\n            });\n            res.end();\n          };\n          // Add a timeout to end the server response\n          timeoutHandler = setTimeout(() => {\n            // If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n            redirect();\n          }, 5000);\n          try {\n            const loggedOutUsers = await Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession).toArray();\n            if (loggedOutUsers.length > 1) {\n              throw new Meteor.Error('Found multiple users matching SAML session');\n            }\n            if (loggedOutUsers.length === 0) {\n              throw new Meteor.Error('Invalid logout request: no user associated with session.');\n            }\n            await this._logoutRemoveTokens(loggedOutUsers[0]._id);\n            const {\n              response\n            } = serviceProvider.generateLogoutResponse({\n              nameID: result.nameID || '',\n              sessionIndex: result.idpSession || '',\n              inResponseToId: result.id || ''\n            });\n            serviceProvider.logoutResponseToUrl(response, (err, url) => {\n              if (err) {\n                SystemLogger.error({\n                  err\n                });\n                return redirect();\n              }\n              redirect(url);\n            });\n          } catch (e) {\n            SystemLogger.error(e);\n            redirect();\n          }\n        });\n      }\n      static async processLogoutResponse(req, res, service) {\n        if (!req.query.SAMLResponse) {\n          SAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n          throw new Error('Invalid LogoutResponse received.');\n        }\n        const serviceProvider = new SAMLServiceProvider(service);\n        await serviceProvider.validateLogoutResponse(req.query.SAMLResponse, async (err, inResponseTo) => {\n          if (err) {\n            return;\n          }\n          if (!inResponseTo) {\n            throw new Meteor.Error('Invalid logout request: no inResponseTo value.');\n          }\n          const logOutUser = async inResponseTo => {\n            SAMLUtils.log(\"Logging Out user via inResponseTo \".concat(inResponseTo));\n            const loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n            if (loggedOutUsers.length > 1) {\n              throw new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n            }\n            if (loggedOutUsers.length === 0) {\n              throw new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n            }\n            await this._logoutRemoveTokens(loggedOutUsers[0]._id);\n          };\n          try {\n            await logOutUser(inResponseTo);\n          } finally {\n            res.writeHead(302, {\n              Location: req.query.RelayState\n            });\n            res.end();\n          }\n        });\n      }\n      static processSLORedirectAction(req, res) {\n        res.writeHead(302, {\n          // credentialToken here is the SAML LogOut Request that we'll send back to IDP\n          Location: req.query.redirect\n        });\n        res.end();\n      }\n      static async processAuthorizeAction(req, res, service, samlObject) {\n        service.id = samlObject.credentialToken;\n        // Allow redirecting to internal domains when login process is complete\n        const {\n          referer\n        } = req.headers;\n        const siteUrl = settings.get('Site_Url');\n        if (typeof referer === 'string' && referer.startsWith(siteUrl)) {\n          service.redirectUrl = referer;\n        }\n        const serviceProvider = new SAMLServiceProvider(service);\n        let url;\n        try {\n          url = await serviceProvider.getAuthorizeUrl();\n        } catch (err) {\n          SAMLUtils.error('Unable to generate authorize url');\n          SAMLUtils.error(err);\n          url = Meteor.absoluteUrl();\n        }\n        res.writeHead(302, {\n          Location: url\n        });\n        res.end();\n      }\n      static processValidateAction(req, res, service, _samlObject) {\n        const serviceProvider = new SAMLServiceProvider(service);\n        SAMLUtils.relayState = req.body.RelayState;\n        serviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n          try {\n            if (err) {\n              SAMLUtils.error(err);\n              throw new Error('Unable to validate response url');\n            }\n            if (!profile) {\n              throw new Error('No user data collected from IdP response.');\n            }\n            // create a random token to store the login result\n            // to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n            // http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n            const credentialToken = Random.id();\n            const loginResult = {\n              profile\n            };\n            await this.storeCredential(credentialToken, loginResult);\n            const url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken, service.redirectUrl));\n            res.writeHead(302, {\n              Location: url\n            });\n            res.end();\n          } catch (error) {\n            SAMLUtils.error(error);\n            res.writeHead(302, {\n              Location: Meteor.absoluteUrl()\n            });\n            res.end();\n          }\n        });\n      }\n      static async findUser(username, emailRegex) {\n        const {\n          globalSettings\n        } = SAMLUtils;\n        if (globalSettings.immutableProperty === 'Username') {\n          if (username) {\n            return Users.findOne({\n              username\n            });\n          }\n          return;\n        }\n        return Users.findOne({\n          'emails.address': emailRegex\n        });\n      }\n      static guessNameFromUsername(username) {\n        return username.replace(/\\W/g, ' ').replace(/\\s(.)/g, u => u.toUpperCase()).replace(/^(.)/, u => u.toLowerCase()).replace(/^\\w/, u => u.toUpperCase());\n      }\n      static async subscribeToSAMLChannels(channels, user) {\n        const {\n          includePrivateChannelsInUpdate\n        } = SAMLUtils.globalSettings;\n        try {\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(channels), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              let roomName = _step.value;\n              {\n                roomName = roomName.trim();\n                if (!roomName) {\n                  continue;\n                }\n                const privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n                if (privRoom && includePrivateChannelsInUpdate === true) {\n                  await addUserToRoom(privRoom._id, user);\n                  continue;\n                }\n                const room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n                if (room) {\n                  await addUserToRoom(room._id, user);\n                  continue;\n                }\n                if (!room && !privRoom) {\n                  // If the user doesn't have an username yet, we can't create new rooms for them\n                  if (user.username) {\n                    await createRoom('c', roomName, user);\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        } catch (err) {\n          SystemLogger.error(err);\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","SAML","CredentialTokens","Rooms","Users","Random","escapeRegExp","escapeHTML","Accounts","Meteor","ensureArray","SystemLogger","addUserToRoom","createRoom","generateUsernameSuggestion","saveUserIdentity","settings","i18n","SAMLServiceProvider","SAMLUtils","__reifyWaitForDeps__","showErrorMessage","res","err","writeHead","content","concat","end","processRequest","req","service","samlObject","actionName","serviceName","Error","processMetadataAction","processLogoutAction","processSLORedirectAction","processAuthorizeAction","processValidateAction","hasCredential","credentialToken","findOneNotExpiredById","retrieveCredential","data","userInfo","storeCredential","loginResult","create","insertOrUpdateSAMLUser","userObject","_userObject$roles2","generateUsername","immutableProperty","nameOverwrite","mailOverwrite","channelsAttributeUpdate","defaultUserRole","globalSettings","customIdentifierMatch","customIdentifierAttributeName","user","identifier","type","attribute","attributeList","has","query","get","findOne","expression","emailList","map","email","join","emailRegex","RegExp","findUser","username","emails","address","verified","fullName","active","_userObject$roles","roles","length","split","newUser","name","globalRoles","services","saml","provider","samlLogin","idp","guessNameFromUsername","language","_i18n$languages","languages","includes","userId","insertUserDoc","findOneById","channels","subscribeToSAMLChannels","stampedToken","_generateStampedLoginToken","addPersonalAccessTokenToUser","_id","loginTokenObject","updateData","idpSession","nameID","updateOne","$set","undefined","token","serviceProvider","write","generateServiceProviderMetadata","SAMLRequest","processLogoutRequest","processLogoutResponse","_logoutRemoveTokens","log","unsetLoginTokens","removeSamlServiceSession","validateLogoutRequest","result","error","timeoutHandler","redirect","url","clearTimeout","Location","absoluteUrl","setTimeout","loggedOutUsers","findBySAMLNameIdOrIdpSession","toArray","response","generateLogoutResponse","sessionIndex","inResponseToId","id","logoutResponseToUrl","e","SAMLResponse","validateLogoutResponse","inResponseTo","logOutUser","findBySAMLInResponseTo","RelayState","referer","headers","siteUrl","startsWith","redirectUrl","getAuthorizeUrl","_samlObject","relayState","body","validateResponse","profile","getValidationActionRedirectPath","replace","u","toUpperCase","toLowerCase","includePrivateChannelsInUpdate","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","roomName","value","trim","privRoom","findOneByNameAndType","room","return","__reify_async_result__","_reifyError","self","async"],"sources":["app/meteor-accounts-saml/server/lib/SAML.ts"],"sourcesContent":["import type { ServerResponse } from 'http';\n\nimport type { IUser, IIncomingMessage, IPersonalAccessToken } from '@rocket.chat/core-typings';\nimport { CredentialTokens, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { escapeRegExp, escapeHTML } from '@rocket.chat/string-helpers';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { ensureArray } from '../../../../lib/utils/arrayUtils';\nimport { SystemLogger } from '../../../../server/lib/logger/system';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { generateUsernameSuggestion } from '../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../lib/server/functions/saveUserIdentity';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport type { ISAMLAction } from '../definition/ISAMLAction';\nimport type { ISAMLUser } from '../definition/ISAMLUser';\nimport type { IServiceProviderOptions } from '../definition/IServiceProviderOptions';\nimport { SAMLServiceProvider } from './ServiceProvider';\nimport { SAMLUtils } from './Utils';\n\nconst showErrorMessage = function (res: ServerResponse, err: string): void {\n\tres.writeHead(200, {\n\t\t'Content-Type': 'text/html',\n\t});\n\tconst content = `<html><body><h2>Sorry, an annoying error occured</h2><div>${escapeHTML(err)}</div></body></html>`;\n\tres.end(content, 'utf-8');\n};\n\nexport class SAML {\n\tpublic static async processRequest(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\t// Skip everything if there's no service set by the saml middleware\n\t\tif (!service) {\n\t\t\tif (samlObject.actionName === 'metadata') {\n\t\t\t\tshowErrorMessage(res, `Unexpected SAML service ${samlObject.serviceName}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow new Error(`Unexpected SAML service ${samlObject.serviceName}`);\n\t\t}\n\n\t\tswitch (samlObject.actionName) {\n\t\t\tcase 'metadata':\n\t\t\t\treturn this.processMetadataAction(res, service);\n\t\t\tcase 'logout':\n\t\t\t\treturn this.processLogoutAction(req, res, service);\n\t\t\tcase 'sloRedirect':\n\t\t\t\treturn this.processSLORedirectAction(req, res);\n\t\t\tcase 'authorize':\n\t\t\t\treturn this.processAuthorizeAction(req, res, service, samlObject);\n\t\t\tcase 'validate':\n\t\t\t\treturn this.processValidateAction(req, res, service, samlObject);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected SAML action ${samlObject.actionName}`);\n\t\t}\n\t}\n\n\tpublic static async hasCredential(credentialToken: string): Promise<boolean> {\n\t\treturn (await CredentialTokens.findOneNotExpiredById(credentialToken)) != null;\n\t}\n\n\tpublic static async retrieveCredential(credentialToken: string): Promise<Record<string, any> | undefined> {\n\t\t// The credentialToken in all these functions corresponds to SAMLs inResponseTo field and is mandatory to check.\n\t\tconst data = await CredentialTokens.findOneNotExpiredById(credentialToken);\n\t\tif (data) {\n\t\t\treturn data.userInfo;\n\t\t}\n\t}\n\n\tpublic static async storeCredential(credentialToken: string, loginResult: { profile: Record<string, any> }): Promise<void> {\n\t\tawait CredentialTokens.create(credentialToken, loginResult);\n\t}\n\n\tpublic static async insertOrUpdateSAMLUser(userObject: ISAMLUser): Promise<{ userId: string; token: string }> {\n\t\tconst {\n\t\t\tgenerateUsername,\n\t\t\timmutableProperty,\n\t\t\tnameOverwrite,\n\t\t\tmailOverwrite,\n\t\t\tchannelsAttributeUpdate,\n\t\t\tdefaultUserRole = 'user',\n\t\t} = SAMLUtils.globalSettings;\n\n\t\tlet customIdentifierMatch = false;\n\t\tlet customIdentifierAttributeName: string | null = null;\n\t\tlet user = null;\n\n\t\t// First, try searching by custom identifier\n\t\tif (\n\t\t\tuserObject.identifier.type === 'custom' &&\n\t\t\tuserObject.identifier.attribute &&\n\t\t\tuserObject.attributeList.has(userObject.identifier.attribute)\n\t\t) {\n\t\t\tcustomIdentifierAttributeName = userObject.identifier.attribute;\n\n\t\t\tconst query: Record<string, any> = {};\n\t\t\tquery[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\tuser = await Users.findOne(query);\n\n\t\t\tif (user) {\n\t\t\t\tcustomIdentifierMatch = true;\n\t\t\t}\n\t\t}\n\n\t\t// Second, try searching by username or email (according to the immutableProperty setting)\n\t\tif (!user) {\n\t\t\tconst expression = userObject.emailList.map((email) => `^${escapeRegExp(email)}$`).join('|');\n\t\t\tconst emailRegex = new RegExp(expression, 'i');\n\n\t\t\tuser = await SAML.findUser(userObject.username, emailRegex);\n\t\t}\n\n\t\tconst emails = userObject.emailList.map((email) => ({\n\t\t\taddress: email,\n\t\t\tverified: settings.get('Accounts_Verify_Email_For_External_Accounts'),\n\t\t}));\n\n\t\tlet { username } = userObject;\n\t\tconst { fullName } = userObject;\n\n\t\tconst active = !settings.get('Accounts_ManuallyApproveNewUsers');\n\n\t\tif (!user) {\n\t\t\t// If we received any role from the mapping, use them - otherwise use the default role for creation.\n\t\t\tconst roles = userObject.roles?.length ? userObject.roles : ensureArray<string>(defaultUserRole.split(','));\n\n\t\t\tconst newUser: Record<string, any> = {\n\t\t\t\tname: fullName,\n\t\t\t\tactive,\n\t\t\t\tglobalRoles: roles,\n\t\t\t\temails,\n\t\t\t\tservices: {\n\t\t\t\t\tsaml: {\n\t\t\t\t\t\tprovider: userObject.samlLogin.provider,\n\t\t\t\t\t\tidp: userObject.samlLogin.idp,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (customIdentifierAttributeName) {\n\t\t\t\tnewUser.services.saml[customIdentifierAttributeName] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t\t}\n\n\t\t\tif (generateUsername === true) {\n\t\t\t\tusername = await generateUsernameSuggestion(newUser);\n\t\t\t}\n\n\t\t\tif (username) {\n\t\t\t\tnewUser.username = username;\n\t\t\t\tnewUser.name = newUser.name || SAML.guessNameFromUsername(username);\n\t\t\t}\n\n\t\t\tif (userObject.language) {\n\t\t\t\tif (i18n.languages?.includes(userObject.language)) {\n\t\t\t\t\tnewUser.language = userObject.language;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst userId = await Accounts.insertUserDoc({}, newUser);\n\t\t\tuser = await Users.findOneById(userId);\n\n\t\t\tif (user && userObject.channels && channelsAttributeUpdate !== true) {\n\t\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t\t}\n\t\t}\n\n\t\tif (!user) {\n\t\t\tthrow new Error('Failed to create user');\n\t\t}\n\t\t// creating the token and adding to the user\n\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\t\tawait Users.addPersonalAccessTokenToUser({\n\t\t\tuserId: user._id,\n\t\t\tloginTokenObject: stampedToken as unknown as IPersonalAccessToken,\n\t\t});\n\n\t\tconst updateData: Record<string, any> = {\n\t\t\t'services.saml.provider': userObject.samlLogin.provider,\n\t\t\t'services.saml.idp': userObject.samlLogin.idp,\n\t\t\t'services.saml.idpSession': userObject.samlLogin.idpSession,\n\t\t\t'services.saml.nameID': userObject.samlLogin.nameID,\n\t\t};\n\n\t\t// If the user was not found through the customIdentifier property, then update it's value\n\t\tif (customIdentifierMatch === false && customIdentifierAttributeName) {\n\t\t\tupdateData[`services.saml.${customIdentifierAttributeName}`] = userObject.attributeList.get(customIdentifierAttributeName);\n\t\t}\n\n\t\t// Overwrite mail if needed\n\t\tif (mailOverwrite === true && (customIdentifierMatch === true || immutableProperty !== 'EMail')) {\n\t\t\tupdateData.emails = emails;\n\t\t}\n\n\t\t// When updating an user, we only update the roles if we received them from the mapping\n\t\tif (userObject.roles?.length) {\n\t\t\tupdateData.roles = userObject.roles;\n\t\t}\n\n\t\tif (userObject.channels && channelsAttributeUpdate === true) {\n\t\t\tawait SAML.subscribeToSAMLChannels(userObject.channels, user);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{\n\t\t\t\t_id: user._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: updateData,\n\t\t\t},\n\t\t);\n\n\t\tif ((username && username !== user.username) || (nameOverwrite && fullName && fullName !== user.name)) {\n\t\t\tawait saveUserIdentity({ _id: user._id, name: nameOverwrite ? fullName || undefined : user.name, username });\n\t\t}\n\n\t\t// sending token along with the userId\n\t\treturn {\n\t\t\tuserId: user._id,\n\t\t\ttoken: stampedToken.token,\n\t\t};\n\t}\n\n\tprivate static processMetadataAction(res: ServerResponse, service: IServiceProviderOptions): void {\n\t\ttry {\n\t\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\n\t\t\tres.writeHead(200);\n\t\t\tres.write(serviceProvider.generateServiceProviderMetadata());\n\t\t\tres.end();\n\t\t} catch (err: any) {\n\t\t\tshowErrorMessage(res, err);\n\t\t}\n\t}\n\n\tprivate static async processLogoutAction(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\t// This is where we receive SAML LogoutResponse\n\t\tif (req.query.SAMLRequest) {\n\t\t\treturn this.processLogoutRequest(req, res, service);\n\t\t}\n\n\t\treturn this.processLogoutResponse(req, res, service);\n\t}\n\n\tprivate static async _logoutRemoveTokens(userId: string): Promise<void> {\n\t\tSAMLUtils.log(`Found user ${userId}`);\n\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Users.removeSamlServiceSession(userId);\n\t}\n\n\tprivate static async processLogoutRequest(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutRequest(req.query.SAMLRequest, async (err, result) => {\n\t\t\tif (err) {\n\t\t\t\tSystemLogger.error({ err });\n\t\t\t\tthrow new Meteor.Error('Unable to Validate Logout Request');\n\t\t\t}\n\n\t\t\tif (!result?.nameID || !result?.idpSession) {\n\t\t\t\tthrow new Meteor.Error('Unable to process Logout Request: missing request data.');\n\t\t\t}\n\n\t\t\tlet timeoutHandler: NodeJS.Timer | null = null;\n\t\t\tconst redirect = (url?: string | undefined): void => {\n\t\t\t\tif (!timeoutHandler) {\n\t\t\t\t\t// If the handler is null, then we already ended the response;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tclearTimeout(timeoutHandler);\n\t\t\t\ttimeoutHandler = null;\n\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url || Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t};\n\n\t\t\t// Add a timeout to end the server response\n\t\t\ttimeoutHandler = setTimeout(() => {\n\t\t\t\t// If we couldn't get a valid IdP url, let's redirect the user to our home so the browser doesn't hang on them.\n\t\t\t\tredirect();\n\t\t\t}, 5000);\n\n\t\t\ttry {\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLNameIdOrIdpSession(result.nameID, result.idpSession).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML session');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with session.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\n\t\t\t\tconst { response } = serviceProvider.generateLogoutResponse({\n\t\t\t\t\tnameID: result.nameID || '',\n\t\t\t\t\tsessionIndex: result.idpSession || '',\n\t\t\t\t\tinResponseToId: result.id || '',\n\t\t\t\t});\n\n\t\t\t\tserviceProvider.logoutResponseToUrl(response, (err, url) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tSystemLogger.error({ err });\n\t\t\t\t\t\treturn redirect();\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect(url);\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tSystemLogger.error(e);\n\t\t\t\tredirect();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async processLogoutResponse(req: IIncomingMessage, res: ServerResponse, service: IServiceProviderOptions): Promise<void> {\n\t\tif (!req.query.SAMLResponse) {\n\t\t\tSAMLUtils.error('Invalid LogoutResponse, missing SAMLResponse', req.query);\n\t\t\tthrow new Error('Invalid LogoutResponse received.');\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tawait serviceProvider.validateLogoutResponse(req.query.SAMLResponse, async (err, inResponseTo) => {\n\t\t\tif (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!inResponseTo) {\n\t\t\t\tthrow new Meteor.Error('Invalid logout request: no inResponseTo value.');\n\t\t\t}\n\n\t\t\tconst logOutUser = async (inResponseTo: string): Promise<void> => {\n\t\t\t\tSAMLUtils.log(`Logging Out user via inResponseTo ${inResponseTo}`);\n\n\t\t\t\tconst loggedOutUsers = await Users.findBySAMLInResponseTo(inResponseTo).toArray();\n\t\t\t\tif (loggedOutUsers.length > 1) {\n\t\t\t\t\tthrow new Meteor.Error('Found multiple users matching SAML inResponseTo fields');\n\t\t\t\t}\n\n\t\t\t\tif (loggedOutUsers.length === 0) {\n\t\t\t\t\tthrow new Meteor.Error('Invalid logout request: no user associated with inResponseTo.');\n\t\t\t\t}\n\n\t\t\t\tawait this._logoutRemoveTokens(loggedOutUsers[0]._id);\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait logOutUser(inResponseTo);\n\t\t\t} finally {\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: req.query.RelayState,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static processSLORedirectAction(req: IIncomingMessage, res: ServerResponse): void {\n\t\tres.writeHead(302, {\n\t\t\t// credentialToken here is the SAML LogOut Request that we'll send back to IDP\n\t\t\tLocation: req.query.redirect,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static async processAuthorizeAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\tsamlObject: ISAMLAction,\n\t): Promise<void> {\n\t\tservice.id = samlObject.credentialToken;\n\n\t\t// Allow redirecting to internal domains when login process is complete\n\t\tconst { referer } = req.headers;\n\t\tconst siteUrl = settings.get<string>('Site_Url');\n\t\tif (typeof referer === 'string' && referer.startsWith(siteUrl)) {\n\t\t\tservice.redirectUrl = referer;\n\t\t}\n\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tlet url: string | undefined;\n\n\t\ttry {\n\t\t\turl = await serviceProvider.getAuthorizeUrl();\n\t\t} catch (err: any) {\n\t\t\tSAMLUtils.error('Unable to generate authorize url');\n\t\t\tSAMLUtils.error(err);\n\t\t\turl = Meteor.absoluteUrl();\n\t\t}\n\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n\n\tprivate static processValidateAction(\n\t\treq: IIncomingMessage,\n\t\tres: ServerResponse,\n\t\tservice: IServiceProviderOptions,\n\t\t_samlObject: ISAMLAction,\n\t): void {\n\t\tconst serviceProvider = new SAMLServiceProvider(service);\n\t\tSAMLUtils.relayState = req.body.RelayState;\n\t\tserviceProvider.validateResponse(req.body.SAMLResponse, async (err, profile /* , loggedOut*/) => {\n\t\t\ttry {\n\t\t\t\tif (err) {\n\t\t\t\t\tSAMLUtils.error(err);\n\t\t\t\t\tthrow new Error('Unable to validate response url');\n\t\t\t\t}\n\n\t\t\t\tif (!profile) {\n\t\t\t\t\tthrow new Error('No user data collected from IdP response.');\n\t\t\t\t}\n\n\t\t\t\t// create a random token to store the login result\n\t\t\t\t// to test an IdP initiated login on localhost, use the following URL (assuming SimpleSAMLPHP on localhost:8080):\n\t\t\t\t// http://localhost:8080/simplesaml/saml2/idp/SSOService.php?spentityid=http://localhost:3000/_saml/metadata/test-sp\n\t\t\t\tconst credentialToken = Random.id();\n\n\t\t\t\tconst loginResult = {\n\t\t\t\t\tprofile,\n\t\t\t\t};\n\n\t\t\t\tawait this.storeCredential(credentialToken, loginResult);\n\t\t\t\tconst url = Meteor.absoluteUrl(SAMLUtils.getValidationActionRedirectPath(credentialToken, service.redirectUrl));\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: url,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t} catch (error) {\n\t\t\t\tSAMLUtils.error(error);\n\t\t\t\tres.writeHead(302, {\n\t\t\t\t\tLocation: Meteor.absoluteUrl(),\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate static async findUser(username: string | undefined, emailRegex: RegExp): Promise<IUser | undefined | null> {\n\t\tconst { globalSettings } = SAMLUtils;\n\n\t\tif (globalSettings.immutableProperty === 'Username') {\n\t\t\tif (username) {\n\t\t\t\treturn Users.findOne({\n\t\t\t\t\tusername,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn Users.findOne({\n\t\t\t'emails.address': emailRegex,\n\t\t});\n\t}\n\n\tprivate static guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprivate static async subscribeToSAMLChannels(channels: Array<string>, user: IUser): Promise<void> {\n\t\tconst { includePrivateChannelsInUpdate } = SAMLUtils.globalSettings;\n\t\ttry {\n\t\t\tfor await (let roomName of channels) {\n\t\t\t\troomName = roomName.trim();\n\t\t\t\tif (!roomName) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst privRoom = await Rooms.findOneByNameAndType(roomName, 'p', {});\n\n\t\t\t\tif (privRoom && includePrivateChannelsInUpdate === true) {\n\t\t\t\t\tawait addUserToRoom(privRoom._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst room = await Rooms.findOneByNameAndType(roomName, 'c', {});\n\t\t\t\tif (room) {\n\t\t\t\t\tawait addUserToRoom(room._id, user);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!room && !privRoom) {\n\t\t\t\t\t// If the user doesn't have an username yet, we can't create new rooms for them\n\t\t\t\t\tif (user.username) {\n\t\t\t\t\t\tawait createRoom('c', roomName, user);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: any) {\n\t\t\tSystemLogger.error(err);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b28310c53d97b88d292e73618b1de3bcc799fd62"}
