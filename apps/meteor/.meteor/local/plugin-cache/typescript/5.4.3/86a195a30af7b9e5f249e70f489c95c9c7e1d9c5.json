{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyUsersOnMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/lib/notifyUsersOnMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyUsersOnMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/notifyUsersOnMessage.ts","sourceRoot":"","sources":["app/lib/server/lib/notifyUsersOnMessage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAE5D,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EACN,2BAA2B,EAC3B,4CAA4C,EAC5C,6CAA6C,GAC7C,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,wBAAwB,EAAE,MAAM,qDAAqD,CAAC;AAE/F,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,OAAiB;IAClD,MAAM,EACL,QAAQ,EACR,CAAC,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,GACpB,GAAG,OAAO,CAAC;IAEZ,IAAI,CAAC,QAAQ,EAAE,CAAC;QACf,OAAO;YACN,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,KAAK;YACb,UAAU,EAAE,EAAE;SACd,CAAC;IACH,CAAC;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC;IACxD,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC;IAE1D,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;IAC5E,MAAM,gBAAgB,GAAG,QAAQ;SAC/B,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;SAC7D,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;SACvE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;IAExB,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,mBAAmB,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;IAE7F,OAAO;QACN,KAAK;QACL,MAAM;QACN,UAAU;KACV,CAAC;AACH,CAAC;AAID,MAAM,gBAAgB,GAAG,CAAC,QAAkB,EAAE,WAA2D,EAAU,EAAE;IACpH,MAAM,gBAAgB,GAAG,CAAC,cAAc,EAAE,qBAAqB,EAAE,8BAA8B,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACvH,OAAO,QAAQ,KAAK,GAAG,IAAI,QAAQ,KAAK,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,QAAkB,EAAE,WAA4D,EAAU,EAAE;IACpH,MAAM,eAAe,GAAG,CAAC,cAAc,EAAE,oBAAoB,EAAE,8BAA8B,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACrH,OAAO,QAAQ,KAAK,GAAG,IAAI,QAAQ,KAAK,GAAG,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,KAAK,EAAE,GAAiB,EAAE,OAAiB,EAAqB,EAAE;IACzG,MAAM,gBAAgB,GAAG,EAAE,UAAU,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7E,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,4BAA4B,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,OAAO,EAAE,CAAC;IAE/F,OAAO,IAAI;SACT,MAAM,CACN,CAAC,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,cAAc,IAAI,wBAAwB,CAAC,OAAO,EAAE,cAAc,CAAC,IAAI,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC,GAAG,CACrI;SACA,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,QAAkB,EAAmB,EAAE;IACrE,IAAI,aAAa,GAAG,cAAc,CAAC;IACnC,QAAQ,QAAQ,EAAE,CAAC;QAClB,KAAK,GAAG,CAAC,CAAC,CAAC;YACV,aAAa,GAAG,iBAAiB,CAAC;YAClC,MAAM;QACP,CAAC;QACD,KAAK,GAAG,CAAC,CAAC,CAAC;YACV,aAAa,GAAG,mBAAmB,CAAC;YACpC,MAAM;QACP,CAAC;IACF,CAAC;IAED,OAAO,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,KAAK,UAAU,wBAAwB,CAAC,OAAiB,EAAE,IAAW;IACrE,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;QAC3B,OAAO;IACR,CAAC;IAED,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAExH,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,QAAQ,CAAC;IAC/C,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,UAAU,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/D,MAAM,WAAW,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAElD,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE,WAA8D,CAAC,CAAC;IAC/G,MAAM,eAAe,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,WAA6D,CAAC,CAAC;IAEhH,KAAK,aAAa,CAAC,6CAA6C,CAAC;QAChE,MAAM,EAAE,IAAI,CAAC,GAAG;QAChB,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QAC5B,WAAW,EAAE,OAAO;QACpB,QAAQ,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,IAAI,WAAW,KAAK,cAAc;KAC7D,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAClB,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACnD,MAAM,eAAe,GAAG,cAAc,IAAI,KAAK,IAAI,MAAM,IAAI,WAAW,KAAK,cAAc,CAAC;QAC5F,KAAK,2BAA2B,CAC/B;YACC,GAAG,GAAG;YACN,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,IAAI;YACV,GAAG,CAAC,eAAe,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClD,GAAG,CAAC,cAAc,IAAI,EAAE,YAAY,EAAE,GAAG,CAAC,YAAY,GAAG,CAAC,EAAE,CAAC;YAC7D,GAAG,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,EAAE,aAAa,EAAE,GAAG,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;SAClE,EACD,SAAS,CACT,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,qDAAqD;IACrD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACpB,MAAM,aAAa,CAAC,2CAA2C,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC;IACvG,CAAC;SAAM,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC;QAC5B,MAAM,aAAa,CAAC,iDAAiD,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,eAAe,CAAC,CAAC;IACpH,CAAC;IAED,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,IAAI,WAAW,KAAK,cAAc,EAAE,CAAC;QACzD,MAAM,aAAa,CAAC,kCAAkC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAClG,CAAC;IAED,oDAAoD;IACpD,MAAM,OAAO,CAAC,GAAG,CAAC;QACjB,aAAa,CAAC,gCAAgC,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;QAC1E,aAAa,CAAC,+BAA+B,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;KACzE,CAAC,CAAC;IAEH,4CAA4C;IAC5C,MAAM,aAAa,CAAC,0BAA0B,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3E,MAAM,iBAAiB,GAAG,MAAM,aAAa,CAAC,0BAA0B,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrG,IAAI,iBAAiB,CAAC,aAAa,EAAE,CAAC;QACrC,KAAK,4CAA4C,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/E,CAAC;AACF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAAC,OAAiB,EAAE,OAAuB;IAC9F,mDAAmD;IACnD,MAAM,iBAAiB,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAEpE,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACnC,aAAa,CAAC,2BAA2B,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;QAC/D,aAAa,CAAC,0BAA0B,CAAC,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC;QACxE,aAAa,CAAC,+BAA+B,CAAC,OAAO,CAAC,GAAG,EAAE,iBAAiB,EAAE,IAAI,IAAI,EAAE,CAAC;KACzF,CAAC,CAAC;IAEH,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC;QACpD,KAAK,6CAA6C,CAAC,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AACrF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,OAAiB,EAAE,IAAW,EAAE,WAA2B;IACrG,iHAAiH;IACjH,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;QAC9B,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC;YACjE,gIAAgI;YAChI,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YAChD,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,qEAAqE;QACrE,IACC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;YAClC,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC;YAChC,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG,CAAC,EAC1D,CAAC;YACF,KAAK,CAAC,yBAAyB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,IAAI,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC;QACzE,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAChD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,mGAAmG;IACnG,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACpC,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAChD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,0CAA0C,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,WAAW,CAAC,CAAC;IAChH,MAAM,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAE9C,OAAO,OAAO,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,OAAiB,EAAE,IAAW;IAC9E,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;IACvC,KAAK,CAAC,0CAA0C,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,WAAW,CAAC,CAAC;IAEhH,IAAI,WAAW,CAAC,UAAU,EAAE,EAAE,CAAC;QAC9B,MAAM,KAAK,CAAC,iBAAiB,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED,2DAA2D;IAC3D,MAAM,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAE9C,OAAO,OAAO,CAAC;AAChB,CAAC;AAED,SAAS,CAAC,GAAG,CACZ,kBAAkB,EAClB,KAAK,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,EAAE;IACxC,IAAI,CAAC,WAAW,EAAE,CAAC;QAClB,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,oBAAoB,CAAC,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;IAEvD,OAAO,OAAO,CAAC;AAChB,CAAC,EACD,SAAS,CAAC,QAAQ,CAAC,MAAM,EACzB,sBAAsB,CACtB,CAAC","sourcesContent":["import type { IMessage, IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { isEditedMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserIds,\n} from './notifyListener';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\n\nexport async function getMentions(message: IMessage): Promise<{ toAll: boolean; toHere: boolean; mentionIds: string[] }> {\n\tconst {\n\t\tmentions,\n\t\tu: { _id: senderId },\n\t} = message;\n\n\tif (!mentions) {\n\t\treturn {\n\t\t\ttoAll: false,\n\t\t\ttoHere: false,\n\t\t\tmentionIds: [],\n\t\t};\n\t}\n\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\n\tconst teamsMentions = mentions.filter((mention) => mention.type === 'team');\n\tconst filteredMentions = mentions\n\t\t.filter((mention) => !mention.type || mention.type === 'user')\n\t\t.filter(({ _id }) => _id !== senderId && !['all', 'here'].includes(_id))\n\t\t.map(({ _id }) => _id);\n\n\tconst mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, teamsMentions);\n\n\treturn {\n\t\ttoAll,\n\t\ttoHere,\n\t\tmentionIds,\n\t};\n}\n\ntype UnreadCountType = 'all_messages' | 'user_mentions_only' | 'group_mentions_only' | 'user_and_group_mentions_only';\n\nconst getGroupMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'user_mentions_only'>): number => {\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n};\n\nconst getUserMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'group_mentions_only'>): number => {\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n};\n\nexport const getUserIdsFromHighlights = async (rid: IRoom['_id'], message: IMessage): Promise<string[]> => {\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst subs = await Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).toArray();\n\n\treturn subs\n\t\t.filter(\n\t\t\t({ userHighlights, u: { _id: uid } }) => userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id,\n\t\t)\n\t\t.map(({ u: { _id: uid } }) => uid);\n};\n\nconst getUnreadSettingCount = (roomType: RoomType): UnreadCountType => {\n\tlet unreadSetting = 'Unread_Count';\n\tswitch (roomType) {\n\t\tcase 'd': {\n\t\t\tunreadSetting = 'Unread_Count_DM';\n\t\t\tbreak;\n\t\t}\n\t\tcase 'l': {\n\t\t\tunreadSetting = 'Unread_Count_Omni';\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn settings.get(unreadSetting);\n};\n\nasync function updateUsersSubscriptions(message: IMessage, room: IRoom): Promise<void> {\n\tif (!room || message.tmid) {\n\t\treturn;\n\t}\n\n\tconst [mentions, highlightIds] = await Promise.all([getMentions(message), getUserIdsFromHighlights(room._id, message)]);\n\n\tconst { toAll, toHere, mentionIds } = mentions;\n\tconst userIds = [...new Set([...mentionIds, ...highlightIds])];\n\tconst unreadCount = getUnreadSettingCount(room.t);\n\n\tconst userMentionInc = getUserMentions(room.t, unreadCount as Exclude<UnreadCountType, 'group_mentions_only'>);\n\tconst groupMentionInc = getGroupMentions(room.t, unreadCount as Exclude<UnreadCountType, 'user_mentions_only'>);\n\n\tvoid Subscriptions.findByRoomIdAndNotAlertOrOpenExcludingUserIds({\n\t\troomId: room._id,\n\t\tuidsExclude: [message.u._id],\n\t\tuidsInclude: userIds,\n\t\tonlyRead: !toAll && !toHere && unreadCount !== 'all_messages',\n\t}).forEach((sub) => {\n\t\tconst hasUserMention = userIds.includes(sub.u._id);\n\t\tconst shouldIncUnread = hasUserMention || toAll || toHere || unreadCount === 'all_messages';\n\t\tvoid notifyOnSubscriptionChanged(\n\t\t\t{\n\t\t\t\t...sub,\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t\t...(shouldIncUnread && { unread: sub.unread + 1 }),\n\t\t\t\t...(hasUserMention && { userMentions: sub.userMentions + 1 }),\n\t\t\t\t...((toAll || toHere) && { groupMentions: sub.groupMentions + 1 }),\n\t\t\t},\n\t\t\t'updated',\n\t\t);\n\t});\n\n\t// Give priority to user mentions over group mentions\n\tif (userIds.length) {\n\t\tawait Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, userIds, 1, userMentionInc);\n\t} else if (toAll || toHere) {\n\t\tawait Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, groupMentionInc);\n\t}\n\n\tif (!toAll && !toHere && unreadCount === 'all_messages') {\n\t\tawait Subscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id], 1);\n\t}\n\n\t// update subscriptions of other members of the room\n\tawait Promise.all([\n\t\tSubscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id),\n\t\tSubscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id),\n\t]);\n\n\t// update subscription of the message sender\n\tawait Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tconst setAsReadResponse = await Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tif (setAsReadResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(message.rid, message.u._id);\n\t}\n}\n\nexport async function updateThreadUsersSubscriptions(message: IMessage, replies: IUser['_id'][]): Promise<void> {\n\t// Don't increase unread counter on thread messages\n\tconst repliesPlusSender = [...new Set([message.u._id, ...replies])];\n\n\tconst responses = await Promise.all([\n\t\tSubscriptions.setAlertForRoomIdAndUserIds(message.rid, replies),\n\t\tSubscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender),\n\t\tSubscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date()),\n\t]);\n\n\tresponses.some((response) => response?.modifiedCount) &&\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserIds(message.rid, repliesPlusSender);\n}\n\nexport async function notifyUsersOnMessage(message: IMessage, room: IRoom, roomUpdater: Updater<IRoom>): Promise<IMessage> {\n\t// Skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n\tif (isEditedMessage(message)) {\n\t\tif (Math.abs(moment(message.editedAt).diff(Date.now())) > 60000) {\n\t\t\t// TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n\t\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\t\treturn message;\n\t\t}\n\n\t\t// Only updates last message if it was edited (skip rest of callback)\n\t\tif (\n\t\t\tsettings.get('Store_Last_Message') &&\n\t\t\t(!message.tmid || message.tshow) &&\n\t\t\t(!room.lastMessage || room.lastMessage._id === message._id)\n\t\t) {\n\t\t\tRooms.getLastMessageUpdateQuery(message, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(Date.now())) > 60000) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// If message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n\tif (message.tmid && !message.tshow) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// Update all the room activity tracker fields\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\nexport async function notifyUsersOnSystemMessage(message: IMessage, room: IRoom): Promise<IMessage> {\n\tconst roomUpdater = Rooms.getUpdater();\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\n\tif (roomUpdater.hasChanges()) {\n\t\tawait Rooms.updateFromUpdater({ _id: room._id }, roomUpdater);\n\t}\n\n\t// TODO: Rewrite to use just needed calls from the function\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!roomUpdater) {\n\t\t\treturn message;\n\t\t}\n\n\t\tawait notifyUsersOnMessage(message, room, roomUpdater);\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.MEDIUM,\n\t'notifyUsersOnMessage',\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyUsersOnMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/lib/notifyUsersOnMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/notifyUsersOnMessage.ts","sourceRoot":"","sources":["app/lib/server/lib/notifyUsersOnMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { isEditedMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserIds,\n} from './notifyListener';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\n\nexport async function getMentions(message: IMessage): Promise<{ toAll: boolean; toHere: boolean; mentionIds: string[] }> {\n\tconst {\n\t\tmentions,\n\t\tu: { _id: senderId },\n\t} = message;\n\n\tif (!mentions) {\n\t\treturn {\n\t\t\ttoAll: false,\n\t\t\ttoHere: false,\n\t\t\tmentionIds: [],\n\t\t};\n\t}\n\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\n\tconst teamsMentions = mentions.filter((mention) => mention.type === 'team');\n\tconst filteredMentions = mentions\n\t\t.filter((mention) => !mention.type || mention.type === 'user')\n\t\t.filter(({ _id }) => _id !== senderId && !['all', 'here'].includes(_id))\n\t\t.map(({ _id }) => _id);\n\n\tconst mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, teamsMentions);\n\n\treturn {\n\t\ttoAll,\n\t\ttoHere,\n\t\tmentionIds,\n\t};\n}\n\ntype UnreadCountType = 'all_messages' | 'user_mentions_only' | 'group_mentions_only' | 'user_and_group_mentions_only';\n\nconst getGroupMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'user_mentions_only'>): number => {\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n};\n\nconst getUserMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'group_mentions_only'>): number => {\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n};\n\nexport const getUserIdsFromHighlights = async (rid: IRoom['_id'], message: IMessage): Promise<string[]> => {\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst subs = await Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).toArray();\n\n\treturn subs\n\t\t.filter(\n\t\t\t({ userHighlights, u: { _id: uid } }) => userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id,\n\t\t)\n\t\t.map(({ u: { _id: uid } }) => uid);\n};\n\nconst getUnreadSettingCount = (roomType: RoomType): UnreadCountType => {\n\tlet unreadSetting = 'Unread_Count';\n\tswitch (roomType) {\n\t\tcase 'd': {\n\t\t\tunreadSetting = 'Unread_Count_DM';\n\t\t\tbreak;\n\t\t}\n\t\tcase 'l': {\n\t\t\tunreadSetting = 'Unread_Count_Omni';\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn settings.get(unreadSetting);\n};\n\nasync function updateUsersSubscriptions(message: IMessage, room: IRoom): Promise<void> {\n\tif (!room || message.tmid) {\n\t\treturn;\n\t}\n\n\tconst [mentions, highlightIds] = await Promise.all([getMentions(message), getUserIdsFromHighlights(room._id, message)]);\n\n\tconst { toAll, toHere, mentionIds } = mentions;\n\tconst userIds = [...new Set([...mentionIds, ...highlightIds])];\n\tconst unreadCount = getUnreadSettingCount(room.t);\n\n\tconst userMentionInc = getUserMentions(room.t, unreadCount as Exclude<UnreadCountType, 'group_mentions_only'>);\n\tconst groupMentionInc = getGroupMentions(room.t, unreadCount as Exclude<UnreadCountType, 'user_mentions_only'>);\n\n\tvoid Subscriptions.findByRoomIdAndNotAlertOrOpenExcludingUserIds({\n\t\troomId: room._id,\n\t\tuidsExclude: [message.u._id],\n\t\tuidsInclude: userIds,\n\t\tonlyRead: !toAll && !toHere && unreadCount !== 'all_messages',\n\t}).forEach((sub) => {\n\t\tconst hasUserMention = userIds.includes(sub.u._id);\n\t\tconst shouldIncUnread = hasUserMention || toAll || toHere || unreadCount === 'all_messages';\n\t\tvoid notifyOnSubscriptionChanged(\n\t\t\t{\n\t\t\t\t...sub,\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t\t...(shouldIncUnread && { unread: sub.unread + 1 }),\n\t\t\t\t...(hasUserMention && { userMentions: sub.userMentions + 1 }),\n\t\t\t\t...((toAll || toHere) && { groupMentions: sub.groupMentions + 1 }),\n\t\t\t},\n\t\t\t'updated',\n\t\t);\n\t});\n\n\t// Give priority to user mentions over group mentions\n\tif (userIds.length) {\n\t\tawait Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, userIds, 1, userMentionInc);\n\t} else if (toAll || toHere) {\n\t\tawait Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, groupMentionInc);\n\t}\n\n\tif (!toAll && !toHere && unreadCount === 'all_messages') {\n\t\tawait Subscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id], 1);\n\t}\n\n\t// update subscriptions of other members of the room\n\tawait Promise.all([\n\t\tSubscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id),\n\t\tSubscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id),\n\t]);\n\n\t// update subscription of the message sender\n\tawait Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tconst setAsReadResponse = await Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tif (setAsReadResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(message.rid, message.u._id);\n\t}\n}\n\nexport async function updateThreadUsersSubscriptions(message: IMessage, replies: IUser['_id'][]): Promise<void> {\n\t// Don't increase unread counter on thread messages\n\tconst repliesPlusSender = [...new Set([message.u._id, ...replies])];\n\n\tconst responses = await Promise.all([\n\t\tSubscriptions.setAlertForRoomIdAndUserIds(message.rid, replies),\n\t\tSubscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender),\n\t\tSubscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date()),\n\t]);\n\n\tresponses.some((response) => response?.modifiedCount) &&\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserIds(message.rid, repliesPlusSender);\n}\n\nexport async function notifyUsersOnMessage(message: IMessage, room: IRoom, roomUpdater: Updater<IRoom>): Promise<IMessage> {\n\t// Skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n\tif (isEditedMessage(message)) {\n\t\tif (Math.abs(moment(message.editedAt).diff(Date.now())) > 60000) {\n\t\t\t// TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n\t\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\t\treturn message;\n\t\t}\n\n\t\t// Only updates last message if it was edited (skip rest of callback)\n\t\tif (\n\t\t\tsettings.get('Store_Last_Message') &&\n\t\t\t(!message.tmid || message.tshow) &&\n\t\t\t(!room.lastMessage || room.lastMessage._id === message._id)\n\t\t) {\n\t\t\tRooms.getLastMessageUpdateQuery(message, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(Date.now())) > 60000) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// If message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n\tif (message.tmid && !message.tshow) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// Update all the room activity tracker fields\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\nexport async function notifyUsersOnSystemMessage(message: IMessage, room: IRoom): Promise<IMessage> {\n\tconst roomUpdater = Rooms.getUpdater();\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\n\tif (roomUpdater.hasChanges()) {\n\t\tawait Rooms.updateFromUpdater({ _id: room._id }, roomUpdater);\n\t}\n\n\t// TODO: Rewrite to use just needed calls from the function\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!roomUpdater) {\n\t\t\treturn message;\n\t\t}\n\n\t\tawait notifyUsersOnMessage(message, room, roomUpdater);\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.MEDIUM,\n\t'notifyUsersOnMessage',\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      getMentions: () => getMentions,\n      getUserIdsFromHighlights: () => getUserIdsFromHighlights,\n      updateThreadUsersSubscriptions: () => updateThreadUsersSubscriptions,\n      notifyUsersOnMessage: () => notifyUsersOnMessage,\n      notifyUsersOnSystemMessage: () => notifyUsersOnSystemMessage\n    });\n    let isEditedMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      }\n    }, 0);\n    let Subscriptions, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let notifyOnSubscriptionChanged, notifyOnSubscriptionChangedByRoomIdAndUserId, notifyOnSubscriptionChangedByRoomIdAndUserIds;\n    module.link(\"./notifyListener\", {\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      },\n      notifyOnSubscriptionChangedByRoomIdAndUserId(v) {\n        notifyOnSubscriptionChangedByRoomIdAndUserId = v;\n      },\n      notifyOnSubscriptionChangedByRoomIdAndUserIds(v) {\n        notifyOnSubscriptionChangedByRoomIdAndUserIds = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let messageContainsHighlight;\n    module.link(\"../functions/notifications/messageContainsHighlight\", {\n      messageContainsHighlight(v) {\n        messageContainsHighlight = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function getMentions(message) {\n      const {\n        mentions,\n        u: {\n          _id: senderId\n        }\n      } = message;\n      if (!mentions) {\n        return {\n          toAll: false,\n          toHere: false,\n          mentionIds: []\n        };\n      }\n      const toAll = mentions.some(_ref => {\n        let {\n          _id\n        } = _ref;\n        return _id === 'all';\n      });\n      const toHere = mentions.some(_ref2 => {\n        let {\n          _id\n        } = _ref2;\n        return _id === 'here';\n      });\n      const teamsMentions = mentions.filter(mention => mention.type === 'team');\n      const filteredMentions = mentions.filter(mention => !mention.type || mention.type === 'user').filter(_ref3 => {\n        let {\n          _id\n        } = _ref3;\n        return _id !== senderId && !['all', 'here'].includes(_id);\n      }).map(_ref4 => {\n        let {\n          _id\n        } = _ref4;\n        return _id;\n      });\n      const mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, teamsMentions);\n      return {\n        toAll,\n        toHere,\n        mentionIds\n      };\n    }\n    const getGroupMentions = (roomType, unreadCount) => {\n      const incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n      return roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n    };\n    const getUserMentions = (roomType, unreadCount) => {\n      const incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n      return roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n    };\n    const getUserIdsFromHighlights = async (rid, message) => {\n      const highlightOptions = {\n        projection: {\n          'userHighlights': 1,\n          'u._id': 1\n        }\n      };\n      const subs = await Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).toArray();\n      return subs.filter(_ref5 => {\n        let {\n          userHighlights,\n          u: {\n            _id: uid\n          }\n        } = _ref5;\n        return userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id;\n      }).map(_ref6 => {\n        let {\n          u: {\n            _id: uid\n          }\n        } = _ref6;\n        return uid;\n      });\n    };\n    const getUnreadSettingCount = roomType => {\n      let unreadSetting = 'Unread_Count';\n      switch (roomType) {\n        case 'd':\n          {\n            unreadSetting = 'Unread_Count_DM';\n            break;\n          }\n        case 'l':\n          {\n            unreadSetting = 'Unread_Count_Omni';\n            break;\n          }\n      }\n      return settings.get(unreadSetting);\n    };\n    async function updateUsersSubscriptions(message, room) {\n      if (!room || message.tmid) {\n        return;\n      }\n      const [mentions, highlightIds] = await Promise.all([getMentions(message), getUserIdsFromHighlights(room._id, message)]);\n      const {\n        toAll,\n        toHere,\n        mentionIds\n      } = mentions;\n      const userIds = [...new Set([...mentionIds, ...highlightIds])];\n      const unreadCount = getUnreadSettingCount(room.t);\n      const userMentionInc = getUserMentions(room.t, unreadCount);\n      const groupMentionInc = getGroupMentions(room.t, unreadCount);\n      void Subscriptions.findByRoomIdAndNotAlertOrOpenExcludingUserIds({\n        roomId: room._id,\n        uidsExclude: [message.u._id],\n        uidsInclude: userIds,\n        onlyRead: !toAll && !toHere && unreadCount !== 'all_messages'\n      }).forEach(sub => {\n        const hasUserMention = userIds.includes(sub.u._id);\n        const shouldIncUnread = hasUserMention || toAll || toHere || unreadCount === 'all_messages';\n        void notifyOnSubscriptionChanged(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, sub), {}, {\n          alert: true,\n          open: true\n        }, shouldIncUnread && {\n          unread: sub.unread + 1\n        }), hasUserMention && {\n          userMentions: sub.userMentions + 1\n        }), (toAll || toHere) && {\n          groupMentions: sub.groupMentions + 1\n        }), 'updated');\n      });\n      // Give priority to user mentions over group mentions\n      if (userIds.length) {\n        await Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, userIds, 1, userMentionInc);\n      } else if (toAll || toHere) {\n        await Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, groupMentionInc);\n      }\n      if (!toAll && !toHere && unreadCount === 'all_messages') {\n        await Subscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id], 1);\n      }\n      // update subscriptions of other members of the room\n      await Promise.all([Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id), Subscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id)]);\n      // update subscription of the message sender\n      await Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n      const setAsReadResponse = await Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n      if (setAsReadResponse.modifiedCount) {\n        void notifyOnSubscriptionChangedByRoomIdAndUserId(message.rid, message.u._id);\n      }\n    }\n    async function updateThreadUsersSubscriptions(message, replies) {\n      // Don't increase unread counter on thread messages\n      const repliesPlusSender = [...new Set([message.u._id, ...replies])];\n      const responses = await Promise.all([Subscriptions.setAlertForRoomIdAndUserIds(message.rid, replies), Subscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender), Subscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date())]);\n      responses.some(response => response === null || response === void 0 ? void 0 : response.modifiedCount) && void notifyOnSubscriptionChangedByRoomIdAndUserIds(message.rid, repliesPlusSender);\n    }\n    async function notifyUsersOnMessage(message, room, roomUpdater) {\n      // Skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n      if (isEditedMessage(message)) {\n        if (Math.abs(moment(message.editedAt).diff(Date.now())) > 60000) {\n          // TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n          Rooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n          return message;\n        }\n        // Only updates last message if it was edited (skip rest of callback)\n        if (settings.get('Store_Last_Message') && (!message.tmid || message.tshow) && (!room.lastMessage || room.lastMessage._id === message._id)) {\n          Rooms.getLastMessageUpdateQuery(message, roomUpdater);\n        }\n        return message;\n      }\n      if (message.ts && Math.abs(moment(message.ts).diff(Date.now())) > 60000) {\n        Rooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n        return message;\n      }\n      // If message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n      if (message.tmid && !message.tshow) {\n        Rooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n        return message;\n      }\n      // Update all the room activity tracker fields\n      Rooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n      await updateUsersSubscriptions(message, room);\n      return message;\n    }\n    async function notifyUsersOnSystemMessage(message, room) {\n      const roomUpdater = Rooms.getUpdater();\n      Rooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n      if (roomUpdater.hasChanges()) {\n        await Rooms.updateFromUpdater({\n          _id: room._id\n        }, roomUpdater);\n      }\n      // TODO: Rewrite to use just needed calls from the function\n      await updateUsersSubscriptions(message, room);\n      return message;\n    }\n    callbacks.add('afterSaveMessage', async (message, _ref7) => {\n      let {\n        room,\n        roomUpdater\n      } = _ref7;\n      if (!roomUpdater) {\n        return message;\n      }\n      await notifyUsersOnMessage(message, room, roomUpdater);\n      return message;\n    }, callbacks.priority.MEDIUM, 'notifyUsersOnMessage');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","getMentions","getUserIdsFromHighlights","updateThreadUsersSubscriptions","notifyUsersOnMessage","notifyUsersOnSystemMessage","isEditedMessage","Subscriptions","Rooms","moment","notifyOnSubscriptionChanged","notifyOnSubscriptionChangedByRoomIdAndUserId","notifyOnSubscriptionChangedByRoomIdAndUserIds","callbacks","settings","messageContainsHighlight","__reifyWaitForDeps__","message","mentions","u","_id","senderId","toAll","toHere","mentionIds","some","_ref","_ref2","teamsMentions","filter","mention","type","filteredMentions","_ref3","includes","map","_ref4","run","getGroupMentions","roomType","unreadCount","incUnreadByGroup","getUserMentions","incUnreadByUser","rid","highlightOptions","projection","subs","findByRoomWithUserHighlights","toArray","_ref5","userHighlights","uid","_ref6","getUnreadSettingCount","unreadSetting","get","updateUsersSubscriptions","room","tmid","highlightIds","Promise","all","userIds","Set","t","userMentionInc","groupMentionInc","findByRoomIdAndNotAlertOrOpenExcludingUserIds","roomId","uidsExclude","uidsInclude","onlyRead","forEach","sub","hasUserMention","shouldIncUnread","alert","open","unread","userMentions","groupMentions","length","incUserMentionsAndUnreadForRoomIdAndUserIds","incGroupMentionsAndUnreadForRoomIdExcludingUserId","incUnreadForRoomIdExcludingUserIds","setAlertForRoomIdExcludingUserId","setOpenForRoomIdExcludingUserId","setAsReadByRoomIdAndUserId","setAsReadResponse","modifiedCount","replies","repliesPlusSender","responses","setAlertForRoomIdAndUserIds","setOpenForRoomIdAndUserIds","setLastReplyForRoomIdAndUserIds","Date","response","roomUpdater","Math","abs","editedAt","diff","now","getIncMsgCountUpdateQuery","tshow","lastMessage","getLastMessageUpdateQuery","ts","setIncMsgCountAndSetLastMessageUpdateQuery","getUpdater","hasChanges","updateFromUpdater","add","_ref7","priority","MEDIUM","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/lib/notifyUsersOnMessage.ts"],"sourcesContent":["import type { IMessage, IRoom, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { isEditedMessage } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserIds,\n} from './notifyListener';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\n\nexport async function getMentions(message: IMessage): Promise<{ toAll: boolean; toHere: boolean; mentionIds: string[] }> {\n\tconst {\n\t\tmentions,\n\t\tu: { _id: senderId },\n\t} = message;\n\n\tif (!mentions) {\n\t\treturn {\n\t\t\ttoAll: false,\n\t\t\ttoHere: false,\n\t\t\tmentionIds: [],\n\t\t};\n\t}\n\n\tconst toAll = mentions.some(({ _id }) => _id === 'all');\n\tconst toHere = mentions.some(({ _id }) => _id === 'here');\n\n\tconst teamsMentions = mentions.filter((mention) => mention.type === 'team');\n\tconst filteredMentions = mentions\n\t\t.filter((mention) => !mention.type || mention.type === 'user')\n\t\t.filter(({ _id }) => _id !== senderId && !['all', 'here'].includes(_id))\n\t\t.map(({ _id }) => _id);\n\n\tconst mentionIds = await callbacks.run('beforeGetMentions', filteredMentions, teamsMentions);\n\n\treturn {\n\t\ttoAll,\n\t\ttoHere,\n\t\tmentionIds,\n\t};\n}\n\ntype UnreadCountType = 'all_messages' | 'user_mentions_only' | 'group_mentions_only' | 'user_and_group_mentions_only';\n\nconst getGroupMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'user_mentions_only'>): number => {\n\tconst incUnreadByGroup = ['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByGroup ? 1 : 0;\n};\n\nconst getUserMentions = (roomType: RoomType, unreadCount: Exclude<UnreadCountType, 'group_mentions_only'>): number => {\n\tconst incUnreadByUser = ['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount);\n\treturn roomType === 'd' || roomType === 'l' || incUnreadByUser ? 1 : 0;\n};\n\nexport const getUserIdsFromHighlights = async (rid: IRoom['_id'], message: IMessage): Promise<string[]> => {\n\tconst highlightOptions = { projection: { 'userHighlights': 1, 'u._id': 1 } };\n\tconst subs = await Subscriptions.findByRoomWithUserHighlights(rid, highlightOptions).toArray();\n\n\treturn subs\n\t\t.filter(\n\t\t\t({ userHighlights, u: { _id: uid } }) => userHighlights && messageContainsHighlight(message, userHighlights) && uid !== message.u._id,\n\t\t)\n\t\t.map(({ u: { _id: uid } }) => uid);\n};\n\nconst getUnreadSettingCount = (roomType: RoomType): UnreadCountType => {\n\tlet unreadSetting = 'Unread_Count';\n\tswitch (roomType) {\n\t\tcase 'd': {\n\t\t\tunreadSetting = 'Unread_Count_DM';\n\t\t\tbreak;\n\t\t}\n\t\tcase 'l': {\n\t\t\tunreadSetting = 'Unread_Count_Omni';\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn settings.get(unreadSetting);\n};\n\nasync function updateUsersSubscriptions(message: IMessage, room: IRoom): Promise<void> {\n\tif (!room || message.tmid) {\n\t\treturn;\n\t}\n\n\tconst [mentions, highlightIds] = await Promise.all([getMentions(message), getUserIdsFromHighlights(room._id, message)]);\n\n\tconst { toAll, toHere, mentionIds } = mentions;\n\tconst userIds = [...new Set([...mentionIds, ...highlightIds])];\n\tconst unreadCount = getUnreadSettingCount(room.t);\n\n\tconst userMentionInc = getUserMentions(room.t, unreadCount as Exclude<UnreadCountType, 'group_mentions_only'>);\n\tconst groupMentionInc = getGroupMentions(room.t, unreadCount as Exclude<UnreadCountType, 'user_mentions_only'>);\n\n\tvoid Subscriptions.findByRoomIdAndNotAlertOrOpenExcludingUserIds({\n\t\troomId: room._id,\n\t\tuidsExclude: [message.u._id],\n\t\tuidsInclude: userIds,\n\t\tonlyRead: !toAll && !toHere && unreadCount !== 'all_messages',\n\t}).forEach((sub) => {\n\t\tconst hasUserMention = userIds.includes(sub.u._id);\n\t\tconst shouldIncUnread = hasUserMention || toAll || toHere || unreadCount === 'all_messages';\n\t\tvoid notifyOnSubscriptionChanged(\n\t\t\t{\n\t\t\t\t...sub,\n\t\t\t\talert: true,\n\t\t\t\topen: true,\n\t\t\t\t...(shouldIncUnread && { unread: sub.unread + 1 }),\n\t\t\t\t...(hasUserMention && { userMentions: sub.userMentions + 1 }),\n\t\t\t\t...((toAll || toHere) && { groupMentions: sub.groupMentions + 1 }),\n\t\t\t},\n\t\t\t'updated',\n\t\t);\n\t});\n\n\t// Give priority to user mentions over group mentions\n\tif (userIds.length) {\n\t\tawait Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, userIds, 1, userMentionInc);\n\t} else if (toAll || toHere) {\n\t\tawait Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, groupMentionInc);\n\t}\n\n\tif (!toAll && !toHere && unreadCount === 'all_messages') {\n\t\tawait Subscriptions.incUnreadForRoomIdExcludingUserIds(room._id, [...userIds, message.u._id], 1);\n\t}\n\n\t// update subscriptions of other members of the room\n\tawait Promise.all([\n\t\tSubscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id),\n\t\tSubscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id),\n\t]);\n\n\t// update subscription of the message sender\n\tawait Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tconst setAsReadResponse = await Subscriptions.setAsReadByRoomIdAndUserId(message.rid, message.u._id);\n\tif (setAsReadResponse.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(message.rid, message.u._id);\n\t}\n}\n\nexport async function updateThreadUsersSubscriptions(message: IMessage, replies: IUser['_id'][]): Promise<void> {\n\t// Don't increase unread counter on thread messages\n\tconst repliesPlusSender = [...new Set([message.u._id, ...replies])];\n\n\tconst responses = await Promise.all([\n\t\tSubscriptions.setAlertForRoomIdAndUserIds(message.rid, replies),\n\t\tSubscriptions.setOpenForRoomIdAndUserIds(message.rid, repliesPlusSender),\n\t\tSubscriptions.setLastReplyForRoomIdAndUserIds(message.rid, repliesPlusSender, new Date()),\n\t]);\n\n\tresponses.some((response) => response?.modifiedCount) &&\n\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserIds(message.rid, repliesPlusSender);\n}\n\nexport async function notifyUsersOnMessage(message: IMessage, room: IRoom, roomUpdater: Updater<IRoom>): Promise<IMessage> {\n\t// Skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)\n\tif (isEditedMessage(message)) {\n\t\tif (Math.abs(moment(message.editedAt).diff(Date.now())) > 60000) {\n\t\t\t// TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback\n\t\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\t\treturn message;\n\t\t}\n\n\t\t// Only updates last message if it was edited (skip rest of callback)\n\t\tif (\n\t\t\tsettings.get('Store_Last_Message') &&\n\t\t\t(!message.tmid || message.tshow) &&\n\t\t\t(!room.lastMessage || room.lastMessage._id === message._id)\n\t\t) {\n\t\t\tRooms.getLastMessageUpdateQuery(message, roomUpdater);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(Date.now())) > 60000) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// If message sent ONLY on a thread, skips the rest as it is done on a callback specific to threads\n\tif (message.tmid && !message.tshow) {\n\t\tRooms.getIncMsgCountUpdateQuery(1, roomUpdater);\n\t\treturn message;\n\t}\n\n\t// Update all the room activity tracker fields\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\nexport async function notifyUsersOnSystemMessage(message: IMessage, room: IRoom): Promise<IMessage> {\n\tconst roomUpdater = Rooms.getUpdater();\n\tRooms.setIncMsgCountAndSetLastMessageUpdateQuery(1, message, !!settings.get('Store_Last_Message'), roomUpdater);\n\n\tif (roomUpdater.hasChanges()) {\n\t\tawait Rooms.updateFromUpdater({ _id: room._id }, roomUpdater);\n\t}\n\n\t// TODO: Rewrite to use just needed calls from the function\n\tawait updateUsersSubscriptions(message, room);\n\n\treturn message;\n}\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room, roomUpdater }) => {\n\t\tif (!roomUpdater) {\n\t\t\treturn message;\n\t\t}\n\n\t\tawait notifyUsersOnMessage(message, room, roomUpdater);\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.MEDIUM,\n\t'notifyUsersOnMessage',\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"86a195a30af7b9e5f249e70f489c95c9c7e1d9c5"}
