{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/subscriptions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/subscriptions.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/subscriptions.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/subscriptions.ts","sourceRoot":"","sources":["app/api/server/v1/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriptions } from '@rocket.chat/models';\nimport {\n\tisSubscriptionsGetProps,\n\tisSubscriptionsGetOneProps,\n\tisSubscriptionsReadProps,\n\tisSubscriptionsUnreadProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { readMessages } from '../../../../server/lib/readMessages';\nimport { API } from '../api';\n\nAPI.v1.addRoute(\n\t'subscriptions.get',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate: Date | undefined;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince as string))) {\n\t\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t\t}\n\t\t\t\tupdatedSinceDate = new Date(updatedSince as string);\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tArray.isArray(result)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tupdate: result,\n\t\t\t\t\t\t\tremove: [],\n\t\t\t\t\t\t}\n\t\t\t\t\t: result,\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetOneProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tsubscription: await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n/**\n  This API is suppose to mark any room as read.\n\n\tMethod: POST\n\tRoute: api/v1/subscriptions.read\n\tParams:\n\t\t- rid: The rid of the room to be marked as read.\n\t\t- roomId: Alternative for rid.\n */\nAPI.v1.addRoute(\n\t'subscriptions.read',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsReadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { readThreads = false } = this.bodyParams;\n\t\t\tconst roomId = 'rid' in this.bodyParams ? this.bodyParams.rid : this.bodyParams.roomId;\n\n\t\t\tawait readMessages(roomId, this.userId, readThreads);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.unread',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsUnreadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tawait Meteor.callAsync('unreadMessages', (this.bodyParams as any).firstUnreadMessage, (this.bodyParams as any).roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/subscriptions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/subscriptions.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/subscriptions.ts","sourceRoot":"","sources":["app/api/server/v1/subscriptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subscriptions } from '@rocket.chat/models';\nimport {\n\tisSubscriptionsGetProps,\n\tisSubscriptionsGetOneProps,\n\tisSubscriptionsReadProps,\n\tisSubscriptionsUnreadProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { readMessages } from '../../../../server/lib/readMessages';\nimport { API } from '../api';\n\nAPI.v1.addRoute(\n\t'subscriptions.get',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate: Date | undefined;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince as string))) {\n\t\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t\t}\n\t\t\t\tupdatedSinceDate = new Date(updatedSince as string);\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tArray.isArray(result)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tupdate: result,\n\t\t\t\t\t\t\tremove: [],\n\t\t\t\t\t\t}\n\t\t\t\t\t: result,\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetOneProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tsubscription: await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n/**\n  This API is suppose to mark any room as read.\n\n\tMethod: POST\n\tRoute: api/v1/subscriptions.read\n\tParams:\n\t\t- rid: The rid of the room to be marked as read.\n\t\t- roomId: Alternative for rid.\n */\nAPI.v1.addRoute(\n\t'subscriptions.read',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsReadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { readThreads = false } = this.bodyParams;\n\t\t\tconst roomId = 'rid' in this.bodyParams ? this.bodyParams.rid : this.bodyParams.roomId;\n\n\t\t\tawait readMessages(roomId, this.userId, readThreads);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.unread',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsUnreadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tawait Meteor.callAsync('unreadMessages', (this.bodyParams as any).firstUnreadMessage, (this.bodyParams as any).roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 0);\n    let isSubscriptionsGetProps, isSubscriptionsGetOneProps, isSubscriptionsReadProps, isSubscriptionsUnreadProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isSubscriptionsGetProps(v) {\n        isSubscriptionsGetProps = v;\n      },\n      isSubscriptionsGetOneProps(v) {\n        isSubscriptionsGetOneProps = v;\n      },\n      isSubscriptionsReadProps(v) {\n        isSubscriptionsReadProps = v;\n      },\n      isSubscriptionsUnreadProps(v) {\n        isSubscriptionsUnreadProps = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let readMessages;\n    module.link(\"../../../../server/lib/readMessages\", {\n      readMessages(v) {\n        readMessages = v;\n      }\n    }, 3);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('subscriptions.get', {\n      authRequired: true,\n      validateParams: isSubscriptionsGetProps\n    }, {\n      async get() {\n        const {\n          updatedSince\n        } = this.queryParams;\n        let updatedSinceDate;\n        if (updatedSince) {\n          if (isNaN(Date.parse(updatedSince))) {\n            throw new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n          }\n          updatedSinceDate = new Date(updatedSince);\n        }\n        const result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n        return API.v1.success(Array.isArray(result) ? {\n          update: result,\n          remove: []\n        } : result);\n      }\n    });\n    API.v1.addRoute('subscriptions.getOne', {\n      authRequired: true,\n      validateParams: isSubscriptionsGetOneProps\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        if (!roomId) {\n          return API.v1.failure(\"The 'roomId' param is required\");\n        }\n        return API.v1.success({\n          subscription: await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId)\n        });\n      }\n    });\n    /**\n      This API is suppose to mark any room as read.\n    \n        Method: POST\n        Route: api/v1/subscriptions.read\n        Params:\n            - rid: The rid of the room to be marked as read.\n            - roomId: Alternative for rid.\n     */\n    API.v1.addRoute('subscriptions.read', {\n      authRequired: true,\n      validateParams: isSubscriptionsReadProps\n    }, {\n      async post() {\n        const {\n          readThreads = false\n        } = this.bodyParams;\n        const roomId = 'rid' in this.bodyParams ? this.bodyParams.rid : this.bodyParams.roomId;\n        await readMessages(roomId, this.userId, readThreads);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('subscriptions.unread', {\n      authRequired: true,\n      validateParams: isSubscriptionsUnreadProps\n    }, {\n      async post() {\n        await Meteor.callAsync('unreadMessages', this.bodyParams.firstUnreadMessage, this.bodyParams.roomId);\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Subscriptions","module","link","v","isSubscriptionsGetProps","isSubscriptionsGetOneProps","isSubscriptionsReadProps","isSubscriptionsUnreadProps","Meteor","readMessages","API","__reifyWaitForDeps__","v1","addRoute","authRequired","validateParams","get","updatedSince","queryParams","updatedSinceDate","isNaN","Date","parse","Error","result","callAsync","success","Array","isArray","update","remove","roomId","failure","subscription","findOneByRoomIdAndUserId","userId","post","readThreads","bodyParams","rid","firstUnreadMessage","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/subscriptions.ts"],"sourcesContent":["import { Subscriptions } from '@rocket.chat/models';\nimport {\n\tisSubscriptionsGetProps,\n\tisSubscriptionsGetOneProps,\n\tisSubscriptionsReadProps,\n\tisSubscriptionsUnreadProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { readMessages } from '../../../../server/lib/readMessages';\nimport { API } from '../api';\n\nAPI.v1.addRoute(\n\t'subscriptions.get',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { updatedSince } = this.queryParams;\n\n\t\t\tlet updatedSinceDate: Date | undefined;\n\t\t\tif (updatedSince) {\n\t\t\t\tif (isNaN(Date.parse(updatedSince as string))) {\n\t\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t\t}\n\t\t\t\tupdatedSinceDate = new Date(updatedSince as string);\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('subscriptions/get', updatedSinceDate);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tArray.isArray(result)\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tupdate: result,\n\t\t\t\t\t\t\tremove: [],\n\t\t\t\t\t\t}\n\t\t\t\t\t: result,\n\t\t\t);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.getOne',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsGetOneProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\treturn API.v1.failure(\"The 'roomId' param is required\");\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tsubscription: await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n/**\n  This API is suppose to mark any room as read.\n\n\tMethod: POST\n\tRoute: api/v1/subscriptions.read\n\tParams:\n\t\t- rid: The rid of the room to be marked as read.\n\t\t- roomId: Alternative for rid.\n */\nAPI.v1.addRoute(\n\t'subscriptions.read',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsReadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { readThreads = false } = this.bodyParams;\n\t\t\tconst roomId = 'rid' in this.bodyParams ? this.bodyParams.rid : this.bodyParams.roomId;\n\n\t\t\tawait readMessages(roomId, this.userId, readThreads);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'subscriptions.unread',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isSubscriptionsUnreadProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tawait Meteor.callAsync('unreadMessages', (this.bodyParams as any).firstUnreadMessage, (this.bodyParams as any).roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"83345e6a44d54a58f73aeda6f86e8c555be49a7e"}
