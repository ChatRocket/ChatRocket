{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/setUserActiveStatus.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/setUserActiveStatus.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/setUserActiveStatus.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/setUserActiveStatus.ts","sourceRoot":"","sources":["app/lib/server/functions/setUserActiveStatus.ts"],"names":[],"mappings":"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","sourcesContent":["import { Federation, FederationEE, License } from '@rocket.chat/core-services';\nimport type { IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { isUserFederated, isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Users, Subscriptions, MatrixBridgedUser } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnRoomChangedByUserDM,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\nimport { closeOmnichannelConversations } from './closeOmnichannelConversations';\nimport { shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\n\nasync function reactivateDirectConversations(userId: string) {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1, t: 1 },\n\t}).toArray();\n\n\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\t\tif (isDirectMessageRoom(r)) {\n\t\t\tacc.push(...r.uids);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();\n\tconst activeUserIds = activeUsers.map((u: IUser) => u._id);\n\tconst roomsToReactivate = directConversations.reduce((acc: string[], room) => {\n\t\tconst otherUserId = isDirectMessageRoom(room) ? room.uids.find((u: string) => u !== userId) : undefined;\n\t\tif (otherUserId && activeUserIds.includes(otherUserId)) {\n\t\t\tacc.push(room._id);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\tconst setDmReadOnlyResponse = await Rooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n\tif (setDmReadOnlyResponse.modifiedCount) {\n\t\tvoid notifyOnRoomChangedById(roomsToReactivate);\n\t}\n}\n\nexport async function setUserActiveStatus(userId: string, active: boolean, confirmRelinquish = false): Promise<boolean | undefined> {\n\tcheck(userId, String);\n\tcheck(active, Boolean);\n\n\tconst user = await Users.findOneById(userId);\n\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-user-is-federated', 'Cannot change federated users status', {\n\t\t\tmethod: 'setUserActiveStatus',\n\t\t});\n\t}\n\n\tif (user.active !== active) {\n\t\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\n\t\tif (remoteUser) {\n\t\t\tif (active) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Deactivated federated users can not be re-activated', {\n\t\t\t\t\tmethod: 'setUserActiveStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst federation = (await License.hasValidLicense()) ? FederationEE : Federation;\n\n\t\t\tawait federation.deactivateRemoteUser(remoteUser);\n\t\t}\n\t}\n\n\t// Users without username can't do anything, so there is no need to check for owned rooms\n\tif (user.username != null && !active) {\n\t\tconst userAdmin = await Users.findOneAdmin(userId || '');\n\t\tconst adminsCount = await Users.countActiveUsersInRoles(['admin']);\n\t\tif (userAdmin && adminsCount === 1) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\taction: 'Remove_last_admin',\n\t\t\t});\n\t\t}\n\n\t\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\t\t// give omnichannel rooms a special treatment :)\n\t\tconst chatSubscribedRooms = subscribedRooms.filter(({ t }) => t !== 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\n\t\tif (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n\t\t\tconst rooms = await getUserSingleOwnedRooms(chatSubscribedRooms as []);\n\t\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t\t}\n\n\t\t// We don't want one killing the other :)\n\t\tawait Promise.allSettled([\n\t\t\tcloseOmnichannelConversations(user, livechatSubscribedRooms),\n\t\t\trelinquishRoomOwnerships(user._id, chatSubscribedRooms, false),\n\t\t]);\n\t}\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('beforeActivateUser', user);\n\t}\n\n\tawait Users.setUserActive(userId, active);\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('afterActivateUser', user);\n\t}\n\n\tif (!active && user.active) {\n\t\tawait callbacks.run('afterDeactivateUser', user);\n\t}\n\n\tif (user.username) {\n\t\tconst { modifiedCount } = await Subscriptions.setArchivedByUsername(user.username, !active);\n\t\tif (modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({ t: 'd', name: user.username });\n\t\t}\n\t}\n\n\tif (active === false) {\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Rooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [], active } });\n\t\tvoid notifyOnRoomChangedByUserDM(userId);\n\t} else {\n\t\tawait Users.unsetReason(userId);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { active } });\n\t\tawait reactivateDirectConversations(userId);\n\t}\n\n\tif (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n\t\treturn true;\n\t}\n\tif (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n\t\treturn true;\n\t}\n\tif (!user.emails || !Array.isArray(user.emails) || user.emails.length === 0) {\n\t\treturn true;\n\t}\n\n\tconst destinations = user.emails.map((email: IUserEmail) => `${user.name || user.username}<${email.address}>`);\n\n\ttype UserActivated = {\n\t\tsubject: (params: { active: boolean }) => string;\n\t\thtml: (params: { active: boolean; name: string; username: string }) => string;\n\t};\n\tconst { subject, html } = (Accounts.emailTemplates as unknown as { userActivated: UserActivated }).userActivated;\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),\n\t\thtml: html({\n\t\t\tactive,\n\t\t\tname: user.name,\n\t\t\tusername: user.username,\n\t\t} as any),\n\t};\n\n\tvoid Mailer.sendNoWrap(email);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/setUserActiveStatus.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/setUserActiveStatus.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/setUserActiveStatus.ts","sourceRoot":"","sources":["app/lib/server/functions/setUserActiveStatus.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAE/E,OAAO,EAAE,eAAe,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AACjF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACrF,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,KAAK,MAAM,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EACN,uBAAuB,EACvB,2BAA2B,EAC3B,4CAA4C,EAC5C,kBAAkB,GAClB,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAC;AAChF,OAAO,EAAE,yBAAyB,EAAE,oCAAoC,EAAE,MAAM,2BAA2B,CAAC;AAC5G,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEtE,KAAK,UAAU,6BAA6B,CAAC,MAAc;IAC1D,iHAAiH;IACjH,uHAAuH;IACvH,MAAM,mBAAmB,GAAG,MAAM,KAAK,CAAC,8BAA8B,CAAC,MAAM,EAAE;QAC9E,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;KACrC,CAAC,CAAC,OAAO,EAAE,CAAC;IAEb,MAAM,OAAO,GAAG,mBAAmB,CAAC,MAAM,CAAW,CAAC,GAAa,EAAE,CAAC,EAAE,EAAE;QACzE,IAAI,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5B,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC;QACD,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAC5C,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IACzG,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3D,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,IAAI,EAAE,EAAE;QAC5E,MAAM,WAAW,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACxG,IAAI,WAAW,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACxD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QACD,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,qBAAqB,GAAG,MAAM,KAAK,CAAC,qBAAqB,CAAC,MAAM,EAAE,iBAAiB,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACzG,IAAI,qBAAqB,CAAC,aAAa,EAAE,CAAC;QACzC,KAAK,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;IACjD,CAAC;AACF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,MAAc,EAAE,MAAe,EAAE,iBAAiB,GAAG,KAAK;IACnG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACtB,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEvB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAE7C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,sCAAsC,EAAE;YACzF,MAAM,EAAE,qBAAqB;SAC7B,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;QAC5B,MAAM,UAAU,GAAG,MAAM,iBAAiB,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;QAElF,IAAI,UAAU,EAAE,CAAC;YAChB,IAAI,MAAM,EAAE,CAAC;gBACZ,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,qDAAqD,EAAE;oBAClG,MAAM,EAAE,qBAAqB;iBAC7B,CAAC,CAAC;YACJ,CAAC;YAED,MAAM,UAAU,GAAG,CAAC,MAAM,OAAO,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC;YAEjF,MAAM,UAAU,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QACnD,CAAC;IACF,CAAC;IAED,yFAAyF;IACzF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QACtC,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;QACzD,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACnE,IAAI,SAAS,IAAI,WAAW,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,wDAAwD,EAAE;gBAC5G,MAAM,EAAE,oBAAoB;gBAC5B,MAAM,EAAE,mBAAmB;aAC3B,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,oCAAoC,CAAC,MAAM,CAAC,CAAC;QAC3E,gDAAgD;QAChD,MAAM,mBAAmB,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;QACzE,MAAM,uBAAuB,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;QAE7E,IAAI,yBAAyB,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC1E,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,mBAAyB,CAAC,CAAC;YACvE,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;QAED,yCAAyC;QACzC,MAAM,OAAO,CAAC,UAAU,CAAC;YACxB,6BAA6B,CAAC,IAAI,EAAE,uBAAuB,CAAC;YAC5D,wBAAwB,CAAC,IAAI,CAAC,GAAG,EAAE,mBAAmB,EAAE,KAAK,CAAC;SAC9D,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAC5B,MAAM,SAAS,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAE1C,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QAC5B,MAAM,SAAS,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;QAC5B,MAAM,SAAS,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QACnB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC;QAC5F,IAAI,aAAa,EAAE,CAAC;YACnB,KAAK,4CAA4C,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACpF,CAAC;IACF,CAAC;IAED,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;QACtB,MAAM,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,KAAK,CAAC,qBAAqB,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;QAElE,KAAK,kBAAkB,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,6BAA6B,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QACtH,KAAK,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;SAAM,CAAC;QACP,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAEhC,KAAK,kBAAkB,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QACnF,MAAM,6BAA6B,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qCAAqC,CAAC,EAAE,CAAC;QACpE,OAAO,IAAI,CAAC;IACb,CAAC;IACD,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uCAAuC,CAAC,EAAE,CAAC;QACvE,OAAO,IAAI,CAAC;IACb,CAAC;IACD,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QAC7E,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAiB,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC,CAAC;IAM/G,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAI,QAAQ,CAAC,cAA8D,CAAC,aAAa,CAAC;IACjH,MAAM,KAAK,GAAG;QACb,EAAE,EAAE,MAAM,CAAC,YAAY,CAAC;QACxB,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACxC,OAAO,EAAE,OAAO,CAAC,EAAE,MAAM,EAAS,CAAC;QACnC,IAAI,EAAE,IAAI,CAAC;YACV,MAAM;YACN,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;SAChB,CAAC;KACT,CAAC;IAEF,KAAK,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { Federation, FederationEE, License } from '@rocket.chat/core-services';\nimport type { IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { isUserFederated, isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Users, Subscriptions, MatrixBridgedUser } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnRoomChangedByUserDM,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\nimport { closeOmnichannelConversations } from './closeOmnichannelConversations';\nimport { shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\n\nasync function reactivateDirectConversations(userId: string) {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1, t: 1 },\n\t}).toArray();\n\n\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\t\tif (isDirectMessageRoom(r)) {\n\t\t\tacc.push(...r.uids);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();\n\tconst activeUserIds = activeUsers.map((u: IUser) => u._id);\n\tconst roomsToReactivate = directConversations.reduce((acc: string[], room) => {\n\t\tconst otherUserId = isDirectMessageRoom(room) ? room.uids.find((u: string) => u !== userId) : undefined;\n\t\tif (otherUserId && activeUserIds.includes(otherUserId)) {\n\t\t\tacc.push(room._id);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\tconst setDmReadOnlyResponse = await Rooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n\tif (setDmReadOnlyResponse.modifiedCount) {\n\t\tvoid notifyOnRoomChangedById(roomsToReactivate);\n\t}\n}\n\nexport async function setUserActiveStatus(userId: string, active: boolean, confirmRelinquish = false): Promise<boolean | undefined> {\n\tcheck(userId, String);\n\tcheck(active, Boolean);\n\n\tconst user = await Users.findOneById(userId);\n\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-user-is-federated', 'Cannot change federated users status', {\n\t\t\tmethod: 'setUserActiveStatus',\n\t\t});\n\t}\n\n\tif (user.active !== active) {\n\t\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\n\t\tif (remoteUser) {\n\t\t\tif (active) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Deactivated federated users can not be re-activated', {\n\t\t\t\t\tmethod: 'setUserActiveStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst federation = (await License.hasValidLicense()) ? FederationEE : Federation;\n\n\t\t\tawait federation.deactivateRemoteUser(remoteUser);\n\t\t}\n\t}\n\n\t// Users without username can't do anything, so there is no need to check for owned rooms\n\tif (user.username != null && !active) {\n\t\tconst userAdmin = await Users.findOneAdmin(userId || '');\n\t\tconst adminsCount = await Users.countActiveUsersInRoles(['admin']);\n\t\tif (userAdmin && adminsCount === 1) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\taction: 'Remove_last_admin',\n\t\t\t});\n\t\t}\n\n\t\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\t\t// give omnichannel rooms a special treatment :)\n\t\tconst chatSubscribedRooms = subscribedRooms.filter(({ t }) => t !== 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\n\t\tif (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n\t\t\tconst rooms = await getUserSingleOwnedRooms(chatSubscribedRooms as []);\n\t\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t\t}\n\n\t\t// We don't want one killing the other :)\n\t\tawait Promise.allSettled([\n\t\t\tcloseOmnichannelConversations(user, livechatSubscribedRooms),\n\t\t\trelinquishRoomOwnerships(user._id, chatSubscribedRooms, false),\n\t\t]);\n\t}\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('beforeActivateUser', user);\n\t}\n\n\tawait Users.setUserActive(userId, active);\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('afterActivateUser', user);\n\t}\n\n\tif (!active && user.active) {\n\t\tawait callbacks.run('afterDeactivateUser', user);\n\t}\n\n\tif (user.username) {\n\t\tconst { modifiedCount } = await Subscriptions.setArchivedByUsername(user.username, !active);\n\t\tif (modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({ t: 'd', name: user.username });\n\t\t}\n\t}\n\n\tif (active === false) {\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Rooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [], active } });\n\t\tvoid notifyOnRoomChangedByUserDM(userId);\n\t} else {\n\t\tawait Users.unsetReason(userId);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { active } });\n\t\tawait reactivateDirectConversations(userId);\n\t}\n\n\tif (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n\t\treturn true;\n\t}\n\tif (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n\t\treturn true;\n\t}\n\tif (!user.emails || !Array.isArray(user.emails) || user.emails.length === 0) {\n\t\treturn true;\n\t}\n\n\tconst destinations = user.emails.map((email: IUserEmail) => `${user.name || user.username}<${email.address}>`);\n\n\ttype UserActivated = {\n\t\tsubject: (params: { active: boolean }) => string;\n\t\thtml: (params: { active: boolean; name: string; username: string }) => string;\n\t};\n\tconst { subject, html } = (Accounts.emailTemplates as unknown as { userActivated: UserActivated }).userActivated;\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),\n\t\thtml: html({\n\t\t\tactive,\n\t\t\tname: user.name,\n\t\t\tusername: user.username,\n\t\t} as any),\n\t};\n\n\tvoid Mailer.sendNoWrap(email);\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      setUserActiveStatus: () => setUserActiveStatus\n    });\n    let Federation, FederationEE, License;\n    module.link(\"@rocket.chat/core-services\", {\n      Federation(v) {\n        Federation = v;\n      },\n      FederationEE(v) {\n        FederationEE = v;\n      },\n      License(v) {\n        License = v;\n      }\n    }, 0);\n    let isUserFederated, isDirectMessageRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      isUserFederated(v) {\n        isUserFederated = v;\n      },\n      isDirectMessageRoom(v) {\n        isDirectMessageRoom = v;\n      }\n    }, 1);\n    let Rooms, Users, Subscriptions, MatrixBridgedUser;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      MatrixBridgedUser(v) {\n        MatrixBridgedUser = v;\n      }\n    }, 2);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 3);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 4);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 5);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 6);\n    let Mailer;\n    module.link(\"../../../mailer/server/api\", {\n      \"*\"(v) {\n        Mailer = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let notifyOnRoomChangedById, notifyOnRoomChangedByUserDM, notifyOnSubscriptionChangedByNameAndRoomType, notifyOnUserChange;\n    module.link(\"../lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnRoomChangedByUserDM(v) {\n        notifyOnRoomChangedByUserDM = v;\n      },\n      notifyOnSubscriptionChangedByNameAndRoomType(v) {\n        notifyOnSubscriptionChangedByNameAndRoomType = v;\n      },\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 9);\n    let closeOmnichannelConversations;\n    module.link(\"./closeOmnichannelConversations\", {\n      closeOmnichannelConversations(v) {\n        closeOmnichannelConversations = v;\n      }\n    }, 10);\n    let shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails;\n    module.link(\"./getRoomsWithSingleOwner\", {\n      shouldRemoveOrChangeOwner(v) {\n        shouldRemoveOrChangeOwner = v;\n      },\n      getSubscribedRoomsForUserWithDetails(v) {\n        getSubscribedRoomsForUserWithDetails = v;\n      }\n    }, 11);\n    let getUserSingleOwnedRooms;\n    module.link(\"./getUserSingleOwnedRooms\", {\n      getUserSingleOwnedRooms(v) {\n        getUserSingleOwnedRooms = v;\n      }\n    }, 12);\n    let relinquishRoomOwnerships;\n    module.link(\"./relinquishRoomOwnerships\", {\n      relinquishRoomOwnerships(v) {\n        relinquishRoomOwnerships = v;\n      }\n    }, 13);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function reactivateDirectConversations(userId) {\n      // since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n      // for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n      const directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n        projection: {\n          _id: 1,\n          uids: 1,\n          t: 1\n        }\n      }).toArray();\n      const userIds = directConversations.reduce((acc, r) => {\n        if (isDirectMessageRoom(r)) {\n          acc.push(...r.uids);\n        }\n        return acc;\n      }, []);\n      const uniqueUserIds = [...new Set(userIds)];\n      const activeUsers = await Users.findActiveByUserIds(uniqueUserIds, {\n        projection: {\n          _id: 1\n        }\n      }).toArray();\n      const activeUserIds = activeUsers.map(u => u._id);\n      const roomsToReactivate = directConversations.reduce((acc, room) => {\n        const otherUserId = isDirectMessageRoom(room) ? room.uids.find(u => u !== userId) : undefined;\n        if (otherUserId && activeUserIds.includes(otherUserId)) {\n          acc.push(room._id);\n        }\n        return acc;\n      }, []);\n      const setDmReadOnlyResponse = await Rooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n      if (setDmReadOnlyResponse.modifiedCount) {\n        void notifyOnRoomChangedById(roomsToReactivate);\n      }\n    }\n    async function setUserActiveStatus(userId, active) {\n      let confirmRelinquish = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      check(userId, String);\n      check(active, Boolean);\n      const user = await Users.findOneById(userId);\n      if (!user) {\n        return false;\n      }\n      if (isUserFederated(user)) {\n        throw new Meteor.Error('error-user-is-federated', 'Cannot change federated users status', {\n          method: 'setUserActiveStatus'\n        });\n      }\n      if (user.active !== active) {\n        const remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n        if (remoteUser) {\n          if (active) {\n            throw new Meteor.Error('error-not-allowed', 'Deactivated federated users can not be re-activated', {\n              method: 'setUserActiveStatus'\n            });\n          }\n          const federation = (await License.hasValidLicense()) ? FederationEE : Federation;\n          await federation.deactivateRemoteUser(remoteUser);\n        }\n      }\n      // Users without username can't do anything, so there is no need to check for owned rooms\n      if (user.username != null && !active) {\n        const userAdmin = await Users.findOneAdmin(userId || '');\n        const adminsCount = await Users.countActiveUsersInRoles(['admin']);\n        if (userAdmin && adminsCount === 1) {\n          throw new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n            method: 'removeUserFromRole',\n            action: 'Remove_last_admin'\n          });\n        }\n        const subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n        // give omnichannel rooms a special treatment :)\n        const chatSubscribedRooms = subscribedRooms.filter(_ref => {\n          let {\n            t\n          } = _ref;\n          return t !== 'l';\n        });\n        const livechatSubscribedRooms = subscribedRooms.filter(_ref2 => {\n          let {\n            t\n          } = _ref2;\n          return t === 'l';\n        });\n        if (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n          const rooms = await getUserSingleOwnedRooms(chatSubscribedRooms);\n          throw new Meteor.Error('user-last-owner', '', rooms);\n        }\n        // We don't want one killing the other :)\n        await Promise.allSettled([closeOmnichannelConversations(user, livechatSubscribedRooms), relinquishRoomOwnerships(user._id, chatSubscribedRooms, false)]);\n      }\n      if (active && !user.active) {\n        await callbacks.run('beforeActivateUser', user);\n      }\n      await Users.setUserActive(userId, active);\n      if (active && !user.active) {\n        await callbacks.run('afterActivateUser', user);\n      }\n      if (!active && user.active) {\n        await callbacks.run('afterDeactivateUser', user);\n      }\n      if (user.username) {\n        const {\n          modifiedCount\n        } = await Subscriptions.setArchivedByUsername(user.username, !active);\n        if (modifiedCount) {\n          void notifyOnSubscriptionChangedByNameAndRoomType({\n            t: 'd',\n            name: user.username\n          });\n        }\n      }\n      if (active === false) {\n        await Users.unsetLoginTokens(userId);\n        await Rooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: userId,\n          diff: {\n            'services.resume.loginTokens': [],\n            active\n          }\n        });\n        void notifyOnRoomChangedByUserDM(userId);\n      } else {\n        await Users.unsetReason(userId);\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: userId,\n          diff: {\n            active\n          }\n        });\n        await reactivateDirectConversations(userId);\n      }\n      if (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n        return true;\n      }\n      if (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n        return true;\n      }\n      if (!user.emails || !Array.isArray(user.emails) || user.emails.length === 0) {\n        return true;\n      }\n      const destinations = user.emails.map(email => \"\".concat(user.name || user.username, \"<\").concat(email.address, \">\"));\n      const {\n        subject,\n        html\n      } = Accounts.emailTemplates.userActivated;\n      const email = {\n        to: String(destinations),\n        from: String(settings.get('From_Email')),\n        subject: subject({\n          active\n        }),\n        html: html({\n          active,\n          name: user.name,\n          username: user.username\n        })\n      };\n      void Mailer.sendNoWrap(email);\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","setUserActiveStatus","Federation","FederationEE","License","link","v","isUserFederated","isDirectMessageRoom","Rooms","Users","Subscriptions","MatrixBridgedUser","Accounts","check","Meteor","callbacks","Mailer","*","settings","notifyOnRoomChangedById","notifyOnRoomChangedByUserDM","notifyOnSubscriptionChangedByNameAndRoomType","notifyOnUserChange","closeOmnichannelConversations","shouldRemoveOrChangeOwner","getSubscribedRoomsForUserWithDetails","getUserSingleOwnedRooms","relinquishRoomOwnerships","__reifyWaitForDeps__","reactivateDirectConversations","userId","directConversations","getDirectConversationsByUserId","projection","_id","uids","t","toArray","userIds","reduce","acc","r","push","uniqueUserIds","Set","activeUsers","findActiveByUserIds","activeUserIds","map","u","roomsToReactivate","room","otherUserId","find","undefined","includes","setDmReadOnlyResponse","setDmReadOnlyByUserId","modifiedCount","active","confirmRelinquish","arguments","length","String","Boolean","user","findOneById","Error","method","remoteUser","getExternalUserIdByLocalUserId","federation","hasValidLicense","deactivateRemoteUser","username","userAdmin","findOneAdmin","adminsCount","countActiveUsersInRoles","action","subscribedRooms","chatSubscribedRooms","filter","_ref","livechatSubscribedRooms","_ref2","rooms","Promise","allSettled","run","setUserActive","setArchivedByUsername","name","unsetLoginTokens","clientAction","id","diff","unsetReason","get","emails","Array","isArray","destinations","email","concat","address","subject","html","emailTemplates","userActivated","to","from","sendNoWrap","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/setUserActiveStatus.ts"],"sourcesContent":["import { Federation, FederationEE, License } from '@rocket.chat/core-services';\nimport type { IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { isUserFederated, isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Users, Subscriptions, MatrixBridgedUser } from '@rocket.chat/models';\nimport { Accounts } from 'meteor/accounts-base';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport * as Mailer from '../../../mailer/server/api';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnRoomChangedByUserDM,\n\tnotifyOnSubscriptionChangedByNameAndRoomType,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\nimport { closeOmnichannelConversations } from './closeOmnichannelConversations';\nimport { shouldRemoveOrChangeOwner, getSubscribedRoomsForUserWithDetails } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\n\nasync function reactivateDirectConversations(userId: string) {\n\t// since both users can be deactivated at the same time, we should just reactivate rooms if both users are active\n\t// for that, we need to fetch the direct messages, fetch the users involved and then the ids of rooms we can reactivate\n\tconst directConversations = await Rooms.getDirectConversationsByUserId(userId, {\n\t\tprojection: { _id: 1, uids: 1, t: 1 },\n\t}).toArray();\n\n\tconst userIds = directConversations.reduce<string[]>((acc: string[], r) => {\n\t\tif (isDirectMessageRoom(r)) {\n\t\t\tacc.push(...r.uids);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\tconst uniqueUserIds = [...new Set(userIds)];\n\tconst activeUsers = await Users.findActiveByUserIds(uniqueUserIds, { projection: { _id: 1 } }).toArray();\n\tconst activeUserIds = activeUsers.map((u: IUser) => u._id);\n\tconst roomsToReactivate = directConversations.reduce((acc: string[], room) => {\n\t\tconst otherUserId = isDirectMessageRoom(room) ? room.uids.find((u: string) => u !== userId) : undefined;\n\t\tif (otherUserId && activeUserIds.includes(otherUserId)) {\n\t\t\tacc.push(room._id);\n\t\t}\n\t\treturn acc;\n\t}, []);\n\n\tconst setDmReadOnlyResponse = await Rooms.setDmReadOnlyByUserId(userId, roomsToReactivate, false, false);\n\tif (setDmReadOnlyResponse.modifiedCount) {\n\t\tvoid notifyOnRoomChangedById(roomsToReactivate);\n\t}\n}\n\nexport async function setUserActiveStatus(userId: string, active: boolean, confirmRelinquish = false): Promise<boolean | undefined> {\n\tcheck(userId, String);\n\tcheck(active, Boolean);\n\n\tconst user = await Users.findOneById(userId);\n\n\tif (!user) {\n\t\treturn false;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-user-is-federated', 'Cannot change federated users status', {\n\t\t\tmethod: 'setUserActiveStatus',\n\t\t});\n\t}\n\n\tif (user.active !== active) {\n\t\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\n\t\tif (remoteUser) {\n\t\t\tif (active) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Deactivated federated users can not be re-activated', {\n\t\t\t\t\tmethod: 'setUserActiveStatus',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst federation = (await License.hasValidLicense()) ? FederationEE : Federation;\n\n\t\t\tawait federation.deactivateRemoteUser(remoteUser);\n\t\t}\n\t}\n\n\t// Users without username can't do anything, so there is no need to check for owned rooms\n\tif (user.username != null && !active) {\n\t\tconst userAdmin = await Users.findOneAdmin(userId || '');\n\t\tconst adminsCount = await Users.countActiveUsersInRoles(['admin']);\n\t\tif (userAdmin && adminsCount === 1) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without an active admin is not allowed', {\n\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\taction: 'Remove_last_admin',\n\t\t\t});\n\t\t}\n\n\t\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\t\t// give omnichannel rooms a special treatment :)\n\t\tconst chatSubscribedRooms = subscribedRooms.filter(({ t }) => t !== 'l');\n\t\tconst livechatSubscribedRooms = subscribedRooms.filter(({ t }) => t === 'l');\n\n\t\tif (shouldRemoveOrChangeOwner(chatSubscribedRooms) && !confirmRelinquish) {\n\t\t\tconst rooms = await getUserSingleOwnedRooms(chatSubscribedRooms as []);\n\t\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t\t}\n\n\t\t// We don't want one killing the other :)\n\t\tawait Promise.allSettled([\n\t\t\tcloseOmnichannelConversations(user, livechatSubscribedRooms),\n\t\t\trelinquishRoomOwnerships(user._id, chatSubscribedRooms, false),\n\t\t]);\n\t}\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('beforeActivateUser', user);\n\t}\n\n\tawait Users.setUserActive(userId, active);\n\n\tif (active && !user.active) {\n\t\tawait callbacks.run('afterActivateUser', user);\n\t}\n\n\tif (!active && user.active) {\n\t\tawait callbacks.run('afterDeactivateUser', user);\n\t}\n\n\tif (user.username) {\n\t\tconst { modifiedCount } = await Subscriptions.setArchivedByUsername(user.username, !active);\n\t\tif (modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByNameAndRoomType({ t: 'd', name: user.username });\n\t\t}\n\t}\n\n\tif (active === false) {\n\t\tawait Users.unsetLoginTokens(userId);\n\t\tawait Rooms.setDmReadOnlyByUserId(userId, undefined, true, false);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { 'services.resume.loginTokens': [], active } });\n\t\tvoid notifyOnRoomChangedByUserDM(userId);\n\t} else {\n\t\tawait Users.unsetReason(userId);\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: userId, diff: { active } });\n\t\tawait reactivateDirectConversations(userId);\n\t}\n\n\tif (active && !settings.get('Accounts_Send_Email_When_Activating')) {\n\t\treturn true;\n\t}\n\tif (!active && !settings.get('Accounts_Send_Email_When_Deactivating')) {\n\t\treturn true;\n\t}\n\tif (!user.emails || !Array.isArray(user.emails) || user.emails.length === 0) {\n\t\treturn true;\n\t}\n\n\tconst destinations = user.emails.map((email: IUserEmail) => `${user.name || user.username}<${email.address}>`);\n\n\ttype UserActivated = {\n\t\tsubject: (params: { active: boolean }) => string;\n\t\thtml: (params: { active: boolean; name: string; username: string }) => string;\n\t};\n\tconst { subject, html } = (Accounts.emailTemplates as unknown as { userActivated: UserActivated }).userActivated;\n\tconst email = {\n\t\tto: String(destinations),\n\t\tfrom: String(settings.get('From_Email')),\n\t\tsubject: subject({ active } as any),\n\t\thtml: html({\n\t\t\tactive,\n\t\t\tname: user.name,\n\t\t\tusername: user.username,\n\t\t} as any),\n\t};\n\n\tvoid Mailer.sendNoWrap(email);\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"bcbd0f9d13e6b1ba08e2b393b4691a63daee56f3"}
