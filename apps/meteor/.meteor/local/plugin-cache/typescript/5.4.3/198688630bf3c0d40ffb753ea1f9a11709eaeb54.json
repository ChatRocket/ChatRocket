{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/crowd.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/crowd/server/crowd.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/crowd.ts","inputSourceMap":{"version":3,"file":"app/crowd/server/crowd.ts","sourceRoot":"","sources":["app/crowd/server/crowd.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,4BAA4B,EAAE,MAAM,gCAAgC,CAAC;AAC9E,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,YAAY,EAAE,MAAM,wCAAwC,CAAC;AACtE,OAAO,EAAE,mBAAmB,EAAE,MAAM,gDAAgD,CAAC;AACrF,OAAO,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,MAAM,qCAAqC,CAAC;AAC1H,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AAIjD,SAAS,4BAA4B,CAAC,IAAqB,EAAE,QAAsC,EAAE,QAAgB;IACpH,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QAClC,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAClC,QAAQ,GAAG,EAAE,QAAQ,EAAE,CAAC;QACzB,CAAC;aAAM,CAAC;YACP,QAAQ,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QAChC,CAAC;IACF,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,oCAAoC,EAAE,QAAQ,CAAC,CAAC;IAE5D,MAAM,YAAY,GAAG;QACpB,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE;YACT,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC;YACxB,SAAS,EAAE,SAAS;SACpB;KACD,CAAC;IAEF,OAAO,QAAQ,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,OAAO,KAAK;IACT,WAAW,CAAM;IAEjB,OAAO,CASb;IAEF;QACC,IAAI,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAS,WAAW,CAAC,CAAC;QAE5C,IAAI,CAAC,OAAO,GAAG;YACd,KAAK,EAAE;gBACN,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG;aAC3C;YACD,WAAW,EAAE;gBACZ,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;gBACxC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;aAC5C;YACD,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC;SAC7D,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,eAAe;QACpB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;YAClC,IAAI,GAAG,EAAE,CAAC;gBACT,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;YACD,OAAO,EAAE,CAAC;QACX,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,aAAqB;QACzC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAQ,EAAE,YAAiC,EAAE,EAAE;YACzF,IAAI,GAAG,EAAE,CAAC;gBACT,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;YACD,OAAO,CAAC;gBACP,WAAW,EAAE,YAAY,CAAC,cAAc,CAAC;gBACzC,QAAQ,EAAE,YAAY,CAAC,IAAI;gBAC3B,KAAK,EAAE,YAAY,CAAC,KAAK;gBACzB,MAAM,EAAE,YAAY,CAAC,MAAM;gBAC3B,cAAc,EAAE,aAAa;aAC7B,CAAC,CAAC;QACJ,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,KAAc;QAC5C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC9B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,KAAK,IAAI,EAAE,CAAC,GAAQ,EAAE,QAA6B,EAAE,EAAE;YACjG,IAAI,GAAG,EAAE,CAAC;gBACT,OAAO,CAAC,SAAS,CAAC,CAAC;YACpB,CAAC;YACD,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnB,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,QAAgB;QACpD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACxC,OAAO;QACR,CAAC;QACD,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAChE,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACzC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,aAAa,GAAG,QAAQ,CAAC;QAE7B,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,QAAQ,CAAC;YAEvB,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAY,EAAE,gBAAgB,EAAE,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACnF,IAAI,IAAI,EAAE,CAAC;gBACV,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,QAAQ,CAAC,CAAC;YAC1D,CAAC;QACF,CAAC;QAED,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;YAClB,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAY,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACpE,IAAI,IAAI,EAAE,CAAC;gBACV,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;YACnD,CAAC;QACF,CAAC;QAED,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;YAClB,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAY,EAAE,cAAc,EAAE,QAAQ,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;YACpF,IAAI,IAAI,EAAE,CAAC;gBACV,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,QAAQ,CAAC,CAAC;YACxE,CAAC;QACF,CAAC;QAED,IAAI,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YAChE,OAAO;gBACN,KAAK,EAAE,KAAK;aACZ,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,IAAI,aAAa,EAAE,CAAC;YAC5B,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;QAE/C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACtC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAQ,EAAE,GAAwB,EAAE,EAAE;YACxG,IAAI,GAAG,EAAE,CAAC;gBACT,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;YACD,MAAM,IAAI,GAAG,GAAG,CAAC;YACjB,IAAI,CAAC;gBACJ,MAAM,SAAS,GAAwB,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;gBAChF,IAAI,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,KAAK,IAAI,EAAE,CAAC;oBAClE,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;gBAChC,CAAC;gBAED,IAAI,IAAI,EAAE,CAAC;oBACV,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBAC1B,CAAC;gBACD,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAE9B,OAAO,CAAC,SAAS,CAAC,CAAC;YACpB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC;QACF,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,SAA8B,EAAE,EAAU;QAC9D,MAAM,IAAI,GAAG;YACZ,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;YAChD,cAAc,EAAE,SAAS,CAAC,cAAc;YACxC,MAAM,EAAE;gBACP;oBACC,OAAO,EAAE,SAAS,CAAC,KAAK;oBACxB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAU,6CAA6C,CAAC;iBAC9E;aACD;YACD,KAAK,EAAE,IAAI;SACX,CAAC;QAEF,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YACxB,MAAM,QAAQ,CAAC,gBAAgB,CAAC,EAAE,EAAE,SAAS,CAAC,QAAQ,EAAE;gBACvD,MAAM,EAAE,KAAK;aACb,CAAC,CAAC;YAEH,MAAM,KAAK,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YAC3B,MAAM,YAAY,CAAC,EAAE,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,KAAK,CAAC,SAAS,CACpB,EAAE,GAAG,EAAE,EAAE,EAAE,EACX;YACC,IAAI,EAAE,IAAI;SACV,CACD,CAAC;QAEF,KAAK,kBAAkB,CAAC;YACvB,YAAY,EAAE,SAAS;YACvB,EAAE;YACF,IAAI,EAAE;gBACL,GAAG,IAAI;gBACP,GAAG,CAAC,SAAS,CAAC,WAAW,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC;aAC7D;SACD,CAAC,CAAC;QAEH,MAAM,mBAAmB,CAAC,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,IAAI;QACT,gCAAgC;QAChC,IAAI,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE,CAAC;YAC3C,OAAO;QACR,CAAC;QAED,MAAM,KAAK,GACT,CAAC,MAAM,KAAK,CAAC,cAAc,EAAE,CAAC,OAAO,EAAE,CAAmF,IAAI,EAAE,CAAC;QAEnI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAE/B,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YAChC,IAAI,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;YAC3C,IAAI,CAAC,aAAa,EAAE,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzD,SAAS;YACV,CAAC;YAED,IAAI,SAAS,GAAG,IAAI,CAAC;YAErB,IAAI,CAAC;gBACJ,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;gBACtB,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,mCAAmC,EAAE,cAAc,EAAE,aAAa,EAAE,CAAC,CAAC;gBAE1F,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;gBAE3D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;gBAC5D,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC9C,MAAM,CAAC,IAAI,CAAC,sDAAsD,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;oBAC1F,IAAI,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,KAAK,IAAI,EAAE,CAAC;wBAC1D,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;wBAC7C,YAAY,CAAC,KAAK,IAAI,EAAE;4BACvB,MAAM,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC3B,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;wBAC7C,CAAC,CAAC,CAAC;oBACJ,CAAC;oBACD,OAAO;gBACR,CAAC;gBACD,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACvC,MAAM,CAAC,IAAI,CAAC,mCAAmC,EAAE,aAAa,CAAC,CAAC;gBAChE,IAAI,CAAC,aAAa,EAAE,CAAC;oBACpB,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzD,SAAS;gBACV,CAAC;gBAED,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YACtD,CAAC;YAED,IAAI,QAAQ,CAAC,GAAG,CAAC,6BAA6B,CAAC,KAAK,IAAI,EAAE,CAAC;gBAC1D,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YACpC,CAAC;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC;IACF,CAAC;IAED,aAAa,CAAC,QAAgB;QAC7B,IAAI,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,KAAK,IAAI,EAAE,CAAC;YACpD,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAC;QACD,OAAO,QAAQ,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,SAA8B;QACxD,MAAM,QAAQ,GAAG,SAAS,CAAC,cAAc,IAAI,SAAS,CAAC,QAAQ,CAAC;QAChE,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC;QAE7B,2EAA2E;QAC3E,MAAM,SAAS,GAAG;YACjB,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC;YAC5C,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,IAAI;gBACrB,GAAG,EAAE,CAAC,EAAE,cAAc,EAAE,QAAQ,EAAE,EAAE,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;aAC/D,CAAC;SACF,CAAC;QAEF,uCAAuC;QACvC,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE5C,IAAI,IAAI,EAAE,CAAC;YACV,MAAM,YAAY,GAAG,QAAQ,CAAC,0BAA0B,EAAE,CAAC;YAE3D,MAAM,KAAK,CAAC,SAAS,CACpB,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EACjB;gBACC,KAAK,EAAE;oBACN,6BAA6B,EAAE,QAAQ,CAAC,iBAAiB,CAAC,YAAY,CAAC;iBACvE;aACD,CACD,CAAC;YAEF,qGAAqG;YACrG,yDAAyD;YACzD,KAAK,uBAAuB,CAAC,KAAK,IAAI,EAAE;gBACvC,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,6BAA6B,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAChH,IAAI,CAAC,UAAU,EAAE,CAAC;oBACjB,OAAO;gBACR,CAAC;gBAED,OAAO;oBACN,YAAY,EAAE,SAAS;oBACvB,EAAE,EAAE,SAAS,CAAC,GAAG;oBACjB,IAAI,EAAE,EAAE,6BAA6B,EAAE,UAAU,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE;iBACjF,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAE/C,OAAO;gBACN,MAAM,EAAE,IAAI,CAAC,GAAG;gBAChB,KAAK,EAAE,YAAY,CAAC,KAAK;aACzB,CAAC;QACH,CAAC;QAED,iCAAiC;QACjC,IAAI,CAAC;YACJ,SAAS,CAAC,GAAG,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAE1D,KAAK,sBAAsB,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;YAE7E,qBAAqB;YACrB,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC;YAEpD,OAAO;gBACN,MAAM,EAAE,SAAS,CAAC,GAAG;aACrB,CAAC;QACH,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,gCAAgC,EAAE,GAAG,EAAE,CAAC,CAAC;QAC9D,CAAC;IACF,CAAC;CACD;AAED,QAAQ,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,WAAkC,YAAY;IACzF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QACzB,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;IAEvD,IAAI,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,IAAI,EAAE,CAAC;QAC3C,OAAO,4BAA4B,CAAC,IAAI,EAAE,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;IAC9F,CAAC;IAED,IAAI,CAAC;QACJ,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;QAEzF,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,QAAQ,YAAY,CAAC,QAAQ,0CAA0C,CAAC,CAAC;YACtF,OAAO,4BAA4B,CAAC,IAAI,EAAE,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,aAAa,CAAC,CAAC;QAC9F,CAAC;QAED,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,MAAM,CAAC,KAAK,CAAC,QAAQ,YAAY,CAAC,QAAQ,uCAAuC,CAAC,CAAC;YACnF,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAEtD,OAAO,MAAM,CAAC;IACf,CAAC;IAAC,OAAO,GAAQ,EAAE,CAAC;QACnB,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QACtB,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAC7D,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;AACF,CAAC,CAAC,CAAC;AAEH,MAAM,OAAO,GAAG,YAAY,CAAC;AAE7B,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACnB,QAAQ,CAAC,aAAa,CAAC,CAAC,sBAAsB,EAAE,qBAAqB,CAAC,EAAE,KAAK,UAAU,mBAAmB,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC;QAC1H,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;YAC/C,IAAI,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;gBACjC,MAAM,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC;YACD,OAAO;QACR,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QAC1B,IAAI,QAAQ,EAAE,CAAC;YACd,IAAI,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;gBACjC,MAAM,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YAC9C,MAAM,YAAY,GAAG,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEpE,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/D,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users } from '@rocket.chat/models';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport AtlassianCrowd from 'atlassian-crowd-patched';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { logger } from './logger';\nimport { crowdIntervalValuesToCronMap } from '../../../server/settings/crowd';\nimport { deleteUser } from '../../lib/server/functions/deleteUser';\nimport { _setRealName } from '../../lib/server/functions/setRealName';\nimport { setUserActiveStatus } from '../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange, notifyOnUserChangeById, notifyOnUserChangeAsync } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\n\ntype CrowdUser = Pick<IUser, '_id' | 'username'> & { crowd: Record<string, any>; crowd_username: string };\n\nfunction fallbackDefaultAccountSystem(bind: typeof Accounts, username: string | Record<string, any>, password: string) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = { username };\n\t\t} else {\n\t\t\tusername = { email: username };\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256',\n\t\t},\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nexport class CROWD {\n\tprivate crowdClient: any;\n\n\tprivate options: {\n\t\tcrowd: {\n\t\t\tbase: string;\n\t\t};\n\t\tapplication: {\n\t\t\tname: string;\n\t\t\tpassword: string;\n\t\t};\n\t\trejectUnauthorized: boolean;\n\t};\n\n\tconstructor() {\n\t\tlet url = settings.get<string>('CROWD_URL');\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: !/\\/$/.test(url) ? (url += '/') : url,\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: settings.get('CROWD_APP_PASSWORD'),\n\t\t\t},\n\t\t\trejectUnauthorized: settings.get('CROWD_Reject_Unauthorized'),\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\t}\n\n\tasync checkConnection(): Promise<void> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.ping((err: any) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync fetchCrowdUser(crowdUsername: string): Promise<Record<string, any>> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.find(crowdUsername, (err: any, userResponse: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve({\n\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\tactive: userResponse.active,\n\t\t\t\t\tcrowd_username: crowdUsername,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync searchForCrowdUserByMail(email?: string): Promise<Record<string, any> | undefined> {\n\t\treturn new Promise((resolve) =>\n\t\t\tthis.crowdClient.search('user', `email=\" ${email} \"`, (err: any, response: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tresolve(response);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync authenticate(username: string, password: string): Promise<Record<string, any> | undefined> {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };\n\t\tlogger.info('Extracting crowd_username');\n\t\tlet user = null;\n\t\tlet crowdUsername = username;\n\n\t\tif (username.indexOf('@') !== -1) {\n\t\t\tconst email = username;\n\n\t\t\tuser = await Users.findOne<CrowdUser>({ 'emails.address': email }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by email', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by username');\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ crowd_username: username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user with by crowd_username', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user && !crowdUsername) {\n\t\t\tlogger.debug('Local user found, redirecting to fallback login');\n\t\t\treturn {\n\t\t\t\tcrowd: false,\n\t\t\t};\n\t\t}\n\n\t\tif (!user && crowdUsername) {\n\t\t\tlogger.debug('New user. User is not synced yet.');\n\t\t}\n\t\tlogger.debug('Going to crowd:', crowdUsername);\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.authenticate(crowdUsername, password, async (err: any, res: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tconst user = res;\n\t\t\t\ttry {\n\t\t\t\t\tconst crowdUser: Record<string, any> = await this.fetchCrowdUser(crowdUsername);\n\t\t\t\t\tif (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\t\t\tcrowdUser.username = user.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tcrowdUser._id = user._id;\n\t\t\t\t\t}\n\t\t\t\t\tcrowdUser.password = password;\n\n\t\t\t\t\tresolve(crowdUser);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync syncDataToUser(crowdUser: Record<string, any>, id: string) {\n\t\tconst user = {\n\t\t\tusername: this.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tawait Accounts.setPasswordAsync(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tawait Users.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\tawait _setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{ _id: id },\n\t\t\t{\n\t\t\t\t$set: user,\n\t\t\t},\n\t\t);\n\n\t\tvoid notifyOnUserChange({\n\t\t\tclientAction: 'updated',\n\t\t\tid,\n\t\t\tdiff: {\n\t\t\t\t...user,\n\t\t\t\t...(crowdUser.displayname && { name: crowdUser.displayname }),\n\t\t\t},\n\t\t});\n\n\t\tawait setUserActiveStatus(id, crowdUser.active);\n\t}\n\n\tasync sync() {\n\t\t// if crowd is disabled bail out\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst users =\n\t\t\t((await Users.findCrowdUsers().toArray()) as unknown as (IUser & { crowd: Record<string, any>; crowd_username: string })[]) || [];\n\n\t\tlogger.info('Sync started...');\n\n\t\tfor await (const user of users) {\n\t\t\tlet crowdUsername = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n\t\t\tlogger.info('Syncing user', crowdUsername);\n\t\t\tif (!crowdUsername) {\n\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet crowdUser = null;\n\n\t\t\ttry {\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug({ err });\n\t\t\t\tlogger.error({ msg: 'Could not sync user with username', crowd_username: crowdUsername });\n\n\t\t\t\tconst email = user.emails?.[0].address;\n\t\t\t\tlogger.info('Attempting to find for user by email', email);\n\n\t\t\t\tconst response = await this.searchForCrowdUserByMail(email);\n\t\t\t\tif (!response || response.users.length === 0) {\n\t\t\t\t\tlogger.warn('Could not find user in CROWD with username or email:', crowdUsername, email);\n\t\t\t\t\tif (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n\t\t\t\t\t\tlogger.info('Removing user:', crowdUsername);\n\t\t\t\t\t\tsetImmediate(async () => {\n\t\t\t\t\t\t\tawait deleteUser(user._id);\n\t\t\t\t\t\t\tlogger.info('User removed:', crowdUsername);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcrowdUsername = response.users[0].name;\n\t\t\t\tlogger.info('User found by email. Syncing user', crowdUsername);\n\t\t\t\tif (!crowdUsername) {\n\t\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t}\n\n\t\t\tif (settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\tcrowdUser.username = user.username;\n\t\t\t}\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\t\t}\n\t}\n\n\tcleanUsername(username: string) {\n\t\tif (settings.get('CROWD_Clean_Usernames') === true) {\n\t\t\treturn username.split('@')[0];\n\t\t}\n\t\treturn username;\n\t}\n\n\tasync updateUserCollection(crowdUser: Record<string, any>) {\n\t\tconst username = crowdUser.crowd_username || crowdUser.username;\n\t\tconst mail = crowdUser.email;\n\n\t\t// If id is not provided, user is linked by crowd_username or email address\n\t\tconst userQuery = {\n\t\t\t...(crowdUser._id && { _id: crowdUser._id }),\n\t\t\t...(!crowdUser._id && {\n\t\t\t\t$or: [{ crowd_username: username }, { 'emails.address': mail }],\n\t\t\t}),\n\t\t};\n\n\t\t// find our existing user if they exist\n\t\tconst user = await Users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tawait Users.updateOne(\n\t\t\t\t{ _id: user._id },\n\t\t\t\t{\n\t\t\t\t\t$push: {\n\t\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(crowdUser._id, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: crowdUser._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token,\n\t\t\t};\n\t\t}\n\n\t\t// Attempt to create the new user\n\t\ttry {\n\t\t\tcrowdUser._id = await Accounts.createUserAsync(crowdUser);\n\n\t\t\tvoid notifyOnUserChangeById({ clientAction: 'inserted', id: crowdUser._id });\n\n\t\t\t// sync the user data\n\t\t\tawait this.syncDataToUser(crowdUser, crowdUser._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: crowdUser._id,\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error creating new crowd user.', err });\n\t\t}\n\t}\n}\n\nAccounts.registerLoginHandler('crowd', async function (this: typeof Accounts, loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\ttry {\n\t\tconst crowd = new CROWD();\n\t\tconst user = await crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\n\t\tif (user && user.crowd === false) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not a valid crowd user, falling back`);\n\t\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t\t}\n\n\t\tif (!user) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not allowed to access Rocket.Chat`);\n\t\t\treturn new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n\t\t}\n\n\t\tconst result = await crowd.updateUserCollection(user);\n\n\t\treturn result;\n\t} catch (err: any) {\n\t\tlogger.debug({ err });\n\t\tlogger.error('Crowd user not authenticated due to an error');\n\t\tthrow new Meteor.Error('user-not-found', err.message);\n\t}\n});\n\nconst jobName = 'CROWD_Sync';\n\nMeteor.startup(() => {\n\tsettings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], async function addCronJobDebounced([data, interval]) {\n\t\tif (data !== true) {\n\t\t\tlogger.info('Disabling CROWD Background Sync');\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst crowd = new CROWD();\n\t\tif (interval) {\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\n\t\t\tlogger.info('Enabling CROWD Background Sync');\n\t\t\tconst cronInterval = crowdIntervalValuesToCronMap[String(interval)];\n\n\t\t\tawait cronJobs.add(jobName, cronInterval, () => crowd.sync());\n\t\t}\n\t});\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/crowd/server/crowd.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/crowd/server/crowd.ts","inputSourceMap":{"version":3,"file":"app/crowd/server/crowd.ts","sourceRoot":"","sources":["app/crowd/server/crowd.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users } from '@rocket.chat/models';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport AtlassianCrowd from 'atlassian-crowd-patched';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { logger } from './logger';\nimport { crowdIntervalValuesToCronMap } from '../../../server/settings/crowd';\nimport { deleteUser } from '../../lib/server/functions/deleteUser';\nimport { _setRealName } from '../../lib/server/functions/setRealName';\nimport { setUserActiveStatus } from '../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange, notifyOnUserChangeById, notifyOnUserChangeAsync } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\n\ntype CrowdUser = Pick<IUser, '_id' | 'username'> & { crowd: Record<string, any>; crowd_username: string };\n\nfunction fallbackDefaultAccountSystem(bind: typeof Accounts, username: string | Record<string, any>, password: string) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = { username };\n\t\t} else {\n\t\t\tusername = { email: username };\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256',\n\t\t},\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nexport class CROWD {\n\tprivate crowdClient: any;\n\n\tprivate options: {\n\t\tcrowd: {\n\t\t\tbase: string;\n\t\t};\n\t\tapplication: {\n\t\t\tname: string;\n\t\t\tpassword: string;\n\t\t};\n\t\trejectUnauthorized: boolean;\n\t};\n\n\tconstructor() {\n\t\tlet url = settings.get<string>('CROWD_URL');\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: !/\\/$/.test(url) ? (url += '/') : url,\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: settings.get('CROWD_APP_PASSWORD'),\n\t\t\t},\n\t\t\trejectUnauthorized: settings.get('CROWD_Reject_Unauthorized'),\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\t}\n\n\tasync checkConnection(): Promise<void> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.ping((err: any) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync fetchCrowdUser(crowdUsername: string): Promise<Record<string, any>> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.find(crowdUsername, (err: any, userResponse: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve({\n\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\tactive: userResponse.active,\n\t\t\t\t\tcrowd_username: crowdUsername,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync searchForCrowdUserByMail(email?: string): Promise<Record<string, any> | undefined> {\n\t\treturn new Promise((resolve) =>\n\t\t\tthis.crowdClient.search('user', `email=\" ${email} \"`, (err: any, response: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tresolve(response);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync authenticate(username: string, password: string): Promise<Record<string, any> | undefined> {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };\n\t\tlogger.info('Extracting crowd_username');\n\t\tlet user = null;\n\t\tlet crowdUsername = username;\n\n\t\tif (username.indexOf('@') !== -1) {\n\t\t\tconst email = username;\n\n\t\t\tuser = await Users.findOne<CrowdUser>({ 'emails.address': email }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by email', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by username');\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ crowd_username: username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user with by crowd_username', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user && !crowdUsername) {\n\t\t\tlogger.debug('Local user found, redirecting to fallback login');\n\t\t\treturn {\n\t\t\t\tcrowd: false,\n\t\t\t};\n\t\t}\n\n\t\tif (!user && crowdUsername) {\n\t\t\tlogger.debug('New user. User is not synced yet.');\n\t\t}\n\t\tlogger.debug('Going to crowd:', crowdUsername);\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.authenticate(crowdUsername, password, async (err: any, res: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tconst user = res;\n\t\t\t\ttry {\n\t\t\t\t\tconst crowdUser: Record<string, any> = await this.fetchCrowdUser(crowdUsername);\n\t\t\t\t\tif (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\t\t\tcrowdUser.username = user.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tcrowdUser._id = user._id;\n\t\t\t\t\t}\n\t\t\t\t\tcrowdUser.password = password;\n\n\t\t\t\t\tresolve(crowdUser);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync syncDataToUser(crowdUser: Record<string, any>, id: string) {\n\t\tconst user = {\n\t\t\tusername: this.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tawait Accounts.setPasswordAsync(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tawait Users.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\tawait _setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{ _id: id },\n\t\t\t{\n\t\t\t\t$set: user,\n\t\t\t},\n\t\t);\n\n\t\tvoid notifyOnUserChange({\n\t\t\tclientAction: 'updated',\n\t\t\tid,\n\t\t\tdiff: {\n\t\t\t\t...user,\n\t\t\t\t...(crowdUser.displayname && { name: crowdUser.displayname }),\n\t\t\t},\n\t\t});\n\n\t\tawait setUserActiveStatus(id, crowdUser.active);\n\t}\n\n\tasync sync() {\n\t\t// if crowd is disabled bail out\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst users =\n\t\t\t((await Users.findCrowdUsers().toArray()) as unknown as (IUser & { crowd: Record<string, any>; crowd_username: string })[]) || [];\n\n\t\tlogger.info('Sync started...');\n\n\t\tfor await (const user of users) {\n\t\t\tlet crowdUsername = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n\t\t\tlogger.info('Syncing user', crowdUsername);\n\t\t\tif (!crowdUsername) {\n\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet crowdUser = null;\n\n\t\t\ttry {\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug({ err });\n\t\t\t\tlogger.error({ msg: 'Could not sync user with username', crowd_username: crowdUsername });\n\n\t\t\t\tconst email = user.emails?.[0].address;\n\t\t\t\tlogger.info('Attempting to find for user by email', email);\n\n\t\t\t\tconst response = await this.searchForCrowdUserByMail(email);\n\t\t\t\tif (!response || response.users.length === 0) {\n\t\t\t\t\tlogger.warn('Could not find user in CROWD with username or email:', crowdUsername, email);\n\t\t\t\t\tif (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n\t\t\t\t\t\tlogger.info('Removing user:', crowdUsername);\n\t\t\t\t\t\tsetImmediate(async () => {\n\t\t\t\t\t\t\tawait deleteUser(user._id);\n\t\t\t\t\t\t\tlogger.info('User removed:', crowdUsername);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcrowdUsername = response.users[0].name;\n\t\t\t\tlogger.info('User found by email. Syncing user', crowdUsername);\n\t\t\t\tif (!crowdUsername) {\n\t\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t}\n\n\t\t\tif (settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\tcrowdUser.username = user.username;\n\t\t\t}\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\t\t}\n\t}\n\n\tcleanUsername(username: string) {\n\t\tif (settings.get('CROWD_Clean_Usernames') === true) {\n\t\t\treturn username.split('@')[0];\n\t\t}\n\t\treturn username;\n\t}\n\n\tasync updateUserCollection(crowdUser: Record<string, any>) {\n\t\tconst username = crowdUser.crowd_username || crowdUser.username;\n\t\tconst mail = crowdUser.email;\n\n\t\t// If id is not provided, user is linked by crowd_username or email address\n\t\tconst userQuery = {\n\t\t\t...(crowdUser._id && { _id: crowdUser._id }),\n\t\t\t...(!crowdUser._id && {\n\t\t\t\t$or: [{ crowd_username: username }, { 'emails.address': mail }],\n\t\t\t}),\n\t\t};\n\n\t\t// find our existing user if they exist\n\t\tconst user = await Users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tawait Users.updateOne(\n\t\t\t\t{ _id: user._id },\n\t\t\t\t{\n\t\t\t\t\t$push: {\n\t\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(crowdUser._id, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: crowdUser._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token,\n\t\t\t};\n\t\t}\n\n\t\t// Attempt to create the new user\n\t\ttry {\n\t\t\tcrowdUser._id = await Accounts.createUserAsync(crowdUser);\n\n\t\t\tvoid notifyOnUserChangeById({ clientAction: 'inserted', id: crowdUser._id });\n\n\t\t\t// sync the user data\n\t\t\tawait this.syncDataToUser(crowdUser, crowdUser._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: crowdUser._id,\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error creating new crowd user.', err });\n\t\t}\n\t}\n}\n\nAccounts.registerLoginHandler('crowd', async function (this: typeof Accounts, loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\ttry {\n\t\tconst crowd = new CROWD();\n\t\tconst user = await crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\n\t\tif (user && user.crowd === false) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not a valid crowd user, falling back`);\n\t\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t\t}\n\n\t\tif (!user) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not allowed to access Rocket.Chat`);\n\t\t\treturn new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n\t\t}\n\n\t\tconst result = await crowd.updateUserCollection(user);\n\n\t\treturn result;\n\t} catch (err: any) {\n\t\tlogger.debug({ err });\n\t\tlogger.error('Crowd user not authenticated due to an error');\n\t\tthrow new Meteor.Error('user-not-found', err.message);\n\t}\n});\n\nconst jobName = 'CROWD_Sync';\n\nMeteor.startup(() => {\n\tsettings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], async function addCronJobDebounced([data, interval]) {\n\t\tif (data !== true) {\n\t\t\tlogger.info('Disabling CROWD Background Sync');\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst crowd = new CROWD();\n\t\tif (interval) {\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\n\t\t\tlogger.info('Enabling CROWD Background Sync');\n\t\t\tconst cronInterval = crowdIntervalValuesToCronMap[String(interval)];\n\n\t\t\tawait cronJobs.add(jobName, cronInterval, () => crowd.sync());\n\t\t}\n\t});\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      CROWD: () => CROWD\n    });\n    let cronJobs;\n    module.link(\"@rocket.chat/cron\", {\n      cronJobs(v) {\n        cronJobs = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let SHA256;\n    module.link(\"@rocket.chat/sha256\", {\n      SHA256(v) {\n        SHA256 = v;\n      }\n    }, 2);\n    let AtlassianCrowd;\n    module.link(\"atlassian-crowd-patched\", {\n      default(v) {\n        AtlassianCrowd = v;\n      }\n    }, 3);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 4);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 5);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 6);\n    let crowdIntervalValuesToCronMap;\n    module.link(\"../../../server/settings/crowd\", {\n      crowdIntervalValuesToCronMap(v) {\n        crowdIntervalValuesToCronMap = v;\n      }\n    }, 7);\n    let deleteUser;\n    module.link(\"../../lib/server/functions/deleteUser\", {\n      deleteUser(v) {\n        deleteUser = v;\n      }\n    }, 8);\n    let _setRealName;\n    module.link(\"../../lib/server/functions/setRealName\", {\n      _setRealName(v) {\n        _setRealName = v;\n      }\n    }, 9);\n    let setUserActiveStatus;\n    module.link(\"../../lib/server/functions/setUserActiveStatus\", {\n      setUserActiveStatus(v) {\n        setUserActiveStatus = v;\n      }\n    }, 10);\n    let notifyOnUserChange, notifyOnUserChangeById, notifyOnUserChangeAsync;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      },\n      notifyOnUserChangeById(v) {\n        notifyOnUserChangeById = v;\n      },\n      notifyOnUserChangeAsync(v) {\n        notifyOnUserChangeAsync = v;\n      }\n    }, 11);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function fallbackDefaultAccountSystem(bind, username, password) {\n      if (typeof username === 'string') {\n        if (username.indexOf('@') === -1) {\n          username = {\n            username\n          };\n        } else {\n          username = {\n            email: username\n          };\n        }\n      }\n      logger.info('Fallback to default account system', username);\n      const loginRequest = {\n        user: username,\n        password: {\n          digest: SHA256(password),\n          algorithm: 'sha-256'\n        }\n      };\n      return Accounts._runLoginHandlers(bind, loginRequest);\n    }\n    class CROWD {\n      constructor() {\n        this.crowdClient = void 0;\n        this.options = void 0;\n        let url = settings.get('CROWD_URL');\n        this.options = {\n          crowd: {\n            base: !/\\/$/.test(url) ? url += '/' : url\n          },\n          application: {\n            name: settings.get('CROWD_APP_USERNAME'),\n            password: settings.get('CROWD_APP_PASSWORD')\n          },\n          rejectUnauthorized: settings.get('CROWD_Reject_Unauthorized')\n        };\n        this.crowdClient = new AtlassianCrowd(this.options);\n      }\n      async checkConnection() {\n        return new Promise((resolve, reject) => this.crowdClient.ping(err => {\n          if (err) {\n            reject(err);\n          }\n          resolve();\n        }));\n      }\n      async fetchCrowdUser(crowdUsername) {\n        return new Promise((resolve, reject) => this.crowdClient.user.find(crowdUsername, (err, userResponse) => {\n          if (err) {\n            reject(err);\n          }\n          resolve({\n            displayname: userResponse['display-name'],\n            username: userResponse.name,\n            email: userResponse.email,\n            active: userResponse.active,\n            crowd_username: crowdUsername\n          });\n        }));\n      }\n      async searchForCrowdUserByMail(email) {\n        return new Promise(resolve => this.crowdClient.search('user', \"email=\\\" \".concat(email, \" \\\"\"), (err, response) => {\n          if (err) {\n            resolve(undefined);\n          }\n          resolve(response);\n        }));\n      }\n      async authenticate(username, password) {\n        if (!username || !password) {\n          logger.error('No username or password');\n          return;\n        }\n        const projection = {\n          username: 1,\n          crowd_username: 1,\n          crowd: 1\n        };\n        logger.info('Extracting crowd_username');\n        let user = null;\n        let crowdUsername = username;\n        if (username.indexOf('@') !== -1) {\n          const email = username;\n          user = await Users.findOne({\n            'emails.address': email\n          }, {\n            projection\n          });\n          if (user) {\n            crowdUsername = user.crowd_username;\n          } else {\n            logger.debug('Could not find a user by email', username);\n          }\n        }\n        if (user == null) {\n          user = await Users.findOne({\n            username\n          }, {\n            projection\n          });\n          if (user) {\n            crowdUsername = user.crowd_username;\n          } else {\n            logger.debug('Could not find a user by username');\n          }\n        }\n        if (user == null) {\n          user = await Users.findOne({\n            crowd_username: username\n          }, {\n            projection\n          });\n          if (user) {\n            crowdUsername = user.crowd_username;\n          } else {\n            logger.debug('Could not find a user with by crowd_username', username);\n          }\n        }\n        if (user && !crowdUsername) {\n          logger.debug('Local user found, redirecting to fallback login');\n          return {\n            crowd: false\n          };\n        }\n        if (!user && crowdUsername) {\n          logger.debug('New user. User is not synced yet.');\n        }\n        logger.debug('Going to crowd:', crowdUsername);\n        return new Promise((resolve, reject) => this.crowdClient.user.authenticate(crowdUsername, password, async (err, res) => {\n          if (err) {\n            reject(err);\n          }\n          const user = res;\n          try {\n            const crowdUser = await this.fetchCrowdUser(crowdUsername);\n            if (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n              crowdUser.username = user.name;\n            }\n            if (user) {\n              crowdUser._id = user._id;\n            }\n            crowdUser.password = password;\n            resolve(crowdUser);\n          } catch (err) {\n            reject(err);\n          }\n        }));\n      }\n      async syncDataToUser(crowdUser, id) {\n        const user = {\n          username: this.cleanUsername(crowdUser.username),\n          crowd_username: crowdUser.crowd_username,\n          emails: [{\n            address: crowdUser.email,\n            verified: settings.get('Accounts_Verify_Email_For_External_Accounts')\n          }],\n          crowd: true\n        };\n        if (crowdUser.password) {\n          await Accounts.setPasswordAsync(id, crowdUser.password, {\n            logout: false\n          });\n          await Users.unsetRequirePasswordChange(id);\n        }\n        if (crowdUser.displayname) {\n          await _setRealName(id, crowdUser.displayname);\n        }\n        await Users.updateOne({\n          _id: id\n        }, {\n          $set: user\n        });\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id,\n          diff: _objectSpread(_objectSpread({}, user), crowdUser.displayname && {\n            name: crowdUser.displayname\n          })\n        });\n        await setUserActiveStatus(id, crowdUser.active);\n      }\n      async sync() {\n        // if crowd is disabled bail out\n        if (settings.get('CROWD_Enable') !== true) {\n          return;\n        }\n        const users = (await Users.findCrowdUsers().toArray()) || [];\n        logger.info('Sync started...');\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(users), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const user = _step.value;\n            {\n              let crowdUsername = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n              logger.info('Syncing user', crowdUsername);\n              if (!crowdUsername) {\n                logger.warn('User has no crowd_username', user.username);\n                continue;\n              }\n              let crowdUser = null;\n              try {\n                crowdUser = await this.fetchCrowdUser(crowdUsername);\n              } catch (err) {\n                var _user$emails;\n                logger.debug({\n                  err\n                });\n                logger.error({\n                  msg: 'Could not sync user with username',\n                  crowd_username: crowdUsername\n                });\n                const email = (_user$emails = user.emails) === null || _user$emails === void 0 ? void 0 : _user$emails[0].address;\n                logger.info('Attempting to find for user by email', email);\n                const response = await this.searchForCrowdUserByMail(email);\n                if (!response || response.users.length === 0) {\n                  logger.warn('Could not find user in CROWD with username or email:', crowdUsername, email);\n                  if (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n                    logger.info('Removing user:', crowdUsername);\n                    setImmediate(async () => {\n                      await deleteUser(user._id);\n                      logger.info('User removed:', crowdUsername);\n                    });\n                  }\n                  return;\n                }\n                crowdUsername = response.users[0].name;\n                logger.info('User found by email. Syncing user', crowdUsername);\n                if (!crowdUsername) {\n                  logger.warn('User has no crowd_username', user.username);\n                  continue;\n                }\n                crowdUser = await this.fetchCrowdUser(crowdUsername);\n              }\n              if (settings.get('CROWD_Allow_Custom_Username') === true) {\n                crowdUser.username = user.username;\n              }\n              await this.syncDataToUser(crowdUser, user._id);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      cleanUsername(username) {\n        if (settings.get('CROWD_Clean_Usernames') === true) {\n          return username.split('@')[0];\n        }\n        return username;\n      }\n      async updateUserCollection(crowdUser) {\n        const username = crowdUser.crowd_username || crowdUser.username;\n        const mail = crowdUser.email;\n        // If id is not provided, user is linked by crowd_username or email address\n        const userQuery = _objectSpread(_objectSpread({}, crowdUser._id && {\n          _id: crowdUser._id\n        }), !crowdUser._id && {\n          $or: [{\n            crowd_username: username\n          }, {\n            'emails.address': mail\n          }]\n        });\n        // find our existing user if they exist\n        const user = await Users.findOne(userQuery);\n        if (user) {\n          const stampedToken = Accounts._generateStampedLoginToken();\n          await Users.updateOne({\n            _id: user._id\n          }, {\n            $push: {\n              'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken)\n            }\n          });\n          // TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n          // instead of having to listen to every watch.users event\n          void notifyOnUserChangeAsync(async () => {\n            var _userTokens$services, _userTokens$services$;\n            const userTokens = await Users.findOneById(crowdUser._id, {\n              projection: {\n                'services.resume.loginTokens': 1\n              }\n            });\n            if (!userTokens) {\n              return;\n            }\n            return {\n              clientAction: 'updated',\n              id: crowdUser._id,\n              diff: {\n                'services.resume.loginTokens': (_userTokens$services = userTokens.services) === null || _userTokens$services === void 0 ? void 0 : (_userTokens$services$ = _userTokens$services.resume) === null || _userTokens$services$ === void 0 ? void 0 : _userTokens$services$.loginTokens\n              }\n            };\n          });\n          await this.syncDataToUser(crowdUser, user._id);\n          return {\n            userId: user._id,\n            token: stampedToken.token\n          };\n        }\n        // Attempt to create the new user\n        try {\n          crowdUser._id = await Accounts.createUserAsync(crowdUser);\n          void notifyOnUserChangeById({\n            clientAction: 'inserted',\n            id: crowdUser._id\n          });\n          // sync the user data\n          await this.syncDataToUser(crowdUser, crowdUser._id);\n          return {\n            userId: crowdUser._id\n          };\n        } catch (err) {\n          logger.error({\n            msg: 'Error creating new crowd user.',\n            err\n          });\n        }\n      }\n    }\n    Accounts.registerLoginHandler('crowd', async function (loginRequest) {\n      if (!loginRequest.crowd) {\n        return undefined;\n      }\n      logger.info('Init CROWD login', loginRequest.username);\n      if (settings.get('CROWD_Enable') !== true) {\n        return fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n      }\n      try {\n        const crowd = new CROWD();\n        const user = await crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n        if (user && user.crowd === false) {\n          logger.debug(\"User \".concat(loginRequest.username, \" is not a valid crowd user, falling back\"));\n          return fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n        }\n        if (!user) {\n          logger.debug(\"User \".concat(loginRequest.username, \" is not allowed to access Rocket.Chat\"));\n          return new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n        }\n        const result = await crowd.updateUserCollection(user);\n        return result;\n      } catch (err) {\n        logger.debug({\n          err\n        });\n        logger.error('Crowd user not authenticated due to an error');\n        throw new Meteor.Error('user-not-found', err.message);\n      }\n    });\n    const jobName = 'CROWD_Sync';\n    Meteor.startup(() => {\n      settings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], async function addCronJobDebounced(_ref) {\n        let [data, interval] = _ref;\n        if (data !== true) {\n          logger.info('Disabling CROWD Background Sync');\n          if (await cronJobs.has(jobName)) {\n            await cronJobs.remove(jobName);\n          }\n          return;\n        }\n        const crowd = new CROWD();\n        if (interval) {\n          if (await cronJobs.has(jobName)) {\n            await cronJobs.remove(jobName);\n          }\n          logger.info('Enabling CROWD Background Sync');\n          const cronInterval = crowdIntervalValuesToCronMap[String(interval)];\n          await cronJobs.add(jobName, cronInterval, () => crowd.sync());\n        }\n      });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","CROWD","cronJobs","Users","SHA256","AtlassianCrowd","Accounts","Meteor","logger","crowdIntervalValuesToCronMap","deleteUser","_setRealName","setUserActiveStatus","notifyOnUserChange","notifyOnUserChangeById","notifyOnUserChangeAsync","settings","__reifyWaitForDeps__","fallbackDefaultAccountSystem","bind","username","password","indexOf","email","info","loginRequest","user","digest","algorithm","_runLoginHandlers","constructor","crowdClient","options","url","get","crowd","base","test","application","name","rejectUnauthorized","checkConnection","Promise","resolve","reject","ping","err","fetchCrowdUser","crowdUsername","find","userResponse","displayname","active","crowd_username","searchForCrowdUserByMail","search","concat","response","undefined","authenticate","error","projection","findOne","debug","res","crowdUser","_id","syncDataToUser","id","cleanUsername","emails","address","verified","setPasswordAsync","logout","unsetRequirePasswordChange","updateOne","$set","clientAction","diff","sync","users","findCrowdUsers","toArray","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","hasOwnProperty","warn","_user$emails","msg","length","setImmediate","return","split","updateUserCollection","mail","userQuery","$or","stampedToken","_generateStampedLoginToken","$push","_hashStampedToken","_userTokens$services","_userTokens$services$","userTokens","findOneById","services","resume","loginTokens","userId","token","createUserAsync","registerLoginHandler","crowdPassword","Error","result","message","jobName","startup","watchMultiple","addCronJobDebounced","_ref","data","interval","has","remove","cronInterval","String","add","__reify_async_result__","_reifyError","self","async"],"sources":["app/crowd/server/crowd.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users } from '@rocket.chat/models';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport AtlassianCrowd from 'atlassian-crowd-patched';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\n\nimport { logger } from './logger';\nimport { crowdIntervalValuesToCronMap } from '../../../server/settings/crowd';\nimport { deleteUser } from '../../lib/server/functions/deleteUser';\nimport { _setRealName } from '../../lib/server/functions/setRealName';\nimport { setUserActiveStatus } from '../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange, notifyOnUserChangeById, notifyOnUserChangeAsync } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\n\ntype CrowdUser = Pick<IUser, '_id' | 'username'> & { crowd: Record<string, any>; crowd_username: string };\n\nfunction fallbackDefaultAccountSystem(bind: typeof Accounts, username: string | Record<string, any>, password: string) {\n\tif (typeof username === 'string') {\n\t\tif (username.indexOf('@') === -1) {\n\t\t\tusername = { username };\n\t\t} else {\n\t\t\tusername = { email: username };\n\t\t}\n\t}\n\n\tlogger.info('Fallback to default account system', username);\n\n\tconst loginRequest = {\n\t\tuser: username,\n\t\tpassword: {\n\t\t\tdigest: SHA256(password),\n\t\t\talgorithm: 'sha-256',\n\t\t},\n\t};\n\n\treturn Accounts._runLoginHandlers(bind, loginRequest);\n}\n\nexport class CROWD {\n\tprivate crowdClient: any;\n\n\tprivate options: {\n\t\tcrowd: {\n\t\t\tbase: string;\n\t\t};\n\t\tapplication: {\n\t\t\tname: string;\n\t\t\tpassword: string;\n\t\t};\n\t\trejectUnauthorized: boolean;\n\t};\n\n\tconstructor() {\n\t\tlet url = settings.get<string>('CROWD_URL');\n\n\t\tthis.options = {\n\t\t\tcrowd: {\n\t\t\t\tbase: !/\\/$/.test(url) ? (url += '/') : url,\n\t\t\t},\n\t\t\tapplication: {\n\t\t\t\tname: settings.get('CROWD_APP_USERNAME'),\n\t\t\t\tpassword: settings.get('CROWD_APP_PASSWORD'),\n\t\t\t},\n\t\t\trejectUnauthorized: settings.get('CROWD_Reject_Unauthorized'),\n\t\t};\n\n\t\tthis.crowdClient = new AtlassianCrowd(this.options);\n\t}\n\n\tasync checkConnection(): Promise<void> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.ping((err: any) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync fetchCrowdUser(crowdUsername: string): Promise<Record<string, any>> {\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.find(crowdUsername, (err: any, userResponse: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tresolve({\n\t\t\t\t\tdisplayname: userResponse['display-name'],\n\t\t\t\t\tusername: userResponse.name,\n\t\t\t\t\temail: userResponse.email,\n\t\t\t\t\tactive: userResponse.active,\n\t\t\t\t\tcrowd_username: crowdUsername,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync searchForCrowdUserByMail(email?: string): Promise<Record<string, any> | undefined> {\n\t\treturn new Promise((resolve) =>\n\t\t\tthis.crowdClient.search('user', `email=\" ${email} \"`, (err: any, response: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tresolve(response);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync authenticate(username: string, password: string): Promise<Record<string, any> | undefined> {\n\t\tif (!username || !password) {\n\t\t\tlogger.error('No username or password');\n\t\t\treturn;\n\t\t}\n\t\tconst projection = { username: 1, crowd_username: 1, crowd: 1 };\n\t\tlogger.info('Extracting crowd_username');\n\t\tlet user = null;\n\t\tlet crowdUsername = username;\n\n\t\tif (username.indexOf('@') !== -1) {\n\t\t\tconst email = username;\n\n\t\t\tuser = await Users.findOne<CrowdUser>({ 'emails.address': email }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by email', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user by username');\n\t\t\t}\n\t\t}\n\n\t\tif (user == null) {\n\t\t\tuser = await Users.findOne<CrowdUser>({ crowd_username: username }, { projection });\n\t\t\tif (user) {\n\t\t\t\tcrowdUsername = user.crowd_username;\n\t\t\t} else {\n\t\t\t\tlogger.debug('Could not find a user with by crowd_username', username);\n\t\t\t}\n\t\t}\n\n\t\tif (user && !crowdUsername) {\n\t\t\tlogger.debug('Local user found, redirecting to fallback login');\n\t\t\treturn {\n\t\t\t\tcrowd: false,\n\t\t\t};\n\t\t}\n\n\t\tif (!user && crowdUsername) {\n\t\t\tlogger.debug('New user. User is not synced yet.');\n\t\t}\n\t\tlogger.debug('Going to crowd:', crowdUsername);\n\n\t\treturn new Promise((resolve, reject) =>\n\t\t\tthis.crowdClient.user.authenticate(crowdUsername, password, async (err: any, res: Record<string, any>) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t\tconst user = res;\n\t\t\t\ttry {\n\t\t\t\t\tconst crowdUser: Record<string, any> = await this.fetchCrowdUser(crowdUsername);\n\t\t\t\t\tif (user && settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\t\t\tcrowdUser.username = user.name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (user) {\n\t\t\t\t\t\tcrowdUser._id = user._id;\n\t\t\t\t\t}\n\t\t\t\t\tcrowdUser.password = password;\n\n\t\t\t\t\tresolve(crowdUser);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync syncDataToUser(crowdUser: Record<string, any>, id: string) {\n\t\tconst user = {\n\t\t\tusername: this.cleanUsername(crowdUser.username),\n\t\t\tcrowd_username: crowdUser.crowd_username,\n\t\t\temails: [\n\t\t\t\t{\n\t\t\t\t\taddress: crowdUser.email,\n\t\t\t\t\tverified: settings.get<boolean>('Accounts_Verify_Email_For_External_Accounts'),\n\t\t\t\t},\n\t\t\t],\n\t\t\tcrowd: true,\n\t\t};\n\n\t\tif (crowdUser.password) {\n\t\t\tawait Accounts.setPasswordAsync(id, crowdUser.password, {\n\t\t\t\tlogout: false,\n\t\t\t});\n\n\t\t\tawait Users.unsetRequirePasswordChange(id);\n\t\t}\n\n\t\tif (crowdUser.displayname) {\n\t\t\tawait _setRealName(id, crowdUser.displayname);\n\t\t}\n\n\t\tawait Users.updateOne(\n\t\t\t{ _id: id },\n\t\t\t{\n\t\t\t\t$set: user,\n\t\t\t},\n\t\t);\n\n\t\tvoid notifyOnUserChange({\n\t\t\tclientAction: 'updated',\n\t\t\tid,\n\t\t\tdiff: {\n\t\t\t\t...user,\n\t\t\t\t...(crowdUser.displayname && { name: crowdUser.displayname }),\n\t\t\t},\n\t\t});\n\n\t\tawait setUserActiveStatus(id, crowdUser.active);\n\t}\n\n\tasync sync() {\n\t\t// if crowd is disabled bail out\n\t\tif (settings.get('CROWD_Enable') !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst users =\n\t\t\t((await Users.findCrowdUsers().toArray()) as unknown as (IUser & { crowd: Record<string, any>; crowd_username: string })[]) || [];\n\n\t\tlogger.info('Sync started...');\n\n\t\tfor await (const user of users) {\n\t\t\tlet crowdUsername = user.hasOwnProperty('crowd_username') ? user.crowd_username : user.username;\n\t\t\tlogger.info('Syncing user', crowdUsername);\n\t\t\tif (!crowdUsername) {\n\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet crowdUser = null;\n\n\t\t\ttry {\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug({ err });\n\t\t\t\tlogger.error({ msg: 'Could not sync user with username', crowd_username: crowdUsername });\n\n\t\t\t\tconst email = user.emails?.[0].address;\n\t\t\t\tlogger.info('Attempting to find for user by email', email);\n\n\t\t\t\tconst response = await this.searchForCrowdUserByMail(email);\n\t\t\t\tif (!response || response.users.length === 0) {\n\t\t\t\t\tlogger.warn('Could not find user in CROWD with username or email:', crowdUsername, email);\n\t\t\t\t\tif (settings.get('CROWD_Remove_Orphaned_Users') === true) {\n\t\t\t\t\t\tlogger.info('Removing user:', crowdUsername);\n\t\t\t\t\t\tsetImmediate(async () => {\n\t\t\t\t\t\t\tawait deleteUser(user._id);\n\t\t\t\t\t\t\tlogger.info('User removed:', crowdUsername);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcrowdUsername = response.users[0].name;\n\t\t\t\tlogger.info('User found by email. Syncing user', crowdUsername);\n\t\t\t\tif (!crowdUsername) {\n\t\t\t\t\tlogger.warn('User has no crowd_username', user.username);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tcrowdUser = await this.fetchCrowdUser(crowdUsername);\n\t\t\t}\n\n\t\t\tif (settings.get('CROWD_Allow_Custom_Username') === true) {\n\t\t\t\tcrowdUser.username = user.username;\n\t\t\t}\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\t\t}\n\t}\n\n\tcleanUsername(username: string) {\n\t\tif (settings.get('CROWD_Clean_Usernames') === true) {\n\t\t\treturn username.split('@')[0];\n\t\t}\n\t\treturn username;\n\t}\n\n\tasync updateUserCollection(crowdUser: Record<string, any>) {\n\t\tconst username = crowdUser.crowd_username || crowdUser.username;\n\t\tconst mail = crowdUser.email;\n\n\t\t// If id is not provided, user is linked by crowd_username or email address\n\t\tconst userQuery = {\n\t\t\t...(crowdUser._id && { _id: crowdUser._id }),\n\t\t\t...(!crowdUser._id && {\n\t\t\t\t$or: [{ crowd_username: username }, { 'emails.address': mail }],\n\t\t\t}),\n\t\t};\n\n\t\t// find our existing user if they exist\n\t\tconst user = await Users.findOne(userQuery);\n\n\t\tif (user) {\n\t\t\tconst stampedToken = Accounts._generateStampedLoginToken();\n\n\t\t\tawait Users.updateOne(\n\t\t\t\t{ _id: user._id },\n\t\t\t\t{\n\t\t\t\t\t$push: {\n\t\t\t\t\t\t'services.resume.loginTokens': Accounts._hashStampedToken(stampedToken),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// TODO this can be optmized so places that care about loginTokens being removed are invoked directly\n\t\t\t// instead of having to listen to every watch.users event\n\t\t\tvoid notifyOnUserChangeAsync(async () => {\n\t\t\t\tconst userTokens = await Users.findOneById(crowdUser._id, { projection: { 'services.resume.loginTokens': 1 } });\n\t\t\t\tif (!userTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tclientAction: 'updated',\n\t\t\t\t\tid: crowdUser._id,\n\t\t\t\t\tdiff: { 'services.resume.loginTokens': userTokens.services?.resume?.loginTokens },\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tawait this.syncDataToUser(crowdUser, user._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: user._id,\n\t\t\t\ttoken: stampedToken.token,\n\t\t\t};\n\t\t}\n\n\t\t// Attempt to create the new user\n\t\ttry {\n\t\t\tcrowdUser._id = await Accounts.createUserAsync(crowdUser);\n\n\t\t\tvoid notifyOnUserChangeById({ clientAction: 'inserted', id: crowdUser._id });\n\n\t\t\t// sync the user data\n\t\t\tawait this.syncDataToUser(crowdUser, crowdUser._id);\n\n\t\t\treturn {\n\t\t\t\tuserId: crowdUser._id,\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: 'Error creating new crowd user.', err });\n\t\t}\n\t}\n}\n\nAccounts.registerLoginHandler('crowd', async function (this: typeof Accounts, loginRequest) {\n\tif (!loginRequest.crowd) {\n\t\treturn undefined;\n\t}\n\n\tlogger.info('Init CROWD login', loginRequest.username);\n\n\tif (settings.get('CROWD_Enable') !== true) {\n\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t}\n\n\ttry {\n\t\tconst crowd = new CROWD();\n\t\tconst user = await crowd.authenticate(loginRequest.username, loginRequest.crowdPassword);\n\n\t\tif (user && user.crowd === false) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not a valid crowd user, falling back`);\n\t\t\treturn fallbackDefaultAccountSystem(this, loginRequest.username, loginRequest.crowdPassword);\n\t\t}\n\n\t\tif (!user) {\n\t\t\tlogger.debug(`User ${loginRequest.username} is not allowed to access Rocket.Chat`);\n\t\t\treturn new Meteor.Error('not-authorized', 'User is not authorized by crowd');\n\t\t}\n\n\t\tconst result = await crowd.updateUserCollection(user);\n\n\t\treturn result;\n\t} catch (err: any) {\n\t\tlogger.debug({ err });\n\t\tlogger.error('Crowd user not authenticated due to an error');\n\t\tthrow new Meteor.Error('user-not-found', err.message);\n\t}\n});\n\nconst jobName = 'CROWD_Sync';\n\nMeteor.startup(() => {\n\tsettings.watchMultiple(['CROWD_Sync_User_Data', 'CROWD_Sync_Interval'], async function addCronJobDebounced([data, interval]) {\n\t\tif (data !== true) {\n\t\t\tlogger.info('Disabling CROWD Background Sync');\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst crowd = new CROWD();\n\t\tif (interval) {\n\t\t\tif (await cronJobs.has(jobName)) {\n\t\t\t\tawait cronJobs.remove(jobName);\n\t\t\t}\n\n\t\t\tlogger.info('Enabling CROWD Background Sync');\n\t\t\tconst cronInterval = crowdIntervalValuesToCronMap[String(interval)];\n\n\t\t\tawait cronJobs.add(jobName, cronInterval, () => crowd.sync());\n\t\t}\n\t});\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"198688630bf3c0d40ffb753ea1f9a11709eaeb54"}
