{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/persistence.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/persistence.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/persistence.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/persistence.ts","sourceRoot":"","sources":["app/apps/server/bridges/persistence.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';\nimport { PersistenceBridge } from '@rocket.chat/apps-engine/server/bridges/PersistenceBridge';\nimport type { InsertOneResult } from 'mongodb';\n\nexport class AppPersistenceBridge extends PersistenceBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async purge(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App's persistent storage is being purged: ${appId}`);\n\n\t\tawait this.orch.getPersistenceModel().remove({ appId });\n\t}\n\n\tprotected async create(data: object, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is storing a new object in their persistence.`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(\n\t\t\t`The App ${appId} is storing a new object in their persistence that is associated with some models.`,\n\t\t\tdata,\n\t\t\tassociations,\n\t\t);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, associations, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async readById(id: string, appId: string): Promise<object> {\n\t\tthis.orch.debugLog(`The App ${appId} is reading their data in their persistence with the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOneById(id);\n\n\t\treturn record?.data;\n\t}\n\n\tprotected async readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n\t\tthis.orch.debugLog(`The App ${appId} is searching for records that are associated with the following:`, associations);\n\n\t\tconst records = await this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.find({\n\t\t\t\tappId,\n\t\t\t\tassociations: { $all: associations },\n\t\t\t})\n\t\t\t.toArray();\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async remove(id: string, appId: string): Promise<object | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing one of their records by the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\n\t\tif (!record) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove({ _id: id, appId });\n\n\t\treturn record.data;\n\t}\n\n\tprotected async removeByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tappId: string,\n\t): Promise<Array<object> | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing records with the following associations:`, associations);\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations: {\n\t\t\t\t$all: associations,\n\t\t\t},\n\t\t};\n\n\t\tconst records = await this.orch.getPersistenceModel().find(query).toArray();\n\n\t\tif (!records?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove(query);\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async update(id: string, data: object, _upsert: boolean, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record \"${id}\" to:`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\tprotected async updateByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tdata: object,\n\t\tupsert = true,\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record with association to data as follows:`, associations, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations,\n\t\t};\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.update(query, { $set: { data } }, { upsert })\n\t\t\t.then(({ upsertedId }: any) => upsertedId || '');\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/persistence.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/persistence.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/persistence.ts","sourceRoot":"","sources":["app/apps/server/bridges/persistence.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';\nimport { PersistenceBridge } from '@rocket.chat/apps-engine/server/bridges/PersistenceBridge';\nimport type { InsertOneResult } from 'mongodb';\n\nexport class AppPersistenceBridge extends PersistenceBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async purge(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App's persistent storage is being purged: ${appId}`);\n\n\t\tawait this.orch.getPersistenceModel().remove({ appId });\n\t}\n\n\tprotected async create(data: object, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is storing a new object in their persistence.`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(\n\t\t\t`The App ${appId} is storing a new object in their persistence that is associated with some models.`,\n\t\t\tdata,\n\t\t\tassociations,\n\t\t);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, associations, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async readById(id: string, appId: string): Promise<object> {\n\t\tthis.orch.debugLog(`The App ${appId} is reading their data in their persistence with the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOneById(id);\n\n\t\treturn record?.data;\n\t}\n\n\tprotected async readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n\t\tthis.orch.debugLog(`The App ${appId} is searching for records that are associated with the following:`, associations);\n\n\t\tconst records = await this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.find({\n\t\t\t\tappId,\n\t\t\t\tassociations: { $all: associations },\n\t\t\t})\n\t\t\t.toArray();\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async remove(id: string, appId: string): Promise<object | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing one of their records by the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\n\t\tif (!record) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove({ _id: id, appId });\n\n\t\treturn record.data;\n\t}\n\n\tprotected async removeByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tappId: string,\n\t): Promise<Array<object> | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing records with the following associations:`, associations);\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations: {\n\t\t\t\t$all: associations,\n\t\t\t},\n\t\t};\n\n\t\tconst records = await this.orch.getPersistenceModel().find(query).toArray();\n\n\t\tif (!records?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove(query);\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async update(id: string, data: object, _upsert: boolean, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record \"${id}\" to:`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\tprotected async updateByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tdata: object,\n\t\tupsert = true,\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record with association to data as follows:`, associations, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations,\n\t\t};\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.update(query, { $set: { data } }, { upsert })\n\t\t\t.then(({ upsertedId }: any) => upsertedId || '');\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      AppPersistenceBridge: () => AppPersistenceBridge\n    });\n    let PersistenceBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/PersistenceBridge\", {\n      PersistenceBridge(v) {\n        PersistenceBridge = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppPersistenceBridge extends PersistenceBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.orch = orch;\n      }\n      async purge(appId) {\n        this.orch.debugLog(\"The App's persistent storage is being purged: \".concat(appId));\n        await this.orch.getPersistenceModel().remove({\n          appId\n        });\n      }\n      async create(data, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is storing a new object in their persistence.\"), data);\n        if (typeof data !== 'object') {\n          throw new Error('Attempted to store an invalid data type, it must be an object.');\n        }\n        return this.orch.getPersistenceModel().insertOne({\n          appId,\n          data\n        }).then(_ref => {\n          let {\n            insertedId\n          } = _ref;\n          return insertedId || '';\n        });\n      }\n      async createWithAssociations(data, associations, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is storing a new object in their persistence that is associated with some models.\"), data, associations);\n        if (typeof data !== 'object') {\n          throw new Error('Attempted to store an invalid data type, it must be an object.');\n        }\n        return this.orch.getPersistenceModel().insertOne({\n          appId,\n          associations,\n          data\n        }).then(_ref2 => {\n          let {\n            insertedId\n          } = _ref2;\n          return insertedId || '';\n        });\n      }\n      async readById(id, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is reading their data in their persistence with the id: \\\"\").concat(id, \"\\\"\"));\n        const record = await this.orch.getPersistenceModel().findOneById(id);\n        return record === null || record === void 0 ? void 0 : record.data;\n      }\n      async readByAssociations(associations, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is searching for records that are associated with the following:\"), associations);\n        const records = await this.orch.getPersistenceModel().find({\n          appId,\n          associations: {\n            $all: associations\n          }\n        }).toArray();\n        return Array.isArray(records) ? records.map(r => r.data) : [];\n      }\n      async remove(id, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is removing one of their records by the id: \\\"\").concat(id, \"\\\"\"));\n        const record = await this.orch.getPersistenceModel().findOne({\n          _id: id,\n          appId\n        });\n        if (!record) {\n          return undefined;\n        }\n        await this.orch.getPersistenceModel().remove({\n          _id: id,\n          appId\n        });\n        return record.data;\n      }\n      async removeByAssociations(associations, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is removing records with the following associations:\"), associations);\n        const query = {\n          appId,\n          associations: {\n            $all: associations\n          }\n        };\n        const records = await this.orch.getPersistenceModel().find(query).toArray();\n        if (!(records !== null && records !== void 0 && records.length)) {\n          return undefined;\n        }\n        await this.orch.getPersistenceModel().remove(query);\n        return Array.isArray(records) ? records.map(r => r.data) : [];\n      }\n      async update(id, data, _upsert, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating the record \\\"\").concat(id, \"\\\" to:\"), data);\n        if (typeof data !== 'object') {\n          throw new Error('Attempted to store an invalid data type, it must be an object.');\n        }\n        throw new Error('Not implemented.');\n      }\n      async updateByAssociations(associations, data) {\n        let upsert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        let appId = arguments.length > 3 ? arguments[3] : undefined;\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating the record with association to data as follows:\"), associations, data);\n        if (typeof data !== 'object') {\n          throw new Error('Attempted to store an invalid data type, it must be an object.');\n        }\n        const query = {\n          appId,\n          associations\n        };\n        return this.orch.getPersistenceModel().update(query, {\n          $set: {\n            data\n          }\n        }, {\n          upsert\n        }).then(_ref3 => {\n          let {\n            upsertedId\n          } = _ref3;\n          return upsertedId || '';\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","AppPersistenceBridge","PersistenceBridge","link","v","__reifyWaitForDeps__","constructor","orch","purge","appId","debugLog","concat","getPersistenceModel","remove","create","data","Error","insertOne","then","_ref","insertedId","createWithAssociations","associations","_ref2","readById","id","record","findOneById","readByAssociations","records","find","$all","toArray","Array","isArray","map","r","findOne","_id","undefined","removeByAssociations","query","length","update","_upsert","updateByAssociations","upsert","arguments","$set","_ref3","upsertedId","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/persistence.ts"],"sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { RocketChatAssociationRecord } from '@rocket.chat/apps-engine/definition/metadata';\nimport { PersistenceBridge } from '@rocket.chat/apps-engine/server/bridges/PersistenceBridge';\nimport type { InsertOneResult } from 'mongodb';\n\nexport class AppPersistenceBridge extends PersistenceBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async purge(appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App's persistent storage is being purged: ${appId}`);\n\n\t\tawait this.orch.getPersistenceModel().remove({ appId });\n\t}\n\n\tprotected async create(data: object, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is storing a new object in their persistence.`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(\n\t\t\t`The App ${appId} is storing a new object in their persistence that is associated with some models.`,\n\t\t\tdata,\n\t\t\tassociations,\n\t\t);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.insertOne({ appId, associations, data })\n\t\t\t.then(({ insertedId }: InsertOneResult) => (insertedId as unknown as string) || '');\n\t}\n\n\tprotected async readById(id: string, appId: string): Promise<object> {\n\t\tthis.orch.debugLog(`The App ${appId} is reading their data in their persistence with the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOneById(id);\n\n\t\treturn record?.data;\n\t}\n\n\tprotected async readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): Promise<Array<object>> {\n\t\tthis.orch.debugLog(`The App ${appId} is searching for records that are associated with the following:`, associations);\n\n\t\tconst records = await this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.find({\n\t\t\t\tappId,\n\t\t\t\tassociations: { $all: associations },\n\t\t\t})\n\t\t\t.toArray();\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async remove(id: string, appId: string): Promise<object | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing one of their records by the id: \"${id}\"`);\n\n\t\tconst record = await this.orch.getPersistenceModel().findOne({ _id: id, appId });\n\n\t\tif (!record) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove({ _id: id, appId });\n\n\t\treturn record.data;\n\t}\n\n\tprotected async removeByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tappId: string,\n\t): Promise<Array<object> | undefined> {\n\t\tthis.orch.debugLog(`The App ${appId} is removing records with the following associations:`, associations);\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations: {\n\t\t\t\t$all: associations,\n\t\t\t},\n\t\t};\n\n\t\tconst records = await this.orch.getPersistenceModel().find(query).toArray();\n\n\t\tif (!records?.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.orch.getPersistenceModel().remove(query);\n\n\t\treturn Array.isArray(records) ? records.map((r) => r.data) : [];\n\t}\n\n\tprotected async update(id: string, data: object, _upsert: boolean, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record \"${id}\" to:`, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\tprotected async updateByAssociations(\n\t\tassociations: Array<RocketChatAssociationRecord>,\n\t\tdata: object,\n\t\tupsert = true,\n\t\tappId: string,\n\t): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the record with association to data as follows:`, associations, data);\n\n\t\tif (typeof data !== 'object') {\n\t\t\tthrow new Error('Attempted to store an invalid data type, it must be an object.');\n\t\t}\n\n\t\tconst query = {\n\t\t\tappId,\n\t\t\tassociations,\n\t\t};\n\n\t\treturn this.orch\n\t\t\t.getPersistenceModel()\n\t\t\t.update(query, { $set: { data } }, { upsert })\n\t\t\t.then(({ upsertedId }: any) => upsertedId || '');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"cb1f1571ede2843a184aaf6d4bc3c4333bf9a451"}
