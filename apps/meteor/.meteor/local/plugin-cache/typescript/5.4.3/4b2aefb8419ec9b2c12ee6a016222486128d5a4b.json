{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/moderation.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/moderation.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/moderation.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/moderation.ts","sourceRoot":"","sources":["app/api/server/v1/moderation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IModerationReport, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { ModerationReports, Users } from '@rocket.chat/models';\nimport {\n\tisReportHistoryProps,\n\tisArchiveReportProps,\n\tisReportInfoParams,\n\tisGetUserReportsParams,\n\tisModerationReportUserPost,\n\tisModerationDeleteMsgHistoryParams,\n\tisReportsByMsgIdParams,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { deleteReportedMessages } from '../../../../server/lib/moderation/deleteReportedMessages';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\ntype ReportMessage = Pick<IModerationReport, '_id' | 'message' | 'ts' | 'room'>;\n\nAPI.v1.addRoute(\n\t'moderation.reportsByUsers',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findMessageReportsGroupedByUser(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector, true);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.userReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findUserReports(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector);\n\n\t\t\tconst result = {\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t};\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(userId, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst uniqueMessages: ReportMessage[] = [];\n\t\t\tconst visited = new Set<string>();\n\t\t\tfor (const report of reports) {\n\t\t\t\tif (visited.has(report.message._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvisited.add(report.message._id);\n\t\t\t\tuniqueMessages.push(report);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\tmessages: uniqueMessages,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportsByUserId',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<IUser>(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tactive: 1,\n\t\t\t\t\troles: 1,\n\t\t\t\t\temails: 1,\n\t\t\t\t\tcreatedAt: 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst { cursor, totalCount } = ModerationReports.findUserReportsByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst emailSet = new Map<IUserEmail['address'], IUserEmail>();\n\n\t\t\treports.forEach((report) => {\n\t\t\t\tconst email = report.reportedUser?.emails?.[0];\n\t\t\t\tif (email) {\n\t\t\t\t\temailSet.set(email.address, email);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (user) {\n\t\t\t\tuser.emails = Array.from(emailSet.values());\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.deleteReportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationDeleteMsgHistoryParams,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// TODO change complicated params\n\t\t\tconst { userId, reason } = this.bodyParams;\n\n\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\n\t\t\tconst { user: moderator } = this;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, '', {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort: { ts: -1 },\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (total === 0) {\n\t\t\t\treturn API.v1.failure('No reported messages found for this user.');\n\t\t\t}\n\n\t\t\tawait deleteReportedMessages(\n\t\t\t\tmessages.map((message) => message.message),\n\t\t\t\tmoderator,\n\t\t\t);\n\n\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, this.userId, sanitizedReason, 'DELETE Messages');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, msgId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (userId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message.u._id': userId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (msgId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message._id': msgId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason?.trim() ? reason : 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tif (userId) {\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\t\t\t} else {\n\t\t\t\tawait ModerationReports.hideMessageReportsByMessageId(msgId as string, moderatorId, sanitizedReason, action);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissUserReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (!userId) {\n\t\t\t\treturn API.v1.failure('error-user-id-param-not-provided');\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason ?? 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tawait ModerationReports.hideUserReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportsByMsgIdParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { msgId } = this.queryParams;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { selector = '' } = this.queryParams;\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportInfo',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t\tvalidateParams: isReportInfoParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { reportId } = this.queryParams;\n\n\t\t\tconst report = await ModerationReports.findOneById(reportId);\n\n\t\t\tif (!report) {\n\t\t\t\treturn API.v1.failure('error-report-not-found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ report });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportUser',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationReportUserPost,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, description } = this.bodyParams;\n\n\t\t\tconst {\n\t\t\t\tuser: { _id, name, username, createdAt },\n\t\t\t} = this;\n\n\t\t\tconst reportedUser = await Users.findOneById(userId, { projection: { _id: 1, name: 1, username: 1, emails: 1, createdAt: 1 } });\n\n\t\t\tif (!reportedUser) {\n\t\t\t\treturn API.v1.failure('Invalid user id provided.');\n\t\t\t}\n\n\t\t\tawait ModerationReports.createWithDescriptionAndUser(reportedUser, description, { _id, name, username, createdAt });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/moderation.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/moderation.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/moderation.ts","sourceRoot":"","sources":["app/api/server/v1/moderation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IModerationReport, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { ModerationReports, Users } from '@rocket.chat/models';\nimport {\n\tisReportHistoryProps,\n\tisArchiveReportProps,\n\tisReportInfoParams,\n\tisGetUserReportsParams,\n\tisModerationReportUserPost,\n\tisModerationDeleteMsgHistoryParams,\n\tisReportsByMsgIdParams,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { deleteReportedMessages } from '../../../../server/lib/moderation/deleteReportedMessages';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\ntype ReportMessage = Pick<IModerationReport, '_id' | 'message' | 'ts' | 'room'>;\n\nAPI.v1.addRoute(\n\t'moderation.reportsByUsers',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findMessageReportsGroupedByUser(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector, true);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.userReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findUserReports(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector);\n\n\t\t\tconst result = {\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t};\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(userId, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst uniqueMessages: ReportMessage[] = [];\n\t\t\tconst visited = new Set<string>();\n\t\t\tfor (const report of reports) {\n\t\t\t\tif (visited.has(report.message._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvisited.add(report.message._id);\n\t\t\t\tuniqueMessages.push(report);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\tmessages: uniqueMessages,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportsByUserId',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<IUser>(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tactive: 1,\n\t\t\t\t\troles: 1,\n\t\t\t\t\temails: 1,\n\t\t\t\t\tcreatedAt: 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst { cursor, totalCount } = ModerationReports.findUserReportsByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst emailSet = new Map<IUserEmail['address'], IUserEmail>();\n\n\t\t\treports.forEach((report) => {\n\t\t\t\tconst email = report.reportedUser?.emails?.[0];\n\t\t\t\tif (email) {\n\t\t\t\t\temailSet.set(email.address, email);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (user) {\n\t\t\t\tuser.emails = Array.from(emailSet.values());\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.deleteReportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationDeleteMsgHistoryParams,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// TODO change complicated params\n\t\t\tconst { userId, reason } = this.bodyParams;\n\n\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\n\t\t\tconst { user: moderator } = this;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, '', {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort: { ts: -1 },\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (total === 0) {\n\t\t\t\treturn API.v1.failure('No reported messages found for this user.');\n\t\t\t}\n\n\t\t\tawait deleteReportedMessages(\n\t\t\t\tmessages.map((message) => message.message),\n\t\t\t\tmoderator,\n\t\t\t);\n\n\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, this.userId, sanitizedReason, 'DELETE Messages');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, msgId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (userId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message.u._id': userId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (msgId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message._id': msgId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason?.trim() ? reason : 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tif (userId) {\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\t\t\t} else {\n\t\t\t\tawait ModerationReports.hideMessageReportsByMessageId(msgId as string, moderatorId, sanitizedReason, action);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissUserReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (!userId) {\n\t\t\t\treturn API.v1.failure('error-user-id-param-not-provided');\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason ?? 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tawait ModerationReports.hideUserReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportsByMsgIdParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { msgId } = this.queryParams;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { selector = '' } = this.queryParams;\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportInfo',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t\tvalidateParams: isReportInfoParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { reportId } = this.queryParams;\n\n\t\t\tconst report = await ModerationReports.findOneById(reportId);\n\n\t\t\tif (!report) {\n\t\t\t\treturn API.v1.failure('error-report-not-found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ report });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportUser',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationReportUserPost,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, description } = this.bodyParams;\n\n\t\t\tconst {\n\t\t\t\tuser: { _id, name, username, createdAt },\n\t\t\t} = this;\n\n\t\t\tconst reportedUser = await Users.findOneById(userId, { projection: { _id: 1, name: 1, username: 1, emails: 1, createdAt: 1 } });\n\n\t\t\tif (!reportedUser) {\n\t\t\t\treturn API.v1.failure('Invalid user id provided.');\n\t\t\t}\n\n\t\t\tawait ModerationReports.createWithDescriptionAndUser(reportedUser, description, { _id, name, username, createdAt });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let ModerationReports, Users;\n    module.link(\"@rocket.chat/models\", {\n      ModerationReports(v) {\n        ModerationReports = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let isReportHistoryProps, isArchiveReportProps, isReportInfoParams, isGetUserReportsParams, isModerationReportUserPost, isModerationDeleteMsgHistoryParams, isReportsByMsgIdParams;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isReportHistoryProps(v) {\n        isReportHistoryProps = v;\n      },\n      isArchiveReportProps(v) {\n        isArchiveReportProps = v;\n      },\n      isReportInfoParams(v) {\n        isReportInfoParams = v;\n      },\n      isGetUserReportsParams(v) {\n        isGetUserReportsParams = v;\n      },\n      isModerationReportUserPost(v) {\n        isModerationReportUserPost = v;\n      },\n      isModerationDeleteMsgHistoryParams(v) {\n        isModerationDeleteMsgHistoryParams = v;\n      },\n      isReportsByMsgIdParams(v) {\n        isReportsByMsgIdParams = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let deleteReportedMessages;\n    module.link(\"../../../../server/lib/moderation/deleteReportedMessages\", {\n      deleteReportedMessages(v) {\n        deleteReportedMessages = v;\n      }\n    }, 3);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 4);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('moderation.reportsByUsers', {\n      authRequired: true,\n      validateParams: isReportHistoryProps,\n      permissionsRequired: ['view-moderation-console']\n    }, {\n      async get() {\n        const {\n          latest: _latest,\n          oldest: _oldest,\n          selector = ''\n        } = this.queryParams;\n        const {\n          count = 20,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const latest = _latest ? new Date(_latest) : new Date();\n        const oldest = _oldest ? new Date(_oldest) : new Date(0);\n        const escapedSelector = escapeRegExp(selector);\n        const reports = await ModerationReports.findMessageReportsGroupedByUser(latest, oldest, escapedSelector, {\n          offset,\n          count,\n          sort\n        }).toArray();\n        if (reports.length === 0) {\n          return API.v1.success({\n            reports,\n            count: 0,\n            offset,\n            total: 0\n          });\n        }\n        const total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector, true);\n        return API.v1.success({\n          reports,\n          count: reports.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('moderation.userReports', {\n      authRequired: true,\n      validateParams: isReportHistoryProps,\n      permissionsRequired: ['view-moderation-console']\n    }, {\n      async get() {\n        const {\n          latest: _latest,\n          oldest: _oldest,\n          selector = ''\n        } = this.queryParams;\n        const {\n          count = 20,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const latest = _latest ? new Date(_latest) : new Date();\n        const oldest = _oldest ? new Date(_oldest) : new Date(0);\n        const escapedSelector = escapeRegExp(selector);\n        const reports = await ModerationReports.findUserReports(latest, oldest, escapedSelector, {\n          offset,\n          count,\n          sort\n        }).toArray();\n        if (reports.length === 0) {\n          return API.v1.success({\n            reports,\n            count: 0,\n            offset,\n            total: 0\n          });\n        }\n        const total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector);\n        const result = {\n          reports,\n          count: reports.length,\n          offset,\n          total\n        };\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('moderation.user.reportedMessages', {\n      authRequired: true,\n      validateParams: isGetUserReportsParams,\n      permissionsRequired: ['view-moderation-console']\n    }, {\n      async get() {\n        const {\n          userId,\n          selector = ''\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          count = 50,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const user = await Users.findOneById(userId, {\n          projection: {\n            _id: 1,\n            username: 1,\n            name: 1\n          }\n        });\n        const escapedSelector = escapeRegExp(selector);\n        const {\n          cursor,\n          totalCount\n        } = ModerationReports.findReportedMessagesByReportedUserId(userId, escapedSelector, {\n          offset,\n          count,\n          sort\n        });\n        const [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n        const uniqueMessages = [];\n        const visited = new Set();\n        for (const report of reports) {\n          if (visited.has(report.message._id)) {\n            continue;\n          }\n          visited.add(report.message._id);\n          uniqueMessages.push(report);\n        }\n        return API.v1.success({\n          user,\n          messages: uniqueMessages,\n          count: reports.length,\n          total,\n          offset\n        });\n      }\n    });\n    API.v1.addRoute('moderation.user.reportsByUserId', {\n      authRequired: true,\n      validateParams: isGetUserReportsParams,\n      permissionsRequired: ['view-moderation-console']\n    }, {\n      async get() {\n        const {\n          userId,\n          selector = ''\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          count = 50,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const user = await Users.findOneById(userId, {\n          projection: {\n            _id: 1,\n            username: 1,\n            name: 1,\n            avatarETag: 1,\n            active: 1,\n            roles: 1,\n            emails: 1,\n            createdAt: 1\n          }\n        });\n        const escapedSelector = escapeRegExp(selector);\n        const {\n          cursor,\n          totalCount\n        } = ModerationReports.findUserReportsByReportedUserId(userId, escapedSelector, {\n          offset,\n          count,\n          sort\n        });\n        const [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n        const emailSet = new Map();\n        reports.forEach(report => {\n          var _report$reportedUser, _report$reportedUser$;\n          const email = (_report$reportedUser = report.reportedUser) === null || _report$reportedUser === void 0 ? void 0 : (_report$reportedUser$ = _report$reportedUser.emails) === null || _report$reportedUser$ === void 0 ? void 0 : _report$reportedUser$[0];\n          if (email) {\n            emailSet.set(email.address, email);\n          }\n        });\n        if (user) {\n          user.emails = Array.from(emailSet.values());\n        }\n        return API.v1.success({\n          user,\n          reports,\n          count: reports.length,\n          total,\n          offset\n        });\n      }\n    });\n    API.v1.addRoute('moderation.user.deleteReportedMessages', {\n      authRequired: true,\n      validateParams: isModerationDeleteMsgHistoryParams,\n      permissionsRequired: ['manage-moderation-actions']\n    }, {\n      async post() {\n        // TODO change complicated params\n        const {\n          userId,\n          reason\n        } = this.bodyParams;\n        const sanitizedReason = reason !== null && reason !== void 0 && reason.trim() ? reason : 'No reason provided';\n        const {\n          user: moderator\n        } = this;\n        const {\n          count = 50,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const {\n          cursor,\n          totalCount\n        } = ModerationReports.findReportedMessagesByReportedUserId(userId, '', {\n          offset,\n          count,\n          sort: {\n            ts: -1\n          }\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        if (total === 0) {\n          return API.v1.failure('No reported messages found for this user.');\n        }\n        await deleteReportedMessages(messages.map(message => message.message), moderator);\n        await ModerationReports.hideMessageReportsByUserId(userId, this.userId, sanitizedReason, 'DELETE Messages');\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('moderation.dismissReports', {\n      authRequired: true,\n      validateParams: isArchiveReportProps,\n      permissionsRequired: ['manage-moderation-actions']\n    }, {\n      async post() {\n        const {\n          userId,\n          msgId,\n          reason,\n          action: actionParam\n        } = this.bodyParams;\n        if (userId) {\n          const report = await ModerationReports.findOne({\n            'message.u._id': userId,\n            '_hidden': {\n              $ne: true\n            }\n          }, {\n            projection: {\n              _id: 1\n            }\n          });\n          if (!report) {\n            return API.v1.failure('no-reports-found');\n          }\n        }\n        if (msgId) {\n          const report = await ModerationReports.findOne({\n            'message._id': msgId,\n            '_hidden': {\n              $ne: true\n            }\n          }, {\n            projection: {\n              _id: 1\n            }\n          });\n          if (!report) {\n            return API.v1.failure('no-reports-found');\n          }\n        }\n        const sanitizedReason = reason !== null && reason !== void 0 && reason.trim() ? reason : 'No reason provided';\n        const action = actionParam !== null && actionParam !== void 0 ? actionParam : 'None';\n        const {\n          userId: moderatorId\n        } = this;\n        if (userId) {\n          await ModerationReports.hideMessageReportsByUserId(userId, moderatorId, sanitizedReason, action);\n        } else {\n          await ModerationReports.hideMessageReportsByMessageId(msgId, moderatorId, sanitizedReason, action);\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('moderation.dismissUserReports', {\n      authRequired: true,\n      validateParams: isArchiveReportProps,\n      permissionsRequired: ['manage-moderation-actions']\n    }, {\n      async post() {\n        const {\n          userId,\n          reason,\n          action: actionParam\n        } = this.bodyParams;\n        if (!userId) {\n          return API.v1.failure('error-user-id-param-not-provided');\n        }\n        const sanitizedReason = reason !== null && reason !== void 0 ? reason : 'No reason provided';\n        const action = actionParam !== null && actionParam !== void 0 ? actionParam : 'None';\n        const {\n          userId: moderatorId\n        } = this;\n        await ModerationReports.hideUserReportsByUserId(userId, moderatorId, sanitizedReason, action);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('moderation.reports', {\n      authRequired: true,\n      validateParams: isReportsByMsgIdParams,\n      permissionsRequired: ['view-moderation-console']\n    }, {\n      async get() {\n        const {\n          msgId\n        } = this.queryParams;\n        const {\n          count = 50,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          selector = ''\n        } = this.queryParams;\n        const escapedSelector = escapeRegExp(selector);\n        const {\n          cursor,\n          totalCount\n        } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, {\n          count,\n          sort,\n          offset\n        });\n        const [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          reports,\n          count: reports.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('moderation.reportInfo', {\n      authRequired: true,\n      permissionsRequired: ['view-moderation-console'],\n      validateParams: isReportInfoParams\n    }, {\n      async get() {\n        const {\n          reportId\n        } = this.queryParams;\n        const report = await ModerationReports.findOneById(reportId);\n        if (!report) {\n          return API.v1.failure('error-report-not-found');\n        }\n        return API.v1.success({\n          report\n        });\n      }\n    });\n    API.v1.addRoute('moderation.reportUser', {\n      authRequired: true,\n      validateParams: isModerationReportUserPost\n    }, {\n      async post() {\n        const {\n          userId,\n          description\n        } = this.bodyParams;\n        const {\n          user: {\n            _id,\n            name,\n            username,\n            createdAt\n          }\n        } = this;\n        const reportedUser = await Users.findOneById(userId, {\n          projection: {\n            _id: 1,\n            name: 1,\n            username: 1,\n            emails: 1,\n            createdAt: 1\n          }\n        });\n        if (!reportedUser) {\n          return API.v1.failure('Invalid user id provided.');\n        }\n        await ModerationReports.createWithDescriptionAndUser(reportedUser, description, {\n          _id,\n          name,\n          username,\n          createdAt\n        });\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["ModerationReports","Users","module","link","v","isReportHistoryProps","isArchiveReportProps","isReportInfoParams","isGetUserReportsParams","isModerationReportUserPost","isModerationDeleteMsgHistoryParams","isReportsByMsgIdParams","escapeRegExp","deleteReportedMessages","API","getPaginationItems","__reifyWaitForDeps__","v1","addRoute","authRequired","validateParams","permissionsRequired","get","latest","_latest","oldest","_oldest","selector","queryParams","count","offset","sort","parseJsonQuery","Date","escapedSelector","reports","findMessageReportsGroupedByUser","toArray","length","success","total","getTotalUniqueReportedUsers","findUserReports","result","userId","user","findOneById","projection","_id","username","name","cursor","totalCount","findReportedMessagesByReportedUserId","Promise","all","uniqueMessages","visited","Set","report","has","message","add","push","messages","avatarETag","active","roles","emails","createdAt","findUserReportsByReportedUserId","emailSet","Map","forEach","_report$reportedUser","_report$reportedUser$","email","reportedUser","set","address","Array","from","values","post","reason","bodyParams","sanitizedReason","trim","moderator","ts","failure","map","hideMessageReportsByUserId","msgId","action","actionParam","findOne","$ne","moderatorId","hideMessageReportsByMessageId","hideUserReportsByUserId","findReportsByMessageId","reportId","description","createWithDescriptionAndUser","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/moderation.ts"],"sourcesContent":["import type { IModerationReport, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { ModerationReports, Users } from '@rocket.chat/models';\nimport {\n\tisReportHistoryProps,\n\tisArchiveReportProps,\n\tisReportInfoParams,\n\tisGetUserReportsParams,\n\tisModerationReportUserPost,\n\tisModerationDeleteMsgHistoryParams,\n\tisReportsByMsgIdParams,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { deleteReportedMessages } from '../../../../server/lib/moderation/deleteReportedMessages';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\ntype ReportMessage = Pick<IModerationReport, '_id' | 'message' | 'ts' | 'room'>;\n\nAPI.v1.addRoute(\n\t'moderation.reportsByUsers',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findMessageReportsGroupedByUser(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector, true);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.userReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportHistoryProps,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { latest: _latest, oldest: _oldest, selector = '' } = this.queryParams;\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst latest = _latest ? new Date(_latest) : new Date();\n\n\t\t\tconst oldest = _oldest ? new Date(_oldest) : new Date(0);\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst reports = await ModerationReports.findUserReports(latest, oldest, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t}).toArray();\n\n\t\t\tif (reports.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\treports,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\toffset,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst total = await ModerationReports.getTotalUniqueReportedUsers(latest, oldest, escapedSelector);\n\n\t\t\tconst result = {\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t};\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(userId, {\n\t\t\t\tprojection: { _id: 1, username: 1, name: 1 },\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst uniqueMessages: ReportMessage[] = [];\n\t\t\tconst visited = new Set<string>();\n\t\t\tfor (const report of reports) {\n\t\t\t\tif (visited.has(report.message._id)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvisited.add(report.message._id);\n\t\t\t\tuniqueMessages.push(report);\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\tmessages: uniqueMessages,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.reportsByUserId',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isGetUserReportsParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { userId, selector = '' } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst user = await Users.findOneById<IUser>(userId, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tactive: 1,\n\t\t\t\t\troles: 1,\n\t\t\t\t\temails: 1,\n\t\t\t\t\tcreatedAt: 1,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\t\t\tconst { cursor, totalCount } = ModerationReports.findUserReportsByReportedUserId(userId, escapedSelector, {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort,\n\t\t\t});\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tconst emailSet = new Map<IUserEmail['address'], IUserEmail>();\n\n\t\t\treports.forEach((report) => {\n\t\t\t\tconst email = report.reportedUser?.emails?.[0];\n\t\t\t\tif (email) {\n\t\t\t\t\temailSet.set(email.address, email);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (user) {\n\t\t\t\tuser.emails = Array.from(emailSet.values());\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tuser,\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\ttotal,\n\t\t\t\toffset,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.user.deleteReportedMessages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationDeleteMsgHistoryParams,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\t// TODO change complicated params\n\t\t\tconst { userId, reason } = this.bodyParams;\n\n\t\t\tconst sanitizedReason = reason?.trim() ? reason : 'No reason provided';\n\n\t\t\tconst { user: moderator } = this;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportedMessagesByReportedUserId(userId, '', {\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tsort: { ts: -1 },\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (total === 0) {\n\t\t\t\treturn API.v1.failure('No reported messages found for this user.');\n\t\t\t}\n\n\t\t\tawait deleteReportedMessages(\n\t\t\t\tmessages.map((message) => message.message),\n\t\t\t\tmoderator,\n\t\t\t);\n\n\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, this.userId, sanitizedReason, 'DELETE Messages');\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, msgId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (userId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message.u._id': userId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (msgId) {\n\t\t\t\tconst report = await ModerationReports.findOne({ 'message._id': msgId, '_hidden': { $ne: true } }, { projection: { _id: 1 } });\n\t\t\t\tif (!report) {\n\t\t\t\t\treturn API.v1.failure('no-reports-found');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason?.trim() ? reason : 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tif (userId) {\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\t\t\t} else {\n\t\t\t\tawait ModerationReports.hideMessageReportsByMessageId(msgId as string, moderatorId, sanitizedReason, action);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.dismissUserReports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isArchiveReportProps,\n\t\tpermissionsRequired: ['manage-moderation-actions'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, reason, action: actionParam } = this.bodyParams;\n\n\t\t\tif (!userId) {\n\t\t\t\treturn API.v1.failure('error-user-id-param-not-provided');\n\t\t\t}\n\n\t\t\tconst sanitizedReason: string = reason ?? 'No reason provided';\n\t\t\tconst action: string = actionParam ?? 'None';\n\n\t\t\tconst { userId: moderatorId } = this;\n\n\t\t\tawait ModerationReports.hideUserReportsByUserId(userId, moderatorId, sanitizedReason, action);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reports',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isReportsByMsgIdParams,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { msgId } = this.queryParams;\n\n\t\t\tconst { count = 50, offset = 0 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { selector = '' } = this.queryParams;\n\n\t\t\tconst escapedSelector = escapeRegExp(selector);\n\n\t\t\tconst { cursor, totalCount } = ModerationReports.findReportsByMessageId(msgId, escapedSelector, { count, sort, offset });\n\n\t\t\tconst [reports, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\treports,\n\t\t\t\tcount: reports.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportInfo',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-moderation-console'],\n\t\tvalidateParams: isReportInfoParams,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { reportId } = this.queryParams;\n\n\t\t\tconst report = await ModerationReports.findOneById(reportId);\n\n\t\t\tif (!report) {\n\t\t\t\treturn API.v1.failure('error-report-not-found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ report });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'moderation.reportUser',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isModerationReportUserPost,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, description } = this.bodyParams;\n\n\t\t\tconst {\n\t\t\t\tuser: { _id, name, username, createdAt },\n\t\t\t} = this;\n\n\t\t\tconst reportedUser = await Users.findOneById(userId, { projection: { _id: 1, name: 1, username: 1, emails: 1, createdAt: 1 } });\n\n\t\t\tif (!reportedUser) {\n\t\t\t\treturn API.v1.failure('Invalid user id provided.');\n\t\t\t}\n\n\t\t\tawait ModerationReports.createWithDescriptionAndUser(reportedUser, description, { _id, name, username, createdAt });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4b2aefb8419ec9b2c12ee6a016222486128d5a4b"}
