{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/dns.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/dns.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/dns.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/dns.ts","sourceRoot":"","sources":["app/api/server/v1/dns.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,iDAAiD,CAAC;AACzF,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;QACvF,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;QACvF,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { resolveSRV, resolveTXT } from '../../../federation/server/functions/resolveDNS';\nimport { API } from '../api';\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.srv',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveSRV(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.txt',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/dns.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/dns.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/dns.ts","sourceRoot":"","sources":["app/api/server/v1/dns.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,iDAAiD,CAAC;AACzF,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,GAAG;QACR,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;QACvF,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,EACtB;IACC,KAAK,CAAC,IAAI;QACT,KAAK,CACJ,IAAI,CAAC,WAAW,EAChB,KAAK,CAAC,eAAe,CAAC;YACrB,GAAG,EAAE,MAAM;SACX,CAAC,CACF,CAAC;QAEF,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;QACvF,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;QAEvC,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACrC,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { resolveSRV, resolveTXT } from '../../../federation/server/functions/resolveDNS';\nimport { API } from '../api';\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.srv',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveSRV(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.txt',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let resolveSRV, resolveTXT;\n    module.link(\"../../../federation/server/functions/resolveDNS\", {\n      resolveSRV(v) {\n        resolveSRV = v;\n      },\n      resolveTXT(v) {\n        resolveTXT = v;\n      }\n    }, 2);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * @openapi\n     *  /api/v1/dns.resolve.srv:\n     * \t  get:\n     *      description: Resolves DNS service records (SRV records) for a hostname\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      parameters:\n     *        - name: url\n     *          in: query\n     *          description: The hostname\n     *          required: true\n     *          schema:\n     *            type: string\n     *          example: open.rocket.chat\n     *      responses:\n     *        200:\n     *          description: The resolved records\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      resolved:\n     *                        type: object\n     *                        properties:\n     *                          target:\n     *                            type: string\n     *                          priority:\n     *                            type: number\n     *                          weight:\n     *                            type: number\n     *                          port:\n     *                            type: number\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('dns.resolve.srv', {\n      authRequired: true\n    }, {\n      async get() {\n        check(this.queryParams, Match.ObjectIncluding({\n          url: String\n        }));\n        const {\n          url\n        } = this.queryParams;\n        if (!url) {\n          throw new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n        }\n        const resolved = await resolveSRV(url);\n        return API.v1.success({\n          resolved\n        });\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/dns.resolve.txt:\n     * \t  get:\n     *      description: Resolves DNS text records (TXT records) for a hostname\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      parameters:\n     *        - name: url\n     *          in: query\n     *          description: The hostname\n     *          required: true\n     *          schema:\n     *            type: string\n     *          example: open.rocket.chat\n     *      responses:\n     *        200:\n     *          description: The resolved records\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      resolved:\n     *                        type: string\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('dns.resolve.txt', {\n      authRequired: true\n    }, {\n      async post() {\n        check(this.queryParams, Match.ObjectIncluding({\n          url: String\n        }));\n        const {\n          url\n        } = this.queryParams;\n        if (!url) {\n          throw new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n        }\n        const resolved = await resolveTXT(url);\n        return API.v1.success({\n          resolved\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Match","check","module","link","v","Meteor","resolveSRV","resolveTXT","API","__reifyWaitForDeps__","v1","addRoute","authRequired","get","queryParams","ObjectIncluding","url","String","Error","resolved","success","post","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/dns.ts"],"sourcesContent":["import { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { resolveSRV, resolveTXT } from '../../../federation/server/functions/resolveDNS';\nimport { API } from '../api';\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.srv:\n * \t  get:\n *      description: Resolves DNS service records (SRV records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: object\n *                        properties:\n *                          target:\n *                            type: string\n *                          priority:\n *                            type: number\n *                          weight:\n *                            type: number\n *                          port:\n *                            type: number\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.srv',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveSRV(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/dns.resolve.txt:\n * \t  get:\n *      description: Resolves DNS text records (TXT records) for a hostname\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: url\n *          in: query\n *          description: The hostname\n *          required: true\n *          schema:\n *            type: string\n *          example: open.rocket.chat\n *      responses:\n *        200:\n *          description: The resolved records\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      resolved:\n *                        type: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'dns.resolve.txt',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\turl: String,\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { url } = this.queryParams;\n\t\t\tif (!url) {\n\t\t\t\tthrow new Meteor.Error('error-missing-param', 'The required \"url\" param is missing.');\n\t\t\t}\n\n\t\t\tconst resolved = await resolveTXT(url);\n\n\t\t\treturn API.v1.success({ resolved });\n\t\t},\n\t},\n);\n"],"mappings":";;;IAAA,IAAAA,KAAS,EAAAC,KAAK;IAAEC,MAAK,CAAEC,IAAA,eAAM,EAAc;MAACH,MAAAI,CAAA;QAAAJ,KAAA,GAAAI,CAAA;MAAA;MAAAH,MAAAG,CAAA;QAAAH,KAAA,GAAAG,CAAA;MAAA;IAAA;IAAA,IAAAC,MAAA;IAAAH,MAAA,CAAAC,IAAA;MAAAE,OAAAD,CAAA;QAAAC,MAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,UAAA,EAAAC,UAAA;IAAAL,MAAA,CAAAC,IAAA;MAAAG,WAAAF,CAAA;QAAAE,UAAA,GAAAF,CAAA;MAAA;MAAAG,WAAAH,CAAA;QAAAG,UAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,GAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAK,IAAAJ,CAAA;QAAAI,GAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,oBAAA,WAAAA,oBAAA;IAM5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2CAD,GAAG,CAACE,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,GAAGA,CAAA;QACRZ,KAAK,CACJ,IAAI,CAACa,WAAW,EAChBd,KAAK,CAACe,eAAe,CAAC;UACrBC,GAAG,EAAEC;SACL,CAAC,CACF;QAED,MAAM;UAAED;QAAG,CAAE,GAAG,IAAI,CAACF,WAAW;QAChC,IAAI,CAACE,GAAG,EAAE;UACT,MAAM,IAAIX,MAAM,CAACa,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC;QACtF;QAEA,MAAMC,QAAQ,GAAG,MAAMb,UAAU,CAACU,GAAG,CAAC;QAEtC,OAAOR,GAAG,CAACE,EAAE,CAACU,OAAO,CAAC;UAAED;QAAQ,CAAE,CAAC;MACpC;KACA,CACD;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkCAX,GAAG,CAACE,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMS,IAAIA,CAAA;QACTpB,KAAK,CACJ,IAAI,CAACa,WAAW,EAChBd,KAAK,CAACe,eAAe,CAAC;UACrBC,GAAG,EAAEC;SACL,CAAC,CACF;QAED,MAAM;UAAED;QAAG,CAAE,GAAG,IAAI,CAACF,WAAW;QAChC,IAAI,CAACE,GAAG,EAAE;UACT,MAAM,IAAIX,MAAM,CAACa,KAAK,CAAC,qBAAqB,EAAE,sCAAsC,CAAC;QACtF;QAEA,MAAMC,QAAQ,GAAG,MAAMZ,UAAU,CAACS,GAAG,CAAC;QAEtC,OAAOR,GAAG,CAACE,EAAE,CAACU,OAAO,CAAC;UAAED;QAAQ,CAAE,CAAC;MACpC;KACA,CACD;IAACG,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"985222fb28b17da044c9c84a5bb02f70e50c3264"}
