{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ImportData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/ImportData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ImportData.ts","inputSourceMap":{"version":3,"file":"server/models/raw/ImportData.ts","sourceRoot":"","sources":["server/models/raw/ImportData.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,aAAc,SAAQ,OAAsB;IACxD,YAAY,EAAM,EAAE,KAA0D;QAC7E,KAAK,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAES,YAAY;QACrB,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAkC,CAAC;IACzE,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAqC,CAAC;IAC/E,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAqC,CAAC;IAC/E,CAAC;IAED,uBAAuB;QACtB,OAAO,IAAI,CAAC,IAAI,CACf;YACC,QAAQ,EAAE,MAAM;SAChB,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;gBACnB,eAAe,EAAE,CAAC;gBAClB,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,WAAW,EAAE,CAAC;aACd;SACD,CACD,CAAC,OAAO,EAAE,CAAC;IACb,CAAC;IAED,0BAA0B;QACzB,OAAO,IAAI,CAAC,IAAI,CACf;YACC,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE;gBACT,GAAG,EAAE,GAAG;aACR;SACD,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;gBACnB,WAAW,EAAE,CAAC;gBACd,eAAe,EAAE,CAAC;gBAClB,QAAQ,EAAE,CAAC;aACX;SACD,CACD,CAAC,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,2BAA2B;QAChC,OAAO,CACN,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;YAC9B,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,GAAG;SACb,CAAC,CAAC,GAAG,CAAC,CACP,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa;QAClB,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,mCAAmC,CAAC,iBAAyB;QAClE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CACjC;YACC,QAAQ,EAAE,SAAS;YACnB,GAAG,EAAE;gBACJ;oBACC,WAAW,EAAE,iBAAiB;iBAC9B;gBACD;oBACC,gBAAgB,EAAE,iBAAiB;iBACnC;aACD;SACD,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;aACnB;SACD,CACD,CAAC;QAEF,OAAO,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;IAC1C,CAAC;CACD","sourcesContent":["import type {\n\tIImportChannelRecord,\n\tIImportMessageRecord,\n\tIImportRecord,\n\tIImportUserRecord,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { IImportDataModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, IndexDescription } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class ImportDataRaw extends BaseRaw<IImportRecord> implements IImportDataModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IImportRecord>>) {\n\t\tsuper(db, 'import_data', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { dataType: 1 } }];\n\t}\n\n\tgetAllUsers(): FindCursor<IImportUserRecord> {\n\t\treturn this.find({ dataType: 'user' }) as FindCursor<IImportUserRecord>;\n\t}\n\n\tgetAllMessages(): FindCursor<IImportMessageRecord> {\n\t\treturn this.find({ dataType: 'message' }) as FindCursor<IImportMessageRecord>;\n\t}\n\n\tgetAllChannels(): FindCursor<IImportChannelRecord> {\n\t\treturn this.find({ dataType: 'channel' }) as FindCursor<IImportChannelRecord>;\n\t}\n\n\tgetAllUsersForSelection(): Promise<Array<IImportUserRecord>> {\n\t\treturn this.find<IImportUserRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'user',\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.username': 1,\n\t\t\t\t\t'data.emails': 1,\n\t\t\t\t\t'data.deleted': 1,\n\t\t\t\t\t'data.type': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tgetAllChannelsForSelection(): Promise<Array<IImportChannelRecord>> {\n\t\treturn this.find<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': {\n\t\t\t\t\t$ne: 'd',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.name': 1,\n\t\t\t\t\t'data.archived': 1,\n\t\t\t\t\t'data.t': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tasync checkIfDirectMessagesExists(): Promise<boolean> {\n\t\treturn (\n\t\t\t(await this.col.countDocuments({\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': 'd',\n\t\t\t})) > 0\n\t\t);\n\t}\n\n\tasync countMessages(): Promise<number> {\n\t\treturn this.col.countDocuments({ dataType: 'message' });\n\t}\n\n\tasync findChannelImportIdByNameOrImportId(channelIdentifier: string): Promise<string | undefined> {\n\t\tconst channel = await this.findOne<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'channel',\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.name': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.importIds': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn channel?.data?.importIds?.shift();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ImportData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/ImportData.ts","inputSourceMap":{"version":3,"file":"server/models/raw/ImportData.ts","sourceRoot":"","sources":["server/models/raw/ImportData.ts"],"names":[],"mappings":"AAUA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,aAAc,SAAQ,OAAsB;IACxD,YAAY,EAAM,EAAE,KAA0D;QAC7E,KAAK,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAES,YAAY;QACrB,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,WAAW;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAkC,CAAC;IACzE,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAqC,CAAC;IAC/E,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAqC,CAAC;IAC/E,CAAC;IAED,uBAAuB;QACtB,OAAO,IAAI,CAAC,IAAI,CACf;YACC,QAAQ,EAAE,MAAM;SAChB,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;gBACnB,eAAe,EAAE,CAAC;gBAClB,aAAa,EAAE,CAAC;gBAChB,cAAc,EAAE,CAAC;gBACjB,WAAW,EAAE,CAAC;aACd;SACD,CACD,CAAC,OAAO,EAAE,CAAC;IACb,CAAC;IAED,0BAA0B;QACzB,OAAO,IAAI,CAAC,IAAI,CACf;YACC,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE;gBACT,GAAG,EAAE,GAAG;aACR;SACD,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;gBACnB,WAAW,EAAE,CAAC;gBACd,eAAe,EAAE,CAAC;gBAClB,QAAQ,EAAE,CAAC;aACX;SACD,CACD,CAAC,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,2BAA2B;QAChC,OAAO,CACN,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;YAC9B,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,GAAG;SACb,CAAC,CAAC,GAAG,CAAC,CACP,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa;QAClB,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,mCAAmC,CAAC,iBAAyB;QAClE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CACjC;YACC,QAAQ,EAAE,SAAS;YACnB,GAAG,EAAE;gBACJ;oBACC,WAAW,EAAE,iBAAiB;iBAC9B;gBACD;oBACC,gBAAgB,EAAE,iBAAiB;iBACnC;aACD;SACD,EACD;YACC,UAAU,EAAE;gBACX,gBAAgB,EAAE,CAAC;aACnB;SACD,CACD,CAAC;QAEF,OAAO,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;IAC1C,CAAC;CACD","sourcesContent":["import type {\n\tIImportChannelRecord,\n\tIImportMessageRecord,\n\tIImportRecord,\n\tIImportUserRecord,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { IImportDataModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, IndexDescription } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class ImportDataRaw extends BaseRaw<IImportRecord> implements IImportDataModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IImportRecord>>) {\n\t\tsuper(db, 'import_data', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { dataType: 1 } }];\n\t}\n\n\tgetAllUsers(): FindCursor<IImportUserRecord> {\n\t\treturn this.find({ dataType: 'user' }) as FindCursor<IImportUserRecord>;\n\t}\n\n\tgetAllMessages(): FindCursor<IImportMessageRecord> {\n\t\treturn this.find({ dataType: 'message' }) as FindCursor<IImportMessageRecord>;\n\t}\n\n\tgetAllChannels(): FindCursor<IImportChannelRecord> {\n\t\treturn this.find({ dataType: 'channel' }) as FindCursor<IImportChannelRecord>;\n\t}\n\n\tgetAllUsersForSelection(): Promise<Array<IImportUserRecord>> {\n\t\treturn this.find<IImportUserRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'user',\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.username': 1,\n\t\t\t\t\t'data.emails': 1,\n\t\t\t\t\t'data.deleted': 1,\n\t\t\t\t\t'data.type': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tgetAllChannelsForSelection(): Promise<Array<IImportChannelRecord>> {\n\t\treturn this.find<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': {\n\t\t\t\t\t$ne: 'd',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.name': 1,\n\t\t\t\t\t'data.archived': 1,\n\t\t\t\t\t'data.t': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tasync checkIfDirectMessagesExists(): Promise<boolean> {\n\t\treturn (\n\t\t\t(await this.col.countDocuments({\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': 'd',\n\t\t\t})) > 0\n\t\t);\n\t}\n\n\tasync countMessages(): Promise<number> {\n\t\treturn this.col.countDocuments({ dataType: 'message' });\n\t}\n\n\tasync findChannelImportIdByNameOrImportId(channelIdentifier: string): Promise<string | undefined> {\n\t\tconst channel = await this.findOne<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'channel',\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.name': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.importIds': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn channel?.data?.importIds?.shift();\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      ImportDataRaw: () => ImportDataRaw\n    });\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ImportDataRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'import_data', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            dataType: 1\n          }\n        }];\n      }\n      getAllUsers() {\n        return this.find({\n          dataType: 'user'\n        });\n      }\n      getAllMessages() {\n        return this.find({\n          dataType: 'message'\n        });\n      }\n      getAllChannels() {\n        return this.find({\n          dataType: 'channel'\n        });\n      }\n      getAllUsersForSelection() {\n        return this.find({\n          dataType: 'user'\n        }, {\n          projection: {\n            'data.importIds': 1,\n            'data.username': 1,\n            'data.emails': 1,\n            'data.deleted': 1,\n            'data.type': 1\n          }\n        }).toArray();\n      }\n      getAllChannelsForSelection() {\n        return this.find({\n          'dataType': 'channel',\n          'data.t': {\n            $ne: 'd'\n          }\n        }, {\n          projection: {\n            'data.importIds': 1,\n            'data.name': 1,\n            'data.archived': 1,\n            'data.t': 1\n          }\n        }).toArray();\n      }\n      async checkIfDirectMessagesExists() {\n        return (await this.col.countDocuments({\n          'dataType': 'channel',\n          'data.t': 'd'\n        })) > 0;\n      }\n      async countMessages() {\n        return this.col.countDocuments({\n          dataType: 'message'\n        });\n      }\n      async findChannelImportIdByNameOrImportId(channelIdentifier) {\n        var _channel$data, _channel$data$importI;\n        const channel = await this.findOne({\n          dataType: 'channel',\n          $or: [{\n            'data.name': channelIdentifier\n          }, {\n            'data.importIds': channelIdentifier\n          }]\n        }, {\n          projection: {\n            'data.importIds': 1\n          }\n        });\n        return channel === null || channel === void 0 ? void 0 : (_channel$data = channel.data) === null || _channel$data === void 0 ? void 0 : (_channel$data$importI = _channel$data.importIds) === null || _channel$data$importI === void 0 ? void 0 : _channel$data$importI.shift();\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","ImportDataRaw","BaseRaw","link","v","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","dataType","getAllUsers","find","getAllMessages","getAllChannels","getAllUsersForSelection","projection","toArray","getAllChannelsForSelection","$ne","checkIfDirectMessagesExists","col","countDocuments","countMessages","findChannelImportIdByNameOrImportId","channelIdentifier","_channel$data","_channel$data$importI","channel","findOne","$or","data","importIds","shift","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/ImportData.ts"],"sourcesContent":["import type {\n\tIImportChannelRecord,\n\tIImportMessageRecord,\n\tIImportRecord,\n\tIImportUserRecord,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { IImportDataModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, IndexDescription } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class ImportDataRaw extends BaseRaw<IImportRecord> implements IImportDataModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IImportRecord>>) {\n\t\tsuper(db, 'import_data', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { dataType: 1 } }];\n\t}\n\n\tgetAllUsers(): FindCursor<IImportUserRecord> {\n\t\treturn this.find({ dataType: 'user' }) as FindCursor<IImportUserRecord>;\n\t}\n\n\tgetAllMessages(): FindCursor<IImportMessageRecord> {\n\t\treturn this.find({ dataType: 'message' }) as FindCursor<IImportMessageRecord>;\n\t}\n\n\tgetAllChannels(): FindCursor<IImportChannelRecord> {\n\t\treturn this.find({ dataType: 'channel' }) as FindCursor<IImportChannelRecord>;\n\t}\n\n\tgetAllUsersForSelection(): Promise<Array<IImportUserRecord>> {\n\t\treturn this.find<IImportUserRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'user',\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.username': 1,\n\t\t\t\t\t'data.emails': 1,\n\t\t\t\t\t'data.deleted': 1,\n\t\t\t\t\t'data.type': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tgetAllChannelsForSelection(): Promise<Array<IImportChannelRecord>> {\n\t\treturn this.find<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': {\n\t\t\t\t\t$ne: 'd',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t\t'data.name': 1,\n\t\t\t\t\t'data.archived': 1,\n\t\t\t\t\t'data.t': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\t}\n\n\tasync checkIfDirectMessagesExists(): Promise<boolean> {\n\t\treturn (\n\t\t\t(await this.col.countDocuments({\n\t\t\t\t'dataType': 'channel',\n\t\t\t\t'data.t': 'd',\n\t\t\t})) > 0\n\t\t);\n\t}\n\n\tasync countMessages(): Promise<number> {\n\t\treturn this.col.countDocuments({ dataType: 'message' });\n\t}\n\n\tasync findChannelImportIdByNameOrImportId(channelIdentifier: string): Promise<string | undefined> {\n\t\tconst channel = await this.findOne<IImportChannelRecord>(\n\t\t\t{\n\t\t\t\tdataType: 'channel',\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.name': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t'data.importIds': channelIdentifier,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\t'data.importIds': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\treturn channel?.data?.importIds?.shift();\n\t}\n}\n"],"mappings":";;;IAUAA,MAAA,CAAOC,MAAE;MAAAC,aAAe,EAAAA,CAAA,KAAAA;IAAY;IAAA,IAAAC,OAAA;IAAAH,MAAA,CAAAI,IAAA;MAAAD,QAAAE,CAAA;QAAAF,OAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,oBAAA,WAAAA,oBAAA;IAE9B,MAAOJ,aAAc,SAAQC,OAAsB;MACxDI,YAAYC,EAAM,EAAEC,KAA0D;QAC7E,KAAK,CAACD,EAAE,EAAE,aAAa,EAAEC,KAAK,CAAC;MAChC;MAEUC,YAAYA,CAAA;QACrB,OAAO,CAAC;UAAEC,GAAG,EAAE;YAAEC,QAAQ,EAAE;UAAC;QAAE,CAAE,CAAC;MAClC;MAEAC,WAAWA,CAAA;QACV,OAAO,IAAI,CAACC,IAAI,CAAC;UAAEF,QAAQ,EAAE;QAAM,CAAE,CAAkC;MACxE;MAEAG,cAAcA,CAAA;QACb,OAAO,IAAI,CAACD,IAAI,CAAC;UAAEF,QAAQ,EAAE;QAAS,CAAE,CAAqC;MAC9E;MAEAI,cAAcA,CAAA;QACb,OAAO,IAAI,CAACF,IAAI,CAAC;UAAEF,QAAQ,EAAE;QAAS,CAAE,CAAqC;MAC9E;MAEAK,uBAAuBA,CAAA;QACtB,OAAO,IAAI,CAACH,IAAI,CACf;UACCF,QAAQ,EAAE;SACV,EACD;UACCM,UAAU,EAAE;YACX,gBAAgB,EAAE,CAAC;YACnB,eAAe,EAAE,CAAC;YAClB,aAAa,EAAE,CAAC;YAChB,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE;;SAEd,CACD,CAACC,OAAO,EAAE;MACZ;MAEAC,0BAA0BA,CAAA;QACzB,OAAO,IAAI,CAACN,IAAI,CACf;UACC,UAAU,EAAE,SAAS;UACrB,QAAQ,EAAE;YACTO,GAAG,EAAE;;SAEN,EACD;UACCH,UAAU,EAAE;YACX,gBAAgB,EAAE,CAAC;YACnB,WAAW,EAAE,CAAC;YACd,eAAe,EAAE,CAAC;YAClB,QAAQ,EAAE;;SAEX,CACD,CAACC,OAAO,EAAE;MACZ;MAEA,MAAMG,2BAA2BA,CAAA;QAChC,OACC,CAAC,MAAM,IAAI,CAACC,GAAG,CAACC,cAAc,CAAC;UAC9B,UAAU,EAAE,SAAS;UACrB,QAAQ,EAAE;SACV,CAAC,IAAI,CAAC;MAET;MAEA,MAAMC,aAAaA,CAAA;QAClB,OAAO,IAAI,CAACF,GAAG,CAACC,cAAc,CAAC;UAAEZ,QAAQ,EAAE;QAAS,CAAE,CAAC;MACxD;MAEA,MAAMc,mCAAmCA,CAACC,iBAAyB;QAAA,IAAAC,aAAA,EAAAC,qBAAA;QAClE,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,OAAO,CACjC;UACCnB,QAAQ,EAAE,SAAS;UACnBoB,GAAG,EAAE,CACJ;YACC,WAAW,EAAEL;WACb,EACD;YACC,gBAAgB,EAAEA;WAClB;SAEF,EACD;UACCT,UAAU,EAAE;YACX,gBAAgB,EAAE;;SAEnB,CACD;QAED,OAAOY,OAAO,aAAPA,OAAO,wBAAAF,aAAA,GAAPE,OAAO,CAAEG,IAAI,cAAAL,aAAA,wBAAAC,qBAAA,GAAbD,aAAA,CAAeM,SAAS,cAAAL,qBAAA,uBAAxBA,qBAAA,CAA0BM,KAAK,EAAE;MACzC;;IACAC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e955f29752ec5bdc563ff140e42c744ba72fa23f"}
