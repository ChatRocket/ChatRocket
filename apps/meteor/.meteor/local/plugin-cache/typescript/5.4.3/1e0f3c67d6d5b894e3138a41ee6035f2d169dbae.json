{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelEEService } from '@rocket.chat/core-services';\nimport type { ILivechatVisitor, IMessage, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { isMessageFromVisitor, isEditedMessage } from '@rocket.chat/core-typings';\nimport { LivechatRooms, LivechatVisitors, Users } from '@rocket.chat/models';\n\nimport { callbackLogger } from '../../../../../app/livechat/server/lib/logger';\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\n\nconst resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\n\tconst {\n\t\tv: { _id: visitorId },\n\t\t_id: rid,\n\t} = room;\n\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },\n\t});\n\tif (!visitor) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Visitor Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error('Visitor not found while trying to resume on hold');\n\t}\n\n\tconst guest = visitor.name || visitor.username;\n\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });\n\n\tconst resumedBy = await Users.findOneById('rocket.cat');\n\tif (!resumedBy) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] User Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error(`User not found while trying to resume on hold`);\n\t}\n\n\treturn { comment: resumeChatComment, resumedBy };\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message: IMessage, { room }) => {\n\t\tif (isEditedMessage(message) || message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { _id: rid, v: roomVisitor } = room;\n\n\t\tif (!roomVisitor?._id) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// Need to read the room every time, the room object is not updated\n\t\tconst updatedRoom = await LivechatRooms.findOneById(rid);\n\t\tif (!updatedRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (isMessageFromVisitor(message) && room.onHold) {\n\t\t\tcallbackLogger.debug(`[afterOmnichannelSaveMessage] Room ${rid} is on hold, resuming it now since visitor sent a message`);\n\n\t\t\ttry {\n\t\t\t\tconst { comment: resumeChatComment, resumedBy } = await resumeOnHoldCommentAndUser(updatedRoom);\n\t\t\t\tawait OmnichannelEEService.resumeRoomOnHold(updatedRoom, resumeChatComment, resumedBy);\n\t\t\t} catch (error) {\n\t\t\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Error while resuming room ${rid} on hold: Error: `, error);\n\t\t\t\treturn message;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.HIGH,\n\t'livechat-resume-on-hold',\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelEEService } from '@rocket.chat/core-services';\nimport type { ILivechatVisitor, IMessage, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { isMessageFromVisitor, isEditedMessage } from '@rocket.chat/core-typings';\nimport { LivechatRooms, LivechatVisitors, Users } from '@rocket.chat/models';\n\nimport { callbackLogger } from '../../../../../app/livechat/server/lib/logger';\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\n\nconst resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\n\tconst {\n\t\tv: { _id: visitorId },\n\t\t_id: rid,\n\t} = room;\n\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },\n\t});\n\tif (!visitor) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Visitor Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error('Visitor not found while trying to resume on hold');\n\t}\n\n\tconst guest = visitor.name || visitor.username;\n\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });\n\n\tconst resumedBy = await Users.findOneById('rocket.cat');\n\tif (!resumedBy) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] User Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error(`User not found while trying to resume on hold`);\n\t}\n\n\treturn { comment: resumeChatComment, resumedBy };\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message: IMessage, { room }) => {\n\t\tif (isEditedMessage(message) || message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { _id: rid, v: roomVisitor } = room;\n\n\t\tif (!roomVisitor?._id) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// Need to read the room every time, the room object is not updated\n\t\tconst updatedRoom = await LivechatRooms.findOneById(rid);\n\t\tif (!updatedRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (isMessageFromVisitor(message) && room.onHold) {\n\t\t\tcallbackLogger.debug(`[afterOmnichannelSaveMessage] Room ${rid} is on hold, resuming it now since visitor sent a message`);\n\n\t\t\ttry {\n\t\t\t\tconst { comment: resumeChatComment, resumedBy } = await resumeOnHoldCommentAndUser(updatedRoom);\n\t\t\t\tawait OmnichannelEEService.resumeRoomOnHold(updatedRoom, resumeChatComment, resumedBy);\n\t\t\t} catch (error) {\n\t\t\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Error while resuming room ${rid} on hold: Error: `, error);\n\t\t\t\treturn message;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.HIGH,\n\t'livechat-resume-on-hold',\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let OmnichannelEEService;\n    module.link(\"@rocket.chat/core-services\", {\n      OmnichannelEEService(v) {\n        OmnichannelEEService = v;\n      }\n    }, 0);\n    let isMessageFromVisitor, isEditedMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isMessageFromVisitor(v) {\n        isMessageFromVisitor = v;\n      },\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      }\n    }, 1);\n    let LivechatRooms, LivechatVisitors, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let callbackLogger;\n    module.link(\"../../../../../app/livechat/server/lib/logger\", {\n      callbackLogger(v) {\n        callbackLogger = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    let i18n;\n    module.link(\"../../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const resumeOnHoldCommentAndUser = async room => {\n      const {\n        v: {\n          _id: visitorId\n        },\n        _id: rid\n      } = room;\n      const visitor = await LivechatVisitors.findOneEnabledById(visitorId, {\n        projection: {\n          name: 1,\n          username: 1\n        }\n      });\n      if (!visitor) {\n        callbackLogger.error(\"[afterOmnichannelSaveMessage] Visitor Not found for room \".concat(rid, \" while trying to resume on hold\"));\n        throw new Error('Visitor not found while trying to resume on hold');\n      }\n      const guest = visitor.name || visitor.username;\n      const resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', {\n        guest\n      });\n      const resumedBy = await Users.findOneById('rocket.cat');\n      if (!resumedBy) {\n        callbackLogger.error(\"[afterOmnichannelSaveMessage] User Not found for room \".concat(rid, \" while trying to resume on hold\"));\n        throw new Error(\"User not found while trying to resume on hold\");\n      }\n      return {\n        comment: resumeChatComment,\n        resumedBy\n      };\n    };\n    callbacks.add('afterOmnichannelSaveMessage', async (message, _ref) => {\n      let {\n        room\n      } = _ref;\n      if (isEditedMessage(message) || message.t) {\n        return message;\n      }\n      const {\n        _id: rid,\n        v: roomVisitor\n      } = room;\n      if (!(roomVisitor !== null && roomVisitor !== void 0 && roomVisitor._id)) {\n        return message;\n      }\n      // Need to read the room every time, the room object is not updated\n      const updatedRoom = await LivechatRooms.findOneById(rid);\n      if (!updatedRoom) {\n        return message;\n      }\n      if (isMessageFromVisitor(message) && room.onHold) {\n        callbackLogger.debug(\"[afterOmnichannelSaveMessage] Room \".concat(rid, \" is on hold, resuming it now since visitor sent a message\"));\n        try {\n          const {\n            comment: resumeChatComment,\n            resumedBy\n          } = await resumeOnHoldCommentAndUser(updatedRoom);\n          await OmnichannelEEService.resumeRoomOnHold(updatedRoom, resumeChatComment, resumedBy);\n        } catch (error) {\n          callbackLogger.error(\"[afterOmnichannelSaveMessage] Error while resuming room \".concat(rid, \" on hold: Error: \"), error);\n          return message;\n        }\n      }\n      return message;\n    }, callbacks.priority.HIGH, 'livechat-resume-on-hold');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["OmnichannelEEService","module","link","v","isMessageFromVisitor","isEditedMessage","LivechatRooms","LivechatVisitors","Users","callbackLogger","callbacks","i18n","__reifyWaitForDeps__","resumeOnHoldCommentAndUser","room","_id","visitorId","rid","visitor","findOneEnabledById","projection","name","username","error","concat","Error","guest","resumeChatComment","t","resumedBy","findOneById","comment","add","message","_ref","roomVisitor","updatedRoom","onHold","debug","resumeRoomOnHold","priority","HIGH","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/hooks/resumeOnHold.ts"],"sourcesContent":["import { OmnichannelEEService } from '@rocket.chat/core-services';\nimport type { ILivechatVisitor, IMessage, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { isMessageFromVisitor, isEditedMessage } from '@rocket.chat/core-typings';\nimport { LivechatRooms, LivechatVisitors, Users } from '@rocket.chat/models';\n\nimport { callbackLogger } from '../../../../../app/livechat/server/lib/logger';\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\n\nconst resumeOnHoldCommentAndUser = async (room: IOmnichannelRoom): Promise<{ comment: string; resumedBy: IUser }> => {\n\tconst {\n\t\tv: { _id: visitorId },\n\t\t_id: rid,\n\t} = room;\n\tconst visitor = await LivechatVisitors.findOneEnabledById<Pick<ILivechatVisitor, 'name' | 'username'>>(visitorId, {\n\t\tprojection: { name: 1, username: 1 },\n\t});\n\tif (!visitor) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Visitor Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error('Visitor not found while trying to resume on hold');\n\t}\n\n\tconst guest = visitor.name || visitor.username;\n\n\tconst resumeChatComment = i18n.t('Omnichannel_on_hold_chat_automatically', { guest });\n\n\tconst resumedBy = await Users.findOneById('rocket.cat');\n\tif (!resumedBy) {\n\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] User Not found for room ${rid} while trying to resume on hold`);\n\t\tthrow new Error(`User not found while trying to resume on hold`);\n\t}\n\n\treturn { comment: resumeChatComment, resumedBy };\n};\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message: IMessage, { room }) => {\n\t\tif (isEditedMessage(message) || message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { _id: rid, v: roomVisitor } = room;\n\n\t\tif (!roomVisitor?._id) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// Need to read the room every time, the room object is not updated\n\t\tconst updatedRoom = await LivechatRooms.findOneById(rid);\n\t\tif (!updatedRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (isMessageFromVisitor(message) && room.onHold) {\n\t\t\tcallbackLogger.debug(`[afterOmnichannelSaveMessage] Room ${rid} is on hold, resuming it now since visitor sent a message`);\n\n\t\t\ttry {\n\t\t\t\tconst { comment: resumeChatComment, resumedBy } = await resumeOnHoldCommentAndUser(updatedRoom);\n\t\t\t\tawait OmnichannelEEService.resumeRoomOnHold(updatedRoom, resumeChatComment, resumedBy);\n\t\t\t} catch (error) {\n\t\t\t\tcallbackLogger.error(`[afterOmnichannelSaveMessage] Error while resuming room ${rid} on hold: Error: `, error);\n\t\t\t\treturn message;\n\t\t\t}\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.HIGH,\n\t'livechat-resume-on-hold',\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1e0f3c67d6d5b894e3138a41ee6035f2d169dbae"}
