{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/messages/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/messages/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/messages/service.ts","inputSourceMap":{"version":3,"file":"server/services/messages/service.ts","sourceRoot":"","sources":["server/services/messages/service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessageService } from '@rocket.chat/core-services';\nimport { Authorization, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { type IMessage, type MessageTypesValues, type IUser, type IRoom, isEditedMessage, type AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../app/lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../app/lib/server/functions/updateMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { notifyUsersOnSystemMessage } from '../../../app/lib/server/lib/notifyUsersOnMessage';\nimport { executeSendMessage } from '../../../app/lib/server/methods/sendMessage';\nimport { executeSetReaction } from '../../../app/reactions/server/setReaction';\nimport { settings } from '../../../app/settings/server';\nimport { getUserAvatarURL } from '../../../app/utils/server/getUserAvatarURL';\nimport { BeforeSaveCannedResponse } from '../../../ee/server/hooks/messages/BeforeSaveCannedResponse';\nimport { FederationMatrixInvalidConfigurationError } from '../federation/utils';\nimport { FederationActions } from './hooks/BeforeFederationActions';\nimport { BeforeSaveBadWords } from './hooks/BeforeSaveBadWords';\nimport { BeforeSaveCheckMAC } from './hooks/BeforeSaveCheckMAC';\nimport { BeforeSaveJumpToMessage } from './hooks/BeforeSaveJumpToMessage';\nimport { BeforeSaveMarkdownParser } from './hooks/BeforeSaveMarkdownParser';\nimport { mentionServer } from './hooks/BeforeSaveMentions';\nimport { BeforeSavePreventMention } from './hooks/BeforeSavePreventMention';\nimport { BeforeSaveSpotify } from './hooks/BeforeSaveSpotify';\n\nconst disableMarkdownParser = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_PARSER).toLowerCase());\n\nexport class MessageService extends ServiceClassInternal implements IMessageService {\n\tprotected name = 'message';\n\n\tprivate preventMention: BeforeSavePreventMention;\n\n\tprivate badWords: BeforeSaveBadWords;\n\n\tprivate spotify: BeforeSaveSpotify;\n\n\tprivate jumpToMessage: BeforeSaveJumpToMessage;\n\n\tprivate cannedResponse: BeforeSaveCannedResponse;\n\n\tprivate markdownParser: BeforeSaveMarkdownParser;\n\n\tprivate checkMAC: BeforeSaveCheckMAC;\n\n\tasync created() {\n\t\tthis.preventMention = new BeforeSavePreventMention();\n\t\tthis.badWords = new BeforeSaveBadWords();\n\t\tthis.spotify = new BeforeSaveSpotify();\n\t\tthis.jumpToMessage = new BeforeSaveJumpToMessage({\n\t\t\tgetMessages(messageIds) {\n\t\t\t\treturn Messages.findVisibleByIds(messageIds).toArray();\n\t\t\t},\n\t\t\tgetRooms(roomIds) {\n\t\t\t\treturn Rooms.findByIds(roomIds).toArray();\n\t\t\t},\n\t\t\tcanAccessRoom(room: IRoom, user: IUser): Promise<boolean> {\n\t\t\t\treturn Authorization.canAccessRoom(room, user);\n\t\t\t},\n\t\t\tgetUserAvatarURL(user?: string): string {\n\t\t\t\treturn (user && getUserAvatarURL(user)) || '';\n\t\t\t},\n\t\t});\n\t\tthis.cannedResponse = new BeforeSaveCannedResponse();\n\t\tthis.markdownParser = new BeforeSaveMarkdownParser(!disableMarkdownParser);\n\t\tthis.checkMAC = new BeforeSaveCheckMAC();\n\n\t\tawait this.configureBadWords();\n\t}\n\n\tprivate async configureBadWords() {\n\t\tsettings.watchMultiple(\n\t\t\t['Message_AllowBadWordsFilter', 'Message_BadWordsFilterList', 'Message_BadWordsWhitelist'],\n\t\t\tasync ([enabled, badWordsList, whiteList]) => {\n\t\t\t\tif (!enabled) {\n\t\t\t\t\tthis.badWords.disable();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.badWords.configure(badWordsList as string, whiteList as string);\n\t\t\t},\n\t\t);\n\t}\n\n\tasync sendMessage({ fromId, rid, msg }: { fromId: string; rid: string; msg: string }): Promise<IMessage> {\n\t\treturn executeSendMessage(fromId, { rid, msg });\n\t}\n\n\tasync sendMessageWithValidation(user: IUser, message: Partial<IMessage>, room: Partial<IRoom>, upsert = false): Promise<IMessage> {\n\t\treturn sendMessage(user, message, room, upsert);\n\t}\n\n\tasync deleteMessage(user: IUser, message: IMessage): Promise<void> {\n\t\treturn deleteMessage(message, user);\n\t}\n\n\tasync updateMessage(message: IMessage, user: IUser, originalMsg?: IMessage, previewUrls?: string[]): Promise<void> {\n\t\treturn updateMessage(message, user, originalMsg, previewUrls);\n\t}\n\n\tasync reactToMessage(userId: string, reaction: string, messageId: IMessage['_id'], shouldReact?: boolean): Promise<void> {\n\t\treturn executeSetReaction(userId, reaction, messageId, shouldReact);\n\t}\n\n\tasync saveSystemMessageAndNotifyUser<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessageText: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst createdMessage = await this.saveSystemMessage(type, rid, messageText, owner, extraData);\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('Failed to find the room.');\n\t\t}\n\n\t\tawait notifyUsersOnSystemMessage(createdMessage, room);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync saveSystemMessage<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst { _id: userId, username, name } = owner;\n\t\tif (!username) {\n\t\t\tthrow new Error('The username cannot be empty.');\n\t\t}\n\n\t\tconst [{ insertedId }] = await Promise.all([\n\t\t\tMessages.createWithTypeRoomIdMessageUserAndUnread(\n\t\t\t\ttype,\n\t\t\t\trid,\n\t\t\t\tmessage,\n\t\t\t\t{ _id: userId, username, name },\n\t\t\t\tsettings.get('Message_Read_Receipt_Enabled'),\n\t\t\t\textraData,\n\t\t\t),\n\t\t\tRooms.incMsgCountById(rid, 1),\n\t\t]);\n\n\t\tif (!insertedId) {\n\t\t\tthrow new Error('Failed to save system message.');\n\t\t}\n\n\t\tconst createdMessage = await Messages.findOneById(insertedId);\n\t\tif (!createdMessage) {\n\t\t\tthrow new Error('Failed to find the created message.');\n\t\t}\n\n\t\tvoid notifyOnMessageChange({ id: createdMessage._id, data: createdMessage });\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync beforeSave({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// TODO looks like this one was not being used (so I'll left it commented)\n\t\t// await this.joinDiscussionOnMessage({ message, room, user });\n\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to send message');\n\t\t}\n\n\t\tmessage = await mentionServer.execute(message);\n\t\tmessage = await this.cannedResponse.replacePlaceholders({ message, room, user });\n\t\tmessage = await this.badWords.filterBadWords({ message });\n\t\tmessage = await this.markdownParser.parseMarkdown({ message, config: this.getMarkdownConfig() });\n\t\tmessage = await this.spotify.convertSpotifyLinks({ message });\n\t\tmessage = await this.jumpToMessage.createAttachmentForMessageURLs({\n\t\t\tmessage,\n\t\t\tuser,\n\t\t\tconfig: {\n\t\t\t\tchainLimit: settings.get<number>('Message_QuoteChainLimit'),\n\t\t\t\tsiteUrl: settings.get<string>('Site_Url'),\n\t\t\t\tuseRealName: settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\t},\n\t\t});\n\n\t\tif (!this.isEditedOrOld(message)) {\n\t\t\tawait Promise.all([\n\t\t\t\tthis.checkMAC.isWithinLimits({ message, room }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'all', permission: 'mention-all' }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'here', permission: 'mention-here' }),\n\t\t\t]);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tprivate getMarkdownConfig() {\n\t\tconst customDomains = settings.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t? settings\n\t\t\t\t\t.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((domain) => domain.trim())\n\t\t\t: [];\n\n\t\treturn {\n\t\t\tcolors: settings.get<boolean>('HexColorPreview_Enabled'),\n\t\t\temoticons: true,\n\t\t\tcustomDomains,\n\t\t\t...(settings.get<boolean>('Katex_Enabled') && {\n\t\t\t\tkatex: {\n\t\t\t\t\tdollarSyntax: settings.get<boolean>('Katex_Dollar_Syntax'),\n\t\t\t\t\tparenthesisSyntax: settings.get<boolean>('Katex_Parenthesis_Syntax'),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isEditedOrOld(message: IMessage): boolean {\n\t\treturn isEditedMessage(message) || !message.ts || Math.abs(Date.now() - message.ts.getTime()) > 60000;\n\t}\n\n\t// joinDiscussionOnMessage\n\t// private async joinDiscussionOnMessage({ message, room, user }: { message: IMessage; room: IRoom; user: IUser }) {\n\t// \t// abort if room is not a discussion\n\t// \tif (!room.prid) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \t// check if user already joined the discussion\n\t// \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t// \t\tprojection: { _id: 1 },\n\t// \t});\n\n\t// \tif (sub) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tawait Room.join({ room, user });\n\t// }\n\n\tasync beforeReacted(message: IMessage, room: AtLeast<IRoom, 'federated'>) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to react to message');\n\t\t}\n\t}\n\n\tasync beforeDelete(message: IMessage, room: IRoom) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to delete message');\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/messages/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/messages/service.ts","inputSourceMap":{"version":3,"file":"server/services/messages/service.ts","sourceRoot":"","sources":["server/services/messages/service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessageService } from '@rocket.chat/core-services';\nimport { Authorization, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { type IMessage, type MessageTypesValues, type IUser, type IRoom, isEditedMessage, type AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../app/lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../app/lib/server/functions/updateMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { notifyUsersOnSystemMessage } from '../../../app/lib/server/lib/notifyUsersOnMessage';\nimport { executeSendMessage } from '../../../app/lib/server/methods/sendMessage';\nimport { executeSetReaction } from '../../../app/reactions/server/setReaction';\nimport { settings } from '../../../app/settings/server';\nimport { getUserAvatarURL } from '../../../app/utils/server/getUserAvatarURL';\nimport { BeforeSaveCannedResponse } from '../../../ee/server/hooks/messages/BeforeSaveCannedResponse';\nimport { FederationMatrixInvalidConfigurationError } from '../federation/utils';\nimport { FederationActions } from './hooks/BeforeFederationActions';\nimport { BeforeSaveBadWords } from './hooks/BeforeSaveBadWords';\nimport { BeforeSaveCheckMAC } from './hooks/BeforeSaveCheckMAC';\nimport { BeforeSaveJumpToMessage } from './hooks/BeforeSaveJumpToMessage';\nimport { BeforeSaveMarkdownParser } from './hooks/BeforeSaveMarkdownParser';\nimport { mentionServer } from './hooks/BeforeSaveMentions';\nimport { BeforeSavePreventMention } from './hooks/BeforeSavePreventMention';\nimport { BeforeSaveSpotify } from './hooks/BeforeSaveSpotify';\n\nconst disableMarkdownParser = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_PARSER).toLowerCase());\n\nexport class MessageService extends ServiceClassInternal implements IMessageService {\n\tprotected name = 'message';\n\n\tprivate preventMention: BeforeSavePreventMention;\n\n\tprivate badWords: BeforeSaveBadWords;\n\n\tprivate spotify: BeforeSaveSpotify;\n\n\tprivate jumpToMessage: BeforeSaveJumpToMessage;\n\n\tprivate cannedResponse: BeforeSaveCannedResponse;\n\n\tprivate markdownParser: BeforeSaveMarkdownParser;\n\n\tprivate checkMAC: BeforeSaveCheckMAC;\n\n\tasync created() {\n\t\tthis.preventMention = new BeforeSavePreventMention();\n\t\tthis.badWords = new BeforeSaveBadWords();\n\t\tthis.spotify = new BeforeSaveSpotify();\n\t\tthis.jumpToMessage = new BeforeSaveJumpToMessage({\n\t\t\tgetMessages(messageIds) {\n\t\t\t\treturn Messages.findVisibleByIds(messageIds).toArray();\n\t\t\t},\n\t\t\tgetRooms(roomIds) {\n\t\t\t\treturn Rooms.findByIds(roomIds).toArray();\n\t\t\t},\n\t\t\tcanAccessRoom(room: IRoom, user: IUser): Promise<boolean> {\n\t\t\t\treturn Authorization.canAccessRoom(room, user);\n\t\t\t},\n\t\t\tgetUserAvatarURL(user?: string): string {\n\t\t\t\treturn (user && getUserAvatarURL(user)) || '';\n\t\t\t},\n\t\t});\n\t\tthis.cannedResponse = new BeforeSaveCannedResponse();\n\t\tthis.markdownParser = new BeforeSaveMarkdownParser(!disableMarkdownParser);\n\t\tthis.checkMAC = new BeforeSaveCheckMAC();\n\n\t\tawait this.configureBadWords();\n\t}\n\n\tprivate async configureBadWords() {\n\t\tsettings.watchMultiple(\n\t\t\t['Message_AllowBadWordsFilter', 'Message_BadWordsFilterList', 'Message_BadWordsWhitelist'],\n\t\t\tasync ([enabled, badWordsList, whiteList]) => {\n\t\t\t\tif (!enabled) {\n\t\t\t\t\tthis.badWords.disable();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.badWords.configure(badWordsList as string, whiteList as string);\n\t\t\t},\n\t\t);\n\t}\n\n\tasync sendMessage({ fromId, rid, msg }: { fromId: string; rid: string; msg: string }): Promise<IMessage> {\n\t\treturn executeSendMessage(fromId, { rid, msg });\n\t}\n\n\tasync sendMessageWithValidation(user: IUser, message: Partial<IMessage>, room: Partial<IRoom>, upsert = false): Promise<IMessage> {\n\t\treturn sendMessage(user, message, room, upsert);\n\t}\n\n\tasync deleteMessage(user: IUser, message: IMessage): Promise<void> {\n\t\treturn deleteMessage(message, user);\n\t}\n\n\tasync updateMessage(message: IMessage, user: IUser, originalMsg?: IMessage, previewUrls?: string[]): Promise<void> {\n\t\treturn updateMessage(message, user, originalMsg, previewUrls);\n\t}\n\n\tasync reactToMessage(userId: string, reaction: string, messageId: IMessage['_id'], shouldReact?: boolean): Promise<void> {\n\t\treturn executeSetReaction(userId, reaction, messageId, shouldReact);\n\t}\n\n\tasync saveSystemMessageAndNotifyUser<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessageText: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst createdMessage = await this.saveSystemMessage(type, rid, messageText, owner, extraData);\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('Failed to find the room.');\n\t\t}\n\n\t\tawait notifyUsersOnSystemMessage(createdMessage, room);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync saveSystemMessage<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst { _id: userId, username, name } = owner;\n\t\tif (!username) {\n\t\t\tthrow new Error('The username cannot be empty.');\n\t\t}\n\n\t\tconst [{ insertedId }] = await Promise.all([\n\t\t\tMessages.createWithTypeRoomIdMessageUserAndUnread(\n\t\t\t\ttype,\n\t\t\t\trid,\n\t\t\t\tmessage,\n\t\t\t\t{ _id: userId, username, name },\n\t\t\t\tsettings.get('Message_Read_Receipt_Enabled'),\n\t\t\t\textraData,\n\t\t\t),\n\t\t\tRooms.incMsgCountById(rid, 1),\n\t\t]);\n\n\t\tif (!insertedId) {\n\t\t\tthrow new Error('Failed to save system message.');\n\t\t}\n\n\t\tconst createdMessage = await Messages.findOneById(insertedId);\n\t\tif (!createdMessage) {\n\t\t\tthrow new Error('Failed to find the created message.');\n\t\t}\n\n\t\tvoid notifyOnMessageChange({ id: createdMessage._id, data: createdMessage });\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync beforeSave({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// TODO looks like this one was not being used (so I'll left it commented)\n\t\t// await this.joinDiscussionOnMessage({ message, room, user });\n\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to send message');\n\t\t}\n\n\t\tmessage = await mentionServer.execute(message);\n\t\tmessage = await this.cannedResponse.replacePlaceholders({ message, room, user });\n\t\tmessage = await this.badWords.filterBadWords({ message });\n\t\tmessage = await this.markdownParser.parseMarkdown({ message, config: this.getMarkdownConfig() });\n\t\tmessage = await this.spotify.convertSpotifyLinks({ message });\n\t\tmessage = await this.jumpToMessage.createAttachmentForMessageURLs({\n\t\t\tmessage,\n\t\t\tuser,\n\t\t\tconfig: {\n\t\t\t\tchainLimit: settings.get<number>('Message_QuoteChainLimit'),\n\t\t\t\tsiteUrl: settings.get<string>('Site_Url'),\n\t\t\t\tuseRealName: settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\t},\n\t\t});\n\n\t\tif (!this.isEditedOrOld(message)) {\n\t\t\tawait Promise.all([\n\t\t\t\tthis.checkMAC.isWithinLimits({ message, room }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'all', permission: 'mention-all' }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'here', permission: 'mention-here' }),\n\t\t\t]);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tprivate getMarkdownConfig() {\n\t\tconst customDomains = settings.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t? settings\n\t\t\t\t\t.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((domain) => domain.trim())\n\t\t\t: [];\n\n\t\treturn {\n\t\t\tcolors: settings.get<boolean>('HexColorPreview_Enabled'),\n\t\t\temoticons: true,\n\t\t\tcustomDomains,\n\t\t\t...(settings.get<boolean>('Katex_Enabled') && {\n\t\t\t\tkatex: {\n\t\t\t\t\tdollarSyntax: settings.get<boolean>('Katex_Dollar_Syntax'),\n\t\t\t\t\tparenthesisSyntax: settings.get<boolean>('Katex_Parenthesis_Syntax'),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isEditedOrOld(message: IMessage): boolean {\n\t\treturn isEditedMessage(message) || !message.ts || Math.abs(Date.now() - message.ts.getTime()) > 60000;\n\t}\n\n\t// joinDiscussionOnMessage\n\t// private async joinDiscussionOnMessage({ message, room, user }: { message: IMessage; room: IRoom; user: IUser }) {\n\t// \t// abort if room is not a discussion\n\t// \tif (!room.prid) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \t// check if user already joined the discussion\n\t// \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t// \t\tprojection: { _id: 1 },\n\t// \t});\n\n\t// \tif (sub) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tawait Room.join({ room, user });\n\t// }\n\n\tasync beforeReacted(message: IMessage, room: AtLeast<IRoom, 'federated'>) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to react to message');\n\t\t}\n\t}\n\n\tasync beforeDelete(message: IMessage, room: IRoom) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to delete message');\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      MessageService: () => MessageService\n    });\n    let Authorization, ServiceClassInternal;\n    module.link(\"@rocket.chat/core-services\", {\n      Authorization(v) {\n        Authorization = v;\n      },\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let isEditedMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      }\n    }, 1);\n    let Messages, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 2);\n    let deleteMessage;\n    module.link(\"../../../app/lib/server/functions/deleteMessage\", {\n      deleteMessage(v) {\n        deleteMessage = v;\n      }\n    }, 3);\n    let sendMessage;\n    module.link(\"../../../app/lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 4);\n    let updateMessage;\n    module.link(\"../../../app/lib/server/functions/updateMessage\", {\n      updateMessage(v) {\n        updateMessage = v;\n      }\n    }, 5);\n    let notifyOnRoomChangedById, notifyOnMessageChange;\n    module.link(\"../../../app/lib/server/lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 6);\n    let notifyUsersOnSystemMessage;\n    module.link(\"../../../app/lib/server/lib/notifyUsersOnMessage\", {\n      notifyUsersOnSystemMessage(v) {\n        notifyUsersOnSystemMessage = v;\n      }\n    }, 7);\n    let executeSendMessage;\n    module.link(\"../../../app/lib/server/methods/sendMessage\", {\n      executeSendMessage(v) {\n        executeSendMessage = v;\n      }\n    }, 8);\n    let executeSetReaction;\n    module.link(\"../../../app/reactions/server/setReaction\", {\n      executeSetReaction(v) {\n        executeSetReaction = v;\n      }\n    }, 9);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 10);\n    let getUserAvatarURL;\n    module.link(\"../../../app/utils/server/getUserAvatarURL\", {\n      getUserAvatarURL(v) {\n        getUserAvatarURL = v;\n      }\n    }, 11);\n    let BeforeSaveCannedResponse;\n    module.link(\"../../../ee/server/hooks/messages/BeforeSaveCannedResponse\", {\n      BeforeSaveCannedResponse(v) {\n        BeforeSaveCannedResponse = v;\n      }\n    }, 12);\n    let FederationMatrixInvalidConfigurationError;\n    module.link(\"../federation/utils\", {\n      FederationMatrixInvalidConfigurationError(v) {\n        FederationMatrixInvalidConfigurationError = v;\n      }\n    }, 13);\n    let FederationActions;\n    module.link(\"./hooks/BeforeFederationActions\", {\n      FederationActions(v) {\n        FederationActions = v;\n      }\n    }, 14);\n    let BeforeSaveBadWords;\n    module.link(\"./hooks/BeforeSaveBadWords\", {\n      BeforeSaveBadWords(v) {\n        BeforeSaveBadWords = v;\n      }\n    }, 15);\n    let BeforeSaveCheckMAC;\n    module.link(\"./hooks/BeforeSaveCheckMAC\", {\n      BeforeSaveCheckMAC(v) {\n        BeforeSaveCheckMAC = v;\n      }\n    }, 16);\n    let BeforeSaveJumpToMessage;\n    module.link(\"./hooks/BeforeSaveJumpToMessage\", {\n      BeforeSaveJumpToMessage(v) {\n        BeforeSaveJumpToMessage = v;\n      }\n    }, 17);\n    let BeforeSaveMarkdownParser;\n    module.link(\"./hooks/BeforeSaveMarkdownParser\", {\n      BeforeSaveMarkdownParser(v) {\n        BeforeSaveMarkdownParser = v;\n      }\n    }, 18);\n    let mentionServer;\n    module.link(\"./hooks/BeforeSaveMentions\", {\n      mentionServer(v) {\n        mentionServer = v;\n      }\n    }, 19);\n    let BeforeSavePreventMention;\n    module.link(\"./hooks/BeforeSavePreventMention\", {\n      BeforeSavePreventMention(v) {\n        BeforeSavePreventMention = v;\n      }\n    }, 20);\n    let BeforeSaveSpotify;\n    module.link(\"./hooks/BeforeSaveSpotify\", {\n      BeforeSaveSpotify(v) {\n        BeforeSaveSpotify = v;\n      }\n    }, 21);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const disableMarkdownParser = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_PARSER).toLowerCase());\n    class MessageService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'message';\n        this.preventMention = void 0;\n        this.badWords = void 0;\n        this.spotify = void 0;\n        this.jumpToMessage = void 0;\n        this.cannedResponse = void 0;\n        this.markdownParser = void 0;\n        this.checkMAC = void 0;\n      }\n      async created() {\n        this.preventMention = new BeforeSavePreventMention();\n        this.badWords = new BeforeSaveBadWords();\n        this.spotify = new BeforeSaveSpotify();\n        this.jumpToMessage = new BeforeSaveJumpToMessage({\n          getMessages(messageIds) {\n            return Messages.findVisibleByIds(messageIds).toArray();\n          },\n          getRooms(roomIds) {\n            return Rooms.findByIds(roomIds).toArray();\n          },\n          canAccessRoom(room, user) {\n            return Authorization.canAccessRoom(room, user);\n          },\n          getUserAvatarURL(user) {\n            return user && getUserAvatarURL(user) || '';\n          }\n        });\n        this.cannedResponse = new BeforeSaveCannedResponse();\n        this.markdownParser = new BeforeSaveMarkdownParser(!disableMarkdownParser);\n        this.checkMAC = new BeforeSaveCheckMAC();\n        await this.configureBadWords();\n      }\n      async configureBadWords() {\n        settings.watchMultiple(['Message_AllowBadWordsFilter', 'Message_BadWordsFilterList', 'Message_BadWordsWhitelist'], async _ref => {\n          let [enabled, badWordsList, whiteList] = _ref;\n          if (!enabled) {\n            this.badWords.disable();\n            return;\n          }\n          await this.badWords.configure(badWordsList, whiteList);\n        });\n      }\n      async sendMessage(_ref2) {\n        let {\n          fromId,\n          rid,\n          msg\n        } = _ref2;\n        return executeSendMessage(fromId, {\n          rid,\n          msg\n        });\n      }\n      async sendMessageWithValidation(user, message, room) {\n        let upsert = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        return sendMessage(user, message, room, upsert);\n      }\n      async deleteMessage(user, message) {\n        return deleteMessage(message, user);\n      }\n      async updateMessage(message, user, originalMsg, previewUrls) {\n        return updateMessage(message, user, originalMsg, previewUrls);\n      }\n      async reactToMessage(userId, reaction, messageId, shouldReact) {\n        return executeSetReaction(userId, reaction, messageId, shouldReact);\n      }\n      async saveSystemMessageAndNotifyUser(type, rid, messageText, owner, extraData) {\n        const createdMessage = await this.saveSystemMessage(type, rid, messageText, owner, extraData);\n        const room = await Rooms.findOneById(rid);\n        if (!room) {\n          throw new Error('Failed to find the room.');\n        }\n        await notifyUsersOnSystemMessage(createdMessage, room);\n        return createdMessage;\n      }\n      async saveSystemMessage(type, rid, message, owner, extraData) {\n        const {\n          _id: userId,\n          username,\n          name\n        } = owner;\n        if (!username) {\n          throw new Error('The username cannot be empty.');\n        }\n        const [{\n          insertedId\n        }] = await Promise.all([Messages.createWithTypeRoomIdMessageUserAndUnread(type, rid, message, {\n          _id: userId,\n          username,\n          name\n        }, settings.get('Message_Read_Receipt_Enabled'), extraData), Rooms.incMsgCountById(rid, 1)]);\n        if (!insertedId) {\n          throw new Error('Failed to save system message.');\n        }\n        const createdMessage = await Messages.findOneById(insertedId);\n        if (!createdMessage) {\n          throw new Error('Failed to find the created message.');\n        }\n        void notifyOnMessageChange({\n          id: createdMessage._id,\n          data: createdMessage\n        });\n        void notifyOnRoomChangedById(rid);\n        return createdMessage;\n      }\n      async beforeSave(_ref3) {\n        let {\n          message,\n          room,\n          user\n        } = _ref3;\n        // TODO looks like this one was not being used (so I'll left it commented)\n        // await this.joinDiscussionOnMessage({ message, room, user });\n        if (!FederationActions.shouldPerformAction(message, room)) {\n          throw new FederationMatrixInvalidConfigurationError('Unable to send message');\n        }\n        message = await mentionServer.execute(message);\n        message = await this.cannedResponse.replacePlaceholders({\n          message,\n          room,\n          user\n        });\n        message = await this.badWords.filterBadWords({\n          message\n        });\n        message = await this.markdownParser.parseMarkdown({\n          message,\n          config: this.getMarkdownConfig()\n        });\n        message = await this.spotify.convertSpotifyLinks({\n          message\n        });\n        message = await this.jumpToMessage.createAttachmentForMessageURLs({\n          message,\n          user,\n          config: {\n            chainLimit: settings.get('Message_QuoteChainLimit'),\n            siteUrl: settings.get('Site_Url'),\n            useRealName: settings.get('UI_Use_Real_Name')\n          }\n        });\n        if (!this.isEditedOrOld(message)) {\n          await Promise.all([this.checkMAC.isWithinLimits({\n            message,\n            room\n          }), this.preventMention.preventMention({\n            message,\n            user,\n            mention: 'all',\n            permission: 'mention-all'\n          }), this.preventMention.preventMention({\n            message,\n            user,\n            mention: 'here',\n            permission: 'mention-here'\n          })]);\n        }\n        return message;\n      }\n      getMarkdownConfig() {\n        const customDomains = settings.get('Message_CustomDomain_AutoLink') ? settings.get('Message_CustomDomain_AutoLink').split(',').map(domain => domain.trim()) : [];\n        return _objectSpread({\n          colors: settings.get('HexColorPreview_Enabled'),\n          emoticons: true,\n          customDomains\n        }, settings.get('Katex_Enabled') && {\n          katex: {\n            dollarSyntax: settings.get('Katex_Dollar_Syntax'),\n            parenthesisSyntax: settings.get('Katex_Parenthesis_Syntax')\n          }\n        });\n      }\n      isEditedOrOld(message) {\n        return isEditedMessage(message) || !message.ts || Math.abs(Date.now() - message.ts.getTime()) > 60000;\n      }\n      // joinDiscussionOnMessage\n      // private async joinDiscussionOnMessage({ message, room, user }: { message: IMessage; room: IRoom; user: IUser }) {\n      // \t// abort if room is not a discussion\n      // \tif (!room.prid) {\n      // \t\treturn;\n      // \t}\n      // \t// check if user already joined the discussion\n      // \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n      // \t\tprojection: { _id: 1 },\n      // \t});\n      // \tif (sub) {\n      // \t\treturn;\n      // \t}\n      // \tawait Room.join({ room, user });\n      // }\n      async beforeReacted(message, room) {\n        if (!FederationActions.shouldPerformAction(message, room)) {\n          throw new FederationMatrixInvalidConfigurationError('Unable to react to message');\n        }\n      }\n      async beforeDelete(message, room) {\n        if (!FederationActions.shouldPerformAction(message, room)) {\n          throw new FederationMatrixInvalidConfigurationError('Unable to delete message');\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","MessageService","Authorization","ServiceClassInternal","isEditedMessage","Messages","Rooms","deleteMessage","sendMessage","updateMessage","notifyOnRoomChangedById","notifyOnMessageChange","notifyUsersOnSystemMessage","executeSendMessage","executeSetReaction","settings","getUserAvatarURL","BeforeSaveCannedResponse","FederationMatrixInvalidConfigurationError","FederationActions","BeforeSaveBadWords","BeforeSaveCheckMAC","BeforeSaveJumpToMessage","BeforeSaveMarkdownParser","mentionServer","BeforeSavePreventMention","BeforeSaveSpotify","__reifyWaitForDeps__","disableMarkdownParser","includes","String","process","env","DISABLE_MESSAGE_PARSER","toLowerCase","constructor","arguments","name","preventMention","badWords","spotify","jumpToMessage","cannedResponse","markdownParser","checkMAC","created","getMessages","messageIds","findVisibleByIds","toArray","getRooms","roomIds","findByIds","canAccessRoom","room","user","configureBadWords","watchMultiple","_ref","enabled","badWordsList","whiteList","disable","configure","_ref2","fromId","rid","msg","sendMessageWithValidation","message","upsert","length","undefined","originalMsg","previewUrls","reactToMessage","userId","reaction","messageId","shouldReact","saveSystemMessageAndNotifyUser","type","messageText","owner","extraData","createdMessage","saveSystemMessage","findOneById","Error","_id","username","insertedId","Promise","all","createWithTypeRoomIdMessageUserAndUnread","get","incMsgCountById","id","data","beforeSave","_ref3","shouldPerformAction","execute","replacePlaceholders","filterBadWords","parseMarkdown","config","getMarkdownConfig","convertSpotifyLinks","createAttachmentForMessageURLs","chainLimit","siteUrl","useRealName","isEditedOrOld","isWithinLimits","mention","permission","customDomains","split","map","domain","trim","colors","emoticons","katex","dollarSyntax","parenthesisSyntax","ts","Math","abs","Date","now","getTime","beforeReacted","beforeDelete","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/messages/service.ts"],"sourcesContent":["import type { IMessageService } from '@rocket.chat/core-services';\nimport { Authorization, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { type IMessage, type MessageTypesValues, type IUser, type IRoom, isEditedMessage, type AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../app/lib/server/functions/deleteMessage';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { updateMessage } from '../../../app/lib/server/functions/updateMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { notifyUsersOnSystemMessage } from '../../../app/lib/server/lib/notifyUsersOnMessage';\nimport { executeSendMessage } from '../../../app/lib/server/methods/sendMessage';\nimport { executeSetReaction } from '../../../app/reactions/server/setReaction';\nimport { settings } from '../../../app/settings/server';\nimport { getUserAvatarURL } from '../../../app/utils/server/getUserAvatarURL';\nimport { BeforeSaveCannedResponse } from '../../../ee/server/hooks/messages/BeforeSaveCannedResponse';\nimport { FederationMatrixInvalidConfigurationError } from '../federation/utils';\nimport { FederationActions } from './hooks/BeforeFederationActions';\nimport { BeforeSaveBadWords } from './hooks/BeforeSaveBadWords';\nimport { BeforeSaveCheckMAC } from './hooks/BeforeSaveCheckMAC';\nimport { BeforeSaveJumpToMessage } from './hooks/BeforeSaveJumpToMessage';\nimport { BeforeSaveMarkdownParser } from './hooks/BeforeSaveMarkdownParser';\nimport { mentionServer } from './hooks/BeforeSaveMentions';\nimport { BeforeSavePreventMention } from './hooks/BeforeSavePreventMention';\nimport { BeforeSaveSpotify } from './hooks/BeforeSaveSpotify';\n\nconst disableMarkdownParser = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_PARSER).toLowerCase());\n\nexport class MessageService extends ServiceClassInternal implements IMessageService {\n\tprotected name = 'message';\n\n\tprivate preventMention: BeforeSavePreventMention;\n\n\tprivate badWords: BeforeSaveBadWords;\n\n\tprivate spotify: BeforeSaveSpotify;\n\n\tprivate jumpToMessage: BeforeSaveJumpToMessage;\n\n\tprivate cannedResponse: BeforeSaveCannedResponse;\n\n\tprivate markdownParser: BeforeSaveMarkdownParser;\n\n\tprivate checkMAC: BeforeSaveCheckMAC;\n\n\tasync created() {\n\t\tthis.preventMention = new BeforeSavePreventMention();\n\t\tthis.badWords = new BeforeSaveBadWords();\n\t\tthis.spotify = new BeforeSaveSpotify();\n\t\tthis.jumpToMessage = new BeforeSaveJumpToMessage({\n\t\t\tgetMessages(messageIds) {\n\t\t\t\treturn Messages.findVisibleByIds(messageIds).toArray();\n\t\t\t},\n\t\t\tgetRooms(roomIds) {\n\t\t\t\treturn Rooms.findByIds(roomIds).toArray();\n\t\t\t},\n\t\t\tcanAccessRoom(room: IRoom, user: IUser): Promise<boolean> {\n\t\t\t\treturn Authorization.canAccessRoom(room, user);\n\t\t\t},\n\t\t\tgetUserAvatarURL(user?: string): string {\n\t\t\t\treturn (user && getUserAvatarURL(user)) || '';\n\t\t\t},\n\t\t});\n\t\tthis.cannedResponse = new BeforeSaveCannedResponse();\n\t\tthis.markdownParser = new BeforeSaveMarkdownParser(!disableMarkdownParser);\n\t\tthis.checkMAC = new BeforeSaveCheckMAC();\n\n\t\tawait this.configureBadWords();\n\t}\n\n\tprivate async configureBadWords() {\n\t\tsettings.watchMultiple(\n\t\t\t['Message_AllowBadWordsFilter', 'Message_BadWordsFilterList', 'Message_BadWordsWhitelist'],\n\t\t\tasync ([enabled, badWordsList, whiteList]) => {\n\t\t\t\tif (!enabled) {\n\t\t\t\t\tthis.badWords.disable();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tawait this.badWords.configure(badWordsList as string, whiteList as string);\n\t\t\t},\n\t\t);\n\t}\n\n\tasync sendMessage({ fromId, rid, msg }: { fromId: string; rid: string; msg: string }): Promise<IMessage> {\n\t\treturn executeSendMessage(fromId, { rid, msg });\n\t}\n\n\tasync sendMessageWithValidation(user: IUser, message: Partial<IMessage>, room: Partial<IRoom>, upsert = false): Promise<IMessage> {\n\t\treturn sendMessage(user, message, room, upsert);\n\t}\n\n\tasync deleteMessage(user: IUser, message: IMessage): Promise<void> {\n\t\treturn deleteMessage(message, user);\n\t}\n\n\tasync updateMessage(message: IMessage, user: IUser, originalMsg?: IMessage, previewUrls?: string[]): Promise<void> {\n\t\treturn updateMessage(message, user, originalMsg, previewUrls);\n\t}\n\n\tasync reactToMessage(userId: string, reaction: string, messageId: IMessage['_id'], shouldReact?: boolean): Promise<void> {\n\t\treturn executeSetReaction(userId, reaction, messageId, shouldReact);\n\t}\n\n\tasync saveSystemMessageAndNotifyUser<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessageText: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst createdMessage = await this.saveSystemMessage(type, rid, messageText, owner, extraData);\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('Failed to find the room.');\n\t\t}\n\n\t\tawait notifyUsersOnSystemMessage(createdMessage, room);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync saveSystemMessage<T = IMessage>(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\towner: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\textraData?: Partial<T>,\n\t): Promise<IMessage> {\n\t\tconst { _id: userId, username, name } = owner;\n\t\tif (!username) {\n\t\t\tthrow new Error('The username cannot be empty.');\n\t\t}\n\n\t\tconst [{ insertedId }] = await Promise.all([\n\t\t\tMessages.createWithTypeRoomIdMessageUserAndUnread(\n\t\t\t\ttype,\n\t\t\t\trid,\n\t\t\t\tmessage,\n\t\t\t\t{ _id: userId, username, name },\n\t\t\t\tsettings.get('Message_Read_Receipt_Enabled'),\n\t\t\t\textraData,\n\t\t\t),\n\t\t\tRooms.incMsgCountById(rid, 1),\n\t\t]);\n\n\t\tif (!insertedId) {\n\t\t\tthrow new Error('Failed to save system message.');\n\t\t}\n\n\t\tconst createdMessage = await Messages.findOneById(insertedId);\n\t\tif (!createdMessage) {\n\t\t\tthrow new Error('Failed to find the created message.');\n\t\t}\n\n\t\tvoid notifyOnMessageChange({ id: createdMessage._id, data: createdMessage });\n\t\tvoid notifyOnRoomChangedById(rid);\n\n\t\treturn createdMessage;\n\t}\n\n\tasync beforeSave({\n\t\tmessage,\n\t\troom,\n\t\tuser,\n\t}: {\n\t\tmessage: IMessage;\n\t\troom: IRoom;\n\t\tuser: Pick<IUser, '_id' | 'username' | 'name' | 'emails' | 'language'>;\n\t}): Promise<IMessage> {\n\t\t// TODO looks like this one was not being used (so I'll left it commented)\n\t\t// await this.joinDiscussionOnMessage({ message, room, user });\n\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to send message');\n\t\t}\n\n\t\tmessage = await mentionServer.execute(message);\n\t\tmessage = await this.cannedResponse.replacePlaceholders({ message, room, user });\n\t\tmessage = await this.badWords.filterBadWords({ message });\n\t\tmessage = await this.markdownParser.parseMarkdown({ message, config: this.getMarkdownConfig() });\n\t\tmessage = await this.spotify.convertSpotifyLinks({ message });\n\t\tmessage = await this.jumpToMessage.createAttachmentForMessageURLs({\n\t\t\tmessage,\n\t\t\tuser,\n\t\t\tconfig: {\n\t\t\t\tchainLimit: settings.get<number>('Message_QuoteChainLimit'),\n\t\t\t\tsiteUrl: settings.get<string>('Site_Url'),\n\t\t\t\tuseRealName: settings.get<boolean>('UI_Use_Real_Name'),\n\t\t\t},\n\t\t});\n\n\t\tif (!this.isEditedOrOld(message)) {\n\t\t\tawait Promise.all([\n\t\t\t\tthis.checkMAC.isWithinLimits({ message, room }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'all', permission: 'mention-all' }),\n\t\t\t\tthis.preventMention.preventMention({ message, user, mention: 'here', permission: 'mention-here' }),\n\t\t\t]);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tprivate getMarkdownConfig() {\n\t\tconst customDomains = settings.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t? settings\n\t\t\t\t\t.get<string>('Message_CustomDomain_AutoLink')\n\t\t\t\t\t.split(',')\n\t\t\t\t\t.map((domain) => domain.trim())\n\t\t\t: [];\n\n\t\treturn {\n\t\t\tcolors: settings.get<boolean>('HexColorPreview_Enabled'),\n\t\t\temoticons: true,\n\t\t\tcustomDomains,\n\t\t\t...(settings.get<boolean>('Katex_Enabled') && {\n\t\t\t\tkatex: {\n\t\t\t\t\tdollarSyntax: settings.get<boolean>('Katex_Dollar_Syntax'),\n\t\t\t\t\tparenthesisSyntax: settings.get<boolean>('Katex_Parenthesis_Syntax'),\n\t\t\t\t},\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isEditedOrOld(message: IMessage): boolean {\n\t\treturn isEditedMessage(message) || !message.ts || Math.abs(Date.now() - message.ts.getTime()) > 60000;\n\t}\n\n\t// joinDiscussionOnMessage\n\t// private async joinDiscussionOnMessage({ message, room, user }: { message: IMessage; room: IRoom; user: IUser }) {\n\t// \t// abort if room is not a discussion\n\t// \tif (!room.prid) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \t// check if user already joined the discussion\n\t// \tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, message.u._id, {\n\t// \t\tprojection: { _id: 1 },\n\t// \t});\n\n\t// \tif (sub) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tawait Room.join({ room, user });\n\t// }\n\n\tasync beforeReacted(message: IMessage, room: AtLeast<IRoom, 'federated'>) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to react to message');\n\t\t}\n\t}\n\n\tasync beforeDelete(message: IMessage, room: IRoom) {\n\t\tif (!FederationActions.shouldPerformAction(message, room)) {\n\t\t\tthrow new FederationMatrixInvalidConfigurationError('Unable to delete message');\n\t\t}\n\t}\n}\n"],"mappings":";;;IACA,IAAAA,aAAS;IAAAC,MAAe,CAAAC,IAAA,uCAA4B;MAAAC,QAAAC,CAAA,EAA4B;QAACJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAAjFH,MAAA,CAAOI,MAAE;MAAAC,cAAe,EAAAA,CAAA,KAAAA;IAAsB;IAAA,IAAMC,aAAA,EAAAC,oBAA6B;IAAAP,MAAA,CAAAC,IAAA;MAAAK,cAAAH,CAAA;QAAAG,aAAA,GAAAH,CAAA;MAAA;MAAAI,qBAAAJ,CAAA;QAAAI,oBAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,eAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,gBAAAL,CAAA;QAAAK,eAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,QAAA,EAAAC,KAAA;IAAAV,MAAA,CAAAC,IAAA;MAAAQ,SAAAN,CAAA;QAAAM,QAAA,GAAAN,CAAA;MAAA;MAAAO,MAAAP,CAAA;QAAAO,KAAA,GAAAP,CAAA;MAAA;IAAA;IAAA,IAAAQ,aAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAU,cAAAR,CAAA;QAAAQ,aAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAS,WAAA;IAAAZ,MAAA,CAAAC,IAAA;MAAAW,YAAAT,CAAA;QAAAS,WAAA,GAAAT,CAAA;MAAA;IAAA;IAAA,IAAAU,aAAA;IAAAb,MAAA,CAAAC,IAAA;MAAAY,cAAAV,CAAA;QAAAU,aAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,uBAAA,EAAAC,qBAAA;IAAAf,MAAA,CAAAC,IAAA;MAAAa,wBAAAX,CAAA;QAAAW,uBAAA,GAAAX,CAAA;MAAA;MAAAY,sBAAAZ,CAAA;QAAAY,qBAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,0BAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAe,2BAAAb,CAAA;QAAAa,0BAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,kBAAA;IAAAjB,MAAA,CAAAC,IAAA;MAAAgB,mBAAAd,CAAA;QAAAc,kBAAA,GAAAd,CAAA;MAAA;IAAA;IAAA,IAAAe,kBAAA;IAAAlB,MAAA,CAAAC,IAAA;MAAAiB,mBAAAf,CAAA;QAAAe,kBAAA,GAAAf,CAAA;MAAA;IAAA;IAAA,IAAAgB,QAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAkB,SAAAhB,CAAA;QAAAgB,QAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,gBAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,iBAAAjB,CAAA;QAAAiB,gBAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,wBAAA;IAAArB,MAAA,CAAAC,IAAA;MAAAoB,yBAAAlB,CAAA;QAAAkB,wBAAA,GAAAlB,CAAA;MAAA;IAAA;IAAA,IAAAmB,yCAAA;IAAAtB,MAAA,CAAAC,IAAA;MAAAqB,0CAAAnB,CAAA;QAAAmB,yCAAA,GAAAnB,CAAA;MAAA;IAAA;IAAA,IAAAoB,iBAAA;IAAAvB,MAAA,CAAAC,IAAA;MAAAsB,kBAAApB,CAAA;QAAAoB,iBAAA,GAAApB,CAAA;MAAA;IAAA;IAAA,IAAAqB,kBAAA;IAAAxB,MAAA,CAAAC,IAAA;MAAAuB,mBAAArB,CAAA;QAAAqB,kBAAA,GAAArB,CAAA;MAAA;IAAA;IAAA,IAAAsB,kBAAA;IAAAzB,MAAA,CAAAC,IAAA;MAAAwB,mBAAAtB,CAAA;QAAAsB,kBAAA,GAAAtB,CAAA;MAAA;IAAA;IAAA,IAAAuB,uBAAA;IAAA1B,MAAA,CAAAC,IAAA;MAAAyB,wBAAAvB,CAAA;QAAAuB,uBAAA,GAAAvB,CAAA;MAAA;IAAA;IAAA,IAAAwB,wBAAA;IAAA3B,MAAA,CAAAC,IAAA;MAAA0B,yBAAAxB,CAAA;QAAAwB,wBAAA,GAAAxB,CAAA;MAAA;IAAA;IAAA,IAAAyB,aAAA;IAAA5B,MAAA,CAAAC,IAAA;MAAA2B,cAAAzB,CAAA;QAAAyB,aAAA,GAAAzB,CAAA;MAAA;IAAA;IAAA,IAAA0B,wBAAA;IAAA7B,MAAA,CAAAC,IAAA;MAAA4B,yBAAA1B,CAAA;QAAA0B,wBAAA,GAAA1B,CAAA;MAAA;IAAA;IAAA,IAAA2B,iBAAA;IAAA9B,MAAA,CAAAC,IAAA;MAAA6B,kBAAA3B,CAAA;QAAA2B,iBAAA,GAAA3B,CAAA;MAAA;IAAA;IAAA,IAAA4B,oBAAA,WAAAA,oBAAA;IAwBjF,MAAMC,qBAAqB,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACC,MAAM,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC,CAACC,WAAW,EAAE,CAAC;IAE1G,MAAOjC,cAAe,SAAQE,oBAAoB;MAAAgC,YAAA;QAAA,SAAAC,SAAA;QAAA,KAC7CC,IAAI,GAAG,SAAS;QAAA,KAElBC,cAAc;QAAA,KAEdC,QAAQ;QAAA,KAERC,OAAO;QAAA,KAEPC,aAAa;QAAA,KAEbC,cAAc;QAAA,KAEdC,cAAc;QAAA,KAEdC,QAAQ;MAAA;MAEhB,MAAMC,OAAOA,CAAA;QACZ,IAAI,CAACP,cAAc,GAAG,IAAIb,wBAAwB,EAAE;QACpD,IAAI,CAACc,QAAQ,GAAG,IAAInB,kBAAkB,EAAE;QACxC,IAAI,CAACoB,OAAO,GAAG,IAAId,iBAAiB,EAAE;QACtC,IAAI,CAACe,aAAa,GAAG,IAAInB,uBAAuB,CAAC;UAChDwB,WAAWA,CAACC,UAAU;YACrB,OAAO1C,QAAQ,CAAC2C,gBAAgB,CAACD,UAAU,CAAC,CAACE,OAAO,EAAE;UACvD,CAAC;UACDC,QAAQA,CAACC,OAAO;YACf,OAAO7C,KAAK,CAAC8C,SAAS,CAACD,OAAO,CAAC,CAACF,OAAO,EAAE;UAC1C,CAAC;UACDI,aAAaA,CAACC,IAAW,EAAEC,IAAW;YACrC,OAAOrD,aAAa,CAACmD,aAAa,CAACC,IAAI,EAAEC,IAAI,CAAC;UAC/C,CAAC;UACDvC,gBAAgBA,CAACuC,IAAa;YAC7B,OAAQA,IAAI,IAAIvC,gBAAgB,CAACuC,IAAI,CAAC,IAAK,EAAE;UAC9C;SACA,CAAC;QACF,IAAI,CAACb,cAAc,GAAG,IAAIzB,wBAAwB,EAAE;QACpD,IAAI,CAAC0B,cAAc,GAAG,IAAIpB,wBAAwB,CAAC,CAACK,qBAAqB,CAAC;QAC1E,IAAI,CAACgB,QAAQ,GAAG,IAAIvB,kBAAkB,EAAE;QAExC,MAAM,IAAI,CAACmC,iBAAiB,EAAE;MAC/B;MAEQ,MAAMA,iBAAiBA,CAAA;QAC9BzC,QAAQ,CAAC0C,aAAa,CACrB,CAAC,6BAA6B,EAAE,4BAA4B,EAAE,2BAA2B,CAAC,EAC1F,MAAAC,IAAA,IAA6C;UAAA,IAAtC,CAACC,OAAO,EAAEC,YAAY,EAAEC,SAAS,CAAC,GAAAH,IAAA;UACxC,IAAI,CAACC,OAAO,EAAE;YACb,IAAI,CAACpB,QAAQ,CAACuB,OAAO,EAAE;YACvB;UACD;UACA,MAAM,IAAI,CAACvB,QAAQ,CAACwB,SAAS,CAACH,YAAsB,EAAEC,SAAmB,CAAC;QAC3E,CAAC,CACD;MACF;MAEA,MAAMrD,WAAWA,CAAAwD,KAAA,EAAmE;QAAA,IAAlE;UAAEC,MAAM;UAAEC,GAAG;UAAEC;QAAG,CAAgD,GAAAH,KAAA;QACnF,OAAOnD,kBAAkB,CAACoD,MAAM,EAAE;UAAEC,GAAG;UAAEC;QAAG,CAAE,CAAC;MAChD;MAEA,MAAMC,yBAAyBA,CAACb,IAAW,EAAEc,OAA0B,EAAEf,IAAoB,EAAgB;QAAA,IAAdgB,MAAM,GAAAlC,SAAA,CAAAmC,MAAA,QAAAnC,SAAA,QAAAoC,SAAA,GAAApC,SAAA,MAAG,KAAK;QAC5G,OAAO5B,WAAW,CAAC+C,IAAI,EAAEc,OAAO,EAAEf,IAAI,EAAEgB,MAAM,CAAC;MAChD;MAEA,MAAM/D,aAAaA,CAACgD,IAAW,EAAEc,OAAiB;QACjD,OAAO9D,aAAa,CAAC8D,OAAO,EAAEd,IAAI,CAAC;MACpC;MAEA,MAAM9C,aAAaA,CAAC4D,OAAiB,EAAEd,IAAW,EAAEkB,WAAsB,EAAEC,WAAsB;QACjG,OAAOjE,aAAa,CAAC4D,OAAO,EAAEd,IAAI,EAAEkB,WAAW,EAAEC,WAAW,CAAC;MAC9D;MAEA,MAAMC,cAAcA,CAACC,MAAc,EAAEC,QAAgB,EAAEC,SAA0B,EAAEC,WAAqB;QACvG,OAAOjE,kBAAkB,CAAC8D,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,CAAC;MACpE;MAEA,MAAMC,8BAA8BA,CACnCC,IAAwB,EACxBf,GAAW,EACXgB,WAAmB,EACnBC,KAA+C,EAC/CC,SAAsB;QAEtB,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACL,IAAI,EAAEf,GAAG,EAAEgB,WAAW,EAAEC,KAAK,EAAEC,SAAS,CAAC;QAE7F,MAAM9B,IAAI,GAAG,MAAMhD,KAAK,CAACiF,WAAW,CAACrB,GAAG,CAAC;QACzC,IAAI,CAACZ,IAAI,EAAE;UACV,MAAM,IAAIkC,KAAK,CAAC,0BAA0B,CAAC;QAC5C;QAEA,MAAM5E,0BAA0B,CAACyE,cAAc,EAAE/B,IAAI,CAAC;QAEtD,OAAO+B,cAAc;MACtB;MAEA,MAAMC,iBAAiBA,CACtBL,IAAwB,EACxBf,GAAW,EACXG,OAAe,EACfc,KAA+C,EAC/CC,SAAsB;QAEtB,MAAM;UAAEK,GAAG,EAAEb,MAAM;UAAEc,QAAQ;UAAErD;QAAI,CAAE,GAAG8C,KAAK;QAC7C,IAAI,CAACO,QAAQ,EAAE;UACd,MAAM,IAAIF,KAAK,CAAC,+BAA+B,CAAC;QACjD;QAEA,MAAM,CAAC;UAAEG;QAAU,CAAE,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC1CxF,QAAQ,CAACyF,wCAAwC,CAChDb,IAAI,EACJf,GAAG,EACHG,OAAO,EACP;UAAEoB,GAAG,EAAEb,MAAM;UAAEc,QAAQ;UAAErD;QAAI,CAAE,EAC/BtB,QAAQ,CAACgF,GAAG,CAAC,8BAA8B,CAAC,EAC5CX,SAAS,CACT,EACD9E,KAAK,CAAC0F,eAAe,CAAC9B,GAAG,EAAE,CAAC,CAAC,CAC7B,CAAC;QAEF,IAAI,CAACyB,UAAU,EAAE;UAChB,MAAM,IAAIH,KAAK,CAAC,gCAAgC,CAAC;QAClD;QAEA,MAAMH,cAAc,GAAG,MAAMhF,QAAQ,CAACkF,WAAW,CAACI,UAAU,CAAC;QAC7D,IAAI,CAACN,cAAc,EAAE;UACpB,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;QACvD;QAEA,KAAK7E,qBAAqB,CAAC;UAAEsF,EAAE,EAAEZ,cAAc,CAACI,GAAG;UAAES,IAAI,EAAEb;QAAc,CAAE,CAAC;QAC5E,KAAK3E,uBAAuB,CAACwD,GAAG,CAAC;QAEjC,OAAOmB,cAAc;MACtB;MAEA,MAAMc,UAAUA,CAAAC,KAAA,EAQf;QAAA,IARgB;UAChB/B,OAAO;UACPf,IAAI;UACJC;QAAI,CAKJ,GAAA6C,KAAA;QACA;QACA;QAEA,IAAI,CAACjF,iBAAiB,CAACkF,mBAAmB,CAAChC,OAAO,EAAEf,IAAI,CAAC,EAAE;UAC1D,MAAM,IAAIpC,yCAAyC,CAAC,wBAAwB,CAAC;QAC9E;QAEAmD,OAAO,GAAG,MAAM7C,aAAa,CAAC8E,OAAO,CAACjC,OAAO,CAAC;QAC9CA,OAAO,GAAG,MAAM,IAAI,CAAC3B,cAAc,CAAC6D,mBAAmB,CAAC;UAAElC,OAAO;UAAEf,IAAI;UAAEC;QAAI,CAAE,CAAC;QAChFc,OAAO,GAAG,MAAM,IAAI,CAAC9B,QAAQ,CAACiE,cAAc,CAAC;UAAEnC;QAAO,CAAE,CAAC;QACzDA,OAAO,GAAG,MAAM,IAAI,CAAC1B,cAAc,CAAC8D,aAAa,CAAC;UAAEpC,OAAO;UAAEqC,MAAM,EAAE,IAAI,CAACC,iBAAiB;QAAE,CAAE,CAAC;QAChGtC,OAAO,GAAG,MAAM,IAAI,CAAC7B,OAAO,CAACoE,mBAAmB,CAAC;UAAEvC;QAAO,CAAE,CAAC;QAC7DA,OAAO,GAAG,MAAM,IAAI,CAAC5B,aAAa,CAACoE,8BAA8B,CAAC;UACjExC,OAAO;UACPd,IAAI;UACJmD,MAAM,EAAE;YACPI,UAAU,EAAE/F,QAAQ,CAACgF,GAAG,CAAS,yBAAyB,CAAC;YAC3DgB,OAAO,EAAEhG,QAAQ,CAACgF,GAAG,CAAS,UAAU,CAAC;YACzCiB,WAAW,EAAEjG,QAAQ,CAACgF,GAAG,CAAU,kBAAkB;;SAEtD,CAAC;QAEF,IAAI,CAAC,IAAI,CAACkB,aAAa,CAAC5C,OAAO,CAAC,EAAE;UACjC,MAAMuB,OAAO,CAACC,GAAG,CAAC,CACjB,IAAI,CAACjD,QAAQ,CAACsE,cAAc,CAAC;YAAE7C,OAAO;YAAEf;UAAI,CAAE,CAAC,EAC/C,IAAI,CAAChB,cAAc,CAACA,cAAc,CAAC;YAAE+B,OAAO;YAAEd,IAAI;YAAE4D,OAAO,EAAE,KAAK;YAAEC,UAAU,EAAE;UAAa,CAAE,CAAC,EAChG,IAAI,CAAC9E,cAAc,CAACA,cAAc,CAAC;YAAE+B,OAAO;YAAEd,IAAI;YAAE4D,OAAO,EAAE,MAAM;YAAEC,UAAU,EAAE;UAAc,CAAE,CAAC,CAClG,CAAC;QACH;QAEA,OAAO/C,OAAO;MACf;MAEQsC,iBAAiBA,CAAA;QACxB,MAAMU,aAAa,GAAGtG,QAAQ,CAACgF,GAAG,CAAS,+BAA+B,CAAC,GACxEhF,QAAQ,CACPgF,GAAG,CAAS,+BAA+B,CAAC,CAC5CuB,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,EAAE,CAAC,GAC/B,EAAE;QAEL,OAAA9H,aAAA;UACC+H,MAAM,EAAE3G,QAAQ,CAACgF,GAAG,CAAU,yBAAyB,CAAC;UACxD4B,SAAS,EAAE,IAAI;UACfN;QAAa,GACTtG,QAAQ,CAACgF,GAAG,CAAU,eAAe,CAAC,IAAI;UAC7C6B,KAAK,EAAE;YACNC,YAAY,EAAE9G,QAAQ,CAACgF,GAAG,CAAU,qBAAqB,CAAC;YAC1D+B,iBAAiB,EAAE/G,QAAQ,CAACgF,GAAG,CAAU,0BAA0B;;SAEpE;MAEH;MAEQkB,aAAaA,CAAC5C,OAAiB;QACtC,OAAOjE,eAAe,CAACiE,OAAO,CAAC,IAAI,CAACA,OAAO,CAAC0D,EAAE,IAAIC,IAAI,CAACC,GAAG,CAACC,IAAI,CAACC,GAAG,EAAE,GAAG9D,OAAO,CAAC0D,EAAE,CAACK,OAAO,EAAE,CAAC,GAAG,KAAK;MACtG;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;MACA;MACA;MAEA;MACA;MAEA,MAAMC,aAAaA,CAAChE,OAAiB,EAAEf,IAAiC;QACvE,IAAI,CAACnC,iBAAiB,CAACkF,mBAAmB,CAAChC,OAAO,EAAEf,IAAI,CAAC,EAAE;UAC1D,MAAM,IAAIpC,yCAAyC,CAAC,4BAA4B,CAAC;QAClF;MACD;MAEA,MAAMoH,YAAYA,CAACjE,OAAiB,EAAEf,IAAW;QAChD,IAAI,CAACnC,iBAAiB,CAACkF,mBAAmB,CAAChC,OAAO,EAAEf,IAAI,CAAC,EAAE;UAC1D,MAAM,IAAIpC,yCAAyC,CAAC,0BAA0B,CAAC;QAChF;MACD;;IACAqH,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c3c248f035ef33050efee2b1b426d3b8fcc3f303"}
