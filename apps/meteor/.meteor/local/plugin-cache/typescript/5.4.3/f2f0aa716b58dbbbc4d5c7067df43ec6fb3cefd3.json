{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatRooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatRooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatRooms.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatRooms.ts","sourceRoot":"","sources":["server/models/raw/LivechatRooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIOmnichannelRoom,\n\tRocketChatRecordDeleted,\n\tIOmnichannelRoomClosingInfo,\n\tDeepWritable,\n\tIMessage,\n\tILivechatPriority,\n\tIOmnichannelServiceLevelAgreements,\n\tReportResult,\n\tMACStats,\n} from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tDb,\n\tCollection,\n\tIndexDescription,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateFilter,\n\tSortDirection,\n\tFindCursor,\n\tUpdateResult,\n\tAggregationCursor,\n\tUpdateOptions,\n} from 'mongodb';\n\nimport { getValue } from '../../../app/settings/server/raw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\n/**\n * @extends BaseRaw<ILivechatRoom>\n */\nexport class LivechatRoomsRaw extends BaseRaw<IOmnichannelRoom> implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\t// move indexes from constructor to here using IndexDescription as type\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { open: 1 }, sparse: true },\n\t\t\t{ key: { departmentId: 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.chatDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.serviceTimeDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.visitorInactivity': 1 }, sparse: true },\n\t\t\t{ key: { 'omnichannel.predictedVisitorAbandonmentAt': 1 }, sparse: true },\n\t\t\t{ key: { closedAt: 1 }, sparse: true },\n\t\t\t{ key: { servedBy: 1 }, sparse: true },\n\t\t\t{ key: { 'v.token': 1, 'email.thread': 1 }, sparse: true },\n\t\t\t{ key: { 'v._id': 1 }, sparse: true },\n\t\t\t{ key: { 'servedBy._id': 1, 'departmentId': 1, 't': 1, 'open': 1, 'ts': -1 } },\n\t\t\t{ key: { t: 1, departmentId: 1, closedAt: 1 }, partialFilterExpression: { closedAt: { $exists: true } } },\n\t\t\t{ key: { source: 1 }, sparse: true },\n\t\t\t{ key: { departmentAncestors: 1 }, sparse: true },\n\t\t\t{\n\t\t\t\tkey: { 't': 1, 'open': 1, 'source.type': 1, 'v.status': 1 },\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t't': { $eq: 'l' },\n\t\t\t\t\t'open': { $eq: true },\n\t\t\t\t\t'source.type': { $eq: 'widget' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { pdfTranscriptRequested: 1 }, sparse: true },\n\t\t\t{ key: { pdfTranscriptFileId: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { callStatus: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { priorityId: 1 }, sparse: true },\n\t\t\t{ key: { slaId: 1 }, sparse: true },\n\t\t\t{ key: { source: 1, ts: 1 }, partialFilterExpression: { source: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { departmentId: 1, ts: 1 }, partialFilterExpression: { departmentId: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'tags.0': 1, 'ts': 1 }, partialFilterExpression: { 'tags.0': { $exists: true }, 't': 'l' } },\n\t\t\t{ key: { servedBy: 1, ts: 1 }, partialFilterExpression: { servedBy: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'v.activity': 1, 'ts': 1 }, partialFilterExpression: { 'v.activity': { $exists: true }, 't': 'l' } },\n\t\t];\n\t}\n\n\tgetQueueMetrics({\n\t\tdepartmentId,\n\t\tagentId,\n\t\tincludeOfflineAgents,\n\t\toptions = {},\n\t}: {\n\t\tdepartmentId?: string;\n\t\tagentId?: string;\n\t\tincludeOfflineAgents?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = { $match: { t: 'l', open: true, servedBy: { $exists: true } } };\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlet: {\n\t\t\t\t\tdeptId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$deptId'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst usersLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlet: {\n\t\t\t\t\tservedById: '$servedBy._id',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$servedById'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...(!includeOfflineAgents && {\n\t\t\t\t\t\t\t\tstatus: { $ne: 'offline' },\n\t\t\t\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t...(agentId && { _id: agentId }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst usersUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst usersGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tuserId: '$user._id',\n\t\t\t\t\tusername: '$user.username',\n\t\t\t\t\tstatus: '$user.status',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tuser: {\n\t\t\t\t\t_id: '$_id.userId',\n\t\t\t\t\tusername: '$_id.username',\n\t\t\t\t\tstatus: '$_id.status',\n\t\t\t\t},\n\t\t\t\tdepartment: {\n\t\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\t\tname: '$_id.departmentName',\n\t\t\t\t},\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [match, departmentsLookup, departmentsUnwind, usersLookup, usersUnwind];\n\t\tconst sort: Document = { $sort: options.sort || { chats: -1 } };\n\t\tconst pagination = [sort];\n\n\t\tif (options.offset) {\n\t\t\tpagination.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tpagination.push({ $limit: options.count });\n\t\t}\n\n\t\tconst facet = {\n\t\t\t$facet: {\n\t\t\t\tsortedResults: pagination,\n\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t},\n\t\t};\n\n\t\tconst params = [...firstParams, usersGroup, project, facet];\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred(), allowDiskUse: true }).toArray();\n\t}\n\n\tasync findAllNumberOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'metrics.visitorInactivity': {\n\t\t\t\t\t$gte: await getValue('Livechat_visitor_inactivity_timeout'),\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tabandonedRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tabandonedRooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync findPercentageOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tabandonedChats: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ $ifNull: ['$metrics.visitorInactivity', false] },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// TODO: move these calls to outside model\n\t\t\t\t\t\t\t\t\t\t$gte: ['$metrics.visitorInactivity', await getValue('Livechat_visitor_inactivity_timeout')],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tpercentageOfAbandonedChats: {\n\t\t\t\t\t$floor: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: [{ $multiply: ['$abandonedChats', 100] }, '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageOfChatDurationTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start) },\n\t\t\t\tclosedAt: { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageChatDurationTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsDuration', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageWaitingTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\twaitingResponse: { $ne: true },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsFirstResponses: { $sum: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageWaitingTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsFirstResponses', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllRooms({\n\t\tstart,\n\t\tend,\n\t\tanswered,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tanswered?: boolean;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tif (answered !== undefined) {\n\t\t\tmatch.$match.waitingResponse = { [answered ? '$ne' : '$eq']: true };\n\t\t}\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tchats: '$rooms',\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\trooms: { $push: '$$ROOT' },\n\t\t\t},\n\t\t};\n\t\tconst departmentsProject = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\tname: '$_id.name',\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst roomsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$rooms',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: 'rooms._id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $eq: ['$$message.t', 'livechat_transfer_history'] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst transferProject = {\n\t\t\t$project: {\n\t\t\t\tname: 1,\n\t\t\t\ttransfers: { $size: { $ifNull: ['$messages', []] } },\n\t\t\t},\n\t\t};\n\t\tconst transferGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tdepartmentId: '$_id',\n\t\t\t\t\tname: '$name',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: '$transfers' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tname: { $ifNull: ['$_id.name', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Document[] = [match, departmentsLookup, departmentsUnwind];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'departments._id': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [\n\t\t\t...firstParams,\n\t\t\tdepartmentsGroup,\n\t\t\tdepartmentsProject,\n\t\t\troomsUnwind,\n\t\t\tmessagesLookup,\n\t\t\tmessagesProject,\n\t\t\ttransferProject,\n\t\t\ttransferGroup,\n\t\t\tpresentationProject,\n\t\t\tsort,\n\t\t];\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'$or': [\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t'servedBy': { $exists: true },\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllClosedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllQueuedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\tservedBy: { $exists: false },\n\t\t\topen: true,\n\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllOpenChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'$or': [\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOnHoldChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'onHold': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$eq: true,\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'open': { $exists: false },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: true,\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: { $exists: false },\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateResponseTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumResponseAvg: {\n\t\t\t\t\t$sum: '$metrics.response.avg',\n\t\t\t\t},\n\t\t\t\troomsWithResponseTime: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.response.avg', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstResponse: { $max: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithResponseTime', 0] }, 0, { $divide: ['$sumResponseAvg', '$roomsWithResponseTime'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstResponse',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateReactionTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumReactionFirstResponse: {\n\t\t\t\t\t$sum: '$metrics.reaction.ft',\n\t\t\t\t},\n\t\t\t\troomsWithFirstReaction: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.reaction.ft', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstReaction: { $max: '$metrics.reaction.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithFirstReaction', 0] }, 0, { $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstReaction',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateDurationTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'metrics.chatDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumChatDuration: {\n\t\t\t\t\t$sum: '$metrics.chatDuration',\n\t\t\t\t},\n\t\t\t\troomsWithChatDuration: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.chatDuration', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxChatDuration: { $max: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithChatDuration', 0] }, 0, { $divide: ['$sumChatDuration', '$roomsWithChatDuration'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxChatDuration',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindAllAverageOfServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'responseBy.lastMessageTs': { $exists: true },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tallServiceTime: {\n\t\t\t\t\t$sum: { $divide: [{ $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts'] }, 1000] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allServiceTime', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindRoomsByVisitorIdAndMessageWithCriteria({\n\t\tvisitorId,\n\t\tsearchText,\n\t\topen,\n\t\tserved,\n\t\tonlyCount = false,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorId: string;\n\t\tsearchText?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tonlyCount?: boolean;\n\t\tsource?: string;\n\t\toptions?: { sort?: { [k: string]: number }; skip?: number; limit?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t'v._id': visitorId,\n\t\t\t\t...(open !== undefined && !open && { closedAt: { $exists: true } }),\n\t\t\t\t...(served !== undefined && served && { servedBy: { $exists: served } }),\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst matchMessages = searchText && {\n\t\t\t$match: { 'messages.msg': { $regex: `.*${escapeRegExp(searchText)}.*` } },\n\t\t};\n\n\t\tconst params: Document[] = [match, lookup];\n\n\t\tif (matchMessages) {\n\t\t\tparams.push(matchMessages);\n\t\t}\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tfname: 1,\n\t\t\t\tts: 1,\n\t\t\t\tv: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosingMessage: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t\tcond: { $eq: ['$$messages.t', 'livechat-close'] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst unwindClosingMsg = {\n\t\t\t$unwind: { path: '$closingMessage', preserveNullAndEmptyArrays: true },\n\t\t};\n\t\tconst sort = { $sort: options.sort || { ts: -1 } };\n\n\t\tparams.push(project, unwindClosingMsg, sort);\n\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'count' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\n\t\tif (options.skip) {\n\t\t\tparams.push({ $skip: options.skip });\n\t\t}\n\n\t\tif (options.limit) {\n\t\t\tparams.push({ $limit: options.limit });\n\t\t}\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorsIds: string[];\n\t\tsource?: string;\n\t\toptions?: FindOptions;\n\t}): FindPaginated<FindCursor<IOmnichannelRoom>> {\n\t\treturn this.findPaginated<IOmnichannelRoom>(\n\t\t\t{\n\t\t\t\t'v._id': { $in: visitorsIds },\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsWithCriteria({\n\t\tagents,\n\t\troomName,\n\t\tdepartmentId,\n\t\topen,\n\t\tserved,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\ttags,\n\t\tcustomFields,\n\t\tvisitorId,\n\t\troomIds,\n\t\tonhold,\n\t\tqueued,\n\t\toptions = {},\n\t\textraQuery = {},\n\t}: {\n\t\tagents?: string[];\n\t\troomName?: string;\n\t\tdepartmentId?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tcreatedAt?: { start?: Date; end?: Date };\n\t\tclosedAt?: { start?: Date; end?: Date };\n\t\ttags?: string[];\n\t\tcustomFields?: Record<string, string>;\n\t\tvisitorId?: string;\n\t\troomIds?: string[];\n\t\tonhold?: boolean;\n\t\tqueued?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: SortDirection } };\n\t\textraQuery?: Filter<IOmnichannelRoom>;\n\t}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...extraQuery,\n\t\t\t...(agents && { 'servedBy._id': { $in: agents } }),\n\t\t\t...(roomName && { fname: new RegExp(escapeRegExp(roomName), 'i') }),\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...(open !== undefined && { open: { $exists: open }, onHold: { $ne: true } }),\n\t\t\t...(served !== undefined && { servedBy: { $exists: served } }),\n\t\t\t...(visitorId && visitorId !== 'undefined' && { 'v._id': visitorId }),\n\t\t};\n\n\t\tif (open) {\n\t\t\tquery.servedBy = { $exists: true };\n\t\t}\n\n\t\tif (createdAt) {\n\t\t\tquery.ts = {};\n\t\t\tif (createdAt.start) {\n\t\t\t\tquery.ts.$gte = new Date(createdAt.start);\n\t\t\t}\n\t\t\tif (createdAt.end) {\n\t\t\t\tquery.ts.$lte = new Date(createdAt.end);\n\t\t\t}\n\t\t}\n\t\tif (closedAt) {\n\t\t\tquery.closedAt = {};\n\t\t\tif (closedAt.start) {\n\t\t\t\tquery.closedAt.$gte = new Date(closedAt.start);\n\t\t\t}\n\t\t\tif (closedAt.end) {\n\t\t\t\tquery.closedAt.$lte = new Date(closedAt.end);\n\t\t\t}\n\t\t}\n\t\tif (tags) {\n\t\t\tquery.tags = { $in: tags };\n\t\t}\n\t\tif (customFields && Object.keys(customFields).length) {\n\t\t\tquery.$and = Object.keys(customFields).map((key) => ({\n\t\t\t\t[`livechatData.${key}`]: new RegExp(customFields[key], 'i'),\n\t\t\t}));\n\t\t}\n\n\t\tif (roomIds) {\n\t\t\tquery._id = { $in: roomIds };\n\t\t}\n\n\t\tif (onhold) {\n\t\t\tquery.onHold = {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: onhold,\n\t\t\t};\n\t\t}\n\n\t\tif (queued) {\n\t\t\tquery.servedBy = { $exists: false };\n\t\t\tquery.open = true;\n\t\t\tquery.onHold = { $ne: true };\n\t\t}\n\n\t\treturn this.findPaginated(query, {\n\t\t\tsort: options.sort || { name: 1 },\n\t\t\tskip: options.offset,\n\t\t\tlimit: options.count,\n\t\t});\n\t}\n\n\tgetOnHoldConversationsBetweenDate(from: Date, to: Date, departmentId?: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tonHold: {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: new Date(from), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(to), // ISODate, ts < date.lt\n\t\t\t},\n\t\t};\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindAllServiceTimeByAgent({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tchats: 1,\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageServiceTimeByAgents({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tactive: '$_id.active',\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$chats', 0] }, 0, { $divide: ['$serviceTimeDuration', '$chats'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tsetDepartmentByRoomId(roomId: string, departmentId: string) {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { departmentId } });\n\t}\n\n\tfindOpen(extraQuery = {}) {\n\t\treturn this.find({ t: 'l', open: true, ...extraQuery });\n\t}\n\n\tsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferOngoing: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tautoTransferOngoing: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAutoTransferredAtById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferredAt: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAvailableSources() {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttypes: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthen: '$$REMOVE',\n\t\t\t\t\t\t\t\telse: { type: '$source.type' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tapps: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telse: '$$REMOVE',\n\t\t\t\t\t\t\t\tthen: {\n\t\t\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\t\t\tid: '$source.id',\n\t\t\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t\t\t\tsidebarIcon: '$source.sidebarIcon',\n\t\t\t\t\t\t\t\t\tdefaultIcon: '$source.defaultIcon',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tfullTypes: { $setUnion: ['$types', '$apps'] },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\t// These 3 methods shouldn't be here :( but current EE model has a meteor dependency\n\t// And refactoring it could take time\n\tsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptRequested: true },\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { pdfTranscriptRequested: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetPdfTranscriptFileIdById(rid: string, fileId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptFileId: fileId },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetEmailTranscriptRequestedByRoomId(roomId: string, transcriptInfo: NonNullable<IOmnichannelRoom['transcriptRequest']>) {\n\t\tconst { requestedAt, requestedBy, email, subject } = transcriptInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttranscriptRequest: {\n\t\t\t\t\t\trequestedAt,\n\t\t\t\t\t\trequestedBy,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetEmailTranscriptRequestedByRoomId(roomId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\ttranscriptRequest: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseRoomById(roomId: string, closeInfo: IOmnichannelRoomClosingInfo, options?: UpdateOptions) {\n\t\tconst { closer, closedBy, closedAt, chatDuration, serviceTimeDuration, tags } = closeInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tclosedAt,\n\t\t\t\t\t'metrics.chatDuration': chatDuration,\n\t\t\t\t\t'metrics.serviceTimeDuration': serviceTimeDuration,\n\t\t\t\t\t'v.status': UserStatus.OFFLINE,\n\t\t\t\t\t...(closer && { closer }),\n\t\t\t\t\t...(closedBy && { closedBy }),\n\t\t\t\t\t...(tags && { tags }),\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\topen: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tbulkRemoveDepartmentAndUnitsFromRooms(departmentId: string) {\n\t\treturn this.updateMany({ departmentId }, { $unset: { departmentId: 1, departmentAncestors: 1 } });\n\t}\n\n\tfindOneByIdOrName(_idOrName: string, options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateSurveyFeedbackById(_id: string, surveyFeedback: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsurveyFeedback,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateDataByToken(token: string, key: string, value: any, overwrite = true) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });\n\t\t\tif (!room) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync saveRoomById({\n\t\t_id,\n\t\ttopic,\n\t\ttags,\n\t\tlivechatData,\n\t\t...extra\n\t}: {\n\t\t_id: string;\n\t\ttopic?: string;\n\t\ttags?: string[];\n\t\tlivechatData?: Record<string, any>;\n\t} & Record<string, any>) {\n\t\tconst setData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$set']> = { ...extra };\n\t\tconst unsetData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$unset']> = {};\n\n\t\tif (topic != null) {\n\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tif (trimmedTopic.length) {\n\t\t\t\tsetData.topic = trimmedTopic;\n\t\t\t} else {\n\t\t\t\tunsetData.topic = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(tags) && tags.length > 0) {\n\t\t\tsetData.tags = tags;\n\t\t} else {\n\t\t\tunsetData.tags = 1;\n\t\t}\n\n\t\tif (extra.priorityId === '') {\n\t\t\tunsetData.priorityId = 1;\n\t\t\tdelete setData.priorityId;\n\t\t}\n\t\tif (extra.slaId === '') {\n\t\t\tunsetData.slaId = 1;\n\t\t\tdelete setData.slaId;\n\t\t}\n\n\t\tif (livechatData) {\n\t\t\tObject.keys(livechatData).forEach((key) => {\n\t\t\t\tconst value = livechatData[key].trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {};\n\n\t\tif (Object.keys(setData).length > 0) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (Object.keys(unsetData).length > 0) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (Object.keys(update).length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tfindById(_id: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(ids: string[], fields: FindOptions<IOmnichannelRoom>['projection'], extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id: { $in: ids },\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByIdAndVisitorToken(_id: string, visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t_id,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThreadAndDepartment(\n\t\tvisitorToken: string,\n\t\temailThread: string[],\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [\n\t\t\t\t{ 'email.thread': { $elemMatch: { $in: emailThread } } },\n\t\t\t\t{ 'email.thread': new RegExp(emailThread.map((t) => `\"${t}\"`).join('|')) },\n\t\t\t],\n\t\t\t...(departmentId && { departmentId }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateEmailThreadByRoomId(roomId: string, threadIds: string[]) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\t'email.thread': threadIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: roomId }, query);\n\t}\n\n\tfindOneLastServedAndClosedByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'closedAt': { $exists: true },\n\t\t\t'servedBy': { $exists: true },\n\t\t};\n\n\t\toptions.sort = { closedAt: -1 };\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorToken(visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync updateRoomCount() {\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_Room_Count', 1, { returnDocument: 'after' });\n\t\treturn livechatCount.value;\n\t}\n\n\tfindOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndDepartmentIdAndSource(\n\t\tvisitorToken: string,\n\t\tdepartmentId?: string,\n\t\tsource?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...(source && { 'source.type': source }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOpenByVisitorTokenAndDepartmentId(\n\t\tvisitorToken: string,\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByVisitorToken(visitorToken: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByVisitorIdAndAgentId(\n\t\tvisitorId?: string,\n\t\tagentId?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...(visitorId && { 'v._id': visitorId }),\n\t\t\t...(agentId && { 'servedBy._id': agentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByRoomIdAndVisitorToken(roomId: string, visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'_id': roomId,\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindClosedRooms(departmentIds?: string[], options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\topen: { $exists: false },\n\t\t\tclosedAt: { $exists: true },\n\t\t\t...(Array.isArray(departmentIds) && departmentIds.length > 0 && { departmentId: { $in: departmentIds } }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetResponseByRoomIdUpdateQuery(responseBy: IOmnichannelRoom['responseBy'], updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('responseBy', responseBy);\n\t\tupdater.unset('waitingResponse');\n\t\treturn updater;\n\t}\n\n\tgetNotResponseByRoomIdUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('waitingResponse', true);\n\t\tupdater.unset('responseBy');\n\t\treturn updater;\n\t}\n\n\tgetAgentLastMessageTsUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('responseBy.lastMessageTs', new Date());\n\t}\n\n\tprivate getAnalyticsUpdateQuery(\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\tif (analyticsData) {\n\t\t\tupdater.set('metrics.response.avg', analyticsData.avgResponseTime);\n\t\t\tupdater.inc('metrics.response.total', 1);\n\t\t\tupdater.inc('metrics.response.tt', analyticsData.responseTime as number);\n\t\t\tupdater.inc('metrics.reaction.tt', analyticsData.reactionTime as number);\n\t\t}\n\n\t\tif (analyticsData?.firstResponseTime) {\n\t\t\tupdater.set('metrics.reaction.fd', analyticsData.firstReactionDate);\n\t\t\tupdater.set('metrics.reaction.ft', analyticsData.firstReactionTime);\n\t\t\tupdater.set('metrics.response.fd', analyticsData.firstResponseDate);\n\t\t\tupdater.set('metrics.response.ft', analyticsData.firstResponseTime);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByAgent(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\tif (visitorLastQuery > agentLastReply) {\n\t\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater).set('metrics.servedBy.lr', message.ts);\n\t\t}\n\n\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater);\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByVisitor(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\t// update visitor timestamp, only if its new inquiry and not continuing message\n\t\tif (agentLastReply >= visitorLastQuery) {\n\t\t\treturn updater.set('metrics.v.lq', message.ts);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetTotalConversationsBetweenDate(t: 'l', date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tgetAnalyticsMetricsBetweenDate(\n\t\tt: 'l',\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: { ts: 1, departmentId: 1, open: 1, servedBy: 1, metrics: 1, msgs: 1 },\n\t\t});\n\t}\n\n\tgetAnalyticsMetricsBetweenDateWithMessages(\n\t\tt: string,\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t\textraMatchers: Document = {},\n\t) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, '_id' | 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t\t...extraMatchers,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t...(extraQuery ? [extraQuery] : []),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetAnalyticsBetweenDate(date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs' | 'onHold'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t\tonHold: '$onHold',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t\tonHold: '$_id.onHold',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tcountOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tchangeAgentByRoomId(roomId: string, newAgent: { agentId: string; username: string; ts?: Date }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tservedBy: {\n\t\t\t\t\t_id: newAgent.agentId,\n\t\t\t\t\tusername: newAgent.username,\n\t\t\t\t\tts: newAgent.ts ?? new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentIdByRoomId(roomId: string, departmentId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartmentId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveCRMDataByRoomId(roomId: string, crmData: unknown) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcrmData,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateVisitorStatus(token: string, status: UserStatus) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t\t't': 'l',\n\t\t};\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tremoveAgentByRoomId(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: { queuedAt: new Date() },\n\t\t\t$unset: { servedBy: 1 },\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveByVisitorToken(token: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tremoveById(_id: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t\tt: 'l',\n\t\t};\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tgetVisitorLastMessageTsUpdateQueryByRoomId(lastMessageTs: Date, updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('v.lastMessageTs', lastMessageTs);\n\t}\n\n\tsetVisitorInactivityInSecondsById(roomId: string, visitorInactivity: number) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'metrics.visitorInactivity': visitorInactivity,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeVisitorByRoomId(roomId: string, { _id, username, token }: { _id: string; username: string; token: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v._id': _id,\n\t\t\t\t'v.username': username,\n\t\t\t\t'v.token': token,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveOneById(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetVisitorActiveForPeriodUpdateQuery(period: string, updater: Updater<IOmnichannelRoom> = this.getUpdater()): Updater<IOmnichannelRoom> {\n\t\treturn updater.addToSet('v.activity', period);\n\t}\n\n\tmarkVisitorActiveForPeriod(rid: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst updater = this.getVisitorActiveForPeriodUpdateQuery(period);\n\n\t\treturn this.updateOne(query, updater.getUpdateFilter());\n\t}\n\n\tasync getMACStatisticsForPeriod(period: string): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': period,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getMACStatisticsBetweenDates(start: Date, end: Date): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': { $exists: true },\n\t\t\t\t\t\t'ts': {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tcountLivechatRoomsWithDepartment(): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetSlaForRoomById(\n\t\t_roomId: string,\n\t\t_sla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tremoveSlaFromRoomById(_roomId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tbulkRemoveSlaFromRoomsById(_slaId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenBySlaId(_slaId: string, _options: FindOptions<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync setPriorityByRoomId(_roomId: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPriorityByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenRoomsByPriorityId(_priorityId: string): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\t_willBeAbandonedAt: Date,\n\t\t_updater: Updater<IOmnichannelRoom>,\n\t): Updater<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(_rid: string, _willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindAbandonedOpenRooms(_date: Date): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(_departments: string[], _unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync removeUnitAssociationFromRooms(_unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync updateDepartmentAncestorsById(_rid: string, _departmentAncestors?: string[]): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsBySource(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByStatus(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByDepartment(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByTags(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByAgents(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatRooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatRooms.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatRooms.ts","sourceRoot":"","sources":["server/models/raw/LivechatRooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIOmnichannelRoom,\n\tRocketChatRecordDeleted,\n\tIOmnichannelRoomClosingInfo,\n\tDeepWritable,\n\tIMessage,\n\tILivechatPriority,\n\tIOmnichannelServiceLevelAgreements,\n\tReportResult,\n\tMACStats,\n} from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tDb,\n\tCollection,\n\tIndexDescription,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateFilter,\n\tSortDirection,\n\tFindCursor,\n\tUpdateResult,\n\tAggregationCursor,\n\tUpdateOptions,\n} from 'mongodb';\n\nimport { getValue } from '../../../app/settings/server/raw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\n/**\n * @extends BaseRaw<ILivechatRoom>\n */\nexport class LivechatRoomsRaw extends BaseRaw<IOmnichannelRoom> implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\t// move indexes from constructor to here using IndexDescription as type\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { open: 1 }, sparse: true },\n\t\t\t{ key: { departmentId: 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.chatDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.serviceTimeDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.visitorInactivity': 1 }, sparse: true },\n\t\t\t{ key: { 'omnichannel.predictedVisitorAbandonmentAt': 1 }, sparse: true },\n\t\t\t{ key: { closedAt: 1 }, sparse: true },\n\t\t\t{ key: { servedBy: 1 }, sparse: true },\n\t\t\t{ key: { 'v.token': 1, 'email.thread': 1 }, sparse: true },\n\t\t\t{ key: { 'v._id': 1 }, sparse: true },\n\t\t\t{ key: { 'servedBy._id': 1, 'departmentId': 1, 't': 1, 'open': 1, 'ts': -1 } },\n\t\t\t{ key: { t: 1, departmentId: 1, closedAt: 1 }, partialFilterExpression: { closedAt: { $exists: true } } },\n\t\t\t{ key: { source: 1 }, sparse: true },\n\t\t\t{ key: { departmentAncestors: 1 }, sparse: true },\n\t\t\t{\n\t\t\t\tkey: { 't': 1, 'open': 1, 'source.type': 1, 'v.status': 1 },\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t't': { $eq: 'l' },\n\t\t\t\t\t'open': { $eq: true },\n\t\t\t\t\t'source.type': { $eq: 'widget' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { pdfTranscriptRequested: 1 }, sparse: true },\n\t\t\t{ key: { pdfTranscriptFileId: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { callStatus: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { priorityId: 1 }, sparse: true },\n\t\t\t{ key: { slaId: 1 }, sparse: true },\n\t\t\t{ key: { source: 1, ts: 1 }, partialFilterExpression: { source: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { departmentId: 1, ts: 1 }, partialFilterExpression: { departmentId: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'tags.0': 1, 'ts': 1 }, partialFilterExpression: { 'tags.0': { $exists: true }, 't': 'l' } },\n\t\t\t{ key: { servedBy: 1, ts: 1 }, partialFilterExpression: { servedBy: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'v.activity': 1, 'ts': 1 }, partialFilterExpression: { 'v.activity': { $exists: true }, 't': 'l' } },\n\t\t];\n\t}\n\n\tgetQueueMetrics({\n\t\tdepartmentId,\n\t\tagentId,\n\t\tincludeOfflineAgents,\n\t\toptions = {},\n\t}: {\n\t\tdepartmentId?: string;\n\t\tagentId?: string;\n\t\tincludeOfflineAgents?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = { $match: { t: 'l', open: true, servedBy: { $exists: true } } };\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlet: {\n\t\t\t\t\tdeptId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$deptId'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst usersLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlet: {\n\t\t\t\t\tservedById: '$servedBy._id',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$servedById'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...(!includeOfflineAgents && {\n\t\t\t\t\t\t\t\tstatus: { $ne: 'offline' },\n\t\t\t\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t...(agentId && { _id: agentId }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst usersUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst usersGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tuserId: '$user._id',\n\t\t\t\t\tusername: '$user.username',\n\t\t\t\t\tstatus: '$user.status',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tuser: {\n\t\t\t\t\t_id: '$_id.userId',\n\t\t\t\t\tusername: '$_id.username',\n\t\t\t\t\tstatus: '$_id.status',\n\t\t\t\t},\n\t\t\t\tdepartment: {\n\t\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\t\tname: '$_id.departmentName',\n\t\t\t\t},\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [match, departmentsLookup, departmentsUnwind, usersLookup, usersUnwind];\n\t\tconst sort: Document = { $sort: options.sort || { chats: -1 } };\n\t\tconst pagination = [sort];\n\n\t\tif (options.offset) {\n\t\t\tpagination.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tpagination.push({ $limit: options.count });\n\t\t}\n\n\t\tconst facet = {\n\t\t\t$facet: {\n\t\t\t\tsortedResults: pagination,\n\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t},\n\t\t};\n\n\t\tconst params = [...firstParams, usersGroup, project, facet];\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred(), allowDiskUse: true }).toArray();\n\t}\n\n\tasync findAllNumberOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'metrics.visitorInactivity': {\n\t\t\t\t\t$gte: await getValue('Livechat_visitor_inactivity_timeout'),\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tabandonedRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tabandonedRooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync findPercentageOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tabandonedChats: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ $ifNull: ['$metrics.visitorInactivity', false] },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// TODO: move these calls to outside model\n\t\t\t\t\t\t\t\t\t\t$gte: ['$metrics.visitorInactivity', await getValue('Livechat_visitor_inactivity_timeout')],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tpercentageOfAbandonedChats: {\n\t\t\t\t\t$floor: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: [{ $multiply: ['$abandonedChats', 100] }, '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageOfChatDurationTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start) },\n\t\t\t\tclosedAt: { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageChatDurationTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsDuration', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageWaitingTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\twaitingResponse: { $ne: true },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsFirstResponses: { $sum: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageWaitingTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsFirstResponses', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllRooms({\n\t\tstart,\n\t\tend,\n\t\tanswered,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tanswered?: boolean;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tif (answered !== undefined) {\n\t\t\tmatch.$match.waitingResponse = { [answered ? '$ne' : '$eq']: true };\n\t\t}\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tchats: '$rooms',\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\trooms: { $push: '$$ROOT' },\n\t\t\t},\n\t\t};\n\t\tconst departmentsProject = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\tname: '$_id.name',\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst roomsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$rooms',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: 'rooms._id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $eq: ['$$message.t', 'livechat_transfer_history'] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst transferProject = {\n\t\t\t$project: {\n\t\t\t\tname: 1,\n\t\t\t\ttransfers: { $size: { $ifNull: ['$messages', []] } },\n\t\t\t},\n\t\t};\n\t\tconst transferGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tdepartmentId: '$_id',\n\t\t\t\t\tname: '$name',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: '$transfers' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tname: { $ifNull: ['$_id.name', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Document[] = [match, departmentsLookup, departmentsUnwind];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'departments._id': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [\n\t\t\t...firstParams,\n\t\t\tdepartmentsGroup,\n\t\t\tdepartmentsProject,\n\t\t\troomsUnwind,\n\t\t\tmessagesLookup,\n\t\t\tmessagesProject,\n\t\t\ttransferProject,\n\t\t\ttransferGroup,\n\t\t\tpresentationProject,\n\t\t\tsort,\n\t\t];\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'$or': [\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t'servedBy': { $exists: true },\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllClosedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllQueuedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\tservedBy: { $exists: false },\n\t\t\topen: true,\n\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllOpenChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'$or': [\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOnHoldChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'onHold': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$eq: true,\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'open': { $exists: false },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: true,\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: { $exists: false },\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateResponseTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumResponseAvg: {\n\t\t\t\t\t$sum: '$metrics.response.avg',\n\t\t\t\t},\n\t\t\t\troomsWithResponseTime: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.response.avg', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstResponse: { $max: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithResponseTime', 0] }, 0, { $divide: ['$sumResponseAvg', '$roomsWithResponseTime'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstResponse',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateReactionTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumReactionFirstResponse: {\n\t\t\t\t\t$sum: '$metrics.reaction.ft',\n\t\t\t\t},\n\t\t\t\troomsWithFirstReaction: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.reaction.ft', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstReaction: { $max: '$metrics.reaction.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithFirstReaction', 0] }, 0, { $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstReaction',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateDurationTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'metrics.chatDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumChatDuration: {\n\t\t\t\t\t$sum: '$metrics.chatDuration',\n\t\t\t\t},\n\t\t\t\troomsWithChatDuration: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.chatDuration', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxChatDuration: { $max: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithChatDuration', 0] }, 0, { $divide: ['$sumChatDuration', '$roomsWithChatDuration'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxChatDuration',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindAllAverageOfServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'responseBy.lastMessageTs': { $exists: true },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tallServiceTime: {\n\t\t\t\t\t$sum: { $divide: [{ $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts'] }, 1000] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allServiceTime', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindRoomsByVisitorIdAndMessageWithCriteria({\n\t\tvisitorId,\n\t\tsearchText,\n\t\topen,\n\t\tserved,\n\t\tonlyCount = false,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorId: string;\n\t\tsearchText?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tonlyCount?: boolean;\n\t\tsource?: string;\n\t\toptions?: { sort?: { [k: string]: number }; skip?: number; limit?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t'v._id': visitorId,\n\t\t\t\t...(open !== undefined && !open && { closedAt: { $exists: true } }),\n\t\t\t\t...(served !== undefined && served && { servedBy: { $exists: served } }),\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst matchMessages = searchText && {\n\t\t\t$match: { 'messages.msg': { $regex: `.*${escapeRegExp(searchText)}.*` } },\n\t\t};\n\n\t\tconst params: Document[] = [match, lookup];\n\n\t\tif (matchMessages) {\n\t\t\tparams.push(matchMessages);\n\t\t}\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tfname: 1,\n\t\t\t\tts: 1,\n\t\t\t\tv: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosingMessage: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t\tcond: { $eq: ['$$messages.t', 'livechat-close'] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst unwindClosingMsg = {\n\t\t\t$unwind: { path: '$closingMessage', preserveNullAndEmptyArrays: true },\n\t\t};\n\t\tconst sort = { $sort: options.sort || { ts: -1 } };\n\n\t\tparams.push(project, unwindClosingMsg, sort);\n\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'count' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\n\t\tif (options.skip) {\n\t\t\tparams.push({ $skip: options.skip });\n\t\t}\n\n\t\tif (options.limit) {\n\t\t\tparams.push({ $limit: options.limit });\n\t\t}\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorsIds: string[];\n\t\tsource?: string;\n\t\toptions?: FindOptions;\n\t}): FindPaginated<FindCursor<IOmnichannelRoom>> {\n\t\treturn this.findPaginated<IOmnichannelRoom>(\n\t\t\t{\n\t\t\t\t'v._id': { $in: visitorsIds },\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsWithCriteria({\n\t\tagents,\n\t\troomName,\n\t\tdepartmentId,\n\t\topen,\n\t\tserved,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\ttags,\n\t\tcustomFields,\n\t\tvisitorId,\n\t\troomIds,\n\t\tonhold,\n\t\tqueued,\n\t\toptions = {},\n\t\textraQuery = {},\n\t}: {\n\t\tagents?: string[];\n\t\troomName?: string;\n\t\tdepartmentId?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tcreatedAt?: { start?: Date; end?: Date };\n\t\tclosedAt?: { start?: Date; end?: Date };\n\t\ttags?: string[];\n\t\tcustomFields?: Record<string, string>;\n\t\tvisitorId?: string;\n\t\troomIds?: string[];\n\t\tonhold?: boolean;\n\t\tqueued?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: SortDirection } };\n\t\textraQuery?: Filter<IOmnichannelRoom>;\n\t}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...extraQuery,\n\t\t\t...(agents && { 'servedBy._id': { $in: agents } }),\n\t\t\t...(roomName && { fname: new RegExp(escapeRegExp(roomName), 'i') }),\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...(open !== undefined && { open: { $exists: open }, onHold: { $ne: true } }),\n\t\t\t...(served !== undefined && { servedBy: { $exists: served } }),\n\t\t\t...(visitorId && visitorId !== 'undefined' && { 'v._id': visitorId }),\n\t\t};\n\n\t\tif (open) {\n\t\t\tquery.servedBy = { $exists: true };\n\t\t}\n\n\t\tif (createdAt) {\n\t\t\tquery.ts = {};\n\t\t\tif (createdAt.start) {\n\t\t\t\tquery.ts.$gte = new Date(createdAt.start);\n\t\t\t}\n\t\t\tif (createdAt.end) {\n\t\t\t\tquery.ts.$lte = new Date(createdAt.end);\n\t\t\t}\n\t\t}\n\t\tif (closedAt) {\n\t\t\tquery.closedAt = {};\n\t\t\tif (closedAt.start) {\n\t\t\t\tquery.closedAt.$gte = new Date(closedAt.start);\n\t\t\t}\n\t\t\tif (closedAt.end) {\n\t\t\t\tquery.closedAt.$lte = new Date(closedAt.end);\n\t\t\t}\n\t\t}\n\t\tif (tags) {\n\t\t\tquery.tags = { $in: tags };\n\t\t}\n\t\tif (customFields && Object.keys(customFields).length) {\n\t\t\tquery.$and = Object.keys(customFields).map((key) => ({\n\t\t\t\t[`livechatData.${key}`]: new RegExp(customFields[key], 'i'),\n\t\t\t}));\n\t\t}\n\n\t\tif (roomIds) {\n\t\t\tquery._id = { $in: roomIds };\n\t\t}\n\n\t\tif (onhold) {\n\t\t\tquery.onHold = {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: onhold,\n\t\t\t};\n\t\t}\n\n\t\tif (queued) {\n\t\t\tquery.servedBy = { $exists: false };\n\t\t\tquery.open = true;\n\t\t\tquery.onHold = { $ne: true };\n\t\t}\n\n\t\treturn this.findPaginated(query, {\n\t\t\tsort: options.sort || { name: 1 },\n\t\t\tskip: options.offset,\n\t\t\tlimit: options.count,\n\t\t});\n\t}\n\n\tgetOnHoldConversationsBetweenDate(from: Date, to: Date, departmentId?: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tonHold: {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: new Date(from), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(to), // ISODate, ts < date.lt\n\t\t\t},\n\t\t};\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindAllServiceTimeByAgent({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tchats: 1,\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageServiceTimeByAgents({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tactive: '$_id.active',\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$chats', 0] }, 0, { $divide: ['$serviceTimeDuration', '$chats'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tsetDepartmentByRoomId(roomId: string, departmentId: string) {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { departmentId } });\n\t}\n\n\tfindOpen(extraQuery = {}) {\n\t\treturn this.find({ t: 'l', open: true, ...extraQuery });\n\t}\n\n\tsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferOngoing: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tautoTransferOngoing: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAutoTransferredAtById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferredAt: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAvailableSources() {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttypes: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthen: '$$REMOVE',\n\t\t\t\t\t\t\t\telse: { type: '$source.type' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tapps: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telse: '$$REMOVE',\n\t\t\t\t\t\t\t\tthen: {\n\t\t\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\t\t\tid: '$source.id',\n\t\t\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t\t\t\tsidebarIcon: '$source.sidebarIcon',\n\t\t\t\t\t\t\t\t\tdefaultIcon: '$source.defaultIcon',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tfullTypes: { $setUnion: ['$types', '$apps'] },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\t// These 3 methods shouldn't be here :( but current EE model has a meteor dependency\n\t// And refactoring it could take time\n\tsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptRequested: true },\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { pdfTranscriptRequested: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetPdfTranscriptFileIdById(rid: string, fileId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptFileId: fileId },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetEmailTranscriptRequestedByRoomId(roomId: string, transcriptInfo: NonNullable<IOmnichannelRoom['transcriptRequest']>) {\n\t\tconst { requestedAt, requestedBy, email, subject } = transcriptInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttranscriptRequest: {\n\t\t\t\t\t\trequestedAt,\n\t\t\t\t\t\trequestedBy,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetEmailTranscriptRequestedByRoomId(roomId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\ttranscriptRequest: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseRoomById(roomId: string, closeInfo: IOmnichannelRoomClosingInfo, options?: UpdateOptions) {\n\t\tconst { closer, closedBy, closedAt, chatDuration, serviceTimeDuration, tags } = closeInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tclosedAt,\n\t\t\t\t\t'metrics.chatDuration': chatDuration,\n\t\t\t\t\t'metrics.serviceTimeDuration': serviceTimeDuration,\n\t\t\t\t\t'v.status': UserStatus.OFFLINE,\n\t\t\t\t\t...(closer && { closer }),\n\t\t\t\t\t...(closedBy && { closedBy }),\n\t\t\t\t\t...(tags && { tags }),\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\topen: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tbulkRemoveDepartmentAndUnitsFromRooms(departmentId: string) {\n\t\treturn this.updateMany({ departmentId }, { $unset: { departmentId: 1, departmentAncestors: 1 } });\n\t}\n\n\tfindOneByIdOrName(_idOrName: string, options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateSurveyFeedbackById(_id: string, surveyFeedback: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsurveyFeedback,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateDataByToken(token: string, key: string, value: any, overwrite = true) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });\n\t\t\tif (!room) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync saveRoomById({\n\t\t_id,\n\t\ttopic,\n\t\ttags,\n\t\tlivechatData,\n\t\t...extra\n\t}: {\n\t\t_id: string;\n\t\ttopic?: string;\n\t\ttags?: string[];\n\t\tlivechatData?: Record<string, any>;\n\t} & Record<string, any>) {\n\t\tconst setData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$set']> = { ...extra };\n\t\tconst unsetData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$unset']> = {};\n\n\t\tif (topic != null) {\n\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tif (trimmedTopic.length) {\n\t\t\t\tsetData.topic = trimmedTopic;\n\t\t\t} else {\n\t\t\t\tunsetData.topic = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(tags) && tags.length > 0) {\n\t\t\tsetData.tags = tags;\n\t\t} else {\n\t\t\tunsetData.tags = 1;\n\t\t}\n\n\t\tif (extra.priorityId === '') {\n\t\t\tunsetData.priorityId = 1;\n\t\t\tdelete setData.priorityId;\n\t\t}\n\t\tif (extra.slaId === '') {\n\t\t\tunsetData.slaId = 1;\n\t\t\tdelete setData.slaId;\n\t\t}\n\n\t\tif (livechatData) {\n\t\t\tObject.keys(livechatData).forEach((key) => {\n\t\t\t\tconst value = livechatData[key].trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {};\n\n\t\tif (Object.keys(setData).length > 0) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (Object.keys(unsetData).length > 0) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (Object.keys(update).length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tfindById(_id: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(ids: string[], fields: FindOptions<IOmnichannelRoom>['projection'], extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id: { $in: ids },\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByIdAndVisitorToken(_id: string, visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t_id,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThreadAndDepartment(\n\t\tvisitorToken: string,\n\t\temailThread: string[],\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [\n\t\t\t\t{ 'email.thread': { $elemMatch: { $in: emailThread } } },\n\t\t\t\t{ 'email.thread': new RegExp(emailThread.map((t) => `\"${t}\"`).join('|')) },\n\t\t\t],\n\t\t\t...(departmentId && { departmentId }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateEmailThreadByRoomId(roomId: string, threadIds: string[]) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\t'email.thread': threadIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: roomId }, query);\n\t}\n\n\tfindOneLastServedAndClosedByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'closedAt': { $exists: true },\n\t\t\t'servedBy': { $exists: true },\n\t\t};\n\n\t\toptions.sort = { closedAt: -1 };\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorToken(visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync updateRoomCount() {\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_Room_Count', 1, { returnDocument: 'after' });\n\t\treturn livechatCount.value;\n\t}\n\n\tfindOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndDepartmentIdAndSource(\n\t\tvisitorToken: string,\n\t\tdepartmentId?: string,\n\t\tsource?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...(source && { 'source.type': source }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOpenByVisitorTokenAndDepartmentId(\n\t\tvisitorToken: string,\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByVisitorToken(visitorToken: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByVisitorIdAndAgentId(\n\t\tvisitorId?: string,\n\t\tagentId?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...(visitorId && { 'v._id': visitorId }),\n\t\t\t...(agentId && { 'servedBy._id': agentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByRoomIdAndVisitorToken(roomId: string, visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'_id': roomId,\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindClosedRooms(departmentIds?: string[], options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\topen: { $exists: false },\n\t\t\tclosedAt: { $exists: true },\n\t\t\t...(Array.isArray(departmentIds) && departmentIds.length > 0 && { departmentId: { $in: departmentIds } }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetResponseByRoomIdUpdateQuery(responseBy: IOmnichannelRoom['responseBy'], updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('responseBy', responseBy);\n\t\tupdater.unset('waitingResponse');\n\t\treturn updater;\n\t}\n\n\tgetNotResponseByRoomIdUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('waitingResponse', true);\n\t\tupdater.unset('responseBy');\n\t\treturn updater;\n\t}\n\n\tgetAgentLastMessageTsUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('responseBy.lastMessageTs', new Date());\n\t}\n\n\tprivate getAnalyticsUpdateQuery(\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\tif (analyticsData) {\n\t\t\tupdater.set('metrics.response.avg', analyticsData.avgResponseTime);\n\t\t\tupdater.inc('metrics.response.total', 1);\n\t\t\tupdater.inc('metrics.response.tt', analyticsData.responseTime as number);\n\t\t\tupdater.inc('metrics.reaction.tt', analyticsData.reactionTime as number);\n\t\t}\n\n\t\tif (analyticsData?.firstResponseTime) {\n\t\t\tupdater.set('metrics.reaction.fd', analyticsData.firstReactionDate);\n\t\t\tupdater.set('metrics.reaction.ft', analyticsData.firstReactionTime);\n\t\t\tupdater.set('metrics.response.fd', analyticsData.firstResponseDate);\n\t\t\tupdater.set('metrics.response.ft', analyticsData.firstResponseTime);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByAgent(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\tif (visitorLastQuery > agentLastReply) {\n\t\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater).set('metrics.servedBy.lr', message.ts);\n\t\t}\n\n\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater);\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByVisitor(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\t// update visitor timestamp, only if its new inquiry and not continuing message\n\t\tif (agentLastReply >= visitorLastQuery) {\n\t\t\treturn updater.set('metrics.v.lq', message.ts);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetTotalConversationsBetweenDate(t: 'l', date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tgetAnalyticsMetricsBetweenDate(\n\t\tt: 'l',\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: { ts: 1, departmentId: 1, open: 1, servedBy: 1, metrics: 1, msgs: 1 },\n\t\t});\n\t}\n\n\tgetAnalyticsMetricsBetweenDateWithMessages(\n\t\tt: string,\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t\textraMatchers: Document = {},\n\t) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, '_id' | 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t\t...extraMatchers,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t...(extraQuery ? [extraQuery] : []),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetAnalyticsBetweenDate(date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs' | 'onHold'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t\tonHold: '$onHold',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t\tonHold: '$_id.onHold',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tcountOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tchangeAgentByRoomId(roomId: string, newAgent: { agentId: string; username: string; ts?: Date }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tservedBy: {\n\t\t\t\t\t_id: newAgent.agentId,\n\t\t\t\t\tusername: newAgent.username,\n\t\t\t\t\tts: newAgent.ts ?? new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentIdByRoomId(roomId: string, departmentId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartmentId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveCRMDataByRoomId(roomId: string, crmData: unknown) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcrmData,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateVisitorStatus(token: string, status: UserStatus) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t\t't': 'l',\n\t\t};\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tremoveAgentByRoomId(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: { queuedAt: new Date() },\n\t\t\t$unset: { servedBy: 1 },\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveByVisitorToken(token: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tremoveById(_id: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t\tt: 'l',\n\t\t};\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tgetVisitorLastMessageTsUpdateQueryByRoomId(lastMessageTs: Date, updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('v.lastMessageTs', lastMessageTs);\n\t}\n\n\tsetVisitorInactivityInSecondsById(roomId: string, visitorInactivity: number) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'metrics.visitorInactivity': visitorInactivity,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeVisitorByRoomId(roomId: string, { _id, username, token }: { _id: string; username: string; token: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v._id': _id,\n\t\t\t\t'v.username': username,\n\t\t\t\t'v.token': token,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveOneById(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetVisitorActiveForPeriodUpdateQuery(period: string, updater: Updater<IOmnichannelRoom> = this.getUpdater()): Updater<IOmnichannelRoom> {\n\t\treturn updater.addToSet('v.activity', period);\n\t}\n\n\tmarkVisitorActiveForPeriod(rid: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst updater = this.getVisitorActiveForPeriodUpdateQuery(period);\n\n\t\treturn this.updateOne(query, updater.getUpdateFilter());\n\t}\n\n\tasync getMACStatisticsForPeriod(period: string): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': period,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getMACStatisticsBetweenDates(start: Date, end: Date): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': { $exists: true },\n\t\t\t\t\t\t'ts': {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tcountLivechatRoomsWithDepartment(): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetSlaForRoomById(\n\t\t_roomId: string,\n\t\t_sla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tremoveSlaFromRoomById(_roomId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tbulkRemoveSlaFromRoomsById(_slaId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenBySlaId(_slaId: string, _options: FindOptions<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync setPriorityByRoomId(_roomId: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPriorityByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenRoomsByPriorityId(_priorityId: string): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\t_willBeAbandonedAt: Date,\n\t\t_updater: Updater<IOmnichannelRoom>,\n\t): Updater<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(_rid: string, _willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindAbandonedOpenRooms(_date: Date): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(_departments: string[], _unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync removeUnitAssociationFromRooms(_unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync updateDepartmentAncestorsById(_rid: string, _departmentAncestors?: string[]): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsBySource(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByStatus(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByDepartment(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByTags(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByAgents(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"_id\", \"topic\", \"tags\", \"livechatData\"];\n    module.export({\n      LivechatRoomsRaw: () => LivechatRoomsRaw\n    });\n    let UserStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      UserStatus(v) {\n        UserStatus = v;\n      }\n    }, 0);\n    let Settings;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let getValue;\n    module.link(\"../../../app/settings/server/raw\", {\n      getValue(v) {\n        getValue = v;\n      }\n    }, 3);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 4);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatRoomsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'room', trash);\n      }\n      // move indexes from constructor to here using IndexDescription as type\n      modelIndexes() {\n        return [{\n          key: {\n            open: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            departmentId: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'metrics.chatDuration': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'metrics.serviceTimeDuration': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'metrics.visitorInactivity': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'omnichannel.predictedVisitorAbandonmentAt': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            closedAt: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            servedBy: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'v.token': 1,\n            'email.thread': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'v._id': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'servedBy._id': 1,\n            'departmentId': 1,\n            't': 1,\n            'open': 1,\n            'ts': -1\n          }\n        }, {\n          key: {\n            t: 1,\n            departmentId: 1,\n            closedAt: 1\n          },\n          partialFilterExpression: {\n            closedAt: {\n              $exists: true\n            }\n          }\n        }, {\n          key: {\n            source: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            departmentAncestors: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            't': 1,\n            'open': 1,\n            'source.type': 1,\n            'v.status': 1\n          },\n          partialFilterExpression: {\n            't': {\n              $eq: 'l'\n            },\n            'open': {\n              $eq: true\n            },\n            'source.type': {\n              $eq: 'widget'\n            }\n          }\n        }, {\n          key: {\n            'livechatData.$**': 1\n          }\n        }, {\n          key: {\n            pdfTranscriptRequested: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            pdfTranscriptFileId: 1\n          },\n          sparse: true\n        },\n        // used on statistics\n        {\n          key: {\n            callStatus: 1\n          },\n          sparse: true\n        },\n        // used on statistics\n        {\n          key: {\n            priorityId: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            slaId: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            source: 1,\n            ts: 1\n          },\n          partialFilterExpression: {\n            source: {\n              $exists: true\n            },\n            t: 'l'\n          }\n        }, {\n          key: {\n            departmentId: 1,\n            ts: 1\n          },\n          partialFilterExpression: {\n            departmentId: {\n              $exists: true\n            },\n            t: 'l'\n          }\n        }, {\n          key: {\n            'tags.0': 1,\n            'ts': 1\n          },\n          partialFilterExpression: {\n            'tags.0': {\n              $exists: true\n            },\n            't': 'l'\n          }\n        }, {\n          key: {\n            servedBy: 1,\n            ts: 1\n          },\n          partialFilterExpression: {\n            servedBy: {\n              $exists: true\n            },\n            t: 'l'\n          }\n        }, {\n          key: {\n            'v.activity': 1,\n            'ts': 1\n          },\n          partialFilterExpression: {\n            'v.activity': {\n              $exists: true\n            },\n            't': 'l'\n          }\n        }];\n      }\n      getQueueMetrics(_ref) {\n        let {\n          departmentId,\n          agentId,\n          includeOfflineAgents,\n          options = {}\n        } = _ref;\n        const match = {\n          $match: {\n            t: 'l',\n            open: true,\n            servedBy: {\n              $exists: true\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const departmentsLookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            let: {\n              deptId: '$departmentId'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $eq: ['$_id', '$$deptId']\n                }\n              }\n            }, {\n              $project: {\n                name: 1\n              }\n            }],\n            as: 'departments'\n          }\n        };\n        const departmentsUnwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const usersLookup = {\n          $lookup: {\n            from: 'users',\n            let: {\n              servedById: '$servedBy._id'\n            },\n            pipeline: [{\n              $match: _objectSpread(_objectSpread({\n                $expr: {\n                  $eq: ['$_id', '$$servedById']\n                }\n              }, !includeOfflineAgents && {\n                status: {\n                  $ne: 'offline'\n                },\n                statusLivechat: 'available'\n              }), agentId && {\n                _id: agentId\n              })\n            }, {\n              $project: {\n                _id: 1,\n                username: 1,\n                status: 1\n              }\n            }],\n            as: 'user'\n          }\n        };\n        const usersUnwind = {\n          $unwind: {\n            path: '$user'\n          }\n        };\n        const usersGroup = {\n          $group: {\n            _id: {\n              userId: '$user._id',\n              username: '$user.username',\n              status: '$user.status',\n              departmentId: '$departmentId',\n              departmentName: '$departments.name'\n            },\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: 0,\n            user: {\n              _id: '$_id.userId',\n              username: '$_id.username',\n              status: '$_id.status'\n            },\n            department: {\n              _id: '$_id.departmentId',\n              name: '$_id.departmentName'\n            },\n            chats: 1\n          }\n        };\n        const firstParams = [match, departmentsLookup, departmentsUnwind, usersLookup, usersUnwind];\n        const sort = {\n          $sort: options.sort || {\n            chats: -1\n          }\n        };\n        const pagination = [sort];\n        if (options.offset) {\n          pagination.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          pagination.push({\n            $limit: options.count\n          });\n        }\n        const facet = {\n          $facet: {\n            sortedResults: pagination,\n            totalCount: [{\n              $group: {\n                _id: null,\n                total: {\n                  $sum: 1\n                }\n              }\n            }]\n          }\n        };\n        const params = [...firstParams, usersGroup, project, facet];\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred(),\n          allowDiskUse: true\n        }).toArray();\n      }\n      async findAllNumberOfAbandonedRooms(_ref2) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref2;\n        const match = {\n          $match: {\n            't': 'l',\n            'metrics.visitorInactivity': {\n              $gte: await getValue('Livechat_visitor_inactivity_timeout')\n            },\n            'ts': {\n              $gte: new Date(start)\n            },\n            'closedAt': {\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            abandonedRooms: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            abandonedRooms: 1\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      async findPercentageOfAbandonedRooms(_ref3) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref3;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            },\n            abandonedChats: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $ifNull: ['$metrics.visitorInactivity', false]\n                  }, {\n                    // TODO: move these calls to outside model\n                    $gte: ['$metrics.visitorInactivity', await getValue('Livechat_visitor_inactivity_timeout')]\n                  }]\n                }, 1, 0]\n              }\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            percentageOfAbandonedChats: {\n              $floor: {\n                $cond: [{\n                  $eq: ['$rooms', 0]\n                }, 0, {\n                  $divide: [{\n                    $multiply: ['$abandonedChats', 100]\n                  }, '$rooms']\n                }]\n              }\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllAverageOfChatDurationTime(_ref4) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref4;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start)\n            },\n            closedAt: {\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            },\n            chatsDuration: {\n              $sum: '$metrics.chatDuration'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            averageChatDurationTimeInSeconds: {\n              $ceil: {\n                $cond: [{\n                  $eq: ['$rooms', 0]\n                }, 0, {\n                  $divide: ['$chatsDuration', '$rooms']\n                }]\n              }\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllAverageWaitingTime(_ref5) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref5;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            },\n            waitingResponse: {\n              $ne: true\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            },\n            chatsFirstResponses: {\n              $sum: '$metrics.response.ft'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            averageWaitingTimeInSeconds: {\n              $ceil: {\n                $cond: [{\n                  $eq: ['$rooms', 0]\n                }, 0, {\n                  $divide: ['$chatsFirstResponses', '$rooms']\n                }]\n              }\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllRooms(_ref6) {\n        let {\n          start,\n          end,\n          answered,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref6;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        if (answered !== undefined) {\n          match.$match.waitingResponse = {\n            [answered ? '$ne' : '$eq']: true\n          };\n        }\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            rooms: 1\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllServiceTime(_ref7) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref7;\n        const match = {\n          $match: {\n            't': 'l',\n            'ts': {\n              $gte: new Date(start)\n            },\n            'closedAt': {\n              $lte: new Date(end)\n            },\n            'metrics.serviceTimeDuration': {\n              $exists: true\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            },\n            serviceTimeDuration: {\n              $sum: '$metrics.serviceTimeDuration'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            chats: '$rooms',\n            serviceTimeDuration: {\n              $ceil: '$serviceTimeDuration'\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllNumberOfTransferredRooms(_ref8) {\n        let {\n          start,\n          end,\n          departmentId,\n          options = {}\n        } = _ref8;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const departmentsLookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            localField: 'departmentId',\n            foreignField: '_id',\n            as: 'departments'\n          }\n        };\n        const departmentsUnwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const departmentsGroup = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departments._id',\n              name: '$departments.name'\n            },\n            rooms: {\n              $push: '$$ROOT'\n            }\n          }\n        };\n        const departmentsProject = {\n          $project: {\n            _id: '$_id.departmentId',\n            name: '$_id.name',\n            rooms: 1\n          }\n        };\n        const roomsUnwind = {\n          $unwind: {\n            path: '$rooms',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const messagesLookup = {\n          $lookup: {\n            from: 'rocketchat_message',\n            localField: 'rooms._id',\n            foreignField: 'rid',\n            as: 'messages'\n          }\n        };\n        const messagesProject = {\n          $project: {\n            _id: 1,\n            name: 1,\n            messages: {\n              $filter: {\n                input: '$messages',\n                as: 'message',\n                cond: {\n                  $and: [{\n                    $eq: ['$$message.t', 'livechat_transfer_history']\n                  }]\n                }\n              }\n            }\n          }\n        };\n        const transferProject = {\n          $project: {\n            name: 1,\n            transfers: {\n              $size: {\n                $ifNull: ['$messages', []]\n              }\n            }\n          }\n        };\n        const transferGroup = {\n          $group: {\n            _id: {\n              departmentId: '$_id',\n              name: '$name'\n            },\n            numberOfTransferredRooms: {\n              $sum: '$transfers'\n            }\n          }\n        };\n        const presentationProject = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            name: {\n              $ifNull: ['$_id.name', null]\n            },\n            numberOfTransferredRooms: 1\n          }\n        };\n        const firstParams = [match, departmentsLookup, departmentsUnwind];\n        if (departmentId && departmentId !== 'undefined') {\n          firstParams.push({\n            $match: {\n              'departments._id': departmentId\n            }\n          });\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [...firstParams, departmentsGroup, departmentsProject, roomsUnwind, messagesLookup, messagesProject, transferProject, transferGroup, presentationProject, sort];\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      countAllOpenChatsBetweenDate(_ref9) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref9;\n        const query = {\n          't': 'l',\n          'metrics.chatDuration': {\n            $exists: false\n          },\n          '$or': [{\n            onHold: {\n              $exists: false\n            }\n          }, {\n            onHold: {\n              $exists: true,\n              $eq: false\n            }\n          }],\n          'servedBy': {\n            $exists: true\n          },\n          'ts': {\n            $gte: new Date(start),\n            $lte: new Date(end)\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          query.departmentId = departmentId;\n        }\n        return this.col.countDocuments(query);\n      }\n      countAllClosedChatsBetweenDate(_ref10) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref10;\n        const query = {\n          't': 'l',\n          'metrics.chatDuration': {\n            $exists: true\n          },\n          'ts': {\n            $gte: new Date(start),\n            $lte: new Date(end)\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          query.departmentId = departmentId;\n        }\n        return this.col.countDocuments(query);\n      }\n      countAllQueuedChatsBetweenDate(_ref11) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref11;\n        const query = {\n          t: 'l',\n          servedBy: {\n            $exists: false\n          },\n          open: true,\n          ts: {\n            $gte: new Date(start),\n            $lte: new Date(end)\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          query.departmentId = departmentId;\n        }\n        return this.col.countDocuments(query);\n      }\n      countAllOpenChatsByAgentBetweenDate(_ref12) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref12;\n        const match = {\n          $match: {\n            't': 'l',\n            'servedBy._id': {\n              $exists: true\n            },\n            'open': true,\n            '$or': [{\n              onHold: {\n                $exists: false\n              }\n            }, {\n              onHold: {\n                $exists: true,\n                $eq: false\n              }\n            }],\n            'ts': {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: '$servedBy.username',\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      countAllOnHoldChatsByAgentBetweenDate(_ref13) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref13;\n        const match = {\n          $match: {\n            't': 'l',\n            'servedBy._id': {\n              $exists: true\n            },\n            'open': true,\n            'onHold': {\n              $exists: true,\n              $eq: true\n            },\n            'ts': {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: '$servedBy.username',\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      countAllClosedChatsByAgentBetweenDate(_ref14) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref14;\n        const match = {\n          $match: {\n            't': 'l',\n            'open': {\n              $exists: false\n            },\n            'servedBy._id': {\n              $exists: true\n            },\n            'ts': {\n              $gte: new Date(start)\n            },\n            'closedAt': {\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: '$servedBy.username',\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      countAllOpenChatsByDepartmentBetweenDate(_ref15) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref15;\n        const match = {\n          $match: {\n            t: 'l',\n            open: true,\n            departmentId: {\n              $exists: true\n            },\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            localField: 'departmentId',\n            foreignField: '_id',\n            as: 'departments'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: '$departments._id',\n              name: '$departments.name'\n            },\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: '$_id._id',\n            name: '$_id.name',\n            chats: 1\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const params = [match, lookup, unwind, group, project];\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      countAllClosedChatsByDepartmentBetweenDate(_ref16) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref16;\n        const match = {\n          $match: {\n            t: 'l',\n            open: {\n              $exists: false\n            },\n            departmentId: {\n              $exists: true\n            },\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department',\n            localField: 'departmentId',\n            foreignField: '_id',\n            as: 'departments'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: '$departments._id',\n              name: '$departments.name'\n            },\n            chats: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: '$_id._id',\n            name: '$_id.name',\n            chats: 1\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const params = [match, lookup, unwind, group, project];\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      calculateResponseTimingsBetweenDates(_ref17) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref17;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: null,\n            sumResponseAvg: {\n              $sum: '$metrics.response.avg'\n            },\n            roomsWithResponseTime: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $ifNull: ['$metrics.response.avg', false]\n                  }]\n                }, 1, 0]\n              }\n            },\n            maxFirstResponse: {\n              $max: '$metrics.response.ft'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            avg: {\n              $trunc: {\n                $cond: [{\n                  $eq: ['$roomsWithResponseTime', 0]\n                }, 0, {\n                  $divide: ['$sumResponseAvg', '$roomsWithResponseTime']\n                }]\n              }\n            },\n            longest: '$maxFirstResponse'\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group, project], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      calculateReactionTimingsBetweenDates(_ref18) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref18;\n        const match = {\n          $match: {\n            t: 'l',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: null,\n            sumReactionFirstResponse: {\n              $sum: '$metrics.reaction.ft'\n            },\n            roomsWithFirstReaction: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $ifNull: ['$metrics.reaction.ft', false]\n                  }]\n                }, 1, 0]\n              }\n            },\n            maxFirstReaction: {\n              $max: '$metrics.reaction.ft'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            avg: {\n              $trunc: {\n                $cond: [{\n                  $eq: ['$roomsWithFirstReaction', 0]\n                }, 0, {\n                  $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction']\n                }]\n              }\n            },\n            longest: '$maxFirstReaction'\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group, project], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      calculateDurationTimingsBetweenDates(_ref19) {\n        let {\n          start,\n          end,\n          departmentId\n        } = _ref19;\n        const match = {\n          $match: {\n            't': 'l',\n            'ts': {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            },\n            'metrics.chatDuration': {\n              $exists: true\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: null,\n            sumChatDuration: {\n              $sum: '$metrics.chatDuration'\n            },\n            roomsWithChatDuration: {\n              $sum: {\n                $cond: [{\n                  $and: [{\n                    $ifNull: ['$metrics.chatDuration', false]\n                  }]\n                }, 1, 0]\n              }\n            },\n            maxChatDuration: {\n              $max: '$metrics.chatDuration'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            avg: {\n              $trunc: {\n                $cond: [{\n                  $eq: ['$roomsWithChatDuration', 0]\n                }, 0, {\n                  $divide: ['$sumChatDuration', '$roomsWithChatDuration']\n                }]\n              }\n            },\n            longest: '$maxChatDuration'\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        return this.col.aggregate([match, group, project], {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      findAllAverageOfServiceTime(_ref20) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref20;\n        const match = {\n          $match: {\n            't': 'l',\n            'ts': {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            },\n            'responseBy.lastMessageTs': {\n              $exists: true\n            },\n            'servedBy._id': {\n              $exists: true\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$departmentId'\n            },\n            rooms: {\n              $sum: 1\n            },\n            allServiceTime: {\n              $sum: {\n                $divide: [{\n                  $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts']\n                }, 1000]\n              }\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            averageServiceTimeInSeconds: {\n              $ceil: {\n                $cond: [{\n                  $eq: ['$rooms', 0]\n                }, 0, {\n                  $divide: ['$allServiceTime', '$rooms']\n                }]\n              }\n            }\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          match.$match.departmentId = departmentId;\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findByVisitorId(visitorId, options) {\n        let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'v._id': visitorId\n        }, extraQuery);\n        return this.find(query, options);\n      }\n      findPaginatedByVisitorId(visitorId, options) {\n        let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'v._id': visitorId\n        }, extraQuery);\n        return this.findPaginated(query, options);\n      }\n      findRoomsByVisitorIdAndMessageWithCriteria(_ref21) {\n        let {\n          visitorId,\n          searchText,\n          open,\n          served,\n          onlyCount = false,\n          source,\n          options = {}\n        } = _ref21;\n        const match = {\n          $match: _objectSpread(_objectSpread(_objectSpread({\n            'v._id': visitorId\n          }, open !== undefined && !open && {\n            closedAt: {\n              $exists: true\n            }\n          }), served !== undefined && served && {\n            servedBy: {\n              $exists: served\n            }\n          }), source && {\n            $or: [{\n              'source.type': new RegExp(escapeRegExp(source), 'i')\n            }, {\n              'source.alias': new RegExp(escapeRegExp(source), 'i')\n            }]\n          })\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_message',\n            localField: '_id',\n            foreignField: 'rid',\n            as: 'messages'\n          }\n        };\n        const matchMessages = searchText && {\n          $match: {\n            'messages.msg': {\n              $regex: \".*\".concat(escapeRegExp(searchText), \".*\")\n            }\n          }\n        };\n        const params = [match, lookup];\n        if (matchMessages) {\n          params.push(matchMessages);\n        }\n        const project = {\n          $project: {\n            fname: 1,\n            ts: 1,\n            v: 1,\n            msgs: 1,\n            servedBy: 1,\n            closedAt: 1,\n            closedBy: 1,\n            closer: 1,\n            tags: 1,\n            closingMessage: {\n              $filter: {\n                input: '$messages',\n                as: 'messages',\n                cond: {\n                  $eq: ['$$messages.t', 'livechat-close']\n                }\n              }\n            }\n          }\n        };\n        const unwindClosingMsg = {\n          $unwind: {\n            path: '$closingMessage',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const sort = {\n          $sort: options.sort || {\n            ts: -1\n          }\n        };\n        params.push(project, unwindClosingMsg, sort);\n        if (onlyCount) {\n          params.push({\n            $count: 'count'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.skip) {\n          params.push({\n            $skip: options.skip\n          });\n        }\n        if (options.limit) {\n          params.push({\n            $limit: options.limit\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findPaginatedRoomsByVisitorsIdsAndSource(_ref22) {\n        let {\n          visitorsIds,\n          source,\n          options = {}\n        } = _ref22;\n        return this.findPaginated(_objectSpread({\n          'v._id': {\n            $in: visitorsIds\n          }\n        }, source && {\n          $or: [{\n            'source.type': new RegExp(escapeRegExp(source), 'i')\n          }, {\n            'source.alias': new RegExp(escapeRegExp(source), 'i')\n          }]\n        }), options);\n      }\n      findRoomsWithCriteria(_ref23) {\n        let {\n          agents,\n          roomName,\n          departmentId,\n          open,\n          served,\n          createdAt,\n          closedAt,\n          tags,\n          customFields,\n          visitorId,\n          roomIds,\n          onhold,\n          queued,\n          options = {},\n          extraQuery = {}\n        } = _ref23;\n        const query = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          t: 'l'\n        }, extraQuery), agents && {\n          'servedBy._id': {\n            $in: agents\n          }\n        }), roomName && {\n          fname: new RegExp(escapeRegExp(roomName), 'i')\n        }), departmentId && departmentId !== 'undefined' && {\n          departmentId\n        }), open !== undefined && {\n          open: {\n            $exists: open\n          },\n          onHold: {\n            $ne: true\n          }\n        }), served !== undefined && {\n          servedBy: {\n            $exists: served\n          }\n        }), visitorId && visitorId !== 'undefined' && {\n          'v._id': visitorId\n        });\n        if (open) {\n          query.servedBy = {\n            $exists: true\n          };\n        }\n        if (createdAt) {\n          query.ts = {};\n          if (createdAt.start) {\n            query.ts.$gte = new Date(createdAt.start);\n          }\n          if (createdAt.end) {\n            query.ts.$lte = new Date(createdAt.end);\n          }\n        }\n        if (closedAt) {\n          query.closedAt = {};\n          if (closedAt.start) {\n            query.closedAt.$gte = new Date(closedAt.start);\n          }\n          if (closedAt.end) {\n            query.closedAt.$lte = new Date(closedAt.end);\n          }\n        }\n        if (tags) {\n          query.tags = {\n            $in: tags\n          };\n        }\n        if (customFields && Object.keys(customFields).length) {\n          query.$and = Object.keys(customFields).map(key => ({\n            [\"livechatData.\".concat(key)]: new RegExp(customFields[key], 'i')\n          }));\n        }\n        if (roomIds) {\n          query._id = {\n            $in: roomIds\n          };\n        }\n        if (onhold) {\n          query.onHold = {\n            $exists: true,\n            $eq: onhold\n          };\n        }\n        if (queued) {\n          query.servedBy = {\n            $exists: false\n          };\n          query.open = true;\n          query.onHold = {\n            $ne: true\n          };\n        }\n        return this.findPaginated(query, {\n          sort: options.sort || {\n            name: 1\n          },\n          skip: options.offset,\n          limit: options.count\n        });\n      }\n      getOnHoldConversationsBetweenDate(from, to, departmentId) {\n        const query = {\n          onHold: {\n            $exists: true,\n            $eq: true\n          },\n          ts: {\n            $gte: new Date(from),\n            // ISO Date, ts >= date.gte\n            $lt: new Date(to) // ISODate, ts < date.lt\n          }\n        };\n        if (departmentId && departmentId !== 'undefined') {\n          query.departmentId = departmentId;\n        }\n        return this.col.countDocuments(query);\n      }\n      findAllServiceTimeByAgent(_ref24) {\n        let {\n          start,\n          end,\n          onlyCount = false,\n          options = {}\n        } = _ref24;\n        const match = {\n          $match: {\n            't': 'l',\n            'servedBy._id': {\n              $exists: true\n            },\n            'metrics.serviceTimeDuration': {\n              $exists: true\n            },\n            'ts': {\n              $gte: start,\n              $lte: end\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: '$servedBy._id',\n              username: '$servedBy.username'\n            },\n            chats: {\n              $sum: 1\n            },\n            serviceTimeDuration: {\n              $sum: '$metrics.serviceTimeDuration'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: '$_id._id',\n            username: '$_id.username',\n            chats: 1,\n            serviceTimeDuration: {\n              $ceil: '$serviceTimeDuration'\n            }\n          }\n        };\n        const sort = {\n          $sort: options.sort || {\n            username: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findAllAverageServiceTimeByAgents(_ref25) {\n        let {\n          start,\n          end,\n          onlyCount = false,\n          options = {}\n        } = _ref25;\n        const match = {\n          $match: {\n            't': 'l',\n            'servedBy._id': {\n              $exists: true\n            },\n            'metrics.serviceTimeDuration': {\n              $exists: true\n            },\n            'ts': {\n              $gte: start,\n              $lte: end\n            }\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: '$servedBy._id',\n              username: '$servedBy.username'\n            },\n            chats: {\n              $sum: 1\n            },\n            serviceTimeDuration: {\n              $sum: '$metrics.serviceTimeDuration'\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: '$_id._id',\n            username: '$_id.username',\n            name: '$_id.name',\n            active: '$_id.active',\n            averageServiceTimeInSeconds: {\n              $ceil: {\n                $cond: [{\n                  $eq: ['$chats', 0]\n                }, 0, {\n                  $divide: ['$serviceTimeDuration', '$chats']\n                }]\n              }\n            }\n          }\n        };\n        const sort = {\n          $sort: options.sort || {\n            username: 1\n          }\n        };\n        const params = [match, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      setDepartmentByRoomId(roomId, departmentId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            departmentId\n          }\n        });\n      }\n      findOpen() {\n        let extraQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find(_objectSpread({\n          t: 'l',\n          open: true\n        }, extraQuery));\n      }\n      setAutoTransferOngoingById(roomId) {\n        const query = {\n          _id: roomId\n        };\n        const update = {\n          $set: {\n            autoTransferOngoing: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unsetAutoTransferOngoingById(roomId) {\n        const query = {\n          _id: roomId\n        };\n        const update = {\n          $unset: {\n            autoTransferOngoing: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setAutoTransferredAtById(roomId) {\n        const query = {\n          _id: roomId\n        };\n        const update = {\n          $set: {\n            autoTransferredAt: new Date()\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      findAvailableSources() {\n        return this.col.aggregate([{\n          $group: {\n            _id: 0,\n            types: {\n              $addToSet: {\n                $cond: {\n                  if: {\n                    $eq: ['$source.type', 'app']\n                  },\n                  then: '$$REMOVE',\n                  else: {\n                    type: '$source.type'\n                  }\n                }\n              }\n            },\n            apps: {\n              $addToSet: {\n                $cond: {\n                  if: {\n                    $eq: ['$source.type', 'app']\n                  },\n                  else: '$$REMOVE',\n                  then: {\n                    type: '$source.type',\n                    id: '$source.id',\n                    alias: '$source.alias',\n                    sidebarIcon: '$source.sidebarIcon',\n                    defaultIcon: '$source.defaultIcon'\n                  }\n                }\n              }\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            fullTypes: {\n              $setUnion: ['$types', '$apps']\n            }\n          }\n        }]);\n      }\n      // These 3 methods shouldn't be here :( but current EE model has a meteor dependency\n      // And refactoring it could take time\n      setTranscriptRequestedPdfById(rid) {\n        return this.updateOne({\n          _id: rid\n        }, {\n          $set: {\n            pdfTranscriptRequested: true\n          }\n        });\n      }\n      unsetTranscriptRequestedPdfById(rid) {\n        return this.updateOne({\n          _id: rid\n        }, {\n          $unset: {\n            pdfTranscriptRequested: 1\n          }\n        });\n      }\n      setPdfTranscriptFileIdById(rid, fileId) {\n        return this.updateOne({\n          _id: rid\n        }, {\n          $set: {\n            pdfTranscriptFileId: fileId\n          }\n        });\n      }\n      setEmailTranscriptRequestedByRoomId(roomId, transcriptInfo) {\n        const {\n          requestedAt,\n          requestedBy,\n          email,\n          subject\n        } = transcriptInfo;\n        return this.updateOne({\n          _id: roomId,\n          t: 'l'\n        }, {\n          $set: {\n            transcriptRequest: {\n              requestedAt,\n              requestedBy,\n              email,\n              subject\n            }\n          }\n        });\n      }\n      unsetEmailTranscriptRequestedByRoomId(roomId) {\n        return this.updateOne({\n          _id: roomId,\n          t: 'l'\n        }, {\n          $unset: {\n            transcriptRequest: 1\n          }\n        });\n      }\n      closeRoomById(roomId, closeInfo, options) {\n        const {\n          closer,\n          closedBy,\n          closedAt,\n          chatDuration,\n          serviceTimeDuration,\n          tags\n        } = closeInfo;\n        return this.updateOne({\n          _id: roomId,\n          t: 'l'\n        }, {\n          $set: _objectSpread(_objectSpread(_objectSpread({\n            closedAt,\n            'metrics.chatDuration': chatDuration,\n            'metrics.serviceTimeDuration': serviceTimeDuration,\n            'v.status': UserStatus.OFFLINE\n          }, closer && {\n            closer\n          }), closedBy && {\n            closedBy\n          }), tags && {\n            tags\n          }),\n          $unset: {\n            open: 1\n          }\n        }, options);\n      }\n      bulkRemoveDepartmentAndUnitsFromRooms(departmentId) {\n        return this.updateMany({\n          departmentId\n        }, {\n          $unset: {\n            departmentId: 1,\n            departmentAncestors: 1\n          }\n        });\n      }\n      findOneByIdOrName(_idOrName, options) {\n        const query = {\n          t: 'l',\n          $or: [{\n            _id: _idOrName\n          }, {\n            name: _idOrName\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      updateSurveyFeedbackById(_id, surveyFeedback) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            surveyFeedback\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async updateDataByToken(token, key, value) {\n        let overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        const query = {\n          'v.token': token,\n          'open': true\n        };\n        if (!overwrite) {\n          const room = await this.findOne(query, {\n            projection: {\n              livechatData: 1\n            }\n          });\n          if (!room) {\n            return false;\n          }\n          if (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n            return true;\n          }\n        }\n        const update = {\n          $set: {\n            [\"livechatData.\".concat(key)]: value\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async saveRoomById(_ref26) {\n        let {\n            _id,\n            topic,\n            tags,\n            livechatData\n          } = _ref26,\n          extra = _objectWithoutProperties(_ref26, _excluded);\n        const setData = _objectSpread({}, extra);\n        const unsetData = {};\n        if (topic != null) {\n          const trimmedTopic = topic.trim();\n          if (trimmedTopic.length) {\n            setData.topic = trimmedTopic;\n          } else {\n            unsetData.topic = 1;\n          }\n        }\n        if (Array.isArray(tags) && tags.length > 0) {\n          setData.tags = tags;\n        } else {\n          unsetData.tags = 1;\n        }\n        if (extra.priorityId === '') {\n          unsetData.priorityId = 1;\n          delete setData.priorityId;\n        }\n        if (extra.slaId === '') {\n          unsetData.slaId = 1;\n          delete setData.slaId;\n        }\n        if (livechatData) {\n          Object.keys(livechatData).forEach(key => {\n            const value = livechatData[key].trim();\n            if (value) {\n              setData[\"livechatData.\".concat(key)] = value;\n            } else {\n              unsetData[\"livechatData.\".concat(key)] = 1;\n            }\n          });\n        }\n        const update = {};\n        if (Object.keys(setData).length > 0) {\n          update.$set = setData;\n        }\n        if (Object.keys(unsetData).length > 0) {\n          update.$unset = unsetData;\n        }\n        if (Object.keys(update).length === 0) {\n          return;\n        }\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      findById(_id, fields) {\n        const options = {};\n        if (fields) {\n          options.projection = fields;\n        }\n        const query = {\n          t: 'l',\n          _id\n        };\n        return this.find(query, options);\n      }\n      findByIds(ids, fields) {\n        let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const options = {};\n        if (fields) {\n          options.projection = fields;\n        }\n        const query = _objectSpread({\n          t: 'l',\n          _id: {\n            $in: ids\n          }\n        }, extraQuery);\n        return this.find(query, options);\n      }\n      findOneByIdAndVisitorToken(_id, visitorToken, fields) {\n        const options = {};\n        if (fields) {\n          options.projection = fields;\n        }\n        const query = {\n          't': 'l',\n          _id,\n          'v.token': visitorToken\n        };\n        return this.findOne(query, options);\n      }\n      findOneByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n        const query = {\n          't': 'l',\n          'v.token': visitorToken,\n          '$or': [{\n            'email.thread': {\n              $elemMatch: {\n                $in: emailThread\n              }\n            }\n          }, {\n            'email.thread': new RegExp(emailThread.join('|'))\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      findOneByVisitorTokenAndEmailThreadAndDepartment(visitorToken, emailThread, departmentId, options) {\n        const query = _objectSpread({\n          't': 'l',\n          'v.token': visitorToken,\n          '$or': [{\n            'email.thread': {\n              $elemMatch: {\n                $in: emailThread\n              }\n            }\n          }, {\n            'email.thread': new RegExp(emailThread.map(t => \"\\\"\".concat(t, \"\\\"\")).join('|'))\n          }]\n        }, departmentId && {\n          departmentId\n        });\n        return this.findOne(query, options);\n      }\n      findOneOpenByVisitorTokenAndEmailThread(visitorToken, emailThread, options) {\n        const query = {\n          't': 'l',\n          'open': true,\n          'v.token': visitorToken,\n          '$or': [{\n            'email.thread': {\n              $elemMatch: {\n                $in: emailThread\n              }\n            }\n          }, {\n            'email.thread': new RegExp(emailThread.join('|'))\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      updateEmailThreadByRoomId(roomId, threadIds) {\n        const query = {\n          $addToSet: {\n            'email.thread': threadIds\n          }\n        };\n        return this.updateOne({\n          _id: roomId\n        }, query);\n      }\n      findOneLastServedAndClosedByVisitorToken(visitorToken) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          't': 'l',\n          'v.token': visitorToken,\n          'closedAt': {\n            $exists: true\n          },\n          'servedBy': {\n            $exists: true\n          }\n        };\n        options.sort = {\n          closedAt: -1\n        };\n        return this.findOne(query, options);\n      }\n      findOneByVisitorToken(visitorToken, fields) {\n        const options = {};\n        if (fields) {\n          options.projection = fields;\n        }\n        const query = {\n          't': 'l',\n          'v.token': visitorToken\n        };\n        return this.findOne(query, options);\n      }\n      async updateRoomCount() {\n        const livechatCount = await Settings.incrementValueById('Livechat_Room_Count', 1, {\n          returnDocument: 'after'\n        });\n        return livechatCount.value;\n      }\n      findOpenByVisitorToken(visitorToken) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'open': true,\n          'v.token': visitorToken\n        }, extraQuery);\n        return this.find(query, options);\n      }\n      findOneOpenByVisitorToken(visitorToken) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          't': 'l',\n          'open': true,\n          'v.token': visitorToken\n        };\n        return this.findOne(query, options);\n      }\n      findOneOpenByVisitorTokenAndDepartmentIdAndSource(visitorToken, departmentId, source) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'open': true,\n          'v.token': visitorToken,\n          departmentId\n        }, source && {\n          'source.type': source\n        });\n        return this.findOne(query, options);\n      }\n      findOpenByVisitorTokenAndDepartmentId(visitorToken, departmentId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'open': true,\n          'v.token': visitorToken,\n          departmentId\n        }, extraQuery);\n        return this.find(query, options);\n      }\n      findByVisitorToken(visitorToken) {\n        let extraQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'v.token': visitorToken\n        }, extraQuery);\n        return this.find(query);\n      }\n      findByVisitorIdAndAgentId(visitorId, agentId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread(_objectSpread(_objectSpread({\n          t: 'l'\n        }, visitorId && {\n          'v._id': visitorId\n        }), agentId && {\n          'servedBy._id': agentId\n        }), extraQuery);\n        return this.find(query, options);\n      }\n      findOneOpenByRoomIdAndVisitorToken(roomId, visitorToken) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          't': 'l',\n          '_id': roomId,\n          'open': true,\n          'v.token': visitorToken\n        };\n        return this.findOne(query, options);\n      }\n      findClosedRooms(departmentIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let extraQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread(_objectSpread({\n          t: 'l',\n          open: {\n            $exists: false\n          },\n          closedAt: {\n            $exists: true\n          }\n        }, Array.isArray(departmentIds) && departmentIds.length > 0 && {\n          departmentId: {\n            $in: departmentIds\n          }\n        }), extraQuery);\n        return this.find(query, options);\n      }\n      getResponseByRoomIdUpdateQuery(responseBy) {\n        let updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getUpdater();\n        updater.set('responseBy', responseBy);\n        updater.unset('waitingResponse');\n        return updater;\n      }\n      getNotResponseByRoomIdUpdateQuery() {\n        let updater = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUpdater();\n        updater.set('waitingResponse', true);\n        updater.unset('responseBy');\n        return updater;\n      }\n      getAgentLastMessageTsUpdateQuery() {\n        let updater = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getUpdater();\n        return updater.set('responseBy.lastMessageTs', new Date());\n      }\n      getAnalyticsUpdateQuery(analyticsData) {\n        let updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getUpdater();\n        if (analyticsData) {\n          updater.set('metrics.response.avg', analyticsData.avgResponseTime);\n          updater.inc('metrics.response.total', 1);\n          updater.inc('metrics.response.tt', analyticsData.responseTime);\n          updater.inc('metrics.reaction.tt', analyticsData.reactionTime);\n        }\n        if (analyticsData !== null && analyticsData !== void 0 && analyticsData.firstResponseTime) {\n          updater.set('metrics.reaction.fd', analyticsData.firstReactionDate);\n          updater.set('metrics.reaction.ft', analyticsData.firstReactionTime);\n          updater.set('metrics.response.fd', analyticsData.firstResponseDate);\n          updater.set('metrics.response.ft', analyticsData.firstResponseTime);\n        }\n        return updater;\n      }\n      getAnalyticsUpdateQueryBySentByAgent(room, message, analyticsData) {\n        var _room$metrics, _room$metrics2;\n        let updater = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.getUpdater();\n        // livechat analytics : update last message timestamps\n        const visitorLastQuery = (_room$metrics = room.metrics) !== null && _room$metrics !== void 0 && _room$metrics.v ? room.metrics.v.lq : room.ts;\n        const agentLastReply = (_room$metrics2 = room.metrics) !== null && _room$metrics2 !== void 0 && _room$metrics2.servedBy ? room.metrics.servedBy.lr : room.ts;\n        if (visitorLastQuery > agentLastReply) {\n          return this.getAnalyticsUpdateQuery(analyticsData, updater).set('metrics.servedBy.lr', message.ts);\n        }\n        return this.getAnalyticsUpdateQuery(analyticsData, updater);\n      }\n      getAnalyticsUpdateQueryBySentByVisitor(room, message) {\n        var _room$metrics3, _room$metrics4;\n        let updater = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getUpdater();\n        // livechat analytics : update last message timestamps\n        const visitorLastQuery = (_room$metrics3 = room.metrics) !== null && _room$metrics3 !== void 0 && _room$metrics3.v ? room.metrics.v.lq : room.ts;\n        const agentLastReply = (_room$metrics4 = room.metrics) !== null && _room$metrics4 !== void 0 && _room$metrics4.servedBy ? room.metrics.servedBy.lr : room.ts;\n        // update visitor timestamp, only if its new inquiry and not continuing message\n        if (agentLastReply >= visitorLastQuery) {\n          return updater.set('metrics.v.lq', message.ts);\n        }\n        return updater;\n      }\n      getTotalConversationsBetweenDate(t, date) {\n        let {\n          departmentId\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread({\n          t,\n          ts: {\n            $gte: new Date(date.gte),\n            // ISO Date, ts >= date.gte\n            $lte: new Date(date.lte) // ISODate, ts <= date.lte\n          }\n        }, departmentId && departmentId !== 'undefined' && {\n          departmentId\n        });\n        return this.col.countDocuments(query);\n      }\n      getAnalyticsMetricsBetweenDate(t, date) {\n        let {\n          departmentId\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread(_objectSpread({\n          t,\n          ts: {\n            $gte: new Date(date.gte),\n            // ISO Date, ts >= date.gte\n            $lte: new Date(date.lte) // ISODate, ts <= date.lte\n          }\n        }, departmentId && departmentId !== 'undefined' && {\n          departmentId\n        }), extraQuery);\n        return this.find(query, {\n          projection: {\n            ts: 1,\n            departmentId: 1,\n            open: 1,\n            servedBy: 1,\n            metrics: 1,\n            msgs: 1\n          }\n        });\n      }\n      getAnalyticsMetricsBetweenDateWithMessages(t, date) {\n        let {\n          departmentId\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        let extraMatchers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        return this.col.aggregate([{\n          $match: _objectSpread(_objectSpread({\n            t,\n            ts: {\n              $gte: new Date(date.gte),\n              // ISO Date, ts >= date.gte\n              $lte: new Date(date.lte) // ISODate, ts <= date.lte\n            }\n          }, departmentId && departmentId !== 'undefined' && {\n            departmentId\n          }), extraMatchers)\n        }, {\n          $addFields: {\n            roomId: '$_id'\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_message',\n            // mongo doesn't like _id as variable name here :(\n            let: {\n              roomId: '$roomId'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $and: [{\n                    $eq: ['$$roomId', '$rid']\n                  }, {\n                    // this is similar to do { $exists: false }\n                    $lte: ['$t', null]\n                  }, ...(extraQuery ? [extraQuery] : [])]\n                }\n              }\n            }],\n            as: 'messages'\n          }\n        }, {\n          $unwind: {\n            path: '$messages',\n            preserveNullAndEmptyArrays: true\n          }\n        }, {\n          $group: {\n            _id: {\n              _id: '$_id',\n              ts: '$ts',\n              departmentId: '$departmentId',\n              open: '$open',\n              servedBy: '$servedBy',\n              metrics: '$metrics'\n            },\n            messagesCount: {\n              $sum: 1\n            }\n          }\n        }, {\n          $project: {\n            _id: '$_id._id',\n            ts: '$_id.ts',\n            departmentId: '$_id.departmentId',\n            open: '$_id.open',\n            servedBy: '$_id.servedBy',\n            metrics: '$_id.metrics',\n            msgs: '$messagesCount'\n          }\n        }], {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getAnalyticsBetweenDate(date) {\n        let {\n          departmentId\n        } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.col.aggregate([{\n          $match: _objectSpread({\n            t: 'l',\n            ts: {\n              $gte: new Date(date.gte),\n              // ISO Date, ts >= date.gte\n              $lte: new Date(date.lte) // ISODate, ts <= date.lte\n            }\n          }, departmentId && departmentId !== 'undefined' && {\n            departmentId\n          })\n        }, {\n          $addFields: {\n            roomId: '$_id'\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_message',\n            // mongo doesn't like _id as variable name here :(\n            let: {\n              roomId: '$roomId'\n            },\n            pipeline: [{\n              $match: {\n                $expr: {\n                  $and: [{\n                    $eq: ['$$roomId', '$rid']\n                  }, {\n                    // this is similar to do { $exists: false }\n                    $lte: ['$t', null]\n                  }]\n                }\n              }\n            }],\n            as: 'messages'\n          }\n        }, {\n          $unwind: {\n            path: '$messages',\n            preserveNullAndEmptyArrays: true\n          }\n        }, {\n          $group: {\n            _id: {\n              _id: '$_id',\n              ts: '$ts',\n              departmentId: '$departmentId',\n              open: '$open',\n              servedBy: '$servedBy',\n              metrics: '$metrics',\n              onHold: '$onHold'\n            },\n            messagesCount: {\n              $sum: 1\n            }\n          }\n        }, {\n          $project: {\n            _id: '$_id._id',\n            ts: '$_id.ts',\n            departmentId: '$_id.departmentId',\n            open: '$_id.open',\n            servedBy: '$_id.servedBy',\n            metrics: '$_id.metrics',\n            msgs: '$messagesCount',\n            onHold: '$_id.onHold'\n          }\n        }], {\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      countOpenByAgent(userId) {\n        let extraQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'open': true,\n          'servedBy._id': userId\n        }, extraQuery);\n        return this.col.countDocuments(query);\n      }\n      findOpenByAgent(userId) {\n        let extraQuery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = _objectSpread({\n          't': 'l',\n          'open': true,\n          'servedBy._id': userId\n        }, extraQuery);\n        return this.find(query);\n      }\n      changeAgentByRoomId(roomId, newAgent) {\n        var _newAgent$ts;\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            servedBy: {\n              _id: newAgent.agentId,\n              username: newAgent.username,\n              ts: (_newAgent$ts = newAgent.ts) !== null && _newAgent$ts !== void 0 ? _newAgent$ts : new Date()\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      changeDepartmentIdByRoomId(roomId, departmentId) {\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            departmentId\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveCRMDataByRoomId(roomId, crmData) {\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            crmData\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateVisitorStatus(token, status) {\n        const query = {\n          'v.token': token,\n          'open': true,\n          't': 'l'\n        };\n        const update = {\n          $set: {\n            'v.status': status\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      removeAgentByRoomId(roomId) {\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            queuedAt: new Date()\n          },\n          $unset: {\n            servedBy: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      removeByVisitorToken(token) {\n        const query = {\n          't': 'l',\n          'v.token': token\n        };\n        return this.deleteMany(query);\n      }\n      removeById(_id) {\n        const query = {\n          _id,\n          t: 'l'\n        };\n        return this.deleteOne(query);\n      }\n      getVisitorLastMessageTsUpdateQueryByRoomId(lastMessageTs) {\n        let updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getUpdater();\n        return updater.set('v.lastMessageTs', lastMessageTs);\n      }\n      setVisitorInactivityInSecondsById(roomId, visitorInactivity) {\n        const query = {\n          _id: roomId\n        };\n        const update = {\n          $set: {\n            'metrics.visitorInactivity': visitorInactivity\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      changeVisitorByRoomId(roomId, _ref27) {\n        let {\n          _id,\n          username,\n          token\n        } = _ref27;\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            'v._id': _id,\n            'v.username': username,\n            'v.token': token\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unarchiveOneById(roomId) {\n        const query = {\n          _id: roomId,\n          t: 'l'\n        };\n        const update = {\n          $set: {\n            open: true\n          },\n          $unset: {\n            servedBy: 1,\n            closedAt: 1,\n            closedBy: 1,\n            closer: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      getVisitorActiveForPeriodUpdateQuery(period) {\n        let updater = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getUpdater();\n        return updater.addToSet('v.activity', period);\n      }\n      markVisitorActiveForPeriod(rid, period) {\n        const query = {\n          _id: rid\n        };\n        const updater = this.getVisitorActiveForPeriodUpdateQuery(period);\n        return this.updateOne(query, updater.getUpdateFilter());\n      }\n      async getMACStatisticsForPeriod(period) {\n        return this.col.aggregate([{\n          $match: {\n            't': 'l',\n            'v.activity': period\n          }\n        }, {\n          $group: {\n            _id: {\n              source: {\n                $ifNull: ['$source.alias', '$source.type']\n              }\n            },\n            contactsCount: {\n              $addToSet: '$v._id'\n            },\n            conversationsCount: {\n              $sum: 1\n            }\n          }\n        }, {\n          $group: {\n            _id: null,\n            sources: {\n              $push: {\n                source: '$_id.source',\n                contactsCount: {\n                  $size: '$contactsCount'\n                },\n                conversationsCount: '$conversationsCount'\n              }\n            },\n            totalContactsCount: {\n              $sum: {\n                $size: '$contactsCount'\n              }\n            },\n            totalConversationsCount: {\n              $sum: '$conversationsCount'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            contactsCount: '$totalContactsCount',\n            conversationsCount: '$totalConversationsCount',\n            sources: 1\n          }\n        }]).toArray();\n      }\n      async getMACStatisticsBetweenDates(start, end) {\n        return this.col.aggregate([{\n          $match: {\n            't': 'l',\n            'v.activity': {\n              $exists: true\n            },\n            'ts': {\n              $gte: start,\n              $lt: end\n            }\n          }\n        }, {\n          $group: {\n            _id: {\n              source: {\n                $ifNull: ['$source.alias', '$source.type']\n              }\n            },\n            contactsCount: {\n              $addToSet: '$v._id'\n            },\n            conversationsCount: {\n              $sum: 1\n            }\n          }\n        }, {\n          $group: {\n            _id: null,\n            sources: {\n              $push: {\n                source: '$_id.source',\n                contactsCount: {\n                  $size: '$contactsCount'\n                },\n                conversationsCount: '$conversationsCount'\n              }\n            },\n            totalContactsCount: {\n              $sum: {\n                $size: '$contactsCount'\n              }\n            },\n            totalConversationsCount: {\n              $sum: '$conversationsCount'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            contactsCount: '$totalContactsCount',\n            conversationsCount: '$totalConversationsCount',\n            sources: 1\n          }\n        }]).toArray();\n      }\n      countLivechatRoomsWithDepartment() {\n        return this.col.countDocuments({\n          departmentId: {\n            $exists: true\n          }\n        });\n      }\n      async unsetAllPredictedVisitorAbandonment() {\n        throw new Error('Method not implemented.');\n      }\n      setOnHoldByRoomId(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      unsetOnHoldByRoomId(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      unsetOnHoldAndPredictedVisitorAbandonmentByRoomId(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      setSlaForRoomById(_roomId, _sla) {\n        throw new Error('Method not implemented.');\n      }\n      removeSlaFromRoomById(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      bulkRemoveSlaFromRoomsById(_slaId) {\n        throw new Error('Method not implemented.');\n      }\n      findOpenBySlaId(_slaId, _options) {\n        throw new Error('Method not implemented.');\n      }\n      async setPriorityByRoomId(_roomId, _priority) {\n        throw new Error('Method not implemented.');\n      }\n      async unsetPriorityByRoomId(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      findOpenRoomsByPriorityId(_priorityId) {\n        throw new Error('Method not implemented.');\n      }\n      getPredictedVisitorAbandonmentByRoomIdUpdateQuery(_willBeAbandonedAt, _updater) {\n        throw new Error('Method not implemented.');\n      }\n      setPredictedVisitorAbandonmentByRoomId(_rid, _willBeAbandonedAt) {\n        throw new Error('Method not implemented.');\n      }\n      findAbandonedOpenRooms(_date) {\n        throw new Error('Method not implemented.');\n      }\n      async unsetPredictedVisitorAbandonmentByRoomId(_roomId) {\n        throw new Error('Method not implemented.');\n      }\n      async associateRoomsWithDepartmentToUnit(_departments, _unitId) {\n        throw new Error('Method not implemented.');\n      }\n      async removeUnitAssociationFromRooms(_unitId) {\n        throw new Error('Method not implemented.');\n      }\n      async updateDepartmentAncestorsById(_rid, _departmentAncestors) {\n        throw new Error('Method not implemented.');\n      }\n      countPrioritizedRooms() {\n        throw new Error('Method not implemented.');\n      }\n      countRoomsWithSla() {\n        throw new Error('Method not implemented.');\n      }\n      countRoomsWithPdfTranscriptRequested() {\n        throw new Error('Method not implemented.');\n      }\n      countRoomsWithTranscriptSent() {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsBySource(_start, _end, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsByStatus(_start, _end, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsByDepartment(_start, _end, _sort, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsByTags(_start, _end, _sort, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsByAgents(_start, _end, _sort, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getConversationsWithoutTagsBetweenDate(_start, _end, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getTotalConversationsWithoutAgentsBetweenDate(_start, _end, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n      getTotalConversationsWithoutDepartmentBetweenDates(_start, _end, _extraQuery) {\n        throw new Error('Method not implemented.');\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","export","LivechatRoomsRaw","UserStatus","Settings","escapeRegExp","getValue","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","open","sparse","departmentId","closedAt","servedBy","t","partialFilterExpression","$exists","source","departmentAncestors","$eq","pdfTranscriptRequested","pdfTranscriptFileId","callStatus","priorityId","slaId","ts","getQueueMetrics","_ref","agentId","includeOfflineAgents","options","match","$match","departmentsLookup","$lookup","from","let","deptId","pipeline","$expr","$project","name","as","departmentsUnwind","$unwind","path","preserveNullAndEmptyArrays","usersLookup","servedById","status","$ne","statusLivechat","_id","username","usersUnwind","usersGroup","$group","userId","departmentName","chats","$sum","project","user","department","firstParams","sort","$sort","pagination","offset","push","$skip","count","$limit","facet","$facet","sortedResults","totalCount","total","params","col","aggregate","readPreference","allowDiskUse","toArray","findAllNumberOfAbandonedRooms","_ref2","start","end","onlyCount","$gte","Date","$lte","group","abandonedRooms","$ifNull","$count","findPercentageOfAbandonedRooms","_ref3","rooms","abandonedChats","$cond","$and","percentageOfAbandonedChats","$floor","$divide","$multiply","findAllAverageOfChatDurationTime","_ref4","chatsDuration","averageChatDurationTimeInSeconds","$ceil","findAllAverageWaitingTime","_ref5","waitingResponse","chatsFirstResponses","averageWaitingTimeInSeconds","findAllRooms","_ref6","answered","undefined","findAllServiceTime","_ref7","serviceTimeDuration","findAllNumberOfTransferredRooms","_ref8","localField","foreignField","departmentsGroup","$push","departmentsProject","roomsUnwind","messagesLookup","messagesProject","messages","$filter","input","cond","transferProject","transfers","$size","transferGroup","numberOfTransferredRooms","presentationProject","countAllOpenChatsBetweenDate","_ref9","query","onHold","countDocuments","countAllClosedChatsBetweenDate","_ref10","countAllQueuedChatsBetweenDate","_ref11","countAllOpenChatsByAgentBetweenDate","_ref12","countAllOnHoldChatsByAgentBetweenDate","_ref13","countAllClosedChatsByAgentBetweenDate","_ref14","countAllOpenChatsByDepartmentBetweenDate","_ref15","lookup","unwind","countAllClosedChatsByDepartmentBetweenDate","_ref16","calculateResponseTimingsBetweenDates","_ref17","sumResponseAvg","roomsWithResponseTime","maxFirstResponse","$max","avg","$trunc","longest","calculateReactionTimingsBetweenDates","_ref18","sumReactionFirstResponse","roomsWithFirstReaction","maxFirstReaction","calculateDurationTimingsBetweenDates","_ref19","sumChatDuration","roomsWithChatDuration","maxChatDuration","findAllAverageOfServiceTime","_ref20","allServiceTime","$subtract","averageServiceTimeInSeconds","findByVisitorId","visitorId","extraQuery","arguments","length","find","findPaginatedByVisitorId","findPaginated","findRoomsByVisitorIdAndMessageWithCriteria","_ref21","searchText","served","$or","RegExp","matchMessages","$regex","concat","fname","msgs","closedBy","closer","tags","closingMessage","unwindClosingMsg","skip","limit","findPaginatedRoomsByVisitorsIdsAndSource","_ref22","visitorsIds","$in","findRoomsWithCriteria","_ref23","agents","roomName","createdAt","customFields","roomIds","onhold","queued","Object","keys","map","getOnHoldConversationsBetweenDate","to","$lt","findAllServiceTimeByAgent","_ref24","findAllAverageServiceTimeByAgents","_ref25","active","setDepartmentByRoomId","roomId","updateOne","$set","findOpen","setAutoTransferOngoingById","update","autoTransferOngoing","unsetAutoTransferOngoingById","$unset","setAutoTransferredAtById","autoTransferredAt","findAvailableSources","types","$addToSet","if","then","else","type","apps","id","alias","sidebarIcon","defaultIcon","fullTypes","$setUnion","setTranscriptRequestedPdfById","rid","unsetTranscriptRequestedPdfById","setPdfTranscriptFileIdById","fileId","setEmailTranscriptRequestedByRoomId","transcriptInfo","requestedAt","requestedBy","email","subject","transcriptRequest","unsetEmailTranscriptRequestedByRoomId","closeRoomById","closeInfo","chatDuration","OFFLINE","bulkRemoveDepartmentAndUnitsFromRooms","updateMany","findOneByIdOrName","_idOrName","findOne","updateSurveyFeedbackById","surveyFeedback","updateDataByToken","token","value","overwrite","room","projection","livechatData","saveRoomById","_ref26","topic","extra","setData","unsetData","trimmedTopic","trim","Array","isArray","forEach","findById","fields","findByIds","ids","findOneByIdAndVisitorToken","visitorToken","findOneByVisitorTokenAndEmailThread","emailThread","$elemMatch","join","findOneByVisitorTokenAndEmailThreadAndDepartment","findOneOpenByVisitorTokenAndEmailThread","updateEmailThreadByRoomId","threadIds","findOneLastServedAndClosedByVisitorToken","findOneByVisitorToken","updateRoomCount","livechatCount","incrementValueById","returnDocument","findOpenByVisitorToken","findOneOpenByVisitorToken","findOneOpenByVisitorTokenAndDepartmentIdAndSource","findOpenByVisitorTokenAndDepartmentId","findByVisitorToken","findByVisitorIdAndAgentId","findOneOpenByRoomIdAndVisitorToken","findClosedRooms","departmentIds","getResponseByRoomIdUpdateQuery","responseBy","updater","getUpdater","set","unset","getNotResponseByRoomIdUpdateQuery","getAgentLastMessageTsUpdateQuery","getAnalyticsUpdateQuery","analyticsData","avgResponseTime","inc","responseTime","reactionTime","firstResponseTime","firstReactionDate","firstReactionTime","firstResponseDate","getAnalyticsUpdateQueryBySentByAgent","message","_room$metrics","_room$metrics2","visitorLastQuery","metrics","lq","agentLastReply","lr","getAnalyticsUpdateQueryBySentByVisitor","_room$metrics3","_room$metrics4","getTotalConversationsBetweenDate","date","gte","lte","getAnalyticsMetricsBetweenDate","getAnalyticsMetricsBetweenDateWithMessages","extraMatchers","$addFields","messagesCount","getAnalyticsBetweenDate","countOpenByAgent","findOpenByAgent","changeAgentByRoomId","newAgent","_newAgent$ts","changeDepartmentIdByRoomId","saveCRMDataByRoomId","crmData","updateVisitorStatus","removeAgentByRoomId","queuedAt","removeByVisitorToken","deleteMany","removeById","deleteOne","getVisitorLastMessageTsUpdateQueryByRoomId","lastMessageTs","setVisitorInactivityInSecondsById","visitorInactivity","changeVisitorByRoomId","_ref27","unarchiveOneById","getVisitorActiveForPeriodUpdateQuery","period","addToSet","markVisitorActiveForPeriod","getUpdateFilter","getMACStatisticsForPeriod","contactsCount","conversationsCount","sources","totalContactsCount","totalConversationsCount","getMACStatisticsBetweenDates","countLivechatRoomsWithDepartment","unsetAllPredictedVisitorAbandonment","Error","setOnHoldByRoomId","_roomId","unsetOnHoldByRoomId","unsetOnHoldAndPredictedVisitorAbandonmentByRoomId","setSlaForRoomById","_sla","removeSlaFromRoomById","bulkRemoveSlaFromRoomsById","_slaId","findOpenBySlaId","_options","setPriorityByRoomId","_priority","unsetPriorityByRoomId","findOpenRoomsByPriorityId","_priorityId","getPredictedVisitorAbandonmentByRoomIdUpdateQuery","_willBeAbandonedAt","_updater","setPredictedVisitorAbandonmentByRoomId","_rid","findAbandonedOpenRooms","_date","unsetPredictedVisitorAbandonmentByRoomId","associateRoomsWithDepartmentToUnit","_departments","_unitId","removeUnitAssociationFromRooms","updateDepartmentAncestorsById","_departmentAncestors","countPrioritizedRooms","countRoomsWithSla","countRoomsWithPdfTranscriptRequested","countRoomsWithTranscriptSent","getConversationsBySource","_start","_end","_extraQuery","getConversationsByStatus","getConversationsByDepartment","_sort","getConversationsByTags","getConversationsByAgents","getConversationsWithoutTagsBetweenDate","getTotalConversationsWithoutAgentsBetweenDate","getTotalConversationsWithoutDepartmentBetweenDates","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatRooms.ts"],"sourcesContent":["import type {\n\tIOmnichannelRoom,\n\tRocketChatRecordDeleted,\n\tIOmnichannelRoomClosingInfo,\n\tDeepWritable,\n\tIMessage,\n\tILivechatPriority,\n\tIOmnichannelServiceLevelAgreements,\n\tReportResult,\n\tMACStats,\n} from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tDb,\n\tCollection,\n\tIndexDescription,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateFilter,\n\tSortDirection,\n\tFindCursor,\n\tUpdateResult,\n\tAggregationCursor,\n\tUpdateOptions,\n} from 'mongodb';\n\nimport { getValue } from '../../../app/settings/server/raw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\n/**\n * @extends BaseRaw<ILivechatRoom>\n */\nexport class LivechatRoomsRaw extends BaseRaw<IOmnichannelRoom> implements ILivechatRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IOmnichannelRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\t// move indexes from constructor to here using IndexDescription as type\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { open: 1 }, sparse: true },\n\t\t\t{ key: { departmentId: 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.chatDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.serviceTimeDuration': 1 }, sparse: true },\n\t\t\t{ key: { 'metrics.visitorInactivity': 1 }, sparse: true },\n\t\t\t{ key: { 'omnichannel.predictedVisitorAbandonmentAt': 1 }, sparse: true },\n\t\t\t{ key: { closedAt: 1 }, sparse: true },\n\t\t\t{ key: { servedBy: 1 }, sparse: true },\n\t\t\t{ key: { 'v.token': 1, 'email.thread': 1 }, sparse: true },\n\t\t\t{ key: { 'v._id': 1 }, sparse: true },\n\t\t\t{ key: { 'servedBy._id': 1, 'departmentId': 1, 't': 1, 'open': 1, 'ts': -1 } },\n\t\t\t{ key: { t: 1, departmentId: 1, closedAt: 1 }, partialFilterExpression: { closedAt: { $exists: true } } },\n\t\t\t{ key: { source: 1 }, sparse: true },\n\t\t\t{ key: { departmentAncestors: 1 }, sparse: true },\n\t\t\t{\n\t\t\t\tkey: { 't': 1, 'open': 1, 'source.type': 1, 'v.status': 1 },\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t't': { $eq: 'l' },\n\t\t\t\t\t'open': { $eq: true },\n\t\t\t\t\t'source.type': { $eq: 'widget' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { pdfTranscriptRequested: 1 }, sparse: true },\n\t\t\t{ key: { pdfTranscriptFileId: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { callStatus: 1 }, sparse: true }, // used on statistics\n\t\t\t{ key: { priorityId: 1 }, sparse: true },\n\t\t\t{ key: { slaId: 1 }, sparse: true },\n\t\t\t{ key: { source: 1, ts: 1 }, partialFilterExpression: { source: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { departmentId: 1, ts: 1 }, partialFilterExpression: { departmentId: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'tags.0': 1, 'ts': 1 }, partialFilterExpression: { 'tags.0': { $exists: true }, 't': 'l' } },\n\t\t\t{ key: { servedBy: 1, ts: 1 }, partialFilterExpression: { servedBy: { $exists: true }, t: 'l' } },\n\t\t\t{ key: { 'v.activity': 1, 'ts': 1 }, partialFilterExpression: { 'v.activity': { $exists: true }, 't': 'l' } },\n\t\t];\n\t}\n\n\tgetQueueMetrics({\n\t\tdepartmentId,\n\t\tagentId,\n\t\tincludeOfflineAgents,\n\t\toptions = {},\n\t}: {\n\t\tdepartmentId?: string;\n\t\tagentId?: string;\n\t\tincludeOfflineAgents?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = { $match: { t: 'l', open: true, servedBy: { $exists: true } } };\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlet: {\n\t\t\t\t\tdeptId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$deptId'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst usersLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlet: {\n\t\t\t\t\tservedById: '$servedBy._id',\n\t\t\t\t},\n\t\t\t\tpipeline: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$eq: ['$_id', '$$servedById'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...(!includeOfflineAgents && {\n\t\t\t\t\t\t\t\tstatus: { $ne: 'offline' },\n\t\t\t\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t...(agentId && { _id: agentId }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst usersUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst usersGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tuserId: '$user._id',\n\t\t\t\t\tusername: '$user.username',\n\t\t\t\t\tstatus: '$user.status',\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\tdepartmentName: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tuser: {\n\t\t\t\t\t_id: '$_id.userId',\n\t\t\t\t\tusername: '$_id.username',\n\t\t\t\t\tstatus: '$_id.status',\n\t\t\t\t},\n\t\t\t\tdepartment: {\n\t\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\t\tname: '$_id.departmentName',\n\t\t\t\t},\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [match, departmentsLookup, departmentsUnwind, usersLookup, usersUnwind];\n\t\tconst sort: Document = { $sort: options.sort || { chats: -1 } };\n\t\tconst pagination = [sort];\n\n\t\tif (options.offset) {\n\t\t\tpagination.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tpagination.push({ $limit: options.count });\n\t\t}\n\n\t\tconst facet = {\n\t\t\t$facet: {\n\t\t\t\tsortedResults: pagination,\n\t\t\t\ttotalCount: [{ $group: { _id: null, total: { $sum: 1 } } }],\n\t\t\t},\n\t\t};\n\n\t\tconst params = [...firstParams, usersGroup, project, facet];\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred(), allowDiskUse: true }).toArray();\n\t}\n\n\tasync findAllNumberOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'metrics.visitorInactivity': {\n\t\t\t\t\t$gte: await getValue('Livechat_visitor_inactivity_timeout'),\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\tabandonedRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tabandonedRooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync findPercentageOfAbandonedRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tabandonedChats: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ $ifNull: ['$metrics.visitorInactivity', false] },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// TODO: move these calls to outside model\n\t\t\t\t\t\t\t\t\t\t$gte: ['$metrics.visitorInactivity', await getValue('Livechat_visitor_inactivity_timeout')],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tpercentageOfAbandonedChats: {\n\t\t\t\t\t$floor: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: [{ $multiply: ['$abandonedChats', 100] }, '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageOfChatDurationTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start) },\n\t\t\t\tclosedAt: { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageChatDurationTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsDuration', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageWaitingTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\twaitingResponse: { $ne: true },\n\t\t\t},\n\t\t};\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tchatsFirstResponses: { $sum: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageWaitingTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$chatsFirstResponses', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllRooms({\n\t\tstart,\n\t\tend,\n\t\tanswered,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tanswered?: boolean;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tif (answered !== undefined) {\n\t\t\tmatch.$match.waitingResponse = { [answered ? '$ne' : '$eq']: true };\n\t\t}\n\t\tconst group: Document = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort: Document = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tchats: '$rooms',\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst departmentsLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst departmentsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\trooms: { $push: '$$ROOT' },\n\t\t\t},\n\t\t};\n\t\tconst departmentsProject = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id.departmentId',\n\t\t\t\tname: '$_id.name',\n\t\t\t\trooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst roomsUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$rooms',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesLookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: 'rooms._id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 1,\n\t\t\t\tname: 1,\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $eq: ['$$message.t', 'livechat_transfer_history'] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst transferProject = {\n\t\t\t$project: {\n\t\t\t\tname: 1,\n\t\t\t\ttransfers: { $size: { $ifNull: ['$messages', []] } },\n\t\t\t},\n\t\t};\n\t\tconst transferGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\tdepartmentId: '$_id',\n\t\t\t\t\tname: '$name',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: '$transfers' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tname: { $ifNull: ['$_id.name', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Document[] = [match, departmentsLookup, departmentsUnwind];\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'departments._id': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [\n\t\t\t...firstParams,\n\t\t\tdepartmentsGroup,\n\t\t\tdepartmentsProject,\n\t\t\troomsUnwind,\n\t\t\tmessagesLookup,\n\t\t\tmessagesProject,\n\t\t\ttransferProject,\n\t\t\ttransferGroup,\n\t\t\tpresentationProject,\n\t\t\tsort,\n\t\t];\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'$or': [\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonHold: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t'servedBy': { $exists: true },\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllClosedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'metrics.chatDuration': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllQueuedChatsBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\tservedBy: { $exists: false },\n\t\t\topen: true,\n\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tcountAllOpenChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'$or': [\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tonHold: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$eq: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOnHoldChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'open': true,\n\t\t\t\t'onHold': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t\t$eq: true,\n\t\t\t\t},\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByAgentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'open': { $exists: false },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'ts': { $gte: new Date(start) },\n\t\t\t\t'closedAt': { $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: '$servedBy.username',\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllOpenChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: true,\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcountAllClosedChatsByDepartmentBetweenDate({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\topen: { $exists: false },\n\t\t\t\tdepartmentId: { $exists: true },\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department',\n\t\t\t\tlocalField: 'departmentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$departments._id',\n\t\t\t\t\tname: '$departments.name',\n\t\t\t\t},\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tchats: 1,\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst params = [match, lookup, unwind, group, project];\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateResponseTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumResponseAvg: {\n\t\t\t\t\t$sum: '$metrics.response.avg',\n\t\t\t\t},\n\t\t\t\troomsWithResponseTime: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.response.avg', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstResponse: { $max: '$metrics.response.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithResponseTime', 0] }, 0, { $divide: ['$sumResponseAvg', '$roomsWithResponseTime'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstResponse',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateReactionTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\tt: 'l',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumReactionFirstResponse: {\n\t\t\t\t\t$sum: '$metrics.reaction.ft',\n\t\t\t\t},\n\t\t\t\troomsWithFirstReaction: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.reaction.ft', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxFirstReaction: { $max: '$metrics.reaction.ft' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithFirstReaction', 0] }, 0, { $divide: ['$sumReactionFirstResponse', '$roomsWithFirstReaction'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxFirstReaction',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tcalculateDurationTimingsBetweenDates({ start, end, departmentId }: { start: Date; end: Date; departmentId?: string }) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'metrics.chatDuration': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tsumChatDuration: {\n\t\t\t\t\t$sum: '$metrics.chatDuration',\n\t\t\t\t},\n\t\t\t\troomsWithChatDuration: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$and: [{ $ifNull: ['$metrics.chatDuration', false] }],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t1,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmaxChatDuration: { $max: '$metrics.chatDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tavg: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$roomsWithChatDuration', 0] }, 0, { $divide: ['$sumChatDuration', '$roomsWithChatDuration'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlongest: '$maxChatDuration',\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\treturn this.col.aggregate([match, group, project], { readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindAllAverageOfServiceTime({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: string;\n\t\tonlyCount?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: number } };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'ts': { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t\t'responseBy.lastMessageTs': { $exists: true },\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t\tallServiceTime: {\n\t\t\t\t\t$sum: { $divide: [{ $subtract: ['$responseBy.lastMessageTs', '$servedBy.ts'] }, 1000] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: { $cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allServiceTime', '$rooms'] }] },\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tmatch.$match.departmentId = departmentId;\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByVisitorId(visitorId: string, options: FindOptions<IOmnichannelRoom>, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v._id': visitorId,\n\t\t\t...extraQuery,\n\t\t};\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindRoomsByVisitorIdAndMessageWithCriteria({\n\t\tvisitorId,\n\t\tsearchText,\n\t\topen,\n\t\tserved,\n\t\tonlyCount = false,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorId: string;\n\t\tsearchText?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tonlyCount?: boolean;\n\t\tsource?: string;\n\t\toptions?: { sort?: { [k: string]: number }; skip?: number; limit?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t'v._id': visitorId,\n\t\t\t\t...(open !== undefined && !open && { closedAt: { $exists: true } }),\n\t\t\t\t...(served !== undefined && served && { servedBy: { $exists: served } }),\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'rid',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst matchMessages = searchText && {\n\t\t\t$match: { 'messages.msg': { $regex: `.*${escapeRegExp(searchText)}.*` } },\n\t\t};\n\n\t\tconst params: Document[] = [match, lookup];\n\n\t\tif (matchMessages) {\n\t\t\tparams.push(matchMessages);\n\t\t}\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\tfname: 1,\n\t\t\t\tts: 1,\n\t\t\t\tv: 1,\n\t\t\t\tmsgs: 1,\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t\ttags: 1,\n\t\t\t\tclosingMessage: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t\tcond: { $eq: ['$$messages.t', 'livechat-close'] },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst unwindClosingMsg = {\n\t\t\t$unwind: { path: '$closingMessage', preserveNullAndEmptyArrays: true },\n\t\t};\n\t\tconst sort = { $sort: options.sort || { ts: -1 } };\n\n\t\tparams.push(project, unwindClosingMsg, sort);\n\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'count' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\n\t\tif (options.skip) {\n\t\t\tparams.push({ $skip: options.skip });\n\t\t}\n\n\t\tif (options.limit) {\n\t\t\tparams.push({ $limit: options.limit });\n\t\t}\n\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds,\n\t\tsource,\n\t\toptions = {},\n\t}: {\n\t\tvisitorsIds: string[];\n\t\tsource?: string;\n\t\toptions?: FindOptions;\n\t}): FindPaginated<FindCursor<IOmnichannelRoom>> {\n\t\treturn this.findPaginated<IOmnichannelRoom>(\n\t\t\t{\n\t\t\t\t'v._id': { $in: visitorsIds },\n\t\t\t\t...(source && {\n\t\t\t\t\t$or: [{ 'source.type': new RegExp(escapeRegExp(source), 'i') }, { 'source.alias': new RegExp(escapeRegExp(source), 'i') }],\n\t\t\t\t}),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsWithCriteria({\n\t\tagents,\n\t\troomName,\n\t\tdepartmentId,\n\t\topen,\n\t\tserved,\n\t\tcreatedAt,\n\t\tclosedAt,\n\t\ttags,\n\t\tcustomFields,\n\t\tvisitorId,\n\t\troomIds,\n\t\tonhold,\n\t\tqueued,\n\t\toptions = {},\n\t\textraQuery = {},\n\t}: {\n\t\tagents?: string[];\n\t\troomName?: string;\n\t\tdepartmentId?: string;\n\t\topen?: boolean;\n\t\tserved?: boolean;\n\t\tcreatedAt?: { start?: Date; end?: Date };\n\t\tclosedAt?: { start?: Date; end?: Date };\n\t\ttags?: string[];\n\t\tcustomFields?: Record<string, string>;\n\t\tvisitorId?: string;\n\t\troomIds?: string[];\n\t\tonhold?: boolean;\n\t\tqueued?: boolean;\n\t\toptions?: { offset?: number; count?: number; sort?: { [k: string]: SortDirection } };\n\t\textraQuery?: Filter<IOmnichannelRoom>;\n\t}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...extraQuery,\n\t\t\t...(agents && { 'servedBy._id': { $in: agents } }),\n\t\t\t...(roomName && { fname: new RegExp(escapeRegExp(roomName), 'i') }),\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...(open !== undefined && { open: { $exists: open }, onHold: { $ne: true } }),\n\t\t\t...(served !== undefined && { servedBy: { $exists: served } }),\n\t\t\t...(visitorId && visitorId !== 'undefined' && { 'v._id': visitorId }),\n\t\t};\n\n\t\tif (open) {\n\t\t\tquery.servedBy = { $exists: true };\n\t\t}\n\n\t\tif (createdAt) {\n\t\t\tquery.ts = {};\n\t\t\tif (createdAt.start) {\n\t\t\t\tquery.ts.$gte = new Date(createdAt.start);\n\t\t\t}\n\t\t\tif (createdAt.end) {\n\t\t\t\tquery.ts.$lte = new Date(createdAt.end);\n\t\t\t}\n\t\t}\n\t\tif (closedAt) {\n\t\t\tquery.closedAt = {};\n\t\t\tif (closedAt.start) {\n\t\t\t\tquery.closedAt.$gte = new Date(closedAt.start);\n\t\t\t}\n\t\t\tif (closedAt.end) {\n\t\t\t\tquery.closedAt.$lte = new Date(closedAt.end);\n\t\t\t}\n\t\t}\n\t\tif (tags) {\n\t\t\tquery.tags = { $in: tags };\n\t\t}\n\t\tif (customFields && Object.keys(customFields).length) {\n\t\t\tquery.$and = Object.keys(customFields).map((key) => ({\n\t\t\t\t[`livechatData.${key}`]: new RegExp(customFields[key], 'i'),\n\t\t\t}));\n\t\t}\n\n\t\tif (roomIds) {\n\t\t\tquery._id = { $in: roomIds };\n\t\t}\n\n\t\tif (onhold) {\n\t\t\tquery.onHold = {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: onhold,\n\t\t\t};\n\t\t}\n\n\t\tif (queued) {\n\t\t\tquery.servedBy = { $exists: false };\n\t\t\tquery.open = true;\n\t\t\tquery.onHold = { $ne: true };\n\t\t}\n\n\t\treturn this.findPaginated(query, {\n\t\t\tsort: options.sort || { name: 1 },\n\t\t\tskip: options.offset,\n\t\t\tlimit: options.count,\n\t\t});\n\t}\n\n\tgetOnHoldConversationsBetweenDate(from: Date, to: Date, departmentId?: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tonHold: {\n\t\t\t\t$exists: true,\n\t\t\t\t$eq: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$gte: new Date(from), // ISO Date, ts >= date.gte\n\t\t\t\t$lt: new Date(to), // ISODate, ts < date.lt\n\t\t\t},\n\t\t};\n\n\t\tif (departmentId && departmentId !== 'undefined') {\n\t\t\tquery.departmentId = departmentId;\n\t\t}\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindAllServiceTimeByAgent({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tchats: 1,\n\t\t\t\tserviceTimeDuration: { $ceil: '$serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tfindAllAverageServiceTimeByAgents({\n\t\tstart,\n\t\tend,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: { [key: string]: number }; offset?: number; count?: number };\n\t}) {\n\t\tconst match: Document = {\n\t\t\t$match: {\n\t\t\t\t't': 'l',\n\t\t\t\t'servedBy._id': { $exists: true },\n\t\t\t\t'metrics.serviceTimeDuration': { $exists: true },\n\t\t\t\t'ts': {\n\t\t\t\t\t$gte: start,\n\t\t\t\t\t$lte: end,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$servedBy._id', username: '$servedBy.username' },\n\t\t\t\tchats: { $sum: 1 },\n\t\t\t\tserviceTimeDuration: { $sum: '$metrics.serviceTimeDuration' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: '$_id._id',\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tname: '$_id.name',\n\t\t\t\tactive: '$_id.active',\n\t\t\t\taverageServiceTimeInSeconds: {\n\t\t\t\t\t$ceil: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$chats', 0] }, 0, { $divide: ['$serviceTimeDuration', '$chats'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params: Document[] = [match, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { readPreference: readSecondaryPreferred() });\n\t}\n\n\tsetDepartmentByRoomId(roomId: string, departmentId: string) {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { departmentId } });\n\t}\n\n\tfindOpen(extraQuery = {}) {\n\t\treturn this.find({ t: 'l', open: true, ...extraQuery });\n\t}\n\n\tsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferOngoing: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunsetAutoTransferOngoingById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$unset: {\n\t\t\t\tautoTransferOngoing: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAutoTransferredAtById(roomId: string) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tautoTransferredAt: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindAvailableSources() {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttypes: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tthen: '$$REMOVE',\n\t\t\t\t\t\t\t\telse: { type: '$source.type' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tapps: {\n\t\t\t\t\t\t$addToSet: {\n\t\t\t\t\t\t\t$cond: {\n\t\t\t\t\t\t\t\tif: {\n\t\t\t\t\t\t\t\t\t$eq: ['$source.type', 'app'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\telse: '$$REMOVE',\n\t\t\t\t\t\t\t\tthen: {\n\t\t\t\t\t\t\t\t\ttype: '$source.type',\n\t\t\t\t\t\t\t\t\tid: '$source.id',\n\t\t\t\t\t\t\t\t\talias: '$source.alias',\n\t\t\t\t\t\t\t\t\tsidebarIcon: '$source.sidebarIcon',\n\t\t\t\t\t\t\t\t\tdefaultIcon: '$source.defaultIcon',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tfullTypes: { $setUnion: ['$types', '$apps'] },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\t// These 3 methods shouldn't be here :( but current EE model has a meteor dependency\n\t// And refactoring it could take time\n\tsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptRequested: true },\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetTranscriptRequestedPdfById(rid: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { pdfTranscriptRequested: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetPdfTranscriptFileIdById(rid: string, fileId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: rid,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { pdfTranscriptFileId: fileId },\n\t\t\t},\n\t\t);\n\t}\n\n\tsetEmailTranscriptRequestedByRoomId(roomId: string, transcriptInfo: NonNullable<IOmnichannelRoom['transcriptRequest']>) {\n\t\tconst { requestedAt, requestedBy, email, subject } = transcriptInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttranscriptRequest: {\n\t\t\t\t\t\trequestedAt,\n\t\t\t\t\t\trequestedBy,\n\t\t\t\t\t\temail,\n\t\t\t\t\t\tsubject,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetEmailTranscriptRequestedByRoomId(roomId: string) {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\ttranscriptRequest: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseRoomById(roomId: string, closeInfo: IOmnichannelRoomClosingInfo, options?: UpdateOptions) {\n\t\tconst { closer, closedBy, closedAt, chatDuration, serviceTimeDuration, tags } = closeInfo;\n\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tt: 'l',\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tclosedAt,\n\t\t\t\t\t'metrics.chatDuration': chatDuration,\n\t\t\t\t\t'metrics.serviceTimeDuration': serviceTimeDuration,\n\t\t\t\t\t'v.status': UserStatus.OFFLINE,\n\t\t\t\t\t...(closer && { closer }),\n\t\t\t\t\t...(closedBy && { closedBy }),\n\t\t\t\t\t...(tags && { tags }),\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\topen: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tbulkRemoveDepartmentAndUnitsFromRooms(departmentId: string) {\n\t\treturn this.updateMany({ departmentId }, { $unset: { departmentId: 1, departmentAncestors: 1 } });\n\t}\n\n\tfindOneByIdOrName(_idOrName: string, options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateSurveyFeedbackById(_id: string, surveyFeedback: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tsurveyFeedback,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateDataByToken(token: string, key: string, value: any, overwrite = true) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst room = await this.findOne(query, { projection: { livechatData: 1 } });\n\t\t\tif (!room) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (room.livechatData && typeof room.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync saveRoomById({\n\t\t_id,\n\t\ttopic,\n\t\ttags,\n\t\tlivechatData,\n\t\t...extra\n\t}: {\n\t\t_id: string;\n\t\ttopic?: string;\n\t\ttags?: string[];\n\t\tlivechatData?: Record<string, any>;\n\t} & Record<string, any>) {\n\t\tconst setData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$set']> = { ...extra };\n\t\tconst unsetData: DeepWritable<UpdateFilter<IOmnichannelRoom>['$unset']> = {};\n\n\t\tif (topic != null) {\n\t\t\tconst trimmedTopic = topic.trim();\n\t\t\tif (trimmedTopic.length) {\n\t\t\t\tsetData.topic = trimmedTopic;\n\t\t\t} else {\n\t\t\t\tunsetData.topic = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(tags) && tags.length > 0) {\n\t\t\tsetData.tags = tags;\n\t\t} else {\n\t\t\tunsetData.tags = 1;\n\t\t}\n\n\t\tif (extra.priorityId === '') {\n\t\t\tunsetData.priorityId = 1;\n\t\t\tdelete setData.priorityId;\n\t\t}\n\t\tif (extra.slaId === '') {\n\t\t\tunsetData.slaId = 1;\n\t\t\tdelete setData.slaId;\n\t\t}\n\n\t\tif (livechatData) {\n\t\t\tObject.keys(livechatData).forEach((key) => {\n\t\t\t\tconst value = livechatData[key].trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {};\n\n\t\tif (Object.keys(setData).length > 0) {\n\t\t\tupdate.$set = setData;\n\t\t}\n\n\t\tif (Object.keys(unsetData).length > 0) {\n\t\t\tupdate.$unset = unsetData;\n\t\t}\n\n\t\tif (Object.keys(update).length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tfindById(_id: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByIds(ids: string[], fields: FindOptions<IOmnichannelRoom>['projection'], extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t_id: { $in: ids },\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneByIdAndVisitorToken(_id: string, visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t_id,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorTokenAndEmailThreadAndDepartment(\n\t\tvisitorToken: string,\n\t\temailThread: string[],\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom>,\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [\n\t\t\t\t{ 'email.thread': { $elemMatch: { $in: emailThread } } },\n\t\t\t\t{ 'email.thread': new RegExp(emailThread.map((t) => `\"${t}\"`).join('|')) },\n\t\t\t],\n\t\t\t...(departmentId && { departmentId }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndEmailThread(visitorToken: string, emailThread: string[], options: FindOptions<IOmnichannelRoom>) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t'$or': [{ 'email.thread': { $elemMatch: { $in: emailThread } } }, { 'email.thread': new RegExp(emailThread.join('|')) }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tupdateEmailThreadByRoomId(roomId: string, threadIds: string[]) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\t'email.thread': threadIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id: roomId }, query);\n\t}\n\n\tfindOneLastServedAndClosedByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t'closedAt': { $exists: true },\n\t\t\t'servedBy': { $exists: true },\n\t\t};\n\n\t\toptions.sort = { closedAt: -1 };\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByVisitorToken(visitorToken: string, fields: FindOptions<IOmnichannelRoom>['projection']) {\n\t\tconst options: FindOptions<IOmnichannelRoom> = {};\n\n\t\tif (fields) {\n\t\t\toptions.projection = fields;\n\t\t}\n\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync updateRoomCount() {\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_Room_Count', 1, { returnDocument: 'after' });\n\t\treturn livechatCount.value;\n\t}\n\n\tfindOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByVisitorToken(visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneOpenByVisitorTokenAndDepartmentIdAndSource(\n\t\tvisitorToken: string,\n\t\tdepartmentId?: string,\n\t\tsource?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...(source && { 'source.type': source }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOpenByVisitorTokenAndDepartmentId(\n\t\tvisitorToken: string,\n\t\tdepartmentId: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t\tdepartmentId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByVisitorToken(visitorToken: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': visitorToken,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindByVisitorIdAndAgentId(\n\t\tvisitorId?: string,\n\t\tagentId?: string,\n\t\toptions: FindOptions<IOmnichannelRoom> = {},\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\t...(visitorId && { 'v._id': visitorId }),\n\t\t\t...(agentId && { 'servedBy._id': agentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneOpenByRoomIdAndVisitorToken(roomId: string, visitorToken: string, options: FindOptions<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'_id': roomId,\n\t\t\t'open': true,\n\t\t\t'v.token': visitorToken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindClosedRooms(departmentIds?: string[], options: FindOptions<IOmnichannelRoom> = {}, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt: 'l',\n\t\t\topen: { $exists: false },\n\t\t\tclosedAt: { $exists: true },\n\t\t\t...(Array.isArray(departmentIds) && departmentIds.length > 0 && { departmentId: { $in: departmentIds } }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tgetResponseByRoomIdUpdateQuery(responseBy: IOmnichannelRoom['responseBy'], updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('responseBy', responseBy);\n\t\tupdater.unset('waitingResponse');\n\t\treturn updater;\n\t}\n\n\tgetNotResponseByRoomIdUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\tupdater.set('waitingResponse', true);\n\t\tupdater.unset('responseBy');\n\t\treturn updater;\n\t}\n\n\tgetAgentLastMessageTsUpdateQuery(updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('responseBy.lastMessageTs', new Date());\n\t}\n\n\tprivate getAnalyticsUpdateQuery(\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\tif (analyticsData) {\n\t\t\tupdater.set('metrics.response.avg', analyticsData.avgResponseTime);\n\t\t\tupdater.inc('metrics.response.total', 1);\n\t\t\tupdater.inc('metrics.response.tt', analyticsData.responseTime as number);\n\t\t\tupdater.inc('metrics.reaction.tt', analyticsData.reactionTime as number);\n\t\t}\n\n\t\tif (analyticsData?.firstResponseTime) {\n\t\t\tupdater.set('metrics.reaction.fd', analyticsData.firstReactionDate);\n\t\t\tupdater.set('metrics.reaction.ft', analyticsData.firstReactionTime);\n\t\t\tupdater.set('metrics.response.fd', analyticsData.firstResponseDate);\n\t\t\tupdater.set('metrics.response.ft', analyticsData.firstResponseTime);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByAgent(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tanalyticsData: Record<string, string | number | Date> | undefined,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\tif (visitorLastQuery > agentLastReply) {\n\t\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater).set('metrics.servedBy.lr', message.ts);\n\t\t}\n\n\t\treturn this.getAnalyticsUpdateQuery(analyticsData, updater);\n\t}\n\n\tgetAnalyticsUpdateQueryBySentByVisitor(\n\t\troom: IOmnichannelRoom,\n\t\tmessage: IMessage,\n\t\tupdater: Updater<IOmnichannelRoom> = this.getUpdater(),\n\t) {\n\t\t// livechat analytics : update last message timestamps\n\t\tconst visitorLastQuery = room.metrics?.v ? room.metrics.v.lq : room.ts;\n\t\tconst agentLastReply = room.metrics?.servedBy ? room.metrics.servedBy.lr : room.ts;\n\n\t\t// update visitor timestamp, only if its new inquiry and not continuing message\n\t\tif (agentLastReply >= visitorLastQuery) {\n\t\t\treturn updater.set('metrics.v.lq', message.ts);\n\t\t}\n\n\t\treturn updater;\n\t}\n\n\tgetTotalConversationsBetweenDate(t: 'l', date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tgetAnalyticsMetricsBetweenDate(\n\t\tt: 'l',\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\tt,\n\t\t\tts: {\n\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: { ts: 1, departmentId: 1, open: 1, servedBy: 1, metrics: 1, msgs: 1 },\n\t\t});\n\t}\n\n\tgetAnalyticsMetricsBetweenDateWithMessages(\n\t\tt: string,\n\t\tdate: { gte: Date; lte: Date },\n\t\t{ departmentId }: { departmentId?: string } = {},\n\t\textraQuery: Document = {},\n\t\textraMatchers: Document = {},\n\t) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, '_id' | 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t\t...extraMatchers,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t...(extraQuery ? [extraQuery] : []),\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tgetAnalyticsBetweenDate(date: { gte: Date; lte: Date }, { departmentId }: { departmentId?: string } = {}) {\n\t\treturn this.col.aggregate<Pick<IOmnichannelRoom, 'ts' | 'departmentId' | 'open' | 'servedBy' | 'metrics' | 'msgs' | 'onHold'>>(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tt: 'l',\n\t\t\t\t\t\tts: {\n\t\t\t\t\t\t\t$gte: new Date(date.gte), // ISO Date, ts >= date.gte\n\t\t\t\t\t\t\t$lte: new Date(date.lte), // ISODate, ts <= date.lte\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{ $addFields: { roomId: '$_id' } },\n\t\t\t\t{\n\t\t\t\t\t$lookup: {\n\t\t\t\t\t\tfrom: 'rocketchat_message',\n\t\t\t\t\t\t// mongo doesn't like _id as variable name here :(\n\t\t\t\t\t\tlet: { roomId: '$roomId' },\n\t\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$eq: ['$$roomId', '$rid'],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// this is similar to do { $exists: false }\n\t\t\t\t\t\t\t\t\t\t\t\t$lte: ['$t', null],\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tas: 'messages',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: {\n\t\t\t\t\t\tpath: '$messages',\n\t\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tdepartmentId: '$departmentId',\n\t\t\t\t\t\t\topen: '$open',\n\t\t\t\t\t\t\tservedBy: '$servedBy',\n\t\t\t\t\t\t\tmetrics: '$metrics',\n\t\t\t\t\t\t\tonHold: '$onHold',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessagesCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\t\tts: '$_id.ts',\n\t\t\t\t\t\tdepartmentId: '$_id.departmentId',\n\t\t\t\t\t\topen: '$_id.open',\n\t\t\t\t\t\tservedBy: '$_id.servedBy',\n\t\t\t\t\t\tmetrics: '$_id.metrics',\n\t\t\t\t\t\tmsgs: '$messagesCount',\n\t\t\t\t\t\tonHold: '$_id.onHold',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t);\n\t}\n\n\tcountOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tfindOpenByAgent(userId: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'open': true,\n\t\t\t'servedBy._id': userId,\n\t\t\t...extraQuery,\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tchangeAgentByRoomId(roomId: string, newAgent: { agentId: string; username: string; ts?: Date }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tservedBy: {\n\t\t\t\t\t_id: newAgent.agentId,\n\t\t\t\t\tusername: newAgent.username,\n\t\t\t\t\tts: newAgent.ts ?? new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeDepartmentIdByRoomId(roomId: string, departmentId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tdepartmentId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveCRMDataByRoomId(roomId: string, crmData: unknown) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tcrmData,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateVisitorStatus(token: string, status: UserStatus) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t'v.token': token,\n\t\t\t'open': true,\n\t\t\t't': 'l',\n\t\t};\n\n\t\tconst update: UpdateFilter<IOmnichannelRoom> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tremoveAgentByRoomId(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: { queuedAt: new Date() },\n\t\t\t$unset: { servedBy: 1 },\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveByVisitorToken(token: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t't': 'l',\n\t\t\t'v.token': token,\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tremoveById(_id: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id,\n\t\t\tt: 'l',\n\t\t};\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tgetVisitorLastMessageTsUpdateQueryByRoomId(lastMessageTs: Date, updater: Updater<IOmnichannelRoom> = this.getUpdater()) {\n\t\treturn updater.set('v.lastMessageTs', lastMessageTs);\n\t}\n\n\tsetVisitorInactivityInSecondsById(roomId: string, visitorInactivity: number) {\n\t\tconst query = {\n\t\t\t_id: roomId,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'metrics.visitorInactivity': visitorInactivity,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tchangeVisitorByRoomId(roomId: string, { _id, username, token }: { _id: string; username: string; token: string }) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'v._id': _id,\n\t\t\t\t'v.username': username,\n\t\t\t\t'v.token': token,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveOneById(roomId: string) {\n\t\tconst query: Filter<IOmnichannelRoom> = {\n\t\t\t_id: roomId,\n\t\t\tt: 'l',\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\topen: true,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tservedBy: 1,\n\t\t\t\tclosedAt: 1,\n\t\t\t\tclosedBy: 1,\n\t\t\t\tcloser: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetVisitorActiveForPeriodUpdateQuery(period: string, updater: Updater<IOmnichannelRoom> = this.getUpdater()): Updater<IOmnichannelRoom> {\n\t\treturn updater.addToSet('v.activity', period);\n\t}\n\n\tmarkVisitorActiveForPeriod(rid: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: rid,\n\t\t};\n\t\tconst updater = this.getVisitorActiveForPeriodUpdateQuery(period);\n\n\t\treturn this.updateOne(query, updater.getUpdateFilter());\n\t}\n\n\tasync getMACStatisticsForPeriod(period: string): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': period,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getMACStatisticsBetweenDates(start: Date, end: Date): Promise<MACStats[]> {\n\t\treturn this.col\n\t\t\t.aggregate<MACStats>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t't': 'l',\n\t\t\t\t\t\t'v.activity': { $exists: true },\n\t\t\t\t\t\t'ts': {\n\t\t\t\t\t\t\t$gte: start,\n\t\t\t\t\t\t\t$lt: end,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t$ifNull: ['$source.alias', '$source.type'],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t$addToSet: '$v._id',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconversationsCount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\tsources: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\tsource: '$_id.source',\n\t\t\t\t\t\t\t\tcontactsCount: {\n\t\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tconversationsCount: '$conversationsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalContactsCount: {\n\t\t\t\t\t\t\t$sum: {\n\t\t\t\t\t\t\t\t$size: '$contactsCount',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttotalConversationsCount: {\n\t\t\t\t\t\t\t$sum: '$conversationsCount',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcontactsCount: '$totalContactsCount',\n\t\t\t\t\t\tconversationsCount: '$totalConversationsCount',\n\t\t\t\t\t\tsources: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tcountLivechatRoomsWithDepartment(): Promise<number> {\n\t\treturn this.col.countDocuments({ departmentId: { $exists: true } });\n\t}\n\n\tasync unsetAllPredictedVisitorAbandonment(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tunsetOnHoldAndPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetSlaForRoomById(\n\t\t_roomId: string,\n\t\t_sla: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>,\n\t): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tremoveSlaFromRoomById(_roomId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tbulkRemoveSlaFromRoomsById(_slaId: string): Promise<UpdateResult | Document> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenBySlaId(_slaId: string, _options: FindOptions<IOmnichannelRoom>): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync setPriorityByRoomId(_roomId: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPriorityByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindOpenRoomsByPriorityId(_priorityId: string): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetPredictedVisitorAbandonmentByRoomIdUpdateQuery(\n\t\t_willBeAbandonedAt: Date,\n\t\t_updater: Updater<IOmnichannelRoom>,\n\t): Updater<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tsetPredictedVisitorAbandonmentByRoomId(_rid: string, _willBeAbandonedAt: Date): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tfindAbandonedOpenRooms(_date: Date): FindCursor<IOmnichannelRoom> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync unsetPredictedVisitorAbandonmentByRoomId(_roomId: string): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync associateRoomsWithDepartmentToUnit(_departments: string[], _unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync removeUnitAssociationFromRooms(_unitId: string): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync updateDepartmentAncestorsById(_rid: string, _departmentAncestors?: string[]): Promise<UpdateResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountPrioritizedRooms(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithSla(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithPdfTranscriptRequested(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tcountRoomsWithTranscriptSent(): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsBySource(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByStatus(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByDepartment(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByTags(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsByAgents(\n\t\t_start: Date,\n\t\t_end: Date,\n\t\t_sort: Record<string, 1 | -1>,\n\t\t_extraQuery: Filter<IOmnichannelRoom>,\n\t): AggregationCursor<ReportResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetConversationsWithoutTagsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutAgentsBetweenDate(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tgetTotalConversationsWithoutDepartmentBetweenDates(_start: Date, _end: Date, _extraQuery: Filter<IOmnichannelRoom>): Promise<number> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"f2f0aa716b58dbbbc4d5c7067df43ec6fb3cefd3"}
