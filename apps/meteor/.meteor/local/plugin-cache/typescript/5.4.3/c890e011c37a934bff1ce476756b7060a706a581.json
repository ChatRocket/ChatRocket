{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/lib/emailInbox.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/lib/emailInbox.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/lib/emailInbox.ts","inputSourceMap":{"version":3,"file":"app/api/server/lib/emailInbox.ts","sourceRoot":"","sources":["app/api/server/lib/emailInbox.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAGxD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AAEnF,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,EACtC,KAAK,GAAG,EAAE,EACV,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAQnC,EAKE,EAAE;IACJ,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE;QAC9D,IAAI,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE;QACzB,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,KAAK;KACZ,CAAC,CAAC;IAEH,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;IAEhF,OAAO;QACN,YAAY;QACZ,KAAK,EAAE,YAAY,CAAC,MAAM;QAC1B,MAAM;QACN,KAAK;KACL,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EACvC,MAAc,EACd,gBAAgI,EACxF,EAAE;IAC1C,MAAM,GAAG,GAAG;QACX,GAAG,gBAAgB;QACnB,UAAU,EAAE,IAAI,IAAI,EAAE;QACtB,UAAU,EAAE,IAAI,IAAI,EAAE;QACtB,UAAU,EAAE,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;KAC5E,CAAC;IAEF,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAE9C,IAAI,QAAQ,CAAC,UAAU,EAAE,CAAC;QACzB,KAAK,yBAAyB,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,UAAU,EAAE,GAAG,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;IAClF,CAAC;IAED,OAAO,QAAQ,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACpC,gBAAwI,EAC7F,EAAE;IAC7C,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,gBAAgB,CAAC;IAEvG,MAAM,gBAAgB,GAAG;QACxB,IAAI,EAAE;YACL,MAAM;YACN,IAAI;YACJ,KAAK;YACL,WAAW;YACX,UAAU;YACV,IAAI;YACJ,IAAI;YACJ,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,GAAG,CAAC,UAAU,KAAK,KAAK,IAAI,EAAE,UAAU,EAAE,CAAC;SAC3C;QACD,GAAG,CAAC,UAAU,KAAK,KAAK,IAAI,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,CAAU,EAAE,EAAE,CAAC;KACnE,CAAC;IAEF,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;IAE3E,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,yBAAyB,CAC7B;QACC,GAAG,eAAe,CAAC,KAAK;QACxB,GAAG,CAAC,UAAU,KAAK,KAAK,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;KACtD,EACD,SAAS,CACT,CAAC;IAEF,OAAO,eAAe,CAAC,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,YAAgC,EAAyB,EAAE;IACjG,MAAM,cAAc,GAAG,MAAM,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IAEjE,IAAI,cAAc,CAAC,YAAY,EAAE,CAAC;QACjC,KAAK,yBAAyB,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC;IAED,OAAO,cAAc,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, Users } from '@rocket.chat/models';\nimport type { DeleteResult, Filter, InsertOneResult, Sort } from 'mongodb';\n\nimport { notifyOnEmailInboxChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const findEmailInboxes = async ({\n\tquery = {},\n\tpagination: { offset, count, sort },\n}: {\n\tquery?: Filter<IEmailInbox>;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort?: Sort;\n\t};\n}): Promise<{\n\temailInboxes: IEmailInbox[];\n\ttotal: number;\n\tcount: number;\n\toffset: number;\n}> => {\n\tconst { cursor, totalCount } = EmailInbox.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [emailInboxes, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\temailInboxes,\n\t\tcount: emailInboxes.length,\n\t\toffset,\n\t\ttotal,\n\t};\n};\n\nexport const insertOneEmailInbox = async (\n\tuserId: string,\n\temailInboxParams: Pick<IEmailInbox, 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<InsertOneResult<IEmailInbox>> => {\n\tconst obj = {\n\t\t...emailInboxParams,\n\t\t_createdAt: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t_createdBy: await Users.findOneById(userId, { projection: { username: 1 } }),\n\t};\n\n\tconst response = await EmailInbox.create(obj);\n\n\tif (response.insertedId) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: response.insertedId, ...obj }, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const updateEmailInbox = async (\n\temailInboxParams: Pick<IEmailInbox, '_id' | 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<Pick<IEmailInbox, '_id'> | null> => {\n\tconst { _id, active, name, email, description, senderInfo, department, smtp, imap } = emailInboxParams;\n\n\tconst updateEmailInbox = {\n\t\t$set: {\n\t\t\tactive,\n\t\t\tname,\n\t\t\temail,\n\t\t\tdescription,\n\t\t\tsenderInfo,\n\t\t\tsmtp,\n\t\t\timap,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...(department !== 'All' && { department }),\n\t\t},\n\t\t...(department === 'All' && { $unset: { department: 1 as const } }),\n\t};\n\n\tconst updatedResponse = await EmailInbox.updateById(_id, updateEmailInbox);\n\n\tif (!updatedResponse.value) {\n\t\tthrow new Error('error-invalid-email-inbox');\n\t}\n\n\tvoid notifyOnEmailInboxChanged(\n\t\t{\n\t\t\t...updatedResponse.value,\n\t\t\t...(department === 'All' && { department: undefined }),\n\t\t},\n\t\t'updated',\n\t);\n\n\treturn updatedResponse.value;\n};\n\nexport const removeEmailInbox = async (emailInboxId: IEmailInbox['_id']): Promise<DeleteResult> => {\n\tconst removeResponse = await EmailInbox.removeById(emailInboxId);\n\n\tif (removeResponse.deletedCount) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: emailInboxId }, 'removed');\n\t}\n\n\treturn removeResponse;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/lib/emailInbox.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/lib/emailInbox.ts","inputSourceMap":{"version":3,"file":"app/api/server/lib/emailInbox.ts","sourceRoot":"","sources":["app/api/server/lib/emailInbox.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, Users } from '@rocket.chat/models';\nimport type { DeleteResult, Filter, InsertOneResult, Sort } from 'mongodb';\n\nimport { notifyOnEmailInboxChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const findEmailInboxes = async ({\n\tquery = {},\n\tpagination: { offset, count, sort },\n}: {\n\tquery?: Filter<IEmailInbox>;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort?: Sort;\n\t};\n}): Promise<{\n\temailInboxes: IEmailInbox[];\n\ttotal: number;\n\tcount: number;\n\toffset: number;\n}> => {\n\tconst { cursor, totalCount } = EmailInbox.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [emailInboxes, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\temailInboxes,\n\t\tcount: emailInboxes.length,\n\t\toffset,\n\t\ttotal,\n\t};\n};\n\nexport const insertOneEmailInbox = async (\n\tuserId: string,\n\temailInboxParams: Pick<IEmailInbox, 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<InsertOneResult<IEmailInbox>> => {\n\tconst obj = {\n\t\t...emailInboxParams,\n\t\t_createdAt: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t_createdBy: await Users.findOneById(userId, { projection: { username: 1 } }),\n\t};\n\n\tconst response = await EmailInbox.create(obj);\n\n\tif (response.insertedId) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: response.insertedId, ...obj }, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const updateEmailInbox = async (\n\temailInboxParams: Pick<IEmailInbox, '_id' | 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<Pick<IEmailInbox, '_id'> | null> => {\n\tconst { _id, active, name, email, description, senderInfo, department, smtp, imap } = emailInboxParams;\n\n\tconst updateEmailInbox = {\n\t\t$set: {\n\t\t\tactive,\n\t\t\tname,\n\t\t\temail,\n\t\t\tdescription,\n\t\t\tsenderInfo,\n\t\t\tsmtp,\n\t\t\timap,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...(department !== 'All' && { department }),\n\t\t},\n\t\t...(department === 'All' && { $unset: { department: 1 as const } }),\n\t};\n\n\tconst updatedResponse = await EmailInbox.updateById(_id, updateEmailInbox);\n\n\tif (!updatedResponse.value) {\n\t\tthrow new Error('error-invalid-email-inbox');\n\t}\n\n\tvoid notifyOnEmailInboxChanged(\n\t\t{\n\t\t\t...updatedResponse.value,\n\t\t\t...(department === 'All' && { department: undefined }),\n\t\t},\n\t\t'updated',\n\t);\n\n\treturn updatedResponse.value;\n};\n\nexport const removeEmailInbox = async (emailInboxId: IEmailInbox['_id']): Promise<DeleteResult> => {\n\tconst removeResponse = await EmailInbox.removeById(emailInboxId);\n\n\tif (removeResponse.deletedCount) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: emailInboxId }, 'removed');\n\t}\n\n\treturn removeResponse;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      findEmailInboxes: () => findEmailInboxes,\n      insertOneEmailInbox: () => insertOneEmailInbox,\n      updateEmailInbox: () => updateEmailInbox,\n      removeEmailInbox: () => removeEmailInbox\n    });\n    let EmailInbox, Users;\n    module.link(\"@rocket.chat/models\", {\n      EmailInbox(v) {\n        EmailInbox = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let notifyOnEmailInboxChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnEmailInboxChanged(v) {\n        notifyOnEmailInboxChanged = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const findEmailInboxes = async _ref => {\n      let {\n        query = {},\n        pagination: {\n          offset,\n          count,\n          sort\n        }\n      } = _ref;\n      const {\n        cursor,\n        totalCount\n      } = EmailInbox.findPaginated(query, {\n        sort: sort || {\n          name: 1\n        },\n        skip: offset,\n        limit: count\n      });\n      const [emailInboxes, total] = await Promise.all([cursor.toArray(), totalCount]);\n      return {\n        emailInboxes,\n        count: emailInboxes.length,\n        offset,\n        total\n      };\n    };\n    const insertOneEmailInbox = async (userId, emailInboxParams) => {\n      const obj = _objectSpread(_objectSpread({}, emailInboxParams), {}, {\n        _createdAt: new Date(),\n        _updatedAt: new Date(),\n        _createdBy: await Users.findOneById(userId, {\n          projection: {\n            username: 1\n          }\n        })\n      });\n      const response = await EmailInbox.create(obj);\n      if (response.insertedId) {\n        void notifyOnEmailInboxChanged(_objectSpread({\n          _id: response.insertedId\n        }, obj), 'inserted');\n      }\n      return response;\n    };\n    const updateEmailInbox = async emailInboxParams => {\n      const {\n        _id,\n        active,\n        name,\n        email,\n        description,\n        senderInfo,\n        department,\n        smtp,\n        imap\n      } = emailInboxParams;\n      const updateEmailInbox = _objectSpread({\n        $set: _objectSpread({\n          active,\n          name,\n          email,\n          description,\n          senderInfo,\n          smtp,\n          imap,\n          _updatedAt: new Date()\n        }, department !== 'All' && {\n          department\n        })\n      }, department === 'All' && {\n        $unset: {\n          department: 1\n        }\n      });\n      const updatedResponse = await EmailInbox.updateById(_id, updateEmailInbox);\n      if (!updatedResponse.value) {\n        throw new Error('error-invalid-email-inbox');\n      }\n      void notifyOnEmailInboxChanged(_objectSpread(_objectSpread({}, updatedResponse.value), department === 'All' && {\n        department: undefined\n      }), 'updated');\n      return updatedResponse.value;\n    };\n    const removeEmailInbox = async emailInboxId => {\n      const removeResponse = await EmailInbox.removeById(emailInboxId);\n      if (removeResponse.deletedCount) {\n        void notifyOnEmailInboxChanged({\n          _id: emailInboxId\n        }, 'removed');\n      }\n      return removeResponse;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","findEmailInboxes","insertOneEmailInbox","updateEmailInbox","removeEmailInbox","EmailInbox","Users","notifyOnEmailInboxChanged","__reifyWaitForDeps__","_ref","query","pagination","offset","count","sort","cursor","totalCount","findPaginated","name","skip","limit","emailInboxes","total","Promise","all","toArray","length","userId","emailInboxParams","obj","_createdAt","Date","_updatedAt","_createdBy","findOneById","projection","username","response","create","insertedId","_id","active","email","description","senderInfo","department","smtp","imap","$set","$unset","updatedResponse","updateById","value","Error","undefined","emailInboxId","removeResponse","removeById","deletedCount","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/lib/emailInbox.ts"],"sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, Users } from '@rocket.chat/models';\nimport type { DeleteResult, Filter, InsertOneResult, Sort } from 'mongodb';\n\nimport { notifyOnEmailInboxChanged } from '../../../lib/server/lib/notifyListener';\n\nexport const findEmailInboxes = async ({\n\tquery = {},\n\tpagination: { offset, count, sort },\n}: {\n\tquery?: Filter<IEmailInbox>;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort?: Sort;\n\t};\n}): Promise<{\n\temailInboxes: IEmailInbox[];\n\ttotal: number;\n\tcount: number;\n\toffset: number;\n}> => {\n\tconst { cursor, totalCount } = EmailInbox.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [emailInboxes, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\temailInboxes,\n\t\tcount: emailInboxes.length,\n\t\toffset,\n\t\ttotal,\n\t};\n};\n\nexport const insertOneEmailInbox = async (\n\tuserId: string,\n\temailInboxParams: Pick<IEmailInbox, 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<InsertOneResult<IEmailInbox>> => {\n\tconst obj = {\n\t\t...emailInboxParams,\n\t\t_createdAt: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t_createdBy: await Users.findOneById(userId, { projection: { username: 1 } }),\n\t};\n\n\tconst response = await EmailInbox.create(obj);\n\n\tif (response.insertedId) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: response.insertedId, ...obj }, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const updateEmailInbox = async (\n\temailInboxParams: Pick<IEmailInbox, '_id' | 'active' | 'name' | 'email' | 'description' | 'senderInfo' | 'department' | 'smtp' | 'imap'>,\n): Promise<Pick<IEmailInbox, '_id'> | null> => {\n\tconst { _id, active, name, email, description, senderInfo, department, smtp, imap } = emailInboxParams;\n\n\tconst updateEmailInbox = {\n\t\t$set: {\n\t\t\tactive,\n\t\t\tname,\n\t\t\temail,\n\t\t\tdescription,\n\t\t\tsenderInfo,\n\t\t\tsmtp,\n\t\t\timap,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...(department !== 'All' && { department }),\n\t\t},\n\t\t...(department === 'All' && { $unset: { department: 1 as const } }),\n\t};\n\n\tconst updatedResponse = await EmailInbox.updateById(_id, updateEmailInbox);\n\n\tif (!updatedResponse.value) {\n\t\tthrow new Error('error-invalid-email-inbox');\n\t}\n\n\tvoid notifyOnEmailInboxChanged(\n\t\t{\n\t\t\t...updatedResponse.value,\n\t\t\t...(department === 'All' && { department: undefined }),\n\t\t},\n\t\t'updated',\n\t);\n\n\treturn updatedResponse.value;\n};\n\nexport const removeEmailInbox = async (emailInboxId: IEmailInbox['_id']): Promise<DeleteResult> => {\n\tconst removeResponse = await EmailInbox.removeById(emailInboxId);\n\n\tif (removeResponse.deletedCount) {\n\t\tvoid notifyOnEmailInboxChanged({ _id: emailInboxId }, 'removed');\n\t}\n\n\treturn removeResponse;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c890e011c37a934bff1ce476756b7060a706a581"}
