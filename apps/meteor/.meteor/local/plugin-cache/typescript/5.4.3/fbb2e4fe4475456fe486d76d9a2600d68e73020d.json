{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/NpsVote.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/NpsVote.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/NpsVote.ts","inputSourceMap":{"version":3,"file":"server/models/raw/NpsVote.ts","sourceRoot":"","sources":["server/models/raw/NpsVote.ts"],"names":[],"mappings":"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","sourcesContent":["import type { INpsVote, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { INpsVoteStatus } from '@rocket.chat/core-typings';\nimport type { INpsVoteModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, Document, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsVoteRaw extends BaseRaw<INpsVote> implements INpsVoteModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INpsVote>>) {\n\t\tsuper(db, 'nps_vote', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { npsId: 1, status: 1, sentAt: 1 } }, { key: { npsId: 1, identifier: 1 }, unique: true }];\n\t}\n\n\tfindNotSentByNpsId(npsId: string, options?: Omit<FindOptions<INpsVote>, 'sort' | 'limit'>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\n\t\treturn cursor.sort({ ts: 1 }).limit(1000);\n\t}\n\n\tfindByNpsIdAndStatus(npsId: string, status: INpsVoteStatus, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tfindByNpsId(npsId: string, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tsave(vote: Omit<INpsVote, '_id' | '_updatedAt'>): Promise<UpdateResult> {\n\t\tconst { npsId, identifier } = vote;\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...vote,\n\t\t\t\t_updatedAt: new Date(),\n\t\t\t},\n\t\t\t$setOnInsert: {\n\t\t\t\t_id: new ObjectId().toHexString(), // TODO this should be done by BaseRaw\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tupdateVotesToSent(voteIds: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t_id: { $in: voteIds },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.SENT,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateOldSendingToNewByNpsId(npsId: string): Promise<UpdateResult | Document> {\n\t\tconst fiveMinutes = new Date();\n\t\tfiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\tsentAt: { $lt: fiveMinutes },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tsentAt: 1 as const, // why do you do this to me TypeScript?\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByNpsId(npsId: string): Promise<number> {\n\t\treturn this.countDocuments({ npsId });\n\t}\n\n\tcountByNpsIdAndStatus(npsId: string, status: INpsVoteStatus): Promise<number> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/NpsVote.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/NpsVote.ts","inputSourceMap":{"version":3,"file":"server/models/raw/NpsVote.ts","sourceRoot":"","sources":["server/models/raw/NpsVote.ts"],"names":[],"mappings":"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","sourcesContent":["import type { INpsVote, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { INpsVoteStatus } from '@rocket.chat/core-typings';\nimport type { INpsVoteModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, Document, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsVoteRaw extends BaseRaw<INpsVote> implements INpsVoteModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INpsVote>>) {\n\t\tsuper(db, 'nps_vote', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { npsId: 1, status: 1, sentAt: 1 } }, { key: { npsId: 1, identifier: 1 }, unique: true }];\n\t}\n\n\tfindNotSentByNpsId(npsId: string, options?: Omit<FindOptions<INpsVote>, 'sort' | 'limit'>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\n\t\treturn cursor.sort({ ts: 1 }).limit(1000);\n\t}\n\n\tfindByNpsIdAndStatus(npsId: string, status: INpsVoteStatus, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tfindByNpsId(npsId: string, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tsave(vote: Omit<INpsVote, '_id' | '_updatedAt'>): Promise<UpdateResult> {\n\t\tconst { npsId, identifier } = vote;\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...vote,\n\t\t\t\t_updatedAt: new Date(),\n\t\t\t},\n\t\t\t$setOnInsert: {\n\t\t\t\t_id: new ObjectId().toHexString(), // TODO this should be done by BaseRaw\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tupdateVotesToSent(voteIds: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t_id: { $in: voteIds },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.SENT,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateOldSendingToNewByNpsId(npsId: string): Promise<UpdateResult | Document> {\n\t\tconst fiveMinutes = new Date();\n\t\tfiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\tsentAt: { $lt: fiveMinutes },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tsentAt: 1 as const, // why do you do this to me TypeScript?\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByNpsId(npsId: string): Promise<number> {\n\t\treturn this.countDocuments({ npsId });\n\t}\n\n\tcountByNpsIdAndStatus(npsId: string, status: INpsVoteStatus): Promise<number> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      NpsVoteRaw: () => NpsVoteRaw\n    });\n    let INpsVoteStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      INpsVoteStatus(v) {\n        INpsVoteStatus = v;\n      }\n    }, 0);\n    let ObjectId;\n    module.link(\"mongodb\", {\n      ObjectId(v) {\n        ObjectId = v;\n      }\n    }, 1);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class NpsVoteRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'nps_vote', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            npsId: 1,\n            status: 1,\n            sentAt: 1\n          }\n        }, {\n          key: {\n            npsId: 1,\n            identifier: 1\n          },\n          unique: true\n        }];\n      }\n      findNotSentByNpsId(npsId, options) {\n        const query = {\n          npsId,\n          status: INpsVoteStatus.NEW\n        };\n        const cursor = options ? this.find(query, options) : this.find(query);\n        return cursor.sort({\n          ts: 1\n        }).limit(1000);\n      }\n      findByNpsIdAndStatus(npsId, status, options) {\n        const query = {\n          npsId,\n          status\n        };\n        if (options) {\n          return this.find(query, options);\n        }\n        return this.find(query);\n      }\n      findByNpsId(npsId, options) {\n        const query = {\n          npsId\n        };\n        if (options) {\n          return this.find(query, options);\n        }\n        return this.find(query);\n      }\n      save(vote) {\n        const {\n          npsId,\n          identifier\n        } = vote;\n        const query = {\n          npsId,\n          identifier\n        };\n        const update = {\n          $set: _objectSpread(_objectSpread({}, vote), {}, {\n            _updatedAt: new Date()\n          }),\n          $setOnInsert: {\n            _id: new ObjectId().toHexString() // TODO this should be done by BaseRaw\n          }\n        };\n        return this.updateOne(query, update, {\n          upsert: true\n        });\n      }\n      updateVotesToSent(voteIds) {\n        const query = {\n          _id: {\n            $in: voteIds\n          }\n        };\n        const update = {\n          $set: {\n            status: INpsVoteStatus.SENT\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateOldSendingToNewByNpsId(npsId) {\n        const fiveMinutes = new Date();\n        fiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n        const query = {\n          npsId,\n          status: INpsVoteStatus.SENDING,\n          sentAt: {\n            $lt: fiveMinutes\n          }\n        };\n        const update = {\n          $set: {\n            status: INpsVoteStatus.NEW\n          },\n          $unset: {\n            sentAt: 1 // why do you do this to me TypeScript?\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      countByNpsId(npsId) {\n        return this.countDocuments({\n          npsId\n        });\n      }\n      countByNpsIdAndStatus(npsId, status) {\n        const query = {\n          npsId,\n          status\n        };\n        return this.countDocuments(query);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","NpsVoteRaw","INpsVoteStatus","ObjectId","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","npsId","status","sentAt","identifier","unique","findNotSentByNpsId","options","query","NEW","cursor","find","sort","ts","limit","findByNpsIdAndStatus","findByNpsId","save","vote","update","$set","_updatedAt","Date","$setOnInsert","_id","toHexString","updateOne","upsert","updateVotesToSent","voteIds","$in","SENT","updateMany","updateOldSendingToNewByNpsId","fiveMinutes","setMinutes","getMinutes","SENDING","$lt","$unset","countByNpsId","countDocuments","countByNpsIdAndStatus","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/NpsVote.ts"],"sourcesContent":["import type { INpsVote, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { INpsVoteStatus } from '@rocket.chat/core-typings';\nimport type { INpsVoteModel } from '@rocket.chat/model-typings';\nimport type { Collection, FindCursor, Db, Document, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsVoteRaw extends BaseRaw<INpsVote> implements INpsVoteModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INpsVote>>) {\n\t\tsuper(db, 'nps_vote', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { npsId: 1, status: 1, sentAt: 1 } }, { key: { npsId: 1, identifier: 1 }, unique: true }];\n\t}\n\n\tfindNotSentByNpsId(npsId: string, options?: Omit<FindOptions<INpsVote>, 'sort' | 'limit'>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t};\n\t\tconst cursor = options ? this.find(query, options) : this.find(query);\n\n\t\treturn cursor.sort({ ts: 1 }).limit(1000);\n\t}\n\n\tfindByNpsIdAndStatus(npsId: string, status: INpsVoteStatus, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tfindByNpsId(npsId: string, options?: FindOptions<INpsVote>): FindCursor<INpsVote> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t};\n\t\tif (options) {\n\t\t\treturn this.find(query, options);\n\t\t}\n\t\treturn this.find(query);\n\t}\n\n\tsave(vote: Omit<INpsVote, '_id' | '_updatedAt'>): Promise<UpdateResult> {\n\t\tconst { npsId, identifier } = vote;\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t...vote,\n\t\t\t\t_updatedAt: new Date(),\n\t\t\t},\n\t\t\t$setOnInsert: {\n\t\t\t\t_id: new ObjectId().toHexString(), // TODO this should be done by BaseRaw\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tupdateVotesToSent(voteIds: string[]): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t_id: { $in: voteIds },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.SENT,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateOldSendingToNewByNpsId(npsId: string): Promise<UpdateResult | Document> {\n\t\tconst fiveMinutes = new Date();\n\t\tfiveMinutes.setMinutes(fiveMinutes.getMinutes() - 5);\n\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\tsentAt: { $lt: fiveMinutes },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tsentAt: 1 as const, // why do you do this to me TypeScript?\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tcountByNpsId(npsId: string): Promise<number> {\n\t\treturn this.countDocuments({ npsId });\n\t}\n\n\tcountByNpsIdAndStatus(npsId: string, status: INpsVoteStatus): Promise<number> {\n\t\tconst query = {\n\t\t\tnpsId,\n\t\t\tstatus,\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n}\n"],"mappings":";;;IACA,IAAAA,aAAS;IAAAC,MAAc,CAAEC,IAAA,uCAAkC;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAA3DH,MAAA,CAAOI,MAAE;MAAAC,UAAgB,EAAAA,CAAA,KAAAA;IAAM;IAAA,IAAAC,cAA4B;IAAAN,MAAA,CAAAC,IAAA;MAAAK,eAAAH,CAAA;QAAAG,cAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,QAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,SAAAJ,CAAA;QAAAI,QAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,OAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,QAAAL,CAAA;QAAAK,OAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAOrD,MAAOJ,UAAW,SAAQG,OAAiB;MAChDE,YAAYC,EAAM,EAAEC,KAAqD;QACxE,KAAK,CAACD,EAAE,EAAE,UAAU,EAAEC,KAAK,CAAC;MAC7B;MAEAC,YAAYA,CAAA;QACX,OAAO,CAAC;UAAEC,GAAG,EAAE;YAAEC,KAAK,EAAE,CAAC;YAAEC,MAAM,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAC;QAAE,CAAE,EAAE;UAAEH,GAAG,EAAE;YAAEC,KAAK,EAAE,CAAC;YAAEG,UAAU,EAAE;UAAC,CAAE;UAAEC,MAAM,EAAE;QAAI,CAAE,CAAC;MACzG;MAEAC,kBAAkBA,CAACL,KAAa,EAAEM,OAAuD;QACxF,MAAMC,KAAK,GAAG;UACbP,KAAK;UACLC,MAAM,EAAEV,cAAc,CAACiB;SACvB;QACD,MAAMC,MAAM,GAAGH,OAAO,GAAG,IAAI,CAACI,IAAI,CAACH,KAAK,EAAED,OAAO,CAAC,GAAG,IAAI,CAACI,IAAI,CAACH,KAAK,CAAC;QAErE,OAAOE,MAAM,CAACE,IAAI,CAAC;UAAEC,EAAE,EAAE;QAAC,CAAE,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;MAC1C;MAEAC,oBAAoBA,CAACd,KAAa,EAAEC,MAAsB,EAAEK,OAA+B;QAC1F,MAAMC,KAAK,GAAG;UACbP,KAAK;UACLC;SACA;QACD,IAAIK,OAAO,EAAE;UACZ,OAAO,IAAI,CAACI,IAAI,CAACH,KAAK,EAAED,OAAO,CAAC;QACjC;QACA,OAAO,IAAI,CAACI,IAAI,CAACH,KAAK,CAAC;MACxB;MAEAQ,WAAWA,CAACf,KAAa,EAAEM,OAA+B;QACzD,MAAMC,KAAK,GAAG;UACbP;SACA;QACD,IAAIM,OAAO,EAAE;UACZ,OAAO,IAAI,CAACI,IAAI,CAACH,KAAK,EAAED,OAAO,CAAC;QACjC;QACA,OAAO,IAAI,CAACI,IAAI,CAACH,KAAK,CAAC;MACxB;MAEAS,IAAIA,CAACC,IAA0C;QAC9C,MAAM;UAAEjB,KAAK;UAAEG;QAAU,CAAE,GAAGc,IAAI;QAElC,MAAMV,KAAK,GAAG;UACbP,KAAK;UACLG;SACA;QACD,MAAMe,MAAM,GAAG;UACdC,IAAI,EAAAnC,aAAA,CAAAA,aAAA,KACAiC,IAAI;YACPG,UAAU,EAAE,IAAIC,IAAI;UAAE,EACtB;UACDC,YAAY,EAAE;YACbC,GAAG,EAAE,IAAI/B,QAAQ,EAAE,CAACgC,WAAW,EAAE,CAAE;;SAEpC;QAED,OAAO,IAAI,CAACC,SAAS,CAAClB,KAAK,EAAEW,MAAM,EAAE;UAAEQ,MAAM,EAAE;QAAI,CAAE,CAAC;MACvD;MAEAC,iBAAiBA,CAACC,OAAiB;QAClC,MAAMrB,KAAK,GAAG;UACbgB,GAAG,EAAE;YAAEM,GAAG,EAAED;UAAO;SACnB;QACD,MAAMV,MAAM,GAAG;UACdC,IAAI,EAAE;YACLlB,MAAM,EAAEV,cAAc,CAACuC;;SAExB;QACD,OAAO,IAAI,CAACC,UAAU,CAACxB,KAAK,EAAEW,MAAM,CAAC;MACtC;MAEAc,4BAA4BA,CAAChC,KAAa;QACzC,MAAMiC,WAAW,GAAG,IAAIZ,IAAI,EAAE;QAC9BY,WAAW,CAACC,UAAU,CAACD,WAAW,CAACE,UAAU,EAAE,GAAG,CAAC,CAAC;QAEpD,MAAM5B,KAAK,GAAG;UACbP,KAAK;UACLC,MAAM,EAAEV,cAAc,CAAC6C,OAAO;UAC9BlC,MAAM,EAAE;YAAEmC,GAAG,EAAEJ;UAAW;SAC1B;QACD,MAAMf,MAAM,GAAG;UACdC,IAAI,EAAE;YACLlB,MAAM,EAAEV,cAAc,CAACiB;WACvB;UACD8B,MAAM,EAAE;YACPpC,MAAM,EAAE,CAAU,CAAE;;SAErB;QACD,OAAO,IAAI,CAAC6B,UAAU,CAACxB,KAAK,EAAEW,MAAM,CAAC;MACtC;MAEAqB,YAAYA,CAACvC,KAAa;QACzB,OAAO,IAAI,CAACwC,cAAc,CAAC;UAAExC;QAAK,CAAE,CAAC;MACtC;MAEAyC,qBAAqBA,CAACzC,KAAa,EAAEC,MAAsB;QAC1D,MAAMM,KAAK,GAAG;UACbP,KAAK;UACLC;SACA;QAED,OAAO,IAAI,CAACuC,cAAc,CAACjC,KAAK,CAAC;MAClC;;IACAmC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"fbb2e4fe4475456fe486d76d9a2600d68e73020d"}
