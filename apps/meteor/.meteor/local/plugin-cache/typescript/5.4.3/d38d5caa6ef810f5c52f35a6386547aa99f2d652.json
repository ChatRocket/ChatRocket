{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/sms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/imports/server/rest/sms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/sms.ts","inputSourceMap":{"version":3,"file":"app/livechat/imports/server/rest/sms.ts","sourceRoot":"","sources":["app/livechat/imports/server/rest/sms.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUpload,\n\tMessageAttachment,\n\tServiceData,\n\tFileAttachmentProps,\n\tIOmnichannelSource,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getFileExtension } from '../../../../../lib/utils/getFileExtension';\nimport { API } from '../../../../api/server';\nimport { FileUpload } from '../../../../file-upload/server';\nimport { checkUrlForSsrf } from '../../../../lib/server/functions/checkUrlForSsrf';\nimport { settings } from '../../../../settings/server';\nimport { setCustomField } from '../../../server/api/lib/customFields';\nimport type { ILivechatMessage } from '../../../server/lib/LivechatTyped';\nimport { Livechat as LivechatTyped } from '../../../server/lib/LivechatTyped';\n\nconst logger = new Logger('SMS');\n\nconst getUploadFile = async (details: Omit<IUpload, '_id'>, fileUrl: string) => {\n\tconst isSsrfSafe = await checkUrlForSsrf(fileUrl);\n\tif (!isSsrfSafe) {\n\t\tthrow new Meteor.Error('error-invalid-url', 'Invalid URL');\n\t}\n\n\tconst response = await fetch(fileUrl, { redirect: 'error' });\n\n\tconst content = Buffer.from(await response.arrayBuffer());\n\n\tconst contentSize = content.length;\n\n\tif (response.status !== 200 || contentSize === 0) {\n\t\tthrow new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n\t}\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insert({ ...details, size: contentSize }, content);\n};\n\nconst defineDepartment = async (idOrName?: string) => {\n\tif (!idOrName || idOrName === '') {\n\t\treturn;\n\t}\n\n\tconst department = await LivechatDepartment.findOneByIdOrName(idOrName, { projection: { _id: 1 } });\n\treturn department?._id;\n};\n\nconst defineVisitor = async (smsNumber: string, serviceName: string, destination: string, targetDepartment?: string) => {\n\tconst visitorSource: IOmnichannelSource = {\n\t\ttype: OmnichannelSourceType.SMS,\n\t\talias: serviceName,\n\t};\n\n\tconst visitor = await LivechatVisitors.findOneVisitorByPhoneAndSource(\n\t\tsmsNumber,\n\t\t{\n\t\t\t'source.type': visitorSource.type,\n\t\t\t'source.alias': visitorSource.alias,\n\t\t},\n\t\t{ projection: { token: 1 } },\n\t);\n\tvisitorSource.destination = destination;\n\tlet data: { token: string; source: IOmnichannelSource; department?: string } = {\n\t\ttoken: visitor?.token || Random.id(),\n\t\tsource: visitorSource,\n\t};\n\n\tif (!visitor) {\n\t\tdata = Object.assign(data, {\n\t\t\tusername: smsNumber.replace(/[^0-9]/g, ''),\n\t\t\tphone: {\n\t\t\t\tnumber: smsNumber,\n\t\t\t},\n\t\t});\n\t}\n\n\tif (targetDepartment) {\n\t\tdata.department = targetDepartment;\n\t}\n\n\tconst livechatVisitor = await LivechatTyped.registerGuest(data);\n\n\tif (!livechatVisitor) {\n\t\tthrow new Meteor.Error('error-invalid-visitor', 'Invalid visitor');\n\t}\n\n\treturn livechatVisitor;\n};\n\nconst normalizeLocationSharing = (payload: ServiceData) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tif (!latitude || !longitude) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\ttype: 'Point',\n\t\tcoordinates: [parseFloat(longitude), parseFloat(latitude)],\n\t};\n};\n\n// @ts-expect-error - this is an special endpoint that requires the return to not be wrapped as regular returns\nAPI.v1.addRoute('livechat/sms-incoming/:service', {\n\tasync post() {\n\t\tconst { service } = this.urlParams;\n\t\tif (!(await OmnichannelIntegration.isConfiguredSmsService(service))) {\n\t\t\treturn API.v1.failure('Invalid service');\n\t\t}\n\n\t\tconst smsDepartment = settings.get<string>('SMS_Default_Omnichannel_Department');\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService.validateRequest(this.request)) {\n\t\t\treturn API.v1.failure('Invalid request');\n\t\t}\n\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tlet targetDepartment = await defineDepartment(department || smsDepartment);\n\t\tif (!targetDepartment) {\n\t\t\ttargetDepartment = await defineDepartment(smsDepartment);\n\t\t}\n\n\t\tconst visitor = await defineVisitor(sms.from, service, sms.to, targetDepartment);\n\t\tif (!visitor) {\n\t\t\treturn API.v1.success(SMSService.error(new Error('Invalid visitor')));\n\t\t}\n\n\t\tconst roomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t} = {\n\t\t\tsms: {\n\t\t\t\tfrom: sms.to,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.SMS,\n\t\t\t\talias: service,\n\t\t\t\tdestination: sms.to,\n\t\t\t},\n\t\t};\n\n\t\tconst { token } = visitor;\n\t\tconst room =\n\t\t\t(await LivechatRooms.findOneOpenByVisitorTokenAndDepartmentIdAndSource(token, targetDepartment, OmnichannelSourceType.SMS)) ??\n\t\t\t(await LivechatTyped.createRoom({\n\t\t\t\tvisitor,\n\t\t\t\troomInfo,\n\t\t\t}));\n\t\tconst location = normalizeLocationSharing(sms);\n\t\tconst rid = room?._id;\n\n\t\tlet file: ILivechatMessage['file'];\n\t\tconst attachments: (MessageAttachment | undefined)[] = [];\n\n\t\tconst [media] = sms?.media || [];\n\t\tif (media) {\n\t\t\tconst { url: smsUrl, contentType } = media;\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name || 'file', type: uploadedFile.type };\n\t\t\t\tconst fileUrl = FileUpload.getPath(`${file._id}/${encodeURI(file.name || 'file')}`);\n\n\t\t\t\tconst fileType = file.type as string;\n\n\t\t\t\tif (/^image\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\timage_url: fileUrl,\n\t\t\t\t\t\timage_type: fileType,\n\t\t\t\t\t\timage_size: file.size,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (file.identify?.size) {\n\t\t\t\t\t\tattachment.image_dimensions = file?.identify.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^audio\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\taudio_url: fileUrl,\n\t\t\t\t\t\taudio_type: fileType,\n\t\t\t\t\t\taudio_size: file.size,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^video\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\tvideo_url: fileUrl,\n\t\t\t\t\t\tvideo_type: fileType,\n\t\t\t\t\t\tvideo_size: file.size as number,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else {\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\tformat: getFileExtension(file.name),\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t\tsize: file.size as number,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error({ msg: 'Attachment upload failed', err });\n\t\t\t\tconst attachment = {\n\t\t\t\t\ttitle: 'Attachment upload failed',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tdescription: 'An attachment was received, but upload to server failed',\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: 'User upload failed',\n\t\t\t\t\t\t\tvalue: 'An attachment was received, but upload to server failed',\n\t\t\t\t\t\t\tshort: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcolor: 'yellow',\n\t\t\t\t};\n\n\t\t\t\tattachments.push(attachment);\n\t\t\t}\n\t\t}\n\n\t\tconst sendMessage: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\tmessage: ILivechatMessage;\n\t\t\troomInfo: {\n\t\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t} = {\n\t\t\tguest: visitor,\n\t\t\troomInfo,\n\t\t\tmessage: {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid,\n\t\t\t\ttoken,\n\t\t\t\tmsg: sms.body,\n\t\t\t\t...(location && { location }),\n\t\t\t\t...(attachments && { attachments: attachments.filter((a: any): a is MessageAttachment => !!a) }),\n\t\t\t\t...(file && { file }),\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tawait LivechatTyped.sendMessage(sendMessage);\n\t\t\tconst msg = SMSService.response();\n\t\t\tsetImmediate(async () => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromZip) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'zip', sms.extra.fromZip);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e: any) {\n\t\t\treturn SMSService.error(e);\n\t\t}\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/imports/server/rest/sms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/imports/server/rest/sms.ts","inputSourceMap":{"version":3,"file":"app/livechat/imports/server/rest/sms.ts","sourceRoot":"","sources":["app/livechat/imports/server/rest/sms.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUpload,\n\tMessageAttachment,\n\tServiceData,\n\tFileAttachmentProps,\n\tIOmnichannelSource,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getFileExtension } from '../../../../../lib/utils/getFileExtension';\nimport { API } from '../../../../api/server';\nimport { FileUpload } from '../../../../file-upload/server';\nimport { checkUrlForSsrf } from '../../../../lib/server/functions/checkUrlForSsrf';\nimport { settings } from '../../../../settings/server';\nimport { setCustomField } from '../../../server/api/lib/customFields';\nimport type { ILivechatMessage } from '../../../server/lib/LivechatTyped';\nimport { Livechat as LivechatTyped } from '../../../server/lib/LivechatTyped';\n\nconst logger = new Logger('SMS');\n\nconst getUploadFile = async (details: Omit<IUpload, '_id'>, fileUrl: string) => {\n\tconst isSsrfSafe = await checkUrlForSsrf(fileUrl);\n\tif (!isSsrfSafe) {\n\t\tthrow new Meteor.Error('error-invalid-url', 'Invalid URL');\n\t}\n\n\tconst response = await fetch(fileUrl, { redirect: 'error' });\n\n\tconst content = Buffer.from(await response.arrayBuffer());\n\n\tconst contentSize = content.length;\n\n\tif (response.status !== 200 || contentSize === 0) {\n\t\tthrow new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n\t}\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insert({ ...details, size: contentSize }, content);\n};\n\nconst defineDepartment = async (idOrName?: string) => {\n\tif (!idOrName || idOrName === '') {\n\t\treturn;\n\t}\n\n\tconst department = await LivechatDepartment.findOneByIdOrName(idOrName, { projection: { _id: 1 } });\n\treturn department?._id;\n};\n\nconst defineVisitor = async (smsNumber: string, serviceName: string, destination: string, targetDepartment?: string) => {\n\tconst visitorSource: IOmnichannelSource = {\n\t\ttype: OmnichannelSourceType.SMS,\n\t\talias: serviceName,\n\t};\n\n\tconst visitor = await LivechatVisitors.findOneVisitorByPhoneAndSource(\n\t\tsmsNumber,\n\t\t{\n\t\t\t'source.type': visitorSource.type,\n\t\t\t'source.alias': visitorSource.alias,\n\t\t},\n\t\t{ projection: { token: 1 } },\n\t);\n\tvisitorSource.destination = destination;\n\tlet data: { token: string; source: IOmnichannelSource; department?: string } = {\n\t\ttoken: visitor?.token || Random.id(),\n\t\tsource: visitorSource,\n\t};\n\n\tif (!visitor) {\n\t\tdata = Object.assign(data, {\n\t\t\tusername: smsNumber.replace(/[^0-9]/g, ''),\n\t\t\tphone: {\n\t\t\t\tnumber: smsNumber,\n\t\t\t},\n\t\t});\n\t}\n\n\tif (targetDepartment) {\n\t\tdata.department = targetDepartment;\n\t}\n\n\tconst livechatVisitor = await LivechatTyped.registerGuest(data);\n\n\tif (!livechatVisitor) {\n\t\tthrow new Meteor.Error('error-invalid-visitor', 'Invalid visitor');\n\t}\n\n\treturn livechatVisitor;\n};\n\nconst normalizeLocationSharing = (payload: ServiceData) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tif (!latitude || !longitude) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\ttype: 'Point',\n\t\tcoordinates: [parseFloat(longitude), parseFloat(latitude)],\n\t};\n};\n\n// @ts-expect-error - this is an special endpoint that requires the return to not be wrapped as regular returns\nAPI.v1.addRoute('livechat/sms-incoming/:service', {\n\tasync post() {\n\t\tconst { service } = this.urlParams;\n\t\tif (!(await OmnichannelIntegration.isConfiguredSmsService(service))) {\n\t\t\treturn API.v1.failure('Invalid service');\n\t\t}\n\n\t\tconst smsDepartment = settings.get<string>('SMS_Default_Omnichannel_Department');\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService.validateRequest(this.request)) {\n\t\t\treturn API.v1.failure('Invalid request');\n\t\t}\n\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tlet targetDepartment = await defineDepartment(department || smsDepartment);\n\t\tif (!targetDepartment) {\n\t\t\ttargetDepartment = await defineDepartment(smsDepartment);\n\t\t}\n\n\t\tconst visitor = await defineVisitor(sms.from, service, sms.to, targetDepartment);\n\t\tif (!visitor) {\n\t\t\treturn API.v1.success(SMSService.error(new Error('Invalid visitor')));\n\t\t}\n\n\t\tconst roomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t} = {\n\t\t\tsms: {\n\t\t\t\tfrom: sms.to,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.SMS,\n\t\t\t\talias: service,\n\t\t\t\tdestination: sms.to,\n\t\t\t},\n\t\t};\n\n\t\tconst { token } = visitor;\n\t\tconst room =\n\t\t\t(await LivechatRooms.findOneOpenByVisitorTokenAndDepartmentIdAndSource(token, targetDepartment, OmnichannelSourceType.SMS)) ??\n\t\t\t(await LivechatTyped.createRoom({\n\t\t\t\tvisitor,\n\t\t\t\troomInfo,\n\t\t\t}));\n\t\tconst location = normalizeLocationSharing(sms);\n\t\tconst rid = room?._id;\n\n\t\tlet file: ILivechatMessage['file'];\n\t\tconst attachments: (MessageAttachment | undefined)[] = [];\n\n\t\tconst [media] = sms?.media || [];\n\t\tif (media) {\n\t\t\tconst { url: smsUrl, contentType } = media;\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name || 'file', type: uploadedFile.type };\n\t\t\t\tconst fileUrl = FileUpload.getPath(`${file._id}/${encodeURI(file.name || 'file')}`);\n\n\t\t\t\tconst fileType = file.type as string;\n\n\t\t\t\tif (/^image\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\timage_url: fileUrl,\n\t\t\t\t\t\timage_type: fileType,\n\t\t\t\t\t\timage_size: file.size,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (file.identify?.size) {\n\t\t\t\t\t\tattachment.image_dimensions = file?.identify.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^audio\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\taudio_url: fileUrl,\n\t\t\t\t\t\taudio_type: fileType,\n\t\t\t\t\t\taudio_size: file.size,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^video\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\tvideo_url: fileUrl,\n\t\t\t\t\t\tvideo_type: fileType,\n\t\t\t\t\t\tvideo_size: file.size as number,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else {\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\tformat: getFileExtension(file.name),\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t\tsize: file.size as number,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error({ msg: 'Attachment upload failed', err });\n\t\t\t\tconst attachment = {\n\t\t\t\t\ttitle: 'Attachment upload failed',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tdescription: 'An attachment was received, but upload to server failed',\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: 'User upload failed',\n\t\t\t\t\t\t\tvalue: 'An attachment was received, but upload to server failed',\n\t\t\t\t\t\t\tshort: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcolor: 'yellow',\n\t\t\t\t};\n\n\t\t\t\tattachments.push(attachment);\n\t\t\t}\n\t\t}\n\n\t\tconst sendMessage: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\tmessage: ILivechatMessage;\n\t\t\troomInfo: {\n\t\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t} = {\n\t\t\tguest: visitor,\n\t\t\troomInfo,\n\t\t\tmessage: {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid,\n\t\t\t\ttoken,\n\t\t\t\tmsg: sms.body,\n\t\t\t\t...(location && { location }),\n\t\t\t\t...(attachments && { attachments: attachments.filter((a: any): a is MessageAttachment => !!a) }),\n\t\t\t\t...(file && { file }),\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tawait LivechatTyped.sendMessage(sendMessage);\n\t\t\tconst msg = SMSService.response();\n\t\t\tsetImmediate(async () => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromZip) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'zip', sms.extra.fromZip);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e: any) {\n\t\t\treturn SMSService.error(e);\n\t\t}\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let OmnichannelIntegration;\n    module.link(\"@rocket.chat/core-services\", {\n      OmnichannelIntegration(v) {\n        OmnichannelIntegration = v;\n      }\n    }, 0);\n    let OmnichannelSourceType;\n    module.link(\"@rocket.chat/core-typings\", {\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      }\n    }, 1);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 2);\n    let LivechatVisitors, LivechatRooms, LivechatDepartment;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      }\n    }, 3);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 4);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 5);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 6);\n    let getFileExtension;\n    module.link(\"../../../../../lib/utils/getFileExtension\", {\n      getFileExtension(v) {\n        getFileExtension = v;\n      }\n    }, 7);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 8);\n    let FileUpload;\n    module.link(\"../../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 9);\n    let checkUrlForSsrf;\n    module.link(\"../../../../lib/server/functions/checkUrlForSsrf\", {\n      checkUrlForSsrf(v) {\n        checkUrlForSsrf = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let setCustomField;\n    module.link(\"../../../server/api/lib/customFields\", {\n      setCustomField(v) {\n        setCustomField = v;\n      }\n    }, 12);\n    let LivechatTyped;\n    module.link(\"../../../server/lib/LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 13);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('SMS');\n    const getUploadFile = async (details, fileUrl) => {\n      const isSsrfSafe = await checkUrlForSsrf(fileUrl);\n      if (!isSsrfSafe) {\n        throw new Meteor.Error('error-invalid-url', 'Invalid URL');\n      }\n      const response = await fetch(fileUrl, {\n        redirect: 'error'\n      });\n      const content = Buffer.from(await response.arrayBuffer());\n      const contentSize = content.length;\n      if (response.status !== 200 || contentSize === 0) {\n        throw new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n      }\n      const fileStore = FileUpload.getStore('Uploads');\n      return fileStore.insert(_objectSpread(_objectSpread({}, details), {}, {\n        size: contentSize\n      }), content);\n    };\n    const defineDepartment = async idOrName => {\n      if (!idOrName || idOrName === '') {\n        return;\n      }\n      const department = await LivechatDepartment.findOneByIdOrName(idOrName, {\n        projection: {\n          _id: 1\n        }\n      });\n      return department === null || department === void 0 ? void 0 : department._id;\n    };\n    const defineVisitor = async (smsNumber, serviceName, destination, targetDepartment) => {\n      const visitorSource = {\n        type: OmnichannelSourceType.SMS,\n        alias: serviceName\n      };\n      const visitor = await LivechatVisitors.findOneVisitorByPhoneAndSource(smsNumber, {\n        'source.type': visitorSource.type,\n        'source.alias': visitorSource.alias\n      }, {\n        projection: {\n          token: 1\n        }\n      });\n      visitorSource.destination = destination;\n      let data = {\n        token: (visitor === null || visitor === void 0 ? void 0 : visitor.token) || Random.id(),\n        source: visitorSource\n      };\n      if (!visitor) {\n        data = Object.assign(data, {\n          username: smsNumber.replace(/[^0-9]/g, ''),\n          phone: {\n            number: smsNumber\n          }\n        });\n      }\n      if (targetDepartment) {\n        data.department = targetDepartment;\n      }\n      const livechatVisitor = await LivechatTyped.registerGuest(data);\n      if (!livechatVisitor) {\n        throw new Meteor.Error('error-invalid-visitor', 'Invalid visitor');\n      }\n      return livechatVisitor;\n    };\n    const normalizeLocationSharing = payload => {\n      const {\n        extra: {\n          fromLatitude: latitude,\n          fromLongitude: longitude\n        } = {}\n      } = payload;\n      if (!latitude || !longitude) {\n        return;\n      }\n      return {\n        type: 'Point',\n        coordinates: [parseFloat(longitude), parseFloat(latitude)]\n      };\n    };\n    // @ts-expect-error - this is an special endpoint that requires the return to not be wrapped as regular returns\n    API.v1.addRoute('livechat/sms-incoming/:service', {\n      async post() {\n        var _await$LivechatRooms$;\n        const {\n          service\n        } = this.urlParams;\n        if (!(await OmnichannelIntegration.isConfiguredSmsService(service))) {\n          return API.v1.failure('Invalid service');\n        }\n        const smsDepartment = settings.get('SMS_Default_Omnichannel_Department');\n        const SMSService = await OmnichannelIntegration.getSmsService(service);\n        if (!SMSService.validateRequest(this.request)) {\n          return API.v1.failure('Invalid request');\n        }\n        const sms = SMSService.parse(this.bodyParams);\n        const {\n          department\n        } = this.queryParams;\n        let targetDepartment = await defineDepartment(department || smsDepartment);\n        if (!targetDepartment) {\n          targetDepartment = await defineDepartment(smsDepartment);\n        }\n        const visitor = await defineVisitor(sms.from, service, sms.to, targetDepartment);\n        if (!visitor) {\n          return API.v1.success(SMSService.error(new Error('Invalid visitor')));\n        }\n        const roomInfo = {\n          sms: {\n            from: sms.to\n          },\n          source: {\n            type: OmnichannelSourceType.SMS,\n            alias: service,\n            destination: sms.to\n          }\n        };\n        const {\n          token\n        } = visitor;\n        const room = (_await$LivechatRooms$ = await LivechatRooms.findOneOpenByVisitorTokenAndDepartmentIdAndSource(token, targetDepartment, OmnichannelSourceType.SMS)) !== null && _await$LivechatRooms$ !== void 0 ? _await$LivechatRooms$ : await LivechatTyped.createRoom({\n          visitor,\n          roomInfo\n        });\n        const location = normalizeLocationSharing(sms);\n        const rid = room === null || room === void 0 ? void 0 : room._id;\n        let file;\n        const attachments = [];\n        const [media] = (sms === null || sms === void 0 ? void 0 : sms.media) || [];\n        if (media) {\n          const {\n            url: smsUrl,\n            contentType\n          } = media;\n          const details = {\n            name: 'Upload File',\n            type: contentType,\n            rid,\n            visitorToken: token\n          };\n          try {\n            const uploadedFile = await getUploadFile(details, smsUrl);\n            file = {\n              _id: uploadedFile._id,\n              name: uploadedFile.name || 'file',\n              type: uploadedFile.type\n            };\n            const fileUrl = FileUpload.getPath(\"\".concat(file._id, \"/\").concat(encodeURI(file.name || 'file')));\n            const fileType = file.type;\n            if (/^image\\/.+/.test(fileType)) {\n              var _file$identify;\n              const attachment = {\n                title: file.name,\n                type: 'file',\n                description: file.description,\n                title_link: fileUrl,\n                image_url: fileUrl,\n                image_type: fileType,\n                image_size: file.size\n              };\n              if ((_file$identify = file.identify) !== null && _file$identify !== void 0 && _file$identify.size) {\n                var _file;\n                attachment.image_dimensions = (_file = file) === null || _file === void 0 ? void 0 : _file.identify.size;\n              }\n              attachments.push(attachment);\n            } else if (/^audio\\/.+/.test(fileType)) {\n              const attachment = {\n                title: file.name,\n                type: 'file',\n                description: file.description,\n                title_link: fileUrl,\n                audio_url: fileUrl,\n                audio_type: fileType,\n                audio_size: file.size,\n                title_link_download: true\n              };\n              attachments.push(attachment);\n            } else if (/^video\\/.+/.test(fileType)) {\n              const attachment = {\n                title: file.name,\n                type: 'file',\n                description: file.description,\n                title_link: fileUrl,\n                video_url: fileUrl,\n                video_type: fileType,\n                video_size: file.size,\n                title_link_download: true\n              };\n              attachments.push(attachment);\n            } else {\n              const attachment = {\n                title: file.name,\n                type: 'file',\n                description: file.description,\n                format: getFileExtension(file.name),\n                title_link: fileUrl,\n                title_link_download: true,\n                size: file.size\n              };\n              attachments.push(attachment);\n            }\n          } catch (err) {\n            logger.error({\n              msg: 'Attachment upload failed',\n              err\n            });\n            const attachment = {\n              title: 'Attachment upload failed',\n              type: 'file',\n              description: 'An attachment was received, but upload to server failed',\n              fields: [{\n                title: 'User upload failed',\n                value: 'An attachment was received, but upload to server failed',\n                short: true\n              }],\n              color: 'yellow'\n            };\n            attachments.push(attachment);\n          }\n        }\n        const sendMessage = {\n          guest: visitor,\n          roomInfo,\n          message: _objectSpread(_objectSpread(_objectSpread({\n            _id: Random.id(),\n            rid,\n            token,\n            msg: sms.body\n          }, location && {\n            location\n          }), attachments && {\n            attachments: attachments.filter(a => !!a)\n          }), file && {\n            file\n          })\n        };\n        try {\n          await LivechatTyped.sendMessage(sendMessage);\n          const msg = SMSService.response();\n          setImmediate(async () => {\n            if (sms.extra) {\n              if (sms.extra.fromCountry) {\n                await setCustomField(sendMessage.message.token, 'country', sms.extra.fromCountry);\n              }\n              if (sms.extra.fromState) {\n                await setCustomField(sendMessage.message.token, 'state', sms.extra.fromState);\n              }\n              if (sms.extra.fromCity) {\n                await setCustomField(sendMessage.message.token, 'city', sms.extra.fromCity);\n              }\n              if (sms.extra.fromZip) {\n                await setCustomField(sendMessage.message.token, 'zip', sms.extra.fromZip);\n              }\n            }\n          });\n          return msg;\n        } catch (e) {\n          return SMSService.error(e);\n        }\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","OmnichannelIntegration","OmnichannelSourceType","Logger","LivechatVisitors","LivechatRooms","LivechatDepartment","Random","fetch","serverFetch","Meteor","getFileExtension","API","FileUpload","checkUrlForSsrf","settings","setCustomField","LivechatTyped","Livechat","__reifyWaitForDeps__","logger","getUploadFile","details","fileUrl","isSsrfSafe","Error","response","redirect","content","Buffer","from","arrayBuffer","contentSize","length","status","fileStore","getStore","insert","size","defineDepartment","idOrName","department","findOneByIdOrName","projection","_id","defineVisitor","smsNumber","serviceName","destination","targetDepartment","visitorSource","type","SMS","alias","visitor","findOneVisitorByPhoneAndSource","token","data","id","source","Object","assign","username","replace","phone","number","livechatVisitor","registerGuest","normalizeLocationSharing","payload","extra","fromLatitude","latitude","fromLongitude","longitude","coordinates","parseFloat","v1","addRoute","post","_await$LivechatRooms$","service","urlParams","isConfiguredSmsService","failure","smsDepartment","get","SMSService","getSmsService","validateRequest","request","sms","parse","bodyParams","queryParams","to","success","error","roomInfo","room","findOneOpenByVisitorTokenAndDepartmentIdAndSource","createRoom","location","rid","file","attachments","media","url","smsUrl","contentType","name","visitorToken","uploadedFile","getPath","concat","encodeURI","fileType","test","_file$identify","attachment","title","description","title_link","image_url","image_type","image_size","identify","_file","image_dimensions","push","audio_url","audio_type","audio_size","title_link_download","video_url","video_type","video_size","format","err","msg","fields","value","short","color","sendMessage","guest","message","body","filter","a","setImmediate","fromCountry","fromState","fromCity","fromZip","e","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/imports/server/rest/sms.ts"],"sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUpload,\n\tMessageAttachment,\n\tServiceData,\n\tFileAttachmentProps,\n\tIOmnichannelSource,\n} from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatVisitors, LivechatRooms, LivechatDepartment } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getFileExtension } from '../../../../../lib/utils/getFileExtension';\nimport { API } from '../../../../api/server';\nimport { FileUpload } from '../../../../file-upload/server';\nimport { checkUrlForSsrf } from '../../../../lib/server/functions/checkUrlForSsrf';\nimport { settings } from '../../../../settings/server';\nimport { setCustomField } from '../../../server/api/lib/customFields';\nimport type { ILivechatMessage } from '../../../server/lib/LivechatTyped';\nimport { Livechat as LivechatTyped } from '../../../server/lib/LivechatTyped';\n\nconst logger = new Logger('SMS');\n\nconst getUploadFile = async (details: Omit<IUpload, '_id'>, fileUrl: string) => {\n\tconst isSsrfSafe = await checkUrlForSsrf(fileUrl);\n\tif (!isSsrfSafe) {\n\t\tthrow new Meteor.Error('error-invalid-url', 'Invalid URL');\n\t}\n\n\tconst response = await fetch(fileUrl, { redirect: 'error' });\n\n\tconst content = Buffer.from(await response.arrayBuffer());\n\n\tconst contentSize = content.length;\n\n\tif (response.status !== 200 || contentSize === 0) {\n\t\tthrow new Meteor.Error('error-invalid-file-uploaded', 'Invalid file uploaded');\n\t}\n\n\tconst fileStore = FileUpload.getStore('Uploads');\n\n\treturn fileStore.insert({ ...details, size: contentSize }, content);\n};\n\nconst defineDepartment = async (idOrName?: string) => {\n\tif (!idOrName || idOrName === '') {\n\t\treturn;\n\t}\n\n\tconst department = await LivechatDepartment.findOneByIdOrName(idOrName, { projection: { _id: 1 } });\n\treturn department?._id;\n};\n\nconst defineVisitor = async (smsNumber: string, serviceName: string, destination: string, targetDepartment?: string) => {\n\tconst visitorSource: IOmnichannelSource = {\n\t\ttype: OmnichannelSourceType.SMS,\n\t\talias: serviceName,\n\t};\n\n\tconst visitor = await LivechatVisitors.findOneVisitorByPhoneAndSource(\n\t\tsmsNumber,\n\t\t{\n\t\t\t'source.type': visitorSource.type,\n\t\t\t'source.alias': visitorSource.alias,\n\t\t},\n\t\t{ projection: { token: 1 } },\n\t);\n\tvisitorSource.destination = destination;\n\tlet data: { token: string; source: IOmnichannelSource; department?: string } = {\n\t\ttoken: visitor?.token || Random.id(),\n\t\tsource: visitorSource,\n\t};\n\n\tif (!visitor) {\n\t\tdata = Object.assign(data, {\n\t\t\tusername: smsNumber.replace(/[^0-9]/g, ''),\n\t\t\tphone: {\n\t\t\t\tnumber: smsNumber,\n\t\t\t},\n\t\t});\n\t}\n\n\tif (targetDepartment) {\n\t\tdata.department = targetDepartment;\n\t}\n\n\tconst livechatVisitor = await LivechatTyped.registerGuest(data);\n\n\tif (!livechatVisitor) {\n\t\tthrow new Meteor.Error('error-invalid-visitor', 'Invalid visitor');\n\t}\n\n\treturn livechatVisitor;\n};\n\nconst normalizeLocationSharing = (payload: ServiceData) => {\n\tconst { extra: { fromLatitude: latitude, fromLongitude: longitude } = {} } = payload;\n\tif (!latitude || !longitude) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\ttype: 'Point',\n\t\tcoordinates: [parseFloat(longitude), parseFloat(latitude)],\n\t};\n};\n\n// @ts-expect-error - this is an special endpoint that requires the return to not be wrapped as regular returns\nAPI.v1.addRoute('livechat/sms-incoming/:service', {\n\tasync post() {\n\t\tconst { service } = this.urlParams;\n\t\tif (!(await OmnichannelIntegration.isConfiguredSmsService(service))) {\n\t\t\treturn API.v1.failure('Invalid service');\n\t\t}\n\n\t\tconst smsDepartment = settings.get<string>('SMS_Default_Omnichannel_Department');\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService.validateRequest(this.request)) {\n\t\t\treturn API.v1.failure('Invalid request');\n\t\t}\n\n\t\tconst sms = SMSService.parse(this.bodyParams);\n\t\tconst { department } = this.queryParams;\n\t\tlet targetDepartment = await defineDepartment(department || smsDepartment);\n\t\tif (!targetDepartment) {\n\t\t\ttargetDepartment = await defineDepartment(smsDepartment);\n\t\t}\n\n\t\tconst visitor = await defineVisitor(sms.from, service, sms.to, targetDepartment);\n\t\tif (!visitor) {\n\t\t\treturn API.v1.success(SMSService.error(new Error('Invalid visitor')));\n\t\t}\n\n\t\tconst roomInfo: {\n\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t[key: string]: unknown;\n\t\t} = {\n\t\t\tsms: {\n\t\t\t\tfrom: sms.to,\n\t\t\t},\n\t\t\tsource: {\n\t\t\t\ttype: OmnichannelSourceType.SMS,\n\t\t\t\talias: service,\n\t\t\t\tdestination: sms.to,\n\t\t\t},\n\t\t};\n\n\t\tconst { token } = visitor;\n\t\tconst room =\n\t\t\t(await LivechatRooms.findOneOpenByVisitorTokenAndDepartmentIdAndSource(token, targetDepartment, OmnichannelSourceType.SMS)) ??\n\t\t\t(await LivechatTyped.createRoom({\n\t\t\t\tvisitor,\n\t\t\t\troomInfo,\n\t\t\t}));\n\t\tconst location = normalizeLocationSharing(sms);\n\t\tconst rid = room?._id;\n\n\t\tlet file: ILivechatMessage['file'];\n\t\tconst attachments: (MessageAttachment | undefined)[] = [];\n\n\t\tconst [media] = sms?.media || [];\n\t\tif (media) {\n\t\t\tconst { url: smsUrl, contentType } = media;\n\t\t\tconst details = {\n\t\t\t\tname: 'Upload File',\n\t\t\t\ttype: contentType,\n\t\t\t\trid,\n\t\t\t\tvisitorToken: token,\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst uploadedFile = await getUploadFile(details, smsUrl);\n\t\t\t\tfile = { _id: uploadedFile._id, name: uploadedFile.name || 'file', type: uploadedFile.type };\n\t\t\t\tconst fileUrl = FileUpload.getPath(`${file._id}/${encodeURI(file.name || 'file')}`);\n\n\t\t\t\tconst fileType = file.type as string;\n\n\t\t\t\tif (/^image\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\timage_url: fileUrl,\n\t\t\t\t\t\timage_type: fileType,\n\t\t\t\t\t\timage_size: file.size,\n\t\t\t\t\t};\n\n\t\t\t\t\tif (file.identify?.size) {\n\t\t\t\t\t\tattachment.image_dimensions = file?.identify.size;\n\t\t\t\t\t}\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^audio\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\taudio_url: fileUrl,\n\t\t\t\t\t\taudio_type: fileType,\n\t\t\t\t\t\taudio_size: file.size,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else if (/^video\\/.+/.test(fileType)) {\n\t\t\t\t\tconst attachment: FileAttachmentProps = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\tvideo_url: fileUrl,\n\t\t\t\t\t\tvideo_type: fileType,\n\t\t\t\t\t\tvideo_size: file.size as number,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t} else {\n\t\t\t\t\tconst attachment = {\n\t\t\t\t\t\ttitle: file.name,\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tdescription: file.description,\n\t\t\t\t\t\tformat: getFileExtension(file.name),\n\t\t\t\t\t\ttitle_link: fileUrl,\n\t\t\t\t\t\ttitle_link_download: true,\n\t\t\t\t\t\tsize: file.size as number,\n\t\t\t\t\t};\n\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error({ msg: 'Attachment upload failed', err });\n\t\t\t\tconst attachment = {\n\t\t\t\t\ttitle: 'Attachment upload failed',\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tdescription: 'An attachment was received, but upload to server failed',\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: 'User upload failed',\n\t\t\t\t\t\t\tvalue: 'An attachment was received, but upload to server failed',\n\t\t\t\t\t\t\tshort: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tcolor: 'yellow',\n\t\t\t\t};\n\n\t\t\t\tattachments.push(attachment);\n\t\t\t}\n\t\t}\n\n\t\tconst sendMessage: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\tmessage: ILivechatMessage;\n\t\t\troomInfo: {\n\t\t\t\tsource?: IOmnichannelRoom['source'];\n\t\t\t\t[key: string]: unknown;\n\t\t\t};\n\t\t} = {\n\t\t\tguest: visitor,\n\t\t\troomInfo,\n\t\t\tmessage: {\n\t\t\t\t_id: Random.id(),\n\t\t\t\trid,\n\t\t\t\ttoken,\n\t\t\t\tmsg: sms.body,\n\t\t\t\t...(location && { location }),\n\t\t\t\t...(attachments && { attachments: attachments.filter((a: any): a is MessageAttachment => !!a) }),\n\t\t\t\t...(file && { file }),\n\t\t\t},\n\t\t};\n\n\t\ttry {\n\t\t\tawait LivechatTyped.sendMessage(sendMessage);\n\t\t\tconst msg = SMSService.response();\n\t\t\tsetImmediate(async () => {\n\t\t\t\tif (sms.extra) {\n\t\t\t\t\tif (sms.extra.fromCountry) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'country', sms.extra.fromCountry);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromState) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'state', sms.extra.fromState);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromCity) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'city', sms.extra.fromCity);\n\t\t\t\t\t}\n\t\t\t\t\tif (sms.extra.fromZip) {\n\t\t\t\t\t\tawait setCustomField(sendMessage.message.token, 'zip', sms.extra.fromZip);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn msg;\n\t\t} catch (e: any) {\n\t\t\treturn SMSService.error(e);\n\t\t}\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d38d5caa6ef810f5c52f35a6386547aa99f2d652"}
