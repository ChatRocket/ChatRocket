{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/nps/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/nps/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/nps/service.ts","inputSourceMap":{"version":3,"file":"server/services/nps/service.ts","sourceRoot":"","sources":["server/services/nps/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\n\nimport type { INPSService, NPSVotePayload, NPSCreatePayload } from '@rocket.chat/core-services';\nimport { ServiceClassInternal, Banner, NPS } from '@rocket.chat/core-services';\nimport type { INpsVote, INps } from '@rocket.chat/core-typings';\nimport { NPSStatus, INpsVoteStatus } from '@rocket.chat/core-typings';\nimport { Nps, NpsVote, Settings } from '@rocket.chat/models';\n\nimport { SystemLogger } from '../../lib/logger/system';\nimport { getBannerForAdmins, notifyAdmins } from './notification';\nimport { sendNpsResults } from './sendNpsResults';\n\nexport class NPSService extends ServiceClassInternal implements INPSService {\n\tprotected name = 'nps';\n\n\tasync create(nps: NPSCreatePayload): Promise<boolean> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\tthrow new Error('Server opted-out for NPS surveys');\n\t\t}\n\n\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });\n\t\tif (!any) {\n\t\t\tif (nps.expireAt < nps.startAt || nps.expireAt < new Date()) {\n\t\t\t\tthrow new Error('NPS already expired');\n\t\t\t}\n\t\t\tawait Banner.create(getBannerForAdmins(nps.expireAt));\n\n\t\t\tawait notifyAdmins(nps.startAt);\n\t\t}\n\n\t\tconst { npsId, startAt, expireAt, createdBy } = nps;\n\n\t\ttry {\n\t\t\tawait Nps.save({\n\t\t\t\t_id: npsId,\n\t\t\t\tstartAt,\n\t\t\t\texpireAt,\n\t\t\t\tcreatedBy,\n\t\t\t\tstatus: NPSStatus.OPEN,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error creating NPS', err });\n\t\t\tthrow new Error('Error creating NPS');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync sendResults(): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst npsSending = await Nps.getOpenExpiredAlreadySending();\n\n\t\tconst nps = npsSending || (await Nps.getOpenExpiredAndStartSending());\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst total = await NpsVote.countByNpsId(nps._id);\n\n\t\tconst votesToSend = await NpsVote.findNotSentByNpsId(nps._id).toArray();\n\n\t\t// if there is nothing to sent, check if something gone wrong\n\t\tif (votesToSend.length === 0) {\n\t\t\t// check if still has votes left to send\n\t\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\t\tif (totalSent === total) {\n\t\t\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\t\t\tawait NpsVote.updateOldSendingToNewByNpsId(nps._id);\n\n\t\t\t// try again in 5 minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await NpsVote.findOneAndUpdate(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: vote._id,\n\t\t\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\t\t\t\t\tsentAt: today,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tidentifier: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tscore: 1,\n\t\t\t\t\t\t\tcomment: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn value;\n\t\t\t}),\n\t\t);\n\n\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\n\t\t\tconst votesWithoutIds = votes.map(({ identifier, roles, score, comment }) => ({\n\t\t\t\tidentifier,\n\t\t\t\troles,\n\t\t\t\tscore,\n\t\t\t\tcomment,\n\t\t\t}));\n\n\t\t\tconst payload = {\n\t\t\t\ttotal,\n\t\t\t\tvotes: votesWithoutIds,\n\t\t\t};\n\n\t\t\tawait sendNpsResults(nps._id, payload);\n\n\t\t\tawait NpsVote.updateVotesToSent(voteIds);\n\t\t}\n\n\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\tif (totalSent < total) {\n\t\t\t// send more in five minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t}\n\n\tasync vote({ userId, npsId, roles, score, comment }: NPSVotePayload): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!npsId || typeof npsId !== 'string') {\n\t\t\tthrow new Error('Invalid NPS id');\n\t\t}\n\n\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },\n\t\t});\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (nps.status !== NPSStatus.OPEN) {\n\t\t\tthrow new Error('NPS not open for votes');\n\t\t}\n\n\t\tconst today = new Date();\n\t\tif (today > nps.expireAt) {\n\t\t\tthrow new Error('NPS expired');\n\t\t}\n\n\t\tif (today < nps.startAt) {\n\t\t\tthrow new Error('NPS survey not started');\n\t\t}\n\n\t\tconst identifier = createHash('sha256').update(`${userId}${npsId}`).digest('hex');\n\n\t\tconst result = await NpsVote.save({\n\t\t\tts: new Date(),\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t\troles,\n\t\t\tscore,\n\t\t\tcomment,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error saving NPS vote');\n\t\t}\n\t}\n\n\tasync closeOpenSurveys(): Promise<void> {\n\t\tawait Nps.closeAllByStatus(NPSStatus.OPEN);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/nps/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/nps/service.ts","inputSourceMap":{"version":3,"file":"server/services/nps/service.ts","sourceRoot":"","sources":["server/services/nps/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHash } from 'crypto';\n\nimport type { INPSService, NPSVotePayload, NPSCreatePayload } from '@rocket.chat/core-services';\nimport { ServiceClassInternal, Banner, NPS } from '@rocket.chat/core-services';\nimport type { INpsVote, INps } from '@rocket.chat/core-typings';\nimport { NPSStatus, INpsVoteStatus } from '@rocket.chat/core-typings';\nimport { Nps, NpsVote, Settings } from '@rocket.chat/models';\n\nimport { SystemLogger } from '../../lib/logger/system';\nimport { getBannerForAdmins, notifyAdmins } from './notification';\nimport { sendNpsResults } from './sendNpsResults';\n\nexport class NPSService extends ServiceClassInternal implements INPSService {\n\tprotected name = 'nps';\n\n\tasync create(nps: NPSCreatePayload): Promise<boolean> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\tthrow new Error('Server opted-out for NPS surveys');\n\t\t}\n\n\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });\n\t\tif (!any) {\n\t\t\tif (nps.expireAt < nps.startAt || nps.expireAt < new Date()) {\n\t\t\t\tthrow new Error('NPS already expired');\n\t\t\t}\n\t\t\tawait Banner.create(getBannerForAdmins(nps.expireAt));\n\n\t\t\tawait notifyAdmins(nps.startAt);\n\t\t}\n\n\t\tconst { npsId, startAt, expireAt, createdBy } = nps;\n\n\t\ttry {\n\t\t\tawait Nps.save({\n\t\t\t\t_id: npsId,\n\t\t\t\tstartAt,\n\t\t\t\texpireAt,\n\t\t\t\tcreatedBy,\n\t\t\t\tstatus: NPSStatus.OPEN,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error creating NPS', err });\n\t\t\tthrow new Error('Error creating NPS');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync sendResults(): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst npsSending = await Nps.getOpenExpiredAlreadySending();\n\n\t\tconst nps = npsSending || (await Nps.getOpenExpiredAndStartSending());\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst total = await NpsVote.countByNpsId(nps._id);\n\n\t\tconst votesToSend = await NpsVote.findNotSentByNpsId(nps._id).toArray();\n\n\t\t// if there is nothing to sent, check if something gone wrong\n\t\tif (votesToSend.length === 0) {\n\t\t\t// check if still has votes left to send\n\t\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\t\tif (totalSent === total) {\n\t\t\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\t\t\tawait NpsVote.updateOldSendingToNewByNpsId(nps._id);\n\n\t\t\t// try again in 5 minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await NpsVote.findOneAndUpdate(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: vote._id,\n\t\t\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\t\t\t\t\tsentAt: today,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tidentifier: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tscore: 1,\n\t\t\t\t\t\t\tcomment: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn value;\n\t\t\t}),\n\t\t);\n\n\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\n\t\t\tconst votesWithoutIds = votes.map(({ identifier, roles, score, comment }) => ({\n\t\t\t\tidentifier,\n\t\t\t\troles,\n\t\t\t\tscore,\n\t\t\t\tcomment,\n\t\t\t}));\n\n\t\t\tconst payload = {\n\t\t\t\ttotal,\n\t\t\t\tvotes: votesWithoutIds,\n\t\t\t};\n\n\t\t\tawait sendNpsResults(nps._id, payload);\n\n\t\t\tawait NpsVote.updateVotesToSent(voteIds);\n\t\t}\n\n\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\tif (totalSent < total) {\n\t\t\t// send more in five minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t}\n\n\tasync vote({ userId, npsId, roles, score, comment }: NPSVotePayload): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!npsId || typeof npsId !== 'string') {\n\t\t\tthrow new Error('Invalid NPS id');\n\t\t}\n\n\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },\n\t\t});\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (nps.status !== NPSStatus.OPEN) {\n\t\t\tthrow new Error('NPS not open for votes');\n\t\t}\n\n\t\tconst today = new Date();\n\t\tif (today > nps.expireAt) {\n\t\t\tthrow new Error('NPS expired');\n\t\t}\n\n\t\tif (today < nps.startAt) {\n\t\t\tthrow new Error('NPS survey not started');\n\t\t}\n\n\t\tconst identifier = createHash('sha256').update(`${userId}${npsId}`).digest('hex');\n\n\t\tconst result = await NpsVote.save({\n\t\t\tts: new Date(),\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t\troles,\n\t\t\tscore,\n\t\t\tcomment,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error saving NPS vote');\n\t\t}\n\t}\n\n\tasync closeOpenSurveys(): Promise<void> {\n\t\tawait Nps.closeAllByStatus(NPSStatus.OPEN);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      NPSService: () => NPSService\n    });\n    let createHash;\n    module.link(\"crypto\", {\n      createHash(v) {\n        createHash = v;\n      }\n    }, 0);\n    let ServiceClassInternal, Banner, NPS;\n    module.link(\"@rocket.chat/core-services\", {\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      },\n      Banner(v) {\n        Banner = v;\n      },\n      NPS(v) {\n        NPS = v;\n      }\n    }, 1);\n    let NPSStatus, INpsVoteStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      NPSStatus(v) {\n        NPSStatus = v;\n      },\n      INpsVoteStatus(v) {\n        INpsVoteStatus = v;\n      }\n    }, 2);\n    let Nps, NpsVote, Settings;\n    module.link(\"@rocket.chat/models\", {\n      Nps(v) {\n        Nps = v;\n      },\n      NpsVote(v) {\n        NpsVote = v;\n      },\n      Settings(v) {\n        Settings = v;\n      }\n    }, 3);\n    let SystemLogger;\n    module.link(\"../../lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 4);\n    let getBannerForAdmins, notifyAdmins;\n    module.link(\"./notification\", {\n      getBannerForAdmins(v) {\n        getBannerForAdmins = v;\n      },\n      notifyAdmins(v) {\n        notifyAdmins = v;\n      }\n    }, 5);\n    let sendNpsResults;\n    module.link(\"./sendNpsResults\", {\n      sendNpsResults(v) {\n        sendNpsResults = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class NPSService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'nps';\n      }\n      async create(nps) {\n        const npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n        if (!npsEnabled) {\n          throw new Error('Server opted-out for NPS surveys');\n        }\n        const any = await Nps.findOne({}, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!any) {\n          if (nps.expireAt < nps.startAt || nps.expireAt < new Date()) {\n            throw new Error('NPS already expired');\n          }\n          await Banner.create(getBannerForAdmins(nps.expireAt));\n          await notifyAdmins(nps.startAt);\n        }\n        const {\n          npsId,\n          startAt,\n          expireAt,\n          createdBy\n        } = nps;\n        try {\n          await Nps.save({\n            _id: npsId,\n            startAt,\n            expireAt,\n            createdBy,\n            status: NPSStatus.OPEN\n          });\n        } catch (err) {\n          SystemLogger.error({\n            msg: 'Error creating NPS',\n            err\n          });\n          throw new Error('Error creating NPS');\n        }\n        return true;\n      }\n      async sendResults() {\n        const npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n        if (!npsEnabled) {\n          return;\n        }\n        const npsSending = await Nps.getOpenExpiredAlreadySending();\n        const nps = npsSending || (await Nps.getOpenExpiredAndStartSending());\n        if (!nps) {\n          return;\n        }\n        const total = await NpsVote.countByNpsId(nps._id);\n        const votesToSend = await NpsVote.findNotSentByNpsId(nps._id).toArray();\n        // if there is nothing to sent, check if something gone wrong\n        if (votesToSend.length === 0) {\n          // check if still has votes left to send\n          const totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n          if (totalSent === total) {\n            await Nps.updateStatusById(nps._id, NPSStatus.SENT);\n            return;\n          }\n          // update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n          await NpsVote.updateOldSendingToNewByNpsId(nps._id);\n          // try again in 5 minutes\n          setTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n          return;\n        }\n        const today = new Date();\n        const sending = await Promise.all(votesToSend.map(async vote => {\n          const {\n            value\n          } = await NpsVote.findOneAndUpdate({\n            _id: vote._id,\n            status: INpsVoteStatus.NEW\n          }, {\n            $set: {\n              status: INpsVoteStatus.SENDING,\n              sentAt: today\n            }\n          }, {\n            projection: {\n              identifier: 1,\n              roles: 1,\n              score: 1,\n              comment: 1\n            }\n          });\n          return value;\n        }));\n        const votes = sending.filter(Boolean);\n        if (votes.length > 0) {\n          const voteIds = votes.map(_ref => {\n            let {\n              _id\n            } = _ref;\n            return _id;\n          });\n          const votesWithoutIds = votes.map(_ref2 => {\n            let {\n              identifier,\n              roles,\n              score,\n              comment\n            } = _ref2;\n            return {\n              identifier,\n              roles,\n              score,\n              comment\n            };\n          });\n          const payload = {\n            total,\n            votes: votesWithoutIds\n          };\n          await sendNpsResults(nps._id, payload);\n          await NpsVote.updateVotesToSent(voteIds);\n        }\n        const totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n        if (totalSent < total) {\n          // send more in five minutes\n          setTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n          return;\n        }\n        await Nps.updateStatusById(nps._id, NPSStatus.SENT);\n      }\n      async vote(_ref3) {\n        let {\n          userId,\n          npsId,\n          roles,\n          score,\n          comment\n        } = _ref3;\n        const npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n        if (!npsEnabled) {\n          return;\n        }\n        if (!npsId || typeof npsId !== 'string') {\n          throw new Error('Invalid NPS id');\n        }\n        const nps = await Nps.findOneById(npsId, {\n          projection: {\n            status: 1,\n            startAt: 1,\n            expireAt: 1\n          }\n        });\n        if (!nps) {\n          return;\n        }\n        if (nps.status !== NPSStatus.OPEN) {\n          throw new Error('NPS not open for votes');\n        }\n        const today = new Date();\n        if (today > nps.expireAt) {\n          throw new Error('NPS expired');\n        }\n        if (today < nps.startAt) {\n          throw new Error('NPS survey not started');\n        }\n        const identifier = createHash('sha256').update(\"\".concat(userId).concat(npsId)).digest('hex');\n        const result = await NpsVote.save({\n          ts: new Date(),\n          npsId,\n          identifier,\n          roles,\n          score,\n          comment,\n          status: INpsVoteStatus.NEW\n        });\n        if (!result) {\n          throw new Error('Error saving NPS vote');\n        }\n      }\n      async closeOpenSurveys() {\n        await Nps.closeAllByStatus(NPSStatus.OPEN);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","NPSService","createHash","link","v","ServiceClassInternal","Banner","NPS","NPSStatus","INpsVoteStatus","Nps","NpsVote","Settings","SystemLogger","getBannerForAdmins","notifyAdmins","sendNpsResults","__reifyWaitForDeps__","constructor","arguments","name","create","nps","npsEnabled","getValueById","Error","any","findOne","projection","_id","expireAt","startAt","Date","npsId","createdBy","save","status","OPEN","err","error","msg","sendResults","npsSending","getOpenExpiredAlreadySending","getOpenExpiredAndStartSending","total","countByNpsId","votesToSend","findNotSentByNpsId","toArray","length","totalSent","countByNpsIdAndStatus","SENT","updateStatusById","updateOldSendingToNewByNpsId","setTimeout","today","sending","Promise","all","map","vote","value","findOneAndUpdate","NEW","$set","SENDING","sentAt","identifier","roles","score","comment","votes","filter","Boolean","voteIds","_ref","votesWithoutIds","_ref2","payload","updateVotesToSent","_ref3","userId","findOneById","update","concat","digest","result","ts","closeOpenSurveys","closeAllByStatus","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/nps/service.ts"],"sourcesContent":["import { createHash } from 'crypto';\n\nimport type { INPSService, NPSVotePayload, NPSCreatePayload } from '@rocket.chat/core-services';\nimport { ServiceClassInternal, Banner, NPS } from '@rocket.chat/core-services';\nimport type { INpsVote, INps } from '@rocket.chat/core-typings';\nimport { NPSStatus, INpsVoteStatus } from '@rocket.chat/core-typings';\nimport { Nps, NpsVote, Settings } from '@rocket.chat/models';\n\nimport { SystemLogger } from '../../lib/logger/system';\nimport { getBannerForAdmins, notifyAdmins } from './notification';\nimport { sendNpsResults } from './sendNpsResults';\n\nexport class NPSService extends ServiceClassInternal implements INPSService {\n\tprotected name = 'nps';\n\n\tasync create(nps: NPSCreatePayload): Promise<boolean> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\tthrow new Error('Server opted-out for NPS surveys');\n\t\t}\n\n\t\tconst any = await Nps.findOne({}, { projection: { _id: 1 } });\n\t\tif (!any) {\n\t\t\tif (nps.expireAt < nps.startAt || nps.expireAt < new Date()) {\n\t\t\t\tthrow new Error('NPS already expired');\n\t\t\t}\n\t\t\tawait Banner.create(getBannerForAdmins(nps.expireAt));\n\n\t\t\tawait notifyAdmins(nps.startAt);\n\t\t}\n\n\t\tconst { npsId, startAt, expireAt, createdBy } = nps;\n\n\t\ttry {\n\t\t\tawait Nps.save({\n\t\t\t\t_id: npsId,\n\t\t\t\tstartAt,\n\t\t\t\texpireAt,\n\t\t\t\tcreatedBy,\n\t\t\t\tstatus: NPSStatus.OPEN,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tSystemLogger.error({ msg: 'Error creating NPS', err });\n\t\t\tthrow new Error('Error creating NPS');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync sendResults(): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst npsSending = await Nps.getOpenExpiredAlreadySending();\n\n\t\tconst nps = npsSending || (await Nps.getOpenExpiredAndStartSending());\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst total = await NpsVote.countByNpsId(nps._id);\n\n\t\tconst votesToSend = await NpsVote.findNotSentByNpsId(nps._id).toArray();\n\n\t\t// if there is nothing to sent, check if something gone wrong\n\t\tif (votesToSend.length === 0) {\n\t\t\t// check if still has votes left to send\n\t\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\t\tif (totalSent === total) {\n\t\t\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update old votes (sent 5 minutes ago or more) in 'sending' status back to 'new'\n\t\t\tawait NpsVote.updateOldSendingToNewByNpsId(nps._id);\n\n\t\t\t// try again in 5 minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tconst today = new Date();\n\n\t\tconst sending = await Promise.all(\n\t\t\tvotesToSend.map(async (vote) => {\n\t\t\t\tconst { value } = await NpsVote.findOneAndUpdate(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: vote._id,\n\t\t\t\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tstatus: INpsVoteStatus.SENDING,\n\t\t\t\t\t\t\tsentAt: today,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tidentifier: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tscore: 1,\n\t\t\t\t\t\t\tcomment: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn value;\n\t\t\t}),\n\t\t);\n\n\t\tconst votes = sending.filter(Boolean) as Pick<INpsVote, '_id' | 'identifier' | 'roles' | 'score' | 'comment'>[];\n\t\tif (votes.length > 0) {\n\t\t\tconst voteIds = votes.map(({ _id }) => _id);\n\n\t\t\tconst votesWithoutIds = votes.map(({ identifier, roles, score, comment }) => ({\n\t\t\t\tidentifier,\n\t\t\t\troles,\n\t\t\t\tscore,\n\t\t\t\tcomment,\n\t\t\t}));\n\n\t\t\tconst payload = {\n\t\t\t\ttotal,\n\t\t\t\tvotes: votesWithoutIds,\n\t\t\t};\n\n\t\t\tawait sendNpsResults(nps._id, payload);\n\n\t\t\tawait NpsVote.updateVotesToSent(voteIds);\n\t\t}\n\n\t\tconst totalSent = await NpsVote.countByNpsIdAndStatus(nps._id, INpsVoteStatus.SENT);\n\t\tif (totalSent < total) {\n\t\t\t// send more in five minutes\n\t\t\tsetTimeout(() => NPS.sendResults(), 5 * 60 * 1000);\n\t\t\treturn;\n\t\t}\n\n\t\tawait Nps.updateStatusById(nps._id, NPSStatus.SENT);\n\t}\n\n\tasync vote({ userId, npsId, roles, score, comment }: NPSVotePayload): Promise<void> {\n\t\tconst npsEnabled = await Settings.getValueById('NPS_survey_enabled');\n\t\tif (!npsEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!npsId || typeof npsId !== 'string') {\n\t\t\tthrow new Error('Invalid NPS id');\n\t\t}\n\n\t\tconst nps = await Nps.findOneById<Pick<INps, 'status' | 'startAt' | 'expireAt'>>(npsId, {\n\t\t\tprojection: { status: 1, startAt: 1, expireAt: 1 },\n\t\t});\n\t\tif (!nps) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (nps.status !== NPSStatus.OPEN) {\n\t\t\tthrow new Error('NPS not open for votes');\n\t\t}\n\n\t\tconst today = new Date();\n\t\tif (today > nps.expireAt) {\n\t\t\tthrow new Error('NPS expired');\n\t\t}\n\n\t\tif (today < nps.startAt) {\n\t\t\tthrow new Error('NPS survey not started');\n\t\t}\n\n\t\tconst identifier = createHash('sha256').update(`${userId}${npsId}`).digest('hex');\n\n\t\tconst result = await NpsVote.save({\n\t\t\tts: new Date(),\n\t\t\tnpsId,\n\t\t\tidentifier,\n\t\t\troles,\n\t\t\tscore,\n\t\t\tcomment,\n\t\t\tstatus: INpsVoteStatus.NEW,\n\t\t});\n\t\tif (!result) {\n\t\t\tthrow new Error('Error saving NPS vote');\n\t\t}\n\t}\n\n\tasync closeOpenSurveys(): Promise<void> {\n\t\tawait Nps.closeAllByStatus(NPSStatus.OPEN);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"169fc95a34d0cee652ee53940ac12e5722c964e8"}
