{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/groups.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/groups.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/groups.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/groups.ts","sourceRoot":"","sources":["app/api/server/v1/groups.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team, isMeteorError } from '@rocket.chat/core-services';\nimport type { IIntegration, IUser, IRoom, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport { isGroupsOnlineProps, isGroupsMessagesProps } from '@rocket.chat/rest-typings';\nimport { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../../authorization/server';\nimport { hasAllPermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\nasync function getRoomFromParams(params: { roomId?: string } | { roomName?: string }): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst roomOptions = {\n\t\tprojection: {\n\t\t\t...roomAccessAttributes,\n\t\t\tt: 1,\n\t\t\tro: 1,\n\t\t\tname: 1,\n\t\t\tfname: 1,\n\t\t\tprid: 1,\n\t\t\tarchived: 1,\n\t\t\tbroadcast: 1,\n\t\t},\n\t};\n\n\tconst room = await (() => {\n\t\tif ('roomId' in params) {\n\t\t\treturn Rooms.findOneById(params.roomId || '', roomOptions);\n\t\t}\n\t\tif ('roomName' in params) {\n\t\t\treturn Rooms.findOneByName(params.roomName || '', roomOptions);\n\t\t}\n\t})();\n\n\tif (!room || room.t !== 'p') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\treturn room;\n}\n\n// Returns the private group subscription IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findPrivateGroupByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId: string;\n\tcheckedArchived?: boolean;\n}): Promise<{\n\trid: string;\n\topen: boolean;\n\tro: boolean;\n\tt: string;\n\tname: string;\n\tbroadcast: boolean;\n}> {\n\tconst room = await getRoomFromParams(params);\n\n\tconst user = await Users.findOneById(userId, { projections: { username: 1 } });\n\n\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\t// discussions have their names saved on `fname` property\n\tconst roomName = room.prid ? room.fname : room.name;\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${roomName}, is archived`);\n\t}\n\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });\n\n\treturn {\n\t\trid: room._id,\n\t\topen: Boolean(sub?.open),\n\t\tro: Boolean(room.ro),\n\t\tt: room.t,\n\t\tname: roomName ?? '',\n\t\tbroadcast: Boolean(room.broadcast),\n\t};\n}\n\nAPI.v1.addRoute(\n\t'groups.addAll',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Archives a private group only if it wasn't\nAPI.v1.addRoute(\n\t'groups.archive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst params = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet room;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (('roomId' in params && !params.roomId) || ('roomName' in params && !params.roomName)) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tif ('roomId' in params) {\n\t\t\t\troom = await Rooms.findOneById(params.roomId || '');\n\t\t\t} else if ('roomName' in params) {\n\t\t\t\troom = await Rooms.findOneByName(params.roomName || '');\n\t\t\t}\n\n\t\t\tif (!room || room.t !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tif (room.archived) {\n\t\t\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${room.name}, is archived`);\n\t\t\t}\n\n\t\t\tif (params.userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tuser = params.userId;\n\t\t\t}\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('Body param \"name\" is required');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.members && !Array.isArray(this.bodyParams.members)) {\n\t\t\t\treturn API.v1.failure('Body param \"members\" must be an array if provided');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"customFields\" must be an object if provided');\n\t\t\t}\n\t\t\tif (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"extraData\" must be an object if provided');\n\t\t\t}\n\n\t\t\tconst readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n\n\t\t\ttry {\n\t\t\t\tconst result = await createPrivateGroupMethod(\n\t\t\t\t\tthis.user,\n\t\t\t\t\tthis.bodyParams.name,\n\t\t\t\t\tthis.bodyParams.members ? this.bodyParams.members : [],\n\t\t\t\t\treadOnly,\n\t\t\t\t\tthis.bodyParams.customFields,\n\t\t\t\t\tthis.bodyParams.extraData,\n\t\t\t\t\tthis.bodyParams.excludeSelf ?? false,\n\t\t\t\t);\n\n\t\t\t\tconst room = await Rooms.findOneById(result.rid, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (!room) {\n\t\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t\t});\n\t\t\t} catch (error: unknown) {\n\t\t\t\tif (isMeteorError(error) && error.reason === 'error-not-allowed') {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(findResult.rid, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.files',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.rid });\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPrivateGroups = true;\n\t\t\tif (this.queryParams.includeAllPrivateGroups) {\n\t\t\t\tincludeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n\t\t\t}\n\n\t\t\tconst channelsToSearch = [`#${findResult.name}`];\n\t\t\tif (includeAllPrivateGroups) {\n\t\t\t\tchannelsToSearch.push('all_private_groups');\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n\t\t\t\tchannel: { $in: channelsToSearch },\n\t\t\t}) as Filter<IIntegration>;\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.history',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(String(this.queryParams.count));\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(String(this.queryParams.offset));\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult.rid,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst roomId = 'roomId' in this.bodyParams ? this.bodyParams.roomId : '';\n\t\t\tconst roomName = 'roomName' in this.bodyParams ? this.bodyParams.roomName : '';\n\t\t\tconst idOrName = roomId || roomName;\n\n\t\t\tif (!idOrName?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst { _id: rid, t: type } = (await Rooms.findOneByIdOrName(idOrName)) || {};\n\n\t\t\tif (!rid || type !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\tthrow new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('addUsersToRoom', { rid, users: users.map((u) => u.username) });\n\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.kick',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await getRoomFromParams(this.bodyParams);\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: room._id, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// List Private Groups a user has access to\nAPI.v1.addRoute(\n\t'groups.list',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroups: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('p', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [groups, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(groups.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: groups.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.listAll',\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' as RoomType });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(rooms.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.messages',\n\t{ authRequired: true, validateParams: isGroupsMessagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// TODO: CACHE: same as channels.online\nAPI.v1.addRoute(\n\t'groups.online',\n\t{ authRequired: true, validateParams: isGroupsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'p',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Group does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User does not exists');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.open',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already open for the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomName', this.bodyParams.name);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setReadOnly',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.readOnly === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"readOnly\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The private group type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setAnnouncement',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('announcement')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"announcement\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomAnnouncement', this.bodyParams.announcement || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.unarchive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: any) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setEncrypted',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!Match.test(this.bodyParams, Match.ObjectIncluding({ encrypted: Boolean }))) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"encrypted\" is required');\n\t\t\t}\n\t\t\tconst { encrypted, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.convertToTeam',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (('roomId' in this.bodyParams && !this.bodyParams.roomId) || ('roomName' in this.bodyParams && !this.bodyParams.roomName)) {\n\t\t\t\treturn API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst room = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Private group not found');\n\t\t\t}\n\n\t\t\tif (!(await hasAllPermissionAsync(this.userId, ['create-team', 'edit-room'], room.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/groups.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/groups.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/groups.ts","sourceRoot":"","sources":["app/api/server/v1/groups.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team, isMeteorError } from '@rocket.chat/core-services';\nimport type { IIntegration, IUser, IRoom, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport { isGroupsOnlineProps, isGroupsMessagesProps } from '@rocket.chat/rest-typings';\nimport { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../../authorization/server';\nimport { hasAllPermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\nasync function getRoomFromParams(params: { roomId?: string } | { roomName?: string }): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst roomOptions = {\n\t\tprojection: {\n\t\t\t...roomAccessAttributes,\n\t\t\tt: 1,\n\t\t\tro: 1,\n\t\t\tname: 1,\n\t\t\tfname: 1,\n\t\t\tprid: 1,\n\t\t\tarchived: 1,\n\t\t\tbroadcast: 1,\n\t\t},\n\t};\n\n\tconst room = await (() => {\n\t\tif ('roomId' in params) {\n\t\t\treturn Rooms.findOneById(params.roomId || '', roomOptions);\n\t\t}\n\t\tif ('roomName' in params) {\n\t\t\treturn Rooms.findOneByName(params.roomName || '', roomOptions);\n\t\t}\n\t})();\n\n\tif (!room || room.t !== 'p') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\treturn room;\n}\n\n// Returns the private group subscription IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findPrivateGroupByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId: string;\n\tcheckedArchived?: boolean;\n}): Promise<{\n\trid: string;\n\topen: boolean;\n\tro: boolean;\n\tt: string;\n\tname: string;\n\tbroadcast: boolean;\n}> {\n\tconst room = await getRoomFromParams(params);\n\n\tconst user = await Users.findOneById(userId, { projections: { username: 1 } });\n\n\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\t// discussions have their names saved on `fname` property\n\tconst roomName = room.prid ? room.fname : room.name;\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${roomName}, is archived`);\n\t}\n\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });\n\n\treturn {\n\t\trid: room._id,\n\t\topen: Boolean(sub?.open),\n\t\tro: Boolean(room.ro),\n\t\tt: room.t,\n\t\tname: roomName ?? '',\n\t\tbroadcast: Boolean(room.broadcast),\n\t};\n}\n\nAPI.v1.addRoute(\n\t'groups.addAll',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Archives a private group only if it wasn't\nAPI.v1.addRoute(\n\t'groups.archive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst params = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet room;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (('roomId' in params && !params.roomId) || ('roomName' in params && !params.roomName)) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tif ('roomId' in params) {\n\t\t\t\troom = await Rooms.findOneById(params.roomId || '');\n\t\t\t} else if ('roomName' in params) {\n\t\t\t\troom = await Rooms.findOneByName(params.roomName || '');\n\t\t\t}\n\n\t\t\tif (!room || room.t !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tif (room.archived) {\n\t\t\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${room.name}, is archived`);\n\t\t\t}\n\n\t\t\tif (params.userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tuser = params.userId;\n\t\t\t}\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('Body param \"name\" is required');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.members && !Array.isArray(this.bodyParams.members)) {\n\t\t\t\treturn API.v1.failure('Body param \"members\" must be an array if provided');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"customFields\" must be an object if provided');\n\t\t\t}\n\t\t\tif (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"extraData\" must be an object if provided');\n\t\t\t}\n\n\t\t\tconst readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n\n\t\t\ttry {\n\t\t\t\tconst result = await createPrivateGroupMethod(\n\t\t\t\t\tthis.user,\n\t\t\t\t\tthis.bodyParams.name,\n\t\t\t\t\tthis.bodyParams.members ? this.bodyParams.members : [],\n\t\t\t\t\treadOnly,\n\t\t\t\t\tthis.bodyParams.customFields,\n\t\t\t\t\tthis.bodyParams.extraData,\n\t\t\t\t\tthis.bodyParams.excludeSelf ?? false,\n\t\t\t\t);\n\n\t\t\t\tconst room = await Rooms.findOneById(result.rid, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (!room) {\n\t\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t\t});\n\t\t\t} catch (error: unknown) {\n\t\t\t\tif (isMeteorError(error) && error.reason === 'error-not-allowed') {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(findResult.rid, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.files',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.rid });\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPrivateGroups = true;\n\t\t\tif (this.queryParams.includeAllPrivateGroups) {\n\t\t\t\tincludeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n\t\t\t}\n\n\t\t\tconst channelsToSearch = [`#${findResult.name}`];\n\t\t\tif (includeAllPrivateGroups) {\n\t\t\t\tchannelsToSearch.push('all_private_groups');\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n\t\t\t\tchannel: { $in: channelsToSearch },\n\t\t\t}) as Filter<IIntegration>;\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.history',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(String(this.queryParams.count));\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(String(this.queryParams.offset));\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult.rid,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst roomId = 'roomId' in this.bodyParams ? this.bodyParams.roomId : '';\n\t\t\tconst roomName = 'roomName' in this.bodyParams ? this.bodyParams.roomName : '';\n\t\t\tconst idOrName = roomId || roomName;\n\n\t\t\tif (!idOrName?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst { _id: rid, t: type } = (await Rooms.findOneByIdOrName(idOrName)) || {};\n\n\t\t\tif (!rid || type !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\tthrow new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('addUsersToRoom', { rid, users: users.map((u) => u.username) });\n\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.kick',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await getRoomFromParams(this.bodyParams);\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: room._id, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// List Private Groups a user has access to\nAPI.v1.addRoute(\n\t'groups.list',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroups: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('p', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [groups, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(groups.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: groups.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.listAll',\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' as RoomType });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(rooms.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.messages',\n\t{ authRequired: true, validateParams: isGroupsMessagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// TODO: CACHE: same as channels.online\nAPI.v1.addRoute(\n\t'groups.online',\n\t{ authRequired: true, validateParams: isGroupsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'p',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Group does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User does not exists');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.open',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already open for the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomName', this.bodyParams.name);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setReadOnly',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.readOnly === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"readOnly\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The private group type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setAnnouncement',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('announcement')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"announcement\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomAnnouncement', this.bodyParams.announcement || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.unarchive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: any) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setEncrypted',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!Match.test(this.bodyParams, Match.ObjectIncluding({ encrypted: Boolean }))) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"encrypted\" is required');\n\t\t\t}\n\t\t\tconst { encrypted, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.convertToTeam',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (('roomId' in this.bodyParams && !this.bodyParams.roomId) || ('roomName' in this.bodyParams && !this.bodyParams.roomName)) {\n\t\t\t\treturn API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst room = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Private group not found');\n\t\t\t}\n\n\t\t\tif (!(await hasAllPermissionAsync(this.userId, ['create-team', 'edit-room'], room.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"activeUsersOnly\"],\n      _excluded2 = [\"encrypted\"];\n    let Team, isMeteorError;\n    module.link(\"@rocket.chat/core-services\", {\n      Team(v) {\n        Team = v;\n      },\n      isMeteorError(v) {\n        isMeteorError = v;\n      }\n    }, 0);\n    let Integrations, Messages, Rooms, Subscriptions, Uploads, Users;\n    module.link(\"@rocket.chat/models\", {\n      Integrations(v) {\n        Integrations = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let isGroupsOnlineProps, isGroupsMessagesProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isGroupsOnlineProps(v) {\n        isGroupsOnlineProps = v;\n      },\n      isGroupsMessagesProps(v) {\n        isGroupsMessagesProps = v;\n      }\n    }, 2);\n    let check, Match;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      },\n      Match(v) {\n        Match = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let eraseRoom;\n    module.link(\"../../../../server/lib/eraseRoom\", {\n      eraseRoom(v) {\n        eraseRoom = v;\n      }\n    }, 5);\n    let findUsersOfRoom;\n    module.link(\"../../../../server/lib/findUsersOfRoom\", {\n      findUsersOfRoom(v) {\n        findUsersOfRoom = v;\n      }\n    }, 6);\n    let hideRoomMethod;\n    module.link(\"../../../../server/methods/hideRoom\", {\n      hideRoomMethod(v) {\n        hideRoomMethod = v;\n      }\n    }, 7);\n    let removeUserFromRoomMethod;\n    module.link(\"../../../../server/methods/removeUserFromRoom\", {\n      removeUserFromRoomMethod(v) {\n        removeUserFromRoomMethod = v;\n      }\n    }, 8);\n    let canAccessRoomAsync, roomAccessAttributes;\n    module.link(\"../../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      },\n      roomAccessAttributes(v) {\n        roomAccessAttributes = v;\n      }\n    }, 9);\n    let hasAllPermissionAsync, hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasAllPermissionAsync(v) {\n        hasAllPermissionAsync = v;\n      },\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 10);\n    let saveRoomSettings;\n    module.link(\"../../../channel-settings/server/methods/saveRoomSettings\", {\n      saveRoomSettings(v) {\n        saveRoomSettings = v;\n      }\n    }, 11);\n    let mountIntegrationQueryBasedOnPermissions;\n    module.link(\"../../../integrations/server/lib/mountQueriesBasedOnPermission\", {\n      mountIntegrationQueryBasedOnPermissions(v) {\n        mountIntegrationQueryBasedOnPermissions = v;\n      }\n    }, 12);\n    let createPrivateGroupMethod;\n    module.link(\"../../../lib/server/methods/createPrivateGroup\", {\n      createPrivateGroupMethod(v) {\n        createPrivateGroupMethod = v;\n      }\n    }, 13);\n    let leaveRoomMethod;\n    module.link(\"../../../lib/server/methods/leaveRoom\", {\n      leaveRoomMethod(v) {\n        leaveRoomMethod = v;\n      }\n    }, 14);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 15);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 16);\n    let addUserToFileObj;\n    module.link(\"../helpers/addUserToFileObj\", {\n      addUserToFileObj(v) {\n        addUserToFileObj = v;\n      }\n    }, 17);\n    let composeRoomWithLastMessage;\n    module.link(\"../helpers/composeRoomWithLastMessage\", {\n      composeRoomWithLastMessage(v) {\n        composeRoomWithLastMessage = v;\n      }\n    }, 18);\n    let getLoggedInUser;\n    module.link(\"../helpers/getLoggedInUser\", {\n      getLoggedInUser(v) {\n        getLoggedInUser = v;\n      }\n    }, 19);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 20);\n    let getUserFromParams, getUserListFromParams;\n    module.link(\"../helpers/getUserFromParams\", {\n      getUserFromParams(v) {\n        getUserFromParams = v;\n      },\n      getUserListFromParams(v) {\n        getUserListFromParams = v;\n      }\n    }, 21);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function getRoomFromParams(params) {\n      if (!('roomId' in params) && !('roomName' in params) || 'roomId' in params && !params.roomId && 'roomName' in params && !params.roomName) {\n        throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n      }\n      const roomOptions = {\n        projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n          t: 1,\n          ro: 1,\n          name: 1,\n          fname: 1,\n          prid: 1,\n          archived: 1,\n          broadcast: 1\n        })\n      };\n      const room = await (() => {\n        if ('roomId' in params) {\n          return Rooms.findOneById(params.roomId || '', roomOptions);\n        }\n        if ('roomName' in params) {\n          return Rooms.findOneByName(params.roomName || '', roomOptions);\n        }\n      })();\n      if (!room || room.t !== 'p') {\n        throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n      }\n      return room;\n    }\n    // Returns the private group subscription IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\n    async function findPrivateGroupByIdOrName(_ref) {\n      let {\n        params,\n        checkedArchived = true,\n        userId\n      } = _ref;\n      const room = await getRoomFromParams(params);\n      const user = await Users.findOneById(userId, {\n        projections: {\n          username: 1\n        }\n      });\n      if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n        throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n      }\n      // discussions have their names saved on `fname` property\n      const roomName = room.prid ? room.fname : room.name;\n      if (checkedArchived && room.archived) {\n        throw new Meteor.Error('error-room-archived', \"The private group, \".concat(roomName, \", is archived\"));\n      }\n      const sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, {\n        projection: {\n          open: 1\n        }\n      });\n      return {\n        rid: room._id,\n        open: Boolean(sub === null || sub === void 0 ? void 0 : sub.open),\n        ro: Boolean(room.ro),\n        t: room.t,\n        name: roomName !== null && roomName !== void 0 ? roomName : '',\n        broadcast: Boolean(room.broadcast)\n      };\n    }\n    API.v1.addRoute('groups.addAll', {\n      authRequired: true\n    }, {\n      async post() {\n        const _this$bodyParams = this.bodyParams,\n          {\n            activeUsersOnly\n          } = _this$bodyParams,\n          params = _objectWithoutProperties(_this$bodyParams, _excluded);\n        const findResult = await findPrivateGroupByIdOrName({\n          params,\n          userId: this.userId\n        });\n        await Meteor.callAsync('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.addModerator', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomModerator', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.addOwner', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomOwner', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.addLeader', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomLeader', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    // Archives a private group only if it wasn't\n    API.v1.addRoute('groups.archive', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await Meteor.callAsync('archiveRoom', findResult.rid);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.close', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        if (!findResult.open) {\n          return API.v1.failure(\"The private group, \".concat(findResult.name, \", is already closed to the sender\"));\n        }\n        await hideRoomMethod(this.userId, findResult.rid);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.counters', {\n      authRequired: true\n    }, {\n      async get() {\n        const access = await hasPermissionAsync(this.userId, 'view-room-administration');\n        const params = this.queryParams;\n        let user = this.userId;\n        let room;\n        let unreads = null;\n        let userMentions = null;\n        let unreadsFrom = null;\n        let joined = false;\n        let msgs = null;\n        let latest = null;\n        let members = null;\n        if ('roomId' in params && !params.roomId || 'roomName' in params && !params.roomName) {\n          throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n        }\n        if ('roomId' in params) {\n          room = await Rooms.findOneById(params.roomId || '');\n        } else if ('roomName' in params) {\n          room = await Rooms.findOneByName(params.roomName || '');\n        }\n        if (!room || room.t !== 'p') {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        if (room.archived) {\n          throw new Meteor.Error('error-room-archived', \"The private group, \".concat(room.name, \", is archived\"));\n        }\n        if (params.userId) {\n          if (!access) {\n            return API.v1.forbidden();\n          }\n          user = params.userId;\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n        const lm = room.lm ? room.lm : room._updatedAt;\n        if (subscription !== null && subscription !== void 0 && subscription.open) {\n          unreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n          unreadsFrom = subscription.ls || subscription.ts;\n          userMentions = subscription.userMentions;\n          joined = true;\n        }\n        if (access || joined) {\n          msgs = room.msgs;\n          latest = lm;\n          members = room.usersCount;\n        }\n        return API.v1.success({\n          joined,\n          members,\n          unreads,\n          unreadsFrom,\n          msgs,\n          latest,\n          userMentions\n        });\n      }\n    });\n    // Create Private Group\n    API.v1.addRoute('groups.create', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.name) {\n          return API.v1.failure('Body param \"name\" is required');\n        }\n        if (this.bodyParams.members && !Array.isArray(this.bodyParams.members)) {\n          return API.v1.failure('Body param \"members\" must be an array if provided');\n        }\n        if (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n          return API.v1.failure('Body param \"customFields\" must be an object if provided');\n        }\n        if (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n          return API.v1.failure('Body param \"extraData\" must be an object if provided');\n        }\n        const readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n        try {\n          var _this$bodyParams$excl;\n          const result = await createPrivateGroupMethod(this.user, this.bodyParams.name, this.bodyParams.members ? this.bodyParams.members : [], readOnly, this.bodyParams.customFields, this.bodyParams.extraData, (_this$bodyParams$excl = this.bodyParams.excludeSelf) !== null && _this$bodyParams$excl !== void 0 ? _this$bodyParams$excl : false);\n          const room = await Rooms.findOneById(result.rid, {\n            projection: API.v1.defaultFieldsToExclude\n          });\n          if (!room) {\n            throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n          }\n          return API.v1.success({\n            group: await composeRoomWithLastMessage(room, this.userId)\n          });\n        } catch (error) {\n          if (isMeteorError(error) && error.reason === 'error-not-allowed') {\n            return API.v1.forbidden();\n          }\n          throw error;\n        }\n      }\n    });\n    API.v1.addRoute('groups.delete', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        await eraseRoom(findResult.rid, this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.files', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = Object.assign({}, query, {\n          rid: findResult.rid\n        });\n        const {\n          cursor,\n          totalCount\n        } = await Uploads.findPaginatedWithoutThumbs(ourQuery, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          files: await addUserToFileObj(files),\n          count: files.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('groups.getIntegrations', {\n      authRequired: true,\n      permissionsRequired: {\n        GET: {\n          permissions: ['manage-outgoing-integrations', 'manage-own-outgoing-integrations', 'manage-incoming-integrations', 'manage-own-incoming-integrations'],\n          operation: 'hasAny'\n        }\n      }\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        let includeAllPrivateGroups = true;\n        if (this.queryParams.includeAllPrivateGroups) {\n          includeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n        }\n        const channelsToSearch = [\"#\".concat(findResult.name)];\n        if (includeAllPrivateGroups) {\n          channelsToSearch.push('all_private_groups');\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields: projection,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n          channel: {\n            $in: channelsToSearch\n          }\n        });\n        const {\n          cursor,\n          totalCount\n        } = await Integrations.findPaginated(ourQuery, {\n          sort: sort || {\n            _createdAt: 1\n          },\n          skip: offset,\n          limit: count,\n          projection\n        });\n        const [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          integrations,\n          count: integrations.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('groups.history', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        let latestDate = new Date();\n        if (this.queryParams.latest) {\n          latestDate = new Date(this.queryParams.latest);\n        }\n        let oldestDate = undefined;\n        if (this.queryParams.oldest) {\n          oldestDate = new Date(this.queryParams.oldest);\n        }\n        const inclusive = this.queryParams.inclusive || false;\n        let count = 20;\n        if (this.queryParams.count) {\n          count = parseInt(String(this.queryParams.count));\n        }\n        let offset = 0;\n        if (this.queryParams.offset) {\n          offset = parseInt(String(this.queryParams.offset));\n        }\n        const unreads = this.queryParams.unreads || false;\n        const showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n        const result = await Meteor.callAsync('getChannelHistory', {\n          rid: findResult.rid,\n          latest: latestDate,\n          oldest: oldestDate,\n          inclusive,\n          offset,\n          count,\n          unreads,\n          showThreadMessages\n        });\n        if (!result) {\n          return API.v1.forbidden();\n        }\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('groups.info', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.invite', {\n      authRequired: true\n    }, {\n      async post() {\n        const roomId = 'roomId' in this.bodyParams ? this.bodyParams.roomId : '';\n        const roomName = 'roomName' in this.bodyParams ? this.bodyParams.roomName : '';\n        const idOrName = roomId || roomName;\n        if (!(idOrName !== null && idOrName !== void 0 && idOrName.trim())) {\n          throw new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n        }\n        const {\n          _id: rid,\n          t: type\n        } = (await Rooms.findOneByIdOrName(idOrName)) || {};\n        if (!rid || type !== 'p') {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        const users = await getUserListFromParams(this.bodyParams);\n        if (!users.length) {\n          throw new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n        }\n        await Meteor.callAsync('addUsersToRoom', {\n          rid,\n          users: users.map(u => u.username)\n        });\n        const room = await Rooms.findOneById(rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.kick', {\n      authRequired: true\n    }, {\n      async post() {\n        const room = await getRoomFromParams(this.bodyParams);\n        const user = await getUserFromParams(this.bodyParams);\n        if (!(user !== null && user !== void 0 && user.username)) {\n          return API.v1.failure('Invalid user');\n        }\n        await removeUserFromRoomMethod(this.userId, {\n          rid: room._id,\n          username: user.username\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.leave', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await Users.findOneById(this.userId);\n        if (!user) {\n          return API.v1.failure('Invalid user');\n        }\n        await leaveRoomMethod(user, findResult.rid);\n        return API.v1.success();\n      }\n    });\n    // List Private Groups a user has access to\n    API.v1.addRoute('groups.list', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields\n        } = await this.parseJsonQuery();\n        const subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], {\n          projection: {\n            rid: 1\n          }\n        }).toArray();\n        const rids = subs.map(_ref2 => {\n          let {\n            rid\n          } = _ref2;\n          return rid;\n        }).filter(Boolean);\n        if (rids.length === 0) {\n          return API.v1.success({\n            groups: [],\n            offset,\n            count: 0,\n            total: 0\n          });\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Rooms.findPaginatedByTypeAndIds('p', rids, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [groups, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          groups: await Promise.all(groups.map(room => composeRoomWithLastMessage(room, this.userId))),\n          offset,\n          count: groups.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('groups.listAll', {\n      authRequired: true,\n      permissionsRequired: ['view-room-administration']\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = Object.assign({}, query, {\n          t: 'p'\n        });\n        const {\n          cursor,\n          totalCount\n        } = await Rooms.findPaginated(ourQuery, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          groups: await Promise.all(rooms.map(room => composeRoomWithLastMessage(room, this.userId))),\n          offset,\n          count: rooms.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('groups.members', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId\n        });\n        if (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult.rid))) {\n          return API.v1.forbidden();\n        }\n        const {\n          offset: skip,\n          count: limit\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort = {}\n        } = await this.parseJsonQuery();\n        check(this.queryParams, Match.ObjectIncluding({\n          status: Match.Maybe([String]),\n          filter: Match.Maybe(String)\n        }));\n        const {\n          status,\n          filter\n        } = this.queryParams;\n        const {\n          cursor,\n          totalCount\n        } = await findUsersOfRoom(_objectSpread(_objectSpread({\n          rid: findResult.rid\n        }, status && {\n          status: {\n            $in: status\n          }\n        }), {}, {\n          skip,\n          limit,\n          filter\n        }, (sort === null || sort === void 0 ? void 0 : sort.username) && {\n          sort: {\n            username: sort.username\n          }\n        }));\n        const [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          members,\n          count: members.length,\n          offset: skip,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('groups.messages', {\n      authRequired: true,\n      validateParams: isGroupsMessagesProps\n    }, {\n      async get() {\n        const {\n          roomId,\n          mentionIds,\n          starredIds,\n          pinned\n        } = this.queryParams;\n        const findResult = await findPrivateGroupByIdOrName({\n          params: {\n            roomId\n          },\n          userId: this.userId\n        });\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const parseIds = (ids, field) => typeof ids === 'string' && ids ? {\n          [field]: {\n            $in: ids.split(',').map(id => id.trim())\n          }\n        } : {};\n        const ourQuery = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, query), {}, {\n          rid: findResult.rid\n        }, parseIds(mentionIds, 'mentions._id')), parseIds(starredIds, 'starred._id')), pinned && pinned.toLowerCase() === 'true' ? {\n          pinned: true\n        } : {});\n        const {\n          cursor,\n          totalCount\n        } = Messages.findPaginated(ourQuery, {\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(messages, this.userId),\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    // TODO: CACHE: same as channels.online\n    API.v1.addRoute('groups.online', {\n      authRequired: true,\n      validateParams: isGroupsOnlineProps\n    }, {\n      async get() {\n        const {\n          query\n        } = await this.parseJsonQuery();\n        const {\n          _id\n        } = this.queryParams;\n        if ((!query || Object.keys(query).length === 0) && !_id) {\n          return API.v1.failure('Invalid query');\n        }\n        const filter = _objectSpread(_objectSpread(_objectSpread({}, query), _id ? {\n          _id\n        } : {}), {}, {\n          t: 'p'\n        });\n        const room = await Rooms.findOne(filter);\n        if (!room) {\n          return API.v1.failure('Group does not exists');\n        }\n        const user = await getLoggedInUser(this.request);\n        if (!user) {\n          return API.v1.failure('User does not exists');\n        }\n        if (!(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        const online = await Users.findUsersNotOffline({\n          projection: {\n            username: 1\n          }\n        }).toArray();\n        const onlineInRoom = await Promise.all(online.map(async user => {\n          const subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n            projection: {\n              _id: 1,\n              username: 1\n            }\n          });\n          if (subscription) {\n            return {\n              _id: user._id,\n              username: user.username\n            };\n          }\n        }));\n        return API.v1.success({\n          online: onlineInRoom.filter(Boolean)\n        });\n      }\n    });\n    API.v1.addRoute('groups.open', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        if (findResult.open) {\n          return API.v1.failure(\"The private group, \".concat(findResult.name, \", is already open for the sender\"));\n        }\n        await Meteor.callAsync('openRoom', findResult.rid);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.removeModerator', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomModerator', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.removeOwner', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomOwner', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.removeLeader', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.rename', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$name;\n        if (!((_this$bodyParams$name = this.bodyParams.name) !== null && _this$bodyParams$name !== void 0 && _this$bodyParams$name.trim())) {\n          return API.v1.failure('The bodyParam \"name\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomName', this.bodyParams.name);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.setCustomFields', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n          return API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.setDescription', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('description')) {\n          return API.v1.failure('The bodyParam \"description\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.description || '');\n        return API.v1.success({\n          description: this.bodyParams.description || ''\n        });\n      }\n    });\n    API.v1.addRoute('groups.setPurpose', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('purpose')) {\n          return API.v1.failure('The bodyParam \"purpose\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.purpose || '');\n        return API.v1.success({\n          purpose: this.bodyParams.purpose || ''\n        });\n      }\n    });\n    API.v1.addRoute('groups.setReadOnly', {\n      authRequired: true\n    }, {\n      async post() {\n        if (typeof this.bodyParams.readOnly === 'undefined') {\n          return API.v1.failure('The bodyParam \"readOnly\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        if (findResult.ro === this.bodyParams.readOnly) {\n          return API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult.rid, 'readOnly', this.bodyParams.readOnly);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.setTopic', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('topic')) {\n          return API.v1.failure('The bodyParam \"topic\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomTopic', this.bodyParams.topic || '');\n        return API.v1.success({\n          topic: this.bodyParams.topic || ''\n        });\n      }\n    });\n    API.v1.addRoute('groups.setType', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$type;\n        if (!((_this$bodyParams$type = this.bodyParams.type) !== null && _this$bodyParams$type !== void 0 && _this$bodyParams$type.trim())) {\n          return API.v1.failure('The bodyParam \"type\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        if (findResult.t === this.bodyParams.type) {\n          return API.v1.failure('The private group type is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult.rid, 'roomType', this.bodyParams.type);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.setAnnouncement', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('announcement')) {\n          return API.v1.failure('The bodyParam \"announcement\" is required');\n        }\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'roomAnnouncement', this.bodyParams.announcement || '');\n        return API.v1.success({\n          announcement: this.bodyParams.announcement || ''\n        });\n      }\n    });\n    API.v1.addRoute('groups.unarchive', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId,\n          checkedArchived: false\n        });\n        await Meteor.callAsync('unarchiveRoom', findResult.rid);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('groups.roles', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId\n        });\n        const roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n        return API.v1.success({\n          roles\n        });\n      }\n    });\n    API.v1.addRoute('groups.moderators', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findPrivateGroupByIdOrName({\n          params: this.queryParams,\n          userId: this.userId\n        });\n        const moderators = (await Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n          projection: {\n            u: 1\n          }\n        }).toArray()).map(sub => sub.u);\n        return API.v1.success({\n          moderators\n        });\n      }\n    });\n    API.v1.addRoute('groups.setEncrypted', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!Match.test(this.bodyParams, Match.ObjectIncluding({\n          encrypted: Boolean\n        }))) {\n          return API.v1.failure('The bodyParam \"encrypted\" is required');\n        }\n        const _this$bodyParams2 = this.bodyParams,\n          {\n            encrypted\n          } = _this$bodyParams2,\n          params = _objectWithoutProperties(_this$bodyParams2, _excluded2);\n        const findResult = await findPrivateGroupByIdOrName({\n          params,\n          userId: this.userId\n        });\n        await saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n        const room = await Rooms.findOneById(findResult.rid, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n        }\n        return API.v1.success({\n          group: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('groups.convertToTeam', {\n      authRequired: true\n    }, {\n      async post() {\n        if ('roomId' in this.bodyParams && !this.bodyParams.roomId || 'roomName' in this.bodyParams && !this.bodyParams.roomName) {\n          return API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n        }\n        const room = await findPrivateGroupByIdOrName({\n          params: this.bodyParams,\n          userId: this.userId\n        });\n        if (!room) {\n          return API.v1.failure('Private group not found');\n        }\n        if (!(await hasAllPermissionAsync(this.userId, ['create-team', 'edit-room'], room.rid))) {\n          return API.v1.forbidden();\n        }\n        const subscriptions = await Subscriptions.findByRoomId(room.rid, {\n          projection: {\n            'u._id': 1\n          }\n        }).toArray();\n        const members = subscriptions.map(s => {\n          var _s$u;\n          return (_s$u = s.u) === null || _s$u === void 0 ? void 0 : _s$u._id;\n        });\n        const teamData = {\n          team: {\n            name: room.name,\n            type: 1\n          },\n          members,\n          room: {\n            name: room.name,\n            id: room.rid\n          }\n        };\n        const team = await Team.create(this.userId, teamData);\n        return API.v1.success({\n          team\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","_excluded2","Team","isMeteorError","Integrations","Messages","Rooms","Subscriptions","Uploads","Users","isGroupsOnlineProps","isGroupsMessagesProps","check","Match","Meteor","eraseRoom","findUsersOfRoom","hideRoomMethod","removeUserFromRoomMethod","canAccessRoomAsync","roomAccessAttributes","hasAllPermissionAsync","hasPermissionAsync","saveRoomSettings","mountIntegrationQueryBasedOnPermissions","createPrivateGroupMethod","leaveRoomMethod","normalizeMessagesForUser","API","addUserToFileObj","composeRoomWithLastMessage","getLoggedInUser","getPaginationItems","getUserFromParams","getUserListFromParams","__reifyWaitForDeps__","getRoomFromParams","params","roomId","roomName","Error","roomOptions","projection","t","ro","name","fname","prid","archived","broadcast","room","findOneById","findOneByName","findPrivateGroupByIdOrName","_ref","checkedArchived","userId","user","projections","username","concat","sub","findOneByRoomIdAndUserId","_id","open","rid","Boolean","v1","addRoute","authRequired","post","_this$bodyParams","bodyParams","activeUsersOnly","findResult","callAsync","defaultFieldsToExclude","success","group","failure","get","access","queryParams","unreads","userMentions","unreadsFrom","joined","msgs","latest","members","forbidden","subscription","lm","_updatedAt","countVisibleByRoomIdBetweenTimestampsInclusive","ls","ts","usersCount","Array","isArray","customFields","extraData","readOnly","_this$bodyParams$excl","result","excludeSelf","error","reason","offset","count","sort","fields","query","parseJsonQuery","ourQuery","Object","assign","cursor","totalCount","findPaginatedWithoutThumbs","skip","limit","files","total","Promise","all","toArray","length","permissionsRequired","GET","permissions","operation","includeAllPrivateGroups","channelsToSearch","push","channel","$in","findPaginated","_createdAt","integrations","latestDate","Date","oldestDate","undefined","oldest","inclusive","parseInt","String","showThreadMessages","idOrName","trim","type","findOneByIdOrName","users","map","u","subs","findByUserIdAndTypes","rids","_ref2","filter","groups","findPaginatedByTypeAndIds","rooms","ObjectIncluding","status","Maybe","validateParams","mentionIds","starredIds","pinned","parseIds","ids","field","split","id","toLowerCase","messages","keys","findOne","request","online","findUsersNotOffline","onlineInRoom","_this$bodyParams$name","hasOwnProperty","description","purpose","topic","_this$bodyParams$type","announcement","roles","moderators","findByRoomIdAndRoles","test","encrypted","_this$bodyParams2","subscriptions","findByRoomId","s","_s$u","teamData","team","create","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/groups.ts"],"sourcesContent":["import { Team, isMeteorError } from '@rocket.chat/core-services';\nimport type { IIntegration, IUser, IRoom, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport { isGroupsOnlineProps, isGroupsMessagesProps } from '@rocket.chat/rest-typings';\nimport { check, Match } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { Filter } from 'mongodb';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../../authorization/server';\nimport { hasAllPermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { createPrivateGroupMethod } from '../../../lib/server/methods/createPrivateGroup';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\nasync function getRoomFromParams(params: { roomId?: string } | { roomName?: string }): Promise<IRoom> {\n\tif (\n\t\t(!('roomId' in params) && !('roomName' in params)) ||\n\t\t('roomId' in params && !(params as { roomId?: string }).roomId && 'roomName' in params && !(params as { roomName?: string }).roomName)\n\t) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t}\n\n\tconst roomOptions = {\n\t\tprojection: {\n\t\t\t...roomAccessAttributes,\n\t\t\tt: 1,\n\t\t\tro: 1,\n\t\t\tname: 1,\n\t\t\tfname: 1,\n\t\t\tprid: 1,\n\t\t\tarchived: 1,\n\t\t\tbroadcast: 1,\n\t\t},\n\t};\n\n\tconst room = await (() => {\n\t\tif ('roomId' in params) {\n\t\t\treturn Rooms.findOneById(params.roomId || '', roomOptions);\n\t\t}\n\t\tif ('roomName' in params) {\n\t\t\treturn Rooms.findOneByName(params.roomName || '', roomOptions);\n\t\t}\n\t})();\n\n\tif (!room || room.t !== 'p') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\treturn room;\n}\n\n// Returns the private group subscription IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findPrivateGroupByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId: string;\n\tcheckedArchived?: boolean;\n}): Promise<{\n\trid: string;\n\topen: boolean;\n\tro: boolean;\n\tt: string;\n\tname: string;\n\tbroadcast: boolean;\n}> {\n\tconst room = await getRoomFromParams(params);\n\n\tconst user = await Users.findOneById(userId, { projections: { username: 1 } });\n\n\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t}\n\n\t// discussions have their names saved on `fname` property\n\tconst roomName = room.prid ? room.fname : room.name;\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${roomName}, is archived`);\n\t}\n\n\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(room._id, userId, { projection: { open: 1 } });\n\n\treturn {\n\t\trid: room._id,\n\t\topen: Boolean(sub?.open),\n\t\tro: Boolean(room.ro),\n\t\tt: room.t,\n\t\tname: roomName ?? '',\n\t\tbroadcast: Boolean(room.broadcast),\n\t};\n}\n\nAPI.v1.addRoute(\n\t'groups.addAll',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult.rid, this.bodyParams.activeUsersOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// Archives a private group only if it wasn't\nAPI.v1.addRoute(\n\t'groups.archive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst params = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet room;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (('roomId' in params && !params.roomId) || ('roomName' in params && !params.roomName)) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tif ('roomId' in params) {\n\t\t\t\troom = await Rooms.findOneById(params.roomId || '');\n\t\t\t} else if ('roomName' in params) {\n\t\t\t\troom = await Rooms.findOneByName(params.roomName || '');\n\t\t\t}\n\n\t\t\tif (!room || room.t !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tif (room.archived) {\n\t\t\t\tthrow new Meteor.Error('error-room-archived', `The private group, ${room.name}, is archived`);\n\t\t\t}\n\n\t\t\tif (params.userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tuser = params.userId;\n\t\t\t}\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls || subscription.ts, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// Create Private Group\nAPI.v1.addRoute(\n\t'groups.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('Body param \"name\" is required');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.members && !Array.isArray(this.bodyParams.members)) {\n\t\t\t\treturn API.v1.failure('Body param \"members\" must be an array if provided');\n\t\t\t}\n\n\t\t\tif (this.bodyParams.customFields && !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"customFields\" must be an object if provided');\n\t\t\t}\n\t\t\tif (this.bodyParams.extraData && !(typeof this.bodyParams.extraData === 'object')) {\n\t\t\t\treturn API.v1.failure('Body param \"extraData\" must be an object if provided');\n\t\t\t}\n\n\t\t\tconst readOnly = typeof this.bodyParams.readOnly !== 'undefined' ? this.bodyParams.readOnly : false;\n\n\t\t\ttry {\n\t\t\t\tconst result = await createPrivateGroupMethod(\n\t\t\t\t\tthis.user,\n\t\t\t\t\tthis.bodyParams.name,\n\t\t\t\t\tthis.bodyParams.members ? this.bodyParams.members : [],\n\t\t\t\t\treadOnly,\n\t\t\t\t\tthis.bodyParams.customFields,\n\t\t\t\t\tthis.bodyParams.extraData,\n\t\t\t\t\tthis.bodyParams.excludeSelf ?? false,\n\t\t\t\t);\n\n\t\t\t\tconst room = await Rooms.findOneById(result.rid, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (!room) {\n\t\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t\t}\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t\t});\n\t\t\t} catch (error: unknown) {\n\t\t\t\tif (isMeteorError(error) && error.reason === 'error-not-allowed') {\n\t\t\t\t\treturn API.v1.forbidden();\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.delete',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(findResult.rid, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.files',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult.rid });\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPrivateGroups = true;\n\t\t\tif (this.queryParams.includeAllPrivateGroups) {\n\t\t\t\tincludeAllPrivateGroups = this.queryParams.includeAllPrivateGroups === 'true';\n\t\t\t}\n\n\t\t\tconst channelsToSearch = [`#${findResult.name}`];\n\t\t\tif (includeAllPrivateGroups) {\n\t\t\t\tchannelsToSearch.push('all_private_groups');\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, {\n\t\t\t\tchannel: { $in: channelsToSearch },\n\t\t\t}) as Filter<IIntegration>;\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.history',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet latestDate = new Date();\n\t\t\tif (this.queryParams.latest) {\n\t\t\t\tlatestDate = new Date(this.queryParams.latest);\n\t\t\t}\n\n\t\t\tlet oldestDate = undefined;\n\t\t\tif (this.queryParams.oldest) {\n\t\t\t\toldestDate = new Date(this.queryParams.oldest);\n\t\t\t}\n\n\t\t\tconst inclusive = this.queryParams.inclusive || false;\n\n\t\t\tlet count = 20;\n\t\t\tif (this.queryParams.count) {\n\t\t\t\tcount = parseInt(String(this.queryParams.count));\n\t\t\t}\n\n\t\t\tlet offset = 0;\n\t\t\tif (this.queryParams.offset) {\n\t\t\t\toffset = parseInt(String(this.queryParams.offset));\n\t\t\t}\n\n\t\t\tconst unreads = this.queryParams.unreads || false;\n\n\t\t\tconst showThreadMessages = this.queryParams.showThreadMessages !== 'false';\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult.rid,\n\t\t\t\tlatest: latestDate,\n\t\t\t\toldest: oldestDate,\n\t\t\t\tinclusive,\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads,\n\t\t\t\tshowThreadMessages,\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst roomId = 'roomId' in this.bodyParams ? this.bodyParams.roomId : '';\n\t\t\tconst roomName = 'roomName' in this.bodyParams ? this.bodyParams.roomName : '';\n\t\t\tconst idOrName = roomId || roomName;\n\n\t\t\tif (!idOrName?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst { _id: rid, t: type } = (await Rooms.findOneByIdOrName(idOrName)) || {};\n\n\t\t\tif (!rid || type !== 'p') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\tthrow new Meteor.Error('error-empty-invite-list', 'Cannot invite if no valid users are provided');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('addUsersToRoom', { rid, users: users.map((u) => u.username) });\n\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.kick',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst room = await getRoomFromParams(this.bodyParams);\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: room._id, username: user.username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.leave',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// List Private Groups a user has access to\nAPI.v1.addRoute(\n\t'groups.list',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['p'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tgroups: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('p', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [groups, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(groups.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: groups.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.listAll',\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { t: 'p' as RoomType });\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroups: await Promise.all(rooms.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.messages',\n\t{ authRequired: true, validateParams: isGroupsMessagesProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult.rid,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\n// TODO: CACHE: same as channels.online\nAPI.v1.addRoute(\n\t'groups.online',\n\t{ authRequired: true, validateParams: isGroupsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'p',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Group does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User does not exists');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: {\n\t\t\t\t\tusername: 1,\n\t\t\t\t},\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.open',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.open) {\n\t\t\t\treturn API.v1.failure(`The private group, ${findResult.name}, is already open for the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult.rid, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomName', this.bodyParams.name);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setReadOnly',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.readOnly === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"readOnly\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The private group read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The private group type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setAnnouncement',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('announcement')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"announcement\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'roomAnnouncement', this.bodyParams.announcement || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.unarchive',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult.rid);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.roles',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult.rid);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.moderators',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult.rid, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: any) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.setEncrypted',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!Match.test(this.bodyParams, Match.ObjectIncluding({ encrypted: Boolean }))) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"encrypted\" is required');\n\t\t\t}\n\t\t\tconst { encrypted, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findPrivateGroupByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tawait saveRoomSettings(this.userId, findResult.rid, 'encrypted', encrypted);\n\n\t\t\tconst room = await Rooms.findOneById(findResult.rid, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any group');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tgroup: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'groups.convertToTeam',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (('roomId' in this.bodyParams && !this.bodyParams.roomId) || ('roomName' in this.bodyParams && !this.bodyParams.roomName)) {\n\t\t\t\treturn API.v1.failure('The parameter \"roomId\" or \"roomName\" is required');\n\t\t\t}\n\n\t\t\tconst room = await findPrivateGroupByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Private group not found');\n\t\t\t}\n\n\t\t\tif (!(await hasAllPermissionAsync(this.userId, ['create-team', 'edit-room'], room.rid))) {\n\t\t\t\treturn API.v1.forbidden();\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst members = subscriptions.map((s) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\ttype: 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room.rid,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n"],"mappings":";;;IAAA,IAAAA,wBAA4B;IAAAC,MAAE,CAAMC,IAAA,iDAA6B;MAAAC,QAAAC,CAAA;QAAAJ,wBAAA,GAAAI,CAAA;MAAA;IAAA;IAAA,IAAAC,aAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,MAAAE,SAAA;MAAAC,UAAA;IAAjE,IAAAC,IAAO,EAAEC,aAAM;IAAAR,MAAa,CAAEC,IAAA,6BAAM,EAA4B;MAACM,KAAAJ,CAAA;QAAAI,IAAA,GAAAJ,CAAA;MAAA;MAAAK,cAAAL,CAAA;QAAAK,aAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,YAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAC,aAAA,EAAAC,OAAA,EAAAC,KAAA;IAAAd,MAAA,CAAAC,IAAA;MAAAQ,aAAAN,CAAA;QAAAM,YAAA,GAAAN,CAAA;MAAA;MAAAO,SAAAP,CAAA;QAAAO,QAAA,GAAAP,CAAA;MAAA;MAAAQ,MAAAR,CAAA;QAAAQ,KAAA,GAAAR,CAAA;MAAA;MAAAS,cAAAT,CAAA;QAAAS,aAAA,GAAAT,CAAA;MAAA;MAAAU,QAAAV,CAAA;QAAAU,OAAA,GAAAV,CAAA;MAAA;MAAAW,MAAAX,CAAA;QAAAW,KAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,mBAAA,EAAAC,qBAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAc,oBAAAZ,CAAA;QAAAY,mBAAA,GAAAZ,CAAA;MAAA;MAAAa,sBAAAb,CAAA;QAAAa,qBAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,KAAA,EAAAC,KAAA;IAAAlB,MAAA,CAAAC,IAAA;MAAAgB,MAAAd,CAAA;QAAAc,KAAA,GAAAd,CAAA;MAAA;MAAAe,MAAAf,CAAA;QAAAe,KAAA,GAAAf,CAAA;MAAA;IAAA;IAAA,IAAAgB,MAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAkB,OAAAhB,CAAA;QAAAgB,MAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,SAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,UAAAjB,CAAA;QAAAiB,SAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,eAAA;IAAArB,MAAA,CAAAC,IAAA;MAAAoB,gBAAAlB,CAAA;QAAAkB,eAAA,GAAAlB,CAAA;MAAA;IAAA;IAAA,IAAAmB,cAAA;IAAAtB,MAAA,CAAAC,IAAA;MAAAqB,eAAAnB,CAAA;QAAAmB,cAAA,GAAAnB,CAAA;MAAA;IAAA;IAAA,IAAAoB,wBAAA;IAAAvB,MAAA,CAAAC,IAAA;MAAAsB,yBAAApB,CAAA;QAAAoB,wBAAA,GAAApB,CAAA;MAAA;IAAA;IAAA,IAAAqB,kBAAA,EAAAC,oBAAA;IAAAzB,MAAA,CAAAC,IAAA;MAAAuB,mBAAArB,CAAA;QAAAqB,kBAAA,GAAArB,CAAA;MAAA;MAAAsB,qBAAAtB,CAAA;QAAAsB,oBAAA,GAAAtB,CAAA;MAAA;IAAA;IAAA,IAAAuB,qBAAA,EAAAC,kBAAA;IAAA3B,MAAA,CAAAC,IAAA;MAAAyB,sBAAAvB,CAAA;QAAAuB,qBAAA,GAAAvB,CAAA;MAAA;MAAAwB,mBAAAxB,CAAA;QAAAwB,kBAAA,GAAAxB,CAAA;MAAA;IAAA;IAAA,IAAAyB,gBAAA;IAAA5B,MAAA,CAAAC,IAAA;MAAA2B,iBAAAzB,CAAA;QAAAyB,gBAAA,GAAAzB,CAAA;MAAA;IAAA;IAAA,IAAA0B,uCAAA;IAAA7B,MAAA,CAAAC,IAAA;MAAA4B,wCAAA1B,CAAA;QAAA0B,uCAAA,GAAA1B,CAAA;MAAA;IAAA;IAAA,IAAA2B,wBAAA;IAAA9B,MAAA,CAAAC,IAAA;MAAA6B,yBAAA3B,CAAA;QAAA2B,wBAAA,GAAA3B,CAAA;MAAA;IAAA;IAAA,IAAA4B,eAAA;IAAA/B,MAAA,CAAAC,IAAA;MAAA8B,gBAAA5B,CAAA;QAAA4B,eAAA,GAAA5B,CAAA;MAAA;IAAA;IAAA,IAAA6B,wBAAA;IAAAhC,MAAA,CAAAC,IAAA;MAAA+B,yBAAA7B,CAAA;QAAA6B,wBAAA,GAAA7B,CAAA;MAAA;IAAA;IAAA,IAAA8B,GAAA;IAAAjC,MAAA,CAAAC,IAAA;MAAAgC,IAAA9B,CAAA;QAAA8B,GAAA,GAAA9B,CAAA;MAAA;IAAA;IAAA,IAAA+B,gBAAA;IAAAlC,MAAA,CAAAC,IAAA;MAAAiC,iBAAA/B,CAAA;QAAA+B,gBAAA,GAAA/B,CAAA;MAAA;IAAA;IAAA,IAAAgC,0BAAA;IAAAnC,MAAA,CAAAC,IAAA;MAAAkC,2BAAAhC,CAAA;QAAAgC,0BAAA,GAAAhC,CAAA;MAAA;IAAA;IAAA,IAAAiC,eAAA;IAAApC,MAAA,CAAAC,IAAA;MAAAmC,gBAAAjC,CAAA;QAAAiC,eAAA,GAAAjC,CAAA;MAAA;IAAA;IAAA,IAAAkC,kBAAA;IAAArC,MAAA,CAAAC,IAAA;MAAAoC,mBAAAlC,CAAA;QAAAkC,kBAAA,GAAAlC,CAAA;MAAA;IAAA;IAAA,IAAAmC,iBAAA,EAAAC,qBAAA;IAAAvC,MAAA,CAAAC,IAAA;MAAAqC,kBAAAnC,CAAA;QAAAmC,iBAAA,GAAAnC,CAAA;MAAA;MAAAoC,sBAAApC,CAAA;QAAAoC,qBAAA,GAAApC,CAAA;MAAA;IAAA;IAAA,IAAAqC,oBAAA,WAAAA,oBAAA;IA0BjE,eAAeC,iBAAiBA,CAACC,MAAmD;MACnF,IACE,EAAE,QAAQ,IAAIA,MAAM,CAAC,IAAI,EAAE,UAAU,IAAIA,MAAM,CAAC,IAChD,QAAQ,IAAIA,MAAM,IAAI,CAAEA,MAA8B,CAACC,MAAM,IAAI,UAAU,IAAID,MAAM,IAAI,CAAEA,MAAgC,CAACE,QAAS,EACrI;QACD,MAAM,IAAIzB,MAAM,CAAC0B,KAAK,CAAC,+BAA+B,EAAE,kDAAkD,CAAC;MAC5G;MAEA,MAAMC,WAAW,GAAG;QACnBC,UAAU,EAAA3C,aAAA,CAAAA,aAAA,KACNqB,oBAAoB;UACvBuB,CAAC,EAAE,CAAC;UACJC,EAAE,EAAE,CAAC;UACLC,IAAI,EAAE,CAAC;UACPC,KAAK,EAAE,CAAC;UACRC,IAAI,EAAE,CAAC;UACPC,QAAQ,EAAE,CAAC;UACXC,SAAS,EAAE;QAAC;OAEb;MAED,MAAMC,IAAI,GAAG,MAAM,CAAC,MAAK;QACxB,IAAI,QAAQ,IAAIb,MAAM,EAAE;UACvB,OAAO/B,KAAK,CAAC6C,WAAW,CAACd,MAAM,CAACC,MAAM,IAAI,EAAE,EAAEG,WAAW,CAAC;QAC3D;QACA,IAAI,UAAU,IAAIJ,MAAM,EAAE;UACzB,OAAO/B,KAAK,CAAC8C,aAAa,CAACf,MAAM,CAACE,QAAQ,IAAI,EAAE,EAAEE,WAAW,CAAC;QAC/D;MACD,CAAC,EAAC,CAAE;MAEJ,IAAI,CAACS,IAAI,IAAIA,IAAI,CAACP,CAAC,KAAK,GAAG,EAAE;QAC5B,MAAM,IAAI7B,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;MAC9H;MAEA,OAAOU,IAAI;IACZ;IAEA;IACA,eAAeG,0BAA0BA,CAAAC,IAAA,EAcxC;MAAA,IAdyC;QACzCjB,MAAM;QACNkB,eAAe,GAAG,IAAI;QACtBC;MAAM,CAWN,GAAAF,IAAA;MAQA,MAAMJ,IAAI,GAAG,MAAMd,iBAAiB,CAACC,MAAM,CAAC;MAE5C,MAAMoB,IAAI,GAAG,MAAMhD,KAAK,CAAC0C,WAAW,CAACK,MAAM,EAAE;QAAEE,WAAW,EAAE;UAAEC,QAAQ,EAAE;QAAC;MAAE,CAAE,CAAC;MAE9E,IAAI,CAACT,IAAI,IAAI,CAACO,IAAI,IAAI,EAAE,MAAMtC,kBAAkB,CAAC+B,IAAI,EAAEO,IAAI,CAAC,CAAC,EAAE;QAC9D,MAAM,IAAI3C,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;MAC9H;MAEA;MACA,MAAMD,QAAQ,GAAGW,IAAI,CAACH,IAAI,GAAGG,IAAI,CAACJ,KAAK,GAAGI,IAAI,CAACL,IAAI;MAEnD,IAAIU,eAAe,IAAIL,IAAI,CAACF,QAAQ,EAAE;QACrC,MAAM,IAAIlC,MAAM,CAAC0B,KAAK,CAAC,qBAAqB,wBAAAoB,MAAA,CAAwBrB,QAAQ,kBAAe,CAAC;MAC7F;MAEA,MAAMsB,GAAG,GAAG,MAAMtD,aAAa,CAACuD,wBAAwB,CAACZ,IAAI,CAACa,GAAG,EAAEP,MAAM,EAAE;QAAEd,UAAU,EAAE;UAAEsB,IAAI,EAAE;QAAC;MAAE,CAAE,CAAC;MAEvG,OAAO;QACNC,GAAG,EAAEf,IAAI,CAACa,GAAG;QACbC,IAAI,EAAEE,OAAO,CAACL,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEG,IAAI,CAAC;QACxBpB,EAAE,EAAEsB,OAAO,CAAChB,IAAI,CAACN,EAAE,CAAC;QACpBD,CAAC,EAAEO,IAAI,CAACP,CAAC;QACTE,IAAI,EAAEN,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,EAAE;QACpBU,SAAS,EAAEiB,OAAO,CAAChB,IAAI,CAACD,SAAS;OACjC;IACF;IAEArB,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAAC,gBAAA,GAAuC,IAAI,CAACC,UAAU;UAAhD;YAAEC;UAA0B,CAAE,GAAAF,gBAAA;UAARlC,MAAM,GAAA3C,wBAAA,CAAA6E,gBAAA,EAAAvE,SAAA;QAClC,MAAM0E,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM;UACNmB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAM1C,MAAM,CAAC6D,SAAS,CAAC,kBAAkB,EAAED,UAAU,CAACT,GAAG,EAAE,IAAI,CAACO,UAAU,CAACC,eAAe,CAAC;QAE3F,MAAMvB,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,qBAAqB,EACrB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,kBAAkB,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEpE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,cAAc,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEhE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,kBAAkB,EAClB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,eAAe,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEjE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAED;IACAjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,gBAAgB,EAChB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAM1C,MAAM,CAAC6D,SAAS,CAAC,aAAa,EAAED,UAAU,CAACT,GAAG,CAAC;QAErD,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,cAAc,EACd;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,IAAI,CAACmB,UAAU,CAACV,IAAI,EAAE;UACrB,OAAOpC,GAAG,CAACuC,EAAE,CAACY,OAAO,uBAAAnB,MAAA,CAAuBc,UAAU,CAAC7B,IAAI,sCAAmC,CAAC;QAChG;QAEA,MAAM5B,cAAc,CAAC,IAAI,CAACuC,MAAM,EAAEkB,UAAU,CAACT,GAAG,CAAC;QAEjD,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMC,MAAM,GAAG,MAAM3D,kBAAkB,CAAC,IAAI,CAACkC,MAAM,EAAE,0BAA0B,CAAC;QAChF,MAAMnB,MAAM,GAAG,IAAI,CAAC6C,WAAW;QAC/B,IAAIzB,IAAI,GAAG,IAAI,CAACD,MAAM;QACtB,IAAIN,IAAI;QACR,IAAIiC,OAAO,GAAG,IAAI;QAClB,IAAIC,YAAY,GAAG,IAAI;QACvB,IAAIC,WAAW,GAAG,IAAI;QACtB,IAAIC,MAAM,GAAG,KAAK;QAClB,IAAIC,IAAI,GAAG,IAAI;QACf,IAAIC,MAAM,GAAG,IAAI;QACjB,IAAIC,OAAO,GAAG,IAAI;QAElB,IAAK,QAAQ,IAAIpD,MAAM,IAAI,CAACA,MAAM,CAACC,MAAM,IAAM,UAAU,IAAID,MAAM,IAAI,CAACA,MAAM,CAACE,QAAS,EAAE;UACzF,MAAM,IAAIzB,MAAM,CAAC0B,KAAK,CAAC,+BAA+B,EAAE,kDAAkD,CAAC;QAC5G;QAEA,IAAI,QAAQ,IAAIH,MAAM,EAAE;UACvBa,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACd,MAAM,CAACC,MAAM,IAAI,EAAE,CAAC;QACpD,CAAC,MAAM,IAAI,UAAU,IAAID,MAAM,EAAE;UAChCa,IAAI,GAAG,MAAM5C,KAAK,CAAC8C,aAAa,CAACf,MAAM,CAACE,QAAQ,IAAI,EAAE,CAAC;QACxD;QAEA,IAAI,CAACW,IAAI,IAAIA,IAAI,CAACP,CAAC,KAAK,GAAG,EAAE;UAC5B,MAAM,IAAI7B,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,IAAIU,IAAI,CAACF,QAAQ,EAAE;UAClB,MAAM,IAAIlC,MAAM,CAAC0B,KAAK,CAAC,qBAAqB,wBAAAoB,MAAA,CAAwBV,IAAI,CAACL,IAAI,kBAAe,CAAC;QAC9F;QAEA,IAAIR,MAAM,CAACmB,MAAM,EAAE;UAClB,IAAI,CAACyB,MAAM,EAAE;YACZ,OAAOrD,GAAG,CAACuC,EAAE,CAACuB,SAAS,EAAE;UAC1B;UACAjC,IAAI,GAAGpB,MAAM,CAACmB,MAAM;QACrB;QACA,MAAMmC,YAAY,GAAG,MAAMpF,aAAa,CAACuD,wBAAwB,CAACZ,IAAI,CAACa,GAAG,EAAEN,IAAI,CAAC;QACjF,MAAMmC,EAAE,GAAG1C,IAAI,CAAC0C,EAAE,GAAG1C,IAAI,CAAC0C,EAAE,GAAG1C,IAAI,CAAC2C,UAAU;QAE9C,IAAIF,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAE3B,IAAI,EAAE;UACvBmB,OAAO,GAAG,MAAM9E,QAAQ,CAACyF,8CAA8C,CAACH,YAAY,CAAC1B,GAAG,EAAE0B,YAAY,CAACI,EAAE,IAAIJ,YAAY,CAACK,EAAE,EAAEJ,EAAE,CAAC;UACjIP,WAAW,GAAGM,YAAY,CAACI,EAAE,IAAIJ,YAAY,CAACK,EAAE;UAChDZ,YAAY,GAAGO,YAAY,CAACP,YAAY;UACxCE,MAAM,GAAG,IAAI;QACd;QAEA,IAAIL,MAAM,IAAIK,MAAM,EAAE;UACrBC,IAAI,GAAGrC,IAAI,CAACqC,IAAI;UAChBC,MAAM,GAAGI,EAAE;UACXH,OAAO,GAAGvC,IAAI,CAAC+C,UAAU;QAC1B;QAEA,OAAOrE,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBS,MAAM;UACNG,OAAO;UACPN,OAAO;UACPE,WAAW;UACXE,IAAI;UACJC,MAAM;UACNJ;SACA,CAAC;MACH;KACA,CACD;IAED;IACAxD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAAC3B,IAAI,EAAE;UAC1B,OAAOjB,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,+BAA+B,CAAC;QACvD;QAEA,IAAI,IAAI,CAACP,UAAU,CAACiB,OAAO,IAAI,CAACS,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC3B,UAAU,CAACiB,OAAO,CAAC,EAAE;UACvE,OAAO7D,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,mDAAmD,CAAC;QAC3E;QAEA,IAAI,IAAI,CAACP,UAAU,CAAC4B,YAAY,IAAI,EAAE,OAAO,IAAI,CAAC5B,UAAU,CAAC4B,YAAY,KAAK,QAAQ,CAAC,EAAE;UACxF,OAAOxE,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,yDAAyD,CAAC;QACjF;QACA,IAAI,IAAI,CAACP,UAAU,CAAC6B,SAAS,IAAI,EAAE,OAAO,IAAI,CAAC7B,UAAU,CAAC6B,SAAS,KAAK,QAAQ,CAAC,EAAE;UAClF,OAAOzE,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,sDAAsD,CAAC;QAC9E;QAEA,MAAMuB,QAAQ,GAAG,OAAO,IAAI,CAAC9B,UAAU,CAAC8B,QAAQ,KAAK,WAAW,GAAG,IAAI,CAAC9B,UAAU,CAAC8B,QAAQ,GAAG,KAAK;QAEnG,IAAI;UAAA,IAAAC,qBAAA;UACH,MAAMC,MAAM,GAAG,MAAM/E,wBAAwB,CAC5C,IAAI,CAACgC,IAAI,EACT,IAAI,CAACe,UAAU,CAAC3B,IAAI,EACpB,IAAI,CAAC2B,UAAU,CAACiB,OAAO,GAAG,IAAI,CAACjB,UAAU,CAACiB,OAAO,GAAG,EAAE,EACtDa,QAAQ,EACR,IAAI,CAAC9B,UAAU,CAAC4B,YAAY,EAC5B,IAAI,CAAC5B,UAAU,CAAC6B,SAAS,GAAAE,qBAAA,GACzB,IAAI,CAAC/B,UAAU,CAACiC,WAAW,cAAAF,qBAAA,cAAAA,qBAAA,GAAI,KAAK,CACpC;UAED,MAAMrD,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACqD,MAAM,CAACvC,GAAG,EAAE;YAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;UAAsB,CAAE,CAAC;UAC/F,IAAI,CAAC1B,IAAI,EAAE;YACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;UAC9H;UAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;YACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;WACzD,CAAC;QACH,CAAC,CAAC,OAAOkD,KAAc,EAAE;UACxB,IAAIvG,aAAa,CAACuG,KAAK,CAAC,IAAIA,KAAK,CAACC,MAAM,KAAK,mBAAmB,EAAE;YACjE,OAAO/E,GAAG,CAACuC,EAAE,CAACuB,SAAS,EAAE;UAC1B;UACA,MAAMgB,KAAK;QACZ;MACD;KACA,CACD;IAED9E,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,MAAMxC,SAAS,CAAC2D,UAAU,CAACT,GAAG,EAAE,IAAI,CAACT,MAAM,CAAC;QAE5C,OAAO5B,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,cAAc,EACd;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,MAAM;UAAEqD,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM7E,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACpE,MAAM;UAAE4B,IAAI;UAAEC,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;QAE3D,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEJ,KAAK,EAAE;UAAE/C,GAAG,EAAES,UAAU,CAACT;QAAG,CAAE,CAAC;QAElE,MAAM;UAAEoD,MAAM;UAAEC;QAAU,CAAE,GAAG,MAAM9G,OAAO,CAAC+G,0BAA0B,CAACL,QAAQ,EAAE;UACjFJ,IAAI,EAAEA,IAAI,IAAI;YAAEjE,IAAI,EAAE;UAAC,CAAE;UACzB2E,IAAI,EAAEZ,MAAM;UACZa,KAAK,EAAEZ,KAAK;UACZnE,UAAU,EAAEqE;SACZ,CAAC;QAEF,MAAM,CAACW,KAAK,EAAEC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAExE,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrB6C,KAAK,EAAE,MAAM7F,gBAAgB,CAAC6F,KAAK,CAAC;UACpCb,KAAK,EAAEa,KAAK,CAACK,MAAM;UACnBnB,MAAM;UACNe;SACA,CAAC;MACH;KACA,CACD;IAED/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,wBAAwB,EACxB;MACCC,YAAY,EAAE,IAAI;MAClB2D,mBAAmB,EAAE;QACpBC,GAAG,EAAE;UACJC,WAAW,EAAE,CACZ,8BAA8B,EAC9B,kCAAkC,EAClC,8BAA8B,EAC9B,kCAAkC,CAClC;UACDC,SAAS,EAAE;;;KAGb,EACD;MACC,MAAMnD,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,IAAI6E,uBAAuB,GAAG,IAAI;QAClC,IAAI,IAAI,CAAClD,WAAW,CAACkD,uBAAuB,EAAE;UAC7CA,uBAAuB,GAAG,IAAI,CAAClD,WAAW,CAACkD,uBAAuB,KAAK,MAAM;QAC9E;QAEA,MAAMC,gBAAgB,GAAG,KAAAzE,MAAA,CAAKc,UAAU,CAAC7B,IAAI,EAAG;QAChD,IAAIuF,uBAAuB,EAAE;UAC5BC,gBAAgB,CAACC,IAAI,CAAC,oBAAoB,CAAC;QAC5C;QAEA,MAAM;UAAE1B,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM7E,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACpE,MAAM;UAAE4B,IAAI;UAAEC,MAAM,EAAErE,UAAU;UAAEsE;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;QAEvE,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,MAAM5F,uCAAuC,CAAC,IAAI,CAACgC,MAAM,CAAC,EAAEwD,KAAK,EAAE;UACjGuB,OAAO,EAAE;YAAEC,GAAG,EAAEH;UAAgB;SAChC,CAAyB;QAC1B,MAAM;UAAEhB,MAAM;UAAEC;QAAU,CAAE,GAAG,MAAMlH,YAAY,CAACqI,aAAa,CAACvB,QAAQ,EAAE;UACzEJ,IAAI,EAAEA,IAAI,IAAI;YAAE4B,UAAU,EAAE;UAAC,CAAE;UAC/BlB,IAAI,EAAEZ,MAAM;UACZa,KAAK,EAAEZ,KAAK;UACZnE;SACA,CAAC;QAEF,MAAM,CAACiG,YAAY,EAAEhB,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAE/E,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrB8D,YAAY;UACZ9B,KAAK,EAAE8B,YAAY,CAACZ,MAAM;UAC1BnB,MAAM;UACNe;SACA,CAAC;MACH;KACA,CACD;IAED/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,gBAAgB,EAChB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,IAAIqF,UAAU,GAAG,IAAIC,IAAI,EAAE;QAC3B,IAAI,IAAI,CAAC3D,WAAW,CAACM,MAAM,EAAE;UAC5BoD,UAAU,GAAG,IAAIC,IAAI,CAAC,IAAI,CAAC3D,WAAW,CAACM,MAAM,CAAC;QAC/C;QAEA,IAAIsD,UAAU,GAAGC,SAAS;QAC1B,IAAI,IAAI,CAAC7D,WAAW,CAAC8D,MAAM,EAAE;UAC5BF,UAAU,GAAG,IAAID,IAAI,CAAC,IAAI,CAAC3D,WAAW,CAAC8D,MAAM,CAAC;QAC/C;QAEA,MAAMC,SAAS,GAAG,IAAI,CAAC/D,WAAW,CAAC+D,SAAS,IAAI,KAAK;QAErD,IAAIpC,KAAK,GAAG,EAAE;QACd,IAAI,IAAI,CAAC3B,WAAW,CAAC2B,KAAK,EAAE;UAC3BA,KAAK,GAAGqC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACjE,WAAW,CAAC2B,KAAK,CAAC,CAAC;QACjD;QAEA,IAAID,MAAM,GAAG,CAAC;QACd,IAAI,IAAI,CAAC1B,WAAW,CAAC0B,MAAM,EAAE;UAC5BA,MAAM,GAAGsC,QAAQ,CAACC,MAAM,CAAC,IAAI,CAACjE,WAAW,CAAC0B,MAAM,CAAC,CAAC;QACnD;QAEA,MAAMzB,OAAO,GAAG,IAAI,CAACD,WAAW,CAACC,OAAO,IAAI,KAAK;QAEjD,MAAMiE,kBAAkB,GAAG,IAAI,CAAClE,WAAW,CAACkE,kBAAkB,KAAK,OAAO;QAE1E,MAAM5C,MAAM,GAAG,MAAM1F,MAAM,CAAC6D,SAAS,CAAC,mBAAmB,EAAE;UAC1DV,GAAG,EAAES,UAAU,CAACT,GAAG;UACnBuB,MAAM,EAAEoD,UAAU;UAClBI,MAAM,EAAEF,UAAU;UAClBG,SAAS;UACTrC,MAAM;UACNC,KAAK;UACL1B,OAAO;UACPiE;SACA,CAAC;QAEF,IAAI,CAAC5C,MAAM,EAAE;UACZ,OAAO5E,GAAG,CAACuC,EAAE,CAACuB,SAAS,EAAE;QAC1B;QAEA,OAAO9D,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC2B,MAAM,CAAC;MAC9B;KACA,CACD;IAED5E,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,aAAa,EACb;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,MAAML,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMhC,MAAM,GAAG,QAAQ,IAAI,IAAI,CAACkC,UAAU,GAAG,IAAI,CAACA,UAAU,CAAClC,MAAM,GAAG,EAAE;QACxE,MAAMC,QAAQ,GAAG,UAAU,IAAI,IAAI,CAACiC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACjC,QAAQ,GAAG,EAAE;QAC9E,MAAM8G,QAAQ,GAAG/G,MAAM,IAAIC,QAAQ;QAEnC,IAAI,EAAC8G,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,IAAI,EAAE,GAAE;UACtB,MAAM,IAAIxI,MAAM,CAAC0B,KAAK,CAAC,+BAA+B,EAAE,kDAAkD,CAAC;QAC5G;QAEA,MAAM;UAAEuB,GAAG,EAAEE,GAAG;UAAEtB,CAAC,EAAE4G;QAAI,CAAE,GAAG,CAAC,MAAMjJ,KAAK,CAACkJ,iBAAiB,CAACH,QAAQ,CAAC,KAAK,EAAE;QAE7E,IAAI,CAACpF,GAAG,IAAIsF,IAAI,KAAK,GAAG,EAAE;UACzB,MAAM,IAAIzI,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,MAAMiH,KAAK,GAAG,MAAMvH,qBAAqB,CAAC,IAAI,CAACsC,UAAU,CAAC;QAE1D,IAAI,CAACiF,KAAK,CAAC1B,MAAM,EAAE;UAClB,MAAM,IAAIjH,MAAM,CAAC0B,KAAK,CAAC,yBAAyB,EAAE,8CAA8C,CAAC;QAClG;QAEA,MAAM1B,MAAM,CAAC6D,SAAS,CAAC,gBAAgB,EAAE;UAAEV,GAAG;UAAEwF,KAAK,EAAEA,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAChG,QAAQ;QAAC,CAAE,CAAC;QAEtF,MAAMT,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACc,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAExF,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,aAAa,EACb;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMpB,IAAI,GAAG,MAAMd,iBAAiB,CAAC,IAAI,CAACoC,UAAU,CAAC;QAErD,MAAMf,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QACrD,IAAI,EAACf,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,QAAQ,GAAE;UACpB,OAAO/B,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,cAAc,CAAC;QACtC;QAEA,MAAM7D,wBAAwB,CAAC,IAAI,CAACsC,MAAM,EAAE;UAAES,GAAG,EAAEf,IAAI,CAACa,GAAG;UAAEJ,QAAQ,EAAEF,IAAI,CAACE;QAAQ,CAAE,CAAC;QAEvF,OAAO/B,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,cAAc,EACd;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMhD,KAAK,CAAC0C,WAAW,CAAC,IAAI,CAACK,MAAM,CAAC;QACjD,IAAI,CAACC,IAAI,EAAE;UACV,OAAO7B,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,cAAc,CAAC;QACtC;QACA,MAAMrD,eAAe,CAAC+B,IAAI,EAAEiB,UAAU,CAACT,GAAG,CAAC;QAE3C,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAED;IACAjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,aAAa,EACb;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAM;UAAE4B,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM7E,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACpE,MAAM;UAAE4B,IAAI;UAAEC;QAAM,CAAE,GAAG,MAAM,IAAI,CAACE,cAAc,EAAE;QAEpD,MAAM2C,IAAI,GAAG,MAAMrJ,aAAa,CAACsJ,oBAAoB,CAAC,IAAI,CAACrG,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE;UAAEd,UAAU,EAAE;YAAEuB,GAAG,EAAE;UAAC;QAAE,CAAE,CAAC,CAAC6D,OAAO,EAAE;QAC/G,MAAMgC,IAAI,GAAGF,IAAI,CAACF,GAAG,CAACK,KAAA;UAAA,IAAC;YAAE9F;UAAG,CAAE,GAAA8F,KAAA;UAAA,OAAK9F,GAAG;QAAA,EAAC,CAAC+F,MAAM,CAAC9F,OAAO,CAAC;QAEvD,IAAI4F,IAAI,CAAC/B,MAAM,KAAK,CAAC,EAAE;UACtB,OAAOnG,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;YACrBoF,MAAM,EAAE,EAAE;YACVrD,MAAM;YACNC,KAAK,EAAE,CAAC;YACRc,KAAK,EAAE;WACP,CAAC;QACH;QAEA,MAAM;UAAEN,MAAM;UAAEC;QAAU,CAAE,GAAG,MAAMhH,KAAK,CAAC4J,yBAAyB,CAAC,GAAG,EAAEJ,IAAI,EAAE;UAC/EhD,IAAI,EAAEA,IAAI,IAAI;YAAEjE,IAAI,EAAE;UAAC,CAAE;UACzB2E,IAAI,EAAEZ,MAAM;UACZa,KAAK,EAAEZ,KAAK;UACZnE,UAAU,EAAEqE;SACZ,CAAC;QAEF,MAAM,CAACkD,MAAM,EAAEtC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAEzE,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBoF,MAAM,EAAE,MAAMrC,OAAO,CAACC,GAAG,CAACoC,MAAM,CAACP,GAAG,CAAExG,IAAI,IAAKpB,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC;UAC9FoD,MAAM;UACNC,KAAK,EAAEoD,MAAM,CAAClC,MAAM;UACpBJ;SACA,CAAC;MACH;KACA,CACD;IAED/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,gBAAgB,EAChB;MAAEC,YAAY,EAAE,IAAI;MAAE2D,mBAAmB,EAAE,CAAC,0BAA0B;IAAC,CAAE,EACzE;MACC,MAAMhD,GAAGA,CAAA;QACR,MAAM;UAAE4B,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM7E,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACpE,MAAM;UAAE4B,IAAI;UAAEC,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;QAC3D,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEJ,KAAK,EAAE;UAAErE,CAAC,EAAE;QAAe,CAAE,CAAC;QAEjE,MAAM;UAAE0E,MAAM;UAAEC;QAAU,CAAE,GAAG,MAAMhH,KAAK,CAACmI,aAAa,CAACvB,QAAQ,EAAE;UAClEJ,IAAI,EAAEA,IAAI,IAAI;YAAEjE,IAAI,EAAE;UAAC,CAAE;UACzB2E,IAAI,EAAEZ,MAAM;UACZa,KAAK,EAAEZ,KAAK;UACZnE,UAAU,EAAEqE;SACZ,CAAC;QAEF,MAAM,CAACoD,KAAK,EAAExC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAExE,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBoF,MAAM,EAAE,MAAMrC,OAAO,CAACC,GAAG,CAACsC,KAAK,CAACT,GAAG,CAAExG,IAAI,IAAKpB,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC;UAC7FoD,MAAM;UACNC,KAAK,EAAEsD,KAAK,CAACpC,MAAM;UACnBJ;SACA,CAAC;MACH;KACA,CACD;IAED/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,gBAAgB,EAChB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,IAAIkB,UAAU,CAACzB,SAAS,IAAI,EAAE,MAAM3B,kBAAkB,CAAC,IAAI,CAACkC,MAAM,EAAE,4BAA4B,EAAEkB,UAAU,CAACT,GAAG,CAAC,CAAC,EAAE;UACnH,OAAOrC,GAAG,CAACuC,EAAE,CAACuB,SAAS,EAAE;QAC1B;QAEA,MAAM;UAAEkB,MAAM,EAAEY,IAAI;UAAEX,KAAK,EAAEY;QAAK,CAAE,GAAG,MAAMzF,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACjF,MAAM;UAAE4B,IAAI,GAAG;QAAE,CAAE,GAAG,MAAM,IAAI,CAACG,cAAc,EAAE;QAEjDrG,KAAK,CACJ,IAAI,CAACsE,WAAW,EAChBrE,KAAK,CAACuJ,eAAe,CAAC;UACrBC,MAAM,EAAExJ,KAAK,CAACyJ,KAAK,CAAC,CAACnB,MAAM,CAAC,CAAC;UAC7Ba,MAAM,EAAEnJ,KAAK,CAACyJ,KAAK,CAACnB,MAAM;SAC1B,CAAC,CACF;QAED,MAAM;UAAEkB,MAAM;UAAEL;QAAM,CAAE,GAAG,IAAI,CAAC9E,WAAW;QAE3C,MAAM;UAAEmC,MAAM;UAAEC;QAAU,CAAE,GAAG,MAAMtG,eAAe,CAAAjB,aAAA,CAAAA,aAAA;UACnDkE,GAAG,EAAES,UAAU,CAACT;QAAG,GACfoG,MAAM,IAAI;UAAEA,MAAM,EAAE;YAAE7B,GAAG,EAAE6B;UAAM;QAAE,CAAE;UACzC7C,IAAI;UACJC,KAAK;UACLuC;QAAM,GACF,CAAAlD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEnD,QAAQ,KAAI;UAAEmD,IAAI,EAAE;YAAEnD,QAAQ,EAAEmD,IAAI,CAACnD;UAAQ;QAAE,CAAE,CAC3D,CAAC;QAEF,MAAM,CAAC8B,OAAO,EAAEkC,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAE1E,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBY,OAAO;UACPoB,KAAK,EAAEpB,OAAO,CAACsC,MAAM;UACrBnB,MAAM,EAAEY,IAAI;UACZG;SACA,CAAC;MACH;KACA,CACD;IAED/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE,IAAI;MAAEkG,cAAc,EAAE5J;IAAqB,CAAE,EAC7D;MACC,MAAMqE,GAAGA,CAAA;QACR,MAAM;UAAE1C,MAAM;UAAEkI,UAAU;UAAEC,UAAU;UAAEC;QAAM,CAAE,GAAG,IAAI,CAACxF,WAAW;QAEnE,MAAMR,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE;YAAEC;UAAM,CAAE;UAClBkB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QACF,MAAM;UAAEoD,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM7E,kBAAkB,CAAC,IAAI,CAACkD,WAAW,CAAC;QACpE,MAAM;UAAE4B,IAAI;UAAEC,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;QAE3D,MAAM0D,QAAQ,GAAGA,CAACC,GAAuB,EAAEC,KAAa,KACvD,OAAOD,GAAG,KAAK,QAAQ,IAAIA,GAAG,GAAG;UAAE,CAACC,KAAK,GAAG;YAAErC,GAAG,EAAEoC,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACpB,GAAG,CAAEqB,EAAE,IAAKA,EAAE,CAACzB,IAAI,EAAE;UAAC;QAAE,CAAE,GAAG,EAAE;QAElG,MAAMpC,QAAQ,GAAAnH,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACViH,KAAK;UACR/C,GAAG,EAAES,UAAU,CAACT;QAAG,GAChB0G,QAAQ,CAACH,UAAU,EAAE,cAAc,CAAC,GACpCG,QAAQ,CAACF,UAAU,EAAE,aAAa,CAAC,GAClCC,MAAM,IAAIA,MAAM,CAACM,WAAW,EAAE,KAAK,MAAM,GAAG;UAAEN,MAAM,EAAE;QAAI,CAAE,GAAG,EAAE,CACrE;QAED,MAAM;UAAErD,MAAM;UAAEC;QAAU,CAAE,GAAGjH,QAAQ,CAACoI,aAAa,CAACvB,QAAQ,EAAE;UAC/DJ,IAAI,EAAEA,IAAI,IAAI;YAAEd,EAAE,EAAE,CAAC;UAAC,CAAE;UACxBwB,IAAI,EAAEZ,MAAM;UACZa,KAAK,EAAEZ,KAAK;UACZnE,UAAU,EAAEqE;SACZ,CAAC;QAEF,MAAM,CAACkE,QAAQ,EAAEtD,KAAK,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,MAAM,CAACS,OAAO,EAAE,EAAER,UAAU,CAAC,CAAC;QAE3E,OAAO1F,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBoG,QAAQ,EAAE,MAAMtJ,wBAAwB,CAACsJ,QAAQ,EAAE,IAAI,CAACzH,MAAM,CAAC;UAC/DqD,KAAK,EAAEoE,QAAQ,CAAClD,MAAM;UACtBnB,MAAM;UACNe;SACA,CAAC;MACH;KACA,CACD;IAED;IACA/F,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE,IAAI;MAAEkG,cAAc,EAAE7J;IAAmB,CAAE,EAC3D;MACC,MAAMsE,GAAGA,CAAA;QACR,MAAM;UAAEgC;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;QAC7C,MAAM;UAAElD;QAAG,CAAE,GAAG,IAAI,CAACmB,WAAW;QAEhC,IAAI,CAAC,CAAC8B,KAAK,IAAIG,MAAM,CAAC+D,IAAI,CAAClE,KAAK,CAAC,CAACe,MAAM,KAAK,CAAC,KAAK,CAAChE,GAAG,EAAE;UACxD,OAAOnC,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,eAAe,CAAC;QACvC;QAEA,MAAMiF,MAAM,GAAAjK,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACRiH,KAAK,GACJjD,GAAG,GAAG;UAAEA;QAAG,CAAE,GAAG,EAAE;UACtBpB,CAAC,EAAE;QAAG,EACN;QAED,MAAMO,IAAI,GAAG,MAAM5C,KAAK,CAAC6K,OAAO,CAACnB,MAA6B,CAAC;QAC/D,IAAI,CAAC9G,IAAI,EAAE;UACV,OAAOtB,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,uBAAuB,CAAC;QAC/C;QAEA,MAAMtB,IAAI,GAAG,MAAM1B,eAAe,CAAC,IAAI,CAACqJ,OAAO,CAAC;QAChD,IAAI,CAAC3H,IAAI,EAAE;UACV,OAAO7B,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,sBAAsB,CAAC;QAC9C;QAEA,IAAI,EAAE,MAAM5D,kBAAkB,CAAC+B,IAAI,EAAEO,IAAI,CAAC,CAAC,EAAE;UAC5C,MAAM,IAAI3C,MAAM,CAAC0B,KAAK,CAAC,mBAAmB,EAAE,aAAa,CAAC;QAC3D;QAEA,MAAM6I,MAAM,GAAsC,MAAM5K,KAAK,CAAC6K,mBAAmB,CAAC;UACjF5I,UAAU,EAAE;YACXiB,QAAQ,EAAE;;SAEX,CAAC,CAACmE,OAAO,EAAE;QAEZ,MAAMyD,YAAY,GAAG,MAAM3D,OAAO,CAACC,GAAG,CACrCwD,MAAM,CAAC3B,GAAG,CAAC,MAAOjG,IAAI,IAAI;UACzB,MAAMkC,YAAY,GAAG,MAAMpF,aAAa,CAACuD,wBAAwB,CAACZ,IAAI,CAACa,GAAG,EAAEN,IAAI,CAACM,GAAG,EAAE;YACrFrB,UAAU,EAAE;cAAEqB,GAAG,EAAE,CAAC;cAAEJ,QAAQ,EAAE;YAAC;WACjC,CAAC;UACF,IAAIgC,YAAY,EAAE;YACjB,OAAO;cACN5B,GAAG,EAAEN,IAAI,CAACM,GAAG;cACbJ,QAAQ,EAAEF,IAAI,CAACE;aACf;UACF;QACD,CAAC,CAAC,CACF;QAED,OAAO/B,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBwG,MAAM,EAAEE,YAAY,CAACvB,MAAM,CAAC9F,OAAO;SACnC,CAAC;MACH;KACA,CACD;IAEDtC,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,aAAa,EACb;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,IAAImB,UAAU,CAACV,IAAI,EAAE;UACpB,OAAOpC,GAAG,CAACuC,EAAE,CAACY,OAAO,uBAAAnB,MAAA,CAAuBc,UAAU,CAAC7B,IAAI,qCAAkC,CAAC;QAC/F;QAEA,MAAM/B,MAAM,CAAC6D,SAAS,CAAC,UAAU,EAAED,UAAU,CAACT,GAAG,CAAC;QAElD,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,wBAAwB,EACxB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,qBAAqB,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEvE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,oBAAoB,EACpB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,iBAAiB,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEnE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,qBAAqB,EACrB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMC,IAAI,GAAG,MAAMxB,iBAAiB,CAAC,IAAI,CAACuC,UAAU,CAAC;QAErD,MAAM1D,MAAM,CAAC6D,SAAS,CAAC,kBAAkB,EAAED,UAAU,CAACT,GAAG,EAAER,IAAI,CAACM,GAAG,CAAC;QAEpE,OAAOnC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,eAAe,EACf;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QAAA,IAAAkH,qBAAA;QACT,IAAI,GAAAA,qBAAA,GAAC,IAAI,CAAChH,UAAU,CAAC3B,IAAI,cAAA2I,qBAAA,eAApBA,qBAAA,CAAsBlC,IAAI,EAAE,GAAE;UAClC,OAAO1H,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,kCAAkC,CAAC;QAC1D;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,UAAU,EAAE,IAAI,CAACO,UAAU,CAAC3B,IAAI,CAAC;QAErF,MAAMK,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,wBAAwB,EACxB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAAC4B,YAAY,IAAI,EAAE,OAAO,IAAI,CAAC5B,UAAU,CAAC4B,YAAY,KAAK,QAAQ,CAAC,EAAE;UACzF,OAAOxE,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,mEAAmE,CAAC;QAC3F;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,kBAAkB,EAAE,IAAI,CAACO,UAAU,CAAC4B,YAAY,CAAC;QAErG,MAAMlD,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,uBAAuB,EACvB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAACiH,cAAc,CAAC,aAAa,CAAC,EAAE;UACnD,OAAO7J,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,yCAAyC,CAAC;QACjE;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,iBAAiB,EAAE,IAAI,CAACO,UAAU,CAACkH,WAAW,IAAI,EAAE,CAAC;QAEzG,OAAO9J,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrB6G,WAAW,EAAE,IAAI,CAAClH,UAAU,CAACkH,WAAW,IAAI;SAC5C,CAAC;MACH;KACA,CACD;IAED9J,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,mBAAmB,EACnB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAACiH,cAAc,CAAC,SAAS,CAAC,EAAE;UAC/C,OAAO7J,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,qCAAqC,CAAC;QAC7D;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,iBAAiB,EAAE,IAAI,CAACO,UAAU,CAACmH,OAAO,IAAI,EAAE,CAAC;QAErG,OAAO/J,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrB8G,OAAO,EAAE,IAAI,CAACnH,UAAU,CAACmH,OAAO,IAAI;SACpC,CAAC;MACH;KACA,CACD;IAED/J,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,oBAAoB,EACpB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,OAAO,IAAI,CAACE,UAAU,CAAC8B,QAAQ,KAAK,WAAW,EAAE;UACpD,OAAO1E,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,sCAAsC,CAAC;QAC9D;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,IAAIkB,UAAU,CAAC9B,EAAE,KAAK,IAAI,CAAC4B,UAAU,CAAC8B,QAAQ,EAAE;UAC/C,OAAO1E,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,iFAAiF,CAAC;QACzG;QAEA,MAAMxD,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,UAAU,EAAE,IAAI,CAACO,UAAU,CAAC8B,QAAQ,CAAC;QAEzF,MAAMpD,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,iBAAiB,EACjB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAACiH,cAAc,CAAC,OAAO,CAAC,EAAE;UAC7C,OAAO7J,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,mCAAmC,CAAC;QAC3D;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,WAAW,EAAE,IAAI,CAACO,UAAU,CAACoH,KAAK,IAAI,EAAE,CAAC;QAE7F,OAAOhK,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrB+G,KAAK,EAAE,IAAI,CAACpH,UAAU,CAACoH,KAAK,IAAI;SAChC,CAAC;MACH;KACA,CACD;IAEDhK,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,gBAAgB,EAChB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QAAA,IAAAuH,qBAAA;QACT,IAAI,GAAAA,qBAAA,GAAC,IAAI,CAACrH,UAAU,CAAC+E,IAAI,cAAAsC,qBAAA,eAApBA,qBAAA,CAAsBvC,IAAI,EAAE,GAAE;UAClC,OAAO1H,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,kCAAkC,CAAC;QAC1D;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,IAAIkB,UAAU,CAAC/B,CAAC,KAAK,IAAI,CAAC6B,UAAU,CAAC+E,IAAI,EAAE;UAC1C,OAAO3H,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,oEAAoE,CAAC;QAC5F;QAEA,MAAMxD,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,UAAU,EAAE,IAAI,CAACO,UAAU,CAAC+E,IAAgB,CAAC;QAEjG,MAAMrG,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,wBAAwB,EACxB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAAC,IAAI,CAACE,UAAU,CAACiH,cAAc,CAAC,cAAc,CAAC,EAAE;UACpD,OAAO7J,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,0CAA0C,CAAC;QAClE;QAEA,MAAML,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,kBAAkB,EAAE,IAAI,CAACO,UAAU,CAACsH,YAAY,IAAI,EAAE,CAAC;QAE3G,OAAOlK,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBiH,YAAY,EAAE,IAAI,CAACtH,UAAU,CAACsH,YAAY,IAAI;SAC9C,CAAC;MACH;KACA,CACD;IAEDlK,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,kBAAkB,EAClB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,MAAMI,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBD,eAAe,EAAE;SACjB,CAAC;QAEF,MAAMzC,MAAM,CAAC6D,SAAS,CAAC,eAAe,EAAED,UAAU,CAACT,GAAG,CAAC;QAEvD,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,EAAE;MACxB;KACA,CACD;IAEDjD,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,cAAc,EACd;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMuI,KAAK,GAAG,MAAMjL,MAAM,CAAC6D,SAAS,CAAC,cAAc,EAAED,UAAU,CAACT,GAAG,CAAC;QAEpE,OAAOrC,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBkH;SACA,CAAC;MACH;KACA,CACD;IAEDnK,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,mBAAmB,EACnB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMW,GAAGA,CAAA;QACR,MAAMN,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM,EAAE,IAAI,CAAC6C,WAAW;UACxB1B,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMwI,UAAU,GAAG,CAClB,MAAMzL,aAAa,CAAC0L,oBAAoB,CAACvH,UAAU,CAACT,GAAG,EAAE,CAAC,WAAW,CAAC,EAAE;UACvEvB,UAAU,EAAE;YAAEiH,CAAC,EAAE;UAAC;SAClB,CAAC,CAAC7B,OAAO,EAAE,EACX4B,GAAG,CAAE7F,GAAQ,IAAKA,GAAG,CAAC8F,CAAC,CAAC;QAE1B,OAAO/H,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBmH;SACA,CAAC;MACH;KACA,CACD;IAEDpK,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,qBAAqB,EACrB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAI,CAACzD,KAAK,CAACqL,IAAI,CAAC,IAAI,CAAC1H,UAAU,EAAE3D,KAAK,CAACuJ,eAAe,CAAC;UAAE+B,SAAS,EAAEjI;QAAO,CAAE,CAAC,CAAC,EAAE;UAChF,OAAOtC,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,uCAAuC,CAAC;QAC/D;QACA,MAAAqH,iBAAA,GAAiC,IAAI,CAAC5H,UAAU;UAA1C;YAAE2H;UAAoB,CAAE,GAAAC,iBAAA;UAAR/J,MAAM,GAAA3C,wBAAA,CAAA0M,iBAAA,EAAAnM,UAAA;QAE5B,MAAMyE,UAAU,GAAG,MAAMrB,0BAA0B,CAAC;UACnDhB,MAAM;UACNmB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,MAAMjC,gBAAgB,CAAC,IAAI,CAACiC,MAAM,EAAEkB,UAAU,CAACT,GAAG,EAAE,WAAW,EAAEkI,SAAS,CAAC;QAE3E,MAAMjJ,IAAI,GAAG,MAAM5C,KAAK,CAAC6C,WAAW,CAACuB,UAAU,CAACT,GAAG,EAAE;UAAEvB,UAAU,EAAEd,GAAG,CAACuC,EAAE,CAACS;QAAsB,CAAE,CAAC;QAEnG,IAAI,CAAC1B,IAAI,EAAE;UACV,MAAM,IAAIpC,MAAM,CAAC0B,KAAK,CAAC,sBAAsB,EAAE,6EAA6E,CAAC;QAC9H;QAEA,OAAOZ,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UACrBC,KAAK,EAAE,MAAMhD,0BAA0B,CAACoB,IAAI,EAAE,IAAI,CAACM,MAAM;SACzD,CAAC;MACH;KACA,CACD;IAED5B,GAAG,CAACuC,EAAE,CAACC,QAAQ,CACd,sBAAsB,EACtB;MAAEC,YAAY,EAAE;IAAI,CAAE,EACtB;MACC,MAAMC,IAAIA,CAAA;QACT,IAAK,QAAQ,IAAI,IAAI,CAACE,UAAU,IAAI,CAAC,IAAI,CAACA,UAAU,CAAClC,MAAM,IAAM,UAAU,IAAI,IAAI,CAACkC,UAAU,IAAI,CAAC,IAAI,CAACA,UAAU,CAACjC,QAAS,EAAE;UAC7H,OAAOX,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,kDAAkD,CAAC;QAC1E;QAEA,MAAM7B,IAAI,GAAG,MAAMG,0BAA0B,CAAC;UAC7ChB,MAAM,EAAE,IAAI,CAACmC,UAAU;UACvBhB,MAAM,EAAE,IAAI,CAACA;SACb,CAAC;QAEF,IAAI,CAACN,IAAI,EAAE;UACV,OAAOtB,GAAG,CAACuC,EAAE,CAACY,OAAO,CAAC,yBAAyB,CAAC;QACjD;QAEA,IAAI,EAAE,MAAM1D,qBAAqB,CAAC,IAAI,CAACmC,MAAM,EAAE,CAAC,aAAa,EAAE,WAAW,CAAC,EAAEN,IAAI,CAACe,GAAG,CAAC,CAAC,EAAE;UACxF,OAAOrC,GAAG,CAACuC,EAAE,CAACuB,SAAS,EAAE;QAC1B;QAEA,MAAM2G,aAAa,GAAG,MAAM9L,aAAa,CAAC+L,YAAY,CAACpJ,IAAI,CAACe,GAAG,EAAE;UAChEvB,UAAU,EAAE;YAAE,OAAO,EAAE;UAAC;SACxB,CAAC,CAACoF,OAAO,EAAE;QAEZ,MAAMrC,OAAO,GAAG4G,aAAa,CAAC3C,GAAG,CAAE6C,CAAC;UAAA,IAAAC,IAAA;UAAA,QAAAA,IAAA,GAAKD,CAAC,CAAC5C,CAAC,cAAA6C,IAAA,uBAAHA,IAAA,CAAKzI,GAAG;QAAA,EAAC;QAElD,MAAM0I,QAAQ,GAAG;UAChBC,IAAI,EAAE;YACL7J,IAAI,EAAEK,IAAI,CAACL,IAAI;YACf0G,IAAI,EAAE;WACN;UACD9D,OAAO;UACPvC,IAAI,EAAE;YACLL,IAAI,EAAEK,IAAI,CAACL,IAAI;YACfkI,EAAE,EAAE7H,IAAI,CAACe;;SAEV;QAED,MAAMyI,IAAI,GAAG,MAAMxM,IAAI,CAACyM,MAAM,CAAC,IAAI,CAACnJ,MAAM,EAAEiJ,QAAQ,CAAC;QAErD,OAAO7K,GAAG,CAACuC,EAAE,CAACU,OAAO,CAAC;UAAE6H;QAAI,CAAE,CAAC;MAChC;KACA,CACD;IAACE,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"04a63b47fc114397e9dc2aa4bd661264d397fab5"}
