{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","inputSourceMap":{"version":3,"file":"client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","sourceRoot":"","sources":["client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AAC3G,OAAO,EAAE,CAAC,EAAE,MAAM,SAAS,CAAC;AAE5B,OAAO,EAAE,eAAe,EAAE,MAAM,0CAA0C,CAAC;AAE3E,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,IAAW,EAAE,EAAE,MAAM,EAAE,QAAQ,EAA4C,EAAE,EAAE;IAChH,MAAM,oBAAoB,GAAG,uBAAuB,EAAE,CAAC;IACvD,MAAM,kBAAkB,GAAG,WAAW,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;IACvE,MAAM,kBAAkB,GAAG,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACxE,MAAM,0BAA0B,GAAG,UAAU,CAAS,gBAAgB,CAAC,CAAC;IAExE,MAAM,oBAAoB,GAAG,KAAK,IAAI,EAAE;QACvC,uFAAuF;QACvF,IAAI,CAAC,0BAA0B,EAAE,CAAC;YACjC,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,kBAAkB,CAAC;gBACtD,MAAM,EAAE,IAAI,CAAC,GAAG;gBAChB,SAAS,EAAE,CAAC,IAAI,CAAC,WAAW;aAC5B,CAAC,CAAC;YACH,IAAI,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC7B,sGAAsG;gBACtG,oEAAoE;gBACpE,MAAM,WAAW,GAAG,QAAQ,CAAC,UAAU,GAAG,0BAA0B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC1F,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,GAAG,0BAA0B,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,wBAAwB,CAAC;gBAEnI,oBAAoB,CAAC;oBACpB,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE;wBACnB,WAAW,EAAE,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;wBACtD,eAAe,EAAE,WAAW,CAAC,UAAU;wBACvC,KAAK,EAAE,0BAA0B;qBACjC,CAAC;iBACF,CAAC,CAAC;YACJ,CAAC;YACD,MAAM,EAAE,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACzD,CAAC;IACF,CAAC,CAAC;IAEF,OAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,CAAC;AACrD,CAAC,CAAC","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint, usePermission, useSetting, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\nimport { t } from 'i18next';\n\nimport { roomCoordinator } from '../../../../../lib/rooms/roomCoordinator';\n\nexport const useToggleAutoJoin = (room: IRoom, { reload, mainRoom }: { reload?: () => void; mainRoom: IRoom }) => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst updateRoomEndpoint = useEndpoint('POST', '/v1/teams.updateRoom');\n\tconst canEditTeamChannel = usePermission('edit-team-channel', room._id);\n\tconst maxNumberOfAutoJoinMembers = useSetting<number>('API_User_Limit');\n\n\tconst handleToggleAutoJoin = async () => {\n\t\t// Sanity check, the setting has a default value, therefore it should always be defined\n\t\tif (!maxNumberOfAutoJoinMembers) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst { room: updatedRoom } = await updateRoomEndpoint({\n\t\t\t\troomId: room._id,\n\t\t\t\tisDefault: !room.teamDefault,\n\t\t\t});\n\t\t\tif (updatedRoom.teamDefault) {\n\t\t\t\t// If the number of members in the mainRoom (the team) is greater than the limit, show an info message\n\t\t\t\t// informing that not all members will be auto-joined to the channel\n\t\t\t\tconst messageType = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'info' : 'success';\n\t\t\t\tconst message = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'Team_Auto-join_exceeded_user_limit' : 'Team_Auto-join_updated';\n\n\t\t\t\tdispatchToastMessage({\n\t\t\t\t\ttype: messageType,\n\t\t\t\t\tmessage: t(message, {\n\t\t\t\t\t\tchannelName: roomCoordinator.getRoomName(room.t, room),\n\t\t\t\t\t\tnumberOfMembers: updatedRoom.usersCount,\n\t\t\t\t\t\tlimit: maxNumberOfAutoJoinMembers,\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t}\n\t\t\treload?.();\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\treturn { handleToggleAutoJoin, canEditTeamChannel };\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","inputSourceMap":{"version":3,"file":"client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx","sourceRoot":"","sources":["client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AAC3G,OAAO,EAAE,CAAC,EAAE,MAAM,SAAS,CAAC;AAE5B,OAAO,EAAE,eAAe,EAAE,MAAM,0CAA0C,CAAC;AAE3E,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,IAAW,EAAE,EAAE,MAAM,EAAE,QAAQ,EAA4C,EAAE,EAAE;IAChH,MAAM,oBAAoB,GAAG,uBAAuB,EAAE,CAAC;IACvD,MAAM,kBAAkB,GAAG,WAAW,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;IACvE,MAAM,kBAAkB,GAAG,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACxE,MAAM,0BAA0B,GAAG,UAAU,CAAS,gBAAgB,CAAC,CAAC;IAExE,MAAM,oBAAoB,GAAG,KAAK,IAAI,EAAE;QACvC,uFAAuF;QACvF,IAAI,CAAC,0BAA0B,EAAE,CAAC;YACjC,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,kBAAkB,CAAC;gBACtD,MAAM,EAAE,IAAI,CAAC,GAAG;gBAChB,SAAS,EAAE,CAAC,IAAI,CAAC,WAAW;aAC5B,CAAC,CAAC;YACH,IAAI,WAAW,CAAC,WAAW,EAAE,CAAC;gBAC7B,sGAAsG;gBACtG,oEAAoE;gBACpE,MAAM,WAAW,GAAG,QAAQ,CAAC,UAAU,GAAG,0BAA0B,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC1F,MAAM,OAAO,GAAG,QAAQ,CAAC,UAAU,GAAG,0BAA0B,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC,wBAAwB,CAAC;gBAEnI,oBAAoB,CAAC;oBACpB,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE;wBACnB,WAAW,EAAE,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC;wBACtD,eAAe,EAAE,WAAW,CAAC,UAAU;wBACvC,KAAK,EAAE,0BAA0B;qBACjC,CAAC;iBACF,CAAC,CAAC;YACJ,CAAC;YACD,MAAM,EAAE,EAAE,CAAC;QACZ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACzD,CAAC;IACF,CAAC,CAAC;IAEF,OAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,CAAC;AACrD,CAAC,CAAC","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint, usePermission, useSetting, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\nimport { t } from 'i18next';\n\nimport { roomCoordinator } from '../../../../../lib/rooms/roomCoordinator';\n\nexport const useToggleAutoJoin = (room: IRoom, { reload, mainRoom }: { reload?: () => void; mainRoom: IRoom }) => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst updateRoomEndpoint = useEndpoint('POST', '/v1/teams.updateRoom');\n\tconst canEditTeamChannel = usePermission('edit-team-channel', room._id);\n\tconst maxNumberOfAutoJoinMembers = useSetting<number>('API_User_Limit');\n\n\tconst handleToggleAutoJoin = async () => {\n\t\t// Sanity check, the setting has a default value, therefore it should always be defined\n\t\tif (!maxNumberOfAutoJoinMembers) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst { room: updatedRoom } = await updateRoomEndpoint({\n\t\t\t\troomId: room._id,\n\t\t\t\tisDefault: !room.teamDefault,\n\t\t\t});\n\t\t\tif (updatedRoom.teamDefault) {\n\t\t\t\t// If the number of members in the mainRoom (the team) is greater than the limit, show an info message\n\t\t\t\t// informing that not all members will be auto-joined to the channel\n\t\t\t\tconst messageType = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'info' : 'success';\n\t\t\t\tconst message = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'Team_Auto-join_exceeded_user_limit' : 'Team_Auto-join_updated';\n\n\t\t\t\tdispatchToastMessage({\n\t\t\t\t\ttype: messageType,\n\t\t\t\t\tmessage: t(message, {\n\t\t\t\t\t\tchannelName: roomCoordinator.getRoomName(room.t, room),\n\t\t\t\t\t\tnumberOfMembers: updatedRoom.usersCount,\n\t\t\t\t\t\tlimit: maxNumberOfAutoJoinMembers,\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t}\n\t\t\treload?.();\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\treturn { handleToggleAutoJoin, canEditTeamChannel };\n};\n"]}}},"code":"module.export({\n  useToggleAutoJoin: () => useToggleAutoJoin\n});\nlet useEndpoint, usePermission, useSetting, useToastMessageDispatch;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  },\n  usePermission(v) {\n    usePermission = v;\n  },\n  useSetting(v) {\n    useSetting = v;\n  },\n  useToastMessageDispatch(v) {\n    useToastMessageDispatch = v;\n  }\n}, 0);\nlet t;\nmodule.link(\"i18next\", {\n  t(v) {\n    t = v;\n  }\n}, 1);\nlet roomCoordinator;\nmodule.link(\"../../../../../lib/rooms/roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n}, 2);\nconst useToggleAutoJoin = (room, _ref) => {\n  let {\n    reload,\n    mainRoom\n  } = _ref;\n  const dispatchToastMessage = useToastMessageDispatch();\n  const updateRoomEndpoint = useEndpoint('POST', '/v1/teams.updateRoom');\n  const canEditTeamChannel = usePermission('edit-team-channel', room._id);\n  const maxNumberOfAutoJoinMembers = useSetting('API_User_Limit');\n  const handleToggleAutoJoin = async () => {\n    // Sanity check, the setting has a default value, therefore it should always be defined\n    if (!maxNumberOfAutoJoinMembers) {\n      return;\n    }\n    try {\n      const {\n        room: updatedRoom\n      } = await updateRoomEndpoint({\n        roomId: room._id,\n        isDefault: !room.teamDefault\n      });\n      if (updatedRoom.teamDefault) {\n        // If the number of members in the mainRoom (the team) is greater than the limit, show an info message\n        // informing that not all members will be auto-joined to the channel\n        const messageType = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'info' : 'success';\n        const message = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'Team_Auto-join_exceeded_user_limit' : 'Team_Auto-join_updated';\n        dispatchToastMessage({\n          type: messageType,\n          message: t(message, {\n            channelName: roomCoordinator.getRoomName(room.t, room),\n            numberOfMembers: updatedRoom.usersCount,\n            limit: maxNumberOfAutoJoinMembers\n          })\n        });\n      }\n      reload === null || reload === void 0 ? void 0 : reload();\n    } catch (error) {\n      dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n    }\n  };\n  return {\n    handleToggleAutoJoin,\n    canEditTeamChannel\n  };\n};","map":{"version":3,"names":["module","export","useToggleAutoJoin","useEndpoint","usePermission","useSetting","useToastMessageDispatch","link","v","t","roomCoordinator","room","_ref","reload","mainRoom","dispatchToastMessage","updateRoomEndpoint","canEditTeamChannel","_id","maxNumberOfAutoJoinMembers","handleToggleAutoJoin","updatedRoom","roomId","isDefault","teamDefault","messageType","usersCount","message","type","channelName","getRoomName","numberOfMembers","limit","error"],"sources":["client/views/teams/contextualBar/channels/hooks/useToggleAutoJoin.tsx"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { useEndpoint, usePermission, useSetting, useToastMessageDispatch } from '@rocket.chat/ui-contexts';\nimport { t } from 'i18next';\n\nimport { roomCoordinator } from '../../../../../lib/rooms/roomCoordinator';\n\nexport const useToggleAutoJoin = (room: IRoom, { reload, mainRoom }: { reload?: () => void; mainRoom: IRoom }) => {\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst updateRoomEndpoint = useEndpoint('POST', '/v1/teams.updateRoom');\n\tconst canEditTeamChannel = usePermission('edit-team-channel', room._id);\n\tconst maxNumberOfAutoJoinMembers = useSetting<number>('API_User_Limit');\n\n\tconst handleToggleAutoJoin = async () => {\n\t\t// Sanity check, the setting has a default value, therefore it should always be defined\n\t\tif (!maxNumberOfAutoJoinMembers) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst { room: updatedRoom } = await updateRoomEndpoint({\n\t\t\t\troomId: room._id,\n\t\t\t\tisDefault: !room.teamDefault,\n\t\t\t});\n\t\t\tif (updatedRoom.teamDefault) {\n\t\t\t\t// If the number of members in the mainRoom (the team) is greater than the limit, show an info message\n\t\t\t\t// informing that not all members will be auto-joined to the channel\n\t\t\t\tconst messageType = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'info' : 'success';\n\t\t\t\tconst message = mainRoom.usersCount > maxNumberOfAutoJoinMembers ? 'Team_Auto-join_exceeded_user_limit' : 'Team_Auto-join_updated';\n\n\t\t\t\tdispatchToastMessage({\n\t\t\t\t\ttype: messageType,\n\t\t\t\t\tmessage: t(message, {\n\t\t\t\t\t\tchannelName: roomCoordinator.getRoomName(room.t, room),\n\t\t\t\t\t\tnumberOfMembers: updatedRoom.usersCount,\n\t\t\t\t\t\tlimit: maxNumberOfAutoJoinMembers,\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t}\n\t\t\treload?.();\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\treturn { handleToggleAutoJoin, canEditTeamChannel };\n};\n"],"mappings":"AACAA,MAAA,CAAOC,MAAE;EAAAC,iBAAa,EAAAA,CAAA,KAAeA;AAAY;AAAA,IAAAC,WAAuB,EAAAC,aAAQ,EAAAC,UAAA,EAAAC,uBAA2B;AAAAN,MAAA,CAAAO,IAAA;EAAAJ,YAAAK,CAAA;IAAAL,WAAA,GAAAK,CAAA;EAAA;EAAAJ,cAAAI,CAAA;IAAAJ,aAAA,GAAAI,CAAA;EAAA;EAAAH,WAAAG,CAAA;IAAAH,UAAA,GAAAG,CAAA;EAAA;EAAAF,wBAAAE,CAAA;IAAAF,uBAAA,GAAAE,CAAA;EAAA;AAAA;AAAA,IAAAC,CAAA;AAAAT,MAAA,CAAAO,IAAA;EAAAE,EAAAD,CAAA;IAAAC,CAAA,GAAAD,CAAA;EAAA;AAAA;AAAA,IAAAE,eAAA;AAAAV,MAAA,CAAAO,IAAA;EAAAG,gBAAAF,CAAA;IAAAE,eAAA,GAAAF,CAAA;EAAA;AAAA;AAKpG,MAAMN,iBAAiB,GAAGA,CAACS,IAAW,EAAAC,IAAA,KAAoE;EAAA,IAAlE;IAAEC,MAAM;IAAEC;EAAQ,CAA4C,GAAAF,IAAA;EAC5G,MAAMG,oBAAoB,GAAGT,uBAAuB,EAAE;EACtD,MAAMU,kBAAkB,GAAGb,WAAW,CAAC,MAAM,EAAE,sBAAsB,CAAC;EACtE,MAAMc,kBAAkB,GAAGb,aAAa,CAAC,mBAAmB,EAAEO,IAAI,CAACO,GAAG,CAAC;EACvE,MAAMC,0BAA0B,GAAGd,UAAU,CAAS,gBAAgB,CAAC;EAEvE,MAAMe,oBAAoB,GAAG,MAAAA,CAAA,KAAW;IACvC;IACA,IAAI,CAACD,0BAA0B,EAAE;MAChC;IACD;IAEA,IAAI;MACH,MAAM;QAAER,IAAI,EAAEU;MAAW,CAAE,GAAG,MAAML,kBAAkB,CAAC;QACtDM,MAAM,EAAEX,IAAI,CAACO,GAAG;QAChBK,SAAS,EAAE,CAACZ,IAAI,CAACa;OACjB,CAAC;MACF,IAAIH,WAAW,CAACG,WAAW,EAAE;QAC5B;QACA;QACA,MAAMC,WAAW,GAAGX,QAAQ,CAACY,UAAU,GAAGP,0BAA0B,GAAG,MAAM,GAAG,SAAS;QACzF,MAAMQ,OAAO,GAAGb,QAAQ,CAACY,UAAU,GAAGP,0BAA0B,GAAG,oCAAoC,GAAG,wBAAwB;QAElIJ,oBAAoB,CAAC;UACpBa,IAAI,EAAEH,WAAW;UACjBE,OAAO,EAAElB,CAAC,CAACkB,OAAO,EAAE;YACnBE,WAAW,EAAEnB,eAAe,CAACoB,WAAW,CAACnB,IAAI,CAACF,CAAC,EAAEE,IAAI,CAAC;YACtDoB,eAAe,EAAEV,WAAW,CAACK,UAAU;YACvCM,KAAK,EAAEb;WACP;SACD,CAAC;MACH;MACAN,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAE,CAAE;IACX,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACflB,oBAAoB,CAAC;QAAEa,IAAI,EAAE,OAAO;QAAED,OAAO,EAAEM;MAAK,CAAE,CAAC;IACxD;EACD,CAAC;EAED,OAAO;IAAEb,oBAAoB;IAAEH;EAAkB,CAAE;AACpD,CAAC","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d717ce448134892bf4bb21e177af57d55dd2c531"}
