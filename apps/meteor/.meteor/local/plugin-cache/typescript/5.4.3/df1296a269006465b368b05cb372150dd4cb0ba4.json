{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageList.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/room/MessageList/MessageList.tsx","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageList.tsx","inputSourceMap":{"version":3,"file":"client/views/room/MessageList/MessageList.tsx","sourceRoot":"","sources":["client/views/room/MessageList/MessageList.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAEzE,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAC3E,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,mBAAmB,MAAM,iCAAiC,CAAC;AAOlE,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,WAAW,CAAC,EAAE,GAAG,EAAE,cAAc,EAAoB;IACxF,MAAM,QAAQ,GAAG,WAAW,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,MAAM,YAAY,GAAG,mBAAmB,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,CAAC,CAAC,iBAAiB,CAAU,gBAAgB,CAAC,CAAC;IACtE,MAAM,qBAAqB,GAAG,MAAM,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC;IAC3E,MAAM,oBAAoB,GAAG,uBAAuB,EAAE,CAAC;IAEvD,OAAO,CACN,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,CACnD;GAAA,CAAC,wBAAwB,CACxB;IAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;YAC3D,MAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YACjF,MAAM,iBAAiB,GAAG,oBAAoB,KAAK,OAAO,CAAC,GAAG,CAAC;YAC/D,MAAM,MAAM,GAAG,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACrD,MAAM,OAAO,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;YAErD,OAAO,CACN,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAC1B;OAAA,CAAC,eAAe,CACf,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,iBAAiB,CAAC,CAAC,iBAAiB,CAAC,CACrC,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,MAAM,CAAC,CAAC,MAAM,CAAC,EAEjB;MAAA,EAAE,QAAQ,CAAC,CACX,CAAC;QACH,CAAC,CAAC,CACH;GAAA,EAAE,wBAAwB,CAC3B;EAAA,EAAE,mBAAmB,CAAC,CACtB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { isThreadMessage } from '@rocket.chat/core-typings';\nimport { useSetting, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ComponentProps } from 'react';\nimport React, { Fragment } from 'react';\n\nimport { MessageTypes } from '../../../../app/ui-utils/client';\nimport { useRoomSubscription } from '../contexts/RoomContext';\nimport { useFirstUnreadMessageId } from '../hooks/useFirstUnreadMessageId';\nimport { SelectedMessagesProvider } from '../providers/SelectedMessagesProvider';\nimport { MessageListItem } from './MessageListItem';\nimport { useMessages } from './hooks/useMessages';\nimport { isMessageSequential } from './lib/isMessageSequential';\nimport MessageListProvider from './providers/MessageListProvider';\n\ntype MessageListProps = {\n\trid: IRoom['_id'];\n\tmessageListRef: ComponentProps<typeof MessageListProvider>['messageListRef'];\n};\n\nexport const MessageList = function MessageList({ rid, messageListRef }: MessageListProps) {\n\tconst messages = useMessages({ rid });\n\tconst subscription = useRoomSubscription();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider messageListRef={messageListRef}>\n\t\t\t<SelectedMessagesProvider>\n\t\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\t\tconst sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n\t\t\t\t\tconst showUnreadDivider = firstUnreadMessageId === message._id;\n\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\tconst visible = !isThreadMessage(message) && !system;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t\t<MessageListItem\n\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\tprevious={previous}\n\t\t\t\t\t\t\t\tshowUnreadDivider={showUnreadDivider}\n\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\tsequential={sequential}\n\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\tsubscription={subscription}\n\t\t\t\t\t\t\t\tsystem={system}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</SelectedMessagesProvider>\n\t\t</MessageListProvider>\n\t);\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/MessageList/MessageList.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/room/MessageList/MessageList.tsx","inputSourceMap":{"version":3,"file":"client/views/room/MessageList/MessageList.tsx","sourceRoot":"","sources":["client/views/room/MessageList/MessageList.tsx"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAC5D,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAEzE,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAC;AAC3E,OAAO,EAAE,wBAAwB,EAAE,MAAM,uCAAuC,CAAC;AACjF,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,mBAAmB,MAAM,iCAAiC,CAAC;AAOlE,MAAM,CAAC,MAAM,WAAW,GAAG,SAAS,WAAW,CAAC,EAAE,GAAG,EAAE,cAAc,EAAoB;IACxF,MAAM,QAAQ,GAAG,WAAW,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IACtC,MAAM,YAAY,GAAG,mBAAmB,EAAE,CAAC;IAC3C,MAAM,cAAc,GAAG,CAAC,CAAC,iBAAiB,CAAU,gBAAgB,CAAC,CAAC;IACtE,MAAM,qBAAqB,GAAG,MAAM,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC,CAAC;IAC3E,MAAM,oBAAoB,GAAG,uBAAuB,EAAE,CAAC;IAEvD,OAAO,CACN,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,CACnD;GAAA,CAAC,wBAAwB,CACxB;IAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;YAC3D,MAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YACjF,MAAM,iBAAiB,GAAG,oBAAoB,KAAK,OAAO,CAAC,GAAG,CAAC;YAC/D,MAAM,MAAM,GAAG,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACrD,MAAM,OAAO,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;YAErD,OAAO,CACN,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAC1B;OAAA,CAAC,eAAe,CACf,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,iBAAiB,CAAC,CAAC,iBAAiB,CAAC,CACrC,cAAc,CAAC,CAAC,cAAc,CAAC,CAC/B,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,MAAM,CAAC,CAAC,MAAM,CAAC,EAEjB;MAAA,EAAE,QAAQ,CAAC,CACX,CAAC;QACH,CAAC,CAAC,CACH;GAAA,EAAE,wBAAwB,CAC3B;EAAA,EAAE,mBAAmB,CAAC,CACtB,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { isThreadMessage } from '@rocket.chat/core-typings';\nimport { useSetting, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ComponentProps } from 'react';\nimport React, { Fragment } from 'react';\n\nimport { MessageTypes } from '../../../../app/ui-utils/client';\nimport { useRoomSubscription } from '../contexts/RoomContext';\nimport { useFirstUnreadMessageId } from '../hooks/useFirstUnreadMessageId';\nimport { SelectedMessagesProvider } from '../providers/SelectedMessagesProvider';\nimport { MessageListItem } from './MessageListItem';\nimport { useMessages } from './hooks/useMessages';\nimport { isMessageSequential } from './lib/isMessageSequential';\nimport MessageListProvider from './providers/MessageListProvider';\n\ntype MessageListProps = {\n\trid: IRoom['_id'];\n\tmessageListRef: ComponentProps<typeof MessageListProvider>['messageListRef'];\n};\n\nexport const MessageList = function MessageList({ rid, messageListRef }: MessageListProps) {\n\tconst messages = useMessages({ rid });\n\tconst subscription = useRoomSubscription();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider messageListRef={messageListRef}>\n\t\t\t<SelectedMessagesProvider>\n\t\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\t\tconst sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n\t\t\t\t\tconst showUnreadDivider = firstUnreadMessageId === message._id;\n\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\tconst visible = !isThreadMessage(message) && !system;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t\t<MessageListItem\n\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\tprevious={previous}\n\t\t\t\t\t\t\t\tshowUnreadDivider={showUnreadDivider}\n\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\tsequential={sequential}\n\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\tsubscription={subscription}\n\t\t\t\t\t\t\t\tsystem={system}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</SelectedMessagesProvider>\n\t\t</MessageListProvider>\n\t);\n};\n"]}}},"code":"module.export({\n  MessageList: () => MessageList\n});\nlet isThreadMessage;\nmodule.link(\"@rocket.chat/core-typings\", {\n  isThreadMessage(v) {\n    isThreadMessage = v;\n  }\n}, 0);\nlet useSetting, useUserPreference;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  useSetting(v) {\n    useSetting = v;\n  },\n  useUserPreference(v) {\n    useUserPreference = v;\n  }\n}, 1);\nlet React, Fragment;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n  Fragment(v) {\n    Fragment = v;\n  }\n}, 2);\nlet MessageTypes;\nmodule.link(\"../../../../app/ui-utils/client\", {\n  MessageTypes(v) {\n    MessageTypes = v;\n  }\n}, 3);\nlet useRoomSubscription;\nmodule.link(\"../contexts/RoomContext\", {\n  useRoomSubscription(v) {\n    useRoomSubscription = v;\n  }\n}, 4);\nlet useFirstUnreadMessageId;\nmodule.link(\"../hooks/useFirstUnreadMessageId\", {\n  useFirstUnreadMessageId(v) {\n    useFirstUnreadMessageId = v;\n  }\n}, 5);\nlet SelectedMessagesProvider;\nmodule.link(\"../providers/SelectedMessagesProvider\", {\n  SelectedMessagesProvider(v) {\n    SelectedMessagesProvider = v;\n  }\n}, 6);\nlet MessageListItem;\nmodule.link(\"./MessageListItem\", {\n  MessageListItem(v) {\n    MessageListItem = v;\n  }\n}, 7);\nlet useMessages;\nmodule.link(\"./hooks/useMessages\", {\n  useMessages(v) {\n    useMessages = v;\n  }\n}, 8);\nlet isMessageSequential;\nmodule.link(\"./lib/isMessageSequential\", {\n  isMessageSequential(v) {\n    isMessageSequential = v;\n  }\n}, 9);\nlet MessageListProvider;\nmodule.link(\"./providers/MessageListProvider\", {\n  default(v) {\n    MessageListProvider = v;\n  }\n}, 10);\nconst MessageList = function MessageList(_ref) {\n  let {\n    rid,\n    messageListRef\n  } = _ref;\n  const messages = useMessages({\n    rid\n  });\n  const subscription = useRoomSubscription();\n  const showUserAvatar = !!useUserPreference('displayAvatars');\n  const messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n  const firstUnreadMessageId = useFirstUnreadMessageId();\n  return /*#__PURE__*/React.createElement(MessageListProvider, {\n    messageListRef: messageListRef\n  }, /*#__PURE__*/React.createElement(SelectedMessagesProvider, null, messages.map((message, index, _ref2) => {\n    let {\n      [index - 1]: previous\n    } = _ref2;\n    const sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n    const showUnreadDivider = firstUnreadMessageId === message._id;\n    const system = MessageTypes.isSystemMessage(message);\n    const visible = !isThreadMessage(message) && !system;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: message._id\n    }, /*#__PURE__*/React.createElement(MessageListItem, {\n      message: message,\n      previous: previous,\n      showUnreadDivider: showUnreadDivider,\n      showUserAvatar: showUserAvatar,\n      sequential: sequential,\n      visible: visible,\n      subscription: subscription,\n      system: system\n    }));\n  })));\n};","map":{"version":3,"names":["module","export","MessageList","isThreadMessage","link","v","useSetting","useUserPreference","React","Fragment","default","MessageTypes","useRoomSubscription","useFirstUnreadMessageId","SelectedMessagesProvider","MessageListItem","useMessages","isMessageSequential","MessageListProvider","_ref","rid","messageListRef","messages","subscription","showUserAvatar","messageGroupingPeriod","Number","firstUnreadMessageId","createElement","map","message","index","_ref2","previous","sequential","showUnreadDivider","_id","system","isSystemMessage","visible","key"],"sources":["client/views/room/MessageList/MessageList.tsx"],"sourcesContent":["import type { IRoom } from '@rocket.chat/core-typings';\nimport { isThreadMessage } from '@rocket.chat/core-typings';\nimport { useSetting, useUserPreference } from '@rocket.chat/ui-contexts';\nimport type { ComponentProps } from 'react';\nimport React, { Fragment } from 'react';\n\nimport { MessageTypes } from '../../../../app/ui-utils/client';\nimport { useRoomSubscription } from '../contexts/RoomContext';\nimport { useFirstUnreadMessageId } from '../hooks/useFirstUnreadMessageId';\nimport { SelectedMessagesProvider } from '../providers/SelectedMessagesProvider';\nimport { MessageListItem } from './MessageListItem';\nimport { useMessages } from './hooks/useMessages';\nimport { isMessageSequential } from './lib/isMessageSequential';\nimport MessageListProvider from './providers/MessageListProvider';\n\ntype MessageListProps = {\n\trid: IRoom['_id'];\n\tmessageListRef: ComponentProps<typeof MessageListProvider>['messageListRef'];\n};\n\nexport const MessageList = function MessageList({ rid, messageListRef }: MessageListProps) {\n\tconst messages = useMessages({ rid });\n\tconst subscription = useRoomSubscription();\n\tconst showUserAvatar = !!useUserPreference<boolean>('displayAvatars');\n\tconst messageGroupingPeriod = Number(useSetting('Message_GroupingPeriod'));\n\tconst firstUnreadMessageId = useFirstUnreadMessageId();\n\n\treturn (\n\t\t<MessageListProvider messageListRef={messageListRef}>\n\t\t\t<SelectedMessagesProvider>\n\t\t\t\t{messages.map((message, index, { [index - 1]: previous }) => {\n\t\t\t\t\tconst sequential = isMessageSequential(message, previous, messageGroupingPeriod);\n\t\t\t\t\tconst showUnreadDivider = firstUnreadMessageId === message._id;\n\t\t\t\t\tconst system = MessageTypes.isSystemMessage(message);\n\t\t\t\t\tconst visible = !isThreadMessage(message) && !system;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Fragment key={message._id}>\n\t\t\t\t\t\t\t<MessageListItem\n\t\t\t\t\t\t\t\tmessage={message}\n\t\t\t\t\t\t\t\tprevious={previous}\n\t\t\t\t\t\t\t\tshowUnreadDivider={showUnreadDivider}\n\t\t\t\t\t\t\t\tshowUserAvatar={showUserAvatar}\n\t\t\t\t\t\t\t\tsequential={sequential}\n\t\t\t\t\t\t\t\tvisible={visible}\n\t\t\t\t\t\t\t\tsubscription={subscription}\n\t\t\t\t\t\t\t\tsystem={system}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</SelectedMessagesProvider>\n\t\t</MessageListProvider>\n\t);\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"df1296a269006465b368b05cb372150dd4cb0ba4"}
