{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/migrations.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/migrations.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/migrations.ts","inputSourceMap":{"version":3,"file":"server/lib/migrations.ts","sourceRoot":"","sources":["server/lib/migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IControl } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Migrations } from '@rocket.chat/models';\n\nimport { showErrorBox } from './logger/showBox';\nimport { Info } from '../../app/utils/rocketchat.info';\nimport { sleep } from '../../lib/utils/sleep';\n\ntype IMigration = {\n\tname?: string;\n\tversion: number;\n\tup: (migration: IMigration) => Promise<void> | void;\n\tdown?: (migration: IMigration) => Promise<void> | void;\n};\n\nconst log = new Logger('Migrations');\n\nconst migrations = new Set<IMigration>();\n\n// sets the control record\nfunction setControl(control: Pick<IControl, 'version' | 'locked'>): Pick<IControl, 'version' | 'locked'> {\n\tvoid Migrations.updateMany(\n\t\t{\n\t\t\t_id: 'control',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tversion: control.version,\n\t\t\t\tlocked: control.locked,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\treturn control;\n}\n\n// gets the current control record, optionally creating it if non-existant\nexport async function getControl(): Promise<IControl> {\n\tconst control = (await Migrations.findOne({\n\t\t_id: 'control',\n\t})) as IControl;\n\n\treturn (\n\t\tcontrol ||\n\t\tsetControl({\n\t\t\tversion: 0,\n\t\t\tlocked: false,\n\t\t})\n\t);\n}\n\n// Returns true if lock was acquired.\nasync function lock(): Promise<boolean> {\n\tconst date = new Date();\n\tconst dateMinusInterval = new Date();\n\tdateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n\n\tconst build = Info ? Info.build.date : date;\n\n\t// This is atomic. The selector ensures only one caller at a time will see\n\t// the unlocked control, and locking occurs in the same update's modifier.\n\t// All other simultaneous callers will get false back from the update.\n\treturn (\n\t\t(\n\t\t\tawait Migrations.updateMany(\n\t\t\t\t{\n\t\t\t\t\t_id: 'control',\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t\t$lt: dateMinusInterval,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbuildAt: {\n\t\t\t\t\t\t\t\t$ne: build,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: date,\n\t\t\t\t\t\tbuildAt: build,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t).matchedCount === 1\n\t);\n}\n\nexport function addMigration(migration: IMigration): void {\n\tif (!migration?.version) {\n\t\tthrow new Error('Migration version is required');\n\t}\n\tif (!migration?.up) {\n\t\tthrow new Error('Migration up() is required');\n\t}\n\tmigrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version: number): void {\n\tsetControl({\n\t\tlocked: false,\n\t\tversion,\n\t});\n}\n\nfunction getOrderedMigrations(): IMigration[] {\n\treturn Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version: number, control: IControl, e: any): void {\n\tshowErrorBox(\n\t\t'ERROR! SERVER STOPPED',\n\t\t[\n\t\t\t'Your database migration failed:',\n\t\t\te.message,\n\t\t\t'',\n\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t'If the problem persists, please contact support.',\n\t\t\t'',\n\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t`Database target version: ${version}`,\n\t\t\t'',\n\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t].join('\\n'),\n\t);\n}\n\n// run the actual migration\nasync function migrate(direction: 'up' | 'down', migration: IMigration): Promise<void> {\n\tif (typeof migration[direction] !== 'function') {\n\t\tthrow new Error(`Cannot migrate ${direction} on version ${migration.version}`);\n\t}\n\n\tlog.startup(`Running ${direction}() on version ${migration.version}${migration.name ? `(${migration.name})` : ''}`);\n\n\tawait migration[direction]?.(migration);\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nexport async function migrateDatabase(targetVersion: 'latest' | number, subcommands?: string[]): Promise<boolean> {\n\tconst control = await getControl();\n\tconst currentVersion = control.version;\n\n\tconst orderedMigrations = getOrderedMigrations();\n\n\tif (orderedMigrations.length === 0) {\n\t\tlog.startup('No migrations to run');\n\t\treturn true;\n\t}\n\n\t// version 0 means it is a fresh database, just set the control to latest known version and skip\n\tif (currentVersion === 0) {\n\t\tsetControl({\n\t\t\tlocked: false,\n\t\t\tversion: orderedMigrations[orderedMigrations.length - 1].version,\n\t\t});\n\t\treturn true;\n\t}\n\n\tconst version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n\n\t// get latest version\n\t// const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n\tif (!(await lock())) {\n\t\tconst msg = `Not migrating, control is locked. Attempt ${currentAttempt}/${maxAttempts}`;\n\t\tif (currentAttempt <= maxAttempts) {\n\t\t\tlog.warn(`${msg}. Trying again in ${retryInterval} seconds.`);\n\n\t\t\tawait sleep(retryInterval * 1000);\n\n\t\t\tcurrentAttempt++;\n\t\t\treturn migrateDatabase(targetVersion, subcommands);\n\t\t}\n\t\tconst control = await getControl(); // Side effect: upserts control document.\n\t\tshowErrorBox(\n\t\t\t'ERROR! SERVER STOPPED',\n\t\t\t[\n\t\t\t\t'Your database migration control is locked.',\n\t\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t\t'If the problem persists, please contact support.',\n\t\t\t\t'',\n\t\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t\t`Database target version: ${version}`,\n\t\t\t\t'',\n\t\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t\t].join('\\n'),\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (subcommands?.includes('rerun')) {\n\t\tlog.startup(`Rerunning version ${targetVersion}`);\n\t\tconst migration = orderedMigrations.find((migration) => migration.version === targetVersion);\n\n\t\tif (!migration) {\n\t\t\tthrow new Error(`Cannot rerun migration ${targetVersion}`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait migrate('up', migration);\n\t\t} catch (e) {\n\t\t\tshowError(version, control, e);\n\t\t\tlog.error({ err: e });\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tlog.startup('Finished migrating.');\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tif (currentVersion === version) {\n\t\tlog.startup(`Not migrating, already at version ${version}`);\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tconst startIdx = orderedMigrations.findIndex((migration) => migration.version === currentVersion);\n\tif (startIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${currentVersion}`);\n\t}\n\n\tconst endIdx = orderedMigrations.findIndex((migration) => migration.version === version);\n\tif (endIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${version}`);\n\t}\n\n\tlog.startup(`Migrating from version ${orderedMigrations[startIdx].version} -> ${orderedMigrations[endIdx].version}`);\n\n\ttry {\n\t\tconst migrations = [];\n\t\tif (currentVersion < version) {\n\t\t\tfor (let i = startIdx; i < endIdx; i++) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('up', orderedMigrations[i + 1]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i + 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = startIdx; i > endIdx; i--) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('down', orderedMigrations[i]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i - 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor await (const migration of migrations) {\n\t\t\tawait migration();\n\t\t}\n\t} catch (e) {\n\t\tshowError(version, control, e);\n\t\tlog.error({ err: e });\n\t\tprocess.exit(1);\n\t}\n\n\tunlock(orderedMigrations[endIdx].version);\n\tlog.startup('Finished migrating.');\n\n\t// remember to run meteor with --once otherwise it will restart\n\tif (subcommands?.includes('exit')) {\n\t\tprocess.exit(0);\n\t}\n\n\treturn true;\n}\n\nexport async function onServerVersionChange(cb: () => Promise<void>): Promise<void> {\n\tconst result = await Migrations.findOneAndUpdate(\n\t\t{\n\t\t\t_id: 'upgrade',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\thash: Info.commit.hash,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\tif (result.value?.hash === Info.commit.hash) {\n\t\treturn;\n\t}\n\n\tawait cb();\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/migrations.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/migrations.ts","inputSourceMap":{"version":3,"file":"server/lib/migrations.ts","sourceRoot":"","sources":["server/lib/migrations.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IControl } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Migrations } from '@rocket.chat/models';\n\nimport { showErrorBox } from './logger/showBox';\nimport { Info } from '../../app/utils/rocketchat.info';\nimport { sleep } from '../../lib/utils/sleep';\n\ntype IMigration = {\n\tname?: string;\n\tversion: number;\n\tup: (migration: IMigration) => Promise<void> | void;\n\tdown?: (migration: IMigration) => Promise<void> | void;\n};\n\nconst log = new Logger('Migrations');\n\nconst migrations = new Set<IMigration>();\n\n// sets the control record\nfunction setControl(control: Pick<IControl, 'version' | 'locked'>): Pick<IControl, 'version' | 'locked'> {\n\tvoid Migrations.updateMany(\n\t\t{\n\t\t\t_id: 'control',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tversion: control.version,\n\t\t\t\tlocked: control.locked,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\treturn control;\n}\n\n// gets the current control record, optionally creating it if non-existant\nexport async function getControl(): Promise<IControl> {\n\tconst control = (await Migrations.findOne({\n\t\t_id: 'control',\n\t})) as IControl;\n\n\treturn (\n\t\tcontrol ||\n\t\tsetControl({\n\t\t\tversion: 0,\n\t\t\tlocked: false,\n\t\t})\n\t);\n}\n\n// Returns true if lock was acquired.\nasync function lock(): Promise<boolean> {\n\tconst date = new Date();\n\tconst dateMinusInterval = new Date();\n\tdateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n\n\tconst build = Info ? Info.build.date : date;\n\n\t// This is atomic. The selector ensures only one caller at a time will see\n\t// the unlocked control, and locking occurs in the same update's modifier.\n\t// All other simultaneous callers will get false back from the update.\n\treturn (\n\t\t(\n\t\t\tawait Migrations.updateMany(\n\t\t\t\t{\n\t\t\t\t\t_id: 'control',\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t\t$lt: dateMinusInterval,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbuildAt: {\n\t\t\t\t\t\t\t\t$ne: build,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: date,\n\t\t\t\t\t\tbuildAt: build,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t).matchedCount === 1\n\t);\n}\n\nexport function addMigration(migration: IMigration): void {\n\tif (!migration?.version) {\n\t\tthrow new Error('Migration version is required');\n\t}\n\tif (!migration?.up) {\n\t\tthrow new Error('Migration up() is required');\n\t}\n\tmigrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version: number): void {\n\tsetControl({\n\t\tlocked: false,\n\t\tversion,\n\t});\n}\n\nfunction getOrderedMigrations(): IMigration[] {\n\treturn Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version: number, control: IControl, e: any): void {\n\tshowErrorBox(\n\t\t'ERROR! SERVER STOPPED',\n\t\t[\n\t\t\t'Your database migration failed:',\n\t\t\te.message,\n\t\t\t'',\n\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t'If the problem persists, please contact support.',\n\t\t\t'',\n\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t`Database target version: ${version}`,\n\t\t\t'',\n\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t].join('\\n'),\n\t);\n}\n\n// run the actual migration\nasync function migrate(direction: 'up' | 'down', migration: IMigration): Promise<void> {\n\tif (typeof migration[direction] !== 'function') {\n\t\tthrow new Error(`Cannot migrate ${direction} on version ${migration.version}`);\n\t}\n\n\tlog.startup(`Running ${direction}() on version ${migration.version}${migration.name ? `(${migration.name})` : ''}`);\n\n\tawait migration[direction]?.(migration);\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nexport async function migrateDatabase(targetVersion: 'latest' | number, subcommands?: string[]): Promise<boolean> {\n\tconst control = await getControl();\n\tconst currentVersion = control.version;\n\n\tconst orderedMigrations = getOrderedMigrations();\n\n\tif (orderedMigrations.length === 0) {\n\t\tlog.startup('No migrations to run');\n\t\treturn true;\n\t}\n\n\t// version 0 means it is a fresh database, just set the control to latest known version and skip\n\tif (currentVersion === 0) {\n\t\tsetControl({\n\t\t\tlocked: false,\n\t\t\tversion: orderedMigrations[orderedMigrations.length - 1].version,\n\t\t});\n\t\treturn true;\n\t}\n\n\tconst version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n\n\t// get latest version\n\t// const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n\tif (!(await lock())) {\n\t\tconst msg = `Not migrating, control is locked. Attempt ${currentAttempt}/${maxAttempts}`;\n\t\tif (currentAttempt <= maxAttempts) {\n\t\t\tlog.warn(`${msg}. Trying again in ${retryInterval} seconds.`);\n\n\t\t\tawait sleep(retryInterval * 1000);\n\n\t\t\tcurrentAttempt++;\n\t\t\treturn migrateDatabase(targetVersion, subcommands);\n\t\t}\n\t\tconst control = await getControl(); // Side effect: upserts control document.\n\t\tshowErrorBox(\n\t\t\t'ERROR! SERVER STOPPED',\n\t\t\t[\n\t\t\t\t'Your database migration control is locked.',\n\t\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t\t'If the problem persists, please contact support.',\n\t\t\t\t'',\n\t\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t\t`Database target version: ${version}`,\n\t\t\t\t'',\n\t\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t\t].join('\\n'),\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (subcommands?.includes('rerun')) {\n\t\tlog.startup(`Rerunning version ${targetVersion}`);\n\t\tconst migration = orderedMigrations.find((migration) => migration.version === targetVersion);\n\n\t\tif (!migration) {\n\t\t\tthrow new Error(`Cannot rerun migration ${targetVersion}`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait migrate('up', migration);\n\t\t} catch (e) {\n\t\t\tshowError(version, control, e);\n\t\t\tlog.error({ err: e });\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tlog.startup('Finished migrating.');\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tif (currentVersion === version) {\n\t\tlog.startup(`Not migrating, already at version ${version}`);\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tconst startIdx = orderedMigrations.findIndex((migration) => migration.version === currentVersion);\n\tif (startIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${currentVersion}`);\n\t}\n\n\tconst endIdx = orderedMigrations.findIndex((migration) => migration.version === version);\n\tif (endIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${version}`);\n\t}\n\n\tlog.startup(`Migrating from version ${orderedMigrations[startIdx].version} -> ${orderedMigrations[endIdx].version}`);\n\n\ttry {\n\t\tconst migrations = [];\n\t\tif (currentVersion < version) {\n\t\t\tfor (let i = startIdx; i < endIdx; i++) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('up', orderedMigrations[i + 1]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i + 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = startIdx; i > endIdx; i--) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('down', orderedMigrations[i]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i - 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor await (const migration of migrations) {\n\t\t\tawait migration();\n\t\t}\n\t} catch (e) {\n\t\tshowError(version, control, e);\n\t\tlog.error({ err: e });\n\t\tprocess.exit(1);\n\t}\n\n\tunlock(orderedMigrations[endIdx].version);\n\tlog.startup('Finished migrating.');\n\n\t// remember to run meteor with --once otherwise it will restart\n\tif (subcommands?.includes('exit')) {\n\t\tprocess.exit(0);\n\t}\n\n\treturn true;\n}\n\nexport async function onServerVersionChange(cb: () => Promise<void>): Promise<void> {\n\tconst result = await Migrations.findOneAndUpdate(\n\t\t{\n\t\t\t_id: 'upgrade',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\thash: Info.commit.hash,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\tif (result.value?.hash === Info.commit.hash) {\n\t\treturn;\n\t}\n\n\tawait cb();\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      getControl: () => getControl,\n      addMigration: () => addMigration,\n      migrateDatabase: () => migrateDatabase,\n      onServerVersionChange: () => onServerVersionChange\n    });\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let Migrations;\n    module.link(\"@rocket.chat/models\", {\n      Migrations(v) {\n        Migrations = v;\n      }\n    }, 1);\n    let showErrorBox;\n    module.link(\"./logger/showBox\", {\n      showErrorBox(v) {\n        showErrorBox = v;\n      }\n    }, 2);\n    let Info;\n    module.link(\"../../app/utils/rocketchat.info\", {\n      Info(v) {\n        Info = v;\n      }\n    }, 3);\n    let sleep;\n    module.link(\"../../lib/utils/sleep\", {\n      sleep(v) {\n        sleep = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const log = new Logger('Migrations');\n    const migrations = new Set();\n    // sets the control record\n    function setControl(control) {\n      void Migrations.updateMany({\n        _id: 'control'\n      }, {\n        $set: {\n          version: control.version,\n          locked: control.locked\n        }\n      }, {\n        upsert: true\n      });\n      return control;\n    }\n    // gets the current control record, optionally creating it if non-existant\n    async function getControl() {\n      const control = await Migrations.findOne({\n        _id: 'control'\n      });\n      return control || setControl({\n        version: 0,\n        locked: false\n      });\n    }\n    // Returns true if lock was acquired.\n    async function lock() {\n      const date = new Date();\n      const dateMinusInterval = new Date();\n      dateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n      const build = Info ? Info.build.date : date;\n      // This is atomic. The selector ensures only one caller at a time will see\n      // the unlocked control, and locking occurs in the same update's modifier.\n      // All other simultaneous callers will get false back from the update.\n      return (await Migrations.updateMany({\n        _id: 'control',\n        $or: [{\n          locked: false\n        }, {\n          lockedAt: {\n            $lt: dateMinusInterval\n          }\n        }, {\n          buildAt: {\n            $ne: build\n          }\n        }]\n      }, {\n        $set: {\n          locked: true,\n          lockedAt: date,\n          buildAt: build\n        }\n      })).matchedCount === 1;\n    }\n    function addMigration(migration) {\n      if (!(migration !== null && migration !== void 0 && migration.version)) {\n        throw new Error('Migration version is required');\n      }\n      if (!(migration !== null && migration !== void 0 && migration.up)) {\n        throw new Error('Migration up() is required');\n      }\n      migrations.add(migration);\n    }\n    // Side effect: saves version.\n    function unlock(version) {\n      setControl({\n        locked: false,\n        version\n      });\n    }\n    function getOrderedMigrations() {\n      return Array.from(migrations).sort((a, b) => a.version - b.version);\n    }\n    function showError(version, control, e) {\n      showErrorBox('ERROR! SERVER STOPPED', ['Your database migration failed:', e.message, '', 'Please make sure you are running the latest version and try again.', 'If the problem persists, please contact support.', '', \"This Rocket.Chat version: \".concat(Info.version), \"Database locked at version: \".concat(control.version), \"Database target version: \".concat(version), '', \"Commit: \".concat(Info.commit.hash), \"Date: \".concat(Info.commit.date), \"Branch: \".concat(Info.commit.branch), \"Tag: \".concat(Info.commit.tag)].join('\\n'));\n    }\n    // run the actual migration\n    async function migrate(direction, migration) {\n      var _migration$direction;\n      if (typeof migration[direction] !== 'function') {\n        throw new Error(\"Cannot migrate \".concat(direction, \" on version \").concat(migration.version));\n      }\n      log.startup(\"Running \".concat(direction, \"() on version \").concat(migration.version).concat(migration.name ? \"(\".concat(migration.name, \")\") : ''));\n      await ((_migration$direction = migration[direction]) === null || _migration$direction === void 0 ? void 0 : _migration$direction.call(migration, migration));\n    }\n    const maxAttempts = 30;\n    const retryInterval = 10;\n    let currentAttempt = 0;\n    async function migrateDatabase(targetVersion, subcommands) {\n      const control = await getControl();\n      const currentVersion = control.version;\n      const orderedMigrations = getOrderedMigrations();\n      if (orderedMigrations.length === 0) {\n        log.startup('No migrations to run');\n        return true;\n      }\n      // version 0 means it is a fresh database, just set the control to latest known version and skip\n      if (currentVersion === 0) {\n        setControl({\n          locked: false,\n          version: orderedMigrations[orderedMigrations.length - 1].version\n        });\n        return true;\n      }\n      const version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n      // get latest version\n      // const { version } = orderedMigrations[orderedMigrations.length - 1];\n      if (!(await lock())) {\n        const msg = \"Not migrating, control is locked. Attempt \".concat(currentAttempt, \"/\").concat(maxAttempts);\n        if (currentAttempt <= maxAttempts) {\n          log.warn(\"\".concat(msg, \". Trying again in \").concat(retryInterval, \" seconds.\"));\n          await sleep(retryInterval * 1000);\n          currentAttempt++;\n          return migrateDatabase(targetVersion, subcommands);\n        }\n        const control = await getControl(); // Side effect: upserts control document.\n        showErrorBox('ERROR! SERVER STOPPED', ['Your database migration control is locked.', 'Please make sure you are running the latest version and try again.', 'If the problem persists, please contact support.', '', \"This Rocket.Chat version: \".concat(Info.version), \"Database locked at version: \".concat(control.version), \"Database target version: \".concat(version), '', \"Commit: \".concat(Info.commit.hash), \"Date: \".concat(Info.commit.date), \"Branch: \".concat(Info.commit.branch), \"Tag: \".concat(Info.commit.tag)].join('\\n'));\n        process.exit(1);\n      }\n      if (subcommands !== null && subcommands !== void 0 && subcommands.includes('rerun')) {\n        log.startup(\"Rerunning version \".concat(targetVersion));\n        const migration = orderedMigrations.find(migration => migration.version === targetVersion);\n        if (!migration) {\n          throw new Error(\"Cannot rerun migration \".concat(targetVersion));\n        }\n        try {\n          await migrate('up', migration);\n        } catch (e) {\n          showError(version, control, e);\n          log.error({\n            err: e\n          });\n          process.exit(1);\n        }\n        log.startup('Finished migrating.');\n        unlock(currentVersion);\n        return true;\n      }\n      if (currentVersion === version) {\n        log.startup(\"Not migrating, already at version \".concat(version));\n        unlock(currentVersion);\n        return true;\n      }\n      const startIdx = orderedMigrations.findIndex(migration => migration.version === currentVersion);\n      if (startIdx === -1) {\n        throw new Error(\"Can't find migration version \".concat(currentVersion));\n      }\n      const endIdx = orderedMigrations.findIndex(migration => migration.version === version);\n      if (endIdx === -1) {\n        throw new Error(\"Can't find migration version \".concat(version));\n      }\n      log.startup(\"Migrating from version \".concat(orderedMigrations[startIdx].version, \" -> \").concat(orderedMigrations[endIdx].version));\n      try {\n        const migrations = [];\n        if (currentVersion < version) {\n          for (let i = startIdx; i < endIdx; i++) {\n            migrations.push(async () => {\n              await migrate('up', orderedMigrations[i + 1]);\n              setControl({\n                locked: true,\n                version: orderedMigrations[i + 1].version\n              });\n            });\n          }\n        } else {\n          for (let i = startIdx; i > endIdx; i--) {\n            migrations.push(async () => {\n              await migrate('down', orderedMigrations[i]);\n              setControl({\n                locked: true,\n                version: orderedMigrations[i - 1].version\n              });\n            });\n          }\n        }\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(migrations), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const migration = _step.value;\n            {\n              await migration();\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } catch (e) {\n        showError(version, control, e);\n        log.error({\n          err: e\n        });\n        process.exit(1);\n      }\n      unlock(orderedMigrations[endIdx].version);\n      log.startup('Finished migrating.');\n      // remember to run meteor with --once otherwise it will restart\n      if (subcommands !== null && subcommands !== void 0 && subcommands.includes('exit')) {\n        process.exit(0);\n      }\n      return true;\n    }\n    async function onServerVersionChange(cb) {\n      var _result$value;\n      const result = await Migrations.findOneAndUpdate({\n        _id: 'upgrade'\n      }, {\n        $set: {\n          hash: Info.commit.hash\n        }\n      }, {\n        upsert: true\n      });\n      if (((_result$value = result.value) === null || _result$value === void 0 ? void 0 : _result$value.hash) === Info.commit.hash) {\n        return;\n      }\n      await cb();\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","getControl","addMigration","migrateDatabase","onServerVersionChange","Logger","Migrations","showErrorBox","Info","sleep","__reifyWaitForDeps__","log","migrations","Set","setControl","control","updateMany","_id","$set","version","locked","upsert","findOne","lock","date","Date","dateMinusInterval","setMinutes","getMinutes","build","$or","lockedAt","$lt","buildAt","$ne","matchedCount","migration","Error","up","add","unlock","getOrderedMigrations","Array","from","sort","a","b","showError","e","message","concat","commit","hash","branch","tag","join","migrate","direction","_migration$direction","startup","name","call","maxAttempts","retryInterval","currentAttempt","targetVersion","subcommands","currentVersion","orderedMigrations","length","msg","warn","process","exit","includes","find","error","err","startIdx","findIndex","endIdx","i","push","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","return","cb","_result$value","result","findOneAndUpdate","__reify_async_result__","_reifyError","self","async"],"sources":["server/lib/migrations.ts"],"sourcesContent":["import type { IControl } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Migrations } from '@rocket.chat/models';\n\nimport { showErrorBox } from './logger/showBox';\nimport { Info } from '../../app/utils/rocketchat.info';\nimport { sleep } from '../../lib/utils/sleep';\n\ntype IMigration = {\n\tname?: string;\n\tversion: number;\n\tup: (migration: IMigration) => Promise<void> | void;\n\tdown?: (migration: IMigration) => Promise<void> | void;\n};\n\nconst log = new Logger('Migrations');\n\nconst migrations = new Set<IMigration>();\n\n// sets the control record\nfunction setControl(control: Pick<IControl, 'version' | 'locked'>): Pick<IControl, 'version' | 'locked'> {\n\tvoid Migrations.updateMany(\n\t\t{\n\t\t\t_id: 'control',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\tversion: control.version,\n\t\t\t\tlocked: control.locked,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\treturn control;\n}\n\n// gets the current control record, optionally creating it if non-existant\nexport async function getControl(): Promise<IControl> {\n\tconst control = (await Migrations.findOne({\n\t\t_id: 'control',\n\t})) as IControl;\n\n\treturn (\n\t\tcontrol ||\n\t\tsetControl({\n\t\t\tversion: 0,\n\t\t\tlocked: false,\n\t\t})\n\t);\n}\n\n// Returns true if lock was acquired.\nasync function lock(): Promise<boolean> {\n\tconst date = new Date();\n\tconst dateMinusInterval = new Date();\n\tdateMinusInterval.setMinutes(dateMinusInterval.getMinutes() - 5);\n\n\tconst build = Info ? Info.build.date : date;\n\n\t// This is atomic. The selector ensures only one caller at a time will see\n\t// the unlocked control, and locking occurs in the same update's modifier.\n\t// All other simultaneous callers will get false back from the update.\n\treturn (\n\t\t(\n\t\t\tawait Migrations.updateMany(\n\t\t\t\t{\n\t\t\t\t\t_id: 'control',\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlocked: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t\t$lt: dateMinusInterval,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbuildAt: {\n\t\t\t\t\t\t\t\t$ne: build,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: {\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: date,\n\t\t\t\t\t\tbuildAt: build,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t)\n\t\t).matchedCount === 1\n\t);\n}\n\nexport function addMigration(migration: IMigration): void {\n\tif (!migration?.version) {\n\t\tthrow new Error('Migration version is required');\n\t}\n\tif (!migration?.up) {\n\t\tthrow new Error('Migration up() is required');\n\t}\n\tmigrations.add(migration);\n}\n\n// Side effect: saves version.\nfunction unlock(version: number): void {\n\tsetControl({\n\t\tlocked: false,\n\t\tversion,\n\t});\n}\n\nfunction getOrderedMigrations(): IMigration[] {\n\treturn Array.from(migrations).sort((a, b) => a.version - b.version);\n}\n\nfunction showError(version: number, control: IControl, e: any): void {\n\tshowErrorBox(\n\t\t'ERROR! SERVER STOPPED',\n\t\t[\n\t\t\t'Your database migration failed:',\n\t\t\te.message,\n\t\t\t'',\n\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t'If the problem persists, please contact support.',\n\t\t\t'',\n\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t`Database target version: ${version}`,\n\t\t\t'',\n\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t].join('\\n'),\n\t);\n}\n\n// run the actual migration\nasync function migrate(direction: 'up' | 'down', migration: IMigration): Promise<void> {\n\tif (typeof migration[direction] !== 'function') {\n\t\tthrow new Error(`Cannot migrate ${direction} on version ${migration.version}`);\n\t}\n\n\tlog.startup(`Running ${direction}() on version ${migration.version}${migration.name ? `(${migration.name})` : ''}`);\n\n\tawait migration[direction]?.(migration);\n}\n\nconst maxAttempts = 30;\nconst retryInterval = 10;\nlet currentAttempt = 0;\n\nexport async function migrateDatabase(targetVersion: 'latest' | number, subcommands?: string[]): Promise<boolean> {\n\tconst control = await getControl();\n\tconst currentVersion = control.version;\n\n\tconst orderedMigrations = getOrderedMigrations();\n\n\tif (orderedMigrations.length === 0) {\n\t\tlog.startup('No migrations to run');\n\t\treturn true;\n\t}\n\n\t// version 0 means it is a fresh database, just set the control to latest known version and skip\n\tif (currentVersion === 0) {\n\t\tsetControl({\n\t\t\tlocked: false,\n\t\t\tversion: orderedMigrations[orderedMigrations.length - 1].version,\n\t\t});\n\t\treturn true;\n\t}\n\n\tconst version = targetVersion === 'latest' ? orderedMigrations[orderedMigrations.length - 1].version : targetVersion;\n\n\t// get latest version\n\t// const { version } = orderedMigrations[orderedMigrations.length - 1];\n\n\tif (!(await lock())) {\n\t\tconst msg = `Not migrating, control is locked. Attempt ${currentAttempt}/${maxAttempts}`;\n\t\tif (currentAttempt <= maxAttempts) {\n\t\t\tlog.warn(`${msg}. Trying again in ${retryInterval} seconds.`);\n\n\t\t\tawait sleep(retryInterval * 1000);\n\n\t\t\tcurrentAttempt++;\n\t\t\treturn migrateDatabase(targetVersion, subcommands);\n\t\t}\n\t\tconst control = await getControl(); // Side effect: upserts control document.\n\t\tshowErrorBox(\n\t\t\t'ERROR! SERVER STOPPED',\n\t\t\t[\n\t\t\t\t'Your database migration control is locked.',\n\t\t\t\t'Please make sure you are running the latest version and try again.',\n\t\t\t\t'If the problem persists, please contact support.',\n\t\t\t\t'',\n\t\t\t\t`This Rocket.Chat version: ${Info.version}`,\n\t\t\t\t`Database locked at version: ${control.version}`,\n\t\t\t\t`Database target version: ${version}`,\n\t\t\t\t'',\n\t\t\t\t`Commit: ${Info.commit.hash}`,\n\t\t\t\t`Date: ${Info.commit.date}`,\n\t\t\t\t`Branch: ${Info.commit.branch}`,\n\t\t\t\t`Tag: ${Info.commit.tag}`,\n\t\t\t].join('\\n'),\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (subcommands?.includes('rerun')) {\n\t\tlog.startup(`Rerunning version ${targetVersion}`);\n\t\tconst migration = orderedMigrations.find((migration) => migration.version === targetVersion);\n\n\t\tif (!migration) {\n\t\t\tthrow new Error(`Cannot rerun migration ${targetVersion}`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait migrate('up', migration);\n\t\t} catch (e) {\n\t\t\tshowError(version, control, e);\n\t\t\tlog.error({ err: e });\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tlog.startup('Finished migrating.');\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tif (currentVersion === version) {\n\t\tlog.startup(`Not migrating, already at version ${version}`);\n\t\tunlock(currentVersion);\n\t\treturn true;\n\t}\n\n\tconst startIdx = orderedMigrations.findIndex((migration) => migration.version === currentVersion);\n\tif (startIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${currentVersion}`);\n\t}\n\n\tconst endIdx = orderedMigrations.findIndex((migration) => migration.version === version);\n\tif (endIdx === -1) {\n\t\tthrow new Error(`Can't find migration version ${version}`);\n\t}\n\n\tlog.startup(`Migrating from version ${orderedMigrations[startIdx].version} -> ${orderedMigrations[endIdx].version}`);\n\n\ttry {\n\t\tconst migrations = [];\n\t\tif (currentVersion < version) {\n\t\t\tfor (let i = startIdx; i < endIdx; i++) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('up', orderedMigrations[i + 1]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i + 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = startIdx; i > endIdx; i--) {\n\t\t\t\tmigrations.push(async () => {\n\t\t\t\t\tawait migrate('down', orderedMigrations[i]);\n\t\t\t\t\tsetControl({\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tversion: orderedMigrations[i - 1].version,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tfor await (const migration of migrations) {\n\t\t\tawait migration();\n\t\t}\n\t} catch (e) {\n\t\tshowError(version, control, e);\n\t\tlog.error({ err: e });\n\t\tprocess.exit(1);\n\t}\n\n\tunlock(orderedMigrations[endIdx].version);\n\tlog.startup('Finished migrating.');\n\n\t// remember to run meteor with --once otherwise it will restart\n\tif (subcommands?.includes('exit')) {\n\t\tprocess.exit(0);\n\t}\n\n\treturn true;\n}\n\nexport async function onServerVersionChange(cb: () => Promise<void>): Promise<void> {\n\tconst result = await Migrations.findOneAndUpdate(\n\t\t{\n\t\t\t_id: 'upgrade',\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\thash: Info.commit.hash,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t},\n\t);\n\n\tif (result.value?.hash === Info.commit.hash) {\n\t\treturn;\n\t}\n\n\tawait cb();\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c63a191f0f5ea20386bf3f75af30381a3e1e0036"}
