{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/configuration/ldap.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/configuration/ldap.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/configuration/ldap.ts","inputSourceMap":{"version":3,"file":"server/configuration/ldap.ts","sourceRoot":"","sources":["server/configuration/ldap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,4BAA4B,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,aAAa;IAClC,8BAA8B;IAC9B,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,YAAiC,EAAE,EAAE;QACjF,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YACrD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,6DAA6D;IAC7D,IAAI,WAAoB,CAAC;IACzB,QAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;QACvC,IAAI,WAAW,KAAK,KAAK,EAAE,CAAC;YAC3B,OAAO;QACR,CAAC;QACD,WAAW,GAAG,KAAgB,CAAC;QAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,SAAS,CAAC,MAAM,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;QAC7E,CAAC;QAED,SAAS,CAAC,GAAG,CACZ,qBAAqB,EACrB,CAAC,KAA0B,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,KAAK,CAAC;YACd,CAAC;YAED,0HAA0H;YAC1H,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC/B,OAAO,KAAK,CAAC;YACd,CAAC;YAED,oEAAoE;YACpE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACnC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAU,qBAAqB,CAAC,IAAI,KAAK,CAAC;YACvE,CAAC;YAED,OAAO,KAAK,CAAC;QACd,CAAC,EACD,SAAS,CAAC,QAAQ,CAAC,MAAM,EACzB,2BAA2B,CAC3B,CAAC;IACH,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { LDAP } from '@rocket.chat/core-services';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\nimport { callbacks } from '../../lib/callbacks';\n\nexport async function configureLDAP() {\n\t// Register ldap login handler\n\tAccounts.registerLoginHandler('ldap', async (loginRequest: Record<string, any>) => {\n\t\tif (!loginRequest.ldap || !loginRequest.ldapOptions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass);\n\t});\n\n\t// Prevent password logins by LDAP users when LDAP is enabled\n\tlet ldapEnabled: boolean;\n\tsettings.watch('LDAP_Enable', (value) => {\n\t\tif (ldapEnabled === value) {\n\t\t\treturn;\n\t\t}\n\t\tldapEnabled = value as boolean;\n\n\t\tif (!value) {\n\t\t\treturn callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'beforeValidateLogin',\n\t\t\t(login: Record<string, any>) => {\n\t\t\t\tif (!login.allowed) {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// The fallback setting should only block password logins, so users that have other login services can continue using them\n\t\t\t\tif (login.type !== 'password') {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// LDAP users can still login locally when login fallback is enabled\n\t\t\t\tif (login.user.services?.ldap?.id) {\n\t\t\t\t\tlogin.allowed = settings.get<boolean>('LDAP_Login_Fallback') ?? false;\n\t\t\t\t}\n\n\t\t\t\treturn login;\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'validateLdapLoginFallback',\n\t\t);\n\t});\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/configuration/ldap.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/configuration/ldap.ts","inputSourceMap":{"version":3,"file":"server/configuration/ldap.ts","sourceRoot":"","sources":["server/configuration/ldap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,4BAA4B,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,aAAa;IAClC,8BAA8B;IAC9B,QAAQ,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,YAAiC,EAAE,EAAE;QACjF,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YACrD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,6DAA6D;IAC7D,IAAI,WAAoB,CAAC;IACzB,QAAQ,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;QACvC,IAAI,WAAW,KAAK,KAAK,EAAE,CAAC;YAC3B,OAAO;QACR,CAAC;QACD,WAAW,GAAG,KAAgB,CAAC;QAE/B,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,SAAS,CAAC,MAAM,CAAC,qBAAqB,EAAE,2BAA2B,CAAC,CAAC;QAC7E,CAAC;QAED,SAAS,CAAC,GAAG,CACZ,qBAAqB,EACrB,CAAC,KAA0B,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,KAAK,CAAC;YACd,CAAC;YAED,0HAA0H;YAC1H,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC/B,OAAO,KAAK,CAAC;YACd,CAAC;YAED,oEAAoE;YACpE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBACnC,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAU,qBAAqB,CAAC,IAAI,KAAK,CAAC;YACvE,CAAC;YAED,OAAO,KAAK,CAAC;QACd,CAAC,EACD,SAAS,CAAC,QAAQ,CAAC,MAAM,EACzB,2BAA2B,CAC3B,CAAC;IACH,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { LDAP } from '@rocket.chat/core-services';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\nimport { callbacks } from '../../lib/callbacks';\n\nexport async function configureLDAP() {\n\t// Register ldap login handler\n\tAccounts.registerLoginHandler('ldap', async (loginRequest: Record<string, any>) => {\n\t\tif (!loginRequest.ldap || !loginRequest.ldapOptions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass);\n\t});\n\n\t// Prevent password logins by LDAP users when LDAP is enabled\n\tlet ldapEnabled: boolean;\n\tsettings.watch('LDAP_Enable', (value) => {\n\t\tif (ldapEnabled === value) {\n\t\t\treturn;\n\t\t}\n\t\tldapEnabled = value as boolean;\n\n\t\tif (!value) {\n\t\t\treturn callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'beforeValidateLogin',\n\t\t\t(login: Record<string, any>) => {\n\t\t\t\tif (!login.allowed) {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// The fallback setting should only block password logins, so users that have other login services can continue using them\n\t\t\t\tif (login.type !== 'password') {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// LDAP users can still login locally when login fallback is enabled\n\t\t\t\tif (login.user.services?.ldap?.id) {\n\t\t\t\t\tlogin.allowed = settings.get<boolean>('LDAP_Login_Fallback') ?? false;\n\t\t\t\t}\n\n\t\t\t\treturn login;\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'validateLdapLoginFallback',\n\t\t);\n\t});\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      configureLDAP: () => configureLDAP\n    });\n    let LDAP;\n    module.link(\"@rocket.chat/core-services\", {\n      LDAP(v) {\n        LDAP = v;\n      }\n    }, 0);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 1);\n    let settings;\n    module.link(\"../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function configureLDAP() {\n      // Register ldap login handler\n      Accounts.registerLoginHandler('ldap', async loginRequest => {\n        if (!loginRequest.ldap || !loginRequest.ldapOptions) {\n          return undefined;\n        }\n        return LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass);\n      });\n      // Prevent password logins by LDAP users when LDAP is enabled\n      let ldapEnabled;\n      settings.watch('LDAP_Enable', value => {\n        if (ldapEnabled === value) {\n          return;\n        }\n        ldapEnabled = value;\n        if (!value) {\n          return callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n        }\n        callbacks.add('beforeValidateLogin', login => {\n          var _login$user$services, _login$user$services$;\n          if (!login.allowed) {\n            return login;\n          }\n          // The fallback setting should only block password logins, so users that have other login services can continue using them\n          if (login.type !== 'password') {\n            return login;\n          }\n          // LDAP users can still login locally when login fallback is enabled\n          if ((_login$user$services = login.user.services) !== null && _login$user$services !== void 0 && (_login$user$services$ = _login$user$services.ldap) !== null && _login$user$services$ !== void 0 && _login$user$services$.id) {\n            var _settings$get;\n            login.allowed = (_settings$get = settings.get('LDAP_Login_Fallback')) !== null && _settings$get !== void 0 ? _settings$get : false;\n          }\n          return login;\n        }, callbacks.priority.MEDIUM, 'validateLdapLoginFallback');\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","configureLDAP","LDAP","link","v","Accounts","settings","callbacks","__reifyWaitForDeps__","registerLoginHandler","loginRequest","ldap","ldapOptions","undefined","username","ldapPass","ldapEnabled","watch","value","remove","add","login","_login$user$services","_login$user$services$","allowed","type","user","services","id","_settings$get","get","priority","MEDIUM","__reify_async_result__","_reifyError","self","async"],"sources":["server/configuration/ldap.ts"],"sourcesContent":["import { LDAP } from '@rocket.chat/core-services';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { settings } from '../../app/settings/server';\nimport { callbacks } from '../../lib/callbacks';\n\nexport async function configureLDAP() {\n\t// Register ldap login handler\n\tAccounts.registerLoginHandler('ldap', async (loginRequest: Record<string, any>) => {\n\t\tif (!loginRequest.ldap || !loginRequest.ldapOptions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn LDAP.loginRequest(loginRequest.username, loginRequest.ldapPass);\n\t});\n\n\t// Prevent password logins by LDAP users when LDAP is enabled\n\tlet ldapEnabled: boolean;\n\tsettings.watch('LDAP_Enable', (value) => {\n\t\tif (ldapEnabled === value) {\n\t\t\treturn;\n\t\t}\n\t\tldapEnabled = value as boolean;\n\n\t\tif (!value) {\n\t\t\treturn callbacks.remove('beforeValidateLogin', 'validateLdapLoginFallback');\n\t\t}\n\n\t\tcallbacks.add(\n\t\t\t'beforeValidateLogin',\n\t\t\t(login: Record<string, any>) => {\n\t\t\t\tif (!login.allowed) {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// The fallback setting should only block password logins, so users that have other login services can continue using them\n\t\t\t\tif (login.type !== 'password') {\n\t\t\t\t\treturn login;\n\t\t\t\t}\n\n\t\t\t\t// LDAP users can still login locally when login fallback is enabled\n\t\t\t\tif (login.user.services?.ldap?.id) {\n\t\t\t\t\tlogin.allowed = settings.get<boolean>('LDAP_Login_Fallback') ?? false;\n\t\t\t\t}\n\n\t\t\t\treturn login;\n\t\t\t},\n\t\t\tcallbacks.priority.MEDIUM,\n\t\t\t'validateLdapLoginFallback',\n\t\t);\n\t});\n}\n"],"mappings":";;;IAAAA,MAAA,CAAOC,MAAM;MAAEC,aAAM,EAAAA,CAAA,KAAAA;IAAA;IAA4B,IAACC,IAAA;IAAAH,MAAA,CAAAI,IAAA;MAAAD,KAAAE,CAAA;QAAAF,IAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,QAAA;IAAAN,MAAA,CAAAI,IAAA;MAAAE,SAAAD,CAAA;QAAAC,QAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,QAAA;IAAAP,MAAA,CAAAI,IAAA;MAAAG,SAAAF,CAAA;QAAAE,QAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,SAAA;IAAAR,MAAA,CAAAI,IAAA;MAAAI,UAAAH,CAAA;QAAAG,SAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,oBAAA,WAAAA,oBAAA;IAM3C,eAAeP,aAAaA,CAAA;MAClC;MACAI,QAAQ,CAACI,oBAAoB,CAAC,MAAM,EAAE,MAAOC,YAAiC,IAAI;QACjF,IAAI,CAACA,YAAY,CAACC,IAAI,IAAI,CAACD,YAAY,CAACE,WAAW,EAAE;UACpD,OAAOC,SAAS;QACjB;QAEA,OAAOX,IAAI,CAACQ,YAAY,CAACA,YAAY,CAACI,QAAQ,EAAEJ,YAAY,CAACK,QAAQ,CAAC;MACvE,CAAC,CAAC;MAEF;MACA,IAAIC,WAAoB;MACxBV,QAAQ,CAACW,KAAK,CAAC,aAAa,EAAGC,KAAK,IAAI;QACvC,IAAIF,WAAW,KAAKE,KAAK,EAAE;UAC1B;QACD;QACAF,WAAW,GAAGE,KAAgB;QAE9B,IAAI,CAACA,KAAK,EAAE;UACX,OAAOX,SAAS,CAACY,MAAM,CAAC,qBAAqB,EAAE,2BAA2B,CAAC;QAC5E;QAEAZ,SAAS,CAACa,GAAG,CACZ,qBAAqB,EACpBC,KAA0B,IAAI;UAAA,IAAAC,oBAAA,EAAAC,qBAAA;UAC9B,IAAI,CAACF,KAAK,CAACG,OAAO,EAAE;YACnB,OAAOH,KAAK;UACb;UAEA;UACA,IAAIA,KAAK,CAACI,IAAI,KAAK,UAAU,EAAE;YAC9B,OAAOJ,KAAK;UACb;UAEA;UACA,KAAAC,oBAAA,GAAID,KAAK,CAACK,IAAI,CAACC,QAAQ,cAAAL,oBAAA,gBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBX,IAAI,cAAAY,qBAAA,eAAzBA,qBAAA,CAA2BK,EAAE,EAAE;YAAA,IAAAC,aAAA;YAClCR,KAAK,CAACG,OAAO,IAAAK,aAAA,GAAGvB,QAAQ,CAACwB,GAAG,CAAU,qBAAqB,CAAC,cAAAD,aAAA,cAAAA,aAAA,GAAI,KAAK;UACtE;UAEA,OAAOR,KAAK;QACb,CAAC,EACDd,SAAS,CAACwB,QAAQ,CAACC,MAAM,EACzB,2BAA2B,CAC3B;MACF,CAAC,CAAC;IACH;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"13f505b813f7a5772de4a8f2bc1a8a565f12834d"}
