{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RoomConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/converters/RoomConverter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RoomConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/RoomConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/RoomConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportChannel, IImportChannelRecord, IRoom } from '@rocket.chat/core-typings';\nimport { Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport { createDirectMessage } from '../../../../../server/methods/createDirectMessage';\nimport { saveRoomSettings } from '../../../../channel-settings/server/methods/saveRoomSettings';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../../lib/server/lib/notifyListener';\nimport { createChannelMethod } from '../../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../../lib/server/methods/createPrivateGroup';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter } from './RecordConverter';\n\nexport class RoomConverter extends RecordConverter<IImportChannelRecord> {\n\tpublic startedByUserId: string;\n\n\tasync convertChannels(startedByUserId: string, callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.startedByUserId = startedByUserId;\n\n\t\treturn this.convertData(callbacks);\n\t}\n\n\tprotected async convertRecord(record: IImportChannelRecord): Promise<boolean> {\n\t\tconst { data } = record;\n\n\t\tif (!data.name && data.t !== 'd') {\n\t\t\tthrow new Error('importer-channel-missing-name');\n\t\t}\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\t\tdata.users = [...new Set(data.users)];\n\n\t\tif (!data.importIds.length) {\n\t\t\tthrow new Error('importer-channel-missing-import-id');\n\t\t}\n\n\t\tconst existingRoom = await this.findExistingRoom(data);\n\t\tawait this.insertOrUpdateRoom(existingRoom, data, this.startedByUserId);\n\n\t\treturn !existingRoom;\n\t}\n\n\tasync insertOrUpdateRoom(existingRoom: IRoom | null, data: IImportChannel, startedByUserId: string): Promise<void> {\n\t\tif (existingRoom) {\n\t\t\tawait this.updateRoom(existingRoom, data, startedByUserId);\n\t\t} else {\n\t\t\tawait this.insertRoom(data, startedByUserId);\n\t\t}\n\n\t\tif (data.archived && data._id) {\n\t\t\tawait this.archiveRoomById(data._id);\n\t\t}\n\t}\n\n\tasync findExistingRoom(data: IImportChannel): Promise<IRoom | null> {\n\t\tif (data._id && data._id.toUpperCase() === 'GENERAL') {\n\t\t\tconst room = await Rooms.findOneById('GENERAL', {});\n\t\t\t// Prevent the importer from trying to create a new general\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('importer-channel-general-not-found');\n\t\t\t}\n\n\t\t\treturn room;\n\t\t}\n\n\t\tif (data.t === 'd') {\n\t\t\tconst users = await this._cache.convertImportedIdsToUsernames(data.users);\n\t\t\tif (users.length !== data.users.length) {\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\n\t\t\treturn Rooms.findDirectRoomContainingAllUsernames(users, {});\n\t\t}\n\n\t\tif (!data.name) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Imported room names always allow special chars\n\t\tconst roomName = limax(data.name.trim(), { maintainCase: true });\n\t\treturn Rooms.findOneByNonValidatedName(roomName, {});\n\t}\n\n\tasync updateRoom(room: IRoom, roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\troomData._id = room._id;\n\n\t\tif ((roomData._id as string).toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n\t\t\tawait saveRoomSettings(startedByUserId, 'GENERAL', 'roomName', roomData.name);\n\t\t}\n\n\t\tawait this.updateRoomId(room._id, roomData);\n\t}\n\n\tasync insertRoom(roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\t// Find the rocketchatId of the user who created this channel\n\t\tconst creatorId = await this.getRoomCreatorId(roomData, startedByUserId);\n\t\tconst members = await this._cache.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n\t\tif (roomData.t === 'd') {\n\t\t\tif (members.length < roomData.users.length) {\n\t\t\t\tthis._logger.warn(`One or more imported users not found: ${roomData.users}`);\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\t\t}\n\n\t\t// Create the channel\n\t\ttry {\n\t\t\tlet roomInfo;\n\t\t\tif (roomData.t === 'd') {\n\t\t\t\troomInfo = await createDirectMessage(members, startedByUserId, true);\n\t\t\t} else {\n\t\t\t\tif (!roomData.name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (roomData.t === 'p') {\n\t\t\t\t\tconst user = await Users.findOneById(creatorId);\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t\t\t\t}\n\t\t\t\t\troomInfo = await createPrivateGroupMethod(user, roomData.name, members, false, {}, {});\n\t\t\t\t} else {\n\t\t\t\t\troomInfo = await createChannelMethod(creatorId, roomData.name, members, false, {}, {});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troomData._id = roomInfo.rid;\n\t\t} catch (e) {\n\t\t\tthis._logger.warn({ msg: 'Failed to create new room', name: roomData.name, members });\n\t\t\tthis._logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tawait this.updateRoomId(roomData._id as 'string', roomData);\n\t}\n\n\tasync archiveRoomById(rid: string) {\n\t\tconst responses = await Promise.all([Rooms.archiveById(rid), Subscriptions.archiveByRoomId(rid)]);\n\n\t\tif (responses[1]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t}\n\t}\n\n\tasync updateRoomId(_id: string, roomData: IImportChannel): Promise<void> {\n\t\tconst set = {\n\t\t\tts: roomData.ts,\n\t\t\ttopic: roomData.topic,\n\t\t\tdescription: roomData.description,\n\t\t};\n\n\t\tconst roomUpdate: { $set?: Record<string, any>; $addToSet?: Record<string, any> } = {};\n\n\t\tif (Object.keys(set).length > 0) {\n\t\t\troomUpdate.$set = set;\n\t\t}\n\n\t\tif (roomData.importIds.length) {\n\t\t\troomUpdate.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: roomData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (roomUpdate.$set || roomUpdate.$addToSet) {\n\t\t\tawait Rooms.updateOne({ _id: roomData._id }, roomUpdate);\n\t\t}\n\t}\n\n\tasync getRoomCreatorId(roomData: IImportChannel, startedByUserId: string): Promise<string> {\n\t\tif (roomData.u) {\n\t\t\tconst creatorId = await this._cache.findImportedUserId(roomData.u._id);\n\t\t\tif (creatorId) {\n\t\t\t\treturn creatorId;\n\t\t\t}\n\n\t\t\tif (roomData.t !== 'd') {\n\t\t\t\treturn startedByUserId;\n\t\t\t}\n\n\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t}\n\n\t\tif (roomData.t === 'd') {\n\t\t\tfor await (const member of roomData.users) {\n\t\t\t\tconst userId = await this._cache.findImportedUserId(member);\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn userId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('importer-channel-invalid-creator');\n\t}\n\n\tprotected getDataType(): 'channel' {\n\t\treturn 'channel';\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/RoomConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/converters/RoomConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/RoomConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/RoomConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportChannel, IImportChannelRecord, IRoom } from '@rocket.chat/core-typings';\nimport { Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport { createDirectMessage } from '../../../../../server/methods/createDirectMessage';\nimport { saveRoomSettings } from '../../../../channel-settings/server/methods/saveRoomSettings';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../../lib/server/lib/notifyListener';\nimport { createChannelMethod } from '../../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../../lib/server/methods/createPrivateGroup';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter } from './RecordConverter';\n\nexport class RoomConverter extends RecordConverter<IImportChannelRecord> {\n\tpublic startedByUserId: string;\n\n\tasync convertChannels(startedByUserId: string, callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.startedByUserId = startedByUserId;\n\n\t\treturn this.convertData(callbacks);\n\t}\n\n\tprotected async convertRecord(record: IImportChannelRecord): Promise<boolean> {\n\t\tconst { data } = record;\n\n\t\tif (!data.name && data.t !== 'd') {\n\t\t\tthrow new Error('importer-channel-missing-name');\n\t\t}\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\t\tdata.users = [...new Set(data.users)];\n\n\t\tif (!data.importIds.length) {\n\t\t\tthrow new Error('importer-channel-missing-import-id');\n\t\t}\n\n\t\tconst existingRoom = await this.findExistingRoom(data);\n\t\tawait this.insertOrUpdateRoom(existingRoom, data, this.startedByUserId);\n\n\t\treturn !existingRoom;\n\t}\n\n\tasync insertOrUpdateRoom(existingRoom: IRoom | null, data: IImportChannel, startedByUserId: string): Promise<void> {\n\t\tif (existingRoom) {\n\t\t\tawait this.updateRoom(existingRoom, data, startedByUserId);\n\t\t} else {\n\t\t\tawait this.insertRoom(data, startedByUserId);\n\t\t}\n\n\t\tif (data.archived && data._id) {\n\t\t\tawait this.archiveRoomById(data._id);\n\t\t}\n\t}\n\n\tasync findExistingRoom(data: IImportChannel): Promise<IRoom | null> {\n\t\tif (data._id && data._id.toUpperCase() === 'GENERAL') {\n\t\t\tconst room = await Rooms.findOneById('GENERAL', {});\n\t\t\t// Prevent the importer from trying to create a new general\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('importer-channel-general-not-found');\n\t\t\t}\n\n\t\t\treturn room;\n\t\t}\n\n\t\tif (data.t === 'd') {\n\t\t\tconst users = await this._cache.convertImportedIdsToUsernames(data.users);\n\t\t\tif (users.length !== data.users.length) {\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\n\t\t\treturn Rooms.findDirectRoomContainingAllUsernames(users, {});\n\t\t}\n\n\t\tif (!data.name) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Imported room names always allow special chars\n\t\tconst roomName = limax(data.name.trim(), { maintainCase: true });\n\t\treturn Rooms.findOneByNonValidatedName(roomName, {});\n\t}\n\n\tasync updateRoom(room: IRoom, roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\troomData._id = room._id;\n\n\t\tif ((roomData._id as string).toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n\t\t\tawait saveRoomSettings(startedByUserId, 'GENERAL', 'roomName', roomData.name);\n\t\t}\n\n\t\tawait this.updateRoomId(room._id, roomData);\n\t}\n\n\tasync insertRoom(roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\t// Find the rocketchatId of the user who created this channel\n\t\tconst creatorId = await this.getRoomCreatorId(roomData, startedByUserId);\n\t\tconst members = await this._cache.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n\t\tif (roomData.t === 'd') {\n\t\t\tif (members.length < roomData.users.length) {\n\t\t\t\tthis._logger.warn(`One or more imported users not found: ${roomData.users}`);\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\t\t}\n\n\t\t// Create the channel\n\t\ttry {\n\t\t\tlet roomInfo;\n\t\t\tif (roomData.t === 'd') {\n\t\t\t\troomInfo = await createDirectMessage(members, startedByUserId, true);\n\t\t\t} else {\n\t\t\t\tif (!roomData.name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (roomData.t === 'p') {\n\t\t\t\t\tconst user = await Users.findOneById(creatorId);\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t\t\t\t}\n\t\t\t\t\troomInfo = await createPrivateGroupMethod(user, roomData.name, members, false, {}, {});\n\t\t\t\t} else {\n\t\t\t\t\troomInfo = await createChannelMethod(creatorId, roomData.name, members, false, {}, {});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troomData._id = roomInfo.rid;\n\t\t} catch (e) {\n\t\t\tthis._logger.warn({ msg: 'Failed to create new room', name: roomData.name, members });\n\t\t\tthis._logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tawait this.updateRoomId(roomData._id as 'string', roomData);\n\t}\n\n\tasync archiveRoomById(rid: string) {\n\t\tconst responses = await Promise.all([Rooms.archiveById(rid), Subscriptions.archiveByRoomId(rid)]);\n\n\t\tif (responses[1]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t}\n\t}\n\n\tasync updateRoomId(_id: string, roomData: IImportChannel): Promise<void> {\n\t\tconst set = {\n\t\t\tts: roomData.ts,\n\t\t\ttopic: roomData.topic,\n\t\t\tdescription: roomData.description,\n\t\t};\n\n\t\tconst roomUpdate: { $set?: Record<string, any>; $addToSet?: Record<string, any> } = {};\n\n\t\tif (Object.keys(set).length > 0) {\n\t\t\troomUpdate.$set = set;\n\t\t}\n\n\t\tif (roomData.importIds.length) {\n\t\t\troomUpdate.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: roomData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (roomUpdate.$set || roomUpdate.$addToSet) {\n\t\t\tawait Rooms.updateOne({ _id: roomData._id }, roomUpdate);\n\t\t}\n\t}\n\n\tasync getRoomCreatorId(roomData: IImportChannel, startedByUserId: string): Promise<string> {\n\t\tif (roomData.u) {\n\t\t\tconst creatorId = await this._cache.findImportedUserId(roomData.u._id);\n\t\t\tif (creatorId) {\n\t\t\t\treturn creatorId;\n\t\t\t}\n\n\t\t\tif (roomData.t !== 'd') {\n\t\t\t\treturn startedByUserId;\n\t\t\t}\n\n\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t}\n\n\t\tif (roomData.t === 'd') {\n\t\t\tfor await (const member of roomData.users) {\n\t\t\t\tconst userId = await this._cache.findImportedUserId(member);\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn userId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('importer-channel-invalid-creator');\n\t}\n\n\tprotected getDataType(): 'channel' {\n\t\treturn 'channel';\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      RoomConverter: () => RoomConverter\n    });\n    let Subscriptions, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let limax;\n    module.link(\"limax\", {\n      default(v) {\n        limax = v;\n      }\n    }, 1);\n    let createDirectMessage;\n    module.link(\"../../../../../server/methods/createDirectMessage\", {\n      createDirectMessage(v) {\n        createDirectMessage = v;\n      }\n    }, 2);\n    let saveRoomSettings;\n    module.link(\"../../../../channel-settings/server/methods/saveRoomSettings\", {\n      saveRoomSettings(v) {\n        saveRoomSettings = v;\n      }\n    }, 3);\n    let notifyOnSubscriptionChangedByRoomId;\n    module.link(\"../../../../lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      }\n    }, 4);\n    let createChannelMethod;\n    module.link(\"../../../../lib/server/methods/createChannel\", {\n      createChannelMethod(v) {\n        createChannelMethod = v;\n      }\n    }, 5);\n    let createPrivateGroupMethod;\n    module.link(\"../../../../lib/server/methods/createPrivateGroup\", {\n      createPrivateGroupMethod(v) {\n        createPrivateGroupMethod = v;\n      }\n    }, 6);\n    let RecordConverter;\n    module.link(\"./RecordConverter\", {\n      RecordConverter(v) {\n        RecordConverter = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RoomConverter extends RecordConverter {\n      constructor() {\n        super(...arguments);\n        this.startedByUserId = void 0;\n      }\n      async convertChannels(startedByUserId) {\n        let callbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.startedByUserId = startedByUserId;\n        return this.convertData(callbacks);\n      }\n      async convertRecord(record) {\n        const {\n          data\n        } = record;\n        if (!data.name && data.t !== 'd') {\n          throw new Error('importer-channel-missing-name');\n        }\n        data.importIds = data.importIds.filter(item => item);\n        data.users = [...new Set(data.users)];\n        if (!data.importIds.length) {\n          throw new Error('importer-channel-missing-import-id');\n        }\n        const existingRoom = await this.findExistingRoom(data);\n        await this.insertOrUpdateRoom(existingRoom, data, this.startedByUserId);\n        return !existingRoom;\n      }\n      async insertOrUpdateRoom(existingRoom, data, startedByUserId) {\n        if (existingRoom) {\n          await this.updateRoom(existingRoom, data, startedByUserId);\n        } else {\n          await this.insertRoom(data, startedByUserId);\n        }\n        if (data.archived && data._id) {\n          await this.archiveRoomById(data._id);\n        }\n      }\n      async findExistingRoom(data) {\n        if (data._id && data._id.toUpperCase() === 'GENERAL') {\n          const room = await Rooms.findOneById('GENERAL', {});\n          // Prevent the importer from trying to create a new general\n          if (!room) {\n            throw new Error('importer-channel-general-not-found');\n          }\n          return room;\n        }\n        if (data.t === 'd') {\n          const users = await this._cache.convertImportedIdsToUsernames(data.users);\n          if (users.length !== data.users.length) {\n            throw new Error('importer-channel-missing-users');\n          }\n          return Rooms.findDirectRoomContainingAllUsernames(users, {});\n        }\n        if (!data.name) {\n          return null;\n        }\n        // Imported room names always allow special chars\n        const roomName = limax(data.name.trim(), {\n          maintainCase: true\n        });\n        return Rooms.findOneByNonValidatedName(roomName, {});\n      }\n      async updateRoom(room, roomData, startedByUserId) {\n        roomData._id = room._id;\n        if (roomData._id.toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n          await saveRoomSettings(startedByUserId, 'GENERAL', 'roomName', roomData.name);\n        }\n        await this.updateRoomId(room._id, roomData);\n      }\n      async insertRoom(roomData, startedByUserId) {\n        // Find the rocketchatId of the user who created this channel\n        const creatorId = await this.getRoomCreatorId(roomData, startedByUserId);\n        const members = await this._cache.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n        if (roomData.t === 'd') {\n          if (members.length < roomData.users.length) {\n            this._logger.warn(\"One or more imported users not found: \".concat(roomData.users));\n            throw new Error('importer-channel-missing-users');\n          }\n        }\n        // Create the channel\n        try {\n          let roomInfo;\n          if (roomData.t === 'd') {\n            roomInfo = await createDirectMessage(members, startedByUserId, true);\n          } else {\n            if (!roomData.name) {\n              return;\n            }\n            if (roomData.t === 'p') {\n              const user = await Users.findOneById(creatorId);\n              if (!user) {\n                throw new Error('importer-channel-invalid-creator');\n              }\n              roomInfo = await createPrivateGroupMethod(user, roomData.name, members, false, {}, {});\n            } else {\n              roomInfo = await createChannelMethod(creatorId, roomData.name, members, false, {}, {});\n            }\n          }\n          roomData._id = roomInfo.rid;\n        } catch (e) {\n          this._logger.warn({\n            msg: 'Failed to create new room',\n            name: roomData.name,\n            members\n          });\n          this._logger.error(e);\n          throw e;\n        }\n        await this.updateRoomId(roomData._id, roomData);\n      }\n      async archiveRoomById(rid) {\n        var _responses$;\n        const responses = await Promise.all([Rooms.archiveById(rid), Subscriptions.archiveByRoomId(rid)]);\n        if ((_responses$ = responses[1]) !== null && _responses$ !== void 0 && _responses$.modifiedCount) {\n          void notifyOnSubscriptionChangedByRoomId(rid);\n        }\n      }\n      async updateRoomId(_id, roomData) {\n        const set = {\n          ts: roomData.ts,\n          topic: roomData.topic,\n          description: roomData.description\n        };\n        const roomUpdate = {};\n        if (Object.keys(set).length > 0) {\n          roomUpdate.$set = set;\n        }\n        if (roomData.importIds.length) {\n          roomUpdate.$addToSet = {\n            importIds: {\n              $each: roomData.importIds\n            }\n          };\n        }\n        if (roomUpdate.$set || roomUpdate.$addToSet) {\n          await Rooms.updateOne({\n            _id: roomData._id\n          }, roomUpdate);\n        }\n      }\n      async getRoomCreatorId(roomData, startedByUserId) {\n        if (roomData.u) {\n          const creatorId = await this._cache.findImportedUserId(roomData.u._id);\n          if (creatorId) {\n            return creatorId;\n          }\n          if (roomData.t !== 'd') {\n            return startedByUserId;\n          }\n          throw new Error('importer-channel-invalid-creator');\n        }\n        if (roomData.t === 'd') {\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(roomData.users), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              const member = _step.value;\n              {\n                const userId = await this._cache.findImportedUserId(member);\n                if (userId) {\n                  return userId;\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n        throw new Error('importer-channel-invalid-creator');\n      }\n      getDataType() {\n        return 'channel';\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","RoomConverter","Subscriptions","Rooms","Users","limax","createDirectMessage","saveRoomSettings","notifyOnSubscriptionChangedByRoomId","createChannelMethod","createPrivateGroupMethod","RecordConverter","__reifyWaitForDeps__","constructor","arguments","startedByUserId","convertChannels","callbacks","length","undefined","convertData","convertRecord","record","data","name","t","Error","importIds","filter","item","users","Set","existingRoom","findExistingRoom","insertOrUpdateRoom","updateRoom","insertRoom","archived","_id","archiveRoomById","toUpperCase","room","findOneById","_cache","convertImportedIdsToUsernames","findDirectRoomContainingAllUsernames","roomName","trim","maintainCase","findOneByNonValidatedName","roomData","updateRoomId","creatorId","getRoomCreatorId","members","_logger","warn","concat","roomInfo","user","rid","e","msg","error","_responses$","responses","Promise","all","archiveById","archiveByRoomId","modifiedCount","set","ts","topic","description","roomUpdate","Object","keys","$set","$addToSet","$each","updateOne","u","findImportedUserId","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","member","value","userId","err","return","getDataType","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer/server/classes/converters/RoomConverter.ts"],"sourcesContent":["import type { IImportChannel, IImportChannelRecord, IRoom } from '@rocket.chat/core-typings';\nimport { Subscriptions, Rooms, Users } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport { createDirectMessage } from '../../../../../server/methods/createDirectMessage';\nimport { saveRoomSettings } from '../../../../channel-settings/server/methods/saveRoomSettings';\nimport { notifyOnSubscriptionChangedByRoomId } from '../../../../lib/server/lib/notifyListener';\nimport { createChannelMethod } from '../../../../lib/server/methods/createChannel';\nimport { createPrivateGroupMethod } from '../../../../lib/server/methods/createPrivateGroup';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter } from './RecordConverter';\n\nexport class RoomConverter extends RecordConverter<IImportChannelRecord> {\n\tpublic startedByUserId: string;\n\n\tasync convertChannels(startedByUserId: string, callbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.startedByUserId = startedByUserId;\n\n\t\treturn this.convertData(callbacks);\n\t}\n\n\tprotected async convertRecord(record: IImportChannelRecord): Promise<boolean> {\n\t\tconst { data } = record;\n\n\t\tif (!data.name && data.t !== 'd') {\n\t\t\tthrow new Error('importer-channel-missing-name');\n\t\t}\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\t\tdata.users = [...new Set(data.users)];\n\n\t\tif (!data.importIds.length) {\n\t\t\tthrow new Error('importer-channel-missing-import-id');\n\t\t}\n\n\t\tconst existingRoom = await this.findExistingRoom(data);\n\t\tawait this.insertOrUpdateRoom(existingRoom, data, this.startedByUserId);\n\n\t\treturn !existingRoom;\n\t}\n\n\tasync insertOrUpdateRoom(existingRoom: IRoom | null, data: IImportChannel, startedByUserId: string): Promise<void> {\n\t\tif (existingRoom) {\n\t\t\tawait this.updateRoom(existingRoom, data, startedByUserId);\n\t\t} else {\n\t\t\tawait this.insertRoom(data, startedByUserId);\n\t\t}\n\n\t\tif (data.archived && data._id) {\n\t\t\tawait this.archiveRoomById(data._id);\n\t\t}\n\t}\n\n\tasync findExistingRoom(data: IImportChannel): Promise<IRoom | null> {\n\t\tif (data._id && data._id.toUpperCase() === 'GENERAL') {\n\t\t\tconst room = await Rooms.findOneById('GENERAL', {});\n\t\t\t// Prevent the importer from trying to create a new general\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('importer-channel-general-not-found');\n\t\t\t}\n\n\t\t\treturn room;\n\t\t}\n\n\t\tif (data.t === 'd') {\n\t\t\tconst users = await this._cache.convertImportedIdsToUsernames(data.users);\n\t\t\tif (users.length !== data.users.length) {\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\n\t\t\treturn Rooms.findDirectRoomContainingAllUsernames(users, {});\n\t\t}\n\n\t\tif (!data.name) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Imported room names always allow special chars\n\t\tconst roomName = limax(data.name.trim(), { maintainCase: true });\n\t\treturn Rooms.findOneByNonValidatedName(roomName, {});\n\t}\n\n\tasync updateRoom(room: IRoom, roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\troomData._id = room._id;\n\n\t\tif ((roomData._id as string).toUpperCase() === 'GENERAL' && roomData.name !== room.name) {\n\t\t\tawait saveRoomSettings(startedByUserId, 'GENERAL', 'roomName', roomData.name);\n\t\t}\n\n\t\tawait this.updateRoomId(room._id, roomData);\n\t}\n\n\tasync insertRoom(roomData: IImportChannel, startedByUserId: string): Promise<void> {\n\t\t// Find the rocketchatId of the user who created this channel\n\t\tconst creatorId = await this.getRoomCreatorId(roomData, startedByUserId);\n\t\tconst members = await this._cache.convertImportedIdsToUsernames(roomData.users, roomData.t !== 'd' ? creatorId : undefined);\n\n\t\tif (roomData.t === 'd') {\n\t\t\tif (members.length < roomData.users.length) {\n\t\t\t\tthis._logger.warn(`One or more imported users not found: ${roomData.users}`);\n\t\t\t\tthrow new Error('importer-channel-missing-users');\n\t\t\t}\n\t\t}\n\n\t\t// Create the channel\n\t\ttry {\n\t\t\tlet roomInfo;\n\t\t\tif (roomData.t === 'd') {\n\t\t\t\troomInfo = await createDirectMessage(members, startedByUserId, true);\n\t\t\t} else {\n\t\t\t\tif (!roomData.name) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (roomData.t === 'p') {\n\t\t\t\t\tconst user = await Users.findOneById(creatorId);\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t\t\t\t}\n\t\t\t\t\troomInfo = await createPrivateGroupMethod(user, roomData.name, members, false, {}, {});\n\t\t\t\t} else {\n\t\t\t\t\troomInfo = await createChannelMethod(creatorId, roomData.name, members, false, {}, {});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\troomData._id = roomInfo.rid;\n\t\t} catch (e) {\n\t\t\tthis._logger.warn({ msg: 'Failed to create new room', name: roomData.name, members });\n\t\t\tthis._logger.error(e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tawait this.updateRoomId(roomData._id as 'string', roomData);\n\t}\n\n\tasync archiveRoomById(rid: string) {\n\t\tconst responses = await Promise.all([Rooms.archiveById(rid), Subscriptions.archiveByRoomId(rid)]);\n\n\t\tif (responses[1]?.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t}\n\t}\n\n\tasync updateRoomId(_id: string, roomData: IImportChannel): Promise<void> {\n\t\tconst set = {\n\t\t\tts: roomData.ts,\n\t\t\ttopic: roomData.topic,\n\t\t\tdescription: roomData.description,\n\t\t};\n\n\t\tconst roomUpdate: { $set?: Record<string, any>; $addToSet?: Record<string, any> } = {};\n\n\t\tif (Object.keys(set).length > 0) {\n\t\t\troomUpdate.$set = set;\n\t\t}\n\n\t\tif (roomData.importIds.length) {\n\t\t\troomUpdate.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: roomData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (roomUpdate.$set || roomUpdate.$addToSet) {\n\t\t\tawait Rooms.updateOne({ _id: roomData._id }, roomUpdate);\n\t\t}\n\t}\n\n\tasync getRoomCreatorId(roomData: IImportChannel, startedByUserId: string): Promise<string> {\n\t\tif (roomData.u) {\n\t\t\tconst creatorId = await this._cache.findImportedUserId(roomData.u._id);\n\t\t\tif (creatorId) {\n\t\t\t\treturn creatorId;\n\t\t\t}\n\n\t\t\tif (roomData.t !== 'd') {\n\t\t\t\treturn startedByUserId;\n\t\t\t}\n\n\t\t\tthrow new Error('importer-channel-invalid-creator');\n\t\t}\n\n\t\tif (roomData.t === 'd') {\n\t\t\tfor await (const member of roomData.users) {\n\t\t\t\tconst userId = await this._cache.findImportedUserId(member);\n\t\t\t\tif (userId) {\n\t\t\t\t\treturn userId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('importer-channel-invalid-creator');\n\t}\n\n\tprotected getDataType(): 'channel' {\n\t\treturn 'channel';\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c653c3d861b258f33eeac637fb3edc15d0050a65"}
