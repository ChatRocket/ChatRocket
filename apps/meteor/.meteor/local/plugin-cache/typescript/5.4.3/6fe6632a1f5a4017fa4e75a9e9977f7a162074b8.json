{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/UserConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/converters/UserConverter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/UserConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/UserConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/UserConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportUser, IImportUserRecord, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport { hash as bcryptHash } from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { callbacks as systemCallbacks } from '../../../../../lib/callbacks';\nimport { addUserToDefaultChannels } from '../../../../lib/server/functions/addUserToDefaultChannels';\nimport { generateUsernameSuggestion } from '../../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../../lib/server/functions/saveUserIdentity';\nimport { setUserActiveStatus } from '../../../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter, type RecordConverterOptions } from './RecordConverter';\n\nexport type UserConverterOptions = {\n\tflagEmailsAsVerified?: boolean;\n\tskipExistingUsers?: boolean;\n\tskipNewUsers?: boolean;\n\tskipUserCallbacks?: boolean;\n\tskipDefaultChannels?: boolean;\n\n\tquickUserInsertion?: boolean;\n\tenableEmail2fa?: boolean;\n};\n\nexport type ConvertUsersResult = {\n\tinserted: string[];\n\tupdated: string[];\n\tskipped: number;\n\tfailed: number;\n};\n\nexport class UserConverter extends RecordConverter<IImportUserRecord, UserConverterOptions & RecordConverterOptions> {\n\tprivate insertedIds = new Set<IUser['_id']>();\n\n\tprivate updatedIds = new Set<IUser['_id']>();\n\n\tprotected async convertRecord(record: IImportUserRecord): Promise<boolean | undefined> {\n\t\tconst { data, _id } = record;\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\tif (!data.emails.length && !data.username) {\n\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t}\n\n\t\tconst existingUser = await this.findExistingUser(data);\n\t\tif (existingUser && this._options.skipExistingUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\t\tif (!existingUser && this._options.skipNewUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.insertOrUpdateUser(existingUser, data);\n\t\treturn !existingUser;\n\t}\n\n\tasync convertData(userCallbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.insertedIds.clear();\n\t\tthis.updatedIds.clear();\n\n\t\tif (this._options.quickUserInsertion) {\n\t\t\tawait this.batchConversion(userCallbacks);\n\t\t} else {\n\t\t\tawait super.convertData(userCallbacks);\n\t\t}\n\n\t\tawait systemCallbacks.run('afterUserImport', {\n\t\t\tinserted: [...this.insertedIds],\n\t\t\tupdated: [...this.updatedIds],\n\t\t\tskipped: this.skippedCount,\n\t\t\tfailed: this.failedCount,\n\t\t});\n\t}\n\n\tpublic async batchConversion({ afterBatchFn, ...callbacks }: IConversionCallbacks = {}): Promise<void> {\n\t\tconst batchToInsert = new Set<IImportUser>();\n\n\t\tawait this.iterateRecords({\n\t\t\t...callbacks,\n\t\t\tprocessRecord: async (record: IImportUserRecord) => {\n\t\t\t\tconst { data } = record;\n\n\t\t\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\t\t\tif (!data.emails.length && !data.username) {\n\t\t\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t\t\t}\n\n\t\t\t\tbatchToInsert.add(data);\n\n\t\t\t\tif (batchToInsert.size >= 50) {\n\t\t\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\t\t\tbatchToInsert.clear();\n\n\t\t\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t});\n\n\t\tif (batchToInsert.size > 0) {\n\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t}\n\t}\n\n\tprivate async insertUserBatch(users: IUser[], { afterBatchFn }: IConversionCallbacks): Promise<string[]> {\n\t\tlet newIds: string[] | null = null;\n\n\t\ttry {\n\t\t\tnewIds = Object.values((await Users.insertMany(users, { ordered: false })).insertedIds);\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(newIds.length, 0);\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tnewIds = (e.result?.result?.insertedIds || []) as string[];\n\t\t\tconst errorCount = users.length - (e.result?.result?.nInserted || 0);\n\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(Math.min(newIds.length, users.length - errorCount), errorCount);\n\t\t\t}\n\t\t}\n\n\t\treturn newIds;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\tif (data.username) {\n\t\t\treturn Users.findOneByUsernameIgnoringCase(data.username, {});\n\t\t}\n\t}\n\n\taddUserImportId(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (userData.importIds?.length) {\n\t\t\tupdateData.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: userData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\taddUserEmails(updateData: Record<string, any>, userData: IImportUser, existingEmails: Array<IUserEmail>): void {\n\t\tif (!userData.emails?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst verifyEmails = Boolean(this._options.flagEmailsAsVerified);\n\t\tconst newEmailList: Array<IUserEmail> = [];\n\n\t\tfor (const email of userData.emails) {\n\t\t\tconst verified = verifyEmails || existingEmails.find((ee) => ee.address === email)?.verified || false;\n\n\t\t\tnewEmailList.push({\n\t\t\t\taddress: email,\n\t\t\t\tverified,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.$set.emails = newEmailList;\n\t}\n\n\taddUserServices(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.services) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceKey in userData.services) {\n\t\t\tif (!userData.services[serviceKey]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst service = userData.services[serviceKey];\n\n\t\t\tfor (const key in service) {\n\t\t\t\tif (!service[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[`services.${serviceKey}.${key}`] = service[key];\n\t\t\t}\n\t\t}\n\t}\n\n\taddCustomFields(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.customFields) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subset = (source: Record<string, any>, currentPath: string): void => {\n\t\t\tfor (const key in source) {\n\t\t\t\tif (!source.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst keyPath = `${currentPath}.${key}`;\n\t\t\t\tif (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n\t\t\t\t\tsubset(source[key], keyPath);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set = {\n\t\t\t\t\t...updateData.$set,\n\t\t\t\t\t...{ [keyPath]: source[key] },\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tsubset(userData.customFields, 'customFields');\n\t}\n\n\tasync insertOrUpdateUser(existingUser: IUser | undefined, data: IImportUser): Promise<void> {\n\t\tif (!data.username && !existingUser?.username) {\n\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));\n\t\t\tdata.username = await generateUsernameSuggestion({\n\t\t\t\tname: data.name,\n\t\t\t\temails,\n\t\t\t});\n\t\t}\n\n\t\tif (existingUser) {\n\t\t\tawait this.updateUser(existingUser, data);\n\t\t\tthis.updatedIds.add(existingUser._id);\n\t\t} else {\n\t\t\tif (!data.name && data.username) {\n\t\t\t\tdata.name = this.guessNameFromUsername(data.username);\n\t\t\t}\n\n\t\t\tconst userId = await this.insertUser(data);\n\t\t\tdata._id = userId;\n\t\t\tthis.insertedIds.add(userId);\n\n\t\t\tif (!this._options.skipDefaultChannels) {\n\t\t\t\tconst insertedUser = await Users.findOneById(userId, {});\n\t\t\t\tif (!insertedUser) {\n\t\t\t\t\tthrow new Error(`User not found: ${userId}`);\n\t\t\t\t}\n\n\t\t\t\tawait addUserToDefaultChannels(insertedUser, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateUser(existingUser: IUser, userData: IImportUser): Promise<void> {\n\t\tconst { _id } = existingUser;\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData._id = _id;\n\n\t\tif (!userData.roles && !existingUser.roles) {\n\t\t\tuserData.roles = ['user'];\n\t\t}\n\t\tif (!userData.type && !existingUser.type) {\n\t\t\tuserData.type = 'user';\n\t\t}\n\n\t\tconst updateData: Record<string, any> = Object.assign(Object.create(null), {\n\t\t\t$set: Object.assign(Object.create(null), {\n\t\t\t\t...(userData.roles && { roles: userData.roles }),\n\t\t\t\t...(userData.type && { type: userData.type }),\n\t\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t}),\n\t\t});\n\n\t\tthis.addCustomFields(updateData, userData);\n\t\tthis.addUserServices(updateData, userData);\n\t\tthis.addUserImportId(updateData, userData);\n\t\tthis.addUserEmails(updateData, userData, existingUser.emails || []);\n\n\t\tif (Object.keys(updateData.$set).length === 0) {\n\t\t\tdelete updateData.$set;\n\t\t}\n\t\tif (Object.keys(updateData).length > 0) {\n\t\t\tawait Users.updateOne({ _id }, updateData);\n\t\t}\n\n\t\tif (userData.utcOffset) {\n\t\t\tawait Users.setUtcOffset(_id, userData.utcOffset);\n\t\t}\n\n\t\tif (userData.name || userData.username) {\n\t\t\tawait saveUserIdentity({ _id, name: userData.name, username: userData.username } as Parameters<typeof saveUserIdentity>[0]);\n\t\t}\n\n\t\tif (userData.importIds.length) {\n\t\t\tthis._cache.addUser(userData.importIds[0], existingUser._id, existingUser.username || userData.username);\n\t\t}\n\n\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\tif (userData.deleted && existingUser?.active) {\n\t\t\tawait setUserActiveStatus(_id, false, true);\n\t\t} else if (userData.deleted === false && existingUser?.active === false) {\n\t\t\tawait setUserActiveStatus(_id, true);\n\t\t}\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: _id, diff: updateData.$set });\n\t}\n\n\tprivate async hashPassword(password: string): Promise<string> {\n\t\treturn bcryptHash(SHA256(password), Accounts._bcryptRounds());\n\t}\n\n\tprivate generateTempPassword(userData: IImportUser): string {\n\t\treturn `${Date.now()}${userData.name || ''}${userData.emails.length ? userData.emails[0].toUpperCase() : ''}`;\n\t}\n\n\tprivate async buildNewUserObject(userData: IImportUser): Promise<Partial<IUser>> {\n\t\treturn {\n\t\t\ttype: userData.type || 'user',\n\t\t\t...(userData.username && { username: userData.username }),\n\t\t\t...(userData.emails.length && {\n\t\t\t\temails: userData.emails.map((email) => ({ address: email, verified: !!this._options.flagEmailsAsVerified })),\n\t\t\t}),\n\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t...(userData.name && { name: userData.name }),\n\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t...(userData.utcOffset !== undefined && { utcOffset: userData.utcOffset }),\n\t\t\t...{\n\t\t\t\tservices: {\n\t\t\t\t\t// Add a password service if there's a password string, or if there's no service at all\n\t\t\t\t\t...((!!userData.password || !userData.services || !Object.keys(userData.services).length) && {\n\t\t\t\t\t\tpassword: { bcrypt: await this.hashPassword(userData.password || this.generateTempPassword(userData)) },\n\t\t\t\t\t}),\n\t\t\t\t\t...(userData.services || {}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t...(userData.importIds?.length && { importIds: userData.importIds }),\n\t\t\t...(!!userData.customFields && { customFields: userData.customFields }),\n\t\t\t...(userData.deleted !== undefined && { active: !userData.deleted }),\n\t\t\t...(userData.voipExtension !== undefined && { freeSwitchExtension: userData.voipExtension }),\n\t\t};\n\t}\n\n\tprivate async buildUserBatch(usersData: IImportUser[]): Promise<IUser[]> {\n\t\treturn Promise.all(\n\t\t\tusersData.map(async (userData) => {\n\t\t\t\tconst user = await this.buildNewUserObject(userData);\n\t\t\t\treturn {\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t_id: Random.id(),\n\n\t\t\t\t\tstatus: 'offline',\n\t\t\t\t\t...user,\n\t\t\t\t\troles: userData.roles?.length ? userData.roles : ['user'],\n\t\t\t\t\tactive: !userData.deleted,\n\t\t\t\t\tservices: {\n\t\t\t\t\t\t...user.services,\n\t\t\t\t\t\t...(this._options.enableEmail2fa\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\temail2fa: {\n\t\t\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t} as IUser;\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync insertUser(userData: IImportUser): Promise<IUser['_id']> {\n\t\tconst user = await this.buildNewUserObject(userData);\n\n\t\treturn Accounts.insertUserDoc(\n\t\t\t{\n\t\t\t\tjoinDefaultChannels: false,\n\t\t\t\tskipEmailValidation: true,\n\t\t\t\tskipAdminCheck: true,\n\t\t\t\tskipAdminEmail: true,\n\t\t\t\tskipOnCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipBeforeCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipAfterCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipDefaultAvatar: true,\n\t\t\t\tskipAppsEngineEvent: !!process.env.IMPORTER_SKIP_APPS_EVENT,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...user,\n\t\t\t\t...(userData.roles?.length ? { globalRoles: userData.roles } : {}),\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprotected getDataType(): 'user' {\n\t\treturn 'user';\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/UserConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/converters/UserConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/UserConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/UserConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportUser, IImportUserRecord, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport { hash as bcryptHash } from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { callbacks as systemCallbacks } from '../../../../../lib/callbacks';\nimport { addUserToDefaultChannels } from '../../../../lib/server/functions/addUserToDefaultChannels';\nimport { generateUsernameSuggestion } from '../../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../../lib/server/functions/saveUserIdentity';\nimport { setUserActiveStatus } from '../../../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter, type RecordConverterOptions } from './RecordConverter';\n\nexport type UserConverterOptions = {\n\tflagEmailsAsVerified?: boolean;\n\tskipExistingUsers?: boolean;\n\tskipNewUsers?: boolean;\n\tskipUserCallbacks?: boolean;\n\tskipDefaultChannels?: boolean;\n\n\tquickUserInsertion?: boolean;\n\tenableEmail2fa?: boolean;\n};\n\nexport type ConvertUsersResult = {\n\tinserted: string[];\n\tupdated: string[];\n\tskipped: number;\n\tfailed: number;\n};\n\nexport class UserConverter extends RecordConverter<IImportUserRecord, UserConverterOptions & RecordConverterOptions> {\n\tprivate insertedIds = new Set<IUser['_id']>();\n\n\tprivate updatedIds = new Set<IUser['_id']>();\n\n\tprotected async convertRecord(record: IImportUserRecord): Promise<boolean | undefined> {\n\t\tconst { data, _id } = record;\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\tif (!data.emails.length && !data.username) {\n\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t}\n\n\t\tconst existingUser = await this.findExistingUser(data);\n\t\tif (existingUser && this._options.skipExistingUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\t\tif (!existingUser && this._options.skipNewUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.insertOrUpdateUser(existingUser, data);\n\t\treturn !existingUser;\n\t}\n\n\tasync convertData(userCallbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.insertedIds.clear();\n\t\tthis.updatedIds.clear();\n\n\t\tif (this._options.quickUserInsertion) {\n\t\t\tawait this.batchConversion(userCallbacks);\n\t\t} else {\n\t\t\tawait super.convertData(userCallbacks);\n\t\t}\n\n\t\tawait systemCallbacks.run('afterUserImport', {\n\t\t\tinserted: [...this.insertedIds],\n\t\t\tupdated: [...this.updatedIds],\n\t\t\tskipped: this.skippedCount,\n\t\t\tfailed: this.failedCount,\n\t\t});\n\t}\n\n\tpublic async batchConversion({ afterBatchFn, ...callbacks }: IConversionCallbacks = {}): Promise<void> {\n\t\tconst batchToInsert = new Set<IImportUser>();\n\n\t\tawait this.iterateRecords({\n\t\t\t...callbacks,\n\t\t\tprocessRecord: async (record: IImportUserRecord) => {\n\t\t\t\tconst { data } = record;\n\n\t\t\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\t\t\tif (!data.emails.length && !data.username) {\n\t\t\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t\t\t}\n\n\t\t\t\tbatchToInsert.add(data);\n\n\t\t\t\tif (batchToInsert.size >= 50) {\n\t\t\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\t\t\tbatchToInsert.clear();\n\n\t\t\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t});\n\n\t\tif (batchToInsert.size > 0) {\n\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t}\n\t}\n\n\tprivate async insertUserBatch(users: IUser[], { afterBatchFn }: IConversionCallbacks): Promise<string[]> {\n\t\tlet newIds: string[] | null = null;\n\n\t\ttry {\n\t\t\tnewIds = Object.values((await Users.insertMany(users, { ordered: false })).insertedIds);\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(newIds.length, 0);\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tnewIds = (e.result?.result?.insertedIds || []) as string[];\n\t\t\tconst errorCount = users.length - (e.result?.result?.nInserted || 0);\n\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(Math.min(newIds.length, users.length - errorCount), errorCount);\n\t\t\t}\n\t\t}\n\n\t\treturn newIds;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\tif (data.username) {\n\t\t\treturn Users.findOneByUsernameIgnoringCase(data.username, {});\n\t\t}\n\t}\n\n\taddUserImportId(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (userData.importIds?.length) {\n\t\t\tupdateData.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: userData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\taddUserEmails(updateData: Record<string, any>, userData: IImportUser, existingEmails: Array<IUserEmail>): void {\n\t\tif (!userData.emails?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst verifyEmails = Boolean(this._options.flagEmailsAsVerified);\n\t\tconst newEmailList: Array<IUserEmail> = [];\n\n\t\tfor (const email of userData.emails) {\n\t\t\tconst verified = verifyEmails || existingEmails.find((ee) => ee.address === email)?.verified || false;\n\n\t\t\tnewEmailList.push({\n\t\t\t\taddress: email,\n\t\t\t\tverified,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.$set.emails = newEmailList;\n\t}\n\n\taddUserServices(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.services) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceKey in userData.services) {\n\t\t\tif (!userData.services[serviceKey]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst service = userData.services[serviceKey];\n\n\t\t\tfor (const key in service) {\n\t\t\t\tif (!service[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[`services.${serviceKey}.${key}`] = service[key];\n\t\t\t}\n\t\t}\n\t}\n\n\taddCustomFields(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.customFields) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subset = (source: Record<string, any>, currentPath: string): void => {\n\t\t\tfor (const key in source) {\n\t\t\t\tif (!source.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst keyPath = `${currentPath}.${key}`;\n\t\t\t\tif (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n\t\t\t\t\tsubset(source[key], keyPath);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set = {\n\t\t\t\t\t...updateData.$set,\n\t\t\t\t\t...{ [keyPath]: source[key] },\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tsubset(userData.customFields, 'customFields');\n\t}\n\n\tasync insertOrUpdateUser(existingUser: IUser | undefined, data: IImportUser): Promise<void> {\n\t\tif (!data.username && !existingUser?.username) {\n\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));\n\t\t\tdata.username = await generateUsernameSuggestion({\n\t\t\t\tname: data.name,\n\t\t\t\temails,\n\t\t\t});\n\t\t}\n\n\t\tif (existingUser) {\n\t\t\tawait this.updateUser(existingUser, data);\n\t\t\tthis.updatedIds.add(existingUser._id);\n\t\t} else {\n\t\t\tif (!data.name && data.username) {\n\t\t\t\tdata.name = this.guessNameFromUsername(data.username);\n\t\t\t}\n\n\t\t\tconst userId = await this.insertUser(data);\n\t\t\tdata._id = userId;\n\t\t\tthis.insertedIds.add(userId);\n\n\t\t\tif (!this._options.skipDefaultChannels) {\n\t\t\t\tconst insertedUser = await Users.findOneById(userId, {});\n\t\t\t\tif (!insertedUser) {\n\t\t\t\t\tthrow new Error(`User not found: ${userId}`);\n\t\t\t\t}\n\n\t\t\t\tawait addUserToDefaultChannels(insertedUser, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateUser(existingUser: IUser, userData: IImportUser): Promise<void> {\n\t\tconst { _id } = existingUser;\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData._id = _id;\n\n\t\tif (!userData.roles && !existingUser.roles) {\n\t\t\tuserData.roles = ['user'];\n\t\t}\n\t\tif (!userData.type && !existingUser.type) {\n\t\t\tuserData.type = 'user';\n\t\t}\n\n\t\tconst updateData: Record<string, any> = Object.assign(Object.create(null), {\n\t\t\t$set: Object.assign(Object.create(null), {\n\t\t\t\t...(userData.roles && { roles: userData.roles }),\n\t\t\t\t...(userData.type && { type: userData.type }),\n\t\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t}),\n\t\t});\n\n\t\tthis.addCustomFields(updateData, userData);\n\t\tthis.addUserServices(updateData, userData);\n\t\tthis.addUserImportId(updateData, userData);\n\t\tthis.addUserEmails(updateData, userData, existingUser.emails || []);\n\n\t\tif (Object.keys(updateData.$set).length === 0) {\n\t\t\tdelete updateData.$set;\n\t\t}\n\t\tif (Object.keys(updateData).length > 0) {\n\t\t\tawait Users.updateOne({ _id }, updateData);\n\t\t}\n\n\t\tif (userData.utcOffset) {\n\t\t\tawait Users.setUtcOffset(_id, userData.utcOffset);\n\t\t}\n\n\t\tif (userData.name || userData.username) {\n\t\t\tawait saveUserIdentity({ _id, name: userData.name, username: userData.username } as Parameters<typeof saveUserIdentity>[0]);\n\t\t}\n\n\t\tif (userData.importIds.length) {\n\t\t\tthis._cache.addUser(userData.importIds[0], existingUser._id, existingUser.username || userData.username);\n\t\t}\n\n\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\tif (userData.deleted && existingUser?.active) {\n\t\t\tawait setUserActiveStatus(_id, false, true);\n\t\t} else if (userData.deleted === false && existingUser?.active === false) {\n\t\t\tawait setUserActiveStatus(_id, true);\n\t\t}\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: _id, diff: updateData.$set });\n\t}\n\n\tprivate async hashPassword(password: string): Promise<string> {\n\t\treturn bcryptHash(SHA256(password), Accounts._bcryptRounds());\n\t}\n\n\tprivate generateTempPassword(userData: IImportUser): string {\n\t\treturn `${Date.now()}${userData.name || ''}${userData.emails.length ? userData.emails[0].toUpperCase() : ''}`;\n\t}\n\n\tprivate async buildNewUserObject(userData: IImportUser): Promise<Partial<IUser>> {\n\t\treturn {\n\t\t\ttype: userData.type || 'user',\n\t\t\t...(userData.username && { username: userData.username }),\n\t\t\t...(userData.emails.length && {\n\t\t\t\temails: userData.emails.map((email) => ({ address: email, verified: !!this._options.flagEmailsAsVerified })),\n\t\t\t}),\n\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t...(userData.name && { name: userData.name }),\n\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t...(userData.utcOffset !== undefined && { utcOffset: userData.utcOffset }),\n\t\t\t...{\n\t\t\t\tservices: {\n\t\t\t\t\t// Add a password service if there's a password string, or if there's no service at all\n\t\t\t\t\t...((!!userData.password || !userData.services || !Object.keys(userData.services).length) && {\n\t\t\t\t\t\tpassword: { bcrypt: await this.hashPassword(userData.password || this.generateTempPassword(userData)) },\n\t\t\t\t\t}),\n\t\t\t\t\t...(userData.services || {}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t...(userData.importIds?.length && { importIds: userData.importIds }),\n\t\t\t...(!!userData.customFields && { customFields: userData.customFields }),\n\t\t\t...(userData.deleted !== undefined && { active: !userData.deleted }),\n\t\t\t...(userData.voipExtension !== undefined && { freeSwitchExtension: userData.voipExtension }),\n\t\t};\n\t}\n\n\tprivate async buildUserBatch(usersData: IImportUser[]): Promise<IUser[]> {\n\t\treturn Promise.all(\n\t\t\tusersData.map(async (userData) => {\n\t\t\t\tconst user = await this.buildNewUserObject(userData);\n\t\t\t\treturn {\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t_id: Random.id(),\n\n\t\t\t\t\tstatus: 'offline',\n\t\t\t\t\t...user,\n\t\t\t\t\troles: userData.roles?.length ? userData.roles : ['user'],\n\t\t\t\t\tactive: !userData.deleted,\n\t\t\t\t\tservices: {\n\t\t\t\t\t\t...user.services,\n\t\t\t\t\t\t...(this._options.enableEmail2fa\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\temail2fa: {\n\t\t\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t} as IUser;\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync insertUser(userData: IImportUser): Promise<IUser['_id']> {\n\t\tconst user = await this.buildNewUserObject(userData);\n\n\t\treturn Accounts.insertUserDoc(\n\t\t\t{\n\t\t\t\tjoinDefaultChannels: false,\n\t\t\t\tskipEmailValidation: true,\n\t\t\t\tskipAdminCheck: true,\n\t\t\t\tskipAdminEmail: true,\n\t\t\t\tskipOnCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipBeforeCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipAfterCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipDefaultAvatar: true,\n\t\t\t\tskipAppsEngineEvent: !!process.env.IMPORTER_SKIP_APPS_EVENT,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...user,\n\t\t\t\t...(userData.roles?.length ? { globalRoles: userData.roles } : {}),\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprotected getDataType(): 'user' {\n\t\treturn 'user';\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    const _excluded = [\"afterBatchFn\"];\n    module.export({\n      UserConverter: () => UserConverter\n    });\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 1);\n    let SHA256;\n    module.link(\"@rocket.chat/sha256\", {\n      SHA256(v) {\n        SHA256 = v;\n      }\n    }, 2);\n    let bcryptHash;\n    module.link(\"bcrypt\", {\n      hash(v) {\n        bcryptHash = v;\n      }\n    }, 3);\n    let Accounts;\n    module.link(\"meteor/accounts-base\", {\n      Accounts(v) {\n        Accounts = v;\n      }\n    }, 4);\n    let systemCallbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        systemCallbacks = v;\n      }\n    }, 5);\n    let addUserToDefaultChannels;\n    module.link(\"../../../../lib/server/functions/addUserToDefaultChannels\", {\n      addUserToDefaultChannels(v) {\n        addUserToDefaultChannels = v;\n      }\n    }, 6);\n    let generateUsernameSuggestion;\n    module.link(\"../../../../lib/server/functions/getUsernameSuggestion\", {\n      generateUsernameSuggestion(v) {\n        generateUsernameSuggestion = v;\n      }\n    }, 7);\n    let saveUserIdentity;\n    module.link(\"../../../../lib/server/functions/saveUserIdentity\", {\n      saveUserIdentity(v) {\n        saveUserIdentity = v;\n      }\n    }, 8);\n    let setUserActiveStatus;\n    module.link(\"../../../../lib/server/functions/setUserActiveStatus\", {\n      setUserActiveStatus(v) {\n        setUserActiveStatus = v;\n      }\n    }, 9);\n    let notifyOnUserChange;\n    module.link(\"../../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 10);\n    let RecordConverter;\n    module.link(\"./RecordConverter\", {\n      RecordConverter(v) {\n        RecordConverter = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class UserConverter extends RecordConverter {\n      constructor() {\n        super(...arguments);\n        this.insertedIds = new Set();\n        this.updatedIds = new Set();\n      }\n      async convertRecord(record) {\n        const {\n          data,\n          _id\n        } = record;\n        data.importIds = data.importIds.filter(item => item);\n        if (!data.emails.length && !data.username) {\n          throw new Error('importer-user-missing-email-and-username');\n        }\n        const existingUser = await this.findExistingUser(data);\n        if (existingUser && this._options.skipExistingUsers) {\n          await this.skipRecord(_id);\n          return;\n        }\n        if (!existingUser && this._options.skipNewUsers) {\n          await this.skipRecord(_id);\n          return;\n        }\n        await this.insertOrUpdateUser(existingUser, data);\n        return !existingUser;\n      }\n      async convertData() {\n        let userCallbacks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        this.insertedIds.clear();\n        this.updatedIds.clear();\n        if (this._options.quickUserInsertion) {\n          await this.batchConversion(userCallbacks);\n        } else {\n          await super.convertData(userCallbacks);\n        }\n        await systemCallbacks.run('afterUserImport', {\n          inserted: [...this.insertedIds],\n          updated: [...this.updatedIds],\n          skipped: this.skippedCount,\n          failed: this.failedCount\n        });\n      }\n      async batchConversion() {\n        let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let {\n            afterBatchFn\n          } = _ref,\n          callbacks = _objectWithoutProperties(_ref, _excluded);\n        const batchToInsert = new Set();\n        await this.iterateRecords(_objectSpread(_objectSpread({}, callbacks), {}, {\n          processRecord: async record => {\n            const {\n              data\n            } = record;\n            data.importIds = data.importIds.filter(item => item);\n            if (!data.emails.length && !data.username) {\n              throw new Error('importer-user-missing-email-and-username');\n            }\n            batchToInsert.add(data);\n            if (batchToInsert.size >= 50) {\n              const usersToInsert = await this.buildUserBatch([...batchToInsert]);\n              batchToInsert.clear();\n              const newIds = await this.insertUserBatch(usersToInsert, {\n                afterBatchFn\n              });\n              newIds.forEach(id => this.insertedIds.add(id));\n            }\n            return undefined;\n          }\n        }));\n        if (batchToInsert.size > 0) {\n          const usersToInsert = await this.buildUserBatch([...batchToInsert]);\n          const newIds = await this.insertUserBatch(usersToInsert, {\n            afterBatchFn\n          });\n          newIds.forEach(id => this.insertedIds.add(id));\n        }\n      }\n      async insertUserBatch(users, _ref2) {\n        let {\n          afterBatchFn\n        } = _ref2;\n        let newIds = null;\n        try {\n          newIds = Object.values((await Users.insertMany(users, {\n            ordered: false\n          })).insertedIds);\n          if (afterBatchFn) {\n            await afterBatchFn(newIds.length, 0);\n          }\n        } catch (e) {\n          var _e$result, _e$result$result, _e$result2, _e$result2$result;\n          newIds = ((_e$result = e.result) === null || _e$result === void 0 ? void 0 : (_e$result$result = _e$result.result) === null || _e$result$result === void 0 ? void 0 : _e$result$result.insertedIds) || [];\n          const errorCount = users.length - (((_e$result2 = e.result) === null || _e$result2 === void 0 ? void 0 : (_e$result2$result = _e$result2.result) === null || _e$result2$result === void 0 ? void 0 : _e$result2$result.nInserted) || 0);\n          if (afterBatchFn) {\n            await afterBatchFn(Math.min(newIds.length, users.length - errorCount), errorCount);\n          }\n        }\n        return newIds;\n      }\n      async findExistingUser(data) {\n        if (data.emails.length) {\n          const emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n          if (emailUser) {\n            return emailUser;\n          }\n        }\n        // If we couldn't find one by their email address, try to find an existing user by their username\n        if (data.username) {\n          return Users.findOneByUsernameIgnoringCase(data.username, {});\n        }\n      }\n      addUserImportId(updateData, userData) {\n        var _userData$importIds;\n        if ((_userData$importIds = userData.importIds) !== null && _userData$importIds !== void 0 && _userData$importIds.length) {\n          updateData.$addToSet = {\n            importIds: {\n              $each: userData.importIds\n            }\n          };\n        }\n      }\n      addUserEmails(updateData, userData, existingEmails) {\n        var _userData$emails;\n        if (!((_userData$emails = userData.emails) !== null && _userData$emails !== void 0 && _userData$emails.length)) {\n          return;\n        }\n        const verifyEmails = Boolean(this._options.flagEmailsAsVerified);\n        const newEmailList = [];\n        for (const email of userData.emails) {\n          var _existingEmails$find;\n          const verified = verifyEmails || ((_existingEmails$find = existingEmails.find(ee => ee.address === email)) === null || _existingEmails$find === void 0 ? void 0 : _existingEmails$find.verified) || false;\n          newEmailList.push({\n            address: email,\n            verified\n          });\n        }\n        updateData.$set.emails = newEmailList;\n      }\n      addUserServices(updateData, userData) {\n        if (!userData.services) {\n          return;\n        }\n        for (const serviceKey in userData.services) {\n          if (!userData.services[serviceKey]) {\n            continue;\n          }\n          const service = userData.services[serviceKey];\n          for (const key in service) {\n            if (!service[key]) {\n              continue;\n            }\n            updateData.$set[\"services.\".concat(serviceKey, \".\").concat(key)] = service[key];\n          }\n        }\n      }\n      addCustomFields(updateData, userData) {\n        if (!userData.customFields) {\n          return;\n        }\n        const subset = (source, currentPath) => {\n          for (const key in source) {\n            if (!source.hasOwnProperty(key)) {\n              continue;\n            }\n            const keyPath = \"\".concat(currentPath, \".\").concat(key);\n            if (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n              subset(source[key], keyPath);\n              continue;\n            }\n            updateData.$set = _objectSpread(_objectSpread({}, updateData.$set), {\n              [keyPath]: source[key]\n            });\n          }\n        };\n        subset(userData.customFields, 'customFields');\n      }\n      async insertOrUpdateUser(existingUser, data) {\n        if (!data.username && !(existingUser !== null && existingUser !== void 0 && existingUser.username)) {\n          const emails = data.emails.filter(Boolean).map(email => ({\n            address: email\n          }));\n          data.username = await generateUsernameSuggestion({\n            name: data.name,\n            emails\n          });\n        }\n        if (existingUser) {\n          await this.updateUser(existingUser, data);\n          this.updatedIds.add(existingUser._id);\n        } else {\n          if (!data.name && data.username) {\n            data.name = this.guessNameFromUsername(data.username);\n          }\n          const userId = await this.insertUser(data);\n          data._id = userId;\n          this.insertedIds.add(userId);\n          if (!this._options.skipDefaultChannels) {\n            const insertedUser = await Users.findOneById(userId, {});\n            if (!insertedUser) {\n              throw new Error(\"User not found: \".concat(userId));\n            }\n            await addUserToDefaultChannels(insertedUser, true);\n          }\n        }\n      }\n      async updateUser(existingUser, userData) {\n        var _userData$services;\n        const {\n          _id\n        } = existingUser;\n        if (!_id) {\n          return;\n        }\n        userData._id = _id;\n        if (!userData.roles && !existingUser.roles) {\n          userData.roles = ['user'];\n        }\n        if (!userData.type && !existingUser.type) {\n          userData.type = 'user';\n        }\n        const updateData = Object.assign(Object.create(null), {\n          $set: Object.assign(Object.create(null), _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, userData.roles && {\n            roles: userData.roles\n          }), userData.type && {\n            type: userData.type\n          }), userData.statusText && {\n            statusText: userData.statusText\n          }), userData.bio && {\n            bio: userData.bio\n          }), ((_userData$services = userData.services) === null || _userData$services === void 0 ? void 0 : _userData$services.ldap) && {\n            ldap: true\n          }), userData.avatarUrl && {\n            _pendingAvatarUrl: userData.avatarUrl\n          }))\n        });\n        this.addCustomFields(updateData, userData);\n        this.addUserServices(updateData, userData);\n        this.addUserImportId(updateData, userData);\n        this.addUserEmails(updateData, userData, existingUser.emails || []);\n        if (Object.keys(updateData.$set).length === 0) {\n          delete updateData.$set;\n        }\n        if (Object.keys(updateData).length > 0) {\n          await Users.updateOne({\n            _id\n          }, updateData);\n        }\n        if (userData.utcOffset) {\n          await Users.setUtcOffset(_id, userData.utcOffset);\n        }\n        if (userData.name || userData.username) {\n          await saveUserIdentity({\n            _id,\n            name: userData.name,\n            username: userData.username\n          });\n        }\n        if (userData.importIds.length) {\n          this._cache.addUser(userData.importIds[0], existingUser._id, existingUser.username || userData.username);\n        }\n        // Deleted users are 'inactive' users in Rocket.Chat\n        if (userData.deleted && existingUser !== null && existingUser !== void 0 && existingUser.active) {\n          await setUserActiveStatus(_id, false, true);\n        } else if (userData.deleted === false && (existingUser === null || existingUser === void 0 ? void 0 : existingUser.active) === false) {\n          await setUserActiveStatus(_id, true);\n        }\n        void notifyOnUserChange({\n          clientAction: 'updated',\n          id: _id,\n          diff: updateData.$set\n        });\n      }\n      async hashPassword(password) {\n        return bcryptHash(SHA256(password), Accounts._bcryptRounds());\n      }\n      generateTempPassword(userData) {\n        return \"\".concat(Date.now()).concat(userData.name || '').concat(userData.emails.length ? userData.emails[0].toUpperCase() : '');\n      }\n      async buildNewUserObject(userData) {\n        var _userData$services2, _userData$importIds2;\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          type: userData.type || 'user'\n        }, userData.username && {\n          username: userData.username\n        }), userData.emails.length && {\n          emails: userData.emails.map(email => ({\n            address: email,\n            verified: !!this._options.flagEmailsAsVerified\n          }))\n        }), userData.statusText && {\n          statusText: userData.statusText\n        }), userData.name && {\n          name: userData.name\n        }), userData.bio && {\n          bio: userData.bio\n        }), userData.avatarUrl && {\n          _pendingAvatarUrl: userData.avatarUrl\n        }), userData.utcOffset !== undefined && {\n          utcOffset: userData.utcOffset\n        }), {\n          services: _objectSpread(_objectSpread({}, (!!userData.password || !userData.services || !Object.keys(userData.services).length) && {\n            password: {\n              bcrypt: await this.hashPassword(userData.password || this.generateTempPassword(userData))\n            }\n          }), userData.services || {})\n        }), ((_userData$services2 = userData.services) === null || _userData$services2 === void 0 ? void 0 : _userData$services2.ldap) && {\n          ldap: true\n        }), ((_userData$importIds2 = userData.importIds) === null || _userData$importIds2 === void 0 ? void 0 : _userData$importIds2.length) && {\n          importIds: userData.importIds\n        }), !!userData.customFields && {\n          customFields: userData.customFields\n        }), userData.deleted !== undefined && {\n          active: !userData.deleted\n        }), userData.voipExtension !== undefined && {\n          freeSwitchExtension: userData.voipExtension\n        });\n      }\n      async buildUserBatch(usersData) {\n        return Promise.all(usersData.map(async userData => {\n          var _userData$roles;\n          const user = await this.buildNewUserObject(userData);\n          return _objectSpread(_objectSpread({\n            createdAt: new Date(),\n            _id: Random.id(),\n            status: 'offline'\n          }, user), {}, {\n            roles: (_userData$roles = userData.roles) !== null && _userData$roles !== void 0 && _userData$roles.length ? userData.roles : ['user'],\n            active: !userData.deleted,\n            services: _objectSpread(_objectSpread({}, user.services), this._options.enableEmail2fa ? {\n              email2fa: {\n                enabled: true,\n                changedAt: new Date()\n              }\n            } : {})\n          });\n        }));\n      }\n      async insertUser(userData) {\n        var _userData$roles2;\n        const user = await this.buildNewUserObject(userData);\n        return Accounts.insertUserDoc({\n          joinDefaultChannels: false,\n          skipEmailValidation: true,\n          skipAdminCheck: true,\n          skipAdminEmail: true,\n          skipOnCreateUserCallback: this._options.skipUserCallbacks,\n          skipBeforeCreateUserCallback: this._options.skipUserCallbacks,\n          skipAfterCreateUserCallback: this._options.skipUserCallbacks,\n          skipDefaultAvatar: true,\n          skipAppsEngineEvent: !!process.env.IMPORTER_SKIP_APPS_EVENT\n        }, _objectSpread(_objectSpread({}, user), (_userData$roles2 = userData.roles) !== null && _userData$roles2 !== void 0 && _userData$roles2.length ? {\n          globalRoles: userData.roles\n        } : {}));\n      }\n      guessNameFromUsername(username) {\n        return username.replace(/\\W/g, ' ').replace(/\\s(.)/g, u => u.toUpperCase()).replace(/^(.)/, u => u.toLowerCase()).replace(/^\\w/, u => u.toUpperCase());\n      }\n      getDataType() {\n        return 'user';\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_excluded","export","UserConverter","Users","Random","SHA256","bcryptHash","hash","Accounts","systemCallbacks","callbacks","addUserToDefaultChannels","generateUsernameSuggestion","saveUserIdentity","setUserActiveStatus","notifyOnUserChange","RecordConverter","__reifyWaitForDeps__","constructor","arguments","insertedIds","Set","updatedIds","convertRecord","record","data","_id","importIds","filter","item","emails","length","username","Error","existingUser","findExistingUser","_options","skipExistingUsers","skipRecord","skipNewUsers","insertOrUpdateUser","convertData","userCallbacks","undefined","clear","quickUserInsertion","batchConversion","run","inserted","updated","skipped","skippedCount","failed","failedCount","_ref","afterBatchFn","batchToInsert","iterateRecords","processRecord","add","size","usersToInsert","buildUserBatch","newIds","insertUserBatch","forEach","id","users","_ref2","Object","values","insertMany","ordered","e","_e$result","_e$result$result","_e$result2","_e$result2$result","result","errorCount","nInserted","Math","min","emailUser","findOneByEmailAddress","findOneByUsernameIgnoringCase","addUserImportId","updateData","userData","_userData$importIds","$addToSet","$each","addUserEmails","existingEmails","_userData$emails","verifyEmails","Boolean","flagEmailsAsVerified","newEmailList","email","_existingEmails$find","verified","find","ee","address","push","$set","addUserServices","services","serviceKey","service","key","concat","addCustomFields","customFields","subset","source","currentPath","hasOwnProperty","keyPath","Array","isArray","map","name","updateUser","guessNameFromUsername","userId","insertUser","skipDefaultChannels","insertedUser","findOneById","_userData$services","roles","type","assign","create","statusText","bio","ldap","avatarUrl","_pendingAvatarUrl","keys","updateOne","utcOffset","setUtcOffset","_cache","addUser","deleted","active","clientAction","diff","hashPassword","password","_bcryptRounds","generateTempPassword","Date","now","toUpperCase","buildNewUserObject","_userData$services2","_userData$importIds2","bcrypt","voipExtension","freeSwitchExtension","usersData","Promise","all","_userData$roles","user","createdAt","status","enableEmail2fa","email2fa","enabled","changedAt","_userData$roles2","insertUserDoc","joinDefaultChannels","skipEmailValidation","skipAdminCheck","skipAdminEmail","skipOnCreateUserCallback","skipUserCallbacks","skipBeforeCreateUserCallback","skipAfterCreateUserCallback","skipDefaultAvatar","skipAppsEngineEvent","process","env","IMPORTER_SKIP_APPS_EVENT","globalRoles","replace","u","toLowerCase","getDataType","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer/server/classes/converters/UserConverter.ts"],"sourcesContent":["import type { IImportUser, IImportUserRecord, IUser, IUserEmail } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { SHA256 } from '@rocket.chat/sha256';\nimport { hash as bcryptHash } from 'bcrypt';\nimport { Accounts } from 'meteor/accounts-base';\n\nimport { callbacks as systemCallbacks } from '../../../../../lib/callbacks';\nimport { addUserToDefaultChannels } from '../../../../lib/server/functions/addUserToDefaultChannels';\nimport { generateUsernameSuggestion } from '../../../../lib/server/functions/getUsernameSuggestion';\nimport { saveUserIdentity } from '../../../../lib/server/functions/saveUserIdentity';\nimport { setUserActiveStatus } from '../../../../lib/server/functions/setUserActiveStatus';\nimport { notifyOnUserChange } from '../../../../lib/server/lib/notifyListener';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\nimport { RecordConverter, type RecordConverterOptions } from './RecordConverter';\n\nexport type UserConverterOptions = {\n\tflagEmailsAsVerified?: boolean;\n\tskipExistingUsers?: boolean;\n\tskipNewUsers?: boolean;\n\tskipUserCallbacks?: boolean;\n\tskipDefaultChannels?: boolean;\n\n\tquickUserInsertion?: boolean;\n\tenableEmail2fa?: boolean;\n};\n\nexport type ConvertUsersResult = {\n\tinserted: string[];\n\tupdated: string[];\n\tskipped: number;\n\tfailed: number;\n};\n\nexport class UserConverter extends RecordConverter<IImportUserRecord, UserConverterOptions & RecordConverterOptions> {\n\tprivate insertedIds = new Set<IUser['_id']>();\n\n\tprivate updatedIds = new Set<IUser['_id']>();\n\n\tprotected async convertRecord(record: IImportUserRecord): Promise<boolean | undefined> {\n\t\tconst { data, _id } = record;\n\n\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\tif (!data.emails.length && !data.username) {\n\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t}\n\n\t\tconst existingUser = await this.findExistingUser(data);\n\t\tif (existingUser && this._options.skipExistingUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\t\tif (!existingUser && this._options.skipNewUsers) {\n\t\t\tawait this.skipRecord(_id);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.insertOrUpdateUser(existingUser, data);\n\t\treturn !existingUser;\n\t}\n\n\tasync convertData(userCallbacks: IConversionCallbacks = {}): Promise<void> {\n\t\tthis.insertedIds.clear();\n\t\tthis.updatedIds.clear();\n\n\t\tif (this._options.quickUserInsertion) {\n\t\t\tawait this.batchConversion(userCallbacks);\n\t\t} else {\n\t\t\tawait super.convertData(userCallbacks);\n\t\t}\n\n\t\tawait systemCallbacks.run('afterUserImport', {\n\t\t\tinserted: [...this.insertedIds],\n\t\t\tupdated: [...this.updatedIds],\n\t\t\tskipped: this.skippedCount,\n\t\t\tfailed: this.failedCount,\n\t\t});\n\t}\n\n\tpublic async batchConversion({ afterBatchFn, ...callbacks }: IConversionCallbacks = {}): Promise<void> {\n\t\tconst batchToInsert = new Set<IImportUser>();\n\n\t\tawait this.iterateRecords({\n\t\t\t...callbacks,\n\t\t\tprocessRecord: async (record: IImportUserRecord) => {\n\t\t\t\tconst { data } = record;\n\n\t\t\t\tdata.importIds = data.importIds.filter((item) => item);\n\n\t\t\t\tif (!data.emails.length && !data.username) {\n\t\t\t\t\tthrow new Error('importer-user-missing-email-and-username');\n\t\t\t\t}\n\n\t\t\t\tbatchToInsert.add(data);\n\n\t\t\t\tif (batchToInsert.size >= 50) {\n\t\t\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\t\t\tbatchToInsert.clear();\n\n\t\t\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t});\n\n\t\tif (batchToInsert.size > 0) {\n\t\t\tconst usersToInsert = await this.buildUserBatch([...batchToInsert]);\n\t\t\tconst newIds = await this.insertUserBatch(usersToInsert, { afterBatchFn });\n\t\t\tnewIds.forEach((id) => this.insertedIds.add(id));\n\t\t}\n\t}\n\n\tprivate async insertUserBatch(users: IUser[], { afterBatchFn }: IConversionCallbacks): Promise<string[]> {\n\t\tlet newIds: string[] | null = null;\n\n\t\ttry {\n\t\t\tnewIds = Object.values((await Users.insertMany(users, { ordered: false })).insertedIds);\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(newIds.length, 0);\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tnewIds = (e.result?.result?.insertedIds || []) as string[];\n\t\t\tconst errorCount = users.length - (e.result?.result?.nInserted || 0);\n\n\t\t\tif (afterBatchFn) {\n\t\t\t\tawait afterBatchFn(Math.min(newIds.length, users.length - errorCount), errorCount);\n\t\t\t}\n\t\t}\n\n\t\treturn newIds;\n\t}\n\n\tasync findExistingUser(data: IImportUser): Promise<IUser | undefined> {\n\t\tif (data.emails.length) {\n\t\t\tconst emailUser = await Users.findOneByEmailAddress(data.emails[0], {});\n\n\t\t\tif (emailUser) {\n\t\t\t\treturn emailUser;\n\t\t\t}\n\t\t}\n\n\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\tif (data.username) {\n\t\t\treturn Users.findOneByUsernameIgnoringCase(data.username, {});\n\t\t}\n\t}\n\n\taddUserImportId(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (userData.importIds?.length) {\n\t\t\tupdateData.$addToSet = {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: userData.importIds,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\taddUserEmails(updateData: Record<string, any>, userData: IImportUser, existingEmails: Array<IUserEmail>): void {\n\t\tif (!userData.emails?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst verifyEmails = Boolean(this._options.flagEmailsAsVerified);\n\t\tconst newEmailList: Array<IUserEmail> = [];\n\n\t\tfor (const email of userData.emails) {\n\t\t\tconst verified = verifyEmails || existingEmails.find((ee) => ee.address === email)?.verified || false;\n\n\t\t\tnewEmailList.push({\n\t\t\t\taddress: email,\n\t\t\t\tverified,\n\t\t\t});\n\t\t}\n\n\t\tupdateData.$set.emails = newEmailList;\n\t}\n\n\taddUserServices(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.services) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const serviceKey in userData.services) {\n\t\t\tif (!userData.services[serviceKey]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst service = userData.services[serviceKey];\n\n\t\t\tfor (const key in service) {\n\t\t\t\tif (!service[key]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set[`services.${serviceKey}.${key}`] = service[key];\n\t\t\t}\n\t\t}\n\t}\n\n\taddCustomFields(updateData: Record<string, any>, userData: IImportUser): void {\n\t\tif (!userData.customFields) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst subset = (source: Record<string, any>, currentPath: string): void => {\n\t\t\tfor (const key in source) {\n\t\t\t\tif (!source.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst keyPath = `${currentPath}.${key}`;\n\t\t\t\tif (typeof source[key] === 'object' && !Array.isArray(source[key])) {\n\t\t\t\t\tsubset(source[key], keyPath);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tupdateData.$set = {\n\t\t\t\t\t...updateData.$set,\n\t\t\t\t\t...{ [keyPath]: source[key] },\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tsubset(userData.customFields, 'customFields');\n\t}\n\n\tasync insertOrUpdateUser(existingUser: IUser | undefined, data: IImportUser): Promise<void> {\n\t\tif (!data.username && !existingUser?.username) {\n\t\t\tconst emails = data.emails.filter(Boolean).map((email) => ({ address: email }));\n\t\t\tdata.username = await generateUsernameSuggestion({\n\t\t\t\tname: data.name,\n\t\t\t\temails,\n\t\t\t});\n\t\t}\n\n\t\tif (existingUser) {\n\t\t\tawait this.updateUser(existingUser, data);\n\t\t\tthis.updatedIds.add(existingUser._id);\n\t\t} else {\n\t\t\tif (!data.name && data.username) {\n\t\t\t\tdata.name = this.guessNameFromUsername(data.username);\n\t\t\t}\n\n\t\t\tconst userId = await this.insertUser(data);\n\t\t\tdata._id = userId;\n\t\t\tthis.insertedIds.add(userId);\n\n\t\t\tif (!this._options.skipDefaultChannels) {\n\t\t\t\tconst insertedUser = await Users.findOneById(userId, {});\n\t\t\t\tif (!insertedUser) {\n\t\t\t\t\tthrow new Error(`User not found: ${userId}`);\n\t\t\t\t}\n\n\t\t\t\tawait addUserToDefaultChannels(insertedUser, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateUser(existingUser: IUser, userData: IImportUser): Promise<void> {\n\t\tconst { _id } = existingUser;\n\t\tif (!_id) {\n\t\t\treturn;\n\t\t}\n\n\t\tuserData._id = _id;\n\n\t\tif (!userData.roles && !existingUser.roles) {\n\t\t\tuserData.roles = ['user'];\n\t\t}\n\t\tif (!userData.type && !existingUser.type) {\n\t\t\tuserData.type = 'user';\n\t\t}\n\n\t\tconst updateData: Record<string, any> = Object.assign(Object.create(null), {\n\t\t\t$set: Object.assign(Object.create(null), {\n\t\t\t\t...(userData.roles && { roles: userData.roles }),\n\t\t\t\t...(userData.type && { type: userData.type }),\n\t\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t}),\n\t\t});\n\n\t\tthis.addCustomFields(updateData, userData);\n\t\tthis.addUserServices(updateData, userData);\n\t\tthis.addUserImportId(updateData, userData);\n\t\tthis.addUserEmails(updateData, userData, existingUser.emails || []);\n\n\t\tif (Object.keys(updateData.$set).length === 0) {\n\t\t\tdelete updateData.$set;\n\t\t}\n\t\tif (Object.keys(updateData).length > 0) {\n\t\t\tawait Users.updateOne({ _id }, updateData);\n\t\t}\n\n\t\tif (userData.utcOffset) {\n\t\t\tawait Users.setUtcOffset(_id, userData.utcOffset);\n\t\t}\n\n\t\tif (userData.name || userData.username) {\n\t\t\tawait saveUserIdentity({ _id, name: userData.name, username: userData.username } as Parameters<typeof saveUserIdentity>[0]);\n\t\t}\n\n\t\tif (userData.importIds.length) {\n\t\t\tthis._cache.addUser(userData.importIds[0], existingUser._id, existingUser.username || userData.username);\n\t\t}\n\n\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\tif (userData.deleted && existingUser?.active) {\n\t\t\tawait setUserActiveStatus(_id, false, true);\n\t\t} else if (userData.deleted === false && existingUser?.active === false) {\n\t\t\tawait setUserActiveStatus(_id, true);\n\t\t}\n\n\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: _id, diff: updateData.$set });\n\t}\n\n\tprivate async hashPassword(password: string): Promise<string> {\n\t\treturn bcryptHash(SHA256(password), Accounts._bcryptRounds());\n\t}\n\n\tprivate generateTempPassword(userData: IImportUser): string {\n\t\treturn `${Date.now()}${userData.name || ''}${userData.emails.length ? userData.emails[0].toUpperCase() : ''}`;\n\t}\n\n\tprivate async buildNewUserObject(userData: IImportUser): Promise<Partial<IUser>> {\n\t\treturn {\n\t\t\ttype: userData.type || 'user',\n\t\t\t...(userData.username && { username: userData.username }),\n\t\t\t...(userData.emails.length && {\n\t\t\t\temails: userData.emails.map((email) => ({ address: email, verified: !!this._options.flagEmailsAsVerified })),\n\t\t\t}),\n\t\t\t...(userData.statusText && { statusText: userData.statusText }),\n\t\t\t...(userData.name && { name: userData.name }),\n\t\t\t...(userData.bio && { bio: userData.bio }),\n\t\t\t...(userData.avatarUrl && { _pendingAvatarUrl: userData.avatarUrl }),\n\t\t\t...(userData.utcOffset !== undefined && { utcOffset: userData.utcOffset }),\n\t\t\t...{\n\t\t\t\tservices: {\n\t\t\t\t\t// Add a password service if there's a password string, or if there's no service at all\n\t\t\t\t\t...((!!userData.password || !userData.services || !Object.keys(userData.services).length) && {\n\t\t\t\t\t\tpassword: { bcrypt: await this.hashPassword(userData.password || this.generateTempPassword(userData)) },\n\t\t\t\t\t}),\n\t\t\t\t\t...(userData.services || {}),\n\t\t\t\t},\n\t\t\t},\n\t\t\t...(userData.services?.ldap && { ldap: true }),\n\t\t\t...(userData.importIds?.length && { importIds: userData.importIds }),\n\t\t\t...(!!userData.customFields && { customFields: userData.customFields }),\n\t\t\t...(userData.deleted !== undefined && { active: !userData.deleted }),\n\t\t\t...(userData.voipExtension !== undefined && { freeSwitchExtension: userData.voipExtension }),\n\t\t};\n\t}\n\n\tprivate async buildUserBatch(usersData: IImportUser[]): Promise<IUser[]> {\n\t\treturn Promise.all(\n\t\t\tusersData.map(async (userData) => {\n\t\t\t\tconst user = await this.buildNewUserObject(userData);\n\t\t\t\treturn {\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t_id: Random.id(),\n\n\t\t\t\t\tstatus: 'offline',\n\t\t\t\t\t...user,\n\t\t\t\t\troles: userData.roles?.length ? userData.roles : ['user'],\n\t\t\t\t\tactive: !userData.deleted,\n\t\t\t\t\tservices: {\n\t\t\t\t\t\t...user.services,\n\t\t\t\t\t\t...(this._options.enableEmail2fa\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\temail2fa: {\n\t\t\t\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\t\t\t\tchangedAt: new Date(),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: {}),\n\t\t\t\t\t},\n\t\t\t\t} as IUser;\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync insertUser(userData: IImportUser): Promise<IUser['_id']> {\n\t\tconst user = await this.buildNewUserObject(userData);\n\n\t\treturn Accounts.insertUserDoc(\n\t\t\t{\n\t\t\t\tjoinDefaultChannels: false,\n\t\t\t\tskipEmailValidation: true,\n\t\t\t\tskipAdminCheck: true,\n\t\t\t\tskipAdminEmail: true,\n\t\t\t\tskipOnCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipBeforeCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipAfterCreateUserCallback: this._options.skipUserCallbacks,\n\t\t\t\tskipDefaultAvatar: true,\n\t\t\t\tskipAppsEngineEvent: !!process.env.IMPORTER_SKIP_APPS_EVENT,\n\t\t\t},\n\t\t\t{\n\t\t\t\t...user,\n\t\t\t\t...(userData.roles?.length ? { globalRoles: userData.roles } : {}),\n\t\t\t},\n\t\t);\n\t}\n\n\tprotected guessNameFromUsername(username: string): string {\n\t\treturn username\n\t\t\t.replace(/\\W/g, ' ')\n\t\t\t.replace(/\\s(.)/g, (u) => u.toUpperCase())\n\t\t\t.replace(/^(.)/, (u) => u.toLowerCase())\n\t\t\t.replace(/^\\w/, (u) => u.toUpperCase());\n\t}\n\n\tprotected getDataType(): 'user' {\n\t\treturn 'user';\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"6fe6632a1f5a4017fa4e75a9e9977f7a162074b8"}
