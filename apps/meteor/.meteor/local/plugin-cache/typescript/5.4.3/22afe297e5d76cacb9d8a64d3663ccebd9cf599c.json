{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/sender/RoomServiceSender.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/application/room/sender/RoomServiceSender.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/sender/RoomServiceSender.ts","inputSourceMap":{"version":3,"file":"server/services/federation/application/room/sender/RoomServiceSender.ts","sourceRoot":"","sources":["server/services/federation/application/room/sender/RoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport { isDeletedMessage, isEditedMessage, isMessageFromMatrixFederation, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { FederatedRoom, DirectMessageFederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { MATRIX_POWER_LEVELS } from '../../../infrastructure/matrix/definitions/MatrixPowerLevels';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationAfterLeaveRoomDto,\n\tFederationAfterRemoveUserFromRoomDto,\n\tFederationCreateDMAndInviteUserDto,\n\tFederationRoomSendExternalMessageDto,\n} from '../input/RoomSenderDto';\nimport { getExternalMessageSender } from '../message/sender/message-sender-helper';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async createDirectMessageRoomAndInviteUser(roomCreateDMAndInviteUserInput: FederationCreateDMAndInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, rawInviteeId, internalInviterId, inviteeUsernameOnly, internalRoomId } = roomCreateDMAndInviteUserInput;\n\n\t\tconst internalInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!internalInviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst internalInviteeUser = await this.internalUserAdapter.getFederatedUserByInternalId(normalizedInviteeId);\n\t\tif (!internalInviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, normalizedInviteeId, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviterUser = internalInviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tconst federatedInviteeUser =\n\t\t\tinternalInviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(normalizedInviteeId));\n\t\tif (!federatedInviterUser || !federatedInviteeUser) {\n\t\t\tthrow new Error('Could not find inviter or invitee user');\n\t\t}\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\tfederatedInviterUser.getInternalId(),\n\t\t]);\n\n\t\tif (!internalFederatedRoom) {\n\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\t[federatedInviteeUser.getExternalId()],\n\t\t\t\t{ internalRoomId },\n\t\t\t);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tfederatedInviteeUser,\n\t\t\t]);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t}\n\n\t\tconst federatedRoom =\n\t\t\tinternalFederatedRoom ||\n\t\t\t(await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t\tfederatedInviterUser.getInternalId(),\n\t\t\t]));\n\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(\n\t\t\t\t`Could not find room id for users: ${[federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()].join(' ')}`,\n\t\t\t);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || normalizedInviteeId,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait this.bridge.inviteToRoom(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t\t);\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t}\n\n\tpublic async afterUserLeaveRoom(afterLeaveRoomInput: FederationAfterLeaveRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId } = afterLeaveRoomInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.leaveRoom(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t}\n\n\tpublic async onUserRemovedFromRoom(afterLeaveRoomInput: FederationAfterRemoveUserFromRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId, actionDoneByInternalId } = afterLeaveRoomInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byWhom = await this.internalUserAdapter.getFederatedUserByInternalId(actionDoneByInternalId);\n\t\tif (!byWhom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(byWhom.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.kickUserFromRoom(federatedRoom.getExternalId(), federatedUser.getExternalId(), byWhom.getExternalId());\n\t}\n\n\tpublic async sendExternalMessage(roomSendExternalMessageInput: FederationRoomSendExternalMessageDto): Promise<void> {\n\t\tconst { internalRoomId, internalSenderId, message, isThreadedMessage } = roomSendExternalMessageInput;\n\t\tconst federatedSender = await this.internalUserAdapter.getFederatedUserByInternalId(internalSenderId);\n\t\tif (!federatedSender) {\n\t\t\tthrow new Error(`Could not find user id for ${internalSenderId}`);\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find room id for ${internalRoomId}`);\n\t\t}\n\n\t\tif (message.federation?.eventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link))) {\n\t\t\t// TODO: move this to the domain layer in a proper entity\n\t\t\tconst messageLink = (\n\t\t\t\tmessage.attachments.find(\n\t\t\t\t\t(attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link),\n\t\t\t\t) as MessageQuoteAttachment\n\t\t\t).message_link;\n\t\t\tif (!messageLink) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyToId = messageLink.includes('msg=') && messageLink?.split('msg=').pop();\n\t\t\tif (!messageToReplyToId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageById(messageToReplyToId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait getExternalMessageSender({\n\t\t\t\tmessage,\n\t\t\t\tisThreadedMessage,\n\t\t\t\tbridge: this.bridge,\n\t\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t\t}).sendQuoteMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message, messageToReplyTo);\n\t\t\treturn;\n\t\t}\n\n\t\tawait getExternalMessageSender({\n\t\t\tmessage,\n\t\t\tisThreadedMessage,\n\t\t\tbridge: this.bridge,\n\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t}).sendMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message);\n\t}\n\n\tpublic async afterMessageDeleted(internalMessage: IMessage, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = internalMessage.u?._id && (await this.internalUserAdapter.getFederatedUserByInternalId(internalMessage.u._id));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || isDeletedMessage(internalMessage)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.redactEvent(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t);\n\t}\n\n\tpublic async afterMessageUpdated(internalMessage: IMessage, internalRoomId: string, internalUserId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || !isEditedMessage(internalMessage) || internalMessage.u._id !== internalUserId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.updateMessage(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t\tinternalMessage.msg,\n\t\t);\n\t}\n\n\tpublic async onRoomOwnerAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.ADMIN,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.OWNER]);\n\t\t}\n\t}\n\n\tpublic async onRoomOwnerRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.OWNER], []);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.MODERATOR,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR]);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR], []);\n\t\t}\n\t}\n\n\tpublic async afterRoomNameChanged(internalRoomId: string, internalRoomName: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomName = await this.bridge.getRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(externalRoomName || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomName);\n\t}\n\n\tpublic async afterRoomTopicChanged(internalRoomId: string, internalRoomTopic: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomTopic = await this.bridge.getRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(externalRoomTopic || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomTopic);\n\t}\n\n\tprivate async rollbackRoomRoles(\n\t\tfederatedRoom: FederatedRoom,\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfromUser: FederatedUser,\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): Promise<void> {\n\t\tawait this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\tfederatedRoom,\n\t\t\ttargetFederatedUser,\n\t\t\tfromUser,\n\t\t\trolesToAdd,\n\t\t\trolesToRemove,\n\t\t\tnotifyChannel: false,\n\t\t});\n\t\tthis.internalNotificationAdapter.notifyWithEphemeralMessage(\n\t\t\t'Federation_Matrix_error_applying_room_roles',\n\t\t\tfromUser.getInternalId(),\n\t\t\tfederatedRoom.getInternalId(),\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/sender/RoomServiceSender.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/application/room/sender/RoomServiceSender.ts","inputSourceMap":{"version":3,"file":"server/services/federation/application/room/sender/RoomServiceSender.ts","sourceRoot":"","sources":["server/services/federation/application/room/sender/RoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessage, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport { isDeletedMessage, isEditedMessage, isMessageFromMatrixFederation, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { FederatedRoom, DirectMessageFederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { MATRIX_POWER_LEVELS } from '../../../infrastructure/matrix/definitions/MatrixPowerLevels';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationAfterLeaveRoomDto,\n\tFederationAfterRemoveUserFromRoomDto,\n\tFederationCreateDMAndInviteUserDto,\n\tFederationRoomSendExternalMessageDto,\n} from '../input/RoomSenderDto';\nimport { getExternalMessageSender } from '../message/sender/message-sender-helper';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async createDirectMessageRoomAndInviteUser(roomCreateDMAndInviteUserInput: FederationCreateDMAndInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, rawInviteeId, internalInviterId, inviteeUsernameOnly, internalRoomId } = roomCreateDMAndInviteUserInput;\n\n\t\tconst internalInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!internalInviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst internalInviteeUser = await this.internalUserAdapter.getFederatedUserByInternalId(normalizedInviteeId);\n\t\tif (!internalInviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, normalizedInviteeId, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviterUser = internalInviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tconst federatedInviteeUser =\n\t\t\tinternalInviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(normalizedInviteeId));\n\t\tif (!federatedInviterUser || !federatedInviteeUser) {\n\t\t\tthrow new Error('Could not find inviter or invitee user');\n\t\t}\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\tfederatedInviterUser.getInternalId(),\n\t\t]);\n\n\t\tif (!internalFederatedRoom) {\n\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\t[federatedInviteeUser.getExternalId()],\n\t\t\t\t{ internalRoomId },\n\t\t\t);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tfederatedInviteeUser,\n\t\t\t]);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t}\n\n\t\tconst federatedRoom =\n\t\t\tinternalFederatedRoom ||\n\t\t\t(await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t\tfederatedInviterUser.getInternalId(),\n\t\t\t]));\n\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(\n\t\t\t\t`Could not find room id for users: ${[federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()].join(' ')}`,\n\t\t\t);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || normalizedInviteeId,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait this.bridge.inviteToRoom(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t\t);\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t}\n\n\tpublic async afterUserLeaveRoom(afterLeaveRoomInput: FederationAfterLeaveRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId } = afterLeaveRoomInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.leaveRoom(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t}\n\n\tpublic async onUserRemovedFromRoom(afterLeaveRoomInput: FederationAfterRemoveUserFromRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId, actionDoneByInternalId } = afterLeaveRoomInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byWhom = await this.internalUserAdapter.getFederatedUserByInternalId(actionDoneByInternalId);\n\t\tif (!byWhom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(byWhom.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.kickUserFromRoom(federatedRoom.getExternalId(), federatedUser.getExternalId(), byWhom.getExternalId());\n\t}\n\n\tpublic async sendExternalMessage(roomSendExternalMessageInput: FederationRoomSendExternalMessageDto): Promise<void> {\n\t\tconst { internalRoomId, internalSenderId, message, isThreadedMessage } = roomSendExternalMessageInput;\n\t\tconst federatedSender = await this.internalUserAdapter.getFederatedUserByInternalId(internalSenderId);\n\t\tif (!federatedSender) {\n\t\t\tthrow new Error(`Could not find user id for ${internalSenderId}`);\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find room id for ${internalRoomId}`);\n\t\t}\n\n\t\tif (message.federation?.eventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link))) {\n\t\t\t// TODO: move this to the domain layer in a proper entity\n\t\t\tconst messageLink = (\n\t\t\t\tmessage.attachments.find(\n\t\t\t\t\t(attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link),\n\t\t\t\t) as MessageQuoteAttachment\n\t\t\t).message_link;\n\t\t\tif (!messageLink) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyToId = messageLink.includes('msg=') && messageLink?.split('msg=').pop();\n\t\t\tif (!messageToReplyToId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageById(messageToReplyToId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait getExternalMessageSender({\n\t\t\t\tmessage,\n\t\t\t\tisThreadedMessage,\n\t\t\t\tbridge: this.bridge,\n\t\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t\t}).sendQuoteMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message, messageToReplyTo);\n\t\t\treturn;\n\t\t}\n\n\t\tawait getExternalMessageSender({\n\t\t\tmessage,\n\t\t\tisThreadedMessage,\n\t\t\tbridge: this.bridge,\n\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t}).sendMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message);\n\t}\n\n\tpublic async afterMessageDeleted(internalMessage: IMessage, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = internalMessage.u?._id && (await this.internalUserAdapter.getFederatedUserByInternalId(internalMessage.u._id));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || isDeletedMessage(internalMessage)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.redactEvent(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t);\n\t}\n\n\tpublic async afterMessageUpdated(internalMessage: IMessage, internalRoomId: string, internalUserId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || !isEditedMessage(internalMessage) || internalMessage.u._id !== internalUserId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.updateMessage(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t\tinternalMessage.msg,\n\t\t);\n\t}\n\n\tpublic async onRoomOwnerAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.ADMIN,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.OWNER]);\n\t\t}\n\t}\n\n\tpublic async onRoomOwnerRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.OWNER], []);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.MODERATOR,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR]);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR], []);\n\t\t}\n\t}\n\n\tpublic async afterRoomNameChanged(internalRoomId: string, internalRoomName: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomName = await this.bridge.getRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(externalRoomName || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomName);\n\t}\n\n\tpublic async afterRoomTopicChanged(internalRoomId: string, internalRoomTopic: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomTopic = await this.bridge.getRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(externalRoomTopic || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomTopic);\n\t}\n\n\tprivate async rollbackRoomRoles(\n\t\tfederatedRoom: FederatedRoom,\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfromUser: FederatedUser,\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): Promise<void> {\n\t\tawait this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\tfederatedRoom,\n\t\t\ttargetFederatedUser,\n\t\t\tfromUser,\n\t\t\trolesToAdd,\n\t\t\trolesToRemove,\n\t\t\tnotifyChannel: false,\n\t\t});\n\t\tthis.internalNotificationAdapter.notifyWithEphemeralMessage(\n\t\t\t'Federation_Matrix_error_applying_room_roles',\n\t\t\tfromUser.getInternalId(),\n\t\t\tfederatedRoom.getInternalId(),\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      FederationRoomServiceSender: () => FederationRoomServiceSender\n    });\n    let isDeletedMessage, isEditedMessage, isMessageFromMatrixFederation, isQuoteAttachment;\n    module.link(\"@rocket.chat/core-typings\", {\n      isDeletedMessage(v) {\n        isDeletedMessage = v;\n      },\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      },\n      isMessageFromMatrixFederation(v) {\n        isMessageFromMatrixFederation = v;\n      },\n      isQuoteAttachment(v) {\n        isQuoteAttachment = v;\n      }\n    }, 0);\n    let FederatedRoom, DirectMessageFederatedRoom;\n    module.link(\"../../../domain/FederatedRoom\", {\n      FederatedRoom(v) {\n        FederatedRoom = v;\n      },\n      DirectMessageFederatedRoom(v) {\n        DirectMessageFederatedRoom = v;\n      }\n    }, 1);\n    let FederatedUser;\n    module.link(\"../../../domain/FederatedUser\", {\n      FederatedUser(v) {\n        FederatedUser = v;\n      }\n    }, 2);\n    let MATRIX_POWER_LEVELS;\n    module.link(\"../../../infrastructure/matrix/definitions/MatrixPowerLevels\", {\n      MATRIX_POWER_LEVELS(v) {\n        MATRIX_POWER_LEVELS = v;\n      }\n    }, 3);\n    let ROCKET_CHAT_FEDERATION_ROLES;\n    module.link(\"../../../infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles\", {\n      ROCKET_CHAT_FEDERATION_ROLES(v) {\n        ROCKET_CHAT_FEDERATION_ROLES = v;\n      }\n    }, 4);\n    let AbstractFederationApplicationService;\n    module.link(\"../../AbstractFederationApplicationService\", {\n      AbstractFederationApplicationService(v) {\n        AbstractFederationApplicationService = v;\n      }\n    }, 5);\n    let getExternalMessageSender;\n    module.link(\"../message/sender/message-sender-helper\", {\n      getExternalMessageSender(v) {\n        getExternalMessageSender = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class FederationRoomServiceSender extends AbstractFederationApplicationService {\n      constructor(internalRoomAdapter, internalUserAdapter, internalFileAdapter, internalMessageAdapter, internalSettingsAdapter, internalNotificationAdapter, bridge) {\n        super(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n        this.internalRoomAdapter = void 0;\n        this.internalUserAdapter = void 0;\n        this.internalFileAdapter = void 0;\n        this.internalMessageAdapter = void 0;\n        this.internalSettingsAdapter = void 0;\n        this.internalNotificationAdapter = void 0;\n        this.bridge = void 0;\n        this.internalRoomAdapter = internalRoomAdapter;\n        this.internalUserAdapter = internalUserAdapter;\n        this.internalFileAdapter = internalFileAdapter;\n        this.internalMessageAdapter = internalMessageAdapter;\n        this.internalSettingsAdapter = internalSettingsAdapter;\n        this.internalNotificationAdapter = internalNotificationAdapter;\n        this.bridge = bridge;\n      }\n      async createDirectMessageRoomAndInviteUser(roomCreateDMAndInviteUserInput) {\n        const {\n          normalizedInviteeId,\n          rawInviteeId,\n          internalInviterId,\n          inviteeUsernameOnly,\n          internalRoomId\n        } = roomCreateDMAndInviteUserInput;\n        const internalInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n        if (!internalInviterUser) {\n          await this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n        }\n        const internalInviteeUser = await this.internalUserAdapter.getFederatedUserByInternalId(normalizedInviteeId);\n        if (!internalInviteeUser) {\n          const existsOnlyOnProxyServer = false;\n          await this.createFederatedUserInternallyOnly(rawInviteeId, normalizedInviteeId, existsOnlyOnProxyServer);\n        }\n        const federatedInviterUser = internalInviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n        const federatedInviteeUser = internalInviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(normalizedInviteeId));\n        if (!federatedInviterUser || !federatedInviteeUser) {\n          throw new Error('Could not find inviter or invitee user');\n        }\n        const isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(rawInviteeId), this.internalHomeServerDomain);\n        const internalFederatedRoom = await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()]);\n        if (!internalFederatedRoom) {\n          const externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), [federatedInviteeUser.getExternalId()], {\n            internalRoomId\n          });\n          const newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [federatedInviterUser, federatedInviteeUser]);\n          const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n          await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n        }\n        const federatedRoom = internalFederatedRoom || (await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()]));\n        if (!federatedRoom) {\n          throw new Error(\"Could not find room id for users: \".concat([federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()].join(' ')));\n        }\n        if (isInviteeFromTheSameHomeServer) {\n          const profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n          if (!profile) {\n            await this.bridge.createUser(inviteeUsernameOnly, federatedInviteeUser.getName() || normalizedInviteeId, this.internalHomeServerDomain);\n          }\n          await this.bridge.inviteToRoom(federatedRoom.getExternalId(), federatedInviterUser.getExternalId(), federatedInviteeUser.getExternalId());\n          await this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n        }\n        await this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n      }\n      async afterUserLeaveRoom(afterLeaveRoomInput) {\n        const {\n          internalRoomId,\n          internalUserId\n        } = afterLeaveRoomInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalHomeServerDomain);\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        await this.bridge.leaveRoom(federatedRoom.getExternalId(), federatedUser.getExternalId());\n      }\n      async onUserRemovedFromRoom(afterLeaveRoomInput) {\n        const {\n          internalRoomId,\n          internalUserId,\n          actionDoneByInternalId\n        } = afterLeaveRoomInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const byWhom = await this.internalUserAdapter.getFederatedUserByInternalId(actionDoneByInternalId);\n        if (!byWhom) {\n          return;\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(byWhom.getExternalId()), this.internalHomeServerDomain);\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        await this.bridge.kickUserFromRoom(federatedRoom.getExternalId(), federatedUser.getExternalId(), byWhom.getExternalId());\n      }\n      async sendExternalMessage(roomSendExternalMessageInput) {\n        var _message$federation, _message$attachments;\n        const {\n          internalRoomId,\n          internalSenderId,\n          message,\n          isThreadedMessage\n        } = roomSendExternalMessageInput;\n        const federatedSender = await this.internalUserAdapter.getFederatedUserByInternalId(internalSenderId);\n        if (!federatedSender) {\n          throw new Error(\"Could not find user id for \".concat(internalSenderId));\n        }\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          throw new Error(\"Could not find room id for \".concat(internalRoomId));\n        }\n        if ((_message$federation = message.federation) !== null && _message$federation !== void 0 && _message$federation.eventId) {\n          return;\n        }\n        if ((_message$attachments = message.attachments) !== null && _message$attachments !== void 0 && _message$attachments.some(attachment => isQuoteAttachment(attachment) && Boolean(attachment.message_link))) {\n          // TODO: move this to the domain layer in a proper entity\n          const messageLink = message.attachments.find(attachment => isQuoteAttachment(attachment) && Boolean(attachment.message_link)).message_link;\n          if (!messageLink) {\n            return;\n          }\n          const messageToReplyToId = messageLink.includes('msg=') && (messageLink === null || messageLink === void 0 ? void 0 : messageLink.split('msg=').pop());\n          if (!messageToReplyToId) {\n            return;\n          }\n          const messageToReplyTo = await this.internalMessageAdapter.getMessageById(messageToReplyToId);\n          if (!messageToReplyTo) {\n            return;\n          }\n          await getExternalMessageSender({\n            message,\n            isThreadedMessage,\n            bridge: this.bridge,\n            internalFileAdapter: this.internalFileAdapter,\n            internalMessageAdapter: this.internalMessageAdapter,\n            internalUserAdapter: this.internalUserAdapter\n          }).sendQuoteMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message, messageToReplyTo);\n          return;\n        }\n        await getExternalMessageSender({\n          message,\n          isThreadedMessage,\n          bridge: this.bridge,\n          internalFileAdapter: this.internalFileAdapter,\n          internalMessageAdapter: this.internalMessageAdapter,\n          internalUserAdapter: this.internalUserAdapter\n        }).sendMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message);\n      }\n      async afterMessageDeleted(internalMessage, internalRoomId) {\n        var _internalMessage$u, _internalMessage$fede;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = ((_internalMessage$u = internalMessage.u) === null || _internalMessage$u === void 0 ? void 0 : _internalMessage$u._id) && (await this.internalUserAdapter.getFederatedUserByInternalId(internalMessage.u._id));\n        if (!federatedUser) {\n          return;\n        }\n        if (!isMessageFromMatrixFederation(internalMessage) || isDeletedMessage(internalMessage)) {\n          return;\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        await this.bridge.redactEvent(federatedRoom.getExternalId(), federatedUser.getExternalId(), (_internalMessage$fede = internalMessage.federation) === null || _internalMessage$fede === void 0 ? void 0 : _internalMessage$fede.eventId);\n      }\n      async afterMessageUpdated(internalMessage, internalRoomId, internalUserId) {\n        var _internalMessage$fede2;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        if (!isMessageFromMatrixFederation(internalMessage) || !isEditedMessage(internalMessage) || internalMessage.u._id !== internalUserId) {\n          return;\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        await this.bridge.updateMessage(federatedRoom.getExternalId(), federatedUser.getExternalId(), (_internalMessage$fede2 = internalMessage.federation) === null || _internalMessage$fede2 === void 0 ? void 0 : _internalMessage$fede2.eventId, internalMessage.msg);\n      }\n      async onRoomOwnerAdded(internalUserId, internalTargetUserId, internalRoomId) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n        if (!federatedTargetUser) {\n          return;\n        }\n        const userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n        const myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n        if (!(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER)) && !myself) {\n          throw new Error('Federation_Matrix_not_allowed_to_change_owner');\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        try {\n          await this.bridge.setRoomPowerLevels(federatedRoom.getExternalId(), federatedUser.getExternalId(), federatedTargetUser.getExternalId(), MATRIX_POWER_LEVELS.ADMIN);\n        } catch (e) {\n          await this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.OWNER]);\n        }\n      }\n      async onRoomOwnerRemoved(internalUserId, internalTargetUserId, internalRoomId) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n        if (!federatedTargetUser) {\n          return;\n        }\n        const userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n        const myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n        if (!(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER)) && !myself) {\n          throw new Error('Federation_Matrix_not_allowed_to_change_owner');\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        try {\n          await this.bridge.setRoomPowerLevels(federatedRoom.getExternalId(), federatedUser.getExternalId(), federatedTargetUser.getExternalId(), MATRIX_POWER_LEVELS.USER);\n        } catch (e) {\n          await this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.OWNER], []);\n        }\n      }\n      async onRoomModeratorAdded(internalUserId, internalTargetUserId, internalRoomId) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n        if (!federatedTargetUser) {\n          return;\n        }\n        const userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n        const myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n        if (!(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER)) && !(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR)) && !myself) {\n          throw new Error('Federation_Matrix_not_allowed_to_change_moderator');\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        try {\n          await this.bridge.setRoomPowerLevels(federatedRoom.getExternalId(), federatedUser.getExternalId(), federatedTargetUser.getExternalId(), MATRIX_POWER_LEVELS.MODERATOR);\n        } catch (e) {\n          await this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR]);\n        }\n      }\n      async onRoomModeratorRemoved(internalUserId, internalTargetUserId, internalRoomId) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n        if (!federatedUser) {\n          return;\n        }\n        const federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n        if (!federatedTargetUser) {\n          return;\n        }\n        const userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n        const myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n        if (!(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER)) && !(userRoomRoles !== null && userRoomRoles !== void 0 && userRoomRoles.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR)) && !myself) {\n          throw new Error('Federation_Matrix_not_allowed_to_change_moderator');\n        }\n        const isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedUser.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isUserFromTheSameHomeServer) {\n          return;\n        }\n        try {\n          await this.bridge.setRoomPowerLevels(federatedRoom.getExternalId(), federatedUser.getExternalId(), federatedTargetUser.getExternalId(), MATRIX_POWER_LEVELS.USER);\n        } catch (e) {\n          await this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR], []);\n        }\n      }\n      async afterRoomNameChanged(internalRoomId, internalRoomName) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = federatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId()));\n        if (!federatedUser) {\n          return;\n        }\n        const isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isRoomFromTheSameHomeServer) {\n          return;\n        }\n        const externalRoomName = await this.bridge.getRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId());\n        if (!federatedRoom.shouldUpdateDisplayRoomName(externalRoomName || '')) {\n          return;\n        }\n        await this.bridge.setRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomName);\n      }\n      async afterRoomTopicChanged(internalRoomId, internalRoomTopic) {\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = federatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId()));\n        if (!federatedUser) {\n          return;\n        }\n        const isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()), this.internalSettingsAdapter.getHomeServerDomain());\n        if (!isRoomFromTheSameHomeServer) {\n          return;\n        }\n        const externalRoomTopic = await this.bridge.getRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId());\n        if (!federatedRoom.shouldUpdateRoomTopic(externalRoomTopic || '')) {\n          return;\n        }\n        await this.bridge.setRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomTopic);\n      }\n      async rollbackRoomRoles(federatedRoom, targetFederatedUser, fromUser, rolesToAdd, rolesToRemove) {\n        await this.internalRoomAdapter.applyRoomRolesToUser({\n          federatedRoom,\n          targetFederatedUser,\n          fromUser,\n          rolesToAdd,\n          rolesToRemove,\n          notifyChannel: false\n        });\n        this.internalNotificationAdapter.notifyWithEphemeralMessage('Federation_Matrix_error_applying_room_roles', fromUser.getInternalId(), federatedRoom.getInternalId());\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","FederationRoomServiceSender","isDeletedMessage","isEditedMessage","isMessageFromMatrixFederation","isQuoteAttachment","link","v","FederatedRoom","DirectMessageFederatedRoom","FederatedUser","MATRIX_POWER_LEVELS","ROCKET_CHAT_FEDERATION_ROLES","AbstractFederationApplicationService","getExternalMessageSender","__reifyWaitForDeps__","constructor","internalRoomAdapter","internalUserAdapter","internalFileAdapter","internalMessageAdapter","internalSettingsAdapter","internalNotificationAdapter","bridge","createDirectMessageRoomAndInviteUser","roomCreateDMAndInviteUserInput","normalizedInviteeId","rawInviteeId","internalInviterId","inviteeUsernameOnly","internalRoomId","internalInviterUser","getFederatedUserByInternalId","createFederatedUserIncludingHomeserverUsingLocalInformation","internalInviteeUser","existsOnlyOnProxyServer","createFederatedUserInternallyOnly","federatedInviterUser","federatedInviteeUser","getFederatedUserByInternalUsername","Error","isInviteeFromTheSameHomeServer","isOriginalFromTheProxyServer","extractHomeserverOrigin","internalHomeServerDomain","internalFederatedRoom","getDirectMessageFederatedRoomByUserIds","getInternalId","externalRoomId","createDirectMessageRoom","getExternalId","newFederatedRoom","createInstance","createdInternalRoomId","createFederatedRoomForDirectMessage","subscribeToUserTypingEventsOnFederatedRoomId","broadcastUserTypingOnRoom","bind","federatedRoom","concat","join","profile","getUserProfileInformation","createUser","getName","inviteToRoom","joinRoom","addUserToRoom","afterUserLeaveRoom","afterLeaveRoomInput","internalUserId","getFederatedRoomByInternalId","federatedUser","isUserFromTheSameHomeServer","leaveRoom","onUserRemovedFromRoom","actionDoneByInternalId","byWhom","kickUserFromRoom","sendExternalMessage","roomSendExternalMessageInput","_message$federation","_message$attachments","internalSenderId","message","isThreadedMessage","federatedSender","federation","eventId","attachments","some","attachment","Boolean","message_link","messageLink","find","messageToReplyToId","includes","split","pop","messageToReplyTo","getMessageById","sendQuoteMessage","sendMessage","afterMessageDeleted","internalMessage","_internalMessage$u","_internalMessage$fede","u","_id","getHomeServerDomain","redactEvent","afterMessageUpdated","_internalMessage$fede2","updateMessage","msg","onRoomOwnerAdded","internalTargetUserId","federatedTargetUser","userRoomRoles","getInternalRoomRolesByUserId","myself","OWNER","setRoomPowerLevels","ADMIN","e","rollbackRoomRoles","onRoomOwnerRemoved","USER","onRoomModeratorAdded","MODERATOR","onRoomModeratorRemoved","afterRoomNameChanged","internalRoomName","getCreatorId","isRoomFromTheSameHomeServer","externalRoomName","getRoomName","shouldUpdateDisplayRoomName","setRoomName","afterRoomTopicChanged","internalRoomTopic","externalRoomTopic","getRoomTopic","shouldUpdateRoomTopic","setRoomTopic","targetFederatedUser","fromUser","rolesToAdd","rolesToRemove","applyRoomRolesToUser","notifyChannel","notifyWithEphemeralMessage","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/application/room/sender/RoomServiceSender.ts"],"sourcesContent":["import type { IMessage, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport { isDeletedMessage, isEditedMessage, isMessageFromMatrixFederation, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { FederatedRoom, DirectMessageFederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { MATRIX_POWER_LEVELS } from '../../../infrastructure/matrix/definitions/MatrixPowerLevels';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { ROCKET_CHAT_FEDERATION_ROLES } from '../../../infrastructure/rocket-chat/definitions/FederatedRoomInternalRoles';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationAfterLeaveRoomDto,\n\tFederationAfterRemoveUserFromRoomDto,\n\tFederationCreateDMAndInviteUserDto,\n\tFederationRoomSendExternalMessageDto,\n} from '../input/RoomSenderDto';\nimport { getExternalMessageSender } from '../message/sender/message-sender-helper';\n\nexport class FederationRoomServiceSender extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async createDirectMessageRoomAndInviteUser(roomCreateDMAndInviteUserInput: FederationCreateDMAndInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, rawInviteeId, internalInviterId, inviteeUsernameOnly, internalRoomId } = roomCreateDMAndInviteUserInput;\n\n\t\tconst internalInviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!internalInviterUser) {\n\t\t\tawait this.createFederatedUserIncludingHomeserverUsingLocalInformation(internalInviterId);\n\t\t}\n\n\t\tconst internalInviteeUser = await this.internalUserAdapter.getFederatedUserByInternalId(normalizedInviteeId);\n\t\tif (!internalInviteeUser) {\n\t\t\tconst existsOnlyOnProxyServer = false;\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, normalizedInviteeId, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tconst federatedInviterUser = internalInviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tconst federatedInviteeUser =\n\t\t\tinternalInviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(normalizedInviteeId));\n\t\tif (!federatedInviterUser || !federatedInviteeUser) {\n\t\t\tthrow new Error('Could not find inviter or invitee user');\n\t\t}\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\tfederatedInviterUser.getInternalId(),\n\t\t]);\n\n\t\tif (!internalFederatedRoom) {\n\t\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\t[federatedInviteeUser.getExternalId()],\n\t\t\t\t{ internalRoomId },\n\t\t\t);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tfederatedInviteeUser,\n\t\t\t]);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t}\n\n\t\tconst federatedRoom =\n\t\t\tinternalFederatedRoom ||\n\t\t\t(await this.internalRoomAdapter.getDirectMessageFederatedRoomByUserIds([\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t\tfederatedInviterUser.getInternalId(),\n\t\t\t]));\n\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(\n\t\t\t\t`Could not find room id for users: ${[federatedInviteeUser.getInternalId(), federatedInviterUser.getInternalId()].join(' ')}`,\n\t\t\t);\n\t\t}\n\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\t\tif (!profile) {\n\t\t\t\tawait this.bridge.createUser(\n\t\t\t\t\tinviteeUsernameOnly,\n\t\t\t\t\tfederatedInviteeUser.getName() || normalizedInviteeId,\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t);\n\t\t\t}\n\t\t\tawait this.bridge.inviteToRoom(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedInviterUser.getExternalId(),\n\t\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t\t);\n\t\t\tawait this.bridge.joinRoom(federatedRoom.getExternalId(), federatedInviteeUser.getExternalId());\n\t\t}\n\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t}\n\n\tpublic async afterUserLeaveRoom(afterLeaveRoomInput: FederationAfterLeaveRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId } = afterLeaveRoomInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.leaveRoom(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t}\n\n\tpublic async onUserRemovedFromRoom(afterLeaveRoomInput: FederationAfterRemoveUserFromRoomDto): Promise<void> {\n\t\tconst { internalRoomId, internalUserId, actionDoneByInternalId } = afterLeaveRoomInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byWhom = await this.internalUserAdapter.getFederatedUserByInternalId(actionDoneByInternalId);\n\t\tif (!byWhom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(byWhom.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.kickUserFromRoom(federatedRoom.getExternalId(), federatedUser.getExternalId(), byWhom.getExternalId());\n\t}\n\n\tpublic async sendExternalMessage(roomSendExternalMessageInput: FederationRoomSendExternalMessageDto): Promise<void> {\n\t\tconst { internalRoomId, internalSenderId, message, isThreadedMessage } = roomSendExternalMessageInput;\n\t\tconst federatedSender = await this.internalUserAdapter.getFederatedUserByInternalId(internalSenderId);\n\t\tif (!federatedSender) {\n\t\t\tthrow new Error(`Could not find user id for ${internalSenderId}`);\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\tthrow new Error(`Could not find room id for ${internalRoomId}`);\n\t\t}\n\n\t\tif (message.federation?.eventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link))) {\n\t\t\t// TODO: move this to the domain layer in a proper entity\n\t\t\tconst messageLink = (\n\t\t\t\tmessage.attachments.find(\n\t\t\t\t\t(attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link),\n\t\t\t\t) as MessageQuoteAttachment\n\t\t\t).message_link;\n\t\t\tif (!messageLink) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyToId = messageLink.includes('msg=') && messageLink?.split('msg=').pop();\n\t\t\tif (!messageToReplyToId) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageById(messageToReplyToId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait getExternalMessageSender({\n\t\t\t\tmessage,\n\t\t\t\tisThreadedMessage,\n\t\t\t\tbridge: this.bridge,\n\t\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t\t}).sendQuoteMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message, messageToReplyTo);\n\t\t\treturn;\n\t\t}\n\n\t\tawait getExternalMessageSender({\n\t\t\tmessage,\n\t\t\tisThreadedMessage,\n\t\t\tbridge: this.bridge,\n\t\t\tinternalFileAdapter: this.internalFileAdapter,\n\t\t\tinternalMessageAdapter: this.internalMessageAdapter,\n\t\t\tinternalUserAdapter: this.internalUserAdapter,\n\t\t}).sendMessage(federatedRoom.getExternalId(), federatedSender.getExternalId(), message);\n\t}\n\n\tpublic async afterMessageDeleted(internalMessage: IMessage, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = internalMessage.u?._id && (await this.internalUserAdapter.getFederatedUserByInternalId(internalMessage.u._id));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || isDeletedMessage(internalMessage)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.redactEvent(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t);\n\t}\n\n\tpublic async afterMessageUpdated(internalMessage: IMessage, internalRoomId: string, internalUserId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tif (!isMessageFromMatrixFederation(internalMessage) || !isEditedMessage(internalMessage) || internalMessage.u._id !== internalUserId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.updateMessage(\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tinternalMessage.federation?.eventId as string,\n\t\t\tinternalMessage.msg,\n\t\t);\n\t}\n\n\tpublic async onRoomOwnerAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.ADMIN,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.OWNER]);\n\t\t}\n\t}\n\n\tpublic async onRoomOwnerRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) && !myself) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_owner');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.OWNER], []);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorAdded(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.MODERATOR,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [], [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR]);\n\t\t}\n\t}\n\n\tpublic async onRoomModeratorRemoved(internalUserId: string, internalTargetUserId: string, internalRoomId: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalUserId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedTargetUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalTargetUserId);\n\t\tif (!federatedTargetUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst userRoomRoles = await this.internalRoomAdapter.getInternalRoomRolesByUserId(internalRoomId, internalUserId);\n\t\tconst myself = federatedUser.getInternalId() === federatedTargetUser.getInternalId();\n\t\tif (\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.OWNER) &&\n\t\t\t!userRoomRoles?.includes(ROCKET_CHAT_FEDERATION_ROLES.MODERATOR) &&\n\t\t\t!myself\n\t\t) {\n\t\t\tthrow new Error('Federation_Matrix_not_allowed_to_change_moderator');\n\t\t}\n\n\t\tconst isUserFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedUser.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isUserFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.bridge.setRoomPowerLevels(\n\t\t\t\tfederatedRoom.getExternalId(),\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedTargetUser.getExternalId(),\n\t\t\t\tMATRIX_POWER_LEVELS.USER,\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tawait this.rollbackRoomRoles(federatedRoom, federatedTargetUser, federatedUser, [ROCKET_CHAT_FEDERATION_ROLES.MODERATOR], []);\n\t\t}\n\t}\n\n\tpublic async afterRoomNameChanged(internalRoomId: string, internalRoomName: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomName = await this.bridge.getRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(externalRoomName || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomName(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomName);\n\t}\n\n\tpublic async afterRoomTopicChanged(internalRoomId: string, internalRoomTopic: string): Promise<void> {\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser =\n\t\t\tfederatedRoom.getCreatorId() && (await this.internalUserAdapter.getFederatedUserByInternalId(federatedRoom.getCreatorId() as string));\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isRoomFromTheSameHomeServer = FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedRoom.getExternalId()),\n\t\t\tthis.internalSettingsAdapter.getHomeServerDomain(),\n\t\t);\n\t\tif (!isRoomFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomTopic = await this.bridge.getRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId());\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(externalRoomTopic || '')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.setRoomTopic(federatedRoom.getExternalId(), federatedUser.getExternalId(), internalRoomTopic);\n\t}\n\n\tprivate async rollbackRoomRoles(\n\t\tfederatedRoom: FederatedRoom,\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfromUser: FederatedUser,\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): Promise<void> {\n\t\tawait this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\tfederatedRoom,\n\t\t\ttargetFederatedUser,\n\t\t\tfromUser,\n\t\t\trolesToAdd,\n\t\t\trolesToRemove,\n\t\t\tnotifyChannel: false,\n\t\t});\n\t\tthis.internalNotificationAdapter.notifyWithEphemeralMessage(\n\t\t\t'Federation_Matrix_error_applying_room_roles',\n\t\t\tfromUser.getInternalId(),\n\t\t\tfederatedRoom.getInternalId(),\n\t\t);\n\t}\n}\n"],"mappings":";;;IACAA,MAAA,CAAOC,MAAE;MAAAC,2BAAiC,EAAAA,CAAA,KAAEA;IAA6B,CAAE;IAAA,IAAAC,gBAAmB,EAAAC,eAAM,EAAAC,6BAA4B,EAAAC,iBAAA;IAAAN,MAAA,CAAAO,IAAA;MAAAJ,iBAAAK,CAAA;QAAAL,gBAAA,GAAAK,CAAA;MAAA;MAAAJ,gBAAAI,CAAA;QAAAJ,eAAA,GAAAI,CAAA;MAAA;MAAAH,8BAAAG,CAAA;QAAAH,6BAAA,GAAAG,CAAA;MAAA;MAAAF,kBAAAE,CAAA;QAAAF,iBAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,aAAA,EAAAC,0BAAA;IAAAV,MAAA,CAAAO,IAAA;MAAAE,cAAAD,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;MAAAE,2BAAAF,CAAA;QAAAE,0BAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,aAAA;IAAAX,MAAA,CAAAO,IAAA;MAAAI,cAAAH,CAAA;QAAAG,aAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,mBAAA;IAAAZ,MAAA,CAAAO,IAAA;MAAAK,oBAAAJ,CAAA;QAAAI,mBAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,4BAAA;IAAAb,MAAA,CAAAO,IAAA;MAAAM,6BAAAL,CAAA;QAAAK,4BAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oCAAA;IAAAd,MAAA,CAAAO,IAAA;MAAAO,qCAAAN,CAAA;QAAAM,oCAAA,GAAAN,CAAA;MAAA;IAAA;IAAA,IAAAO,wBAAA;IAAAf,MAAA,CAAAO,IAAA;MAAAQ,yBAAAP,CAAA;QAAAO,wBAAA,GAAAP,CAAA;MAAA;IAAA;IAAA,IAAAQ,oBAAA,WAAAA,oBAAA;IAsB1H,MAAOd,2BAA4B,SAAQY,oCAAoC;MACpFG,YACWC,mBAA0C,EAC1CC,mBAA0C,EAC1CC,mBAA0C,EAC1CC,sBAAgD,EAChDC,uBAAkD,EAClDC,2BAA0D,EAC1DC,MAAyB;QAEnC,KAAK,CAACA,MAAM,EAAEL,mBAAmB,EAAEC,mBAAmB,EAAEE,uBAAuB,CAAC;QAAC,KARvEJ,mBAAA;QAAA,KACAC,mBAAA;QAAA,KACAC,mBAAA;QAAA,KACAC,sBAAA;QAAA,KACAC,uBAAA;QAAA,KACAC,2BAAA;QAAA,KACAC,MAAA;QANA,KAAAN,mBAAmB,GAAnBA,mBAAmB;QACnB,KAAAC,mBAAmB,GAAnBA,mBAAmB;QACnB,KAAAC,mBAAmB,GAAnBA,mBAAmB;QACnB,KAAAC,sBAAsB,GAAtBA,sBAAsB;QACtB,KAAAC,uBAAuB,GAAvBA,uBAAuB;QACvB,KAAAC,2BAA2B,GAA3BA,2BAA2B;QAC3B,KAAAC,MAAM,GAANA,MAAM;MAGjB;MAEO,MAAMC,oCAAoCA,CAACC,8BAAkE;QACnH,MAAM;UAAEC,mBAAmB;UAAEC,YAAY;UAAEC,iBAAiB;UAAEC,mBAAmB;UAAEC;QAAc,CAAE,GAAGL,8BAA8B;QAEpI,MAAMM,mBAAmB,GAAG,MAAM,IAAI,CAACb,mBAAmB,CAACc,4BAA4B,CAACJ,iBAAiB,CAAC;QAC1G,IAAI,CAACG,mBAAmB,EAAE;UACzB,MAAM,IAAI,CAACE,2DAA2D,CAACL,iBAAiB,CAAC;QAC1F;QAEA,MAAMM,mBAAmB,GAAG,MAAM,IAAI,CAAChB,mBAAmB,CAACc,4BAA4B,CAACN,mBAAmB,CAAC;QAC5G,IAAI,CAACQ,mBAAmB,EAAE;UACzB,MAAMC,uBAAuB,GAAG,KAAK;UACrC,MAAM,IAAI,CAACC,iCAAiC,CAACT,YAAY,EAAED,mBAAmB,EAAES,uBAAuB,CAAC;QACzG;QAEA,MAAME,oBAAoB,GAAGN,mBAAmB,KAAK,MAAM,IAAI,CAACb,mBAAmB,CAACc,4BAA4B,CAACJ,iBAAiB,CAAC,CAAC;QACpI,MAAMU,oBAAoB,GACzBJ,mBAAmB,KAAK,MAAM,IAAI,CAAChB,mBAAmB,CAACqB,kCAAkC,CAACb,mBAAmB,CAAC,CAAC;QAChH,IAAI,CAACW,oBAAoB,IAAI,CAACC,oBAAoB,EAAE;UACnD,MAAM,IAAIE,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QAEA,MAAMC,8BAA8B,GAAG/B,aAAa,CAACgC,4BAA4B,CAChF,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAChB,YAAY,CAAC,EACjD,IAAI,CAACiB,wBAAwB,CAC7B;QAED,MAAMC,qBAAqB,GAAG,MAAM,IAAI,CAAC5B,mBAAmB,CAAC6B,sCAAsC,CAAC,CACnGR,oBAAoB,CAACS,aAAa,EAAE,EACpCV,oBAAoB,CAACU,aAAa,EAAE,CACpC,CAAC;QAEF,IAAI,CAACF,qBAAqB,EAAE;UAC3B,MAAMG,cAAc,GAAG,MAAM,IAAI,CAACzB,MAAM,CAAC0B,uBAAuB,CAC/DZ,oBAAoB,CAACa,aAAa,EAAE,EACpC,CAACZ,oBAAoB,CAACY,aAAa,EAAE,CAAC,EACtC;YAAEpB;UAAc,CAAE,CAClB;UACD,MAAMqB,gBAAgB,GAAG1C,0BAA0B,CAAC2C,cAAc,CAACJ,cAAc,EAAEX,oBAAoB,EAAE,CACxGA,oBAAoB,EACpBC,oBAAoB,CACpB,CAAC;UACF,MAAMe,qBAAqB,GAAG,MAAM,IAAI,CAACpC,mBAAmB,CAACqC,mCAAmC,CAACH,gBAAgB,CAAC;UAClH,MAAM,IAAI,CAAC7B,2BAA2B,CAACiC,4CAA4C,CAClFF,qBAAqB,EACrB,IAAI,CAAC/B,2BAA2B,CAACkC,yBAAyB,CAACC,IAAI,CAAC,IAAI,CAACnC,2BAA2B,CAAC,CACjG;QACF;QAEA,MAAMoC,aAAa,GAClBb,qBAAqB,KACpB,MAAM,IAAI,CAAC5B,mBAAmB,CAAC6B,sCAAsC,CAAC,CACtER,oBAAoB,CAACS,aAAa,EAAE,EACpCV,oBAAoB,CAACU,aAAa,EAAE,CACpC,CAAC,CAAC;QAEJ,IAAI,CAACW,aAAa,EAAE;UACnB,MAAM,IAAIlB,KAAK,sCAAAmB,MAAA,CACuB,CAACrB,oBAAoB,CAACS,aAAa,EAAE,EAAEV,oBAAoB,CAACU,aAAa,EAAE,CAAC,CAACa,IAAI,CAAC,GAAG,CAAC,CAAE,CAC7H;QACF;QAEA,IAAInB,8BAA8B,EAAE;UACnC,MAAMoB,OAAO,GAAG,MAAM,IAAI,CAACtC,MAAM,CAACuC,yBAAyB,CAACxB,oBAAoB,CAACY,aAAa,EAAE,CAAC;UACjG,IAAI,CAACW,OAAO,EAAE;YACb,MAAM,IAAI,CAACtC,MAAM,CAACwC,UAAU,CAC3BlC,mBAAmB,EACnBS,oBAAoB,CAAC0B,OAAO,EAAE,IAAItC,mBAAmB,EACrD,IAAI,CAACkB,wBAAwB,CAC7B;UACF;UACA,MAAM,IAAI,CAACrB,MAAM,CAAC0C,YAAY,CAC7BP,aAAa,CAACR,aAAa,EAAE,EAC7Bb,oBAAoB,CAACa,aAAa,EAAE,EACpCZ,oBAAoB,CAACY,aAAa,EAAE,CACpC;UACD,MAAM,IAAI,CAAC3B,MAAM,CAAC2C,QAAQ,CAACR,aAAa,CAACR,aAAa,EAAE,EAAEZ,oBAAoB,CAACY,aAAa,EAAE,CAAC;QAChG;QAEA,MAAM,IAAI,CAACjC,mBAAmB,CAACkD,aAAa,CAACT,aAAa,EAAEpB,oBAAoB,EAAED,oBAAoB,CAAC;MACxG;MAEO,MAAM+B,kBAAkBA,CAACC,mBAAgD;QAC/E,MAAM;UAAEvC,cAAc;UAAEwC;QAAc,CAAE,GAAGD,mBAAmB;QAE9D,MAAMX,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QAEA,MAAMC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAACN,wBAAwB,CAC7B;QACD,IAAI,CAAC6B,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAM,IAAI,CAAClD,MAAM,CAACmD,SAAS,CAAChB,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,CAAC;MAC1F;MAEO,MAAMyB,qBAAqBA,CAACN,mBAAyD;QAC3F,MAAM;UAAEvC,cAAc;UAAEwC,cAAc;UAAEM;QAAsB,CAAE,GAAGP,mBAAmB;QACtF,MAAMX,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QAEA,MAAMK,MAAM,GAAG,MAAM,IAAI,CAAC3D,mBAAmB,CAACc,4BAA4B,CAAC4C,sBAAsB,CAAC;QAClG,IAAI,CAACC,MAAM,EAAE;UACZ;QACD;QAEA,MAAMJ,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAACkC,MAAM,CAAC3B,aAAa,EAAE,CAAC,EAC3D,IAAI,CAACN,wBAAwB,CAC7B;QACD,IAAI,CAAC6B,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAM,IAAI,CAAClD,MAAM,CAACuD,gBAAgB,CAACpB,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,EAAE2B,MAAM,CAAC3B,aAAa,EAAE,CAAC;MACzH;MAEO,MAAM6B,mBAAmBA,CAACC,4BAAkE;QAAA,IAAAC,mBAAA,EAAAC,oBAAA;QAClG,MAAM;UAAEpD,cAAc;UAAEqD,gBAAgB;UAAEC,OAAO;UAAEC;QAAiB,CAAE,GAAGL,4BAA4B;QACrG,MAAMM,eAAe,GAAG,MAAM,IAAI,CAACpE,mBAAmB,CAACc,4BAA4B,CAACmD,gBAAgB,CAAC;QACrG,IAAI,CAACG,eAAe,EAAE;UACrB,MAAM,IAAI9C,KAAK,+BAAAmB,MAAA,CAA+BwB,gBAAgB,CAAE,CAAC;QAClE;QAEA,MAAMzB,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB,MAAM,IAAIlB,KAAK,+BAAAmB,MAAA,CAA+B7B,cAAc,CAAE,CAAC;QAChE;QAEA,KAAAmD,mBAAA,GAAIG,OAAO,CAACG,UAAU,cAAAN,mBAAA,eAAlBA,mBAAA,CAAoBO,OAAO,EAAE;UAChC;QACD;QAEA,KAAAN,oBAAA,GAAIE,OAAO,CAACK,WAAW,cAAAP,oBAAA,eAAnBA,oBAAA,CAAqBQ,IAAI,CAAEC,UAAU,IAAKtF,iBAAiB,CAACsF,UAAU,CAAC,IAAIC,OAAO,CAACD,UAAU,CAACE,YAAY,CAAC,CAAC,EAAE;UACjH;UACA,MAAMC,WAAW,GAChBV,OAAO,CAACK,WAAW,CAACM,IAAI,CACtBJ,UAAU,IAAKtF,iBAAiB,CAACsF,UAAU,CAAC,IAAIC,OAAO,CAACD,UAAU,CAACE,YAAY,CAAC,CAElF,CAACA,YAAY;UACd,IAAI,CAACC,WAAW,EAAE;YACjB;UACD;UACA,MAAME,kBAAkB,GAAGF,WAAW,CAACG,QAAQ,CAAC,MAAM,CAAC,KAAIH,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEI,KAAK,CAAC,MAAM,CAAC,CAACC,GAAG,EAAE;UAC3F,IAAI,CAACH,kBAAkB,EAAE;YACxB;UACD;UACA,MAAMI,gBAAgB,GAAG,MAAM,IAAI,CAAChF,sBAAsB,CAACiF,cAAc,CAACL,kBAAkB,CAAC;UAC7F,IAAI,CAACI,gBAAgB,EAAE;YACtB;UACD;UAEA,MAAMtF,wBAAwB,CAAC;YAC9BsE,OAAO;YACPC,iBAAiB;YACjB9D,MAAM,EAAE,IAAI,CAACA,MAAM;YACnBJ,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;YAC7CC,sBAAsB,EAAE,IAAI,CAACA,sBAAsB;YACnDF,mBAAmB,EAAE,IAAI,CAACA;WAC1B,CAAC,CAACoF,gBAAgB,CAAC5C,aAAa,CAACR,aAAa,EAAE,EAAEoC,eAAe,CAACpC,aAAa,EAAE,EAAEkC,OAAO,EAAEgB,gBAAgB,CAAC;UAC9G;QACD;QAEA,MAAMtF,wBAAwB,CAAC;UAC9BsE,OAAO;UACPC,iBAAiB;UACjB9D,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBJ,mBAAmB,EAAE,IAAI,CAACA,mBAAmB;UAC7CC,sBAAsB,EAAE,IAAI,CAACA,sBAAsB;UACnDF,mBAAmB,EAAE,IAAI,CAACA;SAC1B,CAAC,CAACqF,WAAW,CAAC7C,aAAa,CAACR,aAAa,EAAE,EAAEoC,eAAe,CAACpC,aAAa,EAAE,EAAEkC,OAAO,CAAC;MACxF;MAEO,MAAMoB,mBAAmBA,CAACC,eAAyB,EAAE3E,cAAsB;QAAA,IAAA4E,kBAAA,EAAAC,qBAAA;QACjF,MAAMjD,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,EAAAkC,kBAAA,GAAAD,eAAe,CAACG,CAAC,cAAAF,kBAAA,uBAAjBA,kBAAA,CAAmBG,GAAG,MAAK,MAAM,IAAI,CAAC3F,mBAAmB,CAACc,4BAA4B,CAACyE,eAAe,CAACG,CAAC,CAACC,GAAG,CAAC,CAAC;QACpI,IAAI,CAACrC,aAAa,EAAE;UACnB;QACD;QAEA,IAAI,CAACpE,6BAA6B,CAACqG,eAAe,CAAC,IAAIvG,gBAAgB,CAACuG,eAAe,CAAC,EAAE;UACzF;QACD;QAEA,MAAMhC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAM,IAAI,CAAClD,MAAM,CAACwF,WAAW,CAC5BrD,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,GAAAyD,qBAAA,GAC7BF,eAAe,CAAClB,UAAU,cAAAoB,qBAAA,uBAA1BA,qBAAA,CAA4BnB,OAAiB,CAC7C;MACF;MAEO,MAAMwB,mBAAmBA,CAACP,eAAyB,EAAE3E,cAAsB,EAAEwC,cAAsB;QAAA,IAAA2C,sBAAA;QACzG,MAAMvD,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QACA,IAAI,CAACpE,6BAA6B,CAACqG,eAAe,CAAC,IAAI,CAACtG,eAAe,CAACsG,eAAe,CAAC,IAAIA,eAAe,CAACG,CAAC,CAACC,GAAG,KAAKvC,cAAc,EAAE;UACrI;QACD;QAEA,MAAMG,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAM,IAAI,CAAClD,MAAM,CAAC2F,aAAa,CAC9BxD,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,GAAA+D,sBAAA,GAC7BR,eAAe,CAAClB,UAAU,cAAA0B,sBAAA,uBAA1BA,sBAAA,CAA4BzB,OAAiB,EAC7CiB,eAAe,CAACU,GAAG,CACnB;MACF;MAEO,MAAMC,gBAAgBA,CAAC9C,cAAsB,EAAE+C,oBAA4B,EAAEvF,cAAsB;QACzG,MAAM4B,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QAEA,MAAM8C,mBAAmB,GAAG,MAAM,IAAI,CAACpG,mBAAmB,CAACc,4BAA4B,CAACqF,oBAAoB,CAAC;QAC7G,IAAI,CAACC,mBAAmB,EAAE;UACzB;QACD;QAEA,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACtG,mBAAmB,CAACuG,4BAA4B,CAAC1F,cAAc,EAAEwC,cAAc,CAAC;QACjH,MAAMmD,MAAM,GAAGjD,aAAa,CAACzB,aAAa,EAAE,KAAKuE,mBAAmB,CAACvE,aAAa,EAAE;QACpF,IAAI,EAACwE,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAAC8G,KAAK,CAAC,KAAI,CAACD,MAAM,EAAE;UAC5E,MAAM,IAAIjF,KAAK,CAAC,+CAA+C,CAAC;QACjE;QAEA,MAAMiC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QACA,IAAI;UACH,MAAM,IAAI,CAAClD,MAAM,CAACoG,kBAAkB,CACnCjE,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,EAC7BoE,mBAAmB,CAACpE,aAAa,EAAE,EACnCvC,mBAAmB,CAACiH,KAAK,CACzB;QACF,CAAC,CAAC,OAAOC,CAAC,EAAE;UACX,MAAM,IAAI,CAACC,iBAAiB,CAACpE,aAAa,EAAE4D,mBAAmB,EAAE9C,aAAa,EAAE,EAAE,EAAE,CAAC5D,4BAA4B,CAAC8G,KAAK,CAAC,CAAC;QAC1H;MACD;MAEO,MAAMK,kBAAkBA,CAACzD,cAAsB,EAAE+C,oBAA4B,EAAEvF,cAAsB;QAC3G,MAAM4B,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QAEA,MAAM8C,mBAAmB,GAAG,MAAM,IAAI,CAACpG,mBAAmB,CAACc,4BAA4B,CAACqF,oBAAoB,CAAC;QAC7G,IAAI,CAACC,mBAAmB,EAAE;UACzB;QACD;QAEA,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACtG,mBAAmB,CAACuG,4BAA4B,CAAC1F,cAAc,EAAEwC,cAAc,CAAC;QACjH,MAAMmD,MAAM,GAAGjD,aAAa,CAACzB,aAAa,EAAE,KAAKuE,mBAAmB,CAACvE,aAAa,EAAE;QACpF,IAAI,EAACwE,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAAC8G,KAAK,CAAC,KAAI,CAACD,MAAM,EAAE;UAC5E,MAAM,IAAIjF,KAAK,CAAC,+CAA+C,CAAC;QACjE;QAEA,MAAMiC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QACA,IAAI;UACH,MAAM,IAAI,CAAClD,MAAM,CAACoG,kBAAkB,CACnCjE,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,EAC7BoE,mBAAmB,CAACpE,aAAa,EAAE,EACnCvC,mBAAmB,CAACqH,IAAI,CACxB;QACF,CAAC,CAAC,OAAOH,CAAC,EAAE;UACX,MAAM,IAAI,CAACC,iBAAiB,CAACpE,aAAa,EAAE4D,mBAAmB,EAAE9C,aAAa,EAAE,CAAC5D,4BAA4B,CAAC8G,KAAK,CAAC,EAAE,EAAE,CAAC;QAC1H;MACD;MAEO,MAAMO,oBAAoBA,CAAC3D,cAAsB,EAAE+C,oBAA4B,EAAEvF,cAAsB;QAC7G,MAAM4B,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QACA,MAAM8C,mBAAmB,GAAG,MAAM,IAAI,CAACpG,mBAAmB,CAACc,4BAA4B,CAACqF,oBAAoB,CAAC;QAC7G,IAAI,CAACC,mBAAmB,EAAE;UACzB;QACD;QAEA,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACtG,mBAAmB,CAACuG,4BAA4B,CAAC1F,cAAc,EAAEwC,cAAc,CAAC;QACjH,MAAMmD,MAAM,GAAGjD,aAAa,CAACzB,aAAa,EAAE,KAAKuE,mBAAmB,CAACvE,aAAa,EAAE;QACpF,IACC,EAACwE,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAAC8G,KAAK,CAAC,KAC5D,EAACH,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAACsH,SAAS,CAAC,KAChE,CAACT,MAAM,EACN;UACD,MAAM,IAAIjF,KAAK,CAAC,mDAAmD,CAAC;QACrE;QAEA,MAAMiC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QAEA,IAAI;UACH,MAAM,IAAI,CAAClD,MAAM,CAACoG,kBAAkB,CACnCjE,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,EAC7BoE,mBAAmB,CAACpE,aAAa,EAAE,EACnCvC,mBAAmB,CAACuH,SAAS,CAC7B;QACF,CAAC,CAAC,OAAOL,CAAC,EAAE;UACX,MAAM,IAAI,CAACC,iBAAiB,CAACpE,aAAa,EAAE4D,mBAAmB,EAAE9C,aAAa,EAAE,EAAE,EAAE,CAAC5D,4BAA4B,CAACsH,SAAS,CAAC,CAAC;QAC9H;MACD;MAEO,MAAMC,sBAAsBA,CAAC7D,cAAsB,EAAE+C,oBAA4B,EAAEvF,cAAsB;QAC/G,MAAM4B,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAAG,MAAM,IAAI,CAACtD,mBAAmB,CAACc,4BAA4B,CAACsC,cAAc,CAAC;QACjG,IAAI,CAACE,aAAa,EAAE;UACnB;QACD;QAEA,MAAM8C,mBAAmB,GAAG,MAAM,IAAI,CAACpG,mBAAmB,CAACc,4BAA4B,CAACqF,oBAAoB,CAAC;QAC7G,IAAI,CAACC,mBAAmB,EAAE;UACzB;QACD;QAEA,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACtG,mBAAmB,CAACuG,4BAA4B,CAAC1F,cAAc,EAAEwC,cAAc,CAAC;QACjH,MAAMmD,MAAM,GAAGjD,aAAa,CAACzB,aAAa,EAAE,KAAKuE,mBAAmB,CAACvE,aAAa,EAAE;QACpF,IACC,EAACwE,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAAC8G,KAAK,CAAC,KAC5D,EAACH,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEtB,QAAQ,CAACrF,4BAA4B,CAACsH,SAAS,CAAC,KAChE,CAACT,MAAM,EACN;UACD,MAAM,IAAIjF,KAAK,CAAC,mDAAmD,CAAC;QACrE;QAEA,MAAMiC,2BAA2B,GAAG/D,aAAa,CAACgC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAAC6B,aAAa,CAACtB,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACrC,2BAA2B,EAAE;UACjC;QACD;QAEA,IAAI;UACH,MAAM,IAAI,CAAClD,MAAM,CAACoG,kBAAkB,CACnCjE,aAAa,CAACR,aAAa,EAAE,EAC7BsB,aAAa,CAACtB,aAAa,EAAE,EAC7BoE,mBAAmB,CAACpE,aAAa,EAAE,EACnCvC,mBAAmB,CAACqH,IAAI,CACxB;QACF,CAAC,CAAC,OAAOH,CAAC,EAAE;UACX,MAAM,IAAI,CAACC,iBAAiB,CAACpE,aAAa,EAAE4D,mBAAmB,EAAE9C,aAAa,EAAE,CAAC5D,4BAA4B,CAACsH,SAAS,CAAC,EAAE,EAAE,CAAC;QAC9H;MACD;MAEO,MAAME,oBAAoBA,CAACtG,cAAsB,EAAEuG,gBAAwB;QACjF,MAAM3E,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAClBd,aAAa,CAAC4E,YAAY,EAAE,KAAK,MAAM,IAAI,CAACpH,mBAAmB,CAACc,4BAA4B,CAAC0B,aAAa,CAAC4E,YAAY,EAAY,CAAC,CAAC;QACtI,IAAI,CAAC9D,aAAa,EAAE;UACnB;QACD;QAEA,MAAM+D,2BAA2B,GAAG/H,aAAa,CAACkC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAACe,aAAa,CAACR,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACyB,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAMC,gBAAgB,GAAG,MAAM,IAAI,CAACjH,MAAM,CAACkH,WAAW,CAAC/E,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,CAAC;QAEpH,IAAI,CAACQ,aAAa,CAACgF,2BAA2B,CAACF,gBAAgB,IAAI,EAAE,CAAC,EAAE;UACvE;QACD;QAEA,MAAM,IAAI,CAACjH,MAAM,CAACoH,WAAW,CAACjF,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,EAAEmF,gBAAgB,CAAC;MAC9G;MAEO,MAAMO,qBAAqBA,CAAC9G,cAAsB,EAAE+G,iBAAyB;QACnF,MAAMnF,aAAa,GAAG,MAAM,IAAI,CAACzC,mBAAmB,CAACsD,4BAA4B,CAACzC,cAAc,CAAC;QACjG,IAAI,CAAC4B,aAAa,EAAE;UACnB;QACD;QAEA,MAAMc,aAAa,GAClBd,aAAa,CAAC4E,YAAY,EAAE,KAAK,MAAM,IAAI,CAACpH,mBAAmB,CAACc,4BAA4B,CAAC0B,aAAa,CAAC4E,YAAY,EAAY,CAAC,CAAC;QACtI,IAAI,CAAC9D,aAAa,EAAE;UACnB;QACD;QAEA,MAAM+D,2BAA2B,GAAG/H,aAAa,CAACkC,4BAA4B,CAC7E,IAAI,CAACnB,MAAM,CAACoB,uBAAuB,CAACe,aAAa,CAACR,aAAa,EAAE,CAAC,EAClE,IAAI,CAAC7B,uBAAuB,CAACyF,mBAAmB,EAAE,CAClD;QACD,IAAI,CAACyB,2BAA2B,EAAE;UACjC;QACD;QAEA,MAAMO,iBAAiB,GAAG,MAAM,IAAI,CAACvH,MAAM,CAACwH,YAAY,CAACrF,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,CAAC;QACtH,IAAI,CAACQ,aAAa,CAACsF,qBAAqB,CAACF,iBAAiB,IAAI,EAAE,CAAC,EAAE;UAClE;QACD;QAEA,MAAM,IAAI,CAACvH,MAAM,CAAC0H,YAAY,CAACvF,aAAa,CAACR,aAAa,EAAE,EAAEsB,aAAa,CAACtB,aAAa,EAAE,EAAE2F,iBAAiB,CAAC;MAChH;MAEQ,MAAMf,iBAAiBA,CAC9BpE,aAA4B,EAC5BwF,mBAAkC,EAClCC,QAAuB,EACvBC,UAA0C,EAC1CC,aAA6C;QAE7C,MAAM,IAAI,CAACpI,mBAAmB,CAACqI,oBAAoB,CAAC;UACnD5F,aAAa;UACbwF,mBAAmB;UACnBC,QAAQ;UACRC,UAAU;UACVC,aAAa;UACbE,aAAa,EAAE;SACf,CAAC;QACF,IAAI,CAACjI,2BAA2B,CAACkI,0BAA0B,CAC1D,6CAA6C,EAC7CL,QAAQ,CAACpG,aAAa,EAAE,EACxBW,aAAa,CAACX,aAAa,EAAE,CAC7B;MACF;;IACA0G,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"22afe297e5d76cacb9d8a64d3663ccebd9cf599c"}
