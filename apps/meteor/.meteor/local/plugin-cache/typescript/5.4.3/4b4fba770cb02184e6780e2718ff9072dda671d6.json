{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/banners.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/banners.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/banners.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/banners.ts","sourceRoot":"","sources":["app/api/server/v1/banners.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAExG,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,gBAAgB,EAChB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,oBAAoB,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,aAAa,EAAE,SAAS,CAAC,EAAE,EAAE,EACzI;IACC,aAAa;IACb,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAErD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,IAAI,SAAS,CAAC,CAAC;QAE7F,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,aAAa,EACb,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,cAAc,EAAE,EACtD;IACC,kCAAkC;IAClC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE9B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE1E,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,SAAS,EACT,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,cAAc,EAAE,EACtD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEtE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,qBAAqB,EAAE,EAC7D;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAErC,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Banner } from '@rocket.chat/core-services';\nimport { isBannersDismissProps, isBannersGetNewProps, isBannersProps } from '@rocket.chat/rest-typings';\n\nimport { API } from '../api';\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.getNew',\n\t{ authRequired: true, validateParams: isBannersGetNewProps, deprecation: { version: '8.0.0', alternatives: ['banners/:id', 'banners'] } },\n\t{\n\t\t// deprecated\n\t\tasync get() {\n\t\t\tconst { platform, bid: bannerId } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, bannerId ?? undefined);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners/:id',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\t// TODO: move to users/:id/banners\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, id);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.dismiss',\n\t{ authRequired: true, validateParams: isBannersDismissProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { bannerId } = this.bodyParams;\n\n\t\t\tawait Banner.dismiss(this.userId, bannerId);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/banners.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/banners.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/banners.ts","sourceRoot":"","sources":["app/api/server/v1/banners.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AACpD,OAAO,EAAE,qBAAqB,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAExG,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,gBAAgB,EAChB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,oBAAoB,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,aAAa,EAAE,SAAS,CAAC,EAAE,EAAE,EACzI;IACC,aAAa;IACb,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAErD,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,IAAI,SAAS,CAAC,CAAC;QAE7F,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,aAAa,EACb,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,cAAc,EAAE,EACtD;IACC,kCAAkC;IAClC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACtC,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC;QAE9B,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE1E,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,SAAS,EACT,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,cAAc,EAAE,EACtD;IACC,KAAK,CAAC,GAAG;QACR,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAEtC,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEtE,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACpC,CAAC;CACD,CACD,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,GAAG,CAAC,EAAE,CAAC,QAAQ,CACd,iBAAiB,EACjB,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,qBAAqB,EAAE,EAC7D;IACC,KAAK,CAAC,IAAI;QACT,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QAErC,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;CACD,CACD,CAAC","sourcesContent":["import { Banner } from '@rocket.chat/core-services';\nimport { isBannersDismissProps, isBannersGetNewProps, isBannersProps } from '@rocket.chat/rest-typings';\n\nimport { API } from '../api';\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.getNew',\n\t{ authRequired: true, validateParams: isBannersGetNewProps, deprecation: { version: '8.0.0', alternatives: ['banners/:id', 'banners'] } },\n\t{\n\t\t// deprecated\n\t\tasync get() {\n\t\t\tconst { platform, bid: bannerId } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, bannerId ?? undefined);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners/:id',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\t// TODO: move to users/:id/banners\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, id);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.dismiss',\n\t{ authRequired: true, validateParams: isBannersDismissProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { bannerId } = this.bodyParams;\n\n\t\t\tawait Banner.dismiss(this.userId, bannerId);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Banner;\n    module.link(\"@rocket.chat/core-services\", {\n      Banner(v) {\n        Banner = v;\n      }\n    }, 0);\n    let isBannersDismissProps, isBannersGetNewProps, isBannersProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isBannersDismissProps(v) {\n        isBannersDismissProps = v;\n      },\n      isBannersGetNewProps(v) {\n        isBannersGetNewProps = v;\n      },\n      isBannersProps(v) {\n        isBannersProps = v;\n      }\n    }, 1);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    /**\n     * @deprecated\n     * @openapi\n     *  /api/v1/banners.getNew:\n     *    get:\n     *      description: Gets the banners to be shown to the authenticated user\n     *      deprecated: true\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      parameters:\n     *        - name: platform\n     *          in: query\n     *          description: The platform rendering the banner\n     *          required: true\n     *          schema:\n     *            type: string\n     *            enum: [web, mobile]\n     *          example: web\n     *        - name: bid\n     *          in: query\n     *          description: The id of a single banner\n     *          required: false\n     *          schema:\n     *            type: string\n     *          example: ByehQjC44FwMeiLbX\n     *      responses:\n     *        200:\n     *          description: The banners matching the criteria\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      banners:\n     *                        type: array\n     *                        items:\n     *                           $ref: '#/components/schemas/IBanner'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('banners.getNew', {\n      authRequired: true,\n      validateParams: isBannersGetNewProps,\n      deprecation: {\n        version: '8.0.0',\n        alternatives: ['banners/:id', 'banners']\n      }\n    }, {\n      // deprecated\n      async get() {\n        const {\n          platform,\n          bid: bannerId\n        } = this.queryParams;\n        const banners = await Banner.getBannersForUser(this.userId, platform, bannerId !== null && bannerId !== void 0 ? bannerId : undefined);\n        return API.v1.success({\n          banners\n        });\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/banners/{id}:\n     *    get:\n     *      description: Gets the banner to be shown to the authenticated user\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      parameters:\n     *        - name: platform\n     *          in: query\n     *          description: The platform rendering the banner\n     *          required: true\n     *          schema:\n     *            type: string\n     *            enum: [web, mobile]\n     *          example: web\n     *        - name: id\n     *          in: path\n     *          description: The id of the banner\n     *          required: true\n     *          schema:\n     *            type: string\n     *          example: ByehQjC44FwMeiLbX\n     *      responses:\n     *        200:\n     *          description: |\n     *            A collection with a single banner matching the criteria; an empty\n     *            collection otherwise\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      banners:\n     *                        type: array\n     *                        items:\n     *                          $ref: '#/components/schemas/IBanner'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('banners/:id', {\n      authRequired: true,\n      validateParams: isBannersProps\n    }, {\n      // TODO: move to users/:id/banners\n      async get() {\n        const {\n          platform\n        } = this.queryParams;\n        const {\n          id\n        } = this.urlParams;\n        const banners = await Banner.getBannersForUser(this.userId, platform, id);\n        return API.v1.success({\n          banners\n        });\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/banners:\n     *    get:\n     *      description: Gets the banners to be shown to the authenticated user\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      parameters:\n     *        - name: platform\n     *          in: query\n     *          description: The platform rendering the banner\n     *          required: true\n     *          schema:\n     *            type: string\n     *            enum: [web, mobile]\n     *          example: web\n     *      responses:\n     *        200:\n     *          description: The banners matching the criteria\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      banners:\n     *                        type: array\n     *                        items:\n     *                          $ref: '#/components/schemas/IBanner'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('banners', {\n      authRequired: true,\n      validateParams: isBannersProps\n    }, {\n      async get() {\n        const {\n          platform\n        } = this.queryParams;\n        const banners = await Banner.getBannersForUser(this.userId, platform);\n        return API.v1.success({\n          banners\n        });\n      }\n    });\n    /**\n     * @openapi\n     *  /api/v1/banners.dismiss:\n     *    post:\n     *      description: Dismisses a banner\n     *      security:\n     *        $ref: '#/security/authenticated'\n     *      requestBody:\n     *        content:\n     *          application/json:\n     *            schema:\n     *              type: object\n     *              properties:\n     *                bannerId:\n     *                  type: string\n     *            example: |\n     *              {\n     *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n     *              }\n     *      responses:\n     *        200:\n     *          description: The banners matching the criteria\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiSuccessV1'\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('banners.dismiss', {\n      authRequired: true,\n      validateParams: isBannersDismissProps\n    }, {\n      async post() {\n        const {\n          bannerId\n        } = this.bodyParams;\n        await Banner.dismiss(this.userId, bannerId);\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Banner","module","link","v","isBannersDismissProps","isBannersGetNewProps","isBannersProps","API","__reifyWaitForDeps__","v1","addRoute","authRequired","validateParams","deprecation","version","alternatives","get","platform","bid","bannerId","queryParams","banners","getBannersForUser","userId","undefined","success","id","urlParams","post","bodyParams","dismiss","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/banners.ts"],"sourcesContent":["import { Banner } from '@rocket.chat/core-services';\nimport { isBannersDismissProps, isBannersGetNewProps, isBannersProps } from '@rocket.chat/rest-typings';\n\nimport { API } from '../api';\n\n/**\n * @deprecated\n * @openapi\n *  /api/v1/banners.getNew:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      deprecated: true\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: bid\n *          in: query\n *          description: The id of a single banner\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                           $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.getNew',\n\t{ authRequired: true, validateParams: isBannersGetNewProps, deprecation: { version: '8.0.0', alternatives: ['banners/:id', 'banners'] } },\n\t{\n\t\t// deprecated\n\t\tasync get() {\n\t\t\tconst { platform, bid: bannerId } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, bannerId ?? undefined);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners/{id}:\n *    get:\n *      description: Gets the banner to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *        - name: id\n *          in: path\n *          description: The id of the banner\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: |\n *            A collection with a single banner matching the criteria; an empty\n *            collection otherwise\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners/:id',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\t// TODO: move to users/:id/banners\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\t\t\tconst { id } = this.urlParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform, id);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners:\n *    get:\n *      description: Gets the banners to be shown to the authenticated user\n *      security:\n *        $ref: '#/security/authenticated'\n *      parameters:\n *        - name: platform\n *          in: query\n *          description: The platform rendering the banner\n *          required: true\n *          schema:\n *            type: string\n *            enum: [web, mobile]\n *          example: web\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      banners:\n *                        type: array\n *                        items:\n *                          $ref: '#/components/schemas/IBanner'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners',\n\t{ authRequired: true, validateParams: isBannersProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { platform } = this.queryParams;\n\n\t\t\tconst banners = await Banner.getBannersForUser(this.userId, platform);\n\n\t\t\treturn API.v1.success({ banners });\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /api/v1/banners.dismiss:\n *    post:\n *      description: Dismisses a banner\n *      security:\n *        $ref: '#/security/authenticated'\n *      requestBody:\n *        content:\n *          application/json:\n *            schema:\n *              type: object\n *              properties:\n *                bannerId:\n *                  type: string\n *            example: |\n *              {\n *                 \"bannerId\": \"ByehQjC44FwMeiLbX\"\n *              }\n *      responses:\n *        200:\n *          description: The banners matching the criteria\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiSuccessV1'\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'banners.dismiss',\n\t{ authRequired: true, validateParams: isBannersDismissProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { bannerId } = this.bodyParams;\n\n\t\t\tawait Banner.dismiss(this.userId, bannerId);\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4b4fba770cb02184e6780e2718ff9072dda671d6"}
