{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, Message } from '@rocket.chat/core-services';\nimport type { IDirectMessageRoom, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, MatrixBridgedRoom, Users } from '@rocket.chat/models';\n\nimport { saveRoomTopic } from '../../../../../../app/channel-settings/server';\nimport { addUserToRoom } from '../../../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../../../app/lib/server/functions/removeUserFromRoom';\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n} from '../../../../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../../../../app/settings/server';\nimport { getDefaultSubscriptionPref } from '../../../../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { getValidRoomName } from '../../../../../../app/utils/server/lib/getValidRoomName';\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport type { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\nimport type { ROCKET_CHAT_FEDERATION_ROLES } from '../definitions/FederatedRoomInternalRoles';\nimport { getFederatedUserByInternalUsername } from './User';\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport class RocketChatRoomAdapter {\n\tpublic async getFederatedRoomByExternalId(externalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst internalBridgedRoomId = await MatrixBridgedRoom.getLocalRoomId(externalRoomId);\n\t\tif (!internalBridgedRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalBridgedRoomId);\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getFederatedRoomByInternalId(internalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(internalRoomId);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalRoomId);\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getInternalRoomById(internalRoomId: string): Promise<IRoom | null> {\n\t\treturn Rooms.findOneById(internalRoomId);\n\t}\n\n\tpublic async createFederatedRoom(federatedRoom: FederatedRoom): Promise<string> {\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || federatedRoom.getCreatorId();\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tconst roomName = await getValidRoomName(\n\t\t\t(federatedRoom.getDisplayName() || '')\n\t\t\t\t.replace(/[^a-zA-Z0-9 ]/g, '')\n\t\t\t\t.trim()\n\t\t\t\t.replace(/ /g, '-'),\n\t\t);\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(federatedRoom.getRoomType(), roomName, owner);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async removeDirectMessageRoom(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst roomId = federatedRoom.getInternalId();\n\n\t\tawait Promise.all([\n\t\t\tRooms.removeById(roomId),\n\t\t\tSubscriptions.removeByRoomId(roomId, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tMatrixBridgedRoom.removeByLocalRoomId(roomId),\n\t\t]);\n\t}\n\n\tpublic async createFederatedRoomForDirectMessage(federatedRoom: DirectMessageFederatedRoom): Promise<string> {\n\t\tconst creatorId = federatedRoom.getCreatorId();\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || creatorId;\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tif (!creatorId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst readonly = false;\n\t\tconst excludeSelf = false;\n\t\tconst extraData = undefined;\n\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(\n\t\t\tfederatedRoom.getRoomType(),\n\t\t\tfederatedRoom.getDisplayName(),\n\t\t\towner,\n\t\t\tfederatedRoom.getMembersUsernames(),\n\t\t\texcludeSelf,\n\t\t\treadonly,\n\t\t\textraData,\n\t\t\t{ creator: creatorId },\n\t\t);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async getDirectMessageFederatedRoomByUserIds(userIds: string[]): Promise<FederatedRoom | undefined> {\n\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(userIds);\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(room._id);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async addUserToRoom(federatedRoom: FederatedRoom, inviteeUser: FederatedUser, inviterUser?: FederatedUser): Promise<void> {\n\t\tawait addUserToRoom(federatedRoom.getInternalId(), inviteeUser.getInternalReference(), inviterUser?.getInternalReference());\n\t}\n\n\tpublic async addUsersToRoomWhenJoinExternalPublicRoom(federatedUsers: FederatedUser[], federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst room = await Rooms.findOneById(federatedRoom.getInternalId());\n\t\tif (!room) {\n\t\t\tthrow new Error('Room not found - addUsersToRoomWhenJoinExternalPublicRoom');\n\t\t}\n\t\tawait Promise.all(\n\t\t\tfederatedUsers\n\t\t\t\t.map(async (federatedUser) => {\n\t\t\t\t\tconst internalUser = await Users.findOneById(federatedUser.getInternalId());\n\t\t\t\t\tif (!internalUser) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), internalUser._id);\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = federatedUser.getInternalReference();\n\t\t\t\t\tconst { insertedId } = await Subscriptions.createWithRoomAndUser(room, user, {\n\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t\t\t});\n\t\t\t\t\tif (insertedId) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChangedById(insertedId, 'inserted');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(Boolean),\n\t\t);\n\t}\n\n\tpublic async removeUserFromRoom(federatedRoom: FederatedRoom, affectedUser: FederatedUser, byUser: FederatedUser): Promise<void> {\n\t\tconst userHasBeenRemoved = byUser.getInternalId() !== affectedUser.getInternalId();\n\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;\n\t\tawait removeUserFromRoom(federatedRoom.getInternalId(), affectedUser.getInternalReference(), options);\n\t}\n\n\tpublic async isUserAlreadyJoined(internalRoomId: string, internalUserId: string): Promise<boolean> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { _id: 1 } });\n\n\t\treturn Boolean(subscription);\n\t}\n\n\tpublic async updateRoomType(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomType = federatedRoom.getRoomType();\n\n\t\tawait Rooms.setRoomTypeById(rid, roomType);\n\t\tawait Subscriptions.updateAllRoomTypesByRoomId(rid, roomType);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateDisplayRoomName(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\t\tconst internalReference = federatedUser.getInternalReference();\n\n\t\tawait Rooms.setFnameById(rid, displayName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\t\tawait Message.saveSystemMessage('r', rid, displayName, internalReference);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomName(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\n\t\tawait Rooms.setRoomNameById(rid, roomName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomTopic(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tawait saveRoomTopic(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedRoom.getTopic(),\n\t\t\tfederatedUser.getInternalReference() as WithRequiredProperty<IUser, 'username'>,\n\t\t);\n\t}\n\n\tprivate async createFederatedRoomInstance<T extends IRoom | IDirectMessageRoom>(externalRoomId: string, room: T): Promise<FederatedRoom> {\n\t\tif (isDirectMessageRoom(room)) {\n\t\t\tconst members = (await Promise.all(\n\t\t\t\t(room.usernames || []).map((username) => getFederatedUserByInternalUsername(username)).filter(Boolean),\n\t\t\t)) as FederatedUser[];\n\t\t\treturn DirectMessageFederatedRoom.createWithInternalReference(externalRoomId, room, members);\n\t\t}\n\n\t\treturn FederatedRoom.createWithInternalReference(externalRoomId, room);\n\t}\n\n\tpublic async updateFederatedRoomByInternalRoomId(internalRoomId: string, externalRoomId: string): Promise<void> {\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\tinternalRoomId,\n\t\t\texternalRoomId,\n\t\t\textractServerNameFromExternalIdentifier(externalRoomId),\n\t\t);\n\t\tawait Rooms.setAsFederated(internalRoomId);\n\t}\n\n\tpublic async getInternalRoomRolesByUserId(internalRoomId: string, internalUserId: string): Promise<string[]> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { roles: 1 } });\n\t\tif (!subscription) {\n\t\t\treturn [];\n\t\t}\n\t\treturn subscription.roles || [];\n\t}\n\n\tpublic async applyRoomRolesToUser({\n\t\tfederatedRoom,\n\t\tfromUser,\n\t\ttargetFederatedUser,\n\t\tnotifyChannel,\n\t\trolesToAdd,\n\t\trolesToRemove,\n\t}: {\n\t\tfederatedRoom: FederatedRoom;\n\t\ttargetFederatedUser: FederatedUser;\n\t\tfromUser: FederatedUser;\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\tnotifyChannel: boolean;\n\t}): Promise<void> {\n\t\tconst uid = targetFederatedUser.getInternalId();\n\t\tconst rid = federatedRoom.getInternalId();\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection: { roles: 1 } });\n\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { roles: currentRoles = [] } = subscription;\n\t\tconst toAdd = rolesToAdd.filter((role) => !currentRoles.includes(role));\n\t\tconst toRemove = rolesToRemove.filter((role) => currentRoles.includes(role));\n\t\tconst whoDidTheChange = {\n\t\t\t_id: fromUser.getInternalId(),\n\t\t\tusername: fromUser.getUsername(),\n\t\t};\n\n\t\tif (toAdd.length > 0) {\n\t\t\tconst addRolesResponse = await Subscriptions.addRolesByUserId(uid, toAdd, rid);\n\t\t\tif (addRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoAdd.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-added',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (toRemove.length > 0) {\n\t\t\tconst removeRolesResponse = await Subscriptions.removeRolesByUserId(uid, toRemove, rid);\n\t\t\tif (removeRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoRemove.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-removed',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tthis.notifyUIAboutRoomRolesChange(targetFederatedUser, federatedRoom, toAdd, toRemove);\n\t\t}\n\t}\n\n\tprivate notifyUIAboutRoomRolesChange(\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\taddedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\tremovedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): void {\n\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\t\tthis.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'),\n\t\t);\n\t\t[...eventsForAddedRoles, ...eventsForRemovedRoles].forEach((event) => api.broadcast('user.roleUpdate', event));\n\t}\n\n\tprivate createRoleUpdateEvent(\n\t\tfederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\trole: string,\n\t\taction: 'added' | 'removed',\n\t): {\n\t\ttype: 'added' | 'removed' | 'changed';\n\t\t_id: string;\n\t\tu?: { _id: IUser['_id']; username: IUser['username']; name: IUser['name'] };\n\t\tscope?: string;\n\t} {\n\t\treturn {\n\t\t\ttype: action,\n\t\t\t_id: role,\n\t\t\tu: {\n\t\t\t\t_id: federatedUser.getInternalId(),\n\t\t\t\tusername: federatedUser.getUsername(),\n\t\t\t\tname: federatedUser.getName(),\n\t\t\t},\n\t\t\tscope: federatedRoom.getInternalId(),\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/Room.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, Message } from '@rocket.chat/core-services';\nimport type { IDirectMessageRoom, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, MatrixBridgedRoom, Users } from '@rocket.chat/models';\n\nimport { saveRoomTopic } from '../../../../../../app/channel-settings/server';\nimport { addUserToRoom } from '../../../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../../../app/lib/server/functions/removeUserFromRoom';\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n} from '../../../../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../../../../app/settings/server';\nimport { getDefaultSubscriptionPref } from '../../../../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { getValidRoomName } from '../../../../../../app/utils/server/lib/getValidRoomName';\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport type { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\nimport type { ROCKET_CHAT_FEDERATION_ROLES } from '../definitions/FederatedRoomInternalRoles';\nimport { getFederatedUserByInternalUsername } from './User';\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport class RocketChatRoomAdapter {\n\tpublic async getFederatedRoomByExternalId(externalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst internalBridgedRoomId = await MatrixBridgedRoom.getLocalRoomId(externalRoomId);\n\t\tif (!internalBridgedRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalBridgedRoomId);\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getFederatedRoomByInternalId(internalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(internalRoomId);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalRoomId);\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getInternalRoomById(internalRoomId: string): Promise<IRoom | null> {\n\t\treturn Rooms.findOneById(internalRoomId);\n\t}\n\n\tpublic async createFederatedRoom(federatedRoom: FederatedRoom): Promise<string> {\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || federatedRoom.getCreatorId();\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tconst roomName = await getValidRoomName(\n\t\t\t(federatedRoom.getDisplayName() || '')\n\t\t\t\t.replace(/[^a-zA-Z0-9 ]/g, '')\n\t\t\t\t.trim()\n\t\t\t\t.replace(/ /g, '-'),\n\t\t);\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(federatedRoom.getRoomType(), roomName, owner);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async removeDirectMessageRoom(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst roomId = federatedRoom.getInternalId();\n\n\t\tawait Promise.all([\n\t\t\tRooms.removeById(roomId),\n\t\t\tSubscriptions.removeByRoomId(roomId, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tMatrixBridgedRoom.removeByLocalRoomId(roomId),\n\t\t]);\n\t}\n\n\tpublic async createFederatedRoomForDirectMessage(federatedRoom: DirectMessageFederatedRoom): Promise<string> {\n\t\tconst creatorId = federatedRoom.getCreatorId();\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || creatorId;\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tif (!creatorId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst readonly = false;\n\t\tconst excludeSelf = false;\n\t\tconst extraData = undefined;\n\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(\n\t\t\tfederatedRoom.getRoomType(),\n\t\t\tfederatedRoom.getDisplayName(),\n\t\t\towner,\n\t\t\tfederatedRoom.getMembersUsernames(),\n\t\t\texcludeSelf,\n\t\t\treadonly,\n\t\t\textraData,\n\t\t\t{ creator: creatorId },\n\t\t);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async getDirectMessageFederatedRoomByUserIds(userIds: string[]): Promise<FederatedRoom | undefined> {\n\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(userIds);\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(room._id);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async addUserToRoom(federatedRoom: FederatedRoom, inviteeUser: FederatedUser, inviterUser?: FederatedUser): Promise<void> {\n\t\tawait addUserToRoom(federatedRoom.getInternalId(), inviteeUser.getInternalReference(), inviterUser?.getInternalReference());\n\t}\n\n\tpublic async addUsersToRoomWhenJoinExternalPublicRoom(federatedUsers: FederatedUser[], federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst room = await Rooms.findOneById(federatedRoom.getInternalId());\n\t\tif (!room) {\n\t\t\tthrow new Error('Room not found - addUsersToRoomWhenJoinExternalPublicRoom');\n\t\t}\n\t\tawait Promise.all(\n\t\t\tfederatedUsers\n\t\t\t\t.map(async (federatedUser) => {\n\t\t\t\t\tconst internalUser = await Users.findOneById(federatedUser.getInternalId());\n\t\t\t\t\tif (!internalUser) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), internalUser._id);\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = federatedUser.getInternalReference();\n\t\t\t\t\tconst { insertedId } = await Subscriptions.createWithRoomAndUser(room, user, {\n\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t\t\t});\n\t\t\t\t\tif (insertedId) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChangedById(insertedId, 'inserted');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(Boolean),\n\t\t);\n\t}\n\n\tpublic async removeUserFromRoom(federatedRoom: FederatedRoom, affectedUser: FederatedUser, byUser: FederatedUser): Promise<void> {\n\t\tconst userHasBeenRemoved = byUser.getInternalId() !== affectedUser.getInternalId();\n\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;\n\t\tawait removeUserFromRoom(federatedRoom.getInternalId(), affectedUser.getInternalReference(), options);\n\t}\n\n\tpublic async isUserAlreadyJoined(internalRoomId: string, internalUserId: string): Promise<boolean> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { _id: 1 } });\n\n\t\treturn Boolean(subscription);\n\t}\n\n\tpublic async updateRoomType(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomType = federatedRoom.getRoomType();\n\n\t\tawait Rooms.setRoomTypeById(rid, roomType);\n\t\tawait Subscriptions.updateAllRoomTypesByRoomId(rid, roomType);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateDisplayRoomName(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\t\tconst internalReference = federatedUser.getInternalReference();\n\n\t\tawait Rooms.setFnameById(rid, displayName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\t\tawait Message.saveSystemMessage('r', rid, displayName, internalReference);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomName(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\n\t\tawait Rooms.setRoomNameById(rid, roomName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomTopic(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tawait saveRoomTopic(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedRoom.getTopic(),\n\t\t\tfederatedUser.getInternalReference() as WithRequiredProperty<IUser, 'username'>,\n\t\t);\n\t}\n\n\tprivate async createFederatedRoomInstance<T extends IRoom | IDirectMessageRoom>(externalRoomId: string, room: T): Promise<FederatedRoom> {\n\t\tif (isDirectMessageRoom(room)) {\n\t\t\tconst members = (await Promise.all(\n\t\t\t\t(room.usernames || []).map((username) => getFederatedUserByInternalUsername(username)).filter(Boolean),\n\t\t\t)) as FederatedUser[];\n\t\t\treturn DirectMessageFederatedRoom.createWithInternalReference(externalRoomId, room, members);\n\t\t}\n\n\t\treturn FederatedRoom.createWithInternalReference(externalRoomId, room);\n\t}\n\n\tpublic async updateFederatedRoomByInternalRoomId(internalRoomId: string, externalRoomId: string): Promise<void> {\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\tinternalRoomId,\n\t\t\texternalRoomId,\n\t\t\textractServerNameFromExternalIdentifier(externalRoomId),\n\t\t);\n\t\tawait Rooms.setAsFederated(internalRoomId);\n\t}\n\n\tpublic async getInternalRoomRolesByUserId(internalRoomId: string, internalUserId: string): Promise<string[]> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { roles: 1 } });\n\t\tif (!subscription) {\n\t\t\treturn [];\n\t\t}\n\t\treturn subscription.roles || [];\n\t}\n\n\tpublic async applyRoomRolesToUser({\n\t\tfederatedRoom,\n\t\tfromUser,\n\t\ttargetFederatedUser,\n\t\tnotifyChannel,\n\t\trolesToAdd,\n\t\trolesToRemove,\n\t}: {\n\t\tfederatedRoom: FederatedRoom;\n\t\ttargetFederatedUser: FederatedUser;\n\t\tfromUser: FederatedUser;\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\tnotifyChannel: boolean;\n\t}): Promise<void> {\n\t\tconst uid = targetFederatedUser.getInternalId();\n\t\tconst rid = federatedRoom.getInternalId();\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection: { roles: 1 } });\n\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { roles: currentRoles = [] } = subscription;\n\t\tconst toAdd = rolesToAdd.filter((role) => !currentRoles.includes(role));\n\t\tconst toRemove = rolesToRemove.filter((role) => currentRoles.includes(role));\n\t\tconst whoDidTheChange = {\n\t\t\t_id: fromUser.getInternalId(),\n\t\t\tusername: fromUser.getUsername(),\n\t\t};\n\n\t\tif (toAdd.length > 0) {\n\t\t\tconst addRolesResponse = await Subscriptions.addRolesByUserId(uid, toAdd, rid);\n\t\t\tif (addRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoAdd.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-added',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (toRemove.length > 0) {\n\t\t\tconst removeRolesResponse = await Subscriptions.removeRolesByUserId(uid, toRemove, rid);\n\t\t\tif (removeRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoRemove.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-removed',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tthis.notifyUIAboutRoomRolesChange(targetFederatedUser, federatedRoom, toAdd, toRemove);\n\t\t}\n\t}\n\n\tprivate notifyUIAboutRoomRolesChange(\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\taddedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\tremovedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): void {\n\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\t\tthis.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'),\n\t\t);\n\t\t[...eventsForAddedRoles, ...eventsForRemovedRoles].forEach((event) => api.broadcast('user.roleUpdate', event));\n\t}\n\n\tprivate createRoleUpdateEvent(\n\t\tfederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\trole: string,\n\t\taction: 'added' | 'removed',\n\t): {\n\t\ttype: 'added' | 'removed' | 'changed';\n\t\t_id: string;\n\t\tu?: { _id: IUser['_id']; username: IUser['username']; name: IUser['name'] };\n\t\tscope?: string;\n\t} {\n\t\treturn {\n\t\t\ttype: action,\n\t\t\t_id: role,\n\t\t\tu: {\n\t\t\t\t_id: federatedUser.getInternalId(),\n\t\t\t\tusername: federatedUser.getUsername(),\n\t\t\t\tname: federatedUser.getName(),\n\t\t\t},\n\t\t\tscope: federatedRoom.getInternalId(),\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      RocketChatRoomAdapter: () => RocketChatRoomAdapter\n    });\n    let api, Message;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      },\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let isDirectMessageRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      isDirectMessageRoom(v) {\n        isDirectMessageRoom = v;\n      }\n    }, 1);\n    let Rooms, Subscriptions, MatrixBridgedRoom, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      MatrixBridgedRoom(v) {\n        MatrixBridgedRoom = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 2);\n    let saveRoomTopic;\n    module.link(\"../../../../../../app/channel-settings/server\", {\n      saveRoomTopic(v) {\n        saveRoomTopic = v;\n      }\n    }, 3);\n    let addUserToRoom;\n    module.link(\"../../../../../../app/lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 4);\n    let createRoom;\n    module.link(\"../../../../../../app/lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 5);\n    let removeUserFromRoom;\n    module.link(\"../../../../../../app/lib/server/functions/removeUserFromRoom\", {\n      removeUserFromRoom(v) {\n        removeUserFromRoom = v;\n      }\n    }, 6);\n    let notifyOnSubscriptionChanged, notifyOnSubscriptionChangedById, notifyOnSubscriptionChangedByRoomId, notifyOnSubscriptionChangedByRoomIdAndUserId;\n    module.link(\"../../../../../../app/lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      },\n      notifyOnSubscriptionChangedById(v) {\n        notifyOnSubscriptionChangedById = v;\n      },\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      },\n      notifyOnSubscriptionChangedByRoomIdAndUserId(v) {\n        notifyOnSubscriptionChangedByRoomIdAndUserId = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let getDefaultSubscriptionPref;\n    module.link(\"../../../../../../app/utils/lib/getDefaultSubscriptionPref\", {\n      getDefaultSubscriptionPref(v) {\n        getDefaultSubscriptionPref = v;\n      }\n    }, 9);\n    let getValidRoomName;\n    module.link(\"../../../../../../app/utils/server/lib/getValidRoomName\", {\n      getValidRoomName(v) {\n        getValidRoomName = v;\n      }\n    }, 10);\n    let DirectMessageFederatedRoom, FederatedRoom;\n    module.link(\"../../../domain/FederatedRoom\", {\n      DirectMessageFederatedRoom(v) {\n        DirectMessageFederatedRoom = v;\n      },\n      FederatedRoom(v) {\n        FederatedRoom = v;\n      }\n    }, 11);\n    let extractServerNameFromExternalIdentifier;\n    module.link(\"../../matrix/converters/room/RoomReceiver\", {\n      extractServerNameFromExternalIdentifier(v) {\n        extractServerNameFromExternalIdentifier = v;\n      }\n    }, 12);\n    let getFederatedUserByInternalUsername;\n    module.link(\"./User\", {\n      getFederatedUserByInternalUsername(v) {\n        getFederatedUserByInternalUsername = v;\n      }\n    }, 13);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RocketChatRoomAdapter {\n      async getFederatedRoomByExternalId(externalRoomId) {\n        const internalBridgedRoomId = await MatrixBridgedRoom.getLocalRoomId(externalRoomId);\n        if (!internalBridgedRoomId) {\n          return;\n        }\n        const room = await Rooms.findOneById(internalBridgedRoomId);\n        if (room) {\n          return this.createFederatedRoomInstance(externalRoomId, room);\n        }\n      }\n      async getFederatedRoomByInternalId(internalRoomId) {\n        const externalRoomId = await MatrixBridgedRoom.getExternalRoomId(internalRoomId);\n        if (!externalRoomId) {\n          return;\n        }\n        const room = await Rooms.findOneById(internalRoomId);\n        if (room) {\n          return this.createFederatedRoomInstance(externalRoomId, room);\n        }\n      }\n      async getInternalRoomById(internalRoomId) {\n        return Rooms.findOneById(internalRoomId);\n      }\n      async createFederatedRoom(federatedRoom) {\n        const usernameOrId = federatedRoom.getCreatorUsername() || federatedRoom.getCreatorId();\n        if (!usernameOrId) {\n          throw new Error('Cannot create a room without a creator');\n        }\n        const roomName = await getValidRoomName((federatedRoom.getDisplayName() || '').replace(/[^a-zA-Z0-9 ]/g, '').trim().replace(/ /g, '-'));\n        const owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n        if (!owner) {\n          throw new Error('Cannot create a room without a creator');\n        }\n        const {\n          rid,\n          _id\n        } = await createRoom(federatedRoom.getRoomType(), roomName, owner);\n        const roomId = rid || _id;\n        await MatrixBridgedRoom.createOrUpdateByLocalRoomId(roomId, federatedRoom.getExternalId(), extractServerNameFromExternalIdentifier(federatedRoom.getExternalId()));\n        await Rooms.setAsFederated(roomId);\n        return roomId;\n      }\n      async removeDirectMessageRoom(federatedRoom) {\n        const roomId = federatedRoom.getInternalId();\n        await Promise.all([Rooms.removeById(roomId), Subscriptions.removeByRoomId(roomId, {\n          async onTrash(doc) {\n            void notifyOnSubscriptionChanged(doc, 'removed');\n          }\n        }), MatrixBridgedRoom.removeByLocalRoomId(roomId)]);\n      }\n      async createFederatedRoomForDirectMessage(federatedRoom) {\n        const creatorId = federatedRoom.getCreatorId();\n        const usernameOrId = federatedRoom.getCreatorUsername() || creatorId;\n        if (!usernameOrId) {\n          throw new Error('Cannot create a room without a creator');\n        }\n        if (!creatorId) {\n          throw new Error('Cannot create a room without a creator');\n        }\n        const readonly = false;\n        const excludeSelf = false;\n        const extraData = undefined;\n        const owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n        if (!owner) {\n          throw new Error('Cannot create a room without a creator');\n        }\n        const {\n          rid,\n          _id\n        } = await createRoom(federatedRoom.getRoomType(), federatedRoom.getDisplayName(), owner, federatedRoom.getMembersUsernames(), excludeSelf, readonly, extraData, {\n          creator: creatorId\n        });\n        const roomId = rid || _id;\n        await MatrixBridgedRoom.createOrUpdateByLocalRoomId(roomId, federatedRoom.getExternalId(), extractServerNameFromExternalIdentifier(federatedRoom.getExternalId()));\n        await Rooms.setAsFederated(roomId);\n        return roomId;\n      }\n      async getDirectMessageFederatedRoomByUserIds(userIds) {\n        const room = await Rooms.findOneDirectRoomContainingAllUserIDs(userIds);\n        if (!room) {\n          return;\n        }\n        const externalRoomId = await MatrixBridgedRoom.getExternalRoomId(room._id);\n        if (!externalRoomId) {\n          return;\n        }\n        if (room) {\n          return this.createFederatedRoomInstance(externalRoomId, room);\n        }\n      }\n      async addUserToRoom(federatedRoom, inviteeUser, inviterUser) {\n        await addUserToRoom(federatedRoom.getInternalId(), inviteeUser.getInternalReference(), inviterUser === null || inviterUser === void 0 ? void 0 : inviterUser.getInternalReference());\n      }\n      async addUsersToRoomWhenJoinExternalPublicRoom(federatedUsers, federatedRoom) {\n        const room = await Rooms.findOneById(federatedRoom.getInternalId());\n        if (!room) {\n          throw new Error('Room not found - addUsersToRoomWhenJoinExternalPublicRoom');\n        }\n        await Promise.all(federatedUsers.map(async federatedUser => {\n          const internalUser = await Users.findOneById(federatedUser.getInternalId());\n          if (!internalUser) {\n            return;\n          }\n          const subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), internalUser._id);\n          if (subscription) {\n            return;\n          }\n          const user = federatedUser.getInternalReference();\n          const {\n            insertedId\n          } = await Subscriptions.createWithRoomAndUser(room, user, _objectSpread({\n            ts: new Date()\n          }, getDefaultSubscriptionPref(user)));\n          if (insertedId) {\n            void notifyOnSubscriptionChangedById(insertedId, 'inserted');\n          }\n        }).filter(Boolean));\n      }\n      async removeUserFromRoom(federatedRoom, affectedUser, byUser) {\n        const userHasBeenRemoved = byUser.getInternalId() !== affectedUser.getInternalId();\n        const options = userHasBeenRemoved ? {\n          byUser: byUser.getInternalReference()\n        } : undefined;\n        await removeUserFromRoom(federatedRoom.getInternalId(), affectedUser.getInternalReference(), options);\n      }\n      async isUserAlreadyJoined(internalRoomId, internalUserId) {\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, {\n          projection: {\n            _id: 1\n          }\n        });\n        return Boolean(subscription);\n      }\n      async updateRoomType(federatedRoom) {\n        const rid = federatedRoom.getInternalId();\n        const roomType = federatedRoom.getRoomType();\n        await Rooms.setRoomTypeById(rid, roomType);\n        await Subscriptions.updateAllRoomTypesByRoomId(rid, roomType);\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      async updateDisplayRoomName(federatedRoom, federatedUser) {\n        const rid = federatedRoom.getInternalId();\n        const roomName = federatedRoom.getName() || '';\n        const displayName = federatedRoom.getDisplayName() || '';\n        const internalReference = federatedUser.getInternalReference();\n        await Rooms.setFnameById(rid, displayName);\n        await Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n        await Message.saveSystemMessage('r', rid, displayName, internalReference);\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      async updateRoomName(federatedRoom) {\n        const rid = federatedRoom.getInternalId();\n        const roomName = federatedRoom.getName() || '';\n        const displayName = federatedRoom.getDisplayName() || '';\n        await Rooms.setRoomNameById(rid, roomName);\n        await Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      async updateRoomTopic(federatedRoom, federatedUser) {\n        await saveRoomTopic(federatedRoom.getInternalId(), federatedRoom.getTopic(), federatedUser.getInternalReference());\n      }\n      async createFederatedRoomInstance(externalRoomId, room) {\n        if (isDirectMessageRoom(room)) {\n          const members = await Promise.all((room.usernames || []).map(username => getFederatedUserByInternalUsername(username)).filter(Boolean));\n          return DirectMessageFederatedRoom.createWithInternalReference(externalRoomId, room, members);\n        }\n        return FederatedRoom.createWithInternalReference(externalRoomId, room);\n      }\n      async updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId) {\n        await MatrixBridgedRoom.createOrUpdateByLocalRoomId(internalRoomId, externalRoomId, extractServerNameFromExternalIdentifier(externalRoomId));\n        await Rooms.setAsFederated(internalRoomId);\n      }\n      async getInternalRoomRolesByUserId(internalRoomId, internalUserId) {\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, {\n          projection: {\n            roles: 1\n          }\n        });\n        if (!subscription) {\n          return [];\n        }\n        return subscription.roles || [];\n      }\n      async applyRoomRolesToUser(_ref) {\n        let {\n          federatedRoom,\n          fromUser,\n          targetFederatedUser,\n          notifyChannel,\n          rolesToAdd,\n          rolesToRemove\n        } = _ref;\n        const uid = targetFederatedUser.getInternalId();\n        const rid = federatedRoom.getInternalId();\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, {\n          projection: {\n            roles: 1\n          }\n        });\n        if (!subscription) {\n          return;\n        }\n        const {\n          roles: currentRoles = []\n        } = subscription;\n        const toAdd = rolesToAdd.filter(role => !currentRoles.includes(role));\n        const toRemove = rolesToRemove.filter(role => currentRoles.includes(role));\n        const whoDidTheChange = {\n          _id: fromUser.getInternalId(),\n          username: fromUser.getUsername()\n        };\n        if (toAdd.length > 0) {\n          const addRolesResponse = await Subscriptions.addRolesByUserId(uid, toAdd, rid);\n          if (addRolesResponse.modifiedCount) {\n            void notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n          }\n          if (notifyChannel) {\n            await Promise.all(toAdd.map(role => Message.saveSystemMessage('subscription-role-added', rid, targetFederatedUser.getInternalReference().username || '', whoDidTheChange, {\n              role\n            })));\n          }\n        }\n        if (toRemove.length > 0) {\n          const removeRolesResponse = await Subscriptions.removeRolesByUserId(uid, toRemove, rid);\n          if (removeRolesResponse.modifiedCount) {\n            void notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n          }\n          if (notifyChannel) {\n            await Promise.all(toRemove.map(role => Message.saveSystemMessage('subscription-role-removed', rid, targetFederatedUser.getInternalReference().username || '', whoDidTheChange, {\n              role\n            })));\n          }\n        }\n        if (settings.get('UI_DisplayRoles')) {\n          this.notifyUIAboutRoomRolesChange(targetFederatedUser, federatedRoom, toAdd, toRemove);\n        }\n      }\n      notifyUIAboutRoomRolesChange(targetFederatedUser, federatedRoom, addedRoles, removedRoles) {\n        const eventsForAddedRoles = addedRoles.map(role => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n        const eventsForRemovedRoles = removedRoles.map(role => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'));\n        [...eventsForAddedRoles, ...eventsForRemovedRoles].forEach(event => api.broadcast('user.roleUpdate', event));\n      }\n      createRoleUpdateEvent(federatedUser, federatedRoom, role, action) {\n        return {\n          type: action,\n          _id: role,\n          u: {\n            _id: federatedUser.getInternalId(),\n            username: federatedUser.getUsername(),\n            name: federatedUser.getName()\n          },\n          scope: federatedRoom.getInternalId()\n        };\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","RocketChatRoomAdapter","api","Message","isDirectMessageRoom","Rooms","Subscriptions","MatrixBridgedRoom","Users","saveRoomTopic","addUserToRoom","createRoom","removeUserFromRoom","notifyOnSubscriptionChanged","notifyOnSubscriptionChangedById","notifyOnSubscriptionChangedByRoomId","notifyOnSubscriptionChangedByRoomIdAndUserId","settings","getDefaultSubscriptionPref","getValidRoomName","DirectMessageFederatedRoom","FederatedRoom","extractServerNameFromExternalIdentifier","getFederatedUserByInternalUsername","__reifyWaitForDeps__","getFederatedRoomByExternalId","externalRoomId","internalBridgedRoomId","getLocalRoomId","room","findOneById","createFederatedRoomInstance","getFederatedRoomByInternalId","internalRoomId","getExternalRoomId","getInternalRoomById","createFederatedRoom","federatedRoom","usernameOrId","getCreatorUsername","getCreatorId","Error","roomName","getDisplayName","replace","trim","owner","findOneByUsernameIgnoringCase","rid","_id","getRoomType","roomId","createOrUpdateByLocalRoomId","getExternalId","setAsFederated","removeDirectMessageRoom","getInternalId","Promise","all","removeById","removeByRoomId","onTrash","doc","removeByLocalRoomId","createFederatedRoomForDirectMessage","creatorId","readonly","excludeSelf","extraData","undefined","getMembersUsernames","creator","getDirectMessageFederatedRoomByUserIds","userIds","findOneDirectRoomContainingAllUserIDs","inviteeUser","inviterUser","getInternalReference","addUsersToRoomWhenJoinExternalPublicRoom","federatedUsers","map","federatedUser","internalUser","subscription","findOneByRoomIdAndUserId","user","insertedId","createWithRoomAndUser","ts","Date","filter","Boolean","affectedUser","byUser","userHasBeenRemoved","options","isUserAlreadyJoined","internalUserId","projection","updateRoomType","roomType","setRoomTypeById","updateAllRoomTypesByRoomId","updateDisplayRoomName","getName","displayName","internalReference","setFnameById","updateNameAndFnameByRoomId","saveSystemMessage","updateRoomName","setRoomNameById","updateRoomTopic","getTopic","members","usernames","username","createWithInternalReference","updateFederatedRoomByInternalRoomId","getInternalRoomRolesByUserId","roles","applyRoomRolesToUser","_ref","fromUser","targetFederatedUser","notifyChannel","rolesToAdd","rolesToRemove","uid","currentRoles","toAdd","role","includes","toRemove","whoDidTheChange","getUsername","length","addRolesResponse","addRolesByUserId","modifiedCount","removeRolesResponse","removeRolesByUserId","get","notifyUIAboutRoomRolesChange","addedRoles","removedRoles","eventsForAddedRoles","createRoleUpdateEvent","eventsForRemovedRoles","forEach","event","broadcast","action","type","u","name","scope","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/infrastructure/rocket-chat/adapters/Room.ts"],"sourcesContent":["import { api, Message } from '@rocket.chat/core-services';\nimport type { IDirectMessageRoom, IRoom, IUser } from '@rocket.chat/core-typings';\nimport { isDirectMessageRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, MatrixBridgedRoom, Users } from '@rocket.chat/models';\n\nimport { saveRoomTopic } from '../../../../../../app/channel-settings/server';\nimport { addUserToRoom } from '../../../../../../app/lib/server/functions/addUserToRoom';\nimport { createRoom } from '../../../../../../app/lib/server/functions/createRoom';\nimport { removeUserFromRoom } from '../../../../../../app/lib/server/functions/removeUserFromRoom';\nimport {\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChangedByRoomIdAndUserId,\n} from '../../../../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../../../../app/settings/server';\nimport { getDefaultSubscriptionPref } from '../../../../../../app/utils/lib/getDefaultSubscriptionPref';\nimport { getValidRoomName } from '../../../../../../app/utils/server/lib/getValidRoomName';\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport type { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\nimport type { ROCKET_CHAT_FEDERATION_ROLES } from '../definitions/FederatedRoomInternalRoles';\nimport { getFederatedUserByInternalUsername } from './User';\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport class RocketChatRoomAdapter {\n\tpublic async getFederatedRoomByExternalId(externalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst internalBridgedRoomId = await MatrixBridgedRoom.getLocalRoomId(externalRoomId);\n\t\tif (!internalBridgedRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalBridgedRoomId);\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getFederatedRoomByInternalId(internalRoomId: string): Promise<FederatedRoom | undefined> {\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(internalRoomId);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await Rooms.findOneById(internalRoomId);\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async getInternalRoomById(internalRoomId: string): Promise<IRoom | null> {\n\t\treturn Rooms.findOneById(internalRoomId);\n\t}\n\n\tpublic async createFederatedRoom(federatedRoom: FederatedRoom): Promise<string> {\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || federatedRoom.getCreatorId();\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tconst roomName = await getValidRoomName(\n\t\t\t(federatedRoom.getDisplayName() || '')\n\t\t\t\t.replace(/[^a-zA-Z0-9 ]/g, '')\n\t\t\t\t.trim()\n\t\t\t\t.replace(/ /g, '-'),\n\t\t);\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(federatedRoom.getRoomType(), roomName, owner);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async removeDirectMessageRoom(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst roomId = federatedRoom.getInternalId();\n\n\t\tawait Promise.all([\n\t\t\tRooms.removeById(roomId),\n\t\t\tSubscriptions.removeByRoomId(roomId, {\n\t\t\t\tasync onTrash(doc) {\n\t\t\t\t\tvoid notifyOnSubscriptionChanged(doc, 'removed');\n\t\t\t\t},\n\t\t\t}),\n\t\t\tMatrixBridgedRoom.removeByLocalRoomId(roomId),\n\t\t]);\n\t}\n\n\tpublic async createFederatedRoomForDirectMessage(federatedRoom: DirectMessageFederatedRoom): Promise<string> {\n\t\tconst creatorId = federatedRoom.getCreatorId();\n\t\tconst usernameOrId = federatedRoom.getCreatorUsername() || creatorId;\n\t\tif (!usernameOrId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\t\tif (!creatorId) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst readonly = false;\n\t\tconst excludeSelf = false;\n\t\tconst extraData = undefined;\n\n\t\tconst owner = await Users.findOneByUsernameIgnoringCase(usernameOrId);\n\t\tif (!owner) {\n\t\t\tthrow new Error('Cannot create a room without a creator');\n\t\t}\n\n\t\tconst { rid, _id } = await createRoom(\n\t\t\tfederatedRoom.getRoomType(),\n\t\t\tfederatedRoom.getDisplayName(),\n\t\t\towner,\n\t\t\tfederatedRoom.getMembersUsernames(),\n\t\t\texcludeSelf,\n\t\t\treadonly,\n\t\t\textraData,\n\t\t\t{ creator: creatorId },\n\t\t);\n\t\tconst roomId = rid || _id;\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\troomId,\n\t\t\tfederatedRoom.getExternalId(),\n\t\t\textractServerNameFromExternalIdentifier(federatedRoom.getExternalId()),\n\t\t);\n\t\tawait Rooms.setAsFederated(roomId);\n\n\t\treturn roomId;\n\t}\n\n\tpublic async getDirectMessageFederatedRoomByUserIds(userIds: string[]): Promise<FederatedRoom | undefined> {\n\t\tconst room = await Rooms.findOneDirectRoomContainingAllUserIDs(userIds);\n\t\tif (!room) {\n\t\t\treturn;\n\t\t}\n\t\tconst externalRoomId = await MatrixBridgedRoom.getExternalRoomId(room._id);\n\t\tif (!externalRoomId) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room) {\n\t\t\treturn this.createFederatedRoomInstance(externalRoomId, room);\n\t\t}\n\t}\n\n\tpublic async addUserToRoom(federatedRoom: FederatedRoom, inviteeUser: FederatedUser, inviterUser?: FederatedUser): Promise<void> {\n\t\tawait addUserToRoom(federatedRoom.getInternalId(), inviteeUser.getInternalReference(), inviterUser?.getInternalReference());\n\t}\n\n\tpublic async addUsersToRoomWhenJoinExternalPublicRoom(federatedUsers: FederatedUser[], federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst room = await Rooms.findOneById(federatedRoom.getInternalId());\n\t\tif (!room) {\n\t\t\tthrow new Error('Room not found - addUsersToRoomWhenJoinExternalPublicRoom');\n\t\t}\n\t\tawait Promise.all(\n\t\t\tfederatedUsers\n\t\t\t\t.map(async (federatedUser) => {\n\t\t\t\t\tconst internalUser = await Users.findOneById(federatedUser.getInternalId());\n\t\t\t\t\tif (!internalUser) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(federatedRoom.getInternalId(), internalUser._id);\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = federatedUser.getInternalReference();\n\t\t\t\t\tconst { insertedId } = await Subscriptions.createWithRoomAndUser(room, user, {\n\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t...getDefaultSubscriptionPref(user),\n\t\t\t\t\t});\n\t\t\t\t\tif (insertedId) {\n\t\t\t\t\t\tvoid notifyOnSubscriptionChangedById(insertedId, 'inserted');\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(Boolean),\n\t\t);\n\t}\n\n\tpublic async removeUserFromRoom(federatedRoom: FederatedRoom, affectedUser: FederatedUser, byUser: FederatedUser): Promise<void> {\n\t\tconst userHasBeenRemoved = byUser.getInternalId() !== affectedUser.getInternalId();\n\t\tconst options = userHasBeenRemoved ? { byUser: byUser.getInternalReference() } : undefined;\n\t\tawait removeUserFromRoom(federatedRoom.getInternalId(), affectedUser.getInternalReference(), options);\n\t}\n\n\tpublic async isUserAlreadyJoined(internalRoomId: string, internalUserId: string): Promise<boolean> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { _id: 1 } });\n\n\t\treturn Boolean(subscription);\n\t}\n\n\tpublic async updateRoomType(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomType = federatedRoom.getRoomType();\n\n\t\tawait Rooms.setRoomTypeById(rid, roomType);\n\t\tawait Subscriptions.updateAllRoomTypesByRoomId(rid, roomType);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateDisplayRoomName(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\t\tconst internalReference = federatedUser.getInternalReference();\n\n\t\tawait Rooms.setFnameById(rid, displayName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\t\tawait Message.saveSystemMessage('r', rid, displayName, internalReference);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomName(federatedRoom: FederatedRoom): Promise<void> {\n\t\tconst rid = federatedRoom.getInternalId();\n\t\tconst roomName = federatedRoom.getName() || '';\n\t\tconst displayName = federatedRoom.getDisplayName() || '';\n\n\t\tawait Rooms.setRoomNameById(rid, roomName);\n\t\tawait Subscriptions.updateNameAndFnameByRoomId(rid, roomName, displayName);\n\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tpublic async updateRoomTopic(federatedRoom: FederatedRoom, federatedUser: FederatedUser): Promise<void> {\n\t\tawait saveRoomTopic(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedRoom.getTopic(),\n\t\t\tfederatedUser.getInternalReference() as WithRequiredProperty<IUser, 'username'>,\n\t\t);\n\t}\n\n\tprivate async createFederatedRoomInstance<T extends IRoom | IDirectMessageRoom>(externalRoomId: string, room: T): Promise<FederatedRoom> {\n\t\tif (isDirectMessageRoom(room)) {\n\t\t\tconst members = (await Promise.all(\n\t\t\t\t(room.usernames || []).map((username) => getFederatedUserByInternalUsername(username)).filter(Boolean),\n\t\t\t)) as FederatedUser[];\n\t\t\treturn DirectMessageFederatedRoom.createWithInternalReference(externalRoomId, room, members);\n\t\t}\n\n\t\treturn FederatedRoom.createWithInternalReference(externalRoomId, room);\n\t}\n\n\tpublic async updateFederatedRoomByInternalRoomId(internalRoomId: string, externalRoomId: string): Promise<void> {\n\t\tawait MatrixBridgedRoom.createOrUpdateByLocalRoomId(\n\t\t\tinternalRoomId,\n\t\t\texternalRoomId,\n\t\t\textractServerNameFromExternalIdentifier(externalRoomId),\n\t\t);\n\t\tawait Rooms.setAsFederated(internalRoomId);\n\t}\n\n\tpublic async getInternalRoomRolesByUserId(internalRoomId: string, internalUserId: string): Promise<string[]> {\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(internalRoomId, internalUserId, { projection: { roles: 1 } });\n\t\tif (!subscription) {\n\t\t\treturn [];\n\t\t}\n\t\treturn subscription.roles || [];\n\t}\n\n\tpublic async applyRoomRolesToUser({\n\t\tfederatedRoom,\n\t\tfromUser,\n\t\ttargetFederatedUser,\n\t\tnotifyChannel,\n\t\trolesToAdd,\n\t\trolesToRemove,\n\t}: {\n\t\tfederatedRoom: FederatedRoom;\n\t\ttargetFederatedUser: FederatedUser;\n\t\tfromUser: FederatedUser;\n\t\trolesToAdd: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\trolesToRemove: ROCKET_CHAT_FEDERATION_ROLES[];\n\t\tnotifyChannel: boolean;\n\t}): Promise<void> {\n\t\tconst uid = targetFederatedUser.getInternalId();\n\t\tconst rid = federatedRoom.getInternalId();\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, uid, { projection: { roles: 1 } });\n\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { roles: currentRoles = [] } = subscription;\n\t\tconst toAdd = rolesToAdd.filter((role) => !currentRoles.includes(role));\n\t\tconst toRemove = rolesToRemove.filter((role) => currentRoles.includes(role));\n\t\tconst whoDidTheChange = {\n\t\t\t_id: fromUser.getInternalId(),\n\t\t\tusername: fromUser.getUsername(),\n\t\t};\n\n\t\tif (toAdd.length > 0) {\n\t\t\tconst addRolesResponse = await Subscriptions.addRolesByUserId(uid, toAdd, rid);\n\t\t\tif (addRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoAdd.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-added',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (toRemove.length > 0) {\n\t\t\tconst removeRolesResponse = await Subscriptions.removeRolesByUserId(uid, toRemove, rid);\n\t\t\tif (removeRolesResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(rid, uid);\n\t\t\t}\n\n\t\t\tif (notifyChannel) {\n\t\t\t\tawait Promise.all(\n\t\t\t\t\ttoRemove.map((role) =>\n\t\t\t\t\t\tMessage.saveSystemMessage(\n\t\t\t\t\t\t\t'subscription-role-removed',\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttargetFederatedUser.getInternalReference().username || '',\n\t\t\t\t\t\t\twhoDidTheChange,\n\t\t\t\t\t\t\t{ role },\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tthis.notifyUIAboutRoomRolesChange(targetFederatedUser, federatedRoom, toAdd, toRemove);\n\t\t}\n\t}\n\n\tprivate notifyUIAboutRoomRolesChange(\n\t\ttargetFederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\taddedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t\tremovedRoles: ROCKET_CHAT_FEDERATION_ROLES[],\n\t): void {\n\t\tconst eventsForAddedRoles = addedRoles.map((role) => this.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'added'));\n\t\tconst eventsForRemovedRoles = removedRoles.map((role) =>\n\t\t\tthis.createRoleUpdateEvent(targetFederatedUser, federatedRoom, role, 'removed'),\n\t\t);\n\t\t[...eventsForAddedRoles, ...eventsForRemovedRoles].forEach((event) => api.broadcast('user.roleUpdate', event));\n\t}\n\n\tprivate createRoleUpdateEvent(\n\t\tfederatedUser: FederatedUser,\n\t\tfederatedRoom: FederatedRoom,\n\t\trole: string,\n\t\taction: 'added' | 'removed',\n\t): {\n\t\ttype: 'added' | 'removed' | 'changed';\n\t\t_id: string;\n\t\tu?: { _id: IUser['_id']; username: IUser['username']; name: IUser['name'] };\n\t\tscope?: string;\n\t} {\n\t\treturn {\n\t\t\ttype: action,\n\t\t\t_id: role,\n\t\t\tu: {\n\t\t\t\t_id: federatedUser.getInternalId(),\n\t\t\t\tusername: federatedUser.getUsername(),\n\t\t\t\tname: federatedUser.getName(),\n\t\t\t},\n\t\t\tscope: federatedRoom.getInternalId(),\n\t\t};\n\t}\n}\n"],"mappings":";;;IAAA,IAAAA,aAAc;IAAAC,MAAS,CAAAC,IAAM,uCAA6B;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAA1DH,MAAA,CAAOI,MAAK,CAAE;MAAAC,qBAAe,EAAAA,CAAA,KAAAA;IAA6B;IAAA,IAAAC,GAAA,EAAAC,OAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAK,IAAAH,CAAA;QAAAG,GAAA,GAAAH,CAAA;MAAA;MAAAI,QAAAJ,CAAA;QAAAI,OAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,mBAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,oBAAAL,CAAA;QAAAK,mBAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,KAAA,EAAAC,aAAA,EAAAC,iBAAA,EAAAC,KAAA;IAAAZ,MAAA,CAAAC,IAAA;MAAAQ,MAAAN,CAAA;QAAAM,KAAA,GAAAN,CAAA;MAAA;MAAAO,cAAAP,CAAA;QAAAO,aAAA,GAAAP,CAAA;MAAA;MAAAQ,kBAAAR,CAAA;QAAAQ,iBAAA,GAAAR,CAAA;MAAA;MAAAS,MAAAT,CAAA;QAAAS,KAAA,GAAAT,CAAA;MAAA;IAAA;IAAA,IAAAU,aAAA;IAAAb,MAAA,CAAAC,IAAA;MAAAY,cAAAV,CAAA;QAAAU,aAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,aAAA;IAAAd,MAAA,CAAAC,IAAA;MAAAa,cAAAX,CAAA;QAAAW,aAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,UAAA;IAAAf,MAAA,CAAAC,IAAA;MAAAc,WAAAZ,CAAA;QAAAY,UAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,kBAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAe,mBAAAb,CAAA;QAAAa,kBAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,2BAAA,EAAAC,+BAAA,EAAAC,mCAAA,EAAAC,4CAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAgB,4BAAAd,CAAA;QAAAc,2BAAA,GAAAd,CAAA;MAAA;MAAAe,gCAAAf,CAAA;QAAAe,+BAAA,GAAAf,CAAA;MAAA;MAAAgB,oCAAAhB,CAAA;QAAAgB,mCAAA,GAAAhB,CAAA;MAAA;MAAAiB,6CAAAjB,CAAA;QAAAiB,4CAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,QAAA;IAAArB,MAAA,CAAAC,IAAA;MAAAoB,SAAAlB,CAAA;QAAAkB,QAAA,GAAAlB,CAAA;MAAA;IAAA;IAAA,IAAAmB,0BAAA;IAAAtB,MAAA,CAAAC,IAAA;MAAAqB,2BAAAnB,CAAA;QAAAmB,0BAAA,GAAAnB,CAAA;MAAA;IAAA;IAAA,IAAAoB,gBAAA;IAAAvB,MAAA,CAAAC,IAAA;MAAAsB,iBAAApB,CAAA;QAAAoB,gBAAA,GAAApB,CAAA;MAAA;IAAA;IAAA,IAAAqB,0BAAA,EAAAC,aAAA;IAAAzB,MAAA,CAAAC,IAAA;MAAAuB,2BAAArB,CAAA;QAAAqB,0BAAA,GAAArB,CAAA;MAAA;MAAAsB,cAAAtB,CAAA;QAAAsB,aAAA,GAAAtB,CAAA;MAAA;IAAA;IAAA,IAAAuB,uCAAA;IAAA1B,MAAA,CAAAC,IAAA;MAAAyB,wCAAAvB,CAAA;QAAAuB,uCAAA,GAAAvB,CAAA;MAAA;IAAA;IAAA,IAAAwB,kCAAA;IAAA3B,MAAA,CAAAC,IAAA;MAAA0B,mCAAAxB,CAAA;QAAAwB,kCAAA,GAAAxB,CAAA;MAAA;IAAA;IAAA,IAAAyB,oBAAA,WAAAA,oBAAA;IA4BpD,MAAOvB,qBAAqB;MAC1B,MAAMwB,4BAA4BA,CAACC,cAAsB;QAC/D,MAAMC,qBAAqB,GAAG,MAAMpB,iBAAiB,CAACqB,cAAc,CAACF,cAAc,CAAC;QACpF,IAAI,CAACC,qBAAqB,EAAE;UAC3B;QACD;QACA,MAAME,IAAI,GAAG,MAAMxB,KAAK,CAACyB,WAAW,CAACH,qBAAqB,CAAC;QAC3D,IAAIE,IAAI,EAAE;UACT,OAAO,IAAI,CAACE,2BAA2B,CAACL,cAAc,EAAEG,IAAI,CAAC;QAC9D;MACD;MAEO,MAAMG,4BAA4BA,CAACC,cAAsB;QAC/D,MAAMP,cAAc,GAAG,MAAMnB,iBAAiB,CAAC2B,iBAAiB,CAACD,cAAc,CAAC;QAChF,IAAI,CAACP,cAAc,EAAE;UACpB;QACD;QACA,MAAMG,IAAI,GAAG,MAAMxB,KAAK,CAACyB,WAAW,CAACG,cAAc,CAAC;QAEpD,IAAIJ,IAAI,EAAE;UACT,OAAO,IAAI,CAACE,2BAA2B,CAACL,cAAc,EAAEG,IAAI,CAAC;QAC9D;MACD;MAEO,MAAMM,mBAAmBA,CAACF,cAAsB;QACtD,OAAO5B,KAAK,CAACyB,WAAW,CAACG,cAAc,CAAC;MACzC;MAEO,MAAMG,mBAAmBA,CAACC,aAA4B;QAC5D,MAAMC,YAAY,GAAGD,aAAa,CAACE,kBAAkB,EAAE,IAAIF,aAAa,CAACG,YAAY,EAAE;QACvF,IAAI,CAACF,YAAY,EAAE;UAClB,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QACA,MAAMC,QAAQ,GAAG,MAAMvB,gBAAgB,CACtC,CAACkB,aAAa,CAACM,cAAc,EAAE,IAAI,EAAE,EACnCC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAC7BC,IAAI,EAAE,CACND,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CACpB;QACD,MAAME,KAAK,GAAG,MAAMtC,KAAK,CAACuC,6BAA6B,CAACT,YAAY,CAAC;QACrE,IAAI,CAACQ,KAAK,EAAE;UACX,MAAM,IAAIL,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QAEA,MAAM;UAAEO,GAAG;UAAEC;QAAG,CAAE,GAAG,MAAMtC,UAAU,CAAC0B,aAAa,CAACa,WAAW,EAAE,EAAER,QAAQ,EAAEI,KAAK,CAAC;QACnF,MAAMK,MAAM,GAAGH,GAAG,IAAIC,GAAG;QACzB,MAAM1C,iBAAiB,CAAC6C,2BAA2B,CAClDD,MAAM,EACNd,aAAa,CAACgB,aAAa,EAAE,EAC7B/B,uCAAuC,CAACe,aAAa,CAACgB,aAAa,EAAE,CAAC,CACtE;QACD,MAAMhD,KAAK,CAACiD,cAAc,CAACH,MAAM,CAAC;QAElC,OAAOA,MAAM;MACd;MAEO,MAAMI,uBAAuBA,CAAClB,aAA4B;QAChE,MAAMc,MAAM,GAAGd,aAAa,CAACmB,aAAa,EAAE;QAE5C,MAAMC,OAAO,CAACC,GAAG,CAAC,CACjBrD,KAAK,CAACsD,UAAU,CAACR,MAAM,CAAC,EACxB7C,aAAa,CAACsD,cAAc,CAACT,MAAM,EAAE;UACpC,MAAMU,OAAOA,CAACC,GAAG;YAChB,KAAKjD,2BAA2B,CAACiD,GAAG,EAAE,SAAS,CAAC;UACjD;SACA,CAAC,EACFvD,iBAAiB,CAACwD,mBAAmB,CAACZ,MAAM,CAAC,CAC7C,CAAC;MACH;MAEO,MAAMa,mCAAmCA,CAAC3B,aAAyC;QACzF,MAAM4B,SAAS,GAAG5B,aAAa,CAACG,YAAY,EAAE;QAC9C,MAAMF,YAAY,GAAGD,aAAa,CAACE,kBAAkB,EAAE,IAAI0B,SAAS;QACpE,IAAI,CAAC3B,YAAY,EAAE;UAClB,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QACA,IAAI,CAACwB,SAAS,EAAE;UACf,MAAM,IAAIxB,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QAEA,MAAMyB,QAAQ,GAAG,KAAK;QACtB,MAAMC,WAAW,GAAG,KAAK;QACzB,MAAMC,SAAS,GAAGC,SAAS;QAE3B,MAAMvB,KAAK,GAAG,MAAMtC,KAAK,CAACuC,6BAA6B,CAACT,YAAY,CAAC;QACrE,IAAI,CAACQ,KAAK,EAAE;UACX,MAAM,IAAIL,KAAK,CAAC,wCAAwC,CAAC;QAC1D;QAEA,MAAM;UAAEO,GAAG;UAAEC;QAAG,CAAE,GAAG,MAAMtC,UAAU,CACpC0B,aAAa,CAACa,WAAW,EAAE,EAC3Bb,aAAa,CAACM,cAAc,EAAE,EAC9BG,KAAK,EACLT,aAAa,CAACiC,mBAAmB,EAAE,EACnCH,WAAW,EACXD,QAAQ,EACRE,SAAS,EACT;UAAEG,OAAO,EAAEN;QAAS,CAAE,CACtB;QACD,MAAMd,MAAM,GAAGH,GAAG,IAAIC,GAAG;QACzB,MAAM1C,iBAAiB,CAAC6C,2BAA2B,CAClDD,MAAM,EACNd,aAAa,CAACgB,aAAa,EAAE,EAC7B/B,uCAAuC,CAACe,aAAa,CAACgB,aAAa,EAAE,CAAC,CACtE;QACD,MAAMhD,KAAK,CAACiD,cAAc,CAACH,MAAM,CAAC;QAElC,OAAOA,MAAM;MACd;MAEO,MAAMqB,sCAAsCA,CAACC,OAAiB;QACpE,MAAM5C,IAAI,GAAG,MAAMxB,KAAK,CAACqE,qCAAqC,CAACD,OAAO,CAAC;QACvE,IAAI,CAAC5C,IAAI,EAAE;UACV;QACD;QACA,MAAMH,cAAc,GAAG,MAAMnB,iBAAiB,CAAC2B,iBAAiB,CAACL,IAAI,CAACoB,GAAG,CAAC;QAC1E,IAAI,CAACvB,cAAc,EAAE;UACpB;QACD;QAEA,IAAIG,IAAI,EAAE;UACT,OAAO,IAAI,CAACE,2BAA2B,CAACL,cAAc,EAAEG,IAAI,CAAC;QAC9D;MACD;MAEO,MAAMnB,aAAaA,CAAC2B,aAA4B,EAAEsC,WAA0B,EAAEC,WAA2B;QAC/G,MAAMlE,aAAa,CAAC2B,aAAa,CAACmB,aAAa,EAAE,EAAEmB,WAAW,CAACE,oBAAoB,EAAE,EAAED,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEC,oBAAoB,EAAE,CAAC;MAC5H;MAEO,MAAMC,wCAAwCA,CAACC,cAA+B,EAAE1C,aAA4B;QAClH,MAAMR,IAAI,GAAG,MAAMxB,KAAK,CAACyB,WAAW,CAACO,aAAa,CAACmB,aAAa,EAAE,CAAC;QACnE,IAAI,CAAC3B,IAAI,EAAE;UACV,MAAM,IAAIY,KAAK,CAAC,2DAA2D,CAAC;QAC7E;QACA,MAAMgB,OAAO,CAACC,GAAG,CAChBqB,cAAc,CACZC,GAAG,CAAC,MAAOC,aAAa,IAAI;UAC5B,MAAMC,YAAY,GAAG,MAAM1E,KAAK,CAACsB,WAAW,CAACmD,aAAa,CAACzB,aAAa,EAAE,CAAC;UAC3E,IAAI,CAAC0B,YAAY,EAAE;YAClB;UACD;UACA,MAAMC,YAAY,GAAG,MAAM7E,aAAa,CAAC8E,wBAAwB,CAAC/C,aAAa,CAACmB,aAAa,EAAE,EAAE0B,YAAY,CAACjC,GAAG,CAAC;UAClH,IAAIkC,YAAY,EAAE;YACjB;UACD;UAEA,MAAME,IAAI,GAAGJ,aAAa,CAACJ,oBAAoB,EAAE;UACjD,MAAM;YAAES;UAAU,CAAE,GAAG,MAAMhF,aAAa,CAACiF,qBAAqB,CAAC1D,IAAI,EAAEwD,IAAI,EAAA1F,aAAA;YAC1E6F,EAAE,EAAE,IAAIC,IAAI;UAAE,GACXvE,0BAA0B,CAACmE,IAAI,CAAC,CACnC,CAAC;UACF,IAAIC,UAAU,EAAE;YACf,KAAKxE,+BAA+B,CAACwE,UAAU,EAAE,UAAU,CAAC;UAC7D;QACD,CAAC,CAAC,CACDI,MAAM,CAACC,OAAO,CAAC,CACjB;MACF;MAEO,MAAM/E,kBAAkBA,CAACyB,aAA4B,EAAEuD,YAA2B,EAAEC,MAAqB;QAC/G,MAAMC,kBAAkB,GAAGD,MAAM,CAACrC,aAAa,EAAE,KAAKoC,YAAY,CAACpC,aAAa,EAAE;QAClF,MAAMuC,OAAO,GAAGD,kBAAkB,GAAG;UAAED,MAAM,EAAEA,MAAM,CAAChB,oBAAoB;QAAE,CAAE,GAAGR,SAAS;QAC1F,MAAMzD,kBAAkB,CAACyB,aAAa,CAACmB,aAAa,EAAE,EAAEoC,YAAY,CAACf,oBAAoB,EAAE,EAAEkB,OAAO,CAAC;MACtG;MAEO,MAAMC,mBAAmBA,CAAC/D,cAAsB,EAAEgE,cAAsB;QAC9E,MAAMd,YAAY,GAAG,MAAM7E,aAAa,CAAC8E,wBAAwB,CAACnD,cAAc,EAAEgE,cAAc,EAAE;UAAEC,UAAU,EAAE;YAAEjD,GAAG,EAAE;UAAC;QAAE,CAAE,CAAC;QAE7H,OAAO0C,OAAO,CAACR,YAAY,CAAC;MAC7B;MAEO,MAAMgB,cAAcA,CAAC9D,aAA4B;QACvD,MAAMW,GAAG,GAAGX,aAAa,CAACmB,aAAa,EAAE;QACzC,MAAM4C,QAAQ,GAAG/D,aAAa,CAACa,WAAW,EAAE;QAE5C,MAAM7C,KAAK,CAACgG,eAAe,CAACrD,GAAG,EAAEoD,QAAQ,CAAC;QAC1C,MAAM9F,aAAa,CAACgG,0BAA0B,CAACtD,GAAG,EAAEoD,QAAQ,CAAC;QAE7D,KAAKrF,mCAAmC,CAACiC,GAAG,CAAC;MAC9C;MAEO,MAAMuD,qBAAqBA,CAAClE,aAA4B,EAAE4C,aAA4B;QAC5F,MAAMjC,GAAG,GAAGX,aAAa,CAACmB,aAAa,EAAE;QACzC,MAAMd,QAAQ,GAAGL,aAAa,CAACmE,OAAO,EAAE,IAAI,EAAE;QAC9C,MAAMC,WAAW,GAAGpE,aAAa,CAACM,cAAc,EAAE,IAAI,EAAE;QACxD,MAAM+D,iBAAiB,GAAGzB,aAAa,CAACJ,oBAAoB,EAAE;QAE9D,MAAMxE,KAAK,CAACsG,YAAY,CAAC3D,GAAG,EAAEyD,WAAW,CAAC;QAC1C,MAAMnG,aAAa,CAACsG,0BAA0B,CAAC5D,GAAG,EAAEN,QAAQ,EAAE+D,WAAW,CAAC;QAC1E,MAAMtG,OAAO,CAAC0G,iBAAiB,CAAC,GAAG,EAAE7D,GAAG,EAAEyD,WAAW,EAAEC,iBAAiB,CAAC;QAEzE,KAAK3F,mCAAmC,CAACiC,GAAG,CAAC;MAC9C;MAEO,MAAM8D,cAAcA,CAACzE,aAA4B;QACvD,MAAMW,GAAG,GAAGX,aAAa,CAACmB,aAAa,EAAE;QACzC,MAAMd,QAAQ,GAAGL,aAAa,CAACmE,OAAO,EAAE,IAAI,EAAE;QAC9C,MAAMC,WAAW,GAAGpE,aAAa,CAACM,cAAc,EAAE,IAAI,EAAE;QAExD,MAAMtC,KAAK,CAAC0G,eAAe,CAAC/D,GAAG,EAAEN,QAAQ,CAAC;QAC1C,MAAMpC,aAAa,CAACsG,0BAA0B,CAAC5D,GAAG,EAAEN,QAAQ,EAAE+D,WAAW,CAAC;QAE1E,KAAK1F,mCAAmC,CAACiC,GAAG,CAAC;MAC9C;MAEO,MAAMgE,eAAeA,CAAC3E,aAA4B,EAAE4C,aAA4B;QACtF,MAAMxE,aAAa,CAClB4B,aAAa,CAACmB,aAAa,EAAE,EAC7BnB,aAAa,CAAC4E,QAAQ,EAAE,EACxBhC,aAAa,CAACJ,oBAAoB,EAA6C,CAC/E;MACF;MAEQ,MAAM9C,2BAA2BA,CAAuCL,cAAsB,EAAEG,IAAO;QAC9G,IAAIzB,mBAAmB,CAACyB,IAAI,CAAC,EAAE;UAC9B,MAAMqF,OAAO,GAAI,MAAMzD,OAAO,CAACC,GAAG,CACjC,CAAC7B,IAAI,CAACsF,SAAS,IAAI,EAAE,EAAEnC,GAAG,CAAEoC,QAAQ,IAAK7F,kCAAkC,CAAC6F,QAAQ,CAAC,CAAC,CAAC1B,MAAM,CAACC,OAAO,CAAC,CAClF;UACrB,OAAOvE,0BAA0B,CAACiG,2BAA2B,CAAC3F,cAAc,EAAEG,IAAI,EAAEqF,OAAO,CAAC;QAC7F;QAEA,OAAO7F,aAAa,CAACgG,2BAA2B,CAAC3F,cAAc,EAAEG,IAAI,CAAC;MACvE;MAEO,MAAMyF,mCAAmCA,CAACrF,cAAsB,EAAEP,cAAsB;QAC9F,MAAMnB,iBAAiB,CAAC6C,2BAA2B,CAClDnB,cAAc,EACdP,cAAc,EACdJ,uCAAuC,CAACI,cAAc,CAAC,CACvD;QACD,MAAMrB,KAAK,CAACiD,cAAc,CAACrB,cAAc,CAAC;MAC3C;MAEO,MAAMsF,4BAA4BA,CAACtF,cAAsB,EAAEgE,cAAsB;QACvF,MAAMd,YAAY,GAAG,MAAM7E,aAAa,CAAC8E,wBAAwB,CAACnD,cAAc,EAAEgE,cAAc,EAAE;UAAEC,UAAU,EAAE;YAAEsB,KAAK,EAAE;UAAC;QAAE,CAAE,CAAC;QAC/H,IAAI,CAACrC,YAAY,EAAE;UAClB,OAAO,EAAE;QACV;QACA,OAAOA,YAAY,CAACqC,KAAK,IAAI,EAAE;MAChC;MAEO,MAAMC,oBAAoBA,CAAAC,IAAA,EAchC;QAAA,IAdiC;UACjCrF,aAAa;UACbsF,QAAQ;UACRC,mBAAmB;UACnBC,aAAa;UACbC,UAAU;UACVC;QAAa,CAQb,GAAAL,IAAA;QACA,MAAMM,GAAG,GAAGJ,mBAAmB,CAACpE,aAAa,EAAE;QAC/C,MAAMR,GAAG,GAAGX,aAAa,CAACmB,aAAa,EAAE;QAEzC,MAAM2B,YAAY,GAAG,MAAM7E,aAAa,CAAC8E,wBAAwB,CAACpC,GAAG,EAAEgF,GAAG,EAAE;UAAE9B,UAAU,EAAE;YAAEsB,KAAK,EAAE;UAAC;QAAE,CAAE,CAAC;QAEzG,IAAI,CAACrC,YAAY,EAAE;UAClB;QACD;QAEA,MAAM;UAAEqC,KAAK,EAAES,YAAY,GAAG;QAAE,CAAE,GAAG9C,YAAY;QACjD,MAAM+C,KAAK,GAAGJ,UAAU,CAACpC,MAAM,CAAEyC,IAAI,IAAK,CAACF,YAAY,CAACG,QAAQ,CAACD,IAAI,CAAC,CAAC;QACvE,MAAME,QAAQ,GAAGN,aAAa,CAACrC,MAAM,CAAEyC,IAAI,IAAKF,YAAY,CAACG,QAAQ,CAACD,IAAI,CAAC,CAAC;QAC5E,MAAMG,eAAe,GAAG;UACvBrF,GAAG,EAAE0E,QAAQ,CAACnE,aAAa,EAAE;UAC7B4D,QAAQ,EAAEO,QAAQ,CAACY,WAAW;SAC9B;QAED,IAAIL,KAAK,CAACM,MAAM,GAAG,CAAC,EAAE;UACrB,MAAMC,gBAAgB,GAAG,MAAMnI,aAAa,CAACoI,gBAAgB,CAACV,GAAG,EAAEE,KAAK,EAAElF,GAAG,CAAC;UAC9E,IAAIyF,gBAAgB,CAACE,aAAa,EAAE;YACnC,KAAK3H,4CAA4C,CAACgC,GAAG,EAAEgF,GAAG,CAAC;UAC5D;UAEA,IAAIH,aAAa,EAAE;YAClB,MAAMpE,OAAO,CAACC,GAAG,CAChBwE,KAAK,CAAClD,GAAG,CAAEmD,IAAI,IACdhI,OAAO,CAAC0G,iBAAiB,CACxB,yBAAyB,EACzB7D,GAAG,EACH4E,mBAAmB,CAAC/C,oBAAoB,EAAE,CAACuC,QAAQ,IAAI,EAAE,EACzDkB,eAAe,EACf;cAAEH;YAAI,CAAE,CACR,CACD,CACD;UACF;QACD;QAEA,IAAIE,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAE;UACxB,MAAMI,mBAAmB,GAAG,MAAMtI,aAAa,CAACuI,mBAAmB,CAACb,GAAG,EAAEK,QAAQ,EAAErF,GAAG,CAAC;UACvF,IAAI4F,mBAAmB,CAACD,aAAa,EAAE;YACtC,KAAK3H,4CAA4C,CAACgC,GAAG,EAAEgF,GAAG,CAAC;UAC5D;UAEA,IAAIH,aAAa,EAAE;YAClB,MAAMpE,OAAO,CAACC,GAAG,CAChB2E,QAAQ,CAACrD,GAAG,CAAEmD,IAAI,IACjBhI,OAAO,CAAC0G,iBAAiB,CACxB,2BAA2B,EAC3B7D,GAAG,EACH4E,mBAAmB,CAAC/C,oBAAoB,EAAE,CAACuC,QAAQ,IAAI,EAAE,EACzDkB,eAAe,EACf;cAAEH;YAAI,CAAE,CACR,CACD,CACD;UACF;QACD;QAEA,IAAIlH,QAAQ,CAAC6H,GAAG,CAAC,iBAAiB,CAAC,EAAE;UACpC,IAAI,CAACC,4BAA4B,CAACnB,mBAAmB,EAAEvF,aAAa,EAAE6F,KAAK,EAAEG,QAAQ,CAAC;QACvF;MACD;MAEQU,4BAA4BA,CACnCnB,mBAAkC,EAClCvF,aAA4B,EAC5B2G,UAA0C,EAC1CC,YAA4C;QAE5C,MAAMC,mBAAmB,GAAGF,UAAU,CAAChE,GAAG,CAAEmD,IAAI,IAAK,IAAI,CAACgB,qBAAqB,CAACvB,mBAAmB,EAAEvF,aAAa,EAAE8F,IAAI,EAAE,OAAO,CAAC,CAAC;QACnI,MAAMiB,qBAAqB,GAAGH,YAAY,CAACjE,GAAG,CAAEmD,IAAI,IACnD,IAAI,CAACgB,qBAAqB,CAACvB,mBAAmB,EAAEvF,aAAa,EAAE8F,IAAI,EAAE,SAAS,CAAC,CAC/E;QACD,CAAC,GAAGe,mBAAmB,EAAE,GAAGE,qBAAqB,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKpJ,GAAG,CAACqJ,SAAS,CAAC,iBAAiB,EAAED,KAAK,CAAC,CAAC;MAC/G;MAEQH,qBAAqBA,CAC5BlE,aAA4B,EAC5B5C,aAA4B,EAC5B8F,IAAY,EACZqB,MAA2B;QAO3B,OAAO;UACNC,IAAI,EAAED,MAAM;UACZvG,GAAG,EAAEkF,IAAI;UACTuB,CAAC,EAAE;YACFzG,GAAG,EAAEgC,aAAa,CAACzB,aAAa,EAAE;YAClC4D,QAAQ,EAAEnC,aAAa,CAACsD,WAAW,EAAE;YACrCoB,IAAI,EAAE1E,aAAa,CAACuB,OAAO;WAC3B;UACDoD,KAAK,EAAEvH,aAAa,CAACmB,aAAa;SAClC;MACF;;IACAqG,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"118e2a04f7084b23022b34f644f39a663d699739"}
