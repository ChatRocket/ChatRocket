{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/providers/AuthenticationProvider/AuthenticationProvider.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/providers/AuthenticationProvider/AuthenticationProvider.tsx","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/providers/AuthenticationProvider/AuthenticationProvider.tsx","inputSourceMap":{"version":3,"file":"client/providers/AuthenticationProvider/AuthenticationProvider.tsx","sourceRoot":"","sources":["client/providers/AuthenticationProvider/AuthenticationProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { LoginServiceConfiguration } from '@rocket.chat/core-typings';\nimport { capitalize } from '@rocket.chat/string-helpers';\nimport { AuthenticationContext, useSetting } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\nimport type { ContextType, ReactElement, ReactNode } from 'react';\nimport React, { useMemo } from 'react';\n\nimport { loginServices } from '../../lib/loginServices';\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\n\nexport type LoginMethods = keyof typeof Meteor extends infer T ? (T extends `loginWith${string}` ? T : never) : never;\n\ntype AuthenticationProviderProps = {\n\tchildren: ReactNode;\n};\n\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting('LDAP_Enable', false);\n\tconst isCrowdEnabled = useSetting('CROWD_Enable', false);\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof AuthenticationContext> => ({\n\t\t\tloginWithToken: (token: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) =>\n\t\t\t\t\tMeteor.loginWithToken(token, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tMeteor[loginMethod](user, password, (error) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\tloginWithService: <T extends LoginServiceConfiguration>(serviceConfig: T): (() => Promise<true>) => {\n\t\t\t\tconst loginMethods: Record<string, string | undefined> = {\n\t\t\t\t\t'meteor-developer': 'MeteorDeveloperAccount',\n\t\t\t\t};\n\n\t\t\t\tconst { service: serviceName } = serviceConfig;\n\t\t\t\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\n\n\t\t\t\tconst loginWithService = `loginWith${loginMethods[serviceName] || capitalize(String(serviceName || ''))}`;\n\n\t\t\t\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\n\n\t\t\t\tif (!method) {\n\t\t\t\t\treturn () => Promise.reject(new Error('Login method not found'));\n\t\t\t\t}\n\n\t\t\t\treturn () =>\n\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\tmethod(clientConfig, (error: any): void => {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tqueryLoginServices: {\n\t\t\t\tgetCurrentValue: () => loginServices.getLoginServiceButtons(),\n\t\t\t\tsubscribe: (onStoreChange: () => void) => loginServices.on('changed', onStoreChange),\n\t\t\t},\n\t\t}),\n\t\t[loginMethod],\n\t);\n\n\treturn <AuthenticationContext.Provider children={children} value={contextValue} />;\n};\n\nexport default AuthenticationProvider;\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/providers/AuthenticationProvider/AuthenticationProvider.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/providers/AuthenticationProvider/AuthenticationProvider.tsx","inputSourceMap":{"version":3,"file":"client/providers/AuthenticationProvider/AuthenticationProvider.tsx","sourceRoot":"","sources":["client/providers/AuthenticationProvider/AuthenticationProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { LoginServiceConfiguration } from '@rocket.chat/core-typings';\nimport { capitalize } from '@rocket.chat/string-helpers';\nimport { AuthenticationContext, useSetting } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\nimport type { ContextType, ReactElement, ReactNode } from 'react';\nimport React, { useMemo } from 'react';\n\nimport { loginServices } from '../../lib/loginServices';\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\n\nexport type LoginMethods = keyof typeof Meteor extends infer T ? (T extends `loginWith${string}` ? T : never) : never;\n\ntype AuthenticationProviderProps = {\n\tchildren: ReactNode;\n};\n\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting('LDAP_Enable', false);\n\tconst isCrowdEnabled = useSetting('CROWD_Enable', false);\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof AuthenticationContext> => ({\n\t\t\tloginWithToken: (token: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) =>\n\t\t\t\t\tMeteor.loginWithToken(token, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tMeteor[loginMethod](user, password, (error) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\tloginWithService: <T extends LoginServiceConfiguration>(serviceConfig: T): (() => Promise<true>) => {\n\t\t\t\tconst loginMethods: Record<string, string | undefined> = {\n\t\t\t\t\t'meteor-developer': 'MeteorDeveloperAccount',\n\t\t\t\t};\n\n\t\t\t\tconst { service: serviceName } = serviceConfig;\n\t\t\t\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\n\n\t\t\t\tconst loginWithService = `loginWith${loginMethods[serviceName] || capitalize(String(serviceName || ''))}`;\n\n\t\t\t\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\n\n\t\t\t\tif (!method) {\n\t\t\t\t\treturn () => Promise.reject(new Error('Login method not found'));\n\t\t\t\t}\n\n\t\t\t\treturn () =>\n\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\tmethod(clientConfig, (error: any): void => {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tqueryLoginServices: {\n\t\t\t\tgetCurrentValue: () => loginServices.getLoginServiceButtons(),\n\t\t\t\tsubscribe: (onStoreChange: () => void) => loginServices.on('changed', onStoreChange),\n\t\t\t},\n\t\t}),\n\t\t[loginMethod],\n\t);\n\n\treturn <AuthenticationContext.Provider children={children} value={contextValue} />;\n};\n\nexport default AuthenticationProvider;\n"]}}},"code":"let capitalize;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  capitalize(v) {\n    capitalize = v;\n  }\n}, 0);\nlet AuthenticationContext, useSetting;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  AuthenticationContext(v) {\n    AuthenticationContext = v;\n  },\n  useSetting(v) {\n    useSetting = v;\n  }\n}, 1);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 2);\nlet React, useMemo;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n  useMemo(v) {\n    useMemo = v;\n  }\n}, 3);\nlet loginServices;\nmodule.link(\"../../lib/loginServices\", {\n  loginServices(v) {\n    loginServices = v;\n  }\n}, 4);\nlet useLDAPAndCrowdCollisionWarning;\nmodule.link(\"./hooks/useLDAPAndCrowdCollisionWarning\", {\n  useLDAPAndCrowdCollisionWarning(v) {\n    useLDAPAndCrowdCollisionWarning = v;\n  }\n}, 5);\nconst AuthenticationProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const isLdapEnabled = useSetting('LDAP_Enable', false);\n  const isCrowdEnabled = useSetting('CROWD_Enable', false);\n  const loginMethod = isLdapEnabled && 'loginWithLDAP' || isCrowdEnabled && 'loginWithCrowd' || 'loginWithPassword';\n  useLDAPAndCrowdCollisionWarning();\n  const contextValue = useMemo(() => ({\n    loginWithToken: token => new Promise((resolve, reject) => Meteor.loginWithToken(token, err => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(undefined);\n    })),\n    loginWithPassword: (user, password) => new Promise((resolve, reject) => {\n      Meteor[loginMethod](user, password, error => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve();\n      });\n    }),\n    loginWithService: serviceConfig => {\n      const loginMethods = {\n        'meteor-developer': 'MeteorDeveloperAccount'\n      };\n      const {\n        service: serviceName\n      } = serviceConfig;\n      const clientConfig = 'clientConfig' in serviceConfig && serviceConfig.clientConfig || {};\n      const loginWithService = \"loginWith\".concat(loginMethods[serviceName] || capitalize(String(serviceName || '')));\n      const method = Meteor[loginWithService];\n      if (!method) {\n        return () => Promise.reject(new Error('Login method not found'));\n      }\n      return () => new Promise((resolve, reject) => {\n        method(clientConfig, error => {\n          if (!error) {\n            resolve(true);\n            return;\n          }\n          reject(error);\n        });\n      });\n    },\n    queryLoginServices: {\n      getCurrentValue: () => loginServices.getLoginServiceButtons(),\n      subscribe: onStoreChange => loginServices.on('changed', onStoreChange)\n    }\n  }), [loginMethod]);\n  return /*#__PURE__*/React.createElement(AuthenticationContext.Provider, {\n    children: children,\n    value: contextValue\n  });\n};\nmodule.exportDefault(AuthenticationProvider);","map":{"version":3,"names":["capitalize","module","link","v","AuthenticationContext","useSetting","Meteor","React","useMemo","default","loginServices","useLDAPAndCrowdCollisionWarning","AuthenticationProvider","_ref","children","isLdapEnabled","isCrowdEnabled","loginMethod","contextValue","loginWithToken","token","Promise","resolve","reject","err","undefined","loginWithPassword","user","password","error","loginWithService","serviceConfig","loginMethods","service","serviceName","clientConfig","concat","String","method","Error","queryLoginServices","getCurrentValue","getLoginServiceButtons","subscribe","onStoreChange","on","createElement","Provider","value","exportDefault"],"sources":["client/providers/AuthenticationProvider/AuthenticationProvider.tsx"],"sourcesContent":["import type { LoginServiceConfiguration } from '@rocket.chat/core-typings';\nimport { capitalize } from '@rocket.chat/string-helpers';\nimport { AuthenticationContext, useSetting } from '@rocket.chat/ui-contexts';\nimport { Meteor } from 'meteor/meteor';\nimport type { ContextType, ReactElement, ReactNode } from 'react';\nimport React, { useMemo } from 'react';\n\nimport { loginServices } from '../../lib/loginServices';\nimport { useLDAPAndCrowdCollisionWarning } from './hooks/useLDAPAndCrowdCollisionWarning';\n\nexport type LoginMethods = keyof typeof Meteor extends infer T ? (T extends `loginWith${string}` ? T : never) : never;\n\ntype AuthenticationProviderProps = {\n\tchildren: ReactNode;\n};\n\nconst AuthenticationProvider = ({ children }: AuthenticationProviderProps): ReactElement => {\n\tconst isLdapEnabled = useSetting('LDAP_Enable', false);\n\tconst isCrowdEnabled = useSetting('CROWD_Enable', false);\n\n\tconst loginMethod: LoginMethods = (isLdapEnabled && 'loginWithLDAP') || (isCrowdEnabled && 'loginWithCrowd') || 'loginWithPassword';\n\n\tuseLDAPAndCrowdCollisionWarning();\n\n\tconst contextValue = useMemo(\n\t\t(): ContextType<typeof AuthenticationContext> => ({\n\t\t\tloginWithToken: (token: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) =>\n\t\t\t\t\tMeteor.loginWithToken(token, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\tloginWithPassword: (user: string | { username: string } | { email: string } | { id: string }, password: string): Promise<void> =>\n\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\tMeteor[loginMethod](user, password, (error) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\tloginWithService: <T extends LoginServiceConfiguration>(serviceConfig: T): (() => Promise<true>) => {\n\t\t\t\tconst loginMethods: Record<string, string | undefined> = {\n\t\t\t\t\t'meteor-developer': 'MeteorDeveloperAccount',\n\t\t\t\t};\n\n\t\t\t\tconst { service: serviceName } = serviceConfig;\n\t\t\t\tconst clientConfig = ('clientConfig' in serviceConfig && serviceConfig.clientConfig) || {};\n\n\t\t\t\tconst loginWithService = `loginWith${loginMethods[serviceName] || capitalize(String(serviceName || ''))}`;\n\n\t\t\t\tconst method: (config: unknown, cb: (error: any) => void) => Promise<true> = (Meteor as any)[loginWithService] as any;\n\n\t\t\t\tif (!method) {\n\t\t\t\t\treturn () => Promise.reject(new Error('Login method not found'));\n\t\t\t\t}\n\n\t\t\t\treturn () =>\n\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\tmethod(clientConfig, (error: any): void => {\n\t\t\t\t\t\t\tif (!error) {\n\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t},\n\n\t\t\tqueryLoginServices: {\n\t\t\t\tgetCurrentValue: () => loginServices.getLoginServiceButtons(),\n\t\t\t\tsubscribe: (onStoreChange: () => void) => loginServices.on('changed', onStoreChange),\n\t\t\t},\n\t\t}),\n\t\t[loginMethod],\n\t);\n\n\treturn <AuthenticationContext.Provider children={children} value={contextValue} />;\n};\n\nexport default AuthenticationProvider;\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"88a53a9d111f83a583d363b14cf9f012f47925c3"}
