{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","sourceRoot":"","sources":["app/livechat/server/statistics/LivechatAgentActivityMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatAgent, ISocketConnection } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { LivechatAgentActivity, Sessions, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\n\nconst formatDate = (dateTime = new Date()): { date: number } => ({\n\tdate: parseInt(moment(dateTime).format('YYYYMMDD')),\n});\n\nexport class LivechatAgentActivityMonitor {\n\tprivate _started: boolean;\n\n\tprivate _name: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n\t\tthis._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n\t\tthis._updateActiveSessions = this._updateActiveSessions.bind(this);\n\t\tthis._name = 'Livechat Agent Activity Monitor';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tawait this._setupListeners();\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.scheduler.remove(this._name);\n\n\t\tthis._started = false;\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started;\n\t}\n\n\tasync _setupListeners(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._startMonitoring();\n\n\t\t// TODO use service event socket.connected instead\n\t\tMeteor.onConnection((connection: unknown) => this._handleMeteorConnection(connection as ISocketConnection));\n\t\tcallbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n\t\tcallbacks.add('livechat.setUserStatusLivechat', (...args) => {\n\t\t\treturn this._handleUserStatusLivechatChanged(...args);\n\t\t});\n\t\tthis._started = true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\tawait this.scheduler.add(this._name, '0 0 * * *', () => this._updateActiveSessions());\n\t}\n\n\tasync _updateActiveSessions(): Promise<void> {\n\t\tconst openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions();\n\n\t\tconst today = moment(new Date());\n\t\tconst startedAt = new Date(today.year(), today.month(), today.date());\n\t\tfor await (const session of openLivechatAgentSessions) {\n\t\t\tconst startDate = moment(session.lastStartedAt);\n\t\t\tconst stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n\t\t\tconst data = { ...formatDate(startDate.toDate()), agentId: session.agentId };\n\t\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n\n\t\t\tawait Promise.all([\n\t\t\t\tLivechatAgentActivity.updateLastStoppedAt({ ...data, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\t\tLivechatAgentActivity.updateServiceHistory({ ...data, serviceHistory: { startedAt: session.lastStartedAt, stoppedAt } }),\n\t\t\t]);\n\t\t\tawait this._createOrUpdateSession(session.agentId, startedAt);\n\t\t}\n\t}\n\n\tasync _handleMeteorConnection(connection: ISocketConnection): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = await Sessions.findOneBySessionId(connection.id);\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat' | 'status'>>(session.userId, {\n\t\t\tprojection: { _id: 1, status: 1, statusLivechat: 1 },\n\t\t});\n\t\tif (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n\t\t\tawait this._createOrUpdateSession(user._id);\n\t\t}\n\t\tconnection.onClose(() => {\n\t\t\tif (session) {\n\t\t\t\tvoid this._updateSessionWhenAgentStop(session.userId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync _handleAgentStatusChanged({ userId, status }: { userId: string; status: string }) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat'>>(userId, { projection: { statusLivechat: 1 } });\n\t\tif (!user || user.statusLivechat !== 'available') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status !== 'offline') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t} else {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _handleUserStatusLivechatChanged({ userId, status }: { userId: string; status: string }): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'status'>>(userId, { projection: { status: 1 } });\n\t\tif (user && user.status === 'offline') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status === 'available') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t}\n\t\tif (status === 'not-available') {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _createOrUpdateSession(userId: string, lastStartedAt?: Date): Promise<void> {\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tawait LivechatAgentActivity.createOrUpdate(data);\n\t}\n\n\tasync _updateSessionWhenAgentStop(agentId: string): Promise<void> {\n\t\tconst { date } = formatDate();\n\n\t\tconst livechatSession = await LivechatAgentActivity.findOneByAgendIdAndDate(agentId, date);\n\t\tif (!livechatSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stoppedAt = new Date();\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\n\t\tawait Promise.all([\n\t\t\tLivechatAgentActivity.updateLastStoppedAt({ agentId, date, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\tLivechatAgentActivity.updateServiceHistory({\n\t\t\t\tagentId,\n\t\t\t\tdate,\n\t\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },\n\t\t\t}),\n\t\t]);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/statistics/LivechatAgentActivityMonitor.ts","sourceRoot":"","sources":["app/livechat/server/statistics/LivechatAgentActivityMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatAgent, ISocketConnection } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { LivechatAgentActivity, Sessions, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\n\nconst formatDate = (dateTime = new Date()): { date: number } => ({\n\tdate: parseInt(moment(dateTime).format('YYYYMMDD')),\n});\n\nexport class LivechatAgentActivityMonitor {\n\tprivate _started: boolean;\n\n\tprivate _name: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n\t\tthis._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n\t\tthis._updateActiveSessions = this._updateActiveSessions.bind(this);\n\t\tthis._name = 'Livechat Agent Activity Monitor';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tawait this._setupListeners();\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.scheduler.remove(this._name);\n\n\t\tthis._started = false;\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started;\n\t}\n\n\tasync _setupListeners(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._startMonitoring();\n\n\t\t// TODO use service event socket.connected instead\n\t\tMeteor.onConnection((connection: unknown) => this._handleMeteorConnection(connection as ISocketConnection));\n\t\tcallbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n\t\tcallbacks.add('livechat.setUserStatusLivechat', (...args) => {\n\t\t\treturn this._handleUserStatusLivechatChanged(...args);\n\t\t});\n\t\tthis._started = true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\tawait this.scheduler.add(this._name, '0 0 * * *', () => this._updateActiveSessions());\n\t}\n\n\tasync _updateActiveSessions(): Promise<void> {\n\t\tconst openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions();\n\n\t\tconst today = moment(new Date());\n\t\tconst startedAt = new Date(today.year(), today.month(), today.date());\n\t\tfor await (const session of openLivechatAgentSessions) {\n\t\t\tconst startDate = moment(session.lastStartedAt);\n\t\t\tconst stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n\t\t\tconst data = { ...formatDate(startDate.toDate()), agentId: session.agentId };\n\t\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n\n\t\t\tawait Promise.all([\n\t\t\t\tLivechatAgentActivity.updateLastStoppedAt({ ...data, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\t\tLivechatAgentActivity.updateServiceHistory({ ...data, serviceHistory: { startedAt: session.lastStartedAt, stoppedAt } }),\n\t\t\t]);\n\t\t\tawait this._createOrUpdateSession(session.agentId, startedAt);\n\t\t}\n\t}\n\n\tasync _handleMeteorConnection(connection: ISocketConnection): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = await Sessions.findOneBySessionId(connection.id);\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat' | 'status'>>(session.userId, {\n\t\t\tprojection: { _id: 1, status: 1, statusLivechat: 1 },\n\t\t});\n\t\tif (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n\t\t\tawait this._createOrUpdateSession(user._id);\n\t\t}\n\t\tconnection.onClose(() => {\n\t\t\tif (session) {\n\t\t\t\tvoid this._updateSessionWhenAgentStop(session.userId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync _handleAgentStatusChanged({ userId, status }: { userId: string; status: string }) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat'>>(userId, { projection: { statusLivechat: 1 } });\n\t\tif (!user || user.statusLivechat !== 'available') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status !== 'offline') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t} else {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _handleUserStatusLivechatChanged({ userId, status }: { userId: string; status: string }): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'status'>>(userId, { projection: { status: 1 } });\n\t\tif (user && user.status === 'offline') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status === 'available') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t}\n\t\tif (status === 'not-available') {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _createOrUpdateSession(userId: string, lastStartedAt?: Date): Promise<void> {\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tawait LivechatAgentActivity.createOrUpdate(data);\n\t}\n\n\tasync _updateSessionWhenAgentStop(agentId: string): Promise<void> {\n\t\tconst { date } = formatDate();\n\n\t\tconst livechatSession = await LivechatAgentActivity.findOneByAgendIdAndDate(agentId, date);\n\t\tif (!livechatSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stoppedAt = new Date();\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\n\t\tawait Promise.all([\n\t\t\tLivechatAgentActivity.updateLastStoppedAt({ agentId, date, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\tLivechatAgentActivity.updateServiceHistory({\n\t\t\t\tagentId,\n\t\t\t\tdate,\n\t\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },\n\t\t\t}),\n\t\t]);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      LivechatAgentActivityMonitor: () => LivechatAgentActivityMonitor\n    });\n    let cronJobs;\n    module.link(\"@rocket.chat/cron\", {\n      cronJobs(v) {\n        cronJobs = v;\n      }\n    }, 0);\n    let LivechatAgentActivity, Sessions, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatAgentActivity(v) {\n        LivechatAgentActivity = v;\n      },\n      Sessions(v) {\n        Sessions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const formatDate = function () {\n      let dateTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n      return {\n        date: parseInt(moment(dateTime).format('YYYYMMDD'))\n      };\n    };\n    class LivechatAgentActivityMonitor {\n      constructor() {\n        this._started = void 0;\n        this._name = void 0;\n        this.scheduler = cronJobs;\n        this._started = false;\n        this._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n        this._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n        this._updateActiveSessions = this._updateActiveSessions.bind(this);\n        this._name = 'Livechat Agent Activity Monitor';\n      }\n      async start() {\n        await this._setupListeners();\n      }\n      async stop() {\n        if (!this.isRunning()) {\n          return;\n        }\n        await this.scheduler.remove(this._name);\n        this._started = false;\n      }\n      isRunning() {\n        return this._started;\n      }\n      async _setupListeners() {\n        var _this = this;\n        if (this.isRunning()) {\n          return;\n        }\n        await this._startMonitoring();\n        // TODO use service event socket.connected instead\n        Meteor.onConnection(connection => this._handleMeteorConnection(connection));\n        callbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n        callbacks.add('livechat.setUserStatusLivechat', function () {\n          return _this._handleUserStatusLivechatChanged(...arguments);\n        });\n        this._started = true;\n      }\n      async _startMonitoring() {\n        await this.scheduler.add(this._name, '0 0 * * *', () => this._updateActiveSessions());\n      }\n      async _updateActiveSessions() {\n        const openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions();\n        const today = moment(new Date());\n        const startedAt = new Date(today.year(), today.month(), today.date());\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(openLivechatAgentSessions), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const session = _step.value;\n            {\n              const startDate = moment(session.lastStartedAt);\n              const stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n              const data = _objectSpread(_objectSpread({}, formatDate(startDate.toDate())), {}, {\n                agentId: session.agentId\n              });\n              const availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n              await Promise.all([LivechatAgentActivity.updateLastStoppedAt(_objectSpread(_objectSpread({}, data), {}, {\n                availableTime,\n                lastStoppedAt: stoppedAt\n              })), LivechatAgentActivity.updateServiceHistory(_objectSpread(_objectSpread({}, data), {}, {\n                serviceHistory: {\n                  startedAt: session.lastStartedAt,\n                  stoppedAt\n                }\n              }))]);\n              await this._createOrUpdateSession(session.agentId, startedAt);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async _handleMeteorConnection(connection) {\n        if (!this.isRunning()) {\n          return;\n        }\n        const session = await Sessions.findOneBySessionId(connection.id);\n        if (!session) {\n          return;\n        }\n        const user = await Users.findOneById(session.userId, {\n          projection: {\n            _id: 1,\n            status: 1,\n            statusLivechat: 1\n          }\n        });\n        if (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n          await this._createOrUpdateSession(user._id);\n        }\n        connection.onClose(() => {\n          if (session) {\n            void this._updateSessionWhenAgentStop(session.userId);\n          }\n        });\n      }\n      async _handleAgentStatusChanged(_ref) {\n        let {\n          userId,\n          status\n        } = _ref;\n        if (!this.isRunning()) {\n          return;\n        }\n        const user = await Users.findOneById(userId, {\n          projection: {\n            statusLivechat: 1\n          }\n        });\n        if (!user || user.statusLivechat !== 'available') {\n          return;\n        }\n        if (status !== 'offline') {\n          await this._createOrUpdateSession(userId);\n        } else {\n          await this._updateSessionWhenAgentStop(userId);\n        }\n      }\n      async _handleUserStatusLivechatChanged(_ref2) {\n        let {\n          userId,\n          status\n        } = _ref2;\n        if (!this.isRunning()) {\n          return;\n        }\n        const user = await Users.findOneById(userId, {\n          projection: {\n            status: 1\n          }\n        });\n        if (user && user.status === 'offline') {\n          return;\n        }\n        if (status === 'available') {\n          await this._createOrUpdateSession(userId);\n        }\n        if (status === 'not-available') {\n          await this._updateSessionWhenAgentStop(userId);\n        }\n      }\n      async _createOrUpdateSession(userId, lastStartedAt) {\n        const data = _objectSpread(_objectSpread({}, formatDate(lastStartedAt)), {}, {\n          agentId: userId,\n          lastStartedAt\n        });\n        await LivechatAgentActivity.createOrUpdate(data);\n      }\n      async _updateSessionWhenAgentStop(agentId) {\n        const {\n          date\n        } = formatDate();\n        const livechatSession = await LivechatAgentActivity.findOneByAgendIdAndDate(agentId, date);\n        if (!livechatSession) {\n          return;\n        }\n        const stoppedAt = new Date();\n        const availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n        await Promise.all([LivechatAgentActivity.updateLastStoppedAt({\n          agentId,\n          date,\n          availableTime,\n          lastStoppedAt: stoppedAt\n        }), LivechatAgentActivity.updateServiceHistory({\n          agentId,\n          date,\n          serviceHistory: {\n            startedAt: livechatSession.lastStartedAt,\n            stoppedAt\n          }\n        })]);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","LivechatAgentActivityMonitor","cronJobs","LivechatAgentActivity","Sessions","Users","Meteor","moment","callbacks","__reifyWaitForDeps__","formatDate","dateTime","arguments","length","undefined","Date","date","parseInt","format","constructor","_started","_name","scheduler","_handleAgentStatusChanged","bind","_handleUserStatusLivechatChanged","_updateActiveSessions","start","_setupListeners","stop","isRunning","remove","_this","_startMonitoring","onConnection","connection","_handleMeteorConnection","add","openLivechatAgentSessions","findOpenSessions","today","startedAt","year","month","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","session","value","startDate","lastStartedAt","stoppedAt","data","toDate","agentId","availableTime","diff","Promise","all","updateLastStoppedAt","lastStoppedAt","updateServiceHistory","serviceHistory","_createOrUpdateSession","err","return","findOneBySessionId","id","user","findOneById","userId","projection","_id","status","statusLivechat","onClose","_updateSessionWhenAgentStop","_ref","_ref2","createOrUpdate","livechatSession","findOneByAgendIdAndDate","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/statistics/LivechatAgentActivityMonitor.ts"],"sourcesContent":["import type { ILivechatAgent, ISocketConnection } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { LivechatAgentActivity, Sessions, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\n\nconst formatDate = (dateTime = new Date()): { date: number } => ({\n\tdate: parseInt(moment(dateTime).format('YYYYMMDD')),\n});\n\nexport class LivechatAgentActivityMonitor {\n\tprivate _started: boolean;\n\n\tprivate _name: string;\n\n\tprivate scheduler = cronJobs;\n\n\tconstructor() {\n\t\tthis._started = false;\n\t\tthis._handleAgentStatusChanged = this._handleAgentStatusChanged.bind(this);\n\t\tthis._handleUserStatusLivechatChanged = this._handleUserStatusLivechatChanged.bind(this);\n\t\tthis._updateActiveSessions = this._updateActiveSessions.bind(this);\n\t\tthis._name = 'Livechat Agent Activity Monitor';\n\t}\n\n\tasync start(): Promise<void> {\n\t\tawait this._setupListeners();\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.scheduler.remove(this._name);\n\n\t\tthis._started = false;\n\t}\n\n\tisRunning(): boolean {\n\t\treturn this._started;\n\t}\n\n\tasync _setupListeners(): Promise<void> {\n\t\tif (this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._startMonitoring();\n\n\t\t// TODO use service event socket.connected instead\n\t\tMeteor.onConnection((connection: unknown) => this._handleMeteorConnection(connection as ISocketConnection));\n\t\tcallbacks.add('livechat.agentStatusChanged', this._handleAgentStatusChanged);\n\t\tcallbacks.add('livechat.setUserStatusLivechat', (...args) => {\n\t\t\treturn this._handleUserStatusLivechatChanged(...args);\n\t\t});\n\t\tthis._started = true;\n\t}\n\n\tasync _startMonitoring(): Promise<void> {\n\t\tawait this.scheduler.add(this._name, '0 0 * * *', () => this._updateActiveSessions());\n\t}\n\n\tasync _updateActiveSessions(): Promise<void> {\n\t\tconst openLivechatAgentSessions = LivechatAgentActivity.findOpenSessions();\n\n\t\tconst today = moment(new Date());\n\t\tconst startedAt = new Date(today.year(), today.month(), today.date());\n\t\tfor await (const session of openLivechatAgentSessions) {\n\t\t\tconst startDate = moment(session.lastStartedAt);\n\t\t\tconst stoppedAt = new Date(startDate.year(), startDate.month(), startDate.date(), 23, 59, 59);\n\t\t\tconst data = { ...formatDate(startDate.toDate()), agentId: session.agentId };\n\t\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(session.lastStartedAt)), 'seconds');\n\n\t\t\tawait Promise.all([\n\t\t\t\tLivechatAgentActivity.updateLastStoppedAt({ ...data, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\t\tLivechatAgentActivity.updateServiceHistory({ ...data, serviceHistory: { startedAt: session.lastStartedAt, stoppedAt } }),\n\t\t\t]);\n\t\t\tawait this._createOrUpdateSession(session.agentId, startedAt);\n\t\t}\n\t}\n\n\tasync _handleMeteorConnection(connection: ISocketConnection): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst session = await Sessions.findOneBySessionId(connection.id);\n\t\tif (!session) {\n\t\t\treturn;\n\t\t}\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat' | 'status'>>(session.userId, {\n\t\t\tprojection: { _id: 1, status: 1, statusLivechat: 1 },\n\t\t});\n\t\tif (user && user.status !== 'offline' && user.statusLivechat === 'available') {\n\t\t\tawait this._createOrUpdateSession(user._id);\n\t\t}\n\t\tconnection.onClose(() => {\n\t\t\tif (session) {\n\t\t\t\tvoid this._updateSessionWhenAgentStop(session.userId);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync _handleAgentStatusChanged({ userId, status }: { userId: string; status: string }) {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'statusLivechat'>>(userId, { projection: { statusLivechat: 1 } });\n\t\tif (!user || user.statusLivechat !== 'available') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status !== 'offline') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t} else {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _handleUserStatusLivechatChanged({ userId, status }: { userId: string; status: string }): Promise<void> {\n\t\tif (!this.isRunning()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<ILivechatAgent, '_id' | 'status'>>(userId, { projection: { status: 1 } });\n\t\tif (user && user.status === 'offline') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (status === 'available') {\n\t\t\tawait this._createOrUpdateSession(userId);\n\t\t}\n\t\tif (status === 'not-available') {\n\t\t\tawait this._updateSessionWhenAgentStop(userId);\n\t\t}\n\t}\n\n\tasync _createOrUpdateSession(userId: string, lastStartedAt?: Date): Promise<void> {\n\t\tconst data = { ...formatDate(lastStartedAt), agentId: userId, lastStartedAt };\n\t\tawait LivechatAgentActivity.createOrUpdate(data);\n\t}\n\n\tasync _updateSessionWhenAgentStop(agentId: string): Promise<void> {\n\t\tconst { date } = formatDate();\n\n\t\tconst livechatSession = await LivechatAgentActivity.findOneByAgendIdAndDate(agentId, date);\n\t\tif (!livechatSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stoppedAt = new Date();\n\t\tconst availableTime = moment(stoppedAt).diff(moment(new Date(livechatSession.lastStartedAt)), 'seconds');\n\n\t\tawait Promise.all([\n\t\t\tLivechatAgentActivity.updateLastStoppedAt({ agentId, date, availableTime, lastStoppedAt: stoppedAt }),\n\t\t\tLivechatAgentActivity.updateServiceHistory({\n\t\t\t\tagentId,\n\t\t\t\tdate,\n\t\t\t\tserviceHistory: { startedAt: livechatSession.lastStartedAt, stoppedAt },\n\t\t\t}),\n\t\t]);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"cfea502640bc64fef13690f1e2be4dc179e2070c"}
