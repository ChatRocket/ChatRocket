{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/mobex.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-integrations/providers/mobex.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/mobex.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/mobex.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/mobex.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport type { ISMSProvider, ServiceData, SMSProviderResult, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\n\nimport { settings } from '../../../../app/settings/server';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype MobexData = {\n\tfrom: string;\n\tto: string;\n\tcontent: string;\n\tNumMedia?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isMobexData = (data: unknown): data is MobexData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, content } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof content === 'string';\n};\n\nexport class Mobex implements ISMSProvider {\n\taddress: string;\n\n\trestAddress: string;\n\n\tusername: string;\n\n\tpassword: string;\n\n\tfrom: string;\n\n\tconstructor() {\n\t\tthis.address = settings.get('SMS_Mobex_gateway_address');\n\t\tthis.restAddress = settings.get('SMS_Mobex_restful_address');\n\t\tthis.username = settings.get('SMS_Mobex_username');\n\t\tthis.password = settings.get('SMS_Mobex_password');\n\t\tthis.from = settings.get('SMS_Mobex_from_number');\n\t}\n\n\tparse(data: unknown) {\n\t\tlet numMedia = 0;\n\n\t\tif (!isMobexData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.content,\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\t// @ts-expect-error -- typings :) for this method are wrong\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData: {\n\t\t\tusername?: string;\n\t\t\tpassword?: string;\n\t\t\taddress?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tlet currentUsername = this.username;\n\t\tlet currentAddress = this.address;\n\t\tlet currentPassword = this.password;\n\n\t\tconst { username, password, address } = extraData;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\t\tif (username && password) {\n\t\t\tcurrentUsername = username;\n\t\t\tcurrentPassword = password;\n\t\t}\n\t\tif (address) {\n\t\t\tcurrentAddress = address;\n\t\t}\n\n\t\tconst strippedTo = toNumber.replace(/\\D/g, '');\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${currentAddress}/send`, {\n\t\t\t\tparams: {\n\t\t\t\t\tusername: currentUsername,\n\t\t\t\t\tpassword: currentPassword,\n\t\t\t\t\tto: strippedTo,\n\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\tcontent: message,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tresult.resultMsg = await response.text();\n\t\t\t\tresult.isSuccess = true;\n\t\t\t} else {\n\t\t\t\tresult.resultMsg = `Could not able to send SMS. Code:  ${response.status}`;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync sendBatch(fromNumber: string, toNumbersArr: string[], message: string): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t\tresponse: null,\n\t\t};\n\n\t\tconst userPass = `${this.username}:${this.password}`;\n\n\t\tconst authToken = Base64.encode(userPass);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.restAddress}/secure/sendbatch`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Basic ${authToken}`,\n\t\t\t\t},\n\t\t\t\tbody: {\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tto: toNumbersArr,\n\t\t\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\t\t\tcontent: message,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tresult.isSuccess = response.ok;\n\t\t\tresult.resultMsg = 'Success';\n\t\t\tresult.response = await response.text();\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: 'ACK/Jasmin',\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-integrations/providers/mobex.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-integrations/providers/mobex.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-integrations/providers/mobex.ts","sourceRoot":"","sources":["server/services/omnichannel-integrations/providers/mobex.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport type { ISMSProvider, ServiceData, SMSProviderResult, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\n\nimport { settings } from '../../../../app/settings/server';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype MobexData = {\n\tfrom: string;\n\tto: string;\n\tcontent: string;\n\tNumMedia?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isMobexData = (data: unknown): data is MobexData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, content } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof content === 'string';\n};\n\nexport class Mobex implements ISMSProvider {\n\taddress: string;\n\n\trestAddress: string;\n\n\tusername: string;\n\n\tpassword: string;\n\n\tfrom: string;\n\n\tconstructor() {\n\t\tthis.address = settings.get('SMS_Mobex_gateway_address');\n\t\tthis.restAddress = settings.get('SMS_Mobex_restful_address');\n\t\tthis.username = settings.get('SMS_Mobex_username');\n\t\tthis.password = settings.get('SMS_Mobex_password');\n\t\tthis.from = settings.get('SMS_Mobex_from_number');\n\t}\n\n\tparse(data: unknown) {\n\t\tlet numMedia = 0;\n\n\t\tif (!isMobexData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.content,\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\t// @ts-expect-error -- typings :) for this method are wrong\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData: {\n\t\t\tusername?: string;\n\t\t\tpassword?: string;\n\t\t\taddress?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tlet currentUsername = this.username;\n\t\tlet currentAddress = this.address;\n\t\tlet currentPassword = this.password;\n\n\t\tconst { username, password, address } = extraData;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\t\tif (username && password) {\n\t\t\tcurrentUsername = username;\n\t\t\tcurrentPassword = password;\n\t\t}\n\t\tif (address) {\n\t\t\tcurrentAddress = address;\n\t\t}\n\n\t\tconst strippedTo = toNumber.replace(/\\D/g, '');\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${currentAddress}/send`, {\n\t\t\t\tparams: {\n\t\t\t\t\tusername: currentUsername,\n\t\t\t\t\tpassword: currentPassword,\n\t\t\t\t\tto: strippedTo,\n\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\tcontent: message,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tresult.resultMsg = await response.text();\n\t\t\t\tresult.isSuccess = true;\n\t\t\t} else {\n\t\t\t\tresult.resultMsg = `Could not able to send SMS. Code:  ${response.status}`;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync sendBatch(fromNumber: string, toNumbersArr: string[], message: string): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t\tresponse: null,\n\t\t};\n\n\t\tconst userPass = `${this.username}:${this.password}`;\n\n\t\tconst authToken = Base64.encode(userPass);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.restAddress}/secure/sendbatch`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Basic ${authToken}`,\n\t\t\t\t},\n\t\t\t\tbody: {\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tto: toNumbersArr,\n\t\t\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\t\t\tcontent: message,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tresult.isSuccess = response.ok;\n\t\t\tresult.resultMsg = 'Success';\n\t\t\tresult.response = await response.text();\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: 'ACK/Jasmin',\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      Mobex: () => Mobex\n    });\n    let Base64;\n    module.link(\"@rocket.chat/base64\", {\n      Base64(v) {\n        Base64 = v;\n      }\n    }, 0);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 1);\n    let settings;\n    module.link(\"../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 2);\n    let SystemLogger;\n    module.link(\"../../../lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const isMobexData = data => {\n      if (typeof data !== 'object' || data === null) {\n        return false;\n      }\n      const {\n        from,\n        to,\n        content\n      } = data;\n      return typeof from === 'string' && typeof to === 'string' && typeof content === 'string';\n    };\n    class Mobex {\n      constructor() {\n        this.address = void 0;\n        this.restAddress = void 0;\n        this.username = void 0;\n        this.password = void 0;\n        this.from = void 0;\n        this.address = settings.get('SMS_Mobex_gateway_address');\n        this.restAddress = settings.get('SMS_Mobex_restful_address');\n        this.username = settings.get('SMS_Mobex_username');\n        this.password = settings.get('SMS_Mobex_password');\n        this.from = settings.get('SMS_Mobex_from_number');\n      }\n      parse(data) {\n        let numMedia = 0;\n        if (!isMobexData(data)) {\n          throw new Error('Invalid data');\n        }\n        const returnData = {\n          from: data.from,\n          to: data.to,\n          body: data.content\n        };\n        if (data.NumMedia) {\n          numMedia = parseInt(data.NumMedia, 10);\n        }\n        if (isNaN(numMedia)) {\n          SystemLogger.error(\"Error parsing NumMedia \".concat(data.NumMedia));\n          return returnData;\n        }\n        returnData.media = [];\n        for (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n          const media = {\n            url: '',\n            contentType: ''\n          };\n          const mediaUrl = data[\"MediaUrl\".concat(mediaIndex)];\n          const contentType = data[\"MediaContentType\".concat(mediaIndex)];\n          media.url = mediaUrl;\n          media.contentType = contentType;\n          returnData.media.push(media);\n        }\n        return returnData;\n      }\n      // @ts-expect-error -- typings :) for this method are wrong\n      async send(fromNumber, toNumber, message, extraData) {\n        let currentFrom = this.from;\n        let currentUsername = this.username;\n        let currentAddress = this.address;\n        let currentPassword = this.password;\n        const {\n          username,\n          password,\n          address\n        } = extraData;\n        if (fromNumber) {\n          currentFrom = fromNumber;\n        }\n        if (username && password) {\n          currentUsername = username;\n          currentPassword = password;\n        }\n        if (address) {\n          currentAddress = address;\n        }\n        const strippedTo = toNumber.replace(/\\D/g, '');\n        const result = {\n          isSuccess: false,\n          resultMsg: 'An unknown error happened'\n        };\n        try {\n          const response = await fetch(\"\".concat(currentAddress, \"/send\"), {\n            params: {\n              username: currentUsername,\n              password: currentPassword,\n              to: strippedTo,\n              from: currentFrom,\n              content: message\n            }\n          });\n          if (response.ok) {\n            result.resultMsg = await response.text();\n            result.isSuccess = true;\n          } else {\n            result.resultMsg = \"Could not able to send SMS. Code:  \".concat(response.status);\n          }\n        } catch (err) {\n          result.resultMsg = \"Error while sending SMS with Mobex. Detail: \".concat(err);\n          SystemLogger.error({\n            msg: 'Error while sending SMS with Mobex',\n            err\n          });\n        }\n        return result;\n      }\n      async sendBatch(fromNumber, toNumbersArr, message) {\n        let currentFrom = this.from;\n        if (fromNumber) {\n          currentFrom = fromNumber;\n        }\n        const result = {\n          isSuccess: false,\n          resultMsg: 'An unknown error happened',\n          response: null\n        };\n        const userPass = \"\".concat(this.username, \":\").concat(this.password);\n        const authToken = Base64.encode(userPass);\n        try {\n          const response = await fetch(\"\".concat(this.restAddress, \"/secure/sendbatch\"), {\n            method: 'POST',\n            headers: {\n              Authorization: \"Basic \".concat(authToken)\n            },\n            body: {\n              messages: [{\n                to: toNumbersArr,\n                from: currentFrom,\n                content: message\n              }]\n            }\n          });\n          result.isSuccess = response.ok;\n          result.resultMsg = 'Success';\n          result.response = await response.text();\n        } catch (err) {\n          result.resultMsg = \"Error while sending SMS with Mobex. Detail: \".concat(err);\n          SystemLogger.error({\n            msg: 'Error while sending SMS with Mobex',\n            err\n          });\n        }\n        return result;\n      }\n      response() {\n        return {\n          headers: {\n            'Content-Type': 'text/xml'\n          },\n          body: 'ACK/Jasmin'\n        };\n      }\n      validateRequest(_request) {\n        return true;\n      }\n      error(error) {\n        let message = '';\n        if (error.reason) {\n          message = \"<Message>\".concat(error.reason, \"</Message>\");\n        }\n        return {\n          headers: {\n            'Content-Type': 'text/xml'\n          },\n          body: \"<Response>\".concat(message, \"</Response>\")\n        };\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","Mobex","Base64","link","v","fetch","serverFetch","settings","SystemLogger","__reifyWaitForDeps__","isMobexData","data","from","to","content","constructor","address","restAddress","username","password","get","parse","numMedia","Error","returnData","body","NumMedia","parseInt","isNaN","error","concat","media","mediaIndex","url","contentType","mediaUrl","push","send","fromNumber","toNumber","message","extraData","currentFrom","currentUsername","currentAddress","currentPassword","strippedTo","replace","result","isSuccess","resultMsg","response","params","ok","text","status","err","msg","sendBatch","toNumbersArr","userPass","authToken","encode","method","headers","Authorization","messages","validateRequest","_request","reason","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel-integrations/providers/mobex.ts"],"sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport type { ISMSProvider, ServiceData, SMSProviderResult, SMSProviderResponse } from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport type { Request } from 'express';\n\nimport { settings } from '../../../../app/settings/server';\nimport { SystemLogger } from '../../../lib/logger/system';\n\ntype MobexData = {\n\tfrom: string;\n\tto: string;\n\tcontent: string;\n\tNumMedia?: string;\n} & Record<`MediaUrl${number}`, string> &\n\tRecord<`MediaContentType${number}`, string>;\n\nconst isMobexData = (data: unknown): data is MobexData => {\n\tif (typeof data !== 'object' || data === null) {\n\t\treturn false;\n\t}\n\n\tconst { from, to, content } = data as Record<string, unknown>;\n\n\treturn typeof from === 'string' && typeof to === 'string' && typeof content === 'string';\n};\n\nexport class Mobex implements ISMSProvider {\n\taddress: string;\n\n\trestAddress: string;\n\n\tusername: string;\n\n\tpassword: string;\n\n\tfrom: string;\n\n\tconstructor() {\n\t\tthis.address = settings.get('SMS_Mobex_gateway_address');\n\t\tthis.restAddress = settings.get('SMS_Mobex_restful_address');\n\t\tthis.username = settings.get('SMS_Mobex_username');\n\t\tthis.password = settings.get('SMS_Mobex_password');\n\t\tthis.from = settings.get('SMS_Mobex_from_number');\n\t}\n\n\tparse(data: unknown) {\n\t\tlet numMedia = 0;\n\n\t\tif (!isMobexData(data)) {\n\t\t\tthrow new Error('Invalid data');\n\t\t}\n\n\t\tconst returnData: ServiceData = {\n\t\t\tfrom: data.from,\n\t\t\tto: data.to,\n\t\t\tbody: data.content,\n\t\t};\n\n\t\tif (data.NumMedia) {\n\t\t\tnumMedia = parseInt(data.NumMedia, 10);\n\t\t}\n\n\t\tif (isNaN(numMedia)) {\n\t\t\tSystemLogger.error(`Error parsing NumMedia ${data.NumMedia}`);\n\t\t\treturn returnData;\n\t\t}\n\n\t\treturnData.media = [];\n\n\t\tfor (let mediaIndex = 0; mediaIndex < numMedia; mediaIndex++) {\n\t\t\tconst media = {\n\t\t\t\turl: '',\n\t\t\t\tcontentType: '',\n\t\t\t};\n\n\t\t\tconst mediaUrl = data[`MediaUrl${mediaIndex}`];\n\t\t\tconst contentType = data[`MediaContentType${mediaIndex}`];\n\n\t\t\tmedia.url = mediaUrl;\n\t\t\tmedia.contentType = contentType;\n\n\t\t\treturnData.media.push(media);\n\t\t}\n\n\t\treturn returnData;\n\t}\n\n\t// @ts-expect-error -- typings :) for this method are wrong\n\tasync send(\n\t\tfromNumber: string,\n\t\ttoNumber: string,\n\t\tmessage: string,\n\t\textraData: {\n\t\t\tusername?: string;\n\t\t\tpassword?: string;\n\t\t\taddress?: string;\n\t\t},\n\t): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tlet currentUsername = this.username;\n\t\tlet currentAddress = this.address;\n\t\tlet currentPassword = this.password;\n\n\t\tconst { username, password, address } = extraData;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\t\tif (username && password) {\n\t\t\tcurrentUsername = username;\n\t\t\tcurrentPassword = password;\n\t\t}\n\t\tif (address) {\n\t\t\tcurrentAddress = address;\n\t\t}\n\n\t\tconst strippedTo = toNumber.replace(/\\D/g, '');\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${currentAddress}/send`, {\n\t\t\t\tparams: {\n\t\t\t\t\tusername: currentUsername,\n\t\t\t\t\tpassword: currentPassword,\n\t\t\t\t\tto: strippedTo,\n\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\tcontent: message,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tresult.resultMsg = await response.text();\n\t\t\t\tresult.isSuccess = true;\n\t\t\t} else {\n\t\t\t\tresult.resultMsg = `Could not able to send SMS. Code:  ${response.status}`;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync sendBatch(fromNumber: string, toNumbersArr: string[], message: string): Promise<SMSProviderResult> {\n\t\tlet currentFrom = this.from;\n\t\tif (fromNumber) {\n\t\t\tcurrentFrom = fromNumber;\n\t\t}\n\n\t\tconst result: SMSProviderResult = {\n\t\t\tisSuccess: false,\n\t\t\tresultMsg: 'An unknown error happened',\n\t\t\tresponse: null,\n\t\t};\n\n\t\tconst userPass = `${this.username}:${this.password}`;\n\n\t\tconst authToken = Base64.encode(userPass);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.restAddress}/secure/sendbatch`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Basic ${authToken}`,\n\t\t\t\t},\n\t\t\t\tbody: {\n\t\t\t\t\tmessages: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tto: toNumbersArr,\n\t\t\t\t\t\t\tfrom: currentFrom,\n\t\t\t\t\t\t\tcontent: message,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tresult.isSuccess = response.ok;\n\t\t\tresult.resultMsg = 'Success';\n\t\t\tresult.response = await response.text();\n\t\t} catch (err) {\n\t\t\tresult.resultMsg = `Error while sending SMS with Mobex. Detail: ${err}`;\n\t\t\tSystemLogger.error({ msg: 'Error while sending SMS with Mobex', err });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tresponse(): SMSProviderResponse {\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: 'ACK/Jasmin',\n\t\t};\n\t}\n\n\tvalidateRequest(_request: Request): boolean {\n\t\treturn true;\n\t}\n\n\terror(error: Error & { reason?: string }): SMSProviderResponse {\n\t\tlet message = '';\n\t\tif (error.reason) {\n\t\t\tmessage = `<Message>${error.reason}</Message>`;\n\t\t}\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'text/xml',\n\t\t\t},\n\t\t\tbody: `<Response>${message}</Response>`,\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0d6a6bc0d31508d26ab21631ec6671757e933f93"}
