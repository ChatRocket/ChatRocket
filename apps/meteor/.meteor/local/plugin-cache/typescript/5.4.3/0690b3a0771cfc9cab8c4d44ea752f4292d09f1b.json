{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-csv/server/CsvImporter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer-csv/server/CsvImporter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-csv/server/CsvImporter.ts","inputSourceMap":{"version":3,"file":"app/importer-csv/server/CsvImporter.ts","sourceRoot":"","sources":["app/importer-csv/server/CsvImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImport } from '@rocket.chat/core-typings';\nimport { Settings, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { parse } from 'csv-parse/lib/sync';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ConverterOptions } from '../../importer/server/classes/ImportDataConverter';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport type { ImporterInfo } from '../../importer/server/definitions/ImporterInfo';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\n\nexport class CsvImporter extends Importer {\n\tprivate csvParser: (csv: string) => string[];\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tsuper(info, importRecord, converterOptions);\n\n\t\tthis.csvParser = parse;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\n\t\tlet count = 0;\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgressCount = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\tlet messagesCount = 0;\n\t\tlet usersCount = 0;\n\t\tlet channelsCount = 0;\n\t\tconst dmRooms = new Set<string>();\n\t\tconst roomIds = new Map<string, string>();\n\t\tconst usedUsernames = new Set<string>();\n\t\tconst availableUsernames = new Set<string>();\n\n\t\tconst getRoomId = (roomName: string) => {\n\t\t\tconst roomId = roomIds.get(roomName);\n\n\t\t\tif (roomId === undefined) {\n\t\t\t\tconst fallbackRoomId = Random.id();\n\t\t\t\troomIds.set(roomName, fallbackRoomId);\n\t\t\t\treturn fallbackRoomId;\n\t\t\t}\n\n\t\t\treturn roomId;\n\t\t};\n\n\t\tfor await (const entry of zip.getEntries()) {\n\t\t\tthis.logger.debug(`Entry: ${entry.entryName}`);\n\n\t\t\t// Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\tchannelsCount = parsedChannels.length;\n\n\t\t\t\tfor await (const c of parsedChannels) {\n\t\t\t\t\tconst name = c[0].trim();\n\t\t\t\t\tconst id = getRoomId(name);\n\t\t\t\t\tconst creator = c[1].trim();\n\t\t\t\t\tconst isPrivate = c[2].trim().toLowerCase() === 'private';\n\t\t\t\t\tconst members = c[3]\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(';')\n\t\t\t\t\t\t.map((m) => m.trim())\n\t\t\t\t\t\t.filter((m) => m);\n\n\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\timportIds: [id],\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: creator,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusers: members,\n\t\t\t\t\t\tt: isPrivate ? 'p' : 'c',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.channels': channelsCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\tusersCount = parsedUsers.length;\n\n\t\t\t\tfor await (const u of parsedUsers) {\n\t\t\t\t\tconst username = u[0].trim();\n\t\t\t\t\tavailableUsernames.add(username);\n\n\t\t\t\t\tconst email = u[1].trim();\n\t\t\t\t\tconst name = u[2].trim();\n\n\t\t\t\t\tawait this.converter.addUser({\n\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\timportIds: [username],\n\t\t\t\t\t\temails: [email],\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tname,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.users': usersCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t}\n\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${entry.entryName} contains invalid syntax`, e);\n\t\t\t\t\tincreaseProgressCount();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet data: { username: string; ts: string; text: string; otherUsername?: string; isDirect?: true }[];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tdata = msgs.map((m) => ({ username: m[0], ts: m[1], text: m[2] }));\n\t\t\t\t}\n\n\t\t\t\tmessagesCount += data.length;\n\t\t\t\tconst channelName = `${folderName}/${msgGroupData}`;\n\n\t\t\t\tawait super.updateRecord({ messagesstatus: channelName });\n\n\t\t\t\tif (isDirect) {\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tif (!msg.otherUsername) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst sourceId = [msg.username, msg.otherUsername].sort().join('/');\n\n\t\t\t\t\t\tif (!dmRooms.has(sourceId)) {\n\t\t\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\t\t\timportIds: [sourceId],\n\t\t\t\t\t\t\t\tusers: [msg.username, msg.otherUsername],\n\t\t\t\t\t\t\t\tt: 'd',\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tdmRooms.add(sourceId);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid: sourceId,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tusedUsernames.add(msg.otherUsername);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t}\n\n\t\t\tincreaseProgressCount();\n\t\t}\n\n\t\tif (usersCount) {\n\t\t\tconst { value } = await Settings.incrementValueById('CSV_Importer_Count', usersCount, { returnDocument: 'after' });\n\t\t\tif (value) {\n\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t}\n\t\t}\n\n\t\t// Check if any of the message usernames was not in the imported list of users\n\t\tfor await (const username of usedUsernames) {\n\t\t\tif (availableUsernames.has(username)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if an user with that username already exists\n\t\t\tconst user = await Users.findOneByUsername(username);\n\t\t\tif (user && !user.importIds?.includes(username)) {\n\t\t\t\t// Add the username to the local user's importIds so it can be found by the import process\n\t\t\t\t// This way we can support importing new messages for existing users\n\t\t\t\tawait Users.addImportIds(user._id, username);\n\t\t\t}\n\t\t}\n\n\t\tawait super.addCountToTotal(messagesCount + usersCount + channelsCount);\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\n\t\t// Ensure we have at least a single user, channel, or message\n\t\tif (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tawait super.updateProgress(ProgressStep.ERROR);\n\t\t}\n\n\t\treturn super.getProgress();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer-csv/server/CsvImporter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer-csv/server/CsvImporter.ts","inputSourceMap":{"version":3,"file":"app/importer-csv/server/CsvImporter.ts","sourceRoot":"","sources":["app/importer-csv/server/CsvImporter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImport } from '@rocket.chat/core-typings';\nimport { Settings, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { parse } from 'csv-parse/lib/sync';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ConverterOptions } from '../../importer/server/classes/ImportDataConverter';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport type { ImporterInfo } from '../../importer/server/definitions/ImporterInfo';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\n\nexport class CsvImporter extends Importer {\n\tprivate csvParser: (csv: string) => string[];\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tsuper(info, importRecord, converterOptions);\n\n\t\tthis.csvParser = parse;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\n\t\tlet count = 0;\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgressCount = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\tlet messagesCount = 0;\n\t\tlet usersCount = 0;\n\t\tlet channelsCount = 0;\n\t\tconst dmRooms = new Set<string>();\n\t\tconst roomIds = new Map<string, string>();\n\t\tconst usedUsernames = new Set<string>();\n\t\tconst availableUsernames = new Set<string>();\n\n\t\tconst getRoomId = (roomName: string) => {\n\t\t\tconst roomId = roomIds.get(roomName);\n\n\t\t\tif (roomId === undefined) {\n\t\t\t\tconst fallbackRoomId = Random.id();\n\t\t\t\troomIds.set(roomName, fallbackRoomId);\n\t\t\t\treturn fallbackRoomId;\n\t\t\t}\n\n\t\t\treturn roomId;\n\t\t};\n\n\t\tfor await (const entry of zip.getEntries()) {\n\t\t\tthis.logger.debug(`Entry: ${entry.entryName}`);\n\n\t\t\t// Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\tchannelsCount = parsedChannels.length;\n\n\t\t\t\tfor await (const c of parsedChannels) {\n\t\t\t\t\tconst name = c[0].trim();\n\t\t\t\t\tconst id = getRoomId(name);\n\t\t\t\t\tconst creator = c[1].trim();\n\t\t\t\t\tconst isPrivate = c[2].trim().toLowerCase() === 'private';\n\t\t\t\t\tconst members = c[3]\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(';')\n\t\t\t\t\t\t.map((m) => m.trim())\n\t\t\t\t\t\t.filter((m) => m);\n\n\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\timportIds: [id],\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: creator,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusers: members,\n\t\t\t\t\t\tt: isPrivate ? 'p' : 'c',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.channels': channelsCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\tusersCount = parsedUsers.length;\n\n\t\t\t\tfor await (const u of parsedUsers) {\n\t\t\t\t\tconst username = u[0].trim();\n\t\t\t\t\tavailableUsernames.add(username);\n\n\t\t\t\t\tconst email = u[1].trim();\n\t\t\t\t\tconst name = u[2].trim();\n\n\t\t\t\t\tawait this.converter.addUser({\n\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\timportIds: [username],\n\t\t\t\t\t\temails: [email],\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tname,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.users': usersCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t}\n\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${entry.entryName} contains invalid syntax`, e);\n\t\t\t\t\tincreaseProgressCount();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet data: { username: string; ts: string; text: string; otherUsername?: string; isDirect?: true }[];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tdata = msgs.map((m) => ({ username: m[0], ts: m[1], text: m[2] }));\n\t\t\t\t}\n\n\t\t\t\tmessagesCount += data.length;\n\t\t\t\tconst channelName = `${folderName}/${msgGroupData}`;\n\n\t\t\t\tawait super.updateRecord({ messagesstatus: channelName });\n\n\t\t\t\tif (isDirect) {\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tif (!msg.otherUsername) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst sourceId = [msg.username, msg.otherUsername].sort().join('/');\n\n\t\t\t\t\t\tif (!dmRooms.has(sourceId)) {\n\t\t\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\t\t\timportIds: [sourceId],\n\t\t\t\t\t\t\t\tusers: [msg.username, msg.otherUsername],\n\t\t\t\t\t\t\t\tt: 'd',\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tdmRooms.add(sourceId);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid: sourceId,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tusedUsernames.add(msg.otherUsername);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t}\n\n\t\t\tincreaseProgressCount();\n\t\t}\n\n\t\tif (usersCount) {\n\t\t\tconst { value } = await Settings.incrementValueById('CSV_Importer_Count', usersCount, { returnDocument: 'after' });\n\t\t\tif (value) {\n\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t}\n\t\t}\n\n\t\t// Check if any of the message usernames was not in the imported list of users\n\t\tfor await (const username of usedUsernames) {\n\t\t\tif (availableUsernames.has(username)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if an user with that username already exists\n\t\t\tconst user = await Users.findOneByUsername(username);\n\t\t\tif (user && !user.importIds?.includes(username)) {\n\t\t\t\t// Add the username to the local user's importIds so it can be found by the import process\n\t\t\t\t// This way we can support importing new messages for existing users\n\t\t\t\tawait Users.addImportIds(user._id, username);\n\t\t\t}\n\t\t}\n\n\t\tawait super.addCountToTotal(messagesCount + usersCount + channelsCount);\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\n\t\t// Ensure we have at least a single user, channel, or message\n\t\tif (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tawait super.updateProgress(ProgressStep.ERROR);\n\t\t}\n\n\t\treturn super.getProgress();\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      CsvImporter: () => CsvImporter\n    });\n    let Settings, Users;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 1);\n    let parse;\n    module.link(\"csv-parse/lib/sync\", {\n      parse(v) {\n        parse = v;\n      }\n    }, 2);\n    let Importer, ProgressStep, ImporterWebsocket;\n    module.link(\"../../importer/server\", {\n      Importer(v) {\n        Importer = v;\n      },\n      ProgressStep(v) {\n        ProgressStep = v;\n      },\n      ImporterWebsocket(v) {\n        ImporterWebsocket = v;\n      }\n    }, 3);\n    let notifyOnSettingChanged;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChanged(v) {\n        notifyOnSettingChanged = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class CsvImporter extends Importer {\n      constructor(info, importRecord) {\n        let converterOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        super(info, importRecord, converterOptions);\n        this.csvParser = void 0;\n        this.csvParser = parse;\n      }\n      async prepareUsingLocalFile(fullFilePath) {\n        this.logger.debug('start preparing import operation');\n        await this.converter.clearImportData();\n        const zip = new this.AdmZip(fullFilePath);\n        const totalEntries = zip.getEntryCount();\n        ImporterWebsocket.progressUpdated({\n          rate: 0\n        });\n        let count = 0;\n        let oldRate = 0;\n        const increaseProgressCount = () => {\n          try {\n            count++;\n            const rate = Math.floor(count * 1000 / totalEntries) / 10;\n            if (rate > oldRate) {\n              ImporterWebsocket.progressUpdated({\n                rate\n              });\n              oldRate = rate;\n            }\n          } catch (e) {\n            this.logger.error(e);\n          }\n        };\n        let messagesCount = 0;\n        let usersCount = 0;\n        let channelsCount = 0;\n        const dmRooms = new Set();\n        const roomIds = new Map();\n        const usedUsernames = new Set();\n        const availableUsernames = new Set();\n        const getRoomId = roomName => {\n          const roomId = roomIds.get(roomName);\n          if (roomId === undefined) {\n            const fallbackRoomId = Random.id();\n            roomIds.set(roomName, fallbackRoomId);\n            return fallbackRoomId;\n          }\n          return roomId;\n        };\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(zip.getEntries()), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const entry = _step.value;\n            {\n              this.logger.debug(\"Entry: \".concat(entry.entryName));\n              // Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n              if (entry.entryName.indexOf('__MACOSX') > -1) {\n                this.logger.debug(\"Ignoring the file: \".concat(entry.entryName));\n                increaseProgressCount();\n                continue;\n              }\n              // Directories are ignored, since they are \"virtual\" in a zip file\n              if (entry.isDirectory) {\n                this.logger.debug(\"Ignoring the directory entry: \".concat(entry.entryName));\n                increaseProgressCount();\n                continue;\n              }\n              // Parse the channels\n              if (entry.entryName.toLowerCase() === 'channels.csv') {\n                await super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n                const parsedChannels = this.csvParser(entry.getData().toString());\n                channelsCount = parsedChannels.length;\n                var _iteratorAbruptCompletion3 = false;\n                var _didIteratorError3 = false;\n                var _iteratorError3;\n                try {\n                  for (var _iterator3 = _asyncIterator(parsedChannels), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n                    const c = _step3.value;\n                    {\n                      const name = c[0].trim();\n                      const id = getRoomId(name);\n                      const creator = c[1].trim();\n                      const isPrivate = c[2].trim().toLowerCase() === 'private';\n                      const members = c[3].trim().split(';').map(m => m.trim()).filter(m => m);\n                      await this.converter.addChannel({\n                        importIds: [id],\n                        u: {\n                          _id: creator\n                        },\n                        name,\n                        users: members,\n                        t: isPrivate ? 'p' : 'c'\n                      });\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError3 = true;\n                  _iteratorError3 = err;\n                } finally {\n                  try {\n                    if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n                      await _iterator3.return();\n                    }\n                  } finally {\n                    if (_didIteratorError3) {\n                      throw _iteratorError3;\n                    }\n                  }\n                }\n                await super.updateRecord({\n                  'count.channels': channelsCount\n                });\n                increaseProgressCount();\n                continue;\n              }\n              // Parse the users\n              if (entry.entryName.toLowerCase() === 'users.csv') {\n                await super.updateProgress(ProgressStep.PREPARING_USERS);\n                const parsedUsers = this.csvParser(entry.getData().toString());\n                usersCount = parsedUsers.length;\n                var _iteratorAbruptCompletion4 = false;\n                var _didIteratorError4 = false;\n                var _iteratorError4;\n                try {\n                  for (var _iterator4 = _asyncIterator(parsedUsers), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n                    const u = _step4.value;\n                    {\n                      const username = u[0].trim();\n                      availableUsernames.add(username);\n                      const email = u[1].trim();\n                      const name = u[2].trim();\n                      await this.converter.addUser({\n                        type: 'user',\n                        importIds: [username],\n                        emails: [email],\n                        username,\n                        name\n                      });\n                    }\n                  }\n                } catch (err) {\n                  _didIteratorError4 = true;\n                  _iteratorError4 = err;\n                } finally {\n                  try {\n                    if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n                      await _iterator4.return();\n                    }\n                  } finally {\n                    if (_didIteratorError4) {\n                      throw _iteratorError4;\n                    }\n                  }\n                }\n                await super.updateRecord({\n                  'count.users': usersCount\n                });\n                increaseProgressCount();\n                continue;\n              }\n              // Parse the messages\n              if (entry.entryName.indexOf('/') > -1) {\n                if (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n                  await super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n                }\n                const item = entry.entryName.split('/'); // random/messages.csv\n                const folderName = item[0]; // random\n                let msgs = [];\n                try {\n                  msgs = this.csvParser(entry.getData().toString());\n                } catch (e) {\n                  this.logger.warn(\"The file \".concat(entry.entryName, \" contains invalid syntax\"), e);\n                  increaseProgressCount();\n                  continue;\n                }\n                let data;\n                const msgGroupData = item[1].split('.')[0]; // messages\n                let isDirect = false;\n                if (folderName.toLowerCase() === 'directmessages') {\n                  isDirect = true;\n                  data = msgs.map(m => ({\n                    username: m[0],\n                    ts: m[2],\n                    text: m[3],\n                    otherUsername: m[1],\n                    isDirect: true\n                  }));\n                } else {\n                  data = msgs.map(m => ({\n                    username: m[0],\n                    ts: m[1],\n                    text: m[2]\n                  }));\n                }\n                messagesCount += data.length;\n                const channelName = \"\".concat(folderName, \"/\").concat(msgGroupData);\n                await super.updateRecord({\n                  messagesstatus: channelName\n                });\n                if (isDirect) {\n                  var _iteratorAbruptCompletion5 = false;\n                  var _didIteratorError5 = false;\n                  var _iteratorError5;\n                  try {\n                    for (var _iterator5 = _asyncIterator(data), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n                      const msg = _step5.value;\n                      {\n                        if (!msg.otherUsername) {\n                          continue;\n                        }\n                        const sourceId = [msg.username, msg.otherUsername].sort().join('/');\n                        if (!dmRooms.has(sourceId)) {\n                          await this.converter.addChannel({\n                            importIds: [sourceId],\n                            users: [msg.username, msg.otherUsername],\n                            t: 'd'\n                          });\n                          dmRooms.add(sourceId);\n                        }\n                        const newMessage = {\n                          rid: sourceId,\n                          u: {\n                            _id: msg.username\n                          },\n                          ts: new Date(parseInt(msg.ts)),\n                          msg: msg.text\n                        };\n                        usedUsernames.add(msg.username);\n                        usedUsernames.add(msg.otherUsername);\n                        await this.converter.addMessage(newMessage);\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError5 = true;\n                    _iteratorError5 = err;\n                  } finally {\n                    try {\n                      if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                        await _iterator5.return();\n                      }\n                    } finally {\n                      if (_didIteratorError5) {\n                        throw _iteratorError5;\n                      }\n                    }\n                  }\n                } else {\n                  const rid = getRoomId(folderName);\n                  var _iteratorAbruptCompletion6 = false;\n                  var _didIteratorError6 = false;\n                  var _iteratorError6;\n                  try {\n                    for (var _iterator6 = _asyncIterator(data), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n                      const msg = _step6.value;\n                      {\n                        const newMessage = {\n                          rid,\n                          u: {\n                            _id: msg.username\n                          },\n                          ts: new Date(parseInt(msg.ts)),\n                          msg: msg.text\n                        };\n                        usedUsernames.add(msg.username);\n                        await this.converter.addMessage(newMessage);\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError6 = true;\n                    _iteratorError6 = err;\n                  } finally {\n                    try {\n                      if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n                        await _iterator6.return();\n                      }\n                    } finally {\n                      if (_didIteratorError6) {\n                        throw _iteratorError6;\n                      }\n                    }\n                  }\n                }\n                await super.updateRecord({\n                  'count.messages': messagesCount,\n                  'messagesstatus': null\n                });\n              }\n              increaseProgressCount();\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        if (usersCount) {\n          const {\n            value\n          } = await Settings.incrementValueById('CSV_Importer_Count', usersCount, {\n            returnDocument: 'after'\n          });\n          if (value) {\n            void notifyOnSettingChanged(value);\n          }\n        }\n        // Check if any of the message usernames was not in the imported list of users\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(usedUsernames), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const username = _step2.value;\n            {\n              var _user$importIds;\n              if (availableUsernames.has(username)) {\n                continue;\n              }\n              // Check if an user with that username already exists\n              const user = await Users.findOneByUsername(username);\n              if (user && !((_user$importIds = user.importIds) !== null && _user$importIds !== void 0 && _user$importIds.includes(username))) {\n                // Add the username to the local user's importIds so it can be found by the import process\n                // This way we can support importing new messages for existing users\n                await Users.addImportIds(user._id, username);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        await super.addCountToTotal(messagesCount + usersCount + channelsCount);\n        ImporterWebsocket.progressUpdated({\n          rate: 100\n        });\n        // Ensure we have at least a single user, channel, or message\n        if (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n          this.logger.error('No users, channels, or messages found in the import file.');\n          await super.updateProgress(ProgressStep.ERROR);\n        }\n        return super.getProgress();\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","CsvImporter","Settings","Users","Random","parse","Importer","ProgressStep","ImporterWebsocket","notifyOnSettingChanged","__reifyWaitForDeps__","constructor","info","importRecord","converterOptions","arguments","length","undefined","csvParser","prepareUsingLocalFile","fullFilePath","logger","debug","converter","clearImportData","zip","AdmZip","totalEntries","getEntryCount","progressUpdated","rate","count","oldRate","increaseProgressCount","Math","floor","e","error","messagesCount","usersCount","channelsCount","dmRooms","Set","roomIds","Map","usedUsernames","availableUsernames","getRoomId","roomName","roomId","get","fallbackRoomId","id","set","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","getEntries","_step","next","done","entry","value","concat","entryName","indexOf","isDirectory","toLowerCase","updateProgress","PREPARING_CHANNELS","parsedChannels","getData","toString","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","c","name","trim","creator","isPrivate","members","split","map","m","filter","addChannel","importIds","u","_id","users","t","err","return","updateRecord","PREPARING_USERS","parsedUsers","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","username","add","email","addUser","type","emails","progress","step","PREPARING_MESSAGES","item","folderName","msgs","warn","data","msgGroupData","isDirect","ts","text","otherUsername","channelName","messagesstatus","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","msg","sourceId","sort","join","has","newMessage","rid","Date","parseInt","addMessage","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","incrementValueById","returnDocument","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_user$importIds","user","findOneByUsername","includes","addImportIds","addCountToTotal","ERROR","getProgress","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer-csv/server/CsvImporter.ts"],"sourcesContent":["import type { IImport } from '@rocket.chat/core-typings';\nimport { Settings, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { parse } from 'csv-parse/lib/sync';\n\nimport { Importer, ProgressStep, ImporterWebsocket } from '../../importer/server';\nimport type { ConverterOptions } from '../../importer/server/classes/ImportDataConverter';\nimport type { ImporterProgress } from '../../importer/server/classes/ImporterProgress';\nimport type { ImporterInfo } from '../../importer/server/definitions/ImporterInfo';\nimport { notifyOnSettingChanged } from '../../lib/server/lib/notifyListener';\n\nexport class CsvImporter extends Importer {\n\tprivate csvParser: (csv: string) => string[];\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tsuper(info, importRecord, converterOptions);\n\n\t\tthis.csvParser = parse;\n\t}\n\n\tasync prepareUsingLocalFile(fullFilePath: string): Promise<ImporterProgress> {\n\t\tthis.logger.debug('start preparing import operation');\n\t\tawait this.converter.clearImportData();\n\n\t\tconst zip = new this.AdmZip(fullFilePath);\n\t\tconst totalEntries = zip.getEntryCount();\n\n\t\tImporterWebsocket.progressUpdated({ rate: 0 });\n\n\t\tlet count = 0;\n\t\tlet oldRate = 0;\n\n\t\tconst increaseProgressCount = () => {\n\t\t\ttry {\n\t\t\t\tcount++;\n\t\t\t\tconst rate = Math.floor((count * 1000) / totalEntries) / 10;\n\t\t\t\tif (rate > oldRate) {\n\t\t\t\t\tImporterWebsocket.progressUpdated({ rate });\n\t\t\t\t\toldRate = rate;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t}\n\t\t};\n\n\t\tlet messagesCount = 0;\n\t\tlet usersCount = 0;\n\t\tlet channelsCount = 0;\n\t\tconst dmRooms = new Set<string>();\n\t\tconst roomIds = new Map<string, string>();\n\t\tconst usedUsernames = new Set<string>();\n\t\tconst availableUsernames = new Set<string>();\n\n\t\tconst getRoomId = (roomName: string) => {\n\t\t\tconst roomId = roomIds.get(roomName);\n\n\t\t\tif (roomId === undefined) {\n\t\t\t\tconst fallbackRoomId = Random.id();\n\t\t\t\troomIds.set(roomName, fallbackRoomId);\n\t\t\t\treturn fallbackRoomId;\n\t\t\t}\n\n\t\t\treturn roomId;\n\t\t};\n\n\t\tfor await (const entry of zip.getEntries()) {\n\t\t\tthis.logger.debug(`Entry: ${entry.entryName}`);\n\n\t\t\t// Ignore anything that has `__MACOSX` in it's name, as sadly these things seem to mess everything up\n\t\t\tif (entry.entryName.indexOf('__MACOSX') > -1) {\n\t\t\t\tthis.logger.debug(`Ignoring the file: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Directories are ignored, since they are \"virtual\" in a zip file\n\t\t\tif (entry.isDirectory) {\n\t\t\t\tthis.logger.debug(`Ignoring the directory entry: ${entry.entryName}`);\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the channels\n\t\t\tif (entry.entryName.toLowerCase() === 'channels.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\tconst parsedChannels = this.csvParser(entry.getData().toString());\n\t\t\t\tchannelsCount = parsedChannels.length;\n\n\t\t\t\tfor await (const c of parsedChannels) {\n\t\t\t\t\tconst name = c[0].trim();\n\t\t\t\t\tconst id = getRoomId(name);\n\t\t\t\t\tconst creator = c[1].trim();\n\t\t\t\t\tconst isPrivate = c[2].trim().toLowerCase() === 'private';\n\t\t\t\t\tconst members = c[3]\n\t\t\t\t\t\t.trim()\n\t\t\t\t\t\t.split(';')\n\t\t\t\t\t\t.map((m) => m.trim())\n\t\t\t\t\t\t.filter((m) => m);\n\n\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\timportIds: [id],\n\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t_id: creator,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tusers: members,\n\t\t\t\t\t\tt: isPrivate ? 'p' : 'c',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.channels': channelsCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the users\n\t\t\tif (entry.entryName.toLowerCase() === 'users.csv') {\n\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\tconst parsedUsers = this.csvParser(entry.getData().toString());\n\t\t\t\tusersCount = parsedUsers.length;\n\n\t\t\t\tfor await (const u of parsedUsers) {\n\t\t\t\t\tconst username = u[0].trim();\n\t\t\t\t\tavailableUsernames.add(username);\n\n\t\t\t\t\tconst email = u[1].trim();\n\t\t\t\t\tconst name = u[2].trim();\n\n\t\t\t\t\tawait this.converter.addUser({\n\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\timportIds: [username],\n\t\t\t\t\t\temails: [email],\n\t\t\t\t\t\tusername,\n\t\t\t\t\t\tname,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.users': usersCount });\n\t\t\t\tincreaseProgressCount();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Parse the messages\n\t\t\tif (entry.entryName.indexOf('/') > -1) {\n\t\t\t\tif (this.progress.step !== ProgressStep.PREPARING_MESSAGES) {\n\t\t\t\t\tawait super.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\t}\n\n\t\t\t\tconst item = entry.entryName.split('/'); // random/messages.csv\n\t\t\t\tconst folderName = item[0]; // random\n\n\t\t\t\tlet msgs = [];\n\n\t\t\t\ttry {\n\t\t\t\t\tmsgs = this.csvParser(entry.getData().toString());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis.logger.warn(`The file ${entry.entryName} contains invalid syntax`, e);\n\t\t\t\t\tincreaseProgressCount();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet data: { username: string; ts: string; text: string; otherUsername?: string; isDirect?: true }[];\n\t\t\t\tconst msgGroupData = item[1].split('.')[0]; // messages\n\t\t\t\tlet isDirect = false;\n\n\t\t\t\tif (folderName.toLowerCase() === 'directmessages') {\n\t\t\t\t\tisDirect = true;\n\t\t\t\t\tdata = msgs.map((m) => ({\n\t\t\t\t\t\tusername: m[0],\n\t\t\t\t\t\tts: m[2],\n\t\t\t\t\t\ttext: m[3],\n\t\t\t\t\t\totherUsername: m[1],\n\t\t\t\t\t\tisDirect: true,\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\t\t\t\t\tdata = msgs.map((m) => ({ username: m[0], ts: m[1], text: m[2] }));\n\t\t\t\t}\n\n\t\t\t\tmessagesCount += data.length;\n\t\t\t\tconst channelName = `${folderName}/${msgGroupData}`;\n\n\t\t\t\tawait super.updateRecord({ messagesstatus: channelName });\n\n\t\t\t\tif (isDirect) {\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tif (!msg.otherUsername) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst sourceId = [msg.username, msg.otherUsername].sort().join('/');\n\n\t\t\t\t\t\tif (!dmRooms.has(sourceId)) {\n\t\t\t\t\t\t\tawait this.converter.addChannel({\n\t\t\t\t\t\t\t\timportIds: [sourceId],\n\t\t\t\t\t\t\t\tusers: [msg.username, msg.otherUsername],\n\t\t\t\t\t\t\t\tt: 'd',\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tdmRooms.add(sourceId);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid: sourceId,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tusedUsernames.add(msg.otherUsername);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst rid = getRoomId(folderName);\n\n\t\t\t\t\tfor await (const msg of data) {\n\t\t\t\t\t\tconst newMessage = {\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t_id: msg.username,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tts: new Date(parseInt(msg.ts)),\n\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tusedUsernames.add(msg.username);\n\t\t\t\t\t\tawait this.converter.addMessage(newMessage);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait super.updateRecord({ 'count.messages': messagesCount, 'messagesstatus': null });\n\t\t\t}\n\n\t\t\tincreaseProgressCount();\n\t\t}\n\n\t\tif (usersCount) {\n\t\t\tconst { value } = await Settings.incrementValueById('CSV_Importer_Count', usersCount, { returnDocument: 'after' });\n\t\t\tif (value) {\n\t\t\t\tvoid notifyOnSettingChanged(value);\n\t\t\t}\n\t\t}\n\n\t\t// Check if any of the message usernames was not in the imported list of users\n\t\tfor await (const username of usedUsernames) {\n\t\t\tif (availableUsernames.has(username)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if an user with that username already exists\n\t\t\tconst user = await Users.findOneByUsername(username);\n\t\t\tif (user && !user.importIds?.includes(username)) {\n\t\t\t\t// Add the username to the local user's importIds so it can be found by the import process\n\t\t\t\t// This way we can support importing new messages for existing users\n\t\t\t\tawait Users.addImportIds(user._id, username);\n\t\t\t}\n\t\t}\n\n\t\tawait super.addCountToTotal(messagesCount + usersCount + channelsCount);\n\t\tImporterWebsocket.progressUpdated({ rate: 100 });\n\n\t\t// Ensure we have at least a single user, channel, or message\n\t\tif (usersCount === 0 && channelsCount === 0 && messagesCount === 0) {\n\t\t\tthis.logger.error('No users, channels, or messages found in the import file.');\n\t\t\tawait super.updateProgress(ProgressStep.ERROR);\n\t\t}\n\n\t\treturn super.getProgress();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0690b3a0771cfc9cab8c4d44ea752f4292d09f1b"}
