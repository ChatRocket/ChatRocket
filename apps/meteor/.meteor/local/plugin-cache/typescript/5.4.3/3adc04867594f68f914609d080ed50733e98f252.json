{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/settings/server/SettingsRegistry.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/settings/server/SettingsRegistry.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/settings/server/SettingsRegistry.ts","inputSourceMap":{"version":3,"file":"app/settings/server/SettingsRegistry.ts","sourceRoot":"","sources":["app/settings/server/SettingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISetting, ISettingGroup, Optional, SettingValue } from '@rocket.chat/core-typings';\nimport { isSettingEnterprise } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport type { ISettingsModel } from '@rocket.chat/model-typings';\nimport { isEqual } from 'underscore';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ICachedSettings } from './CachedSettings';\nimport { getSettingDefaults } from './functions/getSettingDefaults';\nimport { overrideSetting } from './functions/overrideSetting';\nimport { overwriteSetting } from './functions/overwriteSetting';\nimport { validateSetting } from './functions/validateSetting';\n\nconst blockedSettings = new Set<string>();\nconst hiddenSettings = new Set<string>();\nconst wizardRequiredSettings = new Set<string>();\n\nif (process.env.SETTINGS_BLOCKED) {\n\tprocess.env.SETTINGS_BLOCKED.split(',').forEach((settingId) => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n\tprocess.env.SETTINGS_HIDDEN.split(',').forEach((settingId) => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n\tprocess.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach((settingId) => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\nexport const SettingsEvents = new Emitter<{\n\t'store-setting-value': [ISetting, { value: SettingValue }];\n\t'fetch-settings': ISetting[];\n\t'remove-setting-value': ISetting;\n}>();\n\nconst getGroupDefaults = (_id: string, options: ISettingAddGroupOptions = {}): ISettingGroup => ({\n\t_id,\n\ti18nLabel: _id,\n\ti18nDescription: `${_id}_Description`,\n\t...options,\n\tsorter: options.sorter || 0,\n\tblocked: blockedSettings.has(_id),\n\thidden: hiddenSettings.has(_id),\n\ttype: 'group',\n\t...(options.displayQuery && { displayQuery: JSON.stringify(options.displayQuery) }),\n});\n\ntype ISettingAddGroupOptions = Partial<ISettingGroup>;\n\ntype addSectionCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addSectionCallback): Promise<void>;\n}) => Promise<void>;\n\ntype addGroupCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\tsection(section: string, cb: addSectionCallback): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addGroupCallback): Promise<void>;\n}) => Promise<void>;\n\ntype ISettingAddOptions = Partial<ISetting>;\n\nconst compareSettingsIgnoringKeys =\n\t(keys: Array<keyof ISetting>) =>\n\t(a: ISetting, b: ISetting): boolean =>\n\t\t[...new Set([...Object.keys(a), ...Object.keys(b)])]\n\t\t\t.filter((key) => !keys.includes(key as keyof ISetting))\n\t\t\t.every((key) => isEqual(a[key as keyof ISetting], b[key as keyof ISetting]));\n\nexport const compareSettings = compareSettingsIgnoringKeys([\n\t'value',\n\t'ts',\n\t'createdAt',\n\t'valueSource',\n\t'packageValue',\n\t'processEnvValue',\n\t'_updatedAt',\n]);\n\nexport class SettingsRegistry {\n\tprivate model: ISettingsModel;\n\n\tprivate store: ICachedSettings;\n\n\tprivate _sorter: { [key: string]: number } = {};\n\n\tconstructor({ store, model }: { store: ICachedSettings; model: ISettingsModel }) {\n\t\tthis.store = store;\n\t\tthis.model = model;\n\t}\n\n\t/*\n\t * Add a setting\n\t */\n\tasync add(_id: string, value: SettingValue, { sorter, section, group, ...options }: ISettingAddOptions = {}): Promise<void> {\n\t\tif (!_id || value == null) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst sorterKey = group && section ? `${group}_${section}` : group;\n\n\t\tif (sorterKey && this._sorter[sorterKey] == null) {\n\t\t\tif (group && section) {\n\t\t\t\tconst currentGroupValue = this._sorter[group] ?? 0;\n\t\t\t\tthis._sorter[sorterKey] = currentGroupValue * 1000;\n\t\t\t}\n\t\t}\n\n\t\tif (sorterKey) {\n\t\t\tthis._sorter[sorterKey] = this._sorter[sorterKey] ?? -1;\n\t\t}\n\n\t\tconst settingFromCode = getSettingDefaults(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\ttype: 'string',\n\t\t\t\tvalue,\n\t\t\t\tsorter: sorter ?? (sorterKey?.length && this._sorter[sorterKey]++),\n\t\t\t\tgroup,\n\t\t\t\tsection,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tblockedSettings,\n\t\t\thiddenSettings,\n\t\t\twizardRequiredSettings,\n\t\t);\n\n\t\tif (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n\t\t\tSystemLogger.error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t\tthrow new Error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t}\n\n\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {\n\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting code ${_id}: ${(e as Error).message}`);\n\t\t}\n\n\t\tconst isOverwritten = settingFromCode !== settingFromCodeOverwritten || (settingStored && settingStored !== settingStoredOverwritten);\n\n\t\tconst { _id: _, ...settingProps } = settingFromCodeOverwritten;\n\n\t\tif (settingStored && !compareSettings(settingStored, settingFromCodeOverwritten)) {\n\t\t\tconst { value: _value, ...settingOverwrittenProps } = settingFromCodeOverwritten;\n\n\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\tconst updatedProps = (() => {\n\t\t\t\treturn {\n\t\t\t\t\t...settingOverwrittenProps,\n\t\t\t\t\t...(settingStoredOverwritten &&\n\t\t\t\t\t\tsettingStored.value !== settingStoredOverwritten.value && { value: settingStoredOverwritten.value }),\n\t\t\t\t};\n\t\t\t})();\n\n\t\t\tawait this.saveUpdatedSetting(_id, updatedProps, removedKeys);\n\t\t\tif ('value' in updatedProps) {\n\t\t\t\tthis.store.set(updatedProps as ISetting);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored && isOverwritten) {\n\t\t\tif (settingStored.value !== settingFromCodeOverwritten.value) {\n\t\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\t\tawait this.saveUpdatedSetting(_id, settingProps, removedKeys);\n\t\t\t\tthis.store.set(settingFromCodeOverwritten);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored) {\n\t\t\ttry {\n\t\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingStored?.value);\n\t\t\t} catch (e) {\n\t\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting stored ${_id}: ${(e as Error).message}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingOverwrittenDefault = overrideSetting(settingFromCode);\n\n\t\tconst setting = isOverwritten ? settingFromCodeOverwritten : settingOverwrittenDefault;\n\n\t\tawait this.model.insertOne(setting); // no need to emit unless we remove the oplog\n\n\t\tthis.store.set(setting);\n\t}\n\n\t/*\n\t * Add a setting group\n\t */\n\tasync addGroup(_id: string, cb?: addGroupCallback): Promise<void>;\n\n\t// eslint-disable-next-line no-dupe-class-members\n\tasync addGroup(_id: string, groupOptions: ISettingAddGroupOptions | addGroupCallback = {}, cb?: addGroupCallback): Promise<void> {\n\t\tif (!_id || (groupOptions instanceof Function && cb)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })\n\t\t\t\t: getGroupDefaults(_id, { sorter: this._sorter[_id], ...groupOptions });\n\n\t\tif (!this.store.has(_id)) {\n\t\t\toptions.ts = new Date();\n\t\t\tawait this.model.insertOne(options as ISetting);\n\t\t\tthis.store.set(options as ISetting);\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst addWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(id: string, value: SettingValue, options: ISettingAddOptions = {}): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn this.add(id, value, mergedOptions);\n\t\t\t};\n\t\tconst sectionSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\t\tconst sectionWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(section: string, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, section };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\tsection: sectionWith(mergedOptions),\n\t\t\t\t\twith: groupSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\treturn groupSetWith({ group: _id })({}, callback);\n\t}\n\n\tprivate async saveUpdatedSetting(\n\t\t_id: string,\n\t\tsettingProps: Omit<Optional<ISetting, 'value'>, '_id'>,\n\t\tremovedKeys?: string[],\n\t): Promise<void> {\n\t\tawait this.model.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: settingProps,\n\t\t\t\t...(removedKeys?.length && {\n\t\t\t\t\t$unset: removedKeys.reduce((unset, key) => ({ ...unset, [key]: 1 }), {}),\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/settings/server/SettingsRegistry.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/settings/server/SettingsRegistry.ts","inputSourceMap":{"version":3,"file":"app/settings/server/SettingsRegistry.ts","sourceRoot":"","sources":["app/settings/server/SettingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISetting, ISettingGroup, Optional, SettingValue } from '@rocket.chat/core-typings';\nimport { isSettingEnterprise } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport type { ISettingsModel } from '@rocket.chat/model-typings';\nimport { isEqual } from 'underscore';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ICachedSettings } from './CachedSettings';\nimport { getSettingDefaults } from './functions/getSettingDefaults';\nimport { overrideSetting } from './functions/overrideSetting';\nimport { overwriteSetting } from './functions/overwriteSetting';\nimport { validateSetting } from './functions/validateSetting';\n\nconst blockedSettings = new Set<string>();\nconst hiddenSettings = new Set<string>();\nconst wizardRequiredSettings = new Set<string>();\n\nif (process.env.SETTINGS_BLOCKED) {\n\tprocess.env.SETTINGS_BLOCKED.split(',').forEach((settingId) => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n\tprocess.env.SETTINGS_HIDDEN.split(',').forEach((settingId) => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n\tprocess.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach((settingId) => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\nexport const SettingsEvents = new Emitter<{\n\t'store-setting-value': [ISetting, { value: SettingValue }];\n\t'fetch-settings': ISetting[];\n\t'remove-setting-value': ISetting;\n}>();\n\nconst getGroupDefaults = (_id: string, options: ISettingAddGroupOptions = {}): ISettingGroup => ({\n\t_id,\n\ti18nLabel: _id,\n\ti18nDescription: `${_id}_Description`,\n\t...options,\n\tsorter: options.sorter || 0,\n\tblocked: blockedSettings.has(_id),\n\thidden: hiddenSettings.has(_id),\n\ttype: 'group',\n\t...(options.displayQuery && { displayQuery: JSON.stringify(options.displayQuery) }),\n});\n\ntype ISettingAddGroupOptions = Partial<ISettingGroup>;\n\ntype addSectionCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addSectionCallback): Promise<void>;\n}) => Promise<void>;\n\ntype addGroupCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\tsection(section: string, cb: addSectionCallback): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addGroupCallback): Promise<void>;\n}) => Promise<void>;\n\ntype ISettingAddOptions = Partial<ISetting>;\n\nconst compareSettingsIgnoringKeys =\n\t(keys: Array<keyof ISetting>) =>\n\t(a: ISetting, b: ISetting): boolean =>\n\t\t[...new Set([...Object.keys(a), ...Object.keys(b)])]\n\t\t\t.filter((key) => !keys.includes(key as keyof ISetting))\n\t\t\t.every((key) => isEqual(a[key as keyof ISetting], b[key as keyof ISetting]));\n\nexport const compareSettings = compareSettingsIgnoringKeys([\n\t'value',\n\t'ts',\n\t'createdAt',\n\t'valueSource',\n\t'packageValue',\n\t'processEnvValue',\n\t'_updatedAt',\n]);\n\nexport class SettingsRegistry {\n\tprivate model: ISettingsModel;\n\n\tprivate store: ICachedSettings;\n\n\tprivate _sorter: { [key: string]: number } = {};\n\n\tconstructor({ store, model }: { store: ICachedSettings; model: ISettingsModel }) {\n\t\tthis.store = store;\n\t\tthis.model = model;\n\t}\n\n\t/*\n\t * Add a setting\n\t */\n\tasync add(_id: string, value: SettingValue, { sorter, section, group, ...options }: ISettingAddOptions = {}): Promise<void> {\n\t\tif (!_id || value == null) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst sorterKey = group && section ? `${group}_${section}` : group;\n\n\t\tif (sorterKey && this._sorter[sorterKey] == null) {\n\t\t\tif (group && section) {\n\t\t\t\tconst currentGroupValue = this._sorter[group] ?? 0;\n\t\t\t\tthis._sorter[sorterKey] = currentGroupValue * 1000;\n\t\t\t}\n\t\t}\n\n\t\tif (sorterKey) {\n\t\t\tthis._sorter[sorterKey] = this._sorter[sorterKey] ?? -1;\n\t\t}\n\n\t\tconst settingFromCode = getSettingDefaults(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\ttype: 'string',\n\t\t\t\tvalue,\n\t\t\t\tsorter: sorter ?? (sorterKey?.length && this._sorter[sorterKey]++),\n\t\t\t\tgroup,\n\t\t\t\tsection,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tblockedSettings,\n\t\t\thiddenSettings,\n\t\t\twizardRequiredSettings,\n\t\t);\n\n\t\tif (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n\t\t\tSystemLogger.error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t\tthrow new Error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t}\n\n\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {\n\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting code ${_id}: ${(e as Error).message}`);\n\t\t}\n\n\t\tconst isOverwritten = settingFromCode !== settingFromCodeOverwritten || (settingStored && settingStored !== settingStoredOverwritten);\n\n\t\tconst { _id: _, ...settingProps } = settingFromCodeOverwritten;\n\n\t\tif (settingStored && !compareSettings(settingStored, settingFromCodeOverwritten)) {\n\t\t\tconst { value: _value, ...settingOverwrittenProps } = settingFromCodeOverwritten;\n\n\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\tconst updatedProps = (() => {\n\t\t\t\treturn {\n\t\t\t\t\t...settingOverwrittenProps,\n\t\t\t\t\t...(settingStoredOverwritten &&\n\t\t\t\t\t\tsettingStored.value !== settingStoredOverwritten.value && { value: settingStoredOverwritten.value }),\n\t\t\t\t};\n\t\t\t})();\n\n\t\t\tawait this.saveUpdatedSetting(_id, updatedProps, removedKeys);\n\t\t\tif ('value' in updatedProps) {\n\t\t\t\tthis.store.set(updatedProps as ISetting);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored && isOverwritten) {\n\t\t\tif (settingStored.value !== settingFromCodeOverwritten.value) {\n\t\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\t\tawait this.saveUpdatedSetting(_id, settingProps, removedKeys);\n\t\t\t\tthis.store.set(settingFromCodeOverwritten);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored) {\n\t\t\ttry {\n\t\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingStored?.value);\n\t\t\t} catch (e) {\n\t\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting stored ${_id}: ${(e as Error).message}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingOverwrittenDefault = overrideSetting(settingFromCode);\n\n\t\tconst setting = isOverwritten ? settingFromCodeOverwritten : settingOverwrittenDefault;\n\n\t\tawait this.model.insertOne(setting); // no need to emit unless we remove the oplog\n\n\t\tthis.store.set(setting);\n\t}\n\n\t/*\n\t * Add a setting group\n\t */\n\tasync addGroup(_id: string, cb?: addGroupCallback): Promise<void>;\n\n\t// eslint-disable-next-line no-dupe-class-members\n\tasync addGroup(_id: string, groupOptions: ISettingAddGroupOptions | addGroupCallback = {}, cb?: addGroupCallback): Promise<void> {\n\t\tif (!_id || (groupOptions instanceof Function && cb)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })\n\t\t\t\t: getGroupDefaults(_id, { sorter: this._sorter[_id], ...groupOptions });\n\n\t\tif (!this.store.has(_id)) {\n\t\t\toptions.ts = new Date();\n\t\t\tawait this.model.insertOne(options as ISetting);\n\t\t\tthis.store.set(options as ISetting);\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst addWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(id: string, value: SettingValue, options: ISettingAddOptions = {}): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn this.add(id, value, mergedOptions);\n\t\t\t};\n\t\tconst sectionSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\t\tconst sectionWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(section: string, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, section };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\tsection: sectionWith(mergedOptions),\n\t\t\t\t\twith: groupSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\treturn groupSetWith({ group: _id })({}, callback);\n\t}\n\n\tprivate async saveUpdatedSetting(\n\t\t_id: string,\n\t\tsettingProps: Omit<Optional<ISetting, 'value'>, '_id'>,\n\t\tremovedKeys?: string[],\n\t): Promise<void> {\n\t\tawait this.model.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: settingProps,\n\t\t\t\t...(removedKeys?.length && {\n\t\t\t\t\t$unset: removedKeys.reduce((unset, key) => ({ ...unset, [key]: 1 }), {}),\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"sorter\", \"section\", \"group\"],\n      _excluded2 = [\"_id\"],\n      _excluded3 = [\"value\"];\n    module.export({\n      SettingsEvents: () => SettingsEvents,\n      compareSettings: () => compareSettings,\n      SettingsRegistry: () => SettingsRegistry\n    });\n    let isSettingEnterprise;\n    module.link(\"@rocket.chat/core-typings\", {\n      isSettingEnterprise(v) {\n        isSettingEnterprise = v;\n      }\n    }, 0);\n    let Emitter;\n    module.link(\"@rocket.chat/emitter\", {\n      Emitter(v) {\n        Emitter = v;\n      }\n    }, 1);\n    let isEqual;\n    module.link(\"underscore\", {\n      isEqual(v) {\n        isEqual = v;\n      }\n    }, 2);\n    let SystemLogger;\n    module.link(\"../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 3);\n    let getSettingDefaults;\n    module.link(\"./functions/getSettingDefaults\", {\n      getSettingDefaults(v) {\n        getSettingDefaults = v;\n      }\n    }, 4);\n    let overrideSetting;\n    module.link(\"./functions/overrideSetting\", {\n      overrideSetting(v) {\n        overrideSetting = v;\n      }\n    }, 5);\n    let overwriteSetting;\n    module.link(\"./functions/overwriteSetting\", {\n      overwriteSetting(v) {\n        overwriteSetting = v;\n      }\n    }, 6);\n    let validateSetting;\n    module.link(\"./functions/validateSetting\", {\n      validateSetting(v) {\n        validateSetting = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const blockedSettings = new Set();\n    const hiddenSettings = new Set();\n    const wizardRequiredSettings = new Set();\n    if (process.env.SETTINGS_BLOCKED) {\n      process.env.SETTINGS_BLOCKED.split(',').forEach(settingId => blockedSettings.add(settingId.trim()));\n    }\n    if (process.env.SETTINGS_HIDDEN) {\n      process.env.SETTINGS_HIDDEN.split(',').forEach(settingId => hiddenSettings.add(settingId.trim()));\n    }\n    if (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n      process.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach(settingId => wizardRequiredSettings.add(settingId.trim()));\n    }\n    const IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n    /*\n     * @deprecated\n     * please do not use event emitter to mutate values\n     */\n    const SettingsEvents = new Emitter();\n    const getGroupDefaults = function (_id) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _objectSpread(_objectSpread({\n        _id,\n        i18nLabel: _id,\n        i18nDescription: \"\".concat(_id, \"_Description\")\n      }, options), {}, {\n        sorter: options.sorter || 0,\n        blocked: blockedSettings.has(_id),\n        hidden: hiddenSettings.has(_id),\n        type: 'group'\n      }, options.displayQuery && {\n        displayQuery: JSON.stringify(options.displayQuery)\n      });\n    };\n    const compareSettingsIgnoringKeys = keys => (a, b) => [...new Set([...Object.keys(a), ...Object.keys(b)])].filter(key => !keys.includes(key)).every(key => isEqual(a[key], b[key]));\n    const compareSettings = compareSettingsIgnoringKeys(['value', 'ts', 'createdAt', 'valueSource', 'packageValue', 'processEnvValue', '_updatedAt']);\n    class SettingsRegistry {\n      constructor(_ref) {\n        let {\n          store,\n          model\n        } = _ref;\n        this.model = void 0;\n        this.store = void 0;\n        this._sorter = {};\n        this.store = store;\n        this.model = model;\n      }\n      /*\n       * Add a setting\n       */\n      async add(_id, value) {\n        let _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let {\n            sorter,\n            section,\n            group\n          } = _ref2,\n          options = _objectWithoutProperties(_ref2, _excluded);\n        if (!_id || value == null) {\n          throw new Error('Invalid arguments');\n        }\n        const sorterKey = group && section ? \"\".concat(group, \"_\").concat(section) : group;\n        if (sorterKey && this._sorter[sorterKey] == null) {\n          if (group && section) {\n            var _this$_sorter$group;\n            const currentGroupValue = (_this$_sorter$group = this._sorter[group]) !== null && _this$_sorter$group !== void 0 ? _this$_sorter$group : 0;\n            this._sorter[sorterKey] = currentGroupValue * 1000;\n          }\n        }\n        if (sorterKey) {\n          var _this$_sorter$sorterK;\n          this._sorter[sorterKey] = (_this$_sorter$sorterK = this._sorter[sorterKey]) !== null && _this$_sorter$sorterK !== void 0 ? _this$_sorter$sorterK : -1;\n        }\n        const settingFromCode = getSettingDefaults(_objectSpread({\n          _id,\n          type: 'string',\n          value,\n          sorter: sorter !== null && sorter !== void 0 ? sorter : (sorterKey === null || sorterKey === void 0 ? void 0 : sorterKey.length) && this._sorter[sorterKey]++,\n          group,\n          section\n        }, options), blockedSettings, hiddenSettings, wizardRequiredSettings);\n        if (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n          SystemLogger.error(\"Enterprise setting \".concat(_id, \" is missing the invalidValue option\"));\n          throw new Error(\"Enterprise setting \".concat(_id, \" is missing the invalidValue option\"));\n        }\n        const settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n        const settingStored = this.store.getSetting(_id);\n        const settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n        try {\n          validateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n        } catch (e) {\n          IS_DEVELOPMENT && SystemLogger.error(\"Invalid setting code \".concat(_id, \": \").concat(e.message));\n        }\n        const isOverwritten = settingFromCode !== settingFromCodeOverwritten || settingStored && settingStored !== settingStoredOverwritten;\n        const {\n            _id: _\n          } = settingFromCodeOverwritten,\n          settingProps = _objectWithoutProperties(settingFromCodeOverwritten, _excluded2);\n        if (settingStored && !compareSettings(settingStored, settingFromCodeOverwritten)) {\n          const {\n              value: _value\n            } = settingFromCodeOverwritten,\n            settingOverwrittenProps = _objectWithoutProperties(settingFromCodeOverwritten, _excluded3);\n          const overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n          const removedKeys = Object.keys(settingStored).filter(key => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n          const updatedProps = (() => {\n            return _objectSpread(_objectSpread({}, settingOverwrittenProps), settingStoredOverwritten && settingStored.value !== settingStoredOverwritten.value && {\n              value: settingStoredOverwritten.value\n            });\n          })();\n          await this.saveUpdatedSetting(_id, updatedProps, removedKeys);\n          if ('value' in updatedProps) {\n            this.store.set(updatedProps);\n          }\n          return;\n        }\n        if (settingStored && isOverwritten) {\n          if (settingStored.value !== settingFromCodeOverwritten.value) {\n            const overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n            const removedKeys = Object.keys(settingStored).filter(key => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n            await this.saveUpdatedSetting(_id, settingProps, removedKeys);\n            this.store.set(settingFromCodeOverwritten);\n          }\n          return;\n        }\n        if (settingStored) {\n          try {\n            validateSetting(settingFromCode._id, settingFromCode.type, settingStored === null || settingStored === void 0 ? void 0 : settingStored.value);\n          } catch (e) {\n            IS_DEVELOPMENT && SystemLogger.error(\"Invalid setting stored \".concat(_id, \": \").concat(e.message));\n          }\n          return;\n        }\n        const settingOverwrittenDefault = overrideSetting(settingFromCode);\n        const setting = isOverwritten ? settingFromCodeOverwritten : settingOverwrittenDefault;\n        await this.model.insertOne(setting); // no need to emit unless we remove the oplog\n        this.store.set(setting);\n      }\n      // eslint-disable-next-line no-dupe-class-members\n      async addGroup(_id) {\n        var _this = this;\n        let groupOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let cb = arguments.length > 2 ? arguments[2] : undefined;\n        if (!_id || groupOptions instanceof Function && cb) {\n          throw new Error('Invalid arguments');\n        }\n        const callback = groupOptions instanceof Function ? groupOptions : cb;\n        const options = groupOptions instanceof Function ? getGroupDefaults(_id, {\n          sorter: this._sorter[_id]\n        }) : getGroupDefaults(_id, _objectSpread({\n          sorter: this._sorter[_id]\n        }, groupOptions));\n        if (!this.store.has(_id)) {\n          options.ts = new Date();\n          await this.model.insertOne(options);\n          this.store.set(options);\n        }\n        if (!callback) {\n          return;\n        }\n        const addWith = preset => function (id, value) {\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n          return _this.add(id, value, mergedOptions);\n        };\n        const sectionSetWith = preset => (options, cb) => {\n          const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n          return cb.call({\n            add: addWith(mergedOptions),\n            with: sectionSetWith(mergedOptions)\n          });\n        };\n        const sectionWith = preset => (section, cb) => {\n          const mergedOptions = _objectSpread(_objectSpread({}, preset), {}, {\n            section\n          });\n          return cb.call({\n            add: addWith(mergedOptions),\n            with: sectionSetWith(mergedOptions)\n          });\n        };\n        const groupSetWith = preset => (options, cb) => {\n          const mergedOptions = _objectSpread(_objectSpread({}, preset), options);\n          return cb.call({\n            add: addWith(mergedOptions),\n            section: sectionWith(mergedOptions),\n            with: groupSetWith(mergedOptions)\n          });\n        };\n        return groupSetWith({\n          group: _id\n        })({}, callback);\n      }\n      async saveUpdatedSetting(_id, settingProps, removedKeys) {\n        await this.model.updateOne({\n          _id\n        }, _objectSpread({\n          $set: settingProps\n        }, (removedKeys === null || removedKeys === void 0 ? void 0 : removedKeys.length) && {\n          $unset: removedKeys.reduce((unset, key) => _objectSpread(_objectSpread({}, unset), {}, {\n            [key]: 1\n          }), {})\n        }), {\n          upsert: true\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","_excluded2","_excluded3","export","SettingsEvents","compareSettings","SettingsRegistry","isSettingEnterprise","Emitter","isEqual","SystemLogger","getSettingDefaults","overrideSetting","overwriteSetting","validateSetting","__reifyWaitForDeps__","blockedSettings","Set","hiddenSettings","wizardRequiredSettings","process","env","SETTINGS_BLOCKED","split","forEach","settingId","add","trim","SETTINGS_HIDDEN","SETTINGS_REQUIRED_ON_WIZARD","IS_DEVELOPMENT","NODE_ENV","getGroupDefaults","_id","options","arguments","length","undefined","i18nLabel","i18nDescription","concat","sorter","blocked","has","hidden","type","displayQuery","JSON","stringify","compareSettingsIgnoringKeys","keys","a","b","Object","filter","key","includes","every","constructor","_ref","store","model","_sorter","value","_ref2","section","group","Error","sorterKey","_this$_sorter$group","currentGroupValue","_this$_sorter$sorterK","settingFromCode","error","settingFromCodeOverwritten","settingStored","getSetting","settingStoredOverwritten","e","message","isOverwritten","_","settingProps","_value","settingOverwrittenProps","overwrittenKeys","removedKeys","updatedProps","saveUpdatedSetting","set","settingOverwrittenDefault","setting","insertOne","addGroup","_this","groupOptions","cb","Function","callback","ts","Date","addWith","preset","id","mergedOptions","sectionSetWith","call","with","sectionWith","groupSetWith","updateOne","$set","$unset","reduce","unset","upsert","__reify_async_result__","_reifyError","self","async"],"sources":["app/settings/server/SettingsRegistry.ts"],"sourcesContent":["import type { ISetting, ISettingGroup, Optional, SettingValue } from '@rocket.chat/core-typings';\nimport { isSettingEnterprise } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport type { ISettingsModel } from '@rocket.chat/model-typings';\nimport { isEqual } from 'underscore';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ICachedSettings } from './CachedSettings';\nimport { getSettingDefaults } from './functions/getSettingDefaults';\nimport { overrideSetting } from './functions/overrideSetting';\nimport { overwriteSetting } from './functions/overwriteSetting';\nimport { validateSetting } from './functions/validateSetting';\n\nconst blockedSettings = new Set<string>();\nconst hiddenSettings = new Set<string>();\nconst wizardRequiredSettings = new Set<string>();\n\nif (process.env.SETTINGS_BLOCKED) {\n\tprocess.env.SETTINGS_BLOCKED.split(',').forEach((settingId) => blockedSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_HIDDEN) {\n\tprocess.env.SETTINGS_HIDDEN.split(',').forEach((settingId) => hiddenSettings.add(settingId.trim()));\n}\n\nif (process.env.SETTINGS_REQUIRED_ON_WIZARD) {\n\tprocess.env.SETTINGS_REQUIRED_ON_WIZARD.split(',').forEach((settingId) => wizardRequiredSettings.add(settingId.trim()));\n}\n\nconst IS_DEVELOPMENT = process.env.NODE_ENV === 'development';\n\n/*\n * @deprecated\n * please do not use event emitter to mutate values\n */\nexport const SettingsEvents = new Emitter<{\n\t'store-setting-value': [ISetting, { value: SettingValue }];\n\t'fetch-settings': ISetting[];\n\t'remove-setting-value': ISetting;\n}>();\n\nconst getGroupDefaults = (_id: string, options: ISettingAddGroupOptions = {}): ISettingGroup => ({\n\t_id,\n\ti18nLabel: _id,\n\ti18nDescription: `${_id}_Description`,\n\t...options,\n\tsorter: options.sorter || 0,\n\tblocked: blockedSettings.has(_id),\n\thidden: hiddenSettings.has(_id),\n\ttype: 'group',\n\t...(options.displayQuery && { displayQuery: JSON.stringify(options.displayQuery) }),\n});\n\ntype ISettingAddGroupOptions = Partial<ISettingGroup>;\n\ntype addSectionCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addSectionCallback): Promise<void>;\n}) => Promise<void>;\n\ntype addGroupCallback = (this: {\n\tadd(id: string, value: SettingValue, options: ISettingAddOptions): Promise<void>;\n\tsection(section: string, cb: addSectionCallback): Promise<void>;\n\twith(options: ISettingAddOptions, cb: addGroupCallback): Promise<void>;\n}) => Promise<void>;\n\ntype ISettingAddOptions = Partial<ISetting>;\n\nconst compareSettingsIgnoringKeys =\n\t(keys: Array<keyof ISetting>) =>\n\t(a: ISetting, b: ISetting): boolean =>\n\t\t[...new Set([...Object.keys(a), ...Object.keys(b)])]\n\t\t\t.filter((key) => !keys.includes(key as keyof ISetting))\n\t\t\t.every((key) => isEqual(a[key as keyof ISetting], b[key as keyof ISetting]));\n\nexport const compareSettings = compareSettingsIgnoringKeys([\n\t'value',\n\t'ts',\n\t'createdAt',\n\t'valueSource',\n\t'packageValue',\n\t'processEnvValue',\n\t'_updatedAt',\n]);\n\nexport class SettingsRegistry {\n\tprivate model: ISettingsModel;\n\n\tprivate store: ICachedSettings;\n\n\tprivate _sorter: { [key: string]: number } = {};\n\n\tconstructor({ store, model }: { store: ICachedSettings; model: ISettingsModel }) {\n\t\tthis.store = store;\n\t\tthis.model = model;\n\t}\n\n\t/*\n\t * Add a setting\n\t */\n\tasync add(_id: string, value: SettingValue, { sorter, section, group, ...options }: ISettingAddOptions = {}): Promise<void> {\n\t\tif (!_id || value == null) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst sorterKey = group && section ? `${group}_${section}` : group;\n\n\t\tif (sorterKey && this._sorter[sorterKey] == null) {\n\t\t\tif (group && section) {\n\t\t\t\tconst currentGroupValue = this._sorter[group] ?? 0;\n\t\t\t\tthis._sorter[sorterKey] = currentGroupValue * 1000;\n\t\t\t}\n\t\t}\n\n\t\tif (sorterKey) {\n\t\t\tthis._sorter[sorterKey] = this._sorter[sorterKey] ?? -1;\n\t\t}\n\n\t\tconst settingFromCode = getSettingDefaults(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t\ttype: 'string',\n\t\t\t\tvalue,\n\t\t\t\tsorter: sorter ?? (sorterKey?.length && this._sorter[sorterKey]++),\n\t\t\t\tgroup,\n\t\t\t\tsection,\n\t\t\t\t...options,\n\t\t\t},\n\t\t\tblockedSettings,\n\t\t\thiddenSettings,\n\t\t\twizardRequiredSettings,\n\t\t);\n\n\t\tif (isSettingEnterprise(settingFromCode) && !('invalidValue' in settingFromCode)) {\n\t\t\tSystemLogger.error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t\tthrow new Error(`Enterprise setting ${_id} is missing the invalidValue option`);\n\t\t}\n\n\t\tconst settingFromCodeOverwritten = overwriteSetting(settingFromCode);\n\n\t\tconst settingStored = this.store.getSetting(_id);\n\n\t\tconst settingStoredOverwritten = settingStored && overwriteSetting(settingStored);\n\n\t\ttry {\n\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingFromCode.value);\n\t\t} catch (e) {\n\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting code ${_id}: ${(e as Error).message}`);\n\t\t}\n\n\t\tconst isOverwritten = settingFromCode !== settingFromCodeOverwritten || (settingStored && settingStored !== settingStoredOverwritten);\n\n\t\tconst { _id: _, ...settingProps } = settingFromCodeOverwritten;\n\n\t\tif (settingStored && !compareSettings(settingStored, settingFromCodeOverwritten)) {\n\t\t\tconst { value: _value, ...settingOverwrittenProps } = settingFromCodeOverwritten;\n\n\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\tconst updatedProps = (() => {\n\t\t\t\treturn {\n\t\t\t\t\t...settingOverwrittenProps,\n\t\t\t\t\t...(settingStoredOverwritten &&\n\t\t\t\t\t\tsettingStored.value !== settingStoredOverwritten.value && { value: settingStoredOverwritten.value }),\n\t\t\t\t};\n\t\t\t})();\n\n\t\t\tawait this.saveUpdatedSetting(_id, updatedProps, removedKeys);\n\t\t\tif ('value' in updatedProps) {\n\t\t\t\tthis.store.set(updatedProps as ISetting);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored && isOverwritten) {\n\t\t\tif (settingStored.value !== settingFromCodeOverwritten.value) {\n\t\t\t\tconst overwrittenKeys = Object.keys(settingFromCodeOverwritten);\n\t\t\t\tconst removedKeys = Object.keys(settingStored).filter((key) => !['_updatedAt'].includes(key) && !overwrittenKeys.includes(key));\n\n\t\t\t\tawait this.saveUpdatedSetting(_id, settingProps, removedKeys);\n\t\t\t\tthis.store.set(settingFromCodeOverwritten);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (settingStored) {\n\t\t\ttry {\n\t\t\t\tvalidateSetting(settingFromCode._id, settingFromCode.type, settingStored?.value);\n\t\t\t} catch (e) {\n\t\t\t\tIS_DEVELOPMENT && SystemLogger.error(`Invalid setting stored ${_id}: ${(e as Error).message}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst settingOverwrittenDefault = overrideSetting(settingFromCode);\n\n\t\tconst setting = isOverwritten ? settingFromCodeOverwritten : settingOverwrittenDefault;\n\n\t\tawait this.model.insertOne(setting); // no need to emit unless we remove the oplog\n\n\t\tthis.store.set(setting);\n\t}\n\n\t/*\n\t * Add a setting group\n\t */\n\tasync addGroup(_id: string, cb?: addGroupCallback): Promise<void>;\n\n\t// eslint-disable-next-line no-dupe-class-members\n\tasync addGroup(_id: string, groupOptions: ISettingAddGroupOptions | addGroupCallback = {}, cb?: addGroupCallback): Promise<void> {\n\t\tif (!_id || (groupOptions instanceof Function && cb)) {\n\t\t\tthrow new Error('Invalid arguments');\n\t\t}\n\n\t\tconst callback = groupOptions instanceof Function ? groupOptions : cb;\n\n\t\tconst options =\n\t\t\tgroupOptions instanceof Function\n\t\t\t\t? getGroupDefaults(_id, { sorter: this._sorter[_id] })\n\t\t\t\t: getGroupDefaults(_id, { sorter: this._sorter[_id], ...groupOptions });\n\n\t\tif (!this.store.has(_id)) {\n\t\t\toptions.ts = new Date();\n\t\t\tawait this.model.insertOne(options as ISetting);\n\t\t\tthis.store.set(options as ISetting);\n\t\t}\n\n\t\tif (!callback) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst addWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(id: string, value: SettingValue, options: ISettingAddOptions = {}): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn this.add(id, value, mergedOptions);\n\t\t\t};\n\t\tconst sectionSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\t\tconst sectionWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(section: string, cb: addSectionCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, section };\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\twith: sectionSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\tconst groupSetWith =\n\t\t\t(preset: ISettingAddOptions) =>\n\t\t\t(options: ISettingAddOptions, cb: addGroupCallback): Promise<void> => {\n\t\t\t\tconst mergedOptions = { ...preset, ...options };\n\n\t\t\t\treturn cb.call({\n\t\t\t\t\tadd: addWith(mergedOptions),\n\t\t\t\t\tsection: sectionWith(mergedOptions),\n\t\t\t\t\twith: groupSetWith(mergedOptions),\n\t\t\t\t});\n\t\t\t};\n\n\t\treturn groupSetWith({ group: _id })({}, callback);\n\t}\n\n\tprivate async saveUpdatedSetting(\n\t\t_id: string,\n\t\tsettingProps: Omit<Optional<ISetting, 'value'>, '_id'>,\n\t\tremovedKeys?: string[],\n\t): Promise<void> {\n\t\tawait this.model.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: settingProps,\n\t\t\t\t...(removedKeys?.length && {\n\t\t\t\t\t$unset: removedKeys.reduce((unset, key) => ({ ...unset, [key]: 1 }), {}),\n\t\t\t\t}),\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3adc04867594f68f914609d080ed50733e98f252"}
