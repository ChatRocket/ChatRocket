{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Nps.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Nps.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Nps.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Nps.ts","sourceRoot":"","sources":["server/models/raw/Nps.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAItD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,MAAO,SAAQ,OAAa;IACxC,YAAY,EAAM,EAAE,KAAiD;QACpE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,YAAY;QACX,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,wCAAwC;IACxC,KAAK,CAAC,6BAA6B;QAClC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,IAAI;YACtB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QACF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,OAAO;aACzB;SACD,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAExF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,4BAA4B;QACjC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,OAAO;YACzB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,gBAAgB,CAAC,GAAgB,EAAE,MAAsB;QACxD,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM;aACN;SACD,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC,EACJ,GAAG,EACH,OAAO,EACP,QAAQ,EACR,SAAS,EACT,MAAM,GAC+D;QACrE,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CACxB;YACC,GAAG;SACH,EACD;YACC,IAAI,EAAE;gBACL,OAAO;gBACP,UAAU,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,YAAY,EAAE;gBACb,QAAQ;gBACR,SAAS;gBACT,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM;aACN;SACD,EACD;YACC,MAAM,EAAE,IAAI;SACZ,CACD,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,MAAiB;QACjC,MAAM,KAAK,GAAG;YACb,MAAM;SACN,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,MAAM;aACxB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;CACD","sourcesContent":["import type { INps, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { NPSStatus } from '@rocket.chat/core-typings';\nimport type { INpsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsRaw extends BaseRaw<INps> implements INpsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INps>>) {\n\t\tsuper(db, 'nps', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { status: 1, expireAt: 1 } }];\n\t}\n\n\t// get expired surveys still in progress\n\tasync getOpenExpiredAndStartSending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.SENDING,\n\t\t\t},\n\t\t};\n\t\tconst { value } = await this.findOneAndUpdate(query, update, { sort: { expireAt: 1 } });\n\n\t\treturn value;\n\t}\n\n\t// get expired surveys already sending results\n\tasync getOpenExpiredAlreadySending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.SENDING,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\n\t\treturn this.col.findOne(query);\n\t}\n\n\tupdateStatusById(_id: INps['_id'], status: INps['status']): Promise<UpdateResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tsave({\n\t\t_id,\n\t\tstartAt,\n\t\texpireAt,\n\t\tcreatedBy,\n\t\tstatus,\n\t}: Pick<INps, '_id' | 'startAt' | 'expireAt' | 'createdBy' | 'status'>): Promise<UpdateResult> {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstartAt,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\texpireAt,\n\t\t\t\t\tcreatedBy,\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\tstatus,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseAllByStatus(status: NPSStatus): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tstatus,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.CLOSED,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Nps.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Nps.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Nps.ts","sourceRoot":"","sources":["server/models/raw/Nps.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAItD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,MAAO,SAAQ,OAAa;IACxC,YAAY,EAAM,EAAE,KAAiD;QACpE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,YAAY;QACX,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,wCAAwC;IACxC,KAAK,CAAC,6BAA6B;QAClC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,IAAI;YACtB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QACF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,OAAO;aACzB;SACD,CAAC;QACF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAExF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,4BAA4B;QACjC,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG;YACb,MAAM,EAAE,SAAS,CAAC,OAAO;YACzB,QAAQ,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;SACzB,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,gBAAgB,CAAC,GAAgB,EAAE,MAAsB;QACxD,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM;aACN;SACD,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC,EACJ,GAAG,EACH,OAAO,EACP,QAAQ,EACR,SAAS,EACT,MAAM,GAC+D;QACrE,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CACxB;YACC,GAAG;SACH,EACD;YACC,IAAI,EAAE;gBACL,OAAO;gBACP,UAAU,EAAE,IAAI,IAAI,EAAE;aACtB;YACD,YAAY,EAAE;gBACb,QAAQ;gBACR,SAAS;gBACT,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,MAAM;aACN;SACD,EACD;YACC,MAAM,EAAE,IAAI;SACZ,CACD,CAAC;IACH,CAAC;IAED,gBAAgB,CAAC,MAAiB;QACjC,MAAM,KAAK,GAAG;YACb,MAAM;SACN,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,MAAM,EAAE,SAAS,CAAC,MAAM;aACxB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;CACD","sourcesContent":["import type { INps, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { NPSStatus } from '@rocket.chat/core-typings';\nimport type { INpsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsRaw extends BaseRaw<INps> implements INpsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INps>>) {\n\t\tsuper(db, 'nps', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { status: 1, expireAt: 1 } }];\n\t}\n\n\t// get expired surveys still in progress\n\tasync getOpenExpiredAndStartSending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.SENDING,\n\t\t\t},\n\t\t};\n\t\tconst { value } = await this.findOneAndUpdate(query, update, { sort: { expireAt: 1 } });\n\n\t\treturn value;\n\t}\n\n\t// get expired surveys already sending results\n\tasync getOpenExpiredAlreadySending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.SENDING,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\n\t\treturn this.col.findOne(query);\n\t}\n\n\tupdateStatusById(_id: INps['_id'], status: INps['status']): Promise<UpdateResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tsave({\n\t\t_id,\n\t\tstartAt,\n\t\texpireAt,\n\t\tcreatedBy,\n\t\tstatus,\n\t}: Pick<INps, '_id' | 'startAt' | 'expireAt' | 'createdBy' | 'status'>): Promise<UpdateResult> {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstartAt,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\texpireAt,\n\t\t\t\t\tcreatedBy,\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\tstatus,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseAllByStatus(status: NPSStatus): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tstatus,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.CLOSED,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      NpsRaw: () => NpsRaw\n    });\n    let NPSStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      NPSStatus(v) {\n        NPSStatus = v;\n      }\n    }, 0);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class NpsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'nps', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            status: 1,\n            expireAt: 1\n          }\n        }];\n      }\n      // get expired surveys still in progress\n      async getOpenExpiredAndStartSending() {\n        const today = new Date();\n        const query = {\n          status: NPSStatus.OPEN,\n          expireAt: {\n            $lte: today\n          }\n        };\n        const update = {\n          $set: {\n            status: NPSStatus.SENDING\n          }\n        };\n        const {\n          value\n        } = await this.findOneAndUpdate(query, update, {\n          sort: {\n            expireAt: 1\n          }\n        });\n        return value;\n      }\n      // get expired surveys already sending results\n      async getOpenExpiredAlreadySending() {\n        const today = new Date();\n        const query = {\n          status: NPSStatus.SENDING,\n          expireAt: {\n            $lte: today\n          }\n        };\n        return this.col.findOne(query);\n      }\n      updateStatusById(_id, status) {\n        const update = {\n          $set: {\n            status\n          }\n        };\n        return this.col.updateOne({\n          _id\n        }, update);\n      }\n      save(_ref) {\n        let {\n          _id,\n          startAt,\n          expireAt,\n          createdBy,\n          status\n        } = _ref;\n        return this.col.updateOne({\n          _id\n        }, {\n          $set: {\n            startAt,\n            _updatedAt: new Date()\n          },\n          $setOnInsert: {\n            expireAt,\n            createdBy,\n            createdAt: new Date(),\n            status\n          }\n        }, {\n          upsert: true\n        });\n      }\n      closeAllByStatus(status) {\n        const query = {\n          status\n        };\n        const update = {\n          $set: {\n            status: NPSStatus.CLOSED\n          }\n        };\n        return this.col.updateMany(query, update);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","NpsRaw","NPSStatus","link","v","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","status","expireAt","getOpenExpiredAndStartSending","today","Date","query","OPEN","$lte","update","$set","SENDING","value","findOneAndUpdate","sort","getOpenExpiredAlreadySending","col","findOne","updateStatusById","_id","updateOne","save","_ref","startAt","createdBy","_updatedAt","$setOnInsert","createdAt","upsert","closeAllByStatus","CLOSED","updateMany","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Nps.ts"],"sourcesContent":["import type { INps, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport { NPSStatus } from '@rocket.chat/core-typings';\nimport type { INpsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, Document, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class NpsRaw extends BaseRaw<INps> implements INpsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<INps>>) {\n\t\tsuper(db, 'nps', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { status: 1, expireAt: 1 } }];\n\t}\n\n\t// get expired surveys still in progress\n\tasync getOpenExpiredAndStartSending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.OPEN,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.SENDING,\n\t\t\t},\n\t\t};\n\t\tconst { value } = await this.findOneAndUpdate(query, update, { sort: { expireAt: 1 } });\n\n\t\treturn value;\n\t}\n\n\t// get expired surveys already sending results\n\tasync getOpenExpiredAlreadySending(): Promise<INps | null> {\n\t\tconst today = new Date();\n\n\t\tconst query = {\n\t\t\tstatus: NPSStatus.SENDING,\n\t\t\texpireAt: { $lte: today },\n\t\t};\n\n\t\treturn this.col.findOne(query);\n\t}\n\n\tupdateStatusById(_id: INps['_id'], status: INps['status']): Promise<UpdateResult> {\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus,\n\t\t\t},\n\t\t};\n\t\treturn this.col.updateOne({ _id }, update);\n\t}\n\n\tsave({\n\t\t_id,\n\t\tstartAt,\n\t\texpireAt,\n\t\tcreatedBy,\n\t\tstatus,\n\t}: Pick<INps, '_id' | 'startAt' | 'expireAt' | 'createdBy' | 'status'>): Promise<UpdateResult> {\n\t\treturn this.col.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstartAt,\n\t\t\t\t\t_updatedAt: new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\texpireAt,\n\t\t\t\t\tcreatedBy,\n\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\tstatus,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tupsert: true,\n\t\t\t},\n\t\t);\n\t}\n\n\tcloseAllByStatus(status: NPSStatus): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tstatus,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tstatus: NPSStatus.CLOSED,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.updateMany(query, update);\n\t}\n}\n"],"mappings":";;;IACAA,MAAA,CAAOC,MAAE;MAAAC,MAAW,EAAAA,CAAA,KAAMA;IAAA;IAAA,IAAAC,SAAA;IAAAH,MAA4B,CAAAI,IAAA;MAAAD,UAAAE,CAAA;QAAAF,SAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,OAAA;IAAAN,MAAA,CAAAI,IAAA;MAAAE,QAAAD,CAAA;QAAAC,OAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,oBAAA,WAAAA,oBAAA;IAMhD,MAAOL,MAAO,SAAQI,OAAa;MACxCE,YAAYC,EAAM,EAAEC,KAAiD;QACpE,KAAK,CAACD,EAAE,EAAE,KAAK,EAAEC,KAAK,CAAC;MACxB;MAEAC,YAAYA,CAAA;QACX,OAAO,CAAC;UAAEC,GAAG,EAAE;YAAEC,MAAM,EAAE,CAAC;YAAEC,QAAQ,EAAE;UAAC;QAAE,CAAE,CAAC;MAC7C;MAEA;MACA,MAAMC,6BAA6BA,CAAA;QAClC,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;QAExB,MAAMC,KAAK,GAAG;UACbL,MAAM,EAAEV,SAAS,CAACgB,IAAI;UACtBL,QAAQ,EAAE;YAAEM,IAAI,EAAEJ;UAAK;SACvB;QACD,MAAMK,MAAM,GAAG;UACdC,IAAI,EAAE;YACLT,MAAM,EAAEV,SAAS,CAACoB;;SAEnB;QACD,MAAM;UAAEC;QAAK,CAAE,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACP,KAAK,EAAEG,MAAM,EAAE;UAAEK,IAAI,EAAE;YAAEZ,QAAQ,EAAE;UAAC;QAAE,CAAE,CAAC;QAEvF,OAAOU,KAAK;MACb;MAEA;MACA,MAAMG,4BAA4BA,CAAA;QACjC,MAAMX,KAAK,GAAG,IAAIC,IAAI,EAAE;QAExB,MAAMC,KAAK,GAAG;UACbL,MAAM,EAAEV,SAAS,CAACoB,OAAO;UACzBT,QAAQ,EAAE;YAAEM,IAAI,EAAEJ;UAAK;SACvB;QAED,OAAO,IAAI,CAACY,GAAG,CAACC,OAAO,CAACX,KAAK,CAAC;MAC/B;MAEAY,gBAAgBA,CAACC,GAAgB,EAAElB,MAAsB;QACxD,MAAMQ,MAAM,GAAG;UACdC,IAAI,EAAE;YACLT;;SAED;QACD,OAAO,IAAI,CAACe,GAAG,CAACI,SAAS,CAAC;UAAED;QAAG,CAAE,EAAEV,MAAM,CAAC;MAC3C;MAEAY,IAAIA,CAAAC,IAAA,EAMkE;QAAA,IANjE;UACJH,GAAG;UACHI,OAAO;UACPrB,QAAQ;UACRsB,SAAS;UACTvB;QAAM,CAC+D,GAAAqB,IAAA;QACrE,OAAO,IAAI,CAACN,GAAG,CAACI,SAAS,CACxB;UACCD;SACA,EACD;UACCT,IAAI,EAAE;YACLa,OAAO;YACPE,UAAU,EAAE,IAAIpB,IAAI;WACpB;UACDqB,YAAY,EAAE;YACbxB,QAAQ;YACRsB,SAAS;YACTG,SAAS,EAAE,IAAItB,IAAI,EAAE;YACrBJ;;SAED,EACD;UACC2B,MAAM,EAAE;SACR,CACD;MACF;MAEAC,gBAAgBA,CAAC5B,MAAiB;QACjC,MAAMK,KAAK,GAAG;UACbL;SACA;QAED,MAAMQ,MAAM,GAAG;UACdC,IAAI,EAAE;YACLT,MAAM,EAAEV,SAAS,CAACuC;;SAEnB;QAED,OAAO,IAAI,CAACd,GAAG,CAACe,UAAU,CAACzB,KAAK,EAAEG,MAAM,CAAC;MAC1C;;IACAuB,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5efa836e8fc15f51e18d791be4fb509873c94833"}
