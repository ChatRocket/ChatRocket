{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/MessageConverter.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/converters/MessageConverter.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/MessageConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/MessageConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/MessageConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportMessageRecord, IMessage as IDBMessage, IImportMessage, IImportMessageReaction } from '@rocket.chat/core-typings';\nimport { Rooms } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport type { UserIdentification, MentionedChannel } from './ConverterCache';\nimport { RecordConverter } from './RecordConverter';\nimport { insertMessage } from '../../../../lib/server/functions/insertMessage';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type MessageConversionCallbacks = IConversionCallbacks & { afterImportAllMessagesFn?: (roomIds: string[]) => Promise<void> };\n\ntype MessageObject = Record<string, any>;\n\ntype MentionedUser = {\n\t_id: string;\n\tusername: string;\n\tname?: string;\n};\n\ntype IMessageReaction = {\n\tname: string;\n\tusernames: string[];\n};\n\ntype IMessageReactions = Record<string, IMessageReaction>;\n\nexport class MessageConverter extends RecordConverter<IImportMessageRecord> {\n\tprivate rids: string[] = [];\n\n\tasync convertData({ afterImportAllMessagesFn, ...callbacks }: MessageConversionCallbacks = {}): Promise<void> {\n\t\tthis.rids = [];\n\t\tawait super.convertData(callbacks);\n\n\t\tawait this.resetLastMessages();\n\t\tif (afterImportAllMessagesFn) {\n\t\t\tawait afterImportAllMessagesFn(this.rids);\n\t\t}\n\t}\n\n\tprotected async resetLastMessages(): Promise<void> {\n\t\tfor await (const rid of this.rids) {\n\t\t\ttry {\n\t\t\t\tawait Rooms.resetLastMessageById(rid, null);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.warn(`Failed to update last message of room ${rid}`);\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async insertMessage(data: IImportMessage): Promise<void> {\n\t\tif (!data.ts || isNaN(data.ts as unknown as number)) {\n\t\t\tthrow new Error('importer-message-invalid-timestamp');\n\t\t}\n\n\t\tconst creator = await this._cache.findImportedUser(data.u._id);\n\t\tif (!creator) {\n\t\t\tthis._logger.warn(`Imported user not found: ${data.u._id}`);\n\t\t\tthrow new Error('importer-message-unknown-user');\n\t\t}\n\t\tconst rid = await this._cache.findImportedRoomId(data.rid);\n\t\tif (!rid) {\n\t\t\tthrow new Error('importer-message-unknown-room');\n\t\t}\n\t\tif (!this.rids.includes(rid)) {\n\t\t\tthis.rids.push(rid);\n\t\t}\n\n\t\tconst msgObj = await this.buildMessageObject(data, rid, creator);\n\n\t\ttry {\n\t\t\tawait insertMessage(creator, msgObj as unknown as IDBMessage, rid, true);\n\t\t} catch (e) {\n\t\t\tthis._logger.warn(`Failed to import message with timestamp ${String(msgObj.ts)} to room ${rid}`);\n\t\t\tthis._logger.error(e);\n\t\t}\n\t}\n\n\tprotected async convertRecord(record: IImportMessageRecord): Promise<boolean> {\n\t\tawait this.insertMessage(record.data);\n\t\treturn true;\n\t}\n\n\tprotected async buildMessageObject(data: IImportMessage, rid: string, creator: UserIdentification): Promise<MessageObject> {\n\t\t// Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\t\tconst mentions = data.mentions && (await this.convertMessageMentions(data));\n\t\tconst channels = data.channels && (await this.convertMessageChannels(data));\n\n\t\treturn {\n\t\t\trid,\n\t\t\tu: {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t},\n\t\t\tmsg: data.msg,\n\t\t\tts: data.ts,\n\t\t\tt: data.t || undefined,\n\t\t\tgroupable: data.groupable,\n\t\t\ttmid: data.tmid,\n\t\t\ttlm: data.tlm,\n\t\t\ttcount: data.tcount,\n\t\t\treplies: data.replies && (await this.convertMessageReplies(data.replies)),\n\t\t\teditedAt: data.editedAt,\n\t\t\teditedBy: data.editedBy && ((await this._cache.findImportedUser(data.editedBy)) || undefined),\n\t\t\tmentions,\n\t\t\tchannels,\n\t\t\t_importFile: data._importFile,\n\t\t\turl: data.url,\n\t\t\tattachments: data.attachments,\n\t\t\tbot: data.bot,\n\t\t\temoji: data.emoji,\n\t\t\talias: data.alias,\n\t\t\t...(data._id ? { _id: data._id } : {}),\n\t\t\t...(data.reactions ? { reactions: await this.convertMessageReactions(data.reactions) } : {}),\n\t\t};\n\t}\n\n\tprotected async convertMessageChannels(message: IImportMessage): Promise<MentionedChannel[] | undefined> {\n\t\tconst { channels } = message;\n\t\tif (!channels) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result: MentionedChannel[] = [];\n\t\tfor await (const importId of channels) {\n\t\t\tconst { name, _id } = (await this.getMentionedChannelData(importId)) || {};\n\n\t\t\tif (!_id || !name) {\n\t\t\t\tthis._logger.warn(`Mentioned room not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\#${importId}`, 'gi'), `#${name}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id,\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageMentions(message: IImportMessage): Promise<MentionedUser[] | undefined> {\n\t\tconst { mentions } = message;\n\t\tif (!mentions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: MentionedUser[] = [];\n\t\tfor await (const importId of mentions) {\n\t\t\tif (importId === ('all' as 'string') || importId === 'here') {\n\t\t\t\tresult.push({\n\t\t\t\t\t_id: importId,\n\t\t\t\t\tusername: importId,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = await this._cache.findImportedUserDisplayName(importId);\n\t\t\tconst data = await this._cache.findImportedUser(importId);\n\n\t\t\tif (!data) {\n\t\t\t\tthis._logger.warn(`Mentioned user not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!data.username) {\n\t\t\t\tthis._logger.debug(importId);\n\t\t\t\tthrow new Error('importer-message-mentioned-username-not-found');\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\@${importId}`, 'gi'), `@${data.username}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id: data._id,\n\t\t\t\tusername: data.username as 'string',\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageReactions(\n\t\timportedReactions: Record<string, IImportMessageReaction>,\n\t): Promise<undefined | IMessageReactions> {\n\t\tconst reactions: IMessageReactions = {};\n\n\t\tfor await (const name of Object.keys(importedReactions)) {\n\t\t\tif (!importedReactions.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { users } = importedReactions[name];\n\n\t\t\tif (!users.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst reaction: IMessageReaction = {\n\t\t\t\tname,\n\t\t\t\tusernames: [],\n\t\t\t};\n\n\t\t\tfor await (const importId of users) {\n\t\t\t\tconst username = await this._cache.findImportedUsername(importId);\n\t\t\t\tif (username && !reaction.usernames.includes(username)) {\n\t\t\t\t\treaction.usernames.push(username);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (reaction.usernames.length) {\n\t\t\t\treactions[name] = reaction;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(reactions).length > 0) {\n\t\t\treturn reactions;\n\t\t}\n\t}\n\n\tprotected async convertMessageReplies(replies: string[]): Promise<string[]> {\n\t\tconst result: string[] = [];\n\t\tfor await (const importId of replies) {\n\t\t\tconst userId = await this._cache.findImportedUserId(importId);\n\t\t\tif (userId && !result.includes(userId)) {\n\t\t\t\tresult.push(userId);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async getMentionedChannelData(importId: string): Promise<MentionedChannel | undefined> {\n\t\t// loading the name will also store the id on the cache if it's missing, so this won't run two queries\n\t\tconst name = await this._cache.findImportedRoomName(importId);\n\t\tconst _id = await this._cache.findImportedRoomId(importId);\n\n\t\tif (name && _id) {\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\t_id,\n\t\t\t};\n\t\t}\n\n\t\t// If the importId was not found, check if we have a room with that name\n\t\tconst roomName = limax(importId.trim(), { maintainCase: true });\n\n\t\tconst room = await Rooms.findOneByNonValidatedName(roomName, { projection: { name: 1 } });\n\t\tif (room?.name) {\n\t\t\tthis._cache.addRoom(importId, room._id);\n\t\t\tthis._cache.addRoomName(importId, room.name);\n\n\t\t\treturn {\n\t\t\t\tname: room.name,\n\t\t\t\t_id: room._id,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected getDataType(): 'message' {\n\t\treturn 'message';\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/converters/MessageConverter.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/converters/MessageConverter.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/converters/MessageConverter.ts","sourceRoot":"","sources":["app/importer/server/classes/converters/MessageConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IImportMessageRecord, IMessage as IDBMessage, IImportMessage, IImportMessageReaction } from '@rocket.chat/core-typings';\nimport { Rooms } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport type { UserIdentification, MentionedChannel } from './ConverterCache';\nimport { RecordConverter } from './RecordConverter';\nimport { insertMessage } from '../../../../lib/server/functions/insertMessage';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type MessageConversionCallbacks = IConversionCallbacks & { afterImportAllMessagesFn?: (roomIds: string[]) => Promise<void> };\n\ntype MessageObject = Record<string, any>;\n\ntype MentionedUser = {\n\t_id: string;\n\tusername: string;\n\tname?: string;\n};\n\ntype IMessageReaction = {\n\tname: string;\n\tusernames: string[];\n};\n\ntype IMessageReactions = Record<string, IMessageReaction>;\n\nexport class MessageConverter extends RecordConverter<IImportMessageRecord> {\n\tprivate rids: string[] = [];\n\n\tasync convertData({ afterImportAllMessagesFn, ...callbacks }: MessageConversionCallbacks = {}): Promise<void> {\n\t\tthis.rids = [];\n\t\tawait super.convertData(callbacks);\n\n\t\tawait this.resetLastMessages();\n\t\tif (afterImportAllMessagesFn) {\n\t\t\tawait afterImportAllMessagesFn(this.rids);\n\t\t}\n\t}\n\n\tprotected async resetLastMessages(): Promise<void> {\n\t\tfor await (const rid of this.rids) {\n\t\t\ttry {\n\t\t\t\tawait Rooms.resetLastMessageById(rid, null);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.warn(`Failed to update last message of room ${rid}`);\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async insertMessage(data: IImportMessage): Promise<void> {\n\t\tif (!data.ts || isNaN(data.ts as unknown as number)) {\n\t\t\tthrow new Error('importer-message-invalid-timestamp');\n\t\t}\n\n\t\tconst creator = await this._cache.findImportedUser(data.u._id);\n\t\tif (!creator) {\n\t\t\tthis._logger.warn(`Imported user not found: ${data.u._id}`);\n\t\t\tthrow new Error('importer-message-unknown-user');\n\t\t}\n\t\tconst rid = await this._cache.findImportedRoomId(data.rid);\n\t\tif (!rid) {\n\t\t\tthrow new Error('importer-message-unknown-room');\n\t\t}\n\t\tif (!this.rids.includes(rid)) {\n\t\t\tthis.rids.push(rid);\n\t\t}\n\n\t\tconst msgObj = await this.buildMessageObject(data, rid, creator);\n\n\t\ttry {\n\t\t\tawait insertMessage(creator, msgObj as unknown as IDBMessage, rid, true);\n\t\t} catch (e) {\n\t\t\tthis._logger.warn(`Failed to import message with timestamp ${String(msgObj.ts)} to room ${rid}`);\n\t\t\tthis._logger.error(e);\n\t\t}\n\t}\n\n\tprotected async convertRecord(record: IImportMessageRecord): Promise<boolean> {\n\t\tawait this.insertMessage(record.data);\n\t\treturn true;\n\t}\n\n\tprotected async buildMessageObject(data: IImportMessage, rid: string, creator: UserIdentification): Promise<MessageObject> {\n\t\t// Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\t\tconst mentions = data.mentions && (await this.convertMessageMentions(data));\n\t\tconst channels = data.channels && (await this.convertMessageChannels(data));\n\n\t\treturn {\n\t\t\trid,\n\t\t\tu: {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t},\n\t\t\tmsg: data.msg,\n\t\t\tts: data.ts,\n\t\t\tt: data.t || undefined,\n\t\t\tgroupable: data.groupable,\n\t\t\ttmid: data.tmid,\n\t\t\ttlm: data.tlm,\n\t\t\ttcount: data.tcount,\n\t\t\treplies: data.replies && (await this.convertMessageReplies(data.replies)),\n\t\t\teditedAt: data.editedAt,\n\t\t\teditedBy: data.editedBy && ((await this._cache.findImportedUser(data.editedBy)) || undefined),\n\t\t\tmentions,\n\t\t\tchannels,\n\t\t\t_importFile: data._importFile,\n\t\t\turl: data.url,\n\t\t\tattachments: data.attachments,\n\t\t\tbot: data.bot,\n\t\t\temoji: data.emoji,\n\t\t\talias: data.alias,\n\t\t\t...(data._id ? { _id: data._id } : {}),\n\t\t\t...(data.reactions ? { reactions: await this.convertMessageReactions(data.reactions) } : {}),\n\t\t};\n\t}\n\n\tprotected async convertMessageChannels(message: IImportMessage): Promise<MentionedChannel[] | undefined> {\n\t\tconst { channels } = message;\n\t\tif (!channels) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result: MentionedChannel[] = [];\n\t\tfor await (const importId of channels) {\n\t\t\tconst { name, _id } = (await this.getMentionedChannelData(importId)) || {};\n\n\t\t\tif (!_id || !name) {\n\t\t\t\tthis._logger.warn(`Mentioned room not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\#${importId}`, 'gi'), `#${name}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id,\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageMentions(message: IImportMessage): Promise<MentionedUser[] | undefined> {\n\t\tconst { mentions } = message;\n\t\tif (!mentions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: MentionedUser[] = [];\n\t\tfor await (const importId of mentions) {\n\t\t\tif (importId === ('all' as 'string') || importId === 'here') {\n\t\t\t\tresult.push({\n\t\t\t\t\t_id: importId,\n\t\t\t\t\tusername: importId,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = await this._cache.findImportedUserDisplayName(importId);\n\t\t\tconst data = await this._cache.findImportedUser(importId);\n\n\t\t\tif (!data) {\n\t\t\t\tthis._logger.warn(`Mentioned user not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!data.username) {\n\t\t\t\tthis._logger.debug(importId);\n\t\t\t\tthrow new Error('importer-message-mentioned-username-not-found');\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\@${importId}`, 'gi'), `@${data.username}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id: data._id,\n\t\t\t\tusername: data.username as 'string',\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageReactions(\n\t\timportedReactions: Record<string, IImportMessageReaction>,\n\t): Promise<undefined | IMessageReactions> {\n\t\tconst reactions: IMessageReactions = {};\n\n\t\tfor await (const name of Object.keys(importedReactions)) {\n\t\t\tif (!importedReactions.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { users } = importedReactions[name];\n\n\t\t\tif (!users.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst reaction: IMessageReaction = {\n\t\t\t\tname,\n\t\t\t\tusernames: [],\n\t\t\t};\n\n\t\t\tfor await (const importId of users) {\n\t\t\t\tconst username = await this._cache.findImportedUsername(importId);\n\t\t\t\tif (username && !reaction.usernames.includes(username)) {\n\t\t\t\t\treaction.usernames.push(username);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (reaction.usernames.length) {\n\t\t\t\treactions[name] = reaction;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(reactions).length > 0) {\n\t\t\treturn reactions;\n\t\t}\n\t}\n\n\tprotected async convertMessageReplies(replies: string[]): Promise<string[]> {\n\t\tconst result: string[] = [];\n\t\tfor await (const importId of replies) {\n\t\t\tconst userId = await this._cache.findImportedUserId(importId);\n\t\t\tif (userId && !result.includes(userId)) {\n\t\t\t\tresult.push(userId);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async getMentionedChannelData(importId: string): Promise<MentionedChannel | undefined> {\n\t\t// loading the name will also store the id on the cache if it's missing, so this won't run two queries\n\t\tconst name = await this._cache.findImportedRoomName(importId);\n\t\tconst _id = await this._cache.findImportedRoomId(importId);\n\n\t\tif (name && _id) {\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\t_id,\n\t\t\t};\n\t\t}\n\n\t\t// If the importId was not found, check if we have a room with that name\n\t\tconst roomName = limax(importId.trim(), { maintainCase: true });\n\n\t\tconst room = await Rooms.findOneByNonValidatedName(roomName, { projection: { name: 1 } });\n\t\tif (room?.name) {\n\t\t\tthis._cache.addRoom(importId, room._id);\n\t\t\tthis._cache.addRoomName(importId, room.name);\n\n\t\t\treturn {\n\t\t\t\tname: room.name,\n\t\t\t\t_id: room._id,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected getDataType(): 'message' {\n\t\treturn 'message';\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    const _excluded = [\"afterImportAllMessagesFn\"];\n    module.export({\n      MessageConverter: () => MessageConverter\n    });\n    let Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 0);\n    let limax;\n    module.link(\"limax\", {\n      default(v) {\n        limax = v;\n      }\n    }, 1);\n    let RecordConverter;\n    module.link(\"./RecordConverter\", {\n      RecordConverter(v) {\n        RecordConverter = v;\n      }\n    }, 2);\n    let insertMessage;\n    module.link(\"../../../../lib/server/functions/insertMessage\", {\n      insertMessage(v) {\n        insertMessage = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MessageConverter extends RecordConverter {\n      constructor() {\n        super(...arguments);\n        this.rids = [];\n      }\n      async convertData() {\n        let _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let {\n            afterImportAllMessagesFn\n          } = _ref,\n          callbacks = _objectWithoutProperties(_ref, _excluded);\n        this.rids = [];\n        await super.convertData(callbacks);\n        await this.resetLastMessages();\n        if (afterImportAllMessagesFn) {\n          await afterImportAllMessagesFn(this.rids);\n        }\n      }\n      async resetLastMessages() {\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(this.rids), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const rid = _step.value;\n            {\n              try {\n                await Rooms.resetLastMessageById(rid, null);\n              } catch (e) {\n                this._logger.warn(\"Failed to update last message of room \".concat(rid));\n                this._logger.error(e);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async insertMessage(data) {\n        if (!data.ts || isNaN(data.ts)) {\n          throw new Error('importer-message-invalid-timestamp');\n        }\n        const creator = await this._cache.findImportedUser(data.u._id);\n        if (!creator) {\n          this._logger.warn(\"Imported user not found: \".concat(data.u._id));\n          throw new Error('importer-message-unknown-user');\n        }\n        const rid = await this._cache.findImportedRoomId(data.rid);\n        if (!rid) {\n          throw new Error('importer-message-unknown-room');\n        }\n        if (!this.rids.includes(rid)) {\n          this.rids.push(rid);\n        }\n        const msgObj = await this.buildMessageObject(data, rid, creator);\n        try {\n          await insertMessage(creator, msgObj, rid, true);\n        } catch (e) {\n          this._logger.warn(\"Failed to import message with timestamp \".concat(String(msgObj.ts), \" to room \").concat(rid));\n          this._logger.error(e);\n        }\n      }\n      async convertRecord(record) {\n        await this.insertMessage(record.data);\n        return true;\n      }\n      async buildMessageObject(data, rid, creator) {\n        // Convert the mentions and channels first because these conversions can also modify the msg in the message object\n        const mentions = data.mentions && (await this.convertMessageMentions(data));\n        const channels = data.channels && (await this.convertMessageChannels(data));\n        return _objectSpread(_objectSpread({\n          rid,\n          u: {\n            _id: creator._id,\n            username: creator.username\n          },\n          msg: data.msg,\n          ts: data.ts,\n          t: data.t || undefined,\n          groupable: data.groupable,\n          tmid: data.tmid,\n          tlm: data.tlm,\n          tcount: data.tcount,\n          replies: data.replies && (await this.convertMessageReplies(data.replies)),\n          editedAt: data.editedAt,\n          editedBy: data.editedBy && ((await this._cache.findImportedUser(data.editedBy)) || undefined),\n          mentions,\n          channels,\n          _importFile: data._importFile,\n          url: data.url,\n          attachments: data.attachments,\n          bot: data.bot,\n          emoji: data.emoji,\n          alias: data.alias\n        }, data._id ? {\n          _id: data._id\n        } : {}), data.reactions ? {\n          reactions: await this.convertMessageReactions(data.reactions)\n        } : {});\n      }\n      async convertMessageChannels(message) {\n        const {\n          channels\n        } = message;\n        if (!channels) {\n          return;\n        }\n        const result = [];\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(channels), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const importId = _step2.value;\n            {\n              const {\n                name,\n                _id\n              } = (await this.getMentionedChannelData(importId)) || {};\n              if (!_id || !name) {\n                this._logger.warn(\"Mentioned room not found: \".concat(importId));\n                continue;\n              }\n              message.msg = message.msg.replace(new RegExp(\"#\".concat(importId), 'gi'), \"#\".concat(name));\n              result.push({\n                _id,\n                name\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return result;\n      }\n      async convertMessageMentions(message) {\n        const {\n          mentions\n        } = message;\n        if (!mentions) {\n          return undefined;\n        }\n        const result = [];\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(mentions), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const importId = _step3.value;\n            {\n              if (importId === 'all' || importId === 'here') {\n                result.push({\n                  _id: importId,\n                  username: importId\n                });\n                continue;\n              }\n              // Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n              const name = await this._cache.findImportedUserDisplayName(importId);\n              const data = await this._cache.findImportedUser(importId);\n              if (!data) {\n                this._logger.warn(\"Mentioned user not found: \".concat(importId));\n                continue;\n              }\n              if (!data.username) {\n                this._logger.debug(importId);\n                throw new Error('importer-message-mentioned-username-not-found');\n              }\n              message.msg = message.msg.replace(new RegExp(\"@\".concat(importId), 'gi'), \"@\".concat(data.username));\n              result.push({\n                _id: data._id,\n                username: data.username,\n                name\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        return result;\n      }\n      async convertMessageReactions(importedReactions) {\n        const reactions = {};\n        var _iteratorAbruptCompletion4 = false;\n        var _didIteratorError4 = false;\n        var _iteratorError4;\n        try {\n          for (var _iterator4 = _asyncIterator(Object.keys(importedReactions)), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n            const name = _step4.value;\n            {\n              if (!importedReactions.hasOwnProperty(name)) {\n                continue;\n              }\n              const {\n                users\n              } = importedReactions[name];\n              if (!users.length) {\n                continue;\n              }\n              const reaction = {\n                name,\n                usernames: []\n              };\n              var _iteratorAbruptCompletion5 = false;\n              var _didIteratorError5 = false;\n              var _iteratorError5;\n              try {\n                for (var _iterator5 = _asyncIterator(users), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n                  const importId = _step5.value;\n                  {\n                    const username = await this._cache.findImportedUsername(importId);\n                    if (username && !reaction.usernames.includes(username)) {\n                      reaction.usernames.push(username);\n                    }\n                  }\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                    await _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n              if (reaction.usernames.length) {\n                reactions[name] = reaction;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n              await _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n        if (Object.keys(reactions).length > 0) {\n          return reactions;\n        }\n      }\n      async convertMessageReplies(replies) {\n        const result = [];\n        var _iteratorAbruptCompletion6 = false;\n        var _didIteratorError6 = false;\n        var _iteratorError6;\n        try {\n          for (var _iterator6 = _asyncIterator(replies), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n            const importId = _step6.value;\n            {\n              const userId = await this._cache.findImportedUserId(importId);\n              if (userId && !result.includes(userId)) {\n                result.push(userId);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n              await _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n        return result;\n      }\n      async getMentionedChannelData(importId) {\n        // loading the name will also store the id on the cache if it's missing, so this won't run two queries\n        const name = await this._cache.findImportedRoomName(importId);\n        const _id = await this._cache.findImportedRoomId(importId);\n        if (name && _id) {\n          return {\n            name,\n            _id\n          };\n        }\n        // If the importId was not found, check if we have a room with that name\n        const roomName = limax(importId.trim(), {\n          maintainCase: true\n        });\n        const room = await Rooms.findOneByNonValidatedName(roomName, {\n          projection: {\n            name: 1\n          }\n        });\n        if (room !== null && room !== void 0 && room.name) {\n          this._cache.addRoom(importId, room._id);\n          this._cache.addRoomName(importId, room.name);\n          return {\n            name: room.name,\n            _id: room._id\n          };\n        }\n      }\n      getDataType() {\n        return 'message';\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_asyncIterator","_excluded","export","MessageConverter","Rooms","limax","RecordConverter","insertMessage","__reifyWaitForDeps__","constructor","arguments","rids","convertData","_ref","length","undefined","afterImportAllMessagesFn","callbacks","resetLastMessages","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","rid","value","resetLastMessageById","e","_logger","warn","concat","error","err","return","data","ts","isNaN","Error","creator","_cache","findImportedUser","u","_id","findImportedRoomId","includes","push","msgObj","buildMessageObject","String","convertRecord","record","mentions","convertMessageMentions","channels","convertMessageChannels","username","msg","t","groupable","tmid","tlm","tcount","replies","convertMessageReplies","editedAt","editedBy","_importFile","url","attachments","bot","emoji","alias","reactions","convertMessageReactions","message","result","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","importId","name","getMentionedChannelData","replace","RegExp","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","findImportedUserDisplayName","debug","importedReactions","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","Object","keys","_step4","hasOwnProperty","users","reaction","usernames","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","findImportedUsername","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","userId","findImportedUserId","findImportedRoomName","roomName","trim","maintainCase","room","findOneByNonValidatedName","projection","addRoom","addRoomName","getDataType","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer/server/classes/converters/MessageConverter.ts"],"sourcesContent":["import type { IImportMessageRecord, IMessage as IDBMessage, IImportMessage, IImportMessageReaction } from '@rocket.chat/core-typings';\nimport { Rooms } from '@rocket.chat/models';\nimport limax from 'limax';\n\nimport type { UserIdentification, MentionedChannel } from './ConverterCache';\nimport { RecordConverter } from './RecordConverter';\nimport { insertMessage } from '../../../../lib/server/functions/insertMessage';\nimport type { IConversionCallbacks } from '../../definitions/IConversionCallbacks';\n\nexport type MessageConversionCallbacks = IConversionCallbacks & { afterImportAllMessagesFn?: (roomIds: string[]) => Promise<void> };\n\ntype MessageObject = Record<string, any>;\n\ntype MentionedUser = {\n\t_id: string;\n\tusername: string;\n\tname?: string;\n};\n\ntype IMessageReaction = {\n\tname: string;\n\tusernames: string[];\n};\n\ntype IMessageReactions = Record<string, IMessageReaction>;\n\nexport class MessageConverter extends RecordConverter<IImportMessageRecord> {\n\tprivate rids: string[] = [];\n\n\tasync convertData({ afterImportAllMessagesFn, ...callbacks }: MessageConversionCallbacks = {}): Promise<void> {\n\t\tthis.rids = [];\n\t\tawait super.convertData(callbacks);\n\n\t\tawait this.resetLastMessages();\n\t\tif (afterImportAllMessagesFn) {\n\t\t\tawait afterImportAllMessagesFn(this.rids);\n\t\t}\n\t}\n\n\tprotected async resetLastMessages(): Promise<void> {\n\t\tfor await (const rid of this.rids) {\n\t\t\ttry {\n\t\t\t\tawait Rooms.resetLastMessageById(rid, null);\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.warn(`Failed to update last message of room ${rid}`);\n\t\t\t\tthis._logger.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async insertMessage(data: IImportMessage): Promise<void> {\n\t\tif (!data.ts || isNaN(data.ts as unknown as number)) {\n\t\t\tthrow new Error('importer-message-invalid-timestamp');\n\t\t}\n\n\t\tconst creator = await this._cache.findImportedUser(data.u._id);\n\t\tif (!creator) {\n\t\t\tthis._logger.warn(`Imported user not found: ${data.u._id}`);\n\t\t\tthrow new Error('importer-message-unknown-user');\n\t\t}\n\t\tconst rid = await this._cache.findImportedRoomId(data.rid);\n\t\tif (!rid) {\n\t\t\tthrow new Error('importer-message-unknown-room');\n\t\t}\n\t\tif (!this.rids.includes(rid)) {\n\t\t\tthis.rids.push(rid);\n\t\t}\n\n\t\tconst msgObj = await this.buildMessageObject(data, rid, creator);\n\n\t\ttry {\n\t\t\tawait insertMessage(creator, msgObj as unknown as IDBMessage, rid, true);\n\t\t} catch (e) {\n\t\t\tthis._logger.warn(`Failed to import message with timestamp ${String(msgObj.ts)} to room ${rid}`);\n\t\t\tthis._logger.error(e);\n\t\t}\n\t}\n\n\tprotected async convertRecord(record: IImportMessageRecord): Promise<boolean> {\n\t\tawait this.insertMessage(record.data);\n\t\treturn true;\n\t}\n\n\tprotected async buildMessageObject(data: IImportMessage, rid: string, creator: UserIdentification): Promise<MessageObject> {\n\t\t// Convert the mentions and channels first because these conversions can also modify the msg in the message object\n\t\tconst mentions = data.mentions && (await this.convertMessageMentions(data));\n\t\tconst channels = data.channels && (await this.convertMessageChannels(data));\n\n\t\treturn {\n\t\t\trid,\n\t\t\tu: {\n\t\t\t\t_id: creator._id,\n\t\t\t\tusername: creator.username,\n\t\t\t},\n\t\t\tmsg: data.msg,\n\t\t\tts: data.ts,\n\t\t\tt: data.t || undefined,\n\t\t\tgroupable: data.groupable,\n\t\t\ttmid: data.tmid,\n\t\t\ttlm: data.tlm,\n\t\t\ttcount: data.tcount,\n\t\t\treplies: data.replies && (await this.convertMessageReplies(data.replies)),\n\t\t\teditedAt: data.editedAt,\n\t\t\teditedBy: data.editedBy && ((await this._cache.findImportedUser(data.editedBy)) || undefined),\n\t\t\tmentions,\n\t\t\tchannels,\n\t\t\t_importFile: data._importFile,\n\t\t\turl: data.url,\n\t\t\tattachments: data.attachments,\n\t\t\tbot: data.bot,\n\t\t\temoji: data.emoji,\n\t\t\talias: data.alias,\n\t\t\t...(data._id ? { _id: data._id } : {}),\n\t\t\t...(data.reactions ? { reactions: await this.convertMessageReactions(data.reactions) } : {}),\n\t\t};\n\t}\n\n\tprotected async convertMessageChannels(message: IImportMessage): Promise<MentionedChannel[] | undefined> {\n\t\tconst { channels } = message;\n\t\tif (!channels) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result: MentionedChannel[] = [];\n\t\tfor await (const importId of channels) {\n\t\t\tconst { name, _id } = (await this.getMentionedChannelData(importId)) || {};\n\n\t\t\tif (!_id || !name) {\n\t\t\t\tthis._logger.warn(`Mentioned room not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\#${importId}`, 'gi'), `#${name}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id,\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageMentions(message: IImportMessage): Promise<MentionedUser[] | undefined> {\n\t\tconst { mentions } = message;\n\t\tif (!mentions) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: MentionedUser[] = [];\n\t\tfor await (const importId of mentions) {\n\t\t\tif (importId === ('all' as 'string') || importId === 'here') {\n\t\t\t\tresult.push({\n\t\t\t\t\t_id: importId,\n\t\t\t\t\tusername: importId,\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Loading the name will also store the remaining data on the cache if it's missing, so this won't run two queries\n\t\t\tconst name = await this._cache.findImportedUserDisplayName(importId);\n\t\t\tconst data = await this._cache.findImportedUser(importId);\n\n\t\t\tif (!data) {\n\t\t\t\tthis._logger.warn(`Mentioned user not found: ${importId}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!data.username) {\n\t\t\t\tthis._logger.debug(importId);\n\t\t\t\tthrow new Error('importer-message-mentioned-username-not-found');\n\t\t\t}\n\n\t\t\tmessage.msg = message.msg.replace(new RegExp(`\\@${importId}`, 'gi'), `@${data.username}`);\n\n\t\t\tresult.push({\n\t\t\t\t_id: data._id,\n\t\t\t\tusername: data.username as 'string',\n\t\t\t\tname,\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async convertMessageReactions(\n\t\timportedReactions: Record<string, IImportMessageReaction>,\n\t): Promise<undefined | IMessageReactions> {\n\t\tconst reactions: IMessageReactions = {};\n\n\t\tfor await (const name of Object.keys(importedReactions)) {\n\t\t\tif (!importedReactions.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { users } = importedReactions[name];\n\n\t\t\tif (!users.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst reaction: IMessageReaction = {\n\t\t\t\tname,\n\t\t\t\tusernames: [],\n\t\t\t};\n\n\t\t\tfor await (const importId of users) {\n\t\t\t\tconst username = await this._cache.findImportedUsername(importId);\n\t\t\t\tif (username && !reaction.usernames.includes(username)) {\n\t\t\t\t\treaction.usernames.push(username);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (reaction.usernames.length) {\n\t\t\t\treactions[name] = reaction;\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(reactions).length > 0) {\n\t\t\treturn reactions;\n\t\t}\n\t}\n\n\tprotected async convertMessageReplies(replies: string[]): Promise<string[]> {\n\t\tconst result: string[] = [];\n\t\tfor await (const importId of replies) {\n\t\t\tconst userId = await this._cache.findImportedUserId(importId);\n\t\t\tif (userId && !result.includes(userId)) {\n\t\t\t\tresult.push(userId);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected async getMentionedChannelData(importId: string): Promise<MentionedChannel | undefined> {\n\t\t// loading the name will also store the id on the cache if it's missing, so this won't run two queries\n\t\tconst name = await this._cache.findImportedRoomName(importId);\n\t\tconst _id = await this._cache.findImportedRoomId(importId);\n\n\t\tif (name && _id) {\n\t\t\treturn {\n\t\t\t\tname,\n\t\t\t\t_id,\n\t\t\t};\n\t\t}\n\n\t\t// If the importId was not found, check if we have a room with that name\n\t\tconst roomName = limax(importId.trim(), { maintainCase: true });\n\n\t\tconst room = await Rooms.findOneByNonValidatedName(roomName, { projection: { name: 1 } });\n\t\tif (room?.name) {\n\t\t\tthis._cache.addRoom(importId, room._id);\n\t\t\tthis._cache.addRoomName(importId, room.name);\n\n\t\t\treturn {\n\t\t\t\tname: room.name,\n\t\t\t\t_id: room._id,\n\t\t\t};\n\t\t}\n\t}\n\n\tprotected getDataType(): 'message' {\n\t\treturn 'message';\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b7d28ee38e7afac4441f8370224744349957a2b8"}
