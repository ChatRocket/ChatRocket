{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/messages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/engagementDashboard/messages.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/messages.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/messages.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/messages.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,gBAAgB,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAC3G,OAAO,EAAE,eAAe,EAAE,MAAM,8CAA8C,CAAC;AAE/E,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,OAAiB,EAAE,EAAE,IAAI,EAAoB,EAAqB,EAAE;IAC5G,MAAM,eAAe,GAAG,eAAe,CAAC,yBAAyB,EAAE,CAAC;IACpE,IAAI,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,SAAS,CAAC,eAAe,CAAC;QAC/B,IAAI,EAAE,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,IAAI;KACJ,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,EAAE,OAAiB,EAAE,IAAY,EAAqB,EAAE;IACjG,MAAM,eAAe,GAAG,eAAe,CAAC,yBAAyB,EAAE,CAAC;IACpE,IAAI,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,SAAS,CAAC,kBAAkB,CAAC;QAClC,IAAI,EAAE,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QAClC,IAAI;KACJ,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,KAAK,EAAE,IAAU,EAAiB,EAAE;IAClF,MAAM,qBAAqB,GAAG,MAAM,SAAS,CAAC,oBAAoB,CAAC;QAClE,IAAI,EAAE,UAAU;QAChB,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC;KAC5B,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;QACjE,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,4BAA4B,CAAC;YAC5D,KAAK,EAAE,aAAa;YACpB,GAAG,EAAE,IAAI;SACT,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAChB,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACxB,SAAS,CAAC,SAAS,CAAC;YACnB,GAAG,OAAO;YACV,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;SAC5B,CAAC,CACF,CACD,CAAC;IACH,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,KAAK,EAAE,EAChD,KAAK,EACL,GAAG,GAIH,EAUE,EAAE;IACJ,MAAM,gBAAgB,GAAG,wBAAwB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9D,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IACzE,MAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAClG,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACpC,MAAM,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IACrF,MAAM,qBAAqB,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC;QACxE,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;QAC9B,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC;QAC1B,OAAO,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE;KACvD,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,MAAM,kBAAkB,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC;QACrE,KAAK,EAAE,gBAAgB,CAAC,eAAe,CAAC;QACxC,GAAG,EAAE,gBAAgB,CAAC,aAAa,CAAC;QACpC,OAAO,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE;KACvD,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,MAAM,iBAAiB,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,EAAE,QAAQ,IAAI,CAAC,CAAC;IACtG,MAAM,aAAa,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,EAAE,QAAQ,IAAI,CAAC,CAAC;IAC9F,MAAM,4BAA4B,GAAG,mBAAmB,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;IAC5F,MAAM,yBAAyB,GAAG,mBAAmB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IACtF,OAAO;QACN,IAAI,EAAE,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACzC,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC;YAC9B,QAAQ,EAAE,GAAG,CAAC,QAAQ;SACtB,CAAC,CAAC;QACH,MAAM,EAAE;YACP,KAAK,EAAE,4BAA4B;YACnC,SAAS,EAAE,4BAA4B,GAAG,yBAAyB;SACnE;QACD,SAAS,EAAE;YACV,KAAK,EAAE,iBAAiB;YACxB,SAAS,EAAE,aAAa,GAAG,iBAAiB;SAC5C;KACD,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,EAAE,EAC5C,KAAK,EACL,GAAG,GAIH,EAKE,EAAE;IACJ,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,iBAAiB,CAAC;QACjD,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;QAC9B,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC;KAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,MAAM,eAAe,GAAiB,eAAe,CAAC,yBAAyB,EAAkB,CAAC;IAClG,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,EAAsB,EAAE,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACzG,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC;QACzB,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+CAA+C,GAAG,KAAK,EAAE,EACrE,KAAK,EACL,GAAG,GAIH,EAOE,EAAE;IACJ,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,4CAA4C,CAAC;QAC7E,KAAK,EAAE,gBAAgB,CAAC,KAAK,CAAC;QAC9B,GAAG,EAAE,gBAAgB,CAAC,GAAG,CAAC;QAC1B,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;KAC7C,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,OAAO,EAAE,QAAQ,EAAE,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import type { IDirectMessageRoom, IRoom, IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Analytics } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems } from './date';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\nexport const handleMessagesSent = async (message: IMessage, { room }: { room?: IRoom }): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageSent({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const handleMessagesDeleted = async (message: IMessage, room?: IRoom): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageDeleted({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const fillFirstDaysOfMessagesIfNeeded = async (date: Date): Promise<void> => {\n\tconst messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'messages',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!messagesFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst messages = await Messages.getTotalOfMessagesSentByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tawait Promise.all(\n\t\t\tmessages.map((message) =>\n\t\t\t\tAnalytics.insertOne({\n\t\t\t\t\t...message,\n\t\t\t\t\tdate: parseInt(message.date),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n};\n\nexport const findWeeklyMessagesSentData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; messages: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayMessages = currentPeriodMessages.find((item) => item._id === yesterday)?.messages || 0;\n\tconst todayMessages = currentPeriodMessages.find((item) => item._id === today)?.messages || 0;\n\tconst currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n\tconst lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n\treturn {\n\t\tdays: currentPeriodMessages.map((day) => ({\n\t\t\tday: convertIntToDate(day._id),\n\t\t\tmessages: day.messages,\n\t\t})),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalOfMessages,\n\t\t\tvariation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayMessages,\n\t\t\tvariation: todayMessages - yesterdayMessages,\n\t\t},\n\t};\n};\n\nexport const findMessagesSentOrigin = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\torigins: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}[];\n}> => {\n\tconst origins = await Analytics.getMessagesOrigin({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t}).toArray();\n\tconst roomTypesToShow: IRoom['t'][] = roomCoordinator.getTypesToShowOnDashboard() as IRoom['t'][];\n\tconst responseTypes = origins.map((origin) => origin.t);\n\tconst missingTypes = roomTypesToShow.filter((type): type is IRoom['t'] => !responseTypes.includes(type));\n\tif (missingTypes.length) {\n\t\tmissingTypes.forEach((type) => origins.push({ messages: 0, t: type }));\n\t}\n\n\treturn { origins };\n};\n\nexport const findTopFivePopularChannelsByMessageSentQuantity = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tchannels: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t\tname: IRoom['name'] | IRoom['fname'];\n\t\tusernames?: IDirectMessageRoom['usernames'];\n\t}[];\n}> => {\n\tconst channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: 5, sort: { messages: -1 } },\n\t}).toArray();\n\treturn { channels };\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/messages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/engagementDashboard/messages.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/messages.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IDirectMessageRoom, IRoom, IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Analytics } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems } from './date';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\nexport const handleMessagesSent = async (message: IMessage, { room }: { room?: IRoom }): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageSent({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const handleMessagesDeleted = async (message: IMessage, room?: IRoom): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageDeleted({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const fillFirstDaysOfMessagesIfNeeded = async (date: Date): Promise<void> => {\n\tconst messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'messages',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!messagesFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst messages = await Messages.getTotalOfMessagesSentByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tawait Promise.all(\n\t\t\tmessages.map((message) =>\n\t\t\t\tAnalytics.insertOne({\n\t\t\t\t\t...message,\n\t\t\t\t\tdate: parseInt(message.date),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n};\n\nexport const findWeeklyMessagesSentData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; messages: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayMessages = currentPeriodMessages.find((item) => item._id === yesterday)?.messages || 0;\n\tconst todayMessages = currentPeriodMessages.find((item) => item._id === today)?.messages || 0;\n\tconst currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n\tconst lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n\treturn {\n\t\tdays: currentPeriodMessages.map((day) => ({\n\t\t\tday: convertIntToDate(day._id),\n\t\t\tmessages: day.messages,\n\t\t})),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalOfMessages,\n\t\t\tvariation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayMessages,\n\t\t\tvariation: todayMessages - yesterdayMessages,\n\t\t},\n\t};\n};\n\nexport const findMessagesSentOrigin = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\torigins: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}[];\n}> => {\n\tconst origins = await Analytics.getMessagesOrigin({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t}).toArray();\n\tconst roomTypesToShow: IRoom['t'][] = roomCoordinator.getTypesToShowOnDashboard() as IRoom['t'][];\n\tconst responseTypes = origins.map((origin) => origin.t);\n\tconst missingTypes = roomTypesToShow.filter((type): type is IRoom['t'] => !responseTypes.includes(type));\n\tif (missingTypes.length) {\n\t\tmissingTypes.forEach((type) => origins.push({ messages: 0, t: type }));\n\t}\n\n\treturn { origins };\n};\n\nexport const findTopFivePopularChannelsByMessageSentQuantity = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tchannels: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t\tname: IRoom['name'] | IRoom['fname'];\n\t\tusernames?: IDirectMessageRoom['usernames'];\n\t}[];\n}> => {\n\tconst channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: 5, sort: { messages: -1 } },\n\t}).toArray();\n\treturn { channels };\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      handleMessagesSent: () => handleMessagesSent,\n      handleMessagesDeleted: () => handleMessagesDeleted,\n      fillFirstDaysOfMessagesIfNeeded: () => fillFirstDaysOfMessagesIfNeeded,\n      findWeeklyMessagesSentData: () => findWeeklyMessagesSentData,\n      findMessagesSentOrigin: () => findMessagesSentOrigin,\n      findTopFivePopularChannelsByMessageSentQuantity: () => findTopFivePopularChannelsByMessageSentQuantity\n    });\n    let Messages, Analytics;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Analytics(v) {\n        Analytics = v;\n      }\n    }, 0);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 1);\n    let convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems;\n    module.link(\"./date\", {\n      convertDateToInt(v) {\n        convertDateToInt = v;\n      },\n      diffBetweenDaysInclusive(v) {\n        diffBetweenDaysInclusive = v;\n      },\n      convertIntToDate(v) {\n        convertIntToDate = v;\n      },\n      getTotalOfWeekItems(v) {\n        getTotalOfWeekItems = v;\n      }\n    }, 2);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const handleMessagesSent = async (message, _ref) => {\n      let {\n        room\n      } = _ref;\n      const roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n      if (!room || !roomTypesToShow.includes(room.t)) {\n        return message;\n      }\n      await Analytics.saveMessageSent({\n        date: convertDateToInt(message.ts),\n        room\n      });\n      return message;\n    };\n    const handleMessagesDeleted = async (message, room) => {\n      const roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n      if (!room || !roomTypesToShow.includes(room.t)) {\n        return message;\n      }\n      await Analytics.saveMessageDeleted({\n        date: convertDateToInt(message.ts),\n        room\n      });\n      return message;\n    };\n    const fillFirstDaysOfMessagesIfNeeded = async date => {\n      const messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n        type: 'messages',\n        date: convertDateToInt(date)\n      }).toArray();\n      if (!messagesFromAnalytics.length) {\n        const startOfPeriod = moment(date).subtract(90, 'days').toDate();\n        const messages = await Messages.getTotalOfMessagesSentByDate({\n          start: startOfPeriod,\n          end: date\n        });\n        await Promise.all(messages.map(message => Analytics.insertOne(_objectSpread(_objectSpread({}, message), {}, {\n          date: parseInt(message.date)\n        }))));\n      }\n    };\n    const findWeeklyMessagesSentData = async _ref2 => {\n      var _currentPeriodMessage, _currentPeriodMessage2;\n      let {\n        start,\n        end\n      } = _ref2;\n      const daysBetweenDates = diffBetweenDaysInclusive(end, start);\n      const endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n      const startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n      const today = convertDateToInt(end);\n      const yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n      const currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n        start: convertDateToInt(start),\n        end: convertDateToInt(end),\n        options: {\n          count: daysBetweenDates,\n          sort: {\n            _id: -1\n          }\n        }\n      }).toArray();\n      const lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n        start: convertDateToInt(startOfLastWeek),\n        end: convertDateToInt(endOfLastWeek),\n        options: {\n          count: daysBetweenDates,\n          sort: {\n            _id: -1\n          }\n        }\n      }).toArray();\n      const yesterdayMessages = ((_currentPeriodMessage = currentPeriodMessages.find(item => item._id === yesterday)) === null || _currentPeriodMessage === void 0 ? void 0 : _currentPeriodMessage.messages) || 0;\n      const todayMessages = ((_currentPeriodMessage2 = currentPeriodMessages.find(item => item._id === today)) === null || _currentPeriodMessage2 === void 0 ? void 0 : _currentPeriodMessage2.messages) || 0;\n      const currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n      const lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n      return {\n        days: currentPeriodMessages.map(day => ({\n          day: convertIntToDate(day._id),\n          messages: day.messages\n        })),\n        period: {\n          count: currentPeriodTotalOfMessages,\n          variation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages\n        },\n        yesterday: {\n          count: yesterdayMessages,\n          variation: todayMessages - yesterdayMessages\n        }\n      };\n    };\n    const findMessagesSentOrigin = async _ref3 => {\n      let {\n        start,\n        end\n      } = _ref3;\n      const origins = await Analytics.getMessagesOrigin({\n        start: convertDateToInt(start),\n        end: convertDateToInt(end)\n      }).toArray();\n      const roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n      const responseTypes = origins.map(origin => origin.t);\n      const missingTypes = roomTypesToShow.filter(type => !responseTypes.includes(type));\n      if (missingTypes.length) {\n        missingTypes.forEach(type => origins.push({\n          messages: 0,\n          t: type\n        }));\n      }\n      return {\n        origins\n      };\n    };\n    const findTopFivePopularChannelsByMessageSentQuantity = async _ref4 => {\n      let {\n        start,\n        end\n      } = _ref4;\n      const channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n        start: convertDateToInt(start),\n        end: convertDateToInt(end),\n        options: {\n          count: 5,\n          sort: {\n            messages: -1\n          }\n        }\n      }).toArray();\n      return {\n        channels\n      };\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","handleMessagesSent","handleMessagesDeleted","fillFirstDaysOfMessagesIfNeeded","findWeeklyMessagesSentData","findMessagesSentOrigin","findTopFivePopularChannelsByMessageSentQuantity","Messages","Analytics","moment","convertDateToInt","diffBetweenDaysInclusive","convertIntToDate","getTotalOfWeekItems","roomCoordinator","__reifyWaitForDeps__","message","_ref","room","roomTypesToShow","getTypesToShowOnDashboard","includes","t","saveMessageSent","date","ts","saveMessageDeleted","messagesFromAnalytics","findByTypeBeforeDate","type","toArray","length","startOfPeriod","subtract","toDate","messages","getTotalOfMessagesSentByDate","start","end","Promise","all","map","insertOne","parseInt","_ref2","_currentPeriodMessage","_currentPeriodMessage2","daysBetweenDates","endOfLastWeek","clone","startOfLastWeek","today","yesterday","currentPeriodMessages","getMessagesSentTotalByDate","options","count","sort","_id","lastPeriodMessages","yesterdayMessages","find","item","todayMessages","currentPeriodTotalOfMessages","lastPeriodTotalOfMessages","days","day","period","variation","_ref3","origins","getMessagesOrigin","responseTypes","origin","missingTypes","filter","forEach","push","_ref4","channels","getMostPopularChannelsByMessagesSentQuantity","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/lib/engagementDashboard/messages.ts"],"sourcesContent":["import type { IDirectMessageRoom, IRoom, IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Analytics } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { convertDateToInt, diffBetweenDaysInclusive, convertIntToDate, getTotalOfWeekItems } from './date';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\n\nexport const handleMessagesSent = async (message: IMessage, { room }: { room?: IRoom }): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageSent({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const handleMessagesDeleted = async (message: IMessage, room?: IRoom): Promise<IMessage> => {\n\tconst roomTypesToShow = roomCoordinator.getTypesToShowOnDashboard();\n\tif (!room || !roomTypesToShow.includes(room.t)) {\n\t\treturn message;\n\t}\n\n\tawait Analytics.saveMessageDeleted({\n\t\tdate: convertDateToInt(message.ts),\n\t\troom,\n\t});\n\n\treturn message;\n};\n\nexport const fillFirstDaysOfMessagesIfNeeded = async (date: Date): Promise<void> => {\n\tconst messagesFromAnalytics = await Analytics.findByTypeBeforeDate({\n\t\ttype: 'messages',\n\t\tdate: convertDateToInt(date),\n\t}).toArray();\n\tif (!messagesFromAnalytics.length) {\n\t\tconst startOfPeriod = moment(date).subtract(90, 'days').toDate();\n\t\tconst messages = await Messages.getTotalOfMessagesSentByDate({\n\t\t\tstart: startOfPeriod,\n\t\t\tend: date,\n\t\t});\n\t\tawait Promise.all(\n\t\t\tmessages.map((message) =>\n\t\t\t\tAnalytics.insertOne({\n\t\t\t\t\t...message,\n\t\t\t\t\tdate: parseInt(message.date),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n};\n\nexport const findWeeklyMessagesSentData = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tdays: { day: Date; messages: number }[];\n\tperiod: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n\tyesterday: {\n\t\tcount: number;\n\t\tvariation: number;\n\t};\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).clone().subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).clone().subtract(daysBetweenDates, 'days').toDate();\n\tconst today = convertDateToInt(end);\n\tconst yesterday = convertDateToInt(moment(end).clone().subtract(1, 'days').toDate());\n\tconst currentPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst lastPeriodMessages = await Analytics.getMessagesSentTotalByDate({\n\t\tstart: convertDateToInt(startOfLastWeek),\n\t\tend: convertDateToInt(endOfLastWeek),\n\t\toptions: { count: daysBetweenDates, sort: { _id: -1 } },\n\t}).toArray();\n\tconst yesterdayMessages = currentPeriodMessages.find((item) => item._id === yesterday)?.messages || 0;\n\tconst todayMessages = currentPeriodMessages.find((item) => item._id === today)?.messages || 0;\n\tconst currentPeriodTotalOfMessages = getTotalOfWeekItems(currentPeriodMessages, 'messages');\n\tconst lastPeriodTotalOfMessages = getTotalOfWeekItems(lastPeriodMessages, 'messages');\n\treturn {\n\t\tdays: currentPeriodMessages.map((day) => ({\n\t\t\tday: convertIntToDate(day._id),\n\t\t\tmessages: day.messages,\n\t\t})),\n\t\tperiod: {\n\t\t\tcount: currentPeriodTotalOfMessages,\n\t\t\tvariation: currentPeriodTotalOfMessages - lastPeriodTotalOfMessages,\n\t\t},\n\t\tyesterday: {\n\t\t\tcount: yesterdayMessages,\n\t\t\tvariation: todayMessages - yesterdayMessages,\n\t\t},\n\t};\n};\n\nexport const findMessagesSentOrigin = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\torigins: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t}[];\n}> => {\n\tconst origins = await Analytics.getMessagesOrigin({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t}).toArray();\n\tconst roomTypesToShow: IRoom['t'][] = roomCoordinator.getTypesToShowOnDashboard() as IRoom['t'][];\n\tconst responseTypes = origins.map((origin) => origin.t);\n\tconst missingTypes = roomTypesToShow.filter((type): type is IRoom['t'] => !responseTypes.includes(type));\n\tif (missingTypes.length) {\n\t\tmissingTypes.forEach((type) => origins.push({ messages: 0, t: type }));\n\t}\n\n\treturn { origins };\n};\n\nexport const findTopFivePopularChannelsByMessageSentQuantity = async ({\n\tstart,\n\tend,\n}: {\n\tstart: Date;\n\tend: Date;\n}): Promise<{\n\tchannels: {\n\t\tt: IRoom['t'];\n\t\tmessages: number;\n\t\tname: IRoom['name'] | IRoom['fname'];\n\t\tusernames?: IDirectMessageRoom['usernames'];\n\t}[];\n}> => {\n\tconst channels = await Analytics.getMostPopularChannelsByMessagesSentQuantity({\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\toptions: { count: 5, sort: { messages: -1 } },\n\t}).toArray();\n\treturn { channels };\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"f1c3dbb6486fa5f735c5a05db6ab890b8c04264d"}
