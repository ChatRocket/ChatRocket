{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/dashboards.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/analytics/dashboards.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/dashboards.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/analytics/dashboards.ts","sourceRoot":"","sources":["app/livechat/server/lib/analytics/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelAnalytics } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity } from '@rocket.chat/models';\nimport mem from 'memoize';\nimport moment from 'moment';\n\nimport { secondsToHHMMSS } from '../../../../../lib/utils/secondsToHHMMSS';\nimport { settings } from '../../../../settings/server';\nimport { getAnalyticsOverviewDataCachedForRealtime } from '../AnalyticsTyped';\nimport {\n\tfindPercentageOfAbandonedRoomsAsync,\n\tfindAllAverageOfChatDurationTimeAsync,\n\tfindAllAverageWaitingTimeAsync,\n\tfindAllNumberOfAbandonedRoomsAsync,\n\tfindAllAverageServiceTimeAsync,\n} from './departments';\n\nconst findAllChatsStatusAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\treturn {\n\t\topen: await LivechatRooms.countAllOpenChatsBetweenDate({ start, end, departmentId }),\n\t\tclosed: await LivechatRooms.countAllClosedChatsBetweenDate({ start, end, departmentId }),\n\t\tqueued: await LivechatRooms.countAllQueuedChatsBetweenDate({ start, end, departmentId }),\n\t\tonhold: await LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId),\n\t};\n};\n\nconst getProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Productivity',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user?.utcOffset,\n\t\t\tlanguage: user?.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst averageWaitingTime = await findAllAverageWaitingTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfWaitingTime = averageWaitingTime.departments.length;\n\n\tconst sumOfWaitingTime = averageWaitingTime.departments.reduce((acc: number, serviceTime: { averageWaitingTimeInSeconds: number }) => {\n\t\tacc += serviceTime.averageWaitingTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],\n\t};\n};\n\nconst getAgentsProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\t// TODO: check type of date\n\tconst averageOfAvailableServiceTime = (\n\t\tawait LivechatAgentActivity.findAllAverageAvailableServiceTime({\n\t\t\tdate: parseInt(moment(start).format('YYYYMMDD')) as any,\n\t\t\tdepartmentId,\n\t\t})\n\t)[0];\n\tconst averageOfServiceTime = await findAllAverageServiceTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\n\tconst totalOfServiceTime = averageOfServiceTime.departments.length;\n\n\tconst sumOfServiceTime = averageOfServiceTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tserviceTime: {\n\t\t\t\taverageServiceTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += serviceTime.averageServiceTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metric.title === 'Busiest_time'),\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_available_service_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageAvailableServiceTime),\n\t\t\t},\n\t\t\t{ title: 'Avg_of_service_time', value: secondsToHHMMSS(totalOfAverageServiceTime) },\n\t\t],\n\t};\n};\n\nconst getChatsMetricsAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst abandonedRooms = await findAllNumberOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfAbandonedRooms = await findPercentageOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfChatDurationTime = await findAllAverageOfChatDurationTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n\tconst totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n\n\tconst sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tabandonedRoom: {\n\t\t\t\tpercentageOfAbandonedChats: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += abandonedRoom.percentageOfAbandonedChats;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tchatDurationTime: {\n\t\t\t\taverageChatDurationTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += chatDurationTime.averageChatDurationTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalAbandonedRooms = abandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\titem: {\n\t\t\t\tabandonedRooms: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += item.abandonedRooms;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },\n\t\t\t{ title: 'Avg_of_abandoned_chats', value: `${totalOfAverageAbandonedRooms}%` },\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_chat_duration_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageChatDurationTime),\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getConversationsMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await getAnalyticsOverviewDataCachedForRealtime({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.countVisitorsBetweenDate({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartment: departmentId,\n\t});\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metrics.includes(metric.title)),\n\t\t\t{ title: 'Total_visitors', value: visitorsCount },\n\t\t],\n\t};\n};\n\nconst findAllChatMetricsByAgentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};\n\t(open || []).forEach((agent: { chats: number; _id: string }) => {\n\t\tresult[agent._id] = { open: agent.chats, closed: 0, onhold: 0 };\n\t});\n\t(closed || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\topen: result[agent._id] ? result[agent._id].open : 0,\n\t\t\tclosed: agent.chats,\n\t\t};\n\t});\n\n\t(onhold || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\t...result[agent._id],\n\t\t\tonhold: agent.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllAgentsStatusAsync = async ({ departmentId = undefined }: { departmentId?: string }) =>\n\t(await Users.countAllAgentsStatus({ departmentId }))[0];\n\nconst findAllChatMetricsByDepartmentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result: Record<string, { open: number; closed: number }> = {};\n\t(open || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = { open: department.chats, closed: 0 };\n\t});\n\t(closed || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = {\n\t\t\topen: result[department.name] ? result[department.name].open : 0,\n\t\t\tclosed: department.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllResponseTimeMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\n\treturn {\n\t\tresponse: {\n\t\t\tavg: responseTimes ? responseTimes.avg : 0,\n\t\t\tlongest: responseTimes ? responseTimes.longest : 0,\n\t\t},\n\t\treaction: {\n\t\t\tavg: reactionTimes ? reactionTimes.avg : 0,\n\t\t\tlongest: reactionTimes ? reactionTimes.longest : 0,\n\t\t},\n\t\tchatDuration: {\n\t\t\tavg: durationTimings ? durationTimings.avg : 0,\n\t\t\tlongest: durationTimings ? durationTimings.longest : 0,\n\t\t},\n\t};\n};\n\nexport const getConversationsMetricsAsyncCached = mem(getConversationsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getAgentsProductivityMetricsAsyncCached = mem(getAgentsProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getChatsMetricsAsyncCached = mem(getChatsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getProductivityMetricsAsyncCached = mem(getProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatsStatusAsyncCached = mem(findAllChatsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByAgentAsyncCached = mem(findAllChatMetricsByAgentAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllAgentsStatusAsyncCached = mem(findAllAgentsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByDepartmentAsyncCached = mem(findAllChatMetricsByDepartmentAsync, {\n\tmaxAge: 5000,\n\tcacheKey: JSON.stringify,\n});\nexport const findAllResponseTimeMetricsAsyncCached = mem(findAllResponseTimeMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/analytics/dashboards.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/analytics/dashboards.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/analytics/dashboards.ts","sourceRoot":"","sources":["app/livechat/server/lib/analytics/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelAnalytics } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity } from '@rocket.chat/models';\nimport mem from 'memoize';\nimport moment from 'moment';\n\nimport { secondsToHHMMSS } from '../../../../../lib/utils/secondsToHHMMSS';\nimport { settings } from '../../../../settings/server';\nimport { getAnalyticsOverviewDataCachedForRealtime } from '../AnalyticsTyped';\nimport {\n\tfindPercentageOfAbandonedRoomsAsync,\n\tfindAllAverageOfChatDurationTimeAsync,\n\tfindAllAverageWaitingTimeAsync,\n\tfindAllNumberOfAbandonedRoomsAsync,\n\tfindAllAverageServiceTimeAsync,\n} from './departments';\n\nconst findAllChatsStatusAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\treturn {\n\t\topen: await LivechatRooms.countAllOpenChatsBetweenDate({ start, end, departmentId }),\n\t\tclosed: await LivechatRooms.countAllClosedChatsBetweenDate({ start, end, departmentId }),\n\t\tqueued: await LivechatRooms.countAllQueuedChatsBetweenDate({ start, end, departmentId }),\n\t\tonhold: await LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId),\n\t};\n};\n\nconst getProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Productivity',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user?.utcOffset,\n\t\t\tlanguage: user?.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst averageWaitingTime = await findAllAverageWaitingTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfWaitingTime = averageWaitingTime.departments.length;\n\n\tconst sumOfWaitingTime = averageWaitingTime.departments.reduce((acc: number, serviceTime: { averageWaitingTimeInSeconds: number }) => {\n\t\tacc += serviceTime.averageWaitingTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],\n\t};\n};\n\nconst getAgentsProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\t// TODO: check type of date\n\tconst averageOfAvailableServiceTime = (\n\t\tawait LivechatAgentActivity.findAllAverageAvailableServiceTime({\n\t\t\tdate: parseInt(moment(start).format('YYYYMMDD')) as any,\n\t\t\tdepartmentId,\n\t\t})\n\t)[0];\n\tconst averageOfServiceTime = await findAllAverageServiceTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\n\tconst totalOfServiceTime = averageOfServiceTime.departments.length;\n\n\tconst sumOfServiceTime = averageOfServiceTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tserviceTime: {\n\t\t\t\taverageServiceTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += serviceTime.averageServiceTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metric.title === 'Busiest_time'),\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_available_service_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageAvailableServiceTime),\n\t\t\t},\n\t\t\t{ title: 'Avg_of_service_time', value: secondsToHHMMSS(totalOfAverageServiceTime) },\n\t\t],\n\t};\n};\n\nconst getChatsMetricsAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst abandonedRooms = await findAllNumberOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfAbandonedRooms = await findPercentageOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfChatDurationTime = await findAllAverageOfChatDurationTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n\tconst totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n\n\tconst sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tabandonedRoom: {\n\t\t\t\tpercentageOfAbandonedChats: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += abandonedRoom.percentageOfAbandonedChats;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tchatDurationTime: {\n\t\t\t\taverageChatDurationTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += chatDurationTime.averageChatDurationTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalAbandonedRooms = abandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\titem: {\n\t\t\t\tabandonedRooms: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += item.abandonedRooms;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },\n\t\t\t{ title: 'Avg_of_abandoned_chats', value: `${totalOfAverageAbandonedRooms}%` },\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_chat_duration_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageChatDurationTime),\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getConversationsMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await getAnalyticsOverviewDataCachedForRealtime({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.countVisitorsBetweenDate({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartment: departmentId,\n\t});\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metrics.includes(metric.title)),\n\t\t\t{ title: 'Total_visitors', value: visitorsCount },\n\t\t],\n\t};\n};\n\nconst findAllChatMetricsByAgentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};\n\t(open || []).forEach((agent: { chats: number; _id: string }) => {\n\t\tresult[agent._id] = { open: agent.chats, closed: 0, onhold: 0 };\n\t});\n\t(closed || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\topen: result[agent._id] ? result[agent._id].open : 0,\n\t\t\tclosed: agent.chats,\n\t\t};\n\t});\n\n\t(onhold || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\t...result[agent._id],\n\t\t\tonhold: agent.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllAgentsStatusAsync = async ({ departmentId = undefined }: { departmentId?: string }) =>\n\t(await Users.countAllAgentsStatus({ departmentId }))[0];\n\nconst findAllChatMetricsByDepartmentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result: Record<string, { open: number; closed: number }> = {};\n\t(open || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = { open: department.chats, closed: 0 };\n\t});\n\t(closed || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = {\n\t\t\topen: result[department.name] ? result[department.name].open : 0,\n\t\t\tclosed: department.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllResponseTimeMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\n\treturn {\n\t\tresponse: {\n\t\t\tavg: responseTimes ? responseTimes.avg : 0,\n\t\t\tlongest: responseTimes ? responseTimes.longest : 0,\n\t\t},\n\t\treaction: {\n\t\t\tavg: reactionTimes ? reactionTimes.avg : 0,\n\t\t\tlongest: reactionTimes ? reactionTimes.longest : 0,\n\t\t},\n\t\tchatDuration: {\n\t\t\tavg: durationTimings ? durationTimings.avg : 0,\n\t\t\tlongest: durationTimings ? durationTimings.longest : 0,\n\t\t},\n\t};\n};\n\nexport const getConversationsMetricsAsyncCached = mem(getConversationsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getAgentsProductivityMetricsAsyncCached = mem(getAgentsProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getChatsMetricsAsyncCached = mem(getChatsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getProductivityMetricsAsyncCached = mem(getProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatsStatusAsyncCached = mem(findAllChatsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByAgentAsyncCached = mem(findAllChatMetricsByAgentAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllAgentsStatusAsyncCached = mem(findAllAgentsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByDepartmentAsyncCached = mem(findAllChatMetricsByDepartmentAsync, {\n\tmaxAge: 5000,\n\tcacheKey: JSON.stringify,\n});\nexport const findAllResponseTimeMetricsAsyncCached = mem(findAllResponseTimeMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      getConversationsMetricsAsyncCached: () => getConversationsMetricsAsyncCached,\n      getAgentsProductivityMetricsAsyncCached: () => getAgentsProductivityMetricsAsyncCached,\n      getChatsMetricsAsyncCached: () => getChatsMetricsAsyncCached,\n      getProductivityMetricsAsyncCached: () => getProductivityMetricsAsyncCached,\n      findAllChatsStatusAsyncCached: () => findAllChatsStatusAsyncCached,\n      findAllChatMetricsByAgentAsyncCached: () => findAllChatMetricsByAgentAsyncCached,\n      findAllAgentsStatusAsyncCached: () => findAllAgentsStatusAsyncCached,\n      findAllChatMetricsByDepartmentAsyncCached: () => findAllChatMetricsByDepartmentAsyncCached,\n      findAllResponseTimeMetricsAsyncCached: () => findAllResponseTimeMetricsAsyncCached\n    });\n    let OmnichannelAnalytics;\n    module.link(\"@rocket.chat/core-services\", {\n      OmnichannelAnalytics(v) {\n        OmnichannelAnalytics = v;\n      }\n    }, 0);\n    let LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatAgentActivity(v) {\n        LivechatAgentActivity = v;\n      }\n    }, 1);\n    let mem;\n    module.link(\"memoize\", {\n      default(v) {\n        mem = v;\n      }\n    }, 2);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 3);\n    let secondsToHHMMSS;\n    module.link(\"../../../../../lib/utils/secondsToHHMMSS\", {\n      secondsToHHMMSS(v) {\n        secondsToHHMMSS = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let getAnalyticsOverviewDataCachedForRealtime;\n    module.link(\"../AnalyticsTyped\", {\n      getAnalyticsOverviewDataCachedForRealtime(v) {\n        getAnalyticsOverviewDataCachedForRealtime = v;\n      }\n    }, 6);\n    let findPercentageOfAbandonedRoomsAsync, findAllAverageOfChatDurationTimeAsync, findAllAverageWaitingTimeAsync, findAllNumberOfAbandonedRoomsAsync, findAllAverageServiceTimeAsync;\n    module.link(\"./departments\", {\n      findPercentageOfAbandonedRoomsAsync(v) {\n        findPercentageOfAbandonedRoomsAsync = v;\n      },\n      findAllAverageOfChatDurationTimeAsync(v) {\n        findAllAverageOfChatDurationTimeAsync = v;\n      },\n      findAllAverageWaitingTimeAsync(v) {\n        findAllAverageWaitingTimeAsync = v;\n      },\n      findAllNumberOfAbandonedRoomsAsync(v) {\n        findAllNumberOfAbandonedRoomsAsync = v;\n      },\n      findAllAverageServiceTimeAsync(v) {\n        findAllAverageServiceTimeAsync = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const findAllChatsStatusAsync = async _ref => {\n      let {\n        start,\n        end,\n        departmentId = undefined\n      } = _ref;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      return {\n        open: await LivechatRooms.countAllOpenChatsBetweenDate({\n          start,\n          end,\n          departmentId\n        }),\n        closed: await LivechatRooms.countAllClosedChatsBetweenDate({\n          start,\n          end,\n          departmentId\n        }),\n        queued: await LivechatRooms.countAllQueuedChatsBetweenDate({\n          start,\n          end,\n          departmentId\n        }),\n        onhold: await LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId)\n      };\n    };\n    const getProductivityMetricsAsync = async _ref2 => {\n      let {\n        start,\n        end,\n        departmentId = undefined,\n        user\n      } = _ref2;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const totalizers = (await OmnichannelAnalytics.getAnalyticsOverviewData({\n        daterange: {\n          from: start,\n          to: end\n        },\n        analyticsOptions: {\n          name: 'Productivity'\n        },\n        departmentId,\n        utcOffset: user === null || user === void 0 ? void 0 : user.utcOffset,\n        language: (user === null || user === void 0 ? void 0 : user.language) || settings.get('Language') || 'en'\n      })) || [];\n      const averageWaitingTime = await findAllAverageWaitingTimeAsync({\n        start: new Date(start),\n        end: new Date(end),\n        departmentId\n      });\n      const totalOfWaitingTime = averageWaitingTime.departments.length;\n      const sumOfWaitingTime = averageWaitingTime.departments.reduce((acc, serviceTime) => {\n        acc += serviceTime.averageWaitingTimeInSeconds;\n        return acc;\n      }, 0);\n      const totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n      return {\n        totalizers: [...totalizers, {\n          title: 'Avg_of_waiting_time',\n          value: secondsToHHMMSS(totalOfAvarageWaitingTime)\n        }]\n      };\n    };\n    const getAgentsProductivityMetricsAsync = async _ref3 => {\n      let {\n        start,\n        end,\n        departmentId = undefined,\n        user\n      } = _ref3;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      // TODO: check type of date\n      const averageOfAvailableServiceTime = (await LivechatAgentActivity.findAllAverageAvailableServiceTime({\n        date: parseInt(moment(start).format('YYYYMMDD')),\n        departmentId\n      }))[0];\n      const averageOfServiceTime = await findAllAverageServiceTimeAsync({\n        start: new Date(start),\n        end: new Date(end),\n        departmentId\n      });\n      const totalizers = (await OmnichannelAnalytics.getAnalyticsOverviewData({\n        daterange: {\n          from: start,\n          to: end\n        },\n        analyticsOptions: {\n          name: 'Conversations'\n        },\n        departmentId,\n        utcOffset: user.utcOffset,\n        language: user.language || settings.get('Language') || 'en'\n      })) || [];\n      const totalOfServiceTime = averageOfServiceTime.departments.length;\n      const sumOfServiceTime = averageOfServiceTime.departments.reduce((acc, serviceTime) => {\n        acc += serviceTime.averageServiceTimeInSeconds;\n        return acc;\n      }, 0);\n      const totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime ? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds : 0;\n      const totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n      return {\n        totalizers: [...totalizers.filter(metric => metric.title === 'Busiest_time'), {\n          title: 'Avg_of_available_service_time',\n          value: secondsToHHMMSS(totalOfAverageAvailableServiceTime)\n        }, {\n          title: 'Avg_of_service_time',\n          value: secondsToHHMMSS(totalOfAverageServiceTime)\n        }]\n      };\n    };\n    const getChatsMetricsAsync = async _ref4 => {\n      let {\n        start,\n        end,\n        departmentId = undefined\n      } = _ref4;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const abandonedRooms = await findAllNumberOfAbandonedRoomsAsync({\n        start,\n        end,\n        departmentId\n      });\n      const averageOfAbandonedRooms = await findPercentageOfAbandonedRoomsAsync({\n        start,\n        end,\n        departmentId\n      });\n      const averageOfChatDurationTime = await findAllAverageOfChatDurationTimeAsync({\n        start,\n        end,\n        departmentId\n      });\n      const totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n      const totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n      const sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce((acc, abandonedRoom) => {\n        acc += abandonedRoom.percentageOfAbandonedChats;\n        return acc;\n      }, 0);\n      const sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce((acc, chatDurationTime) => {\n        acc += chatDurationTime.averageChatDurationTimeInSeconds;\n        return acc;\n      }, 0);\n      const totalAbandonedRooms = abandonedRooms.departments.reduce((acc, item) => {\n        acc += item.abandonedRooms;\n        return acc;\n      }, 0);\n      const totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n      const totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n      return {\n        totalizers: [{\n          title: 'Total_abandoned_chats',\n          value: totalAbandonedRooms\n        }, {\n          title: 'Avg_of_abandoned_chats',\n          value: \"\".concat(totalOfAverageAbandonedRooms, \"%\")\n        }, {\n          title: 'Avg_of_chat_duration_time',\n          value: secondsToHHMMSS(totalOfAverageChatDurationTime)\n        }]\n      };\n    };\n    const getConversationsMetricsAsync = async _ref5 => {\n      let {\n        start,\n        end,\n        departmentId,\n        user\n      } = _ref5;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const totalizers = (await getAnalyticsOverviewDataCachedForRealtime(_objectSpread(_objectSpread({\n        daterange: {\n          from: start,\n          to: end\n        },\n        analyticsOptions: {\n          name: 'Conversations'\n        }\n      }, departmentId && departmentId !== 'undefined' && {\n        departmentId\n      }), {}, {\n        utcOffset: user.utcOffset,\n        language: user.language || settings.get('Language') || 'en'\n      }))) || [];\n      const metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n      const visitorsCount = await LivechatVisitors.countVisitorsBetweenDate({\n        start: new Date(start),\n        end: new Date(end),\n        department: departmentId\n      });\n      return {\n        totalizers: [...totalizers.filter(metric => metrics.includes(metric.title)), {\n          title: 'Total_visitors',\n          value: visitorsCount\n        }]\n      };\n    };\n    const findAllChatMetricsByAgentAsync = async _ref6 => {\n      let {\n        start,\n        end,\n        departmentId = undefined\n      } = _ref6;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n        start,\n        end,\n        departmentId\n      });\n      const closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n        start,\n        end,\n        departmentId\n      });\n      const onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n        start,\n        end,\n        departmentId\n      });\n      const result = {};\n      (open || []).forEach(agent => {\n        result[agent._id] = {\n          open: agent.chats,\n          closed: 0,\n          onhold: 0\n        };\n      });\n      (closed || []).forEach(agent => {\n        result[agent._id] = {\n          open: result[agent._id] ? result[agent._id].open : 0,\n          closed: agent.chats\n        };\n      });\n      (onhold || []).forEach(agent => {\n        result[agent._id] = _objectSpread(_objectSpread({}, result[agent._id]), {}, {\n          onhold: agent.chats\n        });\n      });\n      return result;\n    };\n    const findAllAgentsStatusAsync = async _ref7 => {\n      let {\n        departmentId = undefined\n      } = _ref7;\n      return (await Users.countAllAgentsStatus({\n        departmentId\n      }))[0];\n    };\n    const findAllChatMetricsByDepartmentAsync = async _ref8 => {\n      let {\n        start,\n        end,\n        departmentId = undefined\n      } = _ref8;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n        start,\n        end,\n        departmentId\n      });\n      const closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n        start,\n        end,\n        departmentId\n      });\n      const result = {};\n      (open || []).forEach(department => {\n        result[department.name] = {\n          open: department.chats,\n          closed: 0\n        };\n      });\n      (closed || []).forEach(department => {\n        result[department.name] = {\n          open: result[department.name] ? result[department.name].open : 0,\n          closed: department.chats\n        };\n      });\n      return result;\n    };\n    const findAllResponseTimeMetricsAsync = async _ref9 => {\n      let {\n        start,\n        end,\n        departmentId = undefined\n      } = _ref9;\n      if (!start || !end) {\n        throw new Error('\"start\" and \"end\" must be provided');\n      }\n      const responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({\n        start,\n        end,\n        departmentId\n      }))[0];\n      const reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({\n        start,\n        end,\n        departmentId\n      }))[0];\n      const durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({\n        start,\n        end,\n        departmentId\n      }))[0];\n      return {\n        response: {\n          avg: responseTimes ? responseTimes.avg : 0,\n          longest: responseTimes ? responseTimes.longest : 0\n        },\n        reaction: {\n          avg: reactionTimes ? reactionTimes.avg : 0,\n          longest: reactionTimes ? reactionTimes.longest : 0\n        },\n        chatDuration: {\n          avg: durationTimings ? durationTimings.avg : 0,\n          longest: durationTimings ? durationTimings.longest : 0\n        }\n      };\n    };\n    const getConversationsMetricsAsyncCached = mem(getConversationsMetricsAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const getAgentsProductivityMetricsAsyncCached = mem(getAgentsProductivityMetricsAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const getChatsMetricsAsyncCached = mem(getChatsMetricsAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const getProductivityMetricsAsyncCached = mem(getProductivityMetricsAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const findAllChatsStatusAsyncCached = mem(findAllChatsStatusAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const findAllChatMetricsByAgentAsyncCached = mem(findAllChatMetricsByAgentAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const findAllAgentsStatusAsyncCached = mem(findAllAgentsStatusAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const findAllChatMetricsByDepartmentAsyncCached = mem(findAllChatMetricsByDepartmentAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    const findAllResponseTimeMetricsAsyncCached = mem(findAllResponseTimeMetricsAsync, {\n      maxAge: 5000,\n      cacheKey: JSON.stringify\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","getConversationsMetricsAsyncCached","getAgentsProductivityMetricsAsyncCached","getChatsMetricsAsyncCached","getProductivityMetricsAsyncCached","findAllChatsStatusAsyncCached","findAllChatMetricsByAgentAsyncCached","findAllAgentsStatusAsyncCached","findAllChatMetricsByDepartmentAsyncCached","findAllResponseTimeMetricsAsyncCached","OmnichannelAnalytics","LivechatRooms","Users","LivechatVisitors","LivechatAgentActivity","mem","moment","secondsToHHMMSS","settings","getAnalyticsOverviewDataCachedForRealtime","findPercentageOfAbandonedRoomsAsync","findAllAverageOfChatDurationTimeAsync","findAllAverageWaitingTimeAsync","findAllNumberOfAbandonedRoomsAsync","findAllAverageServiceTimeAsync","__reifyWaitForDeps__","findAllChatsStatusAsync","_ref","start","end","departmentId","undefined","Error","open","countAllOpenChatsBetweenDate","closed","countAllClosedChatsBetweenDate","queued","countAllQueuedChatsBetweenDate","onhold","getOnHoldConversationsBetweenDate","getProductivityMetricsAsync","_ref2","user","totalizers","getAnalyticsOverviewData","daterange","from","to","analyticsOptions","name","utcOffset","language","get","averageWaitingTime","Date","totalOfWaitingTime","departments","length","sumOfWaitingTime","reduce","acc","serviceTime","averageWaitingTimeInSeconds","totalOfAvarageWaitingTime","title","value","getAgentsProductivityMetricsAsync","_ref3","averageOfAvailableServiceTime","findAllAverageAvailableServiceTime","date","parseInt","format","averageOfServiceTime","totalOfServiceTime","sumOfServiceTime","averageServiceTimeInSeconds","totalOfAverageAvailableServiceTime","averageAvailableServiceTimeInSeconds","totalOfAverageServiceTime","filter","metric","getChatsMetricsAsync","_ref4","abandonedRooms","averageOfAbandonedRooms","averageOfChatDurationTime","totalOfAbandonedRooms","totalOfChatDurationTime","sumOfPercentageOfAbandonedRooms","abandonedRoom","percentageOfAbandonedChats","sumOfChatDurationTime","chatDurationTime","averageChatDurationTimeInSeconds","totalAbandonedRooms","item","totalOfAverageAbandonedRooms","totalOfAverageChatDurationTime","concat","getConversationsMetricsAsync","_ref5","metrics","visitorsCount","countVisitorsBetweenDate","department","includes","findAllChatMetricsByAgentAsync","_ref6","countAllOpenChatsByAgentBetweenDate","countAllClosedChatsByAgentBetweenDate","countAllOnHoldChatsByAgentBetweenDate","result","forEach","agent","_id","chats","findAllAgentsStatusAsync","_ref7","countAllAgentsStatus","findAllChatMetricsByDepartmentAsync","_ref8","countAllOpenChatsByDepartmentBetweenDate","countAllClosedChatsByDepartmentBetweenDate","findAllResponseTimeMetricsAsync","_ref9","responseTimes","calculateResponseTimingsBetweenDates","reactionTimes","calculateReactionTimingsBetweenDates","durationTimings","calculateDurationTimingsBetweenDates","response","avg","longest","reaction","chatDuration","maxAge","cacheKey","JSON","stringify","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/lib/analytics/dashboards.ts"],"sourcesContent":["import { OmnichannelAnalytics } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Users, LivechatVisitors, LivechatAgentActivity } from '@rocket.chat/models';\nimport mem from 'memoize';\nimport moment from 'moment';\n\nimport { secondsToHHMMSS } from '../../../../../lib/utils/secondsToHHMMSS';\nimport { settings } from '../../../../settings/server';\nimport { getAnalyticsOverviewDataCachedForRealtime } from '../AnalyticsTyped';\nimport {\n\tfindPercentageOfAbandonedRoomsAsync,\n\tfindAllAverageOfChatDurationTimeAsync,\n\tfindAllAverageWaitingTimeAsync,\n\tfindAllNumberOfAbandonedRoomsAsync,\n\tfindAllAverageServiceTimeAsync,\n} from './departments';\n\nconst findAllChatsStatusAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\treturn {\n\t\topen: await LivechatRooms.countAllOpenChatsBetweenDate({ start, end, departmentId }),\n\t\tclosed: await LivechatRooms.countAllClosedChatsBetweenDate({ start, end, departmentId }),\n\t\tqueued: await LivechatRooms.countAllQueuedChatsBetweenDate({ start, end, departmentId }),\n\t\tonhold: await LivechatRooms.getOnHoldConversationsBetweenDate(start, end, departmentId),\n\t};\n};\n\nconst getProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Productivity',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user?.utcOffset,\n\t\t\tlanguage: user?.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst averageWaitingTime = await findAllAverageWaitingTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfWaitingTime = averageWaitingTime.departments.length;\n\n\tconst sumOfWaitingTime = averageWaitingTime.departments.reduce((acc: number, serviceTime: { averageWaitingTimeInSeconds: number }) => {\n\t\tacc += serviceTime.averageWaitingTimeInSeconds;\n\t\treturn acc;\n\t}, 0);\n\tconst totalOfAvarageWaitingTime = totalOfWaitingTime === 0 ? 0 : sumOfWaitingTime / totalOfWaitingTime;\n\n\treturn {\n\t\ttotalizers: [...totalizers, { title: 'Avg_of_waiting_time', value: secondsToHHMMSS(totalOfAvarageWaitingTime) }],\n\t};\n};\n\nconst getAgentsProductivityMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\t// TODO: check type of date\n\tconst averageOfAvailableServiceTime = (\n\t\tawait LivechatAgentActivity.findAllAverageAvailableServiceTime({\n\t\t\tdate: parseInt(moment(start).format('YYYYMMDD')) as any,\n\t\t\tdepartmentId,\n\t\t})\n\t)[0];\n\tconst averageOfServiceTime = await findAllAverageServiceTimeAsync({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartmentId,\n\t});\n\tconst totalizers =\n\t\t(await OmnichannelAnalytics.getAnalyticsOverviewData({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\tdepartmentId,\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\n\tconst totalOfServiceTime = averageOfServiceTime.departments.length;\n\n\tconst sumOfServiceTime = averageOfServiceTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tserviceTime: {\n\t\t\t\taverageServiceTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += serviceTime.averageServiceTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalOfAverageAvailableServiceTime = averageOfAvailableServiceTime\n\t\t? averageOfAvailableServiceTime.averageAvailableServiceTimeInSeconds\n\t\t: 0;\n\tconst totalOfAverageServiceTime = totalOfServiceTime === 0 ? 0 : sumOfServiceTime / totalOfServiceTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metric.title === 'Busiest_time'),\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_available_service_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageAvailableServiceTime),\n\t\t\t},\n\t\t\t{ title: 'Avg_of_service_time', value: secondsToHHMMSS(totalOfAverageServiceTime) },\n\t\t],\n\t};\n};\n\nconst getChatsMetricsAsync = async ({ start, end, departmentId = undefined }: { start: Date; end: Date; departmentId?: string }) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst abandonedRooms = await findAllNumberOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfAbandonedRooms = await findPercentageOfAbandonedRoomsAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst averageOfChatDurationTime = await findAllAverageOfChatDurationTimeAsync({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst totalOfAbandonedRooms = averageOfAbandonedRooms.departments.length;\n\tconst totalOfChatDurationTime = averageOfChatDurationTime.departments.length;\n\n\tconst sumOfPercentageOfAbandonedRooms = averageOfAbandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tabandonedRoom: {\n\t\t\t\tpercentageOfAbandonedChats: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += abandonedRoom.percentageOfAbandonedChats;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst sumOfChatDurationTime = averageOfChatDurationTime.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\tchatDurationTime: {\n\t\t\t\taverageChatDurationTimeInSeconds: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += chatDurationTime.averageChatDurationTimeInSeconds;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\tconst totalAbandonedRooms = abandonedRooms.departments.reduce(\n\t\t(\n\t\t\tacc: number,\n\t\t\titem: {\n\t\t\t\tabandonedRooms: number;\n\t\t\t},\n\t\t) => {\n\t\t\tacc += item.abandonedRooms;\n\t\t\treturn acc;\n\t\t},\n\t\t0,\n\t);\n\n\tconst totalOfAverageAbandonedRooms = totalOfAbandonedRooms === 0 ? 0 : sumOfPercentageOfAbandonedRooms / totalOfAbandonedRooms;\n\tconst totalOfAverageChatDurationTime = totalOfChatDurationTime === 0 ? 0 : sumOfChatDurationTime / totalOfChatDurationTime;\n\n\treturn {\n\t\ttotalizers: [\n\t\t\t{ title: 'Total_abandoned_chats', value: totalAbandonedRooms },\n\t\t\t{ title: 'Avg_of_abandoned_chats', value: `${totalOfAverageAbandonedRooms}%` },\n\t\t\t{\n\t\t\t\ttitle: 'Avg_of_chat_duration_time',\n\t\t\t\tvalue: secondsToHHMMSS(totalOfAverageChatDurationTime),\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getConversationsMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId,\n\tuser,\n}: {\n\tstart: string;\n\tend: string;\n\tdepartmentId?: string;\n\tuser: IUser;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst totalizers =\n\t\t(await getAnalyticsOverviewDataCachedForRealtime({\n\t\t\tdaterange: {\n\t\t\t\tfrom: start,\n\t\t\t\tto: end,\n\t\t\t},\n\t\t\tanalyticsOptions: {\n\t\t\t\tname: 'Conversations',\n\t\t\t},\n\t\t\t...(departmentId && departmentId !== 'undefined' && { departmentId }),\n\t\t\tutcOffset: user.utcOffset,\n\t\t\tlanguage: user.language || settings.get('Language') || 'en',\n\t\t})) || [];\n\tconst metrics = ['Total_conversations', 'Open_conversations', 'On_Hold_conversations', 'Total_messages'];\n\tconst visitorsCount = await LivechatVisitors.countVisitorsBetweenDate({\n\t\tstart: new Date(start),\n\t\tend: new Date(end),\n\t\tdepartment: departmentId,\n\t});\n\treturn {\n\t\ttotalizers: [\n\t\t\t...totalizers.filter((metric: { title: string }) => metrics.includes(metric.title)),\n\t\t\t{ title: 'Total_visitors', value: visitorsCount },\n\t\t],\n\t};\n};\n\nconst findAllChatMetricsByAgentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst onhold = await LivechatRooms.countAllOnHoldChatsByAgentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\n\tconst result: Record<string, { open: number; closed: number; onhold?: number }> = {};\n\t(open || []).forEach((agent: { chats: number; _id: string }) => {\n\t\tresult[agent._id] = { open: agent.chats, closed: 0, onhold: 0 };\n\t});\n\t(closed || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\topen: result[agent._id] ? result[agent._id].open : 0,\n\t\t\tclosed: agent.chats,\n\t\t};\n\t});\n\n\t(onhold || []).forEach((agent: { _id: string; chats: number }) => {\n\t\tresult[agent._id] = {\n\t\t\t...result[agent._id],\n\t\t\tonhold: agent.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllAgentsStatusAsync = async ({ departmentId = undefined }: { departmentId?: string }) =>\n\t(await Users.countAllAgentsStatus({ departmentId }))[0];\n\nconst findAllChatMetricsByDepartmentAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst open = await LivechatRooms.countAllOpenChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst closed = await LivechatRooms.countAllClosedChatsByDepartmentBetweenDate({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t});\n\tconst result: Record<string, { open: number; closed: number }> = {};\n\t(open || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = { open: department.chats, closed: 0 };\n\t});\n\t(closed || []).forEach((department: { name: string; chats: number }) => {\n\t\tresult[department.name] = {\n\t\t\topen: result[department.name] ? result[department.name].open : 0,\n\t\t\tclosed: department.chats,\n\t\t};\n\t});\n\treturn result;\n};\n\nconst findAllResponseTimeMetricsAsync = async ({\n\tstart,\n\tend,\n\tdepartmentId = undefined,\n}: {\n\tstart: Date;\n\tend: Date;\n\tdepartmentId?: string;\n}) => {\n\tif (!start || !end) {\n\t\tthrow new Error('\"start\" and \"end\" must be provided');\n\t}\n\tconst responseTimes = (await LivechatRooms.calculateResponseTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst reactionTimes = (await LivechatRooms.calculateReactionTimingsBetweenDates({ start, end, departmentId }))[0];\n\tconst durationTimings = (await LivechatRooms.calculateDurationTimingsBetweenDates({ start, end, departmentId }))[0];\n\n\treturn {\n\t\tresponse: {\n\t\t\tavg: responseTimes ? responseTimes.avg : 0,\n\t\t\tlongest: responseTimes ? responseTimes.longest : 0,\n\t\t},\n\t\treaction: {\n\t\t\tavg: reactionTimes ? reactionTimes.avg : 0,\n\t\t\tlongest: reactionTimes ? reactionTimes.longest : 0,\n\t\t},\n\t\tchatDuration: {\n\t\t\tavg: durationTimings ? durationTimings.avg : 0,\n\t\t\tlongest: durationTimings ? durationTimings.longest : 0,\n\t\t},\n\t};\n};\n\nexport const getConversationsMetricsAsyncCached = mem(getConversationsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getAgentsProductivityMetricsAsyncCached = mem(getAgentsProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getChatsMetricsAsyncCached = mem(getChatsMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const getProductivityMetricsAsyncCached = mem(getProductivityMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatsStatusAsyncCached = mem(findAllChatsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByAgentAsyncCached = mem(findAllChatMetricsByAgentAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllAgentsStatusAsyncCached = mem(findAllAgentsStatusAsync, { maxAge: 5000, cacheKey: JSON.stringify });\nexport const findAllChatMetricsByDepartmentAsyncCached = mem(findAllChatMetricsByDepartmentAsync, {\n\tmaxAge: 5000,\n\tcacheKey: JSON.stringify,\n});\nexport const findAllResponseTimeMetricsAsyncCached = mem(findAllResponseTimeMetricsAsync, { maxAge: 5000, cacheKey: JSON.stringify });\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"01df6b5eee9b6e1ee1cb5003e9f9ad11c9699fc6"}
