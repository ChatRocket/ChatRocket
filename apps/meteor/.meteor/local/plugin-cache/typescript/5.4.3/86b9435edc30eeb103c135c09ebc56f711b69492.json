{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/minimongo/query.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/minimongo/query.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/minimongo/query.ts","inputSourceMap":{"version":3,"file":"client/lib/minimongo/query.ts","sourceRoot":"","sources":["client/lib/minimongo/query.ts"],"names":[],"mappings":"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","sourcesContent":["import { compareBSONValues, getBSONType } from './bson';\nimport { equals, flatSome, isObject, some } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport type { BSONType, FieldExpression, Query } from './types';\n\nconst isArrayOfFields = <T>(values: unknown[]): values is T[] =>\n\tvalues.every((value) => ['number', 'string', 'symbol'].includes(typeof value));\n\nconst $in = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tlet index: Record<T, T> | null = null;\n\tif (isArrayOfFields<T>(operand)) {\n\t\tindex = {} as Record<T, T>;\n\t\tfor (const operandElement of operand) {\n\t\t\tindex[operandElement] = operandElement;\n\t\t}\n\t}\n\n\treturn (value: T): boolean =>\n\t\tsome(value, (x) => {\n\t\t\tif (typeof x === 'string' && index !== null) {\n\t\t\t\treturn !!index[x];\n\t\t\t}\n\n\t\t\treturn operand.some((operandElement) => equals(operandElement, x));\n\t\t});\n};\n\nconst $nin = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tconst isIn = $in(operand, undefined);\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !isIn(value);\n\t};\n};\n\nconst $all =\n\t<T>(operand: T[], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn operand.every((operandElement) => value.some((valueElement) => equals(operandElement, valueElement)));\n\t};\n\nconst $lt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) < 0);\n\nconst $lte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) <= 0);\n\nconst $gt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) > 0);\n\nconst $gte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) >= 0);\n\nconst $ne =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\t!some(value, (x) => equals(x, operand));\n\nconst $exists =\n\t<T>(operand: boolean, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\toperand === (value !== undefined);\n\nconst $mod =\n\t<T>([divisor, remainder]: [number, number], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => Number(x) % divisor === remainder);\n\nconst $size =\n\t<T>(operand: number, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tArray.isArray(value) && operand === value.length;\n\nconst $type =\n\t<T>(operand: BSONType, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => getBSONType(x) === operand);\n\t};\n\nconst $regex = <T>(operand: string | RegExp, options: string): ((value: T) => boolean) => {\n\tlet regex: RegExp;\n\n\tif (options !== undefined) {\n\t\tconst regexSource = operand instanceof RegExp ? operand.source : operand;\n\t\tregex = new RegExp(regexSource, options);\n\t} else if (!(operand instanceof RegExp)) {\n\t\tregex = new RegExp(operand);\n\t}\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n};\n\nconst $elemMatch = <T>(operand: Query<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileDocumentSelector(operand);\n\n\treturn (value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.some((x) => matcher(x));\n\t};\n};\n\nconst $not = <T>(operand: FieldExpression<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileValueSelector(operand);\n\treturn (value: T): boolean => !matcher(value);\n};\n\nconst dummyOperator =\n\t<T>(_operand: unknown, _options: undefined): ((value: T) => boolean) =>\n\t(_value: T): boolean =>\n\t\ttrue;\n\nconst $options = dummyOperator;\nconst $near = dummyOperator;\nconst $geoIntersects = dummyOperator;\n\nconst valueOperators = {\n\t$in,\n\t$nin,\n\t$all,\n\t$lt,\n\t$lte,\n\t$gt,\n\t$gte,\n\t$ne,\n\t$exists,\n\t$mod,\n\t$size,\n\t$type,\n\t$regex,\n\t$elemMatch,\n\t$not,\n\t$options,\n\t$near,\n\t$geoIntersects,\n} as const;\n\nconst $and = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => f(doc));\n};\n\nconst $or = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.some((f) => f(doc));\n};\n\nconst $nor = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => !f(doc));\n};\n\nconst $where = <T>(selectorValue: string | ((doc: T) => boolean)): ((doc: T) => boolean) => {\n\tconst fn = selectorValue instanceof Function ? selectorValue : Function(`return ${selectorValue}`);\n\treturn (doc: T): boolean => !!fn.call(doc);\n};\n\nconst logicalOperators = {\n\t$and,\n\t$or,\n\t$nor,\n\t$where,\n} as const;\n\nconst isValueOperator = (operator: string): operator is keyof typeof valueOperators => operator in valueOperators;\n\nconst isLogicalOperator = (operator: string): operator is keyof typeof logicalOperators => operator in logicalOperators;\n\nconst hasValueOperators = <T>(valueSelector: FieldExpression<T>): boolean =>\n\tObject.keys(valueSelector).every((key) => key.slice(0, 1) === '$');\n\nconst compileUndefinedOrNullSelector =\n\t<T>(): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === undefined || x === null);\n\nconst compilePrimitiveSelector =\n\t<T>(primitive: T) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === primitive);\n\nconst compileRegexSelector =\n\t<T>(regex: RegExp) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n\nconst compileArraySelector =\n\t<T>(expected: T) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn some(value, (x) => equals(expected, x));\n\t};\n\nconst compileValueOperatorsSelector = <T>(expression: FieldExpression<T>): ((value: T) => boolean) => {\n\tconst operatorFunctions: ((value: T) => boolean)[] = [];\n\tfor (const operator of Object.keys(expression) as (keyof FieldExpression<T>)[]) {\n\t\tif (!isValueOperator(operator)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst operand = expression[operator];\n\t\tconst operation = valueOperators[operator] as unknown as (operand: unknown, options: unknown) => (value: T) => boolean;\n\t\toperatorFunctions.push(operation(operand, expression.$options));\n\t}\n\treturn (value: T): boolean => operatorFunctions.every((f) => f(value));\n};\n\nconst compileValueSelector = <T>(valueSelector: FieldExpression<T>[keyof FieldExpression<T>]): ((value: T) => boolean) => {\n\tif (valueSelector === undefined || valueSelector === null) {\n\t\treturn compileUndefinedOrNullSelector();\n\t}\n\n\tif (!isObject(valueSelector)) {\n\t\treturn compilePrimitiveSelector(valueSelector as T);\n\t}\n\n\tif (valueSelector instanceof RegExp) {\n\t\treturn compileRegexSelector(valueSelector);\n\t}\n\n\tif (Array.isArray(valueSelector)) {\n\t\treturn compileArraySelector(valueSelector as unknown as T);\n\t}\n\n\tif (hasValueOperators<T>(valueSelector)) {\n\t\treturn compileValueOperatorsSelector(valueSelector);\n\t}\n\n\treturn (value: T): boolean => flatSome(value, (x) => equals(valueSelector, x as unknown as object));\n};\n\nexport const compileDocumentSelector = <T>(docSelector: Query<T> | FieldExpression<T>['$where'][]): ((doc: T) => boolean) => {\n\tconst perKeySelectors = Object.entries(docSelector).map(([key, subSelector]) => {\n\t\tif (subSelector === undefined) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tif (isLogicalOperator(key)) {\n\t\t\tswitch (key) {\n\t\t\t\tcase '$and':\n\t\t\t\t\treturn $and(subSelector);\n\n\t\t\t\tcase '$or':\n\t\t\t\t\treturn $or(subSelector);\n\n\t\t\t\tcase '$nor':\n\t\t\t\t\treturn $nor(subSelector);\n\n\t\t\t\tcase '$where':\n\t\t\t\t\treturn $where(subSelector);\n\t\t\t}\n\t\t}\n\n\t\tconst lookUpByIndex = createLookupFunction(key);\n\t\tconst valueSelectorFunc = compileValueSelector(subSelector);\n\t\treturn (doc: T): boolean => {\n\t\t\tconst branchValues = lookUpByIndex(doc);\n\t\t\treturn branchValues.some(valueSelectorFunc);\n\t\t};\n\t});\n\n\treturn (doc: T): boolean => perKeySelectors.every((f) => f(doc));\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/minimongo/query.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/minimongo/query.ts","inputSourceMap":{"version":3,"file":"client/lib/minimongo/query.ts","sourceRoot":"","sources":["client/lib/minimongo/query.ts"],"names":[],"mappings":"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","sourcesContent":["import { compareBSONValues, getBSONType } from './bson';\nimport { equals, flatSome, isObject, some } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport type { BSONType, FieldExpression, Query } from './types';\n\nconst isArrayOfFields = <T>(values: unknown[]): values is T[] =>\n\tvalues.every((value) => ['number', 'string', 'symbol'].includes(typeof value));\n\nconst $in = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tlet index: Record<T, T> | null = null;\n\tif (isArrayOfFields<T>(operand)) {\n\t\tindex = {} as Record<T, T>;\n\t\tfor (const operandElement of operand) {\n\t\t\tindex[operandElement] = operandElement;\n\t\t}\n\t}\n\n\treturn (value: T): boolean =>\n\t\tsome(value, (x) => {\n\t\t\tif (typeof x === 'string' && index !== null) {\n\t\t\t\treturn !!index[x];\n\t\t\t}\n\n\t\t\treturn operand.some((operandElement) => equals(operandElement, x));\n\t\t});\n};\n\nconst $nin = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tconst isIn = $in(operand, undefined);\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !isIn(value);\n\t};\n};\n\nconst $all =\n\t<T>(operand: T[], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn operand.every((operandElement) => value.some((valueElement) => equals(operandElement, valueElement)));\n\t};\n\nconst $lt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) < 0);\n\nconst $lte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) <= 0);\n\nconst $gt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) > 0);\n\nconst $gte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) >= 0);\n\nconst $ne =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\t!some(value, (x) => equals(x, operand));\n\nconst $exists =\n\t<T>(operand: boolean, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\toperand === (value !== undefined);\n\nconst $mod =\n\t<T>([divisor, remainder]: [number, number], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => Number(x) % divisor === remainder);\n\nconst $size =\n\t<T>(operand: number, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tArray.isArray(value) && operand === value.length;\n\nconst $type =\n\t<T>(operand: BSONType, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => getBSONType(x) === operand);\n\t};\n\nconst $regex = <T>(operand: string | RegExp, options: string): ((value: T) => boolean) => {\n\tlet regex: RegExp;\n\n\tif (options !== undefined) {\n\t\tconst regexSource = operand instanceof RegExp ? operand.source : operand;\n\t\tregex = new RegExp(regexSource, options);\n\t} else if (!(operand instanceof RegExp)) {\n\t\tregex = new RegExp(operand);\n\t}\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n};\n\nconst $elemMatch = <T>(operand: Query<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileDocumentSelector(operand);\n\n\treturn (value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.some((x) => matcher(x));\n\t};\n};\n\nconst $not = <T>(operand: FieldExpression<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileValueSelector(operand);\n\treturn (value: T): boolean => !matcher(value);\n};\n\nconst dummyOperator =\n\t<T>(_operand: unknown, _options: undefined): ((value: T) => boolean) =>\n\t(_value: T): boolean =>\n\t\ttrue;\n\nconst $options = dummyOperator;\nconst $near = dummyOperator;\nconst $geoIntersects = dummyOperator;\n\nconst valueOperators = {\n\t$in,\n\t$nin,\n\t$all,\n\t$lt,\n\t$lte,\n\t$gt,\n\t$gte,\n\t$ne,\n\t$exists,\n\t$mod,\n\t$size,\n\t$type,\n\t$regex,\n\t$elemMatch,\n\t$not,\n\t$options,\n\t$near,\n\t$geoIntersects,\n} as const;\n\nconst $and = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => f(doc));\n};\n\nconst $or = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.some((f) => f(doc));\n};\n\nconst $nor = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => !f(doc));\n};\n\nconst $where = <T>(selectorValue: string | ((doc: T) => boolean)): ((doc: T) => boolean) => {\n\tconst fn = selectorValue instanceof Function ? selectorValue : Function(`return ${selectorValue}`);\n\treturn (doc: T): boolean => !!fn.call(doc);\n};\n\nconst logicalOperators = {\n\t$and,\n\t$or,\n\t$nor,\n\t$where,\n} as const;\n\nconst isValueOperator = (operator: string): operator is keyof typeof valueOperators => operator in valueOperators;\n\nconst isLogicalOperator = (operator: string): operator is keyof typeof logicalOperators => operator in logicalOperators;\n\nconst hasValueOperators = <T>(valueSelector: FieldExpression<T>): boolean =>\n\tObject.keys(valueSelector).every((key) => key.slice(0, 1) === '$');\n\nconst compileUndefinedOrNullSelector =\n\t<T>(): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === undefined || x === null);\n\nconst compilePrimitiveSelector =\n\t<T>(primitive: T) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === primitive);\n\nconst compileRegexSelector =\n\t<T>(regex: RegExp) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n\nconst compileArraySelector =\n\t<T>(expected: T) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn some(value, (x) => equals(expected, x));\n\t};\n\nconst compileValueOperatorsSelector = <T>(expression: FieldExpression<T>): ((value: T) => boolean) => {\n\tconst operatorFunctions: ((value: T) => boolean)[] = [];\n\tfor (const operator of Object.keys(expression) as (keyof FieldExpression<T>)[]) {\n\t\tif (!isValueOperator(operator)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst operand = expression[operator];\n\t\tconst operation = valueOperators[operator] as unknown as (operand: unknown, options: unknown) => (value: T) => boolean;\n\t\toperatorFunctions.push(operation(operand, expression.$options));\n\t}\n\treturn (value: T): boolean => operatorFunctions.every((f) => f(value));\n};\n\nconst compileValueSelector = <T>(valueSelector: FieldExpression<T>[keyof FieldExpression<T>]): ((value: T) => boolean) => {\n\tif (valueSelector === undefined || valueSelector === null) {\n\t\treturn compileUndefinedOrNullSelector();\n\t}\n\n\tif (!isObject(valueSelector)) {\n\t\treturn compilePrimitiveSelector(valueSelector as T);\n\t}\n\n\tif (valueSelector instanceof RegExp) {\n\t\treturn compileRegexSelector(valueSelector);\n\t}\n\n\tif (Array.isArray(valueSelector)) {\n\t\treturn compileArraySelector(valueSelector as unknown as T);\n\t}\n\n\tif (hasValueOperators<T>(valueSelector)) {\n\t\treturn compileValueOperatorsSelector(valueSelector);\n\t}\n\n\treturn (value: T): boolean => flatSome(value, (x) => equals(valueSelector, x as unknown as object));\n};\n\nexport const compileDocumentSelector = <T>(docSelector: Query<T> | FieldExpression<T>['$where'][]): ((doc: T) => boolean) => {\n\tconst perKeySelectors = Object.entries(docSelector).map(([key, subSelector]) => {\n\t\tif (subSelector === undefined) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tif (isLogicalOperator(key)) {\n\t\t\tswitch (key) {\n\t\t\t\tcase '$and':\n\t\t\t\t\treturn $and(subSelector);\n\n\t\t\t\tcase '$or':\n\t\t\t\t\treturn $or(subSelector);\n\n\t\t\t\tcase '$nor':\n\t\t\t\t\treturn $nor(subSelector);\n\n\t\t\t\tcase '$where':\n\t\t\t\t\treturn $where(subSelector);\n\t\t\t}\n\t\t}\n\n\t\tconst lookUpByIndex = createLookupFunction(key);\n\t\tconst valueSelectorFunc = compileValueSelector(subSelector);\n\t\treturn (doc: T): boolean => {\n\t\t\tconst branchValues = lookUpByIndex(doc);\n\t\t\treturn branchValues.some(valueSelectorFunc);\n\t\t};\n\t});\n\n\treturn (doc: T): boolean => perKeySelectors.every((f) => f(doc));\n};\n"]}}},"code":"module.export({\n  compileDocumentSelector: () => compileDocumentSelector\n});\nlet compareBSONValues, getBSONType;\nmodule.link(\"./bson\", {\n  compareBSONValues(v) {\n    compareBSONValues = v;\n  },\n  getBSONType(v) {\n    getBSONType = v;\n  }\n}, 0);\nlet equals, flatSome, isObject, some;\nmodule.link(\"./comparisons\", {\n  equals(v) {\n    equals = v;\n  },\n  flatSome(v) {\n    flatSome = v;\n  },\n  isObject(v) {\n    isObject = v;\n  },\n  some(v) {\n    some = v;\n  }\n}, 1);\nlet createLookupFunction;\nmodule.link(\"./lookups\", {\n  createLookupFunction(v) {\n    createLookupFunction = v;\n  }\n}, 2);\nconst isArrayOfFields = values => values.every(value => ['number', 'string', 'symbol'].includes(typeof value));\nconst $in = (operand, _options) => {\n  let index = null;\n  if (isArrayOfFields(operand)) {\n    index = {};\n    for (const operandElement of operand) {\n      index[operandElement] = operandElement;\n    }\n  }\n  return value => some(value, x => {\n    if (typeof x === 'string' && index !== null) {\n      return !!index[x];\n    }\n    return operand.some(operandElement => equals(operandElement, x));\n  });\n};\nconst $nin = (operand, _options) => {\n  const isIn = $in(operand, undefined);\n  return value => {\n    if (value === undefined) {\n      return true;\n    }\n    return !isIn(value);\n  };\n};\nconst $all = (operand, _options) => value => {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  return operand.every(operandElement => value.some(valueElement => equals(operandElement, valueElement)));\n};\nconst $lt = (operand, _options) => value => flatSome(value, x => compareBSONValues(x, operand) < 0);\nconst $lte = (operand, _options) => value => flatSome(value, x => compareBSONValues(x, operand) <= 0);\nconst $gt = (operand, _options) => value => flatSome(value, x => compareBSONValues(x, operand) > 0);\nconst $gte = (operand, _options) => value => flatSome(value, x => compareBSONValues(x, operand) >= 0);\nconst $ne = (operand, _options) => value => !some(value, x => equals(x, operand));\nconst $exists = (operand, _options) => value => operand === (value !== undefined);\nconst $mod = (_ref, _options) => {\n  let [divisor, remainder] = _ref;\n  return value => flatSome(value, x => Number(x) % divisor === remainder);\n};\nconst $size = (operand, _options) => value => Array.isArray(value) && operand === value.length;\nconst $type = (operand, _options) => value => {\n  if (value === undefined) {\n    return false;\n  }\n  return flatSome(value, x => getBSONType(x) === operand);\n};\nconst $regex = (operand, options) => {\n  let regex;\n  if (options !== undefined) {\n    const regexSource = operand instanceof RegExp ? operand.source : operand;\n    regex = new RegExp(regexSource, options);\n  } else if (!(operand instanceof RegExp)) {\n    regex = new RegExp(operand);\n  }\n  return value => {\n    if (value === undefined) {\n      return false;\n    }\n    return flatSome(value, x => regex.test(String(x)));\n  };\n};\nconst $elemMatch = (operand, _options) => {\n  const matcher = compileDocumentSelector(operand);\n  return value => {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n    return value.some(x => matcher(x));\n  };\n};\nconst $not = (operand, _options) => {\n  const matcher = compileValueSelector(operand);\n  return value => !matcher(value);\n};\nconst dummyOperator = (_operand, _options) => _value => true;\nconst $options = dummyOperator;\nconst $near = dummyOperator;\nconst $geoIntersects = dummyOperator;\nconst valueOperators = {\n  $in,\n  $nin,\n  $all,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $ne,\n  $exists,\n  $mod,\n  $size,\n  $type,\n  $regex,\n  $elemMatch,\n  $not,\n  $options,\n  $near,\n  $geoIntersects\n};\nconst $and = subSelector => {\n  const subSelectorFunctions = subSelector.map(compileDocumentSelector);\n  return doc => subSelectorFunctions.every(f => f(doc));\n};\nconst $or = subSelector => {\n  const subSelectorFunctions = subSelector.map(compileDocumentSelector);\n  return doc => subSelectorFunctions.some(f => f(doc));\n};\nconst $nor = subSelector => {\n  const subSelectorFunctions = subSelector.map(compileDocumentSelector);\n  return doc => subSelectorFunctions.every(f => !f(doc));\n};\nconst $where = selectorValue => {\n  const fn = selectorValue instanceof Function ? selectorValue : Function(\"return \".concat(selectorValue));\n  return doc => !!fn.call(doc);\n};\nconst logicalOperators = {\n  $and,\n  $or,\n  $nor,\n  $where\n};\nconst isValueOperator = operator => operator in valueOperators;\nconst isLogicalOperator = operator => operator in logicalOperators;\nconst hasValueOperators = valueSelector => Object.keys(valueSelector).every(key => key.slice(0, 1) === '$');\nconst compileUndefinedOrNullSelector = () => value => flatSome(value, x => x === undefined || x === null);\nconst compilePrimitiveSelector = primitive => value => flatSome(value, x => x === primitive);\nconst compileRegexSelector = regex => value => {\n  if (value === undefined) {\n    return false;\n  }\n  return flatSome(value, x => regex.test(String(x)));\n};\nconst compileArraySelector = expected => value => {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  return some(value, x => equals(expected, x));\n};\nconst compileValueOperatorsSelector = expression => {\n  const operatorFunctions = [];\n  for (const operator of Object.keys(expression)) {\n    if (!isValueOperator(operator)) {\n      continue;\n    }\n    const operand = expression[operator];\n    const operation = valueOperators[operator];\n    operatorFunctions.push(operation(operand, expression.$options));\n  }\n  return value => operatorFunctions.every(f => f(value));\n};\nconst compileValueSelector = valueSelector => {\n  if (valueSelector === undefined || valueSelector === null) {\n    return compileUndefinedOrNullSelector();\n  }\n  if (!isObject(valueSelector)) {\n    return compilePrimitiveSelector(valueSelector);\n  }\n  if (valueSelector instanceof RegExp) {\n    return compileRegexSelector(valueSelector);\n  }\n  if (Array.isArray(valueSelector)) {\n    return compileArraySelector(valueSelector);\n  }\n  if (hasValueOperators(valueSelector)) {\n    return compileValueOperatorsSelector(valueSelector);\n  }\n  return value => flatSome(value, x => equals(valueSelector, x));\n};\nconst compileDocumentSelector = docSelector => {\n  const perKeySelectors = Object.entries(docSelector).map(_ref2 => {\n    let [key, subSelector] = _ref2;\n    if (subSelector === undefined) {\n      return () => true;\n    }\n    if (isLogicalOperator(key)) {\n      switch (key) {\n        case '$and':\n          return $and(subSelector);\n        case '$or':\n          return $or(subSelector);\n        case '$nor':\n          return $nor(subSelector);\n        case '$where':\n          return $where(subSelector);\n      }\n    }\n    const lookUpByIndex = createLookupFunction(key);\n    const valueSelectorFunc = compileValueSelector(subSelector);\n    return doc => {\n      const branchValues = lookUpByIndex(doc);\n      return branchValues.some(valueSelectorFunc);\n    };\n  });\n  return doc => perKeySelectors.every(f => f(doc));\n};","map":{"version":3,"names":["module","export","compileDocumentSelector","compareBSONValues","getBSONType","link","v","equals","flatSome","isObject","some","createLookupFunction","isArrayOfFields","values","every","value","includes","$in","operand","_options","index","operandElement","x","$nin","isIn","undefined","$all","Array","isArray","valueElement","$lt","$lte","$gt","$gte","$ne","$exists","$mod","_ref","divisor","remainder","Number","$size","length","$type","$regex","options","regex","regexSource","RegExp","source","test","String","$elemMatch","matcher","$not","compileValueSelector","dummyOperator","_operand","_value","$options","$near","$geoIntersects","valueOperators","$and","subSelector","subSelectorFunctions","map","doc","f","$or","$nor","$where","selectorValue","fn","Function","concat","call","logicalOperators","isValueOperator","operator","isLogicalOperator","hasValueOperators","valueSelector","Object","keys","key","slice","compileUndefinedOrNullSelector","compilePrimitiveSelector","primitive","compileRegexSelector","compileArraySelector","expected","compileValueOperatorsSelector","expression","operatorFunctions","operation","push","docSelector","perKeySelectors","entries","_ref2","lookUpByIndex","valueSelectorFunc","branchValues"],"sources":["client/lib/minimongo/query.ts"],"sourcesContent":["import { compareBSONValues, getBSONType } from './bson';\nimport { equals, flatSome, isObject, some } from './comparisons';\nimport { createLookupFunction } from './lookups';\nimport type { BSONType, FieldExpression, Query } from './types';\n\nconst isArrayOfFields = <T>(values: unknown[]): values is T[] =>\n\tvalues.every((value) => ['number', 'string', 'symbol'].includes(typeof value));\n\nconst $in = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tlet index: Record<T, T> | null = null;\n\tif (isArrayOfFields<T>(operand)) {\n\t\tindex = {} as Record<T, T>;\n\t\tfor (const operandElement of operand) {\n\t\t\tindex[operandElement] = operandElement;\n\t\t}\n\t}\n\n\treturn (value: T): boolean =>\n\t\tsome(value, (x) => {\n\t\t\tif (typeof x === 'string' && index !== null) {\n\t\t\t\treturn !!index[x];\n\t\t\t}\n\n\t\t\treturn operand.some((operandElement) => equals(operandElement, x));\n\t\t});\n};\n\nconst $nin = <T extends string>(operand: T[], _options: undefined): ((value: T) => boolean) => {\n\tconst isIn = $in(operand, undefined);\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !isIn(value);\n\t};\n};\n\nconst $all =\n\t<T>(operand: T[], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn operand.every((operandElement) => value.some((valueElement) => equals(operandElement, valueElement)));\n\t};\n\nconst $lt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) < 0);\n\nconst $lte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) <= 0);\n\nconst $gt =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) > 0);\n\nconst $gte =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => compareBSONValues(x, operand) >= 0);\n\nconst $ne =\n\t<T>(operand: T, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\t!some(value, (x) => equals(x, operand));\n\nconst $exists =\n\t<T>(operand: boolean, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\toperand === (value !== undefined);\n\nconst $mod =\n\t<T>([divisor, remainder]: [number, number], _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => Number(x) % divisor === remainder);\n\nconst $size =\n\t<T>(operand: number, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tArray.isArray(value) && operand === value.length;\n\nconst $type =\n\t<T>(operand: BSONType, _options: undefined): ((value: T) => boolean) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => getBSONType(x) === operand);\n\t};\n\nconst $regex = <T>(operand: string | RegExp, options: string): ((value: T) => boolean) => {\n\tlet regex: RegExp;\n\n\tif (options !== undefined) {\n\t\tconst regexSource = operand instanceof RegExp ? operand.source : operand;\n\t\tregex = new RegExp(regexSource, options);\n\t} else if (!(operand instanceof RegExp)) {\n\t\tregex = new RegExp(operand);\n\t}\n\n\treturn (value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n};\n\nconst $elemMatch = <T>(operand: Query<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileDocumentSelector(operand);\n\n\treturn (value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn value.some((x) => matcher(x));\n\t};\n};\n\nconst $not = <T>(operand: FieldExpression<T>, _options: undefined): ((value: T) => boolean) => {\n\tconst matcher = compileValueSelector(operand);\n\treturn (value: T): boolean => !matcher(value);\n};\n\nconst dummyOperator =\n\t<T>(_operand: unknown, _options: undefined): ((value: T) => boolean) =>\n\t(_value: T): boolean =>\n\t\ttrue;\n\nconst $options = dummyOperator;\nconst $near = dummyOperator;\nconst $geoIntersects = dummyOperator;\n\nconst valueOperators = {\n\t$in,\n\t$nin,\n\t$all,\n\t$lt,\n\t$lte,\n\t$gt,\n\t$gte,\n\t$ne,\n\t$exists,\n\t$mod,\n\t$size,\n\t$type,\n\t$regex,\n\t$elemMatch,\n\t$not,\n\t$options,\n\t$near,\n\t$geoIntersects,\n} as const;\n\nconst $and = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => f(doc));\n};\n\nconst $or = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.some((f) => f(doc));\n};\n\nconst $nor = <T>(subSelector: Query<T>[]): ((doc: T) => boolean) => {\n\tconst subSelectorFunctions = subSelector.map(compileDocumentSelector);\n\treturn (doc: T): boolean => subSelectorFunctions.every((f) => !f(doc));\n};\n\nconst $where = <T>(selectorValue: string | ((doc: T) => boolean)): ((doc: T) => boolean) => {\n\tconst fn = selectorValue instanceof Function ? selectorValue : Function(`return ${selectorValue}`);\n\treturn (doc: T): boolean => !!fn.call(doc);\n};\n\nconst logicalOperators = {\n\t$and,\n\t$or,\n\t$nor,\n\t$where,\n} as const;\n\nconst isValueOperator = (operator: string): operator is keyof typeof valueOperators => operator in valueOperators;\n\nconst isLogicalOperator = (operator: string): operator is keyof typeof logicalOperators => operator in logicalOperators;\n\nconst hasValueOperators = <T>(valueSelector: FieldExpression<T>): boolean =>\n\tObject.keys(valueSelector).every((key) => key.slice(0, 1) === '$');\n\nconst compileUndefinedOrNullSelector =\n\t<T>(): ((value: T) => boolean) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === undefined || x === null);\n\nconst compilePrimitiveSelector =\n\t<T>(primitive: T) =>\n\t(value: T): boolean =>\n\t\tflatSome(value, (x) => x === primitive);\n\nconst compileRegexSelector =\n\t<T>(regex: RegExp) =>\n\t(value: T): boolean => {\n\t\tif (value === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn flatSome(value, (x) => regex.test(String(x)));\n\t};\n\nconst compileArraySelector =\n\t<T>(expected: T) =>\n\t(value: T): boolean => {\n\t\tif (!Array.isArray(value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn some(value, (x) => equals(expected, x));\n\t};\n\nconst compileValueOperatorsSelector = <T>(expression: FieldExpression<T>): ((value: T) => boolean) => {\n\tconst operatorFunctions: ((value: T) => boolean)[] = [];\n\tfor (const operator of Object.keys(expression) as (keyof FieldExpression<T>)[]) {\n\t\tif (!isValueOperator(operator)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst operand = expression[operator];\n\t\tconst operation = valueOperators[operator] as unknown as (operand: unknown, options: unknown) => (value: T) => boolean;\n\t\toperatorFunctions.push(operation(operand, expression.$options));\n\t}\n\treturn (value: T): boolean => operatorFunctions.every((f) => f(value));\n};\n\nconst compileValueSelector = <T>(valueSelector: FieldExpression<T>[keyof FieldExpression<T>]): ((value: T) => boolean) => {\n\tif (valueSelector === undefined || valueSelector === null) {\n\t\treturn compileUndefinedOrNullSelector();\n\t}\n\n\tif (!isObject(valueSelector)) {\n\t\treturn compilePrimitiveSelector(valueSelector as T);\n\t}\n\n\tif (valueSelector instanceof RegExp) {\n\t\treturn compileRegexSelector(valueSelector);\n\t}\n\n\tif (Array.isArray(valueSelector)) {\n\t\treturn compileArraySelector(valueSelector as unknown as T);\n\t}\n\n\tif (hasValueOperators<T>(valueSelector)) {\n\t\treturn compileValueOperatorsSelector(valueSelector);\n\t}\n\n\treturn (value: T): boolean => flatSome(value, (x) => equals(valueSelector, x as unknown as object));\n};\n\nexport const compileDocumentSelector = <T>(docSelector: Query<T> | FieldExpression<T>['$where'][]): ((doc: T) => boolean) => {\n\tconst perKeySelectors = Object.entries(docSelector).map(([key, subSelector]) => {\n\t\tif (subSelector === undefined) {\n\t\t\treturn (): boolean => true;\n\t\t}\n\n\t\tif (isLogicalOperator(key)) {\n\t\t\tswitch (key) {\n\t\t\t\tcase '$and':\n\t\t\t\t\treturn $and(subSelector);\n\n\t\t\t\tcase '$or':\n\t\t\t\t\treturn $or(subSelector);\n\n\t\t\t\tcase '$nor':\n\t\t\t\t\treturn $nor(subSelector);\n\n\t\t\t\tcase '$where':\n\t\t\t\t\treturn $where(subSelector);\n\t\t\t}\n\t\t}\n\n\t\tconst lookUpByIndex = createLookupFunction(key);\n\t\tconst valueSelectorFunc = compileValueSelector(subSelector);\n\t\treturn (doc: T): boolean => {\n\t\t\tconst branchValues = lookUpByIndex(doc);\n\t\t\treturn branchValues.some(valueSelectorFunc);\n\t\t};\n\t});\n\n\treturn (doc: T): boolean => perKeySelectors.every((f) => f(doc));\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"86b9435edc30eeb103c135c09ebc56f711b69492"}
