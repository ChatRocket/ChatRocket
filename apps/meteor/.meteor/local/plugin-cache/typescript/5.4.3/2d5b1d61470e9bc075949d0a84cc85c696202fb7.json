{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/checkUsernameAvailability.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/checkUsernameAvailability.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/checkUsernameAvailability.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/checkUsernameAvailability.ts","sourceRoot":"","sources":["app/lib/server/functions/checkUsernameAvailability.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport { Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { validateName } from './validateName';\nimport { settings } from '../../../settings/server';\n\nlet usernameBlackList: RegExp[] = [];\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', (value: string) => {\n\tusernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username: string, usernameBlackList: RegExp[]): boolean | number =>\n\tusernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(escapeRegExp(username).trim()));\n\nexport const checkUsernameAvailabilityWithValidation = async function (userId: string, username: string): Promise<boolean> {\n\tif (!username) {\n\t\tthrow new Meteor.Error('error-invalid-username', 'Invalid username', { method: 'setUsername' });\n\t}\n\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'setUsername' });\n\t}\n\n\tif (user.username && !settings.get('Accounts_AllowUsernameChange')) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'setUsername' });\n\t}\n\n\tif (user.username === username) {\n\t\treturn true;\n\t}\n\treturn checkUsernameAvailability(username);\n};\n\nexport const checkUsernameAvailability = async function (username: string): Promise<boolean> {\n\tif (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n\t\tthrow new Meteor.Error('error-blocked-username', `${_.escape(username)} is blocked and can't be used!`, {\n\t\t\tmethod: 'checkUsernameAvailability',\n\t\t\tfield: username,\n\t\t});\n\t}\n\n\t// Make sure no users are using this username\n\tconst existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n\t\tprojection: { _id: 1 },\n\t});\n\tif (existingUser) {\n\t\treturn false;\n\t}\n\n\t// Make sure no teams are using this username\n\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });\n\tif (existingTeam) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/checkUsernameAvailability.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/checkUsernameAvailability.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/checkUsernameAvailability.ts","sourceRoot":"","sources":["app/lib/server/functions/checkUsernameAvailability.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport { Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { validateName } from './validateName';\nimport { settings } from '../../../settings/server';\n\nlet usernameBlackList: RegExp[] = [];\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', (value: string) => {\n\tusernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username: string, usernameBlackList: RegExp[]): boolean | number =>\n\tusernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(escapeRegExp(username).trim()));\n\nexport const checkUsernameAvailabilityWithValidation = async function (userId: string, username: string): Promise<boolean> {\n\tif (!username) {\n\t\tthrow new Meteor.Error('error-invalid-username', 'Invalid username', { method: 'setUsername' });\n\t}\n\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'setUsername' });\n\t}\n\n\tif (user.username && !settings.get('Accounts_AllowUsernameChange')) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'setUsername' });\n\t}\n\n\tif (user.username === username) {\n\t\treturn true;\n\t}\n\treturn checkUsernameAvailability(username);\n};\n\nexport const checkUsernameAvailability = async function (username: string): Promise<boolean> {\n\tif (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n\t\tthrow new Meteor.Error('error-blocked-username', `${_.escape(username)} is blocked and can't be used!`, {\n\t\t\tmethod: 'checkUsernameAvailability',\n\t\t\tfield: username,\n\t\t});\n\t}\n\n\t// Make sure no users are using this username\n\tconst existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n\t\tprojection: { _id: 1 },\n\t});\n\tif (existingUser) {\n\t\treturn false;\n\t}\n\n\t// Make sure no teams are using this username\n\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });\n\tif (existingTeam) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      checkUsernameAvailabilityWithValidation: () => checkUsernameAvailabilityWithValidation,\n      checkUsernameAvailability: () => checkUsernameAvailability\n    });\n    let Team;\n    module.link(\"@rocket.chat/core-services\", {\n      Team(v) {\n        Team = v;\n      }\n    }, 0);\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 4);\n    let validateName;\n    module.link(\"./validateName\", {\n      validateName(v) {\n        validateName = v;\n      }\n    }, 5);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    let usernameBlackList = [];\n    const toRegExp = username => new RegExp(\"^\".concat(escapeRegExp(username).trim(), \"$\"), 'i');\n    settings.watch('Accounts_BlockedUsernameList', value => {\n      usernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n    });\n    const usernameIsBlocked = (username, usernameBlackList) => usernameBlackList.length && usernameBlackList.some(restrictedUsername => restrictedUsername.test(escapeRegExp(username).trim()));\n    const checkUsernameAvailabilityWithValidation = async function (userId, username) {\n      if (!username) {\n        throw new Meteor.Error('error-invalid-username', 'Invalid username', {\n          method: 'setUsername'\n        });\n      }\n      const user = await Users.findOneById(userId, {\n        projection: {\n          username: 1\n        }\n      });\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'setUsername'\n        });\n      }\n      if (user.username && !settings.get('Accounts_AllowUsernameChange')) {\n        throw new Meteor.Error('error-not-allowed', 'Not allowed', {\n          method: 'setUsername'\n        });\n      }\n      if (user.username === username) {\n        return true;\n      }\n      return checkUsernameAvailability(username);\n    };\n    const checkUsernameAvailability = async function (username) {\n      if (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n        throw new Meteor.Error('error-blocked-username', \"\".concat(_.escape(username), \" is blocked and can't be used!\"), {\n          method: 'checkUsernameAvailability',\n          field: username\n        });\n      }\n      // Make sure no users are using this username\n      const existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n        projection: {\n          _id: 1\n        }\n      });\n      if (existingUser) {\n        return false;\n      }\n      // Make sure no teams are using this username\n      const existingTeam = await Team.getOneByName(toRegExp(username), {\n        projection: {\n          _id: 1\n        }\n      });\n      if (existingTeam) {\n        return false;\n      }\n      return true;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","checkUsernameAvailabilityWithValidation","checkUsernameAvailability","Team","link","v","Users","escapeRegExp","Meteor","_","default","validateName","settings","__reifyWaitForDeps__","usernameBlackList","toRegExp","username","RegExp","concat","trim","watch","value","split","map","usernameIsBlocked","length","some","restrictedUsername","test","userId","Error","method","user","findOneById","projection","get","escape","field","existingUser","findOneByUsernameIgnoringCase","_id","existingTeam","getOneByName","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/checkUsernameAvailability.ts"],"sourcesContent":["import { Team } from '@rocket.chat/core-services';\nimport { Users } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\n\nimport { validateName } from './validateName';\nimport { settings } from '../../../settings/server';\n\nlet usernameBlackList: RegExp[] = [];\n\nconst toRegExp = (username: string): RegExp => new RegExp(`^${escapeRegExp(username).trim()}$`, 'i');\n\nsettings.watch('Accounts_BlockedUsernameList', (value: string) => {\n\tusernameBlackList = ['all', 'here'].concat(value.split(',')).map(toRegExp);\n});\n\nconst usernameIsBlocked = (username: string, usernameBlackList: RegExp[]): boolean | number =>\n\tusernameBlackList.length && usernameBlackList.some((restrictedUsername) => restrictedUsername.test(escapeRegExp(username).trim()));\n\nexport const checkUsernameAvailabilityWithValidation = async function (userId: string, username: string): Promise<boolean> {\n\tif (!username) {\n\t\tthrow new Meteor.Error('error-invalid-username', 'Invalid username', { method: 'setUsername' });\n\t}\n\n\tconst user = await Users.findOneById(userId, { projection: { username: 1 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'setUsername' });\n\t}\n\n\tif (user.username && !settings.get('Accounts_AllowUsernameChange')) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', { method: 'setUsername' });\n\t}\n\n\tif (user.username === username) {\n\t\treturn true;\n\t}\n\treturn checkUsernameAvailability(username);\n};\n\nexport const checkUsernameAvailability = async function (username: string): Promise<boolean> {\n\tif (usernameIsBlocked(username, usernameBlackList) || !validateName(username)) {\n\t\tthrow new Meteor.Error('error-blocked-username', `${_.escape(username)} is blocked and can't be used!`, {\n\t\t\tmethod: 'checkUsernameAvailability',\n\t\t\tfield: username,\n\t\t});\n\t}\n\n\t// Make sure no users are using this username\n\tconst existingUser = await Users.findOneByUsernameIgnoringCase(username, {\n\t\tprojection: { _id: 1 },\n\t});\n\tif (existingUser) {\n\t\treturn false;\n\t}\n\n\t// Make sure no teams are using this username\n\tconst existingTeam = await Team.getOneByName(toRegExp(username), { projection: { _id: 1 } });\n\tif (existingTeam) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2d5b1d61470e9bc075949d0a84cc85c696202fb7"}
