{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/lists/ThreadsList.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/lib/lists/ThreadsList.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/lists/ThreadsList.ts","inputSourceMap":{"version":3,"file":"client/lib/lists/ThreadsList.ts","sourceRoot":"","sources":["client/lib/lists/ThreadsList.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAE3D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAqB5C,MAAM,qBAAqB,GAAG,CAAC,OAAiB,EAAE,GAAoB,EAA4B,EAAE,CACnG,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI,OAAQ,OAAyB,CAAC,MAAM,KAAK,QAAQ,CAAC;AAE9E,MAAM,sBAAsB,GAAG,CAAC,aAA4B,EAAE,GAAiB,EAAW,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;AAE3I,MAAM,cAAc,GAAG,CAAC,aAA4B,EAAE,OAAiC,EAAW,EAAE,CACnG,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;AAE/C,MAAM,oBAAoB,GAAG,CAAC,aAA4B,EAAE,KAAa,EAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAErH,MAAM,OAAO,WAAY,SAAQ,WAAW;IAChB;IAA3B,YAA2B,QAA4B;QACtD,KAAK,EAAE,CAAC;QADkB,aAAQ,GAAR,QAAQ,CAAoB;IAEvD,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,aAAa,CAAC,OAA2B;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAES,MAAM,CAAC,OAAiB;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;YAC1C,OAAO,KAAK,CAAC;QACd,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;YACxC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;gBAC3C,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACrC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;gBACvC,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YAChE,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC;gBAC3C,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAES,OAAO,CAAC,CAAW,EAAE,CAAW;QACzC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACD","sourcesContent":["import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: undefined;\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/lists/ThreadsList.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/lists/ThreadsList.ts","inputSourceMap":{"version":3,"file":"client/lib/lists/ThreadsList.ts","sourceRoot":"","sources":["client/lib/lists/ThreadsList.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAE3D,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAqB5C,MAAM,qBAAqB,GAAG,CAAC,OAAiB,EAAE,GAAoB,EAA4B,EAAE,CACnG,OAAO,CAAC,GAAG,KAAK,GAAG,IAAI,OAAQ,OAAyB,CAAC,MAAM,KAAK,QAAQ,CAAC;AAE9E,MAAM,sBAAsB,GAAG,CAAC,aAA4B,EAAE,GAAiB,EAAW,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC;AAE3I,MAAM,cAAc,GAAG,CAAC,aAA4B,EAAE,OAAiC,EAAW,EAAE,CACnG,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;AAE/C,MAAM,oBAAoB,GAAG,CAAC,aAA4B,EAAE,KAAa,EAAW,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AAErH,MAAM,OAAO,WAAY,SAAQ,WAAW;IAChB;IAA3B,YAA2B,QAA4B;QACtD,KAAK,EAAE,CAAC;QADkB,aAAQ,GAAR,QAAQ,CAAoB;IAEvD,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,aAAa,CAAC,OAA2B;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAES,MAAM,CAAC,OAAiB;QACjC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;QAE9B,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;YAC1C,OAAO,KAAK,CAAC;QACd,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;YACxC,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;gBAC3C,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YACrC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC;YAClC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;gBACvC,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YAChE,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC;gBAC3C,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAES,OAAO,CAAC,CAAW,EAAE,CAAW;QACzC,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;CACD","sourcesContent":["import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: undefined;\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"]}}},"code":"module.export({\n  ThreadsList: () => ThreadsList\n});\nlet escapeRegExp;\nmodule.link(\"@rocket.chat/string-helpers\", {\n  escapeRegExp(v) {\n    escapeRegExp = v;\n  }\n}, 0);\nlet MessageList;\nmodule.link(\"./MessageList\", {\n  MessageList(v) {\n    MessageList = v;\n  }\n}, 1);\nconst isThreadMessageInRoom = (message, rid) => message.rid === rid && typeof message.tcount === 'number';\nconst isThreadFollowedByUser = (threadMessage, uid) => {\n  var _threadMessage$replie, _threadMessage$replie2;\n  return (_threadMessage$replie = (_threadMessage$replie2 = threadMessage.replies) === null || _threadMessage$replie2 === void 0 ? void 0 : _threadMessage$replie2.includes(uid)) !== null && _threadMessage$replie !== void 0 ? _threadMessage$replie : false;\n};\nconst isThreadUnread = (threadMessage, tunread) => Boolean(tunread === null || tunread === void 0 ? void 0 : tunread.includes(threadMessage._id));\nconst isThreadTextMatching = (threadMessage, regex) => regex.test(threadMessage.msg);\nclass ThreadsList extends MessageList {\n  constructor(_options) {\n    super();\n    this._options = void 0;\n    this._options = _options;\n  }\n  get options() {\n    return this._options;\n  }\n  updateFilters(options) {\n    this._options = options;\n    this.clear();\n  }\n  filter(message) {\n    const {\n      rid\n    } = this._options;\n    if (!isThreadMessageInRoom(message, rid)) {\n      return false;\n    }\n    if (this._options.type === 'following') {\n      const {\n        uid\n      } = this._options;\n      if (!isThreadFollowedByUser(message, uid)) {\n        return false;\n      }\n    }\n    if (this._options.type === 'unread') {\n      const {\n        tunread\n      } = this._options;\n      if (!isThreadUnread(message, tunread)) {\n        return false;\n      }\n    }\n    if (this._options.text) {\n      const regex = new RegExp(escapeRegExp(this._options.text), 'i');\n      if (!isThreadTextMatching(message, regex)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  compare(a, b) {\n    var _b$tlm, _a$tlm;\n    return ((_b$tlm = b.tlm) !== null && _b$tlm !== void 0 ? _b$tlm : b.ts).getTime() - ((_a$tlm = a.tlm) !== null && _a$tlm !== void 0 ? _a$tlm : a.ts).getTime();\n  }\n}","map":{"version":3,"names":["module","export","ThreadsList","escapeRegExp","link","v","MessageList","isThreadMessageInRoom","message","rid","tcount","isThreadFollowedByUser","threadMessage","uid","_threadMessage$replie","_threadMessage$replie2","replies","includes","isThreadUnread","tunread","Boolean","_id","isThreadTextMatching","regex","test","msg","constructor","_options","options","updateFilters","clear","filter","type","text","RegExp","compare","a","b","_b$tlm","_a$tlm","tlm","ts","getTime"],"sources":["client/lib/lists/ThreadsList.ts"],"sourcesContent":["import type { IMessage, ISubscription, IUser } from '@rocket.chat/core-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\n\nimport { MessageList } from './MessageList';\n\ntype ThreadMessage = Omit<IMessage, 'tcount'> & Required<Pick<IMessage, 'tcount'>>;\n\nexport type ThreadsListOptions = {\n\trid: IMessage['rid'];\n\ttext?: string;\n} & (\n\t| {\n\t\t\ttype: 'unread';\n\t\t\ttunread: ISubscription['tunread'];\n\t  }\n\t| {\n\t\t\ttype: 'following';\n\t\t\tuid: IUser['_id'];\n\t  }\n\t| {\n\t\t\ttype: undefined;\n\t  }\n);\n\nconst isThreadMessageInRoom = (message: IMessage, rid: IMessage['rid']): message is ThreadMessage =>\n\tmessage.rid === rid && typeof (message as ThreadMessage).tcount === 'number';\n\nconst isThreadFollowedByUser = (threadMessage: ThreadMessage, uid: IUser['_id']): boolean => threadMessage.replies?.includes(uid) ?? false;\n\nconst isThreadUnread = (threadMessage: ThreadMessage, tunread: ISubscription['tunread']): boolean =>\n\tBoolean(tunread?.includes(threadMessage._id));\n\nconst isThreadTextMatching = (threadMessage: ThreadMessage, regex: RegExp): boolean => regex.test(threadMessage.msg);\n\nexport class ThreadsList extends MessageList {\n\tpublic constructor(private _options: ThreadsListOptions) {\n\t\tsuper();\n\t}\n\n\tpublic get options(): ThreadsListOptions {\n\t\treturn this._options;\n\t}\n\n\tpublic updateFilters(options: ThreadsListOptions): void {\n\t\tthis._options = options;\n\t\tthis.clear();\n\t}\n\n\tprotected filter(message: IMessage): boolean {\n\t\tconst { rid } = this._options;\n\n\t\tif (!isThreadMessageInRoom(message, rid)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._options.type === 'following') {\n\t\t\tconst { uid } = this._options;\n\t\t\tif (!isThreadFollowedByUser(message, uid)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.type === 'unread') {\n\t\t\tconst { tunread } = this._options;\n\t\t\tif (!isThreadUnread(message, tunread)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (this._options.text) {\n\t\t\tconst regex = new RegExp(escapeRegExp(this._options.text), 'i');\n\t\t\tif (!isThreadTextMatching(message, regex)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected compare(a: IMessage, b: IMessage): number {\n\t\treturn (b.tlm ?? b.ts).getTime() - (a.tlm ?? a.ts).getTime();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"fb5e0ad7a5a1dc3fea51bb8e6e51012311b669e1"}
