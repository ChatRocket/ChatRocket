{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","sourceRoot":"","sources":["ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE } from '../../../domain/IFederationBridge';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type {\n\tFederationBeforeDirectMessageRoomCreationDto,\n\tFederationCreateDirectMessageDto,\n\tFederationOnDirectMessageRoomCreationDto,\n\tFederationRoomInviteUserDto,\n} from './input/RoomSenderDto';\n\nexport class FederationDirectMessageRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onDirectMessageRoomCreation(dmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees, inviteComesFromAnExternalHomeServer } = dmRoomOnCreationInput;\n\n\t\tconst atLeastOneExternalUser = invitees.some(\n\t\t\t(invitee) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\t\tif (invitees.length === 0 || inviteComesFromAnExternalHomeServer || !atLeastOneExternalUser) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createExternalDirectMessageRoomAndInviteUsers({\n\t\t\tinternalInviterId,\n\t\t\tinternalRoomId,\n\t\t\tinvitees,\n\t\t\tinviteComesFromAnExternalHomeServer,\n\t\t});\n\t}\n\n\tpublic async beforeDirectMessageRoomCreation(dmBeforeRoomCreationInput: FederationBeforeDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { invitees = [] } = dmBeforeRoomCreationInput;\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tpublic async createInternalLocalDirectMessageRoom(dmRoomCreateInput: FederationCreateDirectMessageDto): Promise<void> {\n\t\tconst { internalInviterId, invitees } = dmRoomCreateInput;\n\n\t\tawait this.internalRoomAdapter.createLocalDirectMessageRoom(invitees, internalInviterId);\n\t}\n\n\tprivate async createExternalDirectMessageRoomAndInviteUsers(\n\t\tdmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto,\n\t): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees } = dmRoomOnCreationInput;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tconst internalUser = await this.internalUserAdapter.getInternalUserById(internalInviterId);\n\t\t\tconst username = internalUser.username || internalInviterId;\n\t\t\tconst name = internalUser.name || internalInviterId;\n\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\tconst externalInviterId = await this.bridge.createUser(username, name, this.internalHomeServerDomain);\n\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, username, existsOnlyOnProxyServer, name);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviterUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\n\t\tawait Promise.all(\n\t\t\tinvitees.map((member) =>\n\t\t\t\tthis.createUserForDirectMessageRoom({\n\t\t\t\t\tinternalInviterId,\n\t\t\t\t\tinternalRoomId,\n\t\t\t\t\tinviteeUsernameOnly: member.inviteeUsernameOnly,\n\t\t\t\t\tnormalizedInviteeId: member.normalizedInviteeId,\n\t\t\t\t\trawInviteeId: member.rawInviteeId,\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\tif (internalFederatedRoom || !isInviterFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\t\tinternalRoomId,\n\t\t});\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(inviteesFromTheSameHomeServer.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tprivate async createUserForDirectMessageRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tif (!isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(inviteeUsernameOnly));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${inviteeUsernameOnly} not found`);\n\t\t}\n\n\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\tif (profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.createUser(\n\t\t\tinviteeUsernameOnly,\n\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || inviteeUsernameOnly,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts","sourceRoot":"","sources":["ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE } from '../../../domain/IFederationBridge';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type {\n\tFederationBeforeDirectMessageRoomCreationDto,\n\tFederationCreateDirectMessageDto,\n\tFederationOnDirectMessageRoomCreationDto,\n\tFederationRoomInviteUserDto,\n} from './input/RoomSenderDto';\n\nexport class FederationDirectMessageRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onDirectMessageRoomCreation(dmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees, inviteComesFromAnExternalHomeServer } = dmRoomOnCreationInput;\n\n\t\tconst atLeastOneExternalUser = invitees.some(\n\t\t\t(invitee) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\t\tif (invitees.length === 0 || inviteComesFromAnExternalHomeServer || !atLeastOneExternalUser) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createExternalDirectMessageRoomAndInviteUsers({\n\t\t\tinternalInviterId,\n\t\t\tinternalRoomId,\n\t\t\tinvitees,\n\t\t\tinviteComesFromAnExternalHomeServer,\n\t\t});\n\t}\n\n\tpublic async beforeDirectMessageRoomCreation(dmBeforeRoomCreationInput: FederationBeforeDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { invitees = [] } = dmBeforeRoomCreationInput;\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tpublic async createInternalLocalDirectMessageRoom(dmRoomCreateInput: FederationCreateDirectMessageDto): Promise<void> {\n\t\tconst { internalInviterId, invitees } = dmRoomCreateInput;\n\n\t\tawait this.internalRoomAdapter.createLocalDirectMessageRoom(invitees, internalInviterId);\n\t}\n\n\tprivate async createExternalDirectMessageRoomAndInviteUsers(\n\t\tdmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto,\n\t): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees } = dmRoomOnCreationInput;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tconst internalUser = await this.internalUserAdapter.getInternalUserById(internalInviterId);\n\t\t\tconst username = internalUser.username || internalInviterId;\n\t\t\tconst name = internalUser.name || internalInviterId;\n\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\tconst externalInviterId = await this.bridge.createUser(username, name, this.internalHomeServerDomain);\n\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, username, existsOnlyOnProxyServer, name);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviterUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\n\t\tawait Promise.all(\n\t\t\tinvitees.map((member) =>\n\t\t\t\tthis.createUserForDirectMessageRoom({\n\t\t\t\t\tinternalInviterId,\n\t\t\t\t\tinternalRoomId,\n\t\t\t\t\tinviteeUsernameOnly: member.inviteeUsernameOnly,\n\t\t\t\t\tnormalizedInviteeId: member.normalizedInviteeId,\n\t\t\t\t\trawInviteeId: member.rawInviteeId,\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\tif (internalFederatedRoom || !isInviterFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\t\tinternalRoomId,\n\t\t});\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(inviteesFromTheSameHomeServer.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tprivate async createUserForDirectMessageRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tif (!isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(inviteeUsernameOnly));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${inviteeUsernameOnly} not found`);\n\t\t}\n\n\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\tif (profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.createUser(\n\t\t\tinviteeUsernameOnly,\n\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || inviteeUsernameOnly,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      FederationDirectMessageRoomServiceSender: () => FederationDirectMessageRoomServiceSender\n    });\n    let FederatedUserEE;\n    module.link(\"../../../domain/FederatedUser\", {\n      FederatedUserEE(v) {\n        FederatedUserEE = v;\n      }\n    }, 0);\n    let AbstractFederationApplicationServiceEE;\n    module.link(\"../../AbstractFederationApplicationServiceEE\", {\n      AbstractFederationApplicationServiceEE(v) {\n        AbstractFederationApplicationServiceEE = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class FederationDirectMessageRoomServiceSender extends AbstractFederationApplicationServiceEE {\n      constructor(internalRoomAdapter, internalUserAdapter, internalFileAdapter, internalSettingsAdapter, bridge) {\n        super(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n        this.internalRoomAdapter = void 0;\n        this.internalUserAdapter = void 0;\n        this.internalFileAdapter = void 0;\n        this.internalSettingsAdapter = void 0;\n        this.bridge = void 0;\n        this.internalRoomAdapter = internalRoomAdapter;\n        this.internalUserAdapter = internalUserAdapter;\n        this.internalFileAdapter = internalFileAdapter;\n        this.internalSettingsAdapter = internalSettingsAdapter;\n        this.bridge = bridge;\n      }\n      async onDirectMessageRoomCreation(dmRoomOnCreationInput) {\n        const {\n          internalRoomId,\n          internalInviterId,\n          invitees,\n          inviteComesFromAnExternalHomeServer\n        } = dmRoomOnCreationInput;\n        const atLeastOneExternalUser = invitees.some(invitee => !FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(invitee.rawInviteeId), this.internalHomeServerDomain));\n        if (invitees.length === 0 || inviteComesFromAnExternalHomeServer || !atLeastOneExternalUser) {\n          return;\n        }\n        await this.createExternalDirectMessageRoomAndInviteUsers({\n          internalInviterId,\n          internalRoomId,\n          invitees,\n          inviteComesFromAnExternalHomeServer\n        });\n      }\n      async beforeDirectMessageRoomCreation(dmBeforeRoomCreationInput) {\n        const {\n          invitees = []\n        } = dmBeforeRoomCreationInput;\n        if (invitees.length === 0) {\n          return;\n        }\n        await this.createUsersLocallyOnly(invitees);\n      }\n      async createInternalLocalDirectMessageRoom(dmRoomCreateInput) {\n        const {\n          internalInviterId,\n          invitees\n        } = dmRoomCreateInput;\n        await this.internalRoomAdapter.createLocalDirectMessageRoom(invitees, internalInviterId);\n      }\n      async createExternalDirectMessageRoomAndInviteUsers(dmRoomOnCreationInput) {\n        const {\n          internalRoomId,\n          internalInviterId,\n          invitees\n        } = dmRoomOnCreationInput;\n        const inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n        if (!inviterUser) {\n          const internalUser = await this.internalUserAdapter.getInternalUserById(internalInviterId);\n          const username = internalUser.username || internalInviterId;\n          const name = internalUser.name || internalInviterId;\n          const existsOnlyOnProxyServer = true;\n          const externalInviterId = await this.bridge.createUser(username, name, this.internalHomeServerDomain);\n          await this.createFederatedUserInternallyOnly(externalInviterId, username, existsOnlyOnProxyServer, name);\n        }\n        const federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n        if (!federatedInviterUser) {\n          throw new Error(\"User with internalId \".concat(internalInviterId, \" not found\"));\n        }\n        const isInviterFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedInviterUser.getExternalId()), this.internalHomeServerDomain);\n        const internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n        await Promise.all(invitees.map(member => this.createUserForDirectMessageRoom({\n          internalInviterId,\n          internalRoomId,\n          inviteeUsernameOnly: member.inviteeUsernameOnly,\n          normalizedInviteeId: member.normalizedInviteeId,\n          rawInviteeId: member.rawInviteeId\n        })));\n        if (internalFederatedRoom || !isInviterFromTheSameHomeServer) {\n          return;\n        }\n        const allInviteeExternalIds = invitees.map(invitee => invitee.rawInviteeId);\n        const externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n          internalRoomId\n        });\n        const inviteesFromTheSameHomeServer = invitees.filter(invitee => FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(invitee.rawInviteeId), this.internalHomeServerDomain));\n        await Promise.all(inviteesFromTheSameHomeServer.map(invitee => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n        await this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n      }\n      async createUserForDirectMessageRoom(roomInviteUserInput) {\n        const {\n          normalizedInviteeId,\n          inviteeUsernameOnly,\n          rawInviteeId\n        } = roomInviteUserInput;\n        const isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(rawInviteeId), this.internalHomeServerDomain);\n        const username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n        const existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n        const inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n        if (!inviteeUser) {\n          await this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n        }\n        if (!isInviteeFromTheSameHomeServer) {\n          return;\n        }\n        const federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(inviteeUsernameOnly));\n        if (!federatedInviteeUser) {\n          throw new Error(\"User with internalUsername \".concat(inviteeUsernameOnly, \" not found\"));\n        }\n        const profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n        if (profile) {\n          return;\n        }\n        await this.bridge.createUser(inviteeUsernameOnly, federatedInviteeUser.getName() || federatedInviteeUser.getUsername() || inviteeUsernameOnly, this.internalHomeServerDomain);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","FederationDirectMessageRoomServiceSender","FederatedUserEE","link","v","AbstractFederationApplicationServiceEE","__reifyWaitForDeps__","constructor","internalRoomAdapter","internalUserAdapter","internalFileAdapter","internalSettingsAdapter","bridge","onDirectMessageRoomCreation","dmRoomOnCreationInput","internalRoomId","internalInviterId","invitees","inviteComesFromAnExternalHomeServer","atLeastOneExternalUser","some","invitee","isOriginalFromTheProxyServer","extractHomeserverOrigin","rawInviteeId","internalHomeServerDomain","length","createExternalDirectMessageRoomAndInviteUsers","beforeDirectMessageRoomCreation","dmBeforeRoomCreationInput","createUsersLocallyOnly","createInternalLocalDirectMessageRoom","dmRoomCreateInput","createLocalDirectMessageRoom","inviterUser","getFederatedUserByInternalId","internalUser","getInternalUserById","username","name","existsOnlyOnProxyServer","externalInviterId","createUser","createFederatedUserInternallyOnly","federatedInviterUser","Error","concat","isInviterFromTheSameHomeServer","getExternalId","internalFederatedRoom","getFederatedRoomByInternalId","Promise","all","map","member","createUserForDirectMessageRoom","inviteeUsernameOnly","normalizedInviteeId","allInviteeExternalIds","externalRoomId","createDirectMessageRoom","inviteesFromTheSameHomeServer","filter","joinRoom","updateFederatedRoomByInternalRoomId","roomInviteUserInput","isInviteeFromTheSameHomeServer","inviteeUser","getFederatedUserByInternalUsername","federatedInviteeUser","profile","getUserProfileInformation","getName","getUsername","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/local-services/federation/application/room/sender/DirectMessageRoomServiceSender.ts"],"sourcesContent":["import type { RocketChatFileAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatSettingsAdapter } from '../../../../../../../server/services/federation/infrastructure/rocket-chat/adapters/Settings';\nimport { FederatedUserEE } from '../../../domain/FederatedUser';\nimport type { IFederationBridgeEE } from '../../../domain/IFederationBridge';\nimport type { RocketChatRoomAdapterEE } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatUserAdapterEE } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationServiceEE } from '../../AbstractFederationApplicationServiceEE';\nimport type {\n\tFederationBeforeDirectMessageRoomCreationDto,\n\tFederationCreateDirectMessageDto,\n\tFederationOnDirectMessageRoomCreationDto,\n\tFederationRoomInviteUserDto,\n} from './input/RoomSenderDto';\n\nexport class FederationDirectMessageRoomServiceSender extends AbstractFederationApplicationServiceEE {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapterEE,\n\t\tprotected internalUserAdapter: RocketChatUserAdapterEE,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected bridge: IFederationBridgeEE,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onDirectMessageRoomCreation(dmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees, inviteComesFromAnExternalHomeServer } = dmRoomOnCreationInput;\n\n\t\tconst atLeastOneExternalUser = invitees.some(\n\t\t\t(invitee) =>\n\t\t\t\t!FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t),\n\t\t);\n\t\tif (invitees.length === 0 || inviteComesFromAnExternalHomeServer || !atLeastOneExternalUser) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createExternalDirectMessageRoomAndInviteUsers({\n\t\t\tinternalInviterId,\n\t\t\tinternalRoomId,\n\t\t\tinvitees,\n\t\t\tinviteComesFromAnExternalHomeServer,\n\t\t});\n\t}\n\n\tpublic async beforeDirectMessageRoomCreation(dmBeforeRoomCreationInput: FederationBeforeDirectMessageRoomCreationDto): Promise<void> {\n\t\tconst { invitees = [] } = dmBeforeRoomCreationInput;\n\n\t\tif (invitees.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createUsersLocallyOnly(invitees);\n\t}\n\n\tpublic async createInternalLocalDirectMessageRoom(dmRoomCreateInput: FederationCreateDirectMessageDto): Promise<void> {\n\t\tconst { internalInviterId, invitees } = dmRoomCreateInput;\n\n\t\tawait this.internalRoomAdapter.createLocalDirectMessageRoom(invitees, internalInviterId);\n\t}\n\n\tprivate async createExternalDirectMessageRoomAndInviteUsers(\n\t\tdmRoomOnCreationInput: FederationOnDirectMessageRoomCreationDto,\n\t): Promise<void> {\n\t\tconst { internalRoomId, internalInviterId, invitees } = dmRoomOnCreationInput;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tconst internalUser = await this.internalUserAdapter.getInternalUserById(internalInviterId);\n\t\t\tconst username = internalUser.username || internalInviterId;\n\t\t\tconst name = internalUser.name || internalInviterId;\n\t\t\tconst existsOnlyOnProxyServer = true;\n\t\t\tconst externalInviterId = await this.bridge.createUser(username, name, this.internalHomeServerDomain);\n\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, username, existsOnlyOnProxyServer, name);\n\t\t}\n\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByInternalId(internalInviterId));\n\t\tif (!federatedInviterUser) {\n\t\t\tthrow new Error(`User with internalId ${internalInviterId} not found`);\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviterUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst internalFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByInternalId(internalRoomId);\n\n\t\tawait Promise.all(\n\t\t\tinvitees.map((member) =>\n\t\t\t\tthis.createUserForDirectMessageRoom({\n\t\t\t\t\tinternalInviterId,\n\t\t\t\t\tinternalRoomId,\n\t\t\t\t\tinviteeUsernameOnly: member.inviteeUsernameOnly,\n\t\t\t\t\tnormalizedInviteeId: member.normalizedInviteeId,\n\t\t\t\t\trawInviteeId: member.rawInviteeId,\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\n\t\tif (internalFederatedRoom || !isInviterFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst allInviteeExternalIds = invitees.map((invitee) => invitee.rawInviteeId);\n\t\tconst externalRoomId = await this.bridge.createDirectMessageRoom(federatedInviterUser.getExternalId(), allInviteeExternalIds, {\n\t\t\tinternalRoomId,\n\t\t});\n\t\tconst inviteesFromTheSameHomeServer = invitees.filter((invitee) =>\n\t\t\tFederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.rawInviteeId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t),\n\t\t);\n\t\tawait Promise.all(inviteesFromTheSameHomeServer.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.rawInviteeId)));\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tprivate async createUserForDirectMessageRoom(roomInviteUserInput: FederationRoomInviteUserDto): Promise<void> {\n\t\tconst { normalizedInviteeId, inviteeUsernameOnly, rawInviteeId } = roomInviteUserInput;\n\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUserEE.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(rawInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\n\t\tconst username = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\t\tconst existsOnlyOnProxyServer = isInviteeFromTheSameHomeServer;\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByInternalUsername(username);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(rawInviteeId, username, existsOnlyOnProxyServer);\n\t\t}\n\n\t\tif (!isInviteeFromTheSameHomeServer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByInternalUsername(inviteeUsernameOnly));\n\t\tif (!federatedInviteeUser) {\n\t\t\tthrow new Error(`User with internalUsername ${inviteeUsernameOnly} not found`);\n\t\t}\n\n\t\tconst profile = await this.bridge.getUserProfileInformation(federatedInviteeUser.getExternalId());\n\t\tif (profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.bridge.createUser(\n\t\t\tinviteeUsernameOnly,\n\t\t\tfederatedInviteeUser.getName() || federatedInviteeUser.getUsername() || inviteeUsernameOnly,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2ca7ba8f14bd5a1f612623eca7925f2a620830f7"}
