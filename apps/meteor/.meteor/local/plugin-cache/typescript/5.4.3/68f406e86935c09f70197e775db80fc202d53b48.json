{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/AbstractBusinessHour.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/business-hour/AbstractBusinessHour.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/AbstractBusinessHour.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/AbstractBusinessHour.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/AbstractBusinessHour.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AtLeast, ILivechatAgentStatus, ILivechatBusinessHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel, IUsersModel } from '@rocket.chat/model-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment-timezone';\nimport type { UpdateFilter } from 'mongodb';\n\nimport type { IWorkHoursCronJobsWrapper } from '../../../../server/models/raw/LivechatBusinessHours';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\n\nexport interface IBusinessHourBehavior {\n\tfindHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]>;\n\topenBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tcloseBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tonDisableBusinessHours(): Promise<void>;\n\tonAddAgentToDepartment(options?: { departmentId: string; agentsId: string[] }): Promise<any>;\n\tonRemoveAgentFromDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveDepartment(options: { department: ILivechatDepartment; agentsIds: string[] }): Promise<any>;\n\tonDepartmentDisabled(department?: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonStartBusinessHours(): Promise<void>;\n\tafterSaveBusinessHours(businessHourData: ILivechatBusinessHour): Promise<void>;\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean>;\n\tchangeAgentActiveStatus(agentId: string, status: string): Promise<any>;\n\t// If a new agent is created, this callback will be called\n\tonNewAgentCreated(agentId: string): Promise<void>;\n}\n\nexport interface IBusinessHourType {\n\tname: string;\n\tgetBusinessHour(id?: string): Promise<ILivechatBusinessHour | null>;\n\tsaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<ILivechatBusinessHour>;\n\tremoveBusinessHourById(id: string): Promise<void>;\n}\n\nexport abstract class AbstractBusinessHourBehavior {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tasync findHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.BusinessHourRepository.findHoursToScheduleJobs();\n\t}\n\n\tasync onDisableBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync changeAgentActiveStatus(agentId: string, status: ILivechatAgentStatus): Promise<any> {\n\t\tconst result = await this.UsersRepository.setLivechatStatusIf(\n\t\t\tagentId,\n\t\t\tstatus,\n\t\t\t// Why this works: statusDefault is the property set when a user manually changes their status\n\t\t\t// So if it's set to offline, we can be sure the user will be offline after login and we can skip the update\n\t\t\t{ livechatStatusSystemModified: true, statusDefault: { $ne: 'offline' } },\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: agentId,\n\t\t\t\tdiff: { statusLivechat: 'available', livechatStatusSystemModified: true },\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractBusinessHourType {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tprotected async baseSaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<string> {\n\t\tbusinessHourData.active = Boolean(businessHourData.active);\n\t\tbusinessHourData = this.convertWorkHours(businessHourData);\n\t\tif (businessHourData._id) {\n\t\t\tawait this.BusinessHourRepository.updateOne({ _id: businessHourData._id }, {\n\t\t\t\t$set: businessHourData,\n\t\t\t} as UpdateFilter<ILivechatBusinessHour>); // TODO: Remove this cast when TypeScript is updated\n\t\t\treturn businessHourData._id;\n\t\t}\n\t\tconst { insertedId } = await this.BusinessHourRepository.insertOne(businessHourData);\n\t\treturn insertedId;\n\t}\n\n\tprivate convertWorkHours(businessHourData: ILivechatBusinessHour): ILivechatBusinessHour {\n\t\tbusinessHourData.workHours.forEach((hour: any) => {\n\t\t\tconst startUtc = moment.tz(`${hour.day}:${hour.start}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\tconst finishUtc = moment.tz(`${hour.day}:${hour.finish}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\n\t\t\tif (hour.open && finishUtc.isBefore(startUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-before-start-time');\n\t\t\t}\n\n\t\t\tif (hour.open && startUtc.isSame(finishUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-equals-start-time');\n\t\t\t}\n\n\t\t\thour.start = {\n\t\t\t\ttime: hour.start,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: startUtc.clone().format('dddd'),\n\t\t\t\t\ttime: startUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t\thour.finish = {\n\t\t\t\ttime: hour.finish,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: finishUtc.clone().format('dddd'),\n\t\t\t\t\ttime: finishUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\treturn businessHourData;\n\t}\n\n\tprotected getUTCFromTimezone(timezone?: string): string {\n\t\tif (!timezone) {\n\t\t\treturn String(moment().utcOffset() / 60);\n\t\t}\n\t\treturn moment.tz(timezone).format('Z');\n\t}\n\n\tprivate formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc: any, format: string): string {\n\t\treturn moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm')\n\t\t\t.add(moment().utcOffset() / 60, 'hours')\n\t\t\t.format(format);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/AbstractBusinessHour.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/business-hour/AbstractBusinessHour.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/AbstractBusinessHour.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/AbstractBusinessHour.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AtLeast, ILivechatAgentStatus, ILivechatBusinessHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel, IUsersModel } from '@rocket.chat/model-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment-timezone';\nimport type { UpdateFilter } from 'mongodb';\n\nimport type { IWorkHoursCronJobsWrapper } from '../../../../server/models/raw/LivechatBusinessHours';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\n\nexport interface IBusinessHourBehavior {\n\tfindHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]>;\n\topenBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tcloseBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tonDisableBusinessHours(): Promise<void>;\n\tonAddAgentToDepartment(options?: { departmentId: string; agentsId: string[] }): Promise<any>;\n\tonRemoveAgentFromDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveDepartment(options: { department: ILivechatDepartment; agentsIds: string[] }): Promise<any>;\n\tonDepartmentDisabled(department?: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonStartBusinessHours(): Promise<void>;\n\tafterSaveBusinessHours(businessHourData: ILivechatBusinessHour): Promise<void>;\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean>;\n\tchangeAgentActiveStatus(agentId: string, status: string): Promise<any>;\n\t// If a new agent is created, this callback will be called\n\tonNewAgentCreated(agentId: string): Promise<void>;\n}\n\nexport interface IBusinessHourType {\n\tname: string;\n\tgetBusinessHour(id?: string): Promise<ILivechatBusinessHour | null>;\n\tsaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<ILivechatBusinessHour>;\n\tremoveBusinessHourById(id: string): Promise<void>;\n}\n\nexport abstract class AbstractBusinessHourBehavior {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tasync findHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.BusinessHourRepository.findHoursToScheduleJobs();\n\t}\n\n\tasync onDisableBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync changeAgentActiveStatus(agentId: string, status: ILivechatAgentStatus): Promise<any> {\n\t\tconst result = await this.UsersRepository.setLivechatStatusIf(\n\t\t\tagentId,\n\t\t\tstatus,\n\t\t\t// Why this works: statusDefault is the property set when a user manually changes their status\n\t\t\t// So if it's set to offline, we can be sure the user will be offline after login and we can skip the update\n\t\t\t{ livechatStatusSystemModified: true, statusDefault: { $ne: 'offline' } },\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: agentId,\n\t\t\t\tdiff: { statusLivechat: 'available', livechatStatusSystemModified: true },\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractBusinessHourType {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tprotected async baseSaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<string> {\n\t\tbusinessHourData.active = Boolean(businessHourData.active);\n\t\tbusinessHourData = this.convertWorkHours(businessHourData);\n\t\tif (businessHourData._id) {\n\t\t\tawait this.BusinessHourRepository.updateOne({ _id: businessHourData._id }, {\n\t\t\t\t$set: businessHourData,\n\t\t\t} as UpdateFilter<ILivechatBusinessHour>); // TODO: Remove this cast when TypeScript is updated\n\t\t\treturn businessHourData._id;\n\t\t}\n\t\tconst { insertedId } = await this.BusinessHourRepository.insertOne(businessHourData);\n\t\treturn insertedId;\n\t}\n\n\tprivate convertWorkHours(businessHourData: ILivechatBusinessHour): ILivechatBusinessHour {\n\t\tbusinessHourData.workHours.forEach((hour: any) => {\n\t\t\tconst startUtc = moment.tz(`${hour.day}:${hour.start}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\tconst finishUtc = moment.tz(`${hour.day}:${hour.finish}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\n\t\t\tif (hour.open && finishUtc.isBefore(startUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-before-start-time');\n\t\t\t}\n\n\t\t\tif (hour.open && startUtc.isSame(finishUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-equals-start-time');\n\t\t\t}\n\n\t\t\thour.start = {\n\t\t\t\ttime: hour.start,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: startUtc.clone().format('dddd'),\n\t\t\t\t\ttime: startUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t\thour.finish = {\n\t\t\t\ttime: hour.finish,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: finishUtc.clone().format('dddd'),\n\t\t\t\t\ttime: finishUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\treturn businessHourData;\n\t}\n\n\tprotected getUTCFromTimezone(timezone?: string): string {\n\t\tif (!timezone) {\n\t\t\treturn String(moment().utcOffset() / 60);\n\t\t}\n\t\treturn moment.tz(timezone).format('Z');\n\t}\n\n\tprivate formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc: any, format: string): string {\n\t\treturn moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm')\n\t\t\t.add(moment().utcOffset() / 60, 'hours')\n\t\t\t.format(format);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      AbstractBusinessHourBehavior: () => AbstractBusinessHourBehavior,\n      AbstractBusinessHourType: () => AbstractBusinessHourType\n    });\n    let LivechatBusinessHours, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatBusinessHours(v) {\n        LivechatBusinessHours = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let moment;\n    module.link(\"moment-timezone\", {\n      default(v) {\n        moment = v;\n      }\n    }, 1);\n    let notifyOnUserChange;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AbstractBusinessHourBehavior {\n      constructor() {\n        this.BusinessHourRepository = LivechatBusinessHours;\n        this.UsersRepository = Users;\n      }\n      async findHoursToCreateJobs() {\n        return this.BusinessHourRepository.findHoursToScheduleJobs();\n      }\n      async onDisableBusinessHours() {\n        await this.UsersRepository.removeBusinessHoursFromAllUsers();\n      }\n      async allowAgentChangeServiceStatus(agentId) {\n        return this.UsersRepository.isAgentWithinBusinessHours(agentId);\n      }\n      async changeAgentActiveStatus(agentId, status) {\n        const result = await this.UsersRepository.setLivechatStatusIf(agentId, status,\n        // Why this works: statusDefault is the property set when a user manually changes their status\n        // So if it's set to offline, we can be sure the user will be offline after login and we can skip the update\n        {\n          livechatStatusSystemModified: true,\n          statusDefault: {\n            $ne: 'offline'\n          }\n        }, {\n          livechatStatusSystemModified: true\n        });\n        if (result.modifiedCount > 0) {\n          void notifyOnUserChange({\n            clientAction: 'updated',\n            id: agentId,\n            diff: {\n              statusLivechat: 'available',\n              livechatStatusSystemModified: true\n            }\n          });\n        }\n        return result;\n      }\n    }\n    class AbstractBusinessHourType {\n      constructor() {\n        this.BusinessHourRepository = LivechatBusinessHours;\n        this.UsersRepository = Users;\n      }\n      async baseSaveBusinessHour(businessHourData) {\n        businessHourData.active = Boolean(businessHourData.active);\n        businessHourData = this.convertWorkHours(businessHourData);\n        if (businessHourData._id) {\n          await this.BusinessHourRepository.updateOne({\n            _id: businessHourData._id\n          }, {\n            $set: businessHourData\n          }); // TODO: Remove this cast when TypeScript is updated\n          return businessHourData._id;\n        }\n        const {\n          insertedId\n        } = await this.BusinessHourRepository.insertOne(businessHourData);\n        return insertedId;\n      }\n      convertWorkHours(businessHourData) {\n        businessHourData.workHours.forEach(hour => {\n          const startUtc = moment.tz(\"\".concat(hour.day, \":\").concat(hour.start), 'dddd:HH:mm', businessHourData.timezone.name).utc();\n          const finishUtc = moment.tz(\"\".concat(hour.day, \":\").concat(hour.finish), 'dddd:HH:mm', businessHourData.timezone.name).utc();\n          if (hour.open && finishUtc.isBefore(startUtc)) {\n            throw new Error('error-business-hour-finish-time-before-start-time');\n          }\n          if (hour.open && startUtc.isSame(finishUtc)) {\n            throw new Error('error-business-hour-finish-time-equals-start-time');\n          }\n          hour.start = {\n            time: hour.start,\n            utc: {\n              dayOfWeek: startUtc.clone().format('dddd'),\n              time: startUtc.clone().format('HH:mm')\n            },\n            cron: {\n              dayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n              time: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm')\n            }\n          };\n          hour.finish = {\n            time: hour.finish,\n            utc: {\n              dayOfWeek: finishUtc.clone().format('dddd'),\n              time: finishUtc.clone().format('HH:mm')\n            },\n            cron: {\n              dayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n              time: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm')\n            }\n          };\n        });\n        return businessHourData;\n      }\n      getUTCFromTimezone(timezone) {\n        if (!timezone) {\n          return String(moment().utcOffset() / 60);\n        }\n        return moment.tz(timezone).format('Z');\n      }\n      formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc, format) {\n        return moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm').add(moment().utcOffset() / 60, 'hours').format(format);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","AbstractBusinessHourBehavior","AbstractBusinessHourType","LivechatBusinessHours","Users","link","v","moment","default","notifyOnUserChange","__reifyWaitForDeps__","constructor","BusinessHourRepository","UsersRepository","findHoursToCreateJobs","findHoursToScheduleJobs","onDisableBusinessHours","removeBusinessHoursFromAllUsers","allowAgentChangeServiceStatus","agentId","isAgentWithinBusinessHours","changeAgentActiveStatus","status","result","setLivechatStatusIf","livechatStatusSystemModified","statusDefault","$ne","modifiedCount","clientAction","id","diff","statusLivechat","baseSaveBusinessHour","businessHourData","active","Boolean","convertWorkHours","_id","updateOne","$set","insertedId","insertOne","workHours","forEach","hour","startUtc","tz","concat","day","start","timezone","name","utc","finishUtc","finish","open","isBefore","Error","isSame","time","dayOfWeek","clone","format","cron","formatDayOfTheWeekFromServerTimezoneAndUtcHour","getUTCFromTimezone","String","utcOffset","add","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/business-hour/AbstractBusinessHour.ts"],"sourcesContent":["import type { AtLeast, ILivechatAgentStatus, ILivechatBusinessHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport type { ILivechatBusinessHoursModel, IUsersModel } from '@rocket.chat/model-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment-timezone';\nimport type { UpdateFilter } from 'mongodb';\n\nimport type { IWorkHoursCronJobsWrapper } from '../../../../server/models/raw/LivechatBusinessHours';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\n\nexport interface IBusinessHourBehavior {\n\tfindHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]>;\n\topenBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tcloseBusinessHoursByDayAndHour(day: string, hour: string): Promise<void>;\n\tonDisableBusinessHours(): Promise<void>;\n\tonAddAgentToDepartment(options?: { departmentId: string; agentsId: string[] }): Promise<any>;\n\tonRemoveAgentFromDepartment(options?: Record<string, any>): Promise<any>;\n\tonRemoveDepartment(options: { department: ILivechatDepartment; agentsIds: string[] }): Promise<any>;\n\tonDepartmentDisabled(department?: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void>;\n\tonStartBusinessHours(): Promise<void>;\n\tafterSaveBusinessHours(businessHourData: ILivechatBusinessHour): Promise<void>;\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean>;\n\tchangeAgentActiveStatus(agentId: string, status: string): Promise<any>;\n\t// If a new agent is created, this callback will be called\n\tonNewAgentCreated(agentId: string): Promise<void>;\n}\n\nexport interface IBusinessHourType {\n\tname: string;\n\tgetBusinessHour(id?: string): Promise<ILivechatBusinessHour | null>;\n\tsaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<ILivechatBusinessHour>;\n\tremoveBusinessHourById(id: string): Promise<void>;\n}\n\nexport abstract class AbstractBusinessHourBehavior {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tasync findHoursToCreateJobs(): Promise<IWorkHoursCronJobsWrapper[]> {\n\t\treturn this.BusinessHourRepository.findHoursToScheduleJobs();\n\t}\n\n\tasync onDisableBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync changeAgentActiveStatus(agentId: string, status: ILivechatAgentStatus): Promise<any> {\n\t\tconst result = await this.UsersRepository.setLivechatStatusIf(\n\t\t\tagentId,\n\t\t\tstatus,\n\t\t\t// Why this works: statusDefault is the property set when a user manually changes their status\n\t\t\t// So if it's set to offline, we can be sure the user will be offline after login and we can skip the update\n\t\t\t{ livechatStatusSystemModified: true, statusDefault: { $ne: 'offline' } },\n\t\t\t{ livechatStatusSystemModified: true },\n\t\t);\n\n\t\tif (result.modifiedCount > 0) {\n\t\t\tvoid notifyOnUserChange({\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tid: agentId,\n\t\t\t\tdiff: { statusLivechat: 'available', livechatStatusSystemModified: true },\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractBusinessHourType {\n\tprotected BusinessHourRepository: ILivechatBusinessHoursModel = LivechatBusinessHours;\n\n\tprotected UsersRepository: IUsersModel = Users;\n\n\tprotected async baseSaveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<string> {\n\t\tbusinessHourData.active = Boolean(businessHourData.active);\n\t\tbusinessHourData = this.convertWorkHours(businessHourData);\n\t\tif (businessHourData._id) {\n\t\t\tawait this.BusinessHourRepository.updateOne({ _id: businessHourData._id }, {\n\t\t\t\t$set: businessHourData,\n\t\t\t} as UpdateFilter<ILivechatBusinessHour>); // TODO: Remove this cast when TypeScript is updated\n\t\t\treturn businessHourData._id;\n\t\t}\n\t\tconst { insertedId } = await this.BusinessHourRepository.insertOne(businessHourData);\n\t\treturn insertedId;\n\t}\n\n\tprivate convertWorkHours(businessHourData: ILivechatBusinessHour): ILivechatBusinessHour {\n\t\tbusinessHourData.workHours.forEach((hour: any) => {\n\t\t\tconst startUtc = moment.tz(`${hour.day}:${hour.start}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\t\t\tconst finishUtc = moment.tz(`${hour.day}:${hour.finish}`, 'dddd:HH:mm', businessHourData.timezone.name).utc();\n\n\t\t\tif (hour.open && finishUtc.isBefore(startUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-before-start-time');\n\t\t\t}\n\n\t\t\tif (hour.open && startUtc.isSame(finishUtc)) {\n\t\t\t\tthrow new Error('error-business-hour-finish-time-equals-start-time');\n\t\t\t}\n\n\t\t\thour.start = {\n\t\t\t\ttime: hour.start,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: startUtc.clone().format('dddd'),\n\t\t\t\t\ttime: startUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(startUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t\thour.finish = {\n\t\t\t\ttime: hour.finish,\n\t\t\t\tutc: {\n\t\t\t\t\tdayOfWeek: finishUtc.clone().format('dddd'),\n\t\t\t\t\ttime: finishUtc.clone().format('HH:mm'),\n\t\t\t\t},\n\t\t\t\tcron: {\n\t\t\t\t\tdayOfWeek: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'dddd'),\n\t\t\t\t\ttime: this.formatDayOfTheWeekFromServerTimezoneAndUtcHour(finishUtc, 'HH:mm'),\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\t\treturn businessHourData;\n\t}\n\n\tprotected getUTCFromTimezone(timezone?: string): string {\n\t\tif (!timezone) {\n\t\t\treturn String(moment().utcOffset() / 60);\n\t\t}\n\t\treturn moment.tz(timezone).format('Z');\n\t}\n\n\tprivate formatDayOfTheWeekFromServerTimezoneAndUtcHour(utc: any, format: string): string {\n\t\treturn moment(utc.format('dddd:HH:mm'), 'dddd:HH:mm')\n\t\t\t.add(moment().utcOffset() / 60, 'hours')\n\t\t\t.format(format);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"68f406e86935c09f70197e775db80fc202d53b48"}
