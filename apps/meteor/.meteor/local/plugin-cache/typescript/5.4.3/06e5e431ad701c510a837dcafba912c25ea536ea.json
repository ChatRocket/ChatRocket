{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/discussion/server/methods/createDiscussion.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/discussion/server/methods/createDiscussion.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/discussion/server/methods/createDiscussion.ts","inputSourceMap":{"version":3,"file":"app/discussion/server/methods/createDiscussion.ts","sourceRoot":"","sources":["app/discussion/server/methods/createDiscussion.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IRoom, IUser, MessageAttachmentDefault } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Meteor } from 'meteor/meteor';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasAtLeastOnePermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { attachMessage } from '../../../lib/server/functions/attachMessage';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { afterSaveMessageAsync } from '../../../lib/server/lib/afterSaveMessage';\nimport { settings } from '../../../settings/server';\n\nconst getParentRoom = async (rid: IRoom['_id']) => {\n\tconst room = await Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { projection: { _id: 1 } }) : room);\n};\n\nasync function createDiscussionMessage(\n\trid: IRoom['_id'],\n\tuser: IUser,\n\tdrid: IRoom['_id'],\n\tmsg: IMessage['msg'],\n\tmessageEmbedded?: MessageAttachmentDefault,\n): Promise<IMessage> {\n\treturn Message.saveSystemMessage('discussion-created', rid, msg, user, {\n\t\tdrid,\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\nasync function mentionMessage(\n\trid: IRoom['_id'],\n\t{ _id, username, name }: Pick<IUser, '_id' | 'username' | 'name'>,\n\tmessageEmbedded?: MessageAttachmentDefault,\n) {\n\tif (!username) {\n\t\treturn null;\n\t}\n\tawait Messages.insertOne({\n\t\trid,\n\t\tmsg: '',\n\t\tu: { _id, username, name },\n\t\tts: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\ntype CreateDiscussionProperties = {\n\tprid: IRoom['_id'];\n\tpmid?: IMessage['_id'];\n\tt_name: string;\n\treply?: string;\n\tusers: Array<Exclude<IUser['username'], undefined>>;\n\tuser: IUser;\n\tencrypted?: boolean;\n\ttopic?: string;\n};\n\nconst create = async ({\n\tprid,\n\tpmid,\n\tt_name: discussionName,\n\treply,\n\tusers,\n\tuser,\n\tencrypted,\n\ttopic,\n}: CreateDiscussionProperties): Promise<IRoom & { rid: string }> => {\n\t// if you set both, prid and pmid, and the rooms dont match... should throw an error)\n\tlet message: null | IMessage = null;\n\tif (pmid) {\n\t\tmessage = await Messages.findOneById(pmid);\n\t\tif (!message) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid message', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\t\tif (prid) {\n\t\t\tconst parentRoom = await getParentRoom(message.rid);\n\t\t\tif (!parentRoom || prid !== parentRoom._id) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-arguments', 'Root message room ID does not match parent room ID ', {\n\t\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tprid = message.rid;\n\t\t}\n\t}\n\n\tif (!prid) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Missing parent room ID', { method: 'DiscussionCreation' });\n\t}\n\n\tlet parentRoom;\n\ttry {\n\t\tparentRoom = await canSendMessageAsync(prid, { uid: user._id, username: user.username, type: user.type });\n\t} catch (error) {\n\t\tthrow new Meteor.Error((error as Error).message);\n\t}\n\n\tif (parentRoom.prid) {\n\t\tthrow new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (typeof encrypted !== 'boolean') {\n\t\tencrypted = Boolean(parentRoom.encrypted);\n\t}\n\n\tif (encrypted && reply) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (pmid) {\n\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t},\n\t\t);\n\t\tif (discussionAlreadyExists) {\n\t\t\t// do not allow multiple discussions to the same message'\\\n\t\t\tawait addUserToRoom(discussionAlreadyExists._id, user);\n\t\t\treturn { ...discussionAlreadyExists, rid: discussionAlreadyExists._id };\n\t\t}\n\t}\n\n\tconst name = Random.id();\n\n\t// auto invite the replied message owner\n\tconst invitedUsers = message ? [message.u.username, ...users] : users;\n\n\tconst type = await roomCoordinator.getRoomDirectives(parentRoom.t).getDiscussionType(parentRoom);\n\tconst description = parentRoom.encrypted ? '' : message?.msg;\n\tconst discussionTopic = topic || parentRoom.name;\n\n\tif (!type) {\n\t\tthrow new Meteor.Error('error-invalid-type', 'Cannot define discussion room type', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tconst discussion = await createRoom(\n\t\ttype,\n\t\tname,\n\t\tuser,\n\t\t[...new Set(invitedUsers)].filter(Boolean),\n\t\tfalse,\n\t\tfalse,\n\t\t{\n\t\t\tfname: discussionName,\n\t\t\tdescription, // TODO discussions remove\n\t\t\ttopic: discussionTopic,\n\t\t\tprid,\n\t\t\tencrypted,\n\t\t},\n\t\t{\n\t\t\tcreator: user._id,\n\t\t},\n\t);\n\n\tlet discussionMsg;\n\tif (message) {\n\t\tif (parentRoom.encrypted) {\n\t\t\tmessage.msg = i18n.t('Encrypted_message');\n\t\t}\n\t\tawait mentionMessage(discussion._id, user, attachMessage(message, parentRoom));\n\n\t\tdiscussionMsg = await createDiscussionMessage(message.rid, user, discussion._id, discussionName, attachMessage(message, parentRoom));\n\t} else {\n\t\tdiscussionMsg = await createDiscussionMessage(prid, user, discussion._id, discussionName);\n\t}\n\n\tif (reply) {\n\t\tawait sendMessage(user, { msg: reply }, discussion);\n\t}\n\n\tif (discussionMsg) {\n\t\tafterSaveMessageAsync(discussionMsg, parentRoom);\n\t}\n\n\treturn discussion;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcreateDiscussion: typeof create;\n\t}\n}\n\nexport const createDiscussion = async (\n\tuserId: string,\n\t{ prid, pmid, t_name: discussionName, reply, users, encrypted, topic }: Omit<CreateDiscussionProperties, 'user'>,\n): Promise<\n\tIRoom & {\n\t\trid: string;\n\t}\n> => {\n\tif (!settings.get('Discussion_enabled')) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\n\tif (!userId) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (!(await hasAtLeastOnePermissionAsync(userId, ['start-discussion', 'start-discussion-other-user'], prid))) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\tconst user = await Users.findOneById(userId, { projection: { services: 0 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'createDiscussion',\n\t\t});\n\t}\n\n\treturn create({ prid, pmid, t_name: discussionName, reply, users, user, encrypted, topic });\n};\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Create discussion by room or message\n\t * @constructor\n\t * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n\t * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n\t * @param {string} reply - The reply, optional\n\t * @param {string} t_name - discussion name\n\t * @param {string[]} users - users to be added\n\t * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n\t */\n\tasync createDiscussion({ prid, pmid, t_name: discussionName, reply, users, encrypted }: CreateDiscussionProperties) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\n\t\treturn createDiscussion(uid, { prid, pmid, t_name: discussionName, reply, users, encrypted });\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/discussion/server/methods/createDiscussion.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/discussion/server/methods/createDiscussion.ts","inputSourceMap":{"version":3,"file":"app/discussion/server/methods/createDiscussion.ts","sourceRoot":"","sources":["app/discussion/server/methods/createDiscussion.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IRoom, IUser, MessageAttachmentDefault } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Meteor } from 'meteor/meteor';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasAtLeastOnePermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { attachMessage } from '../../../lib/server/functions/attachMessage';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { afterSaveMessageAsync } from '../../../lib/server/lib/afterSaveMessage';\nimport { settings } from '../../../settings/server';\n\nconst getParentRoom = async (rid: IRoom['_id']) => {\n\tconst room = await Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { projection: { _id: 1 } }) : room);\n};\n\nasync function createDiscussionMessage(\n\trid: IRoom['_id'],\n\tuser: IUser,\n\tdrid: IRoom['_id'],\n\tmsg: IMessage['msg'],\n\tmessageEmbedded?: MessageAttachmentDefault,\n): Promise<IMessage> {\n\treturn Message.saveSystemMessage('discussion-created', rid, msg, user, {\n\t\tdrid,\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\nasync function mentionMessage(\n\trid: IRoom['_id'],\n\t{ _id, username, name }: Pick<IUser, '_id' | 'username' | 'name'>,\n\tmessageEmbedded?: MessageAttachmentDefault,\n) {\n\tif (!username) {\n\t\treturn null;\n\t}\n\tawait Messages.insertOne({\n\t\trid,\n\t\tmsg: '',\n\t\tu: { _id, username, name },\n\t\tts: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\ntype CreateDiscussionProperties = {\n\tprid: IRoom['_id'];\n\tpmid?: IMessage['_id'];\n\tt_name: string;\n\treply?: string;\n\tusers: Array<Exclude<IUser['username'], undefined>>;\n\tuser: IUser;\n\tencrypted?: boolean;\n\ttopic?: string;\n};\n\nconst create = async ({\n\tprid,\n\tpmid,\n\tt_name: discussionName,\n\treply,\n\tusers,\n\tuser,\n\tencrypted,\n\ttopic,\n}: CreateDiscussionProperties): Promise<IRoom & { rid: string }> => {\n\t// if you set both, prid and pmid, and the rooms dont match... should throw an error)\n\tlet message: null | IMessage = null;\n\tif (pmid) {\n\t\tmessage = await Messages.findOneById(pmid);\n\t\tif (!message) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid message', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\t\tif (prid) {\n\t\t\tconst parentRoom = await getParentRoom(message.rid);\n\t\t\tif (!parentRoom || prid !== parentRoom._id) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-arguments', 'Root message room ID does not match parent room ID ', {\n\t\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tprid = message.rid;\n\t\t}\n\t}\n\n\tif (!prid) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Missing parent room ID', { method: 'DiscussionCreation' });\n\t}\n\n\tlet parentRoom;\n\ttry {\n\t\tparentRoom = await canSendMessageAsync(prid, { uid: user._id, username: user.username, type: user.type });\n\t} catch (error) {\n\t\tthrow new Meteor.Error((error as Error).message);\n\t}\n\n\tif (parentRoom.prid) {\n\t\tthrow new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (typeof encrypted !== 'boolean') {\n\t\tencrypted = Boolean(parentRoom.encrypted);\n\t}\n\n\tif (encrypted && reply) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (pmid) {\n\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t},\n\t\t);\n\t\tif (discussionAlreadyExists) {\n\t\t\t// do not allow multiple discussions to the same message'\\\n\t\t\tawait addUserToRoom(discussionAlreadyExists._id, user);\n\t\t\treturn { ...discussionAlreadyExists, rid: discussionAlreadyExists._id };\n\t\t}\n\t}\n\n\tconst name = Random.id();\n\n\t// auto invite the replied message owner\n\tconst invitedUsers = message ? [message.u.username, ...users] : users;\n\n\tconst type = await roomCoordinator.getRoomDirectives(parentRoom.t).getDiscussionType(parentRoom);\n\tconst description = parentRoom.encrypted ? '' : message?.msg;\n\tconst discussionTopic = topic || parentRoom.name;\n\n\tif (!type) {\n\t\tthrow new Meteor.Error('error-invalid-type', 'Cannot define discussion room type', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tconst discussion = await createRoom(\n\t\ttype,\n\t\tname,\n\t\tuser,\n\t\t[...new Set(invitedUsers)].filter(Boolean),\n\t\tfalse,\n\t\tfalse,\n\t\t{\n\t\t\tfname: discussionName,\n\t\t\tdescription, // TODO discussions remove\n\t\t\ttopic: discussionTopic,\n\t\t\tprid,\n\t\t\tencrypted,\n\t\t},\n\t\t{\n\t\t\tcreator: user._id,\n\t\t},\n\t);\n\n\tlet discussionMsg;\n\tif (message) {\n\t\tif (parentRoom.encrypted) {\n\t\t\tmessage.msg = i18n.t('Encrypted_message');\n\t\t}\n\t\tawait mentionMessage(discussion._id, user, attachMessage(message, parentRoom));\n\n\t\tdiscussionMsg = await createDiscussionMessage(message.rid, user, discussion._id, discussionName, attachMessage(message, parentRoom));\n\t} else {\n\t\tdiscussionMsg = await createDiscussionMessage(prid, user, discussion._id, discussionName);\n\t}\n\n\tif (reply) {\n\t\tawait sendMessage(user, { msg: reply }, discussion);\n\t}\n\n\tif (discussionMsg) {\n\t\tafterSaveMessageAsync(discussionMsg, parentRoom);\n\t}\n\n\treturn discussion;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcreateDiscussion: typeof create;\n\t}\n}\n\nexport const createDiscussion = async (\n\tuserId: string,\n\t{ prid, pmid, t_name: discussionName, reply, users, encrypted, topic }: Omit<CreateDiscussionProperties, 'user'>,\n): Promise<\n\tIRoom & {\n\t\trid: string;\n\t}\n> => {\n\tif (!settings.get('Discussion_enabled')) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\n\tif (!userId) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (!(await hasAtLeastOnePermissionAsync(userId, ['start-discussion', 'start-discussion-other-user'], prid))) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\tconst user = await Users.findOneById(userId, { projection: { services: 0 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'createDiscussion',\n\t\t});\n\t}\n\n\treturn create({ prid, pmid, t_name: discussionName, reply, users, user, encrypted, topic });\n};\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Create discussion by room or message\n\t * @constructor\n\t * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n\t * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n\t * @param {string} reply - The reply, optional\n\t * @param {string} t_name - discussion name\n\t * @param {string[]} users - users to be added\n\t * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n\t */\n\tasync createDiscussion({ prid, pmid, t_name: discussionName, reply, users, encrypted }: CreateDiscussionProperties) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\n\t\treturn createDiscussion(uid, { prid, pmid, t_name: discussionName, reply, users, encrypted });\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      createDiscussion: () => createDiscussion\n    });\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let Messages, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 4);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 5);\n    let canSendMessageAsync;\n    module.link(\"../../../authorization/server/functions/canSendMessage\", {\n      canSendMessageAsync(v) {\n        canSendMessageAsync = v;\n      }\n    }, 6);\n    let hasAtLeastOnePermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasAtLeastOnePermissionAsync(v) {\n        hasAtLeastOnePermissionAsync = v;\n      }\n    }, 7);\n    let addUserToRoom;\n    module.link(\"../../../lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 8);\n    let attachMessage;\n    module.link(\"../../../lib/server/functions/attachMessage\", {\n      attachMessage(v) {\n        attachMessage = v;\n      }\n    }, 9);\n    let createRoom;\n    module.link(\"../../../lib/server/functions/createRoom\", {\n      createRoom(v) {\n        createRoom = v;\n      }\n    }, 10);\n    let sendMessage;\n    module.link(\"../../../lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 11);\n    let afterSaveMessageAsync;\n    module.link(\"../../../lib/server/lib/afterSaveMessage\", {\n      afterSaveMessageAsync(v) {\n        afterSaveMessageAsync = v;\n      }\n    }, 12);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 13);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getParentRoom = async rid => {\n      const room = await Rooms.findOne(rid);\n      return room && (room.prid ? Rooms.findOne(room.prid, {\n        projection: {\n          _id: 1\n        }\n      }) : room);\n    };\n    async function createDiscussionMessage(rid, user, drid, msg, messageEmbedded) {\n      return Message.saveSystemMessage('discussion-created', rid, msg, user, _objectSpread({\n        drid\n      }, messageEmbedded && {\n        attachments: [messageEmbedded]\n      }));\n    }\n    async function mentionMessage(rid, _ref, messageEmbedded) {\n      let {\n        _id,\n        username,\n        name\n      } = _ref;\n      if (!username) {\n        return null;\n      }\n      await Messages.insertOne(_objectSpread({\n        rid,\n        msg: '',\n        u: {\n          _id,\n          username,\n          name\n        },\n        ts: new Date(),\n        _updatedAt: new Date()\n      }, messageEmbedded && {\n        attachments: [messageEmbedded]\n      }));\n    }\n    const create = async _ref2 => {\n      var _message;\n      let {\n        prid,\n        pmid,\n        t_name: discussionName,\n        reply,\n        users,\n        user,\n        encrypted,\n        topic\n      } = _ref2;\n      // if you set both, prid and pmid, and the rooms dont match... should throw an error)\n      let message = null;\n      if (pmid) {\n        message = await Messages.findOneById(pmid);\n        if (!message) {\n          throw new Meteor.Error('error-invalid-message', 'Invalid message', {\n            method: 'DiscussionCreation'\n          });\n        }\n        if (prid) {\n          const parentRoom = await getParentRoom(message.rid);\n          if (!parentRoom || prid !== parentRoom._id) {\n            throw new Meteor.Error('error-invalid-arguments', 'Root message room ID does not match parent room ID ', {\n              method: 'DiscussionCreation'\n            });\n          }\n        } else {\n          prid = message.rid;\n        }\n      }\n      if (!prid) {\n        throw new Meteor.Error('error-invalid-arguments', 'Missing parent room ID', {\n          method: 'DiscussionCreation'\n        });\n      }\n      let parentRoom;\n      try {\n        parentRoom = await canSendMessageAsync(prid, {\n          uid: user._id,\n          username: user.username,\n          type: user.type\n        });\n      } catch (error) {\n        throw new Meteor.Error(error.message);\n      }\n      if (parentRoom.prid) {\n        throw new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n          method: 'DiscussionCreation'\n        });\n      }\n      if (typeof encrypted !== 'boolean') {\n        encrypted = Boolean(parentRoom.encrypted);\n      }\n      if (encrypted && reply) {\n        throw new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n          method: 'DiscussionCreation'\n        });\n      }\n      if (pmid) {\n        const discussionAlreadyExists = await Rooms.findOne({\n          prid,\n          pmid\n        }, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (discussionAlreadyExists) {\n          // do not allow multiple discussions to the same message'\\\n          await addUserToRoom(discussionAlreadyExists._id, user);\n          return _objectSpread(_objectSpread({}, discussionAlreadyExists), {}, {\n            rid: discussionAlreadyExists._id\n          });\n        }\n      }\n      const name = Random.id();\n      // auto invite the replied message owner\n      const invitedUsers = message ? [message.u.username, ...users] : users;\n      const type = await roomCoordinator.getRoomDirectives(parentRoom.t).getDiscussionType(parentRoom);\n      const description = parentRoom.encrypted ? '' : (_message = message) === null || _message === void 0 ? void 0 : _message.msg;\n      const discussionTopic = topic || parentRoom.name;\n      if (!type) {\n        throw new Meteor.Error('error-invalid-type', 'Cannot define discussion room type', {\n          method: 'DiscussionCreation'\n        });\n      }\n      const discussion = await createRoom(type, name, user, [...new Set(invitedUsers)].filter(Boolean), false, false, {\n        fname: discussionName,\n        description,\n        // TODO discussions remove\n        topic: discussionTopic,\n        prid,\n        encrypted\n      }, {\n        creator: user._id\n      });\n      let discussionMsg;\n      if (message) {\n        if (parentRoom.encrypted) {\n          message.msg = i18n.t('Encrypted_message');\n        }\n        await mentionMessage(discussion._id, user, attachMessage(message, parentRoom));\n        discussionMsg = await createDiscussionMessage(message.rid, user, discussion._id, discussionName, attachMessage(message, parentRoom));\n      } else {\n        discussionMsg = await createDiscussionMessage(prid, user, discussion._id, discussionName);\n      }\n      if (reply) {\n        await sendMessage(user, {\n          msg: reply\n        }, discussion);\n      }\n      if (discussionMsg) {\n        afterSaveMessageAsync(discussionMsg, parentRoom);\n      }\n      return discussion;\n    };\n    const createDiscussion = async (userId, _ref3) => {\n      let {\n        prid,\n        pmid,\n        t_name: discussionName,\n        reply,\n        users,\n        encrypted,\n        topic\n      } = _ref3;\n      if (!settings.get('Discussion_enabled')) {\n        throw new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', {\n          method: 'createDiscussion'\n        });\n      }\n      if (!userId) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'DiscussionCreation'\n        });\n      }\n      if (!(await hasAtLeastOnePermissionAsync(userId, ['start-discussion', 'start-discussion-other-user'], prid))) {\n        throw new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', {\n          method: 'createDiscussion'\n        });\n      }\n      const user = await Users.findOneById(userId, {\n        projection: {\n          services: 0\n        }\n      });\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'createDiscussion'\n        });\n      }\n      return create({\n        prid,\n        pmid,\n        t_name: discussionName,\n        reply,\n        users,\n        user,\n        encrypted,\n        topic\n      });\n    };\n    Meteor.methods({\n      /**\n       * Create discussion by room or message\n       * @constructor\n       * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n       * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n       * @param {string} reply - The reply, optional\n       * @param {string} t_name - discussion name\n       * @param {string[]} users - users to be added\n       * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n       */\n      async createDiscussion(_ref4) {\n        let {\n          prid,\n          pmid,\n          t_name: discussionName,\n          reply,\n          users,\n          encrypted\n        } = _ref4;\n        const uid = Meteor.userId();\n        if (!uid) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'DiscussionCreation'\n          });\n        }\n        return createDiscussion(uid, {\n          prid,\n          pmid,\n          t_name: discussionName,\n          reply,\n          users,\n          encrypted\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","createDiscussion","Message","Messages","Rooms","Users","Random","Meteor","i18n","roomCoordinator","canSendMessageAsync","hasAtLeastOnePermissionAsync","addUserToRoom","attachMessage","createRoom","sendMessage","afterSaveMessageAsync","settings","__reifyWaitForDeps__","getParentRoom","rid","room","findOne","prid","projection","_id","createDiscussionMessage","user","drid","msg","messageEmbedded","saveSystemMessage","attachments","mentionMessage","_ref","username","name","insertOne","u","ts","Date","_updatedAt","create","_ref2","_message","pmid","t_name","discussionName","reply","users","encrypted","topic","message","findOneById","Error","method","parentRoom","uid","type","error","Boolean","discussionAlreadyExists","id","invitedUsers","getRoomDirectives","t","getDiscussionType","description","discussionTopic","discussion","Set","filter","fname","creator","discussionMsg","userId","_ref3","get","services","methods","_ref4","__reify_async_result__","_reifyError","self","async"],"sources":["app/discussion/server/methods/createDiscussion.ts"],"sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IRoom, IUser, MessageAttachmentDefault } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Meteor } from 'meteor/meteor';\n\nimport { i18n } from '../../../../server/lib/i18n';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasAtLeastOnePermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../lib/server/functions/addUserToRoom';\nimport { attachMessage } from '../../../lib/server/functions/attachMessage';\nimport { createRoom } from '../../../lib/server/functions/createRoom';\nimport { sendMessage } from '../../../lib/server/functions/sendMessage';\nimport { afterSaveMessageAsync } from '../../../lib/server/lib/afterSaveMessage';\nimport { settings } from '../../../settings/server';\n\nconst getParentRoom = async (rid: IRoom['_id']) => {\n\tconst room = await Rooms.findOne(rid);\n\treturn room && (room.prid ? Rooms.findOne(room.prid, { projection: { _id: 1 } }) : room);\n};\n\nasync function createDiscussionMessage(\n\trid: IRoom['_id'],\n\tuser: IUser,\n\tdrid: IRoom['_id'],\n\tmsg: IMessage['msg'],\n\tmessageEmbedded?: MessageAttachmentDefault,\n): Promise<IMessage> {\n\treturn Message.saveSystemMessage('discussion-created', rid, msg, user, {\n\t\tdrid,\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\nasync function mentionMessage(\n\trid: IRoom['_id'],\n\t{ _id, username, name }: Pick<IUser, '_id' | 'username' | 'name'>,\n\tmessageEmbedded?: MessageAttachmentDefault,\n) {\n\tif (!username) {\n\t\treturn null;\n\t}\n\tawait Messages.insertOne({\n\t\trid,\n\t\tmsg: '',\n\t\tu: { _id, username, name },\n\t\tts: new Date(),\n\t\t_updatedAt: new Date(),\n\t\t...(messageEmbedded && { attachments: [messageEmbedded] }),\n\t});\n}\n\ntype CreateDiscussionProperties = {\n\tprid: IRoom['_id'];\n\tpmid?: IMessage['_id'];\n\tt_name: string;\n\treply?: string;\n\tusers: Array<Exclude<IUser['username'], undefined>>;\n\tuser: IUser;\n\tencrypted?: boolean;\n\ttopic?: string;\n};\n\nconst create = async ({\n\tprid,\n\tpmid,\n\tt_name: discussionName,\n\treply,\n\tusers,\n\tuser,\n\tencrypted,\n\ttopic,\n}: CreateDiscussionProperties): Promise<IRoom & { rid: string }> => {\n\t// if you set both, prid and pmid, and the rooms dont match... should throw an error)\n\tlet message: null | IMessage = null;\n\tif (pmid) {\n\t\tmessage = await Messages.findOneById(pmid);\n\t\tif (!message) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid message', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\t\tif (prid) {\n\t\t\tconst parentRoom = await getParentRoom(message.rid);\n\t\t\tif (!parentRoom || prid !== parentRoom._id) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-arguments', 'Root message room ID does not match parent room ID ', {\n\t\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tprid = message.rid;\n\t\t}\n\t}\n\n\tif (!prid) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Missing parent room ID', { method: 'DiscussionCreation' });\n\t}\n\n\tlet parentRoom;\n\ttry {\n\t\tparentRoom = await canSendMessageAsync(prid, { uid: user._id, username: user.username, type: user.type });\n\t} catch (error) {\n\t\tthrow new Meteor.Error((error as Error).message);\n\t}\n\n\tif (parentRoom.prid) {\n\t\tthrow new Meteor.Error('error-nested-discussion', 'Cannot create nested discussions', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (typeof encrypted !== 'boolean') {\n\t\tencrypted = Boolean(parentRoom.encrypted);\n\t}\n\n\tif (encrypted && reply) {\n\t\tthrow new Meteor.Error('error-invalid-arguments', 'Encrypted discussions must not receive an initial reply.', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (pmid) {\n\t\tconst discussionAlreadyExists = await Rooms.findOne(\n\t\t\t{\n\t\t\t\tprid,\n\t\t\t\tpmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t},\n\t\t);\n\t\tif (discussionAlreadyExists) {\n\t\t\t// do not allow multiple discussions to the same message'\\\n\t\t\tawait addUserToRoom(discussionAlreadyExists._id, user);\n\t\t\treturn { ...discussionAlreadyExists, rid: discussionAlreadyExists._id };\n\t\t}\n\t}\n\n\tconst name = Random.id();\n\n\t// auto invite the replied message owner\n\tconst invitedUsers = message ? [message.u.username, ...users] : users;\n\n\tconst type = await roomCoordinator.getRoomDirectives(parentRoom.t).getDiscussionType(parentRoom);\n\tconst description = parentRoom.encrypted ? '' : message?.msg;\n\tconst discussionTopic = topic || parentRoom.name;\n\n\tif (!type) {\n\t\tthrow new Meteor.Error('error-invalid-type', 'Cannot define discussion room type', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tconst discussion = await createRoom(\n\t\ttype,\n\t\tname,\n\t\tuser,\n\t\t[...new Set(invitedUsers)].filter(Boolean),\n\t\tfalse,\n\t\tfalse,\n\t\t{\n\t\t\tfname: discussionName,\n\t\t\tdescription, // TODO discussions remove\n\t\t\ttopic: discussionTopic,\n\t\t\tprid,\n\t\t\tencrypted,\n\t\t},\n\t\t{\n\t\t\tcreator: user._id,\n\t\t},\n\t);\n\n\tlet discussionMsg;\n\tif (message) {\n\t\tif (parentRoom.encrypted) {\n\t\t\tmessage.msg = i18n.t('Encrypted_message');\n\t\t}\n\t\tawait mentionMessage(discussion._id, user, attachMessage(message, parentRoom));\n\n\t\tdiscussionMsg = await createDiscussionMessage(message.rid, user, discussion._id, discussionName, attachMessage(message, parentRoom));\n\t} else {\n\t\tdiscussionMsg = await createDiscussionMessage(prid, user, discussion._id, discussionName);\n\t}\n\n\tif (reply) {\n\t\tawait sendMessage(user, { msg: reply }, discussion);\n\t}\n\n\tif (discussionMsg) {\n\t\tafterSaveMessageAsync(discussionMsg, parentRoom);\n\t}\n\n\treturn discussion;\n};\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tcreateDiscussion: typeof create;\n\t}\n}\n\nexport const createDiscussion = async (\n\tuserId: string,\n\t{ prid, pmid, t_name: discussionName, reply, users, encrypted, topic }: Omit<CreateDiscussionProperties, 'user'>,\n): Promise<\n\tIRoom & {\n\t\trid: string;\n\t}\n> => {\n\tif (!settings.get('Discussion_enabled')) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\n\tif (!userId) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'DiscussionCreation',\n\t\t});\n\t}\n\n\tif (!(await hasAtLeastOnePermissionAsync(userId, ['start-discussion', 'start-discussion-other-user'], prid))) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'You are not allowed to create a discussion', { method: 'createDiscussion' });\n\t}\n\tconst user = await Users.findOneById(userId, { projection: { services: 0 } });\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'createDiscussion',\n\t\t});\n\t}\n\n\treturn create({ prid, pmid, t_name: discussionName, reply, users, user, encrypted, topic });\n};\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Create discussion by room or message\n\t * @constructor\n\t * @param {string} prid - Parent Room Id - The room id, optional if you send pmid.\n\t * @param {string} pmid - Parent Message Id - Create the discussion by a message, optional.\n\t * @param {string} reply - The reply, optional\n\t * @param {string} t_name - discussion name\n\t * @param {string[]} users - users to be added\n\t * @param {boolean} encrypted - if the discussion's e2e encryption should be enabled.\n\t */\n\tasync createDiscussion({ prid, pmid, t_name: discussionName, reply, users, encrypted }: CreateDiscussionProperties) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'DiscussionCreation',\n\t\t\t});\n\t\t}\n\n\t\treturn createDiscussion(uid, { prid, pmid, t_name: discussionName, reply, users, encrypted });\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"06e5e431ad701c510a837dcafba912c25ea536ea"}
