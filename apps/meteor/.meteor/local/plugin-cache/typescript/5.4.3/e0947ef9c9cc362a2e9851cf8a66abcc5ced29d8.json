{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/channels.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/channels.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/channels.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/channels.ts","sourceRoot":"","sources":["app/api/server/v1/channels.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team, Room } from '@rocket.chat/core-services';\nimport type { IRoom, ISubscription, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport {\n\tisChannelsAddAllProps,\n\tisChannelsArchiveProps,\n\tisChannelsHistoryProps,\n\tisChannelsUnarchiveProps,\n\tisChannelsRolesProps,\n\tisChannelsJoinProps,\n\tisChannelsKickProps,\n\tisChannelsLeaveProps,\n\tisChannelsMessagesProps,\n\tisChannelsOpenProps,\n\tisChannelsSetAnnouncementProps,\n\tisChannelsGetAllUserMentionsByChannelProps,\n\tisChannelsModeratorsProps,\n\tisChannelsConvertToTeamProps,\n\tisChannelsSetReadOnlyProps,\n\tisChannelsDeleteProps,\n\tisChannelsListProps,\n\tisChannelsFilesListProps,\n\tisChannelsOnlineProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { addUsersToRoomMethod } from '../../../lib/server/methods/addUsersToRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\n// Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findChannelByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId?: string;\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room || (room.t !== 'c' && room.t !== 'l')) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\tif (userId && room.lastMessage) {\n\t\tconst [lastMessage] = await normalizeMessagesForUser([room.lastMessage], userId);\n\t\troom.lastMessage = lastMessage;\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'channels.addAll',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsAddAllProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params, userId: this.userId });\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult._id, activeUsersOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.archive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsArchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.unarchive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsUnarchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.archived) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is not archived`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.history',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsHistoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { unreads, oldest, latest, showThreadMessages, inclusive, ...params } = this.queryParams;\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.roles',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsRolesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.queryParams });\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsJoinProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { joinCode, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait Room.join({ room: findResult, user: this.user, joinCode });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.kick',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsKickProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params /* userId */ } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: findResult._id, username: user.username });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.leave',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsLeaveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.messages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsMessagesProps,\n\t\tpermissionsRequired: ['view-c-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult._id,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\t// Special check for the permissions\n\t\t\tif (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-joined-room')) &&\n\t\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, { projection: { _id: 1 } }))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.open',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsOpenProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}\".`);\n\t\t\t}\n\n\t\t\tif (sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already open to the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setReadOnly',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetReadOnlyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setAnnouncement',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetAnnouncementProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { announcement, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomAnnouncement', announcement);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getAllUserMentionsByChannel',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsGetAllUserMentionsByChannelProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmentions,\n\t\t\t\tcount: mentions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: allMentions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.moderators',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsModeratorsProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { ...params } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: ISubscription) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.delete',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.convertToTeam',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsConvertToTeamProps,\n\t\tpermissionsRequired: ['create-team'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { channelId, channelName } = this.bodyParams;\n\n\t\t\tif (!channelId && !channelName) {\n\t\t\t\treturn API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n\t\t\t}\n\n\t\t\tif (channelId && !(await hasPermissionAsync(this.userId, 'edit-room', channelId))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: channelId !== undefined ? { roomId: channelId } : { roomName: channelName },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel not found');\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t});\n\n\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name ?? '',\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}.`);\n\t\t\t}\n\n\t\t\tif (!sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { userId } = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = userId;\n\t\t\t}\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t});\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nasync function createChannelValidator(params: {\n\tuser: { value: string };\n\tname?: { key: string; value?: string };\n\tmembers?: { key: string; value?: string[] };\n\tcustomFields?: { key: string; value?: string };\n\tteams?: { key: string; value?: string[] };\n\tteamId?: { key: string; value?: string };\n}) {\n\tconst teamId = params.teamId?.value;\n\n\tconst team = teamId && (await Team.getInfoById(teamId));\n\tif (\n\t\t(!teamId && !(await hasPermissionAsync(params.user.value, 'create-c'))) ||\n\t\t(teamId && team && !(await hasPermissionAsync(params.user.value, 'create-team-channel', team.roomId)))\n\t) {\n\t\tthrow new Error('unauthorized');\n\t}\n\n\tif (!params.name?.value) {\n\t\tthrow new Error(`Param \"${params.name?.key}\" is required`);\n\t}\n\n\tif (params.members?.value && !Array.isArray(params.members.value)) {\n\t\tthrow new Error(`Param \"${params.members.key}\" must be an array if provided`);\n\t}\n\n\tif (params.customFields?.value && !(typeof params.customFields.value === 'object')) {\n\t\tthrow new Error(`Param \"${params.customFields.key}\" must be an object if provided`);\n\t}\n\n\tif (params.teams?.value && !Array.isArray(params.teams.value)) {\n\t\tthrow new Error(`Param ${params.teams.key} must be an array`);\n\t}\n}\n\nasync function createChannel(\n\tuserId: string,\n\tparams: {\n\t\tname?: string;\n\t\tmembers?: string[];\n\t\tcustomFields?: Record<string, any>;\n\t\textraData?: Record<string, any>;\n\t\treadOnly?: boolean;\n\t\texcludeSelf?: boolean;\n\t},\n): Promise<{ channel: IRoom }> {\n\tconst readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n\tconst id = await createChannelMethod(\n\t\tuserId,\n\t\tparams.name || '',\n\t\tparams.members ? params.members : [],\n\t\treadOnly,\n\t\tparams.customFields,\n\t\tparams.extraData,\n\t\tparams.excludeSelf,\n\t);\n\n\treturn {\n\t\tchannel: await findChannelByIdOrName({ params: { roomId: id.rid }, userId }),\n\t};\n}\n\nAPI.channels = {\n\tcreate: {\n\t\tvalidate: createChannelValidator,\n\t\texecute: createChannel,\n\t},\n};\n\nAPI.v1.addRoute(\n\t'channels.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, bodyParams } = this;\n\n\t\t\tlet error;\n\n\t\t\ttry {\n\t\t\t\tawait API.channels?.create.validate({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\tvalue: userId,\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: bodyParams.name,\n\t\t\t\t\t\tkey: 'name',\n\t\t\t\t\t},\n\t\t\t\t\tmembers: {\n\t\t\t\t\t\tvalue: bodyParams.members,\n\t\t\t\t\t\tkey: 'members',\n\t\t\t\t\t},\n\t\t\t\t\tteams: {\n\t\t\t\t\t\tvalue: bodyParams.teams,\n\t\t\t\t\t\tkey: 'teams',\n\t\t\t\t\t},\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\tvalue: bodyParams.extraData?.teamId,\n\t\t\t\t\t\tkey: 'teamId',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tif (e.message === 'unauthorized') {\n\t\t\t\t\terror = API.v1.unauthorized();\n\t\t\t\t} else {\n\t\t\t\t\terror = API.v1.failure(e.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (bodyParams.teams) {\n\t\t\t\tconst canSeeAllTeams = await hasPermissionAsync(this.userId, 'view-all-teams');\n\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });\n\t\t\t\tconst teamMembers = [];\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t});\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tbodyParams.members = [...membersToAdd].filter(Boolean) as string[];\n\t\t\t}\n\n\t\t\treturn API.v1.success(await API.channels?.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true, validateParams: isChannelsFilesListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { typeGroup, name, roomId, roomName } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: {\n\t\t\t\t\t...(roomId ? { roomId } : {}),\n\t\t\t\t\t...(roomName ? { roomName } : {}),\n\t\t\t\t},\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!(await canAccessRoomAsync(findResult, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst filter = {\n\t\t\t\trid: findResult._id,\n\t\t\t\t...query,\n\t\t\t\t...(name ? { name: { $regex: name || '', $options: 'i' } } : {}),\n\t\t\t\t...(typeGroup ? { typeGroup } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(filter, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPublicChannels = true;\n\t\t\tif (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n\t\t\t\tincludeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n\t\t\t}\n\n\t\t\tlet ourQuery: { channel: string | { $in: string[] } } = {\n\t\t\t\tchannel: `#${findResult.name}`,\n\t\t\t};\n\n\t\t\tif (includeAllPublicChannels) {\n\t\t\t\tourQuery.channel = {\n\t\t\t\t\t$in: [ourQuery.channel as string, 'all_public_channels'],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.queryParams,\n\t\t\t\t\tcheckedArchived: false,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n\t\t\t}\n\n\t\t\tawait addUsersToRoomMethod(this.userId, { rid: findResult._id, users: users.map((u) => u.username).filter(isTruthy) });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: { permissions: ['view-c-room', 'view-joined-room'], operation: 'hasAny' },\n\t\t},\n\t\tvalidateParams: isChannelsListProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst hasPermissionToSeeAllPublicChannels = await hasPermissionAsync(this.userId, 'view-c-room');\n\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tif (!hasPermissionToSeeAllPublicChannels) {\n\t\t\t\tconst roomIds = (\n\t\t\t\t\tawait Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tprojection: { rid: 1 },\n\t\t\t\t\t}).toArray()\n\t\t\t\t).map((s) => s.rid);\n\t\t\t\tourQuery._id = { $in: roomIds };\n\t\t\t}\n\n\t\t\t// teams filter - I would love to have a way to apply this filter @ db level :(\n\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(\n\t\t\t\t(item: Record<string, any>) => item.rid,\n\t\t\t);\n\n\t\t\tourQuery.$or = [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tcount: channels.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list.joined',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tchannels: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('c', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: channels.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult._id))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult._id,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.online',\n\t{ authRequired: true, validateParams: isChannelsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: { username: 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.name === this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('The channel name is the same as what it would be renamed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomName', this.bodyParams.name);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.bodyParams,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDefault',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.default === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.default === this.bodyParams.default) {\n\t\t\t\treturn API.v1.failure(\n\t\t\t\t\t'The channel default setting is the same as what it would be changed to.',\n\t\t\t\t\t'error-channels-setdefault-missing-default-param',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(\n\t\t\t\tthis.userId,\n\t\t\t\tfindResult._id,\n\t\t\t\t'default',\n\t\t\t\t['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.description) {\n\t\t\t\treturn API.v1.failure('The channel description is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.purpose) {\n\t\t\t\treturn API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.topic === this.bodyParams.topic) {\n\t\t\t\treturn API.v1.failure('The channel topic is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The channel type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('The channel does not exist');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.joinCode?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"joinCode\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'joinCode', this.bodyParams.joinCode);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.anonymousread',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\tif (!settings.get<boolean>('Accounts_AllowAnonymousRead')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n\t\t\t\t\tmethod: 'channels.anonymousread',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId || ''),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/channels.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/channels.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/channels.ts","sourceRoot":"","sources":["app/api/server/v1/channels.ts"],"names":[],"mappings":"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","sourcesContent":["import { Team, Room } from '@rocket.chat/core-services';\nimport type { IRoom, ISubscription, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport {\n\tisChannelsAddAllProps,\n\tisChannelsArchiveProps,\n\tisChannelsHistoryProps,\n\tisChannelsUnarchiveProps,\n\tisChannelsRolesProps,\n\tisChannelsJoinProps,\n\tisChannelsKickProps,\n\tisChannelsLeaveProps,\n\tisChannelsMessagesProps,\n\tisChannelsOpenProps,\n\tisChannelsSetAnnouncementProps,\n\tisChannelsGetAllUserMentionsByChannelProps,\n\tisChannelsModeratorsProps,\n\tisChannelsConvertToTeamProps,\n\tisChannelsSetReadOnlyProps,\n\tisChannelsDeleteProps,\n\tisChannelsListProps,\n\tisChannelsFilesListProps,\n\tisChannelsOnlineProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { addUsersToRoomMethod } from '../../../lib/server/methods/addUsersToRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\n// Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findChannelByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId?: string;\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room || (room.t !== 'c' && room.t !== 'l')) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\tif (userId && room.lastMessage) {\n\t\tconst [lastMessage] = await normalizeMessagesForUser([room.lastMessage], userId);\n\t\troom.lastMessage = lastMessage;\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'channels.addAll',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsAddAllProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params, userId: this.userId });\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult._id, activeUsersOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.archive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsArchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.unarchive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsUnarchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.archived) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is not archived`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.history',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsHistoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { unreads, oldest, latest, showThreadMessages, inclusive, ...params } = this.queryParams;\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.roles',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsRolesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.queryParams });\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsJoinProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { joinCode, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait Room.join({ room: findResult, user: this.user, joinCode });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.kick',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsKickProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params /* userId */ } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: findResult._id, username: user.username });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.leave',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsLeaveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.messages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsMessagesProps,\n\t\tpermissionsRequired: ['view-c-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult._id,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\t// Special check for the permissions\n\t\t\tif (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-joined-room')) &&\n\t\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, { projection: { _id: 1 } }))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.open',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsOpenProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}\".`);\n\t\t\t}\n\n\t\t\tif (sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already open to the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setReadOnly',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetReadOnlyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setAnnouncement',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetAnnouncementProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { announcement, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomAnnouncement', announcement);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getAllUserMentionsByChannel',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsGetAllUserMentionsByChannelProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmentions,\n\t\t\t\tcount: mentions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: allMentions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.moderators',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsModeratorsProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { ...params } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: ISubscription) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.delete',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.convertToTeam',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsConvertToTeamProps,\n\t\tpermissionsRequired: ['create-team'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { channelId, channelName } = this.bodyParams;\n\n\t\t\tif (!channelId && !channelName) {\n\t\t\t\treturn API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n\t\t\t}\n\n\t\t\tif (channelId && !(await hasPermissionAsync(this.userId, 'edit-room', channelId))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: channelId !== undefined ? { roomId: channelId } : { roomName: channelName },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel not found');\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t});\n\n\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name ?? '',\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}.`);\n\t\t\t}\n\n\t\t\tif (!sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { userId } = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = userId;\n\t\t\t}\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t});\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nasync function createChannelValidator(params: {\n\tuser: { value: string };\n\tname?: { key: string; value?: string };\n\tmembers?: { key: string; value?: string[] };\n\tcustomFields?: { key: string; value?: string };\n\tteams?: { key: string; value?: string[] };\n\tteamId?: { key: string; value?: string };\n}) {\n\tconst teamId = params.teamId?.value;\n\n\tconst team = teamId && (await Team.getInfoById(teamId));\n\tif (\n\t\t(!teamId && !(await hasPermissionAsync(params.user.value, 'create-c'))) ||\n\t\t(teamId && team && !(await hasPermissionAsync(params.user.value, 'create-team-channel', team.roomId)))\n\t) {\n\t\tthrow new Error('unauthorized');\n\t}\n\n\tif (!params.name?.value) {\n\t\tthrow new Error(`Param \"${params.name?.key}\" is required`);\n\t}\n\n\tif (params.members?.value && !Array.isArray(params.members.value)) {\n\t\tthrow new Error(`Param \"${params.members.key}\" must be an array if provided`);\n\t}\n\n\tif (params.customFields?.value && !(typeof params.customFields.value === 'object')) {\n\t\tthrow new Error(`Param \"${params.customFields.key}\" must be an object if provided`);\n\t}\n\n\tif (params.teams?.value && !Array.isArray(params.teams.value)) {\n\t\tthrow new Error(`Param ${params.teams.key} must be an array`);\n\t}\n}\n\nasync function createChannel(\n\tuserId: string,\n\tparams: {\n\t\tname?: string;\n\t\tmembers?: string[];\n\t\tcustomFields?: Record<string, any>;\n\t\textraData?: Record<string, any>;\n\t\treadOnly?: boolean;\n\t\texcludeSelf?: boolean;\n\t},\n): Promise<{ channel: IRoom }> {\n\tconst readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n\tconst id = await createChannelMethod(\n\t\tuserId,\n\t\tparams.name || '',\n\t\tparams.members ? params.members : [],\n\t\treadOnly,\n\t\tparams.customFields,\n\t\tparams.extraData,\n\t\tparams.excludeSelf,\n\t);\n\n\treturn {\n\t\tchannel: await findChannelByIdOrName({ params: { roomId: id.rid }, userId }),\n\t};\n}\n\nAPI.channels = {\n\tcreate: {\n\t\tvalidate: createChannelValidator,\n\t\texecute: createChannel,\n\t},\n};\n\nAPI.v1.addRoute(\n\t'channels.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, bodyParams } = this;\n\n\t\t\tlet error;\n\n\t\t\ttry {\n\t\t\t\tawait API.channels?.create.validate({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\tvalue: userId,\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: bodyParams.name,\n\t\t\t\t\t\tkey: 'name',\n\t\t\t\t\t},\n\t\t\t\t\tmembers: {\n\t\t\t\t\t\tvalue: bodyParams.members,\n\t\t\t\t\t\tkey: 'members',\n\t\t\t\t\t},\n\t\t\t\t\tteams: {\n\t\t\t\t\t\tvalue: bodyParams.teams,\n\t\t\t\t\t\tkey: 'teams',\n\t\t\t\t\t},\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\tvalue: bodyParams.extraData?.teamId,\n\t\t\t\t\t\tkey: 'teamId',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tif (e.message === 'unauthorized') {\n\t\t\t\t\terror = API.v1.unauthorized();\n\t\t\t\t} else {\n\t\t\t\t\terror = API.v1.failure(e.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (bodyParams.teams) {\n\t\t\t\tconst canSeeAllTeams = await hasPermissionAsync(this.userId, 'view-all-teams');\n\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });\n\t\t\t\tconst teamMembers = [];\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t});\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tbodyParams.members = [...membersToAdd].filter(Boolean) as string[];\n\t\t\t}\n\n\t\t\treturn API.v1.success(await API.channels?.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true, validateParams: isChannelsFilesListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { typeGroup, name, roomId, roomName } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: {\n\t\t\t\t\t...(roomId ? { roomId } : {}),\n\t\t\t\t\t...(roomName ? { roomName } : {}),\n\t\t\t\t},\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!(await canAccessRoomAsync(findResult, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst filter = {\n\t\t\t\trid: findResult._id,\n\t\t\t\t...query,\n\t\t\t\t...(name ? { name: { $regex: name || '', $options: 'i' } } : {}),\n\t\t\t\t...(typeGroup ? { typeGroup } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(filter, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPublicChannels = true;\n\t\t\tif (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n\t\t\t\tincludeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n\t\t\t}\n\n\t\t\tlet ourQuery: { channel: string | { $in: string[] } } = {\n\t\t\t\tchannel: `#${findResult.name}`,\n\t\t\t};\n\n\t\t\tif (includeAllPublicChannels) {\n\t\t\t\tourQuery.channel = {\n\t\t\t\t\t$in: [ourQuery.channel as string, 'all_public_channels'],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.queryParams,\n\t\t\t\t\tcheckedArchived: false,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n\t\t\t}\n\n\t\t\tawait addUsersToRoomMethod(this.userId, { rid: findResult._id, users: users.map((u) => u.username).filter(isTruthy) });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: { permissions: ['view-c-room', 'view-joined-room'], operation: 'hasAny' },\n\t\t},\n\t\tvalidateParams: isChannelsListProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst hasPermissionToSeeAllPublicChannels = await hasPermissionAsync(this.userId, 'view-c-room');\n\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tif (!hasPermissionToSeeAllPublicChannels) {\n\t\t\t\tconst roomIds = (\n\t\t\t\t\tawait Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tprojection: { rid: 1 },\n\t\t\t\t\t}).toArray()\n\t\t\t\t).map((s) => s.rid);\n\t\t\t\tourQuery._id = { $in: roomIds };\n\t\t\t}\n\n\t\t\t// teams filter - I would love to have a way to apply this filter @ db level :(\n\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(\n\t\t\t\t(item: Record<string, any>) => item.rid,\n\t\t\t);\n\n\t\t\tourQuery.$or = [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tcount: channels.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list.joined',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tchannels: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('c', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: channels.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult._id))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult._id,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.online',\n\t{ authRequired: true, validateParams: isChannelsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: { username: 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.name === this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('The channel name is the same as what it would be renamed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomName', this.bodyParams.name);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.bodyParams,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDefault',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.default === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.default === this.bodyParams.default) {\n\t\t\t\treturn API.v1.failure(\n\t\t\t\t\t'The channel default setting is the same as what it would be changed to.',\n\t\t\t\t\t'error-channels-setdefault-missing-default-param',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(\n\t\t\t\tthis.userId,\n\t\t\t\tfindResult._id,\n\t\t\t\t'default',\n\t\t\t\t['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.description) {\n\t\t\t\treturn API.v1.failure('The channel description is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.purpose) {\n\t\t\t\treturn API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.topic === this.bodyParams.topic) {\n\t\t\t\treturn API.v1.failure('The channel topic is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The channel type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('The channel does not exist');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.joinCode?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"joinCode\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'joinCode', this.bodyParams.joinCode);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.anonymousread',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\tif (!settings.get<boolean>('Accounts_AllowAnonymousRead')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n\t\t\t\t\tmethod: 'channels.anonymousread',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId || ''),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectDestructuringEmpty;\n    module.link(\"@babel/runtime/helpers/objectDestructuringEmpty\", {\n      default(v) {\n        _objectDestructuringEmpty = v;\n      }\n    }, 0);\n    let _extends;\n    module.link(\"@babel/runtime/helpers/extends\", {\n      default(v) {\n        _extends = v;\n      }\n    }, 1);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 2);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 3);\n    const _excluded = [\"activeUsersOnly\"],\n      _excluded2 = [\"unreads\", \"oldest\", \"latest\", \"showThreadMessages\", \"inclusive\"],\n      _excluded3 = [\"joinCode\"],\n      _excluded4 = [\"announcement\"];\n    let Team, Room;\n    module.link(\"@rocket.chat/core-services\", {\n      Team(v) {\n        Team = v;\n      },\n      Room(v) {\n        Room = v;\n      }\n    }, 0);\n    let Integrations, Messages, Rooms, Subscriptions, Uploads, Users;\n    module.link(\"@rocket.chat/models\", {\n      Integrations(v) {\n        Integrations = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let isChannelsAddAllProps, isChannelsArchiveProps, isChannelsHistoryProps, isChannelsUnarchiveProps, isChannelsRolesProps, isChannelsJoinProps, isChannelsKickProps, isChannelsLeaveProps, isChannelsMessagesProps, isChannelsOpenProps, isChannelsSetAnnouncementProps, isChannelsGetAllUserMentionsByChannelProps, isChannelsModeratorsProps, isChannelsConvertToTeamProps, isChannelsSetReadOnlyProps, isChannelsDeleteProps, isChannelsListProps, isChannelsFilesListProps, isChannelsOnlineProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isChannelsAddAllProps(v) {\n        isChannelsAddAllProps = v;\n      },\n      isChannelsArchiveProps(v) {\n        isChannelsArchiveProps = v;\n      },\n      isChannelsHistoryProps(v) {\n        isChannelsHistoryProps = v;\n      },\n      isChannelsUnarchiveProps(v) {\n        isChannelsUnarchiveProps = v;\n      },\n      isChannelsRolesProps(v) {\n        isChannelsRolesProps = v;\n      },\n      isChannelsJoinProps(v) {\n        isChannelsJoinProps = v;\n      },\n      isChannelsKickProps(v) {\n        isChannelsKickProps = v;\n      },\n      isChannelsLeaveProps(v) {\n        isChannelsLeaveProps = v;\n      },\n      isChannelsMessagesProps(v) {\n        isChannelsMessagesProps = v;\n      },\n      isChannelsOpenProps(v) {\n        isChannelsOpenProps = v;\n      },\n      isChannelsSetAnnouncementProps(v) {\n        isChannelsSetAnnouncementProps = v;\n      },\n      isChannelsGetAllUserMentionsByChannelProps(v) {\n        isChannelsGetAllUserMentionsByChannelProps = v;\n      },\n      isChannelsModeratorsProps(v) {\n        isChannelsModeratorsProps = v;\n      },\n      isChannelsConvertToTeamProps(v) {\n        isChannelsConvertToTeamProps = v;\n      },\n      isChannelsSetReadOnlyProps(v) {\n        isChannelsSetReadOnlyProps = v;\n      },\n      isChannelsDeleteProps(v) {\n        isChannelsDeleteProps = v;\n      },\n      isChannelsListProps(v) {\n        isChannelsListProps = v;\n      },\n      isChannelsFilesListProps(v) {\n        isChannelsFilesListProps = v;\n      },\n      isChannelsOnlineProps(v) {\n        isChannelsOnlineProps = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let isTruthy;\n    module.link(\"../../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 4);\n    let eraseRoom;\n    module.link(\"../../../../server/lib/eraseRoom\", {\n      eraseRoom(v) {\n        eraseRoom = v;\n      }\n    }, 5);\n    let findUsersOfRoom;\n    module.link(\"../../../../server/lib/findUsersOfRoom\", {\n      findUsersOfRoom(v) {\n        findUsersOfRoom = v;\n      }\n    }, 6);\n    let hideRoomMethod;\n    module.link(\"../../../../server/methods/hideRoom\", {\n      hideRoomMethod(v) {\n        hideRoomMethod = v;\n      }\n    }, 7);\n    let removeUserFromRoomMethod;\n    module.link(\"../../../../server/methods/removeUserFromRoom\", {\n      removeUserFromRoomMethod(v) {\n        removeUserFromRoomMethod = v;\n      }\n    }, 8);\n    let canAccessRoomAsync;\n    module.link(\"../../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      }\n    }, 9);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 10);\n    let saveRoomSettings;\n    module.link(\"../../../channel-settings/server/methods/saveRoomSettings\", {\n      saveRoomSettings(v) {\n        saveRoomSettings = v;\n      }\n    }, 11);\n    let mountIntegrationQueryBasedOnPermissions;\n    module.link(\"../../../integrations/server/lib/mountQueriesBasedOnPermission\", {\n      mountIntegrationQueryBasedOnPermissions(v) {\n        mountIntegrationQueryBasedOnPermissions = v;\n      }\n    }, 12);\n    let addUsersToRoomMethod;\n    module.link(\"../../../lib/server/methods/addUsersToRoom\", {\n      addUsersToRoomMethod(v) {\n        addUsersToRoomMethod = v;\n      }\n    }, 13);\n    let createChannelMethod;\n    module.link(\"../../../lib/server/methods/createChannel\", {\n      createChannelMethod(v) {\n        createChannelMethod = v;\n      }\n    }, 14);\n    let leaveRoomMethod;\n    module.link(\"../../../lib/server/methods/leaveRoom\", {\n      leaveRoomMethod(v) {\n        leaveRoomMethod = v;\n      }\n    }, 15);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 16);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 17);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 18);\n    let addUserToFileObj;\n    module.link(\"../helpers/addUserToFileObj\", {\n      addUserToFileObj(v) {\n        addUserToFileObj = v;\n      }\n    }, 19);\n    let composeRoomWithLastMessage;\n    module.link(\"../helpers/composeRoomWithLastMessage\", {\n      composeRoomWithLastMessage(v) {\n        composeRoomWithLastMessage = v;\n      }\n    }, 20);\n    let getLoggedInUser;\n    module.link(\"../helpers/getLoggedInUser\", {\n      getLoggedInUser(v) {\n        getLoggedInUser = v;\n      }\n    }, 21);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 22);\n    let getUserFromParams, getUserListFromParams;\n    module.link(\"../helpers/getUserFromParams\", {\n      getUserFromParams(v) {\n        getUserFromParams = v;\n      },\n      getUserListFromParams(v) {\n        getUserListFromParams = v;\n      }\n    }, 23);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\n    async function findChannelByIdOrName(_ref) {\n      let {\n        params,\n        checkedArchived = true,\n        userId\n      } = _ref;\n      const projection = _objectSpread({}, API.v1.defaultFieldsToExclude);\n      let room;\n      if ('roomId' in params) {\n        room = await Rooms.findOneById(params.roomId || '', {\n          projection\n        });\n      } else if ('roomName' in params) {\n        room = await Rooms.findOneByName(params.roomName || '', {\n          projection\n        });\n      }\n      if (!room || room.t !== 'c' && room.t !== 'l') {\n        throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n      }\n      if (checkedArchived && room.archived) {\n        throw new Meteor.Error('error-room-archived', \"The channel, \".concat(room.name, \", is archived\"));\n      }\n      if (userId && room.lastMessage) {\n        const [lastMessage] = await normalizeMessagesForUser([room.lastMessage], userId);\n        room.lastMessage = lastMessage;\n      }\n      return room;\n    }\n    API.v1.addRoute('channels.addAll', {\n      authRequired: true,\n      validateParams: isChannelsAddAllProps\n    }, {\n      async post() {\n        const _this$bodyParams = this.bodyParams,\n          {\n            activeUsersOnly\n          } = _this$bodyParams,\n          params = _objectWithoutProperties(_this$bodyParams, _excluded);\n        const findResult = await findChannelByIdOrName({\n          params,\n          userId: this.userId\n        });\n        await Meteor.callAsync('addAllUserToRoom', findResult._id, activeUsersOnly);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.archive', {\n      authRequired: true,\n      validateParams: isChannelsArchiveProps\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        await Meteor.callAsync('archiveRoom', findResult._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.unarchive', {\n      authRequired: true,\n      validateParams: isChannelsUnarchiveProps\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams,\n          checkedArchived: false\n        });\n        if (!findResult.archived) {\n          return API.v1.failure(\"The channel, \".concat(findResult.name, \", is not archived\"));\n        }\n        await Meteor.callAsync('unarchiveRoom', findResult._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.history', {\n      authRequired: true,\n      validateParams: isChannelsHistoryProps\n    }, {\n      async get() {\n        const _this$queryParams = this.queryParams,\n          {\n            unreads,\n            oldest,\n            latest,\n            showThreadMessages,\n            inclusive\n          } = _this$queryParams,\n          params = _objectWithoutProperties(_this$queryParams, _excluded2);\n        const findResult = await findChannelByIdOrName({\n          params,\n          checkedArchived: false\n        });\n        const {\n          count = 20,\n          offset = 0\n        } = await getPaginationItems(this.queryParams);\n        const result = await Meteor.callAsync('getChannelHistory', {\n          rid: findResult._id,\n          latest: latest ? new Date(latest) : new Date(),\n          oldest: oldest && new Date(oldest),\n          inclusive: inclusive === 'true',\n          offset,\n          count,\n          unreads: unreads === 'true',\n          showThreadMessages: showThreadMessages === 'true'\n        });\n        if (!result) {\n          return API.v1.unauthorized();\n        }\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('channels.roles', {\n      authRequired: true,\n      validateParams: isChannelsRolesProps\n    }, {\n      async get() {\n        const findResult = await findChannelByIdOrName({\n          params: this.queryParams\n        });\n        const roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n        return API.v1.success({\n          roles\n        });\n      }\n    });\n    API.v1.addRoute('channels.join', {\n      authRequired: true,\n      validateParams: isChannelsJoinProps\n    }, {\n      async post() {\n        const _this$bodyParams2 = this.bodyParams,\n          {\n            joinCode\n          } = _this$bodyParams2,\n          params = _objectWithoutProperties(_this$bodyParams2, _excluded3);\n        const findResult = await findChannelByIdOrName({\n          params\n        });\n        await Room.join({\n          room: findResult,\n          user: this.user,\n          joinCode\n        });\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.kick', {\n      authRequired: true,\n      validateParams: isChannelsKickProps\n    }, {\n      async post() {\n        const _this$bodyParams3 = this.bodyParams,\n          params = _extends({}, (_objectDestructuringEmpty(_this$bodyParams3), _this$bodyParams3));\n        const findResult = await findChannelByIdOrName({\n          params\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        if (!(user !== null && user !== void 0 && user.username)) {\n          return API.v1.failure('Invalid user');\n        }\n        await removeUserFromRoomMethod(this.userId, {\n          rid: findResult._id,\n          username: user.username\n        });\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.leave', {\n      authRequired: true,\n      validateParams: isChannelsLeaveProps\n    }, {\n      async post() {\n        const _this$bodyParams4 = this.bodyParams,\n          params = _extends({}, (_objectDestructuringEmpty(_this$bodyParams4), _this$bodyParams4));\n        const findResult = await findChannelByIdOrName({\n          params\n        });\n        const user = await Users.findOneById(this.userId);\n        if (!user) {\n          return API.v1.failure('Invalid user');\n        }\n        await leaveRoomMethod(user, findResult._id);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.messages', {\n      authRequired: true,\n      validateParams: isChannelsMessagesProps,\n      permissionsRequired: ['view-c-room']\n    }, {\n      async get() {\n        const {\n          roomId,\n          mentionIds,\n          starredIds,\n          pinned\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const findResult = await findChannelByIdOrName({\n          params: {\n            roomId\n          },\n          checkedArchived: false\n        });\n        const parseIds = (ids, field) => typeof ids === 'string' && ids ? {\n          [field]: {\n            $in: ids.split(',').map(id => id.trim())\n          }\n        } : {};\n        const ourQuery = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, query), {}, {\n          rid: findResult._id\n        }, parseIds(mentionIds, 'mentions._id')), parseIds(starredIds, 'starred._id')), pinned && pinned.toLowerCase() === 'true' ? {\n          pinned: true\n        } : {});\n        // Special check for the permissions\n        if ((await hasPermissionAsync(this.userId, 'view-joined-room')) && !(await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, {\n          projection: {\n            _id: 1\n          }\n        }))) {\n          return API.v1.unauthorized();\n        }\n        const {\n          cursor,\n          totalCount\n        } = Messages.findPaginated(ourQuery, {\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(messages, this.userId),\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.open', {\n      authRequired: true,\n      validateParams: isChannelsOpenProps\n    }, {\n      async post() {\n        const _this$bodyParams5 = this.bodyParams,\n          params = _extends({}, (_objectDestructuringEmpty(_this$bodyParams5), _this$bodyParams5));\n        const findResult = await findChannelByIdOrName({\n          params,\n          checkedArchived: false\n        });\n        const sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n        if (!sub) {\n          return API.v1.failure(\"The user/callee is not in the channel \\\"\".concat(findResult.name, \"\\\".\"));\n        }\n        if (sub.open) {\n          return API.v1.failure(\"The channel, \".concat(findResult.name, \", is already open to the sender\"));\n        }\n        await Meteor.callAsync('openRoom', findResult._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.setReadOnly', {\n      authRequired: true,\n      validateParams: isChannelsSetReadOnlyProps\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.ro === this.bodyParams.readOnly) {\n          return API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'readOnly', this.bodyParams.readOnly);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.setAnnouncement', {\n      authRequired: true,\n      validateParams: isChannelsSetAnnouncementProps\n    }, {\n      async post() {\n        const _this$bodyParams6 = this.bodyParams,\n          {\n            announcement\n          } = _this$bodyParams6,\n          params = _objectWithoutProperties(_this$bodyParams6, _excluded4);\n        const findResult = await findChannelByIdOrName({\n          params\n        });\n        await saveRoomSettings(this.userId, findResult._id, 'roomAnnouncement', announcement);\n        return API.v1.success({\n          announcement: this.bodyParams.announcement\n        });\n      }\n    });\n    API.v1.addRoute('channels.getAllUserMentionsByChannel', {\n      authRequired: true,\n      validateParams: isChannelsGetAllUserMentionsByChannelProps\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n          roomId,\n          options: {\n            sort: sort || {\n              ts: 1\n            },\n            skip: offset,\n            limit: count\n          }\n        });\n        const allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n          roomId,\n          options: {}\n        });\n        return API.v1.success({\n          mentions,\n          count: mentions.length,\n          offset,\n          total: allMentions.length\n        });\n      }\n    });\n    API.v1.addRoute('channels.moderators', {\n      authRequired: true,\n      validateParams: isChannelsModeratorsProps\n    }, {\n      async get() {\n        const _this$queryParams2 = this.queryParams,\n          params = _extends({}, (_objectDestructuringEmpty(_this$queryParams2), _this$queryParams2));\n        const findResult = await findChannelByIdOrName({\n          params\n        });\n        const moderators = (await Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n          projection: {\n            u: 1\n          }\n        }).toArray()).map(sub => sub.u);\n        return API.v1.success({\n          moderators\n        });\n      }\n    });\n    API.v1.addRoute('channels.delete', {\n      authRequired: true,\n      validateParams: isChannelsDeleteProps\n    }, {\n      async post() {\n        const room = await findChannelByIdOrName({\n          params: this.bodyParams,\n          checkedArchived: false\n        });\n        await eraseRoom(room._id, this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.convertToTeam', {\n      authRequired: true,\n      validateParams: isChannelsConvertToTeamProps,\n      permissionsRequired: ['create-team']\n    }, {\n      async post() {\n        var _room$name;\n        const {\n          channelId,\n          channelName\n        } = this.bodyParams;\n        if (!channelId && !channelName) {\n          return API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n        }\n        if (channelId && !(await hasPermissionAsync(this.userId, 'edit-room', channelId))) {\n          return API.v1.unauthorized();\n        }\n        const room = await findChannelByIdOrName({\n          params: channelId !== undefined ? {\n            roomId: channelId\n          } : {\n            roomName: channelName\n          },\n          userId: this.userId\n        });\n        if (!room) {\n          return API.v1.failure('Channel not found');\n        }\n        const subscriptions = await Subscriptions.findByRoomId(room._id, {\n          projection: {\n            'u._id': 1\n          }\n        });\n        const members = (await subscriptions.toArray()).map(s => {\n          var _s$u;\n          return (_s$u = s.u) === null || _s$u === void 0 ? void 0 : _s$u._id;\n        });\n        const teamData = {\n          team: {\n            name: (_room$name = room.name) !== null && _room$name !== void 0 ? _room$name : '',\n            type: room.t === 'c' ? 0 : 1\n          },\n          members,\n          room: {\n            name: room.name,\n            id: room._id\n          }\n        };\n        const team = await Team.create(this.userId, teamData);\n        return API.v1.success({\n          team\n        });\n      }\n    });\n    API.v1.addRoute('channels.addModerator', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomModerator', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.addOwner', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomOwner', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.close', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams,\n          checkedArchived: false\n        });\n        const sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n        if (!sub) {\n          return API.v1.failure(\"The user/callee is not in the channel \\\"\".concat(findResult.name, \".\"));\n        }\n        if (!sub.open) {\n          return API.v1.failure(\"The channel, \".concat(findResult.name, \", is already closed to the sender\"));\n        }\n        await hideRoomMethod(this.userId, findResult._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.counters', {\n      authRequired: true\n    }, {\n      async get() {\n        const access = await hasPermissionAsync(this.userId, 'view-room-administration');\n        const {\n          userId\n        } = this.queryParams;\n        let user = this.userId;\n        let unreads = null;\n        let userMentions = null;\n        let unreadsFrom = null;\n        let joined = false;\n        let msgs = null;\n        let latest = null;\n        let members = null;\n        if (userId) {\n          if (!access) {\n            return API.v1.unauthorized();\n          }\n          user = userId;\n        }\n        const room = await findChannelByIdOrName({\n          params: this.queryParams\n        });\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n        const lm = room.lm ? room.lm : room._updatedAt;\n        if (subscription !== null && subscription !== void 0 && subscription.open) {\n          unreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n          unreadsFrom = subscription.ls || subscription.ts;\n          userMentions = subscription.userMentions;\n          joined = true;\n        }\n        if (access || joined) {\n          msgs = room.msgs;\n          latest = lm;\n          members = room.usersCount;\n        }\n        return API.v1.success({\n          joined,\n          members,\n          unreads,\n          unreadsFrom,\n          msgs,\n          latest,\n          userMentions\n        });\n      }\n    });\n    async function createChannelValidator(params) {\n      var _params$teamId, _params$name, _params$members, _params$customFields, _params$teams;\n      const teamId = (_params$teamId = params.teamId) === null || _params$teamId === void 0 ? void 0 : _params$teamId.value;\n      const team = teamId && (await Team.getInfoById(teamId));\n      if (!teamId && !(await hasPermissionAsync(params.user.value, 'create-c')) || teamId && team && !(await hasPermissionAsync(params.user.value, 'create-team-channel', team.roomId))) {\n        throw new Error('unauthorized');\n      }\n      if (!((_params$name = params.name) !== null && _params$name !== void 0 && _params$name.value)) {\n        var _params$name2;\n        throw new Error(\"Param \\\"\".concat((_params$name2 = params.name) === null || _params$name2 === void 0 ? void 0 : _params$name2.key, \"\\\" is required\"));\n      }\n      if ((_params$members = params.members) !== null && _params$members !== void 0 && _params$members.value && !Array.isArray(params.members.value)) {\n        throw new Error(\"Param \\\"\".concat(params.members.key, \"\\\" must be an array if provided\"));\n      }\n      if ((_params$customFields = params.customFields) !== null && _params$customFields !== void 0 && _params$customFields.value && !(typeof params.customFields.value === 'object')) {\n        throw new Error(\"Param \\\"\".concat(params.customFields.key, \"\\\" must be an object if provided\"));\n      }\n      if ((_params$teams = params.teams) !== null && _params$teams !== void 0 && _params$teams.value && !Array.isArray(params.teams.value)) {\n        throw new Error(\"Param \".concat(params.teams.key, \" must be an array\"));\n      }\n    }\n    async function createChannel(userId, params) {\n      const readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n      const id = await createChannelMethod(userId, params.name || '', params.members ? params.members : [], readOnly, params.customFields, params.extraData, params.excludeSelf);\n      return {\n        channel: await findChannelByIdOrName({\n          params: {\n            roomId: id.rid\n          },\n          userId\n        })\n      };\n    }\n    API.channels = {\n      create: {\n        validate: createChannelValidator,\n        execute: createChannel\n      }\n    };\n    API.v1.addRoute('channels.create', {\n      authRequired: true\n    }, {\n      async post() {\n        var _API$channels2;\n        const {\n          userId,\n          bodyParams\n        } = this;\n        let error;\n        try {\n          var _API$channels, _bodyParams$extraData;\n          await ((_API$channels = API.channels) === null || _API$channels === void 0 ? void 0 : _API$channels.create.validate({\n            user: {\n              value: userId\n            },\n            name: {\n              value: bodyParams.name,\n              key: 'name'\n            },\n            members: {\n              value: bodyParams.members,\n              key: 'members'\n            },\n            teams: {\n              value: bodyParams.teams,\n              key: 'teams'\n            },\n            teamId: {\n              value: (_bodyParams$extraData = bodyParams.extraData) === null || _bodyParams$extraData === void 0 ? void 0 : _bodyParams$extraData.teamId,\n              key: 'teamId'\n            }\n          }));\n        } catch (e) {\n          if (e.message === 'unauthorized') {\n            error = API.v1.unauthorized();\n          } else {\n            error = API.v1.failure(e.message);\n          }\n        }\n        if (error) {\n          return error;\n        }\n        if (bodyParams.teams) {\n          const canSeeAllTeams = await hasPermissionAsync(this.userId, 'view-all-teams');\n          const teams = await Team.listByNames(bodyParams.teams, {\n            projection: {\n              _id: 1\n            }\n          });\n          const teamMembers = [];\n          for (const team of teams) {\n            // eslint-disable-next-line no-await-in-loop\n            const {\n              records: members\n            } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n              offset: 0,\n              count: Number.MAX_SAFE_INTEGER\n            });\n            const uids = members.map(member => member.user.username);\n            teamMembers.push(...uids);\n          }\n          const membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n          bodyParams.members = [...membersToAdd].filter(Boolean);\n        }\n        return API.v1.success(await ((_API$channels2 = API.channels) === null || _API$channels2 === void 0 ? void 0 : _API$channels2.create.execute(userId, bodyParams)));\n      }\n    });\n    API.v1.addRoute('channels.files', {\n      authRequired: true,\n      validateParams: isChannelsFilesListProps\n    }, {\n      async get() {\n        const {\n          typeGroup,\n          name,\n          roomId,\n          roomName\n        } = this.queryParams;\n        const findResult = await findChannelByIdOrName({\n          params: _objectSpread(_objectSpread({}, roomId ? {\n            roomId\n          } : {}), roomName ? {\n            roomName\n          } : {}),\n          checkedArchived: false\n        });\n        if (!(await canAccessRoomAsync(findResult, {\n          _id: this.userId\n        }))) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const filter = _objectSpread(_objectSpread(_objectSpread({\n          rid: findResult._id\n        }, query), name ? {\n          name: {\n            $regex: name || '',\n            $options: 'i'\n          }\n        } : {}), typeGroup ? {\n          typeGroup\n        } : {});\n        const {\n          cursor,\n          totalCount\n        } = await Uploads.findPaginatedWithoutThumbs(filter, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          files: await addUserToFileObj(files),\n          count: files.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.getIntegrations', {\n      authRequired: true,\n      permissionsRequired: {\n        GET: {\n          permissions: ['manage-outgoing-integrations', 'manage-own-outgoing-integrations', 'manage-incoming-integrations', 'manage-own-incoming-integrations'],\n          operation: 'hasAny'\n        }\n      }\n    }, {\n      async get() {\n        const findResult = await findChannelByIdOrName({\n          params: this.queryParams,\n          checkedArchived: false\n        });\n        let includeAllPublicChannels = true;\n        if (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n          includeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n        }\n        let ourQuery = {\n          channel: \"#\".concat(findResult.name)\n        };\n        if (includeAllPublicChannels) {\n          ourQuery.channel = {\n            $in: [ourQuery.channel, 'all_public_channels']\n          };\n        }\n        const params = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(params);\n        const {\n          sort,\n          fields: projection,\n          query\n        } = await this.parseJsonQuery();\n        ourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n        const {\n          cursor,\n          totalCount\n        } = await Integrations.findPaginated(ourQuery, {\n          sort: sort || {\n            _createdAt: 1\n          },\n          skip: offset,\n          limit: count,\n          projection\n        });\n        const [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          integrations,\n          count: integrations.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.info', {\n      authRequired: true\n    }, {\n      async get() {\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.queryParams,\n            checkedArchived: false,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.invite', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const users = await getUserListFromParams(this.bodyParams);\n        if (!users.length) {\n          return API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n        }\n        await addUsersToRoomMethod(this.userId, {\n          rid: findResult._id,\n          users: users.map(u => u.username).filter(isTruthy)\n        });\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.list', {\n      authRequired: true,\n      permissionsRequired: {\n        GET: {\n          permissions: ['view-c-room', 'view-joined-room'],\n          operation: 'hasAny'\n        }\n      },\n      validateParams: isChannelsListProps\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const hasPermissionToSeeAllPublicChannels = await hasPermissionAsync(this.userId, 'view-c-room');\n        const {\n          _id\n        } = this.queryParams;\n        const ourQuery = _objectSpread(_objectSpread(_objectSpread({}, query), _id ? {\n          _id\n        } : {}), {}, {\n          t: 'c'\n        });\n        if (!hasPermissionToSeeAllPublicChannels) {\n          const roomIds = (await Subscriptions.findByUserIdAndType(this.userId, 'c', {\n            projection: {\n              rid: 1\n            }\n          }).toArray()).map(s => s.rid);\n          ourQuery._id = {\n            $in: roomIds\n          };\n        }\n        // teams filter - I would love to have a way to apply this filter @ db level :(\n        const ids = (await Subscriptions.findByUserId(this.userId, {\n          projection: {\n            rid: 1\n          }\n        }).toArray()).map(item => item.rid);\n        ourQuery.$or = [{\n          teamId: {\n            $exists: false\n          }\n        }, {\n          teamId: {\n            $exists: true\n          },\n          _id: {\n            $in: ids\n          }\n        }];\n        const {\n          cursor,\n          totalCount\n        } = await Rooms.findPaginated(ourQuery, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          channels: await Promise.all(channels.map(room => composeRoomWithLastMessage(room, this.userId))),\n          count: channels.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.list.joined', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields\n        } = await this.parseJsonQuery();\n        const subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], {\n          projection: {\n            rid: 1\n          }\n        }).toArray();\n        const rids = subs.map(_ref2 => {\n          let {\n            rid\n          } = _ref2;\n          return rid;\n        }).filter(Boolean);\n        if (rids.length === 0) {\n          return API.v1.success({\n            channels: [],\n            offset,\n            count: 0,\n            total: 0\n          });\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Rooms.findPaginatedByTypeAndIds('c', rids, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          channels: await Promise.all(channels.map(room => composeRoomWithLastMessage(room, this.userId))),\n          offset,\n          count: channels.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.members', {\n      authRequired: true\n    }, {\n      async get() {\n        const findResult = await findChannelByIdOrName({\n          params: this.queryParams,\n          checkedArchived: false\n        });\n        if (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult._id))) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset: skip,\n          count: limit\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort = {}\n        } = await this.parseJsonQuery();\n        check(this.queryParams, Match.ObjectIncluding({\n          status: Match.Maybe([String]),\n          filter: Match.Maybe(String)\n        }));\n        const {\n          status,\n          filter\n        } = this.queryParams;\n        const {\n          cursor,\n          totalCount\n        } = await findUsersOfRoom(_objectSpread(_objectSpread({\n          rid: findResult._id\n        }, status && {\n          status: {\n            $in: status\n          }\n        }), {}, {\n          skip,\n          limit,\n          filter\n        }, (sort === null || sort === void 0 ? void 0 : sort.username) && {\n          sort: {\n            username: sort.username\n          }\n        }));\n        const [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          members,\n          count: members.length,\n          offset: skip,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('channels.online', {\n      authRequired: true,\n      validateParams: isChannelsOnlineProps\n    }, {\n      async get() {\n        const {\n          query\n        } = await this.parseJsonQuery();\n        const {\n          _id\n        } = this.queryParams;\n        if ((!query || Object.keys(query).length === 0) && !_id) {\n          return API.v1.failure('Invalid query');\n        }\n        const filter = _objectSpread(_objectSpread(_objectSpread({}, query), _id ? {\n          _id\n        } : {}), {}, {\n          t: 'c'\n        });\n        const room = await Rooms.findOne(filter);\n        if (!room) {\n          return API.v1.failure('Channel does not exists');\n        }\n        const user = await getLoggedInUser(this.request);\n        if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        const online = await Users.findUsersNotOffline({\n          projection: {\n            username: 1\n          }\n        }).toArray();\n        const onlineInRoom = await Promise.all(online.map(async user => {\n          const subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n            projection: {\n              _id: 1,\n              username: 1\n            }\n          });\n          if (subscription) {\n            return {\n              _id: user._id,\n              username: user.username\n            };\n          }\n        }));\n        return API.v1.success({\n          online: onlineInRoom.filter(Boolean)\n        });\n      }\n    });\n    API.v1.addRoute('channels.removeModerator', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomModerator', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.removeOwner', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomOwner', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.rename', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$name;\n        if (!((_this$bodyParams$name = this.bodyParams.name) !== null && _this$bodyParams$name !== void 0 && _this$bodyParams$name.trim())) {\n          return API.v1.failure('The bodyParam \"name\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.name === this.bodyParams.name) {\n          return API.v1.failure('The channel name is the same as what it would be renamed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'roomName', this.bodyParams.name);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.setCustomFields', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n          return API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        await saveRoomSettings(this.userId, findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.setDefault', {\n      authRequired: true\n    }, {\n      async post() {\n        if (typeof this.bodyParams.default === 'undefined') {\n          return API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.default === this.bodyParams.default) {\n          return API.v1.failure('The channel default setting is the same as what it would be changed to.', 'error-channels-setdefault-missing-default-param');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'default', ['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()));\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.setDescription', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('description')) {\n          return API.v1.failure('The bodyParam \"description\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.description === this.bodyParams.description) {\n          return API.v1.failure('The channel description is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.description || '');\n        return API.v1.success({\n          description: this.bodyParams.description || ''\n        });\n      }\n    });\n    API.v1.addRoute('channels.setPurpose', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('purpose')) {\n          return API.v1.failure('The bodyParam \"purpose\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.description === this.bodyParams.purpose) {\n          return API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.purpose || '');\n        return API.v1.success({\n          purpose: this.bodyParams.purpose || ''\n        });\n      }\n    });\n    API.v1.addRoute('channels.setTopic', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.hasOwnProperty('topic')) {\n          return API.v1.failure('The bodyParam \"topic\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.topic === this.bodyParams.topic) {\n          return API.v1.failure('The channel topic is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'roomTopic', this.bodyParams.topic || '');\n        return API.v1.success({\n          topic: this.bodyParams.topic || ''\n        });\n      }\n    });\n    API.v1.addRoute('channels.setType', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$type;\n        if (!((_this$bodyParams$type = this.bodyParams.type) !== null && _this$bodyParams$type !== void 0 && _this$bodyParams$type.trim())) {\n          return API.v1.failure('The bodyParam \"type\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        if (findResult.t === this.bodyParams.type) {\n          return API.v1.failure('The channel type is the same as what it would be changed to.');\n        }\n        await saveRoomSettings(this.userId, findResult._id, 'roomType', this.bodyParams.type);\n        const room = await Rooms.findOneById(findResult._id, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          return API.v1.failure('The channel does not exist');\n        }\n        return API.v1.success({\n          channel: await composeRoomWithLastMessage(room, this.userId)\n        });\n      }\n    });\n    API.v1.addRoute('channels.addLeader', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('addRoomLeader', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.removeLeader', {\n      authRequired: true\n    }, {\n      async post() {\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        const user = await getUserFromParams(this.bodyParams);\n        await Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('channels.setJoinCode', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$join;\n        if (!((_this$bodyParams$join = this.bodyParams.joinCode) !== null && _this$bodyParams$join !== void 0 && _this$bodyParams$join.trim())) {\n          return API.v1.failure('The bodyParam \"joinCode\" is required');\n        }\n        const findResult = await findChannelByIdOrName({\n          params: this.bodyParams\n        });\n        await saveRoomSettings(this.userId, findResult._id, 'joinCode', this.bodyParams.joinCode);\n        return API.v1.success({\n          channel: await findChannelByIdOrName({\n            params: this.bodyParams,\n            userId: this.userId\n          })\n        });\n      }\n    });\n    API.v1.addRoute('channels.anonymousread', {\n      authRequired: false\n    }, {\n      async get() {\n        const findResult = await findChannelByIdOrName({\n          params: this.queryParams,\n          checkedArchived: false\n        });\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = Object.assign({}, query, {\n          rid: findResult._id\n        });\n        if (!settings.get('Accounts_AllowAnonymousRead')) {\n          throw new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n            method: 'channels.anonymousread'\n          });\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Messages.findPaginated(ourQuery, {\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(messages, this.userId || ''),\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectDestructuringEmpty","module","link","default","v","_extends","_objectWithoutProperties","_objectSpread","_excluded","_excluded2","_excluded3","_excluded4","Team","Room","Integrations","Messages","Rooms","Subscriptions","Uploads","Users","isChannelsAddAllProps","isChannelsArchiveProps","isChannelsHistoryProps","isChannelsUnarchiveProps","isChannelsRolesProps","isChannelsJoinProps","isChannelsKickProps","isChannelsLeaveProps","isChannelsMessagesProps","isChannelsOpenProps","isChannelsSetAnnouncementProps","isChannelsGetAllUserMentionsByChannelProps","isChannelsModeratorsProps","isChannelsConvertToTeamProps","isChannelsSetReadOnlyProps","isChannelsDeleteProps","isChannelsListProps","isChannelsFilesListProps","isChannelsOnlineProps","Meteor","isTruthy","eraseRoom","findUsersOfRoom","hideRoomMethod","removeUserFromRoomMethod","canAccessRoomAsync","hasPermissionAsync","saveRoomSettings","mountIntegrationQueryBasedOnPermissions","addUsersToRoomMethod","createChannelMethod","leaveRoomMethod","settings","normalizeMessagesForUser","API","addUserToFileObj","composeRoomWithLastMessage","getLoggedInUser","getPaginationItems","getUserFromParams","getUserListFromParams","__reifyWaitForDeps__","findChannelByIdOrName","_ref","params","checkedArchived","userId","projection","v1","defaultFieldsToExclude","room","findOneById","roomId","findOneByName","roomName","t","Error","archived","concat","name","lastMessage","addRoute","authRequired","validateParams","post","_this$bodyParams","bodyParams","activeUsersOnly","findResult","callAsync","_id","success","channel","failure","get","_this$queryParams","queryParams","unreads","oldest","latest","showThreadMessages","inclusive","count","offset","result","rid","Date","unauthorized","roles","_this$bodyParams2","joinCode","join","user","_this$bodyParams3","username","_this$bodyParams4","permissionsRequired","mentionIds","starredIds","pinned","sort","fields","query","parseJsonQuery","parseIds","ids","field","$in","split","map","id","trim","ourQuery","toLowerCase","findOneByRoomIdAndUserId","cursor","totalCount","findPaginated","ts","skip","limit","messages","total","Promise","all","toArray","length","_this$bodyParams5","sub","open","ro","readOnly","_this$bodyParams6","announcement","mentions","options","allMentions","_this$queryParams2","moderators","findByRoomIdAndRoles","u","_room$name","channelId","channelName","undefined","subscriptions","findByRoomId","members","s","_s$u","teamData","team","type","create","access","userMentions","unreadsFrom","joined","msgs","subscription","lm","_updatedAt","countVisibleByRoomIdBetweenTimestampsInclusive","ls","usersCount","createChannelValidator","_params$teamId","_params$name","_params$members","_params$customFields","_params$teams","teamId","value","getInfoById","_params$name2","key","Array","isArray","customFields","teams","createChannel","extraData","excludeSelf","channels","validate","execute","_API$channels2","error","_API$channels","_bodyParams$extraData","e","message","canSeeAllTeams","listByNames","teamMembers","records","Number","MAX_SAFE_INTEGER","uids","member","push","membersToAdd","Set","filter","Boolean","typeGroup","$regex","$options","findPaginatedWithoutThumbs","files","GET","permissions","operation","includeAllPublicChannels","Object","assign","_createdAt","integrations","users","hasPermissionToSeeAllPublicChannels","roomIds","findByUserIdAndType","findByUserId","item","$or","$exists","subs","findByUserIdAndTypes","rids","_ref2","findPaginatedByTypeAndIds","broadcast","check","Match","ObjectIncluding","status","Maybe","String","keys","findOne","request","online","findUsersNotOffline","onlineInRoom","_this$bodyParams$name","includes","toString","hasOwnProperty","description","purpose","topic","_this$bodyParams$type","_this$bodyParams$join","method","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/channels.ts"],"sourcesContent":["import { Team, Room } from '@rocket.chat/core-services';\nimport type { IRoom, ISubscription, IUser, RoomType } from '@rocket.chat/core-typings';\nimport { Integrations, Messages, Rooms, Subscriptions, Uploads, Users } from '@rocket.chat/models';\nimport {\n\tisChannelsAddAllProps,\n\tisChannelsArchiveProps,\n\tisChannelsHistoryProps,\n\tisChannelsUnarchiveProps,\n\tisChannelsRolesProps,\n\tisChannelsJoinProps,\n\tisChannelsKickProps,\n\tisChannelsLeaveProps,\n\tisChannelsMessagesProps,\n\tisChannelsOpenProps,\n\tisChannelsSetAnnouncementProps,\n\tisChannelsGetAllUserMentionsByChannelProps,\n\tisChannelsModeratorsProps,\n\tisChannelsConvertToTeamProps,\n\tisChannelsSetReadOnlyProps,\n\tisChannelsDeleteProps,\n\tisChannelsListProps,\n\tisChannelsFilesListProps,\n\tisChannelsOnlineProps,\n} from '@rocket.chat/rest-typings';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../../lib/isTruthy';\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { findUsersOfRoom } from '../../../../server/lib/findUsersOfRoom';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { removeUserFromRoomMethod } from '../../../../server/methods/removeUserFromRoom';\nimport { canAccessRoomAsync } from '../../../authorization/server';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { mountIntegrationQueryBasedOnPermissions } from '../../../integrations/server/lib/mountQueriesBasedOnPermission';\nimport { addUsersToRoomMethod } from '../../../lib/server/methods/addUsersToRoom';\nimport { createChannelMethod } from '../../../lib/server/methods/createChannel';\nimport { leaveRoomMethod } from '../../../lib/server/methods/leaveRoom';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getLoggedInUser } from '../helpers/getLoggedInUser';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { getUserFromParams, getUserListFromParams } from '../helpers/getUserFromParams';\n\n// Returns the channel IF found otherwise it will return the failure of why it didn't. Check the `statusCode` property\nasync function findChannelByIdOrName({\n\tparams,\n\tcheckedArchived = true,\n\tuserId,\n}: {\n\tparams:\n\t\t| {\n\t\t\t\troomId?: string;\n\t\t  }\n\t\t| {\n\t\t\t\troomName?: string;\n\t\t  };\n\tuserId?: string;\n\tcheckedArchived?: boolean;\n}): Promise<IRoom> {\n\tconst projection = { ...API.v1.defaultFieldsToExclude };\n\n\tlet room;\n\tif ('roomId' in params) {\n\t\troom = await Rooms.findOneById(params.roomId || '', { projection });\n\t} else if ('roomName' in params) {\n\t\troom = await Rooms.findOneByName(params.roomName || '', { projection });\n\t}\n\n\tif (!room || (room.t !== 'c' && room.t !== 'l')) {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" or \"roomName\" param provided does not match any channel');\n\t}\n\n\tif (checkedArchived && room.archived) {\n\t\tthrow new Meteor.Error('error-room-archived', `The channel, ${room.name}, is archived`);\n\t}\n\tif (userId && room.lastMessage) {\n\t\tconst [lastMessage] = await normalizeMessagesForUser([room.lastMessage], userId);\n\t\troom.lastMessage = lastMessage;\n\t}\n\n\treturn room;\n}\n\nAPI.v1.addRoute(\n\t'channels.addAll',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsAddAllProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { activeUsersOnly, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params, userId: this.userId });\n\n\t\t\tawait Meteor.callAsync('addAllUserToRoom', findResult._id, activeUsersOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.archive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsArchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait Meteor.callAsync('archiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.unarchive',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsUnarchiveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!findResult.archived) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is not archived`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unarchiveRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.history',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsHistoryProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { unreads, oldest, latest, showThreadMessages, inclusive, ...params } = this.queryParams;\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst { count = 20, offset = 0 } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', {\n\t\t\t\trid: findResult._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t});\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.roles',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsRolesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.queryParams });\n\n\t\t\tconst roles = await Meteor.callAsync('getRoomRoles', findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troles,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.join',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsJoinProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { joinCode, ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait Room.join({ room: findResult, user: this.user, joinCode });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.kick',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsKickProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params /* userId */ } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\t\t\tif (!user?.username) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\n\t\t\tawait removeUserFromRoomMethod(this.userId, { rid: findResult._id, username: user.username });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.leave',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsLeaveProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst user = await Users.findOneById(this.userId);\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('Invalid user');\n\t\t\t}\n\t\t\tawait leaveRoomMethod(user, findResult._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.messages',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsMessagesProps,\n\t\tpermissionsRequired: ['view-c-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, mentionIds, starredIds, pinned } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: { roomId },\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst parseIds = (ids: string | undefined, field: string) =>\n\t\t\t\ttypeof ids === 'string' && ids ? { [field]: { $in: ids.split(',').map((id) => id.trim()) } } : {};\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\trid: findResult._id,\n\t\t\t\t...parseIds(mentionIds, 'mentions._id'),\n\t\t\t\t...parseIds(starredIds, 'starred._id'),\n\t\t\t\t...(pinned && pinned.toLowerCase() === 'true' ? { pinned: true } : {}),\n\t\t\t};\n\n\t\t\t// Special check for the permissions\n\t\t\tif (\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-joined-room')) &&\n\t\t\t\t!(await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId, { projection: { _id: 1 } }))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.open',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsOpenProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}\".`);\n\t\t\t}\n\n\t\t\tif (sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already open to the sender`);\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('openRoom', findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setReadOnly',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetReadOnlyProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.ro === this.bodyParams.readOnly) {\n\t\t\t\treturn API.v1.failure('The channel read only setting is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'readOnly', this.bodyParams.readOnly);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setAnnouncement',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsSetAnnouncementProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { announcement, ...params } = this.bodyParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomAnnouncement', announcement);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tannouncement: this.bodyParams.announcement,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getAllUserMentionsByChannel',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsGetAllUserMentionsByChannelProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst mentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst allMentions = await Meteor.callAsync('getUserMentionsByChannel', {\n\t\t\t\troomId,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmentions,\n\t\t\t\tcount: mentions.length,\n\t\t\t\toffset,\n\t\t\t\ttotal: allMentions.length,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.moderators',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsModeratorsProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { ...params } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params });\n\n\t\t\tconst moderators = (\n\t\t\t\tawait Subscriptions.findByRoomIdAndRoles(findResult._id, ['moderator'], {\n\t\t\t\t\tprojection: { u: 1 },\n\t\t\t\t}).toArray()\n\t\t\t).map((sub: ISubscription) => sub.u);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmoderators,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.delete',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.convertToTeam',\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isChannelsConvertToTeamProps,\n\t\tpermissionsRequired: ['create-team'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { channelId, channelName } = this.bodyParams;\n\n\t\t\tif (!channelId && !channelName) {\n\t\t\t\treturn API.v1.failure('The parameter \"channelId\" or \"channelName\" is required');\n\t\t\t}\n\n\t\t\tif (channelId && !(await hasPermissionAsync(this.userId, 'edit-room', channelId))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: channelId !== undefined ? { roomId: channelId } : { roomName: channelName },\n\t\t\t\tuserId: this.userId,\n\t\t\t});\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel not found');\n\t\t\t}\n\n\t\t\tconst subscriptions = await Subscriptions.findByRoomId(room._id, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t});\n\n\t\t\tconst members = (await subscriptions.toArray()).map((s: ISubscription) => s.u?._id);\n\n\t\t\tconst teamData = {\n\t\t\t\tteam: {\n\t\t\t\t\tname: room.name ?? '',\n\t\t\t\t\ttype: room.t === 'c' ? 0 : 1,\n\t\t\t\t},\n\t\t\t\tmembers,\n\t\t\t\troom: {\n\t\t\t\t\tname: room.name,\n\t\t\t\t\tid: room._id,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst team = await Team.create(this.userId, teamData);\n\n\t\t\treturn API.v1.success({ team });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.close',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.bodyParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tconst sub = await Subscriptions.findOneByRoomIdAndUserId(findResult._id, this.userId);\n\n\t\t\tif (!sub) {\n\t\t\t\treturn API.v1.failure(`The user/callee is not in the channel \"${findResult.name}.`);\n\t\t\t}\n\n\t\t\tif (!sub.open) {\n\t\t\t\treturn API.v1.failure(`The channel, ${findResult.name}, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, findResult._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.counters',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { userId } = this.queryParams;\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\n\t\t\tif (userId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = userId;\n\t\t\t}\n\t\t\tconst room = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t});\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user);\n\t\t\tconst lm = room.lm ? room.lm : room._updatedAt;\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tunreads = await Messages.countVisibleByRoomIdBetweenTimestampsInclusive(subscription.rid, subscription.ls, lm);\n\t\t\t\tunreadsFrom = subscription.ls || subscription.ts;\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nasync function createChannelValidator(params: {\n\tuser: { value: string };\n\tname?: { key: string; value?: string };\n\tmembers?: { key: string; value?: string[] };\n\tcustomFields?: { key: string; value?: string };\n\tteams?: { key: string; value?: string[] };\n\tteamId?: { key: string; value?: string };\n}) {\n\tconst teamId = params.teamId?.value;\n\n\tconst team = teamId && (await Team.getInfoById(teamId));\n\tif (\n\t\t(!teamId && !(await hasPermissionAsync(params.user.value, 'create-c'))) ||\n\t\t(teamId && team && !(await hasPermissionAsync(params.user.value, 'create-team-channel', team.roomId)))\n\t) {\n\t\tthrow new Error('unauthorized');\n\t}\n\n\tif (!params.name?.value) {\n\t\tthrow new Error(`Param \"${params.name?.key}\" is required`);\n\t}\n\n\tif (params.members?.value && !Array.isArray(params.members.value)) {\n\t\tthrow new Error(`Param \"${params.members.key}\" must be an array if provided`);\n\t}\n\n\tif (params.customFields?.value && !(typeof params.customFields.value === 'object')) {\n\t\tthrow new Error(`Param \"${params.customFields.key}\" must be an object if provided`);\n\t}\n\n\tif (params.teams?.value && !Array.isArray(params.teams.value)) {\n\t\tthrow new Error(`Param ${params.teams.key} must be an array`);\n\t}\n}\n\nasync function createChannel(\n\tuserId: string,\n\tparams: {\n\t\tname?: string;\n\t\tmembers?: string[];\n\t\tcustomFields?: Record<string, any>;\n\t\textraData?: Record<string, any>;\n\t\treadOnly?: boolean;\n\t\texcludeSelf?: boolean;\n\t},\n): Promise<{ channel: IRoom }> {\n\tconst readOnly = typeof params.readOnly !== 'undefined' ? params.readOnly : false;\n\tconst id = await createChannelMethod(\n\t\tuserId,\n\t\tparams.name || '',\n\t\tparams.members ? params.members : [],\n\t\treadOnly,\n\t\tparams.customFields,\n\t\tparams.extraData,\n\t\tparams.excludeSelf,\n\t);\n\n\treturn {\n\t\tchannel: await findChannelByIdOrName({ params: { roomId: id.rid }, userId }),\n\t};\n}\n\nAPI.channels = {\n\tcreate: {\n\t\tvalidate: createChannelValidator,\n\t\texecute: createChannel,\n\t},\n};\n\nAPI.v1.addRoute(\n\t'channels.create',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { userId, bodyParams } = this;\n\n\t\t\tlet error;\n\n\t\t\ttry {\n\t\t\t\tawait API.channels?.create.validate({\n\t\t\t\t\tuser: {\n\t\t\t\t\t\tvalue: userId,\n\t\t\t\t\t},\n\t\t\t\t\tname: {\n\t\t\t\t\t\tvalue: bodyParams.name,\n\t\t\t\t\t\tkey: 'name',\n\t\t\t\t\t},\n\t\t\t\t\tmembers: {\n\t\t\t\t\t\tvalue: bodyParams.members,\n\t\t\t\t\t\tkey: 'members',\n\t\t\t\t\t},\n\t\t\t\t\tteams: {\n\t\t\t\t\t\tvalue: bodyParams.teams,\n\t\t\t\t\t\tkey: 'teams',\n\t\t\t\t\t},\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\tvalue: bodyParams.extraData?.teamId,\n\t\t\t\t\t\tkey: 'teamId',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (e: any) {\n\t\t\t\tif (e.message === 'unauthorized') {\n\t\t\t\t\terror = API.v1.unauthorized();\n\t\t\t\t} else {\n\t\t\t\t\terror = API.v1.failure(e.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (bodyParams.teams) {\n\t\t\t\tconst canSeeAllTeams = await hasPermissionAsync(this.userId, 'view-all-teams');\n\t\t\t\tconst teams = await Team.listByNames(bodyParams.teams, { projection: { _id: 1 } });\n\t\t\t\tconst teamMembers = [];\n\n\t\t\t\tfor (const team of teams) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tconst { records: members } = await Team.members(this.userId, team._id, canSeeAllTeams, {\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tcount: Number.MAX_SAFE_INTEGER,\n\t\t\t\t\t});\n\t\t\t\t\tconst uids = members.map((member) => member.user.username);\n\t\t\t\t\tteamMembers.push(...uids);\n\t\t\t\t}\n\n\t\t\t\tconst membersToAdd = new Set([...teamMembers, ...(bodyParams.members || [])]);\n\t\t\t\tbodyParams.members = [...membersToAdd].filter(Boolean) as string[];\n\t\t\t}\n\n\t\t\treturn API.v1.success(await API.channels?.create.execute(userId, bodyParams));\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.files',\n\t{ authRequired: true, validateParams: isChannelsFilesListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { typeGroup, name, roomId, roomName } = this.queryParams;\n\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: {\n\t\t\t\t\t...(roomId ? { roomId } : {}),\n\t\t\t\t\t...(roomName ? { roomName } : {}),\n\t\t\t\t},\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (!(await canAccessRoomAsync(findResult, { _id: this.userId }))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst filter = {\n\t\t\t\trid: findResult._id,\n\t\t\t\t...query,\n\t\t\t\t...(name ? { name: { $regex: name || '', $options: 'i' } } : {}),\n\t\t\t\t...(typeGroup ? { typeGroup } : {}),\n\t\t\t};\n\n\t\t\tconst { cursor, totalCount } = await Uploads.findPaginatedWithoutThumbs(filter, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.getIntegrations',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: {\n\t\t\t\tpermissions: [\n\t\t\t\t\t'manage-outgoing-integrations',\n\t\t\t\t\t'manage-own-outgoing-integrations',\n\t\t\t\t\t'manage-incoming-integrations',\n\t\t\t\t\t'manage-own-incoming-integrations',\n\t\t\t\t],\n\t\t\t\toperation: 'hasAny',\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tlet includeAllPublicChannels = true;\n\t\t\tif (typeof this.queryParams.includeAllPublicChannels !== 'undefined') {\n\t\t\t\tincludeAllPublicChannels = this.queryParams.includeAllPublicChannels === 'true';\n\t\t\t}\n\n\t\t\tlet ourQuery: { channel: string | { $in: string[] } } = {\n\t\t\t\tchannel: `#${findResult.name}`,\n\t\t\t};\n\n\t\t\tif (includeAllPublicChannels) {\n\t\t\t\tourQuery.channel = {\n\t\t\t\t\t$in: [ourQuery.channel as string, 'all_public_channels'],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst params = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(params);\n\t\t\tconst { sort, fields: projection, query } = await this.parseJsonQuery();\n\n\t\t\tourQuery = Object.assign(await mountIntegrationQueryBasedOnPermissions(this.userId), query, ourQuery);\n\n\t\t\tconst { cursor, totalCount } = await Integrations.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { _createdAt: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection,\n\t\t\t});\n\n\t\t\tconst [integrations, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tintegrations,\n\t\t\t\tcount: integrations.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.info',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.queryParams,\n\t\t\t\t\tcheckedArchived: false,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.invite',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst users = await getUserListFromParams(this.bodyParams);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn API.v1.failure('invalid-user-invite-list', 'Cannot invite if no users are provided');\n\t\t\t}\n\n\t\t\tawait addUsersToRoomMethod(this.userId, { rid: findResult._id, users: users.map((u) => u.username).filter(isTruthy) });\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: {\n\t\t\tGET: { permissions: ['view-c-room', 'view-joined-room'], operation: 'hasAny' },\n\t\t},\n\t\tvalidateParams: isChannelsListProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst hasPermissionToSeeAllPublicChannels = await hasPermissionAsync(this.userId, 'view-c-room');\n\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tconst ourQuery = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tif (!hasPermissionToSeeAllPublicChannels) {\n\t\t\t\tconst roomIds = (\n\t\t\t\t\tawait Subscriptions.findByUserIdAndType(this.userId, 'c', {\n\t\t\t\t\t\tprojection: { rid: 1 },\n\t\t\t\t\t}).toArray()\n\t\t\t\t).map((s) => s.rid);\n\t\t\t\tourQuery._id = { $in: roomIds };\n\t\t\t}\n\n\t\t\t// teams filter - I would love to have a way to apply this filter @ db level :(\n\t\t\tconst ids = (await Subscriptions.findByUserId(this.userId, { projection: { rid: 1 } }).toArray()).map(\n\t\t\t\t(item: Record<string, any>) => item.rid,\n\t\t\t);\n\n\t\t\tourQuery.$or = [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\tcount: channels.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.list.joined',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\n\t\t\tconst subs = await Subscriptions.findByUserIdAndTypes(this.userId, ['c'], { projection: { rid: 1 } }).toArray();\n\t\t\tconst rids = subs.map(({ rid }) => rid).filter(Boolean);\n\n\t\t\tif (rids.length === 0) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tchannels: [],\n\t\t\t\t\toffset,\n\t\t\t\t\tcount: 0,\n\t\t\t\t\ttotal: 0,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Rooms.findPaginatedByTypeAndIds('c', rids, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [channels, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannels: await Promise.all(channels.map((room) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: channels.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.members',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\n\t\t\tif (findResult.broadcast && !(await hasPermissionAsync(this.userId, 'view-broadcast-member-list', findResult._id))) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset: skip, count: limit } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = {} } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst { cursor, totalCount } = await findUsersOfRoom({\n\t\t\t\trid: findResult._id,\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t\tfilter,\n\t\t\t\t...(sort?.username && { sort: { username: sort.username } }),\n\t\t\t});\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset: skip,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.online',\n\t{ authRequired: true, validateParams: isChannelsOnlineProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { query } = await this.parseJsonQuery();\n\t\t\tconst { _id } = this.queryParams;\n\n\t\t\tif ((!query || Object.keys(query).length === 0) && !_id) {\n\t\t\t\treturn API.v1.failure('Invalid query');\n\t\t\t}\n\n\t\t\tconst filter = {\n\t\t\t\t...query,\n\t\t\t\t...(_id ? { _id } : {}),\n\t\t\t\tt: 'c',\n\t\t\t};\n\n\t\t\tconst room = await Rooms.findOne(filter as Record<string, any>);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('Channel does not exists');\n\t\t\t}\n\n\t\t\tconst user = await getLoggedInUser(this.request);\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst online: Pick<IUser, '_id' | 'username'>[] = await Users.findUsersNotOffline({\n\t\t\t\tprojection: { username: 1 },\n\t\t\t}).toArray();\n\n\t\t\tconst onlineInRoom = await Promise.all(\n\t\t\t\tonline.map(async (user) => {\n\t\t\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id, {\n\t\t\t\t\t\tprojection: { _id: 1, username: 1 },\n\t\t\t\t\t});\n\t\t\t\t\tif (subscription) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: user._id,\n\t\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tonline: onlineInRoom.filter(Boolean) as IUser[],\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeModerator',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomModerator', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeOwner',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomOwner', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.rename',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.name?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"name\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.name === this.bodyParams.name) {\n\t\t\t\treturn API.v1.failure('The channel name is the same as what it would be renamed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomName', this.bodyParams.name);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({\n\t\t\t\t\tparams: this.bodyParams,\n\t\t\t\t\tuserId: this.userId,\n\t\t\t\t}),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setCustomFields',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.customFields || !(typeof this.bodyParams.customFields === 'object')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"customFields\" is required with a type like object.');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomCustomFields', this.bodyParams.customFields);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDefault',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (typeof this.bodyParams.default === 'undefined') {\n\t\t\t\treturn API.v1.failure('The bodyParam \"default\" is required', 'error-channels-setdefault-is-same');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.default === this.bodyParams.default) {\n\t\t\t\treturn API.v1.failure(\n\t\t\t\t\t'The channel default setting is the same as what it would be changed to.',\n\t\t\t\t\t'error-channels-setdefault-missing-default-param',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(\n\t\t\t\tthis.userId,\n\t\t\t\tfindResult._id,\n\t\t\t\t'default',\n\t\t\t\t['true', '1'].includes(this.bodyParams.default.toString().toLowerCase()),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setDescription',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('description')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"description\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.description) {\n\t\t\t\treturn API.v1.failure('The channel description is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.description || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tdescription: this.bodyParams.description || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setPurpose',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('purpose')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"purpose\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.description === this.bodyParams.purpose) {\n\t\t\t\treturn API.v1.failure('The channel purpose (description) is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomDescription', this.bodyParams.purpose || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\tpurpose: this.bodyParams.purpose || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setTopic',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.hasOwnProperty('topic')) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"topic\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.topic === this.bodyParams.topic) {\n\t\t\t\treturn API.v1.failure('The channel topic is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomTopic', this.bodyParams.topic || '');\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic: this.bodyParams.topic || '',\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setType',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.type?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"type\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tif (findResult.t === this.bodyParams.type) {\n\t\t\t\treturn API.v1.failure('The channel type is the same as what it would be changed to.');\n\t\t\t}\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'roomType', this.bodyParams.type as RoomType);\n\n\t\t\tconst room = await Rooms.findOneById(findResult._id, { projection: API.v1.defaultFieldsToExclude });\n\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('The channel does not exist');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await composeRoomWithLastMessage(room, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.addLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('addRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.removeLeader',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tconst user = await getUserFromParams(this.bodyParams);\n\n\t\t\tawait Meteor.callAsync('removeRoomLeader', findResult._id, user._id);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.setJoinCode',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.joinCode?.trim()) {\n\t\t\t\treturn API.v1.failure('The bodyParam \"joinCode\" is required');\n\t\t\t}\n\n\t\t\tconst findResult = await findChannelByIdOrName({ params: this.bodyParams });\n\n\t\t\tawait saveRoomSettings(this.userId, findResult._id, 'joinCode', this.bodyParams.joinCode);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tchannel: await findChannelByIdOrName({ params: this.bodyParams, userId: this.userId }),\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'channels.anonymousread',\n\t{ authRequired: false },\n\t{\n\t\tasync get() {\n\t\t\tconst findResult = await findChannelByIdOrName({\n\t\t\t\tparams: this.queryParams,\n\t\t\t\tcheckedArchived: false,\n\t\t\t});\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: findResult._id });\n\n\t\t\tif (!settings.get<boolean>('Accounts_AllowAnonymousRead')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Enable \"Allow Anonymous Read\"', {\n\t\t\t\t\tmethod: 'channels.anonymousread',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId || ''),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e0947ef9c9cc362a2e9851cf8a66abcc5ced29d8"}
