{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/CommandHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Class for executing command.\n * @remarks\n * This class abstracts lower details such as interface, connection and command objects\n * from the consumers of this class.\n * Connectors can be to different call-servers. For each call server, there will be\n * a multiple interfaces. e.g in case of asterisk, there are 3 types of interfaces.\n * Asterisk Gateway Interface (AGI) : Used for dialplan administration and manipulation\n * Asterisk Rest Interface (ARI) : Used for managing asterisk resources to build own application.\n * One of the use-case of ARI is for dynamically creating endpoints or listing existing recordings.\n * Asterisk Manager Interface (AMI) : Used for querying the information from asterisk.\n *\n * We shall be using only AMI interface in the for now. Other interfaces will be\n * added as and when required.\n */\nimport type { IVoipConnectorResult, IManagementServerConnectionStatus, IManagementConfigData } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\n\nimport type { Command } from './Command';\nimport { CommandType } from './Command';\nimport { Commands } from './Commands';\nimport type { IConnection } from './IConnection';\nimport { getManagementServerConfig } from '../../lib/Helper';\nimport { WebsocketConnection } from '../websocket/WebsocketConnection';\nimport { AMIConnection } from './ami/AMIConnection';\nimport { CommandFactory } from './ami/CommandFactory';\n\nconst version = 'Asterisk Connector 1.0';\n\nexport class CommandHandler {\n\tprivate connections: Map<CommandType, IConnection>;\n\n\tprivate logger: Logger;\n\n\tprivate continuousMonitor: Command;\n\n\tprivate db: Db;\n\n\tconstructor(db: Db) {\n\t\tthis.logger = new Logger('CommandHandler');\n\t\tthis.connections = new Map<CommandType, IConnection>();\n\t\tthis.db = db;\n\t}\n\n\tasync initConnection(commandType: CommandType): Promise<void> {\n\t\t// Initialize available connections\n\t\tconst connection = new AMIConnection();\n\n\t\tconst config = commandType === CommandType.AMI ? getManagementServerConfig() : undefined;\n\t\tif (!config) {\n\t\t\tthis.logger.warn('Management server configuration not found');\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t * If we have the same type of connection already established, close it\n\t\t * and remove it from the map.\n\t\t */\n\t\tif (this.connections.get(commandType)?.isConnected()) {\n\t\t\tthis.logger.error({ msg: 'connection exists. Closing the connection.' });\n\t\t\tthis.connections.get(commandType)?.closeConnection();\n\t\t\tthis.connections.delete(commandType);\n\t\t}\n\n\t\tif (!config.host) {\n\t\t\tthis.logger.error('Invalid host');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait connection.connect(\n\t\t\t\tconfig.host,\n\t\t\t\t(config.configData as IManagementConfigData).port.toString(),\n\t\t\t\t(config.configData as IManagementConfigData).username,\n\t\t\t\t(config.configData as IManagementConfigData).password,\n\t\t\t);\n\t\t\tthis.connections.set(commandType, connection);\n\t\t\tthis.continuousMonitor = CommandFactory.getCommandObject(Commands.event_stream, this.db);\n\t\t\tconst continuousMonitor = this.connections.get(this.continuousMonitor.type);\n\t\t\tif (!continuousMonitor) {\n\t\t\t\tthrow new Error(`No connection for ${this.continuousMonitor.type}`);\n\t\t\t}\n\t\t\tthis.continuousMonitor.connection = continuousMonitor;\n\t\t\tthis.continuousMonitor.initMonitor({});\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'Management server connection error', err });\n\t\t}\n\t}\n\n\t/* Executes |commandToExecute| on a particular command object\n\t * @remarks\n\t * CommandFactory is responsible for creating a |Command| object necessary\n\t * for executing an AMI command. Every concrete command object inherits\n\t * from class |Command|. Which overrides a method called executeCommand.\n\t * This function returns a promise. Caller can wait for the promise to resolve\n\t * or rejected.\n\t */\n\texecuteCommand(commandToExecute: Commands, commandData?: any): Promise<IVoipConnectorResult> {\n\t\tthis.logger.debug({ msg: `executeCommand() executing ${Commands[commandToExecute]}` });\n\t\tconst command = CommandFactory.getCommandObject(commandToExecute, this.db);\n\t\tconst connection = this.connections.get(command.type) as IConnection;\n\t\tif (!connection?.isConnected()) {\n\t\t\tthrow Error('Connection error');\n\t\t}\n\t\tcommand.connection = this.connections.get(command.type) as IConnection;\n\t\treturn command.executeCommand(commandData);\n\t}\n\n\t// Get the version string\n\tgetVersion(): string {\n\t\treturn version;\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkManagementConnection()', host, port, userName });\n\t\tconst connection = new AMIConnection();\n\t\ttry {\n\t\t\tawait connection.connect(host, port, userName, password);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkCallserverConnection()', websocketUrl });\n\t\tconst connection = new WebsocketConnection();\n\t\ttry {\n\t\t\tawait connection.connectWithUrl(websocketUrl, protocol);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tstop(): void {\n\t\tif (!this.continuousMonitor) {\n\t\t\t// service is already stopped or was never initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis.continuousMonitor.cleanMonitor();\n\t\tfor (const connection of this.connections.values()) {\n\t\t\tconnection.closeConnection();\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/CommandHandler.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/CommandHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Class for executing command.\n * @remarks\n * This class abstracts lower details such as interface, connection and command objects\n * from the consumers of this class.\n * Connectors can be to different call-servers. For each call server, there will be\n * a multiple interfaces. e.g in case of asterisk, there are 3 types of interfaces.\n * Asterisk Gateway Interface (AGI) : Used for dialplan administration and manipulation\n * Asterisk Rest Interface (ARI) : Used for managing asterisk resources to build own application.\n * One of the use-case of ARI is for dynamically creating endpoints or listing existing recordings.\n * Asterisk Manager Interface (AMI) : Used for querying the information from asterisk.\n *\n * We shall be using only AMI interface in the for now. Other interfaces will be\n * added as and when required.\n */\nimport type { IVoipConnectorResult, IManagementServerConnectionStatus, IManagementConfigData } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\n\nimport type { Command } from './Command';\nimport { CommandType } from './Command';\nimport { Commands } from './Commands';\nimport type { IConnection } from './IConnection';\nimport { getManagementServerConfig } from '../../lib/Helper';\nimport { WebsocketConnection } from '../websocket/WebsocketConnection';\nimport { AMIConnection } from './ami/AMIConnection';\nimport { CommandFactory } from './ami/CommandFactory';\n\nconst version = 'Asterisk Connector 1.0';\n\nexport class CommandHandler {\n\tprivate connections: Map<CommandType, IConnection>;\n\n\tprivate logger: Logger;\n\n\tprivate continuousMonitor: Command;\n\n\tprivate db: Db;\n\n\tconstructor(db: Db) {\n\t\tthis.logger = new Logger('CommandHandler');\n\t\tthis.connections = new Map<CommandType, IConnection>();\n\t\tthis.db = db;\n\t}\n\n\tasync initConnection(commandType: CommandType): Promise<void> {\n\t\t// Initialize available connections\n\t\tconst connection = new AMIConnection();\n\n\t\tconst config = commandType === CommandType.AMI ? getManagementServerConfig() : undefined;\n\t\tif (!config) {\n\t\t\tthis.logger.warn('Management server configuration not found');\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t * If we have the same type of connection already established, close it\n\t\t * and remove it from the map.\n\t\t */\n\t\tif (this.connections.get(commandType)?.isConnected()) {\n\t\t\tthis.logger.error({ msg: 'connection exists. Closing the connection.' });\n\t\t\tthis.connections.get(commandType)?.closeConnection();\n\t\t\tthis.connections.delete(commandType);\n\t\t}\n\n\t\tif (!config.host) {\n\t\t\tthis.logger.error('Invalid host');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait connection.connect(\n\t\t\t\tconfig.host,\n\t\t\t\t(config.configData as IManagementConfigData).port.toString(),\n\t\t\t\t(config.configData as IManagementConfigData).username,\n\t\t\t\t(config.configData as IManagementConfigData).password,\n\t\t\t);\n\t\t\tthis.connections.set(commandType, connection);\n\t\t\tthis.continuousMonitor = CommandFactory.getCommandObject(Commands.event_stream, this.db);\n\t\t\tconst continuousMonitor = this.connections.get(this.continuousMonitor.type);\n\t\t\tif (!continuousMonitor) {\n\t\t\t\tthrow new Error(`No connection for ${this.continuousMonitor.type}`);\n\t\t\t}\n\t\t\tthis.continuousMonitor.connection = continuousMonitor;\n\t\t\tthis.continuousMonitor.initMonitor({});\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'Management server connection error', err });\n\t\t}\n\t}\n\n\t/* Executes |commandToExecute| on a particular command object\n\t * @remarks\n\t * CommandFactory is responsible for creating a |Command| object necessary\n\t * for executing an AMI command. Every concrete command object inherits\n\t * from class |Command|. Which overrides a method called executeCommand.\n\t * This function returns a promise. Caller can wait for the promise to resolve\n\t * or rejected.\n\t */\n\texecuteCommand(commandToExecute: Commands, commandData?: any): Promise<IVoipConnectorResult> {\n\t\tthis.logger.debug({ msg: `executeCommand() executing ${Commands[commandToExecute]}` });\n\t\tconst command = CommandFactory.getCommandObject(commandToExecute, this.db);\n\t\tconst connection = this.connections.get(command.type) as IConnection;\n\t\tif (!connection?.isConnected()) {\n\t\t\tthrow Error('Connection error');\n\t\t}\n\t\tcommand.connection = this.connections.get(command.type) as IConnection;\n\t\treturn command.executeCommand(commandData);\n\t}\n\n\t// Get the version string\n\tgetVersion(): string {\n\t\treturn version;\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkManagementConnection()', host, port, userName });\n\t\tconst connection = new AMIConnection();\n\t\ttry {\n\t\t\tawait connection.connect(host, port, userName, password);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkCallserverConnection()', websocketUrl });\n\t\tconst connection = new WebsocketConnection();\n\t\ttry {\n\t\t\tawait connection.connectWithUrl(websocketUrl, protocol);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tstop(): void {\n\t\tif (!this.continuousMonitor) {\n\t\t\t// service is already stopped or was never initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis.continuousMonitor.cleanMonitor();\n\t\tfor (const connection of this.connections.values()) {\n\t\t\tconnection.closeConnection();\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      CommandHandler: () => CommandHandler\n    });\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let CommandType;\n    module.link(\"./Command\", {\n      CommandType(v) {\n        CommandType = v;\n      }\n    }, 1);\n    let Commands;\n    module.link(\"./Commands\", {\n      Commands(v) {\n        Commands = v;\n      }\n    }, 2);\n    let getManagementServerConfig;\n    module.link(\"../../lib/Helper\", {\n      getManagementServerConfig(v) {\n        getManagementServerConfig = v;\n      }\n    }, 3);\n    let WebsocketConnection;\n    module.link(\"../websocket/WebsocketConnection\", {\n      WebsocketConnection(v) {\n        WebsocketConnection = v;\n      }\n    }, 4);\n    let AMIConnection;\n    module.link(\"./ami/AMIConnection\", {\n      AMIConnection(v) {\n        AMIConnection = v;\n      }\n    }, 5);\n    let CommandFactory;\n    module.link(\"./ami/CommandFactory\", {\n      CommandFactory(v) {\n        CommandFactory = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const version = 'Asterisk Connector 1.0';\n    class CommandHandler {\n      constructor(db) {\n        this.connections = void 0;\n        this.logger = void 0;\n        this.continuousMonitor = void 0;\n        this.db = void 0;\n        this.logger = new Logger('CommandHandler');\n        this.connections = new Map();\n        this.db = db;\n      }\n      async initConnection(commandType) {\n        var _this$connections$get;\n        // Initialize available connections\n        const connection = new AMIConnection();\n        const config = commandType === CommandType.AMI ? getManagementServerConfig() : undefined;\n        if (!config) {\n          this.logger.warn('Management server configuration not found');\n          return;\n        }\n        /**\n         * If we have the same type of connection already established, close it\n         * and remove it from the map.\n         */\n        if ((_this$connections$get = this.connections.get(commandType)) !== null && _this$connections$get !== void 0 && _this$connections$get.isConnected()) {\n          var _this$connections$get2;\n          this.logger.error({\n            msg: 'connection exists. Closing the connection.'\n          });\n          (_this$connections$get2 = this.connections.get(commandType)) === null || _this$connections$get2 === void 0 ? void 0 : _this$connections$get2.closeConnection();\n          this.connections.delete(commandType);\n        }\n        if (!config.host) {\n          this.logger.error('Invalid host');\n          return;\n        }\n        try {\n          await connection.connect(config.host, config.configData.port.toString(), config.configData.username, config.configData.password);\n          this.connections.set(commandType, connection);\n          this.continuousMonitor = CommandFactory.getCommandObject(Commands.event_stream, this.db);\n          const continuousMonitor = this.connections.get(this.continuousMonitor.type);\n          if (!continuousMonitor) {\n            throw new Error(\"No connection for \".concat(this.continuousMonitor.type));\n          }\n          this.continuousMonitor.connection = continuousMonitor;\n          this.continuousMonitor.initMonitor({});\n        } catch (err) {\n          this.logger.error({\n            msg: 'Management server connection error',\n            err\n          });\n        }\n      }\n      /* Executes |commandToExecute| on a particular command object\n       * @remarks\n       * CommandFactory is responsible for creating a |Command| object necessary\n       * for executing an AMI command. Every concrete command object inherits\n       * from class |Command|. Which overrides a method called executeCommand.\n       * This function returns a promise. Caller can wait for the promise to resolve\n       * or rejected.\n       */\n      executeCommand(commandToExecute, commandData) {\n        this.logger.debug({\n          msg: \"executeCommand() executing \".concat(Commands[commandToExecute])\n        });\n        const command = CommandFactory.getCommandObject(commandToExecute, this.db);\n        const connection = this.connections.get(command.type);\n        if (!(connection !== null && connection !== void 0 && connection.isConnected())) {\n          throw Error('Connection error');\n        }\n        command.connection = this.connections.get(command.type);\n        return command.executeCommand(commandData);\n      }\n      // Get the version string\n      getVersion() {\n        return version;\n      }\n      async checkManagementConnection(host, port, userName, password) {\n        this.logger.debug({\n          msg: 'checkManagementConnection()',\n          host,\n          port,\n          userName\n        });\n        const connection = new AMIConnection();\n        try {\n          await connection.connect(host, port, userName, password);\n          if (connection.isConnected()) {\n            // Just a second level of check to ensure that we are actually\n            // connected and authenticated.\n            connection.closeConnection();\n          }\n          this.logger.debug({\n            msg: 'checkManagementConnection() Connected '\n          });\n          return {\n            status: 'connected'\n          };\n        } catch (err) {\n          this.logger.error({\n            msg: 'checkManagementConnection() Connection Error',\n            err\n          });\n          throw err;\n        }\n      }\n      async checkCallserverConnection(websocketUrl, protocol) {\n        this.logger.debug({\n          msg: 'checkCallserverConnection()',\n          websocketUrl\n        });\n        const connection = new WebsocketConnection();\n        try {\n          await connection.connectWithUrl(websocketUrl, protocol);\n          if (connection.isConnected()) {\n            // Just a second level of check to ensure that we are actually\n            // connected and authenticated.\n            connection.closeConnection();\n          }\n          this.logger.debug({\n            msg: 'checkManagementConnection() Connected '\n          });\n          return {\n            status: 'connected'\n          };\n        } catch (err) {\n          this.logger.error({\n            msg: 'checkManagementConnection() Connection Error',\n            err\n          });\n          throw err;\n        }\n      }\n      stop() {\n        if (!this.continuousMonitor) {\n          // service is already stopped or was never initialized\n          return;\n        }\n        this.continuousMonitor.cleanMonitor();\n        for (const connection of this.connections.values()) {\n          connection.closeConnection();\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","CommandHandler","Logger","link","v","CommandType","Commands","getManagementServerConfig","WebsocketConnection","AMIConnection","CommandFactory","__reifyWaitForDeps__","version","constructor","db","connections","logger","continuousMonitor","Map","initConnection","commandType","_this$connections$get","connection","config","AMI","undefined","warn","get","isConnected","_this$connections$get2","error","msg","closeConnection","delete","host","connect","configData","port","toString","username","password","set","getCommandObject","event_stream","type","Error","concat","initMonitor","err","executeCommand","commandToExecute","commandData","debug","command","getVersion","checkManagementConnection","userName","status","checkCallserverConnection","websocketUrl","protocol","connectWithUrl","stop","cleanMonitor","values","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/voip-asterisk/connector/asterisk/CommandHandler.ts"],"sourcesContent":["/**\n * Class for executing command.\n * @remarks\n * This class abstracts lower details such as interface, connection and command objects\n * from the consumers of this class.\n * Connectors can be to different call-servers. For each call server, there will be\n * a multiple interfaces. e.g in case of asterisk, there are 3 types of interfaces.\n * Asterisk Gateway Interface (AGI) : Used for dialplan administration and manipulation\n * Asterisk Rest Interface (ARI) : Used for managing asterisk resources to build own application.\n * One of the use-case of ARI is for dynamically creating endpoints or listing existing recordings.\n * Asterisk Manager Interface (AMI) : Used for querying the information from asterisk.\n *\n * We shall be using only AMI interface in the for now. Other interfaces will be\n * added as and when required.\n */\nimport type { IVoipConnectorResult, IManagementServerConnectionStatus, IManagementConfigData } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport type { Db } from 'mongodb';\n\nimport type { Command } from './Command';\nimport { CommandType } from './Command';\nimport { Commands } from './Commands';\nimport type { IConnection } from './IConnection';\nimport { getManagementServerConfig } from '../../lib/Helper';\nimport { WebsocketConnection } from '../websocket/WebsocketConnection';\nimport { AMIConnection } from './ami/AMIConnection';\nimport { CommandFactory } from './ami/CommandFactory';\n\nconst version = 'Asterisk Connector 1.0';\n\nexport class CommandHandler {\n\tprivate connections: Map<CommandType, IConnection>;\n\n\tprivate logger: Logger;\n\n\tprivate continuousMonitor: Command;\n\n\tprivate db: Db;\n\n\tconstructor(db: Db) {\n\t\tthis.logger = new Logger('CommandHandler');\n\t\tthis.connections = new Map<CommandType, IConnection>();\n\t\tthis.db = db;\n\t}\n\n\tasync initConnection(commandType: CommandType): Promise<void> {\n\t\t// Initialize available connections\n\t\tconst connection = new AMIConnection();\n\n\t\tconst config = commandType === CommandType.AMI ? getManagementServerConfig() : undefined;\n\t\tif (!config) {\n\t\t\tthis.logger.warn('Management server configuration not found');\n\t\t\treturn;\n\t\t}\n\t\t/**\n\t\t * If we have the same type of connection already established, close it\n\t\t * and remove it from the map.\n\t\t */\n\t\tif (this.connections.get(commandType)?.isConnected()) {\n\t\t\tthis.logger.error({ msg: 'connection exists. Closing the connection.' });\n\t\t\tthis.connections.get(commandType)?.closeConnection();\n\t\t\tthis.connections.delete(commandType);\n\t\t}\n\n\t\tif (!config.host) {\n\t\t\tthis.logger.error('Invalid host');\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait connection.connect(\n\t\t\t\tconfig.host,\n\t\t\t\t(config.configData as IManagementConfigData).port.toString(),\n\t\t\t\t(config.configData as IManagementConfigData).username,\n\t\t\t\t(config.configData as IManagementConfigData).password,\n\t\t\t);\n\t\t\tthis.connections.set(commandType, connection);\n\t\t\tthis.continuousMonitor = CommandFactory.getCommandObject(Commands.event_stream, this.db);\n\t\t\tconst continuousMonitor = this.connections.get(this.continuousMonitor.type);\n\t\t\tif (!continuousMonitor) {\n\t\t\t\tthrow new Error(`No connection for ${this.continuousMonitor.type}`);\n\t\t\t}\n\t\t\tthis.continuousMonitor.connection = continuousMonitor;\n\t\t\tthis.continuousMonitor.initMonitor({});\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'Management server connection error', err });\n\t\t}\n\t}\n\n\t/* Executes |commandToExecute| on a particular command object\n\t * @remarks\n\t * CommandFactory is responsible for creating a |Command| object necessary\n\t * for executing an AMI command. Every concrete command object inherits\n\t * from class |Command|. Which overrides a method called executeCommand.\n\t * This function returns a promise. Caller can wait for the promise to resolve\n\t * or rejected.\n\t */\n\texecuteCommand(commandToExecute: Commands, commandData?: any): Promise<IVoipConnectorResult> {\n\t\tthis.logger.debug({ msg: `executeCommand() executing ${Commands[commandToExecute]}` });\n\t\tconst command = CommandFactory.getCommandObject(commandToExecute, this.db);\n\t\tconst connection = this.connections.get(command.type) as IConnection;\n\t\tif (!connection?.isConnected()) {\n\t\t\tthrow Error('Connection error');\n\t\t}\n\t\tcommand.connection = this.connections.get(command.type) as IConnection;\n\t\treturn command.executeCommand(commandData);\n\t}\n\n\t// Get the version string\n\tgetVersion(): string {\n\t\treturn version;\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkManagementConnection()', host, port, userName });\n\t\tconst connection = new AMIConnection();\n\t\ttry {\n\t\t\tawait connection.connect(host, port, userName, password);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug({ msg: 'checkCallserverConnection()', websocketUrl });\n\t\tconst connection = new WebsocketConnection();\n\t\ttry {\n\t\t\tawait connection.connectWithUrl(websocketUrl, protocol);\n\t\t\tif (connection.isConnected()) {\n\t\t\t\t// Just a second level of check to ensure that we are actually\n\t\t\t\t// connected and authenticated.\n\t\t\t\tconnection.closeConnection();\n\t\t\t}\n\t\t\tthis.logger.debug({ msg: 'checkManagementConnection() Connected ' });\n\t\t\treturn {\n\t\t\t\tstatus: 'connected',\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tthis.logger.error({ msg: 'checkManagementConnection() Connection Error', err });\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tstop(): void {\n\t\tif (!this.continuousMonitor) {\n\t\t\t// service is already stopped or was never initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis.continuousMonitor.cleanMonitor();\n\t\tfor (const connection of this.connections.values()) {\n\t\t\tconnection.closeConnection();\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1f4e0ea365b7b64678cb3a5d9b26a3dcdaaee37a"}
