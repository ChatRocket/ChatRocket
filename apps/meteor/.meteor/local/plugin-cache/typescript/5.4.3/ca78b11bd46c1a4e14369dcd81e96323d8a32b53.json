{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/utils/parseParameters.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"lib/utils/parseParameters.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/utils/parseParameters.ts","inputSourceMap":{"version":3,"file":"lib/utils/parseParameters.ts","sourceRoot":"","sources":["lib/utils/parseParameters.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,CAAC,UAAkB,EAAE,yBAAyB,GAAG,IAAI;IAClE,gCAAgC;IAChC,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAEtC,IAAI,yBAAyB,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO,KAAK,CAAC;AACd,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,UAAkB,EAAE,yBAAyB,GAAG,IAAI;IACnF,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC;QACxB,OAAO,EAAE,CAAC;IACX,CAAC;IAED,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACjE,IAAI,IAAI,GAAG,UAAU,CAAC;IAEtB,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,OAAO,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACtB,MAAM,OAAO,GAAG,IAAI;YACnB,yCAAyC;aACxC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;YAC9B,uCAAuC;aACtC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAC5B,sEAAsE;aACrE,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;YACxB,2DAA2D;aAC1D,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;YAC1B,kEAAkE;aACjE,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;YAC1B,sDAAsD;aACrD,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE3B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;IAErD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACzB,IAAI;QACH,6CAA6C;SAC5C,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;QACxB,gDAAgD;SAC/C,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,uDAAuD;SACtD,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,2CAA2C;SAC1C,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,gCAAgC;SAC/B,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;QAC/B,kBAAkB;SACjB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACvB,CAAC;AACH,CAAC","sourcesContent":["function split(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\t// Replace \\n\\r with a single \\n\n\tconst line = parameters.replace(/\\n\\r/gm, '\\n');\n\n\tconst items = line.split(/[ \\n\\r\\t]/);\n\n\tif (ignoreExtraUnquotedSpaces) {\n\t\treturn items.filter(Boolean);\n\t}\n\n\treturn items;\n}\n\nexport function parseParameters(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\tif (!parameters.trim()) {\n\t\treturn [];\n\t}\n\n\tconst match = parameters.match(/(([\"'])(?:(?=(\\\\?))\\3.)*?\\2)/gs);\n\tlet line = parameters;\n\n\tif (!match) {\n\t\treturn split(line, ignoreExtraUnquotedSpaces);\n\t}\n\n\tmatch.forEach((item) => {\n\t\tconst newItem = item\n\t\t\t// Replace start quote with SSA character\n\t\t\t.replace(/(^['\"])/g, '\\u0086')\n\t\t\t// Replace end quote with ESA character\n\t\t\t.replace(/['\"]$/g, '\\u0087')\n\t\t\t// Replace spaces inside the quotes with a Punctuation Space character\n\t\t\t.replace(/ /g, '\\u2008')\n\t\t\t// Replace new lines inside the quotes with a PLD character\n\t\t\t.replace(/\\n/gm, '\\u008B')\n\t\t\t// Replace carriage returns inside the quotes with a PLU character\n\t\t\t.replace(/\\r/gm, '\\u008C')\n\t\t\t// Replace tabs inside the quotes with a VTS character\n\t\t\t.replace(/\\t/g, '\\u008A');\n\n\t\tline = line.replace(item, newItem);\n\t});\n\n\t// If two quoted parameters are not separated by a space, add one automatically\n\tline = line.replace(/\\u0087\\u0086/g, '\\u0087 \\u0086');\n\n\tconst items = split(line, ignoreExtraUnquotedSpaces);\n\n\treturn items.map((item) =>\n\t\titem\n\t\t\t// Convert back the spaces from inside quotes\n\t\t\t.replace(/\\u2008/g, ' ')\n\t\t\t// Convert back the new lines from inside quotes\n\t\t\t.replace(/\\u008B/g, '\\n')\n\t\t\t// Convert back the carriage returns from inside quotes\n\t\t\t.replace(/\\u008C/g, '\\r')\n\t\t\t// Convert back the tabs from inside quotes\n\t\t\t.replace(/\\u008A/g, '\\t')\n\t\t\t// Remove SSA and ESA characters\n\t\t\t.replace(/[\\u0086\\u0087]/g, '')\n\t\t\t// Unescape quotes\n\t\t\t.replace(/\\\\\\\"/g, '\"'),\n\t);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/utils/parseParameters.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/utils/parseParameters.ts","inputSourceMap":{"version":3,"file":"lib/utils/parseParameters.ts","sourceRoot":"","sources":["lib/utils/parseParameters.ts"],"names":[],"mappings":"AAAA,SAAS,KAAK,CAAC,UAAkB,EAAE,yBAAyB,GAAG,IAAI;IAClE,gCAAgC;IAChC,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAEhD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAEtC,IAAI,yBAAyB,EAAE,CAAC;QAC/B,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,OAAO,KAAK,CAAC;AACd,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,UAAkB,EAAE,yBAAyB,GAAG,IAAI;IACnF,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC;QACxB,OAAO,EAAE,CAAC;IACX,CAAC;IAED,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACjE,IAAI,IAAI,GAAG,UAAU,CAAC;IAEtB,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,OAAO,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACtB,MAAM,OAAO,GAAG,IAAI;YACnB,yCAAyC;aACxC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC;YAC9B,uCAAuC;aACtC,OAAO,CAAC,QAAQ,EAAE,QAAQ,CAAC;YAC5B,sEAAsE;aACrE,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;YACxB,2DAA2D;aAC1D,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;YAC1B,kEAAkE;aACjE,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC;YAC1B,sDAAsD;aACrD,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE3B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,+EAA+E;IAC/E,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IAEtD,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;IAErD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACzB,IAAI;QACH,6CAA6C;SAC5C,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;QACxB,gDAAgD;SAC/C,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,uDAAuD;SACtD,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,2CAA2C;SAC1C,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC;QACzB,gCAAgC;SAC/B,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;QAC/B,kBAAkB;SACjB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACvB,CAAC;AACH,CAAC","sourcesContent":["function split(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\t// Replace \\n\\r with a single \\n\n\tconst line = parameters.replace(/\\n\\r/gm, '\\n');\n\n\tconst items = line.split(/[ \\n\\r\\t]/);\n\n\tif (ignoreExtraUnquotedSpaces) {\n\t\treturn items.filter(Boolean);\n\t}\n\n\treturn items;\n}\n\nexport function parseParameters(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\tif (!parameters.trim()) {\n\t\treturn [];\n\t}\n\n\tconst match = parameters.match(/(([\"'])(?:(?=(\\\\?))\\3.)*?\\2)/gs);\n\tlet line = parameters;\n\n\tif (!match) {\n\t\treturn split(line, ignoreExtraUnquotedSpaces);\n\t}\n\n\tmatch.forEach((item) => {\n\t\tconst newItem = item\n\t\t\t// Replace start quote with SSA character\n\t\t\t.replace(/(^['\"])/g, '\\u0086')\n\t\t\t// Replace end quote with ESA character\n\t\t\t.replace(/['\"]$/g, '\\u0087')\n\t\t\t// Replace spaces inside the quotes with a Punctuation Space character\n\t\t\t.replace(/ /g, '\\u2008')\n\t\t\t// Replace new lines inside the quotes with a PLD character\n\t\t\t.replace(/\\n/gm, '\\u008B')\n\t\t\t// Replace carriage returns inside the quotes with a PLU character\n\t\t\t.replace(/\\r/gm, '\\u008C')\n\t\t\t// Replace tabs inside the quotes with a VTS character\n\t\t\t.replace(/\\t/g, '\\u008A');\n\n\t\tline = line.replace(item, newItem);\n\t});\n\n\t// If two quoted parameters are not separated by a space, add one automatically\n\tline = line.replace(/\\u0087\\u0086/g, '\\u0087 \\u0086');\n\n\tconst items = split(line, ignoreExtraUnquotedSpaces);\n\n\treturn items.map((item) =>\n\t\titem\n\t\t\t// Convert back the spaces from inside quotes\n\t\t\t.replace(/\\u2008/g, ' ')\n\t\t\t// Convert back the new lines from inside quotes\n\t\t\t.replace(/\\u008B/g, '\\n')\n\t\t\t// Convert back the carriage returns from inside quotes\n\t\t\t.replace(/\\u008C/g, '\\r')\n\t\t\t// Convert back the tabs from inside quotes\n\t\t\t.replace(/\\u008A/g, '\\t')\n\t\t\t// Remove SSA and ESA characters\n\t\t\t.replace(/[\\u0086\\u0087]/g, '')\n\t\t\t// Unescape quotes\n\t\t\t.replace(/\\\\\\\"/g, '\"'),\n\t);\n}\n"]}}},"code":"module.export({\n  parseParameters: () => parseParameters\n});\nfunction split(parameters) {\n  let ignoreExtraUnquotedSpaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  // Replace \\n\\r with a single \\n\n  const line = parameters.replace(/\\n\\r/gm, '\\n');\n  const items = line.split(/[ \\n\\r\\t]/);\n  if (ignoreExtraUnquotedSpaces) {\n    return items.filter(Boolean);\n  }\n  return items;\n}\nfunction parseParameters(parameters) {\n  let ignoreExtraUnquotedSpaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!parameters.trim()) {\n    return [];\n  }\n  const match = parameters.match(/(([\"'])(?:(?=(\\\\?))\\3.)*?\\2)/gs);\n  let line = parameters;\n  if (!match) {\n    return split(line, ignoreExtraUnquotedSpaces);\n  }\n  match.forEach(item => {\n    const newItem = item\n    // Replace start quote with SSA character\n    .replace(/(^['\"])/g, \"\\x86\")\n    // Replace end quote with ESA character\n    .replace(/['\"]$/g, \"\\x87\")\n    // Replace spaces inside the quotes with a Punctuation Space character\n    .replace(/ /g, \"\\u2008\")\n    // Replace new lines inside the quotes with a PLD character\n    .replace(/\\n/gm, \"\\x8B\")\n    // Replace carriage returns inside the quotes with a PLU character\n    .replace(/\\r/gm, \"\\x8C\")\n    // Replace tabs inside the quotes with a VTS character\n    .replace(/\\t/g, \"\\x8A\");\n    line = line.replace(item, newItem);\n  });\n  // If two quoted parameters are not separated by a space, add one automatically\n  line = line.replace(/\\u0087\\u0086/g, \"\\x87 \\x86\");\n  const items = split(line, ignoreExtraUnquotedSpaces);\n  return items.map(item => item\n  // Convert back the spaces from inside quotes\n  .replace(/\\u2008/g, ' ')\n  // Convert back the new lines from inside quotes\n  .replace(/\\u008B/g, '\\n')\n  // Convert back the carriage returns from inside quotes\n  .replace(/\\u008C/g, '\\r')\n  // Convert back the tabs from inside quotes\n  .replace(/\\u008A/g, '\\t')\n  // Remove SSA and ESA characters\n  .replace(/[\\u0086\\u0087]/g, '')\n  // Unescape quotes\n  .replace(/\\\\\\\"/g, '\"'));\n}","map":{"version":3,"names":["module","export","parseParameters","split","parameters","ignoreExtraUnquotedSpaces","arguments","length","undefined","line","replace","items","filter","Boolean","trim","match","forEach","item","newItem","map"],"sources":["lib/utils/parseParameters.ts"],"sourcesContent":["function split(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\t// Replace \\n\\r with a single \\n\n\tconst line = parameters.replace(/\\n\\r/gm, '\\n');\n\n\tconst items = line.split(/[ \\n\\r\\t]/);\n\n\tif (ignoreExtraUnquotedSpaces) {\n\t\treturn items.filter(Boolean);\n\t}\n\n\treturn items;\n}\n\nexport function parseParameters(parameters: string, ignoreExtraUnquotedSpaces = true): string[] {\n\tif (!parameters.trim()) {\n\t\treturn [];\n\t}\n\n\tconst match = parameters.match(/(([\"'])(?:(?=(\\\\?))\\3.)*?\\2)/gs);\n\tlet line = parameters;\n\n\tif (!match) {\n\t\treturn split(line, ignoreExtraUnquotedSpaces);\n\t}\n\n\tmatch.forEach((item) => {\n\t\tconst newItem = item\n\t\t\t// Replace start quote with SSA character\n\t\t\t.replace(/(^['\"])/g, '\\u0086')\n\t\t\t// Replace end quote with ESA character\n\t\t\t.replace(/['\"]$/g, '\\u0087')\n\t\t\t// Replace spaces inside the quotes with a Punctuation Space character\n\t\t\t.replace(/ /g, '\\u2008')\n\t\t\t// Replace new lines inside the quotes with a PLD character\n\t\t\t.replace(/\\n/gm, '\\u008B')\n\t\t\t// Replace carriage returns inside the quotes with a PLU character\n\t\t\t.replace(/\\r/gm, '\\u008C')\n\t\t\t// Replace tabs inside the quotes with a VTS character\n\t\t\t.replace(/\\t/g, '\\u008A');\n\n\t\tline = line.replace(item, newItem);\n\t});\n\n\t// If two quoted parameters are not separated by a space, add one automatically\n\tline = line.replace(/\\u0087\\u0086/g, '\\u0087 \\u0086');\n\n\tconst items = split(line, ignoreExtraUnquotedSpaces);\n\n\treturn items.map((item) =>\n\t\titem\n\t\t\t// Convert back the spaces from inside quotes\n\t\t\t.replace(/\\u2008/g, ' ')\n\t\t\t// Convert back the new lines from inside quotes\n\t\t\t.replace(/\\u008B/g, '\\n')\n\t\t\t// Convert back the carriage returns from inside quotes\n\t\t\t.replace(/\\u008C/g, '\\r')\n\t\t\t// Convert back the tabs from inside quotes\n\t\t\t.replace(/\\u008A/g, '\\t')\n\t\t\t// Remove SSA and ESA characters\n\t\t\t.replace(/[\\u0086\\u0087]/g, '')\n\t\t\t// Unescape quotes\n\t\t\t.replace(/\\\\\\\"/g, '\"'),\n\t);\n}\n"],"mappings":"AAAAA,MAAA,CAAAC,MAAS,CAAK;EAACC,eAAoB,EAAAA,CAAA,KAAAA;AAAA,EAAyB;AAA5D,SAASC,KAAKA,CAACC,UAAkB,EAAkC;EAAA,IAAhCC,yBAAyB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAClE;EACA,MAAMG,IAAI,GAAGL,UAAU,CAACM,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;EAE/C,MAAMC,KAAK,GAAGF,IAAI,CAACN,KAAK,CAAC,WAAW,CAAC;EAErC,IAAIE,yBAAyB,EAAE;IAC9B,OAAOM,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC;EAC7B;EAEA,OAAOF,KAAK;AACb;AAEM,SAAUT,eAAeA,CAACE,UAAkB,EAAkC;EAAA,IAAhCC,yBAAyB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACnF,IAAI,CAACF,UAAU,CAACU,IAAI,EAAE,EAAE;IACvB,OAAO,EAAE;EACV;EAEA,MAAMC,KAAK,GAAGX,UAAU,CAACW,KAAK,CAAC,gCAAgC,CAAC;EAChE,IAAIN,IAAI,GAAGL,UAAU;EAErB,IAAI,CAACW,KAAK,EAAE;IACX,OAAOZ,KAAK,CAACM,IAAI,EAAEJ,yBAAyB,CAAC;EAC9C;EAEAU,KAAK,CAACC,OAAO,CAAEC,IAAI,IAAI;IACtB,MAAMC,OAAO,GAAGD;IACf;IAAA,CACCP,OAAO,CAAC,UAAU,EAAE,MAAQ;IAC7B;IAAA,CACCA,OAAO,CAAC,QAAQ,EAAE,MAAQ;IAC3B;IAAA,CACCA,OAAO,CAAC,IAAI,EAAE,QAAQ;IACvB;IAAA,CACCA,OAAO,CAAC,MAAM,EAAE,MAAQ;IACzB;IAAA,CACCA,OAAO,CAAC,MAAM,EAAE,MAAQ;IACzB;IAAA,CACCA,OAAO,CAAC,KAAK,EAAE,MAAQ,CAAC;IAE1BD,IAAI,GAAGA,IAAI,CAACC,OAAO,CAACO,IAAI,EAAEC,OAAO,CAAC;EACnC,CAAC,CAAC;EAEF;EACAT,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,eAAe,EAAE,WAAe,CAAC;EAErD,MAAMC,KAAK,GAAGR,KAAK,CAACM,IAAI,EAAEJ,yBAAyB,CAAC;EAEpD,OAAOM,KAAK,CAACQ,GAAG,CAAEF,IAAI,IACrBA;EACC;EAAA,CACCP,OAAO,CAAC,SAAS,EAAE,GAAG;EACvB;EAAA,CACCA,OAAO,CAAC,SAAS,EAAE,IAAI;EACxB;EAAA,CACCA,OAAO,CAAC,SAAS,EAAE,IAAI;EACxB;EAAA,CACCA,OAAO,CAAC,SAAS,EAAE,IAAI;EACxB;EAAA,CACCA,OAAO,CAAC,iBAAiB,EAAE,EAAE;EAC9B;EAAA,CACCA,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CACvB;AACF","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ca78b11bd46c1a4e14369dcd81e96323d8a32b53"}
