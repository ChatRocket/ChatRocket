{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/Helper.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/lib/Helper.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/Helper.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/lib/Helper.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/lib/Helper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AAGjD,OAAO,EACN,KAAK,IAAI,OAAO,EAChB,aAAa,EACb,kBAAkB,IAAI,qBAAqB,EAC3C,mBAAmB,EACnB,eAAe,EACf,KAAK,GACL,MAAM,qBAAqB,CAAC;AAC7B,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,iCAAiC,EAAE,MAAM,0BAA0B,CAAC;AAC7E,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,8BAA8B,EAAE,MAAM,iDAAiD,CAAC;AACjG,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAczD,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,EAA+C,EAAE,EAAE;IAC5H,IAAI,YAAY,EAAE,CAAC;QAClB,MAAM,UAAU,GAAG,MAAM,qBAAqB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACzE,MAAM,EAAE,yBAAyB,GAAG,CAAC,EAAE,GAAG,UAAU,IAAI,EAAE,yBAAyB,EAAE,CAAC,EAAE,CAAC;QACzF,IAAI,yBAAyB,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,yBAAyB,CAAC;QAClC,CAAC;IACF,CAAC;IAED,IAAI,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CAAC;QACzF,MAAM,EAAE,QAAQ,EAAE,EAAE,yBAAyB,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QACxE,IAAI,yBAAyB,GAAG,CAAC,EAAE,CAAC;YACnC,OAAO,yBAAyB,CAAC;QAClC,CAAC;IACF,CAAC;IAED,OAAO,QAAQ,CAAC,GAAG,CAAS,kCAAkC,CAAC,CAAC;AACjE,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,KAAK,EAAE,YAAqB,EAAE,EAAE;IAC9D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,qBAAqB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/F,IAAI,UAAU,EAAE,mBAAmB,EAAE,CAAC;QACrC,OAAO,UAAU,CAAC,mBAAmB,CAAC;IACvC,CAAC;IAED,OAAO,QAAQ,CAAC,GAAG,CAAS,gCAAgC,CAAC,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,KAAK,EAAE,UAAmB,EAAE,EAAE;IAClD,MAAM,qBAAqB,GAAG,QAAQ,CAAC,GAAG,CAAS,sDAAsD,CAAC,CAAC;IAC3G,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,oCAAoC,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;IACzG,MAAM,IAAI,GAAG,MAAM,sBAAsB,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG;QACf,IAAI;QACJ,IAAI,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE;KACnD,CAAC;IACF,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,qBAAqB,EAAE,CAAC;AACvD,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAG,CAAC,IAAY,EAAE,yBAAiC,EAAE,eAAuB,EAAE,EAAE;IAC7G,IAAI,CAAC,yBAAyB,IAAI,CAAC,eAAe,EAAE,CAAC;QACpD,OAAO;IACR,CAAC;IACD,WAAW;IACX,gCAAgC;IAChC,+FAA+F;IAC/F,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,yBAAyB,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC;AACvE,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,KAAK,EAAE,EACjC,QAAQ,EACR,SAAS,EACT,UAAU,GAKV,EAAE,EAAE;IACJ,IAAI,CAAC,SAAS,EAAE,CAAC;QAChB,SAAS,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,EAAE,OAAO,EAAE,qBAAqB,EAAE,UAAU,EAAE,EAAE,eAAe,EAAE,GAAG,EAAE,EAAE,GAAG,SAAS,CAAC;IAC3F,MAAM,IAAI,GAAG,QAAQ,GAAG,CAAC,CAAC;IAC1B,MAAM,wBAAwB,GAAG,wBAAwB,CAAC,IAAI,EAAE,qBAAqB,EAAE,eAAe,CAAC,CAAC;IACxG,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,OAAwC,EAAE,SAAqB,EAAE,EAAE;IAChH,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;IACzC,mDAAmD;IACnD,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;QAC5B,OAAO;IACR,CAAC;IACD,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC;IAC3E,OAAO,UAAU,CAAC,GAAG,EAAE;QACtB,KAAK,GAAG,CAAC,SAAS,CAAC,kBAAkB,EAAE,OAAO,CAAC,GAAG,EAAE;YACnD,IAAI,EAAE,WAAW;YACjB,IAAI;SACJ,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC;AACV,CAAC,CAAC;AAEF,MAAM,0BAA0B,GAAG,KAAK,EAAE,UAAmB,EAAE,EAAE;IAChE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yDAAyD,CAAC,EAAE,CAAC;QACzH,OAAO;IACR,CAAC;IAED,MAAM,KAAK,GAAG,MAAM,eAAe,CAAC,0BAA0B,CAAC;QAC9D,UAAU;QACV,WAAW,EAAE,8BAA8B,EAAE;KAC7C,CAAC,CAAC;IAEH,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACnB,OAAO;IACR,CAAC;IAED,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,UAAU,CAAC,CAAC;IACjD,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QACzB,KAAK,uBAAuB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,uFAAuF;AACvF,wFAAwF;AACxF,MAAM,CAAC,MAAM,mCAAmC,GAAG,eAAe,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;AAErG,MAAM,CAAC,MAAM,kCAAkC,GAAG,KAAK,EACtD,IAAmE,EACnE,WAAuC,EACtC,EAAE;IACH,IACC,CAAC,IAAI,CAAC,UAAU,EAAE,eAAe;QACjC,CAAC,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC;QAChD,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,KAAK,MAAM,EACzD,CAAC;QACF,OAAO;IACR,CAAC;IAED,IAAI,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAS,qCAAqC,CAAC,CAAC;IAE/E,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,qBAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACzG,IAAI,UAAU,EAAE,iCAAiC,EAAE,CAAC;QACnD,YAAY,GAAG,UAAU,CAAC,iCAAiC,CAAC;IAC7D,CAAC;IAED,IAAI,YAAY,IAAI,CAAC,EAAE,CAAC;QACvB,OAAO;IACR,CAAC;IAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;IAChH,IAAI,WAAW,EAAE,CAAC;QACjB,MAAM,aAAa,CAAC,iDAAiD,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IACvG,CAAC;SAAM,CAAC;QACP,MAAM,aAAa,CAAC,sCAAsC,CAAC,IAAI,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;IACzF,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iCAAiC,GAAG,KAAK,IAAI,EAAE;IAC3D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,iCAAiC,CAAC,KAAK,MAAM,EAAE,CAAC;QACpH,MAAM,aAAa,CAAC,mCAAmC,EAAE,CAAC;IAC3D,CAAC;SAAM,CAAC;QACP,uGAAuG;QACvG,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;QAC7E,MAAM,aAAa,GAAoB,EAAE,CAAC;QAC1C,MAAM,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACzD,aAAa,CAAC,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAClC,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,KAAK,IAAI,EAAE;IACtD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAS,8BAA8B,CAAC,CAAC;IAC1E,IAAI,YAAY,IAAI,CAAC,EAAE,CAAC;QACvB,MAAM,iCAAiC,CAAC,IAAI,EAAE,CAAC;QAC/C,OAAO;IACR,CAAC;IAED,MAAM,eAAe,CAAC,kBAAkB,CAAC,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QAC3F,MAAM,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;QAC3E,IAAI,CAAC;YACJ,KAAK,iCAAiC,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpG,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,yEAAyE;YACzE,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,GAA0E,EAAE,EAAE;IACtH,IAAI,CAAC,GAAG,EAAE,CAAC;QACV,OAAO;IACR,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;IAC3B,MAAM,QAAQ,GAAoB,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;IAC7E,MAAM,aAAa,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QAC3E,QAAQ,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,IAAI,EAAE;IACjD,MAAM,YAAY,GAAG,MAAM,mBAAmB,CAAC,IAAI,CAAC;QACnD,UAAU,EAAE,SAAS;QACrB,KAAK,EAAE,SAAS;QAChB,MAAM,EAAE,IAAI;KACZ,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,GAAG,KAAK,EAAE,IAAI,EAAE,YAAY,GAAG,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;QAC1G,GAAG;QACH,KAAK;QACL,MAAM;QACN,QAAQ;QACR,IAAI;QACJ,YAAY;QACZ,GAAG,CAAC,OAAO,IAAI,OAAO,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;KACjE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EAAE,IAAuB,EAAE,EAAE;IACrE,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,yDAAyD,CAAC,EAAE,CAAC;QAC9E,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;IACpD,MAAM,OAAO,GAAG,MAAM,eAAe,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAClG,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC;IAChC,IAAI,MAAM,KAAK,QAAQ,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,eAAe,CAAC,0BAA0B,CAAC;QAC9D,SAAS,EAAE,GAAG;QACd,UAAU;QACV,WAAW,EAAE,8BAA8B,EAAE;KAC7C,CAAC,CAAC;IAEH,IAAI,CAAC,GAAG,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;AAChC,CAAC,CAAC","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom, IOmnichannelServiceLevelAgreements, InquiryWithAgentInfo } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport {\n\tRooms as RoomRaw,\n\tLivechatRooms,\n\tLivechatDepartment as LivechatDepartmentRaw,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tUsers,\n} from '@rocket.chat/models';\nimport moment from 'moment';\nimport type { Document } from 'mongodb';\n\nimport { OmnichannelQueueInactivityMonitor } from './QueueInactivityMonitor';\nimport { updateInquiryQueueSla } from './SlaHelper';\nimport { memoizeDebounce } from './debounceByParams';\nimport { logger } from './logger';\nimport { getInquirySortMechanismSetting } from '../../../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\ntype QueueInfo = {\n\tmessage: {\n\t\ttext: any;\n\t\tuser: {\n\t\t\t_id: string;\n\t\t\tusername: string;\n\t\t};\n\t};\n\tstatistics: Document;\n\tnumberMostRecentChats: number;\n};\n\nexport const getMaxNumberSimultaneousChat = async ({ agentId, departmentId }: { agentId?: string; departmentId?: string }) => {\n\tif (departmentId) {\n\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\tif (agentId) {\n\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\treturn settings.get<number>('Livechat_maximum_chats_per_agent');\n};\n\nconst getWaitingQueueMessage = async (departmentId?: string) => {\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tif (department?.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get<string>('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department?: string) => {\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },\n\t};\n\treturn { message, statistics, numberMostRecentChats };\n};\n\nconst getSpotEstimatedWaitTime = (spot: number, maxNumberSimultaneousChat: number, avgChatDuration: number) => {\n\tif (!maxNumberSimultaneousChat || !avgChatDuration) {\n\t\treturn;\n\t}\n\t// X = spot\n\t// N = maxNumberSimultaneousChat\n\t// Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n\treturn ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n};\n\nconst normalizeQueueInfo = async ({\n\tposition,\n\tqueueInfo,\n\tdepartment,\n}: {\n\tposition: number;\n\tdepartment?: string;\n\tqueueInfo?: QueueInfo;\n}) => {\n\tif (!queueInfo) {\n\t\tqueueInfo = await getQueueInfo(department);\n\t}\n\n\tconst { message, numberMostRecentChats, statistics: { avgChatDuration } = {} } = queueInfo;\n\tconst spot = position + 1;\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };\n};\n\nexport const dispatchInquiryPosition = async (inquiry: Omit<InquiryWithAgentInfo, 'v'>, queueInfo?: QueueInfo) => {\n\tconst { position, department } = inquiry;\n\t// Avoid broadcasting if no position was determined\n\tif (position === undefined) {\n\t\treturn;\n\t}\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\treturn setTimeout(() => {\n\t\tvoid api.broadcast('omnichannel.room', inquiry.rid, {\n\t\t\ttype: 'queueData',\n\t\t\tdata,\n\t\t});\n\t}, 1000);\n};\n\nconst dispatchWaitingQueueStatus = async (department?: string) => {\n\tif (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn;\n\t}\n\n\tconst queue = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!queue.length) {\n\t\treturn;\n\t}\n\n\tconst queueInfo = await getQueueInfo(department);\n\tqueue.forEach((inquiry) => {\n\t\tvoid dispatchInquiryPosition(inquiry, queueInfo);\n\t});\n};\n\n// When dealing with lots of queued items we need to make sure to notify their position\n// but we don't need to notify _each_ change that takes place, just their final position\nexport const debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n\nexport const setPredictedVisitorAbandonmentTime = async (\n\troom: Pick<IOmnichannelRoom, '_id' | 'responseBy' | 'departmentId'>,\n\troomUpdater?: Updater<IOmnichannelRoom>,\n) => {\n\tif (\n\t\t!room.responseBy?.firstResponseTs ||\n\t\t!settings.get('Livechat_abandoned_rooms_action') ||\n\t\tsettings.get('Livechat_abandoned_rooms_action') === 'none'\n\t) {\n\t\treturn;\n\t}\n\n\tlet secondsToAdd = settings.get<number>('Livechat_visitor_inactivity_timeout');\n\n\tconst department = room.departmentId ? await LivechatDepartmentRaw.findOneById(room.departmentId) : null;\n\tif (department?.visitorInactivityTimeoutInSeconds) {\n\t\tsecondsToAdd = department.visitorInactivityTimeoutInSeconds;\n\t}\n\n\tif (secondsToAdd <= 0) {\n\t\treturn;\n\t}\n\n\tconst willBeAbandonedAt = moment(room.responseBy.firstResponseTs).add(Number(secondsToAdd), 'seconds').toDate();\n\tif (roomUpdater) {\n\t\tawait LivechatRooms.getPredictedVisitorAbandonmentByRoomIdUpdateQuery(willBeAbandonedAt, roomUpdater);\n\t} else {\n\t\tawait LivechatRooms.setPredictedVisitorAbandonmentByRoomId(room._id, willBeAbandonedAt);\n\t}\n};\n\nexport const updatePredictedVisitorAbandonment = async () => {\n\tif (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n\t\tawait LivechatRooms.unsetAllPredictedVisitorAbandonment();\n\t} else {\n\t\t// Eng day: use a promise queue to update the predicted visitor abandonment time instead of all at once\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promisesArray: Promise<void>[] = [];\n\t\tawait LivechatRooms.findOpen(extraQuery).forEach((room) => {\n\t\t\tpromisesArray.push(setPredictedVisitorAbandonmentTime(room));\n\t\t});\n\n\t\tawait Promise.all(promisesArray);\n\t}\n};\n\nexport const updateQueueInactivityTimeout = async () => {\n\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tawait OmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tawait LivechatInquiry.getQueuedInquiries({ projection: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\tvoid OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {\n\t\t\t// this will usually happen if other instance attempts to re-create a job\n\t\t\tlogger.error({ err: e });\n\t\t}\n\t});\n};\n\nexport const updateSLAInquiries = async (sla?: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>) => {\n\tif (!sla) {\n\t\treturn;\n\t}\n\n\tconst { _id: slaId } = sla;\n\tconst promises: Promise<void>[] = [];\n\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\tawait LivechatRooms.findOpenBySlaId(slaId, {}, extraQuery).forEach((room) => {\n\t\tpromises.push(updateInquiryQueueSla(room._id, sla));\n\t});\n\tawait Promise.allSettled(promises);\n};\n\nexport const getLivechatCustomFields = async () => {\n\tconst customFields = await LivechatCustomField.find({\n\t\tvisibility: 'visible',\n\t\tscope: 'visitor',\n\t\tpublic: true,\n\t}).toArray();\n\treturn customFields.map(({ _id, label, regexp, required = false, type, defaultValue = null, options }) => ({\n\t\t_id,\n\t\tlabel,\n\t\tregexp,\n\t\trequired,\n\t\ttype,\n\t\tdefaultValue,\n\t\t...(options && options !== '' && { options: options.split(',') }),\n\t}));\n};\n\nexport const getLivechatQueueInfo = async (room?: IOmnichannelRoom) => {\n\tif (!room) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Livechat_waiting_queue')) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn null;\n\t}\n\n\tconst { _id: rid, departmentId: department } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });\n\tif (!inquiry) {\n\t\treturn null;\n\t}\n\n\tconst { _id, status } = inquiry;\n\tif (status !== 'queued') {\n\t\treturn null;\n\t}\n\n\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tinquiryId: _id,\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!inq) {\n\t\treturn null;\n\t}\n\n\treturn normalizeQueueInfo(inq);\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/lib/Helper.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/lib/Helper.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/lib/Helper.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/lib/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom, IOmnichannelServiceLevelAgreements, InquiryWithAgentInfo } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport {\n\tRooms as RoomRaw,\n\tLivechatRooms,\n\tLivechatDepartment as LivechatDepartmentRaw,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tUsers,\n} from '@rocket.chat/models';\nimport moment from 'moment';\nimport type { Document } from 'mongodb';\n\nimport { OmnichannelQueueInactivityMonitor } from './QueueInactivityMonitor';\nimport { updateInquiryQueueSla } from './SlaHelper';\nimport { memoizeDebounce } from './debounceByParams';\nimport { logger } from './logger';\nimport { getInquirySortMechanismSetting } from '../../../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\ntype QueueInfo = {\n\tmessage: {\n\t\ttext: any;\n\t\tuser: {\n\t\t\t_id: string;\n\t\t\tusername: string;\n\t\t};\n\t};\n\tstatistics: Document;\n\tnumberMostRecentChats: number;\n};\n\nexport const getMaxNumberSimultaneousChat = async ({ agentId, departmentId }: { agentId?: string; departmentId?: string }) => {\n\tif (departmentId) {\n\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\tif (agentId) {\n\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\treturn settings.get<number>('Livechat_maximum_chats_per_agent');\n};\n\nconst getWaitingQueueMessage = async (departmentId?: string) => {\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tif (department?.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get<string>('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department?: string) => {\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },\n\t};\n\treturn { message, statistics, numberMostRecentChats };\n};\n\nconst getSpotEstimatedWaitTime = (spot: number, maxNumberSimultaneousChat: number, avgChatDuration: number) => {\n\tif (!maxNumberSimultaneousChat || !avgChatDuration) {\n\t\treturn;\n\t}\n\t// X = spot\n\t// N = maxNumberSimultaneousChat\n\t// Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n\treturn ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n};\n\nconst normalizeQueueInfo = async ({\n\tposition,\n\tqueueInfo,\n\tdepartment,\n}: {\n\tposition: number;\n\tdepartment?: string;\n\tqueueInfo?: QueueInfo;\n}) => {\n\tif (!queueInfo) {\n\t\tqueueInfo = await getQueueInfo(department);\n\t}\n\n\tconst { message, numberMostRecentChats, statistics: { avgChatDuration } = {} } = queueInfo;\n\tconst spot = position + 1;\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };\n};\n\nexport const dispatchInquiryPosition = async (inquiry: Omit<InquiryWithAgentInfo, 'v'>, queueInfo?: QueueInfo) => {\n\tconst { position, department } = inquiry;\n\t// Avoid broadcasting if no position was determined\n\tif (position === undefined) {\n\t\treturn;\n\t}\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\treturn setTimeout(() => {\n\t\tvoid api.broadcast('omnichannel.room', inquiry.rid, {\n\t\t\ttype: 'queueData',\n\t\t\tdata,\n\t\t});\n\t}, 1000);\n};\n\nconst dispatchWaitingQueueStatus = async (department?: string) => {\n\tif (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn;\n\t}\n\n\tconst queue = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!queue.length) {\n\t\treturn;\n\t}\n\n\tconst queueInfo = await getQueueInfo(department);\n\tqueue.forEach((inquiry) => {\n\t\tvoid dispatchInquiryPosition(inquiry, queueInfo);\n\t});\n};\n\n// When dealing with lots of queued items we need to make sure to notify their position\n// but we don't need to notify _each_ change that takes place, just their final position\nexport const debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n\nexport const setPredictedVisitorAbandonmentTime = async (\n\troom: Pick<IOmnichannelRoom, '_id' | 'responseBy' | 'departmentId'>,\n\troomUpdater?: Updater<IOmnichannelRoom>,\n) => {\n\tif (\n\t\t!room.responseBy?.firstResponseTs ||\n\t\t!settings.get('Livechat_abandoned_rooms_action') ||\n\t\tsettings.get('Livechat_abandoned_rooms_action') === 'none'\n\t) {\n\t\treturn;\n\t}\n\n\tlet secondsToAdd = settings.get<number>('Livechat_visitor_inactivity_timeout');\n\n\tconst department = room.departmentId ? await LivechatDepartmentRaw.findOneById(room.departmentId) : null;\n\tif (department?.visitorInactivityTimeoutInSeconds) {\n\t\tsecondsToAdd = department.visitorInactivityTimeoutInSeconds;\n\t}\n\n\tif (secondsToAdd <= 0) {\n\t\treturn;\n\t}\n\n\tconst willBeAbandonedAt = moment(room.responseBy.firstResponseTs).add(Number(secondsToAdd), 'seconds').toDate();\n\tif (roomUpdater) {\n\t\tawait LivechatRooms.getPredictedVisitorAbandonmentByRoomIdUpdateQuery(willBeAbandonedAt, roomUpdater);\n\t} else {\n\t\tawait LivechatRooms.setPredictedVisitorAbandonmentByRoomId(room._id, willBeAbandonedAt);\n\t}\n};\n\nexport const updatePredictedVisitorAbandonment = async () => {\n\tif (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n\t\tawait LivechatRooms.unsetAllPredictedVisitorAbandonment();\n\t} else {\n\t\t// Eng day: use a promise queue to update the predicted visitor abandonment time instead of all at once\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promisesArray: Promise<void>[] = [];\n\t\tawait LivechatRooms.findOpen(extraQuery).forEach((room) => {\n\t\t\tpromisesArray.push(setPredictedVisitorAbandonmentTime(room));\n\t\t});\n\n\t\tawait Promise.all(promisesArray);\n\t}\n};\n\nexport const updateQueueInactivityTimeout = async () => {\n\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tawait OmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tawait LivechatInquiry.getQueuedInquiries({ projection: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\tvoid OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {\n\t\t\t// this will usually happen if other instance attempts to re-create a job\n\t\t\tlogger.error({ err: e });\n\t\t}\n\t});\n};\n\nexport const updateSLAInquiries = async (sla?: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>) => {\n\tif (!sla) {\n\t\treturn;\n\t}\n\n\tconst { _id: slaId } = sla;\n\tconst promises: Promise<void>[] = [];\n\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\tawait LivechatRooms.findOpenBySlaId(slaId, {}, extraQuery).forEach((room) => {\n\t\tpromises.push(updateInquiryQueueSla(room._id, sla));\n\t});\n\tawait Promise.allSettled(promises);\n};\n\nexport const getLivechatCustomFields = async () => {\n\tconst customFields = await LivechatCustomField.find({\n\t\tvisibility: 'visible',\n\t\tscope: 'visitor',\n\t\tpublic: true,\n\t}).toArray();\n\treturn customFields.map(({ _id, label, regexp, required = false, type, defaultValue = null, options }) => ({\n\t\t_id,\n\t\tlabel,\n\t\tregexp,\n\t\trequired,\n\t\ttype,\n\t\tdefaultValue,\n\t\t...(options && options !== '' && { options: options.split(',') }),\n\t}));\n};\n\nexport const getLivechatQueueInfo = async (room?: IOmnichannelRoom) => {\n\tif (!room) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Livechat_waiting_queue')) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn null;\n\t}\n\n\tconst { _id: rid, departmentId: department } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });\n\tif (!inquiry) {\n\t\treturn null;\n\t}\n\n\tconst { _id, status } = inquiry;\n\tif (status !== 'queued') {\n\t\treturn null;\n\t}\n\n\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tinquiryId: _id,\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!inq) {\n\t\treturn null;\n\t}\n\n\treturn normalizeQueueInfo(inq);\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      getMaxNumberSimultaneousChat: () => getMaxNumberSimultaneousChat,\n      dispatchInquiryPosition: () => dispatchInquiryPosition,\n      debouncedDispatchWaitingQueueStatus: () => debouncedDispatchWaitingQueueStatus,\n      setPredictedVisitorAbandonmentTime: () => setPredictedVisitorAbandonmentTime,\n      updatePredictedVisitorAbandonment: () => updatePredictedVisitorAbandonment,\n      updateQueueInactivityTimeout: () => updateQueueInactivityTimeout,\n      updateSLAInquiries: () => updateSLAInquiries,\n      getLivechatCustomFields: () => getLivechatCustomFields,\n      getLivechatQueueInfo: () => getLivechatQueueInfo\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let RoomRaw, LivechatRooms, LivechatDepartmentRaw, LivechatCustomField, LivechatInquiry, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        RoomRaw = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartmentRaw = v;\n      },\n      LivechatCustomField(v) {\n        LivechatCustomField = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let OmnichannelQueueInactivityMonitor;\n    module.link(\"./QueueInactivityMonitor\", {\n      OmnichannelQueueInactivityMonitor(v) {\n        OmnichannelQueueInactivityMonitor = v;\n      }\n    }, 3);\n    let updateInquiryQueueSla;\n    module.link(\"./SlaHelper\", {\n      updateInquiryQueueSla(v) {\n        updateInquiryQueueSla = v;\n      }\n    }, 4);\n    let memoizeDebounce;\n    module.link(\"./debounceByParams\", {\n      memoizeDebounce(v) {\n        memoizeDebounce = v;\n      }\n    }, 5);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 6);\n    let getInquirySortMechanismSetting;\n    module.link(\"../../../../../app/livechat/server/lib/settings\", {\n      getInquirySortMechanismSetting(v) {\n        getInquirySortMechanismSetting = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 9);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getMaxNumberSimultaneousChat = async _ref => {\n      let {\n        agentId,\n        departmentId\n      } = _ref;\n      if (departmentId) {\n        const department = await LivechatDepartmentRaw.findOneById(departmentId);\n        const {\n          maxNumberSimultaneousChat = 0\n        } = department || {\n          maxNumberSimultaneousChat: 0\n        };\n        if (maxNumberSimultaneousChat > 0) {\n          return maxNumberSimultaneousChat;\n        }\n      }\n      if (agentId) {\n        const user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n        const {\n          livechat: {\n            maxNumberSimultaneousChat = 0\n          } = {}\n        } = user || {};\n        if (maxNumberSimultaneousChat > 0) {\n          return maxNumberSimultaneousChat;\n        }\n      }\n      return settings.get('Livechat_maximum_chats_per_agent');\n    };\n    const getWaitingQueueMessage = async departmentId => {\n      const department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n      if (department !== null && department !== void 0 && department.waitingQueueMessage) {\n        return department.waitingQueueMessage;\n      }\n      return settings.get('Livechat_waiting_queue_message');\n    };\n    const getQueueInfo = async department => {\n      const numberMostRecentChats = settings.get('Livechat_number_most_recent_chats_estimate_wait_time');\n      const statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n      const text = await getWaitingQueueMessage(department);\n      const message = {\n        text,\n        user: {\n          _id: 'rocket.cat',\n          username: 'rocket.cat'\n        }\n      };\n      return {\n        message,\n        statistics,\n        numberMostRecentChats\n      };\n    };\n    const getSpotEstimatedWaitTime = (spot, maxNumberSimultaneousChat, avgChatDuration) => {\n      if (!maxNumberSimultaneousChat || !avgChatDuration) {\n        return;\n      }\n      // X = spot\n      // N = maxNumberSimultaneousChat\n      // Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n      return ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n    };\n    const normalizeQueueInfo = async _ref2 => {\n      let {\n        position,\n        queueInfo,\n        department\n      } = _ref2;\n      if (!queueInfo) {\n        queueInfo = await getQueueInfo(department);\n      }\n      const {\n        message,\n        numberMostRecentChats,\n        statistics: {\n          avgChatDuration\n        } = {}\n      } = queueInfo;\n      const spot = position + 1;\n      const estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n      return {\n        spot,\n        message,\n        estimatedWaitTimeSeconds\n      };\n    };\n    const dispatchInquiryPosition = async (inquiry, queueInfo) => {\n      const {\n        position,\n        department\n      } = inquiry;\n      // Avoid broadcasting if no position was determined\n      if (position === undefined) {\n        return;\n      }\n      const data = await normalizeQueueInfo({\n        position,\n        queueInfo,\n        department\n      });\n      return setTimeout(() => {\n        void api.broadcast('omnichannel.room', inquiry.rid, {\n          type: 'queueData',\n          data\n        });\n      }, 1000);\n    };\n    const dispatchWaitingQueueStatus = async department => {\n      if (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n        return;\n      }\n      const queue = await LivechatInquiry.getCurrentSortedQueueAsync({\n        department,\n        queueSortBy: getInquirySortMechanismSetting()\n      });\n      if (!queue.length) {\n        return;\n      }\n      const queueInfo = await getQueueInfo(department);\n      queue.forEach(inquiry => {\n        void dispatchInquiryPosition(inquiry, queueInfo);\n      });\n    };\n    // When dealing with lots of queued items we need to make sure to notify their position\n    // but we don't need to notify _each_ change that takes place, just their final position\n    const debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n    const setPredictedVisitorAbandonmentTime = async (room, roomUpdater) => {\n      var _room$responseBy;\n      if (!((_room$responseBy = room.responseBy) !== null && _room$responseBy !== void 0 && _room$responseBy.firstResponseTs) || !settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n        return;\n      }\n      let secondsToAdd = settings.get('Livechat_visitor_inactivity_timeout');\n      const department = room.departmentId ? await LivechatDepartmentRaw.findOneById(room.departmentId) : null;\n      if (department !== null && department !== void 0 && department.visitorInactivityTimeoutInSeconds) {\n        secondsToAdd = department.visitorInactivityTimeoutInSeconds;\n      }\n      if (secondsToAdd <= 0) {\n        return;\n      }\n      const willBeAbandonedAt = moment(room.responseBy.firstResponseTs).add(Number(secondsToAdd), 'seconds').toDate();\n      if (roomUpdater) {\n        await LivechatRooms.getPredictedVisitorAbandonmentByRoomIdUpdateQuery(willBeAbandonedAt, roomUpdater);\n      } else {\n        await LivechatRooms.setPredictedVisitorAbandonmentByRoomId(room._id, willBeAbandonedAt);\n      }\n    };\n    const updatePredictedVisitorAbandonment = async () => {\n      if (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n        await LivechatRooms.unsetAllPredictedVisitorAbandonment();\n      } else {\n        // Eng day: use a promise queue to update the predicted visitor abandonment time instead of all at once\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        const promisesArray = [];\n        await LivechatRooms.findOpen(extraQuery).forEach(room => {\n          promisesArray.push(setPredictedVisitorAbandonmentTime(room));\n        });\n        await Promise.all(promisesArray);\n      }\n    };\n    const updateQueueInactivityTimeout = async () => {\n      const queueTimeout = settings.get('Livechat_max_queue_wait_time');\n      if (queueTimeout <= 0) {\n        await OmnichannelQueueInactivityMonitor.stop();\n        return;\n      }\n      await LivechatInquiry.getQueuedInquiries({\n        projection: {\n          _updatedAt: 1\n        }\n      }).forEach(inq => {\n        const aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n        try {\n          void OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n        } catch (e) {\n          // this will usually happen if other instance attempts to re-create a job\n          logger.error({\n            err: e\n          });\n        }\n      });\n    };\n    const updateSLAInquiries = async sla => {\n      if (!sla) {\n        return;\n      }\n      const {\n        _id: slaId\n      } = sla;\n      const promises = [];\n      const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n      await LivechatRooms.findOpenBySlaId(slaId, {}, extraQuery).forEach(room => {\n        promises.push(updateInquiryQueueSla(room._id, sla));\n      });\n      await Promise.allSettled(promises);\n    };\n    const getLivechatCustomFields = async () => {\n      const customFields = await LivechatCustomField.find({\n        visibility: 'visible',\n        scope: 'visitor',\n        public: true\n      }).toArray();\n      return customFields.map(_ref3 => {\n        let {\n          _id,\n          label,\n          regexp,\n          required = false,\n          type,\n          defaultValue = null,\n          options\n        } = _ref3;\n        return _objectSpread({\n          _id,\n          label,\n          regexp,\n          required,\n          type,\n          defaultValue\n        }, options && options !== '' && {\n          options: options.split(',')\n        });\n      });\n    };\n    const getLivechatQueueInfo = async room => {\n      if (!room) {\n        return null;\n      }\n      if (!settings.get('Livechat_waiting_queue')) {\n        return null;\n      }\n      if (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n        return null;\n      }\n      const {\n        _id: rid,\n        departmentId: department\n      } = room;\n      const inquiry = await LivechatInquiry.findOneByRoomId(rid, {\n        projection: {\n          _id: 1,\n          status: 1\n        }\n      });\n      if (!inquiry) {\n        return null;\n      }\n      const {\n        _id,\n        status\n      } = inquiry;\n      if (status !== 'queued') {\n        return null;\n      }\n      const [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n        inquiryId: _id,\n        department,\n        queueSortBy: getInquirySortMechanismSetting()\n      });\n      if (!inq) {\n        return null;\n      }\n      return normalizeQueueInfo(inq);\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","getMaxNumberSimultaneousChat","dispatchInquiryPosition","debouncedDispatchWaitingQueueStatus","setPredictedVisitorAbandonmentTime","updatePredictedVisitorAbandonment","updateQueueInactivityTimeout","updateSLAInquiries","getLivechatCustomFields","getLivechatQueueInfo","api","RoomRaw","LivechatRooms","LivechatDepartmentRaw","LivechatCustomField","LivechatInquiry","Users","Rooms","LivechatDepartment","moment","OmnichannelQueueInactivityMonitor","updateInquiryQueueSla","memoizeDebounce","logger","getInquirySortMechanismSetting","settings","callbacks","__reifyWaitForDeps__","_ref","agentId","departmentId","department","findOneById","maxNumberSimultaneousChat","user","getAgentInfo","get","livechat","getWaitingQueueMessage","waitingQueueMessage","getQueueInfo","numberMostRecentChats","statistics","getMostRecentAverageChatDurationTime","text","message","_id","username","getSpotEstimatedWaitTime","spot","avgChatDuration","normalizeQueueInfo","_ref2","position","queueInfo","estimatedWaitTimeSeconds","inquiry","undefined","data","setTimeout","broadcast","rid","type","dispatchWaitingQueueStatus","queue","getCurrentSortedQueueAsync","queueSortBy","length","forEach","room","roomUpdater","_room$responseBy","responseBy","firstResponseTs","secondsToAdd","visitorInactivityTimeoutInSeconds","willBeAbandonedAt","add","Number","toDate","getPredictedVisitorAbandonmentByRoomIdUpdateQuery","setPredictedVisitorAbandonmentByRoomId","unsetAllPredictedVisitorAbandonment","extraQuery","run","promisesArray","findOpen","push","Promise","all","queueTimeout","stop","getQueuedInquiries","projection","_updatedAt","inq","aggregatedDate","scheduleInquiry","Date","format","e","error","err","sla","slaId","promises","findOpenBySlaId","allSettled","customFields","find","visibility","scope","public","toArray","map","_ref3","label","regexp","required","defaultValue","options","split","findOneByRoomId","status","inquiryId","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/lib/Helper.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom, IOmnichannelServiceLevelAgreements, InquiryWithAgentInfo } from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport {\n\tRooms as RoomRaw,\n\tLivechatRooms,\n\tLivechatDepartment as LivechatDepartmentRaw,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tUsers,\n} from '@rocket.chat/models';\nimport moment from 'moment';\nimport type { Document } from 'mongodb';\n\nimport { OmnichannelQueueInactivityMonitor } from './QueueInactivityMonitor';\nimport { updateInquiryQueueSla } from './SlaHelper';\nimport { memoizeDebounce } from './debounceByParams';\nimport { logger } from './logger';\nimport { getInquirySortMechanismSetting } from '../../../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\ntype QueueInfo = {\n\tmessage: {\n\t\ttext: any;\n\t\tuser: {\n\t\t\t_id: string;\n\t\t\tusername: string;\n\t\t};\n\t};\n\tstatistics: Document;\n\tnumberMostRecentChats: number;\n};\n\nexport const getMaxNumberSimultaneousChat = async ({ agentId, departmentId }: { agentId?: string; departmentId?: string }) => {\n\tif (departmentId) {\n\t\tconst department = await LivechatDepartmentRaw.findOneById(departmentId);\n\t\tconst { maxNumberSimultaneousChat = 0 } = department || { maxNumberSimultaneousChat: 0 };\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\tif (agentId) {\n\t\tconst user = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_info'));\n\t\tconst { livechat: { maxNumberSimultaneousChat = 0 } = {} } = user || {};\n\t\tif (maxNumberSimultaneousChat > 0) {\n\t\t\treturn maxNumberSimultaneousChat;\n\t\t}\n\t}\n\n\treturn settings.get<number>('Livechat_maximum_chats_per_agent');\n};\n\nconst getWaitingQueueMessage = async (departmentId?: string) => {\n\tconst department = departmentId ? await LivechatDepartmentRaw.findOneById(departmentId) : null;\n\tif (department?.waitingQueueMessage) {\n\t\treturn department.waitingQueueMessage;\n\t}\n\n\treturn settings.get<string>('Livechat_waiting_queue_message');\n};\n\nconst getQueueInfo = async (department?: string) => {\n\tconst numberMostRecentChats = settings.get<number>('Livechat_number_most_recent_chats_estimate_wait_time');\n\tconst statistics = await RoomRaw.getMostRecentAverageChatDurationTime(numberMostRecentChats, department);\n\tconst text = await getWaitingQueueMessage(department);\n\tconst message = {\n\t\ttext,\n\t\tuser: { _id: 'rocket.cat', username: 'rocket.cat' },\n\t};\n\treturn { message, statistics, numberMostRecentChats };\n};\n\nconst getSpotEstimatedWaitTime = (spot: number, maxNumberSimultaneousChat: number, avgChatDuration: number) => {\n\tif (!maxNumberSimultaneousChat || !avgChatDuration) {\n\t\treturn;\n\t}\n\t// X = spot\n\t// N = maxNumberSimultaneousChat\n\t// Estimated Wait Time = ([(N-1)/X]+1) *Average Chat Time of Most Recent X(Default = 100) Chats\n\treturn ((spot - 1) / maxNumberSimultaneousChat + 1) * avgChatDuration;\n};\n\nconst normalizeQueueInfo = async ({\n\tposition,\n\tqueueInfo,\n\tdepartment,\n}: {\n\tposition: number;\n\tdepartment?: string;\n\tqueueInfo?: QueueInfo;\n}) => {\n\tif (!queueInfo) {\n\t\tqueueInfo = await getQueueInfo(department);\n\t}\n\n\tconst { message, numberMostRecentChats, statistics: { avgChatDuration } = {} } = queueInfo;\n\tconst spot = position + 1;\n\tconst estimatedWaitTimeSeconds = getSpotEstimatedWaitTime(spot, numberMostRecentChats, avgChatDuration);\n\treturn { spot, message, estimatedWaitTimeSeconds };\n};\n\nexport const dispatchInquiryPosition = async (inquiry: Omit<InquiryWithAgentInfo, 'v'>, queueInfo?: QueueInfo) => {\n\tconst { position, department } = inquiry;\n\t// Avoid broadcasting if no position was determined\n\tif (position === undefined) {\n\t\treturn;\n\t}\n\tconst data = await normalizeQueueInfo({ position, queueInfo, department });\n\treturn setTimeout(() => {\n\t\tvoid api.broadcast('omnichannel.room', inquiry.rid, {\n\t\t\ttype: 'queueData',\n\t\t\tdata,\n\t\t});\n\t}, 1000);\n};\n\nconst dispatchWaitingQueueStatus = async (department?: string) => {\n\tif (!settings.get('Livechat_waiting_queue') && !settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn;\n\t}\n\n\tconst queue = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!queue.length) {\n\t\treturn;\n\t}\n\n\tconst queueInfo = await getQueueInfo(department);\n\tqueue.forEach((inquiry) => {\n\t\tvoid dispatchInquiryPosition(inquiry, queueInfo);\n\t});\n};\n\n// When dealing with lots of queued items we need to make sure to notify their position\n// but we don't need to notify _each_ change that takes place, just their final position\nexport const debouncedDispatchWaitingQueueStatus = memoizeDebounce(dispatchWaitingQueueStatus, 1200);\n\nexport const setPredictedVisitorAbandonmentTime = async (\n\troom: Pick<IOmnichannelRoom, '_id' | 'responseBy' | 'departmentId'>,\n\troomUpdater?: Updater<IOmnichannelRoom>,\n) => {\n\tif (\n\t\t!room.responseBy?.firstResponseTs ||\n\t\t!settings.get('Livechat_abandoned_rooms_action') ||\n\t\tsettings.get('Livechat_abandoned_rooms_action') === 'none'\n\t) {\n\t\treturn;\n\t}\n\n\tlet secondsToAdd = settings.get<number>('Livechat_visitor_inactivity_timeout');\n\n\tconst department = room.departmentId ? await LivechatDepartmentRaw.findOneById(room.departmentId) : null;\n\tif (department?.visitorInactivityTimeoutInSeconds) {\n\t\tsecondsToAdd = department.visitorInactivityTimeoutInSeconds;\n\t}\n\n\tif (secondsToAdd <= 0) {\n\t\treturn;\n\t}\n\n\tconst willBeAbandonedAt = moment(room.responseBy.firstResponseTs).add(Number(secondsToAdd), 'seconds').toDate();\n\tif (roomUpdater) {\n\t\tawait LivechatRooms.getPredictedVisitorAbandonmentByRoomIdUpdateQuery(willBeAbandonedAt, roomUpdater);\n\t} else {\n\t\tawait LivechatRooms.setPredictedVisitorAbandonmentByRoomId(room._id, willBeAbandonedAt);\n\t}\n};\n\nexport const updatePredictedVisitorAbandonment = async () => {\n\tif (!settings.get('Livechat_abandoned_rooms_action') || settings.get('Livechat_abandoned_rooms_action') === 'none') {\n\t\tawait LivechatRooms.unsetAllPredictedVisitorAbandonment();\n\t} else {\n\t\t// Eng day: use a promise queue to update the predicted visitor abandonment time instead of all at once\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promisesArray: Promise<void>[] = [];\n\t\tawait LivechatRooms.findOpen(extraQuery).forEach((room) => {\n\t\t\tpromisesArray.push(setPredictedVisitorAbandonmentTime(room));\n\t\t});\n\n\t\tawait Promise.all(promisesArray);\n\t}\n};\n\nexport const updateQueueInactivityTimeout = async () => {\n\tconst queueTimeout = settings.get<number>('Livechat_max_queue_wait_time');\n\tif (queueTimeout <= 0) {\n\t\tawait OmnichannelQueueInactivityMonitor.stop();\n\t\treturn;\n\t}\n\n\tawait LivechatInquiry.getQueuedInquiries({ projection: { _updatedAt: 1 } }).forEach((inq) => {\n\t\tconst aggregatedDate = moment(inq._updatedAt).add(queueTimeout, 'minutes');\n\t\ttry {\n\t\t\tvoid OmnichannelQueueInactivityMonitor.scheduleInquiry(inq._id, new Date(aggregatedDate.format()));\n\t\t} catch (e) {\n\t\t\t// this will usually happen if other instance attempts to re-create a job\n\t\t\tlogger.error({ err: e });\n\t\t}\n\t});\n};\n\nexport const updateSLAInquiries = async (sla?: Pick<IOmnichannelServiceLevelAgreements, '_id' | 'dueTimeInMinutes'>) => {\n\tif (!sla) {\n\t\treturn;\n\t}\n\n\tconst { _id: slaId } = sla;\n\tconst promises: Promise<void>[] = [];\n\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\tawait LivechatRooms.findOpenBySlaId(slaId, {}, extraQuery).forEach((room) => {\n\t\tpromises.push(updateInquiryQueueSla(room._id, sla));\n\t});\n\tawait Promise.allSettled(promises);\n};\n\nexport const getLivechatCustomFields = async () => {\n\tconst customFields = await LivechatCustomField.find({\n\t\tvisibility: 'visible',\n\t\tscope: 'visitor',\n\t\tpublic: true,\n\t}).toArray();\n\treturn customFields.map(({ _id, label, regexp, required = false, type, defaultValue = null, options }) => ({\n\t\t_id,\n\t\tlabel,\n\t\tregexp,\n\t\trequired,\n\t\ttype,\n\t\tdefaultValue,\n\t\t...(options && options !== '' && { options: options.split(',') }),\n\t}));\n};\n\nexport const getLivechatQueueInfo = async (room?: IOmnichannelRoom) => {\n\tif (!room) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Livechat_waiting_queue')) {\n\t\treturn null;\n\t}\n\n\tif (!settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n\t\treturn null;\n\t}\n\n\tconst { _id: rid, departmentId: department } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, { projection: { _id: 1, status: 1 } });\n\tif (!inquiry) {\n\t\treturn null;\n\t}\n\n\tconst { _id, status } = inquiry;\n\tif (status !== 'queued') {\n\t\treturn null;\n\t}\n\n\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\tinquiryId: _id,\n\t\tdepartment,\n\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t});\n\n\tif (!inq) {\n\t\treturn null;\n\t}\n\n\treturn normalizeQueueInfo(inq);\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"21d127ec91de6cd7f330b0c803cf58315bb124b3"}
