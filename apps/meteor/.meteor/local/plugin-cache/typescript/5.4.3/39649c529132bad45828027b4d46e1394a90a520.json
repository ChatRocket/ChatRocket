{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/BusinessHourManager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/business-hour/BusinessHourManager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/BusinessHourManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/BusinessHourManager.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/BusinessHourManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour, IBusinessHourTimezone } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AgendaCronJobs } from '@rocket.chat/cron';\nimport { LivechatBusinessHours, LivechatDepartment, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { businessHourLogger } from '../lib/logger';\nimport type { IBusinessHourBehavior, IBusinessHourType } from './AbstractBusinessHour';\nimport { closeBusinessHour } from './closeBusinessHour';\n\nconst CRON_EVERY_MIDNIGHT_EXPRESSION = '0 0 * * *';\nconst CRON_DAYLIGHT_JOB_NAME = 'livechat-business-hour-daylight-saving-time-verifier';\n\nexport class BusinessHourManager {\n\tprivate types: Map<string, IBusinessHourType> = new Map();\n\n\tprivate behavior: IBusinessHourBehavior;\n\n\tprivate cronJobs: AgendaCronJobs;\n\n\tprivate cronJobsCache: string[] = [];\n\n\tconstructor(cronJobs: AgendaCronJobs) {\n\t\tthis.cronJobs = cronJobs;\n\t\tthis.openWorkHoursCallback = this.openWorkHoursCallback.bind(this);\n\t\tthis.closeWorkHoursCallback = this.closeWorkHoursCallback.bind(this);\n\t}\n\n\tasync startManager(): Promise<void> {\n\t\tawait this.createCronJobsForWorkHours();\n\t\tthis.setupCallbacks();\n\t\tawait this.cleanupDisabledDepartmentReferences();\n\t\tawait this.behavior.onStartBusinessHours();\n\t\tvoid this.startDaylightSavingTimeVerifier();\n\t\tvoid this.registerDaylightSavingTimeCronJob();\n\t}\n\n\tasync stopManager(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tthis.removeCallbacks();\n\t\tawait this.behavior.onDisableBusinessHours();\n\t\tawait this.cronJobs.remove(CRON_DAYLIGHT_JOB_NAME);\n\t}\n\n\tasync restartManager(): Promise<void> {\n\t\tawait this.stopManager();\n\t\tawait this.startManager();\n\t}\n\n\tasync cleanupDisabledDepartmentReferences(): Promise<void> {\n\t\t// Get business hours with departments enabled and disabled\n\t\tconst bhWithDepartments = await LivechatDepartment.getBusinessHoursWithDepartmentStatuses();\n\n\t\tif (!bhWithDepartments.length) {\n\t\t\t// If there are no bh, skip\n\t\t\treturn;\n\t\t}\n\n\t\tfor await (const { _id: businessHourId, validDepartments, invalidDepartments } of bhWithDepartments) {\n\t\t\tif (!invalidDepartments.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If there are no enabled departments, close the business hour\n\t\t\tconst allDepsAreDisabled = validDepartments.length === 0 && invalidDepartments.length > 0;\n\t\t\tif (allDepsAreDisabled) {\n\t\t\t\tconst businessHour = await this.getBusinessHour(businessHourId, LivechatBusinessHourTypes.CUSTOM);\n\t\t\t\tif (!businessHour) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tawait closeBusinessHour(businessHour);\n\t\t\t}\n\n\t\t\t// Remove business hour from disabled departments\n\t\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(invalidDepartments, businessHourId);\n\t\t}\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.behavior.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tregisterBusinessHourType(businessHourType: IBusinessHourType): void {\n\t\tthis.types.set(businessHourType.name, businessHourType);\n\t}\n\n\tregisterBusinessHourBehavior(behavior: IBusinessHourBehavior): void {\n\t\tthis.behavior = behavior;\n\t}\n\n\tasync getBusinessHour(id?: string, type?: string): Promise<ILivechatBusinessHour | null> {\n\t\tconst businessHourType = this.getBusinessHourType((type as string) || LivechatBusinessHourTypes.DEFAULT);\n\t\tif (!businessHourType) {\n\t\t\treturn null;\n\t\t}\n\t\treturn businessHourType.getBusinessHour(id);\n\t}\n\n\tasync saveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<void> {\n\t\tconst type = this.getBusinessHourType((businessHourData.type as string) || LivechatBusinessHourTypes.DEFAULT) as IBusinessHourType;\n\t\tconst saved = await type.saveBusinessHour(businessHourData);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.behavior.afterSaveBusinessHours(saved);\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync removeBusinessHourByIdAndType(id: string, type: string): Promise<void> {\n\t\tconst businessHourType = this.getBusinessHourType(type) as IBusinessHourType;\n\t\tawait businessHourType.removeBusinessHourById(id);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync onLogin(agentId: string): Promise<any> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn this.behavior.changeAgentActiveStatus(agentId, 'available');\n\t\t}\n\n\t\tconst result = await Users.setLivechatStatusActiveBasedOnBusinessHours(agentId);\n\t\tif (result.updatedCount > 0) {\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: agentId, diff: { statusLivechat: 'available ' } });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync restartCronJobsIfNecessary(): Promise<void> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tprivate setupCallbacks(): void {\n\t\tcallbacks.add(\n\t\t\t'livechat.removeAgentDepartment',\n\t\t\tthis.behavior.onRemoveAgentFromDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-remove-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterRemoveDepartment',\n\t\t\tthis.behavior.onRemoveDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-after-remove-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.saveAgentDepartment',\n\t\t\tthis.behavior.onAddAgentToDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-save-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentDisabled',\n\t\t\tthis.behavior.onDepartmentDisabled.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-disabled',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentArchived',\n\t\t\tthis.behavior.onDepartmentArchived.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-archived',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.onNewAgentCreated',\n\t\t\tthis.behavior.onNewAgentCreated.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-agent-created',\n\t\t);\n\t}\n\n\tprivate removeCallbacks(): void {\n\t\tcallbacks.remove('livechat.removeAgentDepartment', 'business-hour-livechat-on-remove-agent-department');\n\t\tcallbacks.remove('livechat.afterRemoveDepartment', 'business-hour-livechat-after-remove-department');\n\t\tcallbacks.remove('livechat.saveAgentDepartment', 'business-hour-livechat-on-save-agent-department');\n\t\tcallbacks.remove('livechat.afterDepartmentDisabled', 'business-hour-livechat-on-department-disabled');\n\t\tcallbacks.remove('livechat.afterDepartmentArchived', 'business-hour-livechat-on-department-archived');\n\t\tcallbacks.remove('livechat.onNewAgentCreated', 'business-hour-livechat-on-agent-created');\n\t}\n\n\tprivate async createCronJobsForWorkHours(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tconst [workHours] = await this.behavior.findHoursToCreateJobs();\n\t\tif (!workHours) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, finish } = workHours;\n\n\t\tawait Promise.all(start.map(({ day, times }) => this.scheduleCronJob(times, day, 'open', this.openWorkHoursCallback)));\n\t\tawait Promise.all(finish.map(({ day, times }) => this.scheduleCronJob(times, day, 'close', this.closeWorkHoursCallback)));\n\t}\n\n\tprivate async scheduleCronJob(\n\t\titems: string[],\n\t\tday: string,\n\t\ttype: 'open' | 'close',\n\t\tjob: (day: string, hour: string) => void,\n\t): Promise<void> {\n\t\tawait Promise.all(\n\t\t\titems.map((hour) => {\n\t\t\t\tconst time = moment(hour, 'HH:mm').day(day);\n\t\t\t\tconst jobName = `${time.format('dddd')}/${time.format('HH:mm')}/${type}`;\n\t\t\t\tconst scheduleAt = `${time.minutes()} ${time.hours()} * * ${time.day()}`;\n\t\t\t\tthis.addToCache(jobName);\n\t\t\t\treturn this.cronJobs.add(jobName, scheduleAt, () => job(day, hour));\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async openWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.openBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate async closeWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.closeBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate getBusinessHourType(type: string): IBusinessHourType | undefined {\n\t\treturn this.types.get(type);\n\t}\n\n\tprivate async removeCronJobs(): Promise<void> {\n\t\tawait Promise.all(this.cronJobsCache.map((jobName) => this.cronJobs.remove(jobName)));\n\t}\n\n\tprivate addToCache(jobName: string): void {\n\t\tthis.cronJobsCache.push(jobName);\n\t}\n\n\tprivate clearCronJobsCache(): void {\n\t\tthis.cronJobsCache = [];\n\t}\n\n\thasDaylightSavingTimeChanged(timezone: IBusinessHourTimezone): boolean {\n\t\tconst now = moment().utc().tz(timezone.name);\n\t\tconst currentUTC = now.format('Z');\n\t\tconst existingTimezoneUTC = moment(timezone.utc, 'Z').utc().tz(timezone.name);\n\t\tconst DSTHasChanged = !moment(currentUTC, 'Z').utc().tz(timezone.name).isSame(existingTimezoneUTC);\n\n\t\treturn currentUTC !== timezone.utc && DSTHasChanged;\n\t}\n\n\tasync registerDaylightSavingTimeCronJob(): Promise<void> {\n\t\tawait this.cronJobs.add(CRON_DAYLIGHT_JOB_NAME, CRON_EVERY_MIDNIGHT_EXPRESSION, this.startDaylightSavingTimeVerifier.bind(this));\n\t}\n\n\tasync startDaylightSavingTimeVerifier(): Promise<void> {\n\t\tconst activeBusinessHours = await LivechatBusinessHours.findActiveBusinessHours();\n\t\tconst timezonesNeedingAdjustment = activeBusinessHours.filter(\n\t\t\t({ timezone }) => timezone && this.hasDaylightSavingTimeChanged(timezone),\n\t\t);\n\t\tif (timezonesNeedingAdjustment.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst result = await Promise.allSettled(\n\t\t\ttimezonesNeedingAdjustment.map((businessHour) => {\n\t\t\t\tconst businessHourType = this.getBusinessHourType(businessHour.type);\n\t\t\t\tif (!businessHourType) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn businessHourType.saveBusinessHour({\n\t\t\t\t\t...businessHour,\n\t\t\t\t\ttimezoneName: businessHour.timezone.name,\n\t\t\t\t\tworkHours: businessHour.workHours.map((hour) => ({ ...hour, start: hour.start.time, finish: hour.finish.time })) as Record<\n\t\t\t\t\t\tstring,\n\t\t\t\t\t\tany\n\t\t\t\t\t>[],\n\t\t\t\t} as ILivechatBusinessHour & { timezoneName: string });\n\t\t\t}),\n\t\t);\n\t\tconst failed = result.filter((r) => r.status === 'rejected');\n\t\tif (failed.length > 0) {\n\t\t\tfailed.forEach((error: any) => {\n\t\t\t\tbusinessHourLogger.error('Failed to update business hours with new timezone', error.reason);\n\t\t\t});\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/BusinessHourManager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/business-hour/BusinessHourManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/BusinessHourManager.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/BusinessHourManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour, IBusinessHourTimezone } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AgendaCronJobs } from '@rocket.chat/cron';\nimport { LivechatBusinessHours, LivechatDepartment, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { businessHourLogger } from '../lib/logger';\nimport type { IBusinessHourBehavior, IBusinessHourType } from './AbstractBusinessHour';\nimport { closeBusinessHour } from './closeBusinessHour';\n\nconst CRON_EVERY_MIDNIGHT_EXPRESSION = '0 0 * * *';\nconst CRON_DAYLIGHT_JOB_NAME = 'livechat-business-hour-daylight-saving-time-verifier';\n\nexport class BusinessHourManager {\n\tprivate types: Map<string, IBusinessHourType> = new Map();\n\n\tprivate behavior: IBusinessHourBehavior;\n\n\tprivate cronJobs: AgendaCronJobs;\n\n\tprivate cronJobsCache: string[] = [];\n\n\tconstructor(cronJobs: AgendaCronJobs) {\n\t\tthis.cronJobs = cronJobs;\n\t\tthis.openWorkHoursCallback = this.openWorkHoursCallback.bind(this);\n\t\tthis.closeWorkHoursCallback = this.closeWorkHoursCallback.bind(this);\n\t}\n\n\tasync startManager(): Promise<void> {\n\t\tawait this.createCronJobsForWorkHours();\n\t\tthis.setupCallbacks();\n\t\tawait this.cleanupDisabledDepartmentReferences();\n\t\tawait this.behavior.onStartBusinessHours();\n\t\tvoid this.startDaylightSavingTimeVerifier();\n\t\tvoid this.registerDaylightSavingTimeCronJob();\n\t}\n\n\tasync stopManager(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tthis.removeCallbacks();\n\t\tawait this.behavior.onDisableBusinessHours();\n\t\tawait this.cronJobs.remove(CRON_DAYLIGHT_JOB_NAME);\n\t}\n\n\tasync restartManager(): Promise<void> {\n\t\tawait this.stopManager();\n\t\tawait this.startManager();\n\t}\n\n\tasync cleanupDisabledDepartmentReferences(): Promise<void> {\n\t\t// Get business hours with departments enabled and disabled\n\t\tconst bhWithDepartments = await LivechatDepartment.getBusinessHoursWithDepartmentStatuses();\n\n\t\tif (!bhWithDepartments.length) {\n\t\t\t// If there are no bh, skip\n\t\t\treturn;\n\t\t}\n\n\t\tfor await (const { _id: businessHourId, validDepartments, invalidDepartments } of bhWithDepartments) {\n\t\t\tif (!invalidDepartments.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If there are no enabled departments, close the business hour\n\t\t\tconst allDepsAreDisabled = validDepartments.length === 0 && invalidDepartments.length > 0;\n\t\t\tif (allDepsAreDisabled) {\n\t\t\t\tconst businessHour = await this.getBusinessHour(businessHourId, LivechatBusinessHourTypes.CUSTOM);\n\t\t\t\tif (!businessHour) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tawait closeBusinessHour(businessHour);\n\t\t\t}\n\n\t\t\t// Remove business hour from disabled departments\n\t\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(invalidDepartments, businessHourId);\n\t\t}\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.behavior.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tregisterBusinessHourType(businessHourType: IBusinessHourType): void {\n\t\tthis.types.set(businessHourType.name, businessHourType);\n\t}\n\n\tregisterBusinessHourBehavior(behavior: IBusinessHourBehavior): void {\n\t\tthis.behavior = behavior;\n\t}\n\n\tasync getBusinessHour(id?: string, type?: string): Promise<ILivechatBusinessHour | null> {\n\t\tconst businessHourType = this.getBusinessHourType((type as string) || LivechatBusinessHourTypes.DEFAULT);\n\t\tif (!businessHourType) {\n\t\t\treturn null;\n\t\t}\n\t\treturn businessHourType.getBusinessHour(id);\n\t}\n\n\tasync saveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<void> {\n\t\tconst type = this.getBusinessHourType((businessHourData.type as string) || LivechatBusinessHourTypes.DEFAULT) as IBusinessHourType;\n\t\tconst saved = await type.saveBusinessHour(businessHourData);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.behavior.afterSaveBusinessHours(saved);\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync removeBusinessHourByIdAndType(id: string, type: string): Promise<void> {\n\t\tconst businessHourType = this.getBusinessHourType(type) as IBusinessHourType;\n\t\tawait businessHourType.removeBusinessHourById(id);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync onLogin(agentId: string): Promise<any> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn this.behavior.changeAgentActiveStatus(agentId, 'available');\n\t\t}\n\n\t\tconst result = await Users.setLivechatStatusActiveBasedOnBusinessHours(agentId);\n\t\tif (result.updatedCount > 0) {\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: agentId, diff: { statusLivechat: 'available ' } });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync restartCronJobsIfNecessary(): Promise<void> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tprivate setupCallbacks(): void {\n\t\tcallbacks.add(\n\t\t\t'livechat.removeAgentDepartment',\n\t\t\tthis.behavior.onRemoveAgentFromDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-remove-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterRemoveDepartment',\n\t\t\tthis.behavior.onRemoveDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-after-remove-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.saveAgentDepartment',\n\t\t\tthis.behavior.onAddAgentToDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-save-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentDisabled',\n\t\t\tthis.behavior.onDepartmentDisabled.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-disabled',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentArchived',\n\t\t\tthis.behavior.onDepartmentArchived.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-archived',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.onNewAgentCreated',\n\t\t\tthis.behavior.onNewAgentCreated.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-agent-created',\n\t\t);\n\t}\n\n\tprivate removeCallbacks(): void {\n\t\tcallbacks.remove('livechat.removeAgentDepartment', 'business-hour-livechat-on-remove-agent-department');\n\t\tcallbacks.remove('livechat.afterRemoveDepartment', 'business-hour-livechat-after-remove-department');\n\t\tcallbacks.remove('livechat.saveAgentDepartment', 'business-hour-livechat-on-save-agent-department');\n\t\tcallbacks.remove('livechat.afterDepartmentDisabled', 'business-hour-livechat-on-department-disabled');\n\t\tcallbacks.remove('livechat.afterDepartmentArchived', 'business-hour-livechat-on-department-archived');\n\t\tcallbacks.remove('livechat.onNewAgentCreated', 'business-hour-livechat-on-agent-created');\n\t}\n\n\tprivate async createCronJobsForWorkHours(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tconst [workHours] = await this.behavior.findHoursToCreateJobs();\n\t\tif (!workHours) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, finish } = workHours;\n\n\t\tawait Promise.all(start.map(({ day, times }) => this.scheduleCronJob(times, day, 'open', this.openWorkHoursCallback)));\n\t\tawait Promise.all(finish.map(({ day, times }) => this.scheduleCronJob(times, day, 'close', this.closeWorkHoursCallback)));\n\t}\n\n\tprivate async scheduleCronJob(\n\t\titems: string[],\n\t\tday: string,\n\t\ttype: 'open' | 'close',\n\t\tjob: (day: string, hour: string) => void,\n\t): Promise<void> {\n\t\tawait Promise.all(\n\t\t\titems.map((hour) => {\n\t\t\t\tconst time = moment(hour, 'HH:mm').day(day);\n\t\t\t\tconst jobName = `${time.format('dddd')}/${time.format('HH:mm')}/${type}`;\n\t\t\t\tconst scheduleAt = `${time.minutes()} ${time.hours()} * * ${time.day()}`;\n\t\t\t\tthis.addToCache(jobName);\n\t\t\t\treturn this.cronJobs.add(jobName, scheduleAt, () => job(day, hour));\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async openWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.openBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate async closeWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.closeBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate getBusinessHourType(type: string): IBusinessHourType | undefined {\n\t\treturn this.types.get(type);\n\t}\n\n\tprivate async removeCronJobs(): Promise<void> {\n\t\tawait Promise.all(this.cronJobsCache.map((jobName) => this.cronJobs.remove(jobName)));\n\t}\n\n\tprivate addToCache(jobName: string): void {\n\t\tthis.cronJobsCache.push(jobName);\n\t}\n\n\tprivate clearCronJobsCache(): void {\n\t\tthis.cronJobsCache = [];\n\t}\n\n\thasDaylightSavingTimeChanged(timezone: IBusinessHourTimezone): boolean {\n\t\tconst now = moment().utc().tz(timezone.name);\n\t\tconst currentUTC = now.format('Z');\n\t\tconst existingTimezoneUTC = moment(timezone.utc, 'Z').utc().tz(timezone.name);\n\t\tconst DSTHasChanged = !moment(currentUTC, 'Z').utc().tz(timezone.name).isSame(existingTimezoneUTC);\n\n\t\treturn currentUTC !== timezone.utc && DSTHasChanged;\n\t}\n\n\tasync registerDaylightSavingTimeCronJob(): Promise<void> {\n\t\tawait this.cronJobs.add(CRON_DAYLIGHT_JOB_NAME, CRON_EVERY_MIDNIGHT_EXPRESSION, this.startDaylightSavingTimeVerifier.bind(this));\n\t}\n\n\tasync startDaylightSavingTimeVerifier(): Promise<void> {\n\t\tconst activeBusinessHours = await LivechatBusinessHours.findActiveBusinessHours();\n\t\tconst timezonesNeedingAdjustment = activeBusinessHours.filter(\n\t\t\t({ timezone }) => timezone && this.hasDaylightSavingTimeChanged(timezone),\n\t\t);\n\t\tif (timezonesNeedingAdjustment.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst result = await Promise.allSettled(\n\t\t\ttimezonesNeedingAdjustment.map((businessHour) => {\n\t\t\t\tconst businessHourType = this.getBusinessHourType(businessHour.type);\n\t\t\t\tif (!businessHourType) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn businessHourType.saveBusinessHour({\n\t\t\t\t\t...businessHour,\n\t\t\t\t\ttimezoneName: businessHour.timezone.name,\n\t\t\t\t\tworkHours: businessHour.workHours.map((hour) => ({ ...hour, start: hour.start.time, finish: hour.finish.time })) as Record<\n\t\t\t\t\t\tstring,\n\t\t\t\t\t\tany\n\t\t\t\t\t>[],\n\t\t\t\t} as ILivechatBusinessHour & { timezoneName: string });\n\t\t\t}),\n\t\t);\n\t\tconst failed = result.filter((r) => r.status === 'rejected');\n\t\tif (failed.length > 0) {\n\t\t\tfailed.forEach((error: any) => {\n\t\t\t\tbusinessHourLogger.error('Failed to update business hours with new timezone', error.reason);\n\t\t\t});\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      BusinessHourManager: () => BusinessHourManager\n    });\n    let LivechatBusinessHourTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatBusinessHourTypes(v) {\n        LivechatBusinessHourTypes = v;\n      }\n    }, 0);\n    let LivechatBusinessHours, LivechatDepartment, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatBusinessHours(v) {\n        LivechatBusinessHours = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let notifyOnUserChange;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let businessHourLogger;\n    module.link(\"../lib/logger\", {\n      businessHourLogger(v) {\n        businessHourLogger = v;\n      }\n    }, 6);\n    let closeBusinessHour;\n    module.link(\"./closeBusinessHour\", {\n      closeBusinessHour(v) {\n        closeBusinessHour = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const CRON_EVERY_MIDNIGHT_EXPRESSION = '0 0 * * *';\n    const CRON_DAYLIGHT_JOB_NAME = 'livechat-business-hour-daylight-saving-time-verifier';\n    class BusinessHourManager {\n      constructor(cronJobs) {\n        this.types = new Map();\n        this.behavior = void 0;\n        this.cronJobs = void 0;\n        this.cronJobsCache = [];\n        this.cronJobs = cronJobs;\n        this.openWorkHoursCallback = this.openWorkHoursCallback.bind(this);\n        this.closeWorkHoursCallback = this.closeWorkHoursCallback.bind(this);\n      }\n      async startManager() {\n        await this.createCronJobsForWorkHours();\n        this.setupCallbacks();\n        await this.cleanupDisabledDepartmentReferences();\n        await this.behavior.onStartBusinessHours();\n        void this.startDaylightSavingTimeVerifier();\n        void this.registerDaylightSavingTimeCronJob();\n      }\n      async stopManager() {\n        await this.removeCronJobs();\n        this.clearCronJobsCache();\n        this.removeCallbacks();\n        await this.behavior.onDisableBusinessHours();\n        await this.cronJobs.remove(CRON_DAYLIGHT_JOB_NAME);\n      }\n      async restartManager() {\n        await this.stopManager();\n        await this.startManager();\n      }\n      async cleanupDisabledDepartmentReferences() {\n        // Get business hours with departments enabled and disabled\n        const bhWithDepartments = await LivechatDepartment.getBusinessHoursWithDepartmentStatuses();\n        if (!bhWithDepartments.length) {\n          // If there are no bh, skip\n          return;\n        }\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(bhWithDepartments), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const {\n              _id: businessHourId,\n              validDepartments,\n              invalidDepartments\n            } = _step.value;\n            {\n              if (!invalidDepartments.length) {\n                continue;\n              }\n              // If there are no enabled departments, close the business hour\n              const allDepsAreDisabled = validDepartments.length === 0 && invalidDepartments.length > 0;\n              if (allDepsAreDisabled) {\n                const businessHour = await this.getBusinessHour(businessHourId, LivechatBusinessHourTypes.CUSTOM);\n                if (!businessHour) {\n                  continue;\n                }\n                await closeBusinessHour(businessHour);\n              }\n              // Remove business hour from disabled departments\n              await LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(invalidDepartments, businessHourId);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      async allowAgentChangeServiceStatus(agentId) {\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return true;\n        }\n        return this.behavior.allowAgentChangeServiceStatus(agentId);\n      }\n      registerBusinessHourType(businessHourType) {\n        this.types.set(businessHourType.name, businessHourType);\n      }\n      registerBusinessHourBehavior(behavior) {\n        this.behavior = behavior;\n      }\n      async getBusinessHour(id, type) {\n        const businessHourType = this.getBusinessHourType(type || LivechatBusinessHourTypes.DEFAULT);\n        if (!businessHourType) {\n          return null;\n        }\n        return businessHourType.getBusinessHour(id);\n      }\n      async saveBusinessHour(businessHourData) {\n        const type = this.getBusinessHourType(businessHourData.type || LivechatBusinessHourTypes.DEFAULT);\n        const saved = await type.saveBusinessHour(businessHourData);\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return;\n        }\n        await this.behavior.afterSaveBusinessHours(saved);\n        await this.createCronJobsForWorkHours();\n      }\n      async removeBusinessHourByIdAndType(id, type) {\n        const businessHourType = this.getBusinessHourType(type);\n        await businessHourType.removeBusinessHourById(id);\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return;\n        }\n        await this.createCronJobsForWorkHours();\n      }\n      async onLogin(agentId) {\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return this.behavior.changeAgentActiveStatus(agentId, 'available');\n        }\n        const result = await Users.setLivechatStatusActiveBasedOnBusinessHours(agentId);\n        if (result.updatedCount > 0) {\n          void notifyOnUserChange({\n            clientAction: 'updated',\n            id: agentId,\n            diff: {\n              statusLivechat: 'available '\n            }\n          });\n        }\n        return result;\n      }\n      async restartCronJobsIfNecessary() {\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return;\n        }\n        await this.createCronJobsForWorkHours();\n      }\n      setupCallbacks() {\n        callbacks.add('livechat.removeAgentDepartment', this.behavior.onRemoveAgentFromDepartment.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-on-remove-agent-department');\n        callbacks.add('livechat.afterRemoveDepartment', this.behavior.onRemoveDepartment.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-after-remove-department');\n        callbacks.add('livechat.saveAgentDepartment', this.behavior.onAddAgentToDepartment.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-on-save-agent-department');\n        callbacks.add('livechat.afterDepartmentDisabled', this.behavior.onDepartmentDisabled.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-on-department-disabled');\n        callbacks.add('livechat.afterDepartmentArchived', this.behavior.onDepartmentArchived.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-on-department-archived');\n        callbacks.add('livechat.onNewAgentCreated', this.behavior.onNewAgentCreated.bind(this), callbacks.priority.HIGH, 'business-hour-livechat-on-agent-created');\n      }\n      removeCallbacks() {\n        callbacks.remove('livechat.removeAgentDepartment', 'business-hour-livechat-on-remove-agent-department');\n        callbacks.remove('livechat.afterRemoveDepartment', 'business-hour-livechat-after-remove-department');\n        callbacks.remove('livechat.saveAgentDepartment', 'business-hour-livechat-on-save-agent-department');\n        callbacks.remove('livechat.afterDepartmentDisabled', 'business-hour-livechat-on-department-disabled');\n        callbacks.remove('livechat.afterDepartmentArchived', 'business-hour-livechat-on-department-archived');\n        callbacks.remove('livechat.onNewAgentCreated', 'business-hour-livechat-on-agent-created');\n      }\n      async createCronJobsForWorkHours() {\n        await this.removeCronJobs();\n        this.clearCronJobsCache();\n        const [workHours] = await this.behavior.findHoursToCreateJobs();\n        if (!workHours) {\n          return;\n        }\n        const {\n          start,\n          finish\n        } = workHours;\n        await Promise.all(start.map(_ref => {\n          let {\n            day,\n            times\n          } = _ref;\n          return this.scheduleCronJob(times, day, 'open', this.openWorkHoursCallback);\n        }));\n        await Promise.all(finish.map(_ref2 => {\n          let {\n            day,\n            times\n          } = _ref2;\n          return this.scheduleCronJob(times, day, 'close', this.closeWorkHoursCallback);\n        }));\n      }\n      async scheduleCronJob(items, day, type, job) {\n        await Promise.all(items.map(hour => {\n          const time = moment(hour, 'HH:mm').day(day);\n          const jobName = \"\".concat(time.format('dddd'), \"/\").concat(time.format('HH:mm'), \"/\").concat(type);\n          const scheduleAt = \"\".concat(time.minutes(), \" \").concat(time.hours(), \" * * \").concat(time.day());\n          this.addToCache(jobName);\n          return this.cronJobs.add(jobName, scheduleAt, () => job(day, hour));\n        }));\n      }\n      async openWorkHoursCallback(day, hour) {\n        return this.behavior.openBusinessHoursByDayAndHour(day, hour);\n      }\n      async closeWorkHoursCallback(day, hour) {\n        return this.behavior.closeBusinessHoursByDayAndHour(day, hour);\n      }\n      getBusinessHourType(type) {\n        return this.types.get(type);\n      }\n      async removeCronJobs() {\n        await Promise.all(this.cronJobsCache.map(jobName => this.cronJobs.remove(jobName)));\n      }\n      addToCache(jobName) {\n        this.cronJobsCache.push(jobName);\n      }\n      clearCronJobsCache() {\n        this.cronJobsCache = [];\n      }\n      hasDaylightSavingTimeChanged(timezone) {\n        const now = moment().utc().tz(timezone.name);\n        const currentUTC = now.format('Z');\n        const existingTimezoneUTC = moment(timezone.utc, 'Z').utc().tz(timezone.name);\n        const DSTHasChanged = !moment(currentUTC, 'Z').utc().tz(timezone.name).isSame(existingTimezoneUTC);\n        return currentUTC !== timezone.utc && DSTHasChanged;\n      }\n      async registerDaylightSavingTimeCronJob() {\n        await this.cronJobs.add(CRON_DAYLIGHT_JOB_NAME, CRON_EVERY_MIDNIGHT_EXPRESSION, this.startDaylightSavingTimeVerifier.bind(this));\n      }\n      async startDaylightSavingTimeVerifier() {\n        const activeBusinessHours = await LivechatBusinessHours.findActiveBusinessHours();\n        const timezonesNeedingAdjustment = activeBusinessHours.filter(_ref3 => {\n          let {\n            timezone\n          } = _ref3;\n          return timezone && this.hasDaylightSavingTimeChanged(timezone);\n        });\n        if (timezonesNeedingAdjustment.length === 0) {\n          return;\n        }\n        const result = await Promise.allSettled(timezonesNeedingAdjustment.map(businessHour => {\n          const businessHourType = this.getBusinessHourType(businessHour.type);\n          if (!businessHourType) {\n            return;\n          }\n          return businessHourType.saveBusinessHour(_objectSpread(_objectSpread({}, businessHour), {}, {\n            timezoneName: businessHour.timezone.name,\n            workHours: businessHour.workHours.map(hour => _objectSpread(_objectSpread({}, hour), {}, {\n              start: hour.start.time,\n              finish: hour.finish.time\n            }))\n          }));\n        }));\n        const failed = result.filter(r => r.status === 'rejected');\n        if (failed.length > 0) {\n          failed.forEach(error => {\n            businessHourLogger.error('Failed to update business hours with new timezone', error.reason);\n          });\n        }\n        await this.createCronJobsForWorkHours();\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","BusinessHourManager","LivechatBusinessHourTypes","LivechatBusinessHours","LivechatDepartment","Users","moment","callbacks","notifyOnUserChange","settings","businessHourLogger","closeBusinessHour","__reifyWaitForDeps__","CRON_EVERY_MIDNIGHT_EXPRESSION","CRON_DAYLIGHT_JOB_NAME","constructor","cronJobs","types","Map","behavior","cronJobsCache","openWorkHoursCallback","bind","closeWorkHoursCallback","startManager","createCronJobsForWorkHours","setupCallbacks","cleanupDisabledDepartmentReferences","onStartBusinessHours","startDaylightSavingTimeVerifier","registerDaylightSavingTimeCronJob","stopManager","removeCronJobs","clearCronJobsCache","removeCallbacks","onDisableBusinessHours","remove","restartManager","bhWithDepartments","getBusinessHoursWithDepartmentStatuses","length","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","_id","businessHourId","validDepartments","invalidDepartments","value","allDepsAreDisabled","businessHour","getBusinessHour","CUSTOM","removeBusinessHourFromDepartmentsByIdsAndBusinessHourId","err","return","allowAgentChangeServiceStatus","agentId","get","registerBusinessHourType","businessHourType","set","name","registerBusinessHourBehavior","id","type","getBusinessHourType","DEFAULT","saveBusinessHour","businessHourData","saved","afterSaveBusinessHours","removeBusinessHourByIdAndType","removeBusinessHourById","onLogin","changeAgentActiveStatus","result","setLivechatStatusActiveBasedOnBusinessHours","updatedCount","clientAction","diff","statusLivechat","restartCronJobsIfNecessary","add","onRemoveAgentFromDepartment","priority","HIGH","onRemoveDepartment","onAddAgentToDepartment","onDepartmentDisabled","onDepartmentArchived","onNewAgentCreated","workHours","findHoursToCreateJobs","start","finish","Promise","all","map","_ref","day","times","scheduleCronJob","_ref2","items","job","hour","time","jobName","concat","format","scheduleAt","minutes","hours","addToCache","openBusinessHoursByDayAndHour","closeBusinessHoursByDayAndHour","push","hasDaylightSavingTimeChanged","timezone","now","utc","tz","currentUTC","existingTimezoneUTC","DSTHasChanged","isSame","activeBusinessHours","findActiveBusinessHours","timezonesNeedingAdjustment","filter","_ref3","allSettled","timezoneName","failed","r","status","forEach","error","reason","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/business-hour/BusinessHourManager.ts"],"sourcesContent":["import type { ILivechatBusinessHour, IBusinessHourTimezone } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AgendaCronJobs } from '@rocket.chat/cron';\nimport { LivechatBusinessHours, LivechatDepartment, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { notifyOnUserChange } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { businessHourLogger } from '../lib/logger';\nimport type { IBusinessHourBehavior, IBusinessHourType } from './AbstractBusinessHour';\nimport { closeBusinessHour } from './closeBusinessHour';\n\nconst CRON_EVERY_MIDNIGHT_EXPRESSION = '0 0 * * *';\nconst CRON_DAYLIGHT_JOB_NAME = 'livechat-business-hour-daylight-saving-time-verifier';\n\nexport class BusinessHourManager {\n\tprivate types: Map<string, IBusinessHourType> = new Map();\n\n\tprivate behavior: IBusinessHourBehavior;\n\n\tprivate cronJobs: AgendaCronJobs;\n\n\tprivate cronJobsCache: string[] = [];\n\n\tconstructor(cronJobs: AgendaCronJobs) {\n\t\tthis.cronJobs = cronJobs;\n\t\tthis.openWorkHoursCallback = this.openWorkHoursCallback.bind(this);\n\t\tthis.closeWorkHoursCallback = this.closeWorkHoursCallback.bind(this);\n\t}\n\n\tasync startManager(): Promise<void> {\n\t\tawait this.createCronJobsForWorkHours();\n\t\tthis.setupCallbacks();\n\t\tawait this.cleanupDisabledDepartmentReferences();\n\t\tawait this.behavior.onStartBusinessHours();\n\t\tvoid this.startDaylightSavingTimeVerifier();\n\t\tvoid this.registerDaylightSavingTimeCronJob();\n\t}\n\n\tasync stopManager(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tthis.removeCallbacks();\n\t\tawait this.behavior.onDisableBusinessHours();\n\t\tawait this.cronJobs.remove(CRON_DAYLIGHT_JOB_NAME);\n\t}\n\n\tasync restartManager(): Promise<void> {\n\t\tawait this.stopManager();\n\t\tawait this.startManager();\n\t}\n\n\tasync cleanupDisabledDepartmentReferences(): Promise<void> {\n\t\t// Get business hours with departments enabled and disabled\n\t\tconst bhWithDepartments = await LivechatDepartment.getBusinessHoursWithDepartmentStatuses();\n\n\t\tif (!bhWithDepartments.length) {\n\t\t\t// If there are no bh, skip\n\t\t\treturn;\n\t\t}\n\n\t\tfor await (const { _id: businessHourId, validDepartments, invalidDepartments } of bhWithDepartments) {\n\t\t\tif (!invalidDepartments.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If there are no enabled departments, close the business hour\n\t\t\tconst allDepsAreDisabled = validDepartments.length === 0 && invalidDepartments.length > 0;\n\t\t\tif (allDepsAreDisabled) {\n\t\t\t\tconst businessHour = await this.getBusinessHour(businessHourId, LivechatBusinessHourTypes.CUSTOM);\n\t\t\t\tif (!businessHour) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tawait closeBusinessHour(businessHour);\n\t\t\t}\n\n\t\t\t// Remove business hour from disabled departments\n\t\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId(invalidDepartments, businessHourId);\n\t\t}\n\t}\n\n\tasync allowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this.behavior.allowAgentChangeServiceStatus(agentId);\n\t}\n\n\tregisterBusinessHourType(businessHourType: IBusinessHourType): void {\n\t\tthis.types.set(businessHourType.name, businessHourType);\n\t}\n\n\tregisterBusinessHourBehavior(behavior: IBusinessHourBehavior): void {\n\t\tthis.behavior = behavior;\n\t}\n\n\tasync getBusinessHour(id?: string, type?: string): Promise<ILivechatBusinessHour | null> {\n\t\tconst businessHourType = this.getBusinessHourType((type as string) || LivechatBusinessHourTypes.DEFAULT);\n\t\tif (!businessHourType) {\n\t\t\treturn null;\n\t\t}\n\t\treturn businessHourType.getBusinessHour(id);\n\t}\n\n\tasync saveBusinessHour(businessHourData: ILivechatBusinessHour): Promise<void> {\n\t\tconst type = this.getBusinessHourType((businessHourData.type as string) || LivechatBusinessHourTypes.DEFAULT) as IBusinessHourType;\n\t\tconst saved = await type.saveBusinessHour(businessHourData);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.behavior.afterSaveBusinessHours(saved);\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync removeBusinessHourByIdAndType(id: string, type: string): Promise<void> {\n\t\tconst businessHourType = this.getBusinessHourType(type) as IBusinessHourType;\n\t\tawait businessHourType.removeBusinessHourById(id);\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tasync onLogin(agentId: string): Promise<any> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn this.behavior.changeAgentActiveStatus(agentId, 'available');\n\t\t}\n\n\t\tconst result = await Users.setLivechatStatusActiveBasedOnBusinessHours(agentId);\n\t\tif (result.updatedCount > 0) {\n\t\t\tvoid notifyOnUserChange({ clientAction: 'updated', id: agentId, diff: { statusLivechat: 'available ' } });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync restartCronJobsIfNecessary(): Promise<void> {\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n\n\tprivate setupCallbacks(): void {\n\t\tcallbacks.add(\n\t\t\t'livechat.removeAgentDepartment',\n\t\t\tthis.behavior.onRemoveAgentFromDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-remove-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterRemoveDepartment',\n\t\t\tthis.behavior.onRemoveDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-after-remove-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.saveAgentDepartment',\n\t\t\tthis.behavior.onAddAgentToDepartment.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-save-agent-department',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentDisabled',\n\t\t\tthis.behavior.onDepartmentDisabled.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-disabled',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.afterDepartmentArchived',\n\t\t\tthis.behavior.onDepartmentArchived.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-department-archived',\n\t\t);\n\t\tcallbacks.add(\n\t\t\t'livechat.onNewAgentCreated',\n\t\t\tthis.behavior.onNewAgentCreated.bind(this),\n\t\t\tcallbacks.priority.HIGH,\n\t\t\t'business-hour-livechat-on-agent-created',\n\t\t);\n\t}\n\n\tprivate removeCallbacks(): void {\n\t\tcallbacks.remove('livechat.removeAgentDepartment', 'business-hour-livechat-on-remove-agent-department');\n\t\tcallbacks.remove('livechat.afterRemoveDepartment', 'business-hour-livechat-after-remove-department');\n\t\tcallbacks.remove('livechat.saveAgentDepartment', 'business-hour-livechat-on-save-agent-department');\n\t\tcallbacks.remove('livechat.afterDepartmentDisabled', 'business-hour-livechat-on-department-disabled');\n\t\tcallbacks.remove('livechat.afterDepartmentArchived', 'business-hour-livechat-on-department-archived');\n\t\tcallbacks.remove('livechat.onNewAgentCreated', 'business-hour-livechat-on-agent-created');\n\t}\n\n\tprivate async createCronJobsForWorkHours(): Promise<void> {\n\t\tawait this.removeCronJobs();\n\t\tthis.clearCronJobsCache();\n\t\tconst [workHours] = await this.behavior.findHoursToCreateJobs();\n\t\tif (!workHours) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, finish } = workHours;\n\n\t\tawait Promise.all(start.map(({ day, times }) => this.scheduleCronJob(times, day, 'open', this.openWorkHoursCallback)));\n\t\tawait Promise.all(finish.map(({ day, times }) => this.scheduleCronJob(times, day, 'close', this.closeWorkHoursCallback)));\n\t}\n\n\tprivate async scheduleCronJob(\n\t\titems: string[],\n\t\tday: string,\n\t\ttype: 'open' | 'close',\n\t\tjob: (day: string, hour: string) => void,\n\t): Promise<void> {\n\t\tawait Promise.all(\n\t\t\titems.map((hour) => {\n\t\t\t\tconst time = moment(hour, 'HH:mm').day(day);\n\t\t\t\tconst jobName = `${time.format('dddd')}/${time.format('HH:mm')}/${type}`;\n\t\t\t\tconst scheduleAt = `${time.minutes()} ${time.hours()} * * ${time.day()}`;\n\t\t\t\tthis.addToCache(jobName);\n\t\t\t\treturn this.cronJobs.add(jobName, scheduleAt, () => job(day, hour));\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate async openWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.openBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate async closeWorkHoursCallback(day: string, hour: string): Promise<void> {\n\t\treturn this.behavior.closeBusinessHoursByDayAndHour(day, hour);\n\t}\n\n\tprivate getBusinessHourType(type: string): IBusinessHourType | undefined {\n\t\treturn this.types.get(type);\n\t}\n\n\tprivate async removeCronJobs(): Promise<void> {\n\t\tawait Promise.all(this.cronJobsCache.map((jobName) => this.cronJobs.remove(jobName)));\n\t}\n\n\tprivate addToCache(jobName: string): void {\n\t\tthis.cronJobsCache.push(jobName);\n\t}\n\n\tprivate clearCronJobsCache(): void {\n\t\tthis.cronJobsCache = [];\n\t}\n\n\thasDaylightSavingTimeChanged(timezone: IBusinessHourTimezone): boolean {\n\t\tconst now = moment().utc().tz(timezone.name);\n\t\tconst currentUTC = now.format('Z');\n\t\tconst existingTimezoneUTC = moment(timezone.utc, 'Z').utc().tz(timezone.name);\n\t\tconst DSTHasChanged = !moment(currentUTC, 'Z').utc().tz(timezone.name).isSame(existingTimezoneUTC);\n\n\t\treturn currentUTC !== timezone.utc && DSTHasChanged;\n\t}\n\n\tasync registerDaylightSavingTimeCronJob(): Promise<void> {\n\t\tawait this.cronJobs.add(CRON_DAYLIGHT_JOB_NAME, CRON_EVERY_MIDNIGHT_EXPRESSION, this.startDaylightSavingTimeVerifier.bind(this));\n\t}\n\n\tasync startDaylightSavingTimeVerifier(): Promise<void> {\n\t\tconst activeBusinessHours = await LivechatBusinessHours.findActiveBusinessHours();\n\t\tconst timezonesNeedingAdjustment = activeBusinessHours.filter(\n\t\t\t({ timezone }) => timezone && this.hasDaylightSavingTimeChanged(timezone),\n\t\t);\n\t\tif (timezonesNeedingAdjustment.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst result = await Promise.allSettled(\n\t\t\ttimezonesNeedingAdjustment.map((businessHour) => {\n\t\t\t\tconst businessHourType = this.getBusinessHourType(businessHour.type);\n\t\t\t\tif (!businessHourType) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn businessHourType.saveBusinessHour({\n\t\t\t\t\t...businessHour,\n\t\t\t\t\ttimezoneName: businessHour.timezone.name,\n\t\t\t\t\tworkHours: businessHour.workHours.map((hour) => ({ ...hour, start: hour.start.time, finish: hour.finish.time })) as Record<\n\t\t\t\t\t\tstring,\n\t\t\t\t\t\tany\n\t\t\t\t\t>[],\n\t\t\t\t} as ILivechatBusinessHour & { timezoneName: string });\n\t\t\t}),\n\t\t);\n\t\tconst failed = result.filter((r) => r.status === 'rejected');\n\t\tif (failed.length > 0) {\n\t\t\tfailed.forEach((error: any) => {\n\t\t\t\tbusinessHourLogger.error('Failed to update business hours with new timezone', error.reason);\n\t\t\t});\n\t\t}\n\n\t\tawait this.createCronJobsForWorkHours();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"39649c529132bad45828027b4d46e1394a90a520"}
