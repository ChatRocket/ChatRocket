{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts"],"names":[],"mappings":"AAAA;;GAEG;AAKH,MAAM,OAAO,eAAe;IACnB,QAAQ,CAAuB;IAE/B,GAAG,CAAU;IAErB,YAAY,QAA8B,EAAE,OAAgB;QAC3D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,KAAU;QACd,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9C;;;;;;;;;;;;;;;;;;;WAmBG;QACH,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC1E,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,QAAa;QAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;IACvC,CAAC;CACD","sourcesContent":["/**\n * This class is a callback context for AMI event handlers.\n */\n\nimport type { Command } from '../Command';\nimport type { ICallbackContext } from '../ICallbackContext';\n\nexport class CallbackContext implements ICallbackContext {\n\tprivate callback: (event: any) => void;\n\n\tprivate ref: Command;\n\n\tconstructor(callback: (event: any) => void, command: Command) {\n\t\tthis.callback = callback;\n\t\tthis.ref = command;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution.\n\t * If it is valid, calls the registered callback and returns true\n\t * else returns false\n\t */\n\tcall(event: any): boolean {\n\t\tconst pattern = new RegExp(this.ref.actionid);\n\t\t/**\n\t\t *\n\t\t * Though actionid remains unique with every action and for some\n\t\t * actions it is not present, it makes sense to parse it as a regex\n\t\t * if there is no exact match.\n\t\t *\n\t\t * This approach is used when we have continuous monitoring. But it is observed that the event\n\t\t * we are interested in monitoring do not have actionid. (queuecallerjoin, agentcalled, agentconnect)\n\t\t *\n\t\t * Alternate way of handing it is that we check if event.actionid is absent,\n\t\t * go ahead and call the callback.\n\t\t *\n\t\t * But we do not know if for all such |continuous monitoring| events, the actionid\n\t\t * would be absent. Furthermore, it is futureproof if we want to\n\t\t * continuously monitor the PBX.\n\t\t * So the safest bet for |continuous monitoring events|\n\t\t * right now is to pass .* in this.ref.actionid\n\t\t * and if the exact match does not happen, try to match the regex.\n\t\t *\n\t\t */\n\t\tif (event.actionid === this.ref.actionid || pattern.test(event.actionid)) {\n\t\t\tthis.callback(event);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution. Returns true if it is, else returns false\n\t */\n\tisValidContext(actionid: any): boolean {\n\t\treturn this.ref.actionid === actionid;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts"],"names":[],"mappings":"AAAA;;GAEG;AAKH,MAAM,OAAO,eAAe;IACnB,QAAQ,CAAuB;IAE/B,GAAG,CAAU;IAErB,YAAY,QAA8B,EAAE,OAAgB;QAC3D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,KAAU;QACd,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9C;;;;;;;;;;;;;;;;;;;WAmBG;QACH,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC1E,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,cAAc,CAAC,QAAa;QAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;IACvC,CAAC;CACD","sourcesContent":["/**\n * This class is a callback context for AMI event handlers.\n */\n\nimport type { Command } from '../Command';\nimport type { ICallbackContext } from '../ICallbackContext';\n\nexport class CallbackContext implements ICallbackContext {\n\tprivate callback: (event: any) => void;\n\n\tprivate ref: Command;\n\n\tconstructor(callback: (event: any) => void, command: Command) {\n\t\tthis.callback = callback;\n\t\tthis.ref = command;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution.\n\t * If it is valid, calls the registered callback and returns true\n\t * else returns false\n\t */\n\tcall(event: any): boolean {\n\t\tconst pattern = new RegExp(this.ref.actionid);\n\t\t/**\n\t\t *\n\t\t * Though actionid remains unique with every action and for some\n\t\t * actions it is not present, it makes sense to parse it as a regex\n\t\t * if there is no exact match.\n\t\t *\n\t\t * This approach is used when we have continuous monitoring. But it is observed that the event\n\t\t * we are interested in monitoring do not have actionid. (queuecallerjoin, agentcalled, agentconnect)\n\t\t *\n\t\t * Alternate way of handing it is that we check if event.actionid is absent,\n\t\t * go ahead and call the callback.\n\t\t *\n\t\t * But we do not know if for all such |continuous monitoring| events, the actionid\n\t\t * would be absent. Furthermore, it is futureproof if we want to\n\t\t * continuously monitor the PBX.\n\t\t * So the safest bet for |continuous monitoring events|\n\t\t * right now is to pass .* in this.ref.actionid\n\t\t * and if the exact match does not happen, try to match the regex.\n\t\t *\n\t\t */\n\t\tif (event.actionid === this.ref.actionid || pattern.test(event.actionid)) {\n\t\t\tthis.callback(event);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution. Returns true if it is, else returns false\n\t */\n\tisValidContext(actionid: any): boolean {\n\t\treturn this.ref.actionid === actionid;\n\t}\n}\n"]}}},"code":"module.export({\n  CallbackContext: () => CallbackContext\n});\nclass CallbackContext {\n  constructor(callback, command) {\n    this.callback = void 0;\n    this.ref = void 0;\n    this.callback = callback;\n    this.ref = command;\n  }\n  /**\n   * Checks whether the event's action id is same as the action id of this command's\n   * execution.\n   * If it is valid, calls the registered callback and returns true\n   * else returns false\n   */\n  call(event) {\n    const pattern = new RegExp(this.ref.actionid);\n    /**\n     *\n     * Though actionid remains unique with every action and for some\n     * actions it is not present, it makes sense to parse it as a regex\n     * if there is no exact match.\n     *\n     * This approach is used when we have continuous monitoring. But it is observed that the event\n     * we are interested in monitoring do not have actionid. (queuecallerjoin, agentcalled, agentconnect)\n     *\n     * Alternate way of handing it is that we check if event.actionid is absent,\n     * go ahead and call the callback.\n     *\n     * But we do not know if for all such |continuous monitoring| events, the actionid\n     * would be absent. Furthermore, it is futureproof if we want to\n     * continuously monitor the PBX.\n     * So the safest bet for |continuous monitoring events|\n     * right now is to pass .* in this.ref.actionid\n     * and if the exact match does not happen, try to match the regex.\n     *\n     */\n    if (event.actionid === this.ref.actionid || pattern.test(event.actionid)) {\n      this.callback(event);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Checks whether the event's action id is same as the action id of this command's\n   * execution. Returns true if it is, else returns false\n   */\n  isValidContext(actionid) {\n    return this.ref.actionid === actionid;\n  }\n}","map":{"version":3,"names":["module","export","CallbackContext","constructor","callback","command","ref","call","event","pattern","RegExp","actionid","test","isValidContext"],"sources":["server/services/voip-asterisk/connector/asterisk/ami/CallbackContext.ts"],"sourcesContent":["/**\n * This class is a callback context for AMI event handlers.\n */\n\nimport type { Command } from '../Command';\nimport type { ICallbackContext } from '../ICallbackContext';\n\nexport class CallbackContext implements ICallbackContext {\n\tprivate callback: (event: any) => void;\n\n\tprivate ref: Command;\n\n\tconstructor(callback: (event: any) => void, command: Command) {\n\t\tthis.callback = callback;\n\t\tthis.ref = command;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution.\n\t * If it is valid, calls the registered callback and returns true\n\t * else returns false\n\t */\n\tcall(event: any): boolean {\n\t\tconst pattern = new RegExp(this.ref.actionid);\n\t\t/**\n\t\t *\n\t\t * Though actionid remains unique with every action and for some\n\t\t * actions it is not present, it makes sense to parse it as a regex\n\t\t * if there is no exact match.\n\t\t *\n\t\t * This approach is used when we have continuous monitoring. But it is observed that the event\n\t\t * we are interested in monitoring do not have actionid. (queuecallerjoin, agentcalled, agentconnect)\n\t\t *\n\t\t * Alternate way of handing it is that we check if event.actionid is absent,\n\t\t * go ahead and call the callback.\n\t\t *\n\t\t * But we do not know if for all such |continuous monitoring| events, the actionid\n\t\t * would be absent. Furthermore, it is futureproof if we want to\n\t\t * continuously monitor the PBX.\n\t\t * So the safest bet for |continuous monitoring events|\n\t\t * right now is to pass .* in this.ref.actionid\n\t\t * and if the exact match does not happen, try to match the regex.\n\t\t *\n\t\t */\n\t\tif (event.actionid === this.ref.actionid || pattern.test(event.actionid)) {\n\t\t\tthis.callback(event);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether the event's action id is same as the action id of this command's\n\t * execution. Returns true if it is, else returns false\n\t */\n\tisValidContext(actionid: any): boolean {\n\t\treturn this.ref.actionid === actionid;\n\t}\n}\n"],"mappings":"AAAAA,MAAA,CAAAC,MAAA;EAAAC,eAAA,EAAAA,CAAA,KAAAA;AAAA;AAOM,MAAOA,eAAe;EAK3BC,YAAYC,QAA8B,EAAEC,OAAgB;IAAA,KAJpDD,QAAQ;IAAA,KAERE,GAAG;IAGV,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,GAAG,GAAGD,OAAO;EACnB;EAEA;;;;;;EAMAE,IAAIA,CAACC,KAAU;IACd,MAAMC,OAAO,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACJ,GAAG,CAACK,QAAQ,CAAC;IAC7C;;;;;;;;;;;;;;;;;;;;IAoBA,IAAIH,KAAK,CAACG,QAAQ,KAAK,IAAI,CAACL,GAAG,CAACK,QAAQ,IAAIF,OAAO,CAACG,IAAI,CAACJ,KAAK,CAACG,QAAQ,CAAC,EAAE;MACzE,IAAI,CAACP,QAAQ,CAACI,KAAK,CAAC;MACpB,OAAO,IAAI;IACZ;IACA,OAAO,KAAK;EACb;EAEA;;;;EAIAK,cAAcA,CAACF,QAAa;IAC3B,OAAO,IAAI,CAACL,GAAG,CAACK,QAAQ,KAAKA,QAAQ;EACtC","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"edbcca2bf112d31d0e5355b119b9d14bb21b113e"}
