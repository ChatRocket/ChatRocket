{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/helpers/getUserFromParams.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/helpers/getUserFromParams.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/helpers/getUserFromParams.ts","inputSourceMap":{"version":3,"file":"app/api/server/helpers/getUserFromParams.ts","sourceRoot":"","sources":["app/api/server/helpers/getUserFromParams.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,MAIvC;IACA,IAAI,IAAI,CAAC;IAET,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAChF,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;QAC3B,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IAC/D,CAAC;SAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC;QACpC,IAAI,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IACnF,CAAC;SAAM,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;QAChC,IAAI,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IAC/E,CAAC;SAAM,CAAC;QACP,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,4DAA4D,CAAC,CAAC;IACvH,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,6EAA6E,CAAC,CAAC;IAC7H,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,MAM3C;IACA,mDAAmD;IACnD,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC;IACjE,IAAI,aAAa,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,SAAS,IAAI,EAAE,CAAC;IAC7D,aAAa,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IACnC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAE9C,8BAA8B;IAC9B,aAAa,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;IAE5C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QAC3B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,4EAA4E,CAAC,CAAC;IACzI,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAClF,CAAC;IAED,OAAO,KAAK,CAAC,2BAA2B,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;AACpG,CAAC","sourcesContent":["// Convenience method, almost need to turn it into a middleware of sorts\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nexport async function getUserFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n}): Promise<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'>> {\n\tlet user;\n\n\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };\n\tif (params.userId?.trim()) {\n\t\tuser = await Users.findOneById(params.userId, { projection });\n\t} else if (params.username?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.username, { projection });\n\t} else if (params.user?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.user, { projection });\n\t} else {\n\t\tthrow new Meteor.Error('error-user-param-not-provided', 'The required \"userId\" or \"username\" param was not provided');\n\t}\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'The required \"userId\" or \"username\" param provided does not match any users');\n\t}\n\n\treturn user;\n}\n\nexport async function getUserListFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n\tuserIds?: string[];\n\tusernames?: string[];\n}): Promise<Pick<IUser, '_id' | 'username'>[]> {\n\t// if params.userId is provided, include it as well\n\tconst soleUser = params.userId || params.username || params.user;\n\tlet userListParam = params.userIds || params.usernames || [];\n\tuserListParam.push(soleUser || '');\n\tuserListParam = userListParam.filter(Boolean);\n\n\t// deduplicate to avoid errors\n\tuserListParam = [...new Set(userListParam)];\n\n\tif (!userListParam.length) {\n\t\tthrow new Meteor.Error('error-users-params-not-provided', 'Please provide \"userId\" or \"username\" or \"userIds\" or \"usernames\" as param');\n\t}\n\n\tif (params.userIds || params.userId) {\n\t\treturn Users.findByIds(userListParam, { projection: { username: 1 } }).toArray();\n\t}\n\n\treturn Users.findByUsernamesIgnoringCase(userListParam, { projection: { username: 1 } }).toArray();\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/helpers/getUserFromParams.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/helpers/getUserFromParams.ts","inputSourceMap":{"version":3,"file":"app/api/server/helpers/getUserFromParams.ts","sourceRoot":"","sources":["app/api/server/helpers/getUserFromParams.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,MAIvC;IACA,IAAI,IAAI,CAAC;IAET,MAAM,UAAU,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;IAChF,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;QAC3B,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IAC/D,CAAC;SAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC;QACpC,IAAI,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IACnF,CAAC;SAAM,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;QAChC,IAAI,GAAG,MAAM,KAAK,CAAC,6BAA6B,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;IAC/E,CAAC;SAAM,CAAC;QACP,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,4DAA4D,CAAC,CAAC;IACvH,CAAC;IAED,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,6EAA6E,CAAC,CAAC;IAC7H,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,MAM3C;IACA,mDAAmD;IACnD,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC;IACjE,IAAI,aAAa,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,SAAS,IAAI,EAAE,CAAC;IAC7D,aAAa,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IACnC,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAE9C,8BAA8B;IAC9B,aAAa,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;IAE5C,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;QAC3B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iCAAiC,EAAE,4EAA4E,CAAC,CAAC;IACzI,CAAC;IAED,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;QACrC,OAAO,KAAK,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;IAClF,CAAC;IAED,OAAO,KAAK,CAAC,2BAA2B,CAAC,aAAa,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;AACpG,CAAC","sourcesContent":["// Convenience method, almost need to turn it into a middleware of sorts\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nexport async function getUserFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n}): Promise<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'>> {\n\tlet user;\n\n\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };\n\tif (params.userId?.trim()) {\n\t\tuser = await Users.findOneById(params.userId, { projection });\n\t} else if (params.username?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.username, { projection });\n\t} else if (params.user?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.user, { projection });\n\t} else {\n\t\tthrow new Meteor.Error('error-user-param-not-provided', 'The required \"userId\" or \"username\" param was not provided');\n\t}\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'The required \"userId\" or \"username\" param provided does not match any users');\n\t}\n\n\treturn user;\n}\n\nexport async function getUserListFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n\tuserIds?: string[];\n\tusernames?: string[];\n}): Promise<Pick<IUser, '_id' | 'username'>[]> {\n\t// if params.userId is provided, include it as well\n\tconst soleUser = params.userId || params.username || params.user;\n\tlet userListParam = params.userIds || params.usernames || [];\n\tuserListParam.push(soleUser || '');\n\tuserListParam = userListParam.filter(Boolean);\n\n\t// deduplicate to avoid errors\n\tuserListParam = [...new Set(userListParam)];\n\n\tif (!userListParam.length) {\n\t\tthrow new Meteor.Error('error-users-params-not-provided', 'Please provide \"userId\" or \"username\" or \"userIds\" or \"usernames\" as param');\n\t}\n\n\tif (params.userIds || params.userId) {\n\t\treturn Users.findByIds(userListParam, { projection: { username: 1 } }).toArray();\n\t}\n\n\treturn Users.findByUsernamesIgnoringCase(userListParam, { projection: { username: 1 } }).toArray();\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      getUserFromParams: () => getUserFromParams,\n      getUserListFromParams: () => getUserListFromParams\n    });\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function getUserFromParams(params) {\n      var _params$userId, _params$username, _params$user;\n      let user;\n      const projection = {\n        username: 1,\n        name: 1,\n        status: 1,\n        statusText: 1,\n        roles: 1\n      };\n      if ((_params$userId = params.userId) !== null && _params$userId !== void 0 && _params$userId.trim()) {\n        user = await Users.findOneById(params.userId, {\n          projection\n        });\n      } else if ((_params$username = params.username) !== null && _params$username !== void 0 && _params$username.trim()) {\n        user = await Users.findOneByUsernameIgnoringCase(params.username, {\n          projection\n        });\n      } else if ((_params$user = params.user) !== null && _params$user !== void 0 && _params$user.trim()) {\n        user = await Users.findOneByUsernameIgnoringCase(params.user, {\n          projection\n        });\n      } else {\n        throw new Meteor.Error('error-user-param-not-provided', 'The required \"userId\" or \"username\" param was not provided');\n      }\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'The required \"userId\" or \"username\" param provided does not match any users');\n      }\n      return user;\n    }\n    async function getUserListFromParams(params) {\n      // if params.userId is provided, include it as well\n      const soleUser = params.userId || params.username || params.user;\n      let userListParam = params.userIds || params.usernames || [];\n      userListParam.push(soleUser || '');\n      userListParam = userListParam.filter(Boolean);\n      // deduplicate to avoid errors\n      userListParam = [...new Set(userListParam)];\n      if (!userListParam.length) {\n        throw new Meteor.Error('error-users-params-not-provided', 'Please provide \"userId\" or \"username\" or \"userIds\" or \"usernames\" as param');\n      }\n      if (params.userIds || params.userId) {\n        return Users.findByIds(userListParam, {\n          projection: {\n            username: 1\n          }\n        }).toArray();\n      }\n      return Users.findByUsernamesIgnoringCase(userListParam, {\n        projection: {\n          username: 1\n        }\n      }).toArray();\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","getUserFromParams","getUserListFromParams","Users","link","v","Meteor","__reifyWaitForDeps__","params","_params$userId","_params$username","_params$user","user","projection","username","name","status","statusText","roles","userId","trim","findOneById","findOneByUsernameIgnoringCase","Error","soleUser","userListParam","userIds","usernames","push","filter","Boolean","Set","length","findByIds","toArray","findByUsernamesIgnoringCase","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/helpers/getUserFromParams.ts"],"sourcesContent":["// Convenience method, almost need to turn it into a middleware of sorts\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nexport async function getUserFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n}): Promise<Pick<IUser, '_id' | 'username' | 'name' | 'status' | 'statusText' | 'roles'>> {\n\tlet user;\n\n\tconst projection = { username: 1, name: 1, status: 1, statusText: 1, roles: 1 };\n\tif (params.userId?.trim()) {\n\t\tuser = await Users.findOneById(params.userId, { projection });\n\t} else if (params.username?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.username, { projection });\n\t} else if (params.user?.trim()) {\n\t\tuser = await Users.findOneByUsernameIgnoringCase(params.user, { projection });\n\t} else {\n\t\tthrow new Meteor.Error('error-user-param-not-provided', 'The required \"userId\" or \"username\" param was not provided');\n\t}\n\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'The required \"userId\" or \"username\" param provided does not match any users');\n\t}\n\n\treturn user;\n}\n\nexport async function getUserListFromParams(params: {\n\tuserId?: string;\n\tusername?: string;\n\tuser?: string;\n\tuserIds?: string[];\n\tusernames?: string[];\n}): Promise<Pick<IUser, '_id' | 'username'>[]> {\n\t// if params.userId is provided, include it as well\n\tconst soleUser = params.userId || params.username || params.user;\n\tlet userListParam = params.userIds || params.usernames || [];\n\tuserListParam.push(soleUser || '');\n\tuserListParam = userListParam.filter(Boolean);\n\n\t// deduplicate to avoid errors\n\tuserListParam = [...new Set(userListParam)];\n\n\tif (!userListParam.length) {\n\t\tthrow new Meteor.Error('error-users-params-not-provided', 'Please provide \"userId\" or \"username\" or \"userIds\" or \"usernames\" as param');\n\t}\n\n\tif (params.userIds || params.userId) {\n\t\treturn Users.findByIds(userListParam, { projection: { username: 1 } }).toArray();\n\t}\n\n\treturn Users.findByUsernamesIgnoringCase(userListParam, { projection: { username: 1 } }).toArray();\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"78a0134fc5a592da30dcedb8281f342875487ccb"}
