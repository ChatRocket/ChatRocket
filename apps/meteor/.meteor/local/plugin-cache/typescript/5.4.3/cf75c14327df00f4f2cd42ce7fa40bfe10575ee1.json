{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Multiple.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AtLeast, ILivechatDepartment, ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { openBusinessHour, removeBusinessHourByAgentIds } from './Helper';\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tfilterBusinessHoursThatMustBeOpenedByDay,\n\tmakeOnlineAgentsAvailable,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { closeBusinessHour } from '../../../../../app/livechat/server/business-hour/closeBusinessHour';\nimport { settings } from '../../../../../app/settings/server';\nimport { isTruthy } from '../../../../../lib/isTruthy';\nimport { bhLogger } from '../lib/logger';\n\ninterface IBusinessHoursExtraProperties extends ILivechatBusinessHour {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n}\n\nexport class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior implements IBusinessHourBehavior {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n\t\tthis.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n\t\tthis.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n\t\tthis.onDepartmentArchived = this.onDepartmentArchived.bind(this);\n\t\tthis.onDepartmentDisabled = this.onDepartmentDisabled.bind(this);\n\t\tthis.onNewAgentCreated = this.onNewAgentCreated.bind(this);\n\t}\n\n\tasync onStartBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\n\t\t// TODO is this required? since we're calling `this.openBusinessHour(businessHour)` later on, which will call this again (kinda)\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tbhLogger.info({\n\t\t\tmsg: 'Starting Multiple Business Hours',\n\t\t\ttotalBusinessHoursToOpen: businessHoursToOpen.length,\n\t\t\ttop10BusinessHoursToOpen: businessHoursToOpen.slice(0, 10),\n\t\t});\n\t\tfor (const businessHour of businessHoursToOpen) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync openBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync closeBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.closeBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync afterSaveBusinessHours(businessHourData: IBusinessHoursExtraProperties): Promise<void> {\n\t\tconst departments = businessHourData.departmentsToApplyBusinessHour?.split(',').filter(Boolean);\n\t\tconst currentDepartments = businessHourData.departments?.map((dept) => dept._id);\n\t\tconst toRemove = [...(currentDepartments || []).filter((dept) => !departments.includes(dept))];\n\t\tawait this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tconst businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map((businessHour) => businessHour._id);\n\t\tif (!businessHourIdToOpen.length) {\n\t\t\treturn closeBusinessHour(businessHour);\n\t\t}\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tasync onAddAgentToDepartment(options: { departmentId: string; agentsId: string[] }): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tif (!department.businessHourId) {\n\t\t\t// If this department doesn't have a business hour, we need to apply default business hour to these agents\n\t\t\t// And then reset their status based on these BH\n\t\t\tconst isDefaultBusinessHourActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\t\tif (!isDefaultBusinessHourActive) {\n\t\t\t\tbhLogger.debug('Default business hour is not active. No need to apply it to agents');\n\t\t\t\treturn options;\n\t\t\t}\n\n\t\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\t\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\t\treturn options;\n\t\t}\n\n\t\t// This department has a business hour, so we need to\n\t\t// 1. Remove default business hour from these agents if they have it\n\t\t// 2. Add this department's business hour to these agents\n\t\t// 3. Update their status based on these BH\n\t\tawait removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\treturn options;\n\t}\n\n\tasync onRemoveAgentFromDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n\t}\n\n\tasync onRemoveDepartment(options: { department: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>; agentsIds: string[] }) {\n\t\tconst { department, agentsIds } = options;\n\t\tif (!department || !agentsIds?.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tasync onDepartmentDisabled(department: AtLeast<ILivechatDepartment, 'businessHourId' | '_id'>): Promise<void> {\n\t\tif (!department.businessHourId) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get business hour\n\t\tlet businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\tbhLogger.error({\n\t\t\t\tmsg: 'onDepartmentDisabled: business hour not found',\n\t\t\t\tbusinessHourId: department.businessHourId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Unlink business hour from department\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId([department._id], businessHour._id);\n\n\t\t// cleanup user's cache for default business hour and this business hour\n\t\tconst defaultBH = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBH) {\n\t\t\tthrow new Error('Default business hour not found');\n\t\t}\n\t\tawait this.UsersRepository.closeAgentsBusinessHoursByBusinessHourIds([businessHour._id, defaultBH._id]);\n\n\t\t// If i'm the only one, disable the business hour\n\t\tconst imTheOnlyOne = !(await LivechatDepartment.countByBusinessHourIdExcludingDepartmentId(businessHour._id, department._id));\n\t\tif (imTheOnlyOne) {\n\t\t\tbhLogger.warn({\n\t\t\t\tmsg: 'onDepartmentDisabled: department is the only one on business hour, disabling it',\n\t\t\t\tdepartmentId: department._id,\n\t\t\t\tbusinessHourId: businessHour._id,\n\t\t\t});\n\t\t\tawait this.BusinessHourRepository.disableBusinessHour(businessHour._id);\n\n\t\t\tbusinessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\t\tif (!businessHour) {\n\t\t\t\tthrow new Error(`Business hour ${department.businessHourId} not found`);\n\t\t\t}\n\t\t}\n\n\t\t// start default business hour and this BH if needed\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n\t\tfor await (const bh of businessHourToOpen) {\n\t\t\tawait openBusinessHour(bh, false);\n\t\t}\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t\tawait businessHourManager.restartCronJobsIfNecessary();\n\t}\n\n\tasync onDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void> {\n\t\tbhLogger.debug('Processing department archived event on multiple business hours', department);\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync onNewAgentCreated(agentId: string): Promise<void> {\n\t\tawait this.applyAnyOpenBusinessHourToAgent(agentId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour([agentId]);\n\t}\n\n\tprivate async applyAnyOpenBusinessHourToAgent(agentId: string): Promise<void> {\n\t\tconst currentTime = moment().utc();\n\t\tconst day = currentTime.format('dddd');\n\t\tconst allActiveBusinessHoursForEntireWeek = await this.BusinessHourRepository.findActiveBusinessHours({\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst openedBusinessHours = await filterBusinessHoursThatMustBeOpenedByDay(allActiveBusinessHoursForEntireWeek, day);\n\t\tif (!openedBusinessHours.length) {\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for the current day',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },\n\t\t\t{ projection: { agentId: 1, departmentId: 1 } },\n\t\t).toArray();\n\n\t\tif (!agentDepartments.length) {\n\t\t\t// check if default businessHour is active\n\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. Found default business hour to be inactive',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// check if any one these departments have a opened business hour linked to it\n\t\tconst departments = (await LivechatDepartment.findInIds(\n\t\t\tagentDepartments.map(({ departmentId }) => departmentId),\n\t\t\t{ projection: { _id: 1, businessHourId: 1 } },\n\t\t).toArray()) as Pick<ILivechatDepartment, '_id' | 'businessHourId'>[];\n\n\t\tconst departmentsWithActiveBH = departments.filter(\n\t\t\t({ businessHourId }) => businessHourId && openedBusinessHours.findIndex(({ _id }) => _id === businessHourId) !== -1,\n\t\t);\n\n\t\tif (!departmentsWithActiveBH.length) {\n\t\t\t// No opened business hour found for any of the departments connected to the agent\n\t\t\t// check if this agent has any departments that is connected to any non-default business hour\n\t\t\t// if no such departments found then check default BH and if it is active, then allow the agent to change service status\n\t\t\tconst hasAtLeastOneDepartmentWithNonDefaultBH = departments.some(({ businessHourId }) => {\n\t\t\t\t// check if business hour is active\n\t\t\t\treturn businessHourId && allActiveBusinessHoursForEntireWeek.findIndex(({ _id }) => _id === businessHourId) !== -1;\n\t\t\t});\n\t\t\tif (!hasAtLeastOneDepartmentWithNonDefaultBH) {\n\t\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for any of the departments connected to the agent',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId).filter(isTruthy);\n\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n\n\t\tbhLogger.debug({\n\t\t\tmsg: `Business hour status check passed for agent. Found opened business hour for departments connected to the agent`,\n\t\t\tactiveBusinessHoursForAgent,\n\t\t});\n\t}\n\n\tprivate async handleRemoveAgentsFromDepartments(department: Record<string, any>, agentsIds: string[], options: any): Promise<any> {\n\t\tconst agentIdsWithoutDepartment: string[] = [];\n\t\tconst agentIdsToRemoveCurrentBusinessHour: string[] = [];\n\n\t\tconst [agentsWithDepartment, [agentsOfDepartment] = []] = await Promise.all([\n\t\t\tLivechatDepartmentAgents.findByAgentIds(agentsIds, { projection: { agentId: 1 } }).toArray(),\n\t\t\tLivechatDepartment.findAgentsByBusinessHourId(department.businessHourId).toArray(),\n\t\t]);\n\n\t\tfor (const agentId of agentsIds) {\n\t\t\tif (!agentsWithDepartment.find((agent) => agent.agentId === agentId)) {\n\t\t\t\tagentIdsWithoutDepartment.push(agentId);\n\t\t\t}\n\t\t\tif (!agentsOfDepartment?.agentIds?.find((agent) => agent === agentId)) {\n\t\t\t\tagentIdsToRemoveCurrentBusinessHour.push(agentId);\n\t\t\t}\n\t\t}\n\t\tif (department.businessHourId) {\n\t\t\tawait removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n\t\t}\n\t\tif (!agentIdsWithoutDepartment.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n\t\treturn options;\n\t}\n\n\tprivate async openBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tprivate async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(\n\t\tbusinessHourId: string,\n\t\tdepartmentsToRemove: string[],\n\t): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentsToRemove, { projection: { agentId: 1 } }).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tawait removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async closeBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\tawait closeBusinessHour(businessHour);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/business-hour/Multiple.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/business-hour/Multiple.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/business-hour/Multiple.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AtLeast, ILivechatDepartment, ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { openBusinessHour, removeBusinessHourByAgentIds } from './Helper';\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tfilterBusinessHoursThatMustBeOpenedByDay,\n\tmakeOnlineAgentsAvailable,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { closeBusinessHour } from '../../../../../app/livechat/server/business-hour/closeBusinessHour';\nimport { settings } from '../../../../../app/settings/server';\nimport { isTruthy } from '../../../../../lib/isTruthy';\nimport { bhLogger } from '../lib/logger';\n\ninterface IBusinessHoursExtraProperties extends ILivechatBusinessHour {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n}\n\nexport class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior implements IBusinessHourBehavior {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n\t\tthis.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n\t\tthis.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n\t\tthis.onDepartmentArchived = this.onDepartmentArchived.bind(this);\n\t\tthis.onDepartmentDisabled = this.onDepartmentDisabled.bind(this);\n\t\tthis.onNewAgentCreated = this.onNewAgentCreated.bind(this);\n\t}\n\n\tasync onStartBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\n\t\t// TODO is this required? since we're calling `this.openBusinessHour(businessHour)` later on, which will call this again (kinda)\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tbhLogger.info({\n\t\t\tmsg: 'Starting Multiple Business Hours',\n\t\t\ttotalBusinessHoursToOpen: businessHoursToOpen.length,\n\t\t\ttop10BusinessHoursToOpen: businessHoursToOpen.slice(0, 10),\n\t\t});\n\t\tfor (const businessHour of businessHoursToOpen) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync openBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync closeBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.closeBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync afterSaveBusinessHours(businessHourData: IBusinessHoursExtraProperties): Promise<void> {\n\t\tconst departments = businessHourData.departmentsToApplyBusinessHour?.split(',').filter(Boolean);\n\t\tconst currentDepartments = businessHourData.departments?.map((dept) => dept._id);\n\t\tconst toRemove = [...(currentDepartments || []).filter((dept) => !departments.includes(dept))];\n\t\tawait this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tconst businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map((businessHour) => businessHour._id);\n\t\tif (!businessHourIdToOpen.length) {\n\t\t\treturn closeBusinessHour(businessHour);\n\t\t}\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tasync onAddAgentToDepartment(options: { departmentId: string; agentsId: string[] }): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tif (!department.businessHourId) {\n\t\t\t// If this department doesn't have a business hour, we need to apply default business hour to these agents\n\t\t\t// And then reset their status based on these BH\n\t\t\tconst isDefaultBusinessHourActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\t\tif (!isDefaultBusinessHourActive) {\n\t\t\t\tbhLogger.debug('Default business hour is not active. No need to apply it to agents');\n\t\t\t\treturn options;\n\t\t\t}\n\n\t\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\t\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\t\treturn options;\n\t\t}\n\n\t\t// This department has a business hour, so we need to\n\t\t// 1. Remove default business hour from these agents if they have it\n\t\t// 2. Add this department's business hour to these agents\n\t\t// 3. Update their status based on these BH\n\t\tawait removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\treturn options;\n\t}\n\n\tasync onRemoveAgentFromDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n\t}\n\n\tasync onRemoveDepartment(options: { department: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>; agentsIds: string[] }) {\n\t\tconst { department, agentsIds } = options;\n\t\tif (!department || !agentsIds?.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tasync onDepartmentDisabled(department: AtLeast<ILivechatDepartment, 'businessHourId' | '_id'>): Promise<void> {\n\t\tif (!department.businessHourId) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get business hour\n\t\tlet businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\tbhLogger.error({\n\t\t\t\tmsg: 'onDepartmentDisabled: business hour not found',\n\t\t\t\tbusinessHourId: department.businessHourId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Unlink business hour from department\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId([department._id], businessHour._id);\n\n\t\t// cleanup user's cache for default business hour and this business hour\n\t\tconst defaultBH = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBH) {\n\t\t\tthrow new Error('Default business hour not found');\n\t\t}\n\t\tawait this.UsersRepository.closeAgentsBusinessHoursByBusinessHourIds([businessHour._id, defaultBH._id]);\n\n\t\t// If i'm the only one, disable the business hour\n\t\tconst imTheOnlyOne = !(await LivechatDepartment.countByBusinessHourIdExcludingDepartmentId(businessHour._id, department._id));\n\t\tif (imTheOnlyOne) {\n\t\t\tbhLogger.warn({\n\t\t\t\tmsg: 'onDepartmentDisabled: department is the only one on business hour, disabling it',\n\t\t\t\tdepartmentId: department._id,\n\t\t\t\tbusinessHourId: businessHour._id,\n\t\t\t});\n\t\t\tawait this.BusinessHourRepository.disableBusinessHour(businessHour._id);\n\n\t\t\tbusinessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\t\tif (!businessHour) {\n\t\t\t\tthrow new Error(`Business hour ${department.businessHourId} not found`);\n\t\t\t}\n\t\t}\n\n\t\t// start default business hour and this BH if needed\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n\t\tfor await (const bh of businessHourToOpen) {\n\t\t\tawait openBusinessHour(bh, false);\n\t\t}\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t\tawait businessHourManager.restartCronJobsIfNecessary();\n\t}\n\n\tasync onDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void> {\n\t\tbhLogger.debug('Processing department archived event on multiple business hours', department);\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync onNewAgentCreated(agentId: string): Promise<void> {\n\t\tawait this.applyAnyOpenBusinessHourToAgent(agentId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour([agentId]);\n\t}\n\n\tprivate async applyAnyOpenBusinessHourToAgent(agentId: string): Promise<void> {\n\t\tconst currentTime = moment().utc();\n\t\tconst day = currentTime.format('dddd');\n\t\tconst allActiveBusinessHoursForEntireWeek = await this.BusinessHourRepository.findActiveBusinessHours({\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst openedBusinessHours = await filterBusinessHoursThatMustBeOpenedByDay(allActiveBusinessHoursForEntireWeek, day);\n\t\tif (!openedBusinessHours.length) {\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for the current day',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },\n\t\t\t{ projection: { agentId: 1, departmentId: 1 } },\n\t\t).toArray();\n\n\t\tif (!agentDepartments.length) {\n\t\t\t// check if default businessHour is active\n\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. Found default business hour to be inactive',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// check if any one these departments have a opened business hour linked to it\n\t\tconst departments = (await LivechatDepartment.findInIds(\n\t\t\tagentDepartments.map(({ departmentId }) => departmentId),\n\t\t\t{ projection: { _id: 1, businessHourId: 1 } },\n\t\t).toArray()) as Pick<ILivechatDepartment, '_id' | 'businessHourId'>[];\n\n\t\tconst departmentsWithActiveBH = departments.filter(\n\t\t\t({ businessHourId }) => businessHourId && openedBusinessHours.findIndex(({ _id }) => _id === businessHourId) !== -1,\n\t\t);\n\n\t\tif (!departmentsWithActiveBH.length) {\n\t\t\t// No opened business hour found for any of the departments connected to the agent\n\t\t\t// check if this agent has any departments that is connected to any non-default business hour\n\t\t\t// if no such departments found then check default BH and if it is active, then allow the agent to change service status\n\t\t\tconst hasAtLeastOneDepartmentWithNonDefaultBH = departments.some(({ businessHourId }) => {\n\t\t\t\t// check if business hour is active\n\t\t\t\treturn businessHourId && allActiveBusinessHoursForEntireWeek.findIndex(({ _id }) => _id === businessHourId) !== -1;\n\t\t\t});\n\t\t\tif (!hasAtLeastOneDepartmentWithNonDefaultBH) {\n\t\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for any of the departments connected to the agent',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId).filter(isTruthy);\n\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n\n\t\tbhLogger.debug({\n\t\t\tmsg: `Business hour status check passed for agent. Found opened business hour for departments connected to the agent`,\n\t\t\tactiveBusinessHoursForAgent,\n\t\t});\n\t}\n\n\tprivate async handleRemoveAgentsFromDepartments(department: Record<string, any>, agentsIds: string[], options: any): Promise<any> {\n\t\tconst agentIdsWithoutDepartment: string[] = [];\n\t\tconst agentIdsToRemoveCurrentBusinessHour: string[] = [];\n\n\t\tconst [agentsWithDepartment, [agentsOfDepartment] = []] = await Promise.all([\n\t\t\tLivechatDepartmentAgents.findByAgentIds(agentsIds, { projection: { agentId: 1 } }).toArray(),\n\t\t\tLivechatDepartment.findAgentsByBusinessHourId(department.businessHourId).toArray(),\n\t\t]);\n\n\t\tfor (const agentId of agentsIds) {\n\t\t\tif (!agentsWithDepartment.find((agent) => agent.agentId === agentId)) {\n\t\t\t\tagentIdsWithoutDepartment.push(agentId);\n\t\t\t}\n\t\t\tif (!agentsOfDepartment?.agentIds?.find((agent) => agent === agentId)) {\n\t\t\t\tagentIdsToRemoveCurrentBusinessHour.push(agentId);\n\t\t\t}\n\t\t}\n\t\tif (department.businessHourId) {\n\t\t\tawait removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n\t\t}\n\t\tif (!agentIdsWithoutDepartment.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n\t\treturn options;\n\t}\n\n\tprivate async openBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tprivate async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(\n\t\tbusinessHourId: string,\n\t\tdepartmentsToRemove: string[],\n\t): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentsToRemove, { projection: { agentId: 1 } }).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tawait removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async closeBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\tawait closeBusinessHour(businessHour);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      MultipleBusinessHoursBehavior: () => MultipleBusinessHoursBehavior\n    });\n    let LivechatBusinessHourTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatBusinessHourTypes(v) {\n        LivechatBusinessHourTypes = v;\n      }\n    }, 0);\n    let LivechatDepartment, LivechatDepartmentAgents, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let openBusinessHour, removeBusinessHourByAgentIds;\n    module.link(\"./Helper\", {\n      openBusinessHour(v) {\n        openBusinessHour = v;\n      },\n      removeBusinessHourByAgentIds(v) {\n        removeBusinessHourByAgentIds = v;\n      }\n    }, 3);\n    let businessHourManager;\n    module.link(\"../../../../../app/livechat/server/business-hour\", {\n      businessHourManager(v) {\n        businessHourManager = v;\n      }\n    }, 4);\n    let AbstractBusinessHourBehavior;\n    module.link(\"../../../../../app/livechat/server/business-hour/AbstractBusinessHour\", {\n      AbstractBusinessHourBehavior(v) {\n        AbstractBusinessHourBehavior = v;\n      }\n    }, 5);\n    let filterBusinessHoursThatMustBeOpened, filterBusinessHoursThatMustBeOpenedByDay, makeOnlineAgentsAvailable, makeAgentsUnavailableBasedOnBusinessHour;\n    module.link(\"../../../../../app/livechat/server/business-hour/Helper\", {\n      filterBusinessHoursThatMustBeOpened(v) {\n        filterBusinessHoursThatMustBeOpened = v;\n      },\n      filterBusinessHoursThatMustBeOpenedByDay(v) {\n        filterBusinessHoursThatMustBeOpenedByDay = v;\n      },\n      makeOnlineAgentsAvailable(v) {\n        makeOnlineAgentsAvailable = v;\n      },\n      makeAgentsUnavailableBasedOnBusinessHour(v) {\n        makeAgentsUnavailableBasedOnBusinessHour = v;\n      }\n    }, 6);\n    let closeBusinessHour;\n    module.link(\"../../../../../app/livechat/server/business-hour/closeBusinessHour\", {\n      closeBusinessHour(v) {\n        closeBusinessHour = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let isTruthy;\n    module.link(\"../../../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 9);\n    let bhLogger;\n    module.link(\"../lib/logger\", {\n      bhLogger(v) {\n        bhLogger = v;\n      }\n    }, 10);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior {\n      constructor() {\n        super();\n        this.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n        this.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n        this.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n        this.onDepartmentArchived = this.onDepartmentArchived.bind(this);\n        this.onDepartmentDisabled = this.onDepartmentDisabled.bind(this);\n        this.onNewAgentCreated = this.onNewAgentCreated.bind(this);\n      }\n      async onStartBusinessHours() {\n        await this.UsersRepository.removeBusinessHoursFromAllUsers();\n        // TODO is this required? since we're calling `this.openBusinessHour(businessHour)` later on, which will call this again (kinda)\n        await makeAgentsUnavailableBasedOnBusinessHour();\n        const currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n        const day = currentTime.format('dddd');\n        const activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n          projection: {\n            workHours: 1,\n            timezone: 1,\n            type: 1,\n            active: 1\n          }\n        });\n        const businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n        bhLogger.info({\n          msg: 'Starting Multiple Business Hours',\n          totalBusinessHoursToOpen: businessHoursToOpen.length,\n          top10BusinessHoursToOpen: businessHoursToOpen.slice(0, 10)\n        });\n        for (const businessHour of businessHoursToOpen) {\n          void this.openBusinessHour(businessHour);\n        }\n      }\n      async openBusinessHoursByDayAndHour(day, hour) {\n        const businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n          projection: {\n            _id: 1,\n            type: 1\n          }\n        });\n        for (const businessHour of businessHours) {\n          void this.openBusinessHour(businessHour);\n        }\n      }\n      async closeBusinessHoursByDayAndHour(day, hour) {\n        const businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n          projection: {\n            _id: 1,\n            type: 1\n          }\n        });\n        for (const businessHour of businessHours) {\n          void this.closeBusinessHour(businessHour);\n        }\n      }\n      async afterSaveBusinessHours(businessHourData) {\n        var _businessHourData$dep, _businessHourData$dep2;\n        const departments = (_businessHourData$dep = businessHourData.departmentsToApplyBusinessHour) === null || _businessHourData$dep === void 0 ? void 0 : _businessHourData$dep.split(',').filter(Boolean);\n        const currentDepartments = (_businessHourData$dep2 = businessHourData.departments) === null || _businessHourData$dep2 === void 0 ? void 0 : _businessHourData$dep2.map(dept => dept._id);\n        const toRemove = [...(currentDepartments || []).filter(dept => !departments.includes(dept))];\n        await this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n        const businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n        if (!businessHour) {\n          return;\n        }\n        const businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map(businessHour => businessHour._id);\n        if (!businessHourIdToOpen.length) {\n          return closeBusinessHour(businessHour);\n        }\n        return openBusinessHour(businessHour);\n      }\n      async onAddAgentToDepartment(options) {\n        const {\n          departmentId,\n          agentsId\n        } = options;\n        const department = await LivechatDepartment.findOneById(departmentId, {\n          projection: {\n            businessHourId: 1\n          }\n        });\n        if (!department || !agentsId.length) {\n          return options;\n        }\n        const defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n        if (!defaultBusinessHour) {\n          return options;\n        }\n        if (!department.businessHourId) {\n          // If this department doesn't have a business hour, we need to apply default business hour to these agents\n          // And then reset their status based on these BH\n          const isDefaultBusinessHourActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n          if (!isDefaultBusinessHourActive) {\n            bhLogger.debug('Default business hour is not active. No need to apply it to agents');\n            return options;\n          }\n          await this.UsersRepository.addBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n          await makeOnlineAgentsAvailable(agentsId);\n          return options;\n        }\n        // This department has a business hour, so we need to\n        // 1. Remove default business hour from these agents if they have it\n        // 2. Add this department's business hour to these agents\n        // 3. Update their status based on these BH\n        await removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n        const businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n        if (!businessHour) {\n          return options;\n        }\n        const businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n        if (!businessHourToOpen.length) {\n          return options;\n        }\n        await this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n        await makeOnlineAgentsAvailable(agentsId);\n        return options;\n      }\n      async onRemoveAgentFromDepartment() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const {\n          departmentId,\n          agentsId\n        } = options;\n        const department = await LivechatDepartment.findOneById(departmentId, {\n          projection: {\n            businessHourId: 1\n          }\n        });\n        if (!department || !agentsId.length) {\n          return options;\n        }\n        return this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n      }\n      async onRemoveDepartment(options) {\n        const {\n          department,\n          agentsIds\n        } = options;\n        if (!department || !(agentsIds !== null && agentsIds !== void 0 && agentsIds.length)) {\n          return options;\n        }\n        return this.onDepartmentDisabled(department);\n      }\n      async onDepartmentDisabled(department) {\n        if (!department.businessHourId) {\n          return;\n        }\n        // Get business hour\n        let businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n        if (!businessHour) {\n          bhLogger.error({\n            msg: 'onDepartmentDisabled: business hour not found',\n            businessHourId: department.businessHourId\n          });\n          return;\n        }\n        // Unlink business hour from department\n        await LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId([department._id], businessHour._id);\n        // cleanup user's cache for default business hour and this business hour\n        const defaultBH = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n        if (!defaultBH) {\n          throw new Error('Default business hour not found');\n        }\n        await this.UsersRepository.closeAgentsBusinessHoursByBusinessHourIds([businessHour._id, defaultBH._id]);\n        // If i'm the only one, disable the business hour\n        const imTheOnlyOne = !(await LivechatDepartment.countByBusinessHourIdExcludingDepartmentId(businessHour._id, department._id));\n        if (imTheOnlyOne) {\n          bhLogger.warn({\n            msg: 'onDepartmentDisabled: department is the only one on business hour, disabling it',\n            departmentId: department._id,\n            businessHourId: businessHour._id\n          });\n          await this.BusinessHourRepository.disableBusinessHour(businessHour._id);\n          businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n          if (!businessHour) {\n            throw new Error(\"Business hour \".concat(department.businessHourId, \" not found\"));\n          }\n        }\n        // start default business hour and this BH if needed\n        if (!settings.get('Livechat_enable_business_hours')) {\n          return;\n        }\n        const businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(businessHourToOpen), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const bh = _step.value;\n            {\n              await openBusinessHour(bh, false);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        await makeAgentsUnavailableBasedOnBusinessHour();\n        await businessHourManager.restartCronJobsIfNecessary();\n      }\n      async onDepartmentArchived(department) {\n        bhLogger.debug('Processing department archived event on multiple business hours', department);\n        return this.onDepartmentDisabled(department);\n      }\n      allowAgentChangeServiceStatus(agentId) {\n        return this.UsersRepository.isAgentWithinBusinessHours(agentId);\n      }\n      async onNewAgentCreated(agentId) {\n        await this.applyAnyOpenBusinessHourToAgent(agentId);\n        await makeAgentsUnavailableBasedOnBusinessHour([agentId]);\n      }\n      async applyAnyOpenBusinessHourToAgent(agentId) {\n        const currentTime = moment().utc();\n        const day = currentTime.format('dddd');\n        const allActiveBusinessHoursForEntireWeek = await this.BusinessHourRepository.findActiveBusinessHours({\n          projection: {\n            workHours: 1,\n            timezone: 1,\n            type: 1,\n            active: 1\n          }\n        });\n        const openedBusinessHours = await filterBusinessHoursThatMustBeOpenedByDay(allActiveBusinessHoursForEntireWeek, day);\n        if (!openedBusinessHours.length) {\n          bhLogger.debug({\n            msg: 'Business hour status check failed for agent. No opened business hour found for the current day',\n            agentId\n          });\n          return;\n        }\n        const agentDepartments = await LivechatDepartmentAgents.find({\n          departmentEnabled: true,\n          agentId\n        }, {\n          projection: {\n            agentId: 1,\n            departmentId: 1\n          }\n        }).toArray();\n        if (!agentDepartments.length) {\n          // check if default businessHour is active\n          const isDefaultBHActive = openedBusinessHours.find(_ref => {\n            let {\n              type\n            } = _ref;\n            return type === LivechatBusinessHourTypes.DEFAULT;\n          });\n          if (isDefaultBHActive !== null && isDefaultBHActive !== void 0 && isDefaultBHActive._id) {\n            await Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n            return;\n          }\n          bhLogger.debug({\n            msg: 'Business hour status check failed for agent. Found default business hour to be inactive',\n            agentId\n          });\n          return;\n        }\n        // check if any one these departments have a opened business hour linked to it\n        const departments = await LivechatDepartment.findInIds(agentDepartments.map(_ref2 => {\n          let {\n            departmentId\n          } = _ref2;\n          return departmentId;\n        }), {\n          projection: {\n            _id: 1,\n            businessHourId: 1\n          }\n        }).toArray();\n        const departmentsWithActiveBH = departments.filter(_ref3 => {\n          let {\n            businessHourId\n          } = _ref3;\n          return businessHourId && openedBusinessHours.findIndex(_ref4 => {\n            let {\n              _id\n            } = _ref4;\n            return _id === businessHourId;\n          }) !== -1;\n        });\n        if (!departmentsWithActiveBH.length) {\n          // No opened business hour found for any of the departments connected to the agent\n          // check if this agent has any departments that is connected to any non-default business hour\n          // if no such departments found then check default BH and if it is active, then allow the agent to change service status\n          const hasAtLeastOneDepartmentWithNonDefaultBH = departments.some(_ref5 => {\n            let {\n              businessHourId\n            } = _ref5;\n            // check if business hour is active\n            return businessHourId && allActiveBusinessHoursForEntireWeek.findIndex(_ref6 => {\n              let {\n                _id\n              } = _ref6;\n              return _id === businessHourId;\n            }) !== -1;\n          });\n          if (!hasAtLeastOneDepartmentWithNonDefaultBH) {\n            const isDefaultBHActive = openedBusinessHours.find(_ref7 => {\n              let {\n                type\n              } = _ref7;\n              return type === LivechatBusinessHourTypes.DEFAULT;\n            });\n            if (isDefaultBHActive !== null && isDefaultBHActive !== void 0 && isDefaultBHActive._id) {\n              await Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n              return;\n            }\n          }\n          bhLogger.debug({\n            msg: 'Business hour status check failed for agent. No opened business hour found for any of the departments connected to the agent',\n            agentId\n          });\n          return;\n        }\n        const activeBusinessHoursForAgent = departmentsWithActiveBH.map(_ref8 => {\n          let {\n            businessHourId\n          } = _ref8;\n          return businessHourId;\n        }).filter(isTruthy);\n        await Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n        bhLogger.debug({\n          msg: \"Business hour status check passed for agent. Found opened business hour for departments connected to the agent\",\n          activeBusinessHoursForAgent\n        });\n      }\n      async handleRemoveAgentsFromDepartments(department, agentsIds, options) {\n        const agentIdsWithoutDepartment = [];\n        const agentIdsToRemoveCurrentBusinessHour = [];\n        const [agentsWithDepartment, [agentsOfDepartment] = []] = await Promise.all([LivechatDepartmentAgents.findByAgentIds(agentsIds, {\n          projection: {\n            agentId: 1\n          }\n        }).toArray(), LivechatDepartment.findAgentsByBusinessHourId(department.businessHourId).toArray()]);\n        for (const agentId of agentsIds) {\n          var _agentsOfDepartment$a;\n          if (!agentsWithDepartment.find(agent => agent.agentId === agentId)) {\n            agentIdsWithoutDepartment.push(agentId);\n          }\n          if (!(agentsOfDepartment !== null && agentsOfDepartment !== void 0 && (_agentsOfDepartment$a = agentsOfDepartment.agentIds) !== null && _agentsOfDepartment$a !== void 0 && _agentsOfDepartment$a.find(agent => agent === agentId))) {\n            agentIdsToRemoveCurrentBusinessHour.push(agentId);\n          }\n        }\n        if (department.businessHourId) {\n          await removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n        }\n        if (!agentIdsWithoutDepartment.length) {\n          return options;\n        }\n        const defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n        if (!defaultBusinessHour) {\n          return options;\n        }\n        const businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n        if (!businessHourToOpen.length) {\n          return options;\n        }\n        await this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n        return options;\n      }\n      async openBusinessHour(businessHour) {\n        return openBusinessHour(businessHour);\n      }\n      async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourId, departmentsToRemove) {\n        if (!departmentsToRemove.length) {\n          return;\n        }\n        const agentIds = (await LivechatDepartmentAgents.findByDepartmentIds(departmentsToRemove, {\n          projection: {\n            agentId: 1\n          }\n        }).toArray()).map(dept => dept.agentId);\n        await removeBusinessHourByAgentIds(agentIds, businessHourId);\n      }\n      async closeBusinessHour(businessHour) {\n        await closeBusinessHour(businessHour);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","MultipleBusinessHoursBehavior","LivechatBusinessHourTypes","LivechatDepartment","LivechatDepartmentAgents","Users","moment","openBusinessHour","removeBusinessHourByAgentIds","businessHourManager","AbstractBusinessHourBehavior","filterBusinessHoursThatMustBeOpened","filterBusinessHoursThatMustBeOpenedByDay","makeOnlineAgentsAvailable","makeAgentsUnavailableBasedOnBusinessHour","closeBusinessHour","settings","isTruthy","bhLogger","__reifyWaitForDeps__","constructor","onAddAgentToDepartment","bind","onRemoveAgentFromDepartment","onRemoveDepartment","onDepartmentArchived","onDepartmentDisabled","onNewAgentCreated","onStartBusinessHours","UsersRepository","removeBusinessHoursFromAllUsers","currentTime","utc","format","day","activeBusinessHours","BusinessHourRepository","findActiveAndOpenBusinessHoursByDay","projection","workHours","timezone","type","active","businessHoursToOpen","info","msg","totalBusinessHoursToOpen","length","top10BusinessHoursToOpen","slice","businessHour","openBusinessHoursByDayAndHour","hour","businessHours","findActiveBusinessHoursToOpen","undefined","_id","closeBusinessHoursByDayAndHour","findActiveBusinessHoursToClose","afterSaveBusinessHours","businessHourData","_businessHourData$dep","_businessHourData$dep2","departments","departmentsToApplyBusinessHour","split","filter","Boolean","currentDepartments","map","dept","toRemove","includes","removeBusinessHourFromRemovedDepartmentsUsersIfNeeded","findOneById","businessHourIdToOpen","options","departmentId","agentsId","department","businessHourId","defaultBusinessHour","findOneDefaultBusinessHour","isDefaultBusinessHourActive","debug","addBusinessHourByAgentIds","businessHourToOpen","arguments","handleRemoveAgentsFromDepartments","agentsIds","error","removeBusinessHourFromDepartmentsByIdsAndBusinessHourId","defaultBH","Error","closeAgentsBusinessHoursByBusinessHourIds","imTheOnlyOne","countByBusinessHourIdExcludingDepartmentId","warn","disableBusinessHour","concat","get","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","bh","value","err","return","restartCronJobsIfNecessary","allowAgentChangeServiceStatus","agentId","isAgentWithinBusinessHours","applyAnyOpenBusinessHourToAgent","allActiveBusinessHoursForEntireWeek","findActiveBusinessHours","openedBusinessHours","agentDepartments","find","departmentEnabled","toArray","isDefaultBHActive","_ref","DEFAULT","openAgentBusinessHoursByBusinessHourIdsAndAgentId","findInIds","_ref2","departmentsWithActiveBH","_ref3","findIndex","_ref4","hasAtLeastOneDepartmentWithNonDefaultBH","some","_ref5","_ref6","_ref7","activeBusinessHoursForAgent","_ref8","agentIdsWithoutDepartment","agentIdsToRemoveCurrentBusinessHour","agentsWithDepartment","agentsOfDepartment","Promise","all","findByAgentIds","findAgentsByBusinessHourId","_agentsOfDepartment$a","agent","push","agentIds","departmentsToRemove","findByDepartmentIds","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/business-hour/Multiple.ts"],"sourcesContent":["import { LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport type { AtLeast, ILivechatDepartment, ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { LivechatDepartment, LivechatDepartmentAgents, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { openBusinessHour, removeBusinessHourByAgentIds } from './Helper';\nimport { businessHourManager } from '../../../../../app/livechat/server/business-hour';\nimport type { IBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport { AbstractBusinessHourBehavior } from '../../../../../app/livechat/server/business-hour/AbstractBusinessHour';\nimport {\n\tfilterBusinessHoursThatMustBeOpened,\n\tfilterBusinessHoursThatMustBeOpenedByDay,\n\tmakeOnlineAgentsAvailable,\n\tmakeAgentsUnavailableBasedOnBusinessHour,\n} from '../../../../../app/livechat/server/business-hour/Helper';\nimport { closeBusinessHour } from '../../../../../app/livechat/server/business-hour/closeBusinessHour';\nimport { settings } from '../../../../../app/settings/server';\nimport { isTruthy } from '../../../../../lib/isTruthy';\nimport { bhLogger } from '../lib/logger';\n\ninterface IBusinessHoursExtraProperties extends ILivechatBusinessHour {\n\ttimezoneName: string;\n\tdepartmentsToApplyBusinessHour: string;\n}\n\nexport class MultipleBusinessHoursBehavior extends AbstractBusinessHourBehavior implements IBusinessHourBehavior {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.onAddAgentToDepartment = this.onAddAgentToDepartment.bind(this);\n\t\tthis.onRemoveAgentFromDepartment = this.onRemoveAgentFromDepartment.bind(this);\n\t\tthis.onRemoveDepartment = this.onRemoveDepartment.bind(this);\n\t\tthis.onDepartmentArchived = this.onDepartmentArchived.bind(this);\n\t\tthis.onDepartmentDisabled = this.onDepartmentDisabled.bind(this);\n\t\tthis.onNewAgentCreated = this.onNewAgentCreated.bind(this);\n\t}\n\n\tasync onStartBusinessHours(): Promise<void> {\n\t\tawait this.UsersRepository.removeBusinessHoursFromAllUsers();\n\n\t\t// TODO is this required? since we're calling `this.openBusinessHour(businessHour)` later on, which will call this again (kinda)\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\n\t\tconst currentTime = moment.utc(moment().utc().format('dddd:HH:mm'), 'dddd:HH:mm');\n\t\tconst day = currentTime.format('dddd');\n\t\tconst activeBusinessHours = await this.BusinessHourRepository.findActiveAndOpenBusinessHoursByDay(day, {\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst businessHoursToOpen = await filterBusinessHoursThatMustBeOpened(activeBusinessHours);\n\t\tbhLogger.info({\n\t\t\tmsg: 'Starting Multiple Business Hours',\n\t\t\ttotalBusinessHoursToOpen: businessHoursToOpen.length,\n\t\t\ttop10BusinessHoursToOpen: businessHoursToOpen.slice(0, 10),\n\t\t});\n\t\tfor (const businessHour of businessHoursToOpen) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync openBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToOpen(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.openBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync closeBusinessHoursByDayAndHour(day: string, hour: string): Promise<void> {\n\t\tconst businessHours = await this.BusinessHourRepository.findActiveBusinessHoursToClose(day, hour, undefined, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\ttype: 1,\n\t\t\t},\n\t\t});\n\t\tfor (const businessHour of businessHours) {\n\t\t\tvoid this.closeBusinessHour(businessHour);\n\t\t}\n\t}\n\n\tasync afterSaveBusinessHours(businessHourData: IBusinessHoursExtraProperties): Promise<void> {\n\t\tconst departments = businessHourData.departmentsToApplyBusinessHour?.split(',').filter(Boolean);\n\t\tconst currentDepartments = businessHourData.departments?.map((dept) => dept._id);\n\t\tconst toRemove = [...(currentDepartments || []).filter((dept) => !departments.includes(dept))];\n\t\tawait this.removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(businessHourData._id, toRemove);\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(businessHourData._id);\n\t\tif (!businessHour) {\n\t\t\treturn;\n\t\t}\n\t\tconst businessHourIdToOpen = (await filterBusinessHoursThatMustBeOpened([businessHour])).map((businessHour) => businessHour._id);\n\t\tif (!businessHourIdToOpen.length) {\n\t\t\treturn closeBusinessHour(businessHour);\n\t\t}\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tasync onAddAgentToDepartment(options: { departmentId: string; agentsId: string[] }): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tif (!department.businessHourId) {\n\t\t\t// If this department doesn't have a business hour, we need to apply default business hour to these agents\n\t\t\t// And then reset their status based on these BH\n\t\t\tconst isDefaultBusinessHourActive = (await filterBusinessHoursThatMustBeOpened([defaultBusinessHour])).length > 0;\n\t\t\tif (!isDefaultBusinessHourActive) {\n\t\t\t\tbhLogger.debug('Default business hour is not active. No need to apply it to agents');\n\t\t\t\treturn options;\n\t\t\t}\n\n\t\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\t\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\t\treturn options;\n\t\t}\n\n\t\t// This department has a business hour, so we need to\n\t\t// 1. Remove default business hour from these agents if they have it\n\t\t// 2. Add this department's business hour to these agents\n\t\t// 3. Update their status based on these BH\n\t\tawait removeBusinessHourByAgentIds(agentsId, defaultBusinessHour._id);\n\n\t\tconst businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentsId, businessHour._id);\n\t\tawait makeOnlineAgentsAvailable(agentsId);\n\n\t\treturn options;\n\t}\n\n\tasync onRemoveAgentFromDepartment(options: Record<string, any> = {}): Promise<any> {\n\t\tconst { departmentId, agentsId } = options;\n\t\tconst department = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(departmentId, {\n\t\t\tprojection: { businessHourId: 1 },\n\t\t});\n\t\tif (!department || !agentsId.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.handleRemoveAgentsFromDepartments(department, agentsId, options);\n\t}\n\n\tasync onRemoveDepartment(options: { department: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>; agentsIds: string[] }) {\n\t\tconst { department, agentsIds } = options;\n\t\tif (!department || !agentsIds?.length) {\n\t\t\treturn options;\n\t\t}\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tasync onDepartmentDisabled(department: AtLeast<ILivechatDepartment, 'businessHourId' | '_id'>): Promise<void> {\n\t\tif (!department.businessHourId) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get business hour\n\t\tlet businessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\tbhLogger.error({\n\t\t\t\tmsg: 'onDepartmentDisabled: business hour not found',\n\t\t\t\tbusinessHourId: department.businessHourId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Unlink business hour from department\n\t\tawait LivechatDepartment.removeBusinessHourFromDepartmentsByIdsAndBusinessHourId([department._id], businessHour._id);\n\n\t\t// cleanup user's cache for default business hour and this business hour\n\t\tconst defaultBH = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBH) {\n\t\t\tthrow new Error('Default business hour not found');\n\t\t}\n\t\tawait this.UsersRepository.closeAgentsBusinessHoursByBusinessHourIds([businessHour._id, defaultBH._id]);\n\n\t\t// If i'm the only one, disable the business hour\n\t\tconst imTheOnlyOne = !(await LivechatDepartment.countByBusinessHourIdExcludingDepartmentId(businessHour._id, department._id));\n\t\tif (imTheOnlyOne) {\n\t\t\tbhLogger.warn({\n\t\t\t\tmsg: 'onDepartmentDisabled: department is the only one on business hour, disabling it',\n\t\t\t\tdepartmentId: department._id,\n\t\t\t\tbusinessHourId: businessHour._id,\n\t\t\t});\n\t\t\tawait this.BusinessHourRepository.disableBusinessHour(businessHour._id);\n\n\t\t\tbusinessHour = await this.BusinessHourRepository.findOneById(department.businessHourId);\n\t\t\tif (!businessHour) {\n\t\t\t\tthrow new Error(`Business hour ${department.businessHourId} not found`);\n\t\t\t}\n\t\t}\n\n\t\t// start default business hour and this BH if needed\n\t\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([businessHour, defaultBH]);\n\t\tfor await (const bh of businessHourToOpen) {\n\t\t\tawait openBusinessHour(bh, false);\n\t\t}\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour();\n\t\tawait businessHourManager.restartCronJobsIfNecessary();\n\t}\n\n\tasync onDepartmentArchived(department: Pick<ILivechatDepartment, '_id' | 'businessHourId'>): Promise<void> {\n\t\tbhLogger.debug('Processing department archived event on multiple business hours', department);\n\t\treturn this.onDepartmentDisabled(department);\n\t}\n\n\tallowAgentChangeServiceStatus(agentId: string): Promise<boolean> {\n\t\treturn this.UsersRepository.isAgentWithinBusinessHours(agentId);\n\t}\n\n\tasync onNewAgentCreated(agentId: string): Promise<void> {\n\t\tawait this.applyAnyOpenBusinessHourToAgent(agentId);\n\n\t\tawait makeAgentsUnavailableBasedOnBusinessHour([agentId]);\n\t}\n\n\tprivate async applyAnyOpenBusinessHourToAgent(agentId: string): Promise<void> {\n\t\tconst currentTime = moment().utc();\n\t\tconst day = currentTime.format('dddd');\n\t\tconst allActiveBusinessHoursForEntireWeek = await this.BusinessHourRepository.findActiveBusinessHours({\n\t\t\tprojection: {\n\t\t\t\tworkHours: 1,\n\t\t\t\ttimezone: 1,\n\t\t\t\ttype: 1,\n\t\t\t\tactive: 1,\n\t\t\t},\n\t\t});\n\t\tconst openedBusinessHours = await filterBusinessHoursThatMustBeOpenedByDay(allActiveBusinessHoursForEntireWeek, day);\n\t\tif (!openedBusinessHours.length) {\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for the current day',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst agentDepartments = await LivechatDepartmentAgents.find(\n\t\t\t{ departmentEnabled: true, agentId },\n\t\t\t{ projection: { agentId: 1, departmentId: 1 } },\n\t\t).toArray();\n\n\t\tif (!agentDepartments.length) {\n\t\t\t// check if default businessHour is active\n\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. Found default business hour to be inactive',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// check if any one these departments have a opened business hour linked to it\n\t\tconst departments = (await LivechatDepartment.findInIds(\n\t\t\tagentDepartments.map(({ departmentId }) => departmentId),\n\t\t\t{ projection: { _id: 1, businessHourId: 1 } },\n\t\t).toArray()) as Pick<ILivechatDepartment, '_id' | 'businessHourId'>[];\n\n\t\tconst departmentsWithActiveBH = departments.filter(\n\t\t\t({ businessHourId }) => businessHourId && openedBusinessHours.findIndex(({ _id }) => _id === businessHourId) !== -1,\n\t\t);\n\n\t\tif (!departmentsWithActiveBH.length) {\n\t\t\t// No opened business hour found for any of the departments connected to the agent\n\t\t\t// check if this agent has any departments that is connected to any non-default business hour\n\t\t\t// if no such departments found then check default BH and if it is active, then allow the agent to change service status\n\t\t\tconst hasAtLeastOneDepartmentWithNonDefaultBH = departments.some(({ businessHourId }) => {\n\t\t\t\t// check if business hour is active\n\t\t\t\treturn businessHourId && allActiveBusinessHoursForEntireWeek.findIndex(({ _id }) => _id === businessHourId) !== -1;\n\t\t\t});\n\t\t\tif (!hasAtLeastOneDepartmentWithNonDefaultBH) {\n\t\t\t\tconst isDefaultBHActive = openedBusinessHours.find(({ type }) => type === LivechatBusinessHourTypes.DEFAULT);\n\t\t\t\tif (isDefaultBHActive?._id) {\n\t\t\t\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId([isDefaultBHActive._id], agentId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbhLogger.debug({\n\t\t\t\tmsg: 'Business hour status check failed for agent. No opened business hour found for any of the departments connected to the agent',\n\t\t\t\tagentId,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeBusinessHoursForAgent = departmentsWithActiveBH.map(({ businessHourId }) => businessHourId).filter(isTruthy);\n\t\tawait Users.openAgentBusinessHoursByBusinessHourIdsAndAgentId(activeBusinessHoursForAgent, agentId);\n\n\t\tbhLogger.debug({\n\t\t\tmsg: `Business hour status check passed for agent. Found opened business hour for departments connected to the agent`,\n\t\t\tactiveBusinessHoursForAgent,\n\t\t});\n\t}\n\n\tprivate async handleRemoveAgentsFromDepartments(department: Record<string, any>, agentsIds: string[], options: any): Promise<any> {\n\t\tconst agentIdsWithoutDepartment: string[] = [];\n\t\tconst agentIdsToRemoveCurrentBusinessHour: string[] = [];\n\n\t\tconst [agentsWithDepartment, [agentsOfDepartment] = []] = await Promise.all([\n\t\t\tLivechatDepartmentAgents.findByAgentIds(agentsIds, { projection: { agentId: 1 } }).toArray(),\n\t\t\tLivechatDepartment.findAgentsByBusinessHourId(department.businessHourId).toArray(),\n\t\t]);\n\n\t\tfor (const agentId of agentsIds) {\n\t\t\tif (!agentsWithDepartment.find((agent) => agent.agentId === agentId)) {\n\t\t\t\tagentIdsWithoutDepartment.push(agentId);\n\t\t\t}\n\t\t\tif (!agentsOfDepartment?.agentIds?.find((agent) => agent === agentId)) {\n\t\t\t\tagentIdsToRemoveCurrentBusinessHour.push(agentId);\n\t\t\t}\n\t\t}\n\t\tif (department.businessHourId) {\n\t\t\tawait removeBusinessHourByAgentIds(agentIdsToRemoveCurrentBusinessHour, department.businessHourId);\n\t\t}\n\t\tif (!agentIdsWithoutDepartment.length) {\n\t\t\treturn options;\n\t\t}\n\t\tconst defaultBusinessHour = await this.BusinessHourRepository.findOneDefaultBusinessHour();\n\t\tif (!defaultBusinessHour) {\n\t\t\treturn options;\n\t\t}\n\t\tconst businessHourToOpen = await filterBusinessHoursThatMustBeOpened([defaultBusinessHour]);\n\t\tif (!businessHourToOpen.length) {\n\t\t\treturn options;\n\t\t}\n\t\tawait this.UsersRepository.addBusinessHourByAgentIds(agentIdsWithoutDepartment, defaultBusinessHour._id);\n\t\treturn options;\n\t}\n\n\tprivate async openBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\treturn openBusinessHour(businessHour);\n\t}\n\n\tprivate async removeBusinessHourFromRemovedDepartmentsUsersIfNeeded(\n\t\tbusinessHourId: string,\n\t\tdepartmentsToRemove: string[],\n\t): Promise<void> {\n\t\tif (!departmentsToRemove.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst agentIds = (\n\t\t\tawait LivechatDepartmentAgents.findByDepartmentIds(departmentsToRemove, { projection: { agentId: 1 } }).toArray()\n\t\t).map((dept) => dept.agentId);\n\t\tawait removeBusinessHourByAgentIds(agentIds, businessHourId);\n\t}\n\n\tprivate async closeBusinessHour(businessHour: Pick<ILivechatBusinessHour, '_id' | 'type'>): Promise<void> {\n\t\tawait closeBusinessHour(businessHour);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"cf75c14327df00f4f2cd42ce7fa40bfe10575ee1"}
