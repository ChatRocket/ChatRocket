{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/sendMessageBySMS.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/sendMessageBySMS.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/sendMessageBySMS.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/sendMessageBySMS.ts","sourceRoot":"","sources":["app/livechat/server/sendMessageBySMS.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { isEditedMessage, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { settings } from '../../settings/server';\nimport { normalizeMessageFileUpload } from '../../utils/server/functions/normalizeMessageFileUpload';\nimport { callbackLogger } from './lib/logger';\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room }) => {\n\t\t// skips this callback if the message was edited\n\t\tif (isEditedMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!settings.get('SMS_Enabled')) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// only send the sms by SMS if it is a livechat room with SMS set to true\n\t\tif (!(room.sms && room.v && room.v.token)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a token, it was sent from the visitor, so ignore it\n\t\tif (message.token) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a type means it is a special message (like the closing comment), so skips\n\t\tif (message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { rid, u: { _id: userId } = {} } = message;\n\t\tlet extraData = { rid, userId };\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\tconst { fileUpload } = message;\n\t\t\textraData = Object.assign({}, extraData, { fileUpload });\n\t\t}\n\n\t\tif (message.location) {\n\t\t\tconst { location } = message;\n\t\t\textraData = Object.assign({}, extraData, { location });\n\t\t}\n\t\tconst service = settings.get<string>('SMS_Service');\n\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService) {\n\t\t\tcallbackLogger.debug('SMS Service is not configured, skipping SMS send');\n\t\t\treturn message;\n\t\t}\n\n\t\tconst visitorSource: IOmnichannelSource = { type: OmnichannelSourceType.SMS, alias: service };\n\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t{ token: room.v.token, sourceFilter: { 'source.type': visitorSource.type, 'source.alias': visitorSource.alias } },\n\t\t\t{ projection: { phone: 1, source: 1 } },\n\t\t);\n\n\t\tif (!visitor?.phone || visitor.phone.length === 0) {\n\t\t\treturn message;\n\t\t}\n\t\tvisitorSource.destination = visitor.phone[0].phoneNumber;\n\n\t\tif (!visitor.source) {\n\t\t\tawait LivechatVisitors.setSourceById(visitor._id, visitorSource);\n\t\t}\n\n\t\ttry {\n\t\t\tawait SMSService.send(room.sms.from, visitor.phone[0].phoneNumber, message.msg, extraData);\n\t\t\tcallbackLogger.debug(`SMS message sent to ${visitor.phone[0].phoneNumber} via ${service}`);\n\t\t} catch (e) {\n\t\t\tcallbackLogger.error(e);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'sendMessageBySms',\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/sendMessageBySMS.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/sendMessageBySMS.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/sendMessageBySMS.ts","sourceRoot":"","sources":["app/livechat/server/sendMessageBySMS.ts"],"names":[],"mappings":"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","sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { isEditedMessage, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { settings } from '../../settings/server';\nimport { normalizeMessageFileUpload } from '../../utils/server/functions/normalizeMessageFileUpload';\nimport { callbackLogger } from './lib/logger';\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room }) => {\n\t\t// skips this callback if the message was edited\n\t\tif (isEditedMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!settings.get('SMS_Enabled')) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// only send the sms by SMS if it is a livechat room with SMS set to true\n\t\tif (!(room.sms && room.v && room.v.token)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a token, it was sent from the visitor, so ignore it\n\t\tif (message.token) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a type means it is a special message (like the closing comment), so skips\n\t\tif (message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { rid, u: { _id: userId } = {} } = message;\n\t\tlet extraData = { rid, userId };\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\tconst { fileUpload } = message;\n\t\t\textraData = Object.assign({}, extraData, { fileUpload });\n\t\t}\n\n\t\tif (message.location) {\n\t\t\tconst { location } = message;\n\t\t\textraData = Object.assign({}, extraData, { location });\n\t\t}\n\t\tconst service = settings.get<string>('SMS_Service');\n\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService) {\n\t\t\tcallbackLogger.debug('SMS Service is not configured, skipping SMS send');\n\t\t\treturn message;\n\t\t}\n\n\t\tconst visitorSource: IOmnichannelSource = { type: OmnichannelSourceType.SMS, alias: service };\n\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t{ token: room.v.token, sourceFilter: { 'source.type': visitorSource.type, 'source.alias': visitorSource.alias } },\n\t\t\t{ projection: { phone: 1, source: 1 } },\n\t\t);\n\n\t\tif (!visitor?.phone || visitor.phone.length === 0) {\n\t\t\treturn message;\n\t\t}\n\t\tvisitorSource.destination = visitor.phone[0].phoneNumber;\n\n\t\tif (!visitor.source) {\n\t\t\tawait LivechatVisitors.setSourceById(visitor._id, visitorSource);\n\t\t}\n\n\t\ttry {\n\t\t\tawait SMSService.send(room.sms.from, visitor.phone[0].phoneNumber, message.msg, extraData);\n\t\t\tcallbackLogger.debug(`SMS message sent to ${visitor.phone[0].phoneNumber} via ${service}`);\n\t\t} catch (e) {\n\t\t\tcallbackLogger.error(e);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'sendMessageBySms',\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let OmnichannelIntegration;\n    module.link(\"@rocket.chat/core-services\", {\n      OmnichannelIntegration(v) {\n        OmnichannelIntegration = v;\n      }\n    }, 0);\n    let isEditedMessage, OmnichannelSourceType;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      },\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      }\n    }, 1);\n    let LivechatVisitors;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let normalizeMessageFileUpload;\n    module.link(\"../../utils/server/functions/normalizeMessageFileUpload\", {\n      normalizeMessageFileUpload(v) {\n        normalizeMessageFileUpload = v;\n      }\n    }, 5);\n    let callbackLogger;\n    module.link(\"./lib/logger\", {\n      callbackLogger(v) {\n        callbackLogger = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    callbacks.add('afterOmnichannelSaveMessage', async (message, _ref) => {\n      let {\n        room\n      } = _ref;\n      // skips this callback if the message was edited\n      if (isEditedMessage(message)) {\n        return message;\n      }\n      if (!settings.get('SMS_Enabled')) {\n        return message;\n      }\n      // only send the sms by SMS if it is a livechat room with SMS set to true\n      if (!(room.sms && room.v && room.v.token)) {\n        return message;\n      }\n      // if the message has a token, it was sent from the visitor, so ignore it\n      if (message.token) {\n        return message;\n      }\n      // if the message has a type means it is a special message (like the closing comment), so skips\n      if (message.t) {\n        return message;\n      }\n      const {\n        rid,\n        u: {\n          _id: userId\n        } = {}\n      } = message;\n      let extraData = {\n        rid,\n        userId\n      };\n      if (message.file) {\n        message = _objectSpread(_objectSpread({}, await normalizeMessageFileUpload(message)), {\n          _updatedAt: message._updatedAt\n        });\n        const {\n          fileUpload\n        } = message;\n        extraData = Object.assign({}, extraData, {\n          fileUpload\n        });\n      }\n      if (message.location) {\n        const {\n          location\n        } = message;\n        extraData = Object.assign({}, extraData, {\n          location\n        });\n      }\n      const service = settings.get('SMS_Service');\n      const SMSService = await OmnichannelIntegration.getSmsService(service);\n      if (!SMSService) {\n        callbackLogger.debug('SMS Service is not configured, skipping SMS send');\n        return message;\n      }\n      const visitorSource = {\n        type: OmnichannelSourceType.SMS,\n        alias: service\n      };\n      const visitor = await LivechatVisitors.getVisitorByTokenAndSource({\n        token: room.v.token,\n        sourceFilter: {\n          'source.type': visitorSource.type,\n          'source.alias': visitorSource.alias\n        }\n      }, {\n        projection: {\n          phone: 1,\n          source: 1\n        }\n      });\n      if (!(visitor !== null && visitor !== void 0 && visitor.phone) || visitor.phone.length === 0) {\n        return message;\n      }\n      visitorSource.destination = visitor.phone[0].phoneNumber;\n      if (!visitor.source) {\n        await LivechatVisitors.setSourceById(visitor._id, visitorSource);\n      }\n      try {\n        await SMSService.send(room.sms.from, visitor.phone[0].phoneNumber, message.msg, extraData);\n        callbackLogger.debug(\"SMS message sent to \".concat(visitor.phone[0].phoneNumber, \" via \").concat(service));\n      } catch (e) {\n        callbackLogger.error(e);\n      }\n      return message;\n    }, callbacks.priority.LOW, 'sendMessageBySms');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","OmnichannelIntegration","isEditedMessage","OmnichannelSourceType","LivechatVisitors","callbacks","settings","normalizeMessageFileUpload","callbackLogger","__reifyWaitForDeps__","add","message","_ref","room","get","sms","token","t","rid","u","_id","userId","extraData","file","_updatedAt","fileUpload","Object","assign","location","service","SMSService","getSmsService","debug","visitorSource","type","SMS","alias","visitor","getVisitorByTokenAndSource","sourceFilter","projection","phone","source","length","destination","phoneNumber","setSourceById","send","from","msg","concat","e","error","priority","LOW","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/sendMessageBySMS.ts"],"sourcesContent":["import { OmnichannelIntegration } from '@rocket.chat/core-services';\nimport type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { isEditedMessage, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors } from '@rocket.chat/models';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { settings } from '../../settings/server';\nimport { normalizeMessageFileUpload } from '../../utils/server/functions/normalizeMessageFileUpload';\nimport { callbackLogger } from './lib/logger';\n\ncallbacks.add(\n\t'afterOmnichannelSaveMessage',\n\tasync (message, { room }) => {\n\t\t// skips this callback if the message was edited\n\t\tif (isEditedMessage(message)) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!settings.get('SMS_Enabled')) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// only send the sms by SMS if it is a livechat room with SMS set to true\n\t\tif (!(room.sms && room.v && room.v.token)) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a token, it was sent from the visitor, so ignore it\n\t\tif (message.token) {\n\t\t\treturn message;\n\t\t}\n\n\t\t// if the message has a type means it is a special message (like the closing comment), so skips\n\t\tif (message.t) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { rid, u: { _id: userId } = {} } = message;\n\t\tlet extraData = { rid, userId };\n\t\tif (message.file) {\n\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\tconst { fileUpload } = message;\n\t\t\textraData = Object.assign({}, extraData, { fileUpload });\n\t\t}\n\n\t\tif (message.location) {\n\t\t\tconst { location } = message;\n\t\t\textraData = Object.assign({}, extraData, { location });\n\t\t}\n\t\tconst service = settings.get<string>('SMS_Service');\n\n\t\tconst SMSService = await OmnichannelIntegration.getSmsService(service);\n\n\t\tif (!SMSService) {\n\t\t\tcallbackLogger.debug('SMS Service is not configured, skipping SMS send');\n\t\t\treturn message;\n\t\t}\n\n\t\tconst visitorSource: IOmnichannelSource = { type: OmnichannelSourceType.SMS, alias: service };\n\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t{ token: room.v.token, sourceFilter: { 'source.type': visitorSource.type, 'source.alias': visitorSource.alias } },\n\t\t\t{ projection: { phone: 1, source: 1 } },\n\t\t);\n\n\t\tif (!visitor?.phone || visitor.phone.length === 0) {\n\t\t\treturn message;\n\t\t}\n\t\tvisitorSource.destination = visitor.phone[0].phoneNumber;\n\n\t\tif (!visitor.source) {\n\t\t\tawait LivechatVisitors.setSourceById(visitor._id, visitorSource);\n\t\t}\n\n\t\ttry {\n\t\t\tawait SMSService.send(room.sms.from, visitor.phone[0].phoneNumber, message.msg, extraData);\n\t\t\tcallbackLogger.debug(`SMS message sent to ${visitor.phone[0].phoneNumber} via ${service}`);\n\t\t} catch (e) {\n\t\t\tcallbackLogger.error(e);\n\t\t}\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'sendMessageBySms',\n);\n"],"mappings":";;;IAAA,IAAAA,aAAS;IAAAC,MAAA,CAAAC,IAAA,uCAA2D;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAApE,IAAAC,sBAAS;IAAAJ,MAAwB,CAAAC,IAAA,CAAM,4BAA4B,EAAC;MAAAG,uBAAAD,CAAA;QAAAC,sBAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,eAAA,EAAAC,qBAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAI,gBAAAF,CAAA;QAAAE,eAAA,GAAAF,CAAA;MAAA;MAAAG,sBAAAH,CAAA;QAAAG,qBAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,gBAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,iBAAAJ,CAAA;QAAAI,gBAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,SAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,UAAAL,CAAA;QAAAK,SAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,QAAA;IAAAT,MAAA,CAAAC,IAAA;MAAAQ,SAAAN,CAAA;QAAAM,QAAA,GAAAN,CAAA;MAAA;IAAA;IAAA,IAAAO,0BAAA;IAAAV,MAAA,CAAAC,IAAA;MAAAS,2BAAAP,CAAA;QAAAO,0BAAA,GAAAP,CAAA;MAAA;IAAA;IAAA,IAAAQ,cAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAU,eAAAR,CAAA;QAAAQ,cAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAS,oBAAA,WAAAA,oBAAA;IAUpEJ,SAAS,CAACK,GAAG,CACZ,6BAA6B,EAC7B,OAAOC,OAAO,EAAAC,IAAA,KAAc;MAAA,IAAZ;QAAEC;MAAI,CAAE,GAAAD,IAAA;MACvB;MACA,IAAIV,eAAe,CAACS,OAAO,CAAC,EAAE;QAC7B,OAAOA,OAAO;MACf;MAEA,IAAI,CAACL,QAAQ,CAACQ,GAAG,CAAC,aAAa,CAAC,EAAE;QACjC,OAAOH,OAAO;MACf;MAEA;MACA,IAAI,EAAEE,IAAI,CAACE,GAAG,IAAIF,IAAI,CAACb,CAAC,IAAIa,IAAI,CAACb,CAAC,CAACgB,KAAK,CAAC,EAAE;QAC1C,OAAOL,OAAO;MACf;MAEA;MACA,IAAIA,OAAO,CAACK,KAAK,EAAE;QAClB,OAAOL,OAAO;MACf;MAEA;MACA,IAAIA,OAAO,CAACM,CAAC,EAAE;QACd,OAAON,OAAO;MACf;MAEA,MAAM;QAAEO,GAAG;QAAEC,CAAC,EAAE;UAAEC,GAAG,EAAEC;QAAM,CAAE,GAAG;MAAE,CAAE,GAAGV,OAAO;MAChD,IAAIW,SAAS,GAAG;QAAEJ,GAAG;QAAEG;MAAM,CAAE;MAC/B,IAAIV,OAAO,CAACY,IAAI,EAAE;QACjBZ,OAAO,GAAAf,aAAA,CAAAA,aAAA,KAAS,MAAMW,0BAA0B,CAACI,OAAO,CAAC,GAAM;UAAEa,UAAU,EAAEb,OAAO,CAACa;QAAU,CAAE,CAAE;QACnG,MAAM;UAAEC;QAAU,CAAE,GAAGd,OAAO;QAC9BW,SAAS,GAAGI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEL,SAAS,EAAE;UAAEG;QAAU,CAAE,CAAC;MACzD;MAEA,IAAId,OAAO,CAACiB,QAAQ,EAAE;QACrB,MAAM;UAAEA;QAAQ,CAAE,GAAGjB,OAAO;QAC5BW,SAAS,GAAGI,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEL,SAAS,EAAE;UAAEM;QAAQ,CAAE,CAAC;MACvD;MACA,MAAMC,OAAO,GAAGvB,QAAQ,CAACQ,GAAG,CAAS,aAAa,CAAC;MAEnD,MAAMgB,UAAU,GAAG,MAAM7B,sBAAsB,CAAC8B,aAAa,CAACF,OAAO,CAAC;MAEtE,IAAI,CAACC,UAAU,EAAE;QAChBtB,cAAc,CAACwB,KAAK,CAAC,kDAAkD,CAAC;QACxE,OAAOrB,OAAO;MACf;MAEA,MAAMsB,aAAa,GAAuB;QAAEC,IAAI,EAAE/B,qBAAqB,CAACgC,GAAG;QAAEC,KAAK,EAAEP;MAAO,CAAE;MAC7F,MAAMQ,OAAO,GAAG,MAAMjC,gBAAgB,CAACkC,0BAA0B,CAChE;QAAEtB,KAAK,EAAEH,IAAI,CAACb,CAAC,CAACgB,KAAK;QAAEuB,YAAY,EAAE;UAAE,aAAa,EAAEN,aAAa,CAACC,IAAI;UAAE,cAAc,EAAED,aAAa,CAACG;QAAK;MAAE,CAAE,EACjH;QAAEI,UAAU,EAAE;UAAEC,KAAK,EAAE,CAAC;UAAEC,MAAM,EAAE;QAAC;MAAE,CAAE,CACvC;MAED,IAAI,EAACL,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEI,KAAK,KAAIJ,OAAO,CAACI,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QAClD,OAAOhC,OAAO;MACf;MACAsB,aAAa,CAACW,WAAW,GAAGP,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW;MAExD,IAAI,CAACR,OAAO,CAACK,MAAM,EAAE;QACpB,MAAMtC,gBAAgB,CAAC0C,aAAa,CAACT,OAAO,CAACjB,GAAG,EAAEa,aAAa,CAAC;MACjE;MAEA,IAAI;QACH,MAAMH,UAAU,CAACiB,IAAI,CAAClC,IAAI,CAACE,GAAG,CAACiC,IAAI,EAAEX,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,EAAElC,OAAO,CAACsC,GAAG,EAAE3B,SAAS,CAAC;QAC1Fd,cAAc,CAACwB,KAAK,wBAAAkB,MAAA,CAAwBb,OAAO,CAACI,KAAK,CAAC,CAAC,CAAC,CAACI,WAAW,WAAAK,MAAA,CAAQrB,OAAO,CAAE,CAAC;MAC3F,CAAC,CAAC,OAAOsB,CAAC,EAAE;QACX3C,cAAc,CAAC4C,KAAK,CAACD,CAAC,CAAC;MACxB;MAEA,OAAOxC,OAAO;IACf,CAAC,EACDN,SAAS,CAACgD,QAAQ,CAACC,GAAG,EACtB,kBAAkB,CAClB;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"01c47556b62093c5da3234745b93017053de23ba"}
