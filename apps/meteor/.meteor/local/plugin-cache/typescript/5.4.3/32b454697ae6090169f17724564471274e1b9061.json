{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/processRoomAbandonment.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/hooks/processRoomAbandonment.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/processRoomAbandonment.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/processRoomAbandonment.ts","sourceRoot":"","sources":["app/livechat/server/hooks/processRoomAbandonment.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom, IMessage, IBusinessHourWorkHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, LivechatDepartment, Messages, LivechatRooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport type { CloseRoomParams } from '../lib/localTypes';\n\nexport const getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\n\tmoment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n\nexport const parseDays = (\n\tacc: Record<string, { start: { day: string; time: string }; finish: { day: string; time: string }; open: boolean }>,\n\tday: IBusinessHourWorkHour,\n) => {\n\tacc[day.day] = {\n\t\tstart: { day: day.start.utc.dayOfWeek, time: day.start.utc.time },\n\t\tfinish: { day: day.finish.utc.dayOfWeek, time: day.finish.utc.time },\n\t\topen: day.open,\n\t};\n\treturn acc;\n};\n\nexport const getSecondsSinceLastAgentResponse = async (room: IOmnichannelRoom, agentLastMessage: IMessage) => {\n\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\tlet officeDays;\n\tconst department = room.departmentId\n\t\t? await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(room.departmentId, {\n\t\t\t\tprojection: { businessHourId: 1 },\n\t\t  })\n\t\t: null;\n\tif (department?.businessHourId) {\n\t\tconst businessHour = await LivechatBusinessHours.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t\t}\n\n\t\tofficeDays = (await businessHourManager.getBusinessHour(businessHour._id, businessHour.type))?.workHours.reduce(parseDays, {});\n\t} else {\n\t\tofficeDays = (await businessHourManager.getBusinessHour())?.workHours.reduce(parseDays, {});\n\t}\n\n\t// Empty object we assume invalid config\n\tif (!officeDays || !Object.keys(officeDays).length) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\n\tlet totalSeconds = 0;\n\tconst endOfConversation = moment.utc(new Date(room.closedAt || new Date()));\n\tconst startOfInactivity = moment.utc(new Date(agentLastMessage.ts));\n\tconst daysOfInactivity = endOfConversation.clone().startOf('day').diff(startOfInactivity.clone().startOf('day'), 'days');\n\tconst inactivityDay = moment.utc(new Date(agentLastMessage.ts));\n\n\tfor (let index = 0; index <= daysOfInactivity; index++) {\n\t\tconst today = inactivityDay.clone().format('dddd');\n\t\tconst officeDay = officeDays[today];\n\n\t\tif (!officeDay) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay.open) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay?.start?.time || !officeDay?.finish?.time) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [officeStartHour, officeStartMinute] = officeDay.start.time.split(':');\n\t\tconst [officeCloseHour, officeCloseMinute] = officeDay.finish.time.split(':');\n\t\t// We should only take in consideration the time where the office is open and the conversation was inactive\n\t\tconst todayStartOfficeHours = inactivityDay\n\t\t\t.clone()\n\t\t\t.set({ hour: parseInt(officeStartHour, 10), minute: parseInt(officeStartMinute, 10) });\n\t\tconst todayEndOfficeHours = inactivityDay.clone().set({ hour: parseInt(officeCloseHour, 10), minute: parseInt(officeCloseMinute, 10) });\n\n\t\t// 1: Room was inactive the whole day, we add the whole time BH is inactive\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 2: Room was inactive before start but was closed before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 3: Room was inactive after start and ended after end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\t// 4: Room was inactive after start and before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\tinactivityDay.add(1, 'days');\n\t}\n\treturn totalSeconds;\n};\n\nexport const onCloseRoom = async (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => {\n\tconst { room } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst closedByAgent = room.closer !== 'visitor';\n\tconst wasTheLastMessageSentByAgent = room.lastMessage && !room.lastMessage.token;\n\tif (!closedByAgent || !wasTheLastMessageSentByAgent) {\n\t\treturn params;\n\t}\n\n\tif (!room.v?.lastMessageTs) {\n\t\treturn params;\n\t}\n\n\tconst agentLastMessage = await Messages.findAgentLastMessageByVisitorLastMessageTs(room._id, room.v.lastMessageTs);\n\tif (!agentLastMessage) {\n\t\treturn params;\n\t}\n\tconst secondsSinceLastAgentResponse = await getSecondsSinceLastAgentResponse(room, agentLastMessage);\n\tawait LivechatRooms.setVisitorInactivityInSecondsById(room._id, secondsSinceLastAgentResponse);\n\n\treturn params;\n};\n\ncallbacks.add('livechat.closeRoom', onCloseRoom, callbacks.priority.HIGH, 'process-room-abandonment');\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/hooks/processRoomAbandonment.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/hooks/processRoomAbandonment.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/hooks/processRoomAbandonment.ts","sourceRoot":"","sources":["app/livechat/server/hooks/processRoomAbandonment.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelRoom, IMessage, IBusinessHourWorkHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, LivechatDepartment, Messages, LivechatRooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport type { CloseRoomParams } from '../lib/localTypes';\n\nexport const getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\n\tmoment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n\nexport const parseDays = (\n\tacc: Record<string, { start: { day: string; time: string }; finish: { day: string; time: string }; open: boolean }>,\n\tday: IBusinessHourWorkHour,\n) => {\n\tacc[day.day] = {\n\t\tstart: { day: day.start.utc.dayOfWeek, time: day.start.utc.time },\n\t\tfinish: { day: day.finish.utc.dayOfWeek, time: day.finish.utc.time },\n\t\topen: day.open,\n\t};\n\treturn acc;\n};\n\nexport const getSecondsSinceLastAgentResponse = async (room: IOmnichannelRoom, agentLastMessage: IMessage) => {\n\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\tlet officeDays;\n\tconst department = room.departmentId\n\t\t? await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(room.departmentId, {\n\t\t\t\tprojection: { businessHourId: 1 },\n\t\t  })\n\t\t: null;\n\tif (department?.businessHourId) {\n\t\tconst businessHour = await LivechatBusinessHours.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t\t}\n\n\t\tofficeDays = (await businessHourManager.getBusinessHour(businessHour._id, businessHour.type))?.workHours.reduce(parseDays, {});\n\t} else {\n\t\tofficeDays = (await businessHourManager.getBusinessHour())?.workHours.reduce(parseDays, {});\n\t}\n\n\t// Empty object we assume invalid config\n\tif (!officeDays || !Object.keys(officeDays).length) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\n\tlet totalSeconds = 0;\n\tconst endOfConversation = moment.utc(new Date(room.closedAt || new Date()));\n\tconst startOfInactivity = moment.utc(new Date(agentLastMessage.ts));\n\tconst daysOfInactivity = endOfConversation.clone().startOf('day').diff(startOfInactivity.clone().startOf('day'), 'days');\n\tconst inactivityDay = moment.utc(new Date(agentLastMessage.ts));\n\n\tfor (let index = 0; index <= daysOfInactivity; index++) {\n\t\tconst today = inactivityDay.clone().format('dddd');\n\t\tconst officeDay = officeDays[today];\n\n\t\tif (!officeDay) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay.open) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay?.start?.time || !officeDay?.finish?.time) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [officeStartHour, officeStartMinute] = officeDay.start.time.split(':');\n\t\tconst [officeCloseHour, officeCloseMinute] = officeDay.finish.time.split(':');\n\t\t// We should only take in consideration the time where the office is open and the conversation was inactive\n\t\tconst todayStartOfficeHours = inactivityDay\n\t\t\t.clone()\n\t\t\t.set({ hour: parseInt(officeStartHour, 10), minute: parseInt(officeStartMinute, 10) });\n\t\tconst todayEndOfficeHours = inactivityDay.clone().set({ hour: parseInt(officeCloseHour, 10), minute: parseInt(officeCloseMinute, 10) });\n\n\t\t// 1: Room was inactive the whole day, we add the whole time BH is inactive\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 2: Room was inactive before start but was closed before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 3: Room was inactive after start and ended after end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\t// 4: Room was inactive after start and before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\tinactivityDay.add(1, 'days');\n\t}\n\treturn totalSeconds;\n};\n\nexport const onCloseRoom = async (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => {\n\tconst { room } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst closedByAgent = room.closer !== 'visitor';\n\tconst wasTheLastMessageSentByAgent = room.lastMessage && !room.lastMessage.token;\n\tif (!closedByAgent || !wasTheLastMessageSentByAgent) {\n\t\treturn params;\n\t}\n\n\tif (!room.v?.lastMessageTs) {\n\t\treturn params;\n\t}\n\n\tconst agentLastMessage = await Messages.findAgentLastMessageByVisitorLastMessageTs(room._id, room.v.lastMessageTs);\n\tif (!agentLastMessage) {\n\t\treturn params;\n\t}\n\tconst secondsSinceLastAgentResponse = await getSecondsSinceLastAgentResponse(room, agentLastMessage);\n\tawait LivechatRooms.setVisitorInactivityInSecondsById(room._id, secondsSinceLastAgentResponse);\n\n\treturn params;\n};\n\ncallbacks.add('livechat.closeRoom', onCloseRoom, callbacks.priority.HIGH, 'process-room-abandonment');\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      getSecondsWhenOfficeHoursIsDisabled: () => getSecondsWhenOfficeHoursIsDisabled,\n      parseDays: () => parseDays,\n      getSecondsSinceLastAgentResponse: () => getSecondsSinceLastAgentResponse,\n      onCloseRoom: () => onCloseRoom\n    });\n    let isOmnichannelRoom;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      }\n    }, 0);\n    let LivechatBusinessHours, LivechatDepartment, Messages, LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatBusinessHours(v) {\n        LivechatBusinessHours = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let businessHourManager;\n    module.link(\"../business-hour\", {\n      businessHourManager(v) {\n        businessHourManager = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const getSecondsWhenOfficeHoursIsDisabled = (room, agentLastMessage) => moment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n    const parseDays = (acc, day) => {\n      acc[day.day] = {\n        start: {\n          day: day.start.utc.dayOfWeek,\n          time: day.start.utc.time\n        },\n        finish: {\n          day: day.finish.utc.dayOfWeek,\n          time: day.finish.utc.time\n        },\n        open: day.open\n      };\n      return acc;\n    };\n    const getSecondsSinceLastAgentResponse = async (room, agentLastMessage) => {\n      if (!settings.get('Livechat_enable_business_hours')) {\n        return getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n      }\n      let officeDays;\n      const department = room.departmentId ? await LivechatDepartment.findOneById(room.departmentId, {\n        projection: {\n          businessHourId: 1\n        }\n      }) : null;\n      if (department !== null && department !== void 0 && department.businessHourId) {\n        var _await$businessHourMa;\n        const businessHour = await LivechatBusinessHours.findOneById(department.businessHourId);\n        if (!businessHour) {\n          return getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n        }\n        officeDays = (_await$businessHourMa = await businessHourManager.getBusinessHour(businessHour._id, businessHour.type)) === null || _await$businessHourMa === void 0 ? void 0 : _await$businessHourMa.workHours.reduce(parseDays, {});\n      } else {\n        var _await$businessHourMa2;\n        officeDays = (_await$businessHourMa2 = await businessHourManager.getBusinessHour()) === null || _await$businessHourMa2 === void 0 ? void 0 : _await$businessHourMa2.workHours.reduce(parseDays, {});\n      }\n      // Empty object we assume invalid config\n      if (!officeDays || !Object.keys(officeDays).length) {\n        return getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n      }\n      let totalSeconds = 0;\n      const endOfConversation = moment.utc(new Date(room.closedAt || new Date()));\n      const startOfInactivity = moment.utc(new Date(agentLastMessage.ts));\n      const daysOfInactivity = endOfConversation.clone().startOf('day').diff(startOfInactivity.clone().startOf('day'), 'days');\n      const inactivityDay = moment.utc(new Date(agentLastMessage.ts));\n      for (let index = 0; index <= daysOfInactivity; index++) {\n        var _officeDay$start, _officeDay$finish;\n        const today = inactivityDay.clone().format('dddd');\n        const officeDay = officeDays[today];\n        if (!officeDay) {\n          inactivityDay.add(1, 'days');\n          continue;\n        }\n        if (!officeDay.open) {\n          inactivityDay.add(1, 'days');\n          continue;\n        }\n        if (!(officeDay !== null && officeDay !== void 0 && (_officeDay$start = officeDay.start) !== null && _officeDay$start !== void 0 && _officeDay$start.time) || !(officeDay !== null && officeDay !== void 0 && (_officeDay$finish = officeDay.finish) !== null && _officeDay$finish !== void 0 && _officeDay$finish.time)) {\n          inactivityDay.add(1, 'days');\n          continue;\n        }\n        const [officeStartHour, officeStartMinute] = officeDay.start.time.split(':');\n        const [officeCloseHour, officeCloseMinute] = officeDay.finish.time.split(':');\n        // We should only take in consideration the time where the office is open and the conversation was inactive\n        const todayStartOfficeHours = inactivityDay.clone().set({\n          hour: parseInt(officeStartHour, 10),\n          minute: parseInt(officeStartMinute, 10)\n        });\n        const todayEndOfficeHours = inactivityDay.clone().set({\n          hour: parseInt(officeCloseHour, 10),\n          minute: parseInt(officeCloseMinute, 10)\n        });\n        // 1: Room was inactive the whole day, we add the whole time BH is inactive\n        if (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n          totalSeconds += todayEndOfficeHours.diff(todayStartOfficeHours, 'seconds');\n        }\n        // 2: Room was inactive before start but was closed before end of BH, we add the inactive time\n        if (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n          totalSeconds += endOfConversation.diff(todayStartOfficeHours, 'seconds');\n        }\n        // 3: Room was inactive after start and ended after end of BH, we add the inactive time\n        if (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n          totalSeconds += todayEndOfficeHours.diff(startOfInactivity, 'seconds');\n        }\n        // 4: Room was inactive after start and before end of BH, we add the inactive time\n        if (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n          totalSeconds += endOfConversation.diff(startOfInactivity, 'seconds');\n        }\n        inactivityDay.add(1, 'days');\n      }\n      return totalSeconds;\n    };\n    const onCloseRoom = async params => {\n      var _room$v;\n      const {\n        room\n      } = params;\n      if (!isOmnichannelRoom(room)) {\n        return params;\n      }\n      const closedByAgent = room.closer !== 'visitor';\n      const wasTheLastMessageSentByAgent = room.lastMessage && !room.lastMessage.token;\n      if (!closedByAgent || !wasTheLastMessageSentByAgent) {\n        return params;\n      }\n      if (!((_room$v = room.v) !== null && _room$v !== void 0 && _room$v.lastMessageTs)) {\n        return params;\n      }\n      const agentLastMessage = await Messages.findAgentLastMessageByVisitorLastMessageTs(room._id, room.v.lastMessageTs);\n      if (!agentLastMessage) {\n        return params;\n      }\n      const secondsSinceLastAgentResponse = await getSecondsSinceLastAgentResponse(room, agentLastMessage);\n      await LivechatRooms.setVisitorInactivityInSecondsById(room._id, secondsSinceLastAgentResponse);\n      return params;\n    };\n    callbacks.add('livechat.closeRoom', onCloseRoom, callbacks.priority.HIGH, 'process-room-abandonment');\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","getSecondsWhenOfficeHoursIsDisabled","parseDays","getSecondsSinceLastAgentResponse","onCloseRoom","isOmnichannelRoom","link","v","LivechatBusinessHours","LivechatDepartment","Messages","LivechatRooms","moment","default","callbacks","settings","businessHourManager","__reifyWaitForDeps__","room","agentLastMessage","Date","closedAt","diff","ts","acc","day","start","utc","dayOfWeek","time","finish","open","get","officeDays","department","departmentId","findOneById","projection","businessHourId","_await$businessHourMa","businessHour","getBusinessHour","_id","type","workHours","reduce","_await$businessHourMa2","Object","keys","length","totalSeconds","endOfConversation","startOfInactivity","daysOfInactivity","clone","startOf","inactivityDay","index","_officeDay$start","_officeDay$finish","today","format","officeDay","add","officeStartHour","officeStartMinute","split","officeCloseHour","officeCloseMinute","todayStartOfficeHours","set","hour","parseInt","minute","todayEndOfficeHours","isBefore","isAfter","params","_room$v","closedByAgent","closer","wasTheLastMessageSentByAgent","lastMessage","token","lastMessageTs","findAgentLastMessageByVisitorLastMessageTs","secondsSinceLastAgentResponse","setVisitorInactivityInSecondsById","priority","HIGH","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/hooks/processRoomAbandonment.ts"],"sourcesContent":["import type { IOmnichannelRoom, IMessage, IBusinessHourWorkHour, ILivechatDepartment } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, LivechatDepartment, Messages, LivechatRooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { settings } from '../../../settings/server';\nimport { businessHourManager } from '../business-hour';\nimport type { CloseRoomParams } from '../lib/localTypes';\n\nexport const getSecondsWhenOfficeHoursIsDisabled = (room: IOmnichannelRoom, agentLastMessage: IMessage) =>\n\tmoment(new Date(room.closedAt || new Date())).diff(moment(new Date(agentLastMessage.ts)), 'seconds');\n\nexport const parseDays = (\n\tacc: Record<string, { start: { day: string; time: string }; finish: { day: string; time: string }; open: boolean }>,\n\tday: IBusinessHourWorkHour,\n) => {\n\tacc[day.day] = {\n\t\tstart: { day: day.start.utc.dayOfWeek, time: day.start.utc.time },\n\t\tfinish: { day: day.finish.utc.dayOfWeek, time: day.finish.utc.time },\n\t\topen: day.open,\n\t};\n\treturn acc;\n};\n\nexport const getSecondsSinceLastAgentResponse = async (room: IOmnichannelRoom, agentLastMessage: IMessage) => {\n\tif (!settings.get('Livechat_enable_business_hours')) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\tlet officeDays;\n\tconst department = room.departmentId\n\t\t? await LivechatDepartment.findOneById<Pick<ILivechatDepartment, 'businessHourId'>>(room.departmentId, {\n\t\t\t\tprojection: { businessHourId: 1 },\n\t\t  })\n\t\t: null;\n\tif (department?.businessHourId) {\n\t\tconst businessHour = await LivechatBusinessHours.findOneById(department.businessHourId);\n\t\tif (!businessHour) {\n\t\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t\t}\n\n\t\tofficeDays = (await businessHourManager.getBusinessHour(businessHour._id, businessHour.type))?.workHours.reduce(parseDays, {});\n\t} else {\n\t\tofficeDays = (await businessHourManager.getBusinessHour())?.workHours.reduce(parseDays, {});\n\t}\n\n\t// Empty object we assume invalid config\n\tif (!officeDays || !Object.keys(officeDays).length) {\n\t\treturn getSecondsWhenOfficeHoursIsDisabled(room, agentLastMessage);\n\t}\n\n\tlet totalSeconds = 0;\n\tconst endOfConversation = moment.utc(new Date(room.closedAt || new Date()));\n\tconst startOfInactivity = moment.utc(new Date(agentLastMessage.ts));\n\tconst daysOfInactivity = endOfConversation.clone().startOf('day').diff(startOfInactivity.clone().startOf('day'), 'days');\n\tconst inactivityDay = moment.utc(new Date(agentLastMessage.ts));\n\n\tfor (let index = 0; index <= daysOfInactivity; index++) {\n\t\tconst today = inactivityDay.clone().format('dddd');\n\t\tconst officeDay = officeDays[today];\n\n\t\tif (!officeDay) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay.open) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!officeDay?.start?.time || !officeDay?.finish?.time) {\n\t\t\tinactivityDay.add(1, 'days');\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [officeStartHour, officeStartMinute] = officeDay.start.time.split(':');\n\t\tconst [officeCloseHour, officeCloseMinute] = officeDay.finish.time.split(':');\n\t\t// We should only take in consideration the time where the office is open and the conversation was inactive\n\t\tconst todayStartOfficeHours = inactivityDay\n\t\t\t.clone()\n\t\t\t.set({ hour: parseInt(officeStartHour, 10), minute: parseInt(officeStartMinute, 10) });\n\t\tconst todayEndOfficeHours = inactivityDay.clone().set({ hour: parseInt(officeCloseHour, 10), minute: parseInt(officeCloseMinute, 10) });\n\n\t\t// 1: Room was inactive the whole day, we add the whole time BH is inactive\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 2: Room was inactive before start but was closed before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isBefore(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(todayStartOfficeHours, 'seconds');\n\t\t}\n\n\t\t// 3: Room was inactive after start and ended after end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isAfter(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += todayEndOfficeHours.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\t// 4: Room was inactive after start and before end of BH, we add the inactive time\n\t\tif (startOfInactivity.isAfter(todayStartOfficeHours) && endOfConversation.isBefore(todayEndOfficeHours)) {\n\t\t\ttotalSeconds += endOfConversation.diff(startOfInactivity, 'seconds');\n\t\t}\n\n\t\tinactivityDay.add(1, 'days');\n\t}\n\treturn totalSeconds;\n};\n\nexport const onCloseRoom = async (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => {\n\tconst { room } = params;\n\n\tif (!isOmnichannelRoom(room)) {\n\t\treturn params;\n\t}\n\n\tconst closedByAgent = room.closer !== 'visitor';\n\tconst wasTheLastMessageSentByAgent = room.lastMessage && !room.lastMessage.token;\n\tif (!closedByAgent || !wasTheLastMessageSentByAgent) {\n\t\treturn params;\n\t}\n\n\tif (!room.v?.lastMessageTs) {\n\t\treturn params;\n\t}\n\n\tconst agentLastMessage = await Messages.findAgentLastMessageByVisitorLastMessageTs(room._id, room.v.lastMessageTs);\n\tif (!agentLastMessage) {\n\t\treturn params;\n\t}\n\tconst secondsSinceLastAgentResponse = await getSecondsSinceLastAgentResponse(room, agentLastMessage);\n\tawait LivechatRooms.setVisitorInactivityInSecondsById(room._id, secondsSinceLastAgentResponse);\n\n\treturn params;\n};\n\ncallbacks.add('livechat.closeRoom', onCloseRoom, callbacks.priority.HIGH, 'process-room-abandonment');\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"32b454697ae6090169f17724564471274e1b9061"}
