{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/e2e/client/rocketchat.e2e.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,aAAa,CAAC;AACtC,OAAO,GAAG,MAAM,KAAK,CAAC;AAGtB,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAC;AAC1D,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEzC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EACN,QAAQ,EACR,aAAa,EACb,yBAAyB,EACzB,0BAA0B,EAC1B,UAAU,EACV,UAAU,EACV,cAAc,EACd,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,sBAAsB,GACtB,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,KAAK,OAAO,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,eAAe,EAAE,MAAM,qCAAqC,CAAC;AACtE,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,iBAAiB,EAAE,MAAM,6CAA6C,CAAC;AAChF,OAAO,EAAE,aAAa,EAAE,MAAM,yCAAyC,CAAC;AACxE,OAAO,qBAAqB,MAAM,iDAAiD,CAAC;AACpF,OAAO,oBAAoB,MAAM,gDAAgD,CAAC;AAClF,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAC3E,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,GAAG,EAAE,MAAM,kCAAkC,CAAC;AACvD,OAAO,EAAE,CAAC,EAAE,MAAM,sBAAsB,CAAC;AAEzC,OAAO,UAAU,CAAC;AAElB,IAAI,iBAAiB,GAAG,KAAK,CAAC;AAO9B,MAAM,sBAAsB,GAAG,EAAE,CAAC;AAClC,MAAM,mBAAmB,GAAG,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;AAErD,MAAM,GAAI,SAAQ,OAAO;IAChB,OAAO,CAAU;IAEjB,iBAAiB,CAAgC;IAEjD,aAAa,CAA4B;IAEzC,cAAc,CAA4B;IAE3C,UAAU,CAAwB;IAElC,SAAS,CAAqB;IAE7B,uBAAuB,CAAwC;IAE/D,KAAK,CAAY;IAEjB,UAAU,CAAqC;IAEvD;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAE5B,IAAI,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE;YACzD,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,OAAO,SAAS,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE;YACnC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,EAAE;YAChC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,EAAE;YACnC,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE;YAC7B,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAED,GAAG,CAAC,GAAG,GAAc;QACpB,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,GAAG,GAAc;QACtB,QAAQ,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,SAAS;QACR,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,QAAQ,CAAC;IAC1C,CAAC;IAED,OAAO;QACN,mBAAmB,CAAC,MAAM,EAAE,CAAC;QAE7B,qDAAqD;QACrD,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,aAAa,CAAC;IACjF,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAChC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,MAAM,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACjC,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QACzC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,GAAkB;QAC7C,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;YACnC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrC,OAAO;QACR,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO;QACR,CAAC;QAED,IAAI,GAAG,CAAC,eAAe,EAAE,CAAC;YACzB,IAAI,MAAM,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC;gBACvD,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACvC,OAAO,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACP,OAAO,CAAC,IAAI,CAAC,oCAAoC,EAAE,GAAG,CAAC,eAAe,CAAC,CAAC;gBACxE,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACxC,CAAC;QACF,CAAC;QAED,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAEnD,2CAA2C;QAC3C,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACzC,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO;QACR,CAAC;QAED,IAAI,GAAG,CAAC,MAAM,IAAI,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;YAC3C,OAAO,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO;QACR,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YACxB,OAAO;QACR,CAAC;QAED,MAAM,OAAO,CAAC,mBAAmB,EAAE,CAAC;IACrC,CAAC;IAED,oBAAoB;QACnB,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC;YAC9C,OAAO,EAAE,CAAC,GAAkB,EAAE,EAAE;gBAC/B,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,CAAC;YACD,KAAK,EAAE,CAAC,GAAkB,EAAE,EAAE;gBAC7B,UAAU,CAAC,KAAK,IAAI,EAAE;oBACrB,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;oBACpC,IAAI,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;wBACnC,OAAO;oBACR,CAAC;oBACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAC1C,CAAC,EAAE,CAAC,CAAC,CAAC;YACP,CAAC;YACD,OAAO,EAAE,CAAC,GAAkB,EAAE,EAAE;gBAC/B,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;gBACtC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtC,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;IAED,wBAAwB;QACvB,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACvD,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC,WAAW,CAAC;IAC5C,CAAC;IAED,QAAQ,CAAC,SAAoB;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAE7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAEvB,mBAAmB,CAAC,OAAO,EAAE,CAAC;QAE9B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QAEzD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,2BAA2B;QAChC,MAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QAChF,MAAM,OAAO,CAAC,GAAG,CAChB,IAAI;aACF,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,eAAe,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;aACnD,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAClB,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEvD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,OAAO;YACR,CAAC;YAED,IAAI,MAAM,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC;gBACvD,IAAI,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;gBAC7C,MAAM,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACtC,OAAO,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,eAAe,CAAC,CAAC;gBACtE,MAAM,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACvC,CAAC;YAED,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACpD,CAAC,CAAC,CACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,GAAiB;QAC1C,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAEvE,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACb,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC;QAED,yFAAyF;QACzF,IACC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,SAAS;YAC/C,IAAI,CAAC,QAAQ,KAAK,SAAS;YAC3B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EAClD,CAAC;YACF,wFAAwF;YACxF,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,sBAAsB,CAAC,GAAiB;QACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAEO,KAAK,CAAC,WAAW,CACxB,EAAE,UAAU,EAAE,WAAW,EAAW,EACpC,QAAgB,EAChB,EAAE,KAAK,KAAyB,EAAE,KAAK,EAAE,KAAK,EAAE;QAEhD,IAAI,OAAO,UAAU,KAAK,QAAQ,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE,CAAC;YACvE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAE7E,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACxB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE;YAC1D,UAAU;YACV,WAAW,EAAE,iBAAiB;YAC9B,KAAK;SACL,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,GAAW;QACnC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE;YACtD,GAAG;SACH,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,GAAW;QACnC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,iCAAiC,EAAE;YACtD,GAAG;SACH,CAAC,CAAC;IACJ,CAAC;IAED,uBAAuB;QACtB,OAAO;YACN,UAAU,EAAE,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,CAAC;YAC1D,WAAW,EAAE,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC;SAC5D,CAAC;IACH,CAAC;IAED,iBAAiB;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED,yBAAyB,CAAC,cAAsB;QAC/C,eAAe,CAAC,IAAI,CAAC;YACpB,SAAS,EAAE,oBAAoB;YAC/B,KAAK,EAAE;gBACN,cAAc;gBACd,OAAO,EAAE,eAAe,CAAC,KAAK;gBAC9B,QAAQ,EAAE,GAAG,EAAE;oBACd,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,eAAe,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;gBACD,SAAS,EAAE,GAAG,EAAE;oBACf,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;oBAC1D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;oBAC/B,oBAAoB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC;oBACvF,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,eAAe,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;aACD;SACD,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO;QACR,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QAEnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEjE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5B,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC;QACjC,CAAC;QAED,IAAI,IAAI,CAAC,wBAAwB,EAAE,EAAE,CAAC;YACrC,IAAI,CAAC;gBACJ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACxC,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAwB,CAAC,CAAC;YAC1E,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,iBAAiB,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC;oBACd,KAAK,EAAE,+DAA+D,EAAE,4BAA4B;oBACpG,IAAI,EAAE,2EAA2E,EAAE,4BAA4B;oBAC/G,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;oBAC9B,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,KAAK;oBACX,MAAM,EAAE,KAAK,IAAI,EAAE;wBAClB,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;wBACzB,IAAI,CAAC,UAAU,EAAE,CAAC;oBACnB,CAAC;iBACD,CAAC,CAAC;gBACH,OAAO;YACR,CAAC;QACF,CAAC;QAED,IAAI,UAAU,IAAI,WAAW,EAAE,CAAC;YAC/B,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACP,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACtC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC3F,CAAC;QAED,MAAM,cAAc,GAAG,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC9E,IAAI,cAAc,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC;gBACd,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,+BAA+B,CAAC;gBAC/C,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,2CAA2C,CAAC;gBAC1D,SAAS,EAAE,CAAC,OAAO,CAAC;gBACpB,QAAQ,EAAE,KAAK;gBACf,IAAI,EAAE,KAAK;gBACX,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC;aAC5D,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED,KAAK,CAAC,UAAU;QACf,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAClD,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACnD,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,uBAAuB,IAAI,aAAa,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC5E,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,WAAmB;QACvC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAErF,IAAI,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC;YAC5D,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;QACrE,CAAC;IACF,CAAC;IAED,KAAK,CAAC,cAAc;QACnB,IAAI,CAAC;YACJ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACtC,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAE9E,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC;YAChC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC;QACnC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;YAC/C,8DAA8D;YAC9D,oDAAoD;YACpD,MAAM,KAAK,CAAC;QACb,CAAC;IACF,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,WAAW,EAA+C;QACtF,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAE5B,IAAI,CAAC;YACJ,IAAI,CAAC,UAAU,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YAE5E,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAC9D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;IACF,CAAC;IAED,KAAK,CAAC,iBAAiB;QACtB,uDAAuD;QACvD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACtC,IAAI,GAAG,CAAC;QACR,IAAI,CAAC;YACJ,GAAG,GAAG,MAAM,cAAc,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;QAClC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAC3C,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QAC3E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAEtD,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC5B,MAAM,GAAG,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,oBAAoB;QACzB,MAAM,cAAc,GAAG,MAAM,sBAAsB,CAAC,CAAC,CAAC,CAAC;QACvD,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;QACvE,OAAO,cAAc,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB,EAAE,QAAgB;QAC1D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAEpD,MAAM,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC;YACJ,MAAM,iBAAiB,GAAG,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;YAEzF,OAAO,KAAK,CAAC,SAAS,CAAC,yBAAyB,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC9E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC;IACF,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAAgB;QAClC,IAAI,QAAQ,IAAI,IAAI,EAAE,CAAC;YACtB,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACxC,CAAC;QAED,uDAAuD;QACvD,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC;YACJ,OAAO,GAAG,MAAM,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QACvD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,+CAA+C,EAAE,KAAK,CAAC,CAAC;QAC3E,CAAC;QAED,iCAAiC;QACjC,IAAI,CAAC;YACJ,OAAO,MAAM,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;QACjE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;IACF,CAAC;IAED,0BAA0B,CAAC,mBAAgD;QAC1E,eAAe,CAAC,IAAI,CAAC;YACpB,SAAS,EAAE,qBAAqB;YAChC,KAAK,EAAE;gBACN,OAAO,EAAE,eAAe,CAAC,KAAK;gBAC9B,QAAQ,EAAE,GAAG,EAAE;oBACd,iBAAiB,GAAG,KAAK,CAAC;oBAC1B,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;oBACxF,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,eAAe,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;gBACD,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE;oBACvB,mBAAmB,EAAE,CAAC,QAAQ,CAAC,CAAC;oBAChC,IAAI,CAAC,UAAU,EAAE,CAAC;oBAClB,eAAe,CAAC,KAAK,EAAE,CAAC;gBACzB,CAAC;aACD;SACD,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,oBAAoB;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC9B,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEzF,MAAM,SAAS,GAAG,GAAG,EAAE;gBACtB,IAAI,CAAC,SAAS,CAAC;oBACd,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC;oBACzC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,8CAA8C,CAAC;oBAC7D,SAAS,EAAE,CAAC,OAAO,CAAC;oBACpB,QAAQ,EAAE,KAAK;oBACf,IAAI,EAAE,KAAK;oBACX,MAAM;wBACL,SAAS,EAAE,CAAC;oBACb,CAAC;iBACD,CAAC,CAAC;YACJ,CAAC,CAAC;YAEF,IAAI,iBAAiB,EAAE,CAAC;gBACvB,SAAS,EAAE,CAAC;YACb,CAAC;iBAAM,CAAC;gBACP,SAAS,EAAE,CAAC;YACb,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,oBAAoB;QACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC;IAED,KAAK,CAAC,oBAAoB;QACzB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACnD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAEpD,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1B,OAAO;QACR,CAAC;QAED,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QAE1F,IAAI,CAAC;YACJ,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAChE,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAW,CAAC;YAE/C,IAAI,IAAI,CAAC,aAAa,IAAI,UAAU,EAAE,CAAC;gBACtC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,CAAC,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,CAAC;gBACjF,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;iBAAM,CAAC;gBACP,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC/B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC;YACD,oBAAoB,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC;QACxF,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACxC,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAC;YACvF,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;YACxF,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACxD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,UAAkB;QACxC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAEnD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAEpD,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QAEjF,IAAI,CAAC;YACJ,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAChE,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACxC,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAC;YACvF,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,mCAAmC,CAAC,EAAE,CAAC,CAAC;YACxF,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACxD,CAAC;IACF,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,IAAqB;QAC7C,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEzD,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO,IAAI,CAAC;QACb,CAAC;QAED,OAAO,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,OAAgC;QACpD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;YACvD,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,gBAAgB,GAAiB,MAAM,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE7E,MAAM,yBAAyB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QAEpF,OAAO,yBAAyB,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAiB;QAC3C,MAAM,aAAa,GAAG,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;QAEtD,IAAI,CAAC,aAAa,EAAE,CAAC;YACpB,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAE5D,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAElD,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,MAAM,sBAAsB,GAAG,EAAE,GAAG,OAAO,EAAqD,CAAC;QACjG,sBAAsB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvD,OAAO,sBAAsB,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAY,EAAE,EAAE;YAC9F,QAAQ,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,GAAmB,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,cAAoC;QAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAC/D,IAAI,CAAC,GAAG,CAAC,wBAAwB,EAAE,cAAc,CAAC,CAAC;QACnD,MAAM,OAAO,EAAE,mBAAmB,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,oBAAoB;QACzB,aAAa,CAAC,IAAI,CAAC;YAClB,SAAS,EAAE,IAAI;SACf,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,SAAS,CAAC,MAAuC;QAChD,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,UAAU;QACT,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAqB;QAC/C,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;YACnB,OAAO,OAAO,CAAC;QAChB,CAAC;QACD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,IAAI,EAAE,CAAC;QAE3D,MAAM,OAAO,CAAC,GAAG,CAChB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACtB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;gBAC7C,OAAO;YACR,CAAC;YAED,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,wEAAwE;YACxE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACnB,OAAO;YACR,CAAC;YAED,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpC,OAAO;YACR,CAAC;YAED,MAAM,gBAAgB,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC9E,MAAM,aAAa,GAAG,gBAAgB,EAAE,OAAO,CAAC;YAEhD,IAAI,CAAC,aAAa,EAAE,CAAC;gBACpB,OAAO;YACR,CAAC;YAED,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;YAE1F,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC;YAEhD,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACrD,MAAM,eAAe,GAAG,qBAAqB,CAC5C,qBAAqB,EACrB,GAAG,EACH,WAAW,EACX,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAW,CAClE,CAAC;YAEF,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3C,CAAC,CAAC,CACF,CAAC;QAEF,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,sBAAyF;QACnH,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACpD,OAAO,MAAM,CAAC,WAAW,CACxB,CACC,MAAM,OAAO,CAAC,GAAG,CAChB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAC1B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAErD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,OAAO;YACR,CAAC;YACD,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,+CAA+C,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;YAElH,IAAI,CAAC,aAAa,EAAE,CAAC;gBACpB,OAAO;YACR,CAAC;YAED,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAC9B,CAAC,CAAC,CACF,CACD,CAAC,MAAM,CAAC,QAAQ,CAAC,CAClB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAiB,EAAE,KAAK,GAAG,CAAC;QAC3C,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YACjB,OAAO,EAAE,CAAC;QACX,CAAC;QAED,MAAM,aAAa,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,sBAAsB,CAAC,CAAC;QAEpE,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAI,KAAK,EAAE,MAAM,MAAM,IAAI,aAAa,EAAE,CAAC;YAC1C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACvD,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE,CAAC;gBAC/B,SAAS;YACV,CAAC;YAED,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAC3C,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC5B,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAClC,OAAO;QACR,CAAC;QAED,MAAM,eAAe,GAAG,KAAK,IAAI,EAAE;YAClC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC7B,wBAAwB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;gBAC3C,+BAA+B,EAAE,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,EAAE;aACzD,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACrB,OAAO;YACR,CAAC;YAED,8EAA8E;YAC9E,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAEhD,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBACvB,OAAO;YACR,CAAC;YAED,MAAM,EAAE,sBAAsB,GAAG,EAAE,EAAE,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,sCAAsC,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;YAE3H,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,MAAM,EAAE,CAAC;gBACjD,OAAO;YACR,CAAC;YAED,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;YAElF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,EAAE,CAAC;gBAC5C,OAAO;YACR,CAAC;YAED,IAAI,CAAC;gBACJ,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,wCAAwC,EAAE,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,CAAC,CAAC;YAC/G,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,sCAAsC,EAAE,KAAK,CAAC,CAAC;YAClE,CAAC;QACF,CAAC,CAAC;QAEF,iEAAiE;QACjE,MAAM,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,uBAAuB,GAAG,WAAW,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;CACD;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC","sourcesContent":["import QueryString from 'querystring';\nimport URL from 'url';\n\nimport type { IE2EEMessage, IMessage, IRoom, ISubscription, IUser, IUploadWithUser, MessageAttachment } from '@rocket.chat/core-typings';\nimport { isE2EEMessage } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\nimport _ from 'lodash';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport { E2EEState } from './E2EEState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptAES,\n\tdecryptAES,\n\tgenerateRSAKey,\n\texportJWKKey,\n\timportRSAKey,\n\timportRawKey,\n\tderiveKey,\n\tgenerateMnemonicPhrase,\n} from './helper';\nimport { log, logError } from './logger';\nimport { E2ERoom } from './rocketchat.e2e.room';\nimport * as banners from '../../../client/lib/banners';\nimport type { LegacyBannerPayload } from '../../../client/lib/banners';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { mapMessageFromApi } from '../../../client/lib/utils/mapMessageFromApi';\nimport { waitUntilFind } from '../../../client/lib/utils/waitUntilFind';\nimport EnterE2EPasswordModal from '../../../client/views/e2e/EnterE2EPasswordModal';\nimport SaveE2EPasswordModal from '../../../client/views/e2e/SaveE2EPasswordModal';\nimport { createQuoteAttachment } from '../../../lib/createQuoteAttachment';\nimport { getMessageUrlRegex } from '../../../lib/getMessageUrlRegex';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { settings } from '../../settings/client';\nimport { getUserAvatarURL } from '../../utils/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nimport './events';\n\nlet failedToDecodeKey = false;\n\ntype KeyPair = {\n\tpublic_key: string | null;\n\tprivate_key: string | null;\n};\n\nconst ROOM_KEY_EXCHANGE_SIZE = 10;\nconst E2EEStateDependency = new Tracker.Dependency();\n\nclass E2E extends Emitter {\n\tprivate started: boolean;\n\n\tprivate instancesByRoomId: Record<IRoom['_id'], E2ERoom>;\n\n\tprivate db_public_key: string | null | undefined;\n\n\tprivate db_private_key: string | null | undefined;\n\n\tpublic privateKey: CryptoKey | undefined;\n\n\tpublic publicKey: string | undefined;\n\n\tprivate keyDistributionInterval: ReturnType<typeof setInterval> | null;\n\n\tprivate state: E2EEState;\n\n\tprivate observable: Meteor.LiveQueryHandle | undefined;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.started = false;\n\t\tthis.instancesByRoomId = {};\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.observable = undefined;\n\n\t\tthis.on('E2E_STATE_CHANGED', ({ prevState, nextState }) => {\n\t\t\tthis.log(`${prevState} -> ${nextState}`);\n\t\t});\n\n\t\tthis.on(E2EEState.READY, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.SAVE_PASSWORD, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.DISABLED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.NOT_STARTED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.ERROR, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.setState(E2EEState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog('E2E', ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError('E2E', ...msg);\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.state !== E2EEState.DISABLED;\n\t}\n\n\tisReady(): boolean {\n\t\tE2EEStateDependency.depend();\n\n\t\t// Save_Password state is also a ready state for E2EE\n\t\treturn this.state === E2EEState.READY || this.state === E2EEState.SAVE_PASSWORD;\n\t}\n\n\tasync onE2EEReady() {\n\t\tthis.log('startClient -> Done');\n\t\tthis.initiateHandshake();\n\t\tawait this.handleAsyncE2EESuggestedKey();\n\t\tthis.log('decryptSubscriptions');\n\t\tawait this.decryptSubscriptions();\n\t\tthis.log('decryptSubscriptions -> Done');\n\t\tawait this.initiateKeyDistribution();\n\t\tthis.log('initiateKeyDistribution -> Done');\n\t\tthis.observeSubscriptions();\n\t\tthis.log('observing subscriptions');\n\t}\n\n\tasync onSubscriptionChanged(sub: ISubscription) {\n\t\tthis.log('Subscription changed', sub);\n\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\treturn;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(sub.rid);\n\t\tif (!e2eRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2ESuggestedKey) {\n\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\tawait this.acceptSuggestedKey(sub.rid);\n\t\t\t\te2eRoom.keyReceived();\n\t\t\t} else {\n\t\t\t\tconsole.warn('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\tawait this.rejectSuggestedKey(sub.rid);\n\t\t\t}\n\t\t}\n\n\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\n\t\t// Cover private groups and direct messages\n\t\tif (!e2eRoom.isSupportedRoomType(sub.t)) {\n\t\t\te2eRoom.disable();\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2EKey && e2eRoom.isWaitingKeys()) {\n\t\t\te2eRoom.keyReceived();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!e2eRoom.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait e2eRoom.decryptSubscription();\n\t}\n\n\tobserveSubscriptions() {\n\t\tthis.observable?.stop();\n\n\t\tthis.observable = Subscriptions.find().observe({\n\t\t\tchanged: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(() => this.onSubscriptionChanged(sub), 0);\n\t\t\t},\n\t\t\tadded: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tthis.log('Subscription added', sub);\n\t\t\t\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getInstanceByRoomId(sub.rid);\n\t\t\t\t}, 0);\n\t\t\t},\n\t\t\tremoved: (sub: ISubscription) => {\n\t\t\t\tthis.log('Subscription removed', sub);\n\t\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\t},\n\t\t});\n\t}\n\n\tshouldAskForE2EEPassword() {\n\t\tconst { private_key } = this.getKeysFromLocalStorage();\n\t\treturn this.db_private_key && !private_key;\n\t}\n\n\tsetState(nextState: E2EEState) {\n\t\tconst prevState = this.state;\n\n\t\tthis.state = nextState;\n\n\t\tE2EEStateDependency.changed();\n\n\t\tthis.emit('E2E_STATE_CHANGED', { prevState, nextState });\n\n\t\tthis.emit(nextState);\n\t}\n\n\tasync handleAsyncE2EESuggestedKey() {\n\t\tconst subs = Subscriptions.find({ E2ESuggestedKey: { $exists: true } }).fetch();\n\t\tawait Promise.all(\n\t\t\tsubs\n\t\t\t\t.filter((sub) => sub.E2ESuggestedKey && !sub.E2EKey)\n\t\t\t\t.map(async (sub) => {\n\t\t\t\t\tconst e2eRoom = await e2e.getInstanceByRoomId(sub.rid);\n\n\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\t\t\tthis.log('Imported valid E2E suggested key');\n\t\t\t\t\t\tawait e2e.acceptSuggestedKey(sub.rid);\n\t\t\t\t\t\te2eRoom.keyReceived();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.error('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\t\t\tawait e2e.rejectSuggestedKey(sub.rid);\n\t\t\t\t\t}\n\n\t\t\t\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tasync getInstanceByRoomId(rid: IRoom['_id']): Promise<E2ERoom | null> {\n\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\n\n\t\tif (room.t !== 'd' && room.t !== 'p') {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!room.encrypted) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.instancesByRoomId[rid]) {\n\t\t\tthis.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), room);\n\t\t}\n\n\t\t// When the key was already set and is changed via an update, we update the room instance\n\t\tif (\n\t\t\tthis.instancesByRoomId[rid].keyID !== undefined &&\n\t\t\troom.e2eKeyId !== undefined &&\n\t\t\tthis.instancesByRoomId[rid].keyID !== room.e2eKeyId\n\t\t) {\n\t\t\t// KeyID was changed, update instance with new keyID and put room in waiting keys status\n\t\t\tthis.instancesByRoomId[rid].onRoomKeyReset(room.e2eKeyId);\n\t\t}\n\n\t\treturn this.instancesByRoomId[rid];\n\t}\n\n\tremoveInstanceByRoomId(rid: IRoom['_id']): void {\n\t\tdelete this.instancesByRoomId[rid];\n\t}\n\n\tprivate async persistKeys(\n\t\t{ public_key, private_key }: KeyPair,\n\t\tpassword: string,\n\t\t{ force }: { force: boolean } = { force: false },\n\t): Promise<void> {\n\t\tif (typeof public_key !== 'string' || typeof private_key !== 'string') {\n\t\t\tthrow new Error('Failed to persist keys as they are not strings.');\n\t\t}\n\n\t\tconst encodedPrivateKey = await this.encodePrivateKey(private_key, password);\n\n\t\tif (!encodedPrivateKey) {\n\t\t\tthrow new Error('Failed to encode private key with provided password.');\n\t\t}\n\n\t\tawait sdk.rest.post('/v1/e2e.setUserPublicAndPrivateKeys', {\n\t\t\tpublic_key,\n\t\t\tprivate_key: encodedPrivateKey,\n\t\t\tforce,\n\t\t});\n\t}\n\n\tasync acceptSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.acceptSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tasync rejectSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.rejectSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tgetKeysFromLocalStorage(): KeyPair {\n\t\treturn {\n\t\t\tpublic_key: Accounts.storageLocation.getItem('public_key'),\n\t\t\tprivate_key: Accounts.storageLocation.getItem('private_key'),\n\t\t};\n\t}\n\n\tinitiateHandshake() {\n\t\tObject.keys(this.instancesByRoomId).map((key) => this.instancesByRoomId[key].handshake());\n\t}\n\n\topenSaveE2EEPasswordModal(randomPassword: string) {\n\t\timperativeModal.open({\n\t\t\tcomponent: SaveE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\trandomPassword,\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: () => {\n\t\t\t\t\tAccounts.storageLocation.removeItem('e2e.randomPassword');\n\t\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync startClient(): Promise<void> {\n\t\tif (this.started) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log('startClient -> STARTED');\n\n\t\tthis.started = true;\n\n\t\tlet { public_key, private_key } = this.getKeysFromLocalStorage();\n\n\t\tawait this.loadKeysFromDB();\n\n\t\tif (!public_key && this.db_public_key) {\n\t\t\tpublic_key = this.db_public_key;\n\t\t}\n\n\t\tif (this.shouldAskForE2EEPassword()) {\n\t\t\ttry {\n\t\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\t\tprivate_key = await this.decodePrivateKey(this.db_private_key as string);\n\t\t\t} catch (error) {\n\t\t\t\tthis.started = false;\n\t\t\t\tfailedToDecodeKey = true;\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: \"Wasn't possible to decode your encryption key to be imported.\", // TODO: missing translation\n\t\t\t\t\thtml: '<div>Your encryption password seems wrong. Click here to try again.</div>', // TODO: missing translation\n\t\t\t\t\tmodifiers: ['large', 'danger'],\n\t\t\t\t\tclosable: true,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction: async () => {\n\t\t\t\t\t\tawait this.startClient();\n\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (public_key && private_key) {\n\t\t\tawait this.loadKeys({ public_key, private_key });\n\t\t\tthis.setState(E2EEState.READY);\n\t\t} else {\n\t\t\tawait this.createAndLoadKeys();\n\t\t\tthis.setState(E2EEState.READY);\n\t\t}\n\n\t\tif (!this.db_public_key || !this.db_private_key) {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), await this.createRandomPassword());\n\t\t}\n\n\t\tconst randomPassword = Accounts.storageLocation.getItem('e2e.randomPassword');\n\t\tif (randomPassword) {\n\t\t\tthis.setState(E2EEState.SAVE_PASSWORD);\n\t\t\tthis.openAlert({\n\t\t\t\ttitle: () => t('Save_your_encryption_password'),\n\t\t\t\thtml: () => t('Click_here_to_view_and_copy_your_password'),\n\t\t\t\tmodifiers: ['large'],\n\t\t\t\tclosable: false,\n\t\t\t\ticon: 'key',\n\t\t\t\taction: () => this.openSaveE2EEPasswordModal(randomPassword),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync stopClient(): Promise<void> {\n\t\tthis.log('-> Stop Client');\n\t\tthis.closeAlert();\n\n\t\tAccounts.storageLocation.removeItem('public_key');\n\t\tAccounts.storageLocation.removeItem('private_key');\n\t\tthis.instancesByRoomId = {};\n\t\tthis.privateKey = undefined;\n\t\tthis.publicKey = undefined;\n\t\tthis.started = false;\n\t\tthis.keyDistributionInterval && clearInterval(this.keyDistributionInterval);\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.setState(E2EEState.DISABLED);\n\t}\n\n\tasync changePassword(newPassword: string): Promise<void> {\n\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), newPassword, { force: true });\n\n\t\tif (Accounts.storageLocation.getItem('e2e.randomPassword')) {\n\t\t\tAccounts.storageLocation.setItem('e2e.randomPassword', newPassword);\n\t\t}\n\t}\n\n\tasync loadKeysFromDB(): Promise<void> {\n\t\ttry {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tconst { public_key, private_key } = await sdk.rest.get('/v1/e2e.fetchMyKeys');\n\n\t\t\tthis.db_public_key = public_key;\n\t\t\tthis.db_private_key = private_key;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\tthis.error('Error fetching RSA keys: ', error);\n\t\t\t// Stop any process since we can't communicate with the server\n\t\t\t// to get the keys. This prevents new key generation\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync loadKeys({ public_key, private_key }: { public_key: string; private_key: string }): Promise<void> {\n\t\tAccounts.storageLocation.setItem('public_key', public_key);\n\t\tthis.publicKey = public_key;\n\n\t\ttry {\n\t\t\tthis.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', private_key);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error importing private key: ', error);\n\t\t}\n\t}\n\n\tasync createAndLoadKeys(): Promise<void> {\n\t\t// Could not obtain public-private keypair from server.\n\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\tlet key;\n\t\ttry {\n\t\t\tkey = await generateRSAKey();\n\t\t\tthis.privateKey = key.privateKey;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error generating key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst publicKey = await exportJWKKey(key.publicKey);\n\n\t\t\tthis.publicKey = JSON.stringify(publicKey);\n\t\t\tAccounts.storageLocation.setItem('public_key', JSON.stringify(publicKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting public key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst privateKey = await exportJWKKey(key.privateKey);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', JSON.stringify(privateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting private key: ', error);\n\t\t}\n\n\t\tawait this.requestSubscriptionKeys();\n\t}\n\n\tasync requestSubscriptionKeys(): Promise<void> {\n\t\tawait sdk.call('e2e.requestSubscriptionKeys');\n\t}\n\n\tasync createRandomPassword(): Promise<string> {\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tAccounts.storageLocation.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(privateKey: string, password: string): Promise<string | void> {\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error encrypting encodedPrivateKey: ', error);\n\t\t}\n\t}\n\n\tasync getMasterKey(password: string): Promise<void | CryptoKey> {\n\t\tif (password == null) {\n\t\t\talert('You should provide a password');\n\t\t}\n\n\t\t// First, create a PBKDF2 \"key\" containing the password\n\t\tlet baseKey;\n\t\ttry {\n\t\t\tbaseKey = await importRawKey(toArrayBuffer(password));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error creating a key based on user password: ', error);\n\t\t}\n\n\t\t// Derive a key from the password\n\t\ttry {\n\t\t\treturn await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error deriving baseKey: ', error);\n\t\t}\n\t}\n\n\topenEnterE2EEPasswordModal(onEnterE2EEPassword?: (password: string) => void) {\n\t\timperativeModal.open({\n\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\tonEnterE2EEPassword?.(password);\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync requestPasswordAlert(): Promise<string> {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst showModal = () => this.openEnterE2EEPasswordModal((password) => resolve(password));\n\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: () => t('Enter_your_E2E_password'),\n\t\t\t\t\thtml: () => t('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {\n\t\t\t\tshowAlert();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync requestPasswordModal(): Promise<string> {\n\t\treturn new Promise((resolve) => this.openEnterE2EEPasswordModal((password) => resolve(password)));\n\t}\n\n\tasync decodePrivateKeyFlow() {\n\t\tconst password = await this.requestPasswordModal();\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tif (!this.db_private_key) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(this.db_private_key));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\tconst privateKey = toString(privKey) as string;\n\n\t\t\tif (this.db_public_key && privateKey) {\n\t\t\t\tawait this.loadKeys({ public_key: this.db_public_key, private_key: privateKey });\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t} else {\n\t\t\t\tawait this.createAndLoadKeys();\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t}\n\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decodePrivateKey(privateKey: string): Promise<string> {\n\t\tconst password = await this.requestPasswordAlert();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decryptFileContent(file: IUploadWithUser): Promise<IUploadWithUser> {\n\t\tif (!file.rid) {\n\t\t\treturn file;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(file.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn file;\n\t\t}\n\n\t\treturn e2eRoom.decryptContent(file);\n\t}\n\n\tasync decryptMessage(message: IMessage | IE2EEMessage): Promise<IMessage> {\n\t\tif (!isE2EEMessage(message) || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedMessage: IE2EEMessage = await e2eRoom.decryptMessage(message);\n\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\n\t\treturn decryptedMessageWithQuote;\n\t}\n\n\tasync decryptPinnedMessage(message: IMessage) {\n\t\tconst pinnedMessage = message?.attachments?.[0]?.text;\n\n\t\tif (!pinnedMessage) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await e2eRoom.decrypt(pinnedMessage);\n\n\t\tif (!data) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedPinnedMessage = { ...message } as IMessage & { attachments: MessageAttachment[] };\n\t\tdecryptedPinnedMessage.attachments[0].text = data.text;\n\n\t\treturn decryptedPinnedMessage;\n\t}\n\n\tasync decryptPendingMessages(): Promise<void> {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));\n\t\t});\n\t}\n\n\tasync decryptSubscription(subscriptionId: ISubscription['_id']): Promise<void> {\n\t\tconst e2eRoom = await this.getInstanceByRoomId(subscriptionId);\n\t\tthis.log('decryptSubscription ->', subscriptionId);\n\t\tawait e2eRoom?.decryptSubscription();\n\t}\n\n\tasync decryptSubscriptions(): Promise<void> {\n\t\tSubscriptions.find({\n\t\t\tencrypted: true,\n\t\t}).forEach((subscription) => this.decryptSubscription(subscription._id));\n\t}\n\n\topenAlert(config: Omit<LegacyBannerPayload, 'id'>): void {\n\t\tbanners.open({ id: 'e2e', ...config });\n\t}\n\n\tcloseAlert(): void {\n\t\tbanners.closeById('e2e');\n\t}\n\n\tasync parseQuoteAttachment(message: IE2EEMessage): Promise<IE2EEMessage> {\n\t\tif (!message?.msg) {\n\t\t\treturn message;\n\t\t}\n\t\tconst urls = message.msg.match(getMessageUrlRegex()) || [];\n\n\t\tawait Promise.all(\n\t\t\turls.map(async (url) => {\n\t\t\t\tif (!url.includes(settings.get('Site_Url'))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlObj = URL.parse(url);\n\t\t\t\t// if the URL doesn't have query params (doesn't reference message) skip\n\t\t\t\tif (!urlObj.query) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { msg: msgId } = QueryString.parse(urlObj.query);\n\n\t\t\t\tif (!msgId || Array.isArray(msgId)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\t\t\tconst quotedMessage = getQuotedMessage?.message;\n\n\t\t\t\tif (!quotedMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst decryptedQuoteMessage = await this.decryptMessage(mapMessageFromApi(quotedMessage));\n\n\t\t\t\tmessage.attachments = message.attachments || [];\n\n\t\t\t\tconst useRealName = settings.get('UI_Use_Real_Name');\n\t\t\t\tconst quoteAttachment = createQuoteAttachment(\n\t\t\t\t\tdecryptedQuoteMessage,\n\t\t\t\t\turl,\n\t\t\t\t\tuseRealName,\n\t\t\t\t\tgetUserAvatarURL(decryptedQuoteMessage.u.username || '') as string,\n\t\t\t\t);\n\n\t\t\t\tmessage.attachments.push(quoteAttachment);\n\t\t\t}),\n\t\t);\n\n\t\treturn message;\n\t}\n\n\tasync getSuggestedE2EEKeys(usersWaitingForE2EKeys: Record<IRoom['_id'], { _id: IUser['_id']; public_key: string }[]>) {\n\t\tconst roomIds = Object.keys(usersWaitingForE2EKeys);\n\t\treturn Object.fromEntries(\n\t\t\t(\n\t\t\t\tawait Promise.all(\n\t\t\t\t\troomIds.map(async (room) => {\n\t\t\t\t\t\tconst e2eRoom = await this.getInstanceByRoomId(room);\n\n\t\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst usersWithKeys = await e2eRoom.encryptGroupKeyForParticipantsWaitingForTheKeys(usersWaitingForE2EKeys[room]);\n\n\t\t\t\t\t\tif (!usersWithKeys) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [room, usersWithKeys];\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).filter(isTruthy),\n\t\t);\n\t}\n\n\tasync getSample(roomIds: string[], limit = 3): Promise<string[]> {\n\t\tif (limit === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst randomRoomIds = _.sampleSize(roomIds, ROOM_KEY_EXCHANGE_SIZE);\n\n\t\tconst sampleIds: string[] = [];\n\t\tfor await (const roomId of randomRoomIds) {\n\t\t\tconst e2eroom = await this.getInstanceByRoomId(roomId);\n\t\t\tif (!e2eroom?.hasSessionKey()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsampleIds.push(roomId);\n\t\t}\n\n\t\tif (!sampleIds.length) {\n\t\t\treturn this.getSample(roomIds, limit - 1);\n\t\t}\n\n\t\treturn sampleIds;\n\t}\n\n\tasync initiateKeyDistribution() {\n\t\tif (this.keyDistributionInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyDistribution = async () => {\n\t\t\tconst roomIds = ChatRoom.find({\n\t\t\t\t'usersWaitingForE2EKeys': { $exists: true },\n\t\t\t\t'usersWaitingForE2EKeys.userId': { $ne: Meteor.userId() },\n\t\t\t}).map((room) => room._id);\n\t\t\tif (!roomIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prevent function from running and doing nothing when theres something to do\n\t\t\tconst sampleIds = await this.getSample(roomIds);\n\n\t\t\tif (!sampleIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { usersWaitingForE2EKeys = {} } = await sdk.rest.get('/v1/e2e.fetchUsersWaitingForGroupKey', { roomIds: sampleIds });\n\n\t\t\tif (!Object.keys(usersWaitingForE2EKeys).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst userKeysWithRooms = await this.getSuggestedE2EEKeys(usersWaitingForE2EKeys);\n\n\t\t\tif (!Object.keys(userKeysWithRooms).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys: userKeysWithRooms });\n\t\t\t} catch (error) {\n\t\t\t\treturn this.error('Error providing group key to users: ', error);\n\t\t\t}\n\t\t};\n\n\t\t// Run first call right away, then schedule for 10s in the future\n\t\tawait keyDistribution();\n\t\tthis.keyDistributionInterval = setInterval(keyDistribution, 10000);\n\t}\n}\n\nexport const e2e = new E2E();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import QueryString from 'querystring';\nimport URL from 'url';\n\nimport type { IE2EEMessage, IMessage, IRoom, ISubscription, IUser, IUploadWithUser, MessageAttachment } from '@rocket.chat/core-typings';\nimport { isE2EEMessage } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\nimport _ from 'lodash';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport { E2EEState } from './E2EEState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptAES,\n\tdecryptAES,\n\tgenerateRSAKey,\n\texportJWKKey,\n\timportRSAKey,\n\timportRawKey,\n\tderiveKey,\n\tgenerateMnemonicPhrase,\n} from './helper';\nimport { log, logError } from './logger';\nimport { E2ERoom } from './rocketchat.e2e.room';\nimport * as banners from '../../../client/lib/banners';\nimport type { LegacyBannerPayload } from '../../../client/lib/banners';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { mapMessageFromApi } from '../../../client/lib/utils/mapMessageFromApi';\nimport { waitUntilFind } from '../../../client/lib/utils/waitUntilFind';\nimport EnterE2EPasswordModal from '../../../client/views/e2e/EnterE2EPasswordModal';\nimport SaveE2EPasswordModal from '../../../client/views/e2e/SaveE2EPasswordModal';\nimport { createQuoteAttachment } from '../../../lib/createQuoteAttachment';\nimport { getMessageUrlRegex } from '../../../lib/getMessageUrlRegex';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { settings } from '../../settings/client';\nimport { getUserAvatarURL } from '../../utils/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nimport './events';\n\nlet failedToDecodeKey = false;\n\ntype KeyPair = {\n\tpublic_key: string | null;\n\tprivate_key: string | null;\n};\n\nconst ROOM_KEY_EXCHANGE_SIZE = 10;\nconst E2EEStateDependency = new Tracker.Dependency();\n\nclass E2E extends Emitter {\n\tprivate started: boolean;\n\n\tprivate instancesByRoomId: Record<IRoom['_id'], E2ERoom>;\n\n\tprivate db_public_key: string | null | undefined;\n\n\tprivate db_private_key: string | null | undefined;\n\n\tpublic privateKey: CryptoKey | undefined;\n\n\tpublic publicKey: string | undefined;\n\n\tprivate keyDistributionInterval: ReturnType<typeof setInterval> | null;\n\n\tprivate state: E2EEState;\n\n\tprivate observable: Meteor.LiveQueryHandle | undefined;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.started = false;\n\t\tthis.instancesByRoomId = {};\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.observable = undefined;\n\n\t\tthis.on('E2E_STATE_CHANGED', ({ prevState, nextState }) => {\n\t\t\tthis.log(`${prevState} -> ${nextState}`);\n\t\t});\n\n\t\tthis.on(E2EEState.READY, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.SAVE_PASSWORD, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.DISABLED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.NOT_STARTED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.ERROR, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.setState(E2EEState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog('E2E', ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError('E2E', ...msg);\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.state !== E2EEState.DISABLED;\n\t}\n\n\tisReady(): boolean {\n\t\tE2EEStateDependency.depend();\n\n\t\t// Save_Password state is also a ready state for E2EE\n\t\treturn this.state === E2EEState.READY || this.state === E2EEState.SAVE_PASSWORD;\n\t}\n\n\tasync onE2EEReady() {\n\t\tthis.log('startClient -> Done');\n\t\tthis.initiateHandshake();\n\t\tawait this.handleAsyncE2EESuggestedKey();\n\t\tthis.log('decryptSubscriptions');\n\t\tawait this.decryptSubscriptions();\n\t\tthis.log('decryptSubscriptions -> Done');\n\t\tawait this.initiateKeyDistribution();\n\t\tthis.log('initiateKeyDistribution -> Done');\n\t\tthis.observeSubscriptions();\n\t\tthis.log('observing subscriptions');\n\t}\n\n\tasync onSubscriptionChanged(sub: ISubscription) {\n\t\tthis.log('Subscription changed', sub);\n\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\treturn;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(sub.rid);\n\t\tif (!e2eRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2ESuggestedKey) {\n\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\tawait this.acceptSuggestedKey(sub.rid);\n\t\t\t\te2eRoom.keyReceived();\n\t\t\t} else {\n\t\t\t\tconsole.warn('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\tawait this.rejectSuggestedKey(sub.rid);\n\t\t\t}\n\t\t}\n\n\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\n\t\t// Cover private groups and direct messages\n\t\tif (!e2eRoom.isSupportedRoomType(sub.t)) {\n\t\t\te2eRoom.disable();\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2EKey && e2eRoom.isWaitingKeys()) {\n\t\t\te2eRoom.keyReceived();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!e2eRoom.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait e2eRoom.decryptSubscription();\n\t}\n\n\tobserveSubscriptions() {\n\t\tthis.observable?.stop();\n\n\t\tthis.observable = Subscriptions.find().observe({\n\t\t\tchanged: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(() => this.onSubscriptionChanged(sub), 0);\n\t\t\t},\n\t\t\tadded: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tthis.log('Subscription added', sub);\n\t\t\t\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getInstanceByRoomId(sub.rid);\n\t\t\t\t}, 0);\n\t\t\t},\n\t\t\tremoved: (sub: ISubscription) => {\n\t\t\t\tthis.log('Subscription removed', sub);\n\t\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\t},\n\t\t});\n\t}\n\n\tshouldAskForE2EEPassword() {\n\t\tconst { private_key } = this.getKeysFromLocalStorage();\n\t\treturn this.db_private_key && !private_key;\n\t}\n\n\tsetState(nextState: E2EEState) {\n\t\tconst prevState = this.state;\n\n\t\tthis.state = nextState;\n\n\t\tE2EEStateDependency.changed();\n\n\t\tthis.emit('E2E_STATE_CHANGED', { prevState, nextState });\n\n\t\tthis.emit(nextState);\n\t}\n\n\tasync handleAsyncE2EESuggestedKey() {\n\t\tconst subs = Subscriptions.find({ E2ESuggestedKey: { $exists: true } }).fetch();\n\t\tawait Promise.all(\n\t\t\tsubs\n\t\t\t\t.filter((sub) => sub.E2ESuggestedKey && !sub.E2EKey)\n\t\t\t\t.map(async (sub) => {\n\t\t\t\t\tconst e2eRoom = await e2e.getInstanceByRoomId(sub.rid);\n\n\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\t\t\tthis.log('Imported valid E2E suggested key');\n\t\t\t\t\t\tawait e2e.acceptSuggestedKey(sub.rid);\n\t\t\t\t\t\te2eRoom.keyReceived();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.error('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\t\t\tawait e2e.rejectSuggestedKey(sub.rid);\n\t\t\t\t\t}\n\n\t\t\t\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tasync getInstanceByRoomId(rid: IRoom['_id']): Promise<E2ERoom | null> {\n\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\n\n\t\tif (room.t !== 'd' && room.t !== 'p') {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!room.encrypted) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.instancesByRoomId[rid]) {\n\t\t\tthis.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), room);\n\t\t}\n\n\t\t// When the key was already set and is changed via an update, we update the room instance\n\t\tif (\n\t\t\tthis.instancesByRoomId[rid].keyID !== undefined &&\n\t\t\troom.e2eKeyId !== undefined &&\n\t\t\tthis.instancesByRoomId[rid].keyID !== room.e2eKeyId\n\t\t) {\n\t\t\t// KeyID was changed, update instance with new keyID and put room in waiting keys status\n\t\t\tthis.instancesByRoomId[rid].onRoomKeyReset(room.e2eKeyId);\n\t\t}\n\n\t\treturn this.instancesByRoomId[rid];\n\t}\n\n\tremoveInstanceByRoomId(rid: IRoom['_id']): void {\n\t\tdelete this.instancesByRoomId[rid];\n\t}\n\n\tprivate async persistKeys(\n\t\t{ public_key, private_key }: KeyPair,\n\t\tpassword: string,\n\t\t{ force }: { force: boolean } = { force: false },\n\t): Promise<void> {\n\t\tif (typeof public_key !== 'string' || typeof private_key !== 'string') {\n\t\t\tthrow new Error('Failed to persist keys as they are not strings.');\n\t\t}\n\n\t\tconst encodedPrivateKey = await this.encodePrivateKey(private_key, password);\n\n\t\tif (!encodedPrivateKey) {\n\t\t\tthrow new Error('Failed to encode private key with provided password.');\n\t\t}\n\n\t\tawait sdk.rest.post('/v1/e2e.setUserPublicAndPrivateKeys', {\n\t\t\tpublic_key,\n\t\t\tprivate_key: encodedPrivateKey,\n\t\t\tforce,\n\t\t});\n\t}\n\n\tasync acceptSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.acceptSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tasync rejectSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.rejectSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tgetKeysFromLocalStorage(): KeyPair {\n\t\treturn {\n\t\t\tpublic_key: Accounts.storageLocation.getItem('public_key'),\n\t\t\tprivate_key: Accounts.storageLocation.getItem('private_key'),\n\t\t};\n\t}\n\n\tinitiateHandshake() {\n\t\tObject.keys(this.instancesByRoomId).map((key) => this.instancesByRoomId[key].handshake());\n\t}\n\n\topenSaveE2EEPasswordModal(randomPassword: string) {\n\t\timperativeModal.open({\n\t\t\tcomponent: SaveE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\trandomPassword,\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: () => {\n\t\t\t\t\tAccounts.storageLocation.removeItem('e2e.randomPassword');\n\t\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync startClient(): Promise<void> {\n\t\tif (this.started) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log('startClient -> STARTED');\n\n\t\tthis.started = true;\n\n\t\tlet { public_key, private_key } = this.getKeysFromLocalStorage();\n\n\t\tawait this.loadKeysFromDB();\n\n\t\tif (!public_key && this.db_public_key) {\n\t\t\tpublic_key = this.db_public_key;\n\t\t}\n\n\t\tif (this.shouldAskForE2EEPassword()) {\n\t\t\ttry {\n\t\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\t\tprivate_key = await this.decodePrivateKey(this.db_private_key as string);\n\t\t\t} catch (error) {\n\t\t\t\tthis.started = false;\n\t\t\t\tfailedToDecodeKey = true;\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: \"Wasn't possible to decode your encryption key to be imported.\", // TODO: missing translation\n\t\t\t\t\thtml: '<div>Your encryption password seems wrong. Click here to try again.</div>', // TODO: missing translation\n\t\t\t\t\tmodifiers: ['large', 'danger'],\n\t\t\t\t\tclosable: true,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction: async () => {\n\t\t\t\t\t\tawait this.startClient();\n\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (public_key && private_key) {\n\t\t\tawait this.loadKeys({ public_key, private_key });\n\t\t\tthis.setState(E2EEState.READY);\n\t\t} else {\n\t\t\tawait this.createAndLoadKeys();\n\t\t\tthis.setState(E2EEState.READY);\n\t\t}\n\n\t\tif (!this.db_public_key || !this.db_private_key) {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), await this.createRandomPassword());\n\t\t}\n\n\t\tconst randomPassword = Accounts.storageLocation.getItem('e2e.randomPassword');\n\t\tif (randomPassword) {\n\t\t\tthis.setState(E2EEState.SAVE_PASSWORD);\n\t\t\tthis.openAlert({\n\t\t\t\ttitle: () => t('Save_your_encryption_password'),\n\t\t\t\thtml: () => t('Click_here_to_view_and_copy_your_password'),\n\t\t\t\tmodifiers: ['large'],\n\t\t\t\tclosable: false,\n\t\t\t\ticon: 'key',\n\t\t\t\taction: () => this.openSaveE2EEPasswordModal(randomPassword),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync stopClient(): Promise<void> {\n\t\tthis.log('-> Stop Client');\n\t\tthis.closeAlert();\n\n\t\tAccounts.storageLocation.removeItem('public_key');\n\t\tAccounts.storageLocation.removeItem('private_key');\n\t\tthis.instancesByRoomId = {};\n\t\tthis.privateKey = undefined;\n\t\tthis.publicKey = undefined;\n\t\tthis.started = false;\n\t\tthis.keyDistributionInterval && clearInterval(this.keyDistributionInterval);\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.setState(E2EEState.DISABLED);\n\t}\n\n\tasync changePassword(newPassword: string): Promise<void> {\n\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), newPassword, { force: true });\n\n\t\tif (Accounts.storageLocation.getItem('e2e.randomPassword')) {\n\t\t\tAccounts.storageLocation.setItem('e2e.randomPassword', newPassword);\n\t\t}\n\t}\n\n\tasync loadKeysFromDB(): Promise<void> {\n\t\ttry {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tconst { public_key, private_key } = await sdk.rest.get('/v1/e2e.fetchMyKeys');\n\n\t\t\tthis.db_public_key = public_key;\n\t\t\tthis.db_private_key = private_key;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\tthis.error('Error fetching RSA keys: ', error);\n\t\t\t// Stop any process since we can't communicate with the server\n\t\t\t// to get the keys. This prevents new key generation\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync loadKeys({ public_key, private_key }: { public_key: string; private_key: string }): Promise<void> {\n\t\tAccounts.storageLocation.setItem('public_key', public_key);\n\t\tthis.publicKey = public_key;\n\n\t\ttry {\n\t\t\tthis.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', private_key);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error importing private key: ', error);\n\t\t}\n\t}\n\n\tasync createAndLoadKeys(): Promise<void> {\n\t\t// Could not obtain public-private keypair from server.\n\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\tlet key;\n\t\ttry {\n\t\t\tkey = await generateRSAKey();\n\t\t\tthis.privateKey = key.privateKey;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error generating key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst publicKey = await exportJWKKey(key.publicKey);\n\n\t\t\tthis.publicKey = JSON.stringify(publicKey);\n\t\t\tAccounts.storageLocation.setItem('public_key', JSON.stringify(publicKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting public key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst privateKey = await exportJWKKey(key.privateKey);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', JSON.stringify(privateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting private key: ', error);\n\t\t}\n\n\t\tawait this.requestSubscriptionKeys();\n\t}\n\n\tasync requestSubscriptionKeys(): Promise<void> {\n\t\tawait sdk.call('e2e.requestSubscriptionKeys');\n\t}\n\n\tasync createRandomPassword(): Promise<string> {\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tAccounts.storageLocation.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(privateKey: string, password: string): Promise<string | void> {\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error encrypting encodedPrivateKey: ', error);\n\t\t}\n\t}\n\n\tasync getMasterKey(password: string): Promise<void | CryptoKey> {\n\t\tif (password == null) {\n\t\t\talert('You should provide a password');\n\t\t}\n\n\t\t// First, create a PBKDF2 \"key\" containing the password\n\t\tlet baseKey;\n\t\ttry {\n\t\t\tbaseKey = await importRawKey(toArrayBuffer(password));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error creating a key based on user password: ', error);\n\t\t}\n\n\t\t// Derive a key from the password\n\t\ttry {\n\t\t\treturn await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error deriving baseKey: ', error);\n\t\t}\n\t}\n\n\topenEnterE2EEPasswordModal(onEnterE2EEPassword?: (password: string) => void) {\n\t\timperativeModal.open({\n\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\tonEnterE2EEPassword?.(password);\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync requestPasswordAlert(): Promise<string> {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst showModal = () => this.openEnterE2EEPasswordModal((password) => resolve(password));\n\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: () => t('Enter_your_E2E_password'),\n\t\t\t\t\thtml: () => t('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {\n\t\t\t\tshowAlert();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync requestPasswordModal(): Promise<string> {\n\t\treturn new Promise((resolve) => this.openEnterE2EEPasswordModal((password) => resolve(password)));\n\t}\n\n\tasync decodePrivateKeyFlow() {\n\t\tconst password = await this.requestPasswordModal();\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tif (!this.db_private_key) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(this.db_private_key));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\tconst privateKey = toString(privKey) as string;\n\n\t\t\tif (this.db_public_key && privateKey) {\n\t\t\t\tawait this.loadKeys({ public_key: this.db_public_key, private_key: privateKey });\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t} else {\n\t\t\t\tawait this.createAndLoadKeys();\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t}\n\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decodePrivateKey(privateKey: string): Promise<string> {\n\t\tconst password = await this.requestPasswordAlert();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decryptFileContent(file: IUploadWithUser): Promise<IUploadWithUser> {\n\t\tif (!file.rid) {\n\t\t\treturn file;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(file.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn file;\n\t\t}\n\n\t\treturn e2eRoom.decryptContent(file);\n\t}\n\n\tasync decryptMessage(message: IMessage | IE2EEMessage): Promise<IMessage> {\n\t\tif (!isE2EEMessage(message) || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedMessage: IE2EEMessage = await e2eRoom.decryptMessage(message);\n\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\n\t\treturn decryptedMessageWithQuote;\n\t}\n\n\tasync decryptPinnedMessage(message: IMessage) {\n\t\tconst pinnedMessage = message?.attachments?.[0]?.text;\n\n\t\tif (!pinnedMessage) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await e2eRoom.decrypt(pinnedMessage);\n\n\t\tif (!data) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedPinnedMessage = { ...message } as IMessage & { attachments: MessageAttachment[] };\n\t\tdecryptedPinnedMessage.attachments[0].text = data.text;\n\n\t\treturn decryptedPinnedMessage;\n\t}\n\n\tasync decryptPendingMessages(): Promise<void> {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));\n\t\t});\n\t}\n\n\tasync decryptSubscription(subscriptionId: ISubscription['_id']): Promise<void> {\n\t\tconst e2eRoom = await this.getInstanceByRoomId(subscriptionId);\n\t\tthis.log('decryptSubscription ->', subscriptionId);\n\t\tawait e2eRoom?.decryptSubscription();\n\t}\n\n\tasync decryptSubscriptions(): Promise<void> {\n\t\tSubscriptions.find({\n\t\t\tencrypted: true,\n\t\t}).forEach((subscription) => this.decryptSubscription(subscription._id));\n\t}\n\n\topenAlert(config: Omit<LegacyBannerPayload, 'id'>): void {\n\t\tbanners.open({ id: 'e2e', ...config });\n\t}\n\n\tcloseAlert(): void {\n\t\tbanners.closeById('e2e');\n\t}\n\n\tasync parseQuoteAttachment(message: IE2EEMessage): Promise<IE2EEMessage> {\n\t\tif (!message?.msg) {\n\t\t\treturn message;\n\t\t}\n\t\tconst urls = message.msg.match(getMessageUrlRegex()) || [];\n\n\t\tawait Promise.all(\n\t\t\turls.map(async (url) => {\n\t\t\t\tif (!url.includes(settings.get('Site_Url'))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlObj = URL.parse(url);\n\t\t\t\t// if the URL doesn't have query params (doesn't reference message) skip\n\t\t\t\tif (!urlObj.query) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { msg: msgId } = QueryString.parse(urlObj.query);\n\n\t\t\t\tif (!msgId || Array.isArray(msgId)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\t\t\tconst quotedMessage = getQuotedMessage?.message;\n\n\t\t\t\tif (!quotedMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst decryptedQuoteMessage = await this.decryptMessage(mapMessageFromApi(quotedMessage));\n\n\t\t\t\tmessage.attachments = message.attachments || [];\n\n\t\t\t\tconst useRealName = settings.get('UI_Use_Real_Name');\n\t\t\t\tconst quoteAttachment = createQuoteAttachment(\n\t\t\t\t\tdecryptedQuoteMessage,\n\t\t\t\t\turl,\n\t\t\t\t\tuseRealName,\n\t\t\t\t\tgetUserAvatarURL(decryptedQuoteMessage.u.username || '') as string,\n\t\t\t\t);\n\n\t\t\t\tmessage.attachments.push(quoteAttachment);\n\t\t\t}),\n\t\t);\n\n\t\treturn message;\n\t}\n\n\tasync getSuggestedE2EEKeys(usersWaitingForE2EKeys: Record<IRoom['_id'], { _id: IUser['_id']; public_key: string }[]>) {\n\t\tconst roomIds = Object.keys(usersWaitingForE2EKeys);\n\t\treturn Object.fromEntries(\n\t\t\t(\n\t\t\t\tawait Promise.all(\n\t\t\t\t\troomIds.map(async (room) => {\n\t\t\t\t\t\tconst e2eRoom = await this.getInstanceByRoomId(room);\n\n\t\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst usersWithKeys = await e2eRoom.encryptGroupKeyForParticipantsWaitingForTheKeys(usersWaitingForE2EKeys[room]);\n\n\t\t\t\t\t\tif (!usersWithKeys) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [room, usersWithKeys];\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).filter(isTruthy),\n\t\t);\n\t}\n\n\tasync getSample(roomIds: string[], limit = 3): Promise<string[]> {\n\t\tif (limit === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst randomRoomIds = _.sampleSize(roomIds, ROOM_KEY_EXCHANGE_SIZE);\n\n\t\tconst sampleIds: string[] = [];\n\t\tfor await (const roomId of randomRoomIds) {\n\t\t\tconst e2eroom = await this.getInstanceByRoomId(roomId);\n\t\t\tif (!e2eroom?.hasSessionKey()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsampleIds.push(roomId);\n\t\t}\n\n\t\tif (!sampleIds.length) {\n\t\t\treturn this.getSample(roomIds, limit - 1);\n\t\t}\n\n\t\treturn sampleIds;\n\t}\n\n\tasync initiateKeyDistribution() {\n\t\tif (this.keyDistributionInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyDistribution = async () => {\n\t\t\tconst roomIds = ChatRoom.find({\n\t\t\t\t'usersWaitingForE2EKeys': { $exists: true },\n\t\t\t\t'usersWaitingForE2EKeys.userId': { $ne: Meteor.userId() },\n\t\t\t}).map((room) => room._id);\n\t\t\tif (!roomIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prevent function from running and doing nothing when theres something to do\n\t\t\tconst sampleIds = await this.getSample(roomIds);\n\n\t\t\tif (!sampleIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { usersWaitingForE2EKeys = {} } = await sdk.rest.get('/v1/e2e.fetchUsersWaitingForGroupKey', { roomIds: sampleIds });\n\n\t\t\tif (!Object.keys(usersWaitingForE2EKeys).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst userKeysWithRooms = await this.getSuggestedE2EEKeys(usersWaitingForE2EKeys);\n\n\t\t\tif (!Object.keys(userKeysWithRooms).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys: userKeysWithRooms });\n\t\t\t} catch (error) {\n\t\t\t\treturn this.error('Error providing group key to users: ', error);\n\t\t\t}\n\t\t};\n\n\t\t// Run first call right away, then schedule for 10s in the future\n\t\tawait keyDistribution();\n\t\tthis.keyDistributionInterval = setInterval(keyDistribution, 10000);\n\t}\n}\n\nexport const e2e = new E2E();\n"]}}},"code":"const _excluded = [\"_id\"];\nlet _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n}, 0);\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 1);\nlet _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n}, 2);\nmodule.export({\n  e2e: () => e2e\n});\nlet QueryString;\nmodule.link(\"querystring\", {\n  default(v) {\n    QueryString = v;\n  }\n}, 0);\nlet URL;\nmodule.link(\"url\", {\n  default(v) {\n    URL = v;\n  }\n}, 1);\nlet isE2EEMessage;\nmodule.link(\"@rocket.chat/core-typings\", {\n  isE2EEMessage(v) {\n    isE2EEMessage = v;\n  }\n}, 2);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n}, 3);\nlet EJSON;\nmodule.link(\"ejson\", {\n  default(v) {\n    EJSON = v;\n  }\n}, 4);\nlet _;\nmodule.link(\"lodash\", {\n  default(v) {\n    _ = v;\n  }\n}, 5);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n}, 6);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 7);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 8);\nlet E2EEState;\nmodule.link(\"./E2EEState\", {\n  E2EEState(v) {\n    E2EEState = v;\n  }\n}, 9);\nlet toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptAES, decryptAES, generateRSAKey, exportJWKKey, importRSAKey, importRawKey, deriveKey, generateMnemonicPhrase;\nmodule.link(\"./helper\", {\n  toString(v) {\n    toString = v;\n  },\n  toArrayBuffer(v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData(v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData(v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptAES(v) {\n    encryptAES = v;\n  },\n  decryptAES(v) {\n    decryptAES = v;\n  },\n  generateRSAKey(v) {\n    generateRSAKey = v;\n  },\n  exportJWKKey(v) {\n    exportJWKKey = v;\n  },\n  importRSAKey(v) {\n    importRSAKey = v;\n  },\n  importRawKey(v) {\n    importRawKey = v;\n  },\n  deriveKey(v) {\n    deriveKey = v;\n  },\n  generateMnemonicPhrase(v) {\n    generateMnemonicPhrase = v;\n  }\n}, 10);\nlet log, logError;\nmodule.link(\"./logger\", {\n  log(v) {\n    log = v;\n  },\n  logError(v) {\n    logError = v;\n  }\n}, 11);\nlet E2ERoom;\nmodule.link(\"./rocketchat.e2e.room\", {\n  E2ERoom(v) {\n    E2ERoom = v;\n  }\n}, 12);\nlet banners;\nmodule.link(\"../../../client/lib/banners\", {\n  \"*\"(v) {\n    banners = v;\n  }\n}, 13);\nlet imperativeModal;\nmodule.link(\"../../../client/lib/imperativeModal\", {\n  imperativeModal(v) {\n    imperativeModal = v;\n  }\n}, 14);\nlet dispatchToastMessage;\nmodule.link(\"../../../client/lib/toast\", {\n  dispatchToastMessage(v) {\n    dispatchToastMessage = v;\n  }\n}, 15);\nlet mapMessageFromApi;\nmodule.link(\"../../../client/lib/utils/mapMessageFromApi\", {\n  mapMessageFromApi(v) {\n    mapMessageFromApi = v;\n  }\n}, 16);\nlet waitUntilFind;\nmodule.link(\"../../../client/lib/utils/waitUntilFind\", {\n  waitUntilFind(v) {\n    waitUntilFind = v;\n  }\n}, 17);\nlet EnterE2EPasswordModal;\nmodule.link(\"../../../client/views/e2e/EnterE2EPasswordModal\", {\n  default(v) {\n    EnterE2EPasswordModal = v;\n  }\n}, 18);\nlet SaveE2EPasswordModal;\nmodule.link(\"../../../client/views/e2e/SaveE2EPasswordModal\", {\n  default(v) {\n    SaveE2EPasswordModal = v;\n  }\n}, 19);\nlet createQuoteAttachment;\nmodule.link(\"../../../lib/createQuoteAttachment\", {\n  createQuoteAttachment(v) {\n    createQuoteAttachment = v;\n  }\n}, 20);\nlet getMessageUrlRegex;\nmodule.link(\"../../../lib/getMessageUrlRegex\", {\n  getMessageUrlRegex(v) {\n    getMessageUrlRegex = v;\n  }\n}, 21);\nlet isTruthy;\nmodule.link(\"../../../lib/isTruthy\", {\n  isTruthy(v) {\n    isTruthy = v;\n  }\n}, 22);\nlet ChatRoom, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  ChatRoom(v) {\n    ChatRoom = v;\n  },\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n  Messages(v) {\n    Messages = v;\n  }\n}, 23);\nlet settings;\nmodule.link(\"../../settings/client\", {\n  settings(v) {\n    settings = v;\n  }\n}, 24);\nlet getUserAvatarURL;\nmodule.link(\"../../utils/client\", {\n  getUserAvatarURL(v) {\n    getUserAvatarURL = v;\n  }\n}, 25);\nlet sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk(v) {\n    sdk = v;\n  }\n}, 26);\nlet t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t(v) {\n    t = v;\n  }\n}, 27);\nmodule.link(\"./events\");\nlet failedToDecodeKey = false;\nconst ROOM_KEY_EXCHANGE_SIZE = 10;\nconst E2EEStateDependency = new Tracker.Dependency();\nclass E2E extends Emitter {\n  constructor() {\n    super();\n    this.started = void 0;\n    this.instancesByRoomId = void 0;\n    this.db_public_key = void 0;\n    this.db_private_key = void 0;\n    this.privateKey = void 0;\n    this.publicKey = void 0;\n    this.keyDistributionInterval = void 0;\n    this.state = void 0;\n    this.observable = void 0;\n    this.started = false;\n    this.instancesByRoomId = {};\n    this.keyDistributionInterval = null;\n    this.observable = undefined;\n    this.on('E2E_STATE_CHANGED', _ref => {\n      let {\n        prevState,\n        nextState\n      } = _ref;\n      this.log(\"\".concat(prevState, \" -> \").concat(nextState));\n    });\n    this.on(E2EEState.READY, async () => {\n      await this.onE2EEReady();\n    });\n    this.on(E2EEState.SAVE_PASSWORD, async () => {\n      await this.onE2EEReady();\n    });\n    this.on(E2EEState.DISABLED, () => {\n      var _this$observable;\n      (_this$observable = this.observable) === null || _this$observable === void 0 ? void 0 : _this$observable.stop();\n    });\n    this.on(E2EEState.NOT_STARTED, () => {\n      var _this$observable2;\n      (_this$observable2 = this.observable) === null || _this$observable2 === void 0 ? void 0 : _this$observable2.stop();\n    });\n    this.on(E2EEState.ERROR, () => {\n      var _this$observable3;\n      (_this$observable3 = this.observable) === null || _this$observable3 === void 0 ? void 0 : _this$observable3.stop();\n    });\n    this.setState(E2EEState.NOT_STARTED);\n  }\n  log() {\n    for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n      msg[_key] = arguments[_key];\n    }\n    log('E2E', ...msg);\n  }\n  error() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n    logError('E2E', ...msg);\n  }\n  getState() {\n    return this.state;\n  }\n  isEnabled() {\n    return this.state !== E2EEState.DISABLED;\n  }\n  isReady() {\n    E2EEStateDependency.depend();\n    // Save_Password state is also a ready state for E2EE\n    return this.state === E2EEState.READY || this.state === E2EEState.SAVE_PASSWORD;\n  }\n  async onE2EEReady() {\n    this.log('startClient -> Done');\n    this.initiateHandshake();\n    await this.handleAsyncE2EESuggestedKey();\n    this.log('decryptSubscriptions');\n    await this.decryptSubscriptions();\n    this.log('decryptSubscriptions -> Done');\n    await this.initiateKeyDistribution();\n    this.log('initiateKeyDistribution -> Done');\n    this.observeSubscriptions();\n    this.log('observing subscriptions');\n  }\n  async onSubscriptionChanged(sub) {\n    this.log('Subscription changed', sub);\n    if (!sub.encrypted && !sub.E2EKey) {\n      this.removeInstanceByRoomId(sub.rid);\n      return;\n    }\n    const e2eRoom = await this.getInstanceByRoomId(sub.rid);\n    if (!e2eRoom) {\n      return;\n    }\n    if (sub.E2ESuggestedKey) {\n      if (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n        await this.acceptSuggestedKey(sub.rid);\n        e2eRoom.keyReceived();\n      } else {\n        console.warn('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n        await this.rejectSuggestedKey(sub.rid);\n      }\n    }\n    sub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n    // Cover private groups and direct messages\n    if (!e2eRoom.isSupportedRoomType(sub.t)) {\n      e2eRoom.disable();\n      return;\n    }\n    if (sub.E2EKey && e2eRoom.isWaitingKeys()) {\n      e2eRoom.keyReceived();\n      return;\n    }\n    if (!e2eRoom.isReady()) {\n      return;\n    }\n    await e2eRoom.decryptSubscription();\n  }\n  observeSubscriptions() {\n    var _this$observable4;\n    (_this$observable4 = this.observable) === null || _this$observable4 === void 0 ? void 0 : _this$observable4.stop();\n    this.observable = Subscriptions.find().observe({\n      changed: sub => {\n        setTimeout(() => this.onSubscriptionChanged(sub), 0);\n      },\n      added: sub => {\n        setTimeout(async () => {\n          this.log('Subscription added', sub);\n          if (!sub.encrypted && !sub.E2EKey) {\n            return;\n          }\n          return this.getInstanceByRoomId(sub.rid);\n        }, 0);\n      },\n      removed: sub => {\n        this.log('Subscription removed', sub);\n        this.removeInstanceByRoomId(sub.rid);\n      }\n    });\n  }\n  shouldAskForE2EEPassword() {\n    const {\n      private_key\n    } = this.getKeysFromLocalStorage();\n    return this.db_private_key && !private_key;\n  }\n  setState(nextState) {\n    const prevState = this.state;\n    this.state = nextState;\n    E2EEStateDependency.changed();\n    this.emit('E2E_STATE_CHANGED', {\n      prevState,\n      nextState\n    });\n    this.emit(nextState);\n  }\n  async handleAsyncE2EESuggestedKey() {\n    const subs = Subscriptions.find({\n      E2ESuggestedKey: {\n        $exists: true\n      }\n    }).fetch();\n    await Promise.all(subs.filter(sub => sub.E2ESuggestedKey && !sub.E2EKey).map(async sub => {\n      const e2eRoom = await e2e.getInstanceByRoomId(sub.rid);\n      if (!e2eRoom) {\n        return;\n      }\n      if (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n        this.log('Imported valid E2E suggested key');\n        await e2e.acceptSuggestedKey(sub.rid);\n        e2eRoom.keyReceived();\n      } else {\n        this.error('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n        await e2e.rejectSuggestedKey(sub.rid);\n      }\n      sub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n    }));\n  }\n  async getInstanceByRoomId(rid) {\n    const room = await waitUntilFind(() => ChatRoom.findOne({\n      _id: rid\n    }));\n    if (room.t !== 'd' && room.t !== 'p') {\n      return null;\n    }\n    if (!room.encrypted) {\n      return null;\n    }\n    if (!this.instancesByRoomId[rid]) {\n      this.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), room);\n    }\n    // When the key was already set and is changed via an update, we update the room instance\n    if (this.instancesByRoomId[rid].keyID !== undefined && room.e2eKeyId !== undefined && this.instancesByRoomId[rid].keyID !== room.e2eKeyId) {\n      // KeyID was changed, update instance with new keyID and put room in waiting keys status\n      this.instancesByRoomId[rid].onRoomKeyReset(room.e2eKeyId);\n    }\n    return this.instancesByRoomId[rid];\n  }\n  removeInstanceByRoomId(rid) {\n    delete this.instancesByRoomId[rid];\n  }\n  async persistKeys(_ref2, password) {\n    let {\n      public_key,\n      private_key\n    } = _ref2;\n    let {\n      force\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      force: false\n    };\n    if (typeof public_key !== 'string' || typeof private_key !== 'string') {\n      throw new Error('Failed to persist keys as they are not strings.');\n    }\n    const encodedPrivateKey = await this.encodePrivateKey(private_key, password);\n    if (!encodedPrivateKey) {\n      throw new Error('Failed to encode private key with provided password.');\n    }\n    await sdk.rest.post('/v1/e2e.setUserPublicAndPrivateKeys', {\n      public_key,\n      private_key: encodedPrivateKey,\n      force\n    });\n  }\n  async acceptSuggestedKey(rid) {\n    await sdk.rest.post('/v1/e2e.acceptSuggestedGroupKey', {\n      rid\n    });\n  }\n  async rejectSuggestedKey(rid) {\n    await sdk.rest.post('/v1/e2e.rejectSuggestedGroupKey', {\n      rid\n    });\n  }\n  getKeysFromLocalStorage() {\n    return {\n      public_key: Accounts.storageLocation.getItem('public_key'),\n      private_key: Accounts.storageLocation.getItem('private_key')\n    };\n  }\n  initiateHandshake() {\n    Object.keys(this.instancesByRoomId).map(key => this.instancesByRoomId[key].handshake());\n  }\n  openSaveE2EEPasswordModal(randomPassword) {\n    imperativeModal.open({\n      component: SaveE2EPasswordModal,\n      props: {\n        randomPassword,\n        onClose: imperativeModal.close,\n        onCancel: () => {\n          this.closeAlert();\n          imperativeModal.close();\n        },\n        onConfirm: () => {\n          Accounts.storageLocation.removeItem('e2e.randomPassword');\n          this.setState(E2EEState.READY);\n          dispatchToastMessage({\n            type: 'success',\n            message: t('End_To_End_Encryption_Enabled')\n          });\n          this.closeAlert();\n          imperativeModal.close();\n        }\n      }\n    });\n  }\n  async startClient() {\n    if (this.started) {\n      return;\n    }\n    this.log('startClient -> STARTED');\n    this.started = true;\n    let {\n      public_key,\n      private_key\n    } = this.getKeysFromLocalStorage();\n    await this.loadKeysFromDB();\n    if (!public_key && this.db_public_key) {\n      public_key = this.db_public_key;\n    }\n    if (this.shouldAskForE2EEPassword()) {\n      try {\n        this.setState(E2EEState.ENTER_PASSWORD);\n        private_key = await this.decodePrivateKey(this.db_private_key);\n      } catch (error) {\n        this.started = false;\n        failedToDecodeKey = true;\n        this.openAlert({\n          title: \"Wasn't possible to decode your encryption key to be imported.\",\n          // TODO: missing translation\n          html: '<div>Your encryption password seems wrong. Click here to try again.</div>',\n          // TODO: missing translation\n          modifiers: ['large', 'danger'],\n          closable: true,\n          icon: 'key',\n          action: async () => {\n            await this.startClient();\n            this.closeAlert();\n          }\n        });\n        return;\n      }\n    }\n    if (public_key && private_key) {\n      await this.loadKeys({\n        public_key,\n        private_key\n      });\n      this.setState(E2EEState.READY);\n    } else {\n      await this.createAndLoadKeys();\n      this.setState(E2EEState.READY);\n    }\n    if (!this.db_public_key || !this.db_private_key) {\n      this.setState(E2EEState.LOADING_KEYS);\n      await this.persistKeys(this.getKeysFromLocalStorage(), await this.createRandomPassword());\n    }\n    const randomPassword = Accounts.storageLocation.getItem('e2e.randomPassword');\n    if (randomPassword) {\n      this.setState(E2EEState.SAVE_PASSWORD);\n      this.openAlert({\n        title: () => t('Save_your_encryption_password'),\n        html: () => t('Click_here_to_view_and_copy_your_password'),\n        modifiers: ['large'],\n        closable: false,\n        icon: 'key',\n        action: () => this.openSaveE2EEPasswordModal(randomPassword)\n      });\n    }\n  }\n  async stopClient() {\n    this.log('-> Stop Client');\n    this.closeAlert();\n    Accounts.storageLocation.removeItem('public_key');\n    Accounts.storageLocation.removeItem('private_key');\n    this.instancesByRoomId = {};\n    this.privateKey = undefined;\n    this.publicKey = undefined;\n    this.started = false;\n    this.keyDistributionInterval && clearInterval(this.keyDistributionInterval);\n    this.keyDistributionInterval = null;\n    this.setState(E2EEState.DISABLED);\n  }\n  async changePassword(newPassword) {\n    await this.persistKeys(this.getKeysFromLocalStorage(), newPassword, {\n      force: true\n    });\n    if (Accounts.storageLocation.getItem('e2e.randomPassword')) {\n      Accounts.storageLocation.setItem('e2e.randomPassword', newPassword);\n    }\n  }\n  async loadKeysFromDB() {\n    try {\n      this.setState(E2EEState.LOADING_KEYS);\n      const {\n        public_key,\n        private_key\n      } = await sdk.rest.get('/v1/e2e.fetchMyKeys');\n      this.db_public_key = public_key;\n      this.db_private_key = private_key;\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      this.error('Error fetching RSA keys: ', error);\n      // Stop any process since we can't communicate with the server\n      // to get the keys. This prevents new key generation\n      throw error;\n    }\n  }\n  async loadKeys(_ref3) {\n    let {\n      public_key,\n      private_key\n    } = _ref3;\n    Accounts.storageLocation.setItem('public_key', public_key);\n    this.publicKey = public_key;\n    try {\n      this.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n      Accounts.storageLocation.setItem('private_key', private_key);\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error importing private key: ', error);\n    }\n  }\n  async createAndLoadKeys() {\n    // Could not obtain public-private keypair from server.\n    this.setState(E2EEState.LOADING_KEYS);\n    let key;\n    try {\n      key = await generateRSAKey();\n      this.privateKey = key.privateKey;\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error generating key: ', error);\n    }\n    try {\n      const publicKey = await exportJWKKey(key.publicKey);\n      this.publicKey = JSON.stringify(publicKey);\n      Accounts.storageLocation.setItem('public_key', JSON.stringify(publicKey));\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error exporting public key: ', error);\n    }\n    try {\n      const privateKey = await exportJWKKey(key.privateKey);\n      Accounts.storageLocation.setItem('private_key', JSON.stringify(privateKey));\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error exporting private key: ', error);\n    }\n    await this.requestSubscriptionKeys();\n  }\n  async requestSubscriptionKeys() {\n    await sdk.call('e2e.requestSubscriptionKeys');\n  }\n  async createRandomPassword() {\n    const randomPassword = await generateMnemonicPhrase(5);\n    Accounts.storageLocation.setItem('e2e.randomPassword', randomPassword);\n    return randomPassword;\n  }\n  async encodePrivateKey(privateKey, password) {\n    const masterKey = await this.getMasterKey(password);\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    try {\n      const encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n      return EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error encrypting encodedPrivateKey: ', error);\n    }\n  }\n  async getMasterKey(password) {\n    if (password == null) {\n      alert('You should provide a password');\n    }\n    // First, create a PBKDF2 \"key\" containing the password\n    let baseKey;\n    try {\n      baseKey = await importRawKey(toArrayBuffer(password));\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error creating a key based on user password: ', error);\n    }\n    // Derive a key from the password\n    try {\n      return await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n    } catch (error) {\n      this.setState(E2EEState.ERROR);\n      return this.error('Error deriving baseKey: ', error);\n    }\n  }\n  openEnterE2EEPasswordModal(onEnterE2EEPassword) {\n    imperativeModal.open({\n      component: EnterE2EPasswordModal,\n      props: {\n        onClose: imperativeModal.close,\n        onCancel: () => {\n          failedToDecodeKey = false;\n          dispatchToastMessage({\n            type: 'info',\n            message: t('End_To_End_Encryption_Not_Enabled')\n          });\n          this.closeAlert();\n          imperativeModal.close();\n        },\n        onConfirm: password => {\n          onEnterE2EEPassword === null || onEnterE2EEPassword === void 0 ? void 0 : onEnterE2EEPassword(password);\n          this.closeAlert();\n          imperativeModal.close();\n        }\n      }\n    });\n  }\n  async requestPasswordAlert() {\n    return new Promise(resolve => {\n      const showModal = () => this.openEnterE2EEPasswordModal(password => resolve(password));\n      const showAlert = () => {\n        this.openAlert({\n          title: () => t('Enter_your_E2E_password'),\n          html: () => t('Click_here_to_enter_your_encryption_password'),\n          modifiers: ['large'],\n          closable: false,\n          icon: 'key',\n          action() {\n            showModal();\n          }\n        });\n      };\n      if (failedToDecodeKey) {\n        showModal();\n      } else {\n        showAlert();\n      }\n    });\n  }\n  async requestPasswordModal() {\n    return new Promise(resolve => this.openEnterE2EEPasswordModal(password => resolve(password)));\n  }\n  async decodePrivateKeyFlow() {\n    const password = await this.requestPasswordModal();\n    const masterKey = await this.getMasterKey(password);\n    if (!this.db_private_key) {\n      return;\n    }\n    const [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(this.db_private_key));\n    try {\n      const privKey = await decryptAES(vector, masterKey, cipherText);\n      const privateKey = toString(privKey);\n      if (this.db_public_key && privateKey) {\n        await this.loadKeys({\n          public_key: this.db_public_key,\n          private_key: privateKey\n        });\n        this.setState(E2EEState.READY);\n      } else {\n        await this.createAndLoadKeys();\n        this.setState(E2EEState.READY);\n      }\n      dispatchToastMessage({\n        type: 'success',\n        message: t('End_To_End_Encryption_Enabled')\n      });\n    } catch (error) {\n      this.setState(E2EEState.ENTER_PASSWORD);\n      dispatchToastMessage({\n        type: 'error',\n        message: t('Your_E2EE_password_is_incorrect')\n      });\n      dispatchToastMessage({\n        type: 'info',\n        message: t('End_To_End_Encryption_Not_Enabled')\n      });\n      throw new Error('E2E -> Error decrypting private key');\n    }\n  }\n  async decodePrivateKey(privateKey) {\n    const password = await this.requestPasswordAlert();\n    const masterKey = await this.getMasterKey(password);\n    const [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n    try {\n      const privKey = await decryptAES(vector, masterKey, cipherText);\n      return toString(privKey);\n    } catch (error) {\n      this.setState(E2EEState.ENTER_PASSWORD);\n      dispatchToastMessage({\n        type: 'error',\n        message: t('Your_E2EE_password_is_incorrect')\n      });\n      dispatchToastMessage({\n        type: 'info',\n        message: t('End_To_End_Encryption_Not_Enabled')\n      });\n      throw new Error('E2E -> Error decrypting private key');\n    }\n  }\n  async decryptFileContent(file) {\n    if (!file.rid) {\n      return file;\n    }\n    const e2eRoom = await this.getInstanceByRoomId(file.rid);\n    if (!e2eRoom) {\n      return file;\n    }\n    return e2eRoom.decryptContent(file);\n  }\n  async decryptMessage(message) {\n    if (!isE2EEMessage(message) || message.e2e === 'done') {\n      return message;\n    }\n    const e2eRoom = await this.getInstanceByRoomId(message.rid);\n    if (!e2eRoom) {\n      return message;\n    }\n    const decryptedMessage = await e2eRoom.decryptMessage(message);\n    const decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n    return decryptedMessageWithQuote;\n  }\n  async decryptPinnedMessage(message) {\n    var _message$attachments, _message$attachments$;\n    const pinnedMessage = message === null || message === void 0 ? void 0 : (_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : (_message$attachments$ = _message$attachments[0]) === null || _message$attachments$ === void 0 ? void 0 : _message$attachments$.text;\n    if (!pinnedMessage) {\n      return message;\n    }\n    const e2eRoom = await this.getInstanceByRoomId(message.rid);\n    if (!e2eRoom) {\n      return message;\n    }\n    const data = await e2eRoom.decrypt(pinnedMessage);\n    if (!data) {\n      return message;\n    }\n    const decryptedPinnedMessage = _objectSpread({}, message);\n    decryptedPinnedMessage.attachments[0].text = data.text;\n    return decryptedPinnedMessage;\n  }\n  async decryptPendingMessages() {\n    return Messages.find({\n      t: 'e2e',\n      e2e: 'pending'\n    }).forEach(async _ref4 => {\n      let {\n          _id\n        } = _ref4,\n        msg = _objectWithoutProperties(_ref4, _excluded);\n      Messages.update({\n        _id\n      }, await this.decryptMessage(msg));\n    });\n  }\n  async decryptSubscription(subscriptionId) {\n    const e2eRoom = await this.getInstanceByRoomId(subscriptionId);\n    this.log('decryptSubscription ->', subscriptionId);\n    await (e2eRoom === null || e2eRoom === void 0 ? void 0 : e2eRoom.decryptSubscription());\n  }\n  async decryptSubscriptions() {\n    Subscriptions.find({\n      encrypted: true\n    }).forEach(subscription => this.decryptSubscription(subscription._id));\n  }\n  openAlert(config) {\n    banners.open(_objectSpread({\n      id: 'e2e'\n    }, config));\n  }\n  closeAlert() {\n    banners.closeById('e2e');\n  }\n  async parseQuoteAttachment(message) {\n    if (!(message !== null && message !== void 0 && message.msg)) {\n      return message;\n    }\n    const urls = message.msg.match(getMessageUrlRegex()) || [];\n    await Promise.all(urls.map(async url => {\n      if (!url.includes(settings.get('Site_Url'))) {\n        return;\n      }\n      const urlObj = URL.parse(url);\n      // if the URL doesn't have query params (doesn't reference message) skip\n      if (!urlObj.query) {\n        return;\n      }\n      const {\n        msg: msgId\n      } = QueryString.parse(urlObj.query);\n      if (!msgId || Array.isArray(msgId)) {\n        return;\n      }\n      const getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', {\n        msgId\n      });\n      const quotedMessage = getQuotedMessage === null || getQuotedMessage === void 0 ? void 0 : getQuotedMessage.message;\n      if (!quotedMessage) {\n        return;\n      }\n      const decryptedQuoteMessage = await this.decryptMessage(mapMessageFromApi(quotedMessage));\n      message.attachments = message.attachments || [];\n      const useRealName = settings.get('UI_Use_Real_Name');\n      const quoteAttachment = createQuoteAttachment(decryptedQuoteMessage, url, useRealName, getUserAvatarURL(decryptedQuoteMessage.u.username || ''));\n      message.attachments.push(quoteAttachment);\n    }));\n    return message;\n  }\n  async getSuggestedE2EEKeys(usersWaitingForE2EKeys) {\n    const roomIds = Object.keys(usersWaitingForE2EKeys);\n    return Object.fromEntries((await Promise.all(roomIds.map(async room => {\n      const e2eRoom = await this.getInstanceByRoomId(room);\n      if (!e2eRoom) {\n        return;\n      }\n      const usersWithKeys = await e2eRoom.encryptGroupKeyForParticipantsWaitingForTheKeys(usersWaitingForE2EKeys[room]);\n      if (!usersWithKeys) {\n        return;\n      }\n      return [room, usersWithKeys];\n    }))).filter(isTruthy));\n  }\n  async getSample(roomIds) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    if (limit === 0) {\n      return [];\n    }\n    const randomRoomIds = _.sampleSize(roomIds, ROOM_KEY_EXCHANGE_SIZE);\n    const sampleIds = [];\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(randomRoomIds), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const roomId = _step.value;\n        {\n          const e2eroom = await this.getInstanceByRoomId(roomId);\n          if (!(e2eroom !== null && e2eroom !== void 0 && e2eroom.hasSessionKey())) {\n            continue;\n          }\n          sampleIds.push(roomId);\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    if (!sampleIds.length) {\n      return this.getSample(roomIds, limit - 1);\n    }\n    return sampleIds;\n  }\n  async initiateKeyDistribution() {\n    if (this.keyDistributionInterval) {\n      return;\n    }\n    const keyDistribution = async () => {\n      const roomIds = ChatRoom.find({\n        'usersWaitingForE2EKeys': {\n          $exists: true\n        },\n        'usersWaitingForE2EKeys.userId': {\n          $ne: Meteor.userId()\n        }\n      }).map(room => room._id);\n      if (!roomIds.length) {\n        return;\n      }\n      // Prevent function from running and doing nothing when theres something to do\n      const sampleIds = await this.getSample(roomIds);\n      if (!sampleIds.length) {\n        return;\n      }\n      const {\n        usersWaitingForE2EKeys = {}\n      } = await sdk.rest.get('/v1/e2e.fetchUsersWaitingForGroupKey', {\n        roomIds: sampleIds\n      });\n      if (!Object.keys(usersWaitingForE2EKeys).length) {\n        return;\n      }\n      const userKeysWithRooms = await this.getSuggestedE2EEKeys(usersWaitingForE2EKeys);\n      if (!Object.keys(userKeysWithRooms).length) {\n        return;\n      }\n      try {\n        await sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', {\n          usersSuggestedGroupKeys: userKeysWithRooms\n        });\n      } catch (error) {\n        return this.error('Error providing group key to users: ', error);\n      }\n    };\n    // Run first call right away, then schedule for 10s in the future\n    await keyDistribution();\n    this.keyDistributionInterval = setInterval(keyDistribution, 10000);\n  }\n}\nconst e2e = new E2E();","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","export","e2e","QueryString","URL","isE2EEMessage","Emitter","EJSON","_","Accounts","Meteor","Tracker","E2EEState","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptAES","decryptAES","generateRSAKey","exportJWKKey","importRSAKey","importRawKey","deriveKey","generateMnemonicPhrase","log","logError","E2ERoom","banners","*","imperativeModal","dispatchToastMessage","mapMessageFromApi","waitUntilFind","EnterE2EPasswordModal","SaveE2EPasswordModal","createQuoteAttachment","getMessageUrlRegex","isTruthy","ChatRoom","Subscriptions","Messages","settings","getUserAvatarURL","sdk","t","failedToDecodeKey","ROOM_KEY_EXCHANGE_SIZE","E2EEStateDependency","Dependency","E2E","constructor","started","instancesByRoomId","db_public_key","db_private_key","privateKey","publicKey","keyDistributionInterval","state","observable","undefined","on","_ref","prevState","nextState","concat","READY","onE2EEReady","SAVE_PASSWORD","DISABLED","_this$observable","stop","NOT_STARTED","_this$observable2","ERROR","_this$observable3","setState","_len","arguments","length","msg","Array","_key","error","_len2","_key2","getState","isEnabled","isReady","depend","initiateHandshake","handleAsyncE2EESuggestedKey","decryptSubscriptions","initiateKeyDistribution","observeSubscriptions","onSubscriptionChanged","sub","encrypted","E2EKey","removeInstanceByRoomId","rid","e2eRoom","getInstanceByRoomId","E2ESuggestedKey","importGroupKey","acceptSuggestedKey","keyReceived","console","warn","rejectSuggestedKey","resume","pause","isSupportedRoomType","disable","isWaitingKeys","decryptSubscription","_this$observable4","find","observe","changed","setTimeout","added","removed","shouldAskForE2EEPassword","private_key","getKeysFromLocalStorage","emit","subs","$exists","fetch","Promise","all","filter","map","room","findOne","_id","userId","keyID","e2eKeyId","onRoomKeyReset","persistKeys","_ref2","password","public_key","force","Error","encodedPrivateKey","encodePrivateKey","rest","post","storageLocation","getItem","Object","keys","key","handshake","openSaveE2EEPasswordModal","randomPassword","open","component","props","onClose","close","onCancel","closeAlert","onConfirm","removeItem","type","message","startClient","loadKeysFromDB","ENTER_PASSWORD","decodePrivateKey","openAlert","title","html","modifiers","closable","icon","action","loadKeys","createAndLoadKeys","LOADING_KEYS","createRandomPassword","stopClient","clearInterval","changePassword","newPassword","setItem","get","_ref3","parse","JSON","stringify","requestSubscriptionKeys","call","masterKey","getMasterKey","vector","crypto","getRandomValues","Uint8Array","alert","baseKey","openEnterE2EEPasswordModal","onEnterE2EEPassword","requestPasswordAlert","resolve","showModal","showAlert","requestPasswordModal","decodePrivateKeyFlow","cipherText","privKey","decryptFileContent","file","decryptContent","decryptMessage","decryptedMessage","decryptedMessageWithQuote","parseQuoteAttachment","decryptPinnedMessage","_message$attachments","_message$attachments$","pinnedMessage","attachments","text","data","decrypt","decryptedPinnedMessage","decryptPendingMessages","forEach","_ref4","_excluded","update","subscriptionId","subscription","config","id","closeById","urls","match","url","includes","urlObj","query","msgId","isArray","getQuotedMessage","quotedMessage","decryptedQuoteMessage","useRealName","quoteAttachment","u","username","push","getSuggestedE2EEKeys","usersWaitingForE2EKeys","roomIds","fromEntries","usersWithKeys","encryptGroupKeyForParticipantsWaitingForTheKeys","getSample","limit","randomRoomIds","sampleSize","sampleIds","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","roomId","value","e2eroom","hasSessionKey","err","return","keyDistribution","$ne","userKeysWithRooms","usersSuggestedGroupKeys","setInterval"],"sources":["app/e2e/client/rocketchat.e2e.ts"],"sourcesContent":["import QueryString from 'querystring';\nimport URL from 'url';\n\nimport type { IE2EEMessage, IMessage, IRoom, ISubscription, IUser, IUploadWithUser, MessageAttachment } from '@rocket.chat/core-typings';\nimport { isE2EEMessage } from '@rocket.chat/core-typings';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\nimport _ from 'lodash';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Meteor } from 'meteor/meteor';\nimport { Tracker } from 'meteor/tracker';\n\nimport { E2EEState } from './E2EEState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptAES,\n\tdecryptAES,\n\tgenerateRSAKey,\n\texportJWKKey,\n\timportRSAKey,\n\timportRawKey,\n\tderiveKey,\n\tgenerateMnemonicPhrase,\n} from './helper';\nimport { log, logError } from './logger';\nimport { E2ERoom } from './rocketchat.e2e.room';\nimport * as banners from '../../../client/lib/banners';\nimport type { LegacyBannerPayload } from '../../../client/lib/banners';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { mapMessageFromApi } from '../../../client/lib/utils/mapMessageFromApi';\nimport { waitUntilFind } from '../../../client/lib/utils/waitUntilFind';\nimport EnterE2EPasswordModal from '../../../client/views/e2e/EnterE2EPasswordModal';\nimport SaveE2EPasswordModal from '../../../client/views/e2e/SaveE2EPasswordModal';\nimport { createQuoteAttachment } from '../../../lib/createQuoteAttachment';\nimport { getMessageUrlRegex } from '../../../lib/getMessageUrlRegex';\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { settings } from '../../settings/client';\nimport { getUserAvatarURL } from '../../utils/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nimport './events';\n\nlet failedToDecodeKey = false;\n\ntype KeyPair = {\n\tpublic_key: string | null;\n\tprivate_key: string | null;\n};\n\nconst ROOM_KEY_EXCHANGE_SIZE = 10;\nconst E2EEStateDependency = new Tracker.Dependency();\n\nclass E2E extends Emitter {\n\tprivate started: boolean;\n\n\tprivate instancesByRoomId: Record<IRoom['_id'], E2ERoom>;\n\n\tprivate db_public_key: string | null | undefined;\n\n\tprivate db_private_key: string | null | undefined;\n\n\tpublic privateKey: CryptoKey | undefined;\n\n\tpublic publicKey: string | undefined;\n\n\tprivate keyDistributionInterval: ReturnType<typeof setInterval> | null;\n\n\tprivate state: E2EEState;\n\n\tprivate observable: Meteor.LiveQueryHandle | undefined;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.started = false;\n\t\tthis.instancesByRoomId = {};\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.observable = undefined;\n\n\t\tthis.on('E2E_STATE_CHANGED', ({ prevState, nextState }) => {\n\t\t\tthis.log(`${prevState} -> ${nextState}`);\n\t\t});\n\n\t\tthis.on(E2EEState.READY, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.SAVE_PASSWORD, async () => {\n\t\t\tawait this.onE2EEReady();\n\t\t});\n\n\t\tthis.on(E2EEState.DISABLED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.NOT_STARTED, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.on(E2EEState.ERROR, () => {\n\t\t\tthis.observable?.stop();\n\t\t});\n\n\t\tthis.setState(E2EEState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog('E2E', ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError('E2E', ...msg);\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tisEnabled(): boolean {\n\t\treturn this.state !== E2EEState.DISABLED;\n\t}\n\n\tisReady(): boolean {\n\t\tE2EEStateDependency.depend();\n\n\t\t// Save_Password state is also a ready state for E2EE\n\t\treturn this.state === E2EEState.READY || this.state === E2EEState.SAVE_PASSWORD;\n\t}\n\n\tasync onE2EEReady() {\n\t\tthis.log('startClient -> Done');\n\t\tthis.initiateHandshake();\n\t\tawait this.handleAsyncE2EESuggestedKey();\n\t\tthis.log('decryptSubscriptions');\n\t\tawait this.decryptSubscriptions();\n\t\tthis.log('decryptSubscriptions -> Done');\n\t\tawait this.initiateKeyDistribution();\n\t\tthis.log('initiateKeyDistribution -> Done');\n\t\tthis.observeSubscriptions();\n\t\tthis.log('observing subscriptions');\n\t}\n\n\tasync onSubscriptionChanged(sub: ISubscription) {\n\t\tthis.log('Subscription changed', sub);\n\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\treturn;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(sub.rid);\n\t\tif (!e2eRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2ESuggestedKey) {\n\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\tawait this.acceptSuggestedKey(sub.rid);\n\t\t\t\te2eRoom.keyReceived();\n\t\t\t} else {\n\t\t\t\tconsole.warn('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\tawait this.rejectSuggestedKey(sub.rid);\n\t\t\t}\n\t\t}\n\n\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\n\t\t// Cover private groups and direct messages\n\t\tif (!e2eRoom.isSupportedRoomType(sub.t)) {\n\t\t\te2eRoom.disable();\n\t\t\treturn;\n\t\t}\n\n\t\tif (sub.E2EKey && e2eRoom.isWaitingKeys()) {\n\t\t\te2eRoom.keyReceived();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!e2eRoom.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait e2eRoom.decryptSubscription();\n\t}\n\n\tobserveSubscriptions() {\n\t\tthis.observable?.stop();\n\n\t\tthis.observable = Subscriptions.find().observe({\n\t\t\tchanged: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(() => this.onSubscriptionChanged(sub), 0);\n\t\t\t},\n\t\t\tadded: (sub: ISubscription) => {\n\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\tthis.log('Subscription added', sub);\n\t\t\t\t\tif (!sub.encrypted && !sub.E2EKey) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.getInstanceByRoomId(sub.rid);\n\t\t\t\t}, 0);\n\t\t\t},\n\t\t\tremoved: (sub: ISubscription) => {\n\t\t\t\tthis.log('Subscription removed', sub);\n\t\t\t\tthis.removeInstanceByRoomId(sub.rid);\n\t\t\t},\n\t\t});\n\t}\n\n\tshouldAskForE2EEPassword() {\n\t\tconst { private_key } = this.getKeysFromLocalStorage();\n\t\treturn this.db_private_key && !private_key;\n\t}\n\n\tsetState(nextState: E2EEState) {\n\t\tconst prevState = this.state;\n\n\t\tthis.state = nextState;\n\n\t\tE2EEStateDependency.changed();\n\n\t\tthis.emit('E2E_STATE_CHANGED', { prevState, nextState });\n\n\t\tthis.emit(nextState);\n\t}\n\n\tasync handleAsyncE2EESuggestedKey() {\n\t\tconst subs = Subscriptions.find({ E2ESuggestedKey: { $exists: true } }).fetch();\n\t\tawait Promise.all(\n\t\t\tsubs\n\t\t\t\t.filter((sub) => sub.E2ESuggestedKey && !sub.E2EKey)\n\t\t\t\t.map(async (sub) => {\n\t\t\t\t\tconst e2eRoom = await e2e.getInstanceByRoomId(sub.rid);\n\n\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (await e2eRoom.importGroupKey(sub.E2ESuggestedKey)) {\n\t\t\t\t\t\tthis.log('Imported valid E2E suggested key');\n\t\t\t\t\t\tawait e2e.acceptSuggestedKey(sub.rid);\n\t\t\t\t\t\te2eRoom.keyReceived();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.error('Invalid E2ESuggestedKey, rejecting', sub.E2ESuggestedKey);\n\t\t\t\t\t\tawait e2e.rejectSuggestedKey(sub.rid);\n\t\t\t\t\t}\n\n\t\t\t\t\tsub.encrypted ? e2eRoom.resume() : e2eRoom.pause();\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tasync getInstanceByRoomId(rid: IRoom['_id']): Promise<E2ERoom | null> {\n\t\tconst room = await waitUntilFind(() => ChatRoom.findOne({ _id: rid }));\n\n\t\tif (room.t !== 'd' && room.t !== 'p') {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!room.encrypted) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (!this.instancesByRoomId[rid]) {\n\t\t\tthis.instancesByRoomId[rid] = new E2ERoom(Meteor.userId(), room);\n\t\t}\n\n\t\t// When the key was already set and is changed via an update, we update the room instance\n\t\tif (\n\t\t\tthis.instancesByRoomId[rid].keyID !== undefined &&\n\t\t\troom.e2eKeyId !== undefined &&\n\t\t\tthis.instancesByRoomId[rid].keyID !== room.e2eKeyId\n\t\t) {\n\t\t\t// KeyID was changed, update instance with new keyID and put room in waiting keys status\n\t\t\tthis.instancesByRoomId[rid].onRoomKeyReset(room.e2eKeyId);\n\t\t}\n\n\t\treturn this.instancesByRoomId[rid];\n\t}\n\n\tremoveInstanceByRoomId(rid: IRoom['_id']): void {\n\t\tdelete this.instancesByRoomId[rid];\n\t}\n\n\tprivate async persistKeys(\n\t\t{ public_key, private_key }: KeyPair,\n\t\tpassword: string,\n\t\t{ force }: { force: boolean } = { force: false },\n\t): Promise<void> {\n\t\tif (typeof public_key !== 'string' || typeof private_key !== 'string') {\n\t\t\tthrow new Error('Failed to persist keys as they are not strings.');\n\t\t}\n\n\t\tconst encodedPrivateKey = await this.encodePrivateKey(private_key, password);\n\n\t\tif (!encodedPrivateKey) {\n\t\t\tthrow new Error('Failed to encode private key with provided password.');\n\t\t}\n\n\t\tawait sdk.rest.post('/v1/e2e.setUserPublicAndPrivateKeys', {\n\t\t\tpublic_key,\n\t\t\tprivate_key: encodedPrivateKey,\n\t\t\tforce,\n\t\t});\n\t}\n\n\tasync acceptSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.acceptSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tasync rejectSuggestedKey(rid: string): Promise<void> {\n\t\tawait sdk.rest.post('/v1/e2e.rejectSuggestedGroupKey', {\n\t\t\trid,\n\t\t});\n\t}\n\n\tgetKeysFromLocalStorage(): KeyPair {\n\t\treturn {\n\t\t\tpublic_key: Accounts.storageLocation.getItem('public_key'),\n\t\t\tprivate_key: Accounts.storageLocation.getItem('private_key'),\n\t\t};\n\t}\n\n\tinitiateHandshake() {\n\t\tObject.keys(this.instancesByRoomId).map((key) => this.instancesByRoomId[key].handshake());\n\t}\n\n\topenSaveE2EEPasswordModal(randomPassword: string) {\n\t\timperativeModal.open({\n\t\t\tcomponent: SaveE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\trandomPassword,\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: () => {\n\t\t\t\t\tAccounts.storageLocation.removeItem('e2e.randomPassword');\n\t\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync startClient(): Promise<void> {\n\t\tif (this.started) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log('startClient -> STARTED');\n\n\t\tthis.started = true;\n\n\t\tlet { public_key, private_key } = this.getKeysFromLocalStorage();\n\n\t\tawait this.loadKeysFromDB();\n\n\t\tif (!public_key && this.db_public_key) {\n\t\t\tpublic_key = this.db_public_key;\n\t\t}\n\n\t\tif (this.shouldAskForE2EEPassword()) {\n\t\t\ttry {\n\t\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\t\tprivate_key = await this.decodePrivateKey(this.db_private_key as string);\n\t\t\t} catch (error) {\n\t\t\t\tthis.started = false;\n\t\t\t\tfailedToDecodeKey = true;\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: \"Wasn't possible to decode your encryption key to be imported.\", // TODO: missing translation\n\t\t\t\t\thtml: '<div>Your encryption password seems wrong. Click here to try again.</div>', // TODO: missing translation\n\t\t\t\t\tmodifiers: ['large', 'danger'],\n\t\t\t\t\tclosable: true,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction: async () => {\n\t\t\t\t\t\tawait this.startClient();\n\t\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (public_key && private_key) {\n\t\t\tawait this.loadKeys({ public_key, private_key });\n\t\t\tthis.setState(E2EEState.READY);\n\t\t} else {\n\t\t\tawait this.createAndLoadKeys();\n\t\t\tthis.setState(E2EEState.READY);\n\t\t}\n\n\t\tif (!this.db_public_key || !this.db_private_key) {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), await this.createRandomPassword());\n\t\t}\n\n\t\tconst randomPassword = Accounts.storageLocation.getItem('e2e.randomPassword');\n\t\tif (randomPassword) {\n\t\t\tthis.setState(E2EEState.SAVE_PASSWORD);\n\t\t\tthis.openAlert({\n\t\t\t\ttitle: () => t('Save_your_encryption_password'),\n\t\t\t\thtml: () => t('Click_here_to_view_and_copy_your_password'),\n\t\t\t\tmodifiers: ['large'],\n\t\t\t\tclosable: false,\n\t\t\t\ticon: 'key',\n\t\t\t\taction: () => this.openSaveE2EEPasswordModal(randomPassword),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync stopClient(): Promise<void> {\n\t\tthis.log('-> Stop Client');\n\t\tthis.closeAlert();\n\n\t\tAccounts.storageLocation.removeItem('public_key');\n\t\tAccounts.storageLocation.removeItem('private_key');\n\t\tthis.instancesByRoomId = {};\n\t\tthis.privateKey = undefined;\n\t\tthis.publicKey = undefined;\n\t\tthis.started = false;\n\t\tthis.keyDistributionInterval && clearInterval(this.keyDistributionInterval);\n\t\tthis.keyDistributionInterval = null;\n\t\tthis.setState(E2EEState.DISABLED);\n\t}\n\n\tasync changePassword(newPassword: string): Promise<void> {\n\t\tawait this.persistKeys(this.getKeysFromLocalStorage(), newPassword, { force: true });\n\n\t\tif (Accounts.storageLocation.getItem('e2e.randomPassword')) {\n\t\t\tAccounts.storageLocation.setItem('e2e.randomPassword', newPassword);\n\t\t}\n\t}\n\n\tasync loadKeysFromDB(): Promise<void> {\n\t\ttry {\n\t\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\t\tconst { public_key, private_key } = await sdk.rest.get('/v1/e2e.fetchMyKeys');\n\n\t\t\tthis.db_public_key = public_key;\n\t\t\tthis.db_private_key = private_key;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\tthis.error('Error fetching RSA keys: ', error);\n\t\t\t// Stop any process since we can't communicate with the server\n\t\t\t// to get the keys. This prevents new key generation\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync loadKeys({ public_key, private_key }: { public_key: string; private_key: string }): Promise<void> {\n\t\tAccounts.storageLocation.setItem('public_key', public_key);\n\t\tthis.publicKey = public_key;\n\n\t\ttry {\n\t\t\tthis.privateKey = await importRSAKey(EJSON.parse(private_key), ['decrypt']);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', private_key);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error importing private key: ', error);\n\t\t}\n\t}\n\n\tasync createAndLoadKeys(): Promise<void> {\n\t\t// Could not obtain public-private keypair from server.\n\t\tthis.setState(E2EEState.LOADING_KEYS);\n\t\tlet key;\n\t\ttry {\n\t\t\tkey = await generateRSAKey();\n\t\t\tthis.privateKey = key.privateKey;\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error generating key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst publicKey = await exportJWKKey(key.publicKey);\n\n\t\t\tthis.publicKey = JSON.stringify(publicKey);\n\t\t\tAccounts.storageLocation.setItem('public_key', JSON.stringify(publicKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting public key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst privateKey = await exportJWKKey(key.privateKey);\n\n\t\t\tAccounts.storageLocation.setItem('private_key', JSON.stringify(privateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error exporting private key: ', error);\n\t\t}\n\n\t\tawait this.requestSubscriptionKeys();\n\t}\n\n\tasync requestSubscriptionKeys(): Promise<void> {\n\t\tawait sdk.call('e2e.requestSubscriptionKeys');\n\t}\n\n\tasync createRandomPassword(): Promise<string> {\n\t\tconst randomPassword = await generateMnemonicPhrase(5);\n\t\tAccounts.storageLocation.setItem('e2e.randomPassword', randomPassword);\n\t\treturn randomPassword;\n\t}\n\n\tasync encodePrivateKey(privateKey: string, password: string): Promise<string | void> {\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\ttry {\n\t\t\tconst encodedPrivateKey = await encryptAES(vector, masterKey, toArrayBuffer(privateKey));\n\n\t\t\treturn EJSON.stringify(joinVectorAndEcryptedData(vector, encodedPrivateKey));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error encrypting encodedPrivateKey: ', error);\n\t\t}\n\t}\n\n\tasync getMasterKey(password: string): Promise<void | CryptoKey> {\n\t\tif (password == null) {\n\t\t\talert('You should provide a password');\n\t\t}\n\n\t\t// First, create a PBKDF2 \"key\" containing the password\n\t\tlet baseKey;\n\t\ttry {\n\t\t\tbaseKey = await importRawKey(toArrayBuffer(password));\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error creating a key based on user password: ', error);\n\t\t}\n\n\t\t// Derive a key from the password\n\t\ttry {\n\t\t\treturn await deriveKey(toArrayBuffer(Meteor.userId()), baseKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ERROR);\n\t\t\treturn this.error('Error deriving baseKey: ', error);\n\t\t}\n\t}\n\n\topenEnterE2EEPasswordModal(onEnterE2EEPassword?: (password: string) => void) {\n\t\timperativeModal.open({\n\t\t\tcomponent: EnterE2EPasswordModal,\n\t\t\tprops: {\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tfailedToDecodeKey = false;\n\t\t\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t\tonConfirm: (password) => {\n\t\t\t\t\tonEnterE2EEPassword?.(password);\n\t\t\t\t\tthis.closeAlert();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tasync requestPasswordAlert(): Promise<string> {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst showModal = () => this.openEnterE2EEPasswordModal((password) => resolve(password));\n\n\t\t\tconst showAlert = () => {\n\t\t\t\tthis.openAlert({\n\t\t\t\t\ttitle: () => t('Enter_your_E2E_password'),\n\t\t\t\t\thtml: () => t('Click_here_to_enter_your_encryption_password'),\n\t\t\t\t\tmodifiers: ['large'],\n\t\t\t\t\tclosable: false,\n\t\t\t\t\ticon: 'key',\n\t\t\t\t\taction() {\n\t\t\t\t\t\tshowModal();\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (failedToDecodeKey) {\n\t\t\t\tshowModal();\n\t\t\t} else {\n\t\t\t\tshowAlert();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync requestPasswordModal(): Promise<string> {\n\t\treturn new Promise((resolve) => this.openEnterE2EEPasswordModal((password) => resolve(password)));\n\t}\n\n\tasync decodePrivateKeyFlow() {\n\t\tconst password = await this.requestPasswordModal();\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tif (!this.db_private_key) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(this.db_private_key));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\tconst privateKey = toString(privKey) as string;\n\n\t\t\tif (this.db_public_key && privateKey) {\n\t\t\t\tawait this.loadKeys({ public_key: this.db_public_key, private_key: privateKey });\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t} else {\n\t\t\t\tawait this.createAndLoadKeys();\n\t\t\t\tthis.setState(E2EEState.READY);\n\t\t\t}\n\t\t\tdispatchToastMessage({ type: 'success', message: t('End_To_End_Encryption_Enabled') });\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decodePrivateKey(privateKey: string): Promise<string> {\n\t\tconst password = await this.requestPasswordAlert();\n\n\t\tconst masterKey = await this.getMasterKey(password);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(EJSON.parse(privateKey));\n\n\t\ttry {\n\t\t\tconst privKey = await decryptAES(vector, masterKey, cipherText);\n\t\t\treturn toString(privKey);\n\t\t} catch (error) {\n\t\t\tthis.setState(E2EEState.ENTER_PASSWORD);\n\t\t\tdispatchToastMessage({ type: 'error', message: t('Your_E2EE_password_is_incorrect') });\n\t\t\tdispatchToastMessage({ type: 'info', message: t('End_To_End_Encryption_Not_Enabled') });\n\t\t\tthrow new Error('E2E -> Error decrypting private key');\n\t\t}\n\t}\n\n\tasync decryptFileContent(file: IUploadWithUser): Promise<IUploadWithUser> {\n\t\tif (!file.rid) {\n\t\t\treturn file;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(file.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn file;\n\t\t}\n\n\t\treturn e2eRoom.decryptContent(file);\n\t}\n\n\tasync decryptMessage(message: IMessage | IE2EEMessage): Promise<IMessage> {\n\t\tif (!isE2EEMessage(message) || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedMessage: IE2EEMessage = await e2eRoom.decryptMessage(message);\n\n\t\tconst decryptedMessageWithQuote = await this.parseQuoteAttachment(decryptedMessage);\n\n\t\treturn decryptedMessageWithQuote;\n\t}\n\n\tasync decryptPinnedMessage(message: IMessage) {\n\t\tconst pinnedMessage = message?.attachments?.[0]?.text;\n\n\t\tif (!pinnedMessage) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst e2eRoom = await this.getInstanceByRoomId(message.rid);\n\n\t\tif (!e2eRoom) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst data = await e2eRoom.decrypt(pinnedMessage);\n\n\t\tif (!data) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst decryptedPinnedMessage = { ...message } as IMessage & { attachments: MessageAttachment[] };\n\t\tdecryptedPinnedMessage.attachments[0].text = data.text;\n\n\t\treturn decryptedPinnedMessage;\n\t}\n\n\tasync decryptPendingMessages(): Promise<void> {\n\t\treturn Messages.find({ t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }: IMessage) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg as IE2EEMessage));\n\t\t});\n\t}\n\n\tasync decryptSubscription(subscriptionId: ISubscription['_id']): Promise<void> {\n\t\tconst e2eRoom = await this.getInstanceByRoomId(subscriptionId);\n\t\tthis.log('decryptSubscription ->', subscriptionId);\n\t\tawait e2eRoom?.decryptSubscription();\n\t}\n\n\tasync decryptSubscriptions(): Promise<void> {\n\t\tSubscriptions.find({\n\t\t\tencrypted: true,\n\t\t}).forEach((subscription) => this.decryptSubscription(subscription._id));\n\t}\n\n\topenAlert(config: Omit<LegacyBannerPayload, 'id'>): void {\n\t\tbanners.open({ id: 'e2e', ...config });\n\t}\n\n\tcloseAlert(): void {\n\t\tbanners.closeById('e2e');\n\t}\n\n\tasync parseQuoteAttachment(message: IE2EEMessage): Promise<IE2EEMessage> {\n\t\tif (!message?.msg) {\n\t\t\treturn message;\n\t\t}\n\t\tconst urls = message.msg.match(getMessageUrlRegex()) || [];\n\n\t\tawait Promise.all(\n\t\t\turls.map(async (url) => {\n\t\t\t\tif (!url.includes(settings.get('Site_Url'))) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst urlObj = URL.parse(url);\n\t\t\t\t// if the URL doesn't have query params (doesn't reference message) skip\n\t\t\t\tif (!urlObj.query) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst { msg: msgId } = QueryString.parse(urlObj.query);\n\n\t\t\t\tif (!msgId || Array.isArray(msgId)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst getQuotedMessage = await sdk.rest.get('/v1/chat.getMessage', { msgId });\n\t\t\t\tconst quotedMessage = getQuotedMessage?.message;\n\n\t\t\t\tif (!quotedMessage) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst decryptedQuoteMessage = await this.decryptMessage(mapMessageFromApi(quotedMessage));\n\n\t\t\t\tmessage.attachments = message.attachments || [];\n\n\t\t\t\tconst useRealName = settings.get('UI_Use_Real_Name');\n\t\t\t\tconst quoteAttachment = createQuoteAttachment(\n\t\t\t\t\tdecryptedQuoteMessage,\n\t\t\t\t\turl,\n\t\t\t\t\tuseRealName,\n\t\t\t\t\tgetUserAvatarURL(decryptedQuoteMessage.u.username || '') as string,\n\t\t\t\t);\n\n\t\t\t\tmessage.attachments.push(quoteAttachment);\n\t\t\t}),\n\t\t);\n\n\t\treturn message;\n\t}\n\n\tasync getSuggestedE2EEKeys(usersWaitingForE2EKeys: Record<IRoom['_id'], { _id: IUser['_id']; public_key: string }[]>) {\n\t\tconst roomIds = Object.keys(usersWaitingForE2EKeys);\n\t\treturn Object.fromEntries(\n\t\t\t(\n\t\t\t\tawait Promise.all(\n\t\t\t\t\troomIds.map(async (room) => {\n\t\t\t\t\t\tconst e2eRoom = await this.getInstanceByRoomId(room);\n\n\t\t\t\t\t\tif (!e2eRoom) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst usersWithKeys = await e2eRoom.encryptGroupKeyForParticipantsWaitingForTheKeys(usersWaitingForE2EKeys[room]);\n\n\t\t\t\t\t\tif (!usersWithKeys) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [room, usersWithKeys];\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).filter(isTruthy),\n\t\t);\n\t}\n\n\tasync getSample(roomIds: string[], limit = 3): Promise<string[]> {\n\t\tif (limit === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst randomRoomIds = _.sampleSize(roomIds, ROOM_KEY_EXCHANGE_SIZE);\n\n\t\tconst sampleIds: string[] = [];\n\t\tfor await (const roomId of randomRoomIds) {\n\t\t\tconst e2eroom = await this.getInstanceByRoomId(roomId);\n\t\t\tif (!e2eroom?.hasSessionKey()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tsampleIds.push(roomId);\n\t\t}\n\n\t\tif (!sampleIds.length) {\n\t\t\treturn this.getSample(roomIds, limit - 1);\n\t\t}\n\n\t\treturn sampleIds;\n\t}\n\n\tasync initiateKeyDistribution() {\n\t\tif (this.keyDistributionInterval) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyDistribution = async () => {\n\t\t\tconst roomIds = ChatRoom.find({\n\t\t\t\t'usersWaitingForE2EKeys': { $exists: true },\n\t\t\t\t'usersWaitingForE2EKeys.userId': { $ne: Meteor.userId() },\n\t\t\t}).map((room) => room._id);\n\t\t\tif (!roomIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prevent function from running and doing nothing when theres something to do\n\t\t\tconst sampleIds = await this.getSample(roomIds);\n\n\t\t\tif (!sampleIds.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { usersWaitingForE2EKeys = {} } = await sdk.rest.get('/v1/e2e.fetchUsersWaitingForGroupKey', { roomIds: sampleIds });\n\n\t\t\tif (!Object.keys(usersWaitingForE2EKeys).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst userKeysWithRooms = await this.getSuggestedE2EEKeys(usersWaitingForE2EKeys);\n\n\t\t\tif (!Object.keys(userKeysWithRooms).length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys: userKeysWithRooms });\n\t\t\t} catch (error) {\n\t\t\t\treturn this.error('Error providing group key to users: ', error);\n\t\t\t}\n\t\t};\n\n\t\t// Run first call right away, then schedule for 10s in the future\n\t\tawait keyDistribution();\n\t\tthis.keyDistributionInterval = setInterval(keyDistribution, 10000);\n\t}\n}\n\nexport const e2e = new E2E();\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7c1c9e8293771e72e118c81ad0248b31904e02ef"}
