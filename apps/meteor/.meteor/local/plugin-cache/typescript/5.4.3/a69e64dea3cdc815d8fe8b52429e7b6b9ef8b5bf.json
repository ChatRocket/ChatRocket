{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/methods/updateGroupKey.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/e2e/server/methods/updateGroupKey.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/methods/updateGroupKey.ts","inputSourceMap":{"version":3,"file":"app/e2e/server/methods/updateGroupKey.ts","sourceRoot":"","sources":["app/e2e/server/methods/updateGroupKey.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,uBAAuB,EAAE,MAAM,kDAAkD,CAAC;AAC3F,OAAO,EACN,+BAA+B,EAC/B,2BAA2B,EAC3B,uBAAuB,GACvB,MAAM,wCAAwC,CAAC;AAShD,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,YAAoB;IAC/F,qCAAqC;IACrC,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAE9E,IAAI,KAAK,EAAE,CAAC;QACX,iEAAiE;QACjE,IAAI,YAAY,KAAK,GAAG,EAAE,CAAC;YAC1B,MAAM,sBAAsB,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAClF,uFAAuF;YACvF,oEAAoE;YACpE,qEAAqE;YACrE,6EAA6E;YAC7E,kDAAkD;YAClD,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,KAAK,CAAC,gCAAgC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;YAClG,IAAI,sBAAsB,CAAC,aAAa,EAAE,CAAC;gBAC1C,KAAK,+BAA+B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,aAAa,EAAE,CAAC;gBACnB,KAAK,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzC,CAAC;YACD,OAAO;QACR,CAAC;QAED,yCAAyC;QACzC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7E,IAAI,KAAK,EAAE,CAAC;YACX,KAAK,2BAA2B,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;IACF,CAAC;AACF,CAAC;AAED,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;QACvC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,6BAA6B,EAAE,CAAC,CAAC;QACzG,CAAC;QAED,uBAAuB,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC9D,OAAO,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { methodDeprecationLogger } from '../../../lib/server/lib/deprecationWarningLogger';\nimport {\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnRoomChangedById,\n} from '../../../lib/server/lib/notifyListener';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'e2e.updateGroupKey'(rid: string, uid: string, key: string): Promise<void>;\n\t}\n}\n\nexport async function updateGroupKey(rid: string, uid: string, key: string, callerUserId: string) {\n\t// I have a subscription to this room\n\tconst mySub = await Subscriptions.findOneByRoomIdAndUserId(rid, callerUserId);\n\n\tif (mySub) {\n\t\t// Setting the key to myself, can set directly to the final field\n\t\tif (callerUserId === uid) {\n\t\t\tconst setGroupE2EKeyResponse = await Subscriptions.setGroupE2EKey(mySub._id, key);\n\t\t\t// Case: I create an encrypted room before setting up my keys, and I reset the e2e keys\n\t\t\t// Next login, I'll create the keys for the room, and set them here.\n\t\t\t// However as I reset my keys, I'm on the `usersWaitingForKeys` queue\n\t\t\t// So I need to remove myself from the queue and notify the time i reach here\n\t\t\t// This way, I can provide the keys to other users\n\t\t\tconst { modifiedCount } = await Rooms.removeUsersFromE2EEQueueByRoomId(mySub.rid, [callerUserId]);\n\t\t\tif (setGroupE2EKeyResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedById(mySub._id);\n\t\t\t}\n\t\t\tif (modifiedCount) {\n\t\t\t\tvoid notifyOnRoomChangedById(mySub.rid);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// uid also has subscription to this room\n\t\tconst { value } = await Subscriptions.setGroupE2ESuggestedKey(uid, rid, key);\n\t\tif (value) {\n\t\t\tvoid notifyOnSubscriptionChanged(value);\n\t\t}\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'e2e.updateGroupKey'(rid, uid, key) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'e2e.acceptSuggestedGroupKey' });\n\t\t}\n\n\t\tmethodDeprecationLogger.method('e2e.updateGroupKey', '8.0.0');\n\t\treturn updateGroupKey(rid, uid, key, userId);\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/methods/updateGroupKey.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/server/methods/updateGroupKey.ts","inputSourceMap":{"version":3,"file":"app/e2e/server/methods/updateGroupKey.ts","sourceRoot":"","sources":["app/e2e/server/methods/updateGroupKey.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,uBAAuB,EAAE,MAAM,kDAAkD,CAAC;AAC3F,OAAO,EACN,+BAA+B,EAC/B,2BAA2B,EAC3B,uBAAuB,GACvB,MAAM,wCAAwC,CAAC;AAShD,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,GAAW,EAAE,GAAW,EAAE,GAAW,EAAE,YAAoB;IAC/F,qCAAqC;IACrC,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,wBAAwB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAE9E,IAAI,KAAK,EAAE,CAAC;QACX,iEAAiE;QACjE,IAAI,YAAY,KAAK,GAAG,EAAE,CAAC;YAC1B,MAAM,sBAAsB,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAClF,uFAAuF;YACvF,oEAAoE;YACpE,qEAAqE;YACrE,6EAA6E;YAC7E,kDAAkD;YAClD,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,KAAK,CAAC,gCAAgC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;YAClG,IAAI,sBAAsB,CAAC,aAAa,EAAE,CAAC;gBAC1C,KAAK,+BAA+B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjD,CAAC;YACD,IAAI,aAAa,EAAE,CAAC;gBACnB,KAAK,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzC,CAAC;YACD,OAAO;QACR,CAAC;QAED,yCAAyC;QACzC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7E,IAAI,KAAK,EAAE,CAAC;YACX,KAAK,2BAA2B,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;IACF,CAAC;AACF,CAAC;AAED,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;QACvC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,6BAA6B,EAAE,CAAC,CAAC;QACzG,CAAC;QAED,uBAAuB,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC9D,OAAO,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { methodDeprecationLogger } from '../../../lib/server/lib/deprecationWarningLogger';\nimport {\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnRoomChangedById,\n} from '../../../lib/server/lib/notifyListener';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'e2e.updateGroupKey'(rid: string, uid: string, key: string): Promise<void>;\n\t}\n}\n\nexport async function updateGroupKey(rid: string, uid: string, key: string, callerUserId: string) {\n\t// I have a subscription to this room\n\tconst mySub = await Subscriptions.findOneByRoomIdAndUserId(rid, callerUserId);\n\n\tif (mySub) {\n\t\t// Setting the key to myself, can set directly to the final field\n\t\tif (callerUserId === uid) {\n\t\t\tconst setGroupE2EKeyResponse = await Subscriptions.setGroupE2EKey(mySub._id, key);\n\t\t\t// Case: I create an encrypted room before setting up my keys, and I reset the e2e keys\n\t\t\t// Next login, I'll create the keys for the room, and set them here.\n\t\t\t// However as I reset my keys, I'm on the `usersWaitingForKeys` queue\n\t\t\t// So I need to remove myself from the queue and notify the time i reach here\n\t\t\t// This way, I can provide the keys to other users\n\t\t\tconst { modifiedCount } = await Rooms.removeUsersFromE2EEQueueByRoomId(mySub.rid, [callerUserId]);\n\t\t\tif (setGroupE2EKeyResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedById(mySub._id);\n\t\t\t}\n\t\t\tif (modifiedCount) {\n\t\t\t\tvoid notifyOnRoomChangedById(mySub.rid);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// uid also has subscription to this room\n\t\tconst { value } = await Subscriptions.setGroupE2ESuggestedKey(uid, rid, key);\n\t\tif (value) {\n\t\t\tvoid notifyOnSubscriptionChanged(value);\n\t\t}\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'e2e.updateGroupKey'(rid, uid, key) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'e2e.acceptSuggestedGroupKey' });\n\t\t}\n\n\t\tmethodDeprecationLogger.method('e2e.updateGroupKey', '8.0.0');\n\t\treturn updateGroupKey(rid, uid, key, userId);\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      updateGroupKey: () => updateGroupKey\n    });\n    let Subscriptions, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let methodDeprecationLogger;\n    module.link(\"../../../lib/server/lib/deprecationWarningLogger\", {\n      methodDeprecationLogger(v) {\n        methodDeprecationLogger = v;\n      }\n    }, 2);\n    let notifyOnSubscriptionChangedById, notifyOnSubscriptionChanged, notifyOnRoomChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedById(v) {\n        notifyOnSubscriptionChangedById = v;\n      },\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      },\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function updateGroupKey(rid, uid, key, callerUserId) {\n      // I have a subscription to this room\n      const mySub = await Subscriptions.findOneByRoomIdAndUserId(rid, callerUserId);\n      if (mySub) {\n        // Setting the key to myself, can set directly to the final field\n        if (callerUserId === uid) {\n          const setGroupE2EKeyResponse = await Subscriptions.setGroupE2EKey(mySub._id, key);\n          // Case: I create an encrypted room before setting up my keys, and I reset the e2e keys\n          // Next login, I'll create the keys for the room, and set them here.\n          // However as I reset my keys, I'm on the `usersWaitingForKeys` queue\n          // So I need to remove myself from the queue and notify the time i reach here\n          // This way, I can provide the keys to other users\n          const {\n            modifiedCount\n          } = await Rooms.removeUsersFromE2EEQueueByRoomId(mySub.rid, [callerUserId]);\n          if (setGroupE2EKeyResponse.modifiedCount) {\n            void notifyOnSubscriptionChangedById(mySub._id);\n          }\n          if (modifiedCount) {\n            void notifyOnRoomChangedById(mySub.rid);\n          }\n          return;\n        }\n        // uid also has subscription to this room\n        const {\n          value\n        } = await Subscriptions.setGroupE2ESuggestedKey(uid, rid, key);\n        if (value) {\n          void notifyOnSubscriptionChanged(value);\n        }\n      }\n    }\n    Meteor.methods({\n      async 'e2e.updateGroupKey'(rid, uid, key) {\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'e2e.acceptSuggestedGroupKey'\n          });\n        }\n        methodDeprecationLogger.method('e2e.updateGroupKey', '8.0.0');\n        return updateGroupKey(rid, uid, key, userId);\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","updateGroupKey","Subscriptions","Rooms","link","v","Meteor","methodDeprecationLogger","notifyOnSubscriptionChangedById","notifyOnSubscriptionChanged","notifyOnRoomChangedById","__reifyWaitForDeps__","rid","uid","key","callerUserId","mySub","findOneByRoomIdAndUserId","setGroupE2EKeyResponse","setGroupE2EKey","_id","modifiedCount","removeUsersFromE2EEQueueByRoomId","value","setGroupE2ESuggestedKey","methods","e2e.updateGroupKey","userId","Error","method","__reify_async_result__","_reifyError","self","async"],"sources":["app/e2e/server/methods/updateGroupKey.ts"],"sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { methodDeprecationLogger } from '../../../lib/server/lib/deprecationWarningLogger';\nimport {\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChanged,\n\tnotifyOnRoomChangedById,\n} from '../../../lib/server/lib/notifyListener';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'e2e.updateGroupKey'(rid: string, uid: string, key: string): Promise<void>;\n\t}\n}\n\nexport async function updateGroupKey(rid: string, uid: string, key: string, callerUserId: string) {\n\t// I have a subscription to this room\n\tconst mySub = await Subscriptions.findOneByRoomIdAndUserId(rid, callerUserId);\n\n\tif (mySub) {\n\t\t// Setting the key to myself, can set directly to the final field\n\t\tif (callerUserId === uid) {\n\t\t\tconst setGroupE2EKeyResponse = await Subscriptions.setGroupE2EKey(mySub._id, key);\n\t\t\t// Case: I create an encrypted room before setting up my keys, and I reset the e2e keys\n\t\t\t// Next login, I'll create the keys for the room, and set them here.\n\t\t\t// However as I reset my keys, I'm on the `usersWaitingForKeys` queue\n\t\t\t// So I need to remove myself from the queue and notify the time i reach here\n\t\t\t// This way, I can provide the keys to other users\n\t\t\tconst { modifiedCount } = await Rooms.removeUsersFromE2EEQueueByRoomId(mySub.rid, [callerUserId]);\n\t\t\tif (setGroupE2EKeyResponse.modifiedCount) {\n\t\t\t\tvoid notifyOnSubscriptionChangedById(mySub._id);\n\t\t\t}\n\t\t\tif (modifiedCount) {\n\t\t\t\tvoid notifyOnRoomChangedById(mySub.rid);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// uid also has subscription to this room\n\t\tconst { value } = await Subscriptions.setGroupE2ESuggestedKey(uid, rid, key);\n\t\tif (value) {\n\t\t\tvoid notifyOnSubscriptionChanged(value);\n\t\t}\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'e2e.updateGroupKey'(rid, uid, key) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'e2e.acceptSuggestedGroupKey' });\n\t\t}\n\n\t\tmethodDeprecationLogger.method('e2e.updateGroupKey', '8.0.0');\n\t\treturn updateGroupKey(rid, uid, key, userId);\n\t},\n});\n"],"mappings":";;;IACAA,MAAA,CAAOC,MAAE;MAAAC,cAAoB,EAAAA,CAAA,KAAEA;IAAM;IAAA,IAAAC,aAAsB,EAAAC,KAAA;IAAAJ,MAAA,CAAAK,IAAA;MAAAF,cAAAG,CAAA;QAAAH,aAAA,GAAAG,CAAA;MAAA;MAAAF,MAAAE,CAAA;QAAAF,KAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,MAAA;IAAAP,MAAA,CAAAK,IAAA;MAAAE,OAAAD,CAAA;QAAAC,MAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,uBAAA;IAAAR,MAAA,CAAAK,IAAA;MAAAG,wBAAAF,CAAA;QAAAE,uBAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,+BAAA,EAAAC,2BAAA,EAAAC,uBAAA;IAAAX,MAAA,CAAAK,IAAA;MAAAI,gCAAAH,CAAA;QAAAG,+BAAA,GAAAH,CAAA;MAAA;MAAAI,4BAAAJ,CAAA;QAAAI,2BAAA,GAAAJ,CAAA;MAAA;MAAAK,wBAAAL,CAAA;QAAAK,uBAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAiBpD,eAAeV,cAAcA,CAACW,GAAW,EAAEC,GAAW,EAAEC,GAAW,EAAEC,YAAoB;MAC/F;MACA,MAAMC,KAAK,GAAG,MAAMd,aAAa,CAACe,wBAAwB,CAACL,GAAG,EAAEG,YAAY,CAAC;MAE7E,IAAIC,KAAK,EAAE;QACV;QACA,IAAID,YAAY,KAAKF,GAAG,EAAE;UACzB,MAAMK,sBAAsB,GAAG,MAAMhB,aAAa,CAACiB,cAAc,CAACH,KAAK,CAACI,GAAG,EAAEN,GAAG,CAAC;UACjF;UACA;UACA;UACA;UACA;UACA,MAAM;YAAEO;UAAa,CAAE,GAAG,MAAMlB,KAAK,CAACmB,gCAAgC,CAACN,KAAK,CAACJ,GAAG,EAAE,CAACG,YAAY,CAAC,CAAC;UACjG,IAAIG,sBAAsB,CAACG,aAAa,EAAE;YACzC,KAAKb,+BAA+B,CAACQ,KAAK,CAACI,GAAG,CAAC;UAChD;UACA,IAAIC,aAAa,EAAE;YAClB,KAAKX,uBAAuB,CAACM,KAAK,CAACJ,GAAG,CAAC;UACxC;UACA;QACD;QAEA;QACA,MAAM;UAAEW;QAAK,CAAE,GAAG,MAAMrB,aAAa,CAACsB,uBAAuB,CAACX,GAAG,EAAED,GAAG,EAAEE,GAAG,CAAC;QAC5E,IAAIS,KAAK,EAAE;UACV,KAAKd,2BAA2B,CAACc,KAAK,CAAC;QACxC;MACD;IACD;IAEAjB,MAAM,CAACmB,OAAO,CAAgB;MAC7B,MAAM,oBAAoBC,CAACd,GAAG,EAAEC,GAAG,EAAEC,GAAG;QACvC,MAAMa,MAAM,GAAGrB,MAAM,CAACqB,MAAM,EAAE;QAC9B,IAAI,CAACA,MAAM,EAAE;UACZ,MAAM,IAAIrB,MAAM,CAACsB,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE;YAAEC,MAAM,EAAE;UAA6B,CAAE,CAAC;QACxG;QAEAtB,uBAAuB,CAACsB,MAAM,CAAC,oBAAoB,EAAE,OAAO,CAAC;QAC7D,OAAO5B,cAAc,CAACW,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAEa,MAAM,CAAC;MAC7C;KACA,CAAC;IAACG,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"a69e64dea3cdc815d8fe8b52429e7b6b9ef8b5bf"}
