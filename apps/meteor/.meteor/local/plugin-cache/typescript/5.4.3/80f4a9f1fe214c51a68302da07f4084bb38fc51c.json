{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomName.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/channel-settings/server/functions/saveRoomName.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomName.ts","inputSourceMap":{"version":3,"file":"app/channel-settings/server/functions/saveRoomName.ts","sourceRoot":"","sources":["app/channel-settings/server/functions/saveRoomName.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, Room } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { isRoomFederated } from '@rocket.chat/core-typings';\nimport { Integrations, Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport type { Document, UpdateResult } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { checkUsernameAvailability } from '../../../lib/server/functions/checkUsernameAvailability';\nimport { notifyOnIntegrationChangedByChannels, notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { getValidRoomName } from '../../../utils/server/lib/getValidRoomName';\n\nconst updateFName = async (rid: string, displayName: string): Promise<(UpdateResult | Document)[]> => {\n\tconst responses = await Promise.all([Rooms.setFnameById(rid, displayName), Subscriptions.updateFnameByRoomId(rid, displayName)]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nconst updateRoomName = async (rid: string, displayName: string, slugifiedRoomName: string) => {\n\t// Check if the username is available\n\tif (!(await checkUsernameAvailability(slugifiedRoomName))) {\n\t\tthrow new Meteor.Error('error-duplicate-handle', `A room, team or user with name '${slugifiedRoomName}' already exists`, {\n\t\t\tfunction: 'RocketChat.updateRoomName',\n\t\t\thandle: slugifiedRoomName,\n\t\t});\n\t}\n\n\tconst responses = await Promise.all([\n\t\tRooms.setNameById(rid, slugifiedRoomName, displayName),\n\t\tSubscriptions.updateNameAndAlertByRoomId(rid, slugifiedRoomName, displayName),\n\t]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nexport async function saveRoomName(\n\trid: string,\n\tdisplayName: string | undefined,\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<string | undefined> {\n\tconst room = await Rooms.findOneById(rid);\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tif (roomCoordinator.getRoomDirectives(room.t).preventRenaming()) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tawait Room.beforeNameChange(room);\n\n\tif (displayName === room.name) {\n\t\treturn;\n\t}\n\n\tif (!displayName?.trim()) {\n\t\treturn;\n\t}\n\n\tconst isDiscussion = Boolean(room?.prid);\n\n\tconst slugifiedRoomName = isDiscussion ? displayName : await getValidRoomName(displayName, rid);\n\n\tlet update;\n\n\tif (isDiscussion || isRoomFederated(room)) {\n\t\tupdate = await updateFName(rid, displayName);\n\t} else {\n\t\tupdate = await updateRoomName(rid, displayName, slugifiedRoomName);\n\t}\n\n\tif (!update) {\n\t\treturn;\n\t}\n\n\tif (room.name && !isDiscussion) {\n\t\tawait Integrations.updateRoomName(room.name, slugifiedRoomName);\n\t\tvoid notifyOnIntegrationChangedByChannels([slugifiedRoomName]);\n\t}\n\n\tif (sendMessage) {\n\t\tawait Message.saveSystemMessage('r', rid, displayName, user);\n\t}\n\n\tawait callbacks.run('afterRoomNameChange', { rid, name: displayName, oldName: room.name });\n\treturn displayName;\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/channel-settings/server/functions/saveRoomName.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/channel-settings/server/functions/saveRoomName.ts","inputSourceMap":{"version":3,"file":"app/channel-settings/server/functions/saveRoomName.ts","sourceRoot":"","sources":["app/channel-settings/server/functions/saveRoomName.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, Room } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { isRoomFederated } from '@rocket.chat/core-typings';\nimport { Integrations, Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport type { Document, UpdateResult } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { checkUsernameAvailability } from '../../../lib/server/functions/checkUsernameAvailability';\nimport { notifyOnIntegrationChangedByChannels, notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { getValidRoomName } from '../../../utils/server/lib/getValidRoomName';\n\nconst updateFName = async (rid: string, displayName: string): Promise<(UpdateResult | Document)[]> => {\n\tconst responses = await Promise.all([Rooms.setFnameById(rid, displayName), Subscriptions.updateFnameByRoomId(rid, displayName)]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nconst updateRoomName = async (rid: string, displayName: string, slugifiedRoomName: string) => {\n\t// Check if the username is available\n\tif (!(await checkUsernameAvailability(slugifiedRoomName))) {\n\t\tthrow new Meteor.Error('error-duplicate-handle', `A room, team or user with name '${slugifiedRoomName}' already exists`, {\n\t\t\tfunction: 'RocketChat.updateRoomName',\n\t\t\thandle: slugifiedRoomName,\n\t\t});\n\t}\n\n\tconst responses = await Promise.all([\n\t\tRooms.setNameById(rid, slugifiedRoomName, displayName),\n\t\tSubscriptions.updateNameAndAlertByRoomId(rid, slugifiedRoomName, displayName),\n\t]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nexport async function saveRoomName(\n\trid: string,\n\tdisplayName: string | undefined,\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<string | undefined> {\n\tconst room = await Rooms.findOneById(rid);\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tif (roomCoordinator.getRoomDirectives(room.t).preventRenaming()) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tawait Room.beforeNameChange(room);\n\n\tif (displayName === room.name) {\n\t\treturn;\n\t}\n\n\tif (!displayName?.trim()) {\n\t\treturn;\n\t}\n\n\tconst isDiscussion = Boolean(room?.prid);\n\n\tconst slugifiedRoomName = isDiscussion ? displayName : await getValidRoomName(displayName, rid);\n\n\tlet update;\n\n\tif (isDiscussion || isRoomFederated(room)) {\n\t\tupdate = await updateFName(rid, displayName);\n\t} else {\n\t\tupdate = await updateRoomName(rid, displayName, slugifiedRoomName);\n\t}\n\n\tif (!update) {\n\t\treturn;\n\t}\n\n\tif (room.name && !isDiscussion) {\n\t\tawait Integrations.updateRoomName(room.name, slugifiedRoomName);\n\t\tvoid notifyOnIntegrationChangedByChannels([slugifiedRoomName]);\n\t}\n\n\tif (sendMessage) {\n\t\tawait Message.saveSystemMessage('r', rid, displayName, user);\n\t}\n\n\tawait callbacks.run('afterRoomNameChange', { rid, name: displayName, oldName: room.name });\n\treturn displayName;\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      saveRoomName: () => saveRoomName\n    });\n    let Message, Room;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      },\n      Room(v) {\n        Room = v;\n      }\n    }, 0);\n    let isRoomFederated;\n    module.link(\"@rocket.chat/core-typings\", {\n      isRoomFederated(v) {\n        isRoomFederated = v;\n      }\n    }, 1);\n    let Integrations, Rooms, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Integrations(v) {\n        Integrations = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 5);\n    let checkUsernameAvailability;\n    module.link(\"../../../lib/server/functions/checkUsernameAvailability\", {\n      checkUsernameAvailability(v) {\n        checkUsernameAvailability = v;\n      }\n    }, 6);\n    let notifyOnIntegrationChangedByChannels, notifyOnSubscriptionChangedByRoomId;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnIntegrationChangedByChannels(v) {\n        notifyOnIntegrationChangedByChannels = v;\n      },\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      }\n    }, 7);\n    let getValidRoomName;\n    module.link(\"../../../utils/server/lib/getValidRoomName\", {\n      getValidRoomName(v) {\n        getValidRoomName = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const updateFName = async (rid, displayName) => {\n      var _responses$;\n      const responses = await Promise.all([Rooms.setFnameById(rid, displayName), Subscriptions.updateFnameByRoomId(rid, displayName)]);\n      if ((_responses$ = responses[1]) !== null && _responses$ !== void 0 && _responses$.modifiedCount) {\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      return responses;\n    };\n    const updateRoomName = async (rid, displayName, slugifiedRoomName) => {\n      var _responses$2;\n      // Check if the username is available\n      if (!(await checkUsernameAvailability(slugifiedRoomName))) {\n        throw new Meteor.Error('error-duplicate-handle', \"A room, team or user with name '\".concat(slugifiedRoomName, \"' already exists\"), {\n          function: 'RocketChat.updateRoomName',\n          handle: slugifiedRoomName\n        });\n      }\n      const responses = await Promise.all([Rooms.setNameById(rid, slugifiedRoomName, displayName), Subscriptions.updateNameAndAlertByRoomId(rid, slugifiedRoomName, displayName)]);\n      if ((_responses$2 = responses[1]) !== null && _responses$2 !== void 0 && _responses$2.modifiedCount) {\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      return responses;\n    };\n    async function saveRoomName(rid, displayName, user) {\n      let sendMessage = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      const room = await Rooms.findOneById(rid);\n      if (!room) {\n        throw new Meteor.Error('error-invalid-room', 'Invalid room', {\n          function: 'RocketChat.saveRoomdisplayName'\n        });\n      }\n      if (roomCoordinator.getRoomDirectives(room.t).preventRenaming()) {\n        throw new Meteor.Error('error-not-allowed', 'Not allowed', {\n          function: 'RocketChat.saveRoomdisplayName'\n        });\n      }\n      await Room.beforeNameChange(room);\n      if (displayName === room.name) {\n        return;\n      }\n      if (!(displayName !== null && displayName !== void 0 && displayName.trim())) {\n        return;\n      }\n      const isDiscussion = Boolean(room === null || room === void 0 ? void 0 : room.prid);\n      const slugifiedRoomName = isDiscussion ? displayName : await getValidRoomName(displayName, rid);\n      let update;\n      if (isDiscussion || isRoomFederated(room)) {\n        update = await updateFName(rid, displayName);\n      } else {\n        update = await updateRoomName(rid, displayName, slugifiedRoomName);\n      }\n      if (!update) {\n        return;\n      }\n      if (room.name && !isDiscussion) {\n        await Integrations.updateRoomName(room.name, slugifiedRoomName);\n        void notifyOnIntegrationChangedByChannels([slugifiedRoomName]);\n      }\n      if (sendMessage) {\n        await Message.saveSystemMessage('r', rid, displayName, user);\n      }\n      await callbacks.run('afterRoomNameChange', {\n        rid,\n        name: displayName,\n        oldName: room.name\n      });\n      return displayName;\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","saveRoomName","Message","Room","link","v","isRoomFederated","Integrations","Rooms","Subscriptions","Meteor","callbacks","roomCoordinator","checkUsernameAvailability","notifyOnIntegrationChangedByChannels","notifyOnSubscriptionChangedByRoomId","getValidRoomName","__reifyWaitForDeps__","updateFName","rid","displayName","_responses$","responses","Promise","all","setFnameById","updateFnameByRoomId","modifiedCount","updateRoomName","slugifiedRoomName","_responses$2","Error","concat","function","handle","setNameById","updateNameAndAlertByRoomId","user","sendMessage","arguments","length","undefined","room","findOneById","getRoomDirectives","t","preventRenaming","beforeNameChange","name","trim","isDiscussion","Boolean","prid","update","saveSystemMessage","run","oldName","__reify_async_result__","_reifyError","self","async"],"sources":["app/channel-settings/server/functions/saveRoomName.ts"],"sourcesContent":["import { Message, Room } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { isRoomFederated } from '@rocket.chat/core-typings';\nimport { Integrations, Rooms, Subscriptions } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport type { Document, UpdateResult } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { checkUsernameAvailability } from '../../../lib/server/functions/checkUsernameAvailability';\nimport { notifyOnIntegrationChangedByChannels, notifyOnSubscriptionChangedByRoomId } from '../../../lib/server/lib/notifyListener';\nimport { getValidRoomName } from '../../../utils/server/lib/getValidRoomName';\n\nconst updateFName = async (rid: string, displayName: string): Promise<(UpdateResult | Document)[]> => {\n\tconst responses = await Promise.all([Rooms.setFnameById(rid, displayName), Subscriptions.updateFnameByRoomId(rid, displayName)]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nconst updateRoomName = async (rid: string, displayName: string, slugifiedRoomName: string) => {\n\t// Check if the username is available\n\tif (!(await checkUsernameAvailability(slugifiedRoomName))) {\n\t\tthrow new Meteor.Error('error-duplicate-handle', `A room, team or user with name '${slugifiedRoomName}' already exists`, {\n\t\t\tfunction: 'RocketChat.updateRoomName',\n\t\t\thandle: slugifiedRoomName,\n\t\t});\n\t}\n\n\tconst responses = await Promise.all([\n\t\tRooms.setNameById(rid, slugifiedRoomName, displayName),\n\t\tSubscriptions.updateNameAndAlertByRoomId(rid, slugifiedRoomName, displayName),\n\t]);\n\n\tif (responses[1]?.modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\treturn responses;\n};\n\nexport async function saveRoomName(\n\trid: string,\n\tdisplayName: string | undefined,\n\tuser: IUser,\n\tsendMessage = true,\n): Promise<string | undefined> {\n\tconst room = await Rooms.findOneById(rid);\n\tif (!room) {\n\t\tthrow new Meteor.Error('error-invalid-room', 'Invalid room', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tif (roomCoordinator.getRoomDirectives(room.t).preventRenaming()) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\tfunction: 'RocketChat.saveRoomdisplayName',\n\t\t});\n\t}\n\n\tawait Room.beforeNameChange(room);\n\n\tif (displayName === room.name) {\n\t\treturn;\n\t}\n\n\tif (!displayName?.trim()) {\n\t\treturn;\n\t}\n\n\tconst isDiscussion = Boolean(room?.prid);\n\n\tconst slugifiedRoomName = isDiscussion ? displayName : await getValidRoomName(displayName, rid);\n\n\tlet update;\n\n\tif (isDiscussion || isRoomFederated(room)) {\n\t\tupdate = await updateFName(rid, displayName);\n\t} else {\n\t\tupdate = await updateRoomName(rid, displayName, slugifiedRoomName);\n\t}\n\n\tif (!update) {\n\t\treturn;\n\t}\n\n\tif (room.name && !isDiscussion) {\n\t\tawait Integrations.updateRoomName(room.name, slugifiedRoomName);\n\t\tvoid notifyOnIntegrationChangedByChannels([slugifiedRoomName]);\n\t}\n\n\tif (sendMessage) {\n\t\tawait Message.saveSystemMessage('r', rid, displayName, user);\n\t}\n\n\tawait callbacks.run('afterRoomNameChange', { rid, name: displayName, oldName: room.name });\n\treturn displayName;\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"80f4a9f1fe214c51a68302da07f4084bb38fc51c"}
