{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Outgoing.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/features/EmailInbox/EmailInbox_Outgoing.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Outgoing.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox_Outgoing.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox_Outgoing.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAE5D,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AACrF,OAAO,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAGrC,OAAO,EAAE,UAAU,EAAE,MAAM,iCAAiC,CAAC;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,+CAA+C,CAAC;AAC5E,OAAO,EAAE,qBAAqB,EAAE,MAAM,4CAA4C,CAAC;AACnF,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,wCAAwC,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,mBAAmB,GAAG,kEAAkE,CAAC;AAE/F,MAAM,gBAAgB,GAAG,KAAK,IAA2B,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;AAE5F,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAS,UAAU,CAAC,IAAI,IAAI,CAAC;AAC1D,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AAEnC,sDAAsD;AACtD,MAAM,qBAAqB,GAAG,KAAK,EAAE,KAAa,EAAE,OAAY,EAAE,EAAE;IACnE,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;QACtC,OAAO;IACR,CAAC;IAED,MAAM,OAAO,GAAG;QACf,SAAS,EAAE,KAAK;QAChB,GAAG,EAAE,IAAI,OAAO,CAAC,MAAM,iEAAiE,KAAK,EAAE;QAC/F,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,EAAE,EAAE,IAAI,IAAI,EAAE;KACd,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,gBAAgB,EAAE,CAAC;IACtC,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO;IACR,CAAC;IAED,OAAO,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,KAAK,EAAE,OAAkE,EAAE,EAAE;IAC5G,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;QAC5C,OAAO;IACR,CAAC;IACD,MAAM,OAAO,GAAG;QACf,SAAS,EAAE,KAAK;QAChB,GAAG,EAAE,IAAI,OAAO,CAAC,MAAM,mCAAmC;QAC1D,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG;QACrB,EAAE,EAAE,IAAI,IAAI,EAAE;KACd,CAAC;IAEF,MAAM,IAAI,GAAG,MAAM,gBAAgB,EAAE,CAAC;IACtC,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO;IACR,CAAC;IAED,OAAO,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,KAAK,UAAU,SAAS,CAAC,KAAY,EAAE,IAAkB,EAAE,OAAa;IACvE,OAAO,KAAK,CAAC,IAAI;SACf,QAAQ,CAAC;QACT,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU;YAC5B,CAAC,CAAC;gBACA,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU;gBAC7B,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;aAC1B;YACH,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK;QACrB,GAAG,IAAI;KACP,CAAC;SACD,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;QACd,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACb,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACpB,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAE,GAAG,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,MAAM,qBAAqB,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC;AAED,aAAa,CAAC,GAAG,CAAC;IACjB,OAAO,EAAE,qBAAqB;IAC9B,QAAQ,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAqD,EAAE,EAAE;QAC1F,IAAI,OAAO,KAAK,qBAAqB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;YACtE,OAAO;QACR,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC;YACpB,OAAO;QACR,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAmB,OAAO,CAAC,GAAG,CAAC,CAAC;QAEpE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;YAClB,OAAO;QACR,CAAC;QAED,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE5C,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,qBAAqB,CAAC,eAAe,IAAI,CAAC,KAAK,CAAC,KAAK,yBAAyB,EAAE;gBACtF,KAAK,EAAE,OAAO,CAAC,GAAG;gBAClB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ;gBAC1B,GAAG,EAAE,IAAI,CAAC,GAAG;aACb,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEzD,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO;QACR,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,MAAM,EAAE,CAAC;YACZ,KAAK,SAAS,CACb,KAAK,EACL;gBACC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO;gBACvB,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO;gBAC5B,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,EAAE;gBACjD,WAAW,EAAE;oBACZ;wBACC,OAAO,EAAE,MAAM;wBACf,WAAW,EAAE,IAAI,CAAC,IAAI;wBACtB,QAAQ,EAAE,IAAI,CAAC,IAAI;qBACnB;iBACD;gBACD,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM;gBACzF,UAAU,EAAG,EAAe,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,IAAI,EAAE,CAAC;aAC7D,EACD;gBACC,KAAK,EAAE,OAAO,CAAC,GAAG;gBAClB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ;gBAC1B,GAAG,EAAE,OAAO,CAAC,GAAG;aAChB,CACD,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QACrF,CAAC;QAED,MAAM,QAAQ,CAAC,SAAS,CACvB,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EACpB;YACC,IAAI,EAAE;gBACL,MAAM,EAAE;oBACP;wBACC,IAAI,EAAE,SAAS;wBACf,QAAQ,EAAE;4BACT;gCACC,IAAI,EAAE,QAAQ;gCACd,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,OAAO,CAAC,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;6BACzF;yBACD;qBACD;iBACD;aACD;YACD,KAAK,EAAE;gBACN,WAAW,EAAE,EAAE,gBAAgB,EAAE,QAAQ,EAAE;aAC3C;SACD,CACD,CAAC;QACF,KAAK,qBAAqB,CAAC;YAC1B,EAAE,EAAE,OAAO,CAAC,GAAG;SACf,CAAC,CAAC;QAEH,OAAO,uBAAuB,CAAC;YAC9B,KAAK,EAAE,OAAO,CAAC,GAAG;YAClB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ;YAC1B,IAAI;SACJ,CAAC,CAAC;IACJ,CAAC;IACD,OAAO,EAAE;QACR,WAAW,EAAE,0BAA0B;QACvC,MAAM,EAAE,QAAQ;KAChB;IACD,eAAe,EAAE,KAAK;CACtB,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,CACZ,kBAAkB,EAClB,KAAK,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE;IAC5C,MAAM,IAAI,GAAG,eAAmC,CAAC;IAEjD,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,gBAAgB,EAAE,CAAC;IACtC,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;QAClE,MAAM,WAAW,CAChB,IAAI,EACJ;YACC,GAAG,EAAE,EAAE;YACP,WAAW,EAAE;gBACZ;oBACC,OAAO,EAAE;wBACR;4BACC,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,CAAC,CAAC,8BAA8B,CAAC;4BACvC,GAAG,EAAE,wBAAwB,OAAO,CAAC,GAAG,EAAE;4BAC1C,kBAAkB,EAAE,IAAI;4BACxB,mBAAmB,EAAE,aAAa;yBAClC;qBACD;iBACD;aACD;SACD,EACD,IAAI,EACJ,IAAI,CACJ,CAAC;QACF,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;IAExB,6CAA6C;IAC7C,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7C,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;QACpB,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAE5C,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,MAAM,qBAAqB,CAAC,eAAe,IAAI,CAAC,KAAK,CAAC,KAAK,yBAAyB,EAAE;YACrF,KAAK,EAAE,OAAO,CAAC,GAAG;YAClB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ;YAC1B,GAAG,EAAE,IAAI,CAAC,GAAG;SACb,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnE,IAAI,CAAC,cAAc,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC;QAC7F,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,KAAK,SAAS,CACb,KAAK,EACL;QACC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI;QACvB,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,SAAS;QACzC,UAAU,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC,EAAE,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC;QACxF,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;KAC3B,EACD;QACC,KAAK,EAAE,OAAO,CAAC,GAAG;QAClB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,QAAQ;QAC1B,GAAG,EAAE,IAAI,CAAC,GAAG;KACb,CACD,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAEpF,OAAO,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;IAEhC,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;IAE1B,OAAO,CAAC,MAAM,GAAG;QAChB;YACC,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE;gBACT;oBACC,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,OAAO,CAAC,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;iBACzF;aACD;SACD;QACD;YACC,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;gBACL,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,OAAO,CAAC,GAAG;aACjB;SACD;QACD;YACC,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;gBACL,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,UAAU,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;aACzD;SACD;KACD,CAAC;IAEF,OAAO,OAAO,CAAC,IAAI,CAAC;IAEpB,OAAO,OAAO,CAAC;AAChB,CAAC,EACD,SAAS,CAAC,QAAQ,CAAC,GAAG,EACtB,YAAY,CACZ,CAAC;AAEF,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,gBAA6B,EAAE,IAAW;IACpF,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAElD,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC;IAEtE,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,SAAS,CAAC,KAAK,EAAE;QACrB,EAAE,EAAE,OAAO;QACX,OAAO,EAAE,6BAA6B;QACtC,IAAI,EAAE,wCAAwC;KAC9C,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { isIMessageInbox } from '@rocket.chat/core-typings';\nimport type { IEmailInbox, IUser, IOmnichannelRoom, SlashCommandCallbackParams } from '@rocket.chat/core-typings';\nimport { Messages, Uploads, LivechatRooms, Rooms, Users } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { FileUpload } from '../../../app/file-upload/server';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\nimport { slashCommands } from '../../../app/utils/server/slashCommand';\nimport { callbacks } from '../../../lib/callbacks';\nimport { i18n } from '../../lib/i18n';\nimport { inboxes } from './EmailInbox';\nimport type { Inbox } from './EmailInbox';\nimport { logger } from './logger';\n\nconst livechatQuoteRegExp = /^\\[\\s\\]\\(https?:\\/\\/.+\\/live\\/.+\\?msg=(?<id>.+?)\\)\\s(?<text>.+)/s;\n\nconst getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\n\nconst language = settings.get<string>('Language') || 'en';\nconst t = i18n.getFixedT(language);\n\n// TODO: change these messages with room notifications\nconst sendErrorReplyMessage = async (error: string, options: any) => {\n\tif (!options?.rid || !options?.msgId) {\n\t\treturn;\n\t}\n\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} something went wrong when replying email, sorry. **Error:**: ${error}`,\n\t\t_id: String(Date.now()),\n\t\trid: options.rid,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, { _id: options.rid });\n};\n\nconst sendSuccessReplyMessage = async (options: { room: IOmnichannelRoom; msgId: string; sender: string }) => {\n\tif (!options?.room?._id || !options?.msgId) {\n\t\treturn;\n\t}\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} Attachment was sent successfully`,\n\t\t_id: String(Date.now()),\n\t\trid: options.room._id,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, options.room);\n};\n\nasync function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\n\treturn inbox.smtp\n\t\t.sendMail({\n\t\t\tfrom: inbox.config.senderInfo\n\t\t\t\t? {\n\t\t\t\t\t\tname: inbox.config.senderInfo,\n\t\t\t\t\t\taddress: inbox.config.email,\n\t\t\t\t  }\n\t\t\t\t: inbox.config.email,\n\t\t\t...mail,\n\t\t})\n\t\t.then((info) => {\n\t\t\tlogger.info({ msg: 'Message sent', info });\n\t\t\treturn info;\n\t\t})\n\t\t.catch(async (err) => {\n\t\t\tlogger.error({ msg: 'Error sending Email reply', err });\n\n\t\t\tif (!options?.msgId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait sendErrorReplyMessage(err.message, options);\n\t\t});\n}\n\nslashCommands.add({\n\tcommand: 'sendEmailAttachment',\n\tcallback: async ({ command, params }: SlashCommandCallbackParams<'sendEmailAttachment'>) => {\n\t\tif (command !== 'sendEmailAttachment' || !Match.test(params, String)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await Messages.findOneById(params.trim());\n\t\tif (!message?.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<IOmnichannelRoom>(message.rid);\n\n\t\tif (!room?.email) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\treturn sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\t\t}\n\n\t\tconst file = await Uploads.findOneById(message.file._id);\n\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tif (buffer) {\n\t\t\tvoid sendEmail(\n\t\t\t\tinbox,\n\t\t\t\t{\n\t\t\t\t\tto: room.email?.replyTo,\n\t\t\t\t\tsubject: room.email?.subject,\n\t\t\t\t\ttext: message?.attachments?.[0].description || '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: buffer,\n\t\t\t\t\t\t\tcontentType: file.type,\n\t\t\t\t\t\t\tfilename: file.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinReplyTo: Array.isArray(room.email?.thread) ? room.email?.thread[0] : room.email?.thread,\n\t\t\t\t\treferences: ([] as string[]).concat(room.email?.thread || []),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmsgId: message._id,\n\t\t\t\t\tsender: message.u.username,\n\t\t\t\t\trid: message.rid,\n\t\t\t\t},\n\t\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\t\t}\n\n\t\tawait Messages.updateOne(\n\t\t\t{ _id: message._id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'context',\n\t\t\t\t\t\t\telements: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t$pull: {\n\t\t\t\t\tattachments: { 'actions.0.type': 'button' },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn sendSuccessReplyMessage({\n\t\t\tmsgId: message._id,\n\t\t\tsender: message.u.username,\n\t\t\troom,\n\t\t});\n\t},\n\toptions: {\n\t\tdescription: 'Send attachment as email',\n\t\tparams: 'msg_id',\n\t},\n\tprovidesPreview: false,\n});\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room: omnichannelRoom }) => {\n\t\tconst room = omnichannelRoom as IOmnichannelRoom;\n\n\t\tif (!room?.email?.inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst user = await getRocketCatUser();\n\t\tif (!user) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.files?.length && message.u.username !== 'rocket.cat') {\n\t\t\tawait sendMessage(\n\t\t\t\tuser,\n\t\t\t\t{\n\t\t\t\t\tmsg: '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\ttext: t('Send_via_Email_as_attachment'),\n\t\t\t\t\t\t\t\t\tmsg: `/sendEmailAttachment ${message._id}`,\n\t\t\t\t\t\t\t\t\tmsg_in_chat_window: true,\n\t\t\t\t\t\t\t\t\tmsg_processing_type: 'sendMessage',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { msg } = message;\n\n\t\t// Try to identify a quote in a livechat room\n\t\tconst match = msg.match(livechatQuoteRegExp);\n\t\tif (!match?.groups) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\tawait sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst replyToMessage = await Messages.findOneById(match.groups.id);\n\t\tif (!replyToMessage || !isIMessageInbox(replyToMessage) || !replyToMessage.email?.messageId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tvoid sendEmail(\n\t\t\tinbox,\n\t\t\t{\n\t\t\t\ttext: match.groups.text,\n\t\t\t\tinReplyTo: replyToMessage.email.messageId,\n\t\t\t\treferences: [...(replyToMessage.email.references ?? []), replyToMessage.email.messageId],\n\t\t\t\tto: room.email.replyTo,\n\t\t\t\tsubject: room.email.subject,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t},\n\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\n\t\tmessage.msg = match.groups.text;\n\n\t\tmessage.groupable = false;\n\n\t\tmessage.blocks = [\n\t\t\t{\n\t\t\t\ttype: 'context',\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: `> ---\\n${replyToMessage.msg.replace(/^/gm, '> ')}`,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\tdelete message.urls;\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'ReplyEmail',\n);\n\nexport async function sendTestEmailToInbox(emailInboxRecord: IEmailInbox, user: IUser): Promise<void> {\n\tconst inbox = inboxes.get(emailInboxRecord.email);\n\n\tif (!inbox) {\n\t\tthrow new Error('inbox-not-found');\n\t}\n\n\tconst address = user.emails?.find((email) => email.verified)?.address;\n\n\tif (!address) {\n\t\tthrow new Error('user-without-verified-email');\n\t}\n\n\tvoid sendEmail(inbox, {\n\t\tto: address,\n\t\tsubject: 'Test of inbox configuration',\n\t\ttext: 'Test of inbox configuration successful',\n\t});\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox_Outgoing.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/features/EmailInbox/EmailInbox_Outgoing.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox_Outgoing.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox_Outgoing.ts"],"names":[],"mappings":"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","sourcesContent":["import { isIMessageInbox } from '@rocket.chat/core-typings';\nimport type { IEmailInbox, IUser, IOmnichannelRoom, SlashCommandCallbackParams } from '@rocket.chat/core-typings';\nimport { Messages, Uploads, LivechatRooms, Rooms, Users } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { FileUpload } from '../../../app/file-upload/server';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\nimport { slashCommands } from '../../../app/utils/server/slashCommand';\nimport { callbacks } from '../../../lib/callbacks';\nimport { i18n } from '../../lib/i18n';\nimport { inboxes } from './EmailInbox';\nimport type { Inbox } from './EmailInbox';\nimport { logger } from './logger';\n\nconst livechatQuoteRegExp = /^\\[\\s\\]\\(https?:\\/\\/.+\\/live\\/.+\\?msg=(?<id>.+?)\\)\\s(?<text>.+)/s;\n\nconst getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\n\nconst language = settings.get<string>('Language') || 'en';\nconst t = i18n.getFixedT(language);\n\n// TODO: change these messages with room notifications\nconst sendErrorReplyMessage = async (error: string, options: any) => {\n\tif (!options?.rid || !options?.msgId) {\n\t\treturn;\n\t}\n\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} something went wrong when replying email, sorry. **Error:**: ${error}`,\n\t\t_id: String(Date.now()),\n\t\trid: options.rid,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, { _id: options.rid });\n};\n\nconst sendSuccessReplyMessage = async (options: { room: IOmnichannelRoom; msgId: string; sender: string }) => {\n\tif (!options?.room?._id || !options?.msgId) {\n\t\treturn;\n\t}\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} Attachment was sent successfully`,\n\t\t_id: String(Date.now()),\n\t\trid: options.room._id,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, options.room);\n};\n\nasync function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\n\treturn inbox.smtp\n\t\t.sendMail({\n\t\t\tfrom: inbox.config.senderInfo\n\t\t\t\t? {\n\t\t\t\t\t\tname: inbox.config.senderInfo,\n\t\t\t\t\t\taddress: inbox.config.email,\n\t\t\t\t  }\n\t\t\t\t: inbox.config.email,\n\t\t\t...mail,\n\t\t})\n\t\t.then((info) => {\n\t\t\tlogger.info({ msg: 'Message sent', info });\n\t\t\treturn info;\n\t\t})\n\t\t.catch(async (err) => {\n\t\t\tlogger.error({ msg: 'Error sending Email reply', err });\n\n\t\t\tif (!options?.msgId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait sendErrorReplyMessage(err.message, options);\n\t\t});\n}\n\nslashCommands.add({\n\tcommand: 'sendEmailAttachment',\n\tcallback: async ({ command, params }: SlashCommandCallbackParams<'sendEmailAttachment'>) => {\n\t\tif (command !== 'sendEmailAttachment' || !Match.test(params, String)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await Messages.findOneById(params.trim());\n\t\tif (!message?.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<IOmnichannelRoom>(message.rid);\n\n\t\tif (!room?.email) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\treturn sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\t\t}\n\n\t\tconst file = await Uploads.findOneById(message.file._id);\n\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tif (buffer) {\n\t\t\tvoid sendEmail(\n\t\t\t\tinbox,\n\t\t\t\t{\n\t\t\t\t\tto: room.email?.replyTo,\n\t\t\t\t\tsubject: room.email?.subject,\n\t\t\t\t\ttext: message?.attachments?.[0].description || '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: buffer,\n\t\t\t\t\t\t\tcontentType: file.type,\n\t\t\t\t\t\t\tfilename: file.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinReplyTo: Array.isArray(room.email?.thread) ? room.email?.thread[0] : room.email?.thread,\n\t\t\t\t\treferences: ([] as string[]).concat(room.email?.thread || []),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmsgId: message._id,\n\t\t\t\t\tsender: message.u.username,\n\t\t\t\t\trid: message.rid,\n\t\t\t\t},\n\t\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\t\t}\n\n\t\tawait Messages.updateOne(\n\t\t\t{ _id: message._id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'context',\n\t\t\t\t\t\t\telements: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t$pull: {\n\t\t\t\t\tattachments: { 'actions.0.type': 'button' },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn sendSuccessReplyMessage({\n\t\t\tmsgId: message._id,\n\t\t\tsender: message.u.username,\n\t\t\troom,\n\t\t});\n\t},\n\toptions: {\n\t\tdescription: 'Send attachment as email',\n\t\tparams: 'msg_id',\n\t},\n\tprovidesPreview: false,\n});\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room: omnichannelRoom }) => {\n\t\tconst room = omnichannelRoom as IOmnichannelRoom;\n\n\t\tif (!room?.email?.inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst user = await getRocketCatUser();\n\t\tif (!user) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.files?.length && message.u.username !== 'rocket.cat') {\n\t\t\tawait sendMessage(\n\t\t\t\tuser,\n\t\t\t\t{\n\t\t\t\t\tmsg: '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\ttext: t('Send_via_Email_as_attachment'),\n\t\t\t\t\t\t\t\t\tmsg: `/sendEmailAttachment ${message._id}`,\n\t\t\t\t\t\t\t\t\tmsg_in_chat_window: true,\n\t\t\t\t\t\t\t\t\tmsg_processing_type: 'sendMessage',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { msg } = message;\n\n\t\t// Try to identify a quote in a livechat room\n\t\tconst match = msg.match(livechatQuoteRegExp);\n\t\tif (!match?.groups) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\tawait sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst replyToMessage = await Messages.findOneById(match.groups.id);\n\t\tif (!replyToMessage || !isIMessageInbox(replyToMessage) || !replyToMessage.email?.messageId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tvoid sendEmail(\n\t\t\tinbox,\n\t\t\t{\n\t\t\t\ttext: match.groups.text,\n\t\t\t\tinReplyTo: replyToMessage.email.messageId,\n\t\t\t\treferences: [...(replyToMessage.email.references ?? []), replyToMessage.email.messageId],\n\t\t\t\tto: room.email.replyTo,\n\t\t\t\tsubject: room.email.subject,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t},\n\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\n\t\tmessage.msg = match.groups.text;\n\n\t\tmessage.groupable = false;\n\n\t\tmessage.blocks = [\n\t\t\t{\n\t\t\t\ttype: 'context',\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: `> ---\\n${replyToMessage.msg.replace(/^/gm, '> ')}`,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\tdelete message.urls;\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'ReplyEmail',\n);\n\nexport async function sendTestEmailToInbox(emailInboxRecord: IEmailInbox, user: IUser): Promise<void> {\n\tconst inbox = inboxes.get(emailInboxRecord.email);\n\n\tif (!inbox) {\n\t\tthrow new Error('inbox-not-found');\n\t}\n\n\tconst address = user.emails?.find((email) => email.verified)?.address;\n\n\tif (!address) {\n\t\tthrow new Error('user-without-verified-email');\n\t}\n\n\tvoid sendEmail(inbox, {\n\t\tto: address,\n\t\tsubject: 'Test of inbox configuration',\n\t\ttext: 'Test of inbox configuration successful',\n\t});\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      sendTestEmailToInbox: () => sendTestEmailToInbox\n    });\n    let isIMessageInbox;\n    module.link(\"@rocket.chat/core-typings\", {\n      isIMessageInbox(v) {\n        isIMessageInbox = v;\n      }\n    }, 0);\n    let Messages, Uploads, LivechatRooms, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Match;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      }\n    }, 2);\n    let FileUpload;\n    module.link(\"../../../app/file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 3);\n    let sendMessage;\n    module.link(\"../../../app/lib/server/functions/sendMessage\", {\n      sendMessage(v) {\n        sendMessage = v;\n      }\n    }, 4);\n    let notifyOnMessageChange;\n    module.link(\"../../../app/lib/server/lib/notifyListener\", {\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 5);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 6);\n    let slashCommands;\n    module.link(\"../../../app/utils/server/slashCommand\", {\n      slashCommands(v) {\n        slashCommands = v;\n      }\n    }, 7);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 8);\n    let i18n;\n    module.link(\"../../lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 9);\n    let inboxes;\n    module.link(\"./EmailInbox\", {\n      inboxes(v) {\n        inboxes = v;\n      }\n    }, 10);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const livechatQuoteRegExp = /^\\[\\s\\]\\(https?:\\/\\/.+\\/live\\/.+\\?msg=(?<id>.+?)\\)\\s(?<text>.+)/s;\n    const getRocketCatUser = async () => Users.findOneById('rocket.cat');\n    const language = settings.get('Language') || 'en';\n    const t = i18n.getFixedT(language);\n    // TODO: change these messages with room notifications\n    const sendErrorReplyMessage = async (error, options) => {\n      if (!(options !== null && options !== void 0 && options.rid) || !(options !== null && options !== void 0 && options.msgId)) {\n        return;\n      }\n      const message = {\n        groupable: false,\n        msg: \"@\".concat(options.sender, \" something went wrong when replying email, sorry. **Error:**: \").concat(error),\n        _id: String(Date.now()),\n        rid: options.rid,\n        ts: new Date()\n      };\n      const user = await getRocketCatUser();\n      if (!user) {\n        return;\n      }\n      return sendMessage(user, message, {\n        _id: options.rid\n      });\n    };\n    const sendSuccessReplyMessage = async options => {\n      var _options$room;\n      if (!(options !== null && options !== void 0 && (_options$room = options.room) !== null && _options$room !== void 0 && _options$room._id) || !(options !== null && options !== void 0 && options.msgId)) {\n        return;\n      }\n      const message = {\n        groupable: false,\n        msg: \"@\".concat(options.sender, \" Attachment was sent successfully\"),\n        _id: String(Date.now()),\n        rid: options.room._id,\n        ts: new Date()\n      };\n      const user = await getRocketCatUser();\n      if (!user) {\n        return;\n      }\n      return sendMessage(user, message, options.room);\n    };\n    async function sendEmail(inbox, mail, options) {\n      return inbox.smtp.sendMail(_objectSpread({\n        from: inbox.config.senderInfo ? {\n          name: inbox.config.senderInfo,\n          address: inbox.config.email\n        } : inbox.config.email\n      }, mail)).then(info => {\n        logger.info({\n          msg: 'Message sent',\n          info\n        });\n        return info;\n      }).catch(async err => {\n        logger.error({\n          msg: 'Error sending Email reply',\n          err\n        });\n        if (!(options !== null && options !== void 0 && options.msgId)) {\n          return;\n        }\n        await sendErrorReplyMessage(err.message, options);\n      });\n    }\n    slashCommands.add({\n      command: 'sendEmailAttachment',\n      callback: async _ref => {\n        let {\n          command,\n          params\n        } = _ref;\n        if (command !== 'sendEmailAttachment' || !Match.test(params, String)) {\n          return;\n        }\n        const message = await Messages.findOneById(params.trim());\n        if (!(message !== null && message !== void 0 && message.file)) {\n          return;\n        }\n        const room = await Rooms.findOneById(message.rid);\n        if (!(room !== null && room !== void 0 && room.email)) {\n          return;\n        }\n        const inbox = inboxes.get(room.email.inbox);\n        if (!inbox) {\n          return sendErrorReplyMessage(\"Email inbox \".concat(room.email.inbox, \" not found or disabled.\"), {\n            msgId: message._id,\n            sender: message.u.username,\n            rid: room._id\n          });\n        }\n        const file = await Uploads.findOneById(message.file._id);\n        if (!file) {\n          return;\n        }\n        const buffer = await FileUpload.getBuffer(file);\n        if (buffer) {\n          var _room$email, _room$email2, _message$attachments, _room$email3, _room$email4, _room$email5, _room$email6;\n          void sendEmail(inbox, {\n            to: (_room$email = room.email) === null || _room$email === void 0 ? void 0 : _room$email.replyTo,\n            subject: (_room$email2 = room.email) === null || _room$email2 === void 0 ? void 0 : _room$email2.subject,\n            text: (message === null || message === void 0 ? void 0 : (_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments[0].description) || '',\n            attachments: [{\n              content: buffer,\n              contentType: file.type,\n              filename: file.name\n            }],\n            inReplyTo: Array.isArray((_room$email3 = room.email) === null || _room$email3 === void 0 ? void 0 : _room$email3.thread) ? (_room$email4 = room.email) === null || _room$email4 === void 0 ? void 0 : _room$email4.thread[0] : (_room$email5 = room.email) === null || _room$email5 === void 0 ? void 0 : _room$email5.thread,\n            references: [].concat(((_room$email6 = room.email) === null || _room$email6 === void 0 ? void 0 : _room$email6.thread) || [])\n          }, {\n            msgId: message._id,\n            sender: message.u.username,\n            rid: message.rid\n          }).then(info => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n        }\n        await Messages.updateOne({\n          _id: message._id\n        }, {\n          $set: {\n            blocks: [{\n              type: 'context',\n              elements: [{\n                type: 'mrkdwn',\n                text: \"**\".concat(t('To'), \":** \").concat(room.email.replyTo, \"\\n**\").concat(t('Subject'), \":** \").concat(room.email.subject)\n              }]\n            }]\n          },\n          $pull: {\n            attachments: {\n              'actions.0.type': 'button'\n            }\n          }\n        });\n        void notifyOnMessageChange({\n          id: message._id\n        });\n        return sendSuccessReplyMessage({\n          msgId: message._id,\n          sender: message.u.username,\n          room\n        });\n      },\n      options: {\n        description: 'Send attachment as email',\n        params: 'msg_id'\n      },\n      providesPreview: false\n    });\n    callbacks.add('afterSaveMessage', async (message, _ref2) => {\n      var _room$email7, _message$files, _replyToMessage$email, _replyToMessage$email2;\n      let {\n        room: omnichannelRoom\n      } = _ref2;\n      const room = omnichannelRoom;\n      if (!(room !== null && room !== void 0 && (_room$email7 = room.email) !== null && _room$email7 !== void 0 && _room$email7.inbox)) {\n        return message;\n      }\n      const user = await getRocketCatUser();\n      if (!user) {\n        return message;\n      }\n      if ((_message$files = message.files) !== null && _message$files !== void 0 && _message$files.length && message.u.username !== 'rocket.cat') {\n        await sendMessage(user, {\n          msg: '',\n          attachments: [{\n            actions: [{\n              type: 'button',\n              text: t('Send_via_Email_as_attachment'),\n              msg: \"/sendEmailAttachment \".concat(message._id),\n              msg_in_chat_window: true,\n              msg_processing_type: 'sendMessage'\n            }]\n          }]\n        }, room, true);\n        return message;\n      }\n      const {\n        msg\n      } = message;\n      // Try to identify a quote in a livechat room\n      const match = msg.match(livechatQuoteRegExp);\n      if (!(match !== null && match !== void 0 && match.groups)) {\n        return message;\n      }\n      const inbox = inboxes.get(room.email.inbox);\n      if (!inbox) {\n        await sendErrorReplyMessage(\"Email inbox \".concat(room.email.inbox, \" not found or disabled.\"), {\n          msgId: message._id,\n          sender: message.u.username,\n          rid: room._id\n        });\n        return message;\n      }\n      if (!inbox) {\n        return message;\n      }\n      const replyToMessage = await Messages.findOneById(match.groups.id);\n      if (!replyToMessage || !isIMessageInbox(replyToMessage) || !((_replyToMessage$email = replyToMessage.email) !== null && _replyToMessage$email !== void 0 && _replyToMessage$email.messageId)) {\n        return message;\n      }\n      void sendEmail(inbox, {\n        text: match.groups.text,\n        inReplyTo: replyToMessage.email.messageId,\n        references: [...((_replyToMessage$email2 = replyToMessage.email.references) !== null && _replyToMessage$email2 !== void 0 ? _replyToMessage$email2 : []), replyToMessage.email.messageId],\n        to: room.email.replyTo,\n        subject: room.email.subject\n      }, {\n        msgId: message._id,\n        sender: message.u.username,\n        rid: room._id\n      }).then(info => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n      message.msg = match.groups.text;\n      message.groupable = false;\n      message.blocks = [{\n        type: 'context',\n        elements: [{\n          type: 'mrkdwn',\n          text: \"**\".concat(t('To'), \":** \").concat(room.email.replyTo, \"\\n**\").concat(t('Subject'), \":** \").concat(room.email.subject)\n        }]\n      }, {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: message.msg\n        }\n      }, {\n        type: 'section',\n        text: {\n          type: 'mrkdwn',\n          text: \"> ---\\n\".concat(replyToMessage.msg.replace(/^/gm, '> '))\n        }\n      }];\n      delete message.urls;\n      return message;\n    }, callbacks.priority.LOW, 'ReplyEmail');\n    async function sendTestEmailToInbox(emailInboxRecord, user) {\n      var _user$emails, _user$emails$find;\n      const inbox = inboxes.get(emailInboxRecord.email);\n      if (!inbox) {\n        throw new Error('inbox-not-found');\n      }\n      const address = (_user$emails = user.emails) === null || _user$emails === void 0 ? void 0 : (_user$emails$find = _user$emails.find(email => email.verified)) === null || _user$emails$find === void 0 ? void 0 : _user$emails$find.address;\n      if (!address) {\n        throw new Error('user-without-verified-email');\n      }\n      void sendEmail(inbox, {\n        to: address,\n        subject: 'Test of inbox configuration',\n        text: 'Test of inbox configuration successful'\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","sendTestEmailToInbox","isIMessageInbox","Messages","Uploads","LivechatRooms","Rooms","Users","Match","FileUpload","sendMessage","notifyOnMessageChange","settings","slashCommands","callbacks","i18n","inboxes","logger","__reifyWaitForDeps__","livechatQuoteRegExp","getRocketCatUser","findOneById","language","get","t","getFixedT","sendErrorReplyMessage","error","options","rid","msgId","message","groupable","msg","concat","sender","_id","String","Date","now","ts","user","sendSuccessReplyMessage","_options$room","room","sendEmail","inbox","mail","smtp","sendMail","from","config","senderInfo","name","address","email","then","info","catch","err","add","command","callback","_ref","params","test","trim","file","u","username","buffer","getBuffer","_room$email","_room$email2","_message$attachments","_room$email3","_room$email4","_room$email5","_room$email6","to","replyTo","subject","text","attachments","description","content","contentType","type","filename","inReplyTo","Array","isArray","thread","references","updateEmailThreadByRoomId","messageId","updateOne","$set","blocks","elements","$pull","id","providesPreview","_ref2","_room$email7","_message$files","_replyToMessage$email","_replyToMessage$email2","omnichannelRoom","files","length","actions","msg_in_chat_window","msg_processing_type","match","groups","replyToMessage","replace","urls","priority","LOW","emailInboxRecord","_user$emails","_user$emails$find","Error","emails","find","verified","__reify_async_result__","_reifyError","self","async"],"sources":["server/features/EmailInbox/EmailInbox_Outgoing.ts"],"sourcesContent":["import { isIMessageInbox } from '@rocket.chat/core-typings';\nimport type { IEmailInbox, IUser, IOmnichannelRoom, SlashCommandCallbackParams } from '@rocket.chat/core-typings';\nimport { Messages, Uploads, LivechatRooms, Rooms, Users } from '@rocket.chat/models';\nimport { Match } from 'meteor/check';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { FileUpload } from '../../../app/file-upload/server';\nimport { sendMessage } from '../../../app/lib/server/functions/sendMessage';\nimport { notifyOnMessageChange } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\nimport { slashCommands } from '../../../app/utils/server/slashCommand';\nimport { callbacks } from '../../../lib/callbacks';\nimport { i18n } from '../../lib/i18n';\nimport { inboxes } from './EmailInbox';\nimport type { Inbox } from './EmailInbox';\nimport { logger } from './logger';\n\nconst livechatQuoteRegExp = /^\\[\\s\\]\\(https?:\\/\\/.+\\/live\\/.+\\?msg=(?<id>.+?)\\)\\s(?<text>.+)/s;\n\nconst getRocketCatUser = async (): Promise<IUser | null> => Users.findOneById('rocket.cat');\n\nconst language = settings.get<string>('Language') || 'en';\nconst t = i18n.getFixedT(language);\n\n// TODO: change these messages with room notifications\nconst sendErrorReplyMessage = async (error: string, options: any) => {\n\tif (!options?.rid || !options?.msgId) {\n\t\treturn;\n\t}\n\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} something went wrong when replying email, sorry. **Error:**: ${error}`,\n\t\t_id: String(Date.now()),\n\t\trid: options.rid,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, { _id: options.rid });\n};\n\nconst sendSuccessReplyMessage = async (options: { room: IOmnichannelRoom; msgId: string; sender: string }) => {\n\tif (!options?.room?._id || !options?.msgId) {\n\t\treturn;\n\t}\n\tconst message = {\n\t\tgroupable: false,\n\t\tmsg: `@${options.sender} Attachment was sent successfully`,\n\t\t_id: String(Date.now()),\n\t\trid: options.room._id,\n\t\tts: new Date(),\n\t};\n\n\tconst user = await getRocketCatUser();\n\tif (!user) {\n\t\treturn;\n\t}\n\n\treturn sendMessage(user, message, options.room);\n};\n\nasync function sendEmail(inbox: Inbox, mail: Mail.Options, options?: any): Promise<{ messageId: string }> {\n\treturn inbox.smtp\n\t\t.sendMail({\n\t\t\tfrom: inbox.config.senderInfo\n\t\t\t\t? {\n\t\t\t\t\t\tname: inbox.config.senderInfo,\n\t\t\t\t\t\taddress: inbox.config.email,\n\t\t\t\t  }\n\t\t\t\t: inbox.config.email,\n\t\t\t...mail,\n\t\t})\n\t\t.then((info) => {\n\t\t\tlogger.info({ msg: 'Message sent', info });\n\t\t\treturn info;\n\t\t})\n\t\t.catch(async (err) => {\n\t\t\tlogger.error({ msg: 'Error sending Email reply', err });\n\n\t\t\tif (!options?.msgId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait sendErrorReplyMessage(err.message, options);\n\t\t});\n}\n\nslashCommands.add({\n\tcommand: 'sendEmailAttachment',\n\tcallback: async ({ command, params }: SlashCommandCallbackParams<'sendEmailAttachment'>) => {\n\t\tif (command !== 'sendEmailAttachment' || !Match.test(params, String)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await Messages.findOneById(params.trim());\n\t\tif (!message?.file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<IOmnichannelRoom>(message.rid);\n\n\t\tif (!room?.email) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\treturn sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\t\t}\n\n\t\tconst file = await Uploads.findOneById(message.file._id);\n\n\t\tif (!file) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst buffer = await FileUpload.getBuffer(file);\n\t\tif (buffer) {\n\t\t\tvoid sendEmail(\n\t\t\t\tinbox,\n\t\t\t\t{\n\t\t\t\t\tto: room.email?.replyTo,\n\t\t\t\t\tsubject: room.email?.subject,\n\t\t\t\t\ttext: message?.attachments?.[0].description || '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontent: buffer,\n\t\t\t\t\t\t\tcontentType: file.type,\n\t\t\t\t\t\t\tfilename: file.name,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinReplyTo: Array.isArray(room.email?.thread) ? room.email?.thread[0] : room.email?.thread,\n\t\t\t\t\treferences: ([] as string[]).concat(room.email?.thread || []),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tmsgId: message._id,\n\t\t\t\t\tsender: message.u.username,\n\t\t\t\t\trid: message.rid,\n\t\t\t\t},\n\t\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\t\t}\n\n\t\tawait Messages.updateOne(\n\t\t\t{ _id: message._id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'context',\n\t\t\t\t\t\t\telements: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t$pull: {\n\t\t\t\t\tattachments: { 'actions.0.type': 'button' },\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn sendSuccessReplyMessage({\n\t\t\tmsgId: message._id,\n\t\t\tsender: message.u.username,\n\t\t\troom,\n\t\t});\n\t},\n\toptions: {\n\t\tdescription: 'Send attachment as email',\n\t\tparams: 'msg_id',\n\t},\n\tprovidesPreview: false,\n});\n\ncallbacks.add(\n\t'afterSaveMessage',\n\tasync (message, { room: omnichannelRoom }) => {\n\t\tconst room = omnichannelRoom as IOmnichannelRoom;\n\n\t\tif (!room?.email?.inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst user = await getRocketCatUser();\n\t\tif (!user) {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.files?.length && message.u.username !== 'rocket.cat') {\n\t\t\tawait sendMessage(\n\t\t\t\tuser,\n\t\t\t\t{\n\t\t\t\t\tmsg: '',\n\t\t\t\t\tattachments: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactions: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\t\t\ttext: t('Send_via_Email_as_attachment'),\n\t\t\t\t\t\t\t\t\tmsg: `/sendEmailAttachment ${message._id}`,\n\t\t\t\t\t\t\t\t\tmsg_in_chat_window: true,\n\t\t\t\t\t\t\t\t\tmsg_processing_type: 'sendMessage',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\troom,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\treturn message;\n\t\t}\n\n\t\tconst { msg } = message;\n\n\t\t// Try to identify a quote in a livechat room\n\t\tconst match = msg.match(livechatQuoteRegExp);\n\t\tif (!match?.groups) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst inbox = inboxes.get(room.email.inbox);\n\n\t\tif (!inbox) {\n\t\t\tawait sendErrorReplyMessage(`Email inbox ${room.email.inbox} not found or disabled.`, {\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t});\n\n\t\t\treturn message;\n\t\t}\n\n\t\tif (!inbox) {\n\t\t\treturn message;\n\t\t}\n\n\t\tconst replyToMessage = await Messages.findOneById(match.groups.id);\n\t\tif (!replyToMessage || !isIMessageInbox(replyToMessage) || !replyToMessage.email?.messageId) {\n\t\t\treturn message;\n\t\t}\n\n\t\tvoid sendEmail(\n\t\t\tinbox,\n\t\t\t{\n\t\t\t\ttext: match.groups.text,\n\t\t\t\tinReplyTo: replyToMessage.email.messageId,\n\t\t\t\treferences: [...(replyToMessage.email.references ?? []), replyToMessage.email.messageId],\n\t\t\t\tto: room.email.replyTo,\n\t\t\t\tsubject: room.email.subject,\n\t\t\t},\n\t\t\t{\n\t\t\t\tmsgId: message._id,\n\t\t\t\tsender: message.u.username,\n\t\t\t\trid: room._id,\n\t\t\t},\n\t\t).then((info) => LivechatRooms.updateEmailThreadByRoomId(room._id, info.messageId));\n\n\t\tmessage.msg = match.groups.text;\n\n\t\tmessage.groupable = false;\n\n\t\tmessage.blocks = [\n\t\t\t{\n\t\t\t\ttype: 'context',\n\t\t\t\telements: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\t\ttext: `**${t('To')}:** ${room.email.replyTo}\\n**${t('Subject')}:** ${room.email.subject}`,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'section',\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'mrkdwn',\n\t\t\t\t\ttext: `> ---\\n${replyToMessage.msg.replace(/^/gm, '> ')}`,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\tdelete message.urls;\n\n\t\treturn message;\n\t},\n\tcallbacks.priority.LOW,\n\t'ReplyEmail',\n);\n\nexport async function sendTestEmailToInbox(emailInboxRecord: IEmailInbox, user: IUser): Promise<void> {\n\tconst inbox = inboxes.get(emailInboxRecord.email);\n\n\tif (!inbox) {\n\t\tthrow new Error('inbox-not-found');\n\t}\n\n\tconst address = user.emails?.find((email) => email.verified)?.address;\n\n\tif (!address) {\n\t\tthrow new Error('user-without-verified-email');\n\t}\n\n\tvoid sendEmail(inbox, {\n\t\tto: address,\n\t\tsubject: 'Test of inbox configuration',\n\t\ttext: 'Test of inbox configuration successful',\n\t});\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"43dc9d209bf2cd082b25b677002cec8d1a5585c6"}
