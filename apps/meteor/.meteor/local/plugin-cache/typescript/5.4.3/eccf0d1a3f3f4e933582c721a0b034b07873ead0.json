{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/irc/server/methods/resetIrcConnection.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/irc/server/methods/resetIrcConnection.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/irc/server/methods/resetIrcConnection.ts","inputSourceMap":{"version":3,"file":"app/irc/server/methods/resetIrcConnection.ts","sourceRoot":"","sources":["app/irc/server/methods/resetIrcConnection.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,mBAAmB,EAAE,MAAM,uDAAuD,CAAC;AAC5F,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AACpF,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,MAAM,MAAM,eAAe,CAAC;AASnC,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,kBAAkB;QACvB,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAE5B,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,oBAAoB,EAAE,CAAC,CAAC;QAChG,CAAC;QAED,MAAM,qBAAqB,GAAG,mBAAmB,CAAC;YACjD,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,CAAC,MAAM,MAAM,CAAC,SAAS,EAAE,CAAE,CAAC,QAAS;YAC/C,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,aAAa,IAAI,EAAE;YACxC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,EAAE;SAC5D,CAAC,CAAC;QAEH,MAAM,oBAAoB,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,eAAe,EAAE,sBAAsB,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;YACvH,MAAM,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,IAAI,oBAAoB,CAAC,aAAa,IAAI,oBAAoB,CAAC,aAAa,EAAE,CAAC;YAC9E,KAAK,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;QACzD,CAAC;QAED,MAAM,qBAAqB,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,eAAe,EAAE,uBAAuB,EAAE,IAAI,IAAI,EAAE,EAAE;YACxH,MAAM,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,IAAI,qBAAqB,CAAC,aAAa,IAAI,qBAAqB,CAAC,aAAa,EAAE,CAAC;YAChF,KAAK,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YACjB,OAAO;gBACN,OAAO,EAAE,mBAAmB;gBAC5B,MAAM,EAAE,EAAE;aACV,CAAC;QACH,CAAC;QAED,UAAU,CAAC,KAAK,IAAI,EAAE;YACrB,8BAA8B;YAC9B,MAAM,MAAM,GAAG;gBACd,MAAM,EAAE;oBACP,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC;oBACtC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;oBAC9B,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;oBAC9B,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;oBAC9B,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC;iBAC5C;gBACD,SAAS,EAAE;oBACV,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;oBACzC,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;iBACvC;aACD,CAAC;YACF,mEAAmE;YACnE,MAAM,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,OAAO;YACN,OAAO,EAAE,kBAAkB;YAC3B,MAAM,EAAE,EAAE;SACV,CAAC;IACH,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Settings } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { updateAuditedByUser } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport Bridge from '../irc-bridge';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tresetIrcConnection(): { message: string; params: unknown[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync resetIrcConnection() {\n\t\tconst ircEnabled = Boolean(settings.get('IRC_Enabled'));\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'resetIrcConnection' });\n\t\t}\n\n\t\tconst auditSettingOperation = updateAuditedByUser({\n\t\t\t_id: uid,\n\t\t\tusername: (await Meteor.userAsync())!.username!,\n\t\t\tip: this.connection?.clientAddress || '',\n\t\t\tuseragent: Meteor.connection.httpHeaders['user-agent'] || '',\n\t\t});\n\n\t\tconst updatedLastPingValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Last_Ping', new Date(0), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedLastPingValue.modifiedCount || updatedLastPingValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tconst updatedResetTimeValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Reset_Time', new Date(), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedResetTimeValue.modifiedCount || updatedResetTimeValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tif (!ircEnabled) {\n\t\t\treturn {\n\t\t\t\tmessage: 'Connection_Closed',\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t}\n\n\t\tsetTimeout(async () => {\n\t\t\t// Normalize the config values\n\t\t\tconst config = {\n\t\t\t\tserver: {\n\t\t\t\t\tprotocol: settings.get('IRC_Protocol'),\n\t\t\t\t\thost: settings.get('IRC_Host'),\n\t\t\t\t\tport: settings.get('IRC_Port'),\n\t\t\t\t\tname: settings.get('IRC_Name'),\n\t\t\t\t\tdescription: settings.get('IRC_Description'),\n\t\t\t\t},\n\t\t\t\tpasswords: {\n\t\t\t\t\tlocal: settings.get('IRC_Local_Password'),\n\t\t\t\t\tpeer: settings.get('IRC_Peer_Password'),\n\t\t\t\t},\n\t\t\t};\n\t\t\t// TODO: is this the best way to do this? is this really necessary?\n\t\t\tMeteor.ircBridge = new Bridge(config);\n\t\t\tawait Meteor.ircBridge.init();\n\t\t}, 300);\n\n\t\treturn {\n\t\t\tmessage: 'Connection_Reset',\n\t\t\tparams: [],\n\t\t};\n\t},\n});\n\ndeclare module 'meteor/meteor' {\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\n\tnamespace Meteor {\n\t\tlet ircBridge: Bridge;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/irc/server/methods/resetIrcConnection.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/irc/server/methods/resetIrcConnection.ts","inputSourceMap":{"version":3,"file":"app/irc/server/methods/resetIrcConnection.ts","sourceRoot":"","sources":["app/irc/server/methods/resetIrcConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Settings } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { updateAuditedByUser } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport Bridge from '../irc-bridge';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tresetIrcConnection(): { message: string; params: unknown[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync resetIrcConnection() {\n\t\tconst ircEnabled = Boolean(settings.get('IRC_Enabled'));\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'resetIrcConnection' });\n\t\t}\n\n\t\tconst auditSettingOperation = updateAuditedByUser({\n\t\t\t_id: uid,\n\t\t\tusername: (await Meteor.userAsync())!.username!,\n\t\t\tip: this.connection?.clientAddress || '',\n\t\t\tuseragent: Meteor.connection.httpHeaders['user-agent'] || '',\n\t\t});\n\n\t\tconst updatedLastPingValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Last_Ping', new Date(0), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedLastPingValue.modifiedCount || updatedLastPingValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tconst updatedResetTimeValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Reset_Time', new Date(), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedResetTimeValue.modifiedCount || updatedResetTimeValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tif (!ircEnabled) {\n\t\t\treturn {\n\t\t\t\tmessage: 'Connection_Closed',\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t}\n\n\t\tsetTimeout(async () => {\n\t\t\t// Normalize the config values\n\t\t\tconst config = {\n\t\t\t\tserver: {\n\t\t\t\t\tprotocol: settings.get('IRC_Protocol'),\n\t\t\t\t\thost: settings.get('IRC_Host'),\n\t\t\t\t\tport: settings.get('IRC_Port'),\n\t\t\t\t\tname: settings.get('IRC_Name'),\n\t\t\t\t\tdescription: settings.get('IRC_Description'),\n\t\t\t\t},\n\t\t\t\tpasswords: {\n\t\t\t\t\tlocal: settings.get('IRC_Local_Password'),\n\t\t\t\t\tpeer: settings.get('IRC_Peer_Password'),\n\t\t\t\t},\n\t\t\t};\n\t\t\t// TODO: is this the best way to do this? is this really necessary?\n\t\t\tMeteor.ircBridge = new Bridge(config);\n\t\t\tawait Meteor.ircBridge.init();\n\t\t}, 300);\n\n\t\treturn {\n\t\t\tmessage: 'Connection_Reset',\n\t\t\tparams: [],\n\t\t};\n\t},\n});\n\ndeclare module 'meteor/meteor' {\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\n\tnamespace Meteor {\n\t\tlet ircBridge: Bridge;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Settings;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let updateAuditedByUser;\n    module.link(\"../../../../server/settings/lib/auditedSettingUpdates\", {\n      updateAuditedByUser(v) {\n        updateAuditedByUser = v;\n      }\n    }, 2);\n    let notifyOnSettingChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let Bridge;\n    module.link(\"../irc-bridge\", {\n      default(v) {\n        Bridge = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      async resetIrcConnection() {\n        var _this$connection;\n        const ircEnabled = Boolean(settings.get('IRC_Enabled'));\n        const uid = Meteor.userId();\n        if (!uid) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'resetIrcConnection'\n          });\n        }\n        const auditSettingOperation = updateAuditedByUser({\n          _id: uid,\n          username: (await Meteor.userAsync()).username,\n          ip: ((_this$connection = this.connection) === null || _this$connection === void 0 ? void 0 : _this$connection.clientAddress) || '',\n          useragent: Meteor.connection.httpHeaders['user-agent'] || ''\n        });\n        const updatedLastPingValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Last_Ping', new Date(0), {\n          upsert: true\n        });\n        if (updatedLastPingValue.modifiedCount || updatedLastPingValue.upsertedCount) {\n          void notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n        }\n        const updatedResetTimeValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Reset_Time', new Date(), {\n          upsert: true\n        });\n        if (updatedResetTimeValue.modifiedCount || updatedResetTimeValue.upsertedCount) {\n          void notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n        }\n        if (!ircEnabled) {\n          return {\n            message: 'Connection_Closed',\n            params: []\n          };\n        }\n        setTimeout(async () => {\n          // Normalize the config values\n          const config = {\n            server: {\n              protocol: settings.get('IRC_Protocol'),\n              host: settings.get('IRC_Host'),\n              port: settings.get('IRC_Port'),\n              name: settings.get('IRC_Name'),\n              description: settings.get('IRC_Description')\n            },\n            passwords: {\n              local: settings.get('IRC_Local_Password'),\n              peer: settings.get('IRC_Peer_Password')\n            }\n          };\n          // TODO: is this the best way to do this? is this really necessary?\n          Meteor.ircBridge = new Bridge(config);\n          await Meteor.ircBridge.init();\n        }, 300);\n        return {\n          message: 'Connection_Reset',\n          params: []\n        };\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Settings","module","link","v","Meteor","updateAuditedByUser","notifyOnSettingChangedById","settings","Bridge","default","__reifyWaitForDeps__","methods","resetIrcConnection","_this$connection","ircEnabled","Boolean","get","uid","userId","Error","method","auditSettingOperation","_id","username","userAsync","ip","connection","clientAddress","useragent","httpHeaders","updatedLastPingValue","updateValueById","Date","upsert","modifiedCount","upsertedCount","updatedResetTimeValue","message","params","setTimeout","config","server","protocol","host","port","name","description","passwords","local","peer","ircBridge","init","__reify_async_result__","_reifyError","self","async"],"sources":["app/irc/server/methods/resetIrcConnection.ts"],"sourcesContent":["import type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Settings } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { updateAuditedByUser } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport Bridge from '../irc-bridge';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tresetIrcConnection(): { message: string; params: unknown[] };\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync resetIrcConnection() {\n\t\tconst ircEnabled = Boolean(settings.get('IRC_Enabled'));\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'resetIrcConnection' });\n\t\t}\n\n\t\tconst auditSettingOperation = updateAuditedByUser({\n\t\t\t_id: uid,\n\t\t\tusername: (await Meteor.userAsync())!.username!,\n\t\t\tip: this.connection?.clientAddress || '',\n\t\t\tuseragent: Meteor.connection.httpHeaders['user-agent'] || '',\n\t\t});\n\n\t\tconst updatedLastPingValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Last_Ping', new Date(0), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedLastPingValue.modifiedCount || updatedLastPingValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tconst updatedResetTimeValue = await auditSettingOperation(Settings.updateValueById, 'IRC_Bridge_Reset_Time', new Date(), {\n\t\t\tupsert: true,\n\t\t});\n\t\tif (updatedResetTimeValue.modifiedCount || updatedResetTimeValue.upsertedCount) {\n\t\t\tvoid notifyOnSettingChangedById('IRC_Bridge_Last_Ping');\n\t\t}\n\n\t\tif (!ircEnabled) {\n\t\t\treturn {\n\t\t\t\tmessage: 'Connection_Closed',\n\t\t\t\tparams: [],\n\t\t\t};\n\t\t}\n\n\t\tsetTimeout(async () => {\n\t\t\t// Normalize the config values\n\t\t\tconst config = {\n\t\t\t\tserver: {\n\t\t\t\t\tprotocol: settings.get('IRC_Protocol'),\n\t\t\t\t\thost: settings.get('IRC_Host'),\n\t\t\t\t\tport: settings.get('IRC_Port'),\n\t\t\t\t\tname: settings.get('IRC_Name'),\n\t\t\t\t\tdescription: settings.get('IRC_Description'),\n\t\t\t\t},\n\t\t\t\tpasswords: {\n\t\t\t\t\tlocal: settings.get('IRC_Local_Password'),\n\t\t\t\t\tpeer: settings.get('IRC_Peer_Password'),\n\t\t\t\t},\n\t\t\t};\n\t\t\t// TODO: is this the best way to do this? is this really necessary?\n\t\t\tMeteor.ircBridge = new Bridge(config);\n\t\t\tawait Meteor.ircBridge.init();\n\t\t}, 300);\n\n\t\treturn {\n\t\t\tmessage: 'Connection_Reset',\n\t\t\tparams: [],\n\t\t};\n\t},\n});\n\ndeclare module 'meteor/meteor' {\n\t// eslint-disable-next-line @typescript-eslint/no-namespace\n\tnamespace Meteor {\n\t\tlet ircBridge: Bridge;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"eccf0d1a3f3f4e933582c721a0b034b07873ead0"}
