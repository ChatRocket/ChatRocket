{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","inputSourceMap":{"version":3,"file":"client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","sourceRoot":"","sources":["client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx"],"names":[],"mappings":"AAEA,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AACpF,OAAO,EAAE,SAAS,EAAE,uBAAuB,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAE3G,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAEhE,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAC1D,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,YAAY,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,MAAM,mDAAmD,CAAC;AAC5E,OAAO,eAAe,MAAM,8BAA8B,CAAC;AAU3D,MAAM,qBAAqB,GAAG,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAA8B,EAAgB,EAAE;IAC1G,MAAM,CAAC,GAAG,cAAc,EAAE,CAAC;IAC3B,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC/B,MAAM,oBAAoB,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAC/D,MAAM,iBAAiB,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACzD,MAAM,iBAAiB,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACzD,MAAM,oBAAoB,GAAG,uBAAuB,EAAE,CAAC;IACvD,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,QAAQ,CAAkB,MAAM,CAAC,CAAC;IAClE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,OAAO,CAAoB,MAAM,CAAC,CAAC;IAC9E,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IACxD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAAW,EAAE,CAAC,CAAC;IACjE,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAAgB,EAAE,CAAC,CAAC;IAClE,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACjD,MAAM,eAAe,GAAG,iBAAiB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IACnD,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAElD,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE;QACtE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAC5C,OAAO;QACR,CAAC;QACD,MAAM,QAAQ,GAAG,KAAK;aACpB,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YACpB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;gBAC1B,OAAO;YACR,CAAC;YACD,OAAO,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC;iBACnD,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC;oBAChB,OAAO;gBACR,CAAC;gBAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAC1D,MAAM,MAAM,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACzC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC;YAC/B,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,CAAC;aACD,MAAM,CAAC,OAAO,CAAC,CAAC;QAElB,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;aAC1B,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC;aACjB,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,WAAW,CACpC,CAAC,WAA0B,EAAQ,EAAE;QACpC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,eAAe,EAAE,EAAE,GAAG,CAAC,CAAC;QACvD,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,OAAO,cAAc,CAAC,aAAa,CAAC,CAAC;IACtC,CAAC,EACD,CAAC,eAAe,CAAC,CACjB,CAAC;IAEF,MAAM,uBAAuB,GAAG,WAAW,CAAC,KAAK,IAAmB,EAAE;QACrE,YAAY,CAAC,IAAI,CAAC,CAAC;QACnB,IAAI,MAAM,CAAC;QACX,IAAI,CAAC;YACJ,MAAM,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YAC7D,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YACxD,OAAO,EAAE,CAAC;QACX,CAAC;gBAAS,CAAC;YACV,YAAY,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,iBAAiB,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAC5E,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;gBAClE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YACtC,CAAC;QACF,CAAC;IACF,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAExH,MAAM,gBAAgB,GAAG,CAAC,CAA0B,EAAQ,EAAE;QAC7D,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC;QAC1C,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QAEhE,sCAAsC;QACtC,IAAI,YAAY,GAAG,GAAG,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;YACjC,YAAY,IAAI,GAAG,CAAC;QACrB,CAAC;QACD,gBAAgB,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,GAAS,EAAE;QAC7B,IAAI,gBAAgB,GAAG,aAAa,CAAC;QACrC,wCAAwC;QACxC,IAAI,YAAY,GAAG,GAAG,CAAC;QACvB,IAAI,gBAAgB,IAAI,gBAAgB,KAAK,GAAG,EAAE,CAAC;YAClD,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;gBAC3D,gBAAgB,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC;YACD,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,EAAE,gBAAgB,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAClF,CAAC;QACD,gBAAgB,CAAC,YAAY,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,UAAuB,EAAwB,EAAE;QACzE,IAAI,UAAU,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;YACrC,OAAO,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO,YAAY,CAAC,UAAU,CAAC,CAAC;IACjC,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,KAAK,EAAE,UAAuB,EAAiB,EAAE;QACrE,YAAY,CAAC,IAAI,CAAC,CAAC;QAEnB,MAAM,UAAU,GAAG,KAAK,EAAE,IAAU,EAAE,WAAoB,EAAiB,EAAE;YAC5E,IAAI,CAAC;gBACJ,MAAM,QAAQ,EAAE,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YACrC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBAChB,OAAO,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAChE,CAAC;oBAAS,CAAC;gBACV,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,OAAO,EAAE,CAAC;YACX,CAAC;QACF,CAAC,CAAC;QAEF,IAAI,CAAC;YACJ,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAClE,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAE9E,QAAQ,CACP,CAAC,eAAe,CACf,QAAQ,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAC9B,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAiB,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAC3E,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,GAAS,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CACpC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAClF,CACF,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAChE,CAAC;IACF,CAAC,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACd,uBAAuB,EAAE,CAAC;IAC3B,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAE9B,SAAS,CAAC,GAAG,EAAE;QACd,gBAAgB,CAAC,aAAa,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACpE,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,MAAM,OAAO,GAAmB;QAC/B,CAAC,MAAM,EAAE,MAAM,CAAC;QAChB,CAAC,MAAM,EAAE,MAAM,CAAC;QAChB,CAAC,cAAc,EAAE,eAAe,CAAC;KACjC,CAAC;IAEF,MAAM,UAAU,GAAG,CAAC,MAAyB,EAAE,aAA8B,EAAQ,EAAE;QACtF,OAAO,CAAC,MAAM,CAAC,CAAC;QAChB,MAAM,WAAW,GAAG,eAAe,CAAC,WAAW,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;QACxE,OAAO,cAAc,CAAC,WAAW,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,OAAO,CACN,CAAC,KAAK,CACL;GAAA,CAAC,KAAK,CAAC,MAAM,CACZ;IAAA,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CACpE;IAAA,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAClD;GAAA,EAAE,KAAK,CAAC,MAAM,CACd;GAAA,CAAC,KAAK,CAAC,OAAO,CACb;IAAA,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,eAAe,CACjD;KAAA,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EAChH;KAAA,CAAC,GAAG,CACH;MAAA,CAAC,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAS,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAG,CAC5H;MAAA,CAAC,QAAQ,KAAK,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAS,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAG,CAC7H;KAAA,EAAE,GAAG,CACN;IAAA,EAAE,GAAG,CACL;IAAA,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CACzC;KAAA,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACvF;MAAA,CAAC,QAAQ,KAAK,MAAM,IAAI,CACvB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAQ,EAAE,CAAC,UAAU,CAAC,KAA0B,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAG,CAC9G,CACF;KAAA,EAAE,YAAY,CACf;IAAA,EAAE,GAAG,CACL;IAAA,CAAC,QAAQ,KAAK,MAAM,IAAI,CACvB,CAAC,qBAAqB,CACrB,WAAW,CAAC,CAAC,WAAW,CAAC,CACzB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,MAAM,CAAC,CAAC,UAAU,CAAC,CACnB,WAAW,CAAC,CAAC,eAAe,CAAC,CAC7B,SAAS,CAAC,CAAC,SAAS,CAAC,EACpB,CACF,CACD;IAAA,CAAC,QAAQ,KAAK,MAAM,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,EAAG,CAC/H;GAAA,EAAE,KAAK,CAAC,OAAO,CACf;GAAA,CAAC,KAAK,CAAC,MAAM,CAAC,AAAD,EACd;EAAA,EAAE,KAAK,CAAC,CACR,CAAC;AACH,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import type { IWebdavNode, IWebdavAccountIntegration } from '@rocket.chat/core-typings';\nimport type { SelectOption } from '@rocket.chat/fuselage';\nimport { Modal, Box, IconButton, Select } from '@rocket.chat/fuselage';\nimport { useMutableCallback, useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport { useMethod, useToastMessageDispatch, useTranslation, useSetModal } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, MouseEvent } from 'react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport FilePickerBreadcrumbs from './FilePickerBreadcrumbs';\nimport WebdavFilePickerGrid from './WebdavFilePickerGrid';\nimport WebdavFilePickerTable from './WebdavFilePickerTable';\nimport { sortWebdavNodes } from './lib/sortWebdavNodes';\nimport { fileUploadIsValidContentType } from '../../../../../app/utils/client';\nimport FilterByText from '../../../../components/FilterByText';\nimport { useSort } from '../../../../components/GenericTable/hooks/useSort';\nimport FileUploadModal from '../../modals/FileUploadModal';\n\nexport type WebdavSortOptions = 'name' | 'size' | 'dataModified';\n\ntype WebdavFilePickerModalProps = {\n\tonUpload: (file: File, description?: string) => Promise<void>;\n\tonClose: () => void;\n\taccount: IWebdavAccountIntegration;\n};\n\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst [currentFolder, setCurrentFolder] = useState('/');\n\tconst [parentFolders, setParentFolders] = useState<string[]>([]);\n\tconst [webdavNodes, setWebdavNodes] = useState<IWebdavNode[]>([]);\n\tconst [filterText, setFilterText] = useState('');\n\tconst debouncedFilter = useDebouncedValue('', 500);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n\t\tif (!Array.isArray(nodes) || !nodes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst promises = nodes\n\t\t\t.map((node, index) => {\n\t\t\t\tif (node.type !== 'file') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn getWebdavFilePreview(accountId, node.filename)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res?.data) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst imgURL = URL.createObjectURL(blob);\n\t\t\t\t\t\tnodes[index].preview = imgURL;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => e);\n\t\t\t})\n\t\t\t.filter(Boolean);\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => nodes)\n\t\t\t.catch((e) => e);\n\t});\n\n\tconst handleFilterNodes = useCallback(\n\t\t(webdavNodes: IWebdavNode[]): void => {\n\t\t\tconst regex = new RegExp(`\\\\b${debouncedFilter}`, 'i');\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\treturn setWebdavNodes(filteredNodes);\n\t\t},\n\t\t[debouncedFilter],\n\t);\n\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\tonClose();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst parentFolders = currentFolder.split('/').filter((s) => s);\n\n\t\t// determine parent directory to go to\n\t\tlet targetFolder = '/';\n\t\tfor (let i = 0; i <= Number(index); i++) {\n\t\t\ttargetFolder += parentFolders[i];\n\t\t\ttargetFolder += '/';\n\t\t}\n\t\tsetCurrentFolder(targetFolder);\n\t};\n\n\tconst handleBack = (): void => {\n\t\tlet newCurrentFolder = currentFolder;\n\t\t// determine parent directory to go back\n\t\tlet parentFolder = '/';\n\t\tif (newCurrentFolder && newCurrentFolder !== '/') {\n\t\t\tif (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n\t\t\t\tnewCurrentFolder = newCurrentFolder.slice(0, -1);\n\t\t\t}\n\t\t\tparentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n\t\t}\n\t\tsetCurrentFolder(parentFolder);\n\t};\n\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {\n\t\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tonClose();\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await getFileFromWebdav(account._id, webdavNode);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\n\t\t\tsetModal(\n\t\t\t\t<FileUploadModal\n\t\t\t\t\tfileName={webdavNode.basename}\n\t\t\t\t\tonSubmit={(_, description): Promise<void> => uploadFile(file, description)}\n\t\t\t\t\tfile={file}\n\t\t\t\t\tonClose={(): void => setModal(null)}\n\t\t\t\t\tinvalidContentType={Boolean(file.type && !fileUploadIsValidContentType(file.type))}\n\t\t\t\t/>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\thandleGetWebdavFileList();\n\t}, [handleGetWebdavFileList]);\n\n\tuseEffect(() => {\n\t\tsetParentFolders(currentFolder?.split('/').filter((s) => s) || []);\n\t}, [currentFolder]);\n\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>\n\t\t\t\t<Modal.Close title={t('Close')} onClick={onClose} />\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Box display='flex' justifyContent='space-between'>\n\t\t\t\t\t<FilePickerBreadcrumbs parentFolders={parentFolders} handleBreadcrumb={handleBreadcrumb} handleBack={handleBack} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{typeView === 'list' && <IconButton icon='squares' small title={t('Grid_view')} onClick={(): void => setTypeView('grid')} />}\n\t\t\t\t\t\t{typeView === 'grid' && <IconButton icon='th-list' small title={t('List_view')} onClick={(): void => setTypeView('list')} />}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t\t<FilterByText value={filterText} onChange={(event) => setFilterText(event.target.value)}>\n\t\t\t\t\t\t{typeView === 'grid' && (\n\t\t\t\t\t\t\t<Select value={sortBy} onChange={(value): void => handleSort(value as WebdavSortOptions)} options={options} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FilterByText>\n\t\t\t\t</Box>\n\t\t\t\t{typeView === 'list' && (\n\t\t\t\t\t<WebdavFilePickerTable\n\t\t\t\t\t\twebdavNodes={webdavNodes}\n\t\t\t\t\t\tsortBy={sortBy}\n\t\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\t\tonSort={handleSort}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{typeView === 'grid' && <WebdavFilePickerGrid webdavNodes={webdavNodes} onNodeClick={handleNodeClick} isLoading={isLoading} />}\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Footer />\n\t\t</Modal>\n\t);\n};\n\nexport default WebdavFilePickerModal;\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","inputSourceMap":{"version":3,"file":"client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx","sourceRoot":"","sources":["client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { IWebdavNode, IWebdavAccountIntegration } from '@rocket.chat/core-typings';\nimport type { SelectOption } from '@rocket.chat/fuselage';\nimport { Modal, Box, IconButton, Select } from '@rocket.chat/fuselage';\nimport { useMutableCallback, useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport { useMethod, useToastMessageDispatch, useTranslation, useSetModal } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, MouseEvent } from 'react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport FilePickerBreadcrumbs from './FilePickerBreadcrumbs';\nimport WebdavFilePickerGrid from './WebdavFilePickerGrid';\nimport WebdavFilePickerTable from './WebdavFilePickerTable';\nimport { sortWebdavNodes } from './lib/sortWebdavNodes';\nimport { fileUploadIsValidContentType } from '../../../../../app/utils/client';\nimport FilterByText from '../../../../components/FilterByText';\nimport { useSort } from '../../../../components/GenericTable/hooks/useSort';\nimport FileUploadModal from '../../modals/FileUploadModal';\n\nexport type WebdavSortOptions = 'name' | 'size' | 'dataModified';\n\ntype WebdavFilePickerModalProps = {\n\tonUpload: (file: File, description?: string) => Promise<void>;\n\tonClose: () => void;\n\taccount: IWebdavAccountIntegration;\n};\n\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst [currentFolder, setCurrentFolder] = useState('/');\n\tconst [parentFolders, setParentFolders] = useState<string[]>([]);\n\tconst [webdavNodes, setWebdavNodes] = useState<IWebdavNode[]>([]);\n\tconst [filterText, setFilterText] = useState('');\n\tconst debouncedFilter = useDebouncedValue('', 500);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n\t\tif (!Array.isArray(nodes) || !nodes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst promises = nodes\n\t\t\t.map((node, index) => {\n\t\t\t\tif (node.type !== 'file') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn getWebdavFilePreview(accountId, node.filename)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res?.data) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst imgURL = URL.createObjectURL(blob);\n\t\t\t\t\t\tnodes[index].preview = imgURL;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => e);\n\t\t\t})\n\t\t\t.filter(Boolean);\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => nodes)\n\t\t\t.catch((e) => e);\n\t});\n\n\tconst handleFilterNodes = useCallback(\n\t\t(webdavNodes: IWebdavNode[]): void => {\n\t\t\tconst regex = new RegExp(`\\\\b${debouncedFilter}`, 'i');\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\treturn setWebdavNodes(filteredNodes);\n\t\t},\n\t\t[debouncedFilter],\n\t);\n\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\tonClose();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst parentFolders = currentFolder.split('/').filter((s) => s);\n\n\t\t// determine parent directory to go to\n\t\tlet targetFolder = '/';\n\t\tfor (let i = 0; i <= Number(index); i++) {\n\t\t\ttargetFolder += parentFolders[i];\n\t\t\ttargetFolder += '/';\n\t\t}\n\t\tsetCurrentFolder(targetFolder);\n\t};\n\n\tconst handleBack = (): void => {\n\t\tlet newCurrentFolder = currentFolder;\n\t\t// determine parent directory to go back\n\t\tlet parentFolder = '/';\n\t\tif (newCurrentFolder && newCurrentFolder !== '/') {\n\t\t\tif (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n\t\t\t\tnewCurrentFolder = newCurrentFolder.slice(0, -1);\n\t\t\t}\n\t\t\tparentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n\t\t}\n\t\tsetCurrentFolder(parentFolder);\n\t};\n\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {\n\t\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tonClose();\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await getFileFromWebdav(account._id, webdavNode);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\n\t\t\tsetModal(\n\t\t\t\t<FileUploadModal\n\t\t\t\t\tfileName={webdavNode.basename}\n\t\t\t\t\tonSubmit={(_, description): Promise<void> => uploadFile(file, description)}\n\t\t\t\t\tfile={file}\n\t\t\t\t\tonClose={(): void => setModal(null)}\n\t\t\t\t\tinvalidContentType={Boolean(file.type && !fileUploadIsValidContentType(file.type))}\n\t\t\t\t/>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\thandleGetWebdavFileList();\n\t}, [handleGetWebdavFileList]);\n\n\tuseEffect(() => {\n\t\tsetParentFolders(currentFolder?.split('/').filter((s) => s) || []);\n\t}, [currentFolder]);\n\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>\n\t\t\t\t<Modal.Close title={t('Close')} onClick={onClose} />\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Box display='flex' justifyContent='space-between'>\n\t\t\t\t\t<FilePickerBreadcrumbs parentFolders={parentFolders} handleBreadcrumb={handleBreadcrumb} handleBack={handleBack} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{typeView === 'list' && <IconButton icon='squares' small title={t('Grid_view')} onClick={(): void => setTypeView('grid')} />}\n\t\t\t\t\t\t{typeView === 'grid' && <IconButton icon='th-list' small title={t('List_view')} onClick={(): void => setTypeView('list')} />}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t\t<FilterByText value={filterText} onChange={(event) => setFilterText(event.target.value)}>\n\t\t\t\t\t\t{typeView === 'grid' && (\n\t\t\t\t\t\t\t<Select value={sortBy} onChange={(value): void => handleSort(value as WebdavSortOptions)} options={options} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FilterByText>\n\t\t\t\t</Box>\n\t\t\t\t{typeView === 'list' && (\n\t\t\t\t\t<WebdavFilePickerTable\n\t\t\t\t\t\twebdavNodes={webdavNodes}\n\t\t\t\t\t\tsortBy={sortBy}\n\t\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\t\tonSort={handleSort}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{typeView === 'grid' && <WebdavFilePickerGrid webdavNodes={webdavNodes} onNodeClick={handleNodeClick} isLoading={isLoading} />}\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Footer />\n\t\t</Modal>\n\t);\n};\n\nexport default WebdavFilePickerModal;\n"]}}},"code":"let Modal, Box, IconButton, Select;\nmodule.link(\"@rocket.chat/fuselage\", {\n  Modal(v) {\n    Modal = v;\n  },\n  Box(v) {\n    Box = v;\n  },\n  IconButton(v) {\n    IconButton = v;\n  },\n  Select(v) {\n    Select = v;\n  }\n}, 0);\nlet useMutableCallback, useDebouncedValue;\nmodule.link(\"@rocket.chat/fuselage-hooks\", {\n  useMutableCallback(v) {\n    useMutableCallback = v;\n  },\n  useDebouncedValue(v) {\n    useDebouncedValue = v;\n  }\n}, 1);\nlet useMethod, useToastMessageDispatch, useTranslation, useSetModal;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  useMethod(v) {\n    useMethod = v;\n  },\n  useToastMessageDispatch(v) {\n    useToastMessageDispatch = v;\n  },\n  useTranslation(v) {\n    useTranslation = v;\n  },\n  useSetModal(v) {\n    useSetModal = v;\n  }\n}, 2);\nlet React, useState, useEffect, useCallback;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  },\n  useState(v) {\n    useState = v;\n  },\n  useEffect(v) {\n    useEffect = v;\n  },\n  useCallback(v) {\n    useCallback = v;\n  }\n}, 3);\nlet FilePickerBreadcrumbs;\nmodule.link(\"./FilePickerBreadcrumbs\", {\n  default(v) {\n    FilePickerBreadcrumbs = v;\n  }\n}, 4);\nlet WebdavFilePickerGrid;\nmodule.link(\"./WebdavFilePickerGrid\", {\n  default(v) {\n    WebdavFilePickerGrid = v;\n  }\n}, 5);\nlet WebdavFilePickerTable;\nmodule.link(\"./WebdavFilePickerTable\", {\n  default(v) {\n    WebdavFilePickerTable = v;\n  }\n}, 6);\nlet sortWebdavNodes;\nmodule.link(\"./lib/sortWebdavNodes\", {\n  sortWebdavNodes(v) {\n    sortWebdavNodes = v;\n  }\n}, 7);\nlet fileUploadIsValidContentType;\nmodule.link(\"../../../../../app/utils/client\", {\n  fileUploadIsValidContentType(v) {\n    fileUploadIsValidContentType = v;\n  }\n}, 8);\nlet FilterByText;\nmodule.link(\"../../../../components/FilterByText\", {\n  default(v) {\n    FilterByText = v;\n  }\n}, 9);\nlet useSort;\nmodule.link(\"../../../../components/GenericTable/hooks/useSort\", {\n  useSort(v) {\n    useSort = v;\n  }\n}, 10);\nlet FileUploadModal;\nmodule.link(\"../../modals/FileUploadModal\", {\n  default(v) {\n    FileUploadModal = v;\n  }\n}, 11);\nconst WebdavFilePickerModal = _ref => {\n  let {\n    onUpload,\n    onClose,\n    account\n  } = _ref;\n  const t = useTranslation();\n  const setModal = useSetModal();\n  const getWebdavFilePreview = useMethod('getWebdavFilePreview');\n  const getWebdavFileList = useMethod('getWebdavFileList');\n  const getFileFromWebdav = useMethod('getFileFromWebdav');\n  const dispatchToastMessage = useToastMessageDispatch();\n  const [typeView, setTypeView] = useState('list');\n  const {\n    sortBy,\n    sortDirection,\n    setSort\n  } = useSort('name');\n  const [currentFolder, setCurrentFolder] = useState('/');\n  const [parentFolders, setParentFolders] = useState([]);\n  const [webdavNodes, setWebdavNodes] = useState([]);\n  const [filterText, setFilterText] = useState('');\n  const debouncedFilter = useDebouncedValue('', 500);\n  const [isLoading, setIsLoading] = useState(false);\n  const showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n    if (!Array.isArray(nodes) || !nodes.length) {\n      return;\n    }\n    const promises = nodes.map((node, index) => {\n      if (node.type !== 'file') {\n        return;\n      }\n      return getWebdavFilePreview(accountId, node.filename).then(res => {\n        if (!(res !== null && res !== void 0 && res.data)) {\n          return;\n        }\n        const blob = new Blob([res === null || res === void 0 ? void 0 : res.data], {\n          type: 'image/png'\n        });\n        const imgURL = URL.createObjectURL(blob);\n        nodes[index].preview = imgURL;\n      }).catch(e => e);\n    }).filter(Boolean);\n    return Promise.all(promises).then(() => nodes).catch(e => e);\n  });\n  const handleFilterNodes = useCallback(webdavNodes => {\n    const regex = new RegExp(\"\\\\b\".concat(debouncedFilter), 'i');\n    const filteredNodes = webdavNodes.filter(_ref2 => {\n      let {\n        basename\n      } = _ref2;\n      return basename.match(regex);\n    });\n    return setWebdavNodes(filteredNodes);\n  }, [debouncedFilter]);\n  const handleGetWebdavFileList = useCallback(async () => {\n    setIsLoading(true);\n    let result;\n    try {\n      result = await getWebdavFileList(account._id, currentFolder);\n      handleFilterNodes(result.data);\n    } catch (error) {\n      dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n      onClose();\n    } finally {\n      var _result;\n      setIsLoading(false);\n      const nodesWithPreviews = await showFilePreviews(account._id, (_result = result) === null || _result === void 0 ? void 0 : _result.data);\n      if (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n        handleFilterNodes(nodesWithPreviews);\n      }\n    }\n  }, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n  const handleBreadcrumb = e => {\n    const {\n      index\n    } = e.currentTarget.dataset;\n    const parentFolders = currentFolder.split('/').filter(s => s);\n    // determine parent directory to go to\n    let targetFolder = '/';\n    for (let i = 0; i <= Number(index); i++) {\n      targetFolder += parentFolders[i];\n      targetFolder += '/';\n    }\n    setCurrentFolder(targetFolder);\n  };\n  const handleBack = () => {\n    let newCurrentFolder = currentFolder;\n    // determine parent directory to go back\n    let parentFolder = '/';\n    if (newCurrentFolder && newCurrentFolder !== '/') {\n      if (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n        newCurrentFolder = newCurrentFolder.slice(0, -1);\n      }\n      parentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n    }\n    setCurrentFolder(parentFolder);\n  };\n  const handleNodeClick = webdavNode => {\n    if (webdavNode.type === 'directory') {\n      return setCurrentFolder(webdavNode.filename);\n    }\n    return handleUpload(webdavNode);\n  };\n  const handleUpload = async webdavNode => {\n    setIsLoading(true);\n    const uploadFile = async (file, description) => {\n      try {\n        await (onUpload === null || onUpload === void 0 ? void 0 : onUpload(file, description));\n      } catch (error) {\n        return dispatchToastMessage({\n          type: 'error',\n          message: error\n        });\n      } finally {\n        setIsLoading(false);\n        onClose();\n      }\n    };\n    try {\n      const {\n        data\n      } = await getFileFromWebdav(account._id, webdavNode);\n      const blob = new Blob([data]);\n      const file = new File([blob], webdavNode.basename, {\n        type: webdavNode.mime\n      });\n      setModal( /*#__PURE__*/React.createElement(FileUploadModal, {\n        fileName: webdavNode.basename,\n        onSubmit: (_, description) => uploadFile(file, description),\n        file: file,\n        onClose: () => setModal(null),\n        invalidContentType: Boolean(file.type && !fileUploadIsValidContentType(file.type))\n      }));\n    } catch (error) {\n      return dispatchToastMessage({\n        type: 'error',\n        message: error\n      });\n    }\n  };\n  useEffect(() => {\n    handleGetWebdavFileList();\n  }, [handleGetWebdavFileList]);\n  useEffect(() => {\n    setParentFolders((currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.split('/').filter(s => s)) || []);\n  }, [currentFolder]);\n  const options = [['name', 'Name'], ['size', 'Size'], ['dataModified', 'Data Modified']];\n  const handleSort = (sortBy, sortDirection) => {\n    setSort(sortBy);\n    const sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n    return setWebdavNodes(sortedNodes);\n  };\n  return /*#__PURE__*/React.createElement(Modal, null, /*#__PURE__*/React.createElement(Modal.Header, null, /*#__PURE__*/React.createElement(Modal.Title, null, t('Upload_From', {\n    name: account.name\n  })), /*#__PURE__*/React.createElement(Modal.Close, {\n    title: t('Close'),\n    onClick: onClose\n  })), /*#__PURE__*/React.createElement(Modal.Content, null, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  }, /*#__PURE__*/React.createElement(FilePickerBreadcrumbs, {\n    parentFolders: parentFolders,\n    handleBreadcrumb: handleBreadcrumb,\n    handleBack: handleBack\n  }), /*#__PURE__*/React.createElement(Box, null, typeView === 'list' && /*#__PURE__*/React.createElement(IconButton, {\n    icon: \"squares\",\n    small: true,\n    title: t('Grid_view'),\n    onClick: () => setTypeView('grid')\n  }), typeView === 'grid' && /*#__PURE__*/React.createElement(IconButton, {\n    icon: \"th-list\",\n    small: true,\n    title: t('List_view'),\n    onClick: () => setTypeView('list')\n  }))), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, /*#__PURE__*/React.createElement(FilterByText, {\n    value: filterText,\n    onChange: event => setFilterText(event.target.value)\n  }, typeView === 'grid' && /*#__PURE__*/React.createElement(Select, {\n    value: sortBy,\n    onChange: value => handleSort(value),\n    options: options\n  }))), typeView === 'list' && /*#__PURE__*/React.createElement(WebdavFilePickerTable, {\n    webdavNodes: webdavNodes,\n    sortBy: sortBy,\n    sortDirection: sortDirection,\n    onSort: handleSort,\n    onNodeClick: handleNodeClick,\n    isLoading: isLoading\n  }), typeView === 'grid' && /*#__PURE__*/React.createElement(WebdavFilePickerGrid, {\n    webdavNodes: webdavNodes,\n    onNodeClick: handleNodeClick,\n    isLoading: isLoading\n  })), /*#__PURE__*/React.createElement(Modal.Footer, null));\n};\nmodule.exportDefault(WebdavFilePickerModal);","map":{"version":3,"names":["Modal","Box","IconButton","Select","module","link","v","useMutableCallback","useDebouncedValue","useMethod","useToastMessageDispatch","useTranslation","useSetModal","React","useState","useEffect","useCallback","default","FilePickerBreadcrumbs","WebdavFilePickerGrid","WebdavFilePickerTable","sortWebdavNodes","fileUploadIsValidContentType","FilterByText","useSort","FileUploadModal","WebdavFilePickerModal","_ref","onUpload","onClose","account","t","setModal","getWebdavFilePreview","getWebdavFileList","getFileFromWebdav","dispatchToastMessage","typeView","setTypeView","sortBy","sortDirection","setSort","currentFolder","setCurrentFolder","parentFolders","setParentFolders","webdavNodes","setWebdavNodes","filterText","setFilterText","debouncedFilter","isLoading","setIsLoading","showFilePreviews","accountId","nodes","Array","isArray","length","promises","map","node","index","type","filename","then","res","data","blob","Blob","imgURL","URL","createObjectURL","preview","catch","e","filter","Boolean","Promise","all","handleFilterNodes","regex","RegExp","concat","filteredNodes","_ref2","basename","match","handleGetWebdavFileList","result","_id","error","message","_result","nodesWithPreviews","handleBreadcrumb","currentTarget","dataset","split","s","targetFolder","i","Number","handleBack","newCurrentFolder","parentFolder","slice","substr","lastIndexOf","handleNodeClick","webdavNode","handleUpload","uploadFile","file","description","File","mime","createElement","fileName","onSubmit","_","invalidContentType","options","handleSort","sortedNodes","Header","Title","name","Close","title","onClick","Content","display","justifyContent","icon","small","flexDirection","value","onChange","event","target","onSort","onNodeClick","Footer","exportDefault"],"sources":["client/views/room/webdav/WebdavFilePickerModal/WebdavFilePickerModal.tsx"],"sourcesContent":["import type { IWebdavNode, IWebdavAccountIntegration } from '@rocket.chat/core-typings';\nimport type { SelectOption } from '@rocket.chat/fuselage';\nimport { Modal, Box, IconButton, Select } from '@rocket.chat/fuselage';\nimport { useMutableCallback, useDebouncedValue } from '@rocket.chat/fuselage-hooks';\nimport { useMethod, useToastMessageDispatch, useTranslation, useSetModal } from '@rocket.chat/ui-contexts';\nimport type { ReactElement, MouseEvent } from 'react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport FilePickerBreadcrumbs from './FilePickerBreadcrumbs';\nimport WebdavFilePickerGrid from './WebdavFilePickerGrid';\nimport WebdavFilePickerTable from './WebdavFilePickerTable';\nimport { sortWebdavNodes } from './lib/sortWebdavNodes';\nimport { fileUploadIsValidContentType } from '../../../../../app/utils/client';\nimport FilterByText from '../../../../components/FilterByText';\nimport { useSort } from '../../../../components/GenericTable/hooks/useSort';\nimport FileUploadModal from '../../modals/FileUploadModal';\n\nexport type WebdavSortOptions = 'name' | 'size' | 'dataModified';\n\ntype WebdavFilePickerModalProps = {\n\tonUpload: (file: File, description?: string) => Promise<void>;\n\tonClose: () => void;\n\taccount: IWebdavAccountIntegration;\n};\n\nconst WebdavFilePickerModal = ({ onUpload, onClose, account }: WebdavFilePickerModalProps): ReactElement => {\n\tconst t = useTranslation();\n\tconst setModal = useSetModal();\n\tconst getWebdavFilePreview = useMethod('getWebdavFilePreview');\n\tconst getWebdavFileList = useMethod('getWebdavFileList');\n\tconst getFileFromWebdav = useMethod('getFileFromWebdav');\n\tconst dispatchToastMessage = useToastMessageDispatch();\n\tconst [typeView, setTypeView] = useState<'list' | 'grid'>('list');\n\tconst { sortBy, sortDirection, setSort } = useSort<WebdavSortOptions>('name');\n\tconst [currentFolder, setCurrentFolder] = useState('/');\n\tconst [parentFolders, setParentFolders] = useState<string[]>([]);\n\tconst [webdavNodes, setWebdavNodes] = useState<IWebdavNode[]>([]);\n\tconst [filterText, setFilterText] = useState('');\n\tconst debouncedFilter = useDebouncedValue('', 500);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst showFilePreviews = useMutableCallback(async (accountId, nodes) => {\n\t\tif (!Array.isArray(nodes) || !nodes.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst promises = nodes\n\t\t\t.map((node, index) => {\n\t\t\t\tif (node.type !== 'file') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn getWebdavFilePreview(accountId, node.filename)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tif (!res?.data) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst blob = new Blob([res?.data], { type: 'image/png' });\n\t\t\t\t\t\tconst imgURL = URL.createObjectURL(blob);\n\t\t\t\t\t\tnodes[index].preview = imgURL;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => e);\n\t\t\t})\n\t\t\t.filter(Boolean);\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(() => nodes)\n\t\t\t.catch((e) => e);\n\t});\n\n\tconst handleFilterNodes = useCallback(\n\t\t(webdavNodes: IWebdavNode[]): void => {\n\t\t\tconst regex = new RegExp(`\\\\b${debouncedFilter}`, 'i');\n\t\t\tconst filteredNodes = webdavNodes.filter(({ basename }) => basename.match(regex));\n\t\t\treturn setWebdavNodes(filteredNodes);\n\t\t},\n\t\t[debouncedFilter],\n\t);\n\n\tconst handleGetWebdavFileList = useCallback(async (): Promise<void> => {\n\t\tsetIsLoading(true);\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await getWebdavFileList(account._id, currentFolder);\n\t\t\thandleFilterNodes(result.data);\n\t\t} catch (error) {\n\t\t\tdispatchToastMessage({ type: 'error', message: error });\n\t\t\tonClose();\n\t\t} finally {\n\t\t\tsetIsLoading(false);\n\t\t\tconst nodesWithPreviews = await showFilePreviews(account._id, result?.data);\n\t\t\tif (Array.isArray(nodesWithPreviews) && nodesWithPreviews.length) {\n\t\t\t\thandleFilterNodes(nodesWithPreviews);\n\t\t\t}\n\t\t}\n\t}, [account._id, currentFolder, dispatchToastMessage, getWebdavFileList, onClose, showFilePreviews, handleFilterNodes]);\n\n\tconst handleBreadcrumb = (e: MouseEvent<HTMLElement>): void => {\n\t\tconst { index } = e.currentTarget.dataset;\n\t\tconst parentFolders = currentFolder.split('/').filter((s) => s);\n\n\t\t// determine parent directory to go to\n\t\tlet targetFolder = '/';\n\t\tfor (let i = 0; i <= Number(index); i++) {\n\t\t\ttargetFolder += parentFolders[i];\n\t\t\ttargetFolder += '/';\n\t\t}\n\t\tsetCurrentFolder(targetFolder);\n\t};\n\n\tconst handleBack = (): void => {\n\t\tlet newCurrentFolder = currentFolder;\n\t\t// determine parent directory to go back\n\t\tlet parentFolder = '/';\n\t\tif (newCurrentFolder && newCurrentFolder !== '/') {\n\t\t\tif (newCurrentFolder[newCurrentFolder.length - 1] === '/') {\n\t\t\t\tnewCurrentFolder = newCurrentFolder.slice(0, -1);\n\t\t\t}\n\t\t\tparentFolder = newCurrentFolder.substr(0, newCurrentFolder.lastIndexOf('/') + 1);\n\t\t}\n\t\tsetCurrentFolder(parentFolder);\n\t};\n\n\tconst handleNodeClick = (webdavNode: IWebdavNode): void | Promise<void> => {\n\t\tif (webdavNode.type === 'directory') {\n\t\t\treturn setCurrentFolder(webdavNode.filename);\n\t\t}\n\n\t\treturn handleUpload(webdavNode);\n\t};\n\n\tconst handleUpload = async (webdavNode: IWebdavNode): Promise<void> => {\n\t\tsetIsLoading(true);\n\n\t\tconst uploadFile = async (file: File, description?: string): Promise<void> => {\n\t\t\ttry {\n\t\t\t\tawait onUpload?.(file, description);\n\t\t\t} catch (error) {\n\t\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t\t} finally {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tonClose();\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\tconst { data } = await getFileFromWebdav(account._id, webdavNode);\n\t\t\tconst blob = new Blob([data]);\n\t\t\tconst file = new File([blob], webdavNode.basename, { type: webdavNode.mime });\n\n\t\t\tsetModal(\n\t\t\t\t<FileUploadModal\n\t\t\t\t\tfileName={webdavNode.basename}\n\t\t\t\t\tonSubmit={(_, description): Promise<void> => uploadFile(file, description)}\n\t\t\t\t\tfile={file}\n\t\t\t\t\tonClose={(): void => setModal(null)}\n\t\t\t\t\tinvalidContentType={Boolean(file.type && !fileUploadIsValidContentType(file.type))}\n\t\t\t\t/>,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: error });\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\thandleGetWebdavFileList();\n\t}, [handleGetWebdavFileList]);\n\n\tuseEffect(() => {\n\t\tsetParentFolders(currentFolder?.split('/').filter((s) => s) || []);\n\t}, [currentFolder]);\n\n\tconst options: SelectOption[] = [\n\t\t['name', 'Name'],\n\t\t['size', 'Size'],\n\t\t['dataModified', 'Data Modified'],\n\t];\n\n\tconst handleSort = (sortBy: WebdavSortOptions, sortDirection?: 'asc' | 'desc'): void => {\n\t\tsetSort(sortBy);\n\t\tconst sortedNodes = sortWebdavNodes(webdavNodes, sortBy, sortDirection);\n\t\treturn setWebdavNodes(sortedNodes);\n\t};\n\n\treturn (\n\t\t<Modal>\n\t\t\t<Modal.Header>\n\t\t\t\t<Modal.Title>{t('Upload_From', { name: account.name })}</Modal.Title>\n\t\t\t\t<Modal.Close title={t('Close')} onClick={onClose} />\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Box display='flex' justifyContent='space-between'>\n\t\t\t\t\t<FilePickerBreadcrumbs parentFolders={parentFolders} handleBreadcrumb={handleBreadcrumb} handleBack={handleBack} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t{typeView === 'list' && <IconButton icon='squares' small title={t('Grid_view')} onClick={(): void => setTypeView('grid')} />}\n\t\t\t\t\t\t{typeView === 'grid' && <IconButton icon='th-list' small title={t('List_view')} onClick={(): void => setTypeView('list')} />}\n\t\t\t\t\t</Box>\n\t\t\t\t</Box>\n\t\t\t\t<Box display='flex' flexDirection='column'>\n\t\t\t\t\t<FilterByText value={filterText} onChange={(event) => setFilterText(event.target.value)}>\n\t\t\t\t\t\t{typeView === 'grid' && (\n\t\t\t\t\t\t\t<Select value={sortBy} onChange={(value): void => handleSort(value as WebdavSortOptions)} options={options} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FilterByText>\n\t\t\t\t</Box>\n\t\t\t\t{typeView === 'list' && (\n\t\t\t\t\t<WebdavFilePickerTable\n\t\t\t\t\t\twebdavNodes={webdavNodes}\n\t\t\t\t\t\tsortBy={sortBy}\n\t\t\t\t\t\tsortDirection={sortDirection}\n\t\t\t\t\t\tonSort={handleSort}\n\t\t\t\t\t\tonNodeClick={handleNodeClick}\n\t\t\t\t\t\tisLoading={isLoading}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{typeView === 'grid' && <WebdavFilePickerGrid webdavNodes={webdavNodes} onNodeClick={handleNodeClick} isLoading={isLoading} />}\n\t\t\t</Modal.Content>\n\t\t\t<Modal.Footer />\n\t\t</Modal>\n\t);\n};\n\nexport default WebdavFilePickerModal;\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7c619a4a320cc3b0f40a55a5066267f0d6a441be"}
