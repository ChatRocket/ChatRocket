{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/functions/resetRoomKey.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/e2e/server/functions/resetRoomKey.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/functions/resetRoomKey.ts","inputSourceMap":{"version":3,"file":"app/e2e/server/functions/resetRoomKey.ts","sourceRoot":"","sources":["app/e2e/server/functions/resetRoomKey.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription, IUser, IRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, Users } from '@rocket.chat/models';\nimport type { AnyBulkWriteOperation } from 'mongodb';\n\nimport { notifyOnRoomChanged, notifyOnSubscriptionChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function resetRoomKey(roomId: string, userId: string, newRoomKey: string, newRoomKeyId: string) {\n\tconst user = await Users.findOneById<Pick<IUser, 'e2e'>>(userId, { projection: { e2e: 1 } });\n\tif (!user) {\n\t\tthrow new Error('error-user-not-found');\n\t}\n\n\tif (!user.e2e?.private_key || !user.e2e?.public_key) {\n\t\tthrow new Error('error-user-has-no-keys');\n\t}\n\n\tconst room = await Rooms.findOneById<Pick<IRoom, 'e2eKeyId'>>(roomId, { projection: { e2eKeyId: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-not-found');\n\t}\n\n\tif (!room.e2eKeyId) {\n\t\tthrow new Error('error-room-not-encrypted');\n\t}\n\n\t// We will update the subs of everyone who has a key for the room. For the ones that don't have, we will do nothing\n\tconst notifySubs = [];\n\tconst updateOps: AnyBulkWriteOperation<ISubscription>[] = [];\n\tconst e2eQueue: IRoom['usersWaitingForE2EKeys'] = [];\n\n\tfor await (const sub of Subscriptions.find({\n\t\trid: roomId,\n\t\t$or: [{ E2EKey: { $exists: true } }, { E2ESuggestedKey: { $exists: true } }],\n\t})) {\n\t\t// This replicates the oldRoomKeys array modifications allowing us to have the changes locally without finding them again\n\t\t// which allows for quicker notifying\n\t\tconst keys = replicateMongoSlice(room.e2eKeyId, sub);\n\t\tdelete sub.E2ESuggestedKey;\n\t\tdelete sub.E2EKey;\n\t\tdelete sub.suggestedOldRoomKeys;\n\n\t\tconst updateSet = {\n\t\t\t$set: {\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t},\n\t\t};\n\t\tupdateOps.push({\n\t\t\tupdateOne: {\n\t\t\t\tfilter: { _id: sub._id },\n\t\t\t\tupdate: {\n\t\t\t\t\t$unset: { E2EKey: 1, E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 },\n\t\t\t\t\t...(Object.keys(updateSet.$set).length && updateSet),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (userId !== sub.u._id) {\n\t\t\t// Avoid notifying requesting user as notify will happen at the end\n\t\t\tnotifySubs.push({\n\t\t\t\t...sub,\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t});\n\n\t\t\t// This is for allowing the key distribution process to start inmediately\n\t\t\tpushToLimit(e2eQueue, { userId: sub.u._id, ts: new Date() });\n\t\t}\n\n\t\tif (updateOps.length >= 100) {\n\t\t\tawait writeAndNotify(updateOps, notifySubs);\n\t\t}\n\t}\n\n\tif (updateOps.length > 0) {\n\t\tawait writeAndNotify(updateOps, notifySubs);\n\t}\n\n\t// after the old keys have been moved to the new prop, store room key on room + the e2e queue so key can be exchanged\n\t// todo move to model method\n\tconst roomResult = await Rooms.resetRoomKeyAndSetE2EEQueueByRoomId(roomId, newRoomKeyId, e2eQueue);\n\t// And set the new key to the user that called the func\n\tconst result = await Subscriptions.setE2EKeyByUserIdAndRoomId(userId, roomId, newRoomKey);\n\n\tif (result.value) {\n\t\tvoid notifyOnSubscriptionChanged(result.value);\n\t}\n\tif (roomResult.value) {\n\t\tvoid notifyOnRoomChanged(roomResult.value);\n\t}\n}\n\nfunction pushToLimit(\n\tarr: NonNullable<IRoom['usersWaitingForE2EKeys']>,\n\titem: NonNullable<IRoom['usersWaitingForE2EKeys']>[number],\n\tlimit = 50,\n) {\n\tif (arr.length < limit) {\n\t\tarr.push(item);\n\t}\n}\n\nasync function writeAndNotify(updateOps: AnyBulkWriteOperation<ISubscription>[], notifySubs: ISubscription[]) {\n\tawait Subscriptions.col.bulkWrite(updateOps);\n\tnotifySubs.forEach((sub) => {\n\t\tvoid notifyOnSubscriptionChanged(sub);\n\t});\n\tnotifySubs.length = 0;\n\tupdateOps.length = 0;\n}\n\nfunction replicateMongoSlice(keyId: string, sub: ISubscription) {\n\tif (!sub.E2EKey) {\n\t\treturn;\n\t}\n\n\tif (!sub.oldRoomKeys) {\n\t\treturn [{ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey }];\n\t}\n\n\tconst sortedKeys = sub.oldRoomKeys.toSorted((a, b) => b.ts.getTime() - a.ts.getTime());\n\tsortedKeys.unshift({ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey });\n\n\treturn sortedKeys.slice(0, 10);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/server/functions/resetRoomKey.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/server/functions/resetRoomKey.ts","inputSourceMap":{"version":3,"file":"app/e2e/server/functions/resetRoomKey.ts","sourceRoot":"","sources":["app/e2e/server/functions/resetRoomKey.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription, IUser, IRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, Users } from '@rocket.chat/models';\nimport type { AnyBulkWriteOperation } from 'mongodb';\n\nimport { notifyOnRoomChanged, notifyOnSubscriptionChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function resetRoomKey(roomId: string, userId: string, newRoomKey: string, newRoomKeyId: string) {\n\tconst user = await Users.findOneById<Pick<IUser, 'e2e'>>(userId, { projection: { e2e: 1 } });\n\tif (!user) {\n\t\tthrow new Error('error-user-not-found');\n\t}\n\n\tif (!user.e2e?.private_key || !user.e2e?.public_key) {\n\t\tthrow new Error('error-user-has-no-keys');\n\t}\n\n\tconst room = await Rooms.findOneById<Pick<IRoom, 'e2eKeyId'>>(roomId, { projection: { e2eKeyId: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-not-found');\n\t}\n\n\tif (!room.e2eKeyId) {\n\t\tthrow new Error('error-room-not-encrypted');\n\t}\n\n\t// We will update the subs of everyone who has a key for the room. For the ones that don't have, we will do nothing\n\tconst notifySubs = [];\n\tconst updateOps: AnyBulkWriteOperation<ISubscription>[] = [];\n\tconst e2eQueue: IRoom['usersWaitingForE2EKeys'] = [];\n\n\tfor await (const sub of Subscriptions.find({\n\t\trid: roomId,\n\t\t$or: [{ E2EKey: { $exists: true } }, { E2ESuggestedKey: { $exists: true } }],\n\t})) {\n\t\t// This replicates the oldRoomKeys array modifications allowing us to have the changes locally without finding them again\n\t\t// which allows for quicker notifying\n\t\tconst keys = replicateMongoSlice(room.e2eKeyId, sub);\n\t\tdelete sub.E2ESuggestedKey;\n\t\tdelete sub.E2EKey;\n\t\tdelete sub.suggestedOldRoomKeys;\n\n\t\tconst updateSet = {\n\t\t\t$set: {\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t},\n\t\t};\n\t\tupdateOps.push({\n\t\t\tupdateOne: {\n\t\t\t\tfilter: { _id: sub._id },\n\t\t\t\tupdate: {\n\t\t\t\t\t$unset: { E2EKey: 1, E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 },\n\t\t\t\t\t...(Object.keys(updateSet.$set).length && updateSet),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (userId !== sub.u._id) {\n\t\t\t// Avoid notifying requesting user as notify will happen at the end\n\t\t\tnotifySubs.push({\n\t\t\t\t...sub,\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t});\n\n\t\t\t// This is for allowing the key distribution process to start inmediately\n\t\t\tpushToLimit(e2eQueue, { userId: sub.u._id, ts: new Date() });\n\t\t}\n\n\t\tif (updateOps.length >= 100) {\n\t\t\tawait writeAndNotify(updateOps, notifySubs);\n\t\t}\n\t}\n\n\tif (updateOps.length > 0) {\n\t\tawait writeAndNotify(updateOps, notifySubs);\n\t}\n\n\t// after the old keys have been moved to the new prop, store room key on room + the e2e queue so key can be exchanged\n\t// todo move to model method\n\tconst roomResult = await Rooms.resetRoomKeyAndSetE2EEQueueByRoomId(roomId, newRoomKeyId, e2eQueue);\n\t// And set the new key to the user that called the func\n\tconst result = await Subscriptions.setE2EKeyByUserIdAndRoomId(userId, roomId, newRoomKey);\n\n\tif (result.value) {\n\t\tvoid notifyOnSubscriptionChanged(result.value);\n\t}\n\tif (roomResult.value) {\n\t\tvoid notifyOnRoomChanged(roomResult.value);\n\t}\n}\n\nfunction pushToLimit(\n\tarr: NonNullable<IRoom['usersWaitingForE2EKeys']>,\n\titem: NonNullable<IRoom['usersWaitingForE2EKeys']>[number],\n\tlimit = 50,\n) {\n\tif (arr.length < limit) {\n\t\tarr.push(item);\n\t}\n}\n\nasync function writeAndNotify(updateOps: AnyBulkWriteOperation<ISubscription>[], notifySubs: ISubscription[]) {\n\tawait Subscriptions.col.bulkWrite(updateOps);\n\tnotifySubs.forEach((sub) => {\n\t\tvoid notifyOnSubscriptionChanged(sub);\n\t});\n\tnotifySubs.length = 0;\n\tupdateOps.length = 0;\n}\n\nfunction replicateMongoSlice(keyId: string, sub: ISubscription) {\n\tif (!sub.E2EKey) {\n\t\treturn;\n\t}\n\n\tif (!sub.oldRoomKeys) {\n\t\treturn [{ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey }];\n\t}\n\n\tconst sortedKeys = sub.oldRoomKeys.toSorted((a, b) => b.ts.getTime() - a.ts.getTime());\n\tsortedKeys.unshift({ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey });\n\n\treturn sortedKeys.slice(0, 10);\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      resetRoomKey: () => resetRoomKey\n    });\n    let Rooms, Subscriptions, Users;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let notifyOnRoomChanged, notifyOnSubscriptionChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnRoomChanged(v) {\n        notifyOnRoomChanged = v;\n      },\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function resetRoomKey(roomId, userId, newRoomKey, newRoomKeyId) {\n      var _user$e2e, _user$e2e2;\n      const user = await Users.findOneById(userId, {\n        projection: {\n          e2e: 1\n        }\n      });\n      if (!user) {\n        throw new Error('error-user-not-found');\n      }\n      if (!((_user$e2e = user.e2e) !== null && _user$e2e !== void 0 && _user$e2e.private_key) || !((_user$e2e2 = user.e2e) !== null && _user$e2e2 !== void 0 && _user$e2e2.public_key)) {\n        throw new Error('error-user-has-no-keys');\n      }\n      const room = await Rooms.findOneById(roomId, {\n        projection: {\n          e2eKeyId: 1\n        }\n      });\n      if (!room) {\n        throw new Error('error-room-not-found');\n      }\n      if (!room.e2eKeyId) {\n        throw new Error('error-room-not-encrypted');\n      }\n      // We will update the subs of everyone who has a key for the room. For the ones that don't have, we will do nothing\n      const notifySubs = [];\n      const updateOps = [];\n      const e2eQueue = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(Subscriptions.find({\n            rid: roomId,\n            $or: [{\n              E2EKey: {\n                $exists: true\n              }\n            }, {\n              E2ESuggestedKey: {\n                $exists: true\n              }\n            }]\n          })), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const sub = _step.value;\n          {\n            // This replicates the oldRoomKeys array modifications allowing us to have the changes locally without finding them again\n            // which allows for quicker notifying\n            const keys = replicateMongoSlice(room.e2eKeyId, sub);\n            delete sub.E2ESuggestedKey;\n            delete sub.E2EKey;\n            delete sub.suggestedOldRoomKeys;\n            const updateSet = {\n              $set: _objectSpread({}, keys && {\n                oldRoomKeys: keys\n              })\n            };\n            updateOps.push({\n              updateOne: {\n                filter: {\n                  _id: sub._id\n                },\n                update: _objectSpread({\n                  $unset: {\n                    E2EKey: 1,\n                    E2ESuggestedKey: 1,\n                    suggestedOldRoomKeys: 1\n                  }\n                }, Object.keys(updateSet.$set).length && updateSet)\n              }\n            });\n            if (userId !== sub.u._id) {\n              // Avoid notifying requesting user as notify will happen at the end\n              notifySubs.push(_objectSpread(_objectSpread({}, sub), keys && {\n                oldRoomKeys: keys\n              }));\n              // This is for allowing the key distribution process to start inmediately\n              pushToLimit(e2eQueue, {\n                userId: sub.u._id,\n                ts: new Date()\n              });\n            }\n            if (updateOps.length >= 100) {\n              await writeAndNotify(updateOps, notifySubs);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      if (updateOps.length > 0) {\n        await writeAndNotify(updateOps, notifySubs);\n      }\n      // after the old keys have been moved to the new prop, store room key on room + the e2e queue so key can be exchanged\n      // todo move to model method\n      const roomResult = await Rooms.resetRoomKeyAndSetE2EEQueueByRoomId(roomId, newRoomKeyId, e2eQueue);\n      // And set the new key to the user that called the func\n      const result = await Subscriptions.setE2EKeyByUserIdAndRoomId(userId, roomId, newRoomKey);\n      if (result.value) {\n        void notifyOnSubscriptionChanged(result.value);\n      }\n      if (roomResult.value) {\n        void notifyOnRoomChanged(roomResult.value);\n      }\n    }\n    function pushToLimit(arr, item) {\n      let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n      if (arr.length < limit) {\n        arr.push(item);\n      }\n    }\n    async function writeAndNotify(updateOps, notifySubs) {\n      await Subscriptions.col.bulkWrite(updateOps);\n      notifySubs.forEach(sub => {\n        void notifyOnSubscriptionChanged(sub);\n      });\n      notifySubs.length = 0;\n      updateOps.length = 0;\n    }\n    function replicateMongoSlice(keyId, sub) {\n      if (!sub.E2EKey) {\n        return;\n      }\n      if (!sub.oldRoomKeys) {\n        return [{\n          e2eKeyId: keyId,\n          ts: new Date(),\n          E2EKey: sub.E2EKey\n        }];\n      }\n      const sortedKeys = sub.oldRoomKeys.toSorted((a, b) => b.ts.getTime() - a.ts.getTime());\n      sortedKeys.unshift({\n        e2eKeyId: keyId,\n        ts: new Date(),\n        E2EKey: sub.E2EKey\n      });\n      return sortedKeys.slice(0, 10);\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","resetRoomKey","Rooms","Subscriptions","Users","notifyOnRoomChanged","notifyOnSubscriptionChanged","__reifyWaitForDeps__","roomId","userId","newRoomKey","newRoomKeyId","_user$e2e","_user$e2e2","user","findOneById","projection","e2e","Error","private_key","public_key","room","e2eKeyId","notifySubs","updateOps","e2eQueue","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","find","rid","$or","E2EKey","$exists","E2ESuggestedKey","_step","next","done","sub","value","keys","replicateMongoSlice","suggestedOldRoomKeys","updateSet","$set","oldRoomKeys","push","updateOne","filter","_id","update","$unset","Object","length","u","pushToLimit","ts","Date","writeAndNotify","err","return","roomResult","resetRoomKeyAndSetE2EEQueueByRoomId","result","setE2EKeyByUserIdAndRoomId","arr","item","limit","arguments","undefined","col","bulkWrite","forEach","keyId","sortedKeys","toSorted","a","b","getTime","unshift","slice","__reify_async_result__","_reifyError","self","async"],"sources":["app/e2e/server/functions/resetRoomKey.ts"],"sourcesContent":["import type { ISubscription, IUser, IRoom } from '@rocket.chat/core-typings';\nimport { Rooms, Subscriptions, Users } from '@rocket.chat/models';\nimport type { AnyBulkWriteOperation } from 'mongodb';\n\nimport { notifyOnRoomChanged, notifyOnSubscriptionChanged } from '../../../lib/server/lib/notifyListener';\n\nexport async function resetRoomKey(roomId: string, userId: string, newRoomKey: string, newRoomKeyId: string) {\n\tconst user = await Users.findOneById<Pick<IUser, 'e2e'>>(userId, { projection: { e2e: 1 } });\n\tif (!user) {\n\t\tthrow new Error('error-user-not-found');\n\t}\n\n\tif (!user.e2e?.private_key || !user.e2e?.public_key) {\n\t\tthrow new Error('error-user-has-no-keys');\n\t}\n\n\tconst room = await Rooms.findOneById<Pick<IRoom, 'e2eKeyId'>>(roomId, { projection: { e2eKeyId: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-not-found');\n\t}\n\n\tif (!room.e2eKeyId) {\n\t\tthrow new Error('error-room-not-encrypted');\n\t}\n\n\t// We will update the subs of everyone who has a key for the room. For the ones that don't have, we will do nothing\n\tconst notifySubs = [];\n\tconst updateOps: AnyBulkWriteOperation<ISubscription>[] = [];\n\tconst e2eQueue: IRoom['usersWaitingForE2EKeys'] = [];\n\n\tfor await (const sub of Subscriptions.find({\n\t\trid: roomId,\n\t\t$or: [{ E2EKey: { $exists: true } }, { E2ESuggestedKey: { $exists: true } }],\n\t})) {\n\t\t// This replicates the oldRoomKeys array modifications allowing us to have the changes locally without finding them again\n\t\t// which allows for quicker notifying\n\t\tconst keys = replicateMongoSlice(room.e2eKeyId, sub);\n\t\tdelete sub.E2ESuggestedKey;\n\t\tdelete sub.E2EKey;\n\t\tdelete sub.suggestedOldRoomKeys;\n\n\t\tconst updateSet = {\n\t\t\t$set: {\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t},\n\t\t};\n\t\tupdateOps.push({\n\t\t\tupdateOne: {\n\t\t\t\tfilter: { _id: sub._id },\n\t\t\t\tupdate: {\n\t\t\t\t\t$unset: { E2EKey: 1, E2ESuggestedKey: 1, suggestedOldRoomKeys: 1 },\n\t\t\t\t\t...(Object.keys(updateSet.$set).length && updateSet),\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tif (userId !== sub.u._id) {\n\t\t\t// Avoid notifying requesting user as notify will happen at the end\n\t\t\tnotifySubs.push({\n\t\t\t\t...sub,\n\t\t\t\t...(keys && { oldRoomKeys: keys }),\n\t\t\t});\n\n\t\t\t// This is for allowing the key distribution process to start inmediately\n\t\t\tpushToLimit(e2eQueue, { userId: sub.u._id, ts: new Date() });\n\t\t}\n\n\t\tif (updateOps.length >= 100) {\n\t\t\tawait writeAndNotify(updateOps, notifySubs);\n\t\t}\n\t}\n\n\tif (updateOps.length > 0) {\n\t\tawait writeAndNotify(updateOps, notifySubs);\n\t}\n\n\t// after the old keys have been moved to the new prop, store room key on room + the e2e queue so key can be exchanged\n\t// todo move to model method\n\tconst roomResult = await Rooms.resetRoomKeyAndSetE2EEQueueByRoomId(roomId, newRoomKeyId, e2eQueue);\n\t// And set the new key to the user that called the func\n\tconst result = await Subscriptions.setE2EKeyByUserIdAndRoomId(userId, roomId, newRoomKey);\n\n\tif (result.value) {\n\t\tvoid notifyOnSubscriptionChanged(result.value);\n\t}\n\tif (roomResult.value) {\n\t\tvoid notifyOnRoomChanged(roomResult.value);\n\t}\n}\n\nfunction pushToLimit(\n\tarr: NonNullable<IRoom['usersWaitingForE2EKeys']>,\n\titem: NonNullable<IRoom['usersWaitingForE2EKeys']>[number],\n\tlimit = 50,\n) {\n\tif (arr.length < limit) {\n\t\tarr.push(item);\n\t}\n}\n\nasync function writeAndNotify(updateOps: AnyBulkWriteOperation<ISubscription>[], notifySubs: ISubscription[]) {\n\tawait Subscriptions.col.bulkWrite(updateOps);\n\tnotifySubs.forEach((sub) => {\n\t\tvoid notifyOnSubscriptionChanged(sub);\n\t});\n\tnotifySubs.length = 0;\n\tupdateOps.length = 0;\n}\n\nfunction replicateMongoSlice(keyId: string, sub: ISubscription) {\n\tif (!sub.E2EKey) {\n\t\treturn;\n\t}\n\n\tif (!sub.oldRoomKeys) {\n\t\treturn [{ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey }];\n\t}\n\n\tconst sortedKeys = sub.oldRoomKeys.toSorted((a, b) => b.ts.getTime() - a.ts.getTime());\n\tsortedKeys.unshift({ e2eKeyId: keyId, ts: new Date(), E2EKey: sub.E2EKey });\n\n\treturn sortedKeys.slice(0, 10);\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ffd0b4a7f0ff22757a0997c5a3932de6de5c52d4"}
