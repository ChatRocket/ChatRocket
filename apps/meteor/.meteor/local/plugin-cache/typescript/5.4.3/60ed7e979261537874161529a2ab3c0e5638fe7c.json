{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServiceClassInternal, Message } from '@rocket.chat/core-services';\nimport type { IOmnichannelEEService } from '@rocket.chat/core-services';\nimport { isOmnichannelRoom, LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom, IUser, ILivechatInquiryRecord, IOmnichannelSystemMessage } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Subscriptions, LivechatInquiry } from '@rocket.chat/models';\n\nimport {\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnRoomChangedById,\n} from '../../../../../app/lib/server/lib/notifyListener';\nimport { dispatchAgentDelegated } from '../../../../../app/livechat/server/lib/Helper';\nimport { queueInquiry } from '../../../../../app/livechat/server/lib/QueueManager';\nimport { RoutingManager } from '../../../../../app/livechat/server/lib/RoutingManager';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\nexport class OmnichannelEE extends ServiceClassInternal implements IOmnichannelEEService {\n\tprotected name = 'omnichannel-ee';\n\n\tprotected internal = true;\n\n\tlogger: Logger;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.logger = new Logger('OmnichannelEE');\n\t}\n\n\tasync placeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold'>,\n\t\tcomment: string,\n\t\tonHoldBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t) {\n\t\tthis.logger.debug(`Attempting to place room ${room._id} on hold by user ${onHoldBy?._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\t\tif (!room.open) {\n\t\t\tthrow new Error('error-room-already-closed');\n\t\t}\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-is-already-on-hold');\n\t\t}\n\t\tconst restrictedOnHold = settings.get('Livechat_allow_manual_on_hold_upon_agent_engagement_only');\n\t\tconst canRoomBePlacedOnHold = !room.onHold;\n\t\tconst canAgentPlaceOnHold = !room.lastMessage?.token;\n\t\tconst canPlaceChatOnHold = canRoomBePlacedOnHold && (!restrictedOnHold || canAgentPlaceOnHold);\n\t\tif (!canPlaceChatOnHold) {\n\t\t\tthrow new Error('error-cannot-place-chat-on-hold');\n\t\t}\n\t\tif (!room.servedBy) {\n\t\t\tthrow new Error('error-unserved-rooms-cannot-be-placed-onhold');\n\t\t}\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.setOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.setOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_placed_chat_on_hold', roomId, '', onHoldBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHold', room);\n\t}\n\n\tasync resumeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold' | 'servedBy'>,\n\t\tcomment: string,\n\t\tresumeBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\tclientAction = false,\n\t) {\n\t\tthis.logger.debug(`Attempting to resume room ${room._id} on hold by user ${resumeBy?._id}`);\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\n\t\tif (!room.open) {\n\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t}\n\n\t\tif (!room.onHold) {\n\t\t\tthrow new Error('error-room-not-on-hold');\n\t\t}\n\n\t\tconst { _id: roomId, servedBy } = room;\n\n\t\tif (!servedBy) {\n\t\t\tthis.logger.error(`No serving agent found for room ${roomId}`);\n\t\t\tthrow new Error('error-room-not-served');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tif (!inquiry) {\n\t\t\tthis.logger.error(`No inquiry found for room ${roomId}`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait this.attemptToAssignRoomToServingAgentElseQueueIt({\n\t\t\troom,\n\t\t\tinquiry,\n\t\t\tservingAgent: servedBy,\n\t\t\tclientAction,\n\t\t});\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.unsetOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.unsetOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_on_hold_chat_resumed', roomId, '', resumeBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHoldChatResumed', room);\n\t}\n\n\tprivate async attemptToAssignRoomToServingAgentElseQueueIt({\n\t\troom,\n\t\tinquiry,\n\t\tservingAgent,\n\t\tclientAction,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t\tservingAgent: NonNullable<IOmnichannelRoom['servedBy']>;\n\t\tclientAction: boolean;\n\t}) {\n\t\ttry {\n\t\t\tconst agent = {\n\t\t\t\tagentId: servingAgent._id,\n\t\t\t\tusername: servingAgent.username,\n\t\t\t};\n\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t} catch (e) {\n\t\t\tthis.logger.error(`Agent ${servingAgent._id} is not available to take the inquiry ${inquiry._id}`, e);\n\t\t\tif (clientAction) {\n\t\t\t\t// if the action was triggered by the client, we should throw the error\n\t\t\t\t// so the client can handle it and show the error message to the user\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tawait this.removeCurrentAgentFromRoom({ room, inquiry });\n\n\t\tconst { _id: inquiryId } = inquiry;\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiryId);\n\n\t\tif (!newInquiry) {\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\t\tawait queueInquiry(newInquiry);\n\t}\n\n\tprivate async removeCurrentAgentFromRoom({\n\t\troom,\n\t\tinquiry,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t}): Promise<void> {\n\t\tthis.logger.debug(`Attempting to remove current agent from room ${room._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tconst { _id: inquiryId } = inquiry;\n\n\t\tawait Promise.all([\n\t\t\tLivechatRooms.removeAgentByRoomId(roomId),\n\t\t\tLivechatInquiry.queueInquiryAndRemoveDefaultAgent(inquiryId),\n\t\t\tRoutingManager.removeAllRoomSubscriptions(room),\n\t\t]);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiryId, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\tqueuedAt: new Date(),\n\t\t\ttakenAt: undefined,\n\t\t\tdefaultAgent: undefined,\n\t\t});\n\n\t\tawait dispatchAgentDelegated(roomId);\n\n\t\tvoid notifyOnRoomChangedById(roomId);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServiceClassInternal, Message } from '@rocket.chat/core-services';\nimport type { IOmnichannelEEService } from '@rocket.chat/core-services';\nimport { isOmnichannelRoom, LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom, IUser, ILivechatInquiryRecord, IOmnichannelSystemMessage } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Subscriptions, LivechatInquiry } from '@rocket.chat/models';\n\nimport {\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnRoomChangedById,\n} from '../../../../../app/lib/server/lib/notifyListener';\nimport { dispatchAgentDelegated } from '../../../../../app/livechat/server/lib/Helper';\nimport { queueInquiry } from '../../../../../app/livechat/server/lib/QueueManager';\nimport { RoutingManager } from '../../../../../app/livechat/server/lib/RoutingManager';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\nexport class OmnichannelEE extends ServiceClassInternal implements IOmnichannelEEService {\n\tprotected name = 'omnichannel-ee';\n\n\tprotected internal = true;\n\n\tlogger: Logger;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.logger = new Logger('OmnichannelEE');\n\t}\n\n\tasync placeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold'>,\n\t\tcomment: string,\n\t\tonHoldBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t) {\n\t\tthis.logger.debug(`Attempting to place room ${room._id} on hold by user ${onHoldBy?._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\t\tif (!room.open) {\n\t\t\tthrow new Error('error-room-already-closed');\n\t\t}\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-is-already-on-hold');\n\t\t}\n\t\tconst restrictedOnHold = settings.get('Livechat_allow_manual_on_hold_upon_agent_engagement_only');\n\t\tconst canRoomBePlacedOnHold = !room.onHold;\n\t\tconst canAgentPlaceOnHold = !room.lastMessage?.token;\n\t\tconst canPlaceChatOnHold = canRoomBePlacedOnHold && (!restrictedOnHold || canAgentPlaceOnHold);\n\t\tif (!canPlaceChatOnHold) {\n\t\t\tthrow new Error('error-cannot-place-chat-on-hold');\n\t\t}\n\t\tif (!room.servedBy) {\n\t\t\tthrow new Error('error-unserved-rooms-cannot-be-placed-onhold');\n\t\t}\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.setOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.setOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_placed_chat_on_hold', roomId, '', onHoldBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHold', room);\n\t}\n\n\tasync resumeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold' | 'servedBy'>,\n\t\tcomment: string,\n\t\tresumeBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\tclientAction = false,\n\t) {\n\t\tthis.logger.debug(`Attempting to resume room ${room._id} on hold by user ${resumeBy?._id}`);\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\n\t\tif (!room.open) {\n\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t}\n\n\t\tif (!room.onHold) {\n\t\t\tthrow new Error('error-room-not-on-hold');\n\t\t}\n\n\t\tconst { _id: roomId, servedBy } = room;\n\n\t\tif (!servedBy) {\n\t\t\tthis.logger.error(`No serving agent found for room ${roomId}`);\n\t\t\tthrow new Error('error-room-not-served');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tif (!inquiry) {\n\t\t\tthis.logger.error(`No inquiry found for room ${roomId}`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait this.attemptToAssignRoomToServingAgentElseQueueIt({\n\t\t\troom,\n\t\t\tinquiry,\n\t\t\tservingAgent: servedBy,\n\t\t\tclientAction,\n\t\t});\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.unsetOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.unsetOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_on_hold_chat_resumed', roomId, '', resumeBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHoldChatResumed', room);\n\t}\n\n\tprivate async attemptToAssignRoomToServingAgentElseQueueIt({\n\t\troom,\n\t\tinquiry,\n\t\tservingAgent,\n\t\tclientAction,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t\tservingAgent: NonNullable<IOmnichannelRoom['servedBy']>;\n\t\tclientAction: boolean;\n\t}) {\n\t\ttry {\n\t\t\tconst agent = {\n\t\t\t\tagentId: servingAgent._id,\n\t\t\t\tusername: servingAgent.username,\n\t\t\t};\n\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t} catch (e) {\n\t\t\tthis.logger.error(`Agent ${servingAgent._id} is not available to take the inquiry ${inquiry._id}`, e);\n\t\t\tif (clientAction) {\n\t\t\t\t// if the action was triggered by the client, we should throw the error\n\t\t\t\t// so the client can handle it and show the error message to the user\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tawait this.removeCurrentAgentFromRoom({ room, inquiry });\n\n\t\tconst { _id: inquiryId } = inquiry;\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiryId);\n\n\t\tif (!newInquiry) {\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\t\tawait queueInquiry(newInquiry);\n\t}\n\n\tprivate async removeCurrentAgentFromRoom({\n\t\troom,\n\t\tinquiry,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t}): Promise<void> {\n\t\tthis.logger.debug(`Attempting to remove current agent from room ${room._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tconst { _id: inquiryId } = inquiry;\n\n\t\tawait Promise.all([\n\t\t\tLivechatRooms.removeAgentByRoomId(roomId),\n\t\t\tLivechatInquiry.queueInquiryAndRemoveDefaultAgent(inquiryId),\n\t\t\tRoutingManager.removeAllRoomSubscriptions(room),\n\t\t]);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiryId, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\tqueuedAt: new Date(),\n\t\t\ttakenAt: undefined,\n\t\t\tdefaultAgent: undefined,\n\t\t});\n\n\t\tawait dispatchAgentDelegated(roomId);\n\n\t\tvoid notifyOnRoomChangedById(roomId);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      OmnichannelEE: () => OmnichannelEE\n    });\n    let ServiceClassInternal, Message;\n    module.link(\"@rocket.chat/core-services\", {\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      },\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let isOmnichannelRoom, LivechatInquiryStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      },\n      LivechatInquiryStatus(v) {\n        LivechatInquiryStatus = v;\n      }\n    }, 1);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 2);\n    let LivechatRooms, Subscriptions, LivechatInquiry;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      }\n    }, 3);\n    let notifyOnSubscriptionChangedByRoomId, notifyOnLivechatInquiryChangedById, notifyOnRoomChangedById;\n    module.link(\"../../../../../app/lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      },\n      notifyOnLivechatInquiryChangedById(v) {\n        notifyOnLivechatInquiryChangedById = v;\n      },\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      }\n    }, 4);\n    let dispatchAgentDelegated;\n    module.link(\"../../../../../app/livechat/server/lib/Helper\", {\n      dispatchAgentDelegated(v) {\n        dispatchAgentDelegated = v;\n      }\n    }, 5);\n    let queueInquiry;\n    module.link(\"../../../../../app/livechat/server/lib/QueueManager\", {\n      queueInquiry(v) {\n        queueInquiry = v;\n      }\n    }, 6);\n    let RoutingManager;\n    module.link(\"../../../../../app/livechat/server/lib/RoutingManager\", {\n      RoutingManager(v) {\n        RoutingManager = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 9);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class OmnichannelEE extends ServiceClassInternal {\n      constructor() {\n        super();\n        this.name = 'omnichannel-ee';\n        this.internal = true;\n        this.logger = void 0;\n        this.logger = new Logger('OmnichannelEE');\n      }\n      async placeRoomOnHold(room, comment, onHoldBy) {\n        var _room$lastMessage;\n        this.logger.debug(\"Attempting to place room \".concat(room._id, \" on hold by user \").concat(onHoldBy === null || onHoldBy === void 0 ? void 0 : onHoldBy._id));\n        const {\n          _id: roomId\n        } = room;\n        if (!room || !isOmnichannelRoom(room)) {\n          throw new Error('error-invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('error-room-already-closed');\n        }\n        if (room.onHold) {\n          throw new Error('error-room-is-already-on-hold');\n        }\n        const restrictedOnHold = settings.get('Livechat_allow_manual_on_hold_upon_agent_engagement_only');\n        const canRoomBePlacedOnHold = !room.onHold;\n        const canAgentPlaceOnHold = !((_room$lastMessage = room.lastMessage) !== null && _room$lastMessage !== void 0 && _room$lastMessage.token);\n        const canPlaceChatOnHold = canRoomBePlacedOnHold && (!restrictedOnHold || canAgentPlaceOnHold);\n        if (!canPlaceChatOnHold) {\n          throw new Error('error-cannot-place-chat-on-hold');\n        }\n        if (!room.servedBy) {\n          throw new Error('error-unserved-rooms-cannot-be-placed-onhold');\n        }\n        const [roomResult, subsResult] = await Promise.all([LivechatRooms.setOnHoldByRoomId(roomId), Subscriptions.setOnHoldByRoomId(roomId), Message.saveSystemMessage('omnichannel_placed_chat_on_hold', roomId, '', onHoldBy, {\n          comment\n        })]);\n        if (roomResult.modifiedCount) {\n          void notifyOnRoomChangedById(roomId);\n        }\n        if (subsResult.modifiedCount) {\n          void notifyOnSubscriptionChangedByRoomId(roomId);\n        }\n        await callbacks.run('livechat:afterOnHold', room);\n      }\n      async resumeRoomOnHold(room, comment, resumeBy) {\n        let clientAction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        this.logger.debug(\"Attempting to resume room \".concat(room._id, \" on hold by user \").concat(resumeBy === null || resumeBy === void 0 ? void 0 : resumeBy._id));\n        if (!room || !isOmnichannelRoom(room)) {\n          throw new Error('error-invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('This_conversation_is_already_closed');\n        }\n        if (!room.onHold) {\n          throw new Error('error-room-not-on-hold');\n        }\n        const {\n          _id: roomId,\n          servedBy\n        } = room;\n        if (!servedBy) {\n          this.logger.error(\"No serving agent found for room \".concat(roomId));\n          throw new Error('error-room-not-served');\n        }\n        const inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n        if (!inquiry) {\n          this.logger.error(\"No inquiry found for room \".concat(roomId));\n          throw new Error('error-invalid-inquiry');\n        }\n        await this.attemptToAssignRoomToServingAgentElseQueueIt({\n          room,\n          inquiry,\n          servingAgent: servedBy,\n          clientAction\n        });\n        const [roomResult, subsResult] = await Promise.all([LivechatRooms.unsetOnHoldByRoomId(roomId), Subscriptions.unsetOnHoldByRoomId(roomId), Message.saveSystemMessage('omnichannel_on_hold_chat_resumed', roomId, '', resumeBy, {\n          comment\n        })]);\n        if (roomResult.modifiedCount) {\n          void notifyOnRoomChangedById(roomId);\n        }\n        if (subsResult.modifiedCount) {\n          void notifyOnSubscriptionChangedByRoomId(roomId);\n        }\n        await callbacks.run('livechat:afterOnHoldChatResumed', room);\n      }\n      async attemptToAssignRoomToServingAgentElseQueueIt(_ref) {\n        let {\n          room,\n          inquiry,\n          servingAgent,\n          clientAction\n        } = _ref;\n        try {\n          const agent = {\n            agentId: servingAgent._id,\n            username: servingAgent.username\n          };\n          await callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n            agent,\n            inquiry,\n            options: {}\n          });\n          return;\n        } catch (e) {\n          this.logger.error(\"Agent \".concat(servingAgent._id, \" is not available to take the inquiry \").concat(inquiry._id), e);\n          if (clientAction) {\n            // if the action was triggered by the client, we should throw the error\n            // so the client can handle it and show the error message to the user\n            throw e;\n          }\n        }\n        await this.removeCurrentAgentFromRoom({\n          room,\n          inquiry\n        });\n        const {\n          _id: inquiryId\n        } = inquiry;\n        const newInquiry = await LivechatInquiry.findOneById(inquiryId);\n        if (!newInquiry) {\n          throw new Error('error-invalid-inquiry');\n        }\n        await queueInquiry(newInquiry);\n      }\n      async removeCurrentAgentFromRoom(_ref2) {\n        let {\n          room,\n          inquiry\n        } = _ref2;\n        this.logger.debug(\"Attempting to remove current agent from room \".concat(room._id));\n        const {\n          _id: roomId\n        } = room;\n        const {\n          _id: inquiryId\n        } = inquiry;\n        await Promise.all([LivechatRooms.removeAgentByRoomId(roomId), LivechatInquiry.queueInquiryAndRemoveDefaultAgent(inquiryId), RoutingManager.removeAllRoomSubscriptions(room)]);\n        void notifyOnLivechatInquiryChangedById(inquiryId, 'updated', {\n          status: LivechatInquiryStatus.QUEUED,\n          queuedAt: new Date(),\n          takenAt: undefined,\n          defaultAgent: undefined\n        });\n        await dispatchAgentDelegated(roomId);\n        void notifyOnRoomChangedById(roomId);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","OmnichannelEE","ServiceClassInternal","Message","link","v","isOmnichannelRoom","LivechatInquiryStatus","Logger","LivechatRooms","Subscriptions","LivechatInquiry","notifyOnSubscriptionChangedByRoomId","notifyOnLivechatInquiryChangedById","notifyOnRoomChangedById","dispatchAgentDelegated","queueInquiry","RoutingManager","settings","callbacks","__reifyWaitForDeps__","constructor","name","internal","logger","placeRoomOnHold","room","comment","onHoldBy","_room$lastMessage","debug","concat","_id","roomId","Error","open","onHold","restrictedOnHold","get","canRoomBePlacedOnHold","canAgentPlaceOnHold","lastMessage","token","canPlaceChatOnHold","servedBy","roomResult","subsResult","Promise","all","setOnHoldByRoomId","saveSystemMessage","modifiedCount","run","resumeRoomOnHold","resumeBy","clientAction","arguments","length","undefined","error","inquiry","findOneByRoomId","attemptToAssignRoomToServingAgentElseQueueIt","servingAgent","unsetOnHoldByRoomId","_ref","agent","agentId","username","options","e","removeCurrentAgentFromRoom","inquiryId","newInquiry","findOneById","_ref2","removeAgentByRoomId","queueInquiryAndRemoveDefaultAgent","removeAllRoomSubscriptions","status","QUEUED","queuedAt","Date","takenAt","defaultAgent","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/services/omnichannel.internalService.ts"],"sourcesContent":["import { ServiceClassInternal, Message } from '@rocket.chat/core-services';\nimport type { IOmnichannelEEService } from '@rocket.chat/core-services';\nimport { isOmnichannelRoom, LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { IOmnichannelRoom, IUser, ILivechatInquiryRecord, IOmnichannelSystemMessage } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms, Subscriptions, LivechatInquiry } from '@rocket.chat/models';\n\nimport {\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnRoomChangedById,\n} from '../../../../../app/lib/server/lib/notifyListener';\nimport { dispatchAgentDelegated } from '../../../../../app/livechat/server/lib/Helper';\nimport { queueInquiry } from '../../../../../app/livechat/server/lib/QueueManager';\nimport { RoutingManager } from '../../../../../app/livechat/server/lib/RoutingManager';\nimport { settings } from '../../../../../app/settings/server';\nimport { callbacks } from '../../../../../lib/callbacks';\n\nexport class OmnichannelEE extends ServiceClassInternal implements IOmnichannelEEService {\n\tprotected name = 'omnichannel-ee';\n\n\tprotected internal = true;\n\n\tlogger: Logger;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.logger = new Logger('OmnichannelEE');\n\t}\n\n\tasync placeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold'>,\n\t\tcomment: string,\n\t\tonHoldBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t) {\n\t\tthis.logger.debug(`Attempting to place room ${room._id} on hold by user ${onHoldBy?._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\t\tif (!room.open) {\n\t\t\tthrow new Error('error-room-already-closed');\n\t\t}\n\t\tif (room.onHold) {\n\t\t\tthrow new Error('error-room-is-already-on-hold');\n\t\t}\n\t\tconst restrictedOnHold = settings.get('Livechat_allow_manual_on_hold_upon_agent_engagement_only');\n\t\tconst canRoomBePlacedOnHold = !room.onHold;\n\t\tconst canAgentPlaceOnHold = !room.lastMessage?.token;\n\t\tconst canPlaceChatOnHold = canRoomBePlacedOnHold && (!restrictedOnHold || canAgentPlaceOnHold);\n\t\tif (!canPlaceChatOnHold) {\n\t\t\tthrow new Error('error-cannot-place-chat-on-hold');\n\t\t}\n\t\tif (!room.servedBy) {\n\t\t\tthrow new Error('error-unserved-rooms-cannot-be-placed-onhold');\n\t\t}\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.setOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.setOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_placed_chat_on_hold', roomId, '', onHoldBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHold', room);\n\t}\n\n\tasync resumeRoomOnHold(\n\t\troom: Pick<IOmnichannelRoom, '_id' | 't' | 'open' | 'onHold' | 'servedBy'>,\n\t\tcomment: string,\n\t\tresumeBy: Pick<IUser, '_id' | 'username' | 'name'>,\n\t\tclientAction = false,\n\t) {\n\t\tthis.logger.debug(`Attempting to resume room ${room._id} on hold by user ${resumeBy?._id}`);\n\n\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\tthrow new Error('error-invalid-room');\n\t\t}\n\n\t\tif (!room.open) {\n\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t}\n\n\t\tif (!room.onHold) {\n\t\t\tthrow new Error('error-room-not-on-hold');\n\t\t}\n\n\t\tconst { _id: roomId, servedBy } = room;\n\n\t\tif (!servedBy) {\n\t\t\tthis.logger.error(`No serving agent found for room ${roomId}`);\n\t\t\tthrow new Error('error-room-not-served');\n\t\t}\n\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(roomId, {});\n\t\tif (!inquiry) {\n\t\t\tthis.logger.error(`No inquiry found for room ${roomId}`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait this.attemptToAssignRoomToServingAgentElseQueueIt({\n\t\t\troom,\n\t\t\tinquiry,\n\t\t\tservingAgent: servedBy,\n\t\t\tclientAction,\n\t\t});\n\n\t\tconst [roomResult, subsResult] = await Promise.all([\n\t\t\tLivechatRooms.unsetOnHoldByRoomId(roomId),\n\t\t\tSubscriptions.unsetOnHoldByRoomId(roomId),\n\t\t\tMessage.saveSystemMessage<IOmnichannelSystemMessage>('omnichannel_on_hold_chat_resumed', roomId, '', resumeBy, { comment }),\n\t\t]);\n\n\t\tif (roomResult.modifiedCount) {\n\t\t\tvoid notifyOnRoomChangedById(roomId);\n\t\t}\n\n\t\tif (subsResult.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomId(roomId);\n\t\t}\n\n\t\tawait callbacks.run('livechat:afterOnHoldChatResumed', room);\n\t}\n\n\tprivate async attemptToAssignRoomToServingAgentElseQueueIt({\n\t\troom,\n\t\tinquiry,\n\t\tservingAgent,\n\t\tclientAction,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t\tservingAgent: NonNullable<IOmnichannelRoom['servedBy']>;\n\t\tclientAction: boolean;\n\t}) {\n\t\ttry {\n\t\t\tconst agent = {\n\t\t\t\tagentId: servingAgent._id,\n\t\t\t\tusername: servingAgent.username,\n\t\t\t};\n\n\t\t\tawait callbacks.run('livechat.checkAgentBeforeTakeInquiry', {\n\t\t\t\tagent,\n\t\t\t\tinquiry,\n\t\t\t\toptions: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t} catch (e) {\n\t\t\tthis.logger.error(`Agent ${servingAgent._id} is not available to take the inquiry ${inquiry._id}`, e);\n\t\t\tif (clientAction) {\n\t\t\t\t// if the action was triggered by the client, we should throw the error\n\t\t\t\t// so the client can handle it and show the error message to the user\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tawait this.removeCurrentAgentFromRoom({ room, inquiry });\n\n\t\tconst { _id: inquiryId } = inquiry;\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiryId);\n\n\t\tif (!newInquiry) {\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\t\tawait queueInquiry(newInquiry);\n\t}\n\n\tprivate async removeCurrentAgentFromRoom({\n\t\troom,\n\t\tinquiry,\n\t}: {\n\t\troom: Pick<IOmnichannelRoom, '_id'>;\n\t\tinquiry: ILivechatInquiryRecord;\n\t}): Promise<void> {\n\t\tthis.logger.debug(`Attempting to remove current agent from room ${room._id}`);\n\n\t\tconst { _id: roomId } = room;\n\n\t\tconst { _id: inquiryId } = inquiry;\n\n\t\tawait Promise.all([\n\t\t\tLivechatRooms.removeAgentByRoomId(roomId),\n\t\t\tLivechatInquiry.queueInquiryAndRemoveDefaultAgent(inquiryId),\n\t\t\tRoutingManager.removeAllRoomSubscriptions(room),\n\t\t]);\n\n\t\tvoid notifyOnLivechatInquiryChangedById(inquiryId, 'updated', {\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\tqueuedAt: new Date(),\n\t\t\ttakenAt: undefined,\n\t\t\tdefaultAgent: undefined,\n\t\t});\n\n\t\tawait dispatchAgentDelegated(roomId);\n\n\t\tvoid notifyOnRoomChangedById(roomId);\n\t}\n}\n"],"mappings":";;;IAAAA,MAAA,CAAOC,MAAE;MAAAC,aAAA,EAAoBA,CAAA,KAAEA;IAAe;IAAA,IAAAC,oBAAA,EAA4BC,OAAC;IAAAJ,MAAA,CAAAK,IAAA;MAAAF,qBAAAG,CAAA;QAAAH,oBAAA,GAAAG,CAAA;MAAA;MAAAF,QAAAE,CAAA;QAAAF,OAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,iBAAA,EAAAC,qBAAA;IAAAR,MAAA,CAAAK,IAAA;MAAAE,kBAAAD,CAAA;QAAAC,iBAAA,GAAAD,CAAA;MAAA;MAAAE,sBAAAF,CAAA;QAAAE,qBAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,MAAA;IAAAT,MAAA,CAAAK,IAAA;MAAAI,OAAAH,CAAA;QAAAG,MAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,aAAA,EAAAC,aAAA,EAAAC,eAAA;IAAAZ,MAAA,CAAAK,IAAA;MAAAK,cAAAJ,CAAA;QAAAI,aAAA,GAAAJ,CAAA;MAAA;MAAAK,cAAAL,CAAA;QAAAK,aAAA,GAAAL,CAAA;MAAA;MAAAM,gBAAAN,CAAA;QAAAM,eAAA,GAAAN,CAAA;MAAA;IAAA;IAAA,IAAAO,mCAAA,EAAAC,kCAAA,EAAAC,uBAAA;IAAAf,MAAA,CAAAK,IAAA;MAAAQ,oCAAAP,CAAA;QAAAO,mCAAA,GAAAP,CAAA;MAAA;MAAAQ,mCAAAR,CAAA;QAAAQ,kCAAA,GAAAR,CAAA;MAAA;MAAAS,wBAAAT,CAAA;QAAAS,uBAAA,GAAAT,CAAA;MAAA;IAAA;IAAA,IAAAU,sBAAA;IAAAhB,MAAA,CAAAK,IAAA;MAAAW,uBAAAV,CAAA;QAAAU,sBAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,YAAA;IAAAjB,MAAA,CAAAK,IAAA;MAAAY,aAAAX,CAAA;QAAAW,YAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,cAAA;IAAAlB,MAAA,CAAAK,IAAA;MAAAa,eAAAZ,CAAA;QAAAY,cAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,QAAA;IAAAnB,MAAA,CAAAK,IAAA;MAAAc,SAAAb,CAAA;QAAAa,QAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,SAAA;IAAApB,MAAA,CAAAK,IAAA;MAAAe,UAAAd,CAAA;QAAAc,SAAA,GAAAd,CAAA;MAAA;IAAA;IAAA,IAAAe,oBAAA,WAAAA,oBAAA;IAkBrE,MAAOnB,aAAc,SAAQC,oBAAoB;MAOtDmB,YAAA;QACC,KAAK,EAAE;QAAC,KAPCC,IAAI,GAAG,gBAAgB;QAAA,KAEvBC,QAAQ,GAAG,IAAI;QAAA,KAEzBC,MAAM;QAIL,IAAI,CAACA,MAAM,GAAG,IAAIhB,MAAM,CAAC,eAAe,CAAC;MAC1C;MAEA,MAAMiB,eAAeA,CACpBC,IAA6D,EAC7DC,OAAe,EACfC,QAAkD;QAAA,IAAAC,iBAAA;QAElD,IAAI,CAACL,MAAM,CAACM,KAAK,6BAAAC,MAAA,CAA6BL,IAAI,CAACM,GAAG,uBAAAD,MAAA,CAAoBH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,GAAG,CAAE,CAAC;QAE1F,MAAM;UAAEA,GAAG,EAAEC;QAAM,CAAE,GAAGP,IAAI;QAE5B,IAAI,CAACA,IAAI,IAAI,CAACpB,iBAAiB,CAACoB,IAAI,CAAC,EAAE;UACtC,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;QACtC;QACA,IAAI,CAACR,IAAI,CAACS,IAAI,EAAE;UACf,MAAM,IAAID,KAAK,CAAC,2BAA2B,CAAC;QAC7C;QACA,IAAIR,IAAI,CAACU,MAAM,EAAE;UAChB,MAAM,IAAIF,KAAK,CAAC,+BAA+B,CAAC;QACjD;QACA,MAAMG,gBAAgB,GAAGnB,QAAQ,CAACoB,GAAG,CAAC,0DAA0D,CAAC;QACjG,MAAMC,qBAAqB,GAAG,CAACb,IAAI,CAACU,MAAM;QAC1C,MAAMI,mBAAmB,GAAG,GAAAX,iBAAA,GAACH,IAAI,CAACe,WAAW,cAAAZ,iBAAA,eAAhBA,iBAAA,CAAkBa,KAAK;QACpD,MAAMC,kBAAkB,GAAGJ,qBAAqB,KAAK,CAACF,gBAAgB,IAAIG,mBAAmB,CAAC;QAC9F,IAAI,CAACG,kBAAkB,EAAE;UACxB,MAAM,IAAIT,KAAK,CAAC,iCAAiC,CAAC;QACnD;QACA,IAAI,CAACR,IAAI,CAACkB,QAAQ,EAAE;UACnB,MAAM,IAAIV,KAAK,CAAC,8CAA8C,CAAC;QAChE;QAEA,MAAM,CAACW,UAAU,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClDvC,aAAa,CAACwC,iBAAiB,CAAChB,MAAM,CAAC,EACvCvB,aAAa,CAACuC,iBAAiB,CAAChB,MAAM,CAAC,EACvC9B,OAAO,CAAC+C,iBAAiB,CAA4B,iCAAiC,EAAEjB,MAAM,EAAE,EAAE,EAAEL,QAAQ,EAAE;UAAED;QAAO,CAAE,CAAC,CAC1H,CAAC;QAEF,IAAIkB,UAAU,CAACM,aAAa,EAAE;UAC7B,KAAKrC,uBAAuB,CAACmB,MAAM,CAAC;QACrC;QAEA,IAAIa,UAAU,CAACK,aAAa,EAAE;UAC7B,KAAKvC,mCAAmC,CAACqB,MAAM,CAAC;QACjD;QAEA,MAAMd,SAAS,CAACiC,GAAG,CAAC,sBAAsB,EAAE1B,IAAI,CAAC;MAClD;MAEA,MAAM2B,gBAAgBA,CACrB3B,IAA0E,EAC1EC,OAAe,EACf2B,QAAkD,EAC9B;QAAA,IAApBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;QAEpB,IAAI,CAAChC,MAAM,CAACM,KAAK,8BAAAC,MAAA,CAA8BL,IAAI,CAACM,GAAG,uBAAAD,MAAA,CAAoBuB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEtB,GAAG,CAAE,CAAC;QAE3F,IAAI,CAACN,IAAI,IAAI,CAACpB,iBAAiB,CAACoB,IAAI,CAAC,EAAE;UACtC,MAAM,IAAIQ,KAAK,CAAC,oBAAoB,CAAC;QACtC;QAEA,IAAI,CAACR,IAAI,CAACS,IAAI,EAAE;UACf,MAAM,IAAID,KAAK,CAAC,qCAAqC,CAAC;QACvD;QAEA,IAAI,CAACR,IAAI,CAACU,MAAM,EAAE;UACjB,MAAM,IAAIF,KAAK,CAAC,wBAAwB,CAAC;QAC1C;QAEA,MAAM;UAAEF,GAAG,EAAEC,MAAM;UAAEW;QAAQ,CAAE,GAAGlB,IAAI;QAEtC,IAAI,CAACkB,QAAQ,EAAE;UACd,IAAI,CAACpB,MAAM,CAACmC,KAAK,oCAAA5B,MAAA,CAAoCE,MAAM,CAAE,CAAC;UAC9D,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QACzC;QAEA,MAAM0B,OAAO,GAAG,MAAMjD,eAAe,CAACkD,eAAe,CAAC5B,MAAM,EAAE,EAAE,CAAC;QACjE,IAAI,CAAC2B,OAAO,EAAE;UACb,IAAI,CAACpC,MAAM,CAACmC,KAAK,8BAAA5B,MAAA,CAA8BE,MAAM,CAAE,CAAC;UACxD,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;QACzC;QAEA,MAAM,IAAI,CAAC4B,4CAA4C,CAAC;UACvDpC,IAAI;UACJkC,OAAO;UACPG,YAAY,EAAEnB,QAAQ;UACtBW;SACA,CAAC;QAEF,MAAM,CAACV,UAAU,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClDvC,aAAa,CAACuD,mBAAmB,CAAC/B,MAAM,CAAC,EACzCvB,aAAa,CAACsD,mBAAmB,CAAC/B,MAAM,CAAC,EACzC9B,OAAO,CAAC+C,iBAAiB,CAA4B,kCAAkC,EAAEjB,MAAM,EAAE,EAAE,EAAEqB,QAAQ,EAAE;UAAE3B;QAAO,CAAE,CAAC,CAC3H,CAAC;QAEF,IAAIkB,UAAU,CAACM,aAAa,EAAE;UAC7B,KAAKrC,uBAAuB,CAACmB,MAAM,CAAC;QACrC;QAEA,IAAIa,UAAU,CAACK,aAAa,EAAE;UAC7B,KAAKvC,mCAAmC,CAACqB,MAAM,CAAC;QACjD;QAEA,MAAMd,SAAS,CAACiC,GAAG,CAAC,iCAAiC,EAAE1B,IAAI,CAAC;MAC7D;MAEQ,MAAMoC,4CAA4CA,CAAAG,IAAA,EAUzD;QAAA,IAV0D;UAC1DvC,IAAI;UACJkC,OAAO;UACPG,YAAY;UACZR;QAAY,CAMZ,GAAAU,IAAA;QACA,IAAI;UACH,MAAMC,KAAK,GAAG;YACbC,OAAO,EAAEJ,YAAY,CAAC/B,GAAG;YACzBoC,QAAQ,EAAEL,YAAY,CAACK;WACvB;UAED,MAAMjD,SAAS,CAACiC,GAAG,CAAC,sCAAsC,EAAE;YAC3Dc,KAAK;YACLN,OAAO;YACPS,OAAO,EAAE;WACT,CAAC;UAEF;QACD,CAAC,CAAC,OAAOC,CAAC,EAAE;UACX,IAAI,CAAC9C,MAAM,CAACmC,KAAK,UAAA5B,MAAA,CAAUgC,YAAY,CAAC/B,GAAG,4CAAAD,MAAA,CAAyC6B,OAAO,CAAC5B,GAAG,GAAIsC,CAAC,CAAC;UACrG,IAAIf,YAAY,EAAE;YACjB;YACA;YACA,MAAMe,CAAC;UACR;QACD;QAEA,MAAM,IAAI,CAACC,0BAA0B,CAAC;UAAE7C,IAAI;UAAEkC;QAAO,CAAE,CAAC;QAExD,MAAM;UAAE5B,GAAG,EAAEwC;QAAS,CAAE,GAAGZ,OAAO;QAClC,MAAMa,UAAU,GAAG,MAAM9D,eAAe,CAAC+D,WAAW,CAACF,SAAS,CAAC;QAE/D,IAAI,CAACC,UAAU,EAAE;UAChB,MAAM,IAAIvC,KAAK,CAAC,uBAAuB,CAAC;QACzC;QACA,MAAMlB,YAAY,CAACyD,UAAU,CAAC;MAC/B;MAEQ,MAAMF,0BAA0BA,CAAAI,KAAA,EAMvC;QAAA,IANwC;UACxCjD,IAAI;UACJkC;QAAO,CAIP,GAAAe,KAAA;QACA,IAAI,CAACnD,MAAM,CAACM,KAAK,iDAAAC,MAAA,CAAiDL,IAAI,CAACM,GAAG,CAAE,CAAC;QAE7E,MAAM;UAAEA,GAAG,EAAEC;QAAM,CAAE,GAAGP,IAAI;QAE5B,MAAM;UAAEM,GAAG,EAAEwC;QAAS,CAAE,GAAGZ,OAAO;QAElC,MAAMb,OAAO,CAACC,GAAG,CAAC,CACjBvC,aAAa,CAACmE,mBAAmB,CAAC3C,MAAM,CAAC,EACzCtB,eAAe,CAACkE,iCAAiC,CAACL,SAAS,CAAC,EAC5DvD,cAAc,CAAC6D,0BAA0B,CAACpD,IAAI,CAAC,CAC/C,CAAC;QAEF,KAAKb,kCAAkC,CAAC2D,SAAS,EAAE,SAAS,EAAE;UAC7DO,MAAM,EAAExE,qBAAqB,CAACyE,MAAM;UACpCC,QAAQ,EAAE,IAAIC,IAAI,EAAE;UACpBC,OAAO,EAAEzB,SAAS;UAClB0B,YAAY,EAAE1B;SACd,CAAC;QAEF,MAAM3C,sBAAsB,CAACkB,MAAM,CAAC;QAEpC,KAAKnB,uBAAuB,CAACmB,MAAM,CAAC;MACrC;;IACAoD,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"60ed7e979261537874161529a2ab3c0e5638fe7c"}
