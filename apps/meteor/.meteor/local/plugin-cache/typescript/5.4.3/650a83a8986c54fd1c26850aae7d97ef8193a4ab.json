{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/deeplTranslate.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/autotranslate/server/deeplTranslate.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/deeplTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/deeplTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/deeplTranslate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIDeepLTranslation,\n\tMessageAttachment,\n\tIProviderMetadata,\n\tITranslationResult,\n\tISupportedLanguage,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\n\nconst proApiEndpoint = 'https://api.deepl.com/v2/translate';\nconst freeApiEndpoint = 'https://api-free.deepl.com/v2/translate';\n\n/**\n * DeepL translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass DeeplAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to deepl translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'deepl-translate';\n\t\tthis.apiEndPointUrl = proApiEndpoint;\n\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_DeepLAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\n\t\t\t// if the api key ends with `:fx` it is a free api key\n\t\t\tif (/:fx$/.test(value)) {\n\t\t\t\tthis.apiEndPointUrl = freeApiEndpoint;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.apiEndPointUrl = proApiEndpoint;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_DeepL'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Deepl does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target] = [\n\t\t\t{\n\t\t\t\tlanguage: 'bg',\n\t\t\t\tname: i18n.t('Language_Bulgarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'cs',\n\t\t\t\tname: i18n.t('Language_Czech', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'da',\n\t\t\t\tname: i18n.t('Language_Danish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'de',\n\t\t\t\tname: i18n.t('Language_German', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'el',\n\t\t\t\tname: i18n.t('Language_Greek', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'en',\n\t\t\t\tname: i18n.t('Language_English', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'es',\n\t\t\t\tname: i18n.t('Language_Spanish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'et',\n\t\t\t\tname: i18n.t('Language_Estonian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fi',\n\t\t\t\tname: i18n.t('Language_Finnish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fr',\n\t\t\t\tname: i18n.t('Language_French', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'hu',\n\t\t\t\tname: i18n.t('Language_Hungarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'it',\n\t\t\t\tname: i18n.t('Language_Italian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ja',\n\t\t\t\tname: i18n.t('Language_Japanese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lt',\n\t\t\t\tname: i18n.t('Language_Lithuanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lv',\n\t\t\t\tname: i18n.t('Language_Latvian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'nl',\n\t\t\t\tname: i18n.t('Language_Dutch', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pl',\n\t\t\t\tname: i18n.t('Language_Polish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pt',\n\t\t\t\tname: i18n.t('Language_Portuguese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ro',\n\t\t\t\tname: i18n.t('Language_Romanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ru',\n\t\t\t\tname: i18n.t('Language_Russian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sk',\n\t\t\t\tname: i18n.t('Language_Slovak', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sl',\n\t\t\t\tname: i18n.t('Language_Slovenian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sv',\n\t\t\t\tname: i18n.t('Language_Swedish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'zh',\n\t\t\t\tname: i18n.t('Language_Chinese', { lng: target }),\n\t\t\t},\n\t\t];\n\n\t\treturn this.supportedLanguages[target];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst msgs = message.msg.split('\\n');\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: { target_lang: language, text: msgs },\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `DeepL-Auth-Key ${this.apiKey}`,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t});\n\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\t// store translation only when the source and target language are different.\n\t\t\t\t\t// multiple lines might contain different languages => Mix the text between source and detected target if neccessary\n\t\t\t\t\tconst translatedText = body.translations\n\t\t\t\t\t\t.map((translation: IDeepLTranslation, index: number) =>\n\t\t\t\t\t\t\ttranslation.detected_source_language !== language ? translation.text : msgs[index],\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: translatedText }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tauth_key: this.apiKey,\n\t\t\t\t\t\ttarget_lang: language,\n\t\t\t\t\t\ttext: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\tif (body.translations.map((translation: IDeepLTranslation) => translation.detected_source_language).join() !== language) {\n\t\t\t\t\t\ttranslations[language] = body.translations.map((translation: IDeepLTranslation) => translation.text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message attachment', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register DeepL translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new DeeplAutoTranslate());\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/autotranslate/server/deeplTranslate.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/autotranslate/server/deeplTranslate.ts","inputSourceMap":{"version":3,"file":"app/autotranslate/server/deeplTranslate.ts","sourceRoot":"","sources":["app/autotranslate/server/deeplTranslate.ts"],"names":[],"mappings":"AAAA;;GAEG;AAUH,OAAO,EAAE,WAAW,IAAI,KAAK,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,CAAC,MAAM,YAAY,CAAC;AAE3B,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,2BAA2B,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAE7E,MAAM,cAAc,GAAG,oCAAoC,CAAC;AAC5D,MAAM,eAAe,GAAG,yCAAyC,CAAC;AAElE;;;;;;;GAOG;AACH,MAAM,kBAAmB,SAAQ,aAAa;IAC7C,MAAM,CAAS;IAEf,cAAc,CAAS;IAEvB;;;OAGG;IACH;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,mCAAmC;QACnC,QAAQ,CAAC,KAAK,CAAS,2BAA2B,EAAE,CAAC,KAAK,EAAE,EAAE;YAC7D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YAEpB,sDAAsD;YACtD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACxB,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;gBACtC,OAAO;YACR,CAAC;YACD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACtC,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,oBAAoB;QACnB,OAAO;YACN,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,qBAAqB,CAAC;YAC1C,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE;SAC7B,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,YAAY;QACX,OAAO;YACN,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,cAAc,EAAE,IAAI,CAAC,cAAc;SACnC,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,qBAAqB,CAAC,MAAc;QACzC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,OAAO,EAAE,CAAC;QACX,CAAC;QAED,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG;YACjC;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACnD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAC/C;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAChD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAChD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAC/C;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAClD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAChD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACnD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAClD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,qBAAqB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACpD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,gBAAgB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAC/C;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAChD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,qBAAqB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACpD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,mBAAmB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAClD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aAChD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,oBAAoB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACnD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;YACD;gBACC,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kBAAkB,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;aACjD;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,iBAAiB,CAAC,OAAiB,EAAE,eAAyB;QACnE,MAAM,YAAY,GAA4B,EAAE,CAAC;QACjD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI,KAAK,EAAE,IAAI,QAAQ,IAAI,eAAe,EAAE,CAAC;YAC5C,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,kBAAkB,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;gBACpF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC;YACD,IAAI,CAAC;gBACJ,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE;oBAC/C,MAAM,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;oBAC7C,OAAO,EAAE;wBACR,aAAa,EAAE,kBAAkB,IAAI,CAAC,MAAM,EAAE;qBAC9C;oBACD,MAAM,EAAE,MAAM;iBACd,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;oBAChB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBACpC,CAAC;gBAED,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBAEjC,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACpH,4EAA4E;oBAC5E,oHAAoH;oBACpH,MAAM,cAAc,GAAG,IAAI,CAAC,YAAY;yBACtC,GAAG,CAAC,CAAC,WAA8B,EAAE,KAAa,EAAE,EAAE,CACtD,WAAW,CAAC,wBAAwB,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAClF;yBACA,IAAI,CAAC,IAAI,CAAC,CAAC;oBACb,YAAY,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;gBAC/F,CAAC;YACF,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,2BAA2B,EAAE,GAAG,EAAE,CAAC,CAAC;YAC/D,CAAC;QACF,CAAC;QACD,OAAO,YAAY,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,gCAAgC,CAAC,UAA6B,EAAE,eAAyB;QAC9F,MAAM,YAAY,GAA4B,EAAE,CAAC;QACjD,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QAClE,IAAI,KAAK,EAAE,IAAI,QAAQ,IAAI,eAAe,EAAE,CAAC;YAC5C,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,kBAAkB,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;gBACpF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAClC,CAAC;YACD,IAAI,CAAC;gBACJ,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE;oBAC/C,MAAM,EAAE;wBACP,QAAQ,EAAE,IAAI,CAAC,MAAM;wBACrB,WAAW,EAAE,QAAQ;wBACrB,IAAI,EAAE,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,IAAI,IAAI,EAAE;qBACrD;iBACD,CAAC,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;oBAChB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBACpC,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;gBACjC,IAAI,MAAM,CAAC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;oBACpH,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,WAA8B,EAAE,EAAE,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC,IAAI,EAAE,KAAK,QAAQ,EAAE,CAAC;wBACzH,YAAY,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,WAA8B,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBACtG,CAAC;gBACF,CAAC;YACF,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACd,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,sCAAsC,EAAE,GAAG,EAAE,CAAC,CAAC;YAC1E,CAAC;QACF,CAAC;QACD,OAAO,YAAY,CAAC;IACrB,CAAC;CACD;AAED,uDAAuD;AACvD,2BAA2B,CAAC,gBAAgB,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC","sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIDeepLTranslation,\n\tMessageAttachment,\n\tIProviderMetadata,\n\tITranslationResult,\n\tISupportedLanguage,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\n\nconst proApiEndpoint = 'https://api.deepl.com/v2/translate';\nconst freeApiEndpoint = 'https://api-free.deepl.com/v2/translate';\n\n/**\n * DeepL translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass DeeplAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to deepl translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'deepl-translate';\n\t\tthis.apiEndPointUrl = proApiEndpoint;\n\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_DeepLAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\n\t\t\t// if the api key ends with `:fx` it is a free api key\n\t\t\tif (/:fx$/.test(value)) {\n\t\t\t\tthis.apiEndPointUrl = freeApiEndpoint;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.apiEndPointUrl = proApiEndpoint;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_DeepL'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Deepl does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target] = [\n\t\t\t{\n\t\t\t\tlanguage: 'bg',\n\t\t\t\tname: i18n.t('Language_Bulgarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'cs',\n\t\t\t\tname: i18n.t('Language_Czech', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'da',\n\t\t\t\tname: i18n.t('Language_Danish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'de',\n\t\t\t\tname: i18n.t('Language_German', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'el',\n\t\t\t\tname: i18n.t('Language_Greek', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'en',\n\t\t\t\tname: i18n.t('Language_English', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'es',\n\t\t\t\tname: i18n.t('Language_Spanish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'et',\n\t\t\t\tname: i18n.t('Language_Estonian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fi',\n\t\t\t\tname: i18n.t('Language_Finnish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fr',\n\t\t\t\tname: i18n.t('Language_French', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'hu',\n\t\t\t\tname: i18n.t('Language_Hungarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'it',\n\t\t\t\tname: i18n.t('Language_Italian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ja',\n\t\t\t\tname: i18n.t('Language_Japanese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lt',\n\t\t\t\tname: i18n.t('Language_Lithuanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lv',\n\t\t\t\tname: i18n.t('Language_Latvian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'nl',\n\t\t\t\tname: i18n.t('Language_Dutch', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pl',\n\t\t\t\tname: i18n.t('Language_Polish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pt',\n\t\t\t\tname: i18n.t('Language_Portuguese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ro',\n\t\t\t\tname: i18n.t('Language_Romanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ru',\n\t\t\t\tname: i18n.t('Language_Russian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sk',\n\t\t\t\tname: i18n.t('Language_Slovak', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sl',\n\t\t\t\tname: i18n.t('Language_Slovenian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sv',\n\t\t\t\tname: i18n.t('Language_Swedish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'zh',\n\t\t\t\tname: i18n.t('Language_Chinese', { lng: target }),\n\t\t\t},\n\t\t];\n\n\t\treturn this.supportedLanguages[target];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst msgs = message.msg.split('\\n');\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: { target_lang: language, text: msgs },\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `DeepL-Auth-Key ${this.apiKey}`,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t});\n\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\t// store translation only when the source and target language are different.\n\t\t\t\t\t// multiple lines might contain different languages => Mix the text between source and detected target if neccessary\n\t\t\t\t\tconst translatedText = body.translations\n\t\t\t\t\t\t.map((translation: IDeepLTranslation, index: number) =>\n\t\t\t\t\t\t\ttranslation.detected_source_language !== language ? translation.text : msgs[index],\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: translatedText }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tauth_key: this.apiKey,\n\t\t\t\t\t\ttarget_lang: language,\n\t\t\t\t\t\ttext: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\tif (body.translations.map((translation: IDeepLTranslation) => translation.detected_source_language).join() !== language) {\n\t\t\t\t\t\ttranslations[language] = body.translations.map((translation: IDeepLTranslation) => translation.text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message attachment', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register DeepL translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new DeeplAutoTranslate());\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 0);\n    let _;\n    module.link(\"underscore\", {\n      default(v) {\n        _ = v;\n      }\n    }, 1);\n    let i18n;\n    module.link(\"../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 2);\n    let SystemLogger;\n    module.link(\"../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 3);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 4);\n    let TranslationProviderRegistry, AutoTranslate;\n    module.link(\"./autotranslate\", {\n      TranslationProviderRegistry(v) {\n        TranslationProviderRegistry = v;\n      },\n      AutoTranslate(v) {\n        AutoTranslate = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const proApiEndpoint = 'https://api.deepl.com/v2/translate';\n    const freeApiEndpoint = 'https://api-free.deepl.com/v2/translate';\n    /**\n     * DeepL translation service provider class representation.\n     * Encapsulates the service provider settings and information.\n     * Provides languages supported by the service provider.\n     * Resolves API call to service provider to resolve the translation request.\n     * @class\n     * @augments AutoTranslate\n     */\n    class DeeplAutoTranslate extends AutoTranslate {\n      /**\n       * setup api reference to deepl translate to be used as message translation provider.\n       * @constructor\n       */\n      constructor() {\n        super();\n        this.apiKey = void 0;\n        this.apiEndPointUrl = void 0;\n        this.name = 'deepl-translate';\n        this.apiEndPointUrl = proApiEndpoint;\n        // Get the service provide API key.\n        settings.watch('AutoTranslate_DeepLAPIKey', value => {\n          this.apiKey = value;\n          // if the api key ends with `:fx` it is a free api key\n          if (/:fx$/.test(value)) {\n            this.apiEndPointUrl = freeApiEndpoint;\n            return;\n          }\n          this.apiEndPointUrl = proApiEndpoint;\n        });\n      }\n      /**\n       * Returns metadata information about the service provide\n       * @private implements super abstract method.\n       * @return {object}\n       */\n      _getProviderMetadata() {\n        return {\n          name: this.name,\n          displayName: i18n.t('AutoTranslate_DeepL'),\n          settings: this._getSettings()\n        };\n      }\n      /**\n       * Returns necessary settings information about the translation service provider.\n       * @private implements super abstract method.\n       * @return {object}\n       */\n      _getSettings() {\n        return {\n          apiKey: this.apiKey,\n          apiEndPointUrl: this.apiEndPointUrl\n        };\n      }\n      /**\n       * Returns supported languages for translation by the active service provider.\n       * Deepl does not provide an endpoint yet to retrieve the supported languages.\n       * So each supported languages are explicitly maintained.\n       * @private implements super abstract method.\n       * @param {string} target\n       * @returns {object} code : value pair\n       */\n      async getSupportedLanguages(target) {\n        if (!this.apiKey) {\n          return [];\n        }\n        if (this.supportedLanguages[target]) {\n          return this.supportedLanguages[target];\n        }\n        this.supportedLanguages[target] = [{\n          language: 'bg',\n          name: i18n.t('Language_Bulgarian', {\n            lng: target\n          })\n        }, {\n          language: 'cs',\n          name: i18n.t('Language_Czech', {\n            lng: target\n          })\n        }, {\n          language: 'da',\n          name: i18n.t('Language_Danish', {\n            lng: target\n          })\n        }, {\n          language: 'de',\n          name: i18n.t('Language_German', {\n            lng: target\n          })\n        }, {\n          language: 'el',\n          name: i18n.t('Language_Greek', {\n            lng: target\n          })\n        }, {\n          language: 'en',\n          name: i18n.t('Language_English', {\n            lng: target\n          })\n        }, {\n          language: 'es',\n          name: i18n.t('Language_Spanish', {\n            lng: target\n          })\n        }, {\n          language: 'et',\n          name: i18n.t('Language_Estonian', {\n            lng: target\n          })\n        }, {\n          language: 'fi',\n          name: i18n.t('Language_Finnish', {\n            lng: target\n          })\n        }, {\n          language: 'fr',\n          name: i18n.t('Language_French', {\n            lng: target\n          })\n        }, {\n          language: 'hu',\n          name: i18n.t('Language_Hungarian', {\n            lng: target\n          })\n        }, {\n          language: 'it',\n          name: i18n.t('Language_Italian', {\n            lng: target\n          })\n        }, {\n          language: 'ja',\n          name: i18n.t('Language_Japanese', {\n            lng: target\n          })\n        }, {\n          language: 'lt',\n          name: i18n.t('Language_Lithuanian', {\n            lng: target\n          })\n        }, {\n          language: 'lv',\n          name: i18n.t('Language_Latvian', {\n            lng: target\n          })\n        }, {\n          language: 'nl',\n          name: i18n.t('Language_Dutch', {\n            lng: target\n          })\n        }, {\n          language: 'pl',\n          name: i18n.t('Language_Polish', {\n            lng: target\n          })\n        }, {\n          language: 'pt',\n          name: i18n.t('Language_Portuguese', {\n            lng: target\n          })\n        }, {\n          language: 'ro',\n          name: i18n.t('Language_Romanian', {\n            lng: target\n          })\n        }, {\n          language: 'ru',\n          name: i18n.t('Language_Russian', {\n            lng: target\n          })\n        }, {\n          language: 'sk',\n          name: i18n.t('Language_Slovak', {\n            lng: target\n          })\n        }, {\n          language: 'sl',\n          name: i18n.t('Language_Slovenian', {\n            lng: target\n          })\n        }, {\n          language: 'sv',\n          name: i18n.t('Language_Swedish', {\n            lng: target\n          })\n        }, {\n          language: 'zh',\n          name: i18n.t('Language_Chinese', {\n            lng: target\n          })\n        }];\n        return this.supportedLanguages[target];\n      }\n      /**\n       * Send Request REST API call to the service provider.\n       * Returns translated message for each target language in target languages.\n       * @private\n       * @param {object} message\n       * @param {object} targetLanguages\n       * @returns {object} translations: Translated messages for each language\n       */\n      async _translateMessage(message, targetLanguages) {\n        const translations = {};\n        const msgs = message.msg.split('\\n');\n        const supportedLanguages = await this.getSupportedLanguages('en');\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(targetLanguages), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            let language = _step.value;\n            {\n              if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n                language\n              })) {\n                language = language.substr(0, 2);\n              }\n              try {\n                const result = await fetch(this.apiEndPointUrl, {\n                  params: {\n                    target_lang: language,\n                    text: msgs\n                  },\n                  headers: {\n                    Authorization: \"DeepL-Auth-Key \".concat(this.apiKey)\n                  },\n                  method: 'POST'\n                });\n                if (!result.ok) {\n                  throw new Error(result.statusText);\n                }\n                const body = await result.json();\n                if (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n                  // store translation only when the source and target language are different.\n                  // multiple lines might contain different languages => Mix the text between source and detected target if neccessary\n                  const translatedText = body.translations.map((translation, index) => translation.detected_source_language !== language ? translation.text : msgs[index]).join('\\n');\n                  translations[language] = this.deTokenize(Object.assign({}, message, {\n                    msg: translatedText\n                  }));\n                }\n              } catch (err) {\n                SystemLogger.error({\n                  msg: 'Error translating message',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return translations;\n      }\n      /**\n       * Returns translated message attachment description in target languages.\n       * @private\n       * @param {object} attachment\n       * @param {object} targetLanguages\n       * @returns {object} translated messages for each target language\n       */\n      async _translateAttachmentDescriptions(attachment, targetLanguages) {\n        const translations = {};\n        const supportedLanguages = await this.getSupportedLanguages('en');\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(targetLanguages), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            let language = _step2.value;\n            {\n              if (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, {\n                language\n              })) {\n                language = language.substr(0, 2);\n              }\n              try {\n                const result = await fetch(this.apiEndPointUrl, {\n                  params: {\n                    auth_key: this.apiKey,\n                    target_lang: language,\n                    text: attachment.description || attachment.text || ''\n                  }\n                });\n                if (!result.ok) {\n                  throw new Error(result.statusText);\n                }\n                const body = await result.json();\n                if (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n                  if (body.translations.map(translation => translation.detected_source_language).join() !== language) {\n                    translations[language] = body.translations.map(translation => translation.text);\n                  }\n                }\n              } catch (err) {\n                SystemLogger.error({\n                  msg: 'Error translating message attachment',\n                  err\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return translations;\n      }\n    }\n    // Register DeepL translation provider to the registry.\n    TranslationProviderRegistry.registerProvider(new DeeplAutoTranslate());\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","fetch","serverFetch","_","i18n","SystemLogger","settings","TranslationProviderRegistry","AutoTranslate","__reifyWaitForDeps__","proApiEndpoint","freeApiEndpoint","DeeplAutoTranslate","constructor","apiKey","apiEndPointUrl","name","watch","value","test","_getProviderMetadata","displayName","t","_getSettings","getSupportedLanguages","target","supportedLanguages","language","lng","_translateMessage","message","targetLanguages","translations","msgs","msg","split","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","indexOf","findWhere","substr","result","params","target_lang","text","headers","Authorization","concat","method","ok","Error","statusText","body","json","status","Array","isArray","length","translatedText","map","translation","index","detected_source_language","join","deTokenize","Object","assign","err","error","return","_translateAttachmentDescriptions","attachment","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","auth_key","description","registerProvider","__reify_async_result__","_reifyError","self","async"],"sources":["app/autotranslate/server/deeplTranslate.ts"],"sourcesContent":["/**\n * @author Vigneshwaran Odayappan <vickyokrm@gmail.com>\n */\n\nimport type {\n\tIMessage,\n\tIDeepLTranslation,\n\tMessageAttachment,\n\tIProviderMetadata,\n\tITranslationResult,\n\tISupportedLanguage,\n} from '@rocket.chat/core-typings';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport _ from 'underscore';\n\nimport { i18n } from '../../../server/lib/i18n';\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport { settings } from '../../settings/server';\nimport { TranslationProviderRegistry, AutoTranslate } from './autotranslate';\n\nconst proApiEndpoint = 'https://api.deepl.com/v2/translate';\nconst freeApiEndpoint = 'https://api-free.deepl.com/v2/translate';\n\n/**\n * DeepL translation service provider class representation.\n * Encapsulates the service provider settings and information.\n * Provides languages supported by the service provider.\n * Resolves API call to service provider to resolve the translation request.\n * @class\n * @augments AutoTranslate\n */\nclass DeeplAutoTranslate extends AutoTranslate {\n\tapiKey: string;\n\n\tapiEndPointUrl: string;\n\n\t/**\n\t * setup api reference to deepl translate to be used as message translation provider.\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.name = 'deepl-translate';\n\t\tthis.apiEndPointUrl = proApiEndpoint;\n\n\t\t// Get the service provide API key.\n\t\tsettings.watch<string>('AutoTranslate_DeepLAPIKey', (value) => {\n\t\t\tthis.apiKey = value;\n\n\t\t\t// if the api key ends with `:fx` it is a free api key\n\t\t\tif (/:fx$/.test(value)) {\n\t\t\t\tthis.apiEndPointUrl = freeApiEndpoint;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.apiEndPointUrl = proApiEndpoint;\n\t\t});\n\t}\n\n\t/**\n\t * Returns metadata information about the service provide\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getProviderMetadata(): IProviderMetadata {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tdisplayName: i18n.t('AutoTranslate_DeepL'),\n\t\t\tsettings: this._getSettings(),\n\t\t};\n\t}\n\n\t/**\n\t * Returns necessary settings information about the translation service provider.\n\t * @private implements super abstract method.\n\t * @return {object}\n\t */\n\t_getSettings(): IProviderMetadata['settings'] {\n\t\treturn {\n\t\t\tapiKey: this.apiKey,\n\t\t\tapiEndPointUrl: this.apiEndPointUrl,\n\t\t};\n\t}\n\n\t/**\n\t * Returns supported languages for translation by the active service provider.\n\t * Deepl does not provide an endpoint yet to retrieve the supported languages.\n\t * So each supported languages are explicitly maintained.\n\t * @private implements super abstract method.\n\t * @param {string} target\n\t * @returns {object} code : value pair\n\t */\n\tasync getSupportedLanguages(target: string): Promise<ISupportedLanguage[]> {\n\t\tif (!this.apiKey) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (this.supportedLanguages[target]) {\n\t\t\treturn this.supportedLanguages[target];\n\t\t}\n\t\tthis.supportedLanguages[target] = [\n\t\t\t{\n\t\t\t\tlanguage: 'bg',\n\t\t\t\tname: i18n.t('Language_Bulgarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'cs',\n\t\t\t\tname: i18n.t('Language_Czech', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'da',\n\t\t\t\tname: i18n.t('Language_Danish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'de',\n\t\t\t\tname: i18n.t('Language_German', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'el',\n\t\t\t\tname: i18n.t('Language_Greek', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'en',\n\t\t\t\tname: i18n.t('Language_English', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'es',\n\t\t\t\tname: i18n.t('Language_Spanish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'et',\n\t\t\t\tname: i18n.t('Language_Estonian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fi',\n\t\t\t\tname: i18n.t('Language_Finnish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'fr',\n\t\t\t\tname: i18n.t('Language_French', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'hu',\n\t\t\t\tname: i18n.t('Language_Hungarian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'it',\n\t\t\t\tname: i18n.t('Language_Italian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ja',\n\t\t\t\tname: i18n.t('Language_Japanese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lt',\n\t\t\t\tname: i18n.t('Language_Lithuanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'lv',\n\t\t\t\tname: i18n.t('Language_Latvian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'nl',\n\t\t\t\tname: i18n.t('Language_Dutch', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pl',\n\t\t\t\tname: i18n.t('Language_Polish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'pt',\n\t\t\t\tname: i18n.t('Language_Portuguese', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ro',\n\t\t\t\tname: i18n.t('Language_Romanian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'ru',\n\t\t\t\tname: i18n.t('Language_Russian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sk',\n\t\t\t\tname: i18n.t('Language_Slovak', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sl',\n\t\t\t\tname: i18n.t('Language_Slovenian', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'sv',\n\t\t\t\tname: i18n.t('Language_Swedish', { lng: target }),\n\t\t\t},\n\t\t\t{\n\t\t\t\tlanguage: 'zh',\n\t\t\t\tname: i18n.t('Language_Chinese', { lng: target }),\n\t\t\t},\n\t\t];\n\n\t\treturn this.supportedLanguages[target];\n\t}\n\n\t/**\n\t * Send Request REST API call to the service provider.\n\t * Returns translated message for each target language in target languages.\n\t * @private\n\t * @param {object} message\n\t * @param {object} targetLanguages\n\t * @returns {object} translations: Translated messages for each language\n\t */\n\tasync _translateMessage(message: IMessage, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst msgs = message.msg.split('\\n');\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: { target_lang: language, text: msgs },\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAuthorization: `DeepL-Auth-Key ${this.apiKey}`,\n\t\t\t\t\t},\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t});\n\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\n\t\t\t\tconst body = await result.json();\n\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\t// store translation only when the source and target language are different.\n\t\t\t\t\t// multiple lines might contain different languages => Mix the text between source and detected target if neccessary\n\t\t\t\t\tconst translatedText = body.translations\n\t\t\t\t\t\t.map((translation: IDeepLTranslation, index: number) =>\n\t\t\t\t\t\t\ttranslation.detected_source_language !== language ? translation.text : msgs[index],\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.join('\\n');\n\t\t\t\t\ttranslations[language] = this.deTokenize(Object.assign({}, message, { msg: translatedText }));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n\n\t/**\n\t * Returns translated message attachment description in target languages.\n\t * @private\n\t * @param {object} attachment\n\t * @param {object} targetLanguages\n\t * @returns {object} translated messages for each target language\n\t */\n\tasync _translateAttachmentDescriptions(attachment: MessageAttachment, targetLanguages: string[]): Promise<ITranslationResult> {\n\t\tconst translations: { [k: string]: string } = {};\n\t\tconst supportedLanguages = await this.getSupportedLanguages('en');\n\t\tfor await (let language of targetLanguages) {\n\t\t\tif (language.indexOf('-') !== -1 && !_.findWhere(supportedLanguages, { language })) {\n\t\t\t\tlanguage = language.substr(0, 2);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst result = await fetch(this.apiEndPointUrl, {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tauth_key: this.apiKey,\n\t\t\t\t\t\ttarget_lang: language,\n\t\t\t\t\t\ttext: attachment.description || attachment.text || '',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\tif (!result.ok) {\n\t\t\t\t\tthrow new Error(result.statusText);\n\t\t\t\t}\n\t\t\t\tconst body = await result.json();\n\t\t\t\tif (result.status === 200 && body.translations && Array.isArray(body.translations) && body.translations.length > 0) {\n\t\t\t\t\tif (body.translations.map((translation: IDeepLTranslation) => translation.detected_source_language).join() !== language) {\n\t\t\t\t\t\ttranslations[language] = body.translations.map((translation: IDeepLTranslation) => translation.text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tSystemLogger.error({ msg: 'Error translating message attachment', err });\n\t\t\t}\n\t\t}\n\t\treturn translations;\n\t}\n}\n\n// Register DeepL translation provider to the registry.\nTranslationProviderRegistry.registerProvider(new DeeplAutoTranslate());\n"],"mappings":";;;IAAA,IAAAA,cAAA;IAAAC,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAJ,cAAA,GAAAI,CAAA;MAAA;IAAA;IAAA,IAAAC,KAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAI,YAAAF,CAAA;QAAAC,KAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAG,CAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAG,CAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,IAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,KAAAJ,CAAA;QAAAI,IAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,YAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,aAAAL,CAAA;QAAAK,YAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,QAAA;IAAAT,MAAA,CAAAC,IAAA;MAAAQ,SAAAN,CAAA;QAAAM,QAAA,GAAAN,CAAA;MAAA;IAAA;IAAA,IAAAO,2BAAA,EAAAC,aAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAS,4BAAAP,CAAA;QAAAO,2BAAA,GAAAP,CAAA;MAAA;MAAAQ,cAAAR,CAAA;QAAAQ,aAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAS,oBAAA,WAAAA,oBAAA;IAoBA,MAAMC,cAAc,GAAG,oCAAoC;IAC3D,MAAMC,eAAe,GAAG,yCAAyC;IAEjE;;;;;;;;IAQA,MAAMC,kBAAmB,SAAQJ,aAAa;MAK7C;;;;MAIAK,YAAA;QACC,KAAK,EAAE;QAAC,KATTC,MAAM;QAAA,KAENC,cAAc;QAQb,IAAI,CAACC,IAAI,GAAG,iBAAiB;QAC7B,IAAI,CAACD,cAAc,GAAGL,cAAc;QAEpC;QACAJ,QAAQ,CAACW,KAAK,CAAS,2BAA2B,EAAGC,KAAK,IAAI;UAC7D,IAAI,CAACJ,MAAM,GAAGI,KAAK;UAEnB;UACA,IAAI,MAAM,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE;YACvB,IAAI,CAACH,cAAc,GAAGJ,eAAe;YACrC;UACD;UACA,IAAI,CAACI,cAAc,GAAGL,cAAc;QACrC,CAAC,CAAC;MACH;MAEA;;;;;MAKAU,oBAAoBA,CAAA;QACnB,OAAO;UACNJ,IAAI,EAAE,IAAI,CAACA,IAAI;UACfK,WAAW,EAAEjB,IAAI,CAACkB,CAAC,CAAC,qBAAqB,CAAC;UAC1ChB,QAAQ,EAAE,IAAI,CAACiB,YAAY;SAC3B;MACF;MAEA;;;;;MAKAA,YAAYA,CAAA;QACX,OAAO;UACNT,MAAM,EAAE,IAAI,CAACA,MAAM;UACnBC,cAAc,EAAE,IAAI,CAACA;SACrB;MACF;MAEA;;;;;;;;MAQA,MAAMS,qBAAqBA,CAACC,MAAc;QACzC,IAAI,CAAC,IAAI,CAACX,MAAM,EAAE;UACjB,OAAO,EAAE;QACV;QAEA,IAAI,IAAI,CAACY,kBAAkB,CAACD,MAAM,CAAC,EAAE;UACpC,OAAO,IAAI,CAACC,kBAAkB,CAACD,MAAM,CAAC;QACvC;QACA,IAAI,CAACC,kBAAkB,CAACD,MAAM,CAAC,GAAG,CACjC;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,oBAAoB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAClD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,gBAAgB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC9C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,iBAAiB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC/C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,iBAAiB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC/C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,gBAAgB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC9C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,mBAAmB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SACjD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,iBAAiB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC/C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,oBAAoB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAClD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,mBAAmB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SACjD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,qBAAqB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SACnD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,gBAAgB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC9C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,iBAAiB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC/C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,qBAAqB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SACnD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,mBAAmB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SACjD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,iBAAiB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAC/C,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,oBAAoB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAClD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,EACD;UACCE,QAAQ,EAAE,IAAI;UACdX,IAAI,EAAEZ,IAAI,CAACkB,CAAC,CAAC,kBAAkB,EAAE;YAAEM,GAAG,EAAEH;UAAM,CAAE;SAChD,CACD;QAED,OAAO,IAAI,CAACC,kBAAkB,CAACD,MAAM,CAAC;MACvC;MAEA;;;;;;;;MAQA,MAAMI,iBAAiBA,CAACC,OAAiB,EAAEC,eAAyB;QACnE,MAAMC,YAAY,GAA4B,EAAE;QAChD,MAAMC,IAAI,GAAGH,OAAO,CAACI,GAAG,CAACC,KAAK,CAAC,IAAI,CAAC;QACpC,MAAMT,kBAAkB,GAAG,MAAM,IAAI,CAACF,qBAAqB,CAAC,IAAI,CAAC;QAAC,IAAAY,yBAAA;QAAA,IAAAC,iBAAA;QAAA,IAAAC,cAAA;QAAA;UAClE,SAAAC,SAAA,GAAA3C,cAAA,CAA2BmC,eAAe,GAAAS,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAC,IAAA,EAAAN,yBAAA,UAAE;YAAA,IAA7BT,QAAQ,GAAAa,KAAA,CAAAtB,KAAA;YAAA;cACtB,IAAIS,QAAQ,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAACxC,CAAC,CAACyC,SAAS,CAAClB,kBAAkB,EAAE;gBAAEC;cAAQ,CAAE,CAAC,EAAE;gBACnFA,QAAQ,GAAGA,QAAQ,CAACkB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;cACjC;cACA,IAAI;gBACH,MAAMC,MAAM,GAAG,MAAM7C,KAAK,CAAC,IAAI,CAACc,cAAc,EAAE;kBAC/CgC,MAAM,EAAE;oBAAEC,WAAW,EAAErB,QAAQ;oBAAEsB,IAAI,EAAEhB;kBAAI,CAAE;kBAC7CiB,OAAO,EAAE;oBACRC,aAAa,oBAAAC,MAAA,CAAoB,IAAI,CAACtC,MAAM;mBAC5C;kBACDuC,MAAM,EAAE;iBACR,CAAC;gBAEF,IAAI,CAACP,MAAM,CAACQ,EAAE,EAAE;kBACf,MAAM,IAAIC,KAAK,CAACT,MAAM,CAACU,UAAU,CAAC;gBACnC;gBAEA,MAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,IAAI,EAAE;gBAEhC,IAAIZ,MAAM,CAACa,MAAM,KAAK,GAAG,IAAIF,IAAI,CAACzB,YAAY,IAAI4B,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACzB,YAAY,CAAC,IAAIyB,IAAI,CAACzB,YAAY,CAAC8B,MAAM,GAAG,CAAC,EAAE;kBACnH;kBACA;kBACA,MAAMC,cAAc,GAAGN,IAAI,CAACzB,YAAY,CACtCgC,GAAG,CAAC,CAACC,WAA8B,EAAEC,KAAa,KAClDD,WAAW,CAACE,wBAAwB,KAAKxC,QAAQ,GAAGsC,WAAW,CAAChB,IAAI,GAAGhB,IAAI,CAACiC,KAAK,CAAC,CAClF,CACAE,IAAI,CAAC,IAAI,CAAC;kBACZpC,YAAY,CAACL,QAAQ,CAAC,GAAG,IAAI,CAAC0C,UAAU,CAACC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEzC,OAAO,EAAE;oBAAEI,GAAG,EAAE6B;kBAAc,CAAE,CAAC,CAAC;gBAC9F;cACD,CAAC,CAAC,OAAOS,GAAG,EAAE;gBACbnE,YAAY,CAACoE,KAAK,CAAC;kBAAEvC,GAAG,EAAE,2BAA2B;kBAAEsC;gBAAG,CAAE,CAAC;cAC9D;YAAC;UACF;QAAC,SAAAA,GAAA;UAAAnC,iBAAA;UAAAC,cAAA,GAAAkC,GAAA;QAAA;UAAA;YAAA,IAAApC,yBAAA,IAAAG,SAAA,CAAAmC,MAAA;cAAA,MAAAnC,SAAA,CAAAmC,MAAA;YAAA;UAAA;YAAA,IAAArC,iBAAA;cAAA,MAAAC,cAAA;YAAA;UAAA;QAAA;QACD,OAAON,YAAY;MACpB;MAEA;;;;;;;MAOA,MAAM2C,gCAAgCA,CAACC,UAA6B,EAAE7C,eAAyB;QAC9F,MAAMC,YAAY,GAA4B,EAAE;QAChD,MAAMN,kBAAkB,GAAG,MAAM,IAAI,CAACF,qBAAqB,CAAC,IAAI,CAAC;QAAC,IAAAqD,0BAAA;QAAA,IAAAC,kBAAA;QAAA,IAAAC,eAAA;QAAA;UAClE,SAAAC,UAAA,GAAApF,cAAA,CAA2BmC,eAAe,GAAAkD,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAD,UAAA,CAAAvC,IAAA,IAAAC,IAAA,EAAAmC,0BAAA,UAAE;YAAA,IAA7BlD,QAAQ,GAAAsD,MAAA,CAAA/D,KAAA;YAAA;cACtB,IAAIS,QAAQ,CAACgB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAACxC,CAAC,CAACyC,SAAS,CAAClB,kBAAkB,EAAE;gBAAEC;cAAQ,CAAE,CAAC,EAAE;gBACnFA,QAAQ,GAAGA,QAAQ,CAACkB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;cACjC;cACA,IAAI;gBACH,MAAMC,MAAM,GAAG,MAAM7C,KAAK,CAAC,IAAI,CAACc,cAAc,EAAE;kBAC/CgC,MAAM,EAAE;oBACPmC,QAAQ,EAAE,IAAI,CAACpE,MAAM;oBACrBkC,WAAW,EAAErB,QAAQ;oBACrBsB,IAAI,EAAE2B,UAAU,CAACO,WAAW,IAAIP,UAAU,CAAC3B,IAAI,IAAI;;iBAEpD,CAAC;gBACF,IAAI,CAACH,MAAM,CAACQ,EAAE,EAAE;kBACf,MAAM,IAAIC,KAAK,CAACT,MAAM,CAACU,UAAU,CAAC;gBACnC;gBACA,MAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,IAAI,EAAE;gBAChC,IAAIZ,MAAM,CAACa,MAAM,KAAK,GAAG,IAAIF,IAAI,CAACzB,YAAY,IAAI4B,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACzB,YAAY,CAAC,IAAIyB,IAAI,CAACzB,YAAY,CAAC8B,MAAM,GAAG,CAAC,EAAE;kBACnH,IAAIL,IAAI,CAACzB,YAAY,CAACgC,GAAG,CAAEC,WAA8B,IAAKA,WAAW,CAACE,wBAAwB,CAAC,CAACC,IAAI,EAAE,KAAKzC,QAAQ,EAAE;oBACxHK,YAAY,CAACL,QAAQ,CAAC,GAAG8B,IAAI,CAACzB,YAAY,CAACgC,GAAG,CAAEC,WAA8B,IAAKA,WAAW,CAAChB,IAAI,CAAC;kBACrG;gBACD;cACD,CAAC,CAAC,OAAOuB,GAAG,EAAE;gBACbnE,YAAY,CAACoE,KAAK,CAAC;kBAAEvC,GAAG,EAAE,sCAAsC;kBAAEsC;gBAAG,CAAE,CAAC;cACzE;YAAC;UACF;QAAC,SAAAA,GAAA;UAAAM,kBAAA;UAAAC,eAAA,GAAAP,GAAA;QAAA;UAAA;YAAA,IAAAK,0BAAA,IAAAG,UAAA,CAAAN,MAAA;cAAA,MAAAM,UAAA,CAAAN,MAAA;YAAA;UAAA;YAAA,IAAAI,kBAAA;cAAA,MAAAC,eAAA;YAAA;UAAA;QAAA;QACD,OAAO/C,YAAY;MACpB;;IAGD;IACAzB,2BAA2B,CAAC6E,gBAAgB,CAAC,IAAIxE,kBAAkB,EAAE,CAAC;IAACyE,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"650a83a8986c54fd1c26850aae7d97ef8193a4ab"}
