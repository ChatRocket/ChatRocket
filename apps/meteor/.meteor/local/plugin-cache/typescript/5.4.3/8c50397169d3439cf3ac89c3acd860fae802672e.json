{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Helper.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/Helper.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Helper.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/Helper.ts","sourceRoot":"","sources":["app/livechat/server/lib/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { LivechatTransferEventType } from '@rocket.chat/apps-engine/definition/livechat';\nimport { api, Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tSelectedAgent,\n\tISubscription,\n\tILivechatInquiryRecord,\n\tIUser,\n\tTransferData,\n\tILivechatDepartmentAgents,\n\tTransferByData,\n\tILivechatAgent,\n\tILivechatDepartment,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus, OmnichannelSourceType, DEFAULT_SLA_CONFIG, UserStatus } from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight } from '@rocket.chat/core-typings/src/ILivechatPriority';\nimport { Logger } from '@rocket.chat/logger';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatDepartmentAgents,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tLivechatDepartment,\n\tSubscriptions,\n\tRooms,\n\tUsers,\n} from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { ObjectId } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { validateEmail as validatorFunc } from '../../../../lib/emailValidator';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { Livechat as LivechatTyped } from './LivechatTyped';\nimport { queueInquiry, saveQueueInquiry } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\n\nconst logger = new Logger('LivechatHelper');\nexport const allowAgentSkipQueue = (agent: SelectedAgent) => {\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t}),\n\t);\n\n\treturn hasRoleAsync(agent.agentId, 'bot');\n};\nexport const createLivechatRoom = async <\n\tE extends Record<string, unknown> & {\n\t\tsla?: string;\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t},\n>(\n\trid: string,\n\tname: string,\n\tguest: ILivechatVisitor,\n\troomInfo: Partial<IOmnichannelRoom> = {},\n\textraData?: E,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t}),\n\t);\n\n\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online', contactId } = guest;\n\tconst newRoomAt = new Date();\n\n\tconst { activity } = guest;\n\tlogger.debug({\n\t\tmsg: `Creating livechat room for visitor ${_id}`,\n\t\tvisitor: { _id, username, departmentId, status, activity },\n\t});\n\n\t// TODO: Solve `u` missing issue\n\tconst room: InsertionModel<IOmnichannelRoom> = {\n\t\t_id: rid,\n\t\tmsgs: 0,\n\t\tusersCount: 1,\n\t\tlm: newRoomAt,\n\t\tfname: name,\n\t\tt: 'l' as const,\n\t\tts: newRoomAt,\n\t\tdepartmentId,\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tcontactId,\n\t\t\t...(activity?.length && { activity }),\n\t\t},\n\t\tcl: false,\n\t\topen: true,\n\t\twaitingResponse: true,\n\t\t// this should be overridden by extraRoomInfo when provided\n\t\t// in case it's not provided, we'll use this \"default\" type\n\t\tsource: {\n\t\t\ttype: OmnichannelSourceType.OTHER,\n\t\t\talias: 'unknown',\n\t\t},\n\t\tqueuedAt: newRoomAt,\n\t\tlivechatData: undefined,\n\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t...extraRoomInfo,\n\t} as InsertionModel<IOmnichannelRoom>;\n\n\tconst result = await Rooms.findOneAndUpdate(\n\t\troom,\n\t\t{\n\t\t\t$set: {},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\n\tif (!result.value) {\n\t\tthrow new Error('Room not created');\n\t}\n\n\tawait callbacks.run('livechat.newRoom', room);\n\tawait Message.saveSystemMessageAndNotifyUser('livechat-started', rid, '', { _id, username }, { groupable: false, token: guest.token });\n\n\treturn result.value as IOmnichannelRoom;\n};\n\nexport const createLivechatInquiry = async ({\n\trid,\n\tname,\n\tguest,\n\tmessage,\n\tinitialStatus,\n\textraData,\n}: {\n\trid: string;\n\tname?: string;\n\tguest?: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'department' | 'name' | 'token' | 'activity'>;\n\tmessage?: string;\n\tinitialStatus?: LivechatInquiryStatus;\n\textraData?: Pick<ILivechatInquiryRecord, 'source'>;\n}) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t\tactivity: Match.Maybe([String]),\n\t\t}),\n\t);\n\n\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = UserStatus.ONLINE, activity } = guest;\n\n\tconst ts = new Date();\n\n\tlogger.debug({\n\t\tmsg: `Creating livechat inquiry for visitor ${_id}`,\n\t\tvisitor: { _id, username, department, status, activity },\n\t});\n\n\tconst result = await LivechatInquiry.findOneAndUpdate(\n\t\t{\n\t\t\trid,\n\t\t\tname,\n\t\t\tts,\n\t\t\tdepartment,\n\t\t\tmessage: message ?? '',\n\t\t\tstatus: initialStatus || LivechatInquiryStatus.READY,\n\t\t\tv: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\ttoken,\n\t\t\t\tstatus,\n\t\t\t\t...(activity?.length && { activity }),\n\t\t\t},\n\t\t\tt: 'l',\n\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\n\t\t\t...extraInquiryInfo,\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\tlogger.debug(`Inquiry ${result} created for visitor ${_id}`);\n\n\tif (!result.value) {\n\t\tthrow new Error('Inquiry not created');\n\t}\n\n\treturn result.value as ILivechatInquiryRecord;\n};\n\nexport const createLivechatSubscription = async (\n\trid: string,\n\tname: string,\n\tguest: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'name' | 'token' | 'phone'>,\n\tagent: SelectedAgent,\n\tdepartment?: string,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t}),\n\t);\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t\tusername: String,\n\t\t}),\n\t);\n\n\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = UserStatus.ONLINE } = guest;\n\n\tconst subscriptionData: InsertionModel<ISubscription> = {\n\t\trid,\n\t\tname,\n\t\tfname: name,\n\t\tlowerCaseName: name.toLowerCase(),\n\t\tlowerCaseFName: name.toLowerCase(),\n\t\talert: true,\n\t\topen: true,\n\t\tunread: 1,\n\t\tuserMentions: 1,\n\t\tgroupMentions: 0,\n\t\tu: {\n\t\t\t_id: agent.agentId,\n\t\t\tusername: agent.username,\n\t\t},\n\t\tt: 'l',\n\t\tdesktopNotifications: 'all',\n\t\tmobilePushNotifications: 'all',\n\t\temailNotifications: 'all',\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t},\n\t\tts: new Date(),\n\t\t...(department && { department }),\n\t} as InsertionModel<ISubscription>;\n\n\tconst response = await Subscriptions.insertOne(subscriptionData);\n\n\tif (response?.insertedId) {\n\t\tvoid notifyOnSubscriptionChangedById(response.insertedId, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const removeAgentFromSubscription = async (rid: string, { _id, username }: Pick<IUser, '_id' | 'username'>) => {\n\tconst room = await LivechatRooms.findOneById(rid);\n\tconst user = await Users.findOneById(_id);\n\n\tif (!room || !user) {\n\t\treturn;\n\t}\n\n\tconst deletedSubscription = await Subscriptions.removeByRoomIdAndUserId(rid, _id);\n\tif (deletedSubscription) {\n\t\tvoid notifyOnSubscriptionChanged(deletedSubscription, 'removed');\n\t}\n\n\tawait Message.saveSystemMessage('ul', rid, username || '', { _id: user._id, username: user.username, name: user.name });\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, { room, user });\n\t});\n};\n\nexport const parseAgentCustomFields = (customFields?: Record<string, any>) => {\n\tif (!customFields) {\n\t\treturn;\n\t}\n\n\tconst externalCustomFields = () => {\n\t\tconst accountCustomFields = settings.get<string>('Accounts_CustomFields');\n\t\tif (!accountCustomFields || accountCustomFields.trim() === '') {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\treturn [];\n\t\t}\n\t};\n\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),\n\t\t{},\n\t);\n};\n\nexport const normalizeAgent = async (agentId?: string) => {\n\tif (!agentId) {\n\t\treturn;\n\t}\n\n\tif (!settings.get('Livechat_show_agent_info')) {\n\t\treturn { hiddenInfo: true };\n\t}\n\n\tconst agent = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_email'));\n\tif (!agent) {\n\t\treturn;\n\t}\n\n\tconst { customFields: agentCustomFields, ...extraData } = agent;\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) }) as ILivechatAgent;\n};\n\nexport const dispatchAgentDelegated = async (rid: string, agentId?: string) => {\n\tconst agent = await normalizeAgent(agentId);\n\n\tvoid api.broadcast('omnichannel.room', rid, {\n\t\ttype: 'agentData',\n\t\tdata: agent,\n\t});\n};\n\n/**\n * @deprecated\n */\n\nexport const dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, agent?: SelectedAgent | null) => {\n\tif (!inquiry?._id) {\n\t\treturn;\n\t}\n\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\tconst { department, rid, v } = inquiry;\n\tconst room = await LivechatRooms.findOneById(rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tsetImmediate(() => callbacks.run('livechat.chatQueued', room));\n\n\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tif (agent && (await allowAgentSkipQueue(agent))) {\n\t\treturn;\n\t}\n\n\tawait saveQueueInquiry(inquiry);\n\n\t// Alert only the online agents of the queued request\n\tconst onlineAgents = await getOnlineAgents(department, agent);\n\tif (!onlineAgents) {\n\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\treturn;\n\t}\n\n\tlogger.debug(`Notifying ${await onlineAgents.count()} agents of new inquiry`);\n\tconst notificationUserName = v && (v.name || v.username);\n\n\tfor await (const agent of onlineAgents) {\n\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\tawait sendNotification({\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: '',\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasReplyToThread: false,\n\t\t\tdisableAllMessageNotifications: false,\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\troom: Object.assign(room, { name: i18n.t('New_chat_in_queue', { lng: language }) }),\n\t\t\tmentionIds: [],\n\t\t});\n\t}\n};\n\nexport const forwardRoomToAgent = async (room: IOmnichannelRoom, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\n\tlogger.debug(`Forwarding room ${room._id} to agent ${transferData.userId}`);\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (!agentId) {\n\t\tthrow new Error('error-invalid-agent');\n\t}\n\tconst user = await Users.findOneOnlineAgentById(agentId);\n\tif (!user) {\n\t\tlogger.debug(`Agent ${agentId} is offline. Cannot forward`);\n\t\tthrow new Error('error-user-is-offline');\n\t}\n\n\tconst { _id: rid, servedBy: oldServedBy } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`No inquiries found for room ${room._id}. Cannot forward`);\n\t\tthrow new Error('error-invalid-inquiry');\n\t}\n\n\tif (oldServedBy && agentId === oldServedBy._id) {\n\t\tthrow new Error('error-selected-agent-room-agent-are-same');\n\t}\n\n\tconst { username } = user;\n\tconst agent = { agentId, username };\n\t// Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n\tdelete inquiry.department;\n\t// There are some Enterprise features that may interrupt the forwarding process\n\t// Due to that we need to check whether the agent has been changed or not\n\tlogger.debug(`Forwarding inquiry ${inquiry._id} to agent ${agent.agentId}`);\n\tconst roomTaken = await RoutingManager.takeInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward inquiry ${inquiry._id}`);\n\t\treturn false;\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\n\tconst { servedBy } = roomTaken;\n\tif (servedBy) {\n\t\tif (oldServedBy && servedBy._id !== oldServedBy._id) {\n\t\t\tawait RoutingManager.removeAllRoomSubscriptions(room, servedBy);\n\t\t}\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\t\ttype: LivechatTransferEventType.AGENT,\n\t\t\t\troom: rid,\n\t\t\t\tfrom: oldServedBy?._id,\n\t\t\t\tto: servedBy._id,\n\t\t\t});\n\t\t});\n\t}\n\n\tlogger.debug(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\tawait callbacks.run('livechat.afterForwardChatToAgent', { rid, servedBy, oldServedBy });\n\treturn true;\n};\n\nexport const updateChatDepartment = async ({\n\trid,\n\tnewDepartmentId,\n\toldDepartmentId,\n}: {\n\trid: string;\n\tnewDepartmentId: string;\n\toldDepartmentId?: string;\n}) => {\n\tconst responses = await Promise.all([\n\t\tLivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tLivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tSubscriptions.changeDepartmentByRoomId(rid, newDepartmentId),\n\t]);\n\n\tif (responses[2].modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\ttype: LivechatTransferEventType.DEPARTMENT,\n\t\t\troom: rid,\n\t\t\tfrom: oldDepartmentId,\n\t\t\tto: newDepartmentId,\n\t\t});\n\t});\n\n\treturn callbacks.run('livechat.afterForwardChatToDepartment', {\n\t\trid,\n\t\tnewDepartmentId,\n\t\toldDepartmentId,\n\t});\n};\n\nexport const forwardRoomToDepartment = async (room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\tlogger.debug(`Attempting to forward room ${room._id} to department ${transferData.departmentId}`);\n\n\tawait callbacks.run('livechat.beforeForwardRoomToDepartment', { room, transferData });\n\tconst { _id: rid, servedBy: oldServedBy, departmentId: oldDepartmentId } = room;\n\tlet agent = null;\n\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No inquiries found`);\n\t\tthrow new Error('error-transferring-inquiry');\n\t}\n\n\tconst { departmentId } = transferData;\n\tif (!departmentId) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No departmentId provided`);\n\t\tthrow new Error('error-transferring-inquiry-no-department');\n\t}\n\tif (oldDepartmentId === departmentId) {\n\t\tthrow new Error('error-forwarding-chat-same-department');\n\t}\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (agentId) {\n\t\tlogger.debug(`Forwarding room ${room._id} to department ${departmentId} (to user ${agentId})`);\n\t\tconst user = await Users.findOneOnlineAgentById(agentId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-is-offline');\n\t\t}\n\t\tconst isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!isInDepartment) {\n\t\t\tthrow new Error('error-user-not-belong-to-department');\n\t\t}\n\t\tconst { username } = user;\n\t\tagent = { agentId, username };\n\t}\n\n\tconst department = await LivechatDepartment.findOneById<\n\t\tPick<ILivechatDepartment, 'allowReceiveForwardOffline' | 'fallbackForwardDepartment' | 'name'>\n\t>(departmentId, {\n\t\tprojection: {\n\t\t\tallowReceiveForwardOffline: 1,\n\t\t\tfallbackForwardDepartment: 1,\n\t\t\tname: 1,\n\t\t},\n\t});\n\n\tif (\n\t\t!RoutingManager.getConfig()?.autoAssignAgent ||\n\t\t!(await Omnichannel.isWithinMACLimit(room)) ||\n\t\t(department?.allowReceiveForwardOffline && !(await LivechatTyped.checkOnlineAgents(departmentId)))\n\t) {\n\t\tlogger.debug(`Room ${room._id} will be on department queue`);\n\t\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\t\treturn RoutingManager.unassignAgent(inquiry, departmentId, true);\n\t}\n\n\t// Fake the department to forward the inquiry - Case the forward process does not success\n\t// the inquiry will stay in the same original department\n\tinquiry.department = departmentId;\n\tconst roomTaken = await RoutingManager.delegateInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\tforwardingToDepartment: { oldDepartmentId },\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\treturn false;\n\t}\n\n\tconst { servedBy, chatQueued } = roomTaken;\n\tif (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n\t\tif (!department?.fallbackForwardDepartment?.length) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Chat assigned to agent ${servedBy._id} (Previous was ${oldServedBy._id})`);\n\t\t\tthrow new Error('error-no-agents-online-in-department');\n\t\t}\n\n\t\tif (!transferData.originalDepartmentName) {\n\t\t\ttransferData.originalDepartmentName = department.name;\n\t\t}\n\t\t// if a chat has a fallback department, attempt to redirect chat to there [EE]\n\t\tconst transferSuccess = !!(await callbacks.run('livechat:onTransferFailure', room, { guest, transferData, department }));\n\t\t// On CE theres no callback so it will return the room\n\t\tif (typeof transferSuccess !== 'boolean' || !transferSuccess) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Send just 1 message to the room to inform the user that the chat was transferred\n\tif (transferData.usingFallbackDep) {\n\t\tconst { _id, username } = transferData.transferredBy;\n\t\tawait Message.saveSystemMessage(\n\t\t\t'livechat_transfer_history_fallback',\n\t\t\troom._id,\n\t\t\t'',\n\t\t\t{ _id, username },\n\t\t\t{\n\t\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\t\ttransferData: {\n\t\t\t\t\t...transferData,\n\t\t\t\t\tprevDepartment: transferData.originalDepartmentName,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\tif (oldServedBy) {\n\t\t// if chat is queued then we don't ignore the new servedBy agent bcs at this\n\t\t// point the chat is not assigned to him/her and it is still in the queue\n\t\tawait RoutingManager.removeAllRoomSubscriptions(room, !chatQueued ? servedBy : undefined);\n\t}\n\n\tawait updateChatDepartment({ rid, newDepartmentId: departmentId, oldDepartmentId });\n\n\tif (chatQueued) {\n\t\tlogger.debug(`Forwarding succesful. Marking inquiry ${inquiry._id} as ready`);\n\t\tawait LivechatInquiry.readyInquiry(inquiry._id);\n\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\tawait dispatchAgentDelegated(rid);\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiry._id);\n\t\tif (!newInquiry) {\n\t\t\tlogger.debug(`Inquiry ${inquiry._id} not found`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait queueInquiry(newInquiry);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued succesfully`);\n\t}\n\n\treturn true;\n};\n\ntype MakePropertyOptional<T, K extends keyof T> = Omit<T, K> & { [P in K]?: T[P] };\n\nexport const normalizeTransferredByData = (\n\ttransferredBy: MakePropertyOptional<TransferByData, 'userType'>,\n\troom: IOmnichannelRoom,\n): TransferByData => {\n\tif (!transferredBy || !room) {\n\t\tthrow new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n\t}\n\tconst { servedBy: { _id: agentId } = {} } = room;\n\tconst { _id, username, name, userType: transferType } = transferredBy;\n\tconst userType = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),\n\t\tuserType,\n\t};\n};\n\nconst parseFromIntOrStr = (value: string | number) => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\treturn parseInt(value);\n};\n\nexport const updateDepartmentAgents = async (\n\tdepartmentId: string,\n\tagents: {\n\t\tupsert?: Pick<ILivechatDepartmentAgents, 'agentId' | 'count' | 'order'>[];\n\t\tremove?: Pick<ILivechatDepartmentAgents, 'agentId'>[];\n\t},\n\tdepartmentEnabled: boolean,\n) => {\n\tcheck(departmentId, String);\n\tcheck(agents, {\n\t\tupsert: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t\tremove: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t});\n\n\tconst { upsert = [], remove = [] } = agents;\n\n\tconst agentsUpdated = [];\n\tconst agentsRemoved = remove.map(({ agentId }: { agentId: string }) => agentId);\n\tconst agentsAdded = [];\n\n\tif (agentsRemoved.length > 0) {\n\t\tconst removedIds = await LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsRemoved, departmentId, {\n\t\t\tprojection: { agentId: 1 },\n\t\t}).toArray();\n\n\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByIds(removedIds.map(({ _id }) => _id));\n\n\t\tif (deletedCount > 0) {\n\t\t\tremovedIds.forEach(({ _id, agentId }) => {\n\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tagentId,\n\t\t\t\t\t\tdepartmentId,\n\t\t\t\t\t},\n\t\t\t\t\t'removed',\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });\n\t}\n\n\tfor await (const agent of upsert) {\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });\n\t\tif (!agentFromDb) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst livechatDepartmentAgent = await LivechatDepartmentAgents.saveAgent({\n\t\t\tagentId: agent.agentId,\n\t\t\tdepartmentId,\n\t\t\tusername: agentFromDb.username || '',\n\t\t\tcount: agent.count ? parseFromIntOrStr(agent.count) : 0,\n\t\t\torder: agent.order ? parseFromIntOrStr(agent.order) : 0,\n\t\t\tdepartmentEnabled,\n\t\t});\n\n\t\tif (livechatDepartmentAgent.upsertedId) {\n\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t{\n\t\t\t\t\t_id: livechatDepartmentAgent.upsertedId as any,\n\t\t\t\t\tagentId: agent.agentId,\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t'inserted',\n\t\t\t);\n\t\t} else {\n\t\t\tagentsUpdated.push(agent.agentId);\n\t\t}\n\n\t\tagentsAdded.push(agent.agentId);\n\t}\n\n\tif (agentsAdded.length > 0) {\n\t\tcallbacks.runAsync('livechat.saveAgentDepartment', {\n\t\t\tdepartmentId,\n\t\t\tagentsId: agentsAdded,\n\t\t});\n\t}\n\n\tif (agentsUpdated.length > 0) {\n\t\tvoid notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId(agentsUpdated, departmentId);\n\t}\n\n\tif (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n\t\tconst numAgents = await LivechatDepartmentAgents.countByDepartmentId(departmentId);\n\t\tawait LivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n\t}\n\n\treturn true;\n};\n\nexport const validateEmail = (email: string) => {\n\tif (!validatorFunc(email)) {\n\t\tthrow new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {\n\t\t\tfunction: 'Livechat.validateEmail',\n\t\t\temail,\n\t\t});\n\t}\n\treturn true;\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Helper.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/Helper.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/Helper.ts","sourceRoot":"","sources":["app/livechat/server/lib/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { LivechatTransferEventType } from '@rocket.chat/apps-engine/definition/livechat';\nimport { api, Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tSelectedAgent,\n\tISubscription,\n\tILivechatInquiryRecord,\n\tIUser,\n\tTransferData,\n\tILivechatDepartmentAgents,\n\tTransferByData,\n\tILivechatAgent,\n\tILivechatDepartment,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus, OmnichannelSourceType, DEFAULT_SLA_CONFIG, UserStatus } from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight } from '@rocket.chat/core-typings/src/ILivechatPriority';\nimport { Logger } from '@rocket.chat/logger';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatDepartmentAgents,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tLivechatDepartment,\n\tSubscriptions,\n\tRooms,\n\tUsers,\n} from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { ObjectId } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { validateEmail as validatorFunc } from '../../../../lib/emailValidator';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { Livechat as LivechatTyped } from './LivechatTyped';\nimport { queueInquiry, saveQueueInquiry } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\n\nconst logger = new Logger('LivechatHelper');\nexport const allowAgentSkipQueue = (agent: SelectedAgent) => {\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t}),\n\t);\n\n\treturn hasRoleAsync(agent.agentId, 'bot');\n};\nexport const createLivechatRoom = async <\n\tE extends Record<string, unknown> & {\n\t\tsla?: string;\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t},\n>(\n\trid: string,\n\tname: string,\n\tguest: ILivechatVisitor,\n\troomInfo: Partial<IOmnichannelRoom> = {},\n\textraData?: E,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t}),\n\t);\n\n\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online', contactId } = guest;\n\tconst newRoomAt = new Date();\n\n\tconst { activity } = guest;\n\tlogger.debug({\n\t\tmsg: `Creating livechat room for visitor ${_id}`,\n\t\tvisitor: { _id, username, departmentId, status, activity },\n\t});\n\n\t// TODO: Solve `u` missing issue\n\tconst room: InsertionModel<IOmnichannelRoom> = {\n\t\t_id: rid,\n\t\tmsgs: 0,\n\t\tusersCount: 1,\n\t\tlm: newRoomAt,\n\t\tfname: name,\n\t\tt: 'l' as const,\n\t\tts: newRoomAt,\n\t\tdepartmentId,\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tcontactId,\n\t\t\t...(activity?.length && { activity }),\n\t\t},\n\t\tcl: false,\n\t\topen: true,\n\t\twaitingResponse: true,\n\t\t// this should be overridden by extraRoomInfo when provided\n\t\t// in case it's not provided, we'll use this \"default\" type\n\t\tsource: {\n\t\t\ttype: OmnichannelSourceType.OTHER,\n\t\t\talias: 'unknown',\n\t\t},\n\t\tqueuedAt: newRoomAt,\n\t\tlivechatData: undefined,\n\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t...extraRoomInfo,\n\t} as InsertionModel<IOmnichannelRoom>;\n\n\tconst result = await Rooms.findOneAndUpdate(\n\t\troom,\n\t\t{\n\t\t\t$set: {},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\n\tif (!result.value) {\n\t\tthrow new Error('Room not created');\n\t}\n\n\tawait callbacks.run('livechat.newRoom', room);\n\tawait Message.saveSystemMessageAndNotifyUser('livechat-started', rid, '', { _id, username }, { groupable: false, token: guest.token });\n\n\treturn result.value as IOmnichannelRoom;\n};\n\nexport const createLivechatInquiry = async ({\n\trid,\n\tname,\n\tguest,\n\tmessage,\n\tinitialStatus,\n\textraData,\n}: {\n\trid: string;\n\tname?: string;\n\tguest?: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'department' | 'name' | 'token' | 'activity'>;\n\tmessage?: string;\n\tinitialStatus?: LivechatInquiryStatus;\n\textraData?: Pick<ILivechatInquiryRecord, 'source'>;\n}) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t\tactivity: Match.Maybe([String]),\n\t\t}),\n\t);\n\n\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = UserStatus.ONLINE, activity } = guest;\n\n\tconst ts = new Date();\n\n\tlogger.debug({\n\t\tmsg: `Creating livechat inquiry for visitor ${_id}`,\n\t\tvisitor: { _id, username, department, status, activity },\n\t});\n\n\tconst result = await LivechatInquiry.findOneAndUpdate(\n\t\t{\n\t\t\trid,\n\t\t\tname,\n\t\t\tts,\n\t\t\tdepartment,\n\t\t\tmessage: message ?? '',\n\t\t\tstatus: initialStatus || LivechatInquiryStatus.READY,\n\t\t\tv: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\ttoken,\n\t\t\t\tstatus,\n\t\t\t\t...(activity?.length && { activity }),\n\t\t\t},\n\t\t\tt: 'l',\n\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\n\t\t\t...extraInquiryInfo,\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\tlogger.debug(`Inquiry ${result} created for visitor ${_id}`);\n\n\tif (!result.value) {\n\t\tthrow new Error('Inquiry not created');\n\t}\n\n\treturn result.value as ILivechatInquiryRecord;\n};\n\nexport const createLivechatSubscription = async (\n\trid: string,\n\tname: string,\n\tguest: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'name' | 'token' | 'phone'>,\n\tagent: SelectedAgent,\n\tdepartment?: string,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t}),\n\t);\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t\tusername: String,\n\t\t}),\n\t);\n\n\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = UserStatus.ONLINE } = guest;\n\n\tconst subscriptionData: InsertionModel<ISubscription> = {\n\t\trid,\n\t\tname,\n\t\tfname: name,\n\t\tlowerCaseName: name.toLowerCase(),\n\t\tlowerCaseFName: name.toLowerCase(),\n\t\talert: true,\n\t\topen: true,\n\t\tunread: 1,\n\t\tuserMentions: 1,\n\t\tgroupMentions: 0,\n\t\tu: {\n\t\t\t_id: agent.agentId,\n\t\t\tusername: agent.username,\n\t\t},\n\t\tt: 'l',\n\t\tdesktopNotifications: 'all',\n\t\tmobilePushNotifications: 'all',\n\t\temailNotifications: 'all',\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t},\n\t\tts: new Date(),\n\t\t...(department && { department }),\n\t} as InsertionModel<ISubscription>;\n\n\tconst response = await Subscriptions.insertOne(subscriptionData);\n\n\tif (response?.insertedId) {\n\t\tvoid notifyOnSubscriptionChangedById(response.insertedId, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const removeAgentFromSubscription = async (rid: string, { _id, username }: Pick<IUser, '_id' | 'username'>) => {\n\tconst room = await LivechatRooms.findOneById(rid);\n\tconst user = await Users.findOneById(_id);\n\n\tif (!room || !user) {\n\t\treturn;\n\t}\n\n\tconst deletedSubscription = await Subscriptions.removeByRoomIdAndUserId(rid, _id);\n\tif (deletedSubscription) {\n\t\tvoid notifyOnSubscriptionChanged(deletedSubscription, 'removed');\n\t}\n\n\tawait Message.saveSystemMessage('ul', rid, username || '', { _id: user._id, username: user.username, name: user.name });\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, { room, user });\n\t});\n};\n\nexport const parseAgentCustomFields = (customFields?: Record<string, any>) => {\n\tif (!customFields) {\n\t\treturn;\n\t}\n\n\tconst externalCustomFields = () => {\n\t\tconst accountCustomFields = settings.get<string>('Accounts_CustomFields');\n\t\tif (!accountCustomFields || accountCustomFields.trim() === '') {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\treturn [];\n\t\t}\n\t};\n\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),\n\t\t{},\n\t);\n};\n\nexport const normalizeAgent = async (agentId?: string) => {\n\tif (!agentId) {\n\t\treturn;\n\t}\n\n\tif (!settings.get('Livechat_show_agent_info')) {\n\t\treturn { hiddenInfo: true };\n\t}\n\n\tconst agent = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_email'));\n\tif (!agent) {\n\t\treturn;\n\t}\n\n\tconst { customFields: agentCustomFields, ...extraData } = agent;\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) }) as ILivechatAgent;\n};\n\nexport const dispatchAgentDelegated = async (rid: string, agentId?: string) => {\n\tconst agent = await normalizeAgent(agentId);\n\n\tvoid api.broadcast('omnichannel.room', rid, {\n\t\ttype: 'agentData',\n\t\tdata: agent,\n\t});\n};\n\n/**\n * @deprecated\n */\n\nexport const dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, agent?: SelectedAgent | null) => {\n\tif (!inquiry?._id) {\n\t\treturn;\n\t}\n\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\tconst { department, rid, v } = inquiry;\n\tconst room = await LivechatRooms.findOneById(rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tsetImmediate(() => callbacks.run('livechat.chatQueued', room));\n\n\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tif (agent && (await allowAgentSkipQueue(agent))) {\n\t\treturn;\n\t}\n\n\tawait saveQueueInquiry(inquiry);\n\n\t// Alert only the online agents of the queued request\n\tconst onlineAgents = await getOnlineAgents(department, agent);\n\tif (!onlineAgents) {\n\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\treturn;\n\t}\n\n\tlogger.debug(`Notifying ${await onlineAgents.count()} agents of new inquiry`);\n\tconst notificationUserName = v && (v.name || v.username);\n\n\tfor await (const agent of onlineAgents) {\n\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\tawait sendNotification({\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: '',\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasReplyToThread: false,\n\t\t\tdisableAllMessageNotifications: false,\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\troom: Object.assign(room, { name: i18n.t('New_chat_in_queue', { lng: language }) }),\n\t\t\tmentionIds: [],\n\t\t});\n\t}\n};\n\nexport const forwardRoomToAgent = async (room: IOmnichannelRoom, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\n\tlogger.debug(`Forwarding room ${room._id} to agent ${transferData.userId}`);\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (!agentId) {\n\t\tthrow new Error('error-invalid-agent');\n\t}\n\tconst user = await Users.findOneOnlineAgentById(agentId);\n\tif (!user) {\n\t\tlogger.debug(`Agent ${agentId} is offline. Cannot forward`);\n\t\tthrow new Error('error-user-is-offline');\n\t}\n\n\tconst { _id: rid, servedBy: oldServedBy } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`No inquiries found for room ${room._id}. Cannot forward`);\n\t\tthrow new Error('error-invalid-inquiry');\n\t}\n\n\tif (oldServedBy && agentId === oldServedBy._id) {\n\t\tthrow new Error('error-selected-agent-room-agent-are-same');\n\t}\n\n\tconst { username } = user;\n\tconst agent = { agentId, username };\n\t// Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n\tdelete inquiry.department;\n\t// There are some Enterprise features that may interrupt the forwarding process\n\t// Due to that we need to check whether the agent has been changed or not\n\tlogger.debug(`Forwarding inquiry ${inquiry._id} to agent ${agent.agentId}`);\n\tconst roomTaken = await RoutingManager.takeInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward inquiry ${inquiry._id}`);\n\t\treturn false;\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\n\tconst { servedBy } = roomTaken;\n\tif (servedBy) {\n\t\tif (oldServedBy && servedBy._id !== oldServedBy._id) {\n\t\t\tawait RoutingManager.removeAllRoomSubscriptions(room, servedBy);\n\t\t}\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\t\ttype: LivechatTransferEventType.AGENT,\n\t\t\t\troom: rid,\n\t\t\t\tfrom: oldServedBy?._id,\n\t\t\t\tto: servedBy._id,\n\t\t\t});\n\t\t});\n\t}\n\n\tlogger.debug(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\tawait callbacks.run('livechat.afterForwardChatToAgent', { rid, servedBy, oldServedBy });\n\treturn true;\n};\n\nexport const updateChatDepartment = async ({\n\trid,\n\tnewDepartmentId,\n\toldDepartmentId,\n}: {\n\trid: string;\n\tnewDepartmentId: string;\n\toldDepartmentId?: string;\n}) => {\n\tconst responses = await Promise.all([\n\t\tLivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tLivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tSubscriptions.changeDepartmentByRoomId(rid, newDepartmentId),\n\t]);\n\n\tif (responses[2].modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\ttype: LivechatTransferEventType.DEPARTMENT,\n\t\t\troom: rid,\n\t\t\tfrom: oldDepartmentId,\n\t\t\tto: newDepartmentId,\n\t\t});\n\t});\n\n\treturn callbacks.run('livechat.afterForwardChatToDepartment', {\n\t\trid,\n\t\tnewDepartmentId,\n\t\toldDepartmentId,\n\t});\n};\n\nexport const forwardRoomToDepartment = async (room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\tlogger.debug(`Attempting to forward room ${room._id} to department ${transferData.departmentId}`);\n\n\tawait callbacks.run('livechat.beforeForwardRoomToDepartment', { room, transferData });\n\tconst { _id: rid, servedBy: oldServedBy, departmentId: oldDepartmentId } = room;\n\tlet agent = null;\n\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No inquiries found`);\n\t\tthrow new Error('error-transferring-inquiry');\n\t}\n\n\tconst { departmentId } = transferData;\n\tif (!departmentId) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No departmentId provided`);\n\t\tthrow new Error('error-transferring-inquiry-no-department');\n\t}\n\tif (oldDepartmentId === departmentId) {\n\t\tthrow new Error('error-forwarding-chat-same-department');\n\t}\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (agentId) {\n\t\tlogger.debug(`Forwarding room ${room._id} to department ${departmentId} (to user ${agentId})`);\n\t\tconst user = await Users.findOneOnlineAgentById(agentId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-is-offline');\n\t\t}\n\t\tconst isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!isInDepartment) {\n\t\t\tthrow new Error('error-user-not-belong-to-department');\n\t\t}\n\t\tconst { username } = user;\n\t\tagent = { agentId, username };\n\t}\n\n\tconst department = await LivechatDepartment.findOneById<\n\t\tPick<ILivechatDepartment, 'allowReceiveForwardOffline' | 'fallbackForwardDepartment' | 'name'>\n\t>(departmentId, {\n\t\tprojection: {\n\t\t\tallowReceiveForwardOffline: 1,\n\t\t\tfallbackForwardDepartment: 1,\n\t\t\tname: 1,\n\t\t},\n\t});\n\n\tif (\n\t\t!RoutingManager.getConfig()?.autoAssignAgent ||\n\t\t!(await Omnichannel.isWithinMACLimit(room)) ||\n\t\t(department?.allowReceiveForwardOffline && !(await LivechatTyped.checkOnlineAgents(departmentId)))\n\t) {\n\t\tlogger.debug(`Room ${room._id} will be on department queue`);\n\t\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\t\treturn RoutingManager.unassignAgent(inquiry, departmentId, true);\n\t}\n\n\t// Fake the department to forward the inquiry - Case the forward process does not success\n\t// the inquiry will stay in the same original department\n\tinquiry.department = departmentId;\n\tconst roomTaken = await RoutingManager.delegateInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\tforwardingToDepartment: { oldDepartmentId },\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\treturn false;\n\t}\n\n\tconst { servedBy, chatQueued } = roomTaken;\n\tif (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n\t\tif (!department?.fallbackForwardDepartment?.length) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Chat assigned to agent ${servedBy._id} (Previous was ${oldServedBy._id})`);\n\t\t\tthrow new Error('error-no-agents-online-in-department');\n\t\t}\n\n\t\tif (!transferData.originalDepartmentName) {\n\t\t\ttransferData.originalDepartmentName = department.name;\n\t\t}\n\t\t// if a chat has a fallback department, attempt to redirect chat to there [EE]\n\t\tconst transferSuccess = !!(await callbacks.run('livechat:onTransferFailure', room, { guest, transferData, department }));\n\t\t// On CE theres no callback so it will return the room\n\t\tif (typeof transferSuccess !== 'boolean' || !transferSuccess) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Send just 1 message to the room to inform the user that the chat was transferred\n\tif (transferData.usingFallbackDep) {\n\t\tconst { _id, username } = transferData.transferredBy;\n\t\tawait Message.saveSystemMessage(\n\t\t\t'livechat_transfer_history_fallback',\n\t\t\troom._id,\n\t\t\t'',\n\t\t\t{ _id, username },\n\t\t\t{\n\t\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\t\ttransferData: {\n\t\t\t\t\t...transferData,\n\t\t\t\t\tprevDepartment: transferData.originalDepartmentName,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\tif (oldServedBy) {\n\t\t// if chat is queued then we don't ignore the new servedBy agent bcs at this\n\t\t// point the chat is not assigned to him/her and it is still in the queue\n\t\tawait RoutingManager.removeAllRoomSubscriptions(room, !chatQueued ? servedBy : undefined);\n\t}\n\n\tawait updateChatDepartment({ rid, newDepartmentId: departmentId, oldDepartmentId });\n\n\tif (chatQueued) {\n\t\tlogger.debug(`Forwarding succesful. Marking inquiry ${inquiry._id} as ready`);\n\t\tawait LivechatInquiry.readyInquiry(inquiry._id);\n\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\tawait dispatchAgentDelegated(rid);\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiry._id);\n\t\tif (!newInquiry) {\n\t\t\tlogger.debug(`Inquiry ${inquiry._id} not found`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait queueInquiry(newInquiry);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued succesfully`);\n\t}\n\n\treturn true;\n};\n\ntype MakePropertyOptional<T, K extends keyof T> = Omit<T, K> & { [P in K]?: T[P] };\n\nexport const normalizeTransferredByData = (\n\ttransferredBy: MakePropertyOptional<TransferByData, 'userType'>,\n\troom: IOmnichannelRoom,\n): TransferByData => {\n\tif (!transferredBy || !room) {\n\t\tthrow new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n\t}\n\tconst { servedBy: { _id: agentId } = {} } = room;\n\tconst { _id, username, name, userType: transferType } = transferredBy;\n\tconst userType = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),\n\t\tuserType,\n\t};\n};\n\nconst parseFromIntOrStr = (value: string | number) => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\treturn parseInt(value);\n};\n\nexport const updateDepartmentAgents = async (\n\tdepartmentId: string,\n\tagents: {\n\t\tupsert?: Pick<ILivechatDepartmentAgents, 'agentId' | 'count' | 'order'>[];\n\t\tremove?: Pick<ILivechatDepartmentAgents, 'agentId'>[];\n\t},\n\tdepartmentEnabled: boolean,\n) => {\n\tcheck(departmentId, String);\n\tcheck(agents, {\n\t\tupsert: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t\tremove: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t});\n\n\tconst { upsert = [], remove = [] } = agents;\n\n\tconst agentsUpdated = [];\n\tconst agentsRemoved = remove.map(({ agentId }: { agentId: string }) => agentId);\n\tconst agentsAdded = [];\n\n\tif (agentsRemoved.length > 0) {\n\t\tconst removedIds = await LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsRemoved, departmentId, {\n\t\t\tprojection: { agentId: 1 },\n\t\t}).toArray();\n\n\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByIds(removedIds.map(({ _id }) => _id));\n\n\t\tif (deletedCount > 0) {\n\t\t\tremovedIds.forEach(({ _id, agentId }) => {\n\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tagentId,\n\t\t\t\t\t\tdepartmentId,\n\t\t\t\t\t},\n\t\t\t\t\t'removed',\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });\n\t}\n\n\tfor await (const agent of upsert) {\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });\n\t\tif (!agentFromDb) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst livechatDepartmentAgent = await LivechatDepartmentAgents.saveAgent({\n\t\t\tagentId: agent.agentId,\n\t\t\tdepartmentId,\n\t\t\tusername: agentFromDb.username || '',\n\t\t\tcount: agent.count ? parseFromIntOrStr(agent.count) : 0,\n\t\t\torder: agent.order ? parseFromIntOrStr(agent.order) : 0,\n\t\t\tdepartmentEnabled,\n\t\t});\n\n\t\tif (livechatDepartmentAgent.upsertedId) {\n\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t{\n\t\t\t\t\t_id: livechatDepartmentAgent.upsertedId as any,\n\t\t\t\t\tagentId: agent.agentId,\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t'inserted',\n\t\t\t);\n\t\t} else {\n\t\t\tagentsUpdated.push(agent.agentId);\n\t\t}\n\n\t\tagentsAdded.push(agent.agentId);\n\t}\n\n\tif (agentsAdded.length > 0) {\n\t\tcallbacks.runAsync('livechat.saveAgentDepartment', {\n\t\t\tdepartmentId,\n\t\t\tagentsId: agentsAdded,\n\t\t});\n\t}\n\n\tif (agentsUpdated.length > 0) {\n\t\tvoid notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId(agentsUpdated, departmentId);\n\t}\n\n\tif (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n\t\tconst numAgents = await LivechatDepartmentAgents.countByDepartmentId(departmentId);\n\t\tawait LivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n\t}\n\n\treturn true;\n};\n\nexport const validateEmail = (email: string) => {\n\tif (!validatorFunc(email)) {\n\t\tthrow new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {\n\t\t\tfunction: 'Livechat.validateEmail',\n\t\t\temail,\n\t\t});\n\t}\n\treturn true;\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    const _excluded = [\"customFields\"];\n    module.export({\n      allowAgentSkipQueue: () => allowAgentSkipQueue,\n      createLivechatRoom: () => createLivechatRoom,\n      createLivechatInquiry: () => createLivechatInquiry,\n      createLivechatSubscription: () => createLivechatSubscription,\n      removeAgentFromSubscription: () => removeAgentFromSubscription,\n      parseAgentCustomFields: () => parseAgentCustomFields,\n      normalizeAgent: () => normalizeAgent,\n      dispatchAgentDelegated: () => dispatchAgentDelegated,\n      dispatchInquiryQueued: () => dispatchInquiryQueued,\n      forwardRoomToAgent: () => forwardRoomToAgent,\n      updateChatDepartment: () => updateChatDepartment,\n      forwardRoomToDepartment: () => forwardRoomToDepartment,\n      normalizeTransferredByData: () => normalizeTransferredByData,\n      updateDepartmentAgents: () => updateDepartmentAgents,\n      validateEmail: () => validateEmail\n    });\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 0);\n    let LivechatTransferEventType;\n    module.link(\"@rocket.chat/apps-engine/definition/livechat\", {\n      LivechatTransferEventType(v) {\n        LivechatTransferEventType = v;\n      }\n    }, 1);\n    let api, Message, Omnichannel;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      },\n      Message(v) {\n        Message = v;\n      },\n      Omnichannel(v) {\n        Omnichannel = v;\n      }\n    }, 2);\n    let LivechatInquiryStatus, OmnichannelSourceType, DEFAULT_SLA_CONFIG, UserStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatInquiryStatus(v) {\n        LivechatInquiryStatus = v;\n      },\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      },\n      DEFAULT_SLA_CONFIG(v) {\n        DEFAULT_SLA_CONFIG = v;\n      },\n      UserStatus(v) {\n        UserStatus = v;\n      }\n    }, 3);\n    let LivechatPriorityWeight;\n    module.link(\"@rocket.chat/core-typings/src/ILivechatPriority\", {\n      LivechatPriorityWeight(v) {\n        LivechatPriorityWeight = v;\n      }\n    }, 4);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 5);\n    let LivechatDepartmentAgents, LivechatInquiry, LivechatRooms, LivechatDepartment, Subscriptions, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 6);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 7);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 8);\n    let ObjectId;\n    module.link(\"mongodb\", {\n      ObjectId(v) {\n        ObjectId = v;\n      }\n    }, 9);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 10);\n    let validatorFunc;\n    module.link(\"../../../../lib/emailValidator\", {\n      validateEmail(v) {\n        validatorFunc = v;\n      }\n    }, 11);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 12);\n    let hasRoleAsync;\n    module.link(\"../../../authorization/server/functions/hasRole\", {\n      hasRoleAsync(v) {\n        hasRoleAsync = v;\n      }\n    }, 13);\n    let sendNotification;\n    module.link(\"../../../lib/server\", {\n      sendNotification(v) {\n        sendNotification = v;\n      }\n    }, 14);\n    let notifyOnLivechatDepartmentAgentChanged, notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId, notifyOnSubscriptionChangedById, notifyOnSubscriptionChangedByRoomId, notifyOnSubscriptionChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnLivechatDepartmentAgentChanged(v) {\n        notifyOnLivechatDepartmentAgentChanged = v;\n      },\n      notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId(v) {\n        notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId = v;\n      },\n      notifyOnSubscriptionChangedById(v) {\n        notifyOnSubscriptionChangedById = v;\n      },\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      },\n      notifyOnSubscriptionChanged(v) {\n        notifyOnSubscriptionChanged = v;\n      }\n    }, 15);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 16);\n    let LivechatTyped;\n    module.link(\"./LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 17);\n    let queueInquiry, saveQueueInquiry;\n    module.link(\"./QueueManager\", {\n      queueInquiry(v) {\n        queueInquiry = v;\n      },\n      saveQueueInquiry(v) {\n        saveQueueInquiry = v;\n      }\n    }, 18);\n    let RoutingManager;\n    module.link(\"./RoutingManager\", {\n      RoutingManager(v) {\n        RoutingManager = v;\n      }\n    }, 19);\n    let getOnlineAgents;\n    module.link(\"./getOnlineAgents\", {\n      getOnlineAgents(v) {\n        getOnlineAgents = v;\n      }\n    }, 20);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('LivechatHelper');\n    const allowAgentSkipQueue = agent => {\n      check(agent, Match.ObjectIncluding({\n        agentId: String\n      }));\n      return hasRoleAsync(agent.agentId, 'bot');\n    };\n    const createLivechatRoom = async function (rid, name, guest) {\n      let roomInfo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      let extraData = arguments.length > 4 ? arguments[4] : undefined;\n      check(rid, String);\n      check(name, String);\n      check(guest, Match.ObjectIncluding({\n        _id: String,\n        username: String,\n        status: Match.Maybe(String),\n        department: Match.Maybe(String)\n      }));\n      const extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n      const {\n        _id,\n        username,\n        token,\n        department: departmentId,\n        status = 'online',\n        contactId\n      } = guest;\n      const newRoomAt = new Date();\n      const {\n        activity\n      } = guest;\n      logger.debug({\n        msg: \"Creating livechat room for visitor \".concat(_id),\n        visitor: {\n          _id,\n          username,\n          departmentId,\n          status,\n          activity\n        }\n      });\n      // TODO: Solve `u` missing issue\n      const room = _objectSpread({\n        _id: rid,\n        msgs: 0,\n        usersCount: 1,\n        lm: newRoomAt,\n        fname: name,\n        t: 'l',\n        ts: newRoomAt,\n        departmentId,\n        v: _objectSpread({\n          _id,\n          username,\n          token,\n          status,\n          contactId\n        }, (activity === null || activity === void 0 ? void 0 : activity.length) && {\n          activity\n        }),\n        cl: false,\n        open: true,\n        waitingResponse: true,\n        // this should be overridden by extraRoomInfo when provided\n        // in case it's not provided, we'll use this \"default\" type\n        source: {\n          type: OmnichannelSourceType.OTHER,\n          alias: 'unknown'\n        },\n        queuedAt: newRoomAt,\n        livechatData: undefined,\n        priorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n        estimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE\n      }, extraRoomInfo);\n      const result = await Rooms.findOneAndUpdate(room, {\n        $set: {}\n      }, {\n        upsert: true,\n        returnDocument: 'after'\n      });\n      if (!result.value) {\n        throw new Error('Room not created');\n      }\n      await callbacks.run('livechat.newRoom', room);\n      await Message.saveSystemMessageAndNotifyUser('livechat-started', rid, '', {\n        _id,\n        username\n      }, {\n        groupable: false,\n        token: guest.token\n      });\n      return result.value;\n    };\n    const createLivechatInquiry = async _ref => {\n      let {\n        rid,\n        name,\n        guest,\n        message,\n        initialStatus,\n        extraData\n      } = _ref;\n      check(rid, String);\n      check(name, String);\n      check(guest, Match.ObjectIncluding({\n        _id: String,\n        username: String,\n        status: Match.Maybe(String),\n        department: Match.Maybe(String),\n        activity: Match.Maybe([String])\n      }));\n      const extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n      const {\n        _id,\n        username,\n        token,\n        department,\n        status = UserStatus.ONLINE,\n        activity\n      } = guest;\n      const ts = new Date();\n      logger.debug({\n        msg: \"Creating livechat inquiry for visitor \".concat(_id),\n        visitor: {\n          _id,\n          username,\n          department,\n          status,\n          activity\n        }\n      });\n      const result = await LivechatInquiry.findOneAndUpdate(_objectSpread({\n        rid,\n        name,\n        ts,\n        department,\n        message: message !== null && message !== void 0 ? message : '',\n        status: initialStatus || LivechatInquiryStatus.READY,\n        v: _objectSpread({\n          _id,\n          username,\n          token,\n          status\n        }, (activity === null || activity === void 0 ? void 0 : activity.length) && {\n          activity\n        }),\n        t: 'l',\n        priorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n        estimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE\n      }, extraInquiryInfo), {\n        $set: {\n          _id: new ObjectId().toHexString()\n        }\n      }, {\n        upsert: true,\n        returnDocument: 'after'\n      });\n      logger.debug(\"Inquiry \".concat(result, \" created for visitor \").concat(_id));\n      if (!result.value) {\n        throw new Error('Inquiry not created');\n      }\n      return result.value;\n    };\n    const createLivechatSubscription = async (rid, name, guest, agent, department) => {\n      check(rid, String);\n      check(name, String);\n      check(guest, Match.ObjectIncluding({\n        _id: String,\n        username: String,\n        status: Match.Maybe(String)\n      }));\n      check(agent, Match.ObjectIncluding({\n        agentId: String,\n        username: String\n      }));\n      const existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n      if (existingSubscription !== null && existingSubscription !== void 0 && existingSubscription._id) {\n        return existingSubscription;\n      }\n      const {\n        _id,\n        username,\n        token,\n        status = UserStatus.ONLINE\n      } = guest;\n      const subscriptionData = _objectSpread({\n        rid,\n        name,\n        fname: name,\n        lowerCaseName: name.toLowerCase(),\n        lowerCaseFName: name.toLowerCase(),\n        alert: true,\n        open: true,\n        unread: 1,\n        userMentions: 1,\n        groupMentions: 0,\n        u: {\n          _id: agent.agentId,\n          username: agent.username\n        },\n        t: 'l',\n        desktopNotifications: 'all',\n        mobilePushNotifications: 'all',\n        emailNotifications: 'all',\n        v: {\n          _id,\n          username,\n          token,\n          status\n        },\n        ts: new Date()\n      }, department && {\n        department\n      });\n      const response = await Subscriptions.insertOne(subscriptionData);\n      if (response !== null && response !== void 0 && response.insertedId) {\n        void notifyOnSubscriptionChangedById(response.insertedId, 'inserted');\n      }\n      return response;\n    };\n    const removeAgentFromSubscription = async (rid, _ref2) => {\n      let {\n        _id,\n        username\n      } = _ref2;\n      const room = await LivechatRooms.findOneById(rid);\n      const user = await Users.findOneById(_id);\n      if (!room || !user) {\n        return;\n      }\n      const deletedSubscription = await Subscriptions.removeByRoomIdAndUserId(rid, _id);\n      if (deletedSubscription) {\n        void notifyOnSubscriptionChanged(deletedSubscription, 'removed');\n      }\n      await Message.saveSystemMessage('ul', rid, username || '', {\n        _id: user._id,\n        username: user.username,\n        name: user.name\n      });\n      setImmediate(() => {\n        var _Apps$self;\n        void ((_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : _Apps$self.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, {\n          room,\n          user\n        }));\n      });\n    };\n    const parseAgentCustomFields = customFields => {\n      if (!customFields) {\n        return;\n      }\n      const externalCustomFields = () => {\n        const accountCustomFields = settings.get('Accounts_CustomFields');\n        if (!accountCustomFields || accountCustomFields.trim() === '') {\n          return [];\n        }\n        try {\n          const parseCustomFields = JSON.parse(accountCustomFields);\n          return Object.keys(parseCustomFields).filter(customFieldKey => parseCustomFields[customFieldKey].sendToIntegrations === true);\n        } catch (error) {\n          logger.error(error);\n          return [];\n        }\n      };\n      const externalCF = externalCustomFields();\n      return Object.keys(customFields).reduce((newObj, key) => externalCF.includes(key) ? _objectSpread(_objectSpread({}, newObj), {}, {\n        [key]: customFields[key]\n      }) : newObj, {});\n    };\n    const normalizeAgent = async agentId => {\n      if (!agentId) {\n        return;\n      }\n      if (!settings.get('Livechat_show_agent_info')) {\n        return {\n          hiddenInfo: true\n        };\n      }\n      const agent = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_email'));\n      if (!agent) {\n        return;\n      }\n      const {\n          customFields: agentCustomFields\n        } = agent,\n        extraData = _objectWithoutProperties(agent, _excluded);\n      const customFields = parseAgentCustomFields(agentCustomFields);\n      return Object.assign(extraData, _objectSpread({}, customFields && {\n        customFields\n      }));\n    };\n    const dispatchAgentDelegated = async (rid, agentId) => {\n      const agent = await normalizeAgent(agentId);\n      void api.broadcast('omnichannel.room', rid, {\n        type: 'agentData',\n        data: agent\n      });\n    };\n    const dispatchInquiryQueued = async (inquiry, agent) => {\n      var _RoutingManager$getCo;\n      if (!(inquiry !== null && inquiry !== void 0 && inquiry._id)) {\n        return;\n      }\n      logger.debug(\"Notifying agents of new inquiry \".concat(inquiry._id, \" queued\"));\n      const {\n        department,\n        rid,\n        v\n      } = inquiry;\n      const room = await LivechatRooms.findOneById(rid);\n      if (!room) {\n        return;\n      }\n      setImmediate(() => callbacks.run('livechat.chatQueued', room));\n      if ((_RoutingManager$getCo = RoutingManager.getConfig()) !== null && _RoutingManager$getCo !== void 0 && _RoutingManager$getCo.autoAssignAgent) {\n        return;\n      }\n      if (agent && (await allowAgentSkipQueue(agent))) {\n        return;\n      }\n      await saveQueueInquiry(inquiry);\n      // Alert only the online agents of the queued request\n      const onlineAgents = await getOnlineAgents(department, agent);\n      if (!onlineAgents) {\n        logger.debug('Cannot notify agents of queued inquiry. No online agents found');\n        return;\n      }\n      logger.debug(\"Notifying \".concat(await onlineAgents.count(), \" agents of new inquiry\"));\n      const notificationUserName = v && (v.name || v.username);\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(onlineAgents), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const agent = _step.value;\n          {\n            const {\n              _id,\n              active,\n              emails,\n              language,\n              status,\n              statusConnection,\n              username\n            } = agent;\n            await sendNotification({\n              // fake a subscription in order to make use of the function defined above\n              subscription: {\n                rid,\n                u: {\n                  _id\n                },\n                receiver: [{\n                  active,\n                  emails,\n                  language,\n                  status,\n                  statusConnection,\n                  username\n                }],\n                name: ''\n              },\n              sender: v,\n              hasMentionToAll: true,\n              // consider all agents to be in the room\n              hasReplyToThread: false,\n              disableAllMessageNotifications: false,\n              hasMentionToHere: false,\n              message: {\n                _id: '',\n                u: v,\n                msg: ''\n              },\n              // we should use server's language for this type of messages instead of user's\n              notificationMessage: i18n.t('User_started_a_new_conversation', {\n                username: notificationUserName,\n                lng: language\n              }),\n              room: Object.assign(room, {\n                name: i18n.t('New_chat_in_queue', {\n                  lng: language\n                })\n              }),\n              mentionIds: []\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n    const forwardRoomToAgent = async (room, transferData) => {\n      if (!(room !== null && room !== void 0 && room.open)) {\n        return false;\n      }\n      logger.debug(\"Forwarding room \".concat(room._id, \" to agent \").concat(transferData.userId));\n      const {\n        userId: agentId,\n        clientAction\n      } = transferData;\n      if (!agentId) {\n        throw new Error('error-invalid-agent');\n      }\n      const user = await Users.findOneOnlineAgentById(agentId);\n      if (!user) {\n        logger.debug(\"Agent \".concat(agentId, \" is offline. Cannot forward\"));\n        throw new Error('error-user-is-offline');\n      }\n      const {\n        _id: rid,\n        servedBy: oldServedBy\n      } = room;\n      const inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n      if (!inquiry) {\n        logger.debug(\"No inquiries found for room \".concat(room._id, \". Cannot forward\"));\n        throw new Error('error-invalid-inquiry');\n      }\n      if (oldServedBy && agentId === oldServedBy._id) {\n        throw new Error('error-selected-agent-room-agent-are-same');\n      }\n      const {\n        username\n      } = user;\n      const agent = {\n        agentId,\n        username\n      };\n      // Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n      delete inquiry.department;\n      // There are some Enterprise features that may interrupt the forwarding process\n      // Due to that we need to check whether the agent has been changed or not\n      logger.debug(\"Forwarding inquiry \".concat(inquiry._id, \" to agent \").concat(agent.agentId));\n      const roomTaken = await RoutingManager.takeInquiry(inquiry, agent, _objectSpread({}, clientAction && {\n        clientAction\n      }), room);\n      if (!roomTaken) {\n        logger.debug(\"Cannot forward inquiry \".concat(inquiry._id));\n        return false;\n      }\n      await LivechatTyped.saveTransferHistory(room, transferData);\n      const {\n        servedBy\n      } = roomTaken;\n      if (servedBy) {\n        if (oldServedBy && servedBy._id !== oldServedBy._id) {\n          await RoutingManager.removeAllRoomSubscriptions(room, servedBy);\n        }\n        setImmediate(() => {\n          var _Apps$self2;\n          void ((_Apps$self2 = Apps.self) === null || _Apps$self2 === void 0 ? void 0 : _Apps$self2.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n            type: LivechatTransferEventType.AGENT,\n            room: rid,\n            from: oldServedBy === null || oldServedBy === void 0 ? void 0 : oldServedBy._id,\n            to: servedBy._id\n          }));\n        });\n      }\n      logger.debug(\"Inquiry \".concat(inquiry._id, \" taken by agent \").concat(agent.agentId));\n      await callbacks.run('livechat.afterForwardChatToAgent', {\n        rid,\n        servedBy,\n        oldServedBy\n      });\n      return true;\n    };\n    const updateChatDepartment = async _ref3 => {\n      let {\n        rid,\n        newDepartmentId,\n        oldDepartmentId\n      } = _ref3;\n      const responses = await Promise.all([LivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId), LivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId), Subscriptions.changeDepartmentByRoomId(rid, newDepartmentId)]);\n      if (responses[2].modifiedCount) {\n        void notifyOnSubscriptionChangedByRoomId(rid);\n      }\n      setImmediate(() => {\n        var _Apps$self3;\n        void ((_Apps$self3 = Apps.self) === null || _Apps$self3 === void 0 ? void 0 : _Apps$self3.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n          type: LivechatTransferEventType.DEPARTMENT,\n          room: rid,\n          from: oldDepartmentId,\n          to: newDepartmentId\n        }));\n      });\n      return callbacks.run('livechat.afterForwardChatToDepartment', {\n        rid,\n        newDepartmentId,\n        oldDepartmentId\n      });\n    };\n    const forwardRoomToDepartment = async (room, guest, transferData) => {\n      var _RoutingManager$getCo2;\n      if (!(room !== null && room !== void 0 && room.open)) {\n        return false;\n      }\n      logger.debug(\"Attempting to forward room \".concat(room._id, \" to department \").concat(transferData.departmentId));\n      await callbacks.run('livechat.beforeForwardRoomToDepartment', {\n        room,\n        transferData\n      });\n      const {\n        _id: rid,\n        servedBy: oldServedBy,\n        departmentId: oldDepartmentId\n      } = room;\n      let agent = null;\n      const inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n      if (!inquiry) {\n        logger.debug(\"Cannot forward room \".concat(room._id, \". No inquiries found\"));\n        throw new Error('error-transferring-inquiry');\n      }\n      const {\n        departmentId\n      } = transferData;\n      if (!departmentId) {\n        logger.debug(\"Cannot forward room \".concat(room._id, \". No departmentId provided\"));\n        throw new Error('error-transferring-inquiry-no-department');\n      }\n      if (oldDepartmentId === departmentId) {\n        throw new Error('error-forwarding-chat-same-department');\n      }\n      const {\n        userId: agentId,\n        clientAction\n      } = transferData;\n      if (agentId) {\n        logger.debug(\"Forwarding room \".concat(room._id, \" to department \").concat(departmentId, \" (to user \").concat(agentId, \")\"));\n        const user = await Users.findOneOnlineAgentById(agentId);\n        if (!user) {\n          throw new Error('error-user-is-offline');\n        }\n        const isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!isInDepartment) {\n          throw new Error('error-user-not-belong-to-department');\n        }\n        const {\n          username\n        } = user;\n        agent = {\n          agentId,\n          username\n        };\n      }\n      const department = await LivechatDepartment.findOneById(departmentId, {\n        projection: {\n          allowReceiveForwardOffline: 1,\n          fallbackForwardDepartment: 1,\n          name: 1\n        }\n      });\n      if (!((_RoutingManager$getCo2 = RoutingManager.getConfig()) !== null && _RoutingManager$getCo2 !== void 0 && _RoutingManager$getCo2.autoAssignAgent) || !(await Omnichannel.isWithinMACLimit(room)) || department !== null && department !== void 0 && department.allowReceiveForwardOffline && !(await LivechatTyped.checkOnlineAgents(departmentId))) {\n        logger.debug(\"Room \".concat(room._id, \" will be on department queue\"));\n        await LivechatTyped.saveTransferHistory(room, transferData);\n        return RoutingManager.unassignAgent(inquiry, departmentId, true);\n      }\n      // Fake the department to forward the inquiry - Case the forward process does not success\n      // the inquiry will stay in the same original department\n      inquiry.department = departmentId;\n      const roomTaken = await RoutingManager.delegateInquiry(inquiry, agent, _objectSpread({\n        forwardingToDepartment: {\n          oldDepartmentId\n        }\n      }, clientAction && {\n        clientAction\n      }), room);\n      if (!roomTaken) {\n        logger.debug(\"Cannot forward room \".concat(room._id, \". Unable to delegate inquiry\"));\n        return false;\n      }\n      const {\n        servedBy,\n        chatQueued\n      } = roomTaken;\n      if (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n        var _department$fallbackF;\n        if (!(department !== null && department !== void 0 && (_department$fallbackF = department.fallbackForwardDepartment) !== null && _department$fallbackF !== void 0 && _department$fallbackF.length)) {\n          logger.debug(\"Cannot forward room \".concat(room._id, \". Chat assigned to agent \").concat(servedBy._id, \" (Previous was \").concat(oldServedBy._id, \")\"));\n          throw new Error('error-no-agents-online-in-department');\n        }\n        if (!transferData.originalDepartmentName) {\n          transferData.originalDepartmentName = department.name;\n        }\n        // if a chat has a fallback department, attempt to redirect chat to there [EE]\n        const transferSuccess = !!(await callbacks.run('livechat:onTransferFailure', room, {\n          guest,\n          transferData,\n          department\n        }));\n        // On CE theres no callback so it will return the room\n        if (typeof transferSuccess !== 'boolean' || !transferSuccess) {\n          logger.debug(\"Cannot forward room \".concat(room._id, \". Unable to delegate inquiry\"));\n          return false;\n        }\n        return true;\n      }\n      // Send just 1 message to the room to inform the user that the chat was transferred\n      if (transferData.usingFallbackDep) {\n        const {\n          _id,\n          username\n        } = transferData.transferredBy;\n        await Message.saveSystemMessage('livechat_transfer_history_fallback', room._id, '', {\n          _id,\n          username\n        }, _objectSpread(_objectSpread({}, transferData.transferredBy.userType === 'visitor' && {\n          token: room.v.token\n        }), {}, {\n          transferData: _objectSpread(_objectSpread({}, transferData), {}, {\n            prevDepartment: transferData.originalDepartmentName\n          })\n        }));\n      }\n      await LivechatTyped.saveTransferHistory(room, transferData);\n      if (oldServedBy) {\n        // if chat is queued then we don't ignore the new servedBy agent bcs at this\n        // point the chat is not assigned to him/her and it is still in the queue\n        await RoutingManager.removeAllRoomSubscriptions(room, !chatQueued ? servedBy : undefined);\n      }\n      await updateChatDepartment({\n        rid,\n        newDepartmentId: departmentId,\n        oldDepartmentId\n      });\n      if (chatQueued) {\n        logger.debug(\"Forwarding succesful. Marking inquiry \".concat(inquiry._id, \" as ready\"));\n        await LivechatInquiry.readyInquiry(inquiry._id);\n        await LivechatRooms.removeAgentByRoomId(rid);\n        await dispatchAgentDelegated(rid);\n        const newInquiry = await LivechatInquiry.findOneById(inquiry._id);\n        if (!newInquiry) {\n          logger.debug(\"Inquiry \".concat(inquiry._id, \" not found\"));\n          throw new Error('error-invalid-inquiry');\n        }\n        await queueInquiry(newInquiry);\n        logger.debug(\"Inquiry \".concat(inquiry._id, \" queued succesfully\"));\n      }\n      return true;\n    };\n    const normalizeTransferredByData = (transferredBy, room) => {\n      if (!transferredBy || !room) {\n        throw new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n      }\n      const {\n        servedBy: {\n          _id: agentId\n        } = {}\n      } = room;\n      const {\n        _id,\n        username,\n        name,\n        userType: transferType\n      } = transferredBy;\n      const userType = transferType || (_id === agentId ? 'agent' : 'user');\n      return _objectSpread(_objectSpread({\n        _id,\n        username\n      }, name && {\n        name\n      }), {}, {\n        userType\n      });\n    };\n    const parseFromIntOrStr = value => {\n      if (typeof value === 'number') {\n        return value;\n      }\n      return parseInt(value);\n    };\n    const updateDepartmentAgents = async (departmentId, agents, departmentEnabled) => {\n      check(departmentId, String);\n      check(agents, {\n        upsert: Match.Maybe([Match.ObjectIncluding({\n          agentId: String,\n          username: Match.Maybe(String),\n          count: Match.Maybe(Match.Integer),\n          order: Match.Maybe(Match.Integer)\n        })]),\n        remove: Match.Maybe([Match.ObjectIncluding({\n          agentId: String,\n          username: Match.Maybe(String),\n          count: Match.Maybe(Match.Integer),\n          order: Match.Maybe(Match.Integer)\n        })])\n      });\n      const {\n        upsert = [],\n        remove = []\n      } = agents;\n      const agentsUpdated = [];\n      const agentsRemoved = remove.map(_ref4 => {\n        let {\n          agentId\n        } = _ref4;\n        return agentId;\n      });\n      const agentsAdded = [];\n      if (agentsRemoved.length > 0) {\n        const removedIds = await LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsRemoved, departmentId, {\n          projection: {\n            agentId: 1\n          }\n        }).toArray();\n        const {\n          deletedCount\n        } = await LivechatDepartmentAgents.removeByIds(removedIds.map(_ref5 => {\n          let {\n            _id\n          } = _ref5;\n          return _id;\n        }));\n        if (deletedCount > 0) {\n          removedIds.forEach(_ref6 => {\n            let {\n              _id,\n              agentId\n            } = _ref6;\n            void notifyOnLivechatDepartmentAgentChanged({\n              _id,\n              agentId,\n              departmentId\n            }, 'removed');\n          });\n        }\n        callbacks.runAsync('livechat.removeAgentDepartment', {\n          departmentId,\n          agentsId: agentsRemoved\n        });\n      }\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n      var _iteratorError2;\n      try {\n        for (var _iterator2 = _asyncIterator(upsert), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n          const agent = _step2.value;\n          {\n            const agentFromDb = await Users.findOneById(agent.agentId, {\n              projection: {\n                _id: 1,\n                username: 1\n              }\n            });\n            if (!agentFromDb) {\n              continue;\n            }\n            const livechatDepartmentAgent = await LivechatDepartmentAgents.saveAgent({\n              agentId: agent.agentId,\n              departmentId,\n              username: agentFromDb.username || '',\n              count: agent.count ? parseFromIntOrStr(agent.count) : 0,\n              order: agent.order ? parseFromIntOrStr(agent.order) : 0,\n              departmentEnabled\n            });\n            if (livechatDepartmentAgent.upsertedId) {\n              void notifyOnLivechatDepartmentAgentChanged({\n                _id: livechatDepartmentAgent.upsertedId,\n                agentId: agent.agentId,\n                departmentId\n              }, 'inserted');\n            } else {\n              agentsUpdated.push(agent.agentId);\n            }\n            agentsAdded.push(agent.agentId);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            await _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      if (agentsAdded.length > 0) {\n        callbacks.runAsync('livechat.saveAgentDepartment', {\n          departmentId,\n          agentsId: agentsAdded\n        });\n      }\n      if (agentsUpdated.length > 0) {\n        void notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId(agentsUpdated, departmentId);\n      }\n      if (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n        const numAgents = await LivechatDepartmentAgents.countByDepartmentId(departmentId);\n        await LivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n      }\n      return true;\n    };\n    const validateEmail = email => {\n      if (!validatorFunc(email)) {\n        throw new Meteor.Error('error-invalid-email', \"Invalid email \".concat(email), {\n          function: 'Livechat.validateEmail',\n          email\n        });\n      }\n      return true;\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","_excluded","export","allowAgentSkipQueue","createLivechatRoom","createLivechatInquiry","createLivechatSubscription","removeAgentFromSubscription","parseAgentCustomFields","normalizeAgent","dispatchAgentDelegated","dispatchInquiryQueued","forwardRoomToAgent","updateChatDepartment","forwardRoomToDepartment","normalizeTransferredByData","updateDepartmentAgents","validateEmail","Apps","AppEvents","LivechatTransferEventType","api","Message","Omnichannel","LivechatInquiryStatus","OmnichannelSourceType","DEFAULT_SLA_CONFIG","UserStatus","LivechatPriorityWeight","Logger","LivechatDepartmentAgents","LivechatInquiry","LivechatRooms","LivechatDepartment","Subscriptions","Rooms","Users","Match","check","Meteor","ObjectId","callbacks","validatorFunc","i18n","hasRoleAsync","sendNotification","notifyOnLivechatDepartmentAgentChanged","notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId","notifyOnSubscriptionChangedById","notifyOnSubscriptionChangedByRoomId","notifyOnSubscriptionChanged","settings","LivechatTyped","Livechat","queueInquiry","saveQueueInquiry","RoutingManager","getOnlineAgents","__reifyWaitForDeps__","logger","agent","ObjectIncluding","agentId","String","rid","name","guest","roomInfo","arguments","length","undefined","extraData","_id","username","status","Maybe","department","extraRoomInfo","run","token","departmentId","contactId","newRoomAt","Date","activity","debug","msg","concat","visitor","room","msgs","usersCount","lm","fname","t","ts","cl","open","waitingResponse","source","type","OTHER","alias","queuedAt","livechatData","priorityWeight","NOT_SPECIFIED","estimatedWaitingTimeQueue","ESTIMATED_WAITING_TIME_QUEUE","result","findOneAndUpdate","$set","upsert","returnDocument","value","Error","saveSystemMessageAndNotifyUser","groupable","_ref","message","initialStatus","extraInquiryInfo","ONLINE","READY","toHexString","existingSubscription","findOneByRoomIdAndUserId","subscriptionData","lowerCaseName","toLowerCase","lowerCaseFName","alert","unread","userMentions","groupMentions","u","desktopNotifications","mobilePushNotifications","emailNotifications","response","insertOne","insertedId","_ref2","findOneById","user","deletedSubscription","removeByRoomIdAndUserId","saveSystemMessage","setImmediate","_Apps$self","self","triggerEvent","IPostLivechatAgentUnassigned","customFields","externalCustomFields","accountCustomFields","get","trim","parseCustomFields","JSON","parse","Object","keys","filter","customFieldKey","sendToIntegrations","error","externalCF","reduce","newObj","key","includes","hiddenInfo","getAgentInfo","agentCustomFields","assign","broadcast","data","inquiry","_RoutingManager$getCo","getConfig","autoAssignAgent","onlineAgents","count","notificationUserName","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","active","emails","language","statusConnection","subscription","receiver","sender","hasMentionToAll","hasReplyToThread","disableAllMessageNotifications","hasMentionToHere","notificationMessage","lng","mentionIds","err","return","transferData","userId","clientAction","findOneOnlineAgentById","servedBy","oldServedBy","findOneByRoomId","roomTaken","takeInquiry","saveTransferHistory","removeAllRoomSubscriptions","_Apps$self2","IPostLivechatRoomTransferred","AGENT","from","to","_ref3","newDepartmentId","oldDepartmentId","responses","Promise","all","changeDepartmentIdByRoomId","changeDepartmentByRoomId","modifiedCount","_Apps$self3","DEPARTMENT","_RoutingManager$getCo2","isInDepartment","findOneByAgentIdAndDepartmentId","projection","allowReceiveForwardOffline","fallbackForwardDepartment","isWithinMACLimit","checkOnlineAgents","unassignAgent","delegateInquiry","forwardingToDepartment","chatQueued","_department$fallbackF","originalDepartmentName","transferSuccess","usingFallbackDep","transferredBy","userType","prevDepartment","readyInquiry","removeAgentByRoomId","newInquiry","transferType","parseFromIntOrStr","parseInt","agents","departmentEnabled","Integer","order","remove","agentsUpdated","agentsRemoved","map","_ref4","agentsAdded","removedIds","findByAgentsAndDepartmentId","toArray","deletedCount","removeByIds","_ref5","forEach","_ref6","runAsync","agentsId","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","agentFromDb","livechatDepartmentAgent","saveAgent","upsertedId","push","numAgents","countByDepartmentId","updateNumAgentsById","email","function","__reify_async_result__","_reifyError","async"],"sources":["app/livechat/server/lib/Helper.ts"],"sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { LivechatTransferEventType } from '@rocket.chat/apps-engine/definition/livechat';\nimport { api, Message, Omnichannel } from '@rocket.chat/core-services';\nimport type {\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tSelectedAgent,\n\tISubscription,\n\tILivechatInquiryRecord,\n\tIUser,\n\tTransferData,\n\tILivechatDepartmentAgents,\n\tTransferByData,\n\tILivechatAgent,\n\tILivechatDepartment,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus, OmnichannelSourceType, DEFAULT_SLA_CONFIG, UserStatus } from '@rocket.chat/core-typings';\nimport { LivechatPriorityWeight } from '@rocket.chat/core-typings/src/ILivechatPriority';\nimport { Logger } from '@rocket.chat/logger';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatDepartmentAgents,\n\tLivechatInquiry,\n\tLivechatRooms,\n\tLivechatDepartment,\n\tSubscriptions,\n\tRooms,\n\tUsers,\n} from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport { ObjectId } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { validateEmail as validatorFunc } from '../../../../lib/emailValidator';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { hasRoleAsync } from '../../../authorization/server/functions/hasRole';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId,\n\tnotifyOnSubscriptionChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnSubscriptionChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { Livechat as LivechatTyped } from './LivechatTyped';\nimport { queueInquiry, saveQueueInquiry } from './QueueManager';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\n\nconst logger = new Logger('LivechatHelper');\nexport const allowAgentSkipQueue = (agent: SelectedAgent) => {\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t}),\n\t);\n\n\treturn hasRoleAsync(agent.agentId, 'bot');\n};\nexport const createLivechatRoom = async <\n\tE extends Record<string, unknown> & {\n\t\tsla?: string;\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t},\n>(\n\trid: string,\n\tname: string,\n\tguest: ILivechatVisitor,\n\troomInfo: Partial<IOmnichannelRoom> = {},\n\textraData?: E,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t}),\n\t);\n\n\tconst extraRoomInfo = await callbacks.run('livechat.beforeRoom', roomInfo, extraData);\n\tconst { _id, username, token, department: departmentId, status = 'online', contactId } = guest;\n\tconst newRoomAt = new Date();\n\n\tconst { activity } = guest;\n\tlogger.debug({\n\t\tmsg: `Creating livechat room for visitor ${_id}`,\n\t\tvisitor: { _id, username, departmentId, status, activity },\n\t});\n\n\t// TODO: Solve `u` missing issue\n\tconst room: InsertionModel<IOmnichannelRoom> = {\n\t\t_id: rid,\n\t\tmsgs: 0,\n\t\tusersCount: 1,\n\t\tlm: newRoomAt,\n\t\tfname: name,\n\t\tt: 'l' as const,\n\t\tts: newRoomAt,\n\t\tdepartmentId,\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t\tcontactId,\n\t\t\t...(activity?.length && { activity }),\n\t\t},\n\t\tcl: false,\n\t\topen: true,\n\t\twaitingResponse: true,\n\t\t// this should be overridden by extraRoomInfo when provided\n\t\t// in case it's not provided, we'll use this \"default\" type\n\t\tsource: {\n\t\t\ttype: OmnichannelSourceType.OTHER,\n\t\t\talias: 'unknown',\n\t\t},\n\t\tqueuedAt: newRoomAt,\n\t\tlivechatData: undefined,\n\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\t\t...extraRoomInfo,\n\t} as InsertionModel<IOmnichannelRoom>;\n\n\tconst result = await Rooms.findOneAndUpdate(\n\t\troom,\n\t\t{\n\t\t\t$set: {},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\n\tif (!result.value) {\n\t\tthrow new Error('Room not created');\n\t}\n\n\tawait callbacks.run('livechat.newRoom', room);\n\tawait Message.saveSystemMessageAndNotifyUser('livechat-started', rid, '', { _id, username }, { groupable: false, token: guest.token });\n\n\treturn result.value as IOmnichannelRoom;\n};\n\nexport const createLivechatInquiry = async ({\n\trid,\n\tname,\n\tguest,\n\tmessage,\n\tinitialStatus,\n\textraData,\n}: {\n\trid: string;\n\tname?: string;\n\tguest?: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'department' | 'name' | 'token' | 'activity'>;\n\tmessage?: string;\n\tinitialStatus?: LivechatInquiryStatus;\n\textraData?: Pick<ILivechatInquiryRecord, 'source'>;\n}) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t\tdepartment: Match.Maybe(String),\n\t\t\tactivity: Match.Maybe([String]),\n\t\t}),\n\t);\n\n\tconst extraInquiryInfo = await callbacks.run('livechat.beforeInquiry', extraData);\n\n\tconst { _id, username, token, department, status = UserStatus.ONLINE, activity } = guest;\n\n\tconst ts = new Date();\n\n\tlogger.debug({\n\t\tmsg: `Creating livechat inquiry for visitor ${_id}`,\n\t\tvisitor: { _id, username, department, status, activity },\n\t});\n\n\tconst result = await LivechatInquiry.findOneAndUpdate(\n\t\t{\n\t\t\trid,\n\t\t\tname,\n\t\t\tts,\n\t\t\tdepartment,\n\t\t\tmessage: message ?? '',\n\t\t\tstatus: initialStatus || LivechatInquiryStatus.READY,\n\t\t\tv: {\n\t\t\t\t_id,\n\t\t\t\tusername,\n\t\t\t\ttoken,\n\t\t\t\tstatus,\n\t\t\t\t...(activity?.length && { activity }),\n\t\t\t},\n\t\t\tt: 'l',\n\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\testimatedWaitingTimeQueue: DEFAULT_SLA_CONFIG.ESTIMATED_WAITING_TIME_QUEUE,\n\n\t\t\t...extraInquiryInfo,\n\t\t},\n\t\t{\n\t\t\t$set: {\n\t\t\t\t_id: new ObjectId().toHexString(),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tupsert: true,\n\t\t\treturnDocument: 'after',\n\t\t},\n\t);\n\tlogger.debug(`Inquiry ${result} created for visitor ${_id}`);\n\n\tif (!result.value) {\n\t\tthrow new Error('Inquiry not created');\n\t}\n\n\treturn result.value as ILivechatInquiryRecord;\n};\n\nexport const createLivechatSubscription = async (\n\trid: string,\n\tname: string,\n\tguest: Pick<ILivechatVisitor, '_id' | 'username' | 'status' | 'name' | 'token' | 'phone'>,\n\tagent: SelectedAgent,\n\tdepartment?: string,\n) => {\n\tcheck(rid, String);\n\tcheck(name, String);\n\tcheck(\n\t\tguest,\n\t\tMatch.ObjectIncluding({\n\t\t\t_id: String,\n\t\t\tusername: String,\n\t\t\tstatus: Match.Maybe(String),\n\t\t}),\n\t);\n\tcheck(\n\t\tagent,\n\t\tMatch.ObjectIncluding({\n\t\t\tagentId: String,\n\t\t\tusername: String,\n\t\t}),\n\t);\n\n\tconst existingSubscription = await Subscriptions.findOneByRoomIdAndUserId(rid, agent.agentId);\n\tif (existingSubscription?._id) {\n\t\treturn existingSubscription;\n\t}\n\n\tconst { _id, username, token, status = UserStatus.ONLINE } = guest;\n\n\tconst subscriptionData: InsertionModel<ISubscription> = {\n\t\trid,\n\t\tname,\n\t\tfname: name,\n\t\tlowerCaseName: name.toLowerCase(),\n\t\tlowerCaseFName: name.toLowerCase(),\n\t\talert: true,\n\t\topen: true,\n\t\tunread: 1,\n\t\tuserMentions: 1,\n\t\tgroupMentions: 0,\n\t\tu: {\n\t\t\t_id: agent.agentId,\n\t\t\tusername: agent.username,\n\t\t},\n\t\tt: 'l',\n\t\tdesktopNotifications: 'all',\n\t\tmobilePushNotifications: 'all',\n\t\temailNotifications: 'all',\n\t\tv: {\n\t\t\t_id,\n\t\t\tusername,\n\t\t\ttoken,\n\t\t\tstatus,\n\t\t},\n\t\tts: new Date(),\n\t\t...(department && { department }),\n\t} as InsertionModel<ISubscription>;\n\n\tconst response = await Subscriptions.insertOne(subscriptionData);\n\n\tif (response?.insertedId) {\n\t\tvoid notifyOnSubscriptionChangedById(response.insertedId, 'inserted');\n\t}\n\n\treturn response;\n};\n\nexport const removeAgentFromSubscription = async (rid: string, { _id, username }: Pick<IUser, '_id' | 'username'>) => {\n\tconst room = await LivechatRooms.findOneById(rid);\n\tconst user = await Users.findOneById(_id);\n\n\tif (!room || !user) {\n\t\treturn;\n\t}\n\n\tconst deletedSubscription = await Subscriptions.removeByRoomIdAndUserId(rid, _id);\n\tif (deletedSubscription) {\n\t\tvoid notifyOnSubscriptionChanged(deletedSubscription, 'removed');\n\t}\n\n\tawait Message.saveSystemMessage('ul', rid, username || '', { _id: user._id, username: user.username, name: user.name });\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatAgentUnassigned, { room, user });\n\t});\n};\n\nexport const parseAgentCustomFields = (customFields?: Record<string, any>) => {\n\tif (!customFields) {\n\t\treturn;\n\t}\n\n\tconst externalCustomFields = () => {\n\t\tconst accountCustomFields = settings.get<string>('Accounts_CustomFields');\n\t\tif (!accountCustomFields || accountCustomFields.trim() === '') {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tconst parseCustomFields = JSON.parse(accountCustomFields);\n\t\t\treturn Object.keys(parseCustomFields).filter((customFieldKey) => parseCustomFields[customFieldKey].sendToIntegrations === true);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\treturn [];\n\t\t}\n\t};\n\n\tconst externalCF = externalCustomFields();\n\treturn Object.keys(customFields).reduce(\n\t\t(newObj, key) => (externalCF.includes(key) ? { ...newObj, [key]: customFields[key] } : newObj),\n\t\t{},\n\t);\n};\n\nexport const normalizeAgent = async (agentId?: string) => {\n\tif (!agentId) {\n\t\treturn;\n\t}\n\n\tif (!settings.get('Livechat_show_agent_info')) {\n\t\treturn { hiddenInfo: true };\n\t}\n\n\tconst agent = await Users.getAgentInfo(agentId, settings.get('Livechat_show_agent_email'));\n\tif (!agent) {\n\t\treturn;\n\t}\n\n\tconst { customFields: agentCustomFields, ...extraData } = agent;\n\tconst customFields = parseAgentCustomFields(agentCustomFields);\n\n\treturn Object.assign(extraData, { ...(customFields && { customFields }) }) as ILivechatAgent;\n};\n\nexport const dispatchAgentDelegated = async (rid: string, agentId?: string) => {\n\tconst agent = await normalizeAgent(agentId);\n\n\tvoid api.broadcast('omnichannel.room', rid, {\n\t\ttype: 'agentData',\n\t\tdata: agent,\n\t});\n};\n\n/**\n * @deprecated\n */\n\nexport const dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, agent?: SelectedAgent | null) => {\n\tif (!inquiry?._id) {\n\t\treturn;\n\t}\n\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\tconst { department, rid, v } = inquiry;\n\tconst room = await LivechatRooms.findOneById(rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tsetImmediate(() => callbacks.run('livechat.chatQueued', room));\n\n\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\treturn;\n\t}\n\n\tif (agent && (await allowAgentSkipQueue(agent))) {\n\t\treturn;\n\t}\n\n\tawait saveQueueInquiry(inquiry);\n\n\t// Alert only the online agents of the queued request\n\tconst onlineAgents = await getOnlineAgents(department, agent);\n\tif (!onlineAgents) {\n\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\treturn;\n\t}\n\n\tlogger.debug(`Notifying ${await onlineAgents.count()} agents of new inquiry`);\n\tconst notificationUserName = v && (v.name || v.username);\n\n\tfor await (const agent of onlineAgents) {\n\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\tawait sendNotification({\n\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\tsubscription: {\n\t\t\t\trid,\n\t\t\t\tu: {\n\t\t\t\t\t_id,\n\t\t\t\t},\n\t\t\t\treceiver: [\n\t\t\t\t\t{\n\t\t\t\t\t\tactive,\n\t\t\t\t\t\temails,\n\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\tusername,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tname: '',\n\t\t\t},\n\t\t\tsender: v,\n\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\thasReplyToThread: false,\n\t\t\tdisableAllMessageNotifications: false,\n\t\t\thasMentionToHere: false,\n\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\troom: Object.assign(room, { name: i18n.t('New_chat_in_queue', { lng: language }) }),\n\t\t\tmentionIds: [],\n\t\t});\n\t}\n};\n\nexport const forwardRoomToAgent = async (room: IOmnichannelRoom, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\n\tlogger.debug(`Forwarding room ${room._id} to agent ${transferData.userId}`);\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (!agentId) {\n\t\tthrow new Error('error-invalid-agent');\n\t}\n\tconst user = await Users.findOneOnlineAgentById(agentId);\n\tif (!user) {\n\t\tlogger.debug(`Agent ${agentId} is offline. Cannot forward`);\n\t\tthrow new Error('error-user-is-offline');\n\t}\n\n\tconst { _id: rid, servedBy: oldServedBy } = room;\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`No inquiries found for room ${room._id}. Cannot forward`);\n\t\tthrow new Error('error-invalid-inquiry');\n\t}\n\n\tif (oldServedBy && agentId === oldServedBy._id) {\n\t\tthrow new Error('error-selected-agent-room-agent-are-same');\n\t}\n\n\tconst { username } = user;\n\tconst agent = { agentId, username };\n\t// Remove department from inquiry to make sure the routing algorithm treat this as forwarding to agent and not as forwarding to department\n\tdelete inquiry.department;\n\t// There are some Enterprise features that may interrupt the forwarding process\n\t// Due to that we need to check whether the agent has been changed or not\n\tlogger.debug(`Forwarding inquiry ${inquiry._id} to agent ${agent.agentId}`);\n\tconst roomTaken = await RoutingManager.takeInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward inquiry ${inquiry._id}`);\n\t\treturn false;\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\n\tconst { servedBy } = roomTaken;\n\tif (servedBy) {\n\t\tif (oldServedBy && servedBy._id !== oldServedBy._id) {\n\t\t\tawait RoutingManager.removeAllRoomSubscriptions(room, servedBy);\n\t\t}\n\n\t\tsetImmediate(() => {\n\t\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\t\ttype: LivechatTransferEventType.AGENT,\n\t\t\t\troom: rid,\n\t\t\t\tfrom: oldServedBy?._id,\n\t\t\t\tto: servedBy._id,\n\t\t\t});\n\t\t});\n\t}\n\n\tlogger.debug(`Inquiry ${inquiry._id} taken by agent ${agent.agentId}`);\n\tawait callbacks.run('livechat.afterForwardChatToAgent', { rid, servedBy, oldServedBy });\n\treturn true;\n};\n\nexport const updateChatDepartment = async ({\n\trid,\n\tnewDepartmentId,\n\toldDepartmentId,\n}: {\n\trid: string;\n\tnewDepartmentId: string;\n\toldDepartmentId?: string;\n}) => {\n\tconst responses = await Promise.all([\n\t\tLivechatRooms.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tLivechatInquiry.changeDepartmentIdByRoomId(rid, newDepartmentId),\n\t\tSubscriptions.changeDepartmentByRoomId(rid, newDepartmentId),\n\t]);\n\n\tif (responses[2].modifiedCount) {\n\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t}\n\n\tsetImmediate(() => {\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomTransferred, {\n\t\t\ttype: LivechatTransferEventType.DEPARTMENT,\n\t\t\troom: rid,\n\t\t\tfrom: oldDepartmentId,\n\t\t\tto: newDepartmentId,\n\t\t});\n\t});\n\n\treturn callbacks.run('livechat.afterForwardChatToDepartment', {\n\t\trid,\n\t\tnewDepartmentId,\n\t\toldDepartmentId,\n\t});\n};\n\nexport const forwardRoomToDepartment = async (room: IOmnichannelRoom, guest: ILivechatVisitor, transferData: TransferData) => {\n\tif (!room?.open) {\n\t\treturn false;\n\t}\n\tlogger.debug(`Attempting to forward room ${room._id} to department ${transferData.departmentId}`);\n\n\tawait callbacks.run('livechat.beforeForwardRoomToDepartment', { room, transferData });\n\tconst { _id: rid, servedBy: oldServedBy, departmentId: oldDepartmentId } = room;\n\tlet agent = null;\n\n\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\tif (!inquiry) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No inquiries found`);\n\t\tthrow new Error('error-transferring-inquiry');\n\t}\n\n\tconst { departmentId } = transferData;\n\tif (!departmentId) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. No departmentId provided`);\n\t\tthrow new Error('error-transferring-inquiry-no-department');\n\t}\n\tif (oldDepartmentId === departmentId) {\n\t\tthrow new Error('error-forwarding-chat-same-department');\n\t}\n\n\tconst { userId: agentId, clientAction } = transferData;\n\tif (agentId) {\n\t\tlogger.debug(`Forwarding room ${room._id} to department ${departmentId} (to user ${agentId})`);\n\t\tconst user = await Users.findOneOnlineAgentById(agentId);\n\t\tif (!user) {\n\t\t\tthrow new Error('error-user-is-offline');\n\t\t}\n\t\tconst isInDepartment = await LivechatDepartmentAgents.findOneByAgentIdAndDepartmentId(agentId, departmentId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!isInDepartment) {\n\t\t\tthrow new Error('error-user-not-belong-to-department');\n\t\t}\n\t\tconst { username } = user;\n\t\tagent = { agentId, username };\n\t}\n\n\tconst department = await LivechatDepartment.findOneById<\n\t\tPick<ILivechatDepartment, 'allowReceiveForwardOffline' | 'fallbackForwardDepartment' | 'name'>\n\t>(departmentId, {\n\t\tprojection: {\n\t\t\tallowReceiveForwardOffline: 1,\n\t\t\tfallbackForwardDepartment: 1,\n\t\t\tname: 1,\n\t\t},\n\t});\n\n\tif (\n\t\t!RoutingManager.getConfig()?.autoAssignAgent ||\n\t\t!(await Omnichannel.isWithinMACLimit(room)) ||\n\t\t(department?.allowReceiveForwardOffline && !(await LivechatTyped.checkOnlineAgents(departmentId)))\n\t) {\n\t\tlogger.debug(`Room ${room._id} will be on department queue`);\n\t\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\t\treturn RoutingManager.unassignAgent(inquiry, departmentId, true);\n\t}\n\n\t// Fake the department to forward the inquiry - Case the forward process does not success\n\t// the inquiry will stay in the same original department\n\tinquiry.department = departmentId;\n\tconst roomTaken = await RoutingManager.delegateInquiry(\n\t\tinquiry,\n\t\tagent,\n\t\t{\n\t\t\tforwardingToDepartment: { oldDepartmentId },\n\t\t\t...(clientAction && { clientAction }),\n\t\t},\n\t\troom,\n\t);\n\tif (!roomTaken) {\n\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\treturn false;\n\t}\n\n\tconst { servedBy, chatQueued } = roomTaken;\n\tif (!chatQueued && oldServedBy && servedBy && oldServedBy._id === servedBy._id) {\n\t\tif (!department?.fallbackForwardDepartment?.length) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Chat assigned to agent ${servedBy._id} (Previous was ${oldServedBy._id})`);\n\t\t\tthrow new Error('error-no-agents-online-in-department');\n\t\t}\n\n\t\tif (!transferData.originalDepartmentName) {\n\t\t\ttransferData.originalDepartmentName = department.name;\n\t\t}\n\t\t// if a chat has a fallback department, attempt to redirect chat to there [EE]\n\t\tconst transferSuccess = !!(await callbacks.run('livechat:onTransferFailure', room, { guest, transferData, department }));\n\t\t// On CE theres no callback so it will return the room\n\t\tif (typeof transferSuccess !== 'boolean' || !transferSuccess) {\n\t\t\tlogger.debug(`Cannot forward room ${room._id}. Unable to delegate inquiry`);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// Send just 1 message to the room to inform the user that the chat was transferred\n\tif (transferData.usingFallbackDep) {\n\t\tconst { _id, username } = transferData.transferredBy;\n\t\tawait Message.saveSystemMessage(\n\t\t\t'livechat_transfer_history_fallback',\n\t\t\troom._id,\n\t\t\t'',\n\t\t\t{ _id, username },\n\t\t\t{\n\t\t\t\t...(transferData.transferredBy.userType === 'visitor' && { token: room.v.token }),\n\t\t\t\ttransferData: {\n\t\t\t\t\t...transferData,\n\t\t\t\t\tprevDepartment: transferData.originalDepartmentName,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tawait LivechatTyped.saveTransferHistory(room, transferData);\n\tif (oldServedBy) {\n\t\t// if chat is queued then we don't ignore the new servedBy agent bcs at this\n\t\t// point the chat is not assigned to him/her and it is still in the queue\n\t\tawait RoutingManager.removeAllRoomSubscriptions(room, !chatQueued ? servedBy : undefined);\n\t}\n\n\tawait updateChatDepartment({ rid, newDepartmentId: departmentId, oldDepartmentId });\n\n\tif (chatQueued) {\n\t\tlogger.debug(`Forwarding succesful. Marking inquiry ${inquiry._id} as ready`);\n\t\tawait LivechatInquiry.readyInquiry(inquiry._id);\n\t\tawait LivechatRooms.removeAgentByRoomId(rid);\n\t\tawait dispatchAgentDelegated(rid);\n\t\tconst newInquiry = await LivechatInquiry.findOneById(inquiry._id);\n\t\tif (!newInquiry) {\n\t\t\tlogger.debug(`Inquiry ${inquiry._id} not found`);\n\t\t\tthrow new Error('error-invalid-inquiry');\n\t\t}\n\n\t\tawait queueInquiry(newInquiry);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued succesfully`);\n\t}\n\n\treturn true;\n};\n\ntype MakePropertyOptional<T, K extends keyof T> = Omit<T, K> & { [P in K]?: T[P] };\n\nexport const normalizeTransferredByData = (\n\ttransferredBy: MakePropertyOptional<TransferByData, 'userType'>,\n\troom: IOmnichannelRoom,\n): TransferByData => {\n\tif (!transferredBy || !room) {\n\t\tthrow new Error('You must provide \"transferredBy\" and \"room\" params to \"getTransferredByData\"');\n\t}\n\tconst { servedBy: { _id: agentId } = {} } = room;\n\tconst { _id, username, name, userType: transferType } = transferredBy;\n\tconst userType = transferType || (_id === agentId ? 'agent' : 'user');\n\treturn {\n\t\t_id,\n\t\tusername,\n\t\t...(name && { name }),\n\t\tuserType,\n\t};\n};\n\nconst parseFromIntOrStr = (value: string | number) => {\n\tif (typeof value === 'number') {\n\t\treturn value;\n\t}\n\treturn parseInt(value);\n};\n\nexport const updateDepartmentAgents = async (\n\tdepartmentId: string,\n\tagents: {\n\t\tupsert?: Pick<ILivechatDepartmentAgents, 'agentId' | 'count' | 'order'>[];\n\t\tremove?: Pick<ILivechatDepartmentAgents, 'agentId'>[];\n\t},\n\tdepartmentEnabled: boolean,\n) => {\n\tcheck(departmentId, String);\n\tcheck(agents, {\n\t\tupsert: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t\tremove: Match.Maybe([\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\tagentId: String,\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcount: Match.Maybe(Match.Integer),\n\t\t\t\torder: Match.Maybe(Match.Integer),\n\t\t\t}),\n\t\t]),\n\t});\n\n\tconst { upsert = [], remove = [] } = agents;\n\n\tconst agentsUpdated = [];\n\tconst agentsRemoved = remove.map(({ agentId }: { agentId: string }) => agentId);\n\tconst agentsAdded = [];\n\n\tif (agentsRemoved.length > 0) {\n\t\tconst removedIds = await LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsRemoved, departmentId, {\n\t\t\tprojection: { agentId: 1 },\n\t\t}).toArray();\n\n\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByIds(removedIds.map(({ _id }) => _id));\n\n\t\tif (deletedCount > 0) {\n\t\t\tremovedIds.forEach(({ _id, agentId }) => {\n\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t{\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tagentId,\n\t\t\t\t\t\tdepartmentId,\n\t\t\t\t\t},\n\t\t\t\t\t'removed',\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tcallbacks.runAsync('livechat.removeAgentDepartment', { departmentId, agentsId: agentsRemoved });\n\t}\n\n\tfor await (const agent of upsert) {\n\t\tconst agentFromDb = await Users.findOneById(agent.agentId, { projection: { _id: 1, username: 1 } });\n\t\tif (!agentFromDb) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst livechatDepartmentAgent = await LivechatDepartmentAgents.saveAgent({\n\t\t\tagentId: agent.agentId,\n\t\t\tdepartmentId,\n\t\t\tusername: agentFromDb.username || '',\n\t\t\tcount: agent.count ? parseFromIntOrStr(agent.count) : 0,\n\t\t\torder: agent.order ? parseFromIntOrStr(agent.order) : 0,\n\t\t\tdepartmentEnabled,\n\t\t});\n\n\t\tif (livechatDepartmentAgent.upsertedId) {\n\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t{\n\t\t\t\t\t_id: livechatDepartmentAgent.upsertedId as any,\n\t\t\t\t\tagentId: agent.agentId,\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t'inserted',\n\t\t\t);\n\t\t} else {\n\t\t\tagentsUpdated.push(agent.agentId);\n\t\t}\n\n\t\tagentsAdded.push(agent.agentId);\n\t}\n\n\tif (agentsAdded.length > 0) {\n\t\tcallbacks.runAsync('livechat.saveAgentDepartment', {\n\t\t\tdepartmentId,\n\t\t\tagentsId: agentsAdded,\n\t\t});\n\t}\n\n\tif (agentsUpdated.length > 0) {\n\t\tvoid notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId(agentsUpdated, departmentId);\n\t}\n\n\tif (agentsRemoved.length > 0 || agentsAdded.length > 0) {\n\t\tconst numAgents = await LivechatDepartmentAgents.countByDepartmentId(departmentId);\n\t\tawait LivechatDepartment.updateNumAgentsById(departmentId, numAgents);\n\t}\n\n\treturn true;\n};\n\nexport const validateEmail = (email: string) => {\n\tif (!validatorFunc(email)) {\n\t\tthrow new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {\n\t\t\tfunction: 'Livechat.validateEmail',\n\t\t\temail,\n\t\t});\n\t}\n\treturn true;\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8c50397169d3439cf3ac89c3acd860fae802672e"}
