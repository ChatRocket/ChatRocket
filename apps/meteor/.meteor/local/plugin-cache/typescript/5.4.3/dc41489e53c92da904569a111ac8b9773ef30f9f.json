{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/oembed/server/server.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/oembed/server/server.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/oembed/server/server.ts","inputSourceMap":{"version":3,"file":"app/oembed/server/server.ts","sourceRoot":"","sources":["app/oembed/server/server.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAC5D,OAAO,EAAE,WAAW,IAAI,KAAK,EAAE,MAAM,2BAA2B,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,KAAK,MAAM,YAAY,CAAC;AAC/B,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,KAAK,EAAE,MAAM,0BAA0B,CAAC;AACjD,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AAEnD,MAAM,yBAAyB,GAAG,CAAC,CAAC;AACpC,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;AACjC,mBAAmB;AACnB,aAAa;AACb,0GAA0G;AAC1G,qGAAqG;AACrG,MAAM,UAAU,GAAG,UAAU,WAAmB,EAAE,IAAY;IAC7D,IAAI,eAAe,CAAC;IACpB,IAAI,iBAAiB,CAAC;IACtB,IAAI,eAAe,CAAC;IACpB,IAAI,MAAM,CAAC;IAEX,WAAW,GAAG,WAAW,IAAI,EAAE,CAAC;IAEhC,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC1C,IAAI,QAAQ,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;QAC/B,eAAe,GAAG,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;IACnD,CAAC;IACD,MAAM,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACnD,IAAI,EAAE,EAAE,CAAC;QACR,iBAAiB,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IACD,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IAC/D,IAAI,EAAE,EAAE,CAAC;QACR,eAAe,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC;IACD,IAAI,eAAe,EAAE,CAAC;QACrB,IAAI,eAAe,KAAK,iBAAiB,EAAE,CAAC;YAC3C,MAAM,GAAG,iBAAiB,CAAC;QAC5B,CAAC;aAAM,IAAI,eAAe,KAAK,eAAe,EAAE,CAAC;YAChD,MAAM,GAAG,eAAe,CAAC;QAC1B,CAAC;IACF,CAAC;IACD,IAAI,CAAC,MAAM,EAAE,CAAC;QACb,MAAM,GAAG,iBAAiB,IAAI,eAAe,IAAI,eAAe,CAAC;IAClE,CAAC;IACD,OAAO,MAAM,IAAI,OAAO,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,UAAU,WAAmB,EAAE,IAAY;IACzD,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,KAAK,EAAE,MAAW,EAAE,aAAa,GAAG,CAAC,EAAmC,EAAE;IAC/F,MAAM,aAAa,GAAG,IAAI,GAAG,CAC5B,MAAM,CAAC,OAAO,CAAC;QACd,EAAE,EAAE,OAAO;QACX,IAAI,EAAE,OAAO;QACb,GAAG,EAAE,QAAQ;KACb,CAAC,CACF,CAAC;IAEF,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAS,uBAAuB,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IACvG,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC;QAChH,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAS,oBAAoB,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAEjG,mDAAmD;IACnD,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QAC7E,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACxC,CAAC;IAED,0DAA0D;IAC1D,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACpH,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,4BAA4B,EAAE;QAC9D,MAAM;KACN,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACnC,MAAM,SAAS,GAAG,MAAM,CAAC;IAEzB,GAAG,CAAC,KAAK,CAAC,YAAY,GAAG,wBAAwB,aAAa,QAAQ,CAAC,CAAC;IACxE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC3B,GAAG,EACH;QACC,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,aAAa;QACrB,OAAO,EAAE;YACR,YAAY,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,gBAAgB,IAAI,CAAC,OAAO,EAAE;YAClF,iBAAiB,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI;SACnD;QACD,IAAI,EAAE,SAAS,EAAE,sHAAsH;KACvI,EACD,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAC9C,CAAC;IAEF,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzC,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,KAAe,CAAC,CAAC;QAE7B,IAAI,SAAS,GAAG,SAAS,EAAE,CAAC;YAC3B,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,8BAA8B,EAAE,GAAG,EAAE,CAAC,CAAC;YACvD,MAAM;QACP,CAAC;IACF,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;IACrE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAErC,OAAO;QACN,OAAO,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC;QAC7C,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,YAAY,EAAE,MAAM,CAAC;QAC1E,UAAU,EAAE,QAAQ,CAAC,MAAM;KAC3B,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,KAAK,WAAW,GAAW;IAC3C,MAAM,eAAe,GAAe,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IACtD,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;QACjB,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IACnD,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,mBAAmB,CAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IACnD,CAAC;IAED,IAAI,uBAAuB,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QAChD,eAAe,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAC5D,IAAI,eAAe,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC;YACtC,eAAe,CAAC,IAAI,CAAC,UAAU,GAAG,0BAA0B,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACrG,CAAC;IACF,CAAC;IAED,SAAS,GAAG,IAAI,CAAC;IACjB,OAAO;QACN,UAAU,EAAE;YACX,GAAG,eAAe;YAClB,GAAG,CAAC,CAAC,eAAe,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI;gBAChD,OAAO,EAAE;oBACR,GAAG,eAAe,CAAC,OAAO;oBAC1B,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;oBACjF,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;iBAC3E;aACD,CAAC;SACF;QACD,SAAS;KACT,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,KAAK,WACvB,GAAW,EACX,YAAsB;IAEtB,GAAG,CAAC,KAAK,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAE5B,IAAI,YAAY,EAAE,CAAC;QAClB,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,IAAI,OAA2C,CAAC;IAChD,IAAI,CAAC;QACJ,OAAO,GAAG,MAAM,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,4BAA4B,EAAE,GAAG,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,IAAI,CAAC,OAAO,EAAE,CAAC;QACd,OAAO;IACR,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;IAC3C,MAAM,KAAK,GAA4B,EAAE,CAAC;IAE1C,IAAI,OAAO,EAAE,IAAI,EAAE,CAAC;QACnB,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,KAAa,EAAU,EAAE;YAC1D,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChD,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,iCAAiC,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACxE,OAAO,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gFAAgF,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAC7H,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gFAAgF,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YAC7H,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gFAAgF,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC7H,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,gFAAgF,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;YAC7H,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,QAAQ,KAAK,GAAG,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YACpD,OAAO,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,KAAK,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,MAAM,OAAO,GAA4B,EAAE,CAAC;IAE5C,IAAI,OAAO,EAAE,OAAO,EAAE,CAAC;QACtB,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACJ,CAAC;IACD,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,KAAK,GAAG,EAAE,CAAC;QAC3C,OAAO;IACR,CAAC;IACD,OAAO,SAAS,CAAC,GAAG,CAAC,0BAA0B,EAAE;QAChD,GAAG;QACH,IAAI,EAAE,KAAK;QACX,OAAO;QACP,OAAO;KACP,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,KAAK,WAChC,GAAW,EACX,YAAsB;IAEtB,GAAG,CAAC,KAAK,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;IAC9C,MAAM,KAAK,GAAG,MAAM,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAEjD,IAAI,KAAK,EAAE,CAAC;QACX,GAAG,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;QACrD,OAAO,KAAK,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAEjD,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO;IACR,CAAC;IAED,IAAI,CAAC;QACJ,GAAG,CAAC,KAAK,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC;QACtD,MAAM,WAAW,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAAC,OAAO,MAAM,EAAE,CAAC;QACjB,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,0BAA0B,EAAE,GAAG,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,UAAU,OAAmB;IACxD,MAAM,IAAI,GAA2B,EAAE,CAAC;IACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACpC,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,sEAAsE,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACpI,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACnB,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACb,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,0BAA0B,GAAG,CAAC,UAAmB,EAAsB,EAAE,CAC9E,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,yDAAyD,CAAC,CAAC;AAE1F,MAAM,eAAe,GAAG,KAAK,WAAW,OAAiB;IACxD,GAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAElC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;QAClC,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAE7C,IACC,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QACvD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,yBAAyB,EAC7G,CAAC;QACF,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,WAAW,GAAwB,EAAE,CAAC;IAE5C,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE,CAAC;YAC/B,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,SAAS;QACV,CAAC;QAED,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACjD,OAAO,GAAG,OAAO,IAAI,SAAS,CAAC;IAChC,CAAC;IAED,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;QACxB,MAAM,QAAQ,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;IAED,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;QACtB,MAAM,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,OAAO,OAAO,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,MAAM,GAKR;IACH,eAAe;IACf,mBAAmB;IACnB,UAAU;IACV,QAAQ;CACR,CAAC;AAEF,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;IACrC,IAAI,KAAK,EAAE,CAAC;QACX,OAAO,SAAS,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC7H,CAAC;IACD,OAAO,SAAS,CAAC,MAAM,CAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,MAAM,EAAE,CAAC","sourcesContent":["import type {\n\tOEmbedUrlContentResult,\n\tOEmbedUrlWithMetadata,\n\tIMessage,\n\tMessageAttachment,\n\tOEmbedMeta,\n\tMessageUrl,\n} from '@rocket.chat/core-typings';\nimport { isOEmbedUrlWithMetadata } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, OEmbedCache } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { camelCase } from 'change-case';\nimport he from 'he';\nimport iconv from 'iconv-lite';\nimport ipRangeCheck from 'ip-range-check';\nimport jschardet from 'jschardet';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isURL } from '../../../lib/utils/isURL';\nimport { settings } from '../../settings/server';\nimport { Info } from '../../utils/rocketchat.info';\n\nconst MAX_EXTERNAL_URL_PREVIEWS = 5;\nconst log = new Logger('OEmbed');\n//  Detect encoding\n//  Priority:\n//  Detected == HTTP Header > Detected == HTML meta > HTTP Header > HTML meta > Detected > Default (utf-8)\n//  See also: https://www.w3.org/International/questions/qa-html-encoding-declarations.en#quickanswer\nconst getCharset = function (contentType: string, body: Buffer): string {\n\tlet detectedCharset;\n\tlet httpHeaderCharset;\n\tlet htmlMetaCharset;\n\tlet result;\n\n\tcontentType = contentType || '';\n\n\tconst binary = body.toString('binary');\n\tconst detected = jschardet.detect(binary);\n\tif (detected.confidence > 0.8) {\n\t\tdetectedCharset = detected.encoding.toLowerCase();\n\t}\n\tconst m1 = contentType.match(/charset=([\\w\\-]+)/i);\n\tif (m1) {\n\t\thttpHeaderCharset = m1[1].toLowerCase();\n\t}\n\tconst m2 = binary.match(/<meta\\b[^>]*charset=[\"']?([\\w\\-]+)/i);\n\tif (m2) {\n\t\thtmlMetaCharset = m2[1].toLowerCase();\n\t}\n\tif (detectedCharset) {\n\t\tif (detectedCharset === httpHeaderCharset) {\n\t\t\tresult = httpHeaderCharset;\n\t\t} else if (detectedCharset === htmlMetaCharset) {\n\t\t\tresult = htmlMetaCharset;\n\t\t}\n\t}\n\tif (!result) {\n\t\tresult = httpHeaderCharset || htmlMetaCharset || detectedCharset;\n\t}\n\treturn result || 'utf-8';\n};\n\nconst toUtf8 = function (contentType: string, body: Buffer): string {\n\treturn iconv.decode(body, getCharset(contentType, body));\n};\n\nconst getUrlContent = async (urlObj: URL, redirectCount = 5): Promise<OEmbedUrlContentResult> => {\n\tconst portsProtocol = new Map<string, string>(\n\t\tObject.entries({\n\t\t\t80: 'http:',\n\t\t\t8080: 'http:',\n\t\t\t443: 'https:',\n\t\t}),\n\t);\n\n\tconst ignoredHosts = settings.get<string>('API_EmbedIgnoredHosts').replace(/\\s/g, '').split(',') || [];\n\tif (urlObj.hostname && (ignoredHosts.includes(urlObj.hostname) || ipRangeCheck(urlObj.hostname, ignoredHosts))) {\n\t\tthrow new Error('invalid host');\n\t}\n\n\tconst safePorts = settings.get<string>('API_EmbedSafePorts').replace(/\\s/g, '').split(',') || [];\n\n\t// checks if the URL port is in the safe ports list\n\tif (safePorts.length > 0 && urlObj.port && !safePorts.includes(urlObj.port)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\t// if port is not detected, use protocol to verify instead\n\tif (safePorts.length > 0 && !urlObj.port && !safePorts.some((port) => portsProtocol.get(port) === urlObj.protocol)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\tconst data = await callbacks.run('oembed:beforeGetUrlContent', {\n\t\turlObj,\n\t});\n\n\tconst url = data.urlObj.toString();\n\tconst sizeLimit = 250000;\n\n\tlog.debug(`Fetching ${url} following redirects ${redirectCount} times`);\n\tconst response = await fetch(\n\t\turl,\n\t\t{\n\t\t\tcompress: true,\n\t\t\tfollow: redirectCount,\n\t\t\theaders: {\n\t\t\t\t'User-Agent': `${settings.get('API_Embed_UserAgent')} Rocket.Chat/${Info.version}`,\n\t\t\t\t'Accept-Language': settings.get('Language') || 'en',\n\t\t\t},\n\t\t\tsize: sizeLimit, // max size of the response body, this was not working as expected so I'm also manually verifying that on the iterator\n\t\t},\n\t\tsettings.get('Allow_Invalid_SelfSigned_Certs'),\n\t);\n\n\tlet totalSize = 0;\n\tconst chunks = [];\n\tfor await (const chunk of response.body) {\n\t\ttotalSize += chunk.length;\n\t\tchunks.push(chunk as Buffer);\n\n\t\tif (totalSize > sizeLimit) {\n\t\t\tlog.warn({ msg: 'OEmbed request size exceeded', url });\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlog.debug('Obtained response from server with length of', totalSize);\n\tconst buffer = Buffer.concat(chunks);\n\n\treturn {\n\t\theaders: Object.fromEntries(response.headers),\n\t\tbody: toUtf8(response.headers.get('content-type') || 'text/plain', buffer),\n\t\tstatusCode: response.status,\n\t};\n};\n\nconst parseUrl = async function (url: string): Promise<{ urlPreview: MessageUrl; foundMeta: boolean }> {\n\tconst parsedUrlObject: MessageUrl = { url, meta: {} };\n\tlet foundMeta = false;\n\tif (!isURL(url)) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tconst data = await getUrlMetaWithCache(url);\n\tif (!data) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tif (isOEmbedUrlWithMetadata(data) && data.meta) {\n\t\tparsedUrlObject.meta = getRelevantMetaTags(data.meta) || {};\n\t\tif (parsedUrlObject.meta?.oembedHtml) {\n\t\t\tparsedUrlObject.meta.oembedHtml = insertMaxWidthInOembedHtml(parsedUrlObject.meta.oembedHtml) || '';\n\t\t}\n\t}\n\n\tfoundMeta = true;\n\treturn {\n\t\turlPreview: {\n\t\t\t...parsedUrlObject,\n\t\t\t...((parsedUrlObject.headers || data.headers) && {\n\t\t\t\theaders: {\n\t\t\t\t\t...parsedUrlObject.headers,\n\t\t\t\t\t...(data.headers?.contentLength && { contentLength: data.headers.contentLength }),\n\t\t\t\t\t...(data.headers?.contentType && { contentType: data.headers.contentType }),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\tfoundMeta,\n\t};\n};\n\nconst getUrlMeta = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined> {\n\tlog.debug('Obtaining metadata for URL', url);\n\tconst urlObj = new URL(url);\n\n\tif (withFragment) {\n\t\turlObj.searchParams.set('_escaped_fragment_', '');\n\t}\n\n\tlog.debug('Fetching url content', urlObj.toString());\n\tlet content: OEmbedUrlContentResult | undefined;\n\ttry {\n\t\tcontent = await getUrlContent(urlObj, 5);\n\t} catch (err) {\n\t\tlog.error({ msg: 'Error fetching url content', err });\n\t}\n\n\tif (!content) {\n\t\treturn;\n\t}\n\n\tlog.debug('Parsing metadata for URL', url);\n\tconst metas: { [k: string]: string } = {};\n\n\tif (content?.body) {\n\t\tconst escapeMeta = (name: string, value: string): string => {\n\t\t\tmetas[name] = metas[name] || he.unescape(value);\n\t\t\treturn metas[name];\n\t\t};\n\t\tcontent.body.replace(/<title[^>]*>([^<]*)<\\/title>/gim, (_meta, title) => {\n\t\t\treturn escapeMeta('pageTitle', title);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[']([^']*)['][^>]*\\scontent=[']([^']*)['][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*\\scontent=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[']([^']*)['][^>]*(?:name|property)=[']([^']*)['][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[\"]([^\"]*)[\"][^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tif (metas.fragment === '!' && withFragment == null) {\n\t\t\treturn getUrlMeta(url, true);\n\t\t}\n\t\tdelete metas.oembedHtml;\n\t}\n\tconst headers: { [k: string]: string } = {};\n\n\tif (content?.headers) {\n\t\tconst headerObj = content.headers;\n\t\tObject.keys(headerObj).forEach((header) => {\n\t\t\theaders[camelCase(header)] = headerObj[header];\n\t\t});\n\t}\n\tif (content && content.statusCode !== 200) {\n\t\treturn;\n\t}\n\treturn callbacks.run('oembed:afterParseContent', {\n\t\turl,\n\t\tmeta: metas,\n\t\theaders,\n\t\tcontent,\n\t});\n};\n\nconst getUrlMetaWithCache = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult> {\n\tlog.debug('Getting oembed metadata for', url);\n\tconst cache = await OEmbedCache.findOneById(url);\n\n\tif (cache) {\n\t\tlog.debug('Found oembed metadata in cache for', url);\n\t\treturn cache.data;\n\t}\n\n\tconst data = await getUrlMeta(url, withFragment);\n\n\tif (!data) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlog.debug('Saving oembed metadata in cache for', url);\n\t\tawait OEmbedCache.createWithIdAndData(url, data);\n\t} catch (_error) {\n\t\tlog.error({ msg: 'OEmbed duplicated record', url });\n\t}\n\n\treturn data;\n};\n\nconst getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\n\tconst tags: Record<string, string> = {};\n\tObject.keys(metaObj).forEach((key) => {\n\t\tconst value = metaObj[key];\n\t\tif (/^(og|fb|twitter|oembed|msapplication).+|description|title|pageTitle$/.test(key.toLowerCase()) && value && value.trim() !== '') {\n\t\t\ttags[key] = value;\n\t\t}\n\t});\n\n\tif (Object.keys(tags).length > 0) {\n\t\treturn tags;\n\t}\n};\n\nconst insertMaxWidthInOembedHtml = (oembedHtml?: string): string | undefined =>\n\toembedHtml?.replace('iframe', 'iframe style=\"max-width: 100%;width:400px;height:225px\"');\n\nconst rocketUrlParser = async function (message: IMessage): Promise<IMessage> {\n\tlog.debug('Parsing message URLs');\n\n\tif (!Array.isArray(message.urls)) {\n\t\treturn message;\n\t}\n\n\tlog.debug('URLs found', message.urls.length);\n\n\tif (\n\t\t(message.attachments && message.attachments.length > 0) ||\n\t\tmessage.urls.filter((item) => !item.url.includes(settings.get('Site_Url'))).length > MAX_EXTERNAL_URL_PREVIEWS\n\t) {\n\t\tlog.debug('All URL ignored');\n\t\treturn message;\n\t}\n\n\tconst attachments: MessageAttachment[] = [];\n\n\tlet changed = false;\n\tfor await (const item of message.urls) {\n\t\tif (item.ignoreParse === true) {\n\t\t\tlog.debug('URL ignored', item.url);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { urlPreview, foundMeta } = await parseUrl(item.url);\n\n\t\tObject.assign(item, foundMeta ? urlPreview : {});\n\t\tchanged = changed || foundMeta;\n\t}\n\n\tif (attachments.length) {\n\t\tawait Messages.setMessageAttachments(message._id, attachments);\n\t}\n\n\tif (changed === true) {\n\t\tawait Messages.setUrlsById(message._id, message.urls);\n\t}\n\n\treturn message;\n};\n\nconst OEmbed: {\n\tgetUrlMeta: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult>;\n\tgetUrlMetaWithCache: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined>;\n\trocketUrlParser: (message: IMessage) => Promise<IMessage>;\n\tparseUrl: (url: string) => Promise<{ urlPreview: MessageUrl; foundMeta: boolean }>;\n} = {\n\trocketUrlParser,\n\tgetUrlMetaWithCache,\n\tgetUrlMeta,\n\tparseUrl,\n};\n\nsettings.watch('API_Embed', (value) => {\n\tif (value) {\n\t\treturn callbacks.add('afterSaveMessage', (message) => OEmbed.rocketUrlParser(message), callbacks.priority.LOW, 'API_Embed');\n\t}\n\treturn callbacks.remove('afterSaveMessage', 'API_Embed');\n});\n\nexport { OEmbed };\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/oembed/server/server.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/oembed/server/server.ts","inputSourceMap":{"version":3,"file":"app/oembed/server/server.ts","sourceRoot":"","sources":["app/oembed/server/server.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tOEmbedUrlContentResult,\n\tOEmbedUrlWithMetadata,\n\tIMessage,\n\tMessageAttachment,\n\tOEmbedMeta,\n\tMessageUrl,\n} from '@rocket.chat/core-typings';\nimport { isOEmbedUrlWithMetadata } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, OEmbedCache } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { camelCase } from 'change-case';\nimport he from 'he';\nimport iconv from 'iconv-lite';\nimport ipRangeCheck from 'ip-range-check';\nimport jschardet from 'jschardet';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isURL } from '../../../lib/utils/isURL';\nimport { settings } from '../../settings/server';\nimport { Info } from '../../utils/rocketchat.info';\n\nconst MAX_EXTERNAL_URL_PREVIEWS = 5;\nconst log = new Logger('OEmbed');\n//  Detect encoding\n//  Priority:\n//  Detected == HTTP Header > Detected == HTML meta > HTTP Header > HTML meta > Detected > Default (utf-8)\n//  See also: https://www.w3.org/International/questions/qa-html-encoding-declarations.en#quickanswer\nconst getCharset = function (contentType: string, body: Buffer): string {\n\tlet detectedCharset;\n\tlet httpHeaderCharset;\n\tlet htmlMetaCharset;\n\tlet result;\n\n\tcontentType = contentType || '';\n\n\tconst binary = body.toString('binary');\n\tconst detected = jschardet.detect(binary);\n\tif (detected.confidence > 0.8) {\n\t\tdetectedCharset = detected.encoding.toLowerCase();\n\t}\n\tconst m1 = contentType.match(/charset=([\\w\\-]+)/i);\n\tif (m1) {\n\t\thttpHeaderCharset = m1[1].toLowerCase();\n\t}\n\tconst m2 = binary.match(/<meta\\b[^>]*charset=[\"']?([\\w\\-]+)/i);\n\tif (m2) {\n\t\thtmlMetaCharset = m2[1].toLowerCase();\n\t}\n\tif (detectedCharset) {\n\t\tif (detectedCharset === httpHeaderCharset) {\n\t\t\tresult = httpHeaderCharset;\n\t\t} else if (detectedCharset === htmlMetaCharset) {\n\t\t\tresult = htmlMetaCharset;\n\t\t}\n\t}\n\tif (!result) {\n\t\tresult = httpHeaderCharset || htmlMetaCharset || detectedCharset;\n\t}\n\treturn result || 'utf-8';\n};\n\nconst toUtf8 = function (contentType: string, body: Buffer): string {\n\treturn iconv.decode(body, getCharset(contentType, body));\n};\n\nconst getUrlContent = async (urlObj: URL, redirectCount = 5): Promise<OEmbedUrlContentResult> => {\n\tconst portsProtocol = new Map<string, string>(\n\t\tObject.entries({\n\t\t\t80: 'http:',\n\t\t\t8080: 'http:',\n\t\t\t443: 'https:',\n\t\t}),\n\t);\n\n\tconst ignoredHosts = settings.get<string>('API_EmbedIgnoredHosts').replace(/\\s/g, '').split(',') || [];\n\tif (urlObj.hostname && (ignoredHosts.includes(urlObj.hostname) || ipRangeCheck(urlObj.hostname, ignoredHosts))) {\n\t\tthrow new Error('invalid host');\n\t}\n\n\tconst safePorts = settings.get<string>('API_EmbedSafePorts').replace(/\\s/g, '').split(',') || [];\n\n\t// checks if the URL port is in the safe ports list\n\tif (safePorts.length > 0 && urlObj.port && !safePorts.includes(urlObj.port)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\t// if port is not detected, use protocol to verify instead\n\tif (safePorts.length > 0 && !urlObj.port && !safePorts.some((port) => portsProtocol.get(port) === urlObj.protocol)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\tconst data = await callbacks.run('oembed:beforeGetUrlContent', {\n\t\turlObj,\n\t});\n\n\tconst url = data.urlObj.toString();\n\tconst sizeLimit = 250000;\n\n\tlog.debug(`Fetching ${url} following redirects ${redirectCount} times`);\n\tconst response = await fetch(\n\t\turl,\n\t\t{\n\t\t\tcompress: true,\n\t\t\tfollow: redirectCount,\n\t\t\theaders: {\n\t\t\t\t'User-Agent': `${settings.get('API_Embed_UserAgent')} Rocket.Chat/${Info.version}`,\n\t\t\t\t'Accept-Language': settings.get('Language') || 'en',\n\t\t\t},\n\t\t\tsize: sizeLimit, // max size of the response body, this was not working as expected so I'm also manually verifying that on the iterator\n\t\t},\n\t\tsettings.get('Allow_Invalid_SelfSigned_Certs'),\n\t);\n\n\tlet totalSize = 0;\n\tconst chunks = [];\n\tfor await (const chunk of response.body) {\n\t\ttotalSize += chunk.length;\n\t\tchunks.push(chunk as Buffer);\n\n\t\tif (totalSize > sizeLimit) {\n\t\t\tlog.warn({ msg: 'OEmbed request size exceeded', url });\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlog.debug('Obtained response from server with length of', totalSize);\n\tconst buffer = Buffer.concat(chunks);\n\n\treturn {\n\t\theaders: Object.fromEntries(response.headers),\n\t\tbody: toUtf8(response.headers.get('content-type') || 'text/plain', buffer),\n\t\tstatusCode: response.status,\n\t};\n};\n\nconst parseUrl = async function (url: string): Promise<{ urlPreview: MessageUrl; foundMeta: boolean }> {\n\tconst parsedUrlObject: MessageUrl = { url, meta: {} };\n\tlet foundMeta = false;\n\tif (!isURL(url)) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tconst data = await getUrlMetaWithCache(url);\n\tif (!data) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tif (isOEmbedUrlWithMetadata(data) && data.meta) {\n\t\tparsedUrlObject.meta = getRelevantMetaTags(data.meta) || {};\n\t\tif (parsedUrlObject.meta?.oembedHtml) {\n\t\t\tparsedUrlObject.meta.oembedHtml = insertMaxWidthInOembedHtml(parsedUrlObject.meta.oembedHtml) || '';\n\t\t}\n\t}\n\n\tfoundMeta = true;\n\treturn {\n\t\turlPreview: {\n\t\t\t...parsedUrlObject,\n\t\t\t...((parsedUrlObject.headers || data.headers) && {\n\t\t\t\theaders: {\n\t\t\t\t\t...parsedUrlObject.headers,\n\t\t\t\t\t...(data.headers?.contentLength && { contentLength: data.headers.contentLength }),\n\t\t\t\t\t...(data.headers?.contentType && { contentType: data.headers.contentType }),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\tfoundMeta,\n\t};\n};\n\nconst getUrlMeta = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined> {\n\tlog.debug('Obtaining metadata for URL', url);\n\tconst urlObj = new URL(url);\n\n\tif (withFragment) {\n\t\turlObj.searchParams.set('_escaped_fragment_', '');\n\t}\n\n\tlog.debug('Fetching url content', urlObj.toString());\n\tlet content: OEmbedUrlContentResult | undefined;\n\ttry {\n\t\tcontent = await getUrlContent(urlObj, 5);\n\t} catch (err) {\n\t\tlog.error({ msg: 'Error fetching url content', err });\n\t}\n\n\tif (!content) {\n\t\treturn;\n\t}\n\n\tlog.debug('Parsing metadata for URL', url);\n\tconst metas: { [k: string]: string } = {};\n\n\tif (content?.body) {\n\t\tconst escapeMeta = (name: string, value: string): string => {\n\t\t\tmetas[name] = metas[name] || he.unescape(value);\n\t\t\treturn metas[name];\n\t\t};\n\t\tcontent.body.replace(/<title[^>]*>([^<]*)<\\/title>/gim, (_meta, title) => {\n\t\t\treturn escapeMeta('pageTitle', title);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[']([^']*)['][^>]*\\scontent=[']([^']*)['][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*\\scontent=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[']([^']*)['][^>]*(?:name|property)=[']([^']*)['][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[\"]([^\"]*)[\"][^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tif (metas.fragment === '!' && withFragment == null) {\n\t\t\treturn getUrlMeta(url, true);\n\t\t}\n\t\tdelete metas.oembedHtml;\n\t}\n\tconst headers: { [k: string]: string } = {};\n\n\tif (content?.headers) {\n\t\tconst headerObj = content.headers;\n\t\tObject.keys(headerObj).forEach((header) => {\n\t\t\theaders[camelCase(header)] = headerObj[header];\n\t\t});\n\t}\n\tif (content && content.statusCode !== 200) {\n\t\treturn;\n\t}\n\treturn callbacks.run('oembed:afterParseContent', {\n\t\turl,\n\t\tmeta: metas,\n\t\theaders,\n\t\tcontent,\n\t});\n};\n\nconst getUrlMetaWithCache = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult> {\n\tlog.debug('Getting oembed metadata for', url);\n\tconst cache = await OEmbedCache.findOneById(url);\n\n\tif (cache) {\n\t\tlog.debug('Found oembed metadata in cache for', url);\n\t\treturn cache.data;\n\t}\n\n\tconst data = await getUrlMeta(url, withFragment);\n\n\tif (!data) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlog.debug('Saving oembed metadata in cache for', url);\n\t\tawait OEmbedCache.createWithIdAndData(url, data);\n\t} catch (_error) {\n\t\tlog.error({ msg: 'OEmbed duplicated record', url });\n\t}\n\n\treturn data;\n};\n\nconst getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\n\tconst tags: Record<string, string> = {};\n\tObject.keys(metaObj).forEach((key) => {\n\t\tconst value = metaObj[key];\n\t\tif (/^(og|fb|twitter|oembed|msapplication).+|description|title|pageTitle$/.test(key.toLowerCase()) && value && value.trim() !== '') {\n\t\t\ttags[key] = value;\n\t\t}\n\t});\n\n\tif (Object.keys(tags).length > 0) {\n\t\treturn tags;\n\t}\n};\n\nconst insertMaxWidthInOembedHtml = (oembedHtml?: string): string | undefined =>\n\toembedHtml?.replace('iframe', 'iframe style=\"max-width: 100%;width:400px;height:225px\"');\n\nconst rocketUrlParser = async function (message: IMessage): Promise<IMessage> {\n\tlog.debug('Parsing message URLs');\n\n\tif (!Array.isArray(message.urls)) {\n\t\treturn message;\n\t}\n\n\tlog.debug('URLs found', message.urls.length);\n\n\tif (\n\t\t(message.attachments && message.attachments.length > 0) ||\n\t\tmessage.urls.filter((item) => !item.url.includes(settings.get('Site_Url'))).length > MAX_EXTERNAL_URL_PREVIEWS\n\t) {\n\t\tlog.debug('All URL ignored');\n\t\treturn message;\n\t}\n\n\tconst attachments: MessageAttachment[] = [];\n\n\tlet changed = false;\n\tfor await (const item of message.urls) {\n\t\tif (item.ignoreParse === true) {\n\t\t\tlog.debug('URL ignored', item.url);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { urlPreview, foundMeta } = await parseUrl(item.url);\n\n\t\tObject.assign(item, foundMeta ? urlPreview : {});\n\t\tchanged = changed || foundMeta;\n\t}\n\n\tif (attachments.length) {\n\t\tawait Messages.setMessageAttachments(message._id, attachments);\n\t}\n\n\tif (changed === true) {\n\t\tawait Messages.setUrlsById(message._id, message.urls);\n\t}\n\n\treturn message;\n};\n\nconst OEmbed: {\n\tgetUrlMeta: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult>;\n\tgetUrlMetaWithCache: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined>;\n\trocketUrlParser: (message: IMessage) => Promise<IMessage>;\n\tparseUrl: (url: string) => Promise<{ urlPreview: MessageUrl; foundMeta: boolean }>;\n} = {\n\trocketUrlParser,\n\tgetUrlMetaWithCache,\n\tgetUrlMeta,\n\tparseUrl,\n};\n\nsettings.watch('API_Embed', (value) => {\n\tif (value) {\n\t\treturn callbacks.add('afterSaveMessage', (message) => OEmbed.rocketUrlParser(message), callbacks.priority.LOW, 'API_Embed');\n\t}\n\treturn callbacks.remove('afterSaveMessage', 'API_Embed');\n});\n\nexport { OEmbed };\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      OEmbed: () => OEmbed\n    });\n    let isOEmbedUrlWithMetadata;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOEmbedUrlWithMetadata(v) {\n        isOEmbedUrlWithMetadata = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let Messages, OEmbedCache;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      OEmbedCache(v) {\n        OEmbedCache = v;\n      }\n    }, 2);\n    let fetch;\n    module.link(\"@rocket.chat/server-fetch\", {\n      serverFetch(v) {\n        fetch = v;\n      }\n    }, 3);\n    let camelCase;\n    module.link(\"change-case\", {\n      camelCase(v) {\n        camelCase = v;\n      }\n    }, 4);\n    let he;\n    module.link(\"he\", {\n      default(v) {\n        he = v;\n      }\n    }, 5);\n    let iconv;\n    module.link(\"iconv-lite\", {\n      default(v) {\n        iconv = v;\n      }\n    }, 6);\n    let ipRangeCheck;\n    module.link(\"ip-range-check\", {\n      default(v) {\n        ipRangeCheck = v;\n      }\n    }, 7);\n    let jschardet;\n    module.link(\"jschardet\", {\n      default(v) {\n        jschardet = v;\n      }\n    }, 8);\n    let callbacks;\n    module.link(\"../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 9);\n    let isURL;\n    module.link(\"../../../lib/utils/isURL\", {\n      isURL(v) {\n        isURL = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let Info;\n    module.link(\"../../utils/rocketchat.info\", {\n      Info(v) {\n        Info = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const MAX_EXTERNAL_URL_PREVIEWS = 5;\n    const log = new Logger('OEmbed');\n    //  Detect encoding\n    //  Priority:\n    //  Detected == HTTP Header > Detected == HTML meta > HTTP Header > HTML meta > Detected > Default (utf-8)\n    //  See also: https://www.w3.org/International/questions/qa-html-encoding-declarations.en#quickanswer\n    const getCharset = function (contentType, body) {\n      let detectedCharset;\n      let httpHeaderCharset;\n      let htmlMetaCharset;\n      let result;\n      contentType = contentType || '';\n      const binary = body.toString('binary');\n      const detected = jschardet.detect(binary);\n      if (detected.confidence > 0.8) {\n        detectedCharset = detected.encoding.toLowerCase();\n      }\n      const m1 = contentType.match(/charset=([\\w\\-]+)/i);\n      if (m1) {\n        httpHeaderCharset = m1[1].toLowerCase();\n      }\n      const m2 = binary.match(/<meta\\b[^>]*charset=[\"']?([\\w\\-]+)/i);\n      if (m2) {\n        htmlMetaCharset = m2[1].toLowerCase();\n      }\n      if (detectedCharset) {\n        if (detectedCharset === httpHeaderCharset) {\n          result = httpHeaderCharset;\n        } else if (detectedCharset === htmlMetaCharset) {\n          result = htmlMetaCharset;\n        }\n      }\n      if (!result) {\n        result = httpHeaderCharset || htmlMetaCharset || detectedCharset;\n      }\n      return result || 'utf-8';\n    };\n    const toUtf8 = function (contentType, body) {\n      return iconv.decode(body, getCharset(contentType, body));\n    };\n    const getUrlContent = async function (urlObj) {\n      let redirectCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n      const portsProtocol = new Map(Object.entries({\n        80: 'http:',\n        8080: 'http:',\n        443: 'https:'\n      }));\n      const ignoredHosts = settings.get('API_EmbedIgnoredHosts').replace(/\\s/g, '').split(',') || [];\n      if (urlObj.hostname && (ignoredHosts.includes(urlObj.hostname) || ipRangeCheck(urlObj.hostname, ignoredHosts))) {\n        throw new Error('invalid host');\n      }\n      const safePorts = settings.get('API_EmbedSafePorts').replace(/\\s/g, '').split(',') || [];\n      // checks if the URL port is in the safe ports list\n      if (safePorts.length > 0 && urlObj.port && !safePorts.includes(urlObj.port)) {\n        throw new Error('invalid/unsafe port');\n      }\n      // if port is not detected, use protocol to verify instead\n      if (safePorts.length > 0 && !urlObj.port && !safePorts.some(port => portsProtocol.get(port) === urlObj.protocol)) {\n        throw new Error('invalid/unsafe port');\n      }\n      const data = await callbacks.run('oembed:beforeGetUrlContent', {\n        urlObj\n      });\n      const url = data.urlObj.toString();\n      const sizeLimit = 250000;\n      log.debug(\"Fetching \".concat(url, \" following redirects \").concat(redirectCount, \" times\"));\n      const response = await fetch(url, {\n        compress: true,\n        follow: redirectCount,\n        headers: {\n          'User-Agent': \"\".concat(settings.get('API_Embed_UserAgent'), \" Rocket.Chat/\").concat(Info.version),\n          'Accept-Language': settings.get('Language') || 'en'\n        },\n        size: sizeLimit // max size of the response body, this was not working as expected so I'm also manually verifying that on the iterator\n      }, settings.get('Allow_Invalid_SelfSigned_Certs'));\n      let totalSize = 0;\n      const chunks = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(response.body), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const chunk = _step.value;\n          {\n            totalSize += chunk.length;\n            chunks.push(chunk);\n            if (totalSize > sizeLimit) {\n              log.warn({\n                msg: 'OEmbed request size exceeded',\n                url\n              });\n              break;\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      log.debug('Obtained response from server with length of', totalSize);\n      const buffer = Buffer.concat(chunks);\n      return {\n        headers: Object.fromEntries(response.headers),\n        body: toUtf8(response.headers.get('content-type') || 'text/plain', buffer),\n        statusCode: response.status\n      };\n    };\n    const parseUrl = async function (url) {\n      var _data$headers, _data$headers2;\n      const parsedUrlObject = {\n        url,\n        meta: {}\n      };\n      let foundMeta = false;\n      if (!isURL(url)) {\n        return {\n          urlPreview: parsedUrlObject,\n          foundMeta\n        };\n      }\n      const data = await getUrlMetaWithCache(url);\n      if (!data) {\n        return {\n          urlPreview: parsedUrlObject,\n          foundMeta\n        };\n      }\n      if (isOEmbedUrlWithMetadata(data) && data.meta) {\n        var _parsedUrlObject$meta;\n        parsedUrlObject.meta = getRelevantMetaTags(data.meta) || {};\n        if ((_parsedUrlObject$meta = parsedUrlObject.meta) !== null && _parsedUrlObject$meta !== void 0 && _parsedUrlObject$meta.oembedHtml) {\n          parsedUrlObject.meta.oembedHtml = insertMaxWidthInOembedHtml(parsedUrlObject.meta.oembedHtml) || '';\n        }\n      }\n      foundMeta = true;\n      return {\n        urlPreview: _objectSpread(_objectSpread({}, parsedUrlObject), (parsedUrlObject.headers || data.headers) && {\n          headers: _objectSpread(_objectSpread(_objectSpread({}, parsedUrlObject.headers), ((_data$headers = data.headers) === null || _data$headers === void 0 ? void 0 : _data$headers.contentLength) && {\n            contentLength: data.headers.contentLength\n          }), ((_data$headers2 = data.headers) === null || _data$headers2 === void 0 ? void 0 : _data$headers2.contentType) && {\n            contentType: data.headers.contentType\n          })\n        }),\n        foundMeta\n      };\n    };\n    const getUrlMeta = async function (url, withFragment) {\n      var _content, _content2;\n      log.debug('Obtaining metadata for URL', url);\n      const urlObj = new URL(url);\n      if (withFragment) {\n        urlObj.searchParams.set('_escaped_fragment_', '');\n      }\n      log.debug('Fetching url content', urlObj.toString());\n      let content;\n      try {\n        content = await getUrlContent(urlObj, 5);\n      } catch (err) {\n        log.error({\n          msg: 'Error fetching url content',\n          err\n        });\n      }\n      if (!content) {\n        return;\n      }\n      log.debug('Parsing metadata for URL', url);\n      const metas = {};\n      if ((_content = content) !== null && _content !== void 0 && _content.body) {\n        const escapeMeta = (name, value) => {\n          metas[name] = metas[name] || he.unescape(value);\n          return metas[name];\n        };\n        content.body.replace(/<title[^>]*>([^<]*)<\\/title>/gim, (_meta, title) => {\n          return escapeMeta('pageTitle', title);\n        });\n        content.body.replace(/<meta[^>]*(?:name|property)=[']([^']*)['][^>]*\\scontent=[']([^']*)['][^>]*>/gim, (_meta, name, value) => {\n          return escapeMeta(camelCase(name), value);\n        });\n        content.body.replace(/<meta[^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*\\scontent=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, name, value) => {\n          return escapeMeta(camelCase(name), value);\n        });\n        content.body.replace(/<meta[^>]*\\scontent=[']([^']*)['][^>]*(?:name|property)=[']([^']*)['][^>]*>/gim, (_meta, value, name) => {\n          return escapeMeta(camelCase(name), value);\n        });\n        content.body.replace(/<meta[^>]*\\scontent=[\"]([^\"]*)[\"][^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, value, name) => {\n          return escapeMeta(camelCase(name), value);\n        });\n        if (metas.fragment === '!' && withFragment == null) {\n          return getUrlMeta(url, true);\n        }\n        delete metas.oembedHtml;\n      }\n      const headers = {};\n      if ((_content2 = content) !== null && _content2 !== void 0 && _content2.headers) {\n        const headerObj = content.headers;\n        Object.keys(headerObj).forEach(header => {\n          headers[camelCase(header)] = headerObj[header];\n        });\n      }\n      if (content && content.statusCode !== 200) {\n        return;\n      }\n      return callbacks.run('oembed:afterParseContent', {\n        url,\n        meta: metas,\n        headers,\n        content\n      });\n    };\n    const getUrlMetaWithCache = async function (url, withFragment) {\n      log.debug('Getting oembed metadata for', url);\n      const cache = await OEmbedCache.findOneById(url);\n      if (cache) {\n        log.debug('Found oembed metadata in cache for', url);\n        return cache.data;\n      }\n      const data = await getUrlMeta(url, withFragment);\n      if (!data) {\n        return;\n      }\n      try {\n        log.debug('Saving oembed metadata in cache for', url);\n        await OEmbedCache.createWithIdAndData(url, data);\n      } catch (_error) {\n        log.error({\n          msg: 'OEmbed duplicated record',\n          url\n        });\n      }\n      return data;\n    };\n    const getRelevantMetaTags = function (metaObj) {\n      const tags = {};\n      Object.keys(metaObj).forEach(key => {\n        const value = metaObj[key];\n        if (/^(og|fb|twitter|oembed|msapplication).+|description|title|pageTitle$/.test(key.toLowerCase()) && value && value.trim() !== '') {\n          tags[key] = value;\n        }\n      });\n      if (Object.keys(tags).length > 0) {\n        return tags;\n      }\n    };\n    const insertMaxWidthInOembedHtml = oembedHtml => oembedHtml === null || oembedHtml === void 0 ? void 0 : oembedHtml.replace('iframe', 'iframe style=\"max-width: 100%;width:400px;height:225px\"');\n    const rocketUrlParser = async function (message) {\n      log.debug('Parsing message URLs');\n      if (!Array.isArray(message.urls)) {\n        return message;\n      }\n      log.debug('URLs found', message.urls.length);\n      if (message.attachments && message.attachments.length > 0 || message.urls.filter(item => !item.url.includes(settings.get('Site_Url'))).length > MAX_EXTERNAL_URL_PREVIEWS) {\n        log.debug('All URL ignored');\n        return message;\n      }\n      const attachments = [];\n      let changed = false;\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n      var _iteratorError2;\n      try {\n        for (var _iterator2 = _asyncIterator(message.urls), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n          const item = _step2.value;\n          {\n            if (item.ignoreParse === true) {\n              log.debug('URL ignored', item.url);\n              continue;\n            }\n            const {\n              urlPreview,\n              foundMeta\n            } = await parseUrl(item.url);\n            Object.assign(item, foundMeta ? urlPreview : {});\n            changed = changed || foundMeta;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            await _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n      if (attachments.length) {\n        await Messages.setMessageAttachments(message._id, attachments);\n      }\n      if (changed === true) {\n        await Messages.setUrlsById(message._id, message.urls);\n      }\n      return message;\n    };\n    const OEmbed = {\n      rocketUrlParser,\n      getUrlMetaWithCache,\n      getUrlMeta,\n      parseUrl\n    };\n    settings.watch('API_Embed', value => {\n      if (value) {\n        return callbacks.add('afterSaveMessage', message => OEmbed.rocketUrlParser(message), callbacks.priority.LOW, 'API_Embed');\n      }\n      return callbacks.remove('afterSaveMessage', 'API_Embed');\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","OEmbed","isOEmbedUrlWithMetadata","Logger","Messages","OEmbedCache","fetch","serverFetch","camelCase","he","iconv","ipRangeCheck","jschardet","callbacks","isURL","settings","Info","__reifyWaitForDeps__","MAX_EXTERNAL_URL_PREVIEWS","log","getCharset","contentType","body","detectedCharset","httpHeaderCharset","htmlMetaCharset","result","binary","toString","detected","detect","confidence","encoding","toLowerCase","m1","match","m2","toUtf8","decode","getUrlContent","urlObj","redirectCount","arguments","length","undefined","portsProtocol","Map","Object","entries","ignoredHosts","get","replace","split","hostname","includes","Error","safePorts","port","some","protocol","data","run","url","sizeLimit","debug","concat","response","compress","follow","headers","version","size","totalSize","chunks","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","chunk","value","push","warn","msg","err","return","buffer","Buffer","fromEntries","statusCode","status","parseUrl","_data$headers","_data$headers2","parsedUrlObject","meta","foundMeta","urlPreview","getUrlMetaWithCache","_parsedUrlObject$meta","getRelevantMetaTags","oembedHtml","insertMaxWidthInOembedHtml","contentLength","getUrlMeta","withFragment","_content","_content2","URL","searchParams","set","content","error","metas","escapeMeta","name","unescape","_meta","title","fragment","headerObj","keys","forEach","header","cache","findOneById","createWithIdAndData","_error","metaObj","tags","key","test","trim","rocketUrlParser","message","Array","isArray","urls","attachments","filter","item","changed","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","ignoreParse","assign","setMessageAttachments","_id","setUrlsById","watch","add","priority","LOW","remove","__reify_async_result__","_reifyError","self","async"],"sources":["app/oembed/server/server.ts"],"sourcesContent":["import type {\n\tOEmbedUrlContentResult,\n\tOEmbedUrlWithMetadata,\n\tIMessage,\n\tMessageAttachment,\n\tOEmbedMeta,\n\tMessageUrl,\n} from '@rocket.chat/core-typings';\nimport { isOEmbedUrlWithMetadata } from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Messages, OEmbedCache } from '@rocket.chat/models';\nimport { serverFetch as fetch } from '@rocket.chat/server-fetch';\nimport { camelCase } from 'change-case';\nimport he from 'he';\nimport iconv from 'iconv-lite';\nimport ipRangeCheck from 'ip-range-check';\nimport jschardet from 'jschardet';\n\nimport { callbacks } from '../../../lib/callbacks';\nimport { isURL } from '../../../lib/utils/isURL';\nimport { settings } from '../../settings/server';\nimport { Info } from '../../utils/rocketchat.info';\n\nconst MAX_EXTERNAL_URL_PREVIEWS = 5;\nconst log = new Logger('OEmbed');\n//  Detect encoding\n//  Priority:\n//  Detected == HTTP Header > Detected == HTML meta > HTTP Header > HTML meta > Detected > Default (utf-8)\n//  See also: https://www.w3.org/International/questions/qa-html-encoding-declarations.en#quickanswer\nconst getCharset = function (contentType: string, body: Buffer): string {\n\tlet detectedCharset;\n\tlet httpHeaderCharset;\n\tlet htmlMetaCharset;\n\tlet result;\n\n\tcontentType = contentType || '';\n\n\tconst binary = body.toString('binary');\n\tconst detected = jschardet.detect(binary);\n\tif (detected.confidence > 0.8) {\n\t\tdetectedCharset = detected.encoding.toLowerCase();\n\t}\n\tconst m1 = contentType.match(/charset=([\\w\\-]+)/i);\n\tif (m1) {\n\t\thttpHeaderCharset = m1[1].toLowerCase();\n\t}\n\tconst m2 = binary.match(/<meta\\b[^>]*charset=[\"']?([\\w\\-]+)/i);\n\tif (m2) {\n\t\thtmlMetaCharset = m2[1].toLowerCase();\n\t}\n\tif (detectedCharset) {\n\t\tif (detectedCharset === httpHeaderCharset) {\n\t\t\tresult = httpHeaderCharset;\n\t\t} else if (detectedCharset === htmlMetaCharset) {\n\t\t\tresult = htmlMetaCharset;\n\t\t}\n\t}\n\tif (!result) {\n\t\tresult = httpHeaderCharset || htmlMetaCharset || detectedCharset;\n\t}\n\treturn result || 'utf-8';\n};\n\nconst toUtf8 = function (contentType: string, body: Buffer): string {\n\treturn iconv.decode(body, getCharset(contentType, body));\n};\n\nconst getUrlContent = async (urlObj: URL, redirectCount = 5): Promise<OEmbedUrlContentResult> => {\n\tconst portsProtocol = new Map<string, string>(\n\t\tObject.entries({\n\t\t\t80: 'http:',\n\t\t\t8080: 'http:',\n\t\t\t443: 'https:',\n\t\t}),\n\t);\n\n\tconst ignoredHosts = settings.get<string>('API_EmbedIgnoredHosts').replace(/\\s/g, '').split(',') || [];\n\tif (urlObj.hostname && (ignoredHosts.includes(urlObj.hostname) || ipRangeCheck(urlObj.hostname, ignoredHosts))) {\n\t\tthrow new Error('invalid host');\n\t}\n\n\tconst safePorts = settings.get<string>('API_EmbedSafePorts').replace(/\\s/g, '').split(',') || [];\n\n\t// checks if the URL port is in the safe ports list\n\tif (safePorts.length > 0 && urlObj.port && !safePorts.includes(urlObj.port)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\t// if port is not detected, use protocol to verify instead\n\tif (safePorts.length > 0 && !urlObj.port && !safePorts.some((port) => portsProtocol.get(port) === urlObj.protocol)) {\n\t\tthrow new Error('invalid/unsafe port');\n\t}\n\n\tconst data = await callbacks.run('oembed:beforeGetUrlContent', {\n\t\turlObj,\n\t});\n\n\tconst url = data.urlObj.toString();\n\tconst sizeLimit = 250000;\n\n\tlog.debug(`Fetching ${url} following redirects ${redirectCount} times`);\n\tconst response = await fetch(\n\t\turl,\n\t\t{\n\t\t\tcompress: true,\n\t\t\tfollow: redirectCount,\n\t\t\theaders: {\n\t\t\t\t'User-Agent': `${settings.get('API_Embed_UserAgent')} Rocket.Chat/${Info.version}`,\n\t\t\t\t'Accept-Language': settings.get('Language') || 'en',\n\t\t\t},\n\t\t\tsize: sizeLimit, // max size of the response body, this was not working as expected so I'm also manually verifying that on the iterator\n\t\t},\n\t\tsettings.get('Allow_Invalid_SelfSigned_Certs'),\n\t);\n\n\tlet totalSize = 0;\n\tconst chunks = [];\n\tfor await (const chunk of response.body) {\n\t\ttotalSize += chunk.length;\n\t\tchunks.push(chunk as Buffer);\n\n\t\tif (totalSize > sizeLimit) {\n\t\t\tlog.warn({ msg: 'OEmbed request size exceeded', url });\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tlog.debug('Obtained response from server with length of', totalSize);\n\tconst buffer = Buffer.concat(chunks);\n\n\treturn {\n\t\theaders: Object.fromEntries(response.headers),\n\t\tbody: toUtf8(response.headers.get('content-type') || 'text/plain', buffer),\n\t\tstatusCode: response.status,\n\t};\n};\n\nconst parseUrl = async function (url: string): Promise<{ urlPreview: MessageUrl; foundMeta: boolean }> {\n\tconst parsedUrlObject: MessageUrl = { url, meta: {} };\n\tlet foundMeta = false;\n\tif (!isURL(url)) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tconst data = await getUrlMetaWithCache(url);\n\tif (!data) {\n\t\treturn { urlPreview: parsedUrlObject, foundMeta };\n\t}\n\n\tif (isOEmbedUrlWithMetadata(data) && data.meta) {\n\t\tparsedUrlObject.meta = getRelevantMetaTags(data.meta) || {};\n\t\tif (parsedUrlObject.meta?.oembedHtml) {\n\t\t\tparsedUrlObject.meta.oembedHtml = insertMaxWidthInOembedHtml(parsedUrlObject.meta.oembedHtml) || '';\n\t\t}\n\t}\n\n\tfoundMeta = true;\n\treturn {\n\t\turlPreview: {\n\t\t\t...parsedUrlObject,\n\t\t\t...((parsedUrlObject.headers || data.headers) && {\n\t\t\t\theaders: {\n\t\t\t\t\t...parsedUrlObject.headers,\n\t\t\t\t\t...(data.headers?.contentLength && { contentLength: data.headers.contentLength }),\n\t\t\t\t\t...(data.headers?.contentType && { contentType: data.headers.contentType }),\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t\tfoundMeta,\n\t};\n};\n\nconst getUrlMeta = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined> {\n\tlog.debug('Obtaining metadata for URL', url);\n\tconst urlObj = new URL(url);\n\n\tif (withFragment) {\n\t\turlObj.searchParams.set('_escaped_fragment_', '');\n\t}\n\n\tlog.debug('Fetching url content', urlObj.toString());\n\tlet content: OEmbedUrlContentResult | undefined;\n\ttry {\n\t\tcontent = await getUrlContent(urlObj, 5);\n\t} catch (err) {\n\t\tlog.error({ msg: 'Error fetching url content', err });\n\t}\n\n\tif (!content) {\n\t\treturn;\n\t}\n\n\tlog.debug('Parsing metadata for URL', url);\n\tconst metas: { [k: string]: string } = {};\n\n\tif (content?.body) {\n\t\tconst escapeMeta = (name: string, value: string): string => {\n\t\t\tmetas[name] = metas[name] || he.unescape(value);\n\t\t\treturn metas[name];\n\t\t};\n\t\tcontent.body.replace(/<title[^>]*>([^<]*)<\\/title>/gim, (_meta, title) => {\n\t\t\treturn escapeMeta('pageTitle', title);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[']([^']*)['][^>]*\\scontent=[']([^']*)['][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*\\scontent=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, name, value) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[']([^']*)['][^>]*(?:name|property)=[']([^']*)['][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tcontent.body.replace(/<meta[^>]*\\scontent=[\"]([^\"]*)[\"][^>]*(?:name|property)=[\"]([^\"]*)[\"][^>]*>/gim, (_meta, value, name) => {\n\t\t\treturn escapeMeta(camelCase(name), value);\n\t\t});\n\t\tif (metas.fragment === '!' && withFragment == null) {\n\t\t\treturn getUrlMeta(url, true);\n\t\t}\n\t\tdelete metas.oembedHtml;\n\t}\n\tconst headers: { [k: string]: string } = {};\n\n\tif (content?.headers) {\n\t\tconst headerObj = content.headers;\n\t\tObject.keys(headerObj).forEach((header) => {\n\t\t\theaders[camelCase(header)] = headerObj[header];\n\t\t});\n\t}\n\tif (content && content.statusCode !== 200) {\n\t\treturn;\n\t}\n\treturn callbacks.run('oembed:afterParseContent', {\n\t\turl,\n\t\tmeta: metas,\n\t\theaders,\n\t\tcontent,\n\t});\n};\n\nconst getUrlMetaWithCache = async function (\n\turl: string,\n\twithFragment?: boolean,\n): Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult> {\n\tlog.debug('Getting oembed metadata for', url);\n\tconst cache = await OEmbedCache.findOneById(url);\n\n\tif (cache) {\n\t\tlog.debug('Found oembed metadata in cache for', url);\n\t\treturn cache.data;\n\t}\n\n\tconst data = await getUrlMeta(url, withFragment);\n\n\tif (!data) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tlog.debug('Saving oembed metadata in cache for', url);\n\t\tawait OEmbedCache.createWithIdAndData(url, data);\n\t} catch (_error) {\n\t\tlog.error({ msg: 'OEmbed duplicated record', url });\n\t}\n\n\treturn data;\n};\n\nconst getRelevantMetaTags = function (metaObj: OEmbedMeta): Record<string, string> | void {\n\tconst tags: Record<string, string> = {};\n\tObject.keys(metaObj).forEach((key) => {\n\t\tconst value = metaObj[key];\n\t\tif (/^(og|fb|twitter|oembed|msapplication).+|description|title|pageTitle$/.test(key.toLowerCase()) && value && value.trim() !== '') {\n\t\t\ttags[key] = value;\n\t\t}\n\t});\n\n\tif (Object.keys(tags).length > 0) {\n\t\treturn tags;\n\t}\n};\n\nconst insertMaxWidthInOembedHtml = (oembedHtml?: string): string | undefined =>\n\toembedHtml?.replace('iframe', 'iframe style=\"max-width: 100%;width:400px;height:225px\"');\n\nconst rocketUrlParser = async function (message: IMessage): Promise<IMessage> {\n\tlog.debug('Parsing message URLs');\n\n\tif (!Array.isArray(message.urls)) {\n\t\treturn message;\n\t}\n\n\tlog.debug('URLs found', message.urls.length);\n\n\tif (\n\t\t(message.attachments && message.attachments.length > 0) ||\n\t\tmessage.urls.filter((item) => !item.url.includes(settings.get('Site_Url'))).length > MAX_EXTERNAL_URL_PREVIEWS\n\t) {\n\t\tlog.debug('All URL ignored');\n\t\treturn message;\n\t}\n\n\tconst attachments: MessageAttachment[] = [];\n\n\tlet changed = false;\n\tfor await (const item of message.urls) {\n\t\tif (item.ignoreParse === true) {\n\t\t\tlog.debug('URL ignored', item.url);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { urlPreview, foundMeta } = await parseUrl(item.url);\n\n\t\tObject.assign(item, foundMeta ? urlPreview : {});\n\t\tchanged = changed || foundMeta;\n\t}\n\n\tif (attachments.length) {\n\t\tawait Messages.setMessageAttachments(message._id, attachments);\n\t}\n\n\tif (changed === true) {\n\t\tawait Messages.setUrlsById(message._id, message.urls);\n\t}\n\n\treturn message;\n};\n\nconst OEmbed: {\n\tgetUrlMeta: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | undefined | OEmbedUrlContentResult>;\n\tgetUrlMetaWithCache: (url: string, withFragment?: boolean) => Promise<OEmbedUrlWithMetadata | OEmbedUrlContentResult | undefined>;\n\trocketUrlParser: (message: IMessage) => Promise<IMessage>;\n\tparseUrl: (url: string) => Promise<{ urlPreview: MessageUrl; foundMeta: boolean }>;\n} = {\n\trocketUrlParser,\n\tgetUrlMetaWithCache,\n\tgetUrlMeta,\n\tparseUrl,\n};\n\nsettings.watch('API_Embed', (value) => {\n\tif (value) {\n\t\treturn callbacks.add('afterSaveMessage', (message) => OEmbed.rocketUrlParser(message), callbacks.priority.LOW, 'API_Embed');\n\t}\n\treturn callbacks.remove('afterSaveMessage', 'API_Embed');\n});\n\nexport { OEmbed };\n"],"mappings":";;;IAQA,IAAAA,aAAS;IAAAC,MAAA,CAAAC,IAAA,uCAA2D;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAAA,IAAAC,cAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAC,cAAA,GAAAD,CAAA;MAAA;IAAA;IAApEH,MAAA,CAAOK,MAAE;MAAAC,MAAA,EAAAA,CAAA,KAAAA;IAAuB,EAAE;IAAA,IAAAC,uBAAM;IAAAP,MAA4B,CAAAC,IAAA;MAAAM,wBAAAJ,CAAA;QAAAI,uBAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,MAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAO,OAAAL,CAAA;QAAAK,MAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,QAAA,EAAAC,WAAA;IAAAV,MAAA,CAAAC,IAAA;MAAAQ,SAAAN,CAAA;QAAAM,QAAA,GAAAN,CAAA;MAAA;MAAAO,YAAAP,CAAA;QAAAO,WAAA,GAAAP,CAAA;MAAA;IAAA;IAAA,IAAAQ,KAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAW,YAAAT,CAAA;QAAAQ,KAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAU,SAAA;IAAAb,MAAA,CAAAC,IAAA;MAAAY,UAAAV,CAAA;QAAAU,SAAA,GAAAV,CAAA;MAAA;IAAA;IAAA,IAAAW,EAAA;IAAAd,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAW,EAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,KAAA;IAAAf,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAY,KAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,YAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAa,YAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,SAAA;IAAAjB,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAc,SAAA,GAAAd,CAAA;MAAA;IAAA;IAAA,IAAAe,SAAA;IAAAlB,MAAA,CAAAC,IAAA;MAAAiB,UAAAf,CAAA;QAAAe,SAAA,GAAAf,CAAA;MAAA;IAAA;IAAA,IAAAgB,KAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAkB,MAAAhB,CAAA;QAAAgB,KAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,QAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,SAAAjB,CAAA;QAAAiB,QAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,IAAA;IAAArB,MAAA,CAAAC,IAAA;MAAAoB,KAAAlB,CAAA;QAAAkB,IAAA,GAAAlB,CAAA;MAAA;IAAA;IAAA,IAAAmB,oBAAA,WAAAA,oBAAA;IAepE,MAAMC,yBAAyB,GAAG,CAAC;IACnC,MAAMC,GAAG,GAAG,IAAIhB,MAAM,CAAC,QAAQ,CAAC;IAChC;IACA;IACA;IACA;IACA,MAAMiB,UAAU,GAAG,SAAAA,CAAUC,WAAmB,EAAEC,IAAY;MAC7D,IAAIC,eAAe;MACnB,IAAIC,iBAAiB;MACrB,IAAIC,eAAe;MACnB,IAAIC,MAAM;MAEVL,WAAW,GAAGA,WAAW,IAAI,EAAE;MAE/B,MAAMM,MAAM,GAAGL,IAAI,CAACM,QAAQ,CAAC,QAAQ,CAAC;MACtC,MAAMC,QAAQ,GAAGjB,SAAS,CAACkB,MAAM,CAACH,MAAM,CAAC;MACzC,IAAIE,QAAQ,CAACE,UAAU,GAAG,GAAG,EAAE;QAC9BR,eAAe,GAAGM,QAAQ,CAACG,QAAQ,CAACC,WAAW,EAAE;MAClD;MACA,MAAMC,EAAE,GAAGb,WAAW,CAACc,KAAK,CAAC,oBAAoB,CAAC;MAClD,IAAID,EAAE,EAAE;QACPV,iBAAiB,GAAGU,EAAE,CAAC,CAAC,CAAC,CAACD,WAAW,EAAE;MACxC;MACA,MAAMG,EAAE,GAAGT,MAAM,CAACQ,KAAK,CAAC,qCAAqC,CAAC;MAC9D,IAAIC,EAAE,EAAE;QACPX,eAAe,GAAGW,EAAE,CAAC,CAAC,CAAC,CAACH,WAAW,EAAE;MACtC;MACA,IAAIV,eAAe,EAAE;QACpB,IAAIA,eAAe,KAAKC,iBAAiB,EAAE;UAC1CE,MAAM,GAAGF,iBAAiB;QAC3B,CAAC,MAAM,IAAID,eAAe,KAAKE,eAAe,EAAE;UAC/CC,MAAM,GAAGD,eAAe;QACzB;MACD;MACA,IAAI,CAACC,MAAM,EAAE;QACZA,MAAM,GAAGF,iBAAiB,IAAIC,eAAe,IAAIF,eAAe;MACjE;MACA,OAAOG,MAAM,IAAI,OAAO;IACzB,CAAC;IAED,MAAMW,MAAM,GAAG,SAAAA,CAAUhB,WAAmB,EAAEC,IAAY;MACzD,OAAOZ,KAAK,CAAC4B,MAAM,CAAChB,IAAI,EAAEF,UAAU,CAACC,WAAW,EAAEC,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,MAAMiB,aAAa,GAAG,eAAAA,CAAOC,MAAW,EAAwD;MAAA,IAAtDC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAC1D,MAAMG,aAAa,GAAG,IAAIC,GAAG,CAC5BC,MAAM,CAACC,OAAO,CAAC;QACd,EAAE,EAAE,OAAO;QACX,IAAI,EAAE,OAAO;QACb,GAAG,EAAE;OACL,CAAC,CACF;MAED,MAAMC,YAAY,GAAGlC,QAAQ,CAACmC,GAAG,CAAS,uBAAuB,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE;MACtG,IAAIZ,MAAM,CAACa,QAAQ,KAAKJ,YAAY,CAACK,QAAQ,CAACd,MAAM,CAACa,QAAQ,CAAC,IAAI1C,YAAY,CAAC6B,MAAM,CAACa,QAAQ,EAAEJ,YAAY,CAAC,CAAC,EAAE;QAC/G,MAAM,IAAIM,KAAK,CAAC,cAAc,CAAC;MAChC;MAEA,MAAMC,SAAS,GAAGzC,QAAQ,CAACmC,GAAG,CAAS,oBAAoB,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE;MAEhG;MACA,IAAII,SAAS,CAACb,MAAM,GAAG,CAAC,IAAIH,MAAM,CAACiB,IAAI,IAAI,CAACD,SAAS,CAACF,QAAQ,CAACd,MAAM,CAACiB,IAAI,CAAC,EAAE;QAC5E,MAAM,IAAIF,KAAK,CAAC,qBAAqB,CAAC;MACvC;MAEA;MACA,IAAIC,SAAS,CAACb,MAAM,GAAG,CAAC,IAAI,CAACH,MAAM,CAACiB,IAAI,IAAI,CAACD,SAAS,CAACE,IAAI,CAAED,IAAI,IAAKZ,aAAa,CAACK,GAAG,CAACO,IAAI,CAAC,KAAKjB,MAAM,CAACmB,QAAQ,CAAC,EAAE;QACnH,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;MACvC;MAEA,MAAMK,IAAI,GAAG,MAAM/C,SAAS,CAACgD,GAAG,CAAC,4BAA4B,EAAE;QAC9DrB;OACA,CAAC;MAEF,MAAMsB,GAAG,GAAGF,IAAI,CAACpB,MAAM,CAACZ,QAAQ,EAAE;MAClC,MAAMmC,SAAS,GAAG,MAAM;MAExB5C,GAAG,CAAC6C,KAAK,aAAAC,MAAA,CAAaH,GAAG,2BAAAG,MAAA,CAAwBxB,aAAa,WAAQ,CAAC;MACvE,MAAMyB,QAAQ,GAAG,MAAM5D,KAAK,CAC3BwD,GAAG,EACH;QACCK,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE3B,aAAa;QACrB4B,OAAO,EAAE;UACR,YAAY,KAAAJ,MAAA,CAAKlD,QAAQ,CAACmC,GAAG,CAAC,qBAAqB,CAAC,mBAAAe,MAAA,CAAgBjD,IAAI,CAACsD,OAAO,CAAE;UAClF,iBAAiB,EAAEvD,QAAQ,CAACmC,GAAG,CAAC,UAAU,CAAC,IAAI;SAC/C;QACDqB,IAAI,EAAER,SAAS,CAAE;OACjB,EACDhD,QAAQ,CAACmC,GAAG,CAAC,gCAAgC,CAAC,CAC9C;MAED,IAAIsB,SAAS,GAAG,CAAC;MACjB,MAAMC,MAAM,GAAG,EAAE;MAAC,IAAAC,yBAAA;MAAA,IAAAC,iBAAA;MAAA,IAAAC,cAAA;MAAA;QAClB,SAAAC,SAAA,GAAA9E,cAAA,CAA0BmE,QAAQ,CAAC5C,IAAI,GAAAwD,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAC,IAAA,EAAAN,yBAAA,UAAE;UAAA,MAAxBO,KAAK,GAAAH,KAAA,CAAAI,KAAA;UAAA;YACrBV,SAAS,IAAIS,KAAK,CAACtC,MAAM;YACzB8B,MAAM,CAACU,IAAI,CAACF,KAAe,CAAC;YAE5B,IAAIT,SAAS,GAAGT,SAAS,EAAE;cAC1B5C,GAAG,CAACiE,IAAI,CAAC;gBAAEC,GAAG,EAAE,8BAA8B;gBAAEvB;cAAG,CAAE,CAAC;cACtD;YACD;UAAC;QACF;MAAC,SAAAwB,GAAA;QAAAX,iBAAA;QAAAC,cAAA,GAAAU,GAAA;MAAA;QAAA;UAAA,IAAAZ,yBAAA,IAAAG,SAAA,CAAAU,MAAA;YAAA,MAAAV,SAAA,CAAAU,MAAA;UAAA;QAAA;UAAA,IAAAZ,iBAAA;YAAA,MAAAC,cAAA;UAAA;QAAA;MAAA;MAEDzD,GAAG,CAAC6C,KAAK,CAAC,8CAA8C,EAAEQ,SAAS,CAAC;MACpE,MAAMgB,MAAM,GAAGC,MAAM,CAACxB,MAAM,CAACQ,MAAM,CAAC;MAEpC,OAAO;QACNJ,OAAO,EAAEtB,MAAM,CAAC2C,WAAW,CAACxB,QAAQ,CAACG,OAAO,CAAC;QAC7C/C,IAAI,EAAEe,MAAM,CAAC6B,QAAQ,CAACG,OAAO,CAACnB,GAAG,CAAC,cAAc,CAAC,IAAI,YAAY,EAAEsC,MAAM,CAAC;QAC1EG,UAAU,EAAEzB,QAAQ,CAAC0B;OACrB;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,eAAAA,CAAgB/B,GAAW;MAAA,IAAAgC,aAAA,EAAAC,cAAA;MAC3C,MAAMC,eAAe,GAAe;QAAElC,GAAG;QAAEmC,IAAI,EAAE;MAAE,CAAE;MACrD,IAAIC,SAAS,GAAG,KAAK;MACrB,IAAI,CAACpF,KAAK,CAACgD,GAAG,CAAC,EAAE;QAChB,OAAO;UAAEqC,UAAU,EAAEH,eAAe;UAAEE;QAAS,CAAE;MAClD;MAEA,MAAMtC,IAAI,GAAG,MAAMwC,mBAAmB,CAACtC,GAAG,CAAC;MAC3C,IAAI,CAACF,IAAI,EAAE;QACV,OAAO;UAAEuC,UAAU,EAAEH,eAAe;UAAEE;QAAS,CAAE;MAClD;MAEA,IAAIhG,uBAAuB,CAAC0D,IAAI,CAAC,IAAIA,IAAI,CAACqC,IAAI,EAAE;QAAA,IAAAI,qBAAA;QAC/CL,eAAe,CAACC,IAAI,GAAGK,mBAAmB,CAAC1C,IAAI,CAACqC,IAAI,CAAC,IAAI,EAAE;QAC3D,KAAAI,qBAAA,GAAIL,eAAe,CAACC,IAAI,cAAAI,qBAAA,eAApBA,qBAAA,CAAsBE,UAAU,EAAE;UACrCP,eAAe,CAACC,IAAI,CAACM,UAAU,GAAGC,0BAA0B,CAACR,eAAe,CAACC,IAAI,CAACM,UAAU,CAAC,IAAI,EAAE;QACpG;MACD;MAEAL,SAAS,GAAG,IAAI;MAChB,OAAO;QACNC,UAAU,EAAAzG,aAAA,CAAAA,aAAA,KACNsG,eAAe,GACd,CAACA,eAAe,CAAC3B,OAAO,IAAIT,IAAI,CAACS,OAAO,KAAK;UAChDA,OAAO,EAAA3E,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACHsG,eAAe,CAAC3B,OAAO,GACtB,EAAAyB,aAAA,GAAAlC,IAAI,CAACS,OAAO,cAAAyB,aAAA,uBAAZA,aAAA,CAAcW,aAAa,KAAI;YAAEA,aAAa,EAAE7C,IAAI,CAACS,OAAO,CAACoC;UAAa,CAAE,GAC5E,EAAAV,cAAA,GAAAnC,IAAI,CAACS,OAAO,cAAA0B,cAAA,uBAAZA,cAAA,CAAc1E,WAAW,KAAI;YAAEA,WAAW,EAAEuC,IAAI,CAACS,OAAO,CAAChD;UAAW,CAAE;SAE3E,CACD;QACD6E;OACA;IACF,CAAC;IAED,MAAMQ,UAAU,GAAG,eAAAA,CAClB5C,GAAW,EACX6C,YAAsB;MAAA,IAAAC,QAAA,EAAAC,SAAA;MAEtB1F,GAAG,CAAC6C,KAAK,CAAC,4BAA4B,EAAEF,GAAG,CAAC;MAC5C,MAAMtB,MAAM,GAAG,IAAIsE,GAAG,CAAChD,GAAG,CAAC;MAE3B,IAAI6C,YAAY,EAAE;QACjBnE,MAAM,CAACuE,YAAY,CAACC,GAAG,CAAC,oBAAoB,EAAE,EAAE,CAAC;MAClD;MAEA7F,GAAG,CAAC6C,KAAK,CAAC,sBAAsB,EAAExB,MAAM,CAACZ,QAAQ,EAAE,CAAC;MACpD,IAAIqF,OAA2C;MAC/C,IAAI;QACHA,OAAO,GAAG,MAAM1E,aAAa,CAACC,MAAM,EAAE,CAAC,CAAC;MACzC,CAAC,CAAC,OAAO8C,GAAG,EAAE;QACbnE,GAAG,CAAC+F,KAAK,CAAC;UAAE7B,GAAG,EAAE,4BAA4B;UAAEC;QAAG,CAAE,CAAC;MACtD;MAEA,IAAI,CAAC2B,OAAO,EAAE;QACb;MACD;MAEA9F,GAAG,CAAC6C,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAC1C,MAAMqD,KAAK,GAA4B,EAAE;MAEzC,KAAAP,QAAA,GAAIK,OAAO,cAAAL,QAAA,eAAPA,QAAA,CAAStF,IAAI,EAAE;QAClB,MAAM8F,UAAU,GAAGA,CAACC,IAAY,EAAEnC,KAAa,KAAY;UAC1DiC,KAAK,CAACE,IAAI,CAAC,GAAGF,KAAK,CAACE,IAAI,CAAC,IAAI5G,EAAE,CAAC6G,QAAQ,CAACpC,KAAK,CAAC;UAC/C,OAAOiC,KAAK,CAACE,IAAI,CAAC;QACnB,CAAC;QACDJ,OAAO,CAAC3F,IAAI,CAAC6B,OAAO,CAAC,iCAAiC,EAAE,CAACoE,KAAK,EAAEC,KAAK,KAAI;UACxE,OAAOJ,UAAU,CAAC,WAAW,EAAEI,KAAK,CAAC;QACtC,CAAC,CAAC;QACFP,OAAO,CAAC3F,IAAI,CAAC6B,OAAO,CAAC,gFAAgF,EAAE,CAACoE,KAAK,EAAEF,IAAI,EAAEnC,KAAK,KAAI;UAC7H,OAAOkC,UAAU,CAAC5G,SAAS,CAAC6G,IAAI,CAAC,EAAEnC,KAAK,CAAC;QAC1C,CAAC,CAAC;QACF+B,OAAO,CAAC3F,IAAI,CAAC6B,OAAO,CAAC,gFAAgF,EAAE,CAACoE,KAAK,EAAEF,IAAI,EAAEnC,KAAK,KAAI;UAC7H,OAAOkC,UAAU,CAAC5G,SAAS,CAAC6G,IAAI,CAAC,EAAEnC,KAAK,CAAC;QAC1C,CAAC,CAAC;QACF+B,OAAO,CAAC3F,IAAI,CAAC6B,OAAO,CAAC,gFAAgF,EAAE,CAACoE,KAAK,EAAErC,KAAK,EAAEmC,IAAI,KAAI;UAC7H,OAAOD,UAAU,CAAC5G,SAAS,CAAC6G,IAAI,CAAC,EAAEnC,KAAK,CAAC;QAC1C,CAAC,CAAC;QACF+B,OAAO,CAAC3F,IAAI,CAAC6B,OAAO,CAAC,gFAAgF,EAAE,CAACoE,KAAK,EAAErC,KAAK,EAAEmC,IAAI,KAAI;UAC7H,OAAOD,UAAU,CAAC5G,SAAS,CAAC6G,IAAI,CAAC,EAAEnC,KAAK,CAAC;QAC1C,CAAC,CAAC;QACF,IAAIiC,KAAK,CAACM,QAAQ,KAAK,GAAG,IAAId,YAAY,IAAI,IAAI,EAAE;UACnD,OAAOD,UAAU,CAAC5C,GAAG,EAAE,IAAI,CAAC;QAC7B;QACA,OAAOqD,KAAK,CAACZ,UAAU;MACxB;MACA,MAAMlC,OAAO,GAA4B,EAAE;MAE3C,KAAAwC,SAAA,GAAII,OAAO,cAAAJ,SAAA,eAAPA,SAAA,CAASxC,OAAO,EAAE;QACrB,MAAMqD,SAAS,GAAGT,OAAO,CAAC5C,OAAO;QACjCtB,MAAM,CAAC4E,IAAI,CAACD,SAAS,CAAC,CAACE,OAAO,CAAEC,MAAM,IAAI;UACzCxD,OAAO,CAAC7D,SAAS,CAACqH,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACG,MAAM,CAAC;QAC/C,CAAC,CAAC;MACH;MACA,IAAIZ,OAAO,IAAIA,OAAO,CAACtB,UAAU,KAAK,GAAG,EAAE;QAC1C;MACD;MACA,OAAO9E,SAAS,CAACgD,GAAG,CAAC,0BAA0B,EAAE;QAChDC,GAAG;QACHmC,IAAI,EAAEkB,KAAK;QACX9C,OAAO;QACP4C;OACA,CAAC;IACH,CAAC;IAED,MAAMb,mBAAmB,GAAG,eAAAA,CAC3BtC,GAAW,EACX6C,YAAsB;MAEtBxF,GAAG,CAAC6C,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;MAC7C,MAAMgE,KAAK,GAAG,MAAMzH,WAAW,CAAC0H,WAAW,CAACjE,GAAG,CAAC;MAEhD,IAAIgE,KAAK,EAAE;QACV3G,GAAG,CAAC6C,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAAC;QACpD,OAAOgE,KAAK,CAAClE,IAAI;MAClB;MAEA,MAAMA,IAAI,GAAG,MAAM8C,UAAU,CAAC5C,GAAG,EAAE6C,YAAY,CAAC;MAEhD,IAAI,CAAC/C,IAAI,EAAE;QACV;MACD;MAEA,IAAI;QACHzC,GAAG,CAAC6C,KAAK,CAAC,qCAAqC,EAAEF,GAAG,CAAC;QACrD,MAAMzD,WAAW,CAAC2H,mBAAmB,CAAClE,GAAG,EAAEF,IAAI,CAAC;MACjD,CAAC,CAAC,OAAOqE,MAAM,EAAE;QAChB9G,GAAG,CAAC+F,KAAK,CAAC;UAAE7B,GAAG,EAAE,0BAA0B;UAAEvB;QAAG,CAAE,CAAC;MACpD;MAEA,OAAOF,IAAI;IACZ,CAAC;IAED,MAAM0C,mBAAmB,GAAG,SAAAA,CAAU4B,OAAmB;MACxD,MAAMC,IAAI,GAA2B,EAAE;MACvCpF,MAAM,CAAC4E,IAAI,CAACO,OAAO,CAAC,CAACN,OAAO,CAAEQ,GAAG,IAAI;QACpC,MAAMlD,KAAK,GAAGgD,OAAO,CAACE,GAAG,CAAC;QAC1B,IAAI,sEAAsE,CAACC,IAAI,CAACD,GAAG,CAACnG,WAAW,EAAE,CAAC,IAAIiD,KAAK,IAAIA,KAAK,CAACoD,IAAI,EAAE,KAAK,EAAE,EAAE;UACnIH,IAAI,CAACC,GAAG,CAAC,GAAGlD,KAAK;QAClB;MACD,CAAC,CAAC;MAEF,IAAInC,MAAM,CAAC4E,IAAI,CAACQ,IAAI,CAAC,CAACxF,MAAM,GAAG,CAAC,EAAE;QACjC,OAAOwF,IAAI;MACZ;IACD,CAAC;IAED,MAAM3B,0BAA0B,GAAID,UAAmB,IACtDA,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEpD,OAAO,CAAC,QAAQ,EAAE,yDAAyD,CAAC;IAEzF,MAAMoF,eAAe,GAAG,eAAAA,CAAgBC,OAAiB;MACxDrH,GAAG,CAAC6C,KAAK,CAAC,sBAAsB,CAAC;MAEjC,IAAI,CAACyE,KAAK,CAACC,OAAO,CAACF,OAAO,CAACG,IAAI,CAAC,EAAE;QACjC,OAAOH,OAAO;MACf;MAEArH,GAAG,CAAC6C,KAAK,CAAC,YAAY,EAAEwE,OAAO,CAACG,IAAI,CAAChG,MAAM,CAAC;MAE5C,IACE6F,OAAO,CAACI,WAAW,IAAIJ,OAAO,CAACI,WAAW,CAACjG,MAAM,GAAG,CAAC,IACtD6F,OAAO,CAACG,IAAI,CAACE,MAAM,CAAEC,IAAI,IAAK,CAACA,IAAI,CAAChF,GAAG,CAACR,QAAQ,CAACvC,QAAQ,CAACmC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAACP,MAAM,GAAGzB,yBAAyB,EAC7G;QACDC,GAAG,CAAC6C,KAAK,CAAC,iBAAiB,CAAC;QAC5B,OAAOwE,OAAO;MACf;MAEA,MAAMI,WAAW,GAAwB,EAAE;MAE3C,IAAIG,OAAO,GAAG,KAAK;MAAC,IAAAC,0BAAA;MAAA,IAAAC,kBAAA;MAAA,IAAAC,eAAA;MAAA;QACpB,SAAAC,UAAA,GAAApJ,cAAA,CAAyByI,OAAO,CAACG,IAAI,GAAAS,MAAA,EAAAJ,0BAAA,KAAAI,MAAA,SAAAD,UAAA,CAAApE,IAAA,IAAAC,IAAA,EAAAgE,0BAAA,UAAE;UAAA,MAAtBF,IAAI,GAAAM,MAAA,CAAAlE,KAAA;UAAA;YACpB,IAAI4D,IAAI,CAACO,WAAW,KAAK,IAAI,EAAE;cAC9BlI,GAAG,CAAC6C,KAAK,CAAC,aAAa,EAAE8E,IAAI,CAAChF,GAAG,CAAC;cAClC;YACD;YAEA,MAAM;cAAEqC,UAAU;cAAED;YAAS,CAAE,GAAG,MAAML,QAAQ,CAACiD,IAAI,CAAChF,GAAG,CAAC;YAE1Df,MAAM,CAACuG,MAAM,CAACR,IAAI,EAAE5C,SAAS,GAAGC,UAAU,GAAG,EAAE,CAAC;YAChD4C,OAAO,GAAGA,OAAO,IAAI7C,SAAS;UAAC;QAChC;MAAC,SAAAZ,GAAA;QAAA2D,kBAAA;QAAAC,eAAA,GAAA5D,GAAA;MAAA;QAAA;UAAA,IAAA0D,0BAAA,IAAAG,UAAA,CAAA5D,MAAA;YAAA,MAAA4D,UAAA,CAAA5D,MAAA;UAAA;QAAA;UAAA,IAAA0D,kBAAA;YAAA,MAAAC,eAAA;UAAA;QAAA;MAAA;MAED,IAAIN,WAAW,CAACjG,MAAM,EAAE;QACvB,MAAMvC,QAAQ,CAACmJ,qBAAqB,CAACf,OAAO,CAACgB,GAAG,EAAEZ,WAAW,CAAC;MAC/D;MAEA,IAAIG,OAAO,KAAK,IAAI,EAAE;QACrB,MAAM3I,QAAQ,CAACqJ,WAAW,CAACjB,OAAO,CAACgB,GAAG,EAAEhB,OAAO,CAACG,IAAI,CAAC;MACtD;MAEA,OAAOH,OAAO;IACf,CAAC;IAED,MAAMvI,MAAM,GAKR;MACHsI,eAAe;MACfnC,mBAAmB;MACnBM,UAAU;MACVb;KACA;IAED9E,QAAQ,CAAC2I,KAAK,CAAC,WAAW,EAAGxE,KAAK,IAAI;MACrC,IAAIA,KAAK,EAAE;QACV,OAAOrE,SAAS,CAAC8I,GAAG,CAAC,kBAAkB,EAAGnB,OAAO,IAAKvI,MAAM,CAACsI,eAAe,CAACC,OAAO,CAAC,EAAE3H,SAAS,CAAC+I,QAAQ,CAACC,GAAG,EAAE,WAAW,CAAC;MAC5H;MACA,OAAOhJ,SAAS,CAACiJ,MAAM,CAAC,kBAAkB,EAAE,WAAW,CAAC;IACzD,CAAC,CAAC;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"dc41489e53c92da904569a111ac8b9773ef30f9f"}
