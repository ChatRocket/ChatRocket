{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/MessageReads.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/MessageReads.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/MessageReads.ts","inputSourceMap":{"version":3,"file":"server/models/raw/MessageReads.ts","sourceRoot":"","sources":["server/models/raw/MessageReads.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,eAAgB,SAAQ,OAAqB;IACzD,YAAY,EAAM,EAAE,KAAyD;QAC5E,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAES,YAAY;QACrB,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,MAAoB,EAAE,IAAqB;QAC3E,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,4BAA4B,CAAC,IAAqB;QACjD,OAAO,IAAI,CAAC,OAAO,CAClB;YACC,IAAI;SACJ,EACD;YACC,IAAI,EAAE;gBACL,EAAE,EAAE,CAAC;aACL;SACD,CACD,CAAC;IACH,CAAC;IAED,sCAAsC,CAAC,MAAoB,EAAE,IAAqB;QACjF,MAAM,KAAK,GAAG;YACb,MAAM;YACN,IAAI;SACJ,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,EAAE,EAAE,IAAI,IAAI,EAAE;aACd;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,IAAqB,EAAE,OAAuB;QAC3E,MAAM,KAAK,GAAG;YACb,IAAI;YACJ,MAAM,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;SACxB,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAqB;QAC1C,MAAM,KAAK,GAAG;YACb,IAAI;SACJ,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;CACD","sourcesContent":["import type { MessageReads, IUser, IMessage, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IMessageReadsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class MessageReadsRaw extends BaseRaw<MessageReads> implements IMessageReadsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<MessageReads>>) {\n\t\tsuper(db, 'message_reads', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { tmid: 1, userId: 1 }, unique: true }, { key: { ls: 1 } }];\n\t}\n\n\tasync findOneByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne({ userId, tmid });\n\t}\n\n\tgetMinimumLastSeenByThreadId(tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateReadTimestampByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tuserId,\n\t\t\ttmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tasync countByThreadAndUserIds(tmid: IMessage['_id'], userIds: IUser['_id'][]): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t\tuserId: { $in: userIds },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync countByThreadId(tmid: IMessage['_id']): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/MessageReads.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/MessageReads.ts","inputSourceMap":{"version":3,"file":"server/models/raw/MessageReads.ts","sourceRoot":"","sources":["server/models/raw/MessageReads.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,eAAgB,SAAQ,OAAqB;IACzD,YAAY,EAAM,EAAE,KAAyD;QAC5E,KAAK,CAAC,EAAE,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAES,YAAY;QACrB,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,MAAoB,EAAE,IAAqB;QAC3E,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,4BAA4B,CAAC,IAAqB;QACjD,OAAO,IAAI,CAAC,OAAO,CAClB;YACC,IAAI;SACJ,EACD;YACC,IAAI,EAAE;gBACL,EAAE,EAAE,CAAC;aACL;SACD,CACD,CAAC;IACH,CAAC;IAED,sCAAsC,CAAC,MAAoB,EAAE,IAAqB;QACjF,MAAM,KAAK,GAAG;YACb,MAAM;YACN,IAAI;SACJ,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,EAAE,EAAE,IAAI,IAAI,EAAE;aACd;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,IAAqB,EAAE,OAAuB;QAC3E,MAAM,KAAK,GAAG;YACb,IAAI;YACJ,MAAM,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;SACxB,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAqB;QAC1C,MAAM,KAAK,GAAG;YACb,IAAI;SACJ,CAAC;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;CACD","sourcesContent":["import type { MessageReads, IUser, IMessage, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IMessageReadsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class MessageReadsRaw extends BaseRaw<MessageReads> implements IMessageReadsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<MessageReads>>) {\n\t\tsuper(db, 'message_reads', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { tmid: 1, userId: 1 }, unique: true }, { key: { ls: 1 } }];\n\t}\n\n\tasync findOneByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne({ userId, tmid });\n\t}\n\n\tgetMinimumLastSeenByThreadId(tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateReadTimestampByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tuserId,\n\t\t\ttmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tasync countByThreadAndUserIds(tmid: IMessage['_id'], userIds: IUser['_id'][]): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t\tuserId: { $in: userIds },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync countByThreadId(tmid: IMessage['_id']): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      MessageReadsRaw: () => MessageReadsRaw\n    });\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MessageReadsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'message_reads', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            tmid: 1,\n            userId: 1\n          },\n          unique: true\n        }, {\n          key: {\n            ls: 1\n          }\n        }];\n      }\n      async findOneByUserIdAndThreadId(userId, tmid) {\n        return this.findOne({\n          userId,\n          tmid\n        });\n      }\n      getMinimumLastSeenByThreadId(tmid) {\n        return this.findOne({\n          tmid\n        }, {\n          sort: {\n            ls: 1\n          }\n        });\n      }\n      updateReadTimestampByUserIdAndThreadId(userId, tmid) {\n        const query = {\n          userId,\n          tmid\n        };\n        const update = {\n          $set: {\n            ls: new Date()\n          }\n        };\n        return this.updateOne(query, update, {\n          upsert: true\n        });\n      }\n      async countByThreadAndUserIds(tmid, userIds) {\n        const query = {\n          tmid,\n          userId: {\n            $in: userIds\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      async countByThreadId(tmid) {\n        const query = {\n          tmid\n        };\n        return this.col.countDocuments(query);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","MessageReadsRaw","BaseRaw","link","v","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","tmid","userId","unique","ls","findOneByUserIdAndThreadId","findOne","getMinimumLastSeenByThreadId","sort","updateReadTimestampByUserIdAndThreadId","query","update","$set","Date","updateOne","upsert","countByThreadAndUserIds","userIds","$in","col","countDocuments","countByThreadId","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/MessageReads.ts"],"sourcesContent":["import type { MessageReads, IUser, IMessage, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { IMessageReadsModel } from '@rocket.chat/model-typings';\nimport type { Collection, Db, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\n\nexport class MessageReadsRaw extends BaseRaw<MessageReads> implements IMessageReadsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<MessageReads>>) {\n\t\tsuper(db, 'message_reads', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { tmid: 1, userId: 1 }, unique: true }, { key: { ls: 1 } }];\n\t}\n\n\tasync findOneByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne({ userId, tmid });\n\t}\n\n\tgetMinimumLastSeenByThreadId(tmid: IMessage['_id']): Promise<MessageReads | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: {\n\t\t\t\t\tls: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tupdateReadTimestampByUserIdAndThreadId(userId: IUser['_id'], tmid: IMessage['_id']): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tuserId,\n\t\t\ttmid,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tls: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, { upsert: true });\n\t}\n\n\tasync countByThreadAndUserIds(tmid: IMessage['_id'], userIds: IUser['_id'][]): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t\tuserId: { $in: userIds },\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync countByThreadId(tmid: IMessage['_id']): Promise<number> {\n\t\tconst query = {\n\t\t\ttmid,\n\t\t};\n\t\treturn this.col.countDocuments(query);\n\t}\n}\n"],"mappings":";;;IAIAA,MAAA,CAAOC,MAAE;MAAAC,eAAe,EAAAA,CAAA,KAAWA;IAAC;IAAA,IAAAC,OAAA;IAAAH,MAAA,CAAAI,IAAA;MAAAD,QAAAE,CAAA;QAAAF,OAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,oBAAA,WAAAA,oBAAA;IAE9B,MAAOJ,eAAgB,SAAQC,OAAqB;MACzDI,YAAYC,EAAM,EAAEC,KAAyD;QAC5E,KAAK,CAACD,EAAE,EAAE,eAAe,EAAEC,KAAK,CAAC;MAClC;MAEUC,YAAYA,CAAA;QACrB,OAAO,CAAC;UAAEC,GAAG,EAAE;YAAEC,IAAI,EAAE,CAAC;YAAEC,MAAM,EAAE;UAAC,CAAE;UAAEC,MAAM,EAAE;QAAI,CAAE,EAAE;UAAEH,GAAG,EAAE;YAAEI,EAAE,EAAE;UAAC;QAAE,CAAE,CAAC;MAC3E;MAEA,MAAMC,0BAA0BA,CAACH,MAAoB,EAAED,IAAqB;QAC3E,OAAO,IAAI,CAACK,OAAO,CAAC;UAAEJ,MAAM;UAAED;QAAI,CAAE,CAAC;MACtC;MAEAM,4BAA4BA,CAACN,IAAqB;QACjD,OAAO,IAAI,CAACK,OAAO,CAClB;UACCL;SACA,EACD;UACCO,IAAI,EAAE;YACLJ,EAAE,EAAE;;SAEL,CACD;MACF;MAEAK,sCAAsCA,CAACP,MAAoB,EAAED,IAAqB;QACjF,MAAMS,KAAK,GAAG;UACbR,MAAM;UACND;SACA;QAED,MAAMU,MAAM,GAAG;UACdC,IAAI,EAAE;YACLR,EAAE,EAAE,IAAIS,IAAI;;SAEb;QAED,OAAO,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAEC,MAAM,EAAE;UAAEI,MAAM,EAAE;QAAI,CAAE,CAAC;MACvD;MAEA,MAAMC,uBAAuBA,CAACf,IAAqB,EAAEgB,OAAuB;QAC3E,MAAMP,KAAK,GAAG;UACbT,IAAI;UACJC,MAAM,EAAE;YAAEgB,GAAG,EAAED;UAAO;SACtB;QACD,OAAO,IAAI,CAACE,GAAG,CAACC,cAAc,CAACV,KAAK,CAAC;MACtC;MAEA,MAAMW,eAAeA,CAACpB,IAAqB;QAC1C,MAAMS,KAAK,GAAG;UACbT;SACA;QACD,OAAO,IAAI,CAACkB,GAAG,CAACC,cAAc,CAACV,KAAK,CAAC;MACtC;;IACAY,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2401e5f3b320d1d7b59c0bd24f86db920e92c16e"}
