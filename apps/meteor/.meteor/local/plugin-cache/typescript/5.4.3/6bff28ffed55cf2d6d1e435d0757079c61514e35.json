{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/team/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/team/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/team/service.ts","inputSourceMap":{"version":3,"file":"server/services/team/service.ts","sourceRoot":"","sources":["server/services/team/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Room, Authorization, Message, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type {\n\tIListRoomsFilter,\n\tITeamAutocompleteResult,\n\tITeamCreateParams,\n\tITeamInfo,\n\tITeamMemberInfo,\n\tITeamMemberParams,\n\tITeamService,\n\tITeamUpdateData,\n} from '@rocket.chat/core-services';\nimport { TEAM_TYPE } from '@rocket.chat/core-typings';\nimport type {\n\tIRoom,\n\tIUser,\n\tISubscription,\n\tIPaginationOptions,\n\tIQueryOptions,\n\tIRecordsWithTotal,\n\tITeam,\n\tITeamMember,\n\tITeamStats,\n\tAtLeast,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport { Team, Rooms, Subscriptions, Users, TeamMember } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { Document, FindOptions, Filter } from 'mongodb';\n\nimport { saveRoomName } from '../../../app/channel-settings/server';\nimport { saveRoomType } from '../../../app/channel-settings/server/functions/saveRoomType';\nimport { addUserToRoom } from '../../../app/lib/server/functions/addUserToRoom';\nimport { checkUsernameAvailability } from '../../../app/lib/server/functions/checkUsernameAvailability';\nimport { getSubscribedRoomsForUserWithDetails } from '../../../app/lib/server/functions/getRoomsWithSingleOwner';\nimport { removeUserFromRoom } from '../../../app/lib/server/functions/removeUserFromRoom';\nimport { notifyOnSubscriptionChangedByRoomIdAndUserId } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\n\nexport class TeamService extends ServiceClassInternal implements ITeamService {\n\tprotected name = 'team';\n\n\tasync create(\n\t\tuid: string,\n\t\t{ team, room = { name: team.name, extraData: {} }, members, owner, sidepanel }: ITeamCreateParams,\n\t): Promise<ITeam> {\n\t\tif (!(await checkUsernameAvailability(team.name))) {\n\t\t\tthrow new Error('team-name-already-exists');\n\t\t}\n\n\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tif (existingRoom && existingRoom._id !== room.id) {\n\t\t\tthrow new Error('room-name-already-exists');\n\t\t}\n\n\t\tconst createdBy = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(uid, {\n\t\t\tprojection: { username: 1 },\n\t\t});\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\t// TODO add validations to `data` and `members`\n\n\t\tconst membersResult =\n\t\t\t!members || !Array.isArray(members) || members.length === 0\n\t\t\t\t? []\n\t\t\t\t: await Users.findActiveByIdsOrUsernames(members, {\n\t\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t\t}).toArray();\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\t\tconst memberIds = membersResult.map(({ _id }) => _id);\n\n\t\tconst teamData = {\n\t\t\t...team,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t\t_updatedAt: new Date(), // TODO how to avoid having to do this?\n\t\t\troomId: '', // this will be populated at the end\n\t\t};\n\n\t\ttry {\n\t\t\tconst roomId =\n\t\t\t\troom.id ||\n\t\t\t\t(\n\t\t\t\t\tawait Room.create(owner || uid, {\n\t\t\t\t\t\t...room,\n\t\t\t\t\t\ttype: team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c',\n\t\t\t\t\t\tname: team.name,\n\t\t\t\t\t\tmembers: memberUsernames as string[],\n\t\t\t\t\t\textraData: {\n\t\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsidepanel,\n\t\t\t\t\t})\n\t\t\t\t)._id;\n\n\t\t\tconst result = await Team.insertOne(teamData);\n\t\t\tconst teamId = result.insertedId;\n\t\t\t// the same uid can be passed at 3 positions: owner, member list or via caller\n\t\t\t// if the owner is present, remove it from the members list\n\t\t\t// if the owner is not present, remove the caller from the members list\n\t\t\tconst excludeFromMembers = owner ? [owner] : [uid];\n\n\t\t\t// filter empty strings and falsy values from members list\n\t\t\tconst membersList: Array<InsertionModel<ITeamMember>> =\n\t\t\t\tmemberIds\n\t\t\t\t\t?.filter(Boolean)\n\t\t\t\t\t.filter((memberId) => !excludeFromMembers.includes(memberId))\n\t\t\t\t\t.map((memberId) => ({\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tuserId: memberId,\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tcreatedBy,\n\t\t\t\t\t})) || [];\n\n\t\t\tmembersList.push({\n\t\t\t\tteamId,\n\t\t\t\tuserId: owner || uid,\n\t\t\t\troles: ['owner'],\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy,\n\t\t\t});\n\n\t\t\tawait TeamMember.insertMany(membersList);\n\n\t\t\tawait Rooms.setTeamMainById(roomId, teamId);\n\t\t\tawait Team.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\tif (room.id) {\n\t\t\t\tawait Message.saveSystemMessage('user-converted-to-team', roomId, team.name, createdBy);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new Error('error-team-creation');\n\t\t}\n\t}\n\n\tasync update(uid: string, teamId: string, updateData: ITeamUpdateData): Promise<void> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, updateRoom = true } = updateData;\n\n\t\tif (updateRoom && name) {\n\t\t\tawait saveRoomName(team.roomId, name, user);\n\t\t}\n\n\t\tif (updateRoom && typeof type !== 'undefined') {\n\t\t\tawait saveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n\t\t}\n\n\t\tawait Team.updateNameAndType(teamId, updateData);\n\t}\n\n\tasync findBySubscribedUserIds(userId: string, callerId?: string): Promise<ITeam[]> {\n\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },\n\t\t}).toArray();\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\n\t\tlet teamIds = unfilteredTeamIds;\n\n\t\tif (callerId) {\n\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray();\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst privateTeamIds = unfilteredTeamIds.filter((teamId) => !publicTeamIds.includes(teamId));\n\n\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },\n\t\t\t}).toArray();\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tteamIds = unfilteredTeamIds.filter((teamId) => visibleTeamIds.includes(teamId));\n\t\t}\n\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\n\t\tconst results = await Team.findByIds(teamIds).toArray();\n\t\treturn results.map((team) => ({\n\t\t\t...team,\n\t\t\tisOwner: ownedTeams.includes(team._id),\n\t\t}));\n\t}\n\n\tsearch(userId: string, term: string | RegExp): Promise<ITeam[]>;\n\n\tsearch(userId: string, term: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tsearch<P extends Document>(userId: string, term: string | RegExp, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync search<P extends Document>(\n\t\tuserId: string,\n\t\tterm: string | RegExp,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\tif (typeof term === 'string') {\n\t\t\tterm = new RegExp(`^${escapeRegExp(term)}`, 'i');\n\t\t}\n\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\n\t\treturn Team.findByNameAndTeamIds(term, teamIds, options || {}).toArray();\n\t}\n\n\tasync list(\n\t\tuid: string,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\t{ sort, query }: IQueryOptions<ITeam> = { sort: {} },\n\t): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tif (teamIds.length === 0) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst { cursor, totalCount } = Team.findByIdsPaginated(\n\t\t\tteamIds,\n\t\t\t{\n\t\t\t\t...(sort && { sort }),\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t\tquery,\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync listAll({ offset, count }: IPaginationOptions = { offset: 0, count: 50 }): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst { cursor, totalCount } = Team.findPaginated(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tlistByNames(names: Array<string>): Promise<ITeam[]>;\n\n\tlistByNames(names: Array<string>, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tlistByNames<P extends Document>(names: Array<string>, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync listByNames<P extends Document>(\n\t\tnames: Array<string>,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<P[] | ITeam[]> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findByNames(names).toArray();\n\t\t}\n\t\treturn Team.findByNames(names, options).toArray();\n\t}\n\n\tasync listByIds(ids: Array<string>, options?: FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn Team.findByIds(ids, options).toArray();\n\t}\n\n\tasync addRooms(uid: string, rooms: Array<string>, teamId: string): Promise<Array<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rooms) {\n\t\t\tthrow new Error('missing-rooms');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\t// at this point, we already checked for the permission\n\t\t// so we just need to check if the user can see the room\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst rids = rooms.filter((rid) => rid && typeof rid === 'string');\n\t\tconst validRooms = await Rooms.findManyByRoomIds(rids).toArray();\n\t\tif (validRooms.length < rids.length) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\t// validate access for every room first\n\t\tfor await (const room of validRooms) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tfor await (const room of validRooms) {\n\t\t\tif (room.teamId) {\n\t\t\t\tthrow new Error('room-already-on-team');\n\t\t\t}\n\n\t\t\tif (!(await Subscriptions.isUserInRole(uid, 'owner', room._id))) {\n\t\t\t\tthrow new Error('error-no-owner-channel');\n\t\t\t}\n\n\t\t\tif (room.t === 'c') {\n\t\t\t\tawait Message.saveSystemMessage('user-added-room-to-team', team.roomId, room.name || '', user);\n\t\t\t}\n\n\t\t\troom.teamId = teamId;\n\t\t}\n\n\t\tawait Rooms.setTeamByIds(rids, teamId);\n\t\treturn validRooms;\n\t}\n\n\tasync removeRoom(uid: string, rid: string, teamId: string, canRemoveAnyRoom = false): Promise<IRoom> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canRemoveAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tif (room.teamId !== teamId) {\n\t\t\tthrow new Error('room-not-on-that-team');\n\t\t}\n\n\t\tdelete room.teamId;\n\t\tdelete room.teamDefault;\n\t\tawait Rooms.unsetTeamById(room._id);\n\n\t\tif (room.t === 'c') {\n\t\t\tawait Message.saveSystemMessage('user-removed-room-from-team', team.roomId, room.name || '', user);\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tasync unsetTeamIdOfRooms(uid: string, teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, { projection: { roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(uid, { projection: { username: 1, name: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tawait Message.saveSystemMessage('user-converted-to-channel', team.roomId, room.name || '', user);\n\n\t\tawait Rooms.unsetTeamId(teamId);\n\t}\n\n\tasync updateRoom(uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom = false): Promise<IRoom> {\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canUpdateAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\t\troom.teamDefault = isDefault;\n\t\tawait Rooms.setTeamDefaultById(rid, isDefault);\n\n\t\tif (isDefault) {\n\t\t\tconst maxNumberOfAutoJoinMembers = settings.get<number>('API_User_Limit');\n\t\t\tconst teamMembers = await this.members(\n\t\t\t\tuid,\n\t\t\t\troom.teamId,\n\t\t\t\ttrue,\n\t\t\t\t{ offset: 0, count: maxNumberOfAutoJoinMembers },\n\t\t\t\t// We should not get the owner of the room, since he is already a member\n\t\t\t\t{ _id: { $ne: room.u._id } },\n\t\t\t);\n\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\t\tif (await addUserToRoom(room._id, m.user, user)) {\n\t\t\t\t\troom.usersCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: FindOptions<ITeamMember>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(uid: string, options: FindOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(\n\t\tuid: string,\n\t\toptions?: undefined | FindOptions<ITeamMember> | FindOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\treturn TeamMember.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn TeamMember.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'type'>>(teamId, {\n\t\t\tprojection: { _id: 1, type: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst { getAllRooms, allowPrivateTeam, name, isDefault } = filter;\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tif (getAllRooms) {\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, {\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t});\n\t\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\t\t\treturn {\n\t\t\t\ttotal,\n\t\t\t\trecords,\n\t\t\t};\n\t\t}\n\n\t\tconst user = await Users.findOneById<{ __rooms: string[] }>(uid, {\n\t\t\tprojection: { __rooms: 1 },\n\t\t});\n\t\tconst userRooms = user?.__rooms;\n\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync listRoomsOfUser(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tallowPrivateTeam: boolean,\n\t\tshowCanDeleteOnly: boolean,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById(teamId, {});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tconst teamRooms: (IRoom & {\n\t\t\tuserCanDelete?: boolean;\n\t\t})[] = await Rooms.findByTeamId(teamId, {\n\t\t\tprojection: { _id: 1, t: 1 },\n\t\t}).toArray();\n\n\t\tlet teamRoomIds: string[];\n\n\t\tif (showCanDeleteOnly) {\n\t\t\tconst canDeleteTeamChannel = await Authorization.hasPermission(userId, 'delete-team-channel', team.roomId);\n\t\t\tconst canDeleteTeamGroup = await Authorization.hasPermission(userId, 'delete-team-group', team.roomId);\n\t\t\tfor await (const room of teamRooms) {\n\t\t\t\tconst isPublicRoom = room.t === 'c';\n\t\t\t\tconst canDeleteTeamRoom = isPublicRoom ? canDeleteTeamChannel : canDeleteTeamGroup;\n\t\t\t\tconst canDeleteRoom =\n\t\t\t\t\tcanDeleteTeamRoom && (await Authorization.hasPermission(userId, isPublicRoom ? 'delete-c' : 'delete-p', room._id));\n\t\t\t\troom.userCanDelete = canDeleteRoom;\n\t\t\t}\n\n\t\t\tteamRoomIds = teamRooms.filter((room) => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map((room) => room._id);\n\t\t} else {\n\t\t\tteamRoomIds = teamRooms.filter((room) => room.t === 'p' || room.t === 'c').map((room) => room._id);\n\t\t}\n\n\t\tconst subscriptionsCursor = Subscriptions.findByUserIdAndRoomIds(userId, teamRoomIds);\n\t\tconst subscriptionRoomIds = (await subscriptionsCursor.toArray()).map((subscription) => subscription.rid);\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByIds(subscriptionRoomIds, {\n\t\t\tskip,\n\t\t\tlimit,\n\t\t});\n\n\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst roomData = await getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n\t\tconst records = [];\n\n\t\tfor (const room of rooms) {\n\t\t\tconst roomInfo = roomData.find((data) => data.rid === room._id);\n\t\t\tif (!roomInfo) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\troom.isLastOwner = roomInfo.userIsLastOwner;\n\t\t\trecords.push(room);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync getMatchingTeamRooms(teamId: string, rids: Array<string>): Promise<Array<string>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tif (!rids) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(rids)) {\n\t\t\tthrow new Error('invalid-list-of-rooms');\n\t\t}\n\n\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },\n\t\t}).toArray();\n\t\treturn rooms.map(({ _id }: { _id: string }) => _id);\n\t}\n\n\tasync getMembersByTeamIds(teamIds: Array<string>, options: FindOptions<ITeamMember>): Promise<Array<ITeamMember>> {\n\t\treturn TeamMember.findByTeamIds(teamIds, options).toArray();\n\t}\n\n\tasync members(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tcanSeeAll: boolean,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\tquery: Filter<IUser> = {},\n\t): Promise<IRecordsWithTotal<ITeamMemberInfo>> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (!isMember && !canSeeAll) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst users = await Users.findActive({ ...query }).toArray();\n\t\tconst userIds = users.map((m) => m._id);\n\t\tconst { cursor, totalCount } = TeamMember.findPaginatedMembersInfoByTeamId(teamId, count, offset, {\n\t\t\tuserId: { $in: userIds },\n\t\t});\n\n\t\tconst results: ITeamMemberInfo[] = [];\n\t\tfor await (const record of cursor) {\n\t\t\tconst user = users.find((u) => u._id === record.userId);\n\t\t\tif (!user) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresults.push({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tstatus: user.status,\n\t\t\t\t\tsettings: user.settings,\n\t\t\t\t},\n\t\t\t\troles: record.roles,\n\t\t\t\tcreatedBy: {\n\t\t\t\t\t_id: record.createdBy._id,\n\t\t\t\t\tusername: record.createdBy.username,\n\t\t\t\t},\n\t\t\t\tcreatedAt: record.createdAt,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await totalCount,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync addMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<void> {\n\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tfor await (const member of members) {\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\t\tawait addUserToRoom(team.roomId, user, createdBy, { skipSystemMessage: false });\n\n\t\t\tif (member.roles) {\n\t\t\t\tawait this.addRolesToMember(teamId, member.userId, member.roles);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateMember(teamId: string, member: ITeamMemberParams): Promise<void> {\n\t\tif (!member.userId) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst memberUpdate: Partial<ITeamMember> = {\n\t\t\troles: member.roles ? member.roles : [],\n\t\t};\n\n\t\tconst team = await Team.findOneById(teamId);\n\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tTeamMember.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate),\n\t\t\tSubscriptions.updateOne(\n\t\t\t\t{\n\t\t\t\t\t'rid': team?.roomId,\n\t\t\t\t\t'u._id': member.userId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: memberUpdate,\n\t\t\t\t},\n\t\t\t),\n\t\t]);\n\n\t\tif (responses[1].modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(team.roomId, member.userId);\n\t\t}\n\t}\n\n\tasync removeMember(teamId: string, userId: string): Promise<void> {\n\t\tawait TeamMember.deleteByUserIdAndTeamId(userId, teamId);\n\t}\n\n\tasync removeMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<boolean> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },\n\t\t}).toArray();\n\t\tconst byUser = await Users.findOneById(uid);\n\n\t\tfor await (const member of members) {\n\t\t\tif (!member.userId) {\n\t\t\t\tthrow new Error('invalid-user');\n\t\t\t}\n\n\t\t\tconst existingMember = await TeamMember.findOneByUserIdAndTeamId(member.userId, team._id);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(team.roomId, member.userId);\n\n\t\t\tif (!existingMember && !subscription) {\n\t\t\t\tthrow new Error('member-does-not-exist');\n\t\t\t}\n\n\t\t\tif (existingMember) {\n\t\t\t\tif (existingMember.roles?.includes('owner')) {\n\t\t\t\t\tconst totalOwners = await TeamMember.countByTeamIdAndRole(team._id, 'owner');\n\t\t\t\t\tif (totalOwners === 1) {\n\t\t\t\t\t\tthrow new Error('last-owner-can-not-be-removed');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait TeamMember.removeById(existingMember._id);\n\t\t\t}\n\n\t\t\tconst removedUser = usersToRemove.find((u) => u._id === (existingMember || member).userId);\n\t\t\tif (removedUser) {\n\t\t\t\tawait removeUserFromRoom(\n\t\t\t\t\tteam.roomId,\n\t\t\t\t\tremovedUser,\n\t\t\t\t\tuid !== member.userId && byUser\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tbyUser,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync insertMemberOnTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait addUserToRoom(team.roomId, user, inviter, { skipSystemMessage: false });\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeMemberFromTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait removeUserFromRoom(team.roomId, user);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeAllMembersFromTeam(teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tawait TeamMember.deleteByTeamId(teamId);\n\t}\n\n\tasync addMember(inviter: Pick<IUser, '_id' | 'username'>, userId: string, teamId: string): Promise<boolean> {\n\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (isAlreadyAMember) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet inviterData = {} as Pick<IUser, '_id' | 'username'>;\n\t\tif (inviter) {\n\t\t\tinviterData = { _id: inviter._id, username: inviter.username };\n\t\t}\n\n\t\tawait TeamMember.createOneByTeamIdAndUserId(teamId, userId, inviterData);\n\n\t\tawait this.addMembersToDefaultRooms(inviter, teamId, [{ userId }]);\n\n\t\treturn true;\n\t}\n\n\tgetAllPublicTeams(): Promise<ITeam[]>;\n\n\tgetAllPublicTeams(options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tasync getAllPublicTeams(options?: undefined | FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn options ? Team.findByType(TEAM_TYPE.PUBLIC, options).toArray() : Team.findByType(TEAM_TYPE.PUBLIC).toArray();\n\t}\n\n\tasync getOneById(teamId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findOneById(teamId);\n\t\t}\n\t\treturn Team.findOneById(teamId, options);\n\t}\n\n\tasync getOneByName(teamName: string | RegExp): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options?: undefined | FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (!options) {\n\t\t\treturn Team.findOneByName(teamName);\n\t\t}\n\t\treturn Team.findOneByName(teamName, options);\n\t}\n\n\tasync getOneByMainRoomId(roomId: string): Promise<Pick<ITeam, '_id'> | null> {\n\t\treturn Team.findOneByMainRoomId<Pick<ITeam, '_id'>>(roomId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t}\n\n\tasync getOneByRoomId(roomId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { teamId: 1 } });\n\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\n\t\treturn Team.findOneById(room.teamId, options);\n\t}\n\n\tasync addRolesToMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync removeRolesFromMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync getInfoByName(teamName: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\tname: teamName,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync getInfoById(teamId: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\t_id: teamId,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync addMembersToDefaultRooms(\n\t\tinviter: Pick<IUser, '_id' | 'username'>,\n\t\tteamId: string,\n\t\tmembers: Array<Pick<ITeamMember, 'userId'>>,\n\t): Promise<void> {\n\t\tconst defaultRooms = await Rooms.findDefaultRoomsForTeam(teamId).toArray();\n\t\tconst users = await Users.findActiveByIds(members.map((member) => member.userId)).toArray();\n\n\t\tdefaultRooms.map(async (room) => {\n\t\t\t// at this point, users are already part of the team so we won't check for membership\n\t\t\tfor await (const user of users) {\n\t\t\t\t// add each user to the default room\n\t\t\t\tawait addUserToRoom(room._id, user, inviter, { skipSystemMessage: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tasync deleteById(teamId: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneById(teamId));\n\t}\n\n\tasync deleteByName(teamName: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneByName(teamName));\n\t}\n\n\tasync getStatistics(): Promise<ITeamStats> {\n\t\treturn {\n\t\t\ttotalTeams: await Team.estimatedDocumentCount(),\n\t\t\ttotalRoomsInsideTeams: await Rooms.countRoomsInsideTeams(),\n\t\t\ttotalDefaultRoomsInsideTeams: await Rooms.countRoomsInsideTeams(true),\n\t\t};\n\t}\n\n\tasync autocomplete(uid: string, name: string): Promise<ITeamAutocompleteResult[]> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\n\t\tconst rooms = await Rooms.find<ITeamAutocompleteResult>(\n\t\t\t{\n\t\t\t\tteamMain: true,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_id: { $in: subscriptionIds },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tfname: 1,\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t\tlimit: 10,\n\t\t\t\tsort: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tfname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\treturn rooms;\n\t}\n\n\tprivate getParentRoom(team: AtLeast<ITeam, 'roomId'>): Promise<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'> | null> {\n\t\treturn Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'>>(team.roomId, {\n\t\t\tprojection: { name: 1, fname: 1, t: 1, sidepanel: 1 },\n\t\t});\n\t}\n\n\tasync getRoomInfo(\n\t\troom: AtLeast<IRoom, 'teamId' | 'teamMain' | '_id'>,\n\t): Promise<{ team?: Pick<ITeam, 'name' | 'roomId' | 'type'>; parentRoom?: Pick<IRoom, 'name' | 'fname' | 't' | '_id'> }> {\n\t\tif (!room.teamId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst team = await Team.findOneById(room.teamId, { projection: { _id: 1, name: 1, roomId: 1, type: 1 } });\n\t\tif (!team) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (room.teamMain) {\n\t\t\treturn { team };\n\t\t}\n\n\t\tconst parentRoom = await this.getParentRoom(team);\n\t\treturn { team, ...(parentRoom && { parentRoom }) };\n\t}\n\n\t// Returns the list of rooms and discussions a user has access to inside a team\n\t// Rooms returned are a composition of the rooms the user is in + public rooms + discussions from the main room (if any)\n\tasync listChildren(\n\t\tuserId: string,\n\t\tteam: AtLeast<ITeam, '_id' | 'roomId' | 'type'>,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\tsort?: Record<string, 1 | -1>,\n\t\tskip = 0,\n\t\tlimit = 10,\n\t): Promise<{ total: number; data: IRoom[] }> {\n\t\tconst mainRoom = await Rooms.findOneById(team.roomId, { projection: { _id: 1 } });\n\t\tif (!mainRoom) {\n\t\t\tthrow new Error('error-invalid-team-no-main-room');\n\t\t}\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, team._id, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\tthrow new Error('error-invalid-team-not-a-member');\n\t\t}\n\n\t\tconst [{ totalCount: [{ count: total }] = [], paginatedResults: data = [] }] =\n\t\t\t(await Rooms.findChildrenOfTeam(team._id, mainRoom._id, userId, filter, type, { skip, limit, sort }).toArray()) || [];\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\tdata,\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/team/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/team/service.ts","inputSourceMap":{"version":3,"file":"server/services/team/service.ts","sourceRoot":"","sources":["server/services/team/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Room, Authorization, Message, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type {\n\tIListRoomsFilter,\n\tITeamAutocompleteResult,\n\tITeamCreateParams,\n\tITeamInfo,\n\tITeamMemberInfo,\n\tITeamMemberParams,\n\tITeamService,\n\tITeamUpdateData,\n} from '@rocket.chat/core-services';\nimport { TEAM_TYPE } from '@rocket.chat/core-typings';\nimport type {\n\tIRoom,\n\tIUser,\n\tISubscription,\n\tIPaginationOptions,\n\tIQueryOptions,\n\tIRecordsWithTotal,\n\tITeam,\n\tITeamMember,\n\tITeamStats,\n\tAtLeast,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport { Team, Rooms, Subscriptions, Users, TeamMember } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { Document, FindOptions, Filter } from 'mongodb';\n\nimport { saveRoomName } from '../../../app/channel-settings/server';\nimport { saveRoomType } from '../../../app/channel-settings/server/functions/saveRoomType';\nimport { addUserToRoom } from '../../../app/lib/server/functions/addUserToRoom';\nimport { checkUsernameAvailability } from '../../../app/lib/server/functions/checkUsernameAvailability';\nimport { getSubscribedRoomsForUserWithDetails } from '../../../app/lib/server/functions/getRoomsWithSingleOwner';\nimport { removeUserFromRoom } from '../../../app/lib/server/functions/removeUserFromRoom';\nimport { notifyOnSubscriptionChangedByRoomIdAndUserId } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\n\nexport class TeamService extends ServiceClassInternal implements ITeamService {\n\tprotected name = 'team';\n\n\tasync create(\n\t\tuid: string,\n\t\t{ team, room = { name: team.name, extraData: {} }, members, owner, sidepanel }: ITeamCreateParams,\n\t): Promise<ITeam> {\n\t\tif (!(await checkUsernameAvailability(team.name))) {\n\t\t\tthrow new Error('team-name-already-exists');\n\t\t}\n\n\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tif (existingRoom && existingRoom._id !== room.id) {\n\t\t\tthrow new Error('room-name-already-exists');\n\t\t}\n\n\t\tconst createdBy = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(uid, {\n\t\t\tprojection: { username: 1 },\n\t\t});\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\t// TODO add validations to `data` and `members`\n\n\t\tconst membersResult =\n\t\t\t!members || !Array.isArray(members) || members.length === 0\n\t\t\t\t? []\n\t\t\t\t: await Users.findActiveByIdsOrUsernames(members, {\n\t\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t\t}).toArray();\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\t\tconst memberIds = membersResult.map(({ _id }) => _id);\n\n\t\tconst teamData = {\n\t\t\t...team,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t\t_updatedAt: new Date(), // TODO how to avoid having to do this?\n\t\t\troomId: '', // this will be populated at the end\n\t\t};\n\n\t\ttry {\n\t\t\tconst roomId =\n\t\t\t\troom.id ||\n\t\t\t\t(\n\t\t\t\t\tawait Room.create(owner || uid, {\n\t\t\t\t\t\t...room,\n\t\t\t\t\t\ttype: team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c',\n\t\t\t\t\t\tname: team.name,\n\t\t\t\t\t\tmembers: memberUsernames as string[],\n\t\t\t\t\t\textraData: {\n\t\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsidepanel,\n\t\t\t\t\t})\n\t\t\t\t)._id;\n\n\t\t\tconst result = await Team.insertOne(teamData);\n\t\t\tconst teamId = result.insertedId;\n\t\t\t// the same uid can be passed at 3 positions: owner, member list or via caller\n\t\t\t// if the owner is present, remove it from the members list\n\t\t\t// if the owner is not present, remove the caller from the members list\n\t\t\tconst excludeFromMembers = owner ? [owner] : [uid];\n\n\t\t\t// filter empty strings and falsy values from members list\n\t\t\tconst membersList: Array<InsertionModel<ITeamMember>> =\n\t\t\t\tmemberIds\n\t\t\t\t\t?.filter(Boolean)\n\t\t\t\t\t.filter((memberId) => !excludeFromMembers.includes(memberId))\n\t\t\t\t\t.map((memberId) => ({\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tuserId: memberId,\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tcreatedBy,\n\t\t\t\t\t})) || [];\n\n\t\t\tmembersList.push({\n\t\t\t\tteamId,\n\t\t\t\tuserId: owner || uid,\n\t\t\t\troles: ['owner'],\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy,\n\t\t\t});\n\n\t\t\tawait TeamMember.insertMany(membersList);\n\n\t\t\tawait Rooms.setTeamMainById(roomId, teamId);\n\t\t\tawait Team.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\tif (room.id) {\n\t\t\t\tawait Message.saveSystemMessage('user-converted-to-team', roomId, team.name, createdBy);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new Error('error-team-creation');\n\t\t}\n\t}\n\n\tasync update(uid: string, teamId: string, updateData: ITeamUpdateData): Promise<void> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, updateRoom = true } = updateData;\n\n\t\tif (updateRoom && name) {\n\t\t\tawait saveRoomName(team.roomId, name, user);\n\t\t}\n\n\t\tif (updateRoom && typeof type !== 'undefined') {\n\t\t\tawait saveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n\t\t}\n\n\t\tawait Team.updateNameAndType(teamId, updateData);\n\t}\n\n\tasync findBySubscribedUserIds(userId: string, callerId?: string): Promise<ITeam[]> {\n\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },\n\t\t}).toArray();\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\n\t\tlet teamIds = unfilteredTeamIds;\n\n\t\tif (callerId) {\n\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray();\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst privateTeamIds = unfilteredTeamIds.filter((teamId) => !publicTeamIds.includes(teamId));\n\n\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },\n\t\t\t}).toArray();\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tteamIds = unfilteredTeamIds.filter((teamId) => visibleTeamIds.includes(teamId));\n\t\t}\n\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\n\t\tconst results = await Team.findByIds(teamIds).toArray();\n\t\treturn results.map((team) => ({\n\t\t\t...team,\n\t\t\tisOwner: ownedTeams.includes(team._id),\n\t\t}));\n\t}\n\n\tsearch(userId: string, term: string | RegExp): Promise<ITeam[]>;\n\n\tsearch(userId: string, term: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tsearch<P extends Document>(userId: string, term: string | RegExp, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync search<P extends Document>(\n\t\tuserId: string,\n\t\tterm: string | RegExp,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\tif (typeof term === 'string') {\n\t\t\tterm = new RegExp(`^${escapeRegExp(term)}`, 'i');\n\t\t}\n\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\n\t\treturn Team.findByNameAndTeamIds(term, teamIds, options || {}).toArray();\n\t}\n\n\tasync list(\n\t\tuid: string,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\t{ sort, query }: IQueryOptions<ITeam> = { sort: {} },\n\t): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tif (teamIds.length === 0) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst { cursor, totalCount } = Team.findByIdsPaginated(\n\t\t\tteamIds,\n\t\t\t{\n\t\t\t\t...(sort && { sort }),\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t\tquery,\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync listAll({ offset, count }: IPaginationOptions = { offset: 0, count: 50 }): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst { cursor, totalCount } = Team.findPaginated(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tlistByNames(names: Array<string>): Promise<ITeam[]>;\n\n\tlistByNames(names: Array<string>, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tlistByNames<P extends Document>(names: Array<string>, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync listByNames<P extends Document>(\n\t\tnames: Array<string>,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<P[] | ITeam[]> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findByNames(names).toArray();\n\t\t}\n\t\treturn Team.findByNames(names, options).toArray();\n\t}\n\n\tasync listByIds(ids: Array<string>, options?: FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn Team.findByIds(ids, options).toArray();\n\t}\n\n\tasync addRooms(uid: string, rooms: Array<string>, teamId: string): Promise<Array<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rooms) {\n\t\t\tthrow new Error('missing-rooms');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\t// at this point, we already checked for the permission\n\t\t// so we just need to check if the user can see the room\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst rids = rooms.filter((rid) => rid && typeof rid === 'string');\n\t\tconst validRooms = await Rooms.findManyByRoomIds(rids).toArray();\n\t\tif (validRooms.length < rids.length) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\t// validate access for every room first\n\t\tfor await (const room of validRooms) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tfor await (const room of validRooms) {\n\t\t\tif (room.teamId) {\n\t\t\t\tthrow new Error('room-already-on-team');\n\t\t\t}\n\n\t\t\tif (!(await Subscriptions.isUserInRole(uid, 'owner', room._id))) {\n\t\t\t\tthrow new Error('error-no-owner-channel');\n\t\t\t}\n\n\t\t\tif (room.t === 'c') {\n\t\t\t\tawait Message.saveSystemMessage('user-added-room-to-team', team.roomId, room.name || '', user);\n\t\t\t}\n\n\t\t\troom.teamId = teamId;\n\t\t}\n\n\t\tawait Rooms.setTeamByIds(rids, teamId);\n\t\treturn validRooms;\n\t}\n\n\tasync removeRoom(uid: string, rid: string, teamId: string, canRemoveAnyRoom = false): Promise<IRoom> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canRemoveAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tif (room.teamId !== teamId) {\n\t\t\tthrow new Error('room-not-on-that-team');\n\t\t}\n\n\t\tdelete room.teamId;\n\t\tdelete room.teamDefault;\n\t\tawait Rooms.unsetTeamById(room._id);\n\n\t\tif (room.t === 'c') {\n\t\t\tawait Message.saveSystemMessage('user-removed-room-from-team', team.roomId, room.name || '', user);\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tasync unsetTeamIdOfRooms(uid: string, teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, { projection: { roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(uid, { projection: { username: 1, name: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tawait Message.saveSystemMessage('user-converted-to-channel', team.roomId, room.name || '', user);\n\n\t\tawait Rooms.unsetTeamId(teamId);\n\t}\n\n\tasync updateRoom(uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom = false): Promise<IRoom> {\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canUpdateAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\t\troom.teamDefault = isDefault;\n\t\tawait Rooms.setTeamDefaultById(rid, isDefault);\n\n\t\tif (isDefault) {\n\t\t\tconst maxNumberOfAutoJoinMembers = settings.get<number>('API_User_Limit');\n\t\t\tconst teamMembers = await this.members(\n\t\t\t\tuid,\n\t\t\t\troom.teamId,\n\t\t\t\ttrue,\n\t\t\t\t{ offset: 0, count: maxNumberOfAutoJoinMembers },\n\t\t\t\t// We should not get the owner of the room, since he is already a member\n\t\t\t\t{ _id: { $ne: room.u._id } },\n\t\t\t);\n\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\t\tif (await addUserToRoom(room._id, m.user, user)) {\n\t\t\t\t\troom.usersCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: FindOptions<ITeamMember>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(uid: string, options: FindOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(\n\t\tuid: string,\n\t\toptions?: undefined | FindOptions<ITeamMember> | FindOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\treturn TeamMember.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn TeamMember.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'type'>>(teamId, {\n\t\t\tprojection: { _id: 1, type: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst { getAllRooms, allowPrivateTeam, name, isDefault } = filter;\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tif (getAllRooms) {\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, {\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t});\n\t\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\t\t\treturn {\n\t\t\t\ttotal,\n\t\t\t\trecords,\n\t\t\t};\n\t\t}\n\n\t\tconst user = await Users.findOneById<{ __rooms: string[] }>(uid, {\n\t\t\tprojection: { __rooms: 1 },\n\t\t});\n\t\tconst userRooms = user?.__rooms;\n\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync listRoomsOfUser(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tallowPrivateTeam: boolean,\n\t\tshowCanDeleteOnly: boolean,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById(teamId, {});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tconst teamRooms: (IRoom & {\n\t\t\tuserCanDelete?: boolean;\n\t\t})[] = await Rooms.findByTeamId(teamId, {\n\t\t\tprojection: { _id: 1, t: 1 },\n\t\t}).toArray();\n\n\t\tlet teamRoomIds: string[];\n\n\t\tif (showCanDeleteOnly) {\n\t\t\tconst canDeleteTeamChannel = await Authorization.hasPermission(userId, 'delete-team-channel', team.roomId);\n\t\t\tconst canDeleteTeamGroup = await Authorization.hasPermission(userId, 'delete-team-group', team.roomId);\n\t\t\tfor await (const room of teamRooms) {\n\t\t\t\tconst isPublicRoom = room.t === 'c';\n\t\t\t\tconst canDeleteTeamRoom = isPublicRoom ? canDeleteTeamChannel : canDeleteTeamGroup;\n\t\t\t\tconst canDeleteRoom =\n\t\t\t\t\tcanDeleteTeamRoom && (await Authorization.hasPermission(userId, isPublicRoom ? 'delete-c' : 'delete-p', room._id));\n\t\t\t\troom.userCanDelete = canDeleteRoom;\n\t\t\t}\n\n\t\t\tteamRoomIds = teamRooms.filter((room) => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map((room) => room._id);\n\t\t} else {\n\t\t\tteamRoomIds = teamRooms.filter((room) => room.t === 'p' || room.t === 'c').map((room) => room._id);\n\t\t}\n\n\t\tconst subscriptionsCursor = Subscriptions.findByUserIdAndRoomIds(userId, teamRoomIds);\n\t\tconst subscriptionRoomIds = (await subscriptionsCursor.toArray()).map((subscription) => subscription.rid);\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByIds(subscriptionRoomIds, {\n\t\t\tskip,\n\t\t\tlimit,\n\t\t});\n\n\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst roomData = await getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n\t\tconst records = [];\n\n\t\tfor (const room of rooms) {\n\t\t\tconst roomInfo = roomData.find((data) => data.rid === room._id);\n\t\t\tif (!roomInfo) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\troom.isLastOwner = roomInfo.userIsLastOwner;\n\t\t\trecords.push(room);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync getMatchingTeamRooms(teamId: string, rids: Array<string>): Promise<Array<string>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tif (!rids) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(rids)) {\n\t\t\tthrow new Error('invalid-list-of-rooms');\n\t\t}\n\n\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },\n\t\t}).toArray();\n\t\treturn rooms.map(({ _id }: { _id: string }) => _id);\n\t}\n\n\tasync getMembersByTeamIds(teamIds: Array<string>, options: FindOptions<ITeamMember>): Promise<Array<ITeamMember>> {\n\t\treturn TeamMember.findByTeamIds(teamIds, options).toArray();\n\t}\n\n\tasync members(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tcanSeeAll: boolean,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\tquery: Filter<IUser> = {},\n\t): Promise<IRecordsWithTotal<ITeamMemberInfo>> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (!isMember && !canSeeAll) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst users = await Users.findActive({ ...query }).toArray();\n\t\tconst userIds = users.map((m) => m._id);\n\t\tconst { cursor, totalCount } = TeamMember.findPaginatedMembersInfoByTeamId(teamId, count, offset, {\n\t\t\tuserId: { $in: userIds },\n\t\t});\n\n\t\tconst results: ITeamMemberInfo[] = [];\n\t\tfor await (const record of cursor) {\n\t\t\tconst user = users.find((u) => u._id === record.userId);\n\t\t\tif (!user) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresults.push({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tstatus: user.status,\n\t\t\t\t\tsettings: user.settings,\n\t\t\t\t},\n\t\t\t\troles: record.roles,\n\t\t\t\tcreatedBy: {\n\t\t\t\t\t_id: record.createdBy._id,\n\t\t\t\t\tusername: record.createdBy.username,\n\t\t\t\t},\n\t\t\t\tcreatedAt: record.createdAt,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await totalCount,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync addMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<void> {\n\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tfor await (const member of members) {\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\t\tawait addUserToRoom(team.roomId, user, createdBy, { skipSystemMessage: false });\n\n\t\t\tif (member.roles) {\n\t\t\t\tawait this.addRolesToMember(teamId, member.userId, member.roles);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateMember(teamId: string, member: ITeamMemberParams): Promise<void> {\n\t\tif (!member.userId) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst memberUpdate: Partial<ITeamMember> = {\n\t\t\troles: member.roles ? member.roles : [],\n\t\t};\n\n\t\tconst team = await Team.findOneById(teamId);\n\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tTeamMember.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate),\n\t\t\tSubscriptions.updateOne(\n\t\t\t\t{\n\t\t\t\t\t'rid': team?.roomId,\n\t\t\t\t\t'u._id': member.userId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: memberUpdate,\n\t\t\t\t},\n\t\t\t),\n\t\t]);\n\n\t\tif (responses[1].modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(team.roomId, member.userId);\n\t\t}\n\t}\n\n\tasync removeMember(teamId: string, userId: string): Promise<void> {\n\t\tawait TeamMember.deleteByUserIdAndTeamId(userId, teamId);\n\t}\n\n\tasync removeMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<boolean> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },\n\t\t}).toArray();\n\t\tconst byUser = await Users.findOneById(uid);\n\n\t\tfor await (const member of members) {\n\t\t\tif (!member.userId) {\n\t\t\t\tthrow new Error('invalid-user');\n\t\t\t}\n\n\t\t\tconst existingMember = await TeamMember.findOneByUserIdAndTeamId(member.userId, team._id);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(team.roomId, member.userId);\n\n\t\t\tif (!existingMember && !subscription) {\n\t\t\t\tthrow new Error('member-does-not-exist');\n\t\t\t}\n\n\t\t\tif (existingMember) {\n\t\t\t\tif (existingMember.roles?.includes('owner')) {\n\t\t\t\t\tconst totalOwners = await TeamMember.countByTeamIdAndRole(team._id, 'owner');\n\t\t\t\t\tif (totalOwners === 1) {\n\t\t\t\t\t\tthrow new Error('last-owner-can-not-be-removed');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait TeamMember.removeById(existingMember._id);\n\t\t\t}\n\n\t\t\tconst removedUser = usersToRemove.find((u) => u._id === (existingMember || member).userId);\n\t\t\tif (removedUser) {\n\t\t\t\tawait removeUserFromRoom(\n\t\t\t\t\tteam.roomId,\n\t\t\t\t\tremovedUser,\n\t\t\t\t\tuid !== member.userId && byUser\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tbyUser,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync insertMemberOnTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait addUserToRoom(team.roomId, user, inviter, { skipSystemMessage: false });\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeMemberFromTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait removeUserFromRoom(team.roomId, user);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeAllMembersFromTeam(teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tawait TeamMember.deleteByTeamId(teamId);\n\t}\n\n\tasync addMember(inviter: Pick<IUser, '_id' | 'username'>, userId: string, teamId: string): Promise<boolean> {\n\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (isAlreadyAMember) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet inviterData = {} as Pick<IUser, '_id' | 'username'>;\n\t\tif (inviter) {\n\t\t\tinviterData = { _id: inviter._id, username: inviter.username };\n\t\t}\n\n\t\tawait TeamMember.createOneByTeamIdAndUserId(teamId, userId, inviterData);\n\n\t\tawait this.addMembersToDefaultRooms(inviter, teamId, [{ userId }]);\n\n\t\treturn true;\n\t}\n\n\tgetAllPublicTeams(): Promise<ITeam[]>;\n\n\tgetAllPublicTeams(options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tasync getAllPublicTeams(options?: undefined | FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn options ? Team.findByType(TEAM_TYPE.PUBLIC, options).toArray() : Team.findByType(TEAM_TYPE.PUBLIC).toArray();\n\t}\n\n\tasync getOneById(teamId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findOneById(teamId);\n\t\t}\n\t\treturn Team.findOneById(teamId, options);\n\t}\n\n\tasync getOneByName(teamName: string | RegExp): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options?: undefined | FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (!options) {\n\t\t\treturn Team.findOneByName(teamName);\n\t\t}\n\t\treturn Team.findOneByName(teamName, options);\n\t}\n\n\tasync getOneByMainRoomId(roomId: string): Promise<Pick<ITeam, '_id'> | null> {\n\t\treturn Team.findOneByMainRoomId<Pick<ITeam, '_id'>>(roomId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t}\n\n\tasync getOneByRoomId(roomId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { teamId: 1 } });\n\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\n\t\treturn Team.findOneById(room.teamId, options);\n\t}\n\n\tasync addRolesToMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync removeRolesFromMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync getInfoByName(teamName: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\tname: teamName,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync getInfoById(teamId: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\t_id: teamId,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync addMembersToDefaultRooms(\n\t\tinviter: Pick<IUser, '_id' | 'username'>,\n\t\tteamId: string,\n\t\tmembers: Array<Pick<ITeamMember, 'userId'>>,\n\t): Promise<void> {\n\t\tconst defaultRooms = await Rooms.findDefaultRoomsForTeam(teamId).toArray();\n\t\tconst users = await Users.findActiveByIds(members.map((member) => member.userId)).toArray();\n\n\t\tdefaultRooms.map(async (room) => {\n\t\t\t// at this point, users are already part of the team so we won't check for membership\n\t\t\tfor await (const user of users) {\n\t\t\t\t// add each user to the default room\n\t\t\t\tawait addUserToRoom(room._id, user, inviter, { skipSystemMessage: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tasync deleteById(teamId: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneById(teamId));\n\t}\n\n\tasync deleteByName(teamName: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneByName(teamName));\n\t}\n\n\tasync getStatistics(): Promise<ITeamStats> {\n\t\treturn {\n\t\t\ttotalTeams: await Team.estimatedDocumentCount(),\n\t\t\ttotalRoomsInsideTeams: await Rooms.countRoomsInsideTeams(),\n\t\t\ttotalDefaultRoomsInsideTeams: await Rooms.countRoomsInsideTeams(true),\n\t\t};\n\t}\n\n\tasync autocomplete(uid: string, name: string): Promise<ITeamAutocompleteResult[]> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\n\t\tconst rooms = await Rooms.find<ITeamAutocompleteResult>(\n\t\t\t{\n\t\t\t\tteamMain: true,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_id: { $in: subscriptionIds },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tfname: 1,\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t\tlimit: 10,\n\t\t\t\tsort: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tfname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\treturn rooms;\n\t}\n\n\tprivate getParentRoom(team: AtLeast<ITeam, 'roomId'>): Promise<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'> | null> {\n\t\treturn Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'>>(team.roomId, {\n\t\t\tprojection: { name: 1, fname: 1, t: 1, sidepanel: 1 },\n\t\t});\n\t}\n\n\tasync getRoomInfo(\n\t\troom: AtLeast<IRoom, 'teamId' | 'teamMain' | '_id'>,\n\t): Promise<{ team?: Pick<ITeam, 'name' | 'roomId' | 'type'>; parentRoom?: Pick<IRoom, 'name' | 'fname' | 't' | '_id'> }> {\n\t\tif (!room.teamId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst team = await Team.findOneById(room.teamId, { projection: { _id: 1, name: 1, roomId: 1, type: 1 } });\n\t\tif (!team) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (room.teamMain) {\n\t\t\treturn { team };\n\t\t}\n\n\t\tconst parentRoom = await this.getParentRoom(team);\n\t\treturn { team, ...(parentRoom && { parentRoom }) };\n\t}\n\n\t// Returns the list of rooms and discussions a user has access to inside a team\n\t// Rooms returned are a composition of the rooms the user is in + public rooms + discussions from the main room (if any)\n\tasync listChildren(\n\t\tuserId: string,\n\t\tteam: AtLeast<ITeam, '_id' | 'roomId' | 'type'>,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\tsort?: Record<string, 1 | -1>,\n\t\tskip = 0,\n\t\tlimit = 10,\n\t): Promise<{ total: number; data: IRoom[] }> {\n\t\tconst mainRoom = await Rooms.findOneById(team.roomId, { projection: { _id: 1 } });\n\t\tif (!mainRoom) {\n\t\t\tthrow new Error('error-invalid-team-no-main-room');\n\t\t}\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, team._id, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\tthrow new Error('error-invalid-team-not-a-member');\n\t\t}\n\n\t\tconst [{ totalCount: [{ count: total }] = [], paginatedResults: data = [] }] =\n\t\t\t(await Rooms.findChildrenOfTeam(team._id, mainRoom._id, userId, filter, type, { skip, limit, sort }).toArray()) || [];\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\tdata,\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      TeamService: () => TeamService\n    });\n    let Room, Authorization, Message, ServiceClassInternal;\n    module.link(\"@rocket.chat/core-services\", {\n      Room(v) {\n        Room = v;\n      },\n      Authorization(v) {\n        Authorization = v;\n      },\n      Message(v) {\n        Message = v;\n      },\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let TEAM_TYPE;\n    module.link(\"@rocket.chat/core-typings\", {\n      TEAM_TYPE(v) {\n        TEAM_TYPE = v;\n      }\n    }, 1);\n    let Team, Rooms, Subscriptions, Users, TeamMember;\n    module.link(\"@rocket.chat/models\", {\n      Team(v) {\n        Team = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      TeamMember(v) {\n        TeamMember = v;\n      }\n    }, 2);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 3);\n    let saveRoomName;\n    module.link(\"../../../app/channel-settings/server\", {\n      saveRoomName(v) {\n        saveRoomName = v;\n      }\n    }, 4);\n    let saveRoomType;\n    module.link(\"../../../app/channel-settings/server/functions/saveRoomType\", {\n      saveRoomType(v) {\n        saveRoomType = v;\n      }\n    }, 5);\n    let addUserToRoom;\n    module.link(\"../../../app/lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 6);\n    let checkUsernameAvailability;\n    module.link(\"../../../app/lib/server/functions/checkUsernameAvailability\", {\n      checkUsernameAvailability(v) {\n        checkUsernameAvailability = v;\n      }\n    }, 7);\n    let getSubscribedRoomsForUserWithDetails;\n    module.link(\"../../../app/lib/server/functions/getRoomsWithSingleOwner\", {\n      getSubscribedRoomsForUserWithDetails(v) {\n        getSubscribedRoomsForUserWithDetails = v;\n      }\n    }, 8);\n    let removeUserFromRoom;\n    module.link(\"../../../app/lib/server/functions/removeUserFromRoom\", {\n      removeUserFromRoom(v) {\n        removeUserFromRoom = v;\n      }\n    }, 9);\n    let notifyOnSubscriptionChangedByRoomIdAndUserId;\n    module.link(\"../../../app/lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedByRoomIdAndUserId(v) {\n        notifyOnSubscriptionChangedByRoomIdAndUserId = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class TeamService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'team';\n      }\n      async create(uid, _ref) {\n        let {\n          team,\n          room = {\n            name: team.name,\n            extraData: {}\n          },\n          members,\n          owner,\n          sidepanel\n        } = _ref;\n        if (!(await checkUsernameAvailability(team.name))) {\n          throw new Error('team-name-already-exists');\n        }\n        const existingRoom = await Rooms.findOneByName(team.name, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (existingRoom && existingRoom._id !== room.id) {\n          throw new Error('room-name-already-exists');\n        }\n        const createdBy = await Users.findOneById(uid, {\n          projection: {\n            username: 1\n          }\n        });\n        if (!createdBy) {\n          throw new Error('invalid-user');\n        }\n        // TODO add validations to `data` and `members`\n        const membersResult = !members || !Array.isArray(members) || members.length === 0 ? [] : await Users.findActiveByIdsOrUsernames(members, {\n          projection: {\n            username: 1\n          }\n        }).toArray();\n        const memberUsernames = membersResult.map(_ref2 => {\n          let {\n            username\n          } = _ref2;\n          return username;\n        });\n        const memberIds = membersResult.map(_ref3 => {\n          let {\n            _id\n          } = _ref3;\n          return _id;\n        });\n        const teamData = _objectSpread(_objectSpread({}, team), {}, {\n          createdAt: new Date(),\n          createdBy,\n          _updatedAt: new Date(),\n          // TODO how to avoid having to do this?\n          roomId: '' // this will be populated at the end\n        });\n        try {\n          const roomId = room.id || (await Room.create(owner || uid, _objectSpread(_objectSpread({}, room), {}, {\n            type: team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c',\n            name: team.name,\n            members: memberUsernames,\n            extraData: _objectSpread({}, room.extraData),\n            sidepanel\n          })))._id;\n          const result = await Team.insertOne(teamData);\n          const teamId = result.insertedId;\n          // the same uid can be passed at 3 positions: owner, member list or via caller\n          // if the owner is present, remove it from the members list\n          // if the owner is not present, remove the caller from the members list\n          const excludeFromMembers = owner ? [owner] : [uid];\n          // filter empty strings and falsy values from members list\n          const membersList = (memberIds === null || memberIds === void 0 ? void 0 : memberIds.filter(Boolean).filter(memberId => !excludeFromMembers.includes(memberId)).map(memberId => ({\n            teamId,\n            userId: memberId,\n            createdAt: new Date(),\n            createdBy\n          }))) || [];\n          membersList.push({\n            teamId,\n            userId: owner || uid,\n            roles: ['owner'],\n            createdAt: new Date(),\n            createdBy\n          });\n          await TeamMember.insertMany(membersList);\n          await Rooms.setTeamMainById(roomId, teamId);\n          await Team.updateMainRoomForTeam(teamId, roomId);\n          teamData.roomId = roomId;\n          if (room.id) {\n            await Message.saveSystemMessage('user-converted-to-team', roomId, team.name, createdBy);\n          }\n          return _objectSpread({\n            _id: teamId\n          }, teamData);\n        } catch (e) {\n          throw new Error('error-team-creation');\n        }\n      }\n      async update(uid, teamId, updateData) {\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            roomId: 1\n          }\n        });\n        if (!team) {\n          return;\n        }\n        const user = await Users.findOneById(uid);\n        if (!user) {\n          return;\n        }\n        const {\n          name,\n          type,\n          updateRoom = true\n        } = updateData;\n        if (updateRoom && name) {\n          await saveRoomName(team.roomId, name, user);\n        }\n        if (updateRoom && typeof type !== 'undefined') {\n          await saveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n        }\n        await Team.updateNameAndType(teamId, updateData);\n      }\n      async findBySubscribedUserIds(userId, callerId) {\n        const unfilteredTeams = await TeamMember.findByUserId(userId, {\n          projection: {\n            teamId: 1,\n            roles: 1\n          }\n        }).toArray();\n        const unfilteredTeamIds = unfilteredTeams.map(_ref4 => {\n          let {\n            teamId\n          } = _ref4;\n          return teamId;\n        });\n        let teamIds = unfilteredTeamIds;\n        if (callerId) {\n          const publicTeams = await Team.findByIdsAndType(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n            projection: {\n              _id: 1\n            }\n          }).toArray();\n          const publicTeamIds = publicTeams.map(_ref5 => {\n            let {\n              _id\n            } = _ref5;\n            return _id;\n          });\n          const privateTeamIds = unfilteredTeamIds.filter(teamId => !publicTeamIds.includes(teamId));\n          const privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n            projection: {\n              teamId: 1\n            }\n          }).toArray();\n          const visibleTeamIds = privateTeams.map(_ref6 => {\n            let {\n              teamId\n            } = _ref6;\n            return teamId;\n          }).concat(publicTeamIds);\n          teamIds = unfilteredTeamIds.filter(teamId => visibleTeamIds.includes(teamId));\n        }\n        const ownedTeams = unfilteredTeams.filter(_ref7 => {\n          let {\n            roles = []\n          } = _ref7;\n          return roles.includes('owner');\n        }).map(_ref8 => {\n          let {\n            teamId\n          } = _ref8;\n          return teamId;\n        });\n        const results = await Team.findByIds(teamIds).toArray();\n        return results.map(team => _objectSpread(_objectSpread({}, team), {}, {\n          isOwner: ownedTeams.includes(team._id)\n        }));\n      }\n      async search(userId, term, options) {\n        if (typeof term === 'string') {\n          term = new RegExp(\"^\".concat(escapeRegExp(term)), 'i');\n        }\n        const userTeams = await TeamMember.findByUserId(userId, {\n          projection: {\n            teamId: 1\n          }\n        }).toArray();\n        const teamIds = userTeams.map(_ref9 => {\n          let {\n            teamId\n          } = _ref9;\n          return teamId;\n        });\n        return Team.findByNameAndTeamIds(term, teamIds, options || {}).toArray();\n      }\n      async list(uid) {\n        let {\n          offset,\n          count\n        } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          offset: 0,\n          count: 50\n        };\n        let {\n          sort,\n          query\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          sort: {}\n        };\n        const userTeams = await TeamMember.findByUserId(uid, {\n          projection: {\n            teamId: 1\n          }\n        }).toArray();\n        const teamIds = userTeams.map(_ref10 => {\n          let {\n            teamId\n          } = _ref10;\n          return teamId;\n        });\n        if (teamIds.length === 0) {\n          return {\n            total: 0,\n            records: []\n          };\n        }\n        const {\n          cursor,\n          totalCount\n        } = Team.findByIdsPaginated(teamIds, _objectSpread(_objectSpread({}, sort && {\n          sort\n        }), {}, {\n          limit: count,\n          skip: offset\n        }), query);\n        const [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n        const results = [];\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(records), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const record = _step.value;\n            {\n              results.push(_objectSpread(_objectSpread({}, record), {}, {\n                rooms: await Rooms.countByTeamId(record._id),\n                numberOfUsers: await TeamMember.countByTeamId(record._id)\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return {\n          total,\n          records: results\n        };\n      }\n      async listAll() {\n        let {\n          offset,\n          count\n        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          offset: 0,\n          count: 50\n        };\n        const {\n          cursor,\n          totalCount\n        } = Team.findPaginated({}, {\n          limit: count,\n          skip: offset\n        });\n        const [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n        const results = [];\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(records), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const record = _step2.value;\n            {\n              results.push(_objectSpread(_objectSpread({}, record), {}, {\n                rooms: await Rooms.countByTeamId(record._id),\n                numberOfUsers: await TeamMember.countByTeamId(record._id)\n              }));\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return {\n          total,\n          records: results\n        };\n      }\n      async listByNames(names, options) {\n        if (options === undefined) {\n          return Team.findByNames(names).toArray();\n        }\n        return Team.findByNames(names, options).toArray();\n      }\n      async listByIds(ids, options) {\n        return Team.findByIds(ids, options).toArray();\n      }\n      async addRooms(uid, rooms, teamId) {\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        if (!rooms) {\n          throw new Error('missing-rooms');\n        }\n        if (!uid) {\n          throw new Error('missing-userId');\n        }\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            _id: 1,\n            roomId: 1\n          }\n        });\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        // at this point, we already checked for the permission\n        // so we just need to check if the user can see the room\n        const user = await Users.findOneById(uid);\n        if (!user) {\n          throw new Error('invalid-user');\n        }\n        const rids = rooms.filter(rid => rid && typeof rid === 'string');\n        const validRooms = await Rooms.findManyByRoomIds(rids).toArray();\n        if (validRooms.length < rids.length) {\n          throw new Error('invalid-room');\n        }\n        // validate access for every room first\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(validRooms), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const room = _step3.value;\n            {\n              const canSeeRoom = await Authorization.canAccessRoom(room, user);\n              if (!canSeeRoom) {\n                throw new Error('invalid-room');\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        var _iteratorAbruptCompletion4 = false;\n        var _didIteratorError4 = false;\n        var _iteratorError4;\n        try {\n          for (var _iterator4 = _asyncIterator(validRooms), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n            const room = _step4.value;\n            {\n              if (room.teamId) {\n                throw new Error('room-already-on-team');\n              }\n              if (!(await Subscriptions.isUserInRole(uid, 'owner', room._id))) {\n                throw new Error('error-no-owner-channel');\n              }\n              if (room.t === 'c') {\n                await Message.saveSystemMessage('user-added-room-to-team', team.roomId, room.name || '', user);\n              }\n              room.teamId = teamId;\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n              await _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n        await Rooms.setTeamByIds(rids, teamId);\n        return validRooms;\n      }\n      async removeRoom(uid, rid, teamId) {\n        let canRemoveAnyRoom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        if (!rid) {\n          throw new Error('missing-roomId');\n        }\n        if (!uid) {\n          throw new Error('missing-userId');\n        }\n        const room = await Rooms.findOneById(rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const user = await Users.findOneById(uid);\n        if (!user) {\n          throw new Error('invalid-user');\n        }\n        if (!canRemoveAnyRoom) {\n          const canSeeRoom = await Authorization.canAccessRoom(room, user);\n          if (!canSeeRoom) {\n            throw new Error('invalid-room');\n          }\n        }\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            _id: 1,\n            roomId: 1\n          }\n        });\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        if (room.teamId !== teamId) {\n          throw new Error('room-not-on-that-team');\n        }\n        delete room.teamId;\n        delete room.teamDefault;\n        await Rooms.unsetTeamById(room._id);\n        if (room.t === 'c') {\n          await Message.saveSystemMessage('user-removed-room-from-team', team.roomId, room.name || '', user);\n        }\n        return _objectSpread({}, room);\n      }\n      async unsetTeamIdOfRooms(uid, teamId) {\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            roomId: 1\n          }\n        });\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        const room = await Rooms.findOneById(team.roomId, {\n          projection: {\n            name: 1\n          }\n        });\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const user = await Users.findOneById(uid, {\n          projection: {\n            username: 1,\n            name: 1\n          }\n        });\n        if (!user) {\n          throw new Error('invalid-user');\n        }\n        await Message.saveSystemMessage('user-converted-to-channel', team.roomId, room.name || '', user);\n        await Rooms.unsetTeamId(teamId);\n      }\n      async updateRoom(uid, rid, isDefault) {\n        let canUpdateAnyRoom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        if (!rid) {\n          throw new Error('missing-roomId');\n        }\n        if (!uid) {\n          throw new Error('missing-userId');\n        }\n        const room = await Rooms.findOneById(rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const user = await Users.findOneById(uid);\n        if (!user) {\n          throw new Error('invalid-user');\n        }\n        if (!canUpdateAnyRoom) {\n          const canSeeRoom = await Authorization.canAccessRoom(room, user);\n          if (!canSeeRoom) {\n            throw new Error('invalid-room');\n          }\n        }\n        if (!room.teamId) {\n          throw new Error('room-not-on-team');\n        }\n        room.teamDefault = isDefault;\n        await Rooms.setTeamDefaultById(rid, isDefault);\n        if (isDefault) {\n          const maxNumberOfAutoJoinMembers = settings.get('API_User_Limit');\n          const teamMembers = await this.members(uid, room.teamId, true, {\n            offset: 0,\n            count: maxNumberOfAutoJoinMembers\n          },\n          // We should not get the owner of the room, since he is already a member\n          {\n            _id: {\n              $ne: room.u._id\n            }\n          });\n          var _iteratorAbruptCompletion5 = false;\n          var _didIteratorError5 = false;\n          var _iteratorError5;\n          try {\n            for (var _iterator5 = _asyncIterator(teamMembers.records), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n              const m = _step5.value;\n              {\n                if (await addUserToRoom(room._id, m.user, user)) {\n                  room.usersCount++;\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n                await _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n        }\n        return _objectSpread({}, room);\n      }\n      listTeamsBySubscriberUserId(uid, options) {\n        if (options) {\n          return TeamMember.findByUserId(uid, options).toArray();\n        }\n        return TeamMember.findByUserId(uid).toArray();\n      }\n      async listRooms(uid, teamId, filter) {\n        let {\n          offset: skip,\n          count: limit\n        } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n          offset: 0,\n          count: 50\n        };\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            _id: 1,\n            type: 1\n          }\n        });\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        const {\n          getAllRooms,\n          allowPrivateTeam,\n          name,\n          isDefault\n        } = filter;\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n        if (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n          throw new Error('user-not-on-private-team');\n        }\n        if (getAllRooms) {\n          const {\n            cursor,\n            totalCount\n          } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, {\n            skip,\n            limit\n          });\n          const [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n          return {\n            total,\n            records\n          };\n        }\n        const user = await Users.findOneById(uid, {\n          projection: {\n            __rooms: 1\n          }\n        });\n        const userRooms = user === null || user === void 0 ? void 0 : user.__rooms;\n        const {\n          cursor,\n          totalCount\n        } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, {\n          skip,\n          limit\n        });\n        const [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return {\n          total,\n          records\n        };\n      }\n      async listRoomsOfUser(uid, teamId, userId, allowPrivateTeam, showCanDeleteOnly) {\n        let {\n          offset: skip,\n          count: limit\n        } = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n          offset: 0,\n          count: 50\n        };\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        const team = await Team.findOneById(teamId, {});\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n        if (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n          throw new Error('user-not-on-private-team');\n        }\n        const teamRooms = await Rooms.findByTeamId(teamId, {\n          projection: {\n            _id: 1,\n            t: 1\n          }\n        }).toArray();\n        let teamRoomIds;\n        if (showCanDeleteOnly) {\n          const canDeleteTeamChannel = await Authorization.hasPermission(userId, 'delete-team-channel', team.roomId);\n          const canDeleteTeamGroup = await Authorization.hasPermission(userId, 'delete-team-group', team.roomId);\n          var _iteratorAbruptCompletion6 = false;\n          var _didIteratorError6 = false;\n          var _iteratorError6;\n          try {\n            for (var _iterator6 = _asyncIterator(teamRooms), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n              const room = _step6.value;\n              {\n                const isPublicRoom = room.t === 'c';\n                const canDeleteTeamRoom = isPublicRoom ? canDeleteTeamChannel : canDeleteTeamGroup;\n                const canDeleteRoom = canDeleteTeamRoom && (await Authorization.hasPermission(userId, isPublicRoom ? 'delete-c' : 'delete-p', room._id));\n                room.userCanDelete = canDeleteRoom;\n              }\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n                await _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n          teamRoomIds = teamRooms.filter(room => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map(room => room._id);\n        } else {\n          teamRoomIds = teamRooms.filter(room => room.t === 'p' || room.t === 'c').map(room => room._id);\n        }\n        const subscriptionsCursor = Subscriptions.findByUserIdAndRoomIds(userId, teamRoomIds);\n        const subscriptionRoomIds = (await subscriptionsCursor.toArray()).map(subscription => subscription.rid);\n        const {\n          cursor,\n          totalCount\n        } = Rooms.findPaginatedByIds(subscriptionRoomIds, {\n          skip,\n          limit\n        });\n        const [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n        const roomData = await getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n        const records = [];\n        for (const room of rooms) {\n          const roomInfo = roomData.find(data => data.rid === room._id);\n          if (!roomInfo) {\n            continue;\n          }\n          room.isLastOwner = roomInfo.userIsLastOwner;\n          records.push(room);\n        }\n        return {\n          total,\n          records\n        };\n      }\n      async getMatchingTeamRooms(teamId, rids) {\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        if (!rids) {\n          return [];\n        }\n        if (!Array.isArray(rids)) {\n          throw new Error('invalid-list-of-rooms');\n        }\n        const rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n          projection: {\n            _id: 1\n          }\n        }).toArray();\n        return rooms.map(_ref11 => {\n          let {\n            _id\n          } = _ref11;\n          return _id;\n        });\n      }\n      async getMembersByTeamIds(teamIds, options) {\n        return TeamMember.findByTeamIds(teamIds, options).toArray();\n      }\n      async members(uid, teamId, canSeeAll) {\n        let {\n          offset,\n          count\n        } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n          offset: 0,\n          count: 50\n        };\n        let query = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n        if (!isMember && !canSeeAll) {\n          return {\n            total: 0,\n            records: []\n          };\n        }\n        const users = await Users.findActive(_objectSpread({}, query)).toArray();\n        const userIds = users.map(m => m._id);\n        const {\n          cursor,\n          totalCount\n        } = TeamMember.findPaginatedMembersInfoByTeamId(teamId, count, offset, {\n          userId: {\n            $in: userIds\n          }\n        });\n        const results = [];\n        var _iteratorAbruptCompletion7 = false;\n        var _didIteratorError7 = false;\n        var _iteratorError7;\n        try {\n          for (var _iterator7 = _asyncIterator(cursor), _step7; _iteratorAbruptCompletion7 = !(_step7 = await _iterator7.next()).done; _iteratorAbruptCompletion7 = false) {\n            const record = _step7.value;\n            {\n              const user = users.find(u => u._id === record.userId);\n              if (!user) {\n                continue;\n              }\n              results.push({\n                user: {\n                  _id: user._id,\n                  username: user.username,\n                  name: user.name,\n                  status: user.status,\n                  settings: user.settings\n                },\n                roles: record.roles,\n                createdBy: {\n                  _id: record.createdBy._id,\n                  username: record.createdBy.username\n                },\n                createdAt: record.createdAt\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n              await _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n        return {\n          total: await totalCount,\n          records: results\n        };\n      }\n      async addMembers(uid, teamId, members) {\n        const createdBy = await Users.findOneById(uid, {\n          projection: {\n            username: 1\n          }\n        });\n        if (!createdBy) {\n          throw new Error('invalid-user');\n        }\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            roomId: 1\n          }\n        });\n        if (!team) {\n          throw new Error('team-does-not-exist');\n        }\n        var _iteratorAbruptCompletion8 = false;\n        var _didIteratorError8 = false;\n        var _iteratorError8;\n        try {\n          for (var _iterator8 = _asyncIterator(members), _step8; _iteratorAbruptCompletion8 = !(_step8 = await _iterator8.next()).done; _iteratorAbruptCompletion8 = false) {\n            const member = _step8.value;\n            {\n              const user = await Users.findOneById(member.userId, {\n                projection: {\n                  username: 1\n                }\n              });\n              await addUserToRoom(team.roomId, user, createdBy, {\n                skipSystemMessage: false\n              });\n              if (member.roles) {\n                await this.addRolesToMember(teamId, member.userId, member.roles);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n              await _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      }\n      async updateMember(teamId, member) {\n        if (!member.userId) {\n          throw new Error('invalid-user');\n        }\n        const memberUpdate = {\n          roles: member.roles ? member.roles : []\n        };\n        const team = await Team.findOneById(teamId);\n        if (!team) {\n          throw new Error('invalid-team');\n        }\n        const responses = await Promise.all([TeamMember.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate), Subscriptions.updateOne({\n          'rid': team === null || team === void 0 ? void 0 : team.roomId,\n          'u._id': member.userId\n        }, {\n          $set: memberUpdate\n        })]);\n        if (responses[1].modifiedCount) {\n          void notifyOnSubscriptionChangedByRoomIdAndUserId(team.roomId, member.userId);\n        }\n      }\n      async removeMember(teamId, userId) {\n        await TeamMember.deleteByUserIdAndTeamId(userId, teamId);\n      }\n      async removeMembers(uid, teamId, members) {\n        const team = await Team.findOneById(teamId, {\n          projection: {\n            _id: 1,\n            roomId: 1\n          }\n        });\n        if (!team) {\n          throw new Error('team-does-not-exist');\n        }\n        const membersIds = members.map(m => m.userId);\n        const usersToRemove = await Users.findByIds(membersIds, {\n          projection: {\n            _id: 1,\n            username: 1\n          }\n        }).toArray();\n        const byUser = await Users.findOneById(uid);\n        var _iteratorAbruptCompletion9 = false;\n        var _didIteratorError9 = false;\n        var _iteratorError9;\n        try {\n          for (var _iterator9 = _asyncIterator(members), _step9; _iteratorAbruptCompletion9 = !(_step9 = await _iterator9.next()).done; _iteratorAbruptCompletion9 = false) {\n            const member = _step9.value;\n            {\n              if (!member.userId) {\n                throw new Error('invalid-user');\n              }\n              const existingMember = await TeamMember.findOneByUserIdAndTeamId(member.userId, team._id);\n              const subscription = await Subscriptions.findOneByRoomIdAndUserId(team.roomId, member.userId);\n              if (!existingMember && !subscription) {\n                throw new Error('member-does-not-exist');\n              }\n              if (existingMember) {\n                var _existingMember$roles;\n                if ((_existingMember$roles = existingMember.roles) !== null && _existingMember$roles !== void 0 && _existingMember$roles.includes('owner')) {\n                  const totalOwners = await TeamMember.countByTeamIdAndRole(team._id, 'owner');\n                  if (totalOwners === 1) {\n                    throw new Error('last-owner-can-not-be-removed');\n                  }\n                }\n                await TeamMember.removeById(existingMember._id);\n              }\n              const removedUser = usersToRemove.find(u => u._id === (existingMember || member).userId);\n              if (removedUser) {\n                await removeUserFromRoom(team.roomId, removedUser, uid !== member.userId && byUser ? {\n                  byUser\n                } : undefined);\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion9 && _iterator9.return != null) {\n              await _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n        return true;\n      }\n      async insertMemberOnTeams(userId, teamIds) {\n        const inviter = {\n          _id: 'rocket.cat',\n          username: 'rocket.cat'\n        };\n        await Promise.all(teamIds.map(async teamId => {\n          const team = await Team.findOneById(teamId);\n          const user = await Users.findOneById(userId);\n          if (!team || !user) {\n            return;\n          }\n          await addUserToRoom(team.roomId, user, inviter, {\n            skipSystemMessage: false\n          });\n        }));\n      }\n      async removeMemberFromTeams(userId, teamIds) {\n        await Promise.all(teamIds.map(async teamId => {\n          const team = await Team.findOneById(teamId);\n          const user = await Users.findOneById(userId);\n          if (!team || !user) {\n            return;\n          }\n          await removeUserFromRoom(team.roomId, user);\n        }));\n      }\n      async removeAllMembersFromTeam(teamId) {\n        if (!teamId) {\n          throw new Error('missing-teamId');\n        }\n        await TeamMember.deleteByTeamId(teamId);\n      }\n      async addMember(inviter, userId, teamId) {\n        const isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (isAlreadyAMember) {\n          return false;\n        }\n        let inviterData = {};\n        if (inviter) {\n          inviterData = {\n            _id: inviter._id,\n            username: inviter.username\n          };\n        }\n        await TeamMember.createOneByTeamIdAndUserId(teamId, userId, inviterData);\n        await this.addMembersToDefaultRooms(inviter, teamId, [{\n          userId\n        }]);\n        return true;\n      }\n      async getAllPublicTeams(options) {\n        return options ? Team.findByType(TEAM_TYPE.PUBLIC, options).toArray() : Team.findByType(TEAM_TYPE.PUBLIC).toArray();\n      }\n      async getOneById(teamId, options) {\n        if (options === undefined) {\n          return Team.findOneById(teamId);\n        }\n        return Team.findOneById(teamId, options);\n      }\n      async getOneByName(teamName, options) {\n        if (!options) {\n          return Team.findOneByName(teamName);\n        }\n        return Team.findOneByName(teamName, options);\n      }\n      async getOneByMainRoomId(roomId) {\n        return Team.findOneByMainRoomId(roomId, {\n          projection: {\n            _id: 1\n          }\n        });\n      }\n      async getOneByRoomId(roomId, options) {\n        const room = await Rooms.findOneById(roomId, {\n          projection: {\n            teamId: 1\n          }\n        });\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        if (!room.teamId) {\n          throw new Error('room-not-on-team');\n        }\n        return Team.findOneById(room.teamId, options);\n      }\n      async addRolesToMember(teamId, userId, roles) {\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!isMember) {\n          // TODO should this throw an error instead?\n          return false;\n        }\n        return !!(await TeamMember.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n      }\n      async removeRolesFromMember(teamId, userId, roles) {\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!isMember) {\n          // TODO should this throw an error instead?\n          return false;\n        }\n        return !!(await TeamMember.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n      }\n      async getInfoByName(teamName) {\n        return Team.findOne({\n          name: teamName\n        }, {\n          projection: {\n            usernames: 0\n          }\n        });\n      }\n      async getInfoById(teamId) {\n        return Team.findOne({\n          _id: teamId\n        }, {\n          projection: {\n            usernames: 0\n          }\n        });\n      }\n      async addMembersToDefaultRooms(inviter, teamId, members) {\n        const defaultRooms = await Rooms.findDefaultRoomsForTeam(teamId).toArray();\n        const users = await Users.findActiveByIds(members.map(member => member.userId)).toArray();\n        defaultRooms.map(async room => {\n          // at this point, users are already part of the team so we won't check for membership\n          var _iteratorAbruptCompletion10 = false;\n          var _didIteratorError10 = false;\n          var _iteratorError10;\n          try {\n            for (var _iterator10 = _asyncIterator(users), _step10; _iteratorAbruptCompletion10 = !(_step10 = await _iterator10.next()).done; _iteratorAbruptCompletion10 = false) {\n              const user = _step10.value;\n              {\n                // add each user to the default room\n                await addUserToRoom(room._id, user, inviter, {\n                  skipSystemMessage: false\n                });\n              }\n            }\n          } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion10 && _iterator10.return != null) {\n                await _iterator10.return();\n              }\n            } finally {\n              if (_didIteratorError10) {\n                throw _iteratorError10;\n              }\n            }\n          }\n        });\n      }\n      async deleteById(teamId) {\n        return !!(await Team.deleteOneById(teamId));\n      }\n      async deleteByName(teamName) {\n        return !!(await Team.deleteOneByName(teamName));\n      }\n      async getStatistics() {\n        return {\n          totalTeams: await Team.estimatedDocumentCount(),\n          totalRoomsInsideTeams: await Rooms.countRoomsInsideTeams(),\n          totalDefaultRoomsInsideTeams: await Rooms.countRoomsInsideTeams(true)\n        };\n      }\n      async autocomplete(uid, name) {\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n        const subscriptions = await Subscriptions.find({\n          'u._id': uid\n        }, {\n          projection: {\n            rid: 1\n          }\n        }).toArray();\n        const subscriptionIds = subscriptions.map(_ref12 => {\n          let {\n            rid\n          } = _ref12;\n          return rid;\n        });\n        const rooms = await Rooms.find({\n          teamMain: true,\n          $and: [{\n            $or: [{\n              name: nameRegex\n            }, {\n              fname: nameRegex\n            }]\n          }, {\n            $or: [{\n              t: 'c'\n            }, {\n              _id: {\n                $in: subscriptionIds\n              }\n            }]\n          }]\n        }, {\n          projection: {\n            fname: 1,\n            teamId: 1,\n            name: 1,\n            t: 1,\n            avatarETag: 1\n          },\n          limit: 10,\n          sort: {\n            name: 1,\n            fname: 1\n          }\n        }).toArray();\n        return rooms;\n      }\n      getParentRoom(team) {\n        return Rooms.findOneById(team.roomId, {\n          projection: {\n            name: 1,\n            fname: 1,\n            t: 1,\n            sidepanel: 1\n          }\n        });\n      }\n      async getRoomInfo(room) {\n        if (!room.teamId) {\n          return {};\n        }\n        const team = await Team.findOneById(room.teamId, {\n          projection: {\n            _id: 1,\n            name: 1,\n            roomId: 1,\n            type: 1\n          }\n        });\n        if (!team) {\n          return {};\n        }\n        if (room.teamMain) {\n          return {\n            team\n          };\n        }\n        const parentRoom = await this.getParentRoom(team);\n        return _objectSpread({\n          team\n        }, parentRoom && {\n          parentRoom\n        });\n      }\n      // Returns the list of rooms and discussions a user has access to inside a team\n      // Rooms returned are a composition of the rooms the user is in + public rooms + discussions from the main room (if any)\n      async listChildren(userId, team, filter, type, sort) {\n        let skip = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n        let limit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 10;\n        const mainRoom = await Rooms.findOneById(team.roomId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!mainRoom) {\n          throw new Error('error-invalid-team-no-main-room');\n        }\n        const isMember = await TeamMember.findOneByUserIdAndTeamId(userId, team._id, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!isMember) {\n          throw new Error('error-invalid-team-not-a-member');\n        }\n        const [{\n          totalCount: [{\n            count: total\n          }] = [],\n          paginatedResults: data = []\n        }] = (await Rooms.findChildrenOfTeam(team._id, mainRoom._id, userId, filter, type, {\n          skip,\n          limit,\n          sort\n        }).toArray()) || [];\n        return {\n          total,\n          data\n        };\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","TeamService","Room","Authorization","Message","ServiceClassInternal","TEAM_TYPE","Team","Rooms","Subscriptions","Users","TeamMember","escapeRegExp","saveRoomName","saveRoomType","addUserToRoom","checkUsernameAvailability","getSubscribedRoomsForUserWithDetails","removeUserFromRoom","notifyOnSubscriptionChangedByRoomIdAndUserId","settings","__reifyWaitForDeps__","constructor","arguments","name","create","uid","_ref","team","room","extraData","members","owner","sidepanel","Error","existingRoom","findOneByName","projection","_id","id","createdBy","findOneById","username","membersResult","Array","isArray","length","findActiveByIdsOrUsernames","toArray","memberUsernames","map","_ref2","memberIds","_ref3","teamData","createdAt","Date","_updatedAt","roomId","type","PRIVATE","result","insertOne","teamId","insertedId","excludeFromMembers","membersList","filter","Boolean","memberId","includes","userId","push","roles","insertMany","setTeamMainById","updateMainRoomForTeam","saveSystemMessage","e","update","updateData","user","updateRoom","updateNameAndType","findBySubscribedUserIds","callerId","unfilteredTeams","findByUserId","unfilteredTeamIds","_ref4","teamIds","publicTeams","findByIdsAndType","PUBLIC","publicTeamIds","_ref5","privateTeamIds","privateTeams","findByUserIdAndTeamIds","visibleTeamIds","_ref6","concat","ownedTeams","_ref7","_ref8","results","findByIds","isOwner","search","term","options","RegExp","userTeams","_ref9","findByNameAndTeamIds","list","offset","count","undefined","sort","query","_ref10","total","records","cursor","totalCount","findByIdsPaginated","limit","skip","Promise","all","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","record","value","rooms","countByTeamId","numberOfUsers","err","return","listAll","findPaginated","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","listByNames","names","findByNames","listByIds","ids","addRooms","rids","rid","validRooms","findManyByRoomIds","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","canSeeRoom","canAccessRoom","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","isUserInRole","t","setTeamByIds","removeRoom","canRemoveAnyRoom","teamDefault","unsetTeamById","unsetTeamIdOfRooms","unsetTeamId","isDefault","canUpdateAnyRoom","setTeamDefaultById","maxNumberOfAutoJoinMembers","get","teamMembers","$ne","u","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","m","usersCount","listTeamsBySubscriberUserId","listRooms","getAllRooms","allowPrivateTeam","isMember","findOneByUserIdAndTeamId","findPaginatedByTeamIdContainingNameAndDefault","__rooms","userRooms","listRoomsOfUser","showCanDeleteOnly","teamRooms","findByTeamId","teamRoomIds","canDeleteTeamChannel","hasPermission","canDeleteTeamGroup","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","isPublicRoom","canDeleteTeamRoom","canDeleteRoom","userCanDelete","subscriptionsCursor","findByUserIdAndRoomIds","subscriptionRoomIds","subscription","findPaginatedByIds","roomData","roomInfo","find","data","isLastOwner","userIsLastOwner","getMatchingTeamRooms","findByTeamIdAndRoomsId","_ref11","getMembersByTeamIds","findByTeamIds","canSeeAll","users","findActive","userIds","findPaginatedMembersInfoByTeamId","$in","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","status","addMembers","_iteratorAbruptCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","member","skipSystemMessage","addRolesToMember","updateMember","memberUpdate","responses","updateOneByUserIdAndTeamId","updateOne","$set","modifiedCount","removeMember","deleteByUserIdAndTeamId","removeMembers","membersIds","usersToRemove","byUser","_iteratorAbruptCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","existingMember","findOneByRoomIdAndUserId","_existingMember$roles","totalOwners","countByTeamIdAndRole","removeById","removedUser","insertMemberOnTeams","inviter","removeMemberFromTeams","removeAllMembersFromTeam","deleteByTeamId","addMember","isAlreadyAMember","inviterData","createOneByTeamIdAndUserId","addMembersToDefaultRooms","getAllPublicTeams","findByType","getOneById","getOneByName","teamName","getOneByMainRoomId","findOneByMainRoomId","getOneByRoomId","updateRolesByTeamIdAndUserId","removeRolesFromMember","removeRolesByTeamIdAndUserId","getInfoByName","findOne","usernames","getInfoById","defaultRooms","findDefaultRoomsForTeam","findActiveByIds","_iteratorAbruptCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","deleteById","deleteOneById","deleteByName","deleteOneByName","getStatistics","totalTeams","estimatedDocumentCount","totalRoomsInsideTeams","countRoomsInsideTeams","totalDefaultRoomsInsideTeams","autocomplete","nameRegex","trim","subscriptions","subscriptionIds","_ref12","teamMain","$and","$or","fname","avatarETag","getParentRoom","getRoomInfo","parentRoom","listChildren","mainRoom","paginatedResults","findChildrenOfTeam","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/team/service.ts"],"sourcesContent":["import { Room, Authorization, Message, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type {\n\tIListRoomsFilter,\n\tITeamAutocompleteResult,\n\tITeamCreateParams,\n\tITeamInfo,\n\tITeamMemberInfo,\n\tITeamMemberParams,\n\tITeamService,\n\tITeamUpdateData,\n} from '@rocket.chat/core-services';\nimport { TEAM_TYPE } from '@rocket.chat/core-typings';\nimport type {\n\tIRoom,\n\tIUser,\n\tISubscription,\n\tIPaginationOptions,\n\tIQueryOptions,\n\tIRecordsWithTotal,\n\tITeam,\n\tITeamMember,\n\tITeamStats,\n\tAtLeast,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport { Team, Rooms, Subscriptions, Users, TeamMember } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { Document, FindOptions, Filter } from 'mongodb';\n\nimport { saveRoomName } from '../../../app/channel-settings/server';\nimport { saveRoomType } from '../../../app/channel-settings/server/functions/saveRoomType';\nimport { addUserToRoom } from '../../../app/lib/server/functions/addUserToRoom';\nimport { checkUsernameAvailability } from '../../../app/lib/server/functions/checkUsernameAvailability';\nimport { getSubscribedRoomsForUserWithDetails } from '../../../app/lib/server/functions/getRoomsWithSingleOwner';\nimport { removeUserFromRoom } from '../../../app/lib/server/functions/removeUserFromRoom';\nimport { notifyOnSubscriptionChangedByRoomIdAndUserId } from '../../../app/lib/server/lib/notifyListener';\nimport { settings } from '../../../app/settings/server';\n\nexport class TeamService extends ServiceClassInternal implements ITeamService {\n\tprotected name = 'team';\n\n\tasync create(\n\t\tuid: string,\n\t\t{ team, room = { name: team.name, extraData: {} }, members, owner, sidepanel }: ITeamCreateParams,\n\t): Promise<ITeam> {\n\t\tif (!(await checkUsernameAvailability(team.name))) {\n\t\t\tthrow new Error('team-name-already-exists');\n\t\t}\n\n\t\tconst existingRoom = await Rooms.findOneByName(team.name, { projection: { _id: 1 } });\n\t\tif (existingRoom && existingRoom._id !== room.id) {\n\t\t\tthrow new Error('room-name-already-exists');\n\t\t}\n\n\t\tconst createdBy = await Users.findOneById<Pick<IUser, 'username' | '_id'>>(uid, {\n\t\t\tprojection: { username: 1 },\n\t\t});\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\t// TODO add validations to `data` and `members`\n\n\t\tconst membersResult =\n\t\t\t!members || !Array.isArray(members) || members.length === 0\n\t\t\t\t? []\n\t\t\t\t: await Users.findActiveByIdsOrUsernames(members, {\n\t\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t\t}).toArray();\n\t\tconst memberUsernames = membersResult.map(({ username }) => username);\n\t\tconst memberIds = membersResult.map(({ _id }) => _id);\n\n\t\tconst teamData = {\n\t\t\t...team,\n\t\t\tcreatedAt: new Date(),\n\t\t\tcreatedBy,\n\t\t\t_updatedAt: new Date(), // TODO how to avoid having to do this?\n\t\t\troomId: '', // this will be populated at the end\n\t\t};\n\n\t\ttry {\n\t\t\tconst roomId =\n\t\t\t\troom.id ||\n\t\t\t\t(\n\t\t\t\t\tawait Room.create(owner || uid, {\n\t\t\t\t\t\t...room,\n\t\t\t\t\t\ttype: team.type === TEAM_TYPE.PRIVATE ? 'p' : 'c',\n\t\t\t\t\t\tname: team.name,\n\t\t\t\t\t\tmembers: memberUsernames as string[],\n\t\t\t\t\t\textraData: {\n\t\t\t\t\t\t\t...room.extraData,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsidepanel,\n\t\t\t\t\t})\n\t\t\t\t)._id;\n\n\t\t\tconst result = await Team.insertOne(teamData);\n\t\t\tconst teamId = result.insertedId;\n\t\t\t// the same uid can be passed at 3 positions: owner, member list or via caller\n\t\t\t// if the owner is present, remove it from the members list\n\t\t\t// if the owner is not present, remove the caller from the members list\n\t\t\tconst excludeFromMembers = owner ? [owner] : [uid];\n\n\t\t\t// filter empty strings and falsy values from members list\n\t\t\tconst membersList: Array<InsertionModel<ITeamMember>> =\n\t\t\t\tmemberIds\n\t\t\t\t\t?.filter(Boolean)\n\t\t\t\t\t.filter((memberId) => !excludeFromMembers.includes(memberId))\n\t\t\t\t\t.map((memberId) => ({\n\t\t\t\t\t\tteamId,\n\t\t\t\t\t\tuserId: memberId,\n\t\t\t\t\t\tcreatedAt: new Date(),\n\t\t\t\t\t\tcreatedBy,\n\t\t\t\t\t})) || [];\n\n\t\t\tmembersList.push({\n\t\t\t\tteamId,\n\t\t\t\tuserId: owner || uid,\n\t\t\t\troles: ['owner'],\n\t\t\t\tcreatedAt: new Date(),\n\t\t\t\tcreatedBy,\n\t\t\t});\n\n\t\t\tawait TeamMember.insertMany(membersList);\n\n\t\t\tawait Rooms.setTeamMainById(roomId, teamId);\n\t\t\tawait Team.updateMainRoomForTeam(teamId, roomId);\n\t\t\tteamData.roomId = roomId;\n\n\t\t\tif (room.id) {\n\t\t\t\tawait Message.saveSystemMessage('user-converted-to-team', roomId, team.name, createdBy);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t_id: teamId,\n\t\t\t\t...teamData,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow new Error('error-team-creation');\n\t\t}\n\t}\n\n\tasync update(uid: string, teamId: string, updateData: ITeamUpdateData): Promise<void> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { name, type, updateRoom = true } = updateData;\n\n\t\tif (updateRoom && name) {\n\t\t\tawait saveRoomName(team.roomId, name, user);\n\t\t}\n\n\t\tif (updateRoom && typeof type !== 'undefined') {\n\t\t\tawait saveRoomType(team.roomId, type === TEAM_TYPE.PRIVATE ? 'p' : 'c', user);\n\t\t}\n\n\t\tawait Team.updateNameAndType(teamId, updateData);\n\t}\n\n\tasync findBySubscribedUserIds(userId: string, callerId?: string): Promise<ITeam[]> {\n\t\tconst unfilteredTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'roles' | 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1, roles: 1 },\n\t\t}).toArray();\n\t\tconst unfilteredTeamIds = unfilteredTeams.map(({ teamId }) => teamId);\n\n\t\tlet teamIds = unfilteredTeamIds;\n\n\t\tif (callerId) {\n\t\t\tconst publicTeams = await Team.findByIdsAndType<Pick<ITeam, '_id'>>(unfilteredTeamIds, TEAM_TYPE.PUBLIC, {\n\t\t\t\tprojection: { _id: 1 },\n\t\t\t}).toArray();\n\t\t\tconst publicTeamIds = publicTeams.map(({ _id }) => _id);\n\t\t\tconst privateTeamIds = unfilteredTeamIds.filter((teamId) => !publicTeamIds.includes(teamId));\n\n\t\t\tconst privateTeams = await TeamMember.findByUserIdAndTeamIds(callerId, privateTeamIds, {\n\t\t\t\tprojection: { teamId: 1 },\n\t\t\t}).toArray();\n\t\t\tconst visibleTeamIds = privateTeams.map(({ teamId }) => teamId).concat(publicTeamIds);\n\t\t\tteamIds = unfilteredTeamIds.filter((teamId) => visibleTeamIds.includes(teamId));\n\t\t}\n\n\t\tconst ownedTeams = unfilteredTeams.filter(({ roles = [] }) => roles.includes('owner')).map(({ teamId }) => teamId);\n\n\t\tconst results = await Team.findByIds(teamIds).toArray();\n\t\treturn results.map((team) => ({\n\t\t\t...team,\n\t\t\tisOwner: ownedTeams.includes(team._id),\n\t\t}));\n\t}\n\n\tsearch(userId: string, term: string | RegExp): Promise<ITeam[]>;\n\n\tsearch(userId: string, term: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tsearch<P extends Document>(userId: string, term: string | RegExp, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync search<P extends Document>(\n\t\tuserId: string,\n\t\tterm: string | RegExp,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<ITeam[] | P[]> {\n\t\tif (typeof term === 'string') {\n\t\t\tterm = new RegExp(`^${escapeRegExp(term)}`, 'i');\n\t\t}\n\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(userId, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\n\t\treturn Team.findByNameAndTeamIds(term, teamIds, options || {}).toArray();\n\t}\n\n\tasync list(\n\t\tuid: string,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\t{ sort, query }: IQueryOptions<ITeam> = { sort: {} },\n\t): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst userTeams = await TeamMember.findByUserId<Pick<ITeamMember, 'teamId'>>(uid, {\n\t\t\tprojection: { teamId: 1 },\n\t\t}).toArray();\n\n\t\tconst teamIds = userTeams.map(({ teamId }) => teamId);\n\t\tif (teamIds.length === 0) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst { cursor, totalCount } = Team.findByIdsPaginated(\n\t\t\tteamIds,\n\t\t\t{\n\t\t\t\t...(sort && { sort }),\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t\tquery,\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync listAll({ offset, count }: IPaginationOptions = { offset: 0, count: 50 }): Promise<IRecordsWithTotal<ITeamInfo>> {\n\t\tconst { cursor, totalCount } = Team.findPaginated(\n\t\t\t{},\n\t\t\t{\n\t\t\t\tlimit: count,\n\t\t\t\tskip: offset,\n\t\t\t},\n\t\t);\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst results: ITeamInfo[] = [];\n\t\tfor await (const record of records) {\n\t\t\tresults.push({\n\t\t\t\t...record,\n\t\t\t\trooms: await Rooms.countByTeamId(record._id),\n\t\t\t\tnumberOfUsers: await TeamMember.countByTeamId(record._id),\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tlistByNames(names: Array<string>): Promise<ITeam[]>;\n\n\tlistByNames(names: Array<string>, options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tlistByNames<P extends Document>(names: Array<string>, options: FindOptions<P extends ITeam ? ITeam : P>): Promise<P[]>;\n\n\tasync listByNames<P extends Document>(\n\t\tnames: Array<string>,\n\t\toptions?: undefined | FindOptions<ITeam> | FindOptions<P extends ITeam ? ITeam : P>,\n\t): Promise<P[] | ITeam[]> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findByNames(names).toArray();\n\t\t}\n\t\treturn Team.findByNames(names, options).toArray();\n\t}\n\n\tasync listByIds(ids: Array<string>, options?: FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn Team.findByIds(ids, options).toArray();\n\t}\n\n\tasync addRooms(uid: string, rooms: Array<string>, teamId: string): Promise<Array<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rooms) {\n\t\t\tthrow new Error('missing-rooms');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\t// at this point, we already checked for the permission\n\t\t// so we just need to check if the user can see the room\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst rids = rooms.filter((rid) => rid && typeof rid === 'string');\n\t\tconst validRooms = await Rooms.findManyByRoomIds(rids).toArray();\n\t\tif (validRooms.length < rids.length) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\t// validate access for every room first\n\t\tfor await (const room of validRooms) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tfor await (const room of validRooms) {\n\t\t\tif (room.teamId) {\n\t\t\t\tthrow new Error('room-already-on-team');\n\t\t\t}\n\n\t\t\tif (!(await Subscriptions.isUserInRole(uid, 'owner', room._id))) {\n\t\t\t\tthrow new Error('error-no-owner-channel');\n\t\t\t}\n\n\t\t\tif (room.t === 'c') {\n\t\t\t\tawait Message.saveSystemMessage('user-added-room-to-team', team.roomId, room.name || '', user);\n\t\t\t}\n\n\t\t\troom.teamId = teamId;\n\t\t}\n\n\t\tawait Rooms.setTeamByIds(rids, teamId);\n\t\treturn validRooms;\n\t}\n\n\tasync removeRoom(uid: string, rid: string, teamId: string, canRemoveAnyRoom = false): Promise<IRoom> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canRemoveAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'roomId'>>(teamId, { projection: { _id: 1, roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tif (room.teamId !== teamId) {\n\t\t\tthrow new Error('room-not-on-that-team');\n\t\t}\n\n\t\tdelete room.teamId;\n\t\tdelete room.teamDefault;\n\t\tawait Rooms.unsetTeamById(room._id);\n\n\t\tif (room.t === 'c') {\n\t\t\tawait Message.saveSystemMessage('user-removed-room-from-team', team.roomId, room.name || '', user);\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tasync unsetTeamIdOfRooms(uid: string, teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, { projection: { roomId: 1 } });\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById<Pick<IRoom, 'name'>>(team.roomId, { projection: { name: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById<Pick<IUser, '_id' | 'username' | 'name'>>(uid, { projection: { username: 1, name: 1 } });\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tawait Message.saveSystemMessage('user-converted-to-channel', team.roomId, room.name || '', user);\n\n\t\tawait Rooms.unsetTeamId(teamId);\n\t}\n\n\tasync updateRoom(uid: string, rid: string, isDefault: boolean, canUpdateAnyRoom = false): Promise<IRoom> {\n\t\tif (!rid) {\n\t\t\tthrow new Error('missing-roomId');\n\t\t}\n\t\tif (!uid) {\n\t\t\tthrow new Error('missing-userId');\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tconst user = await Users.findOneById(uid);\n\t\tif (!user) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\t\tif (!canUpdateAnyRoom) {\n\t\t\tconst canSeeRoom = await Authorization.canAccessRoom(room, user);\n\t\t\tif (!canSeeRoom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\t\troom.teamDefault = isDefault;\n\t\tawait Rooms.setTeamDefaultById(rid, isDefault);\n\n\t\tif (isDefault) {\n\t\t\tconst maxNumberOfAutoJoinMembers = settings.get<number>('API_User_Limit');\n\t\t\tconst teamMembers = await this.members(\n\t\t\t\tuid,\n\t\t\t\troom.teamId,\n\t\t\t\ttrue,\n\t\t\t\t{ offset: 0, count: maxNumberOfAutoJoinMembers },\n\t\t\t\t// We should not get the owner of the room, since he is already a member\n\t\t\t\t{ _id: { $ne: room.u._id } },\n\t\t\t);\n\n\t\t\tfor await (const m of teamMembers.records) {\n\t\t\t\tif (await addUserToRoom(room._id, m.user, user)) {\n\t\t\t\t\troom.usersCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...room,\n\t\t};\n\t}\n\n\tlistTeamsBySubscriberUserId(uid: string): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId(uid: string, options: FindOptions<ITeamMember>): Promise<ITeamMember[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(uid: string, options: FindOptions<P>): Promise<P[]>;\n\n\tlistTeamsBySubscriberUserId<P extends Document>(\n\t\tuid: string,\n\t\toptions?: undefined | FindOptions<ITeamMember> | FindOptions<P extends ITeamMember ? ITeamMember : P>,\n\t): Promise<P[] | ITeamMember[]> {\n\t\tif (options) {\n\t\t\treturn TeamMember.findByUserId(uid, options).toArray();\n\t\t}\n\t\treturn TeamMember.findByUserId(uid).toArray();\n\t}\n\n\tasync listRooms(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tfilter: IListRoomsFilter,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById<Pick<ITeam, '_id' | 'type'>>(teamId, {\n\t\t\tprojection: { _id: 1, type: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst { getAllRooms, allowPrivateTeam, name, isDefault } = filter;\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tif (getAllRooms) {\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, undefined, {\n\t\t\t\tskip,\n\t\t\t\tlimit,\n\t\t\t});\n\t\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\t\t\treturn {\n\t\t\t\ttotal,\n\t\t\t\trecords,\n\t\t\t};\n\t\t}\n\n\t\tconst user = await Users.findOneById<{ __rooms: string[] }>(uid, {\n\t\t\tprojection: { __rooms: 1 },\n\t\t});\n\t\tconst userRooms = user?.__rooms;\n\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByTeamIdContainingNameAndDefault(teamId, name, isDefault, userRooms, { skip, limit });\n\n\t\tconst [records, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync listRoomsOfUser(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tuserId: string,\n\t\tallowPrivateTeam: boolean,\n\t\tshowCanDeleteOnly: boolean,\n\t\t{ offset: skip, count: limit }: IPaginationOptions = { offset: 0, count: 50 },\n\t): Promise<IRecordsWithTotal<IRoom>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\t\tconst team = await Team.findOneById(teamId, {});\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (team.type === TEAM_TYPE.PRIVATE && !allowPrivateTeam && !isMember) {\n\t\t\tthrow new Error('user-not-on-private-team');\n\t\t}\n\n\t\tconst teamRooms: (IRoom & {\n\t\t\tuserCanDelete?: boolean;\n\t\t})[] = await Rooms.findByTeamId(teamId, {\n\t\t\tprojection: { _id: 1, t: 1 },\n\t\t}).toArray();\n\n\t\tlet teamRoomIds: string[];\n\n\t\tif (showCanDeleteOnly) {\n\t\t\tconst canDeleteTeamChannel = await Authorization.hasPermission(userId, 'delete-team-channel', team.roomId);\n\t\t\tconst canDeleteTeamGroup = await Authorization.hasPermission(userId, 'delete-team-group', team.roomId);\n\t\t\tfor await (const room of teamRooms) {\n\t\t\t\tconst isPublicRoom = room.t === 'c';\n\t\t\t\tconst canDeleteTeamRoom = isPublicRoom ? canDeleteTeamChannel : canDeleteTeamGroup;\n\t\t\t\tconst canDeleteRoom =\n\t\t\t\t\tcanDeleteTeamRoom && (await Authorization.hasPermission(userId, isPublicRoom ? 'delete-c' : 'delete-p', room._id));\n\t\t\t\troom.userCanDelete = canDeleteRoom;\n\t\t\t}\n\n\t\t\tteamRoomIds = teamRooms.filter((room) => (room.t === 'c' || room.t === 'p') && room.userCanDelete).map((room) => room._id);\n\t\t} else {\n\t\t\tteamRoomIds = teamRooms.filter((room) => room.t === 'p' || room.t === 'c').map((room) => room._id);\n\t\t}\n\n\t\tconst subscriptionsCursor = Subscriptions.findByUserIdAndRoomIds(userId, teamRoomIds);\n\t\tconst subscriptionRoomIds = (await subscriptionsCursor.toArray()).map((subscription) => subscription.rid);\n\t\tconst { cursor, totalCount } = Rooms.findPaginatedByIds(subscriptionRoomIds, {\n\t\t\tskip,\n\t\t\tlimit,\n\t\t});\n\n\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\tconst roomData = await getSubscribedRoomsForUserWithDetails(userId, false, teamRoomIds);\n\t\tconst records = [];\n\n\t\tfor (const room of rooms) {\n\t\t\tconst roomInfo = roomData.find((data) => data.rid === room._id);\n\t\t\tif (!roomInfo) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\troom.isLastOwner = roomInfo.userIsLastOwner;\n\t\t\trecords.push(room);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\trecords,\n\t\t};\n\t}\n\n\tasync getMatchingTeamRooms(teamId: string, rids: Array<string>): Promise<Array<string>> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tif (!rids) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!Array.isArray(rids)) {\n\t\t\tthrow new Error('invalid-list-of-rooms');\n\t\t}\n\n\t\tconst rooms = await Rooms.findByTeamIdAndRoomsId(teamId, rids, {\n\t\t\tprojection: { _id: 1 },\n\t\t}).toArray();\n\t\treturn rooms.map(({ _id }: { _id: string }) => _id);\n\t}\n\n\tasync getMembersByTeamIds(teamIds: Array<string>, options: FindOptions<ITeamMember>): Promise<Array<ITeamMember>> {\n\t\treturn TeamMember.findByTeamIds(teamIds, options).toArray();\n\t}\n\n\tasync members(\n\t\tuid: string,\n\t\tteamId: string,\n\t\tcanSeeAll: boolean,\n\t\t{ offset, count }: IPaginationOptions = { offset: 0, count: 50 },\n\t\tquery: Filter<IUser> = {},\n\t): Promise<IRecordsWithTotal<ITeamMemberInfo>> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(uid, teamId);\n\t\tif (!isMember && !canSeeAll) {\n\t\t\treturn {\n\t\t\t\ttotal: 0,\n\t\t\t\trecords: [],\n\t\t\t};\n\t\t}\n\n\t\tconst users = await Users.findActive({ ...query }).toArray();\n\t\tconst userIds = users.map((m) => m._id);\n\t\tconst { cursor, totalCount } = TeamMember.findPaginatedMembersInfoByTeamId(teamId, count, offset, {\n\t\t\tuserId: { $in: userIds },\n\t\t});\n\n\t\tconst results: ITeamMemberInfo[] = [];\n\t\tfor await (const record of cursor) {\n\t\t\tconst user = users.find((u) => u._id === record.userId);\n\t\t\tif (!user) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresults.push({\n\t\t\t\tuser: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t\tname: user.name,\n\t\t\t\t\tstatus: user.status,\n\t\t\t\t\tsettings: user.settings,\n\t\t\t\t},\n\t\t\t\troles: record.roles,\n\t\t\t\tcreatedBy: {\n\t\t\t\t\t_id: record.createdBy._id,\n\t\t\t\t\tusername: record.createdBy.username,\n\t\t\t\t},\n\t\t\t\tcreatedAt: record.createdAt,\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: await totalCount,\n\t\t\trecords: results,\n\t\t};\n\t}\n\n\tasync addMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<void> {\n\t\tconst createdBy = (await Users.findOneById(uid, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\tif (!createdBy) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId'>>(teamId, {\n\t\t\tprojection: { roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tfor await (const member of members) {\n\t\t\tconst user = (await Users.findOneById(member.userId, { projection: { username: 1 } })) as Pick<IUser, '_id' | 'username'>;\n\t\t\tawait addUserToRoom(team.roomId, user, createdBy, { skipSystemMessage: false });\n\n\t\t\tif (member.roles) {\n\t\t\t\tawait this.addRolesToMember(teamId, member.userId, member.roles);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync updateMember(teamId: string, member: ITeamMemberParams): Promise<void> {\n\t\tif (!member.userId) {\n\t\t\tthrow new Error('invalid-user');\n\t\t}\n\n\t\tconst memberUpdate: Partial<ITeamMember> = {\n\t\t\troles: member.roles ? member.roles : [],\n\t\t};\n\n\t\tconst team = await Team.findOneById(teamId);\n\n\t\tif (!team) {\n\t\t\tthrow new Error('invalid-team');\n\t\t}\n\n\t\tconst responses = await Promise.all([\n\t\t\tTeamMember.updateOneByUserIdAndTeamId(member.userId, teamId, memberUpdate),\n\t\t\tSubscriptions.updateOne(\n\t\t\t\t{\n\t\t\t\t\t'rid': team?.roomId,\n\t\t\t\t\t'u._id': member.userId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$set: memberUpdate,\n\t\t\t\t},\n\t\t\t),\n\t\t]);\n\n\t\tif (responses[1].modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedByRoomIdAndUserId(team.roomId, member.userId);\n\t\t}\n\t}\n\n\tasync removeMember(teamId: string, userId: string): Promise<void> {\n\t\tawait TeamMember.deleteByUserIdAndTeamId(userId, teamId);\n\t}\n\n\tasync removeMembers(uid: string, teamId: string, members: Array<ITeamMemberParams>): Promise<boolean> {\n\t\tconst team = await Team.findOneById<Pick<ITeam, 'roomId' | '_id'>>(teamId, {\n\t\t\tprojection: { _id: 1, roomId: 1 },\n\t\t});\n\t\tif (!team) {\n\t\t\tthrow new Error('team-does-not-exist');\n\t\t}\n\n\t\tconst membersIds = members.map((m) => m.userId);\n\t\tconst usersToRemove = await Users.findByIds(membersIds, {\n\t\t\tprojection: { _id: 1, username: 1 },\n\t\t}).toArray();\n\t\tconst byUser = await Users.findOneById(uid);\n\n\t\tfor await (const member of members) {\n\t\t\tif (!member.userId) {\n\t\t\t\tthrow new Error('invalid-user');\n\t\t\t}\n\n\t\t\tconst existingMember = await TeamMember.findOneByUserIdAndTeamId(member.userId, team._id);\n\t\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(team.roomId, member.userId);\n\n\t\t\tif (!existingMember && !subscription) {\n\t\t\t\tthrow new Error('member-does-not-exist');\n\t\t\t}\n\n\t\t\tif (existingMember) {\n\t\t\t\tif (existingMember.roles?.includes('owner')) {\n\t\t\t\t\tconst totalOwners = await TeamMember.countByTeamIdAndRole(team._id, 'owner');\n\t\t\t\t\tif (totalOwners === 1) {\n\t\t\t\t\t\tthrow new Error('last-owner-can-not-be-removed');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tawait TeamMember.removeById(existingMember._id);\n\t\t\t}\n\n\t\t\tconst removedUser = usersToRemove.find((u) => u._id === (existingMember || member).userId);\n\t\t\tif (removedUser) {\n\t\t\t\tawait removeUserFromRoom(\n\t\t\t\t\tteam.roomId,\n\t\t\t\t\tremovedUser,\n\t\t\t\t\tuid !== member.userId && byUser\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tbyUser,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync insertMemberOnTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tconst inviter = { _id: 'rocket.cat', username: 'rocket.cat' };\n\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait addUserToRoom(team.roomId, user, inviter, { skipSystemMessage: false });\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeMemberFromTeams(userId: string, teamIds: Array<string>): Promise<void> {\n\t\tawait Promise.all(\n\t\t\tteamIds.map(async (teamId) => {\n\t\t\t\tconst team = await Team.findOneById(teamId);\n\t\t\t\tconst user = await Users.findOneById(userId);\n\n\t\t\t\tif (!team || !user) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait removeUserFromRoom(team.roomId, user);\n\t\t\t}),\n\t\t);\n\t}\n\n\tasync removeAllMembersFromTeam(teamId: string): Promise<void> {\n\t\tif (!teamId) {\n\t\t\tthrow new Error('missing-teamId');\n\t\t}\n\n\t\tawait TeamMember.deleteByTeamId(teamId);\n\t}\n\n\tasync addMember(inviter: Pick<IUser, '_id' | 'username'>, userId: string, teamId: string): Promise<boolean> {\n\t\tconst isAlreadyAMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (isAlreadyAMember) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet inviterData = {} as Pick<IUser, '_id' | 'username'>;\n\t\tif (inviter) {\n\t\t\tinviterData = { _id: inviter._id, username: inviter.username };\n\t\t}\n\n\t\tawait TeamMember.createOneByTeamIdAndUserId(teamId, userId, inviterData);\n\n\t\tawait this.addMembersToDefaultRooms(inviter, teamId, [{ userId }]);\n\n\t\treturn true;\n\t}\n\n\tgetAllPublicTeams(): Promise<ITeam[]>;\n\n\tgetAllPublicTeams(options: FindOptions<ITeam>): Promise<ITeam[]>;\n\n\tasync getAllPublicTeams(options?: undefined | FindOptions<ITeam>): Promise<ITeam[]> {\n\t\treturn options ? Team.findByType(TEAM_TYPE.PUBLIC, options).toArray() : Team.findByType(TEAM_TYPE.PUBLIC).toArray();\n\t}\n\n\tasync getOneById(teamId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (options === undefined) {\n\t\t\treturn Team.findOneById(teamId);\n\t\t}\n\t\treturn Team.findOneById(teamId, options);\n\t}\n\n\tasync getOneByName(teamName: string | RegExp): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options: FindOptions<ITeam>): Promise<ITeam | null>;\n\n\tasync getOneByName(teamName: string | RegExp, options?: undefined | FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tif (!options) {\n\t\t\treturn Team.findOneByName(teamName);\n\t\t}\n\t\treturn Team.findOneByName(teamName, options);\n\t}\n\n\tasync getOneByMainRoomId(roomId: string): Promise<Pick<ITeam, '_id'> | null> {\n\t\treturn Team.findOneByMainRoomId<Pick<ITeam, '_id'>>(roomId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t}\n\n\tasync getOneByRoomId(roomId: string, options?: FindOptions<ITeam>): Promise<ITeam | null> {\n\t\tconst room = await Rooms.findOneById(roomId, { projection: { teamId: 1 } });\n\n\t\tif (!room) {\n\t\t\tthrow new Error('invalid-room');\n\t\t}\n\n\t\tif (!room.teamId) {\n\t\t\tthrow new Error('room-not-on-team');\n\t\t}\n\n\t\treturn Team.findOneById(room.teamId, options);\n\t}\n\n\tasync addRolesToMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.updateRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync removeRolesFromMember(teamId: string, userId: string, roles: Array<string>): Promise<boolean> {\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, teamId, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\t// TODO should this throw an error instead?\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!(await TeamMember.removeRolesByTeamIdAndUserId(teamId, userId, roles));\n\t}\n\n\tasync getInfoByName(teamName: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\tname: teamName,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync getInfoById(teamId: string): Promise<Omit<ITeam, 'usernames'> | null> {\n\t\treturn Team.findOne<Omit<ITeam, 'usernames'>>(\n\t\t\t{\n\t\t\t\t_id: teamId,\n\t\t\t},\n\t\t\t{ projection: { usernames: 0 } },\n\t\t);\n\t}\n\n\tasync addMembersToDefaultRooms(\n\t\tinviter: Pick<IUser, '_id' | 'username'>,\n\t\tteamId: string,\n\t\tmembers: Array<Pick<ITeamMember, 'userId'>>,\n\t): Promise<void> {\n\t\tconst defaultRooms = await Rooms.findDefaultRoomsForTeam(teamId).toArray();\n\t\tconst users = await Users.findActiveByIds(members.map((member) => member.userId)).toArray();\n\n\t\tdefaultRooms.map(async (room) => {\n\t\t\t// at this point, users are already part of the team so we won't check for membership\n\t\t\tfor await (const user of users) {\n\t\t\t\t// add each user to the default room\n\t\t\t\tawait addUserToRoom(room._id, user, inviter, { skipSystemMessage: false });\n\t\t\t}\n\t\t});\n\t}\n\n\tasync deleteById(teamId: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneById(teamId));\n\t}\n\n\tasync deleteByName(teamName: string): Promise<boolean> {\n\t\treturn !!(await Team.deleteOneByName(teamName));\n\t}\n\n\tasync getStatistics(): Promise<ITeamStats> {\n\t\treturn {\n\t\t\ttotalTeams: await Team.estimatedDocumentCount(),\n\t\t\ttotalRoomsInsideTeams: await Rooms.countRoomsInsideTeams(),\n\t\t\ttotalDefaultRoomsInsideTeams: await Rooms.countRoomsInsideTeams(true),\n\t\t};\n\t}\n\n\tasync autocomplete(uid: string, name: string): Promise<ITeamAutocompleteResult[]> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst subscriptions = await Subscriptions.find<Pick<ISubscription, 'rid'>>({ 'u._id': uid }, { projection: { rid: 1 } }).toArray();\n\t\tconst subscriptionIds = subscriptions.map(({ rid }) => rid);\n\n\t\tconst rooms = await Rooms.find<ITeamAutocompleteResult>(\n\t\t\t{\n\t\t\t\tteamMain: true,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfname: nameRegex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_id: { $in: subscriptionIds },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tprojection: {\n\t\t\t\t\tfname: 1,\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tt: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t},\n\t\t\t\tlimit: 10,\n\t\t\t\tsort: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tfname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t).toArray();\n\n\t\treturn rooms;\n\t}\n\n\tprivate getParentRoom(team: AtLeast<ITeam, 'roomId'>): Promise<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'> | null> {\n\t\treturn Rooms.findOneById<Pick<IRoom, 'name' | 'fname' | 't' | '_id' | 'sidepanel'>>(team.roomId, {\n\t\t\tprojection: { name: 1, fname: 1, t: 1, sidepanel: 1 },\n\t\t});\n\t}\n\n\tasync getRoomInfo(\n\t\troom: AtLeast<IRoom, 'teamId' | 'teamMain' | '_id'>,\n\t): Promise<{ team?: Pick<ITeam, 'name' | 'roomId' | 'type'>; parentRoom?: Pick<IRoom, 'name' | 'fname' | 't' | '_id'> }> {\n\t\tif (!room.teamId) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst team = await Team.findOneById(room.teamId, { projection: { _id: 1, name: 1, roomId: 1, type: 1 } });\n\t\tif (!team) {\n\t\t\treturn {};\n\t\t}\n\n\t\tif (room.teamMain) {\n\t\t\treturn { team };\n\t\t}\n\n\t\tconst parentRoom = await this.getParentRoom(team);\n\t\treturn { team, ...(parentRoom && { parentRoom }) };\n\t}\n\n\t// Returns the list of rooms and discussions a user has access to inside a team\n\t// Rooms returned are a composition of the rooms the user is in + public rooms + discussions from the main room (if any)\n\tasync listChildren(\n\t\tuserId: string,\n\t\tteam: AtLeast<ITeam, '_id' | 'roomId' | 'type'>,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\tsort?: Record<string, 1 | -1>,\n\t\tskip = 0,\n\t\tlimit = 10,\n\t): Promise<{ total: number; data: IRoom[] }> {\n\t\tconst mainRoom = await Rooms.findOneById(team.roomId, { projection: { _id: 1 } });\n\t\tif (!mainRoom) {\n\t\t\tthrow new Error('error-invalid-team-no-main-room');\n\t\t}\n\n\t\tconst isMember = await TeamMember.findOneByUserIdAndTeamId(userId, team._id, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\n\t\tif (!isMember) {\n\t\t\tthrow new Error('error-invalid-team-not-a-member');\n\t\t}\n\n\t\tconst [{ totalCount: [{ count: total }] = [], paginatedResults: data = [] }] =\n\t\t\t(await Rooms.findChildrenOfTeam(team._id, mainRoom._id, userId, filter, type, { skip, limit, sort }).toArray()) || [];\n\n\t\treturn {\n\t\t\ttotal,\n\t\t\tdata,\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"6bff28ffed55cf2d6d1e435d0757079c61514e35"}
