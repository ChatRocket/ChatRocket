{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/AgentData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-analytics/AgentData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/AgentData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/AgentData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/AgentData.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable new-cap */\nimport type { ConversationData } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype AgentOverviewValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time'\n\t| 'Avg_reaction_time';\n\nexport class AgentOverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tupdateMap<K>(map: Map<K, number>, key: K, value: number) {\n\t\tconst currentKeyValue = map.get(key);\n\t\tmap.set(key, currentKeyValue ? currentKeyValue + value : value);\n\t}\n\n\tsortByValue(data: { value: string }[], inv = false) {\n\t\tdata.sort((a, b) => {\n\t\t\t// sort array\n\t\t\tif (parseFloat(a.value) > parseFloat(b.value)) {\n\t\t\t\treturn inv ? -1 : 1; // if inv, reverse sort\n\t\t\t}\n\t\t\tif (parseFloat(a.value) < parseFloat(b.value)) {\n\t\t\t\treturn inv ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tisActionAllowed(action: string | undefined): action is AgentOverviewValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends AgentOverviewValidActions>(action: T, ...args: [moment.Moment, moment.Moment, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tconst agentConversations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: '%_of_conversations',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages(\n\t\t\t\t'l',\n\t\t\t\tdate,\n\t\t\t\t{\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\textraQuery,\n\t\t\t)\n\t\t\t.forEach((room) => {\n\t\t\t\tif (room.servedBy) {\n\t\t\t\t\tthis.updateMap(agentConversations, room.servedBy.username, 1);\n\t\t\t\t\ttotal++;\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentConversations.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst percentage = ((value / total) * 100).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: `${percentage}%`,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_chat_duration(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentChatDurations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_chat_duration',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.chatDuration) {\n\t\t\t\tif (agentChatDurations.has(servedBy.username)) {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: agentChatDurations.get(servedBy.username).chatDuration + metrics.chatDuration,\n\t\t\t\t\t\ttotal: agentChatDurations.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: metrics.chatDuration,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentChatDurations.forEach((obj, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst avg = (obj.chatDuration / obj.total).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Total_messages(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentMessages = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Total_messages',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ servedBy, msgs }) => {\n\t\t\t\tif (servedBy) {\n\t\t\t\t\tthis.updateMap(agentMessages, servedBy.username, msgs);\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentMessages.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgRespTime.get(servedBy.username).frt + metrics.response.ft,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.response.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Best_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Best_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentFirstRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n\t\t\t\t} else {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, metrics.response.ft);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentFirstRespTime.forEach((value, key) => {\n\t\t\t// calculate avg\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(value.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.avg) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: agentAvgRespTime.get(servedBy.username).avg + metrics.response.avg,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: metrics.response.avg,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.avg / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_reaction_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgReactionTime = new Map(); // stores avg reaction time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_reaction_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.reaction && metrics.reaction.ft) {\n\t\t\t\tif (agentAvgReactionTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgReactionTime.get(servedBy.username).frt + metrics.reaction.ft,\n\t\t\t\t\t\ttotal: agentAvgReactionTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.reaction.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgReactionTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/AgentData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-analytics/AgentData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/AgentData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/AgentData.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable new-cap */\nimport type { ConversationData } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype AgentOverviewValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time'\n\t| 'Avg_reaction_time';\n\nexport class AgentOverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tupdateMap<K>(map: Map<K, number>, key: K, value: number) {\n\t\tconst currentKeyValue = map.get(key);\n\t\tmap.set(key, currentKeyValue ? currentKeyValue + value : value);\n\t}\n\n\tsortByValue(data: { value: string }[], inv = false) {\n\t\tdata.sort((a, b) => {\n\t\t\t// sort array\n\t\t\tif (parseFloat(a.value) > parseFloat(b.value)) {\n\t\t\t\treturn inv ? -1 : 1; // if inv, reverse sort\n\t\t\t}\n\t\t\tif (parseFloat(a.value) < parseFloat(b.value)) {\n\t\t\t\treturn inv ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tisActionAllowed(action: string | undefined): action is AgentOverviewValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends AgentOverviewValidActions>(action: T, ...args: [moment.Moment, moment.Moment, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tconst agentConversations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: '%_of_conversations',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages(\n\t\t\t\t'l',\n\t\t\t\tdate,\n\t\t\t\t{\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\textraQuery,\n\t\t\t)\n\t\t\t.forEach((room) => {\n\t\t\t\tif (room.servedBy) {\n\t\t\t\t\tthis.updateMap(agentConversations, room.servedBy.username, 1);\n\t\t\t\t\ttotal++;\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentConversations.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst percentage = ((value / total) * 100).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: `${percentage}%`,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_chat_duration(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentChatDurations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_chat_duration',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.chatDuration) {\n\t\t\t\tif (agentChatDurations.has(servedBy.username)) {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: agentChatDurations.get(servedBy.username).chatDuration + metrics.chatDuration,\n\t\t\t\t\t\ttotal: agentChatDurations.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: metrics.chatDuration,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentChatDurations.forEach((obj, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst avg = (obj.chatDuration / obj.total).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Total_messages(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentMessages = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Total_messages',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ servedBy, msgs }) => {\n\t\t\t\tif (servedBy) {\n\t\t\t\t\tthis.updateMap(agentMessages, servedBy.username, msgs);\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentMessages.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgRespTime.get(servedBy.username).frt + metrics.response.ft,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.response.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Best_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Best_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentFirstRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n\t\t\t\t} else {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, metrics.response.ft);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentFirstRespTime.forEach((value, key) => {\n\t\t\t// calculate avg\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(value.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.avg) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: agentAvgRespTime.get(servedBy.username).avg + metrics.response.avg,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: metrics.response.avg,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.avg / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_reaction_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgReactionTime = new Map(); // stores avg reaction time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_reaction_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.reaction && metrics.reaction.ft) {\n\t\t\t\tif (agentAvgReactionTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgReactionTime.get(servedBy.username).frt + metrics.reaction.ft,\n\t\t\t\t\t\ttotal: agentAvgReactionTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.reaction.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgReactionTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      AgentOverviewData: () => AgentOverviewData\n    });\n    let secondsToHHMMSS;\n    module.link(\"../../../lib/utils/secondsToHHMMSS\", {\n      secondsToHHMMSS(v) {\n        secondsToHHMMSS = v;\n      }\n    }, 0);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AgentOverviewData {\n      constructor(roomsModel) {\n        this.roomsModel = void 0;\n        this.roomsModel = roomsModel;\n      }\n      updateMap(map, key, value) {\n        const currentKeyValue = map.get(key);\n        map.set(key, currentKeyValue ? currentKeyValue + value : value);\n      }\n      sortByValue(data) {\n        let inv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        data.sort((a, b) => {\n          // sort array\n          if (parseFloat(a.value) > parseFloat(b.value)) {\n            return inv ? -1 : 1; // if inv, reverse sort\n          }\n          if (parseFloat(a.value) < parseFloat(b.value)) {\n            return inv ? 1 : -1;\n          }\n          return 0;\n        });\n      }\n      isActionAllowed(action) {\n        if (!action) {\n          return false;\n        }\n        return ['Total_conversations', 'Avg_chat_duration', 'Total_messages', 'Avg_first_response_time', 'Best_first_response_time', 'Avg_response_time', 'Avg_reaction_time'].includes(action);\n      }\n      callAction(action) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        switch (action) {\n          case 'Total_conversations':\n            return this.Total_conversations(...args);\n          case 'Avg_chat_duration':\n            return this.Avg_chat_duration(...args);\n          case 'Total_messages':\n            return this.Total_messages(...args);\n          case 'Avg_first_response_time':\n            return this.Avg_first_response_time(...args);\n          case 'Best_first_response_time':\n            return this.Best_first_response_time(...args);\n          case 'Avg_response_time':\n            return this.Avg_response_time(...args);\n          case 'Avg_reaction_time':\n            return this.Avg_reaction_time(...args);\n          default:\n            throw new Error('Invalid action');\n        }\n      }\n      async Total_conversations(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        let total = 0;\n        const agentConversations = new Map(); // stores total conversations for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: '%_of_conversations'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDateWithMessages('l', date, {\n          departmentId\n        }, {}, extraQuery).forEach(room => {\n          if (room.servedBy) {\n            this.updateMap(agentConversations, room.servedBy.username, 1);\n            total++;\n          }\n        });\n        agentConversations.forEach((value, key) => {\n          // calculate percentage\n          const percentage = (value / total * 100).toFixed(2);\n          data.data.push({\n            name: key,\n            value: \"\".concat(percentage, \"%\")\n          });\n        });\n        this.sortByValue(data.data, true); // reverse sort array\n        return data;\n      }\n      async Avg_chat_duration(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentChatDurations = new Map(); // stores total conversations for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Avg_chat_duration'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref => {\n          let {\n            metrics,\n            servedBy\n          } = _ref;\n          if (servedBy && metrics && metrics.chatDuration) {\n            if (agentChatDurations.has(servedBy.username)) {\n              agentChatDurations.set(servedBy.username, {\n                chatDuration: agentChatDurations.get(servedBy.username).chatDuration + metrics.chatDuration,\n                total: agentChatDurations.get(servedBy.username).total + 1\n              });\n            } else {\n              agentChatDurations.set(servedBy.username, {\n                chatDuration: metrics.chatDuration,\n                total: 1\n              });\n            }\n          }\n        });\n        agentChatDurations.forEach((obj, key) => {\n          // calculate percentage\n          const avg = (obj.chatDuration / obj.total).toFixed(2);\n          data.data.push({\n            name: key,\n            value: secondsToHHMMSS(avg)\n          });\n        });\n        this.sortByValue(data.data, true); // reverse sort array\n        return data;\n      }\n      async Total_messages(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentMessages = new Map(); // stores total conversations for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Total_messages'\n          }],\n          data: []\n        };\n        // we don't want to count visitor messages\n        const extraFilter = {\n          $lte: ['$token', null]\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDateWithMessages('l', date, {\n          departmentId\n        }, extraFilter, extraQuery).forEach(_ref2 => {\n          let {\n            servedBy,\n            msgs\n          } = _ref2;\n          if (servedBy) {\n            this.updateMap(agentMessages, servedBy.username, msgs);\n          }\n        });\n        agentMessages.forEach((value, key) => {\n          // calculate percentage\n          data.data.push({\n            name: key,\n            value\n          });\n        });\n        this.sortByValue(data.data, true); // reverse sort array\n        return data;\n      }\n      async Avg_first_response_time(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentAvgRespTime = new Map(); // stores avg response time for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Avg_first_response_time'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref3 => {\n          let {\n            metrics,\n            servedBy\n          } = _ref3;\n          if (servedBy && metrics && metrics.response && metrics.response.ft) {\n            if (agentAvgRespTime.has(servedBy.username)) {\n              agentAvgRespTime.set(servedBy.username, {\n                frt: agentAvgRespTime.get(servedBy.username).frt + metrics.response.ft,\n                total: agentAvgRespTime.get(servedBy.username).total + 1\n              });\n            } else {\n              agentAvgRespTime.set(servedBy.username, {\n                frt: metrics.response.ft,\n                total: 1\n              });\n            }\n          }\n        });\n        agentAvgRespTime.forEach((obj, key) => {\n          // calculate avg\n          const avg = obj.frt / obj.total;\n          data.data.push({\n            name: key,\n            value: secondsToHHMMSS(avg.toFixed(2))\n          });\n        });\n        this.sortByValue(data.data, false); // sort array\n        return data;\n      }\n      async Best_first_response_time(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentFirstRespTime = new Map(); // stores avg response time for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Best_first_response_time'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref4 => {\n          let {\n            metrics,\n            servedBy\n          } = _ref4;\n          if (servedBy && metrics && metrics.response && metrics.response.ft) {\n            if (agentFirstRespTime.has(servedBy.username)) {\n              agentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n            } else {\n              agentFirstRespTime.set(servedBy.username, metrics.response.ft);\n            }\n          }\n        });\n        agentFirstRespTime.forEach((value, key) => {\n          // calculate avg\n          data.data.push({\n            name: key,\n            value: secondsToHHMMSS(value.toFixed(2))\n          });\n        });\n        this.sortByValue(data.data, false); // sort array\n        return data;\n      }\n      async Avg_response_time(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentAvgRespTime = new Map(); // stores avg response time for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Avg_response_time'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref5 => {\n          let {\n            metrics,\n            servedBy\n          } = _ref5;\n          if (servedBy && metrics && metrics.response && metrics.response.avg) {\n            if (agentAvgRespTime.has(servedBy.username)) {\n              agentAvgRespTime.set(servedBy.username, {\n                avg: agentAvgRespTime.get(servedBy.username).avg + metrics.response.avg,\n                total: agentAvgRespTime.get(servedBy.username).total + 1\n              });\n            } else {\n              agentAvgRespTime.set(servedBy.username, {\n                avg: metrics.response.avg,\n                total: 1\n              });\n            }\n          }\n        });\n        agentAvgRespTime.forEach((obj, key) => {\n          // calculate avg\n          const avg = obj.avg / obj.total;\n          data.data.push({\n            name: key,\n            value: secondsToHHMMSS(avg.toFixed(2))\n          });\n        });\n        this.sortByValue(data.data, false); // sort array\n        return data;\n      }\n      async Avg_reaction_time(from, to, departmentId) {\n        let extraQuery = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const agentAvgReactionTime = new Map(); // stores avg reaction time for each agent\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        const data = {\n          head: [{\n            name: 'Agent'\n          }, {\n            name: 'Avg_reaction_time'\n          }],\n          data: []\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref6 => {\n          let {\n            metrics,\n            servedBy\n          } = _ref6;\n          if (servedBy && metrics && metrics.reaction && metrics.reaction.ft) {\n            if (agentAvgReactionTime.has(servedBy.username)) {\n              agentAvgReactionTime.set(servedBy.username, {\n                frt: agentAvgReactionTime.get(servedBy.username).frt + metrics.reaction.ft,\n                total: agentAvgReactionTime.get(servedBy.username).total + 1\n              });\n            } else {\n              agentAvgReactionTime.set(servedBy.username, {\n                frt: metrics.reaction.ft,\n                total: 1\n              });\n            }\n          }\n        });\n        agentAvgReactionTime.forEach((obj, key) => {\n          // calculate avg\n          const avg = obj.frt / obj.total;\n          data.data.push({\n            name: key,\n            value: secondsToHHMMSS(avg.toFixed(2))\n          });\n        });\n        this.sortByValue(data.data, false); // sort array\n        return data;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","AgentOverviewData","secondsToHHMMSS","link","v","__reifyWaitForDeps__","constructor","roomsModel","updateMap","map","key","value","currentKeyValue","get","set","sortByValue","data","inv","arguments","length","undefined","sort","a","b","parseFloat","isActionAllowed","action","includes","callAction","_len","args","Array","_key","Total_conversations","Avg_chat_duration","Total_messages","Avg_first_response_time","Best_first_response_time","Avg_response_time","Avg_reaction_time","Error","from","to","departmentId","extraQuery","total","agentConversations","Map","date","gte","toDate","lte","head","name","getAnalyticsMetricsBetweenDateWithMessages","forEach","room","servedBy","username","percentage","toFixed","push","concat","agentChatDurations","getAnalyticsMetricsBetweenDate","_ref","metrics","chatDuration","has","obj","avg","agentMessages","extraFilter","$lte","_ref2","msgs","agentAvgRespTime","_ref3","response","ft","frt","agentFirstRespTime","_ref4","Math","min","_ref5","agentAvgReactionTime","_ref6","reaction","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel-analytics/AgentData.ts"],"sourcesContent":["/* eslint-disable new-cap */\nimport type { ConversationData } from '@rocket.chat/core-services';\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype AgentOverviewValidActions =\n\t| 'Total_conversations'\n\t| 'Avg_chat_duration'\n\t| 'Total_messages'\n\t| 'Avg_first_response_time'\n\t| 'Best_first_response_time'\n\t| 'Avg_response_time'\n\t| 'Avg_reaction_time';\n\nexport class AgentOverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tupdateMap<K>(map: Map<K, number>, key: K, value: number) {\n\t\tconst currentKeyValue = map.get(key);\n\t\tmap.set(key, currentKeyValue ? currentKeyValue + value : value);\n\t}\n\n\tsortByValue(data: { value: string }[], inv = false) {\n\t\tdata.sort((a, b) => {\n\t\t\t// sort array\n\t\t\tif (parseFloat(a.value) > parseFloat(b.value)) {\n\t\t\t\treturn inv ? -1 : 1; // if inv, reverse sort\n\t\t\t}\n\t\t\tif (parseFloat(a.value) < parseFloat(b.value)) {\n\t\t\t\treturn inv ? 1 : -1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n\n\tisActionAllowed(action: string | undefined): action is AgentOverviewValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn [\n\t\t\t'Total_conversations',\n\t\t\t'Avg_chat_duration',\n\t\t\t'Total_messages',\n\t\t\t'Avg_first_response_time',\n\t\t\t'Best_first_response_time',\n\t\t\t'Avg_response_time',\n\t\t\t'Avg_reaction_time',\n\t\t].includes(action);\n\t}\n\n\tcallAction<T extends AgentOverviewValidActions>(action: T, ...args: [moment.Moment, moment.Moment, string?, Filter<IOmnichannelRoom>?]) {\n\t\tswitch (action) {\n\t\t\tcase 'Total_conversations':\n\t\t\t\treturn this.Total_conversations(...args);\n\t\t\tcase 'Avg_chat_duration':\n\t\t\t\treturn this.Avg_chat_duration(...args);\n\t\t\tcase 'Total_messages':\n\t\t\t\treturn this.Total_messages(...args);\n\t\t\tcase 'Avg_first_response_time':\n\t\t\t\treturn this.Avg_first_response_time(...args);\n\t\t\tcase 'Best_first_response_time':\n\t\t\t\treturn this.Best_first_response_time(...args);\n\t\t\tcase 'Avg_response_time':\n\t\t\t\treturn this.Avg_response_time(...args);\n\t\t\tcase 'Avg_reaction_time':\n\t\t\t\treturn this.Avg_reaction_time(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tasync Total_conversations(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tlet total = 0;\n\t\tconst agentConversations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: '%_of_conversations',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages(\n\t\t\t\t'l',\n\t\t\t\tdate,\n\t\t\t\t{\n\t\t\t\t\tdepartmentId,\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\textraQuery,\n\t\t\t)\n\t\t\t.forEach((room) => {\n\t\t\t\tif (room.servedBy) {\n\t\t\t\t\tthis.updateMap(agentConversations, room.servedBy.username, 1);\n\t\t\t\t\ttotal++;\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentConversations.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst percentage = ((value / total) * 100).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: `${percentage}%`,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_chat_duration(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentChatDurations = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_chat_duration',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.chatDuration) {\n\t\t\t\tif (agentChatDurations.has(servedBy.username)) {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: agentChatDurations.get(servedBy.username).chatDuration + metrics.chatDuration,\n\t\t\t\t\t\ttotal: agentChatDurations.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentChatDurations.set(servedBy.username, {\n\t\t\t\t\t\tchatDuration: metrics.chatDuration,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentChatDurations.forEach((obj, key) => {\n\t\t\t// calculate percentage\n\t\t\tconst avg = (obj.chatDuration / obj.total).toFixed(2);\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Total_messages(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentMessages = new Map(); // stores total conversations for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Total_messages',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\t// we don't want to count visitor messages\n\t\tconst extraFilter = { $lte: ['$token', null] };\n\t\tawait this.roomsModel\n\t\t\t.getAnalyticsMetricsBetweenDateWithMessages('l', date, { departmentId }, extraFilter, extraQuery)\n\t\t\t.forEach(({ servedBy, msgs }) => {\n\t\t\t\tif (servedBy) {\n\t\t\t\t\tthis.updateMap(agentMessages, servedBy.username, msgs);\n\t\t\t\t}\n\t\t\t});\n\n\t\tagentMessages.forEach((value, key) => {\n\t\t\t// calculate percentage\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, true); // reverse sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgRespTime.get(servedBy.username).frt + metrics.response.ft,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.response.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Best_first_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentFirstRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Best_first_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.ft) {\n\t\t\t\tif (agentFirstRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, Math.min(agentFirstRespTime.get(servedBy.username), metrics.response.ft));\n\t\t\t\t} else {\n\t\t\t\t\tagentFirstRespTime.set(servedBy.username, metrics.response.ft);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentFirstRespTime.forEach((value, key) => {\n\t\t\t// calculate avg\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(value.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_response_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgRespTime = new Map(); // stores avg response time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_response_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.response && metrics.response.avg) {\n\t\t\t\tif (agentAvgRespTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: agentAvgRespTime.get(servedBy.username).avg + metrics.response.avg,\n\t\t\t\t\t\ttotal: agentAvgRespTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgRespTime.set(servedBy.username, {\n\t\t\t\t\t\tavg: metrics.response.avg,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgRespTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.avg / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n\n\tasync Avg_reaction_time(from: moment.Moment, to: moment.Moment, departmentId?: string, extraQuery: Filter<IOmnichannelRoom> = {}) {\n\t\tconst agentAvgReactionTime = new Map(); // stores avg reaction time for each agent\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tconst data: ConversationData = {\n\t\t\thead: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Agent',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Avg_reaction_time',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdata: [],\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics, servedBy }) => {\n\t\t\tif (servedBy && metrics && metrics.reaction && metrics.reaction.ft) {\n\t\t\t\tif (agentAvgReactionTime.has(servedBy.username)) {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: agentAvgReactionTime.get(servedBy.username).frt + metrics.reaction.ft,\n\t\t\t\t\t\ttotal: agentAvgReactionTime.get(servedBy.username).total + 1,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tagentAvgReactionTime.set(servedBy.username, {\n\t\t\t\t\t\tfrt: metrics.reaction.ft,\n\t\t\t\t\t\ttotal: 1,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tagentAvgReactionTime.forEach((obj, key) => {\n\t\t\t// calculate avg\n\t\t\tconst avg = obj.frt / obj.total;\n\n\t\t\tdata.data.push({\n\t\t\t\tname: key,\n\t\t\t\tvalue: secondsToHHMMSS(avg.toFixed(2)),\n\t\t\t});\n\t\t});\n\n\t\tthis.sortByValue(data.data, false); // sort array\n\n\t\treturn data;\n\t}\n}\n"],"mappings":";;;IAMAA,MAAA,CAAOC,MAAE;MAAAC,iBAAuB,EAAAA,CAAA,KAAAA;IAAA;IAAA,IAAAC,eAAqC;IAAAH,MAAA,CAAAI,IAAA;MAAAD,gBAAAE,CAAA;QAAAF,eAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,oBAAA,WAAAA,oBAAA;IAW/D,MAAOJ,iBAAiB;MAC7BK,YAA6BC,UAA+B;QAAA,KAA/BA,UAAA;QAAA,KAAAA,UAAU,GAAVA,UAAU;MAAwB;MAE/DC,SAASA,CAAIC,GAAmB,EAAEC,GAAM,EAAEC,KAAa;QACtD,MAAMC,eAAe,GAAGH,GAAG,CAACI,GAAG,CAACH,GAAG,CAAC;QACpCD,GAAG,CAACK,GAAG,CAACJ,GAAG,EAAEE,eAAe,GAAGA,eAAe,GAAGD,KAAK,GAAGA,KAAK,CAAC;MAChE;MAEAI,WAAWA,CAACC,IAAyB,EAAa;QAAA,IAAXC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;QACjDF,IAAI,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;UAClB;UACA,IAAIC,UAAU,CAACF,CAAC,CAACX,KAAK,CAAC,GAAGa,UAAU,CAACD,CAAC,CAACZ,KAAK,CAAC,EAAE;YAC9C,OAAOM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;UACtB;UACA,IAAIO,UAAU,CAACF,CAAC,CAACX,KAAK,CAAC,GAAGa,UAAU,CAACD,CAAC,CAACZ,KAAK,CAAC,EAAE;YAC9C,OAAOM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;UACpB;UACA,OAAO,CAAC;QACT,CAAC,CAAC;MACH;MAEAQ,eAAeA,CAACC,MAA0B;QACzC,IAAI,CAACA,MAAM,EAAE;UACZ,OAAO,KAAK;QACb;QACA,OAAO,CACN,qBAAqB,EACrB,mBAAmB,EACnB,gBAAgB,EAChB,yBAAyB,EACzB,0BAA0B,EAC1B,mBAAmB,EACnB,mBAAmB,CACnB,CAACC,QAAQ,CAACD,MAAM,CAAC;MACnB;MAEAE,UAAUA,CAAsCF,MAAS,EAA6E;QAAA,SAAAG,IAAA,GAAAX,SAAA,CAAAC,MAAA,EAAxEW,IAAwE,OAAAC,KAAA,CAAAF,IAAA,OAAAA,IAAA,WAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;UAAxEF,IAAwE,CAAAE,IAAA,QAAAd,SAAA,CAAAc,IAAA;QAAA;QACrI,QAAQN,MAAM;UACb,KAAK,qBAAqB;YACzB,OAAO,IAAI,CAACO,mBAAmB,CAAC,GAAGH,IAAI,CAAC;UACzC,KAAK,mBAAmB;YACvB,OAAO,IAAI,CAACI,iBAAiB,CAAC,GAAGJ,IAAI,CAAC;UACvC,KAAK,gBAAgB;YACpB,OAAO,IAAI,CAACK,cAAc,CAAC,GAAGL,IAAI,CAAC;UACpC,KAAK,yBAAyB;YAC7B,OAAO,IAAI,CAACM,uBAAuB,CAAC,GAAGN,IAAI,CAAC;UAC7C,KAAK,0BAA0B;YAC9B,OAAO,IAAI,CAACO,wBAAwB,CAAC,GAAGP,IAAI,CAAC;UAC9C,KAAK,mBAAmB;YACvB,OAAO,IAAI,CAACQ,iBAAiB,CAAC,GAAGR,IAAI,CAAC;UACvC,KAAK,mBAAmB;YACvB,OAAO,IAAI,CAACS,iBAAiB,CAAC,GAAGT,IAAI,CAAC;UACvC;YACC,MAAM,IAAIU,KAAK,CAAC,gBAAgB,CAAC;QACnC;MACD;MAEA,MAAMP,mBAAmBA,CAACQ,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QACjI,IAAI2B,KAAK,GAAG,CAAC;QACb,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,EAAE,CAAC,CAAC;QACtC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CACnB+C,0CAA0C,CAC1C,GAAG,EACHN,IAAI,EACJ;UACCL;SACA,EACD,EAAE,EACFC,UAAU,CACV,CACAW,OAAO,CAAEC,IAAI,IAAI;UACjB,IAAIA,IAAI,CAACC,QAAQ,EAAE;YAClB,IAAI,CAACjD,SAAS,CAACsC,kBAAkB,EAAEU,IAAI,CAACC,QAAQ,CAACC,QAAQ,EAAE,CAAC,CAAC;YAC7Db,KAAK,EAAE;UACR;QACD,CAAC,CAAC;QAEHC,kBAAkB,CAACS,OAAO,CAAC,CAAC5C,KAAK,EAAED,GAAG,KAAI;UACzC;UACA,MAAMiD,UAAU,GAAG,CAAEhD,KAAK,GAAGkC,KAAK,GAAI,GAAG,EAAEe,OAAO,CAAC,CAAC,CAAC;UAErD5C,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,KAAAmD,MAAA,CAAKH,UAAU;WACpB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC5C,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAEnC,OAAOA,IAAI;MACZ;MAEA,MAAMkB,iBAAiBA,CAACO,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QAC/H,MAAM6C,kBAAkB,GAAG,IAAIhB,GAAG,EAAE,CAAC,CAAC;QACtC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CAACyD,8BAA8B,CAAC,GAAG,EAAEhB,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAEC,UAAU,CAAC,CAACW,OAAO,CAACU,IAAA,IAA0B;UAAA,IAAzB;YAAEC,OAAO;YAAET;UAAQ,CAAE,GAAAQ,IAAA;UAC3H,IAAIR,QAAQ,IAAIS,OAAO,IAAIA,OAAO,CAACC,YAAY,EAAE;YAChD,IAAIJ,kBAAkB,CAACK,GAAG,CAACX,QAAQ,CAACC,QAAQ,CAAC,EAAE;cAC9CK,kBAAkB,CAACjD,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACzCS,YAAY,EAAEJ,kBAAkB,CAAClD,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACS,YAAY,GAAGD,OAAO,CAACC,YAAY;gBAC3FtB,KAAK,EAAEkB,kBAAkB,CAAClD,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACb,KAAK,GAAG;eACzD,CAAC;YACH,CAAC,MAAM;cACNkB,kBAAkB,CAACjD,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACzCS,YAAY,EAAED,OAAO,CAACC,YAAY;gBAClCtB,KAAK,EAAE;eACP,CAAC;YACH;UACD;QACD,CAAC,CAAC;QAEFkB,kBAAkB,CAACR,OAAO,CAAC,CAACc,GAAG,EAAE3D,GAAG,KAAI;UACvC;UACA,MAAM4D,GAAG,GAAG,CAACD,GAAG,CAACF,YAAY,GAAGE,GAAG,CAACxB,KAAK,EAAEe,OAAO,CAAC,CAAC,CAAC;UAErD5C,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,EAAET,eAAe,CAACoE,GAAG;WAC1B,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACvD,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAEnC,OAAOA,IAAI;MACZ;MAEA,MAAMmB,cAAcA,CAACM,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QAC5H,MAAMqD,aAAa,GAAG,IAAIxB,GAAG,EAAE,CAAC,CAAC;QACjC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED;QACA,MAAMwD,WAAW,GAAG;UAAEC,IAAI,EAAE,CAAC,QAAQ,EAAE,IAAI;QAAC,CAAE;QAC9C,MAAM,IAAI,CAAClE,UAAU,CACnB+C,0CAA0C,CAAC,GAAG,EAAEN,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAE6B,WAAW,EAAE5B,UAAU,CAAC,CAChGW,OAAO,CAACmB,KAAA,IAAuB;UAAA,IAAtB;YAAEjB,QAAQ;YAAEkB;UAAI,CAAE,GAAAD,KAAA;UAC3B,IAAIjB,QAAQ,EAAE;YACb,IAAI,CAACjD,SAAS,CAAC+D,aAAa,EAAEd,QAAQ,CAACC,QAAQ,EAAEiB,IAAI,CAAC;UACvD;QACD,CAAC,CAAC;QAEHJ,aAAa,CAAChB,OAAO,CAAC,CAAC5C,KAAK,EAAED,GAAG,KAAI;UACpC;UACAM,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC;WACA,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACI,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAEnC,OAAOA,IAAI;MACZ;MAEA,MAAMoB,uBAAuBA,CAACK,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QACrI,MAAM0D,gBAAgB,GAAG,IAAI7B,GAAG,EAAE,CAAC,CAAC;QACpC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CAACyD,8BAA8B,CAAC,GAAG,EAAEhB,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAEC,UAAU,CAAC,CAACW,OAAO,CAACsB,KAAA,IAA0B;UAAA,IAAzB;YAAEX,OAAO;YAAET;UAAQ,CAAE,GAAAoB,KAAA;UAC3H,IAAIpB,QAAQ,IAAIS,OAAO,IAAIA,OAAO,CAACY,QAAQ,IAAIZ,OAAO,CAACY,QAAQ,CAACC,EAAE,EAAE;YACnE,IAAIH,gBAAgB,CAACR,GAAG,CAACX,QAAQ,CAACC,QAAQ,CAAC,EAAE;cAC5CkB,gBAAgB,CAAC9D,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACvCsB,GAAG,EAAEJ,gBAAgB,CAAC/D,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACsB,GAAG,GAAGd,OAAO,CAACY,QAAQ,CAACC,EAAE;gBACtElC,KAAK,EAAE+B,gBAAgB,CAAC/D,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACb,KAAK,GAAG;eACvD,CAAC;YACH,CAAC,MAAM;cACN+B,gBAAgB,CAAC9D,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACvCsB,GAAG,EAAEd,OAAO,CAACY,QAAQ,CAACC,EAAE;gBACxBlC,KAAK,EAAE;eACP,CAAC;YACH;UACD;QACD,CAAC,CAAC;QAEF+B,gBAAgB,CAACrB,OAAO,CAAC,CAACc,GAAG,EAAE3D,GAAG,KAAI;UACrC;UACA,MAAM4D,GAAG,GAAGD,GAAG,CAACW,GAAG,GAAGX,GAAG,CAACxB,KAAK;UAE/B7B,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,EAAET,eAAe,CAACoE,GAAG,CAACV,OAAO,CAAC,CAAC,CAAC;WACrC,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC7C,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAEpC,OAAOA,IAAI;MACZ;MAEA,MAAMqB,wBAAwBA,CAACI,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QACtI,MAAM+D,kBAAkB,GAAG,IAAIlC,GAAG,EAAE,CAAC,CAAC;QACtC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CAACyD,8BAA8B,CAAC,GAAG,EAAEhB,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAEC,UAAU,CAAC,CAACW,OAAO,CAAC2B,KAAA,IAA0B;UAAA,IAAzB;YAAEhB,OAAO;YAAET;UAAQ,CAAE,GAAAyB,KAAA;UAC3H,IAAIzB,QAAQ,IAAIS,OAAO,IAAIA,OAAO,CAACY,QAAQ,IAAIZ,OAAO,CAACY,QAAQ,CAACC,EAAE,EAAE;YACnE,IAAIE,kBAAkB,CAACb,GAAG,CAACX,QAAQ,CAACC,QAAQ,CAAC,EAAE;cAC9CuB,kBAAkB,CAACnE,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAEyB,IAAI,CAACC,GAAG,CAACH,kBAAkB,CAACpE,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,EAAEQ,OAAO,CAACY,QAAQ,CAACC,EAAE,CAAC,CAAC;YACpH,CAAC,MAAM;cACNE,kBAAkB,CAACnE,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAEQ,OAAO,CAACY,QAAQ,CAACC,EAAE,CAAC;YAC/D;UACD;QACD,CAAC,CAAC;QAEFE,kBAAkB,CAAC1B,OAAO,CAAC,CAAC5C,KAAK,EAAED,GAAG,KAAI;UACzC;UACAM,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,EAAET,eAAe,CAACS,KAAK,CAACiD,OAAO,CAAC,CAAC,CAAC;WACvC,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC7C,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAEpC,OAAOA,IAAI;MACZ;MAEA,MAAMsB,iBAAiBA,CAACG,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QAC/H,MAAM0D,gBAAgB,GAAG,IAAI7B,GAAG,EAAE,CAAC,CAAC;QACpC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CAACyD,8BAA8B,CAAC,GAAG,EAAEhB,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAEC,UAAU,CAAC,CAACW,OAAO,CAAC8B,KAAA,IAA0B;UAAA,IAAzB;YAAEnB,OAAO;YAAET;UAAQ,CAAE,GAAA4B,KAAA;UAC3H,IAAI5B,QAAQ,IAAIS,OAAO,IAAIA,OAAO,CAACY,QAAQ,IAAIZ,OAAO,CAACY,QAAQ,CAACR,GAAG,EAAE;YACpE,IAAIM,gBAAgB,CAACR,GAAG,CAACX,QAAQ,CAACC,QAAQ,CAAC,EAAE;cAC5CkB,gBAAgB,CAAC9D,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACvCY,GAAG,EAAEM,gBAAgB,CAAC/D,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACY,GAAG,GAAGJ,OAAO,CAACY,QAAQ,CAACR,GAAG;gBACvEzB,KAAK,EAAE+B,gBAAgB,CAAC/D,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACb,KAAK,GAAG;eACvD,CAAC;YACH,CAAC,MAAM;cACN+B,gBAAgB,CAAC9D,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBACvCY,GAAG,EAAEJ,OAAO,CAACY,QAAQ,CAACR,GAAG;gBACzBzB,KAAK,EAAE;eACP,CAAC;YACH;UACD;QACD,CAAC,CAAC;QAEF+B,gBAAgB,CAACrB,OAAO,CAAC,CAACc,GAAG,EAAE3D,GAAG,KAAI;UACrC;UACA,MAAM4D,GAAG,GAAGD,GAAG,CAACC,GAAG,GAAGD,GAAG,CAACxB,KAAK;UAE/B7B,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,EAAET,eAAe,CAACoE,GAAG,CAACV,OAAO,CAAC,CAAC,CAAC;WACrC,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC7C,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAEpC,OAAOA,IAAI;MACZ;MAEA,MAAMuB,iBAAiBA,CAACE,IAAmB,EAAEC,EAAiB,EAAEC,YAAqB,EAA2C;QAAA,IAAzCC,UAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuC,EAAE;QAC/H,MAAMoE,oBAAoB,GAAG,IAAIvC,GAAG,EAAE,CAAC,CAAC;QACxC,MAAMC,IAAI,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,MAAM,EAAE;UAClBC,GAAG,EAAET,EAAE,CAACQ,MAAM;SACd;QAED,MAAMlC,IAAI,GAAqB;UAC9BoC,IAAI,EAAE,CACL;YACCC,IAAI,EAAE;WACN,EACD;YACCA,IAAI,EAAE;WACN,CACD;UACDrC,IAAI,EAAE;SACN;QAED,MAAM,IAAI,CAACT,UAAU,CAACyD,8BAA8B,CAAC,GAAG,EAAEhB,IAAI,EAAE;UAAEL;QAAY,CAAE,EAAEC,UAAU,CAAC,CAACW,OAAO,CAACgC,KAAA,IAA0B;UAAA,IAAzB;YAAErB,OAAO;YAAET;UAAQ,CAAE,GAAA8B,KAAA;UAC3H,IAAI9B,QAAQ,IAAIS,OAAO,IAAIA,OAAO,CAACsB,QAAQ,IAAItB,OAAO,CAACsB,QAAQ,CAACT,EAAE,EAAE;YACnE,IAAIO,oBAAoB,CAAClB,GAAG,CAACX,QAAQ,CAACC,QAAQ,CAAC,EAAE;cAChD4B,oBAAoB,CAACxE,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBAC3CsB,GAAG,EAAEM,oBAAoB,CAACzE,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACsB,GAAG,GAAGd,OAAO,CAACsB,QAAQ,CAACT,EAAE;gBAC1ElC,KAAK,EAAEyC,oBAAoB,CAACzE,GAAG,CAAC4C,QAAQ,CAACC,QAAQ,CAAC,CAACb,KAAK,GAAG;eAC3D,CAAC;YACH,CAAC,MAAM;cACNyC,oBAAoB,CAACxE,GAAG,CAAC2C,QAAQ,CAACC,QAAQ,EAAE;gBAC3CsB,GAAG,EAAEd,OAAO,CAACsB,QAAQ,CAACT,EAAE;gBACxBlC,KAAK,EAAE;eACP,CAAC;YACH;UACD;QACD,CAAC,CAAC;QAEFyC,oBAAoB,CAAC/B,OAAO,CAAC,CAACc,GAAG,EAAE3D,GAAG,KAAI;UACzC;UACA,MAAM4D,GAAG,GAAGD,GAAG,CAACW,GAAG,GAAGX,GAAG,CAACxB,KAAK;UAE/B7B,IAAI,CAACA,IAAI,CAAC6C,IAAI,CAAC;YACdR,IAAI,EAAE3C,GAAG;YACTC,KAAK,EAAET,eAAe,CAACoE,GAAG,CAACV,OAAO,CAAC,CAAC,CAAC;WACrC,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC7C,WAAW,CAACC,IAAI,CAACA,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAEpC,OAAOA,IAAI;MACZ;;IACAyE,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"098bda9d371a9a55afb554a5d2e0f82434230436"}
