{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/translation/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/translation/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/translation/service.ts","inputSourceMap":{"version":3,"file":"server/services/translation/service.ts","sourceRoot":"","sources":["server/services/translation/service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAGlE,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,GAAG,MAAM,KAAK,CAAC;AAEtB,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAEtC,MAAM,OAAO,kBAAmB,SAAQ,oBAAoB;IACjD,IAAI,GAAG,aAAa,CAAC;IAE/B,uCAAuC;IAC/B,uBAAuB,GAAG,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IAE7F,KAAK,CAAC,iBAAiB;QAC9B,OAAQ,CAAC,MAAM,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,KAAgB,IAAI,IAAI,CAAC;IAC5E,CAAC;IAED,sGAAsG;IACtG,aAAa,CAAC,IAAY,EAAE,cAAsB,EAAE,IAA6B;QAChF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,6FAA6F;IAC7F,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAW;QACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,IAAY,EAAE,IAA6B;QAC1E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEtD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,iCAAiC,CAAC,IAAc;QACrD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEtD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACzB,GAAG;YACH,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;SACxD,CAAC,CAAC,CAAC;IACL,CAAC;CACD","sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { ITranslationService } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Settings } from '@rocket.chat/models';\nimport mem from 'mem';\n\nimport { i18n } from '../../lib/i18n';\n\nexport class TranslationService extends ServiceClassInternal implements ITranslationService {\n\tprotected name = 'translation';\n\n\t// Cache the server language for 1 hour\n\tprivate getServerLanguageCached = mem(this.getServerLanguage.bind(this), { maxAge: 1000 * 60 * 60 });\n\n\tprivate async getServerLanguage(): Promise<string> {\n\t\treturn ((await Settings.findOneById('Language'))?.value as string) || 'en';\n\t}\n\n\t// Use translateText when you already know the language, or want to translate to a predefined language\n\ttranslateText(text: string, targetLanguage: string, args?: Record<string, string>): Promise<string> {\n\t\treturn Promise.resolve(i18n.t(text, { lng: targetLanguage, ...args }));\n\t}\n\n\t// Use translate when you want to translate to the user's language, or server's as a fallback\n\tasync translate(text: string, user: IUser): Promise<string> {\n\t\tconst language = user.language || (await this.getServerLanguageCached());\n\n\t\treturn this.translateText(text, language);\n\t}\n\n\tasync translateToServerLanguage(text: string, args?: Record<string, string>): Promise<string> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn this.translateText(text, language, args);\n\t}\n\n\tasync translateMultipleToServerLanguage(keys: string[]): Promise<Array<{ key: string; value: string }>> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn keys.map((key) => ({\n\t\t\tkey,\n\t\t\tvalue: i18n.t(key, { lng: language, fallbackLng: 'en' }),\n\t\t}));\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/translation/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/translation/service.ts","inputSourceMap":{"version":3,"file":"server/services/translation/service.ts","sourceRoot":"","sources":["server/services/translation/service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAGlE,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,GAAG,MAAM,KAAK,CAAC;AAEtB,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AAEtC,MAAM,OAAO,kBAAmB,SAAQ,oBAAoB;IACjD,IAAI,GAAG,aAAa,CAAC;IAE/B,uCAAuC;IAC/B,uBAAuB,GAAG,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IAE7F,KAAK,CAAC,iBAAiB;QAC9B,OAAQ,CAAC,MAAM,QAAQ,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,KAAgB,IAAI,IAAI,CAAC;IAC5E,CAAC;IAED,sGAAsG;IACtG,aAAa,CAAC,IAAY,EAAE,cAAsB,EAAE,IAA6B;QAChF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;IAED,6FAA6F;IAC7F,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAW;QACxC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;QAEzE,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,IAAY,EAAE,IAA6B;QAC1E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEtD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,iCAAiC,CAAC,IAAc;QACrD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAEtD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YACzB,GAAG;YACH,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;SACxD,CAAC,CAAC,CAAC;IACL,CAAC;CACD","sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { ITranslationService } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Settings } from '@rocket.chat/models';\nimport mem from 'mem';\n\nimport { i18n } from '../../lib/i18n';\n\nexport class TranslationService extends ServiceClassInternal implements ITranslationService {\n\tprotected name = 'translation';\n\n\t// Cache the server language for 1 hour\n\tprivate getServerLanguageCached = mem(this.getServerLanguage.bind(this), { maxAge: 1000 * 60 * 60 });\n\n\tprivate async getServerLanguage(): Promise<string> {\n\t\treturn ((await Settings.findOneById('Language'))?.value as string) || 'en';\n\t}\n\n\t// Use translateText when you already know the language, or want to translate to a predefined language\n\ttranslateText(text: string, targetLanguage: string, args?: Record<string, string>): Promise<string> {\n\t\treturn Promise.resolve(i18n.t(text, { lng: targetLanguage, ...args }));\n\t}\n\n\t// Use translate when you want to translate to the user's language, or server's as a fallback\n\tasync translate(text: string, user: IUser): Promise<string> {\n\t\tconst language = user.language || (await this.getServerLanguageCached());\n\n\t\treturn this.translateText(text, language);\n\t}\n\n\tasync translateToServerLanguage(text: string, args?: Record<string, string>): Promise<string> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn this.translateText(text, language, args);\n\t}\n\n\tasync translateMultipleToServerLanguage(keys: string[]): Promise<Array<{ key: string; value: string }>> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn keys.map((key) => ({\n\t\t\tkey,\n\t\t\tvalue: i18n.t(key, { lng: language, fallbackLng: 'en' }),\n\t\t}));\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      TranslationService: () => TranslationService\n    });\n    let ServiceClassInternal;\n    module.link(\"@rocket.chat/core-services\", {\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let Settings;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      }\n    }, 1);\n    let mem;\n    module.link(\"mem\", {\n      default(v) {\n        mem = v;\n      }\n    }, 2);\n    let i18n;\n    module.link(\"../../lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class TranslationService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'translation';\n        // Cache the server language for 1 hour\n        this.getServerLanguageCached = mem(this.getServerLanguage.bind(this), {\n          maxAge: 1000 * 60 * 60\n        });\n      }\n      async getServerLanguage() {\n        var _await$Settings$findO;\n        return ((_await$Settings$findO = await Settings.findOneById('Language')) === null || _await$Settings$findO === void 0 ? void 0 : _await$Settings$findO.value) || 'en';\n      }\n      // Use translateText when you already know the language, or want to translate to a predefined language\n      translateText(text, targetLanguage, args) {\n        return Promise.resolve(i18n.t(text, _objectSpread({\n          lng: targetLanguage\n        }, args)));\n      }\n      // Use translate when you want to translate to the user's language, or server's as a fallback\n      async translate(text, user) {\n        const language = user.language || (await this.getServerLanguageCached());\n        return this.translateText(text, language);\n      }\n      async translateToServerLanguage(text, args) {\n        const language = await this.getServerLanguageCached();\n        return this.translateText(text, language, args);\n      }\n      async translateMultipleToServerLanguage(keys) {\n        const language = await this.getServerLanguageCached();\n        return keys.map(key => ({\n          key,\n          value: i18n.t(key, {\n            lng: language,\n            fallbackLng: 'en'\n          })\n        }));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","TranslationService","ServiceClassInternal","Settings","mem","i18n","__reifyWaitForDeps__","constructor","arguments","name","getServerLanguageCached","getServerLanguage","bind","maxAge","_await$Settings$findO","findOneById","value","translateText","text","targetLanguage","args","Promise","resolve","t","lng","translate","user","language","translateToServerLanguage","translateMultipleToServerLanguage","keys","map","key","fallbackLng","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/translation/service.ts"],"sourcesContent":["import { ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { ITranslationService } from '@rocket.chat/core-services';\nimport type { IUser } from '@rocket.chat/core-typings';\nimport { Settings } from '@rocket.chat/models';\nimport mem from 'mem';\n\nimport { i18n } from '../../lib/i18n';\n\nexport class TranslationService extends ServiceClassInternal implements ITranslationService {\n\tprotected name = 'translation';\n\n\t// Cache the server language for 1 hour\n\tprivate getServerLanguageCached = mem(this.getServerLanguage.bind(this), { maxAge: 1000 * 60 * 60 });\n\n\tprivate async getServerLanguage(): Promise<string> {\n\t\treturn ((await Settings.findOneById('Language'))?.value as string) || 'en';\n\t}\n\n\t// Use translateText when you already know the language, or want to translate to a predefined language\n\ttranslateText(text: string, targetLanguage: string, args?: Record<string, string>): Promise<string> {\n\t\treturn Promise.resolve(i18n.t(text, { lng: targetLanguage, ...args }));\n\t}\n\n\t// Use translate when you want to translate to the user's language, or server's as a fallback\n\tasync translate(text: string, user: IUser): Promise<string> {\n\t\tconst language = user.language || (await this.getServerLanguageCached());\n\n\t\treturn this.translateText(text, language);\n\t}\n\n\tasync translateToServerLanguage(text: string, args?: Record<string, string>): Promise<string> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn this.translateText(text, language, args);\n\t}\n\n\tasync translateMultipleToServerLanguage(keys: string[]): Promise<Array<{ key: string; value: string }>> {\n\t\tconst language = await this.getServerLanguageCached();\n\n\t\treturn keys.map((key) => ({\n\t\t\tkey,\n\t\t\tvalue: i18n.t(key, { lng: language, fallbackLng: 'en' }),\n\t\t}));\n\t}\n}\n"],"mappings":";;;IAAA,IAAAA,aAAS;IAAAC,MAAA,CAAAC,IAAoB,uCAAqC;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAAlEH,MAAA,CAAOI,MAAE;MAAAC,kBAAsB,EAAAA,CAAA,KAAMA;IAAA;IAAA,IAAAC,oBAA6B;IAAAN,MAAA,CAAAC,IAAA;MAAAK,qBAAAH,CAAA;QAAAG,oBAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,QAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,SAAAJ,CAAA;QAAAI,QAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,GAAA;IAAAR,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAK,GAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,IAAA;IAAAT,MAAA,CAAAC,IAAA;MAAAQ,KAAAN,CAAA;QAAAM,IAAA,GAAAN,CAAA;MAAA;IAAA;IAAA,IAAAO,oBAAA,WAAAA,oBAAA;IAQ5D,MAAOL,kBAAmB,SAAQC,oBAAoB;MAAAK,YAAA;QAAA,SAAAC,SAAA;QAAA,KACjDC,IAAI,GAAG,aAAa;QAE9B;QAAA,KACQC,uBAAuB,GAAGN,GAAG,CAAC,IAAI,CAACO,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE;UAAEC,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG;QAAE,CAAE,CAAC;MAAA;MAE5F,MAAMF,iBAAiBA,CAAA;QAAA,IAAAG,qBAAA;QAC9B,OAAQ,EAAAA,qBAAA,GAAC,MAAMX,QAAQ,CAACY,WAAW,CAAC,UAAU,CAAC,cAAAD,qBAAA,uBAAvCA,qBAAA,CAA0CE,KAAgB,KAAI,IAAI;MAC3E;MAEA;MACAC,aAAaA,CAACC,IAAY,EAAEC,cAAsB,EAAEC,IAA6B;QAChF,OAAOC,OAAO,CAACC,OAAO,CAACjB,IAAI,CAACkB,CAAC,CAACL,IAAI,EAAAvB,aAAA;UAAI6B,GAAG,EAAEL;QAAc,GAAKC,IAAI,CAAE,CAAC,CAAC;MACvE;MAEA;MACA,MAAMK,SAASA,CAACP,IAAY,EAAEQ,IAAW;QACxC,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ,KAAK,MAAM,IAAI,CAACjB,uBAAuB,EAAE,CAAC;QAExE,OAAO,IAAI,CAACO,aAAa,CAACC,IAAI,EAAES,QAAQ,CAAC;MAC1C;MAEA,MAAMC,yBAAyBA,CAACV,IAAY,EAAEE,IAA6B;QAC1E,MAAMO,QAAQ,GAAG,MAAM,IAAI,CAACjB,uBAAuB,EAAE;QAErD,OAAO,IAAI,CAACO,aAAa,CAACC,IAAI,EAAES,QAAQ,EAAEP,IAAI,CAAC;MAChD;MAEA,MAAMS,iCAAiCA,CAACC,IAAc;QACrD,MAAMH,QAAQ,GAAG,MAAM,IAAI,CAACjB,uBAAuB,EAAE;QAErD,OAAOoB,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;UACzBA,GAAG;UACHhB,KAAK,EAAEX,IAAI,CAACkB,CAAC,CAACS,GAAG,EAAE;YAAER,GAAG,EAAEG,QAAQ;YAAEM,WAAW,EAAE;UAAI,CAAE;SACvD,CAAC,CAAC;MACJ;;IACAC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1104ed62118f67a44d4b46b6be92bf94cedc0b68"}
