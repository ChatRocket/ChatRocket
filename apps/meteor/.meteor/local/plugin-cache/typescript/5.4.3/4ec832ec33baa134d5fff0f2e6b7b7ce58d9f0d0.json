{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v290.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/startup/migrations/v290.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v290.ts","inputSourceMap":{"version":3,"file":"server/startup/migrations/v290.ts","sourceRoot":"","sources":["server/startup/migrations/v290.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,gBAAgB,EAAE,iCAAiC,EAAE,MAAM,qBAAqB,CAAC;AAEnH,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,mFAAmF;AACnF,YAAY,CAAC;IACZ,OAAO,EAAE,GAAG;IACZ,KAAK,CAAC,EAAE;QACP,+EAA+E;QAC/E,wEAAwE;QACxE,sDAAsD;QACtD,MAAM,iBAAiB,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACtE,MAAM,gBAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAEtC,IAAI,CAAC;YACJ,mDAAmD;YACnD,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,SAAS;YACT,OAAO,CAAC,IAAI,CAAC,2DAA2D,EAAE,KAAK,CAAC,CAAC;QAClF,CAAC;QAED,mIAAmI;QACnI,kFAAkF;QAClF,MAAM,aAAa,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QACxG,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC9B,4CAA4C;YAC5C,wEAAwE;YACxE,MAAM,iCAAiC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QACvE,CAAC;QAED,oEAAoE;QACpE,MAAM,QAAQ,CAAC,UAAU;QACxB,0EAA0E;QAC1E,EAAE,CAAC,EAAE,2BAAkC,EAAE,EACzC;YACC,IAAI,EAAE;gBACL,GAAG,EAAE,gCAAgC;gBACrC,mBAAmB,EAAE,yBAAyB;gBAC9C,aAAa,EAAE,wBAAwB;aACvC;YACD,MAAM,EAAE;gBACP,YAAY,EAAE,CAAC;aACf;SACD,CACD,CAAC;QAEF,qIAAqI;QACrI,MAAM,aAAa,CAAC,UAAU,CAC7B;YACC,CAAC,EAAE,GAAG;YACN,cAAc,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAClC,EACD;YACC,IAAI,EAAE;gBACL,cAAc,EAAE,sBAAsB,CAAC,aAAa;aACpD;SACD,CACD,CAAC;IACH,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { LivechatPriorityWeight } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Messages, LivechatPriority, OmnichannelServiceLevelAgreements } from '@rocket.chat/models';\n\nimport { addMigration } from '../../lib/migrations';\n\n// Migration to migrate old priorities to new SLAs, plus for new priorities feature\naddMigration({\n\tversion: 290,\n\tasync up() {\n\t\t// CE may have been EE first, so it may hold priorities which we want to remove\n\t\t// IF env is not EE anymore, then just cleaning the collection is enough\n\t\t// IF it's still EE, populate new collection with SLAs\n\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tawait LivechatPriority.deleteMany({});\n\n\t\ttry {\n\t\t\t// remove indexes from livechat_priority collection\n\t\t\tawait LivechatPriority.col.dropIndexes();\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t\tconsole.warn('Error dropping indexes from livechat_priority collection:', error);\n\t\t}\n\n\t\t// Since priorityId holds the \"SLA ID\" at this point, we need to rename the property so it doesn't conflict with current priorities\n\t\t// Typing of the prop will be kept as will be reused by the new priorities feature\n\t\tawait LivechatRooms.updateMany({ priorityId: { $exists: true } }, { $rename: { priorityId: 'slaId' } });\n\t\tif (currentPriorities.length) {\n\t\t\t// Since we updated the typings of the model\n\t\t\t// @ts-expect-error - Types of priorities are incompatible at this point\n\t\t\tawait OmnichannelServiceLevelAgreements.insertMany(currentPriorities);\n\t\t}\n\n\t\t// migrate old priority history messages to new sla history messages\n\t\tawait Messages.updateMany(\n\t\t\t// intentionally using any since this is a legacy type which we've removed\n\t\t\t{ t: 'livechat_priority_history' as any },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t't': 'omnichannel_sla_change_history',\n\t\t\t\t\t'slaData.definedBy': '$priorityData.definedBy',\n\t\t\t\t\t'slaData.sla': '$priorityData.priority',\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityData: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\t// update all livechat rooms to have default priority weight so the sorting on the livechat queue and current chats works as expected\n\t\tawait LivechatRooms.updateMany(\n\t\t\t{\n\t\t\t\tt: 'l',\n\t\t\t\tpriorityWeight: { $exists: false },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/startup/migrations/v290.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/startup/migrations/v290.ts","inputSourceMap":{"version":3,"file":"server/startup/migrations/v290.ts","sourceRoot":"","sources":["server/startup/migrations/v290.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,gBAAgB,EAAE,iCAAiC,EAAE,MAAM,qBAAqB,CAAC;AAEnH,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAEpD,mFAAmF;AACnF,YAAY,CAAC;IACZ,OAAO,EAAE,GAAG;IACZ,KAAK,CAAC,EAAE;QACP,+EAA+E;QAC/E,wEAAwE;QACxE,sDAAsD;QACtD,MAAM,iBAAiB,GAAG,MAAM,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACtE,MAAM,gBAAgB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAEtC,IAAI,CAAC;YACJ,mDAAmD;YACnD,MAAM,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,SAAS;YACT,OAAO,CAAC,IAAI,CAAC,2DAA2D,EAAE,KAAK,CAAC,CAAC;QAClF,CAAC;QAED,mIAAmI;QACnI,kFAAkF;QAClF,MAAM,aAAa,CAAC,UAAU,CAAC,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QACxG,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAC9B,4CAA4C;YAC5C,wEAAwE;YACxE,MAAM,iCAAiC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;QACvE,CAAC;QAED,oEAAoE;QACpE,MAAM,QAAQ,CAAC,UAAU;QACxB,0EAA0E;QAC1E,EAAE,CAAC,EAAE,2BAAkC,EAAE,EACzC;YACC,IAAI,EAAE;gBACL,GAAG,EAAE,gCAAgC;gBACrC,mBAAmB,EAAE,yBAAyB;gBAC9C,aAAa,EAAE,wBAAwB;aACvC;YACD,MAAM,EAAE;gBACP,YAAY,EAAE,CAAC;aACf;SACD,CACD,CAAC;QAEF,qIAAqI;QACrI,MAAM,aAAa,CAAC,UAAU,CAC7B;YACC,CAAC,EAAE,GAAG;YACN,cAAc,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAClC,EACD;YACC,IAAI,EAAE;gBACL,cAAc,EAAE,sBAAsB,CAAC,aAAa;aACpD;SACD,CACD,CAAC;IACH,CAAC;CACD,CAAC,CAAC","sourcesContent":["import { LivechatPriorityWeight } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Messages, LivechatPriority, OmnichannelServiceLevelAgreements } from '@rocket.chat/models';\n\nimport { addMigration } from '../../lib/migrations';\n\n// Migration to migrate old priorities to new SLAs, plus for new priorities feature\naddMigration({\n\tversion: 290,\n\tasync up() {\n\t\t// CE may have been EE first, so it may hold priorities which we want to remove\n\t\t// IF env is not EE anymore, then just cleaning the collection is enough\n\t\t// IF it's still EE, populate new collection with SLAs\n\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tawait LivechatPriority.deleteMany({});\n\n\t\ttry {\n\t\t\t// remove indexes from livechat_priority collection\n\t\t\tawait LivechatPriority.col.dropIndexes();\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t\tconsole.warn('Error dropping indexes from livechat_priority collection:', error);\n\t\t}\n\n\t\t// Since priorityId holds the \"SLA ID\" at this point, we need to rename the property so it doesn't conflict with current priorities\n\t\t// Typing of the prop will be kept as will be reused by the new priorities feature\n\t\tawait LivechatRooms.updateMany({ priorityId: { $exists: true } }, { $rename: { priorityId: 'slaId' } });\n\t\tif (currentPriorities.length) {\n\t\t\t// Since we updated the typings of the model\n\t\t\t// @ts-expect-error - Types of priorities are incompatible at this point\n\t\t\tawait OmnichannelServiceLevelAgreements.insertMany(currentPriorities);\n\t\t}\n\n\t\t// migrate old priority history messages to new sla history messages\n\t\tawait Messages.updateMany(\n\t\t\t// intentionally using any since this is a legacy type which we've removed\n\t\t\t{ t: 'livechat_priority_history' as any },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t't': 'omnichannel_sla_change_history',\n\t\t\t\t\t'slaData.definedBy': '$priorityData.definedBy',\n\t\t\t\t\t'slaData.sla': '$priorityData.priority',\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityData: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\t// update all livechat rooms to have default priority weight so the sorting on the livechat queue and current chats works as expected\n\t\tawait LivechatRooms.updateMany(\n\t\t\t{\n\t\t\t\tt: 'l',\n\t\t\t\tpriorityWeight: { $exists: false },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let LivechatPriorityWeight;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatPriorityWeight(v) {\n        LivechatPriorityWeight = v;\n      }\n    }, 0);\n    let LivechatRooms, Messages, LivechatPriority, OmnichannelServiceLevelAgreements;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      LivechatPriority(v) {\n        LivechatPriority = v;\n      },\n      OmnichannelServiceLevelAgreements(v) {\n        OmnichannelServiceLevelAgreements = v;\n      }\n    }, 1);\n    let addMigration;\n    module.link(\"../../lib/migrations\", {\n      addMigration(v) {\n        addMigration = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // Migration to migrate old priorities to new SLAs, plus for new priorities feature\n    addMigration({\n      version: 290,\n      async up() {\n        // CE may have been EE first, so it may hold priorities which we want to remove\n        // IF env is not EE anymore, then just cleaning the collection is enough\n        // IF it's still EE, populate new collection with SLAs\n        const currentPriorities = await LivechatPriority.col.find().toArray();\n        await LivechatPriority.deleteMany({});\n        try {\n          // remove indexes from livechat_priority collection\n          await LivechatPriority.col.dropIndexes();\n        } catch (error) {\n          // ignore\n          console.warn('Error dropping indexes from livechat_priority collection:', error);\n        }\n        // Since priorityId holds the \"SLA ID\" at this point, we need to rename the property so it doesn't conflict with current priorities\n        // Typing of the prop will be kept as will be reused by the new priorities feature\n        await LivechatRooms.updateMany({\n          priorityId: {\n            $exists: true\n          }\n        }, {\n          $rename: {\n            priorityId: 'slaId'\n          }\n        });\n        if (currentPriorities.length) {\n          // Since we updated the typings of the model\n          // @ts-expect-error - Types of priorities are incompatible at this point\n          await OmnichannelServiceLevelAgreements.insertMany(currentPriorities);\n        }\n        // migrate old priority history messages to new sla history messages\n        await Messages.updateMany(\n        // intentionally using any since this is a legacy type which we've removed\n        {\n          t: 'livechat_priority_history'\n        }, {\n          $set: {\n            't': 'omnichannel_sla_change_history',\n            'slaData.definedBy': '$priorityData.definedBy',\n            'slaData.sla': '$priorityData.priority'\n          },\n          $unset: {\n            priorityData: 1\n          }\n        });\n        // update all livechat rooms to have default priority weight so the sorting on the livechat queue and current chats works as expected\n        await LivechatRooms.updateMany({\n          t: 'l',\n          priorityWeight: {\n            $exists: false\n          }\n        }, {\n          $set: {\n            priorityWeight: LivechatPriorityWeight.NOT_SPECIFIED\n          }\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["LivechatPriorityWeight","module","link","v","LivechatRooms","Messages","LivechatPriority","OmnichannelServiceLevelAgreements","addMigration","__reifyWaitForDeps__","version","up","currentPriorities","col","find","toArray","deleteMany","dropIndexes","error","console","warn","updateMany","priorityId","$exists","$rename","length","insertMany","t","$set","$unset","priorityData","priorityWeight","NOT_SPECIFIED","__reify_async_result__","_reifyError","self","async"],"sources":["server/startup/migrations/v290.ts"],"sourcesContent":["import { LivechatPriorityWeight } from '@rocket.chat/core-typings';\nimport { LivechatRooms, Messages, LivechatPriority, OmnichannelServiceLevelAgreements } from '@rocket.chat/models';\n\nimport { addMigration } from '../../lib/migrations';\n\n// Migration to migrate old priorities to new SLAs, plus for new priorities feature\naddMigration({\n\tversion: 290,\n\tasync up() {\n\t\t// CE may have been EE first, so it may hold priorities which we want to remove\n\t\t// IF env is not EE anymore, then just cleaning the collection is enough\n\t\t// IF it's still EE, populate new collection with SLAs\n\t\tconst currentPriorities = await LivechatPriority.col.find().toArray();\n\t\tawait LivechatPriority.deleteMany({});\n\n\t\ttry {\n\t\t\t// remove indexes from livechat_priority collection\n\t\t\tawait LivechatPriority.col.dropIndexes();\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t\tconsole.warn('Error dropping indexes from livechat_priority collection:', error);\n\t\t}\n\n\t\t// Since priorityId holds the \"SLA ID\" at this point, we need to rename the property so it doesn't conflict with current priorities\n\t\t// Typing of the prop will be kept as will be reused by the new priorities feature\n\t\tawait LivechatRooms.updateMany({ priorityId: { $exists: true } }, { $rename: { priorityId: 'slaId' } });\n\t\tif (currentPriorities.length) {\n\t\t\t// Since we updated the typings of the model\n\t\t\t// @ts-expect-error - Types of priorities are incompatible at this point\n\t\t\tawait OmnichannelServiceLevelAgreements.insertMany(currentPriorities);\n\t\t}\n\n\t\t// migrate old priority history messages to new sla history messages\n\t\tawait Messages.updateMany(\n\t\t\t// intentionally using any since this is a legacy type which we've removed\n\t\t\t{ t: 'livechat_priority_history' as any },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t't': 'omnichannel_sla_change_history',\n\t\t\t\t\t'slaData.definedBy': '$priorityData.definedBy',\n\t\t\t\t\t'slaData.sla': '$priorityData.priority',\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tpriorityData: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\n\t\t// update all livechat rooms to have default priority weight so the sorting on the livechat queue and current chats works as expected\n\t\tawait LivechatRooms.updateMany(\n\t\t\t{\n\t\t\t\tt: 'l',\n\t\t\t\tpriorityWeight: { $exists: false },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tpriorityWeight: LivechatPriorityWeight.NOT_SPECIFIED,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t},\n});\n"],"mappings":";;;IAAA,IAAAA,sBAAS;IAAAC,MAAwB,CAAAC,IAAA,CAAM,2BAA2B,EAAC;MAAAF,uBAAAG,CAAA;QAAAH,sBAAA,GAAAG,CAAA;MAAA;IAAA;IAAA,IAAAC,aAAA,EAAAC,QAAA,EAAAC,gBAAA,EAAAC,iCAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAE,cAAAD,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;MAAAE,SAAAF,CAAA;QAAAE,QAAA,GAAAF,CAAA;MAAA;MAAAG,iBAAAH,CAAA;QAAAG,gBAAA,GAAAH,CAAA;MAAA;MAAAI,kCAAAJ,CAAA;QAAAI,iCAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,YAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,aAAAL,CAAA;QAAAK,YAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAKnE;IACAD,YAAY,CAAC;MACZE,OAAO,EAAE,GAAG;MACZ,MAAMC,EAAEA,CAAA;QACP;QACA;QACA;QACA,MAAMC,iBAAiB,GAAG,MAAMN,gBAAgB,CAACO,GAAG,CAACC,IAAI,EAAE,CAACC,OAAO,EAAE;QACrE,MAAMT,gBAAgB,CAACU,UAAU,CAAC,EAAE,CAAC;QAErC,IAAI;UACH;UACA,MAAMV,gBAAgB,CAACO,GAAG,CAACI,WAAW,EAAE;QACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;UACf;UACAC,OAAO,CAACC,IAAI,CAAC,2DAA2D,EAAEF,KAAK,CAAC;QACjF;QAEA;QACA;QACA,MAAMd,aAAa,CAACiB,UAAU,CAAC;UAAEC,UAAU,EAAE;YAAEC,OAAO,EAAE;UAAI;QAAE,CAAE,EAAE;UAAEC,OAAO,EAAE;YAAEF,UAAU,EAAE;UAAO;QAAE,CAAE,CAAC;QACvG,IAAIV,iBAAiB,CAACa,MAAM,EAAE;UAC7B;UACA;UACA,MAAMlB,iCAAiC,CAACmB,UAAU,CAACd,iBAAiB,CAAC;QACtE;QAEA;QACA,MAAMP,QAAQ,CAACgB,UAAU;QACxB;QACA;UAAEM,CAAC,EAAE;QAAkC,CAAE,EACzC;UACCC,IAAI,EAAE;YACL,GAAG,EAAE,gCAAgC;YACrC,mBAAmB,EAAE,yBAAyB;YAC9C,aAAa,EAAE;WACf;UACDC,MAAM,EAAE;YACPC,YAAY,EAAE;;SAEf,CACD;QAED;QACA,MAAM1B,aAAa,CAACiB,UAAU,CAC7B;UACCM,CAAC,EAAE,GAAG;UACNI,cAAc,EAAE;YAAER,OAAO,EAAE;UAAK;SAChC,EACD;UACCK,IAAI,EAAE;YACLG,cAAc,EAAE/B,sBAAsB,CAACgC;;SAExC,CACD;MACF;KACA,CAAC;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4ec832ec33baa134d5fff0f2e6b7b7ce58d9f0d0"}
