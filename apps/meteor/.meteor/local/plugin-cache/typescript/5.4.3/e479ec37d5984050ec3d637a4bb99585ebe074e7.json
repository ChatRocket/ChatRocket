{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/features/EmailInbox/EmailInbox.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,UAAU,MAAM,YAAY,CAAC;AAGpC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAQlC,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAiB,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,qBAAqB;IAC1C,MAAM,kBAAkB,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;IAEnD,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;IACtD,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED,OAAO,CAAC,KAAK,EAAE,CAAC;IAEhB,IAAI,KAAK,EAAE,MAAM,gBAAgB,IAAI,kBAAkB,EAAE,CAAC;QACzD,IAAI,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,oCAAoC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;YAE1E,MAAM,IAAI,GAAG,IAAI,eAAe,CAC/B;gBACC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;gBACxC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;gBACpC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBAClC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI;gBAChC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM;oBAC/B,CAAC,CAAC;wBACA,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;wBACjC,UAAU,EAAE;4BACX,kBAAkB,EAAE,KAAK;yBACzB;qBACD;oBACF,CAAC,CAAC,EAAE,CAAC;aACN,EACD;gBACC,eAAe,EAAE,KAAK;gBACtB,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC5D,cAAc,EAAE,gBAAgB,CAAC,UAAU;gBAC3C,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAU;aAC5C,EACD,gBAAgB,CAAC,GAAG,CACpB,CAAC;YAEF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBAChC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtB,OAAO;gBACR,CAAC;gBAED,IAAI,CAAC;oBACJ,MAAM,mBAAmB,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;oBAC1F,KAAK,eAAe,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAClF,CAAC;gBAAC,OAAO,CAAM,EAAE,CAAC;oBACjB,0EAA0E;oBAC1E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,CAAC;YACF,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YAEnB,MAAM,IAAI,GAAG,UAAU,CAAC,eAAe,CAAC;gBACvC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBAClC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI;gBAChC,MAAM,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBACpC,IAAI,EAAE;oBACL,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;oBACpC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;iBACpC;aACD,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC/E,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,0CAA0C,gBAAgB,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QAChG,CAAC;IACF,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACnB,QAAQ,CAAC,SAAS,CAAC,yBAAyB,EAAE,CAAC,CAAC,EAAE,EAAE;QACnD,KAAK,qBAAqB,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, EmailMessageHistory } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport nodemailer from 'nodemailer';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { settings } from '../../../app/settings/server';\nimport { IMAPInterceptor } from '../../email/IMAPInterceptor';\nimport { onEmailReceived } from './EmailInbox_Incoming';\nimport { logger } from './logger';\n\nexport type Inbox = {\n\timap: IMAPInterceptor;\n\tsmtp: Mail;\n\tconfig: IEmailInbox;\n};\n\nexport const inboxes = new Map<string, Inbox>();\n\nexport async function configureEmailInboxes(): Promise<void> {\n\tconst emailInboxesCursor = EmailInbox.findActive();\n\n\tlogger.info('Clearing old email inbox registrations');\n\tfor (const { imap } of inboxes.values()) {\n\t\timap.stop();\n\t}\n\n\tinboxes.clear();\n\n\tfor await (const emailInboxRecord of emailInboxesCursor) {\n\t\ttry {\n\t\t\tlogger.info(`Setting up email interceptor for ${emailInboxRecord.email}`);\n\n\t\t\tconst imap = new IMAPInterceptor(\n\t\t\t\t{\n\t\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\t\t...(emailInboxRecord.imap.secure\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\t\t\t\t\ttlsOptions: {\n\t\t\t\t\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdeleteAfterRead: false,\n\t\t\t\t\tfilter: [['UNSEEN'], ['SINCE', emailInboxRecord._createdAt]],\n\t\t\t\t\trejectBeforeTS: emailInboxRecord._createdAt,\n\t\t\t\t\tmarkSeen: true,\n\t\t\t\t\tmaxRetries: emailInboxRecord.imap.maxRetries,\n\t\t\t\t},\n\t\t\t\temailInboxRecord._id,\n\t\t\t);\n\n\t\t\timap.on('email', async (email) => {\n\t\t\t\tif (!email.messageId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait EmailMessageHistory.create({ _id: email.messageId, email: emailInboxRecord.email });\n\t\t\t\t\tvoid onEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\t// In case the email message history has been received by other instance..\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait imap.start();\n\n\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: `Error setting up email interceptor for ${emailInboxRecord.email}`, err });\n\t\t}\n\t}\n\n\tlogger.info(`Configured a total of ${inboxes.size} inboxes`);\n}\n\nMeteor.startup(() => {\n\tsettings.watchOnce('Livechat_Routing_Method', (_) => {\n\t\tvoid configureEmailInboxes();\n\t});\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/features/EmailInbox/EmailInbox.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/features/EmailInbox/EmailInbox.ts","inputSourceMap":{"version":3,"file":"server/features/EmailInbox/EmailInbox.ts","sourceRoot":"","sources":["server/features/EmailInbox/EmailInbox.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,UAAU,MAAM,YAAY,CAAC;AAGpC,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,6BAA6B,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAQlC,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAiB,CAAC;AAEhD,MAAM,CAAC,KAAK,UAAU,qBAAqB;IAC1C,MAAM,kBAAkB,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC;IAEnD,MAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;IACtD,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;IACb,CAAC;IAED,OAAO,CAAC,KAAK,EAAE,CAAC;IAEhB,IAAI,KAAK,EAAE,MAAM,gBAAgB,IAAI,kBAAkB,EAAE,CAAC;QACzD,IAAI,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,oCAAoC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;YAE1E,MAAM,IAAI,GAAG,IAAI,eAAe,CAC/B;gBACC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;gBACxC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;gBACpC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBAClC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI;gBAChC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM;oBAC/B,CAAC,CAAC;wBACA,GAAG,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;wBACjC,UAAU,EAAE;4BACX,kBAAkB,EAAE,KAAK;yBACzB;qBACD;oBACF,CAAC,CAAC,EAAE,CAAC;aACN,EACD;gBACC,eAAe,EAAE,KAAK;gBACtB,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAC5D,cAAc,EAAE,gBAAgB,CAAC,UAAU;gBAC3C,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,gBAAgB,CAAC,IAAI,CAAC,UAAU;aAC5C,EACD,gBAAgB,CAAC,GAAG,CACpB,CAAC;YAEF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBAChC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;oBACtB,OAAO;gBACR,CAAC;gBAED,IAAI,CAAC;oBACJ,MAAM,mBAAmB,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC;oBAC1F,KAAK,eAAe,CAAC,KAAK,EAAE,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,UAAU,CAAC,CAAC;gBAClF,CAAC;gBAAC,OAAO,CAAM,EAAE,CAAC;oBACjB,0EAA0E;oBAC1E,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,CAAC;YACF,CAAC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YAEnB,MAAM,IAAI,GAAG,UAAU,CAAC,eAAe,CAAC;gBACvC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBAClC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI;gBAChC,MAAM,EAAE,gBAAgB,CAAC,IAAI,CAAC,MAAM;gBACpC,IAAI,EAAE;oBACL,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;oBACpC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,QAAQ;iBACpC;aACD,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC/E,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,0CAA0C,gBAAgB,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QAChG,CAAC;IACF,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,yBAAyB,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC;AAC9D,CAAC;AAED,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;IACnB,QAAQ,CAAC,SAAS,CAAC,yBAAyB,EAAE,CAAC,CAAC,EAAE,EAAE;QACnD,KAAK,qBAAqB,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, EmailMessageHistory } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport nodemailer from 'nodemailer';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { settings } from '../../../app/settings/server';\nimport { IMAPInterceptor } from '../../email/IMAPInterceptor';\nimport { onEmailReceived } from './EmailInbox_Incoming';\nimport { logger } from './logger';\n\nexport type Inbox = {\n\timap: IMAPInterceptor;\n\tsmtp: Mail;\n\tconfig: IEmailInbox;\n};\n\nexport const inboxes = new Map<string, Inbox>();\n\nexport async function configureEmailInboxes(): Promise<void> {\n\tconst emailInboxesCursor = EmailInbox.findActive();\n\n\tlogger.info('Clearing old email inbox registrations');\n\tfor (const { imap } of inboxes.values()) {\n\t\timap.stop();\n\t}\n\n\tinboxes.clear();\n\n\tfor await (const emailInboxRecord of emailInboxesCursor) {\n\t\ttry {\n\t\t\tlogger.info(`Setting up email interceptor for ${emailInboxRecord.email}`);\n\n\t\t\tconst imap = new IMAPInterceptor(\n\t\t\t\t{\n\t\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\t\t...(emailInboxRecord.imap.secure\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\t\t\t\t\ttlsOptions: {\n\t\t\t\t\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdeleteAfterRead: false,\n\t\t\t\t\tfilter: [['UNSEEN'], ['SINCE', emailInboxRecord._createdAt]],\n\t\t\t\t\trejectBeforeTS: emailInboxRecord._createdAt,\n\t\t\t\t\tmarkSeen: true,\n\t\t\t\t\tmaxRetries: emailInboxRecord.imap.maxRetries,\n\t\t\t\t},\n\t\t\t\temailInboxRecord._id,\n\t\t\t);\n\n\t\t\timap.on('email', async (email) => {\n\t\t\t\tif (!email.messageId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait EmailMessageHistory.create({ _id: email.messageId, email: emailInboxRecord.email });\n\t\t\t\t\tvoid onEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\t// In case the email message history has been received by other instance..\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait imap.start();\n\n\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: `Error setting up email interceptor for ${emailInboxRecord.email}`, err });\n\t\t}\n\t}\n\n\tlogger.info(`Configured a total of ${inboxes.size} inboxes`);\n}\n\nMeteor.startup(() => {\n\tsettings.watchOnce('Livechat_Routing_Method', (_) => {\n\t\tvoid configureEmailInboxes();\n\t});\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      inboxes: () => inboxes,\n      configureEmailInboxes: () => configureEmailInboxes\n    });\n    let EmailInbox, EmailMessageHistory;\n    module.link(\"@rocket.chat/models\", {\n      EmailInbox(v) {\n        EmailInbox = v;\n      },\n      EmailMessageHistory(v) {\n        EmailMessageHistory = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let nodemailer;\n    module.link(\"nodemailer\", {\n      default(v) {\n        nodemailer = v;\n      }\n    }, 2);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 3);\n    let IMAPInterceptor;\n    module.link(\"../../email/IMAPInterceptor\", {\n      IMAPInterceptor(v) {\n        IMAPInterceptor = v;\n      }\n    }, 4);\n    let onEmailReceived;\n    module.link(\"./EmailInbox_Incoming\", {\n      onEmailReceived(v) {\n        onEmailReceived = v;\n      }\n    }, 5);\n    let logger;\n    module.link(\"./logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const inboxes = new Map();\n    async function configureEmailInboxes() {\n      const emailInboxesCursor = EmailInbox.findActive();\n      logger.info('Clearing old email inbox registrations');\n      for (const {\n        imap\n      } of inboxes.values()) {\n        imap.stop();\n      }\n      inboxes.clear();\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(emailInboxesCursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const emailInboxRecord = _step.value;\n          {\n            try {\n              logger.info(\"Setting up email interceptor for \".concat(emailInboxRecord.email));\n              const imap = new IMAPInterceptor(_objectSpread({\n                password: emailInboxRecord.imap.password,\n                user: emailInboxRecord.imap.username,\n                host: emailInboxRecord.imap.server,\n                port: emailInboxRecord.imap.port\n              }, emailInboxRecord.imap.secure ? {\n                tls: emailInboxRecord.imap.secure,\n                tlsOptions: {\n                  rejectUnauthorized: false\n                }\n              } : {}), {\n                deleteAfterRead: false,\n                filter: [['UNSEEN'], ['SINCE', emailInboxRecord._createdAt]],\n                rejectBeforeTS: emailInboxRecord._createdAt,\n                markSeen: true,\n                maxRetries: emailInboxRecord.imap.maxRetries\n              }, emailInboxRecord._id);\n              imap.on('email', async email => {\n                if (!email.messageId) {\n                  return;\n                }\n                try {\n                  await EmailMessageHistory.create({\n                    _id: email.messageId,\n                    email: emailInboxRecord.email\n                  });\n                  void onEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n                } catch (e) {\n                  // In case the email message history has been received by other instance..\n                  logger.error(e);\n                }\n              });\n              await imap.start();\n              const smtp = nodemailer.createTransport({\n                host: emailInboxRecord.smtp.server,\n                port: emailInboxRecord.smtp.port,\n                secure: emailInboxRecord.smtp.secure,\n                auth: {\n                  user: emailInboxRecord.smtp.username,\n                  pass: emailInboxRecord.smtp.password\n                }\n              });\n              inboxes.set(emailInboxRecord.email, {\n                imap,\n                smtp,\n                config: emailInboxRecord\n              });\n            } catch (err) {\n              logger.error({\n                msg: \"Error setting up email interceptor for \".concat(emailInboxRecord.email),\n                err\n              });\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      logger.info(\"Configured a total of \".concat(inboxes.size, \" inboxes\"));\n    }\n    Meteor.startup(() => {\n      settings.watchOnce('Livechat_Routing_Method', _ => {\n        void configureEmailInboxes();\n      });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","inboxes","configureEmailInboxes","EmailInbox","EmailMessageHistory","Meteor","nodemailer","settings","IMAPInterceptor","onEmailReceived","logger","__reifyWaitForDeps__","Map","emailInboxesCursor","findActive","info","imap","values","stop","clear","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","emailInboxRecord","value","concat","email","password","user","username","host","server","port","secure","tls","tlsOptions","rejectUnauthorized","deleteAfterRead","filter","_createdAt","rejectBeforeTS","markSeen","maxRetries","_id","on","messageId","create","department","e","error","start","smtp","createTransport","auth","pass","set","config","err","msg","return","size","startup","watchOnce","_","__reify_async_result__","_reifyError","self","async"],"sources":["server/features/EmailInbox/EmailInbox.ts"],"sourcesContent":["import type { IEmailInbox } from '@rocket.chat/core-typings';\nimport { EmailInbox, EmailMessageHistory } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport nodemailer from 'nodemailer';\nimport type Mail from 'nodemailer/lib/mailer';\n\nimport { settings } from '../../../app/settings/server';\nimport { IMAPInterceptor } from '../../email/IMAPInterceptor';\nimport { onEmailReceived } from './EmailInbox_Incoming';\nimport { logger } from './logger';\n\nexport type Inbox = {\n\timap: IMAPInterceptor;\n\tsmtp: Mail;\n\tconfig: IEmailInbox;\n};\n\nexport const inboxes = new Map<string, Inbox>();\n\nexport async function configureEmailInboxes(): Promise<void> {\n\tconst emailInboxesCursor = EmailInbox.findActive();\n\n\tlogger.info('Clearing old email inbox registrations');\n\tfor (const { imap } of inboxes.values()) {\n\t\timap.stop();\n\t}\n\n\tinboxes.clear();\n\n\tfor await (const emailInboxRecord of emailInboxesCursor) {\n\t\ttry {\n\t\t\tlogger.info(`Setting up email interceptor for ${emailInboxRecord.email}`);\n\n\t\t\tconst imap = new IMAPInterceptor(\n\t\t\t\t{\n\t\t\t\t\tpassword: emailInboxRecord.imap.password,\n\t\t\t\t\tuser: emailInboxRecord.imap.username,\n\t\t\t\t\thost: emailInboxRecord.imap.server,\n\t\t\t\t\tport: emailInboxRecord.imap.port,\n\t\t\t\t\t...(emailInboxRecord.imap.secure\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\ttls: emailInboxRecord.imap.secure,\n\t\t\t\t\t\t\t\ttlsOptions: {\n\t\t\t\t\t\t\t\t\trejectUnauthorized: false,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: {}),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdeleteAfterRead: false,\n\t\t\t\t\tfilter: [['UNSEEN'], ['SINCE', emailInboxRecord._createdAt]],\n\t\t\t\t\trejectBeforeTS: emailInboxRecord._createdAt,\n\t\t\t\t\tmarkSeen: true,\n\t\t\t\t\tmaxRetries: emailInboxRecord.imap.maxRetries,\n\t\t\t\t},\n\t\t\t\temailInboxRecord._id,\n\t\t\t);\n\n\t\t\timap.on('email', async (email) => {\n\t\t\t\tif (!email.messageId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait EmailMessageHistory.create({ _id: email.messageId, email: emailInboxRecord.email });\n\t\t\t\t\tvoid onEmailReceived(email, emailInboxRecord.email, emailInboxRecord.department);\n\t\t\t\t} catch (e: any) {\n\t\t\t\t\t// In case the email message history has been received by other instance..\n\t\t\t\t\tlogger.error(e);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait imap.start();\n\n\t\t\tconst smtp = nodemailer.createTransport({\n\t\t\t\thost: emailInboxRecord.smtp.server,\n\t\t\t\tport: emailInboxRecord.smtp.port,\n\t\t\t\tsecure: emailInboxRecord.smtp.secure,\n\t\t\t\tauth: {\n\t\t\t\t\tuser: emailInboxRecord.smtp.username,\n\t\t\t\t\tpass: emailInboxRecord.smtp.password,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tinboxes.set(emailInboxRecord.email, { imap, smtp, config: emailInboxRecord });\n\t\t} catch (err) {\n\t\t\tlogger.error({ msg: `Error setting up email interceptor for ${emailInboxRecord.email}`, err });\n\t\t}\n\t}\n\n\tlogger.info(`Configured a total of ${inboxes.size} inboxes`);\n}\n\nMeteor.startup(() => {\n\tsettings.watchOnce('Livechat_Routing_Method', (_) => {\n\t\tvoid configureEmailInboxes();\n\t});\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e479ec37d5984050ec3d637a4bb99585ebe074e7"}
