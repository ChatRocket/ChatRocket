{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/hooks/useWorkspaceInfo.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"client/hooks/useWorkspaceInfo.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/hooks/useWorkspaceInfo.ts","inputSourceMap":{"version":3,"file":"client/hooks/useWorkspaceInfo.ts","sourceRoot":"","sources":["client/hooks/useWorkspaceInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IStats, IWorkspaceInfo, Serialized } from '@rocket.chat/core-typings';\nimport type { IInstance } from '@rocket.chat/rest-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useMutation, useQueries, useQueryClient } from '@tanstack/react-query';\n\nexport const useWorkspaceInfo = ({ refreshStatistics }: { refreshStatistics?: boolean } = {}) => {\n\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\n\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\n\tconst getServerInfo = useEndpoint('GET', '/info');\n\n\treturn useQueries({\n\t\tqueries: [\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'serverInfo'],\n\t\t\t\tqueryFn: async () => {\n\t\t\t\t\tconst data = await getServerInfo();\n\n\t\t\t\t\tif (!('minimumClientVersions' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('info' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('version' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data as IWorkspaceInfo;\n\t\t\t\t},\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'instances'],\n\t\t\t\tqueryFn: () => getInstances(),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect({ instances }: Serialized<{ instances: IInstance[] }>) {\n\t\t\t\t\treturn instances.map((instance) => ({\n\t\t\t\t\t\t...instance,\n\t\t\t\t\t\t...(instance.instanceRecord && {\n\t\t\t\t\t\t\tinstanceRecord: {\n\t\t\t\t\t\t\t\t...instance.instanceRecord,\n\t\t\t\t\t\t\t\t_createdAt: new Date(instance.instanceRecord._createdAt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t})) as IInstance[];\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'statistics'],\n\t\t\t\tqueryFn: () => getStatistics({ refresh: refreshStatistics ? 'true' : 'false' }),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect: (data: Serialized<IStats>) => ({\n\t\t\t\t\t...data,\n\t\t\t\t\tlastMessageSentAt: data.lastMessageSentAt ? new Date(data.lastMessageSentAt) : undefined,\n\t\t\t\t}),\n\t\t\t},\n\t\t],\n\t});\n};\n\nexport const useRefreshStatistics = () => {\n\tconst queryClient = useQueryClient();\n\treturn useMutation({\n\t\tmutationFn: () => queryClient.invalidateQueries(['info', 'statistics']),\n\t});\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/hooks/useWorkspaceInfo.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/hooks/useWorkspaceInfo.ts","inputSourceMap":{"version":3,"file":"client/hooks/useWorkspaceInfo.ts","sourceRoot":"","sources":["client/hooks/useWorkspaceInfo.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IStats, IWorkspaceInfo, Serialized } from '@rocket.chat/core-typings';\nimport type { IInstance } from '@rocket.chat/rest-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useMutation, useQueries, useQueryClient } from '@tanstack/react-query';\n\nexport const useWorkspaceInfo = ({ refreshStatistics }: { refreshStatistics?: boolean } = {}) => {\n\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\n\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\n\tconst getServerInfo = useEndpoint('GET', '/info');\n\n\treturn useQueries({\n\t\tqueries: [\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'serverInfo'],\n\t\t\t\tqueryFn: async () => {\n\t\t\t\t\tconst data = await getServerInfo();\n\n\t\t\t\t\tif (!('minimumClientVersions' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('info' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('version' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data as IWorkspaceInfo;\n\t\t\t\t},\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'instances'],\n\t\t\t\tqueryFn: () => getInstances(),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect({ instances }: Serialized<{ instances: IInstance[] }>) {\n\t\t\t\t\treturn instances.map((instance) => ({\n\t\t\t\t\t\t...instance,\n\t\t\t\t\t\t...(instance.instanceRecord && {\n\t\t\t\t\t\t\tinstanceRecord: {\n\t\t\t\t\t\t\t\t...instance.instanceRecord,\n\t\t\t\t\t\t\t\t_createdAt: new Date(instance.instanceRecord._createdAt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t})) as IInstance[];\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'statistics'],\n\t\t\t\tqueryFn: () => getStatistics({ refresh: refreshStatistics ? 'true' : 'false' }),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect: (data: Serialized<IStats>) => ({\n\t\t\t\t\t...data,\n\t\t\t\t\tlastMessageSentAt: data.lastMessageSentAt ? new Date(data.lastMessageSentAt) : undefined,\n\t\t\t\t}),\n\t\t\t},\n\t\t],\n\t});\n};\n\nexport const useRefreshStatistics = () => {\n\tconst queryClient = useQueryClient();\n\treturn useMutation({\n\t\tmutationFn: () => queryClient.invalidateQueries(['info', 'statistics']),\n\t});\n};\n"]}}},"code":"let _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  useWorkspaceInfo: () => useWorkspaceInfo,\n  useRefreshStatistics: () => useRefreshStatistics\n});\nlet useEndpoint;\nmodule.link(\"@rocket.chat/ui-contexts\", {\n  useEndpoint(v) {\n    useEndpoint = v;\n  }\n}, 0);\nlet useMutation, useQueries, useQueryClient;\nmodule.link(\"@tanstack/react-query\", {\n  useMutation(v) {\n    useMutation = v;\n  },\n  useQueries(v) {\n    useQueries = v;\n  },\n  useQueryClient(v) {\n    useQueryClient = v;\n  }\n}, 1);\nconst useWorkspaceInfo = function () {\n  let {\n    refreshStatistics\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const getStatistics = useEndpoint('GET', '/v1/statistics');\n  const getInstances = useEndpoint('GET', '/v1/instances.get');\n  const getServerInfo = useEndpoint('GET', '/info');\n  return useQueries({\n    queries: [{\n      queryKey: ['info', 'serverInfo'],\n      queryFn: async () => {\n        const data = await getServerInfo();\n        if (!('minimumClientVersions' in data)) {\n          throw new Error('Invalid server info');\n        }\n        if (!('info' in data)) {\n          throw new Error('Invalid server info');\n        }\n        if (!('version' in data)) {\n          throw new Error('Invalid server info');\n        }\n        return data;\n      },\n      staleTime: Infinity,\n      keepPreviousData: true\n    }, {\n      queryKey: ['info', 'instances'],\n      queryFn: () => getInstances(),\n      staleTime: Infinity,\n      keepPreviousData: true,\n      select(_ref) {\n        let {\n          instances\n        } = _ref;\n        return instances.map(instance => _objectSpread(_objectSpread({}, instance), instance.instanceRecord && {\n          instanceRecord: _objectSpread(_objectSpread({}, instance.instanceRecord), {}, {\n            _createdAt: new Date(instance.instanceRecord._createdAt)\n          })\n        }));\n      }\n    }, {\n      queryKey: ['info', 'statistics'],\n      queryFn: () => getStatistics({\n        refresh: refreshStatistics ? 'true' : 'false'\n      }),\n      staleTime: Infinity,\n      keepPreviousData: true,\n      select: data => _objectSpread(_objectSpread({}, data), {}, {\n        lastMessageSentAt: data.lastMessageSentAt ? new Date(data.lastMessageSentAt) : undefined\n      })\n    }]\n  });\n};\nconst useRefreshStatistics = () => {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationFn: () => queryClient.invalidateQueries(['info', 'statistics'])\n  });\n};","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","useWorkspaceInfo","useRefreshStatistics","useEndpoint","useMutation","useQueries","useQueryClient","refreshStatistics","arguments","length","undefined","getStatistics","getInstances","getServerInfo","queries","queryKey","queryFn","data","Error","staleTime","Infinity","keepPreviousData","select","_ref","instances","map","instance","instanceRecord","_createdAt","Date","refresh","lastMessageSentAt","queryClient","mutationFn","invalidateQueries"],"sources":["client/hooks/useWorkspaceInfo.ts"],"sourcesContent":["import type { IStats, IWorkspaceInfo, Serialized } from '@rocket.chat/core-typings';\nimport type { IInstance } from '@rocket.chat/rest-typings';\nimport { useEndpoint } from '@rocket.chat/ui-contexts';\nimport { useMutation, useQueries, useQueryClient } from '@tanstack/react-query';\n\nexport const useWorkspaceInfo = ({ refreshStatistics }: { refreshStatistics?: boolean } = {}) => {\n\tconst getStatistics = useEndpoint('GET', '/v1/statistics');\n\tconst getInstances = useEndpoint('GET', '/v1/instances.get');\n\tconst getServerInfo = useEndpoint('GET', '/info');\n\n\treturn useQueries({\n\t\tqueries: [\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'serverInfo'],\n\t\t\t\tqueryFn: async () => {\n\t\t\t\t\tconst data = await getServerInfo();\n\n\t\t\t\t\tif (!('minimumClientVersions' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('info' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\t\t\t\t\tif (!('version' in data)) {\n\t\t\t\t\t\tthrow new Error('Invalid server info');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data as IWorkspaceInfo;\n\t\t\t\t},\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'instances'],\n\t\t\t\tqueryFn: () => getInstances(),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect({ instances }: Serialized<{ instances: IInstance[] }>) {\n\t\t\t\t\treturn instances.map((instance) => ({\n\t\t\t\t\t\t...instance,\n\t\t\t\t\t\t...(instance.instanceRecord && {\n\t\t\t\t\t\t\tinstanceRecord: {\n\t\t\t\t\t\t\t\t...instance.instanceRecord,\n\t\t\t\t\t\t\t\t_createdAt: new Date(instance.instanceRecord._createdAt),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t})) as IInstance[];\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tqueryKey: ['info', 'statistics'],\n\t\t\t\tqueryFn: () => getStatistics({ refresh: refreshStatistics ? 'true' : 'false' }),\n\t\t\t\tstaleTime: Infinity,\n\t\t\t\tkeepPreviousData: true,\n\t\t\t\tselect: (data: Serialized<IStats>) => ({\n\t\t\t\t\t...data,\n\t\t\t\t\tlastMessageSentAt: data.lastMessageSentAt ? new Date(data.lastMessageSentAt) : undefined,\n\t\t\t\t}),\n\t\t\t},\n\t\t],\n\t});\n};\n\nexport const useRefreshStatistics = () => {\n\tconst queryClient = useQueryClient();\n\treturn useMutation({\n\t\tmutationFn: () => queryClient.invalidateQueries(['info', 'statistics']),\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8a11e2c553ea1b7249e62a9e2155801cfb6899ea"}
