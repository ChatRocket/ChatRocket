{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Rooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Rooms.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Rooms.ts","sourceRoot":"","sources":["server/models/raw/Rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIDirectMessageRoom,\n\tIMessage,\n\tIOmnichannelGenericRoom,\n\tIRoom,\n\tIRoomFederated,\n\tITeam,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IRoomsModel, IChannelsWithNumberOfMessagesBetweenDate } from '@rocket.chat/model-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport type { Updater } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tDb,\n\tDeleteResult,\n\tDocument,\n\tFilter,\n\tFindCursor,\n\tFindOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tUpdateOptions,\n\tUpdateResult,\n\tModifyResult,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class RoomsRaw extends BaseRaw<IRoom> implements IRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: { name: 1 },\n\t\t\t\tunique: true,\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { default: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { featured: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { muted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { 'u._id': 1 },\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { ts: 1 },\n\t\t\t},\n\t\t\t// discussions\n\t\t\t{\n\t\t\t\tkey: { prid: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { fname: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t// field used for DMs only\n\t\t\t{\n\t\t\t\tkey: { uids: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { createdOTR: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { encrypted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: { broadcast: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tteamDefault: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{ key: { t: 1, ts: 1 } },\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: IRoom['_id'], uid: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': rid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindManyByRoomIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByIds(\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom & { isLastOwner?: boolean }>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\t_id: { $in: roomIds },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tasync getMostRecentAverageChatDurationTime(\n\t\tnumberMostRecentChats: number,\n\t\tdepartment?: string,\n\t): Promise<{ props: { _id: IRoom['_id']; avgChatDuration: number } }> {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt: 'l',\n\t\t\t\t\t...(department && { departmentId: department }),\n\t\t\t\t\tclosedAt: { $exists: true },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { closedAt: -1 } },\n\t\t\t{ $limit: numberMostRecentChats },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tchats: { $sum: 1 },\n\t\t\t\t\tsumChatDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { _id: '$_id', avgChatDuration: { $divide: ['$sumChatDuration', '$chats'] } } },\n\t\t];\n\n\t\tconst [statistic] = await this.col\n\t\t\t.aggregate<{ props: { _id: IRoom['_id']; avgChatDuration: number } }>(aggregate, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t\treturn statistic;\n\t}\n\n\tfindByNameOrFnameContainingAndTypes(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttypes: Array<IRoom['t']>,\n\t\tdiscussion = false,\n\t\tteams = false,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex, federated: { $ne: true } },\n\t\t\t\t{ fname: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\tname ? nameCondition : {},\n\t\t\t\ttypes?.length || discussion || teams\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tt: {\n\t\t\t\t\t\t\t\t\t\t$in: types,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...(discussion ? [{ prid: { $exists: true } }] : []),\n\t\t\t\t\t\t\t\t...(teams ? [{ teamMain: { $exists: true } }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: {},\n\t\t\t],\n\t\t\t...(!discussion ? { prid: { $exists: false } } : {}),\n\t\t\t...(!teams ? { teamMain: { $exists: false } } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamId(teamId: ITeam['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByTeamIdContainingNameAndDefault(\n\t\tteamId: ITeam['_id'],\n\t\tname: IRoom['name'],\n\t\tteamDefault: boolean,\n\t\tids: Array<IRoom['_id']> | undefined,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(name ? { name: new RegExp(escapeRegExp(name), 'i') } : {}),\n\t\t\t...(teamDefault === true ? { teamDefault } : {}),\n\t\t\t...(ids ? { $or: [{ t: 'c' }, { _id: { $in: ids } }] } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamIdAndRoomsId(teamId: ITeam['_id'], rids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\t_id: {\n\t\t\t\t$in: rids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsByNameOrFnameStarting(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname: nameRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ federated: { $ne: true } }, { archived: { $ne: true } }],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindChannelAndGroupListWithoutTeamsByNameStartingByOwner(\n\t\tname: NonNullable<IRoom['name']>,\n\t\tgroupsToAccept: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tprid: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t_id: {\n\t\t\t\t$in: groupsToAccept,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tunsetTeamId(teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { teamId };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\tteamId: '',\n\t\t\t\tteamDefault: '',\n\t\t\t\tteamMain: '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tunsetTeamById(rid: IRoom['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $unset: { teamId: '', teamDefault: '' } }, options);\n\t}\n\n\tsetTeamById(\n\t\trid: IRoom['_id'],\n\t\tteamId: ITeam['_id'],\n\t\tteamDefault: IRoom['teamDefault'],\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamDefault } }, options);\n\t}\n\n\tsetTeamMainById(rid: IRoom['_id'], teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamMain: true } }, options);\n\t}\n\n\tsetTeamByIds(rids: Array<IRoom['_id']>, teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ _id: { $in: rids } }, { $set: { teamId } }, options);\n\t}\n\n\tsetTeamDefaultById(\n\t\trid: IRoom['_id'],\n\t\tteamDefault: NonNullable<IRoom['teamDefault']>,\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamDefault } }, options);\n\t}\n\n\tgetChannelsWithNumberOfMessagesBetweenDateQuery({\n\t\ttypes,\n\t\tstart,\n\t\tend,\n\t\tstartOfLastWeek,\n\t\tendOfLastWeek,\n\t\toptions,\n\t}: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}) {\n\t\tconst typeMatch = {\n\t\t\t$match: {\n\t\t\t\tt: { $in: types },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_analytics',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'room._id',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\troom: '$$ROOT',\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', start] }, { $lte: ['$$message.date', end] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlastWeekMessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', startOfLastWeek] }, { $lte: ['$$message.date', endOfLastWeek] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst messagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$messages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $sum: '$messages.messages' },\n\t\t\t\tlastWeekMessages: { $first: '$lastWeekMessages' },\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$lastWeekMessages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $first: '$messages' },\n\t\t\t\tlastWeekMessages: { $sum: '$lastWeekMessages.messages' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\troom: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tname: { $ifNull: ['$room.name', '$room.fname'] },\n\t\t\t\t\tts: '$room.ts',\n\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t_updatedAt: '$room._updatedAt',\n\t\t\t\t\tusernames: '$room.usernames',\n\t\t\t\t},\n\t\t\t\tmessages: '$messages',\n\t\t\t\tlastWeekMessages: '$lastWeekMessages',\n\t\t\t\tdiffFromLastWeek: { $subtract: ['$messages', '$lastWeekMessages'] },\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [typeMatch, lookup, messagesProject, messagesUnwind, messagesGroup];\n\t\tconst lastParams = [lastWeekMessagesUnwind, lastWeekMessagesGroup, presentationProject];\n\n\t\tconst sort = { $sort: options?.sort || { messages: -1 } };\n\t\tconst sortAndPaginationParams: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [sort];\n\n\t\tif (options?.offset) {\n\t\t\tsortAndPaginationParams.push({ $skip: options.offset });\n\t\t}\n\n\t\tif (options?.count) {\n\t\t\tsortAndPaginationParams.push({ $limit: options.count });\n\t\t}\n\t\tconst params: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [...firstParams];\n\n\t\tif (options?.sort) {\n\t\t\tparams.push(...lastParams, ...sortAndPaginationParams);\n\t\t} else {\n\t\t\tparams.push(...sortAndPaginationParams, ...lastParams, sort);\n\t\t}\n\n\t\treturn params;\n\t}\n\n\tfindChannelsByTypesWithNumberOfMessagesBetweenDate(params: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}): AggregationCursor<IChannelsWithNumberOfMessagesBetweenDate> {\n\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\treturn this.col.aggregate<IChannelsWithNumberOfMessagesBetweenDate>(aggregationParams, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tfindOneByNameOrFname(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: name,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByJoinCodeAndId(joinCode: string, rid: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: rid,\n\t\t\tjoinCode,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByNonValidatedName(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}) {\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\treturn this.findOneByName(name, options);\n\t}\n\n\tfindOneByName(name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.col.findOne({ name }, options);\n\t}\n\n\tfindDefaultRoomsForTeam(teamId: ITeam['_id']): FindCursor<IRoom> {\n\t\treturn this.col.find({\n\t\t\tteamId,\n\t\t\tteamDefault: true,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n\n\tincUsersCountByIds(ids: Array<IRoom['_id']>, inc = 1, options?: UpdateOptions): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tallRoomSourcesCount(): AggregationCursor<{ _id: Required<IOmnichannelGenericRoom['source']>; count: number }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\tt: 'l',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$source',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tfindByBroadcast(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tbroadcast: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tsetAsFederated(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { federated: true } });\n\t}\n\n\tsetRoomTypeById(roomId: IRoom['_id'], roomType: IRoom['t']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { t: roomType } });\n\t}\n\n\tsetRoomNameById(roomId: IRoom['_id'], name: IRoom['name']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { name } });\n\t}\n\n\tsetSidepanelById(roomId: IRoom['_id'], sidepanel: IRoom['sidepanel']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { sidepanel } });\n\t}\n\n\tsetFnameById(_id: IRoom['_id'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetRoomTopicById(roomId: IRoom['_id'], topic: IRoom['description']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { description: topic } });\n\t}\n\n\tfindByE2E(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindE2ERoomById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsInsideTeams(autoJoin = false): FindCursor<IRoom> {\n\t\treturn this.find({\n\t\t\tteamId: { $exists: true },\n\t\t\tteamMain: { $exists: false },\n\t\t\t...(autoJoin && { teamDefault: true }),\n\t\t});\n\t}\n\n\tcountByType(t: IRoom['t']): Promise<number> {\n\t\treturn this.col.countDocuments({ t });\n\t}\n\n\tfindPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(\n\t\tsearchTerm: RegExp | null,\n\t\tteamIds: Array<ITeam['_id']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\t{ teamMain: { $exists: false } },\n\t\t\t\t{ prid: { $exists: false } },\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $in: teamIds },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(roomIds?.length > 0\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t...(searchTerm\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: []),\n\t\t\t],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedContainingNameOrFNameInIdsAsTeamMain(\n\t\tsearchTerm: RegExp | null,\n\t\trids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamMain: true,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'p',\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tif (searchTerm && query.$and) {\n\t\t\tquery.$and.push({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByTypeAndIds(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindOneDirectRoomContainingAllUserIDs(uid: IDirectMessageRoom['uids'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tuids: { $size: uid.length, $all: uid },\n\t\t};\n\n\t\treturn this.findOne<IRoom>(query, options);\n\t}\n\n\tfindFederatedRooms(options: FindOptions<IRoom> = {}): FindCursor<IRoomFederated> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\treturn this.find<IRoomFederated>(query, options);\n\t}\n\n\tfindCountOfRoomsWithActiveCalls(): Promise<number> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t// No matter the actual \"status\" of the call, if the room has a callStatus, it means there is/was a call\n\t\t\tcallStatus: { $exists: true },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync findBiggestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = false;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync findFederatedRoomByAmountOfUsers(options?: FindOptions<IRoom>, asc = true): Promise<IRoom | undefined> {\n\t\tconst query = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\tconst room = await (\n\t\t\tawait this.find(query, options)\n\t\t\t\t.sort({ usersCount: asc ? 1 : -1 })\n\t\t\t\t.limit(1)\n\t\t\t\t.toArray()\n\t\t).shift();\n\n\t\treturn room;\n\t}\n\n\tasync findSmallestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = true;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync countFederatedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ federated: true });\n\t}\n\n\tincMsgCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tmsgs: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetIncMsgCountUpdateQuery(inc: number, roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.inc('msgs', inc);\n\t}\n\n\tdecreaseMessageCountById(_id: IRoom['_id'], count = 1) {\n\t\treturn this.incMsgCountById(_id, -count);\n\t}\n\n\tfindOneByIdOrName(_idOrName: IRoom['_id'] | IRoom['name'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndType(roomId: IRoom['_id'], type: IRoom['t'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId, t: type }, options);\n\t}\n\n\tsetCallStatus(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCallStatusAndCallStartTime(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t\twebRtcCallStartTime: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReactionsInLastMessage(roomId: IRoom['_id'], reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { 'lastMessage.reactions': reactions } });\n\t}\n\n\tunsetReactionsInLastMessage(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { 'lastMessage.reactions': 1 } });\n\t}\n\n\tunsetAllImportIds(): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\timportIds: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\timportIds: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateLastMessageStar(roomId: IRoom['_id'], userId: IUser['_id'], starred: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessagePinned(\n\t\troomId: IRoom['_id'],\n\t\tpinnedBy: IMessage['pinnedBy'],\n\t\tpinned: IMessage['pinned'],\n\t\tpinnedAt: IMessage['pinnedAt'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'lastMessage.pinned': pinned,\n\t\t\t\t'lastMessage.pinnedAt': pinnedAt || new Date(),\n\t\t\t\t'lastMessage.pinnedBy': pinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessageAsRead(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'lastMessage.unread': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetDescriptionById(_id: IRoom['_id'], description: IRoom['description']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdescription,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReadOnlyById(_id: IRoom['_id'], readOnly: NonNullable<IRoom['ro']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDmReadOnlyByUserId(\n\t\t_id: IRoom['_id'],\n\t\tids: Array<IRoom['_id']>,\n\t\treadOnly: NonNullable<IRoom['ro']>,\n\t\treactWhenReadOnly: NonNullable<IRoom['reactWhenReadOnly']>,\n\t): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tuids: {\n\t\t\t\t$size: 2,\n\t\t\t\t$in: [_id],\n\t\t\t},\n\t\t\t...(ids && Array.isArray(ids) ? { _id: { $in: ids } } : {}),\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t\treactWhenReadOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetDirectConversationsByUserId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ t: 'd', uids: { $size: 2, $in: [_id] } }, options);\n\t}\n\n\t// 2\n\tsetAllowReactingWhenReadOnlyById(_id: IRoom['_id'], allowReacting: NonNullable<IRoom['reactWhenReadOnly']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\treactWhenReadOnly: allowReacting,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAvatarData(_id: IRoom['_id'], origin: string, etag: IRoom['avatarETag']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetAvatarData(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarETag: Date.now().toString(),\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetSystemMessagesById(_id: IRoom['_id'], systemMessages: IRoom['sysMes']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> =\n\t\t\tArray.isArray(systemMessages) && systemMessages.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tsysMes: systemMessages,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tsysMes: '',\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetE2eKeyId(_id: IRoom['_id'], e2eKeyId: IRoom['e2eKeyId'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\te2eKeyId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tfindOneByImportId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { importIds: _id };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndNotId(name: NonNullable<IRoom['name']>, rid: IRoom['_id']): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: { $ne: rid },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByDisplayName(fname: IRoom['fname'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { fname };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndType(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(includeFederatedRooms\n\t\t\t\t? { $or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }] }\n\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t// FIND\n\tfindById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId }, options);\n\t}\n\n\tfindByIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ _id: { $in: roomIds } }, options);\n\t}\n\n\tfindByType(type: IRoom['t'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = { t: type };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIds(type: IRoom['t'], ids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserId(userId: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<FindCursor<IRoom>> {\n\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: data,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserIdUpdatedAfter(\n\t\tuserId: IUser['_id'],\n\t\t_updatedAt: IRoom['_updatedAt'],\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<FindCursor<IRoom>> {\n\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: _updatedAt,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndTypeNotDefault(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tdefault: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\t// 3\n\tfindByNameOrFNameAndTypesNotInIds(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttypes: Array<IRoom['t']>,\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [{ name }, { fname: name }],\n\t\t};\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$nin: ids,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Also return the main room of public teams\n\t\t\t\t\t\t\t// this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t\t\t\t\t\t{ federated: true, fname: name },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByDefaultAndTypes(defaultValue: boolean, types: Array<IRoom['t']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t...(defaultValue ? { default: true } : { default: { $ne: true } }),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDirectRoomContainingAllUsernames(\n\t\tusernames: NonNullable<IRoom['usernames']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: { $size: usernames.length, $all: usernames },\n\t\t\tusersCount: usernames.length,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndName(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameOrId(\n\t\ttype: IRoom['t'],\n\t\tidentifier: NonNullable<IRoom['name'] | IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t$or: [{ name: identifier }, { _id: identifier }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameContaining(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\tname: NonNullable<IRoom['name']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindGroupDMsByUids(uids: NonNullable<IRoom['uids']>, options: FindOptions<IDirectMessageRoom> = {}): FindCursor<IDirectMessageRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tusersCount: { $gt: 2 },\n\t\t\t\tuids: { $in: uids },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfind1On1ByUserId(userId: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tuids: userId,\n\t\t\t\tusersCount: 2,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindByCreatedOTR(): FindCursor<IRoom> {\n\t\treturn this.find({ createdOTR: true });\n\t}\n\n\tfindByUsernamesOrUids(uids: IRoom['u']['_id'][], usernames: IRoom['u']['username'][]): FindCursor<IRoom> {\n\t\treturn this.find({ $or: [{ usernames: { $in: usernames } }, { uids: { $in: uids } }] });\n\t}\n\n\tfindDMsByUids(uids: IRoom['u']['_id'][]): FindCursor<IRoom> {\n\t\treturn this.find({ uids: { $size: 2, $in: [uids] }, t: 'd' });\n\t}\n\n\t// UPDATE\n\taddImportIds(_id: IRoom['_id'], importIds: string[]): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: ([] as string[]).concat(importIds),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetNameById(_id: IRoom['_id'], name: IRoom['name'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetIncMsgCountAndSetLastMessageUpdateQuery(\n\t\tinc: number,\n\t\tlastMessage: IMessage,\n\t\tshouldStoreLastMessage: boolean,\n\t\troomUpdater: Updater<IRoom>,\n\t): Updater<IRoom> {\n\t\troomUpdater.inc('msgs', inc).set('lm', lastMessage.ts);\n\n\t\tif (shouldStoreLastMessage) {\n\t\t\troomUpdater.set('lastMessage', lastMessage);\n\t\t}\n\n\t\treturn roomUpdater;\n\t}\n\n\tincUsersCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t// 4\n\tincUsersCountNotDMsByIds(ids: Array<IRoom['_id']>, inc = 1): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: { $ne: 'd' },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetLastMessageUpdateQuery(lastMessage: IRoom['lastMessage'], roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.set('lastMessage', lastMessage);\n\t}\n\n\tasync resetLastMessageById(_id: IRoom['_id'], lastMessage: IRoom['lastMessage'] | null, msgCountDelta?: number): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update = {\n\t\t\t...(lastMessage ? { $set: { lastMessage } } : { $unset: { lastMessage: 1 as const } }),\n\t\t\t...(msgCountDelta ? { $inc: { msgs: msgCountDelta } } : {}),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\treplaceUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { usernames: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'usernames.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceMutedUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { muted: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'muted.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceUsernameOfUserByUserId(userId: IUser['_id'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetJoinCodeById(_id: IRoom['_id'], joinCode: string): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tif ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: true,\n\t\t\t\t\tjoinCode,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: false,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tjoinCode: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTypeById(_id: IRoom['_id'], type: IRoom['t']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\t\tif (type === 'p') {\n\t\t\tupdate.$unset = { default: '' };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTopicById(_id: IRoom['_id'], topic: IRoom['topic']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\ttopic,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAnnouncementById(\n\t\t_id: IRoom['_id'],\n\t\tannouncement: IRoom['announcement'],\n\t\tannouncementDetails: IRoom['announcementDetails'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tannouncement,\n\t\t\t\tannouncementDetails,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsById(_id: IRoom['_id'], customFields: IRoom['customFields']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteReadOnlyUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteMutedUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteReadOnlyUsernameByRoomId(_id: string, username: string): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFeaturedById(_id: IRoom['_id'], featured: string | boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst set = ['true', true].includes(featured);\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t[set ? '$set' : '$unset']: {\n\t\t\t\tfeatured: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveDefaultById(_id: IRoom['_id'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdefault: defaultValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFavoriteById(_id: IRoom['_id'], favorite: IRoom['favorite'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t...(favorite && defaultValue && { $set: { favorite } }),\n\t\t\t...((!favorite || !defaultValue) && { $unset: { favorite: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionEnabledById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {};\n\n\t\tif (value == null) {\n\t\t\tupdate.$unset = { 'retention.enabled': true };\n\t\t} else {\n\t\t\tupdate.$set = { 'retention.enabled': !!value };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionMaxAgeById(_id: IRoom['_id'], value = 30): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.maxAge': value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionExcludePinnedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.excludePinned': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionIgnoreThreadsById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.ignoreThreads': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionFilesOnlyById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.filesOnly': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionOverrideGlobalById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.overrideGlobal': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveEncryptedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tencrypted: value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateGroupDMsRemovingUsernamesByUsername(username: string, userId: string): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $gt: 2 },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusernames: username,\n\t\t\t\tuids: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync createWithIdTypeAndName(\n\t\t_id: IRoom['_id'],\n\t\ttype: IRoom['t'],\n\t\tname: IRoom['name'],\n\t\textraData?: Record<string, string>,\n\t): Promise<IRoom> {\n\t\tconst room: IRoom = {\n\t\t\t_id,\n\t\t\tts: new Date(),\n\t\t\tt: type,\n\t\t\tname,\n\t\t\tusernames: [],\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 0,\n\t\t\t_updatedAt: new Date(),\n\t\t\tu: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t\tname: 'Rocket.Cat',\n\t\t\t},\n\t\t};\n\n\t\tObject.assign(room, extraData);\n\n\t\tawait this.insertOne(room);\n\t\treturn room;\n\t}\n\n\tasync createWithFullRoomData(room: Omit<IRoom, '_id' | '_updatedAt'>): Promise<IRoom> {\n\t\tconst newRoom: IRoom = {\n\t\t\t_id: (await this.insertOne(room)).insertedId,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...room,\n\t\t};\n\n\t\treturn newRoom;\n\t}\n\n\t// REMOVE\n\tremoveById(_id: IRoom['_id']): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tremoveByIds(ids: Array<IRoom['_id']>): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ _id: { $in: ids } });\n\t}\n\n\tremoveDirectRoomContainingUsername(username: string): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $lte: 2 },\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tcountDiscussions(): Promise<number> {\n\t\treturn this.col.countDocuments({ prid: { $exists: true } });\n\t}\n\n\tsetOTRForDMByRoomID(rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: rid, t: 'd' };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcreatedOTR: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getSubscribedRoomIdsWithoutE2EKeys(uid: IUser['_id']): Promise<IRoom['_id'][]> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate([\n\t\t\t\t\t{ $match: { encrypted: true } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\t\tforeignField: 'rid',\n\t\t\t\t\t\t\tas: 'subs',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$subs',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'subs.u._id': uid,\n\t\t\t\t\t\t\t'subs.E2EKey': {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\taddUserIdToE2EEQueueByRoomIds(roomIds: IRoom['_id'][], uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\t'usersWaitingForE2EKeys.userId': { $ne: uid },\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$push: {\n\t\t\t\tusersWaitingForE2EKeys: {\n\t\t\t\t\t$each: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tuserId: uid,\n\t\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t$slice: -50,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync removeUsersFromE2EEQueueByRoomId(roomId: IRoom['_id'], uids: IUser['_id'][]): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': roomId,\n\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t$in: uids,\n\t\t\t},\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: { $in: uids } },\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateMany(query, update);\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'_id': roomId,\n\t\t\t\t'usersWaitingForE2EKeys.0': { $exists: false },\n\t\t\t\t'encrypted': true,\n\t\t\t},\n\t\t\t{ $unset: { usersWaitingForE2EKeys: 1 } },\n\t\t);\n\t}\n\n\tasync removeUserFromE2EEQueue(uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'usersWaitingForE2EKeys.userId': uid,\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: uid },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindChildrenOfTeam(\n\t\tteamId: string,\n\t\tteamRoomId: string,\n\t\tuserId: string,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\toptions?: FindOptions<IRoom>,\n\t): AggregationCursor<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }> {\n\t\tconst nameFilter = filter ? new RegExp(escapeRegExp(filter), 'i') : undefined;\n\t\treturn this.col.aggregate<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$and: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t...(!type || type === 'channels' ? [{ teamId }] : []),\n\t\t\t\t\t\t\t\t...(!type || type === 'discussions' ? [{ prid: teamRoomId }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(nameFilter ? [{ $or: [{ fname: nameFilter }, { name: nameFilter }] }] : []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlet: {\n\t\t\t\t\t\troomId: '$_id',\n\t\t\t\t\t},\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$rid', '$$roomId'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$u._id', userId],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$ne: ['$t', 'c'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: { _id: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'subscription',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{ t: 'c' },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$ne: [{ $size: '$subscription' }, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { subscription: 0 } },\n\t\t\t{ $sort: options?.sort || { ts: 1 } },\n\t\t\t{\n\t\t\t\t$facet: {\n\t\t\t\t\ttotalCount: [{ $count: 'count' }],\n\t\t\t\t\tpaginatedResults: [{ $skip: options?.skip || 0 }, { $limit: options?.limit || 50 }],\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tresetRoomKeyAndSetE2EEQueueByRoomId(\n\t\troomId: string,\n\t\te2eKeyId: string,\n\t\te2eQueue?: IRoom['usersWaitingForE2EKeys'],\n\t): Promise<ModifyResult<IRoom>> {\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ _id: roomId },\n\t\t\t{ $set: { e2eKeyId, ...(Array.isArray(e2eQueue) && { usersWaitingForE2EKeys: e2eQueue }) } },\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Rooms.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Rooms.ts","sourceRoot":"","sources":["server/models/raw/Rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIDirectMessageRoom,\n\tIMessage,\n\tIOmnichannelGenericRoom,\n\tIRoom,\n\tIRoomFederated,\n\tITeam,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IRoomsModel, IChannelsWithNumberOfMessagesBetweenDate } from '@rocket.chat/model-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport type { Updater } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tDb,\n\tDeleteResult,\n\tDocument,\n\tFilter,\n\tFindCursor,\n\tFindOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tUpdateOptions,\n\tUpdateResult,\n\tModifyResult,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class RoomsRaw extends BaseRaw<IRoom> implements IRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: { name: 1 },\n\t\t\t\tunique: true,\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { default: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { featured: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { muted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { 'u._id': 1 },\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { ts: 1 },\n\t\t\t},\n\t\t\t// discussions\n\t\t\t{\n\t\t\t\tkey: { prid: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { fname: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t// field used for DMs only\n\t\t\t{\n\t\t\t\tkey: { uids: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { createdOTR: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { encrypted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: { broadcast: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tteamDefault: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{ key: { t: 1, ts: 1 } },\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: IRoom['_id'], uid: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': rid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindManyByRoomIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByIds(\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom & { isLastOwner?: boolean }>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\t_id: { $in: roomIds },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tasync getMostRecentAverageChatDurationTime(\n\t\tnumberMostRecentChats: number,\n\t\tdepartment?: string,\n\t): Promise<{ props: { _id: IRoom['_id']; avgChatDuration: number } }> {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt: 'l',\n\t\t\t\t\t...(department && { departmentId: department }),\n\t\t\t\t\tclosedAt: { $exists: true },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { closedAt: -1 } },\n\t\t\t{ $limit: numberMostRecentChats },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tchats: { $sum: 1 },\n\t\t\t\t\tsumChatDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { _id: '$_id', avgChatDuration: { $divide: ['$sumChatDuration', '$chats'] } } },\n\t\t];\n\n\t\tconst [statistic] = await this.col\n\t\t\t.aggregate<{ props: { _id: IRoom['_id']; avgChatDuration: number } }>(aggregate, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t\treturn statistic;\n\t}\n\n\tfindByNameOrFnameContainingAndTypes(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttypes: Array<IRoom['t']>,\n\t\tdiscussion = false,\n\t\tteams = false,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex, federated: { $ne: true } },\n\t\t\t\t{ fname: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\tname ? nameCondition : {},\n\t\t\t\ttypes?.length || discussion || teams\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tt: {\n\t\t\t\t\t\t\t\t\t\t$in: types,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...(discussion ? [{ prid: { $exists: true } }] : []),\n\t\t\t\t\t\t\t\t...(teams ? [{ teamMain: { $exists: true } }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: {},\n\t\t\t],\n\t\t\t...(!discussion ? { prid: { $exists: false } } : {}),\n\t\t\t...(!teams ? { teamMain: { $exists: false } } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamId(teamId: ITeam['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByTeamIdContainingNameAndDefault(\n\t\tteamId: ITeam['_id'],\n\t\tname: IRoom['name'],\n\t\tteamDefault: boolean,\n\t\tids: Array<IRoom['_id']> | undefined,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(name ? { name: new RegExp(escapeRegExp(name), 'i') } : {}),\n\t\t\t...(teamDefault === true ? { teamDefault } : {}),\n\t\t\t...(ids ? { $or: [{ t: 'c' }, { _id: { $in: ids } }] } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamIdAndRoomsId(teamId: ITeam['_id'], rids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\t_id: {\n\t\t\t\t$in: rids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsByNameOrFnameStarting(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname: nameRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ federated: { $ne: true } }, { archived: { $ne: true } }],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindChannelAndGroupListWithoutTeamsByNameStartingByOwner(\n\t\tname: NonNullable<IRoom['name']>,\n\t\tgroupsToAccept: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tprid: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t_id: {\n\t\t\t\t$in: groupsToAccept,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tunsetTeamId(teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { teamId };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\tteamId: '',\n\t\t\t\tteamDefault: '',\n\t\t\t\tteamMain: '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tunsetTeamById(rid: IRoom['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $unset: { teamId: '', teamDefault: '' } }, options);\n\t}\n\n\tsetTeamById(\n\t\trid: IRoom['_id'],\n\t\tteamId: ITeam['_id'],\n\t\tteamDefault: IRoom['teamDefault'],\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamDefault } }, options);\n\t}\n\n\tsetTeamMainById(rid: IRoom['_id'], teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamMain: true } }, options);\n\t}\n\n\tsetTeamByIds(rids: Array<IRoom['_id']>, teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ _id: { $in: rids } }, { $set: { teamId } }, options);\n\t}\n\n\tsetTeamDefaultById(\n\t\trid: IRoom['_id'],\n\t\tteamDefault: NonNullable<IRoom['teamDefault']>,\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamDefault } }, options);\n\t}\n\n\tgetChannelsWithNumberOfMessagesBetweenDateQuery({\n\t\ttypes,\n\t\tstart,\n\t\tend,\n\t\tstartOfLastWeek,\n\t\tendOfLastWeek,\n\t\toptions,\n\t}: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}) {\n\t\tconst typeMatch = {\n\t\t\t$match: {\n\t\t\t\tt: { $in: types },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_analytics',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'room._id',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\troom: '$$ROOT',\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', start] }, { $lte: ['$$message.date', end] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlastWeekMessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', startOfLastWeek] }, { $lte: ['$$message.date', endOfLastWeek] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst messagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$messages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $sum: '$messages.messages' },\n\t\t\t\tlastWeekMessages: { $first: '$lastWeekMessages' },\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$lastWeekMessages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $first: '$messages' },\n\t\t\t\tlastWeekMessages: { $sum: '$lastWeekMessages.messages' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\troom: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tname: { $ifNull: ['$room.name', '$room.fname'] },\n\t\t\t\t\tts: '$room.ts',\n\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t_updatedAt: '$room._updatedAt',\n\t\t\t\t\tusernames: '$room.usernames',\n\t\t\t\t},\n\t\t\t\tmessages: '$messages',\n\t\t\t\tlastWeekMessages: '$lastWeekMessages',\n\t\t\t\tdiffFromLastWeek: { $subtract: ['$messages', '$lastWeekMessages'] },\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [typeMatch, lookup, messagesProject, messagesUnwind, messagesGroup];\n\t\tconst lastParams = [lastWeekMessagesUnwind, lastWeekMessagesGroup, presentationProject];\n\n\t\tconst sort = { $sort: options?.sort || { messages: -1 } };\n\t\tconst sortAndPaginationParams: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [sort];\n\n\t\tif (options?.offset) {\n\t\t\tsortAndPaginationParams.push({ $skip: options.offset });\n\t\t}\n\n\t\tif (options?.count) {\n\t\t\tsortAndPaginationParams.push({ $limit: options.count });\n\t\t}\n\t\tconst params: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [...firstParams];\n\n\t\tif (options?.sort) {\n\t\t\tparams.push(...lastParams, ...sortAndPaginationParams);\n\t\t} else {\n\t\t\tparams.push(...sortAndPaginationParams, ...lastParams, sort);\n\t\t}\n\n\t\treturn params;\n\t}\n\n\tfindChannelsByTypesWithNumberOfMessagesBetweenDate(params: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}): AggregationCursor<IChannelsWithNumberOfMessagesBetweenDate> {\n\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\treturn this.col.aggregate<IChannelsWithNumberOfMessagesBetweenDate>(aggregationParams, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tfindOneByNameOrFname(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: name,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByJoinCodeAndId(joinCode: string, rid: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: rid,\n\t\t\tjoinCode,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByNonValidatedName(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}) {\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\treturn this.findOneByName(name, options);\n\t}\n\n\tfindOneByName(name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.col.findOne({ name }, options);\n\t}\n\n\tfindDefaultRoomsForTeam(teamId: ITeam['_id']): FindCursor<IRoom> {\n\t\treturn this.col.find({\n\t\t\tteamId,\n\t\t\tteamDefault: true,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n\n\tincUsersCountByIds(ids: Array<IRoom['_id']>, inc = 1, options?: UpdateOptions): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tallRoomSourcesCount(): AggregationCursor<{ _id: Required<IOmnichannelGenericRoom['source']>; count: number }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\tt: 'l',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$source',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tfindByBroadcast(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tbroadcast: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tsetAsFederated(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { federated: true } });\n\t}\n\n\tsetRoomTypeById(roomId: IRoom['_id'], roomType: IRoom['t']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { t: roomType } });\n\t}\n\n\tsetRoomNameById(roomId: IRoom['_id'], name: IRoom['name']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { name } });\n\t}\n\n\tsetSidepanelById(roomId: IRoom['_id'], sidepanel: IRoom['sidepanel']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { sidepanel } });\n\t}\n\n\tsetFnameById(_id: IRoom['_id'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetRoomTopicById(roomId: IRoom['_id'], topic: IRoom['description']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { description: topic } });\n\t}\n\n\tfindByE2E(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindE2ERoomById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsInsideTeams(autoJoin = false): FindCursor<IRoom> {\n\t\treturn this.find({\n\t\t\tteamId: { $exists: true },\n\t\t\tteamMain: { $exists: false },\n\t\t\t...(autoJoin && { teamDefault: true }),\n\t\t});\n\t}\n\n\tcountByType(t: IRoom['t']): Promise<number> {\n\t\treturn this.col.countDocuments({ t });\n\t}\n\n\tfindPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(\n\t\tsearchTerm: RegExp | null,\n\t\tteamIds: Array<ITeam['_id']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\t{ teamMain: { $exists: false } },\n\t\t\t\t{ prid: { $exists: false } },\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $in: teamIds },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(roomIds?.length > 0\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t...(searchTerm\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: []),\n\t\t\t],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedContainingNameOrFNameInIdsAsTeamMain(\n\t\tsearchTerm: RegExp | null,\n\t\trids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamMain: true,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'p',\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tif (searchTerm && query.$and) {\n\t\t\tquery.$and.push({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByTypeAndIds(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindOneDirectRoomContainingAllUserIDs(uid: IDirectMessageRoom['uids'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tuids: { $size: uid.length, $all: uid },\n\t\t};\n\n\t\treturn this.findOne<IRoom>(query, options);\n\t}\n\n\tfindFederatedRooms(options: FindOptions<IRoom> = {}): FindCursor<IRoomFederated> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\treturn this.find<IRoomFederated>(query, options);\n\t}\n\n\tfindCountOfRoomsWithActiveCalls(): Promise<number> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t// No matter the actual \"status\" of the call, if the room has a callStatus, it means there is/was a call\n\t\t\tcallStatus: { $exists: true },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync findBiggestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = false;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync findFederatedRoomByAmountOfUsers(options?: FindOptions<IRoom>, asc = true): Promise<IRoom | undefined> {\n\t\tconst query = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\tconst room = await (\n\t\t\tawait this.find(query, options)\n\t\t\t\t.sort({ usersCount: asc ? 1 : -1 })\n\t\t\t\t.limit(1)\n\t\t\t\t.toArray()\n\t\t).shift();\n\n\t\treturn room;\n\t}\n\n\tasync findSmallestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = true;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync countFederatedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ federated: true });\n\t}\n\n\tincMsgCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tmsgs: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetIncMsgCountUpdateQuery(inc: number, roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.inc('msgs', inc);\n\t}\n\n\tdecreaseMessageCountById(_id: IRoom['_id'], count = 1) {\n\t\treturn this.incMsgCountById(_id, -count);\n\t}\n\n\tfindOneByIdOrName(_idOrName: IRoom['_id'] | IRoom['name'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndType(roomId: IRoom['_id'], type: IRoom['t'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId, t: type }, options);\n\t}\n\n\tsetCallStatus(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCallStatusAndCallStartTime(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t\twebRtcCallStartTime: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReactionsInLastMessage(roomId: IRoom['_id'], reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { 'lastMessage.reactions': reactions } });\n\t}\n\n\tunsetReactionsInLastMessage(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { 'lastMessage.reactions': 1 } });\n\t}\n\n\tunsetAllImportIds(): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\timportIds: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\timportIds: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateLastMessageStar(roomId: IRoom['_id'], userId: IUser['_id'], starred: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessagePinned(\n\t\troomId: IRoom['_id'],\n\t\tpinnedBy: IMessage['pinnedBy'],\n\t\tpinned: IMessage['pinned'],\n\t\tpinnedAt: IMessage['pinnedAt'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'lastMessage.pinned': pinned,\n\t\t\t\t'lastMessage.pinnedAt': pinnedAt || new Date(),\n\t\t\t\t'lastMessage.pinnedBy': pinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessageAsRead(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'lastMessage.unread': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetDescriptionById(_id: IRoom['_id'], description: IRoom['description']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdescription,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReadOnlyById(_id: IRoom['_id'], readOnly: NonNullable<IRoom['ro']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDmReadOnlyByUserId(\n\t\t_id: IRoom['_id'],\n\t\tids: Array<IRoom['_id']>,\n\t\treadOnly: NonNullable<IRoom['ro']>,\n\t\treactWhenReadOnly: NonNullable<IRoom['reactWhenReadOnly']>,\n\t): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tuids: {\n\t\t\t\t$size: 2,\n\t\t\t\t$in: [_id],\n\t\t\t},\n\t\t\t...(ids && Array.isArray(ids) ? { _id: { $in: ids } } : {}),\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t\treactWhenReadOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetDirectConversationsByUserId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ t: 'd', uids: { $size: 2, $in: [_id] } }, options);\n\t}\n\n\t// 2\n\tsetAllowReactingWhenReadOnlyById(_id: IRoom['_id'], allowReacting: NonNullable<IRoom['reactWhenReadOnly']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\treactWhenReadOnly: allowReacting,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAvatarData(_id: IRoom['_id'], origin: string, etag: IRoom['avatarETag']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetAvatarData(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarETag: Date.now().toString(),\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetSystemMessagesById(_id: IRoom['_id'], systemMessages: IRoom['sysMes']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> =\n\t\t\tArray.isArray(systemMessages) && systemMessages.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tsysMes: systemMessages,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tsysMes: '',\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetE2eKeyId(_id: IRoom['_id'], e2eKeyId: IRoom['e2eKeyId'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\te2eKeyId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tfindOneByImportId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { importIds: _id };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndNotId(name: NonNullable<IRoom['name']>, rid: IRoom['_id']): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: { $ne: rid },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByDisplayName(fname: IRoom['fname'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { fname };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndType(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(includeFederatedRooms\n\t\t\t\t? { $or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }] }\n\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t// FIND\n\tfindById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId }, options);\n\t}\n\n\tfindByIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ _id: { $in: roomIds } }, options);\n\t}\n\n\tfindByType(type: IRoom['t'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = { t: type };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIds(type: IRoom['t'], ids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserId(userId: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<FindCursor<IRoom>> {\n\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: data,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserIdUpdatedAfter(\n\t\tuserId: IUser['_id'],\n\t\t_updatedAt: IRoom['_updatedAt'],\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<FindCursor<IRoom>> {\n\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: _updatedAt,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndTypeNotDefault(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tdefault: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\t// 3\n\tfindByNameOrFNameAndTypesNotInIds(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttypes: Array<IRoom['t']>,\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [{ name }, { fname: name }],\n\t\t};\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$nin: ids,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Also return the main room of public teams\n\t\t\t\t\t\t\t// this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t\t\t\t\t\t{ federated: true, fname: name },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByDefaultAndTypes(defaultValue: boolean, types: Array<IRoom['t']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t...(defaultValue ? { default: true } : { default: { $ne: true } }),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDirectRoomContainingAllUsernames(\n\t\tusernames: NonNullable<IRoom['usernames']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: { $size: usernames.length, $all: usernames },\n\t\t\tusersCount: usernames.length,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndName(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameOrId(\n\t\ttype: IRoom['t'],\n\t\tidentifier: NonNullable<IRoom['name'] | IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t$or: [{ name: identifier }, { _id: identifier }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameContaining(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\tname: NonNullable<IRoom['name']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindGroupDMsByUids(uids: NonNullable<IRoom['uids']>, options: FindOptions<IDirectMessageRoom> = {}): FindCursor<IDirectMessageRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tusersCount: { $gt: 2 },\n\t\t\t\tuids: { $in: uids },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfind1On1ByUserId(userId: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tuids: userId,\n\t\t\t\tusersCount: 2,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindByCreatedOTR(): FindCursor<IRoom> {\n\t\treturn this.find({ createdOTR: true });\n\t}\n\n\tfindByUsernamesOrUids(uids: IRoom['u']['_id'][], usernames: IRoom['u']['username'][]): FindCursor<IRoom> {\n\t\treturn this.find({ $or: [{ usernames: { $in: usernames } }, { uids: { $in: uids } }] });\n\t}\n\n\tfindDMsByUids(uids: IRoom['u']['_id'][]): FindCursor<IRoom> {\n\t\treturn this.find({ uids: { $size: 2, $in: [uids] }, t: 'd' });\n\t}\n\n\t// UPDATE\n\taddImportIds(_id: IRoom['_id'], importIds: string[]): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: ([] as string[]).concat(importIds),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetNameById(_id: IRoom['_id'], name: IRoom['name'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetIncMsgCountAndSetLastMessageUpdateQuery(\n\t\tinc: number,\n\t\tlastMessage: IMessage,\n\t\tshouldStoreLastMessage: boolean,\n\t\troomUpdater: Updater<IRoom>,\n\t): Updater<IRoom> {\n\t\troomUpdater.inc('msgs', inc).set('lm', lastMessage.ts);\n\n\t\tif (shouldStoreLastMessage) {\n\t\t\troomUpdater.set('lastMessage', lastMessage);\n\t\t}\n\n\t\treturn roomUpdater;\n\t}\n\n\tincUsersCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t// 4\n\tincUsersCountNotDMsByIds(ids: Array<IRoom['_id']>, inc = 1): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: { $ne: 'd' },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetLastMessageUpdateQuery(lastMessage: IRoom['lastMessage'], roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.set('lastMessage', lastMessage);\n\t}\n\n\tasync resetLastMessageById(_id: IRoom['_id'], lastMessage: IRoom['lastMessage'] | null, msgCountDelta?: number): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update = {\n\t\t\t...(lastMessage ? { $set: { lastMessage } } : { $unset: { lastMessage: 1 as const } }),\n\t\t\t...(msgCountDelta ? { $inc: { msgs: msgCountDelta } } : {}),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\treplaceUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { usernames: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'usernames.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceMutedUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { muted: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'muted.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceUsernameOfUserByUserId(userId: IUser['_id'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetJoinCodeById(_id: IRoom['_id'], joinCode: string): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tif ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: true,\n\t\t\t\t\tjoinCode,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: false,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tjoinCode: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTypeById(_id: IRoom['_id'], type: IRoom['t']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\t\tif (type === 'p') {\n\t\t\tupdate.$unset = { default: '' };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTopicById(_id: IRoom['_id'], topic: IRoom['topic']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\ttopic,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAnnouncementById(\n\t\t_id: IRoom['_id'],\n\t\tannouncement: IRoom['announcement'],\n\t\tannouncementDetails: IRoom['announcementDetails'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tannouncement,\n\t\t\t\tannouncementDetails,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsById(_id: IRoom['_id'], customFields: IRoom['customFields']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteReadOnlyUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteMutedUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteReadOnlyUsernameByRoomId(_id: string, username: string): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFeaturedById(_id: IRoom['_id'], featured: string | boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst set = ['true', true].includes(featured);\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t[set ? '$set' : '$unset']: {\n\t\t\t\tfeatured: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveDefaultById(_id: IRoom['_id'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdefault: defaultValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFavoriteById(_id: IRoom['_id'], favorite: IRoom['favorite'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t...(favorite && defaultValue && { $set: { favorite } }),\n\t\t\t...((!favorite || !defaultValue) && { $unset: { favorite: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionEnabledById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {};\n\n\t\tif (value == null) {\n\t\t\tupdate.$unset = { 'retention.enabled': true };\n\t\t} else {\n\t\t\tupdate.$set = { 'retention.enabled': !!value };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionMaxAgeById(_id: IRoom['_id'], value = 30): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.maxAge': value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionExcludePinnedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.excludePinned': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionIgnoreThreadsById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.ignoreThreads': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionFilesOnlyById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.filesOnly': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionOverrideGlobalById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.overrideGlobal': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveEncryptedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tencrypted: value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateGroupDMsRemovingUsernamesByUsername(username: string, userId: string): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $gt: 2 },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusernames: username,\n\t\t\t\tuids: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync createWithIdTypeAndName(\n\t\t_id: IRoom['_id'],\n\t\ttype: IRoom['t'],\n\t\tname: IRoom['name'],\n\t\textraData?: Record<string, string>,\n\t): Promise<IRoom> {\n\t\tconst room: IRoom = {\n\t\t\t_id,\n\t\t\tts: new Date(),\n\t\t\tt: type,\n\t\t\tname,\n\t\t\tusernames: [],\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 0,\n\t\t\t_updatedAt: new Date(),\n\t\t\tu: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t\tname: 'Rocket.Cat',\n\t\t\t},\n\t\t};\n\n\t\tObject.assign(room, extraData);\n\n\t\tawait this.insertOne(room);\n\t\treturn room;\n\t}\n\n\tasync createWithFullRoomData(room: Omit<IRoom, '_id' | '_updatedAt'>): Promise<IRoom> {\n\t\tconst newRoom: IRoom = {\n\t\t\t_id: (await this.insertOne(room)).insertedId,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...room,\n\t\t};\n\n\t\treturn newRoom;\n\t}\n\n\t// REMOVE\n\tremoveById(_id: IRoom['_id']): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tremoveByIds(ids: Array<IRoom['_id']>): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ _id: { $in: ids } });\n\t}\n\n\tremoveDirectRoomContainingUsername(username: string): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $lte: 2 },\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tcountDiscussions(): Promise<number> {\n\t\treturn this.col.countDocuments({ prid: { $exists: true } });\n\t}\n\n\tsetOTRForDMByRoomID(rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: rid, t: 'd' };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcreatedOTR: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getSubscribedRoomIdsWithoutE2EKeys(uid: IUser['_id']): Promise<IRoom['_id'][]> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate([\n\t\t\t\t\t{ $match: { encrypted: true } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\t\tforeignField: 'rid',\n\t\t\t\t\t\t\tas: 'subs',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$subs',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'subs.u._id': uid,\n\t\t\t\t\t\t\t'subs.E2EKey': {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\taddUserIdToE2EEQueueByRoomIds(roomIds: IRoom['_id'][], uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\t'usersWaitingForE2EKeys.userId': { $ne: uid },\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$push: {\n\t\t\t\tusersWaitingForE2EKeys: {\n\t\t\t\t\t$each: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tuserId: uid,\n\t\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t$slice: -50,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync removeUsersFromE2EEQueueByRoomId(roomId: IRoom['_id'], uids: IUser['_id'][]): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': roomId,\n\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t$in: uids,\n\t\t\t},\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: { $in: uids } },\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateMany(query, update);\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'_id': roomId,\n\t\t\t\t'usersWaitingForE2EKeys.0': { $exists: false },\n\t\t\t\t'encrypted': true,\n\t\t\t},\n\t\t\t{ $unset: { usersWaitingForE2EKeys: 1 } },\n\t\t);\n\t}\n\n\tasync removeUserFromE2EEQueue(uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'usersWaitingForE2EKeys.userId': uid,\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: uid },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindChildrenOfTeam(\n\t\tteamId: string,\n\t\tteamRoomId: string,\n\t\tuserId: string,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\toptions?: FindOptions<IRoom>,\n\t): AggregationCursor<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }> {\n\t\tconst nameFilter = filter ? new RegExp(escapeRegExp(filter), 'i') : undefined;\n\t\treturn this.col.aggregate<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$and: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t...(!type || type === 'channels' ? [{ teamId }] : []),\n\t\t\t\t\t\t\t\t...(!type || type === 'discussions' ? [{ prid: teamRoomId }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(nameFilter ? [{ $or: [{ fname: nameFilter }, { name: nameFilter }] }] : []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlet: {\n\t\t\t\t\t\troomId: '$_id',\n\t\t\t\t\t},\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$rid', '$$roomId'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$u._id', userId],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$ne: ['$t', 'c'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: { _id: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'subscription',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{ t: 'c' },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$ne: [{ $size: '$subscription' }, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { subscription: 0 } },\n\t\t\t{ $sort: options?.sort || { ts: 1 } },\n\t\t\t{\n\t\t\t\t$facet: {\n\t\t\t\t\ttotalCount: [{ $count: 'count' }],\n\t\t\t\t\tpaginatedResults: [{ $skip: options?.skip || 0 }, { $limit: options?.limit || 50 }],\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tresetRoomKeyAndSetE2EEQueueByRoomId(\n\t\troomId: string,\n\t\te2eKeyId: string,\n\t\te2eQueue?: IRoom['usersWaitingForE2EKeys'],\n\t): Promise<ModifyResult<IRoom>> {\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ _id: roomId },\n\t\t\t{ $set: { e2eKeyId, ...(Array.isArray(e2eQueue) && { usersWaitingForE2EKeys: e2eQueue }) } },\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      RoomsRaw: () => RoomsRaw\n    });\n    let Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 0);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 1);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 2);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RoomsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'room', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            name: 1\n          },\n          unique: true,\n          sparse: true\n        }, {\n          key: {\n            default: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            featured: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            muted: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'u._id': 1\n          }\n        }, {\n          key: {\n            ts: 1\n          }\n        },\n        // discussions\n        {\n          key: {\n            prid: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            fname: 1\n          },\n          sparse: true\n        },\n        // field used for DMs only\n        {\n          key: {\n            uids: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            createdOTR: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            encrypted: 1\n          },\n          sparse: true\n        },\n        // used on statistics\n        {\n          key: {\n            broadcast: 1\n          },\n          sparse: true\n        },\n        // used on statistics\n        {\n          key: {\n            teamId: 1,\n            teamDefault: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            t: 1,\n            ts: 1\n          }\n        }, {\n          key: {\n            'usersWaitingForE2EKeys.userId': 1\n          },\n          partialFilterExpression: {\n            'usersWaitingForE2EKeys.userId': {\n              $exists: true\n            }\n          }\n        }];\n      }\n      findOneByRoomIdAndUserId(rid, uid) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          '_id': rid,\n          'u._id': uid\n        };\n        return this.findOne(query, options);\n      }\n      findManyByRoomIds(roomIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          _id: {\n            $in: roomIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findPaginatedByIds(roomIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.findPaginated({\n          _id: {\n            $in: roomIds\n          }\n        }, options);\n      }\n      async getMostRecentAverageChatDurationTime(numberMostRecentChats, department) {\n        const aggregate = [{\n          $match: _objectSpread(_objectSpread({\n            t: 'l'\n          }, department && {\n            departmentId: department\n          }), {}, {\n            closedAt: {\n              $exists: true\n            }\n          })\n        }, {\n          $sort: {\n            closedAt: -1\n          }\n        }, {\n          $limit: numberMostRecentChats\n        }, {\n          $group: {\n            _id: null,\n            chats: {\n              $sum: 1\n            },\n            sumChatDuration: {\n              $sum: '$metrics.chatDuration'\n            }\n          }\n        }, {\n          $project: {\n            _id: '$_id',\n            avgChatDuration: {\n              $divide: ['$sumChatDuration', '$chats']\n            }\n          }\n        }];\n        const [statistic] = await this.col.aggregate(aggregate, {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n        return statistic;\n      }\n      findByNameOrFnameContainingAndTypes(name, types) {\n        let discussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let teams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n        const nameCondition = {\n          $or: [{\n            name: nameRegex,\n            federated: {\n              $ne: true\n            }\n          }, {\n            fname: nameRegex\n          }, {\n            t: 'd',\n            usernames: nameRegex\n          }]\n        };\n        const query = _objectSpread(_objectSpread({\n          $and: [name ? nameCondition : {}, types !== null && types !== void 0 && types.length || discussion || teams ? {\n            $or: [{\n              t: {\n                $in: types\n              }\n            }, ...(discussion ? [{\n              prid: {\n                $exists: true\n              }\n            }] : []), ...(teams ? [{\n              teamMain: {\n                $exists: true\n              }\n            }] : [])]\n          } : {}]\n        }, !discussion ? {\n          prid: {\n            $exists: false\n          }\n        } : {}), !teams ? {\n          teamMain: {\n            $exists: false\n          }\n        } : {});\n        return this.findPaginated(query, options);\n      }\n      findByTeamId(teamId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          teamId,\n          teamMain: {\n            $exists: false\n          }\n        };\n        return this.find(query, options);\n      }\n      findPaginatedByTeamIdContainingNameAndDefault(teamId, name, teamDefault, ids) {\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const query = _objectSpread(_objectSpread(_objectSpread({\n          teamId,\n          teamMain: {\n            $exists: false\n          }\n        }, name ? {\n          name: new RegExp(escapeRegExp(name), 'i')\n        } : {}), teamDefault === true ? {\n          teamDefault\n        } : {}), ids ? {\n          $or: [{\n            t: 'c'\n          }, {\n            _id: {\n              $in: ids\n            }\n          }]\n        } : {});\n        return this.findPaginated(query, options);\n      }\n      findByTeamIdAndRoomsId(teamId, rids) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          teamId,\n          _id: {\n            $in: rids\n          }\n        };\n        return this.find(query, options);\n      }\n      findRoomsByNameOrFnameStarting(name) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n        const query = {\n          t: {\n            $in: ['c', 'p']\n          },\n          $or: [{\n            name: nameRegex\n          }, {\n            fname: nameRegex\n          }]\n        };\n        return this.find(query, options);\n      }\n      findRoomsWithoutDiscussionsByRoomIds(name, roomIds) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n        const query = {\n          _id: {\n            $in: roomIds\n          },\n          t: {\n            $in: ['c', 'p']\n          },\n          name: nameRegex,\n          $or: [{\n            teamId: {\n              $exists: false\n            }\n          }, {\n            teamId: {\n              $exists: true\n            },\n            _id: {\n              $in: roomIds\n            }\n          }],\n          prid: {\n            $exists: false\n          },\n          $and: [{\n            federated: {\n              $ne: true\n            }\n          }, {\n            archived: {\n              $ne: true\n            }\n          }]\n        };\n        return this.find(query, options);\n      }\n      findPaginatedRoomsWithoutDiscussionsByRoomIds(name, roomIds) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n        const query = {\n          _id: {\n            $in: roomIds\n          },\n          t: {\n            $in: ['c', 'p']\n          },\n          name: nameRegex,\n          $or: [{\n            teamId: {\n              $exists: false\n            }\n          }, {\n            teamId: {\n              $exists: true\n            },\n            _id: {\n              $in: roomIds\n            }\n          }],\n          prid: {\n            $exists: false\n          },\n          $and: [{\n            $or: [{\n              federated: {\n                $exists: false\n              }\n            }, {\n              federated: false\n            }]\n          }]\n        };\n        return this.findPaginated(query, options);\n      }\n      findChannelAndGroupListWithoutTeamsByNameStartingByOwner(name, groupsToAccept) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(name).trim()), 'i');\n        const query = {\n          teamId: {\n            $exists: false\n          },\n          prid: {\n            $exists: false\n          },\n          _id: {\n            $in: groupsToAccept\n          },\n          name: nameRegex,\n          $and: [{\n            $or: [{\n              federated: {\n                $exists: false\n              }\n            }, {\n              federated: false\n            }]\n          }]\n        };\n        return this.find(query, options);\n      }\n      unsetTeamId(teamId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          teamId\n        };\n        const update = {\n          $unset: {\n            teamId: '',\n            teamDefault: '',\n            teamMain: ''\n          }\n        };\n        return this.updateMany(query, update, options);\n      }\n      unsetTeamById(rid) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.updateOne({\n          _id: rid\n        }, {\n          $unset: {\n            teamId: '',\n            teamDefault: ''\n          }\n        }, options);\n      }\n      setTeamById(rid, teamId, teamDefault) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        return this.updateOne({\n          _id: rid\n        }, {\n          $set: {\n            teamId,\n            teamDefault\n          }\n        }, options);\n      }\n      setTeamMainById(rid, teamId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.updateOne({\n          _id: rid\n        }, {\n          $set: {\n            teamId,\n            teamMain: true\n          }\n        }, options);\n      }\n      setTeamByIds(rids, teamId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.updateMany({\n          _id: {\n            $in: rids\n          }\n        }, {\n          $set: {\n            teamId\n          }\n        }, options);\n      }\n      setTeamDefaultById(rid, teamDefault) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.updateOne({\n          _id: rid\n        }, {\n          $set: {\n            teamDefault\n          }\n        }, options);\n      }\n      getChannelsWithNumberOfMessagesBetweenDateQuery(_ref) {\n        let {\n          types,\n          start,\n          end,\n          startOfLastWeek,\n          endOfLastWeek,\n          options\n        } = _ref;\n        const typeMatch = {\n          $match: {\n            t: {\n              $in: types\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_analytics',\n            localField: '_id',\n            foreignField: 'room._id',\n            as: 'messages'\n          }\n        };\n        const messagesProject = {\n          $project: {\n            room: '$$ROOT',\n            messages: {\n              $filter: {\n                input: '$messages',\n                as: 'message',\n                cond: {\n                  $and: [{\n                    $gte: ['$$message.date', start]\n                  }, {\n                    $lte: ['$$message.date', end]\n                  }]\n                }\n              }\n            },\n            lastWeekMessages: {\n              $filter: {\n                input: '$messages',\n                as: 'message',\n                cond: {\n                  $and: [{\n                    $gte: ['$$message.date', startOfLastWeek]\n                  }, {\n                    $lte: ['$$message.date', endOfLastWeek]\n                  }]\n                }\n              }\n            }\n          }\n        };\n        const messagesUnwind = {\n          $unwind: {\n            path: '$messages',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const messagesGroup = {\n          $group: {\n            _id: {\n              _id: '$room._id'\n            },\n            room: {\n              $first: '$room'\n            },\n            messages: {\n              $sum: '$messages.messages'\n            },\n            lastWeekMessages: {\n              $first: '$lastWeekMessages'\n            }\n          }\n        };\n        const lastWeekMessagesUnwind = {\n          $unwind: {\n            path: '$lastWeekMessages',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const lastWeekMessagesGroup = {\n          $group: {\n            _id: {\n              _id: '$room._id'\n            },\n            room: {\n              $first: '$room'\n            },\n            messages: {\n              $first: '$messages'\n            },\n            lastWeekMessages: {\n              $sum: '$lastWeekMessages.messages'\n            }\n          }\n        };\n        const presentationProject = {\n          $project: {\n            _id: 0,\n            room: {\n              _id: '$_id._id',\n              name: {\n                $ifNull: ['$room.name', '$room.fname']\n              },\n              ts: '$room.ts',\n              t: '$room.t',\n              _updatedAt: '$room._updatedAt',\n              usernames: '$room.usernames'\n            },\n            messages: '$messages',\n            lastWeekMessages: '$lastWeekMessages',\n            diffFromLastWeek: {\n              $subtract: ['$messages', '$lastWeekMessages']\n            }\n          }\n        };\n        const firstParams = [typeMatch, lookup, messagesProject, messagesUnwind, messagesGroup];\n        const lastParams = [lastWeekMessagesUnwind, lastWeekMessagesGroup, presentationProject];\n        const sort = {\n          $sort: (options === null || options === void 0 ? void 0 : options.sort) || {\n            messages: -1\n          }\n        };\n        const sortAndPaginationParams = [sort];\n        if (options !== null && options !== void 0 && options.offset) {\n          sortAndPaginationParams.push({\n            $skip: options.offset\n          });\n        }\n        if (options !== null && options !== void 0 && options.count) {\n          sortAndPaginationParams.push({\n            $limit: options.count\n          });\n        }\n        const params = [...firstParams];\n        if (options !== null && options !== void 0 && options.sort) {\n          params.push(...lastParams, ...sortAndPaginationParams);\n        } else {\n          params.push(...sortAndPaginationParams, ...lastParams, sort);\n        }\n        return params;\n      }\n      findChannelsByTypesWithNumberOfMessagesBetweenDate(params) {\n        const aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n        return this.col.aggregate(aggregationParams, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      findOneByNameOrFname(name) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          $or: [{\n            name\n          }, {\n            fname: name\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      findOneByJoinCodeAndId(joinCode, rid) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          _id: rid,\n          joinCode\n        };\n        return this.findOne(query, options);\n      }\n      async findOneByNonValidatedName(name) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const room = await this.findOneByNameOrFname(name, options);\n        if (room) {\n          return room;\n        }\n        return this.findOneByName(name, options);\n      }\n      findOneByName(name) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.col.findOne({\n          name\n        }, options);\n      }\n      findDefaultRoomsForTeam(teamId) {\n        return this.col.find({\n          teamId,\n          teamDefault: true,\n          teamMain: {\n            $exists: false\n          }\n        });\n      }\n      incUsersCountByIds(ids) {\n        let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        let options = arguments.length > 2 ? arguments[2] : undefined;\n        const query = {\n          _id: {\n            $in: ids\n          }\n        };\n        const update = {\n          $inc: {\n            usersCount: inc\n          }\n        };\n        return this.updateMany(query, update, options);\n      }\n      allRoomSourcesCount() {\n        return this.col.aggregate([{\n          $match: {\n            source: {\n              $exists: true\n            },\n            t: 'l'\n          }\n        }, {\n          $group: {\n            _id: '$source',\n            count: {\n              $sum: 1\n            }\n          }\n        }]);\n      }\n      findByBroadcast() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          broadcast: true\n        }, options);\n      }\n      setAsFederated(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            federated: true\n          }\n        });\n      }\n      setRoomTypeById(roomId, roomType) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            t: roomType\n          }\n        });\n      }\n      setRoomNameById(roomId, name) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            name\n          }\n        });\n      }\n      setSidepanelById(roomId, sidepanel) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            sidepanel\n          }\n        });\n      }\n      setFnameById(_id, fname) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            fname\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setRoomTopicById(roomId, topic) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            description: topic\n          }\n        });\n      }\n      findByE2E() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return this.find({\n          encrypted: true\n        }, options);\n      }\n      findE2ERoomById(roomId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.findOne({\n          _id: roomId,\n          encrypted: true\n        }, options);\n      }\n      findRoomsInsideTeams() {\n        let autoJoin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return this.find(_objectSpread({\n          teamId: {\n            $exists: true\n          },\n          teamMain: {\n            $exists: false\n          }\n        }, autoJoin && {\n          teamDefault: true\n        }));\n      }\n      countByType(t) {\n        return this.col.countDocuments({\n          t\n        });\n      }\n      findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(searchTerm, teamIds, roomIds) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = {\n          $and: [{\n            teamMain: {\n              $exists: false\n            }\n          }, {\n            prid: {\n              $exists: false\n            }\n          }, {\n            $or: [{\n              t: 'c',\n              teamId: {\n                $exists: false\n              }\n            }, {\n              t: 'c',\n              teamId: {\n                $in: teamIds\n              }\n            }, ...((roomIds === null || roomIds === void 0 ? void 0 : roomIds.length) > 0 ? [{\n              _id: {\n                $in: roomIds\n              }\n            }] : [])]\n          }, ...(searchTerm ? [{\n            $or: [{\n              name: searchTerm\n            }, {\n              fname: searchTerm\n            }]\n          }] : [])]\n        };\n        return this.findPaginated(query, options);\n      }\n      findPaginatedContainingNameOrFNameInIdsAsTeamMain(searchTerm, rids) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          teamMain: true,\n          $and: [{\n            $or: [{\n              t: 'p',\n              _id: {\n                $in: rids\n              }\n            }, {\n              t: 'c'\n            }]\n          }]\n        };\n        if (searchTerm && query.$and) {\n          query.$and.push({\n            $or: [{\n              name: searchTerm\n            }, {\n              fname: searchTerm\n            }]\n          });\n        }\n        return this.findPaginated(query, options);\n      }\n      findPaginatedByTypeAndIds(type, ids) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          t: type,\n          _id: {\n            $in: ids\n          }\n        };\n        return this.findPaginated(query, options);\n      }\n      findOneDirectRoomContainingAllUserIDs(uid) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          t: 'd',\n          uids: {\n            $size: uid.length,\n            $all: uid\n          }\n        };\n        return this.findOne(query, options);\n      }\n      findFederatedRooms() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const query = {\n          federated: true\n        };\n        return this.find(query, options);\n      }\n      findCountOfRoomsWithActiveCalls() {\n        const query = {\n          // No matter the actual \"status\" of the call, if the room has a callStatus, it means there is/was a call\n          callStatus: {\n            $exists: true\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      async findBiggestFederatedRoomInNumberOfUsers(options) {\n        const asc = false;\n        return this.findFederatedRoomByAmountOfUsers(options, asc);\n      }\n      async findFederatedRoomByAmountOfUsers(options) {\n        let asc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        const query = {\n          federated: true\n        };\n        const room = await (await this.find(query, options).sort({\n          usersCount: asc ? 1 : -1\n        }).limit(1).toArray()).shift();\n        return room;\n      }\n      async findSmallestFederatedRoomInNumberOfUsers(options) {\n        const asc = true;\n        return this.findFederatedRoomByAmountOfUsers(options, asc);\n      }\n      async countFederatedRooms() {\n        return this.col.countDocuments({\n          federated: true\n        });\n      }\n      incMsgCountById(_id) {\n        let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        const query = {\n          _id\n        };\n        const update = {\n          $inc: {\n            msgs: inc\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      getIncMsgCountUpdateQuery(inc, roomUpdater) {\n        return roomUpdater.inc('msgs', inc);\n      }\n      decreaseMessageCountById(_id) {\n        let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        return this.incMsgCountById(_id, -count);\n      }\n      findOneByIdOrName(_idOrName) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          $or: [{\n            _id: _idOrName\n          }, {\n            name: _idOrName\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      findOneByIdAndType(roomId, type) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return this.findOne({\n          _id: roomId,\n          t: type\n        }, options);\n      }\n      setCallStatus(_id, status) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            callStatus: status\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setCallStatusAndCallStartTime(_id, status) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            callStatus: status,\n            webRtcCallStartTime: new Date()\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setReactionsInLastMessage(roomId, reactions) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $set: {\n            'lastMessage.reactions': reactions\n          }\n        });\n      }\n      unsetReactionsInLastMessage(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            'lastMessage.reactions': 1\n          }\n        });\n      }\n      unsetAllImportIds() {\n        const query = {\n          importIds: {\n            $exists: true\n          }\n        };\n        const update = {\n          $unset: {\n            importIds: 1\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateLastMessageStar(roomId, userId, starred) {\n        let update;\n        const query = {\n          _id: roomId\n        };\n        if (starred) {\n          update = {\n            $addToSet: {\n              'lastMessage.starred': {\n                _id: userId\n              }\n            }\n          };\n        } else {\n          update = {\n            $pull: {\n              'lastMessage.starred': {\n                _id: userId\n              }\n            }\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      setLastMessagePinned(roomId, pinnedBy, pinned, pinnedAt) {\n        const query = {\n          _id: roomId\n        };\n        const update = {\n          $set: {\n            'lastMessage.pinned': pinned,\n            'lastMessage.pinnedAt': pinnedAt || new Date(),\n            'lastMessage.pinnedBy': pinnedBy\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setLastMessageAsRead(roomId) {\n        return this.updateOne({\n          _id: roomId\n        }, {\n          $unset: {\n            'lastMessage.unread': 1\n          }\n        });\n      }\n      setDescriptionById(_id, description) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            description\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setReadOnlyById(_id, readOnly) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            ro: readOnly\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setDmReadOnlyByUserId(_id, ids, readOnly, reactWhenReadOnly) {\n        const query = _objectSpread(_objectSpread({\n          uids: {\n            $size: 2,\n            $in: [_id]\n          }\n        }, ids && Array.isArray(ids) ? {\n          _id: {\n            $in: ids\n          }\n        } : {}), {}, {\n          t: 'd'\n        });\n        const update = {\n          $set: {\n            ro: readOnly,\n            reactWhenReadOnly\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      getDirectConversationsByUserId(_id) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          t: 'd',\n          uids: {\n            $size: 2,\n            $in: [_id]\n          }\n        }, options);\n      }\n      // 2\n      setAllowReactingWhenReadOnlyById(_id, allowReacting) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            reactWhenReadOnly: allowReacting\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setAvatarData(_id, origin, etag) {\n        const update = {\n          $set: {\n            avatarOrigin: origin,\n            avatarETag: etag\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      unsetAvatarData(_id) {\n        const update = {\n          $set: {\n            avatarETag: Date.now().toString()\n          },\n          $unset: {\n            avatarOrigin: 1\n          }\n        };\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      setSystemMessagesById(_id, systemMessages) {\n        const query = {\n          _id\n        };\n        const update = Array.isArray(systemMessages) && systemMessages.length > 0 ? {\n          $set: {\n            sysMes: systemMessages\n          }\n        } : {\n          $unset: {\n            sysMes: ''\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setE2eKeyId(_id, e2eKeyId) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            e2eKeyId\n          }\n        };\n        return this.updateOne(query, update, options);\n      }\n      findOneByImportId(_id) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          importIds: _id\n        };\n        return this.findOne(query, options);\n      }\n      findOneByNameAndNotId(name, rid) {\n        const query = {\n          _id: {\n            $ne: rid\n          },\n          name\n        };\n        return this.findOne(query);\n      }\n      findOneByDisplayName(fname) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          fname\n        };\n        return this.findOne(query, options);\n      }\n      findOneByNameAndType(name, type) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let includeFederatedRooms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        const query = _objectSpread({\n          t: type,\n          teamId: {\n            $exists: false\n          }\n        }, includeFederatedRooms ? {\n          $or: [{\n            $and: [{\n              $or: [{\n                federated: {\n                  $exists: false\n                }\n              }, {\n                federated: false\n              }],\n              name\n            }]\n          }, {\n            federated: true,\n            fname: name\n          }]\n        } : {\n          $or: [{\n            federated: {\n              $exists: false\n            }\n          }, {\n            federated: false\n          }],\n          name\n        });\n        return this.findOne(query, options);\n      }\n      // FIND\n      findById(roomId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.findOne({\n          _id: roomId\n        }, options);\n      }\n      findByIds(roomIds) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          _id: {\n            $in: roomIds\n          }\n        }, options);\n      }\n      findByType(type) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          t: type\n        };\n        return this.find(query, options);\n      }\n      findByTypeInIds(type, ids) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          _id: {\n            $in: ids\n          },\n          t: type\n        };\n        return this.find(query, options);\n      }\n      async findBySubscriptionUserId(userId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const data = (await Subscriptions.findByUserId(userId, {\n          projection: {\n            rid: 1\n          }\n        }).toArray()).map(item => item.rid);\n        const query = {\n          _id: {\n            $in: data\n          },\n          $or: [{\n            teamId: {\n              $exists: false\n            }\n          }, {\n            teamId: {\n              $exists: true\n            },\n            _id: {\n              $in: data\n            }\n          }]\n        };\n        return this.find(query, options);\n      }\n      async findBySubscriptionUserIdUpdatedAfter(userId, _updatedAt) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const ids = (await Subscriptions.findByUserId(userId, {\n          projection: {\n            rid: 1\n          }\n        }).toArray()).map(item => item.rid);\n        const query = {\n          _id: {\n            $in: ids\n          },\n          _updatedAt: {\n            $gt: _updatedAt\n          },\n          $or: [{\n            teamId: {\n              $exists: false\n            }\n          }, {\n            teamId: {\n              $exists: true\n            },\n            _id: {\n              $in: ids\n            }\n          }]\n        };\n        return this.find(query, options);\n      }\n      findByNameAndTypeNotDefault(name, type) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let includeFederatedRooms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        const query = {\n          t: type,\n          default: {\n            $ne: true\n          },\n          $and: [{\n            $or: [{\n              teamId: {\n                $exists: false\n              }\n            }, {\n              teamMain: true\n            }]\n          }, includeFederatedRooms ? {\n            $or: [{\n              $and: [{\n                $or: [{\n                  federated: {\n                    $exists: false\n                  }\n                }, {\n                  federated: false\n                }],\n                name\n              }]\n            }, {\n              federated: true,\n              fname: name\n            }]\n          } : {\n            $or: [{\n              federated: {\n                $exists: false\n              }\n            }, {\n              federated: false\n            }],\n            name\n          }]\n        };\n        // do not use cache\n        return this.find(query, options);\n      }\n      // 3\n      findByNameOrFNameAndTypesNotInIds(name, types, ids) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        let includeFederatedRooms = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        const nameCondition = {\n          $or: [{\n            name\n          }, {\n            fname: name\n          }]\n        };\n        const query = {\n          _id: {\n            $nin: ids\n          },\n          t: {\n            $in: types\n          },\n          $and: [{\n            $or: [{\n              teamId: {\n                $exists: false\n              }\n            }, {\n              teamId: {\n                $exists: true\n              },\n              _id: {\n                $in: ids\n              }\n            }, {\n              // Also return the main room of public teams\n              // this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n              teamMain: true,\n              t: 'c'\n            }]\n          }, includeFederatedRooms ? {\n            $or: [{\n              $and: [{\n                $or: [{\n                  federated: {\n                    $exists: false\n                  }\n                }, {\n                  federated: false\n                }]\n              }, nameCondition]\n            }, {\n              federated: true,\n              fname: name\n            }]\n          } : {\n            $and: [{\n              $or: [{\n                federated: {\n                  $exists: false\n                }\n              }, {\n                federated: false\n              }]\n            }, nameCondition]\n          }]\n        };\n        // do not use cache\n        return this.find(query, options);\n      }\n      findByDefaultAndTypes(defaultValue, types) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = _objectSpread({\n          t: {\n            $in: types\n          }\n        }, defaultValue ? {\n          default: true\n        } : {\n          default: {\n            $ne: true\n          }\n        });\n        return this.find(query, options);\n      }\n      findDirectRoomContainingAllUsernames(usernames) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          t: 'd',\n          usernames: {\n            $size: usernames.length,\n            $all: usernames\n          },\n          usersCount: usernames.length\n        };\n        return this.findOne(query, options);\n      }\n      findByTypeAndName(type, name) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          name,\n          t: type\n        };\n        return this.findOne(query, options);\n      }\n      findByTypeAndNameOrId(type, identifier) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          t: type,\n          $or: [{\n            name: identifier\n          }, {\n            _id: identifier\n          }]\n        };\n        return this.findOne(query, options);\n      }\n      findByTypeAndNameContaining(type, name) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n        const query = {\n          name: nameRegex,\n          t: type\n        };\n        return this.find(query, options);\n      }\n      findByTypeInIdsAndNameContaining(type, ids, name) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n        const query = {\n          _id: {\n            $in: ids\n          },\n          name: nameRegex,\n          t: type\n        };\n        return this.find(query, options);\n      }\n      findGroupDMsByUids(uids) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          usersCount: {\n            $gt: 2\n          },\n          uids: {\n            $in: uids\n          }\n        }, options);\n      }\n      find1On1ByUserId(userId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return this.find({\n          uids: userId,\n          usersCount: 2\n        }, options);\n      }\n      findByCreatedOTR() {\n        return this.find({\n          createdOTR: true\n        });\n      }\n      findByUsernamesOrUids(uids, usernames) {\n        return this.find({\n          $or: [{\n            usernames: {\n              $in: usernames\n            }\n          }, {\n            uids: {\n              $in: uids\n            }\n          }]\n        });\n      }\n      findDMsByUids(uids) {\n        return this.find({\n          uids: {\n            $size: 2,\n            $in: [uids]\n          },\n          t: 'd'\n        });\n      }\n      // UPDATE\n      addImportIds(_id, importIds) {\n        const query = {\n          _id\n        };\n        const update = {\n          $addToSet: {\n            importIds: {\n              $each: [].concat(importIds)\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      archiveById(_id) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            archived: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unarchiveById(_id) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            archived: false\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setNameById(_id, name, fname) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            name,\n            fname\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setIncMsgCountAndSetLastMessageUpdateQuery(inc, lastMessage, shouldStoreLastMessage, roomUpdater) {\n        roomUpdater.inc('msgs', inc).set('lm', lastMessage.ts);\n        if (shouldStoreLastMessage) {\n          roomUpdater.set('lastMessage', lastMessage);\n        }\n        return roomUpdater;\n      }\n      incUsersCountById(_id) {\n        let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        const query = {\n          _id\n        };\n        const update = {\n          $inc: {\n            usersCount: inc\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      // 4\n      incUsersCountNotDMsByIds(ids) {\n        let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        const query = {\n          _id: {\n            $in: ids\n          },\n          t: {\n            $ne: 'd'\n          }\n        };\n        const update = {\n          $inc: {\n            usersCount: inc\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      getLastMessageUpdateQuery(lastMessage, roomUpdater) {\n        return roomUpdater.set('lastMessage', lastMessage);\n      }\n      async resetLastMessageById(_id, lastMessage, msgCountDelta) {\n        const query = {\n          _id\n        };\n        const update = _objectSpread(_objectSpread({}, lastMessage ? {\n          $set: {\n            lastMessage\n          }\n        } : {\n          $unset: {\n            lastMessage: 1\n          }\n        }), msgCountDelta ? {\n          $inc: {\n            msgs: msgCountDelta\n          }\n        } : {});\n        return this.updateOne(query, update);\n      }\n      replaceUsername(previousUsername, username) {\n        const query = {\n          usernames: previousUsername\n        };\n        const update = {\n          $set: {\n            'usernames.$': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      replaceMutedUsername(previousUsername, username) {\n        const query = {\n          muted: previousUsername\n        };\n        const update = {\n          $set: {\n            'muted.$': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      replaceUsernameOfUserByUserId(userId, username) {\n        const query = {\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            'u.username': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setJoinCodeById(_id, joinCode) {\n        let update;\n        const query = {\n          _id\n        };\n        if ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n          update = {\n            $set: {\n              joinCodeRequired: true,\n              joinCode\n            }\n          };\n        } else {\n          update = {\n            $set: {\n              joinCodeRequired: false\n            },\n            $unset: {\n              joinCode: 1\n            }\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      setTypeById(_id, type) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            t: type\n          }\n        };\n        if (type === 'p') {\n          update.$unset = {\n            default: ''\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      setTopicById(_id, topic) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            topic\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setAnnouncementById(_id, announcement, announcementDetails) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            announcement,\n            announcementDetails\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setCustomFieldsById(_id, customFields) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            customFields\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      muteUsernameByRoomId(_id, username) {\n        const query = {\n          _id\n        };\n        const update = {\n          $addToSet: {\n            muted: username\n          },\n          $pull: {\n            unmuted: username\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      muteReadOnlyUsernameByRoomId(_id, username) {\n        const query = {\n          _id,\n          ro: true\n        };\n        const update = {\n          $pull: {\n            unmuted: username\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unmuteMutedUsernameByRoomId(_id, username) {\n        const query = {\n          _id\n        };\n        const update = {\n          $pull: {\n            muted: username\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unmuteReadOnlyUsernameByRoomId(_id, username) {\n        const query = {\n          _id,\n          ro: true\n        };\n        const update = {\n          $pull: {\n            muted: username\n          },\n          $addToSet: {\n            unmuted: username\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveFeaturedById(_id, featured) {\n        const query = {\n          _id\n        };\n        const set = ['true', true].includes(featured);\n        const update = {\n          [set ? '$set' : '$unset']: {\n            featured: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveDefaultById(_id, defaultValue) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            default: defaultValue\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveFavoriteById(_id, favorite, defaultValue) {\n        const query = {\n          _id\n        };\n        const update = _objectSpread(_objectSpread({}, favorite && defaultValue && {\n          $set: {\n            favorite\n          }\n        }), (!favorite || !defaultValue) && {\n          $unset: {\n            favorite: 1\n          }\n        });\n        return this.updateOne(query, update);\n      }\n      saveRetentionEnabledById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {};\n        if (value == null) {\n          update.$unset = {\n            'retention.enabled': true\n          };\n        } else {\n          update.$set = {\n            'retention.enabled': !!value\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      saveRetentionMaxAgeById(_id) {\n        let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            'retention.maxAge': value\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveRetentionExcludePinnedById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            'retention.excludePinned': value === true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveRetentionIgnoreThreadsById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            'retention.ignoreThreads': value === true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveRetentionFilesOnlyById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            'retention.filesOnly': value === true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveRetentionOverrideGlobalById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            'retention.overrideGlobal': value === true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      saveEncryptedById(_id, value) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            encrypted: value === true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateGroupDMsRemovingUsernamesByUsername(username, userId) {\n        const query = {\n          t: 'd',\n          usernames: username,\n          usersCount: {\n            $gt: 2\n          }\n        };\n        const update = {\n          $pull: {\n            usernames: username,\n            uids: userId\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async createWithIdTypeAndName(_id, type, name, extraData) {\n        const room = {\n          _id,\n          ts: new Date(),\n          t: type,\n          name,\n          usernames: [],\n          msgs: 0,\n          usersCount: 0,\n          _updatedAt: new Date(),\n          u: {\n            _id: 'rocket.cat',\n            username: 'rocket.cat',\n            name: 'Rocket.Cat'\n          }\n        };\n        Object.assign(room, extraData);\n        await this.insertOne(room);\n        return room;\n      }\n      async createWithFullRoomData(room) {\n        const newRoom = _objectSpread({\n          _id: (await this.insertOne(room)).insertedId,\n          _updatedAt: new Date()\n        }, room);\n        return newRoom;\n      }\n      // REMOVE\n      removeById(_id) {\n        const query = {\n          _id\n        };\n        return this.deleteOne(query);\n      }\n      removeByIds(ids) {\n        return this.deleteMany({\n          _id: {\n            $in: ids\n          }\n        });\n      }\n      removeDirectRoomContainingUsername(username) {\n        const query = {\n          t: 'd',\n          usernames: username,\n          usersCount: {\n            $lte: 2\n          }\n        };\n        return this.deleteMany(query);\n      }\n      countDiscussions() {\n        return this.col.countDocuments({\n          prid: {\n            $exists: true\n          }\n        });\n      }\n      setOTRForDMByRoomID(rid) {\n        const query = {\n          _id: rid,\n          t: 'd'\n        };\n        const update = {\n          $set: {\n            createdOTR: true\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async getSubscribedRoomIdsWithoutE2EKeys(uid) {\n        return (await this.col.aggregate([{\n          $match: {\n            encrypted: true\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_subscription',\n            localField: '_id',\n            foreignField: 'rid',\n            as: 'subs'\n          }\n        }, {\n          $unwind: '$subs'\n        }, {\n          $match: {\n            'subs.u._id': uid,\n            'subs.E2EKey': {\n              $exists: false\n            }\n          }\n        }, {\n          $project: {\n            _id: 1\n          }\n        }]).toArray()).map(_ref2 => {\n          let {\n            _id\n          } = _ref2;\n          return _id;\n        });\n      }\n      addUserIdToE2EEQueueByRoomIds(roomIds, uid) {\n        const query = {\n          '_id': {\n            $in: roomIds\n          },\n          'usersWaitingForE2EKeys.userId': {\n            $ne: uid\n          },\n          'encrypted': true\n        };\n        const update = {\n          $push: {\n            usersWaitingForE2EKeys: {\n              $each: [{\n                userId: uid,\n                ts: new Date()\n              }],\n              $slice: -50\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async removeUsersFromE2EEQueueByRoomId(roomId, uids) {\n        const query = {\n          '_id': roomId,\n          'usersWaitingForE2EKeys.userId': {\n            $in: uids\n          },\n          'encrypted': true\n        };\n        const update = {\n          $pull: {\n            usersWaitingForE2EKeys: {\n              userId: {\n                $in: uids\n              }\n            }\n          }\n        };\n        await this.updateMany(query, update);\n        return this.updateMany({\n          '_id': roomId,\n          'usersWaitingForE2EKeys.0': {\n            $exists: false\n          },\n          'encrypted': true\n        }, {\n          $unset: {\n            usersWaitingForE2EKeys: 1\n          }\n        });\n      }\n      async removeUserFromE2EEQueue(uid) {\n        const query = {\n          'usersWaitingForE2EKeys.userId': uid,\n          'encrypted': true\n        };\n        const update = {\n          $pull: {\n            usersWaitingForE2EKeys: {\n              userId: uid\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findChildrenOfTeam(teamId, teamRoomId, userId, filter, type, options) {\n        const nameFilter = filter ? new RegExp(escapeRegExp(filter), 'i') : undefined;\n        return this.col.aggregate([{\n          $match: {\n            $and: [{\n              $or: [...(!type || type === 'channels' ? [{\n                teamId\n              }] : []), ...(!type || type === 'discussions' ? [{\n                prid: teamRoomId\n              }] : [])]\n            }, ...(nameFilter ? [{\n              $or: [{\n                fname: nameFilter\n              }, {\n                name: nameFilter\n              }]\n            }] : [])]\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_subscription',\n            let: {\n              roomId: '$_id'\n            },\n            pipeline: [{\n              $match: {\n                $and: [{\n                  $expr: {\n                    $eq: ['$rid', '$$roomId']\n                  }\n                }, {\n                  $expr: {\n                    $eq: ['$u._id', userId]\n                  }\n                }, {\n                  $expr: {\n                    $ne: ['$t', 'c']\n                  }\n                }]\n              }\n            }, {\n              $project: {\n                _id: 1\n              }\n            }],\n            as: 'subscription'\n          }\n        }, {\n          $match: {\n            $or: [{\n              t: 'c'\n            }, {\n              $expr: {\n                $ne: [{\n                  $size: '$subscription'\n                }, 0]\n              }\n            }]\n          }\n        }, {\n          $project: {\n            subscription: 0\n          }\n        }, {\n          $sort: (options === null || options === void 0 ? void 0 : options.sort) || {\n            ts: 1\n          }\n        }, {\n          $facet: {\n            totalCount: [{\n              $count: 'count'\n            }],\n            paginatedResults: [{\n              $skip: (options === null || options === void 0 ? void 0 : options.skip) || 0\n            }, {\n              $limit: (options === null || options === void 0 ? void 0 : options.limit) || 50\n            }]\n          }\n        }]);\n      }\n      resetRoomKeyAndSetE2EEQueueByRoomId(roomId, e2eKeyId, e2eQueue) {\n        return this.findOneAndUpdate({\n          _id: roomId\n        }, {\n          $set: _objectSpread({\n            e2eKeyId\n          }, Array.isArray(e2eQueue) && {\n            usersWaitingForE2EKeys: e2eQueue\n          })\n        }, {\n          returnDocument: 'after'\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","RoomsRaw","Subscriptions","escapeRegExp","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","name","unique","sparse","featured","muted","ts","prid","fname","uids","createdOTR","encrypted","broadcast","teamId","teamDefault","t","partialFilterExpression","$exists","findOneByRoomIdAndUserId","rid","uid","options","arguments","length","undefined","query","findOne","findManyByRoomIds","roomIds","_id","$in","find","findPaginatedByIds","findPaginated","getMostRecentAverageChatDurationTime","numberMostRecentChats","department","aggregate","$match","departmentId","closedAt","$sort","$limit","$group","chats","$sum","sumChatDuration","$project","avgChatDuration","$divide","statistic","col","readPreference","toArray","findByNameOrFnameContainingAndTypes","types","discussion","teams","nameRegex","RegExp","trim","nameCondition","$or","federated","$ne","usernames","$and","teamMain","findByTeamId","findPaginatedByTeamIdContainingNameAndDefault","ids","findByTeamIdAndRoomsId","rids","findRoomsByNameOrFnameStarting","concat","findRoomsWithoutDiscussionsByRoomIds","archived","findPaginatedRoomsWithoutDiscussionsByRoomIds","findChannelAndGroupListWithoutTeamsByNameStartingByOwner","groupsToAccept","unsetTeamId","update","$unset","updateMany","unsetTeamById","updateOne","setTeamById","$set","setTeamMainById","setTeamByIds","setTeamDefaultById","getChannelsWithNumberOfMessagesBetweenDateQuery","_ref","start","end","startOfLastWeek","endOfLastWeek","typeMatch","lookup","$lookup","from","localField","foreignField","as","messagesProject","room","messages","$filter","input","cond","$gte","$lte","lastWeekMessages","messagesUnwind","$unwind","path","preserveNullAndEmptyArrays","messagesGroup","$first","lastWeekMessagesUnwind","lastWeekMessagesGroup","presentationProject","$ifNull","_updatedAt","diffFromLastWeek","$subtract","firstParams","lastParams","sort","sortAndPaginationParams","offset","push","$skip","count","params","findChannelsByTypesWithNumberOfMessagesBetweenDate","aggregationParams","allowDiskUse","findOneByNameOrFname","findOneByJoinCodeAndId","joinCode","findOneByNonValidatedName","findOneByName","findDefaultRoomsForTeam","incUsersCountByIds","inc","$inc","usersCount","allRoomSourcesCount","source","findByBroadcast","setAsFederated","roomId","setRoomTypeById","roomType","setRoomNameById","setSidepanelById","sidepanel","setFnameById","setRoomTopicById","topic","description","findByE2E","findE2ERoomById","findRoomsInsideTeams","autoJoin","countByType","countDocuments","findPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms","searchTerm","teamIds","findPaginatedContainingNameOrFNameInIdsAsTeamMain","findPaginatedByTypeAndIds","type","findOneDirectRoomContainingAllUserIDs","$size","$all","findFederatedRooms","findCountOfRoomsWithActiveCalls","callStatus","findBiggestFederatedRoomInNumberOfUsers","asc","findFederatedRoomByAmountOfUsers","limit","shift","findSmallestFederatedRoomInNumberOfUsers","countFederatedRooms","incMsgCountById","msgs","getIncMsgCountUpdateQuery","roomUpdater","decreaseMessageCountById","findOneByIdOrName","_idOrName","findOneByIdAndType","setCallStatus","status","setCallStatusAndCallStartTime","webRtcCallStartTime","Date","setReactionsInLastMessage","reactions","unsetReactionsInLastMessage","unsetAllImportIds","importIds","updateLastMessageStar","userId","starred","$addToSet","$pull","setLastMessagePinned","pinnedBy","pinned","pinnedAt","setLastMessageAsRead","setDescriptionById","setReadOnlyById","readOnly","ro","setDmReadOnlyByUserId","reactWhenReadOnly","Array","isArray","getDirectConversationsByUserId","setAllowReactingWhenReadOnlyById","allowReacting","setAvatarData","origin","etag","avatarOrigin","avatarETag","unsetAvatarData","now","toString","setSystemMessagesById","systemMessages","sysMes","setE2eKeyId","e2eKeyId","findOneByImportId","findOneByNameAndNotId","findOneByDisplayName","findOneByNameAndType","includeFederatedRooms","findById","findByIds","findByType","findByTypeInIds","findBySubscriptionUserId","data","findByUserId","projection","map","item","findBySubscriptionUserIdUpdatedAfter","$gt","findByNameAndTypeNotDefault","findByNameOrFNameAndTypesNotInIds","$nin","findByDefaultAndTypes","defaultValue","findDirectRoomContainingAllUsernames","findByTypeAndName","findByTypeAndNameOrId","identifier","findByTypeAndNameContaining","findByTypeInIdsAndNameContaining","findGroupDMsByUids","find1On1ByUserId","findByCreatedOTR","findByUsernamesOrUids","findDMsByUids","addImportIds","$each","archiveById","unarchiveById","setNameById","setIncMsgCountAndSetLastMessageUpdateQuery","lastMessage","shouldStoreLastMessage","set","incUsersCountById","incUsersCountNotDMsByIds","getLastMessageUpdateQuery","resetLastMessageById","msgCountDelta","replaceUsername","previousUsername","username","replaceMutedUsername","replaceUsernameOfUserByUserId","setJoinCodeById","joinCodeRequired","setTypeById","setTopicById","setAnnouncementById","announcement","announcementDetails","setCustomFieldsById","customFields","muteUsernameByRoomId","unmuted","muteReadOnlyUsernameByRoomId","unmuteMutedUsernameByRoomId","unmuteReadOnlyUsernameByRoomId","saveFeaturedById","includes","saveDefaultById","saveFavoriteById","favorite","saveRetentionEnabledById","value","saveRetentionMaxAgeById","saveRetentionExcludePinnedById","saveRetentionIgnoreThreadsById","saveRetentionFilesOnlyById","saveRetentionOverrideGlobalById","saveEncryptedById","updateGroupDMsRemovingUsernamesByUsername","createWithIdTypeAndName","extraData","u","Object","assign","insertOne","createWithFullRoomData","newRoom","insertedId","removeById","deleteOne","removeByIds","deleteMany","removeDirectRoomContainingUsername","countDiscussions","setOTRForDMByRoomID","getSubscribedRoomIdsWithoutE2EKeys","_ref2","addUserIdToE2EEQueueByRoomIds","$push","usersWaitingForE2EKeys","$slice","removeUsersFromE2EEQueueByRoomId","removeUserFromE2EEQueue","findChildrenOfTeam","teamRoomId","filter","nameFilter","let","pipeline","$expr","$eq","subscription","$facet","totalCount","$count","paginatedResults","skip","resetRoomKeyAndSetE2EEQueueByRoomId","e2eQueue","findOneAndUpdate","returnDocument","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Rooms.ts"],"sourcesContent":["import type {\n\tIDirectMessageRoom,\n\tIMessage,\n\tIOmnichannelGenericRoom,\n\tIRoom,\n\tIRoomFederated,\n\tITeam,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IRoomsModel, IChannelsWithNumberOfMessagesBetweenDate } from '@rocket.chat/model-typings';\nimport { Subscriptions } from '@rocket.chat/models';\nimport type { Updater } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tDb,\n\tDeleteResult,\n\tDocument,\n\tFilter,\n\tFindCursor,\n\tFindOptions,\n\tIndexDescription,\n\tUpdateFilter,\n\tUpdateOptions,\n\tUpdateResult,\n\tModifyResult,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class RoomsRaw extends BaseRaw<IRoom> implements IRoomsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IRoom>>) {\n\t\tsuper(db, 'room', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: { name: 1 },\n\t\t\t\tunique: true,\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { default: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { featured: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { muted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { 'u._id': 1 },\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { ts: 1 },\n\t\t\t},\n\t\t\t// discussions\n\t\t\t{\n\t\t\t\tkey: { prid: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { fname: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t// field used for DMs only\n\t\t\t{\n\t\t\t\tkey: { uids: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { createdOTR: 1 },\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: { encrypted: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: { broadcast: 1 },\n\t\t\t\tsparse: true,\n\t\t\t}, // used on statistics\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tteamId: 1,\n\t\t\t\t\tteamDefault: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{ key: { t: 1, ts: 1 } },\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneByRoomIdAndUserId(rid: IRoom['_id'], uid: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': rid,\n\t\t\t'u._id': uid,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindManyByRoomIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByIds(\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom & { isLastOwner?: boolean }>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\t_id: { $in: roomIds },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tasync getMostRecentAverageChatDurationTime(\n\t\tnumberMostRecentChats: number,\n\t\tdepartment?: string,\n\t): Promise<{ props: { _id: IRoom['_id']; avgChatDuration: number } }> {\n\t\tconst aggregate = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tt: 'l',\n\t\t\t\t\t...(department && { departmentId: department }),\n\t\t\t\t\tclosedAt: { $exists: true },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: { closedAt: -1 } },\n\t\t\t{ $limit: numberMostRecentChats },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tchats: { $sum: 1 },\n\t\t\t\t\tsumChatDuration: { $sum: '$metrics.chatDuration' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { _id: '$_id', avgChatDuration: { $divide: ['$sumChatDuration', '$chats'] } } },\n\t\t];\n\n\t\tconst [statistic] = await this.col\n\t\t\t.aggregate<{ props: { _id: IRoom['_id']; avgChatDuration: number } }>(aggregate, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t\treturn statistic;\n\t}\n\n\tfindByNameOrFnameContainingAndTypes(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttypes: Array<IRoom['t']>,\n\t\tdiscussion = false,\n\t\tteams = false,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{ name: nameRegex, federated: { $ne: true } },\n\t\t\t\t{ fname: nameRegex },\n\t\t\t\t{\n\t\t\t\t\tt: 'd',\n\t\t\t\t\tusernames: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\tname ? nameCondition : {},\n\t\t\t\ttypes?.length || discussion || teams\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tt: {\n\t\t\t\t\t\t\t\t\t\t$in: types,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...(discussion ? [{ prid: { $exists: true } }] : []),\n\t\t\t\t\t\t\t\t...(teams ? [{ teamMain: { $exists: true } }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: {},\n\t\t\t],\n\t\t\t...(!discussion ? { prid: { $exists: false } } : {}),\n\t\t\t...(!teams ? { teamMain: { $exists: false } } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamId(teamId: ITeam['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedByTeamIdContainingNameAndDefault(\n\t\tteamId: ITeam['_id'],\n\t\tname: IRoom['name'],\n\t\tteamDefault: boolean,\n\t\tids: Array<IRoom['_id']> | undefined,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(name ? { name: new RegExp(escapeRegExp(name), 'i') } : {}),\n\t\t\t...(teamDefault === true ? { teamDefault } : {}),\n\t\t\t...(ids ? { $or: [{ t: 'c' }, { _id: { $in: ids } }] } : {}),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindByTeamIdAndRoomsId(teamId: ITeam['_id'], rids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId,\n\t\t\t_id: {\n\t\t\t\t$in: rids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsByNameOrFnameStarting(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname: nameRegex,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: nameRegex,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ federated: { $ne: true } }, { archived: { $ne: true } }],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedRoomsWithoutDiscussionsByRoomIds(\n\t\tname: NonNullable<IRoom['name']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: ['c', 'p'],\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tprid: { $exists: false },\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindChannelAndGroupListWithoutTeamsByNameStartingByOwner(\n\t\tname: NonNullable<IRoom['name']>,\n\t\tgroupsToAccept: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(name).trim()}`, 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\tprid: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t_id: {\n\t\t\t\t$in: groupsToAccept,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\t$and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }],\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tunsetTeamId(teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { teamId };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\tteamId: '',\n\t\t\t\tteamDefault: '',\n\t\t\t\tteamMain: '',\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tunsetTeamById(rid: IRoom['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $unset: { teamId: '', teamDefault: '' } }, options);\n\t}\n\n\tsetTeamById(\n\t\trid: IRoom['_id'],\n\t\tteamId: ITeam['_id'],\n\t\tteamDefault: IRoom['teamDefault'],\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamDefault } }, options);\n\t}\n\n\tsetTeamMainById(rid: IRoom['_id'], teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamId, teamMain: true } }, options);\n\t}\n\n\tsetTeamByIds(rids: Array<IRoom['_id']>, teamId: ITeam['_id'], options: UpdateOptions = {}): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany({ _id: { $in: rids } }, { $set: { teamId } }, options);\n\t}\n\n\tsetTeamDefaultById(\n\t\trid: IRoom['_id'],\n\t\tteamDefault: NonNullable<IRoom['teamDefault']>,\n\t\toptions: UpdateOptions = {},\n\t): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: rid }, { $set: { teamDefault } }, options);\n\t}\n\n\tgetChannelsWithNumberOfMessagesBetweenDateQuery({\n\t\ttypes,\n\t\tstart,\n\t\tend,\n\t\tstartOfLastWeek,\n\t\tendOfLastWeek,\n\t\toptions,\n\t}: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}) {\n\t\tconst typeMatch = {\n\t\t\t$match: {\n\t\t\t\tt: { $in: types },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_analytics',\n\t\t\t\tlocalField: '_id',\n\t\t\t\tforeignField: 'room._id',\n\t\t\t\tas: 'messages',\n\t\t\t},\n\t\t};\n\t\tconst messagesProject = {\n\t\t\t$project: {\n\t\t\t\troom: '$$ROOT',\n\t\t\t\tmessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', start] }, { $lte: ['$$message.date', end] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlastWeekMessages: {\n\t\t\t\t\t$filter: {\n\t\t\t\t\t\tinput: '$messages',\n\t\t\t\t\t\tas: 'message',\n\t\t\t\t\t\tcond: {\n\t\t\t\t\t\t\t$and: [{ $gte: ['$$message.date', startOfLastWeek] }, { $lte: ['$$message.date', endOfLastWeek] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst messagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$messages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst messagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $sum: '$messages.messages' },\n\t\t\t\tlastWeekMessages: { $first: '$lastWeekMessages' },\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesUnwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$lastWeekMessages',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst lastWeekMessagesGroup = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: '$room._id',\n\t\t\t\t},\n\t\t\t\troom: { $first: '$room' },\n\t\t\t\tmessages: { $first: '$messages' },\n\t\t\t\tlastWeekMessages: { $sum: '$lastWeekMessages.messages' },\n\t\t\t},\n\t\t};\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\troom: {\n\t\t\t\t\t_id: '$_id._id',\n\t\t\t\t\tname: { $ifNull: ['$room.name', '$room.fname'] },\n\t\t\t\t\tts: '$room.ts',\n\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t_updatedAt: '$room._updatedAt',\n\t\t\t\t\tusernames: '$room.usernames',\n\t\t\t\t},\n\t\t\t\tmessages: '$messages',\n\t\t\t\tlastWeekMessages: '$lastWeekMessages',\n\t\t\t\tdiffFromLastWeek: { $subtract: ['$messages', '$lastWeekMessages'] },\n\t\t\t},\n\t\t};\n\t\tconst firstParams = [typeMatch, lookup, messagesProject, messagesUnwind, messagesGroup];\n\t\tconst lastParams = [lastWeekMessagesUnwind, lastWeekMessagesGroup, presentationProject];\n\n\t\tconst sort = { $sort: options?.sort || { messages: -1 } };\n\t\tconst sortAndPaginationParams: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [sort];\n\n\t\tif (options?.offset) {\n\t\t\tsortAndPaginationParams.push({ $skip: options.offset });\n\t\t}\n\n\t\tif (options?.count) {\n\t\t\tsortAndPaginationParams.push({ $limit: options.count });\n\t\t}\n\t\tconst params: Exclude<Parameters<Collection<IRoom>['aggregate']>[0], undefined> = [...firstParams];\n\n\t\tif (options?.sort) {\n\t\t\tparams.push(...lastParams, ...sortAndPaginationParams);\n\t\t} else {\n\t\t\tparams.push(...sortAndPaginationParams, ...lastParams, sort);\n\t\t}\n\n\t\treturn params;\n\t}\n\n\tfindChannelsByTypesWithNumberOfMessagesBetweenDate(params: {\n\t\ttypes: Array<IRoom['t']>;\n\t\tstart: number;\n\t\tend: number;\n\t\tstartOfLastWeek: number;\n\t\tendOfLastWeek: number;\n\t\toptions?: any;\n\t}): AggregationCursor<IChannelsWithNumberOfMessagesBetweenDate> {\n\t\tconst aggregationParams = this.getChannelsWithNumberOfMessagesBetweenDateQuery(params);\n\t\treturn this.col.aggregate<IChannelsWithNumberOfMessagesBetweenDate>(aggregationParams, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tfindOneByNameOrFname(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tfname: name,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByJoinCodeAndId(joinCode: string, rid: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: rid,\n\t\t\tjoinCode,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tasync findOneByNonValidatedName(name: NonNullable<IRoom['name'] | IRoom['fname']>, options: FindOptions<IRoom> = {}) {\n\t\tconst room = await this.findOneByNameOrFname(name, options);\n\t\tif (room) {\n\t\t\treturn room;\n\t\t}\n\n\t\treturn this.findOneByName(name, options);\n\t}\n\n\tfindOneByName(name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.col.findOne({ name }, options);\n\t}\n\n\tfindDefaultRoomsForTeam(teamId: ITeam['_id']): FindCursor<IRoom> {\n\t\treturn this.col.find({\n\t\t\tteamId,\n\t\t\tteamDefault: true,\n\t\t\tteamMain: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t});\n\t}\n\n\tincUsersCountByIds(ids: Array<IRoom['_id']>, inc = 1, options?: UpdateOptions): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update, options);\n\t}\n\n\tallRoomSourcesCount(): AggregationCursor<{ _id: Required<IOmnichannelGenericRoom['source']>; count: number }> {\n\t\treturn this.col.aggregate([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\tt: 'l',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$source',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tfindByBroadcast(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tbroadcast: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tsetAsFederated(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { federated: true } });\n\t}\n\n\tsetRoomTypeById(roomId: IRoom['_id'], roomType: IRoom['t']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { t: roomType } });\n\t}\n\n\tsetRoomNameById(roomId: IRoom['_id'], name: IRoom['name']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { name } });\n\t}\n\n\tsetSidepanelById(roomId: IRoom['_id'], sidepanel: IRoom['sidepanel']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { sidepanel } });\n\t}\n\n\tsetFnameById(_id: IRoom['_id'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetRoomTopicById(roomId: IRoom['_id'], topic: IRoom['description']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { description: topic } });\n\t}\n\n\tfindByE2E(options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindE2ERoomById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t\tencrypted: true,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindRoomsInsideTeams(autoJoin = false): FindCursor<IRoom> {\n\t\treturn this.find({\n\t\t\tteamId: { $exists: true },\n\t\t\tteamMain: { $exists: false },\n\t\t\t...(autoJoin && { teamDefault: true }),\n\t\t});\n\t}\n\n\tcountByType(t: IRoom['t']): Promise<number> {\n\t\treturn this.col.countDocuments({ t });\n\t}\n\n\tfindPaginatedByNameOrFNameAndRoomIdsIncludingTeamRooms(\n\t\tsearchTerm: RegExp | null,\n\t\tteamIds: Array<ITeam['_id']>,\n\t\troomIds: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$and: [\n\t\t\t\t{ teamMain: { $exists: false } },\n\t\t\t\t{ prid: { $exists: false } },\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $exists: false },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t\tteamId: { $in: teamIds },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(roomIds?.length > 0\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t\t\t\t$in: roomIds,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t...(searchTerm\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  ]\n\t\t\t\t\t: []),\n\t\t\t],\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedContainingNameOrFNameInIdsAsTeamMain(\n\t\tsearchTerm: RegExp | null,\n\t\trids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tteamMain: true,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'p',\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: rids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\tif (searchTerm && query.$and) {\n\t\t\tquery.$and.push({\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tfname: searchTerm,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByTypeAndIds(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindPaginated<FindCursor<IRoom>> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindOneDirectRoomContainingAllUserIDs(uid: IDirectMessageRoom['uids'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tuids: { $size: uid.length, $all: uid },\n\t\t};\n\n\t\treturn this.findOne<IRoom>(query, options);\n\t}\n\n\tfindFederatedRooms(options: FindOptions<IRoom> = {}): FindCursor<IRoomFederated> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\treturn this.find<IRoomFederated>(query, options);\n\t}\n\n\tfindCountOfRoomsWithActiveCalls(): Promise<number> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t// No matter the actual \"status\" of the call, if the room has a callStatus, it means there is/was a call\n\t\t\tcallStatus: { $exists: true },\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync findBiggestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = false;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync findFederatedRoomByAmountOfUsers(options?: FindOptions<IRoom>, asc = true): Promise<IRoom | undefined> {\n\t\tconst query = {\n\t\t\tfederated: true,\n\t\t};\n\n\t\tconst room = await (\n\t\t\tawait this.find(query, options)\n\t\t\t\t.sort({ usersCount: asc ? 1 : -1 })\n\t\t\t\t.limit(1)\n\t\t\t\t.toArray()\n\t\t).shift();\n\n\t\treturn room;\n\t}\n\n\tasync findSmallestFederatedRoomInNumberOfUsers(options?: FindOptions<IRoom>): Promise<IRoom | undefined> {\n\t\tconst asc = true;\n\n\t\treturn this.findFederatedRoomByAmountOfUsers(options, asc);\n\t}\n\n\tasync countFederatedRooms(): Promise<number> {\n\t\treturn this.col.countDocuments({ federated: true });\n\t}\n\n\tincMsgCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tmsgs: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tgetIncMsgCountUpdateQuery(inc: number, roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.inc('msgs', inc);\n\t}\n\n\tdecreaseMessageCountById(_id: IRoom['_id'], count = 1) {\n\t\treturn this.incMsgCountById(_id, -count);\n\t}\n\n\tfindOneByIdOrName(_idOrName: IRoom['_id'] | IRoom['name'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t_id: _idOrName,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: _idOrName,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByIdAndType(roomId: IRoom['_id'], type: IRoom['t'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId, t: type }, options);\n\t}\n\n\tsetCallStatus(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCallStatusAndCallStartTime(_id: IRoom['_id'], status: IRoom['callStatus']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcallStatus: status,\n\t\t\t\twebRtcCallStartTime: new Date(),\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReactionsInLastMessage(roomId: IRoom['_id'], reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $set: { 'lastMessage.reactions': reactions } });\n\t}\n\n\tunsetReactionsInLastMessage(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: roomId }, { $unset: { 'lastMessage.reactions': 1 } });\n\t}\n\n\tunsetAllImportIds(): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\timportIds: {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$unset: {\n\t\t\t\timportIds: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateLastMessageStar(roomId: IRoom['_id'], userId: IUser['_id'], starred: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\t'lastMessage.starred': { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessagePinned(\n\t\troomId: IRoom['_id'],\n\t\tpinnedBy: IMessage['pinnedBy'],\n\t\tpinned: IMessage['pinned'],\n\t\tpinnedAt: IMessage['pinnedAt'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: roomId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'lastMessage.pinned': pinned,\n\t\t\t\t'lastMessage.pinnedAt': pinnedAt || new Date(),\n\t\t\t\t'lastMessage.pinnedBy': pinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetLastMessageAsRead(roomId: IRoom['_id']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: roomId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t'lastMessage.unread': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetDescriptionById(_id: IRoom['_id'], description: IRoom['description']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdescription,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetReadOnlyById(_id: IRoom['_id'], readOnly: NonNullable<IRoom['ro']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDmReadOnlyByUserId(\n\t\t_id: IRoom['_id'],\n\t\tids: Array<IRoom['_id']>,\n\t\treadOnly: NonNullable<IRoom['ro']>,\n\t\treactWhenReadOnly: NonNullable<IRoom['reactWhenReadOnly']>,\n\t): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tuids: {\n\t\t\t\t$size: 2,\n\t\t\t\t$in: [_id],\n\t\t\t},\n\t\t\t...(ids && Array.isArray(ids) ? { _id: { $in: ids } } : {}),\n\t\t\tt: 'd',\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tro: readOnly,\n\t\t\t\treactWhenReadOnly,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetDirectConversationsByUserId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ t: 'd', uids: { $size: 2, $in: [_id] } }, options);\n\t}\n\n\t// 2\n\tsetAllowReactingWhenReadOnlyById(_id: IRoom['_id'], allowReacting: NonNullable<IRoom['reactWhenReadOnly']>): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\treactWhenReadOnly: allowReacting,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAvatarData(_id: IRoom['_id'], origin: string, etag: IRoom['avatarETag']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarOrigin: origin,\n\t\t\t\tavatarETag: etag,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tunsetAvatarData(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tavatarETag: Date.now().toString(),\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tavatarOrigin: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tsetSystemMessagesById(_id: IRoom['_id'], systemMessages: IRoom['sysMes']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\t\tconst update: UpdateFilter<IRoom> =\n\t\t\tArray.isArray(systemMessages) && systemMessages.length > 0\n\t\t\t\t? {\n\t\t\t\t\t\t$set: {\n\t\t\t\t\t\t\tsysMes: systemMessages,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\t$unset: {\n\t\t\t\t\t\t\tsysMes: '',\n\t\t\t\t\t\t},\n\t\t\t\t  };\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetE2eKeyId(_id: IRoom['_id'], e2eKeyId: IRoom['e2eKeyId'], options: UpdateOptions = {}): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\te2eKeyId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update, options);\n\t}\n\n\tfindOneByImportId(_id: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { importIds: _id };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndNotId(name: NonNullable<IRoom['name']>, rid: IRoom['_id']): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: { $ne: rid },\n\t\t\tname,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByDisplayName(fname: IRoom['fname'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = { fname };\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindOneByNameAndType(\n\t\tname: NonNullable<IRoom['name']>,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tteamId: {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t...(includeFederatedRooms\n\t\t\t\t? { $or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }] }\n\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name }),\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\t// FIND\n\tfindById(roomId: IRoom['_id'], options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\treturn this.findOne({ _id: roomId }, options);\n\t}\n\n\tfindByIds(roomIds: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find({ _id: { $in: roomIds } }, options);\n\t}\n\n\tfindByType(type: IRoom['t'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = { t: type };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIds(type: IRoom['t'], ids: Array<IRoom['_id']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserId(userId: IUser['_id'], options: FindOptions<IRoom> = {}): Promise<FindCursor<IRoom>> {\n\t\tconst data = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: data,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: data,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findBySubscriptionUserIdUpdatedAfter(\n\t\tuserId: IUser['_id'],\n\t\t_updatedAt: IRoom['_updatedAt'],\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<FindCursor<IRoom>> {\n\t\tconst ids = (await Subscriptions.findByUserId(userId, { projection: { rid: 1 } }).toArray()).map((item) => item.rid);\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: _updatedAt,\n\t\t\t},\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tteamId: {\n\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t},\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByNameAndTypeNotDefault(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttype: IRoom['t'],\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\tdefault: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }], name }] }, { federated: true, fname: name }],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $or: [{ federated: { $exists: false } }, { federated: false }], name },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\t// 3\n\tfindByNameOrFNameAndTypesNotInIds(\n\t\tname: IRoom['name'] | RegExp,\n\t\ttypes: Array<IRoom['t']>,\n\t\tids: Array<IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t\tincludeFederatedRooms = false,\n\t): FindCursor<IRoom> {\n\t\tconst nameCondition: Filter<IRoom> = {\n\t\t\t$or: [{ name }, { fname: name }],\n\t\t};\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$nin: ids,\n\t\t\t},\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tteamId: {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\t$in: ids,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Also return the main room of public teams\n\t\t\t\t\t\t\t// this will have no effect if the method is called without the 'c' type, as the type filter is outside the $or group.\n\t\t\t\t\t\t\tteamMain: true,\n\t\t\t\t\t\t\tt: 'c',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tincludeFederatedRooms\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t{ $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t\t\t\t\t\t{ federated: true, fname: name },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t  }\n\t\t\t\t\t: { $and: [{ $or: [{ federated: { $exists: false } }, { federated: false }] }, nameCondition] },\n\t\t\t],\n\t\t};\n\n\t\t// do not use cache\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByDefaultAndTypes(defaultValue: boolean, types: Array<IRoom['t']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: {\n\t\t\t\t$in: types,\n\t\t\t},\n\t\t\t...(defaultValue ? { default: true } : { default: { $ne: true } }),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDirectRoomContainingAllUsernames(\n\t\tusernames: NonNullable<IRoom['usernames']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: { $size: usernames.length, $all: usernames },\n\t\t\tusersCount: usernames.length,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndName(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameOrId(\n\t\ttype: IRoom['t'],\n\t\tidentifier: NonNullable<IRoom['name'] | IRoom['_id']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): Promise<IRoom | null> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: type,\n\t\t\t$or: [{ name: identifier }, { _id: identifier }],\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindByTypeAndNameContaining(type: IRoom['t'], name: NonNullable<IRoom['name']>, options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindByTypeInIdsAndNameContaining(\n\t\ttype: IRoom['t'],\n\t\tids: Array<IRoom['_id']>,\n\t\tname: NonNullable<IRoom['name']>,\n\t\toptions: FindOptions<IRoom> = {},\n\t): FindCursor<IRoom> {\n\t\tconst nameRegex = new RegExp(escapeRegExp(name).trim(), 'i');\n\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tname: nameRegex,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindGroupDMsByUids(uids: NonNullable<IRoom['uids']>, options: FindOptions<IDirectMessageRoom> = {}): FindCursor<IDirectMessageRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tusersCount: { $gt: 2 },\n\t\t\t\tuids: { $in: uids },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfind1On1ByUserId(userId: IRoom['_id'], options: FindOptions<IRoom> = {}): FindCursor<IRoom> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\tuids: userId,\n\t\t\t\tusersCount: 2,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindByCreatedOTR(): FindCursor<IRoom> {\n\t\treturn this.find({ createdOTR: true });\n\t}\n\n\tfindByUsernamesOrUids(uids: IRoom['u']['_id'][], usernames: IRoom['u']['username'][]): FindCursor<IRoom> {\n\t\treturn this.find({ $or: [{ usernames: { $in: usernames } }, { uids: { $in: uids } }] });\n\t}\n\n\tfindDMsByUids(uids: IRoom['u']['_id'][]): FindCursor<IRoom> {\n\t\treturn this.find({ uids: { $size: 2, $in: [uids] }, t: 'd' });\n\t}\n\n\t// UPDATE\n\taddImportIds(_id: IRoom['_id'], importIds: string[]): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\timportIds: {\n\t\t\t\t\t$each: ([] as string[]).concat(importIds),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunarchiveById(_id: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tarchived: false,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetNameById(_id: IRoom['_id'], name: IRoom['name'], fname: IRoom['fname']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t\tfname,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetIncMsgCountAndSetLastMessageUpdateQuery(\n\t\tinc: number,\n\t\tlastMessage: IMessage,\n\t\tshouldStoreLastMessage: boolean,\n\t\troomUpdater: Updater<IRoom>,\n\t): Updater<IRoom> {\n\t\troomUpdater.inc('msgs', inc).set('lm', lastMessage.ts);\n\n\t\tif (shouldStoreLastMessage) {\n\t\t\troomUpdater.set('lastMessage', lastMessage);\n\t\t}\n\n\t\treturn roomUpdater;\n\t}\n\n\tincUsersCountById(_id: IRoom['_id'], inc = 1): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\t// 4\n\tincUsersCountNotDMsByIds(ids: Array<IRoom['_id']>, inc = 1): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t_id: {\n\t\t\t\t$in: ids,\n\t\t\t},\n\t\t\tt: { $ne: 'd' },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$inc: {\n\t\t\t\tusersCount: inc,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tgetLastMessageUpdateQuery(lastMessage: IRoom['lastMessage'], roomUpdater: Updater<IRoom>): Updater<IRoom> {\n\t\treturn roomUpdater.set('lastMessage', lastMessage);\n\t}\n\n\tasync resetLastMessageById(_id: IRoom['_id'], lastMessage: IRoom['lastMessage'] | null, msgCountDelta?: number): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update = {\n\t\t\t...(lastMessage ? { $set: { lastMessage } } : { $unset: { lastMessage: 1 as const } }),\n\t\t\t...(msgCountDelta ? { $inc: { msgs: msgCountDelta } } : {}),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\treplaceUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { usernames: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'usernames.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceMutedUsername(previousUsername: IUser['username'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { muted: previousUsername };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'muted.$': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\treplaceUsernameOfUserByUserId(userId: IUser['_id'], username: IUser['username']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = { 'u._id': userId };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetJoinCodeById(_id: IRoom['_id'], joinCode: string): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IRoom>;\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tif ((joinCode != null ? joinCode.trim() : undefined) !== '') {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: true,\n\t\t\t\t\tjoinCode,\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$set: {\n\t\t\t\t\tjoinCodeRequired: false,\n\t\t\t\t},\n\t\t\t\t$unset: {\n\t\t\t\t\tjoinCode: 1,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTypeById(_id: IRoom['_id'], type: IRoom['t']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tt: type,\n\t\t\t},\n\t\t};\n\t\tif (type === 'p') {\n\t\t\tupdate.$unset = { default: '' };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetTopicById(_id: IRoom['_id'], topic: IRoom['topic']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\ttopic,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAnnouncementById(\n\t\t_id: IRoom['_id'],\n\t\tannouncement: IRoom['announcement'],\n\t\tannouncementDetails: IRoom['announcementDetails'],\n\t): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tannouncement,\n\t\t\t\tannouncementDetails,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetCustomFieldsById(_id: IRoom['_id'], customFields: IRoom['customFields']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcustomFields,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$addToSet: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tmuteReadOnlyUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteMutedUsernameByRoomId(_id: IRoom['_id'], username: IUser['username']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunmuteReadOnlyUsernameByRoomId(_id: string, username: string): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id, ro: true };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tmuted: username,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tunmuted: username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFeaturedById(_id: IRoom['_id'], featured: string | boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\t\tconst set = ['true', true].includes(featured);\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t[set ? '$set' : '$unset']: {\n\t\t\t\tfeatured: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveDefaultById(_id: IRoom['_id'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tdefault: defaultValue,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveFavoriteById(_id: IRoom['_id'], favorite: IRoom['favorite'], defaultValue: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t...(favorite && defaultValue && { $set: { favorite } }),\n\t\t\t...((!favorite || !defaultValue) && { $unset: { favorite: 1 } }),\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionEnabledById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {};\n\n\t\tif (value == null) {\n\t\t\tupdate.$unset = { 'retention.enabled': true };\n\t\t} else {\n\t\t\tupdate.$set = { 'retention.enabled': !!value };\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionMaxAgeById(_id: IRoom['_id'], value = 30): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.maxAge': value,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionExcludePinnedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.excludePinned': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionIgnoreThreadsById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.ignoreThreads': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionFilesOnlyById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.filesOnly': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveRetentionOverrideGlobalById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\t'retention.overrideGlobal': value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsaveEncryptedById(_id: IRoom['_id'], value: boolean): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tencrypted: value === true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateGroupDMsRemovingUsernamesByUsername(username: string, userId: string): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $gt: 2 },\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusernames: username,\n\t\t\t\tuids: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync createWithIdTypeAndName(\n\t\t_id: IRoom['_id'],\n\t\ttype: IRoom['t'],\n\t\tname: IRoom['name'],\n\t\textraData?: Record<string, string>,\n\t): Promise<IRoom> {\n\t\tconst room: IRoom = {\n\t\t\t_id,\n\t\t\tts: new Date(),\n\t\t\tt: type,\n\t\t\tname,\n\t\t\tusernames: [],\n\t\t\tmsgs: 0,\n\t\t\tusersCount: 0,\n\t\t\t_updatedAt: new Date(),\n\t\t\tu: {\n\t\t\t\t_id: 'rocket.cat',\n\t\t\t\tusername: 'rocket.cat',\n\t\t\t\tname: 'Rocket.Cat',\n\t\t\t},\n\t\t};\n\n\t\tObject.assign(room, extraData);\n\n\t\tawait this.insertOne(room);\n\t\treturn room;\n\t}\n\n\tasync createWithFullRoomData(room: Omit<IRoom, '_id' | '_updatedAt'>): Promise<IRoom> {\n\t\tconst newRoom: IRoom = {\n\t\t\t_id: (await this.insertOne(room)).insertedId,\n\t\t\t_updatedAt: new Date(),\n\t\t\t...room,\n\t\t};\n\n\t\treturn newRoom;\n\t}\n\n\t// REMOVE\n\tremoveById(_id: IRoom['_id']): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = { _id };\n\n\t\treturn this.deleteOne(query);\n\t}\n\n\tremoveByIds(ids: Array<IRoom['_id']>): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ _id: { $in: ids } });\n\t}\n\n\tremoveDirectRoomContainingUsername(username: string): Promise<DeleteResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\tt: 'd',\n\t\t\tusernames: username,\n\t\t\tusersCount: { $lte: 2 },\n\t\t};\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tcountDiscussions(): Promise<number> {\n\t\treturn this.col.countDocuments({ prid: { $exists: true } });\n\t}\n\n\tsetOTRForDMByRoomID(rid: IRoom['_id']): Promise<UpdateResult> {\n\t\tconst query: Filter<IRoom> = { _id: rid, t: 'd' };\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$set: {\n\t\t\t\tcreatedOTR: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getSubscribedRoomIdsWithoutE2EKeys(uid: IUser['_id']): Promise<IRoom['_id'][]> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate([\n\t\t\t\t\t{ $match: { encrypted: true } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$lookup: {\n\t\t\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\t\t\tforeignField: 'rid',\n\t\t\t\t\t\t\tas: 'subs',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$subs',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'subs.u._id': uid,\n\t\t\t\t\t\t\t'subs.E2EKey': {\n\t\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t])\n\t\t\t\t.toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\taddUserIdToE2EEQueueByRoomIds(roomIds: IRoom['_id'][], uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': {\n\t\t\t\t$in: roomIds,\n\t\t\t},\n\t\t\t'usersWaitingForE2EKeys.userId': { $ne: uid },\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$push: {\n\t\t\t\tusersWaitingForE2EKeys: {\n\t\t\t\t\t$each: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tuserId: uid,\n\t\t\t\t\t\t\tts: new Date(),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t$slice: -50,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync removeUsersFromE2EEQueueByRoomId(roomId: IRoom['_id'], uids: IUser['_id'][]): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'_id': roomId,\n\t\t\t'usersWaitingForE2EKeys.userId': {\n\t\t\t\t$in: uids,\n\t\t\t},\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: { $in: uids } },\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateMany(query, update);\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'_id': roomId,\n\t\t\t\t'usersWaitingForE2EKeys.0': { $exists: false },\n\t\t\t\t'encrypted': true,\n\t\t\t},\n\t\t\t{ $unset: { usersWaitingForE2EKeys: 1 } },\n\t\t);\n\t}\n\n\tasync removeUserFromE2EEQueue(uid: IUser['_id']): Promise<Document | UpdateResult> {\n\t\tconst query: Filter<IRoom> = {\n\t\t\t'usersWaitingForE2EKeys.userId': uid,\n\t\t\t'encrypted': true,\n\t\t};\n\n\t\tconst update: UpdateFilter<IRoom> = {\n\t\t\t$pull: {\n\t\t\t\tusersWaitingForE2EKeys: { userId: uid },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindChildrenOfTeam(\n\t\tteamId: string,\n\t\tteamRoomId: string,\n\t\tuserId: string,\n\t\tfilter?: string,\n\t\ttype?: 'channels' | 'discussions',\n\t\toptions?: FindOptions<IRoom>,\n\t): AggregationCursor<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }> {\n\t\tconst nameFilter = filter ? new RegExp(escapeRegExp(filter), 'i') : undefined;\n\t\treturn this.col.aggregate<{ totalCount: { count: number }[]; paginatedResults: IRoom[] }>([\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$and: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t\t...(!type || type === 'channels' ? [{ teamId }] : []),\n\t\t\t\t\t\t\t\t...(!type || type === 'discussions' ? [{ prid: teamRoomId }] : []),\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t...(nameFilter ? [{ $or: [{ fname: nameFilter }, { name: nameFilter }] }] : []),\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_subscription',\n\t\t\t\t\tlet: {\n\t\t\t\t\t\troomId: '$_id',\n\t\t\t\t\t},\n\t\t\t\t\tpipeline: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$rid', '$$roomId'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$eq: ['$u._id', userId],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t\t\t\t$ne: ['$t', 'c'],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: { _id: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tas: 'subscription',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{ t: 'c' },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$expr: {\n\t\t\t\t\t\t\t\t$ne: [{ $size: '$subscription' }, 0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $project: { subscription: 0 } },\n\t\t\t{ $sort: options?.sort || { ts: 1 } },\n\t\t\t{\n\t\t\t\t$facet: {\n\t\t\t\t\ttotalCount: [{ $count: 'count' }],\n\t\t\t\t\tpaginatedResults: [{ $skip: options?.skip || 0 }, { $limit: options?.limit || 50 }],\n\t\t\t\t},\n\t\t\t},\n\t\t]);\n\t}\n\n\tresetRoomKeyAndSetE2EEQueueByRoomId(\n\t\troomId: string,\n\t\te2eKeyId: string,\n\t\te2eQueue?: IRoom['usersWaitingForE2EKeys'],\n\t): Promise<ModifyResult<IRoom>> {\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ _id: roomId },\n\t\t\t{ $set: { e2eKeyId, ...(Array.isArray(e2eQueue) && { usersWaitingForE2EKeys: e2eQueue }) } },\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0c3e4d6893d09fb72871daf1ba347a755839cd86"}
