{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/message-reads/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/local-services/message-reads/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/message-reads/service.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/message-reads/service.ts","sourceRoot":"","sources":["ee/server/local-services/message-reads/service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAE5E,OAAO,EAAE,4CAA4C,EAAE,MAAM,qBAAqB,CAAC;AACnF,OAAO,EAAE,WAAW,EAAE,MAAM,4CAA4C,CAAC;AAGzE,MAAM,OAAO,mBAAoB,SAAQ,oBAAoB;IAClD,IAAI,GAAG,eAAe,CAAC;IAEjC,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,IAAY;QAC5C,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEzE,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAClG,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC;YACzB,OAAO;QACR,CAAC;QAED,MAAM,YAAY,CAAC,sCAAsC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACxE,MAAM,WAAW,CAAC,+BAA+B,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC;QAE9F,oEAAoE;QACpE,MAAM,YAAY,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAEpF,IAAI,YAAY,IAAI,4CAA4C,EAAE,CAAC;YAClE,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,sBAAsB,CAAC,aAAa,CAAC,GAAG,EAAE;gBACnF,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;aAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAElD,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACpF,IAAI,iBAAiB,GAAG,YAAY,EAAE,CAAC;gBACtC,OAAO;YACR,CAAC;QACF,CAAC;aAAM,CAAC;YACP,kIAAkI;YAClI,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,iBAAiB,GAAG,YAAY,EAAE,CAAC;gBACtC,OAAO;YACR,CAAC;QACF,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,SAAS,EAAE,EAAE,EAAE,CAAC;YACnB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;YAC1E,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;gBAC9B,KAAK,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;YAClG,CAAC;QACF,CAAC;IACF,CAAC;CACD","sourcesContent":["import { ServiceClassInternal, api } from '@rocket.chat/core-services';\nimport { Messages, MessageReads, Subscriptions } from '@rocket.chat/models';\n\nimport { MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS } from '../../lib/constants';\nimport { ReadReceipt } from '../../lib/message-read-receipt/ReadReceipt';\nimport type { IMessageReadsService } from '../../sdk/types/IMessageReadsService';\n\nexport class MessageReadsService extends ServiceClassInternal implements IMessageReadsService {\n\tprotected name = 'message-reads';\n\n\tasync readThread(userId: string, tmid: string): Promise<void> {\n\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });\n\t\tif (!threadMessage?.tlm) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait MessageReads.updateReadTimestampByUserIdAndThreadId(userId, tmid);\n\t\tawait ReadReceipt.storeThreadMessagesReadReceipts(tmid, userId, read?.ls || threadMessage.ts);\n\n\t\t// doesn't mark as read if not all room members have read the thread\n\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\n\t\tif (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t// for large rooms, mark as read if there are as many reads as room members to improve performance (instead of checking each read)\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadId(tmid);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n\t\tif (firstRead?.ls) {\n\t\t\tconst result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n\t\t\tif (result.modifiedCount > 0) {\n\t\t\t\tvoid api.broadcast('notify.messagesRead', { rid: threadMessage.rid, tmid, until: firstRead.ls });\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/local-services/message-reads/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/local-services/message-reads/service.ts","inputSourceMap":{"version":3,"file":"ee/server/local-services/message-reads/service.ts","sourceRoot":"","sources":["ee/server/local-services/message-reads/service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAE5E,OAAO,EAAE,4CAA4C,EAAE,MAAM,qBAAqB,CAAC;AACnF,OAAO,EAAE,WAAW,EAAE,MAAM,4CAA4C,CAAC;AAGzE,MAAM,OAAO,mBAAoB,SAAQ,oBAAoB;IAClD,IAAI,GAAG,eAAe,CAAC;IAEjC,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,IAAY;QAC5C,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAEzE,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAClG,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC;YACzB,OAAO;QACR,CAAC;QAED,MAAM,YAAY,CAAC,sCAAsC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACxE,MAAM,WAAW,CAAC,+BAA+B,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC;QAE9F,oEAAoE;QACpE,MAAM,YAAY,GAAG,MAAM,aAAa,CAAC,uBAAuB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAEpF,IAAI,YAAY,IAAI,4CAA4C,EAAE,CAAC;YAClE,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,sBAAsB,CAAC,aAAa,CAAC,GAAG,EAAE;gBACnF,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;aAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,OAAO,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAElD,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,uBAAuB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACpF,IAAI,iBAAiB,GAAG,YAAY,EAAE,CAAC;gBACtC,OAAO;YACR,CAAC;QACF,CAAC;aAAM,CAAC;YACP,kIAAkI;YAClI,MAAM,iBAAiB,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,iBAAiB,GAAG,YAAY,EAAE,CAAC;gBACtC,OAAO;YACR,CAAC;QACF,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,SAAS,EAAE,EAAE,EAAE,CAAC;YACnB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,CAAC;YAC1E,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;gBAC9B,KAAK,GAAG,CAAC,SAAS,CAAC,qBAAqB,EAAE,EAAE,GAAG,EAAE,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;YAClG,CAAC;QACF,CAAC;IACF,CAAC;CACD","sourcesContent":["import { ServiceClassInternal, api } from '@rocket.chat/core-services';\nimport { Messages, MessageReads, Subscriptions } from '@rocket.chat/models';\n\nimport { MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS } from '../../lib/constants';\nimport { ReadReceipt } from '../../lib/message-read-receipt/ReadReceipt';\nimport type { IMessageReadsService } from '../../sdk/types/IMessageReadsService';\n\nexport class MessageReadsService extends ServiceClassInternal implements IMessageReadsService {\n\tprotected name = 'message-reads';\n\n\tasync readThread(userId: string, tmid: string): Promise<void> {\n\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });\n\t\tif (!threadMessage?.tlm) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait MessageReads.updateReadTimestampByUserIdAndThreadId(userId, tmid);\n\t\tawait ReadReceipt.storeThreadMessagesReadReceipts(tmid, userId, read?.ls || threadMessage.ts);\n\n\t\t// doesn't mark as read if not all room members have read the thread\n\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\n\t\tif (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t// for large rooms, mark as read if there are as many reads as room members to improve performance (instead of checking each read)\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadId(tmid);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n\t\tif (firstRead?.ls) {\n\t\t\tconst result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n\t\t\tif (result.modifiedCount > 0) {\n\t\t\t\tvoid api.broadcast('notify.messagesRead', { rid: threadMessage.rid, tmid, until: firstRead.ls });\n\t\t\t}\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      MessageReadsService: () => MessageReadsService\n    });\n    let ServiceClassInternal, api;\n    module.link(\"@rocket.chat/core-services\", {\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      },\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Messages, MessageReads, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      MessageReads(v) {\n        MessageReads = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS;\n    module.link(\"../../lib/constants\", {\n      MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS(v) {\n        MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS = v;\n      }\n    }, 2);\n    let ReadReceipt;\n    module.link(\"../../lib/message-read-receipt/ReadReceipt\", {\n      ReadReceipt(v) {\n        ReadReceipt = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MessageReadsService extends ServiceClassInternal {\n      constructor() {\n        super(...arguments);\n        this.name = 'message-reads';\n      }\n      async readThread(userId, tmid) {\n        const read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n        const threadMessage = await Messages.findOneById(tmid, {\n          projection: {\n            ts: 1,\n            tlm: 1,\n            rid: 1\n          }\n        });\n        if (!(threadMessage !== null && threadMessage !== void 0 && threadMessage.tlm)) {\n          return;\n        }\n        await MessageReads.updateReadTimestampByUserIdAndThreadId(userId, tmid);\n        await ReadReceipt.storeThreadMessagesReadReceipts(tmid, userId, (read === null || read === void 0 ? void 0 : read.ls) || threadMessage.ts);\n        // doesn't mark as read if not all room members have read the thread\n        const membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n        if (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n          const subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n            projection: {\n              'u._id': 1\n            }\n          }).toArray();\n          const members = subscriptions.map(s => s.u._id);\n          const totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n          if (totalMessageReads < membersCount) {\n            return;\n          }\n        } else {\n          // for large rooms, mark as read if there are as many reads as room members to improve performance (instead of checking each read)\n          const totalMessageReads = await MessageReads.countByThreadId(tmid);\n          if (totalMessageReads < membersCount) {\n            return;\n          }\n        }\n        const firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n        if (firstRead !== null && firstRead !== void 0 && firstRead.ls) {\n          const result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n          if (result.modifiedCount > 0) {\n            void api.broadcast('notify.messagesRead', {\n              rid: threadMessage.rid,\n              tmid,\n              until: firstRead.ls\n            });\n          }\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","MessageReadsService","ServiceClassInternal","api","link","v","Messages","MessageReads","Subscriptions","MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS","ReadReceipt","__reifyWaitForDeps__","constructor","arguments","name","readThread","userId","tmid","read","findOneByUserIdAndThreadId","threadMessage","findOneById","projection","ts","tlm","rid","updateReadTimestampByUserIdAndThreadId","storeThreadMessagesReadReceipts","ls","membersCount","countUnarchivedByRoomId","subscriptions","findUnarchivedByRoomId","toArray","members","map","s","u","_id","totalMessageReads","countByThreadAndUserIds","countByThreadId","firstRead","getMinimumLastSeenByThreadId","result","setThreadMessagesAsRead","modifiedCount","broadcast","until","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/local-services/message-reads/service.ts"],"sourcesContent":["import { ServiceClassInternal, api } from '@rocket.chat/core-services';\nimport { Messages, MessageReads, Subscriptions } from '@rocket.chat/models';\n\nimport { MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS } from '../../lib/constants';\nimport { ReadReceipt } from '../../lib/message-read-receipt/ReadReceipt';\nimport type { IMessageReadsService } from '../../sdk/types/IMessageReadsService';\n\nexport class MessageReadsService extends ServiceClassInternal implements IMessageReadsService {\n\tprotected name = 'message-reads';\n\n\tasync readThread(userId: string, tmid: string): Promise<void> {\n\t\tconst read = await MessageReads.findOneByUserIdAndThreadId(userId, tmid);\n\n\t\tconst threadMessage = await Messages.findOneById(tmid, { projection: { ts: 1, tlm: 1, rid: 1 } });\n\t\tif (!threadMessage?.tlm) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait MessageReads.updateReadTimestampByUserIdAndThreadId(userId, tmid);\n\t\tawait ReadReceipt.storeThreadMessagesReadReceipts(tmid, userId, read?.ls || threadMessage.ts);\n\n\t\t// doesn't mark as read if not all room members have read the thread\n\t\tconst membersCount = await Subscriptions.countUnarchivedByRoomId(threadMessage.rid);\n\n\t\tif (membersCount <= MAX_ROOM_SIZE_CHECK_INDIVIDUAL_READ_RECEIPTS) {\n\t\t\tconst subscriptions = await Subscriptions.findUnarchivedByRoomId(threadMessage.rid, {\n\t\t\t\tprojection: { 'u._id': 1 },\n\t\t\t}).toArray();\n\t\t\tconst members = subscriptions.map((s) => s.u._id);\n\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadAndUserIds(tmid, members);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t// for large rooms, mark as read if there are as many reads as room members to improve performance (instead of checking each read)\n\t\t\tconst totalMessageReads = await MessageReads.countByThreadId(tmid);\n\t\t\tif (totalMessageReads < membersCount) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst firstRead = await MessageReads.getMinimumLastSeenByThreadId(tmid);\n\t\tif (firstRead?.ls) {\n\t\t\tconst result = await Messages.setThreadMessagesAsRead(tmid, firstRead.ls);\n\t\t\tif (result.modifiedCount > 0) {\n\t\t\t\tvoid api.broadcast('notify.messagesRead', { rid: threadMessage.rid, tmid, until: firstRead.ls });\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"19a47fb261ee48b9c079d9cbab7b7baf274087cb"}
