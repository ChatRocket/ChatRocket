{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for continuously monitoring the activity happening\n * on the asterisk. It is suggested that this class should be used only\n * for events which needs a continuous monitoring. For other types of action based events\n * such as queuesummary etc, Other classes should be used.\n *\n *\n * @remarks :\n * To begin with, we need 2 events tobe monitored\n * QueueCallerJoin.count would give us the total elements in the queue.\n * AgentCalled.queue and AgentCalled.destcalleridnum to signify which agent is currently ringing to serve the call.\n * (AgentConnect.calleridnum, connectedlinenum, queue) to signify which agent ansered the call from which queue.\n *\n */\nimport { api } from '@rocket.chat/core-services';\nimport type {\n\tIPbxEvent,\n\tIQueueDetails,\n\tIAgentCalledEvent,\n\tIAgentConnectEvent,\n\tIEventBase,\n\tIQueueCallerAbandon,\n\tIQueueCallerJoinEvent,\n\tIQueueEvent,\n\tIQueueMemberAdded,\n\tIQueueMemberRemoved,\n\tICallOnHold,\n\tICallUnHold,\n\tIContactStatus,\n\tICallHangup,\n\tIDialingEvent,\n} from '@rocket.chat/core-typings';\nimport {\n\tisIDialingEvent,\n\tisIAgentCalledEvent,\n\tisIAgentConnectEvent,\n\tisIQueueCallerAbandonEvent,\n\tisIQueueCallerJoinEvent,\n\tisIQueueMemberAddedEvent,\n\tisIQueueMemberRemovedEvent,\n\tisICallOnHoldEvent,\n\tisICallUnHoldEvent,\n\tisIContactStatusEvent,\n\tisICallHangupEvent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Users, PbxEvents } from '@rocket.chat/models';\nimport type { Db } from 'mongodb';\n\nimport { notifyOnPbxEventChangedById } from '../../../../../../app/lib/server/lib/notifyListener';\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { ACDQueue } from './ACDQueue';\nimport { CallbackContext } from './CallbackContext';\n\nexport class ContinuousMonitor extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis._type = CommandType.AMI;\n\t\tthis.logger = new Logger('ContinuousMonitor');\n\t}\n\n\tprivate async getMembersFromQueueDetails(queueDetails: IQueueDetails): Promise<string[]> {\n\t\tconst { members } = queueDetails;\n\t\tif (!members) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst extensionList = members.map((m) => {\n\t\t\treturn m.name.toLowerCase().replace('pjsip/', '');\n\t\t});\n\n\t\tthis.logger.debug(`Finding members of queue ${queueDetails.name} between users`);\n\t\treturn (await Users.findByExtensions(extensionList).toArray()).map((u) => u._id);\n\t}\n\n\t// Todo : Move this out of connector. This class is a busy class.\n\t// Not sure if we should do it here.\n\tprivate async getQueueDetails(queueName: string): Promise<IQueueDetails> {\n\t\tconst queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n\t\tqueue.connection = this.connection;\n\t\tconst queueDetails = await queue.executeCommand({ queueName });\n\t\treturn queueDetails.result as unknown as IQueueDetails;\n\t}\n\n\tasync processQueueMembershipChange(event: IQueueMemberAdded | IQueueMemberRemoved): Promise<void> {\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst { queue } = event;\n\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst { calls } = queueDetails;\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\t\tif (user) {\n\t\t\tif (isIQueueMemberAddedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { data: { queue, queuedCalls: calls }, event: 'queue-member-added' });\n\t\t\t} else if (isIQueueMemberRemovedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { event: 'queue-member-removed', data: { queue, queuedCalls: calls } });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processAgentCalled(event: IAgentCalledEvent): Promise<void> {\n\t\tthis.logger.debug(`Got new event queue.agentcalled at ${event.queue}`);\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthis.logger.debug(`Cannot broadcast queue.agentcalled. No agent found at extension ${extension}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.debug(`Broadcasting event queue.agentcalled to ${user._id}@${event.queue} on extension ${extension}`);\n\t\tconst callerId = {\n\t\t\tid: event.calleridnum,\n\t\t\tname: event.calleridname,\n\t\t};\n\n\t\tvoid api.broadcast('voip.events', user._id, { event: 'agent-called', data: { callerId, queue: event.queue } });\n\t\t// api.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n\t}\n\n\tasync storePbxEvent(event: IQueueEvent | IContactStatus, eventName: string): Promise<void> {\n\t\ttry {\n\t\t\tconst now = new Date();\n\t\t\t// store pbx event\n\t\t\tif (isIContactStatusEvent(event)) {\n\t\t\t\t// This event represents when an agent drops a call because of disconnection\n\t\t\t\t// May happen for any reason outside of our control, like closing the browswer\n\t\t\t\t// Or network/power issues\n\t\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\t\tevent: eventName,\n\t\t\t\t\tuniqueId: `${eventName}-${event.contactstatus}-${now.getTime()}`,\n\t\t\t\t\tts: now,\n\t\t\t\t\tagentExtension: event.aor,\n\t\t\t\t});\n\n\t\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet uniqueId = `${eventName}-${event.calleridnum}-`;\n\t\t\tif (event.queue) {\n\t\t\t\tuniqueId += `${event.queue}-${event.uniqueid}`;\n\t\t\t} else {\n\t\t\t\tuniqueId += `${event.channel}-${event.destchannel}-${event.uniqueid}`;\n\t\t\t}\n\t\t\t// NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n\t\t\t// However, since we're not using it for anything special, it's a \"fair use\"\n\t\t\t// uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId,\n\t\t\t\tevent: eventName,\n\t\t\t\tts: now,\n\t\t\t\tphone: event.calleridnum,\n\t\t\t\tqueue: event.queue,\n\t\t\t\tholdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event?.connectedlinenum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\tthis.logger.debug('Event was handled by other instance');\n\t\t}\n\t}\n\n\tasync processAndBroadcastEventToAllQueueMembers(\n\t\tevent: IQueueCallerJoinEvent | IQueueCallerAbandon | IAgentConnectEvent | ICallHangup,\n\t): Promise<void> {\n\t\tthis.logger.debug(`Broadcasting to memebers, event =  ${event.event}`);\n\t\tconst queueDetails = await this.getQueueDetails(event.queue);\n\t\tconst members = await this.getMembersFromQueueDetails(queueDetails);\n\t\tswitch (event.event) {\n\t\t\tcase 'QueueCallerJoin': {\n\t\t\t\tconst callerId = {\n\t\t\t\t\tid: event.calleridnum,\n\t\t\t\t\tname: event.calleridname,\n\t\t\t\t};\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerJoin');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callerjoined to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'caller-joined',\n\t\t\t\t\t\tdata: { callerId, queue: event.queue, queuedCalls: event.count },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'QueueCallerAbandon': {\n\t\t\t\tconst { calls } = queueDetails;\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerAbandon');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callabandoned to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, { event: 'call-abandoned', data: { queue: event.queue, queuedCallAfterAbandon: calls } });\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'AgentConnect': {\n\t\t\t\tconst { calls } = queueDetails;\n\n\t\t\t\tawait this.storePbxEvent(event, 'AgentConnect');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.agentconnected to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\t// event.holdtime signifies wait time in the queue.\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'agent-connected',\n\t\t\t\t\t\tdata: { queue: event.queue, queuedCalls: calls, waitTimeInQueue: event.holdtime },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`Cant process ${event}. No handlers associated with it`);\n\t\t}\n\t}\n\n\tasync processHoldUnholdEvents(event: ICallOnHold | ICallUnHold): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processHangupEvents(event: ICallHangup): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processContactStatusEvent(event: IContactStatus): Promise<void> {\n\t\tif (event.contactstatus === 'Removed') {\n\t\t\t// Room closing logic should be added here for the aor\n\t\t\t// aor signifies address of record, which should be used for\n\t\t\t// fetching the room for which serverBy = event.aor\n\t\t\treturn this.storePbxEvent(event, event.event);\n\t\t}\n\t}\n\n\tasync isCallBeginEventPresent(pbxEvent: IPbxEvent | null, uniqueId: string): Promise<boolean> {\n\t\tif (pbxEvent && pbxEvent.callUniqueId === uniqueId) {\n\t\t\tswitch (pbxEvent.event.toLowerCase()) {\n\t\t\t\tcase 'queuecallerjoin':\n\t\t\t\tcase 'agentconnect':\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync manageDialEvents(event: IDialingEvent): Promise<void> {\n\t\tconst pbxEvent = await PbxEvents.findOneByUniqueId(event.uniqueid);\n\t\t/**\n\t\t * Dial events currently are used for detecting the outbound call\n\t\t * This will later be used for matching call events.\n\t\t *\n\t\t * Dial events are generated even for the queued calls but queue events\n\t\t * are not generated for direct calls (either outbound or directly to an agent).\n\t\t *\n\t\t * isCallBeginEventPresent checks if the call was off the queue. If it was,\n\t\t * we would not try add the dial-event to the pbx database.\n\t\t */\n\t\tif (await this.isCallBeginEventPresent(pbxEvent, event.uniqueid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!['answer', 'ringing'].includes(event.dialstatus.toLowerCase())) {\n\t\t\tthis.logger.warn(`Received unexpected event ${event.event} dialstatus =  ${event.dialstatus}`);\n\t\t\treturn;\n\t\t}\n\t\t/** This function adds necessary data to\n\t\t * pbx_events database for outbound calls.\n\t\t *\n\t\t * event?.connectedlinenum is the extension/phone number that is being called\n\t\t * and event.calleridnum is the extension that is initiating a call.\n\t\t */\n\t\ttry {\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId: `${event.event}-${event.calleridnum}-${event.channel}-${event.destchannel}-${event.uniqueid}`,\n\t\t\t\tevent: event.event,\n\t\t\t\tts: new Date(),\n\t\t\t\tphone: event?.connectedlinenum.replace(/\\D/g, ''), // Remove all non-numeric characters\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event.calleridnum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\t// This could mean we received a duplicate event\n\t\t\t// This is quite common since DialEnd event happens \"multiple times\" at the end of the call\n\t\t\t// We receive one for DialEnd in progress and one for DialEnd finished.\n\t\t\tthis.logger.warn(`Duplicate event ${event.event} received for ${event.uniqueid}`);\n\t\t\tthis.logger.debug(event);\n\t\t}\n\t}\n\n\tasync onEvent(event: IEventBase): Promise<void> {\n\t\tthis.logger.debug(`Received event ${event.event}`);\n\t\tif (isIDialingEvent(event)) {\n\t\t\treturn this.manageDialEvents(event);\n\t\t}\n\t\t// Event received when a queue member is notified of a call in queue\n\t\tif (isIAgentCalledEvent(event)) {\n\t\t\treturn this.processAgentCalled(event);\n\t\t}\n\n\t\t// Event received when a call joins queue\n\t\tif (isIQueueCallerJoinEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIAgentConnectEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueCallerAbandonEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n\t\t\treturn this.processQueueMembershipChange(event);\n\t\t}\n\n\t\tif (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n\t\t\treturn this.processHoldUnholdEvents(event);\n\t\t}\n\n\t\tif (isIContactStatusEvent(event)) {\n\t\t\treturn this.processContactStatusEvent(event);\n\t\t}\n\n\t\tif (isICallHangupEvent(event)) {\n\t\t\treturn this.processHangupEvents(event);\n\t\t}\n\n\t\t// Asterisk sends a metric ton of events, some may be useful but others doesn't\n\t\t// We need to check which ones we want to use in future, but until that moment, this log\n\t\t// Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\t\tthis.logger.debug(`Cannot handle event ${event.event}`);\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tthis.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialend', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialstate', new CallbackContext(this.onEvent.bind(this), this));\n\t}\n\n\tresetEventHandlers(): void {\n\t\tthis.connection.off('queuecallerjoin', this);\n\t\tthis.connection.off('agentcalled', this);\n\t\tthis.connection.off('agentconnect', this);\n\t\tthis.connection.off('queuememberadded', this);\n\t\tthis.connection.off('queuememberremoved', this);\n\t\tthis.connection.off('queuecallerabandon', this);\n\t\tthis.connection.off('hold', this);\n\t\tthis.connection.off('unhold', this);\n\t\tthis.connection.off('contactstatus', this);\n\t\tthis.connection.off('hangup', this);\n\t\tthis.connection.off('dialend', this);\n\t\tthis.connection.off('dialstate', this);\n\t}\n\n\tinitMonitor(_data: any): boolean {\n\t\t/**\n\t\t * See the implementation of |call| function in CallbackContext to understand\n\t\t * why we are using regex here.\n\t\t */\n\t\tthis.actionid = '.*';\n\t\tthis.setupEventHandlers();\n\t\treturn true;\n\t}\n\n\tcleanMonitor(): boolean {\n\t\tthis.resetEventHandlers();\n\t\treturn true;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts","sourceRoot":"","sources":["server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is responsible for continuously monitoring the activity happening\n * on the asterisk. It is suggested that this class should be used only\n * for events which needs a continuous monitoring. For other types of action based events\n * such as queuesummary etc, Other classes should be used.\n *\n *\n * @remarks :\n * To begin with, we need 2 events tobe monitored\n * QueueCallerJoin.count would give us the total elements in the queue.\n * AgentCalled.queue and AgentCalled.destcalleridnum to signify which agent is currently ringing to serve the call.\n * (AgentConnect.calleridnum, connectedlinenum, queue) to signify which agent ansered the call from which queue.\n *\n */\nimport { api } from '@rocket.chat/core-services';\nimport type {\n\tIPbxEvent,\n\tIQueueDetails,\n\tIAgentCalledEvent,\n\tIAgentConnectEvent,\n\tIEventBase,\n\tIQueueCallerAbandon,\n\tIQueueCallerJoinEvent,\n\tIQueueEvent,\n\tIQueueMemberAdded,\n\tIQueueMemberRemoved,\n\tICallOnHold,\n\tICallUnHold,\n\tIContactStatus,\n\tICallHangup,\n\tIDialingEvent,\n} from '@rocket.chat/core-typings';\nimport {\n\tisIDialingEvent,\n\tisIAgentCalledEvent,\n\tisIAgentConnectEvent,\n\tisIQueueCallerAbandonEvent,\n\tisIQueueCallerJoinEvent,\n\tisIQueueMemberAddedEvent,\n\tisIQueueMemberRemovedEvent,\n\tisICallOnHoldEvent,\n\tisICallUnHoldEvent,\n\tisIContactStatusEvent,\n\tisICallHangupEvent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Users, PbxEvents } from '@rocket.chat/models';\nimport type { Db } from 'mongodb';\n\nimport { notifyOnPbxEventChangedById } from '../../../../../../app/lib/server/lib/notifyListener';\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { ACDQueue } from './ACDQueue';\nimport { CallbackContext } from './CallbackContext';\n\nexport class ContinuousMonitor extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis._type = CommandType.AMI;\n\t\tthis.logger = new Logger('ContinuousMonitor');\n\t}\n\n\tprivate async getMembersFromQueueDetails(queueDetails: IQueueDetails): Promise<string[]> {\n\t\tconst { members } = queueDetails;\n\t\tif (!members) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst extensionList = members.map((m) => {\n\t\t\treturn m.name.toLowerCase().replace('pjsip/', '');\n\t\t});\n\n\t\tthis.logger.debug(`Finding members of queue ${queueDetails.name} between users`);\n\t\treturn (await Users.findByExtensions(extensionList).toArray()).map((u) => u._id);\n\t}\n\n\t// Todo : Move this out of connector. This class is a busy class.\n\t// Not sure if we should do it here.\n\tprivate async getQueueDetails(queueName: string): Promise<IQueueDetails> {\n\t\tconst queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n\t\tqueue.connection = this.connection;\n\t\tconst queueDetails = await queue.executeCommand({ queueName });\n\t\treturn queueDetails.result as unknown as IQueueDetails;\n\t}\n\n\tasync processQueueMembershipChange(event: IQueueMemberAdded | IQueueMemberRemoved): Promise<void> {\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst { queue } = event;\n\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst { calls } = queueDetails;\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\t\tif (user) {\n\t\t\tif (isIQueueMemberAddedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { data: { queue, queuedCalls: calls }, event: 'queue-member-added' });\n\t\t\t} else if (isIQueueMemberRemovedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { event: 'queue-member-removed', data: { queue, queuedCalls: calls } });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processAgentCalled(event: IAgentCalledEvent): Promise<void> {\n\t\tthis.logger.debug(`Got new event queue.agentcalled at ${event.queue}`);\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthis.logger.debug(`Cannot broadcast queue.agentcalled. No agent found at extension ${extension}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.debug(`Broadcasting event queue.agentcalled to ${user._id}@${event.queue} on extension ${extension}`);\n\t\tconst callerId = {\n\t\t\tid: event.calleridnum,\n\t\t\tname: event.calleridname,\n\t\t};\n\n\t\tvoid api.broadcast('voip.events', user._id, { event: 'agent-called', data: { callerId, queue: event.queue } });\n\t\t// api.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n\t}\n\n\tasync storePbxEvent(event: IQueueEvent | IContactStatus, eventName: string): Promise<void> {\n\t\ttry {\n\t\t\tconst now = new Date();\n\t\t\t// store pbx event\n\t\t\tif (isIContactStatusEvent(event)) {\n\t\t\t\t// This event represents when an agent drops a call because of disconnection\n\t\t\t\t// May happen for any reason outside of our control, like closing the browswer\n\t\t\t\t// Or network/power issues\n\t\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\t\tevent: eventName,\n\t\t\t\t\tuniqueId: `${eventName}-${event.contactstatus}-${now.getTime()}`,\n\t\t\t\t\tts: now,\n\t\t\t\t\tagentExtension: event.aor,\n\t\t\t\t});\n\n\t\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet uniqueId = `${eventName}-${event.calleridnum}-`;\n\t\t\tif (event.queue) {\n\t\t\t\tuniqueId += `${event.queue}-${event.uniqueid}`;\n\t\t\t} else {\n\t\t\t\tuniqueId += `${event.channel}-${event.destchannel}-${event.uniqueid}`;\n\t\t\t}\n\t\t\t// NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n\t\t\t// However, since we're not using it for anything special, it's a \"fair use\"\n\t\t\t// uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId,\n\t\t\t\tevent: eventName,\n\t\t\t\tts: now,\n\t\t\t\tphone: event.calleridnum,\n\t\t\t\tqueue: event.queue,\n\t\t\t\tholdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event?.connectedlinenum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\tthis.logger.debug('Event was handled by other instance');\n\t\t}\n\t}\n\n\tasync processAndBroadcastEventToAllQueueMembers(\n\t\tevent: IQueueCallerJoinEvent | IQueueCallerAbandon | IAgentConnectEvent | ICallHangup,\n\t): Promise<void> {\n\t\tthis.logger.debug(`Broadcasting to memebers, event =  ${event.event}`);\n\t\tconst queueDetails = await this.getQueueDetails(event.queue);\n\t\tconst members = await this.getMembersFromQueueDetails(queueDetails);\n\t\tswitch (event.event) {\n\t\t\tcase 'QueueCallerJoin': {\n\t\t\t\tconst callerId = {\n\t\t\t\t\tid: event.calleridnum,\n\t\t\t\t\tname: event.calleridname,\n\t\t\t\t};\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerJoin');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callerjoined to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'caller-joined',\n\t\t\t\t\t\tdata: { callerId, queue: event.queue, queuedCalls: event.count },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'QueueCallerAbandon': {\n\t\t\t\tconst { calls } = queueDetails;\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerAbandon');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callabandoned to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, { event: 'call-abandoned', data: { queue: event.queue, queuedCallAfterAbandon: calls } });\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'AgentConnect': {\n\t\t\t\tconst { calls } = queueDetails;\n\n\t\t\t\tawait this.storePbxEvent(event, 'AgentConnect');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.agentconnected to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\t// event.holdtime signifies wait time in the queue.\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'agent-connected',\n\t\t\t\t\t\tdata: { queue: event.queue, queuedCalls: calls, waitTimeInQueue: event.holdtime },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`Cant process ${event}. No handlers associated with it`);\n\t\t}\n\t}\n\n\tasync processHoldUnholdEvents(event: ICallOnHold | ICallUnHold): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processHangupEvents(event: ICallHangup): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processContactStatusEvent(event: IContactStatus): Promise<void> {\n\t\tif (event.contactstatus === 'Removed') {\n\t\t\t// Room closing logic should be added here for the aor\n\t\t\t// aor signifies address of record, which should be used for\n\t\t\t// fetching the room for which serverBy = event.aor\n\t\t\treturn this.storePbxEvent(event, event.event);\n\t\t}\n\t}\n\n\tasync isCallBeginEventPresent(pbxEvent: IPbxEvent | null, uniqueId: string): Promise<boolean> {\n\t\tif (pbxEvent && pbxEvent.callUniqueId === uniqueId) {\n\t\t\tswitch (pbxEvent.event.toLowerCase()) {\n\t\t\t\tcase 'queuecallerjoin':\n\t\t\t\tcase 'agentconnect':\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync manageDialEvents(event: IDialingEvent): Promise<void> {\n\t\tconst pbxEvent = await PbxEvents.findOneByUniqueId(event.uniqueid);\n\t\t/**\n\t\t * Dial events currently are used for detecting the outbound call\n\t\t * This will later be used for matching call events.\n\t\t *\n\t\t * Dial events are generated even for the queued calls but queue events\n\t\t * are not generated for direct calls (either outbound or directly to an agent).\n\t\t *\n\t\t * isCallBeginEventPresent checks if the call was off the queue. If it was,\n\t\t * we would not try add the dial-event to the pbx database.\n\t\t */\n\t\tif (await this.isCallBeginEventPresent(pbxEvent, event.uniqueid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!['answer', 'ringing'].includes(event.dialstatus.toLowerCase())) {\n\t\t\tthis.logger.warn(`Received unexpected event ${event.event} dialstatus =  ${event.dialstatus}`);\n\t\t\treturn;\n\t\t}\n\t\t/** This function adds necessary data to\n\t\t * pbx_events database for outbound calls.\n\t\t *\n\t\t * event?.connectedlinenum is the extension/phone number that is being called\n\t\t * and event.calleridnum is the extension that is initiating a call.\n\t\t */\n\t\ttry {\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId: `${event.event}-${event.calleridnum}-${event.channel}-${event.destchannel}-${event.uniqueid}`,\n\t\t\t\tevent: event.event,\n\t\t\t\tts: new Date(),\n\t\t\t\tphone: event?.connectedlinenum.replace(/\\D/g, ''), // Remove all non-numeric characters\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event.calleridnum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\t// This could mean we received a duplicate event\n\t\t\t// This is quite common since DialEnd event happens \"multiple times\" at the end of the call\n\t\t\t// We receive one for DialEnd in progress and one for DialEnd finished.\n\t\t\tthis.logger.warn(`Duplicate event ${event.event} received for ${event.uniqueid}`);\n\t\t\tthis.logger.debug(event);\n\t\t}\n\t}\n\n\tasync onEvent(event: IEventBase): Promise<void> {\n\t\tthis.logger.debug(`Received event ${event.event}`);\n\t\tif (isIDialingEvent(event)) {\n\t\t\treturn this.manageDialEvents(event);\n\t\t}\n\t\t// Event received when a queue member is notified of a call in queue\n\t\tif (isIAgentCalledEvent(event)) {\n\t\t\treturn this.processAgentCalled(event);\n\t\t}\n\n\t\t// Event received when a call joins queue\n\t\tif (isIQueueCallerJoinEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIAgentConnectEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueCallerAbandonEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n\t\t\treturn this.processQueueMembershipChange(event);\n\t\t}\n\n\t\tif (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n\t\t\treturn this.processHoldUnholdEvents(event);\n\t\t}\n\n\t\tif (isIContactStatusEvent(event)) {\n\t\t\treturn this.processContactStatusEvent(event);\n\t\t}\n\n\t\tif (isICallHangupEvent(event)) {\n\t\t\treturn this.processHangupEvents(event);\n\t\t}\n\n\t\t// Asterisk sends a metric ton of events, some may be useful but others doesn't\n\t\t// We need to check which ones we want to use in future, but until that moment, this log\n\t\t// Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\t\tthis.logger.debug(`Cannot handle event ${event.event}`);\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tthis.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialend', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialstate', new CallbackContext(this.onEvent.bind(this), this));\n\t}\n\n\tresetEventHandlers(): void {\n\t\tthis.connection.off('queuecallerjoin', this);\n\t\tthis.connection.off('agentcalled', this);\n\t\tthis.connection.off('agentconnect', this);\n\t\tthis.connection.off('queuememberadded', this);\n\t\tthis.connection.off('queuememberremoved', this);\n\t\tthis.connection.off('queuecallerabandon', this);\n\t\tthis.connection.off('hold', this);\n\t\tthis.connection.off('unhold', this);\n\t\tthis.connection.off('contactstatus', this);\n\t\tthis.connection.off('hangup', this);\n\t\tthis.connection.off('dialend', this);\n\t\tthis.connection.off('dialstate', this);\n\t}\n\n\tinitMonitor(_data: any): boolean {\n\t\t/**\n\t\t * See the implementation of |call| function in CallbackContext to understand\n\t\t * why we are using regex here.\n\t\t */\n\t\tthis.actionid = '.*';\n\t\tthis.setupEventHandlers();\n\t\treturn true;\n\t}\n\n\tcleanMonitor(): boolean {\n\t\tthis.resetEventHandlers();\n\t\treturn true;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      ContinuousMonitor: () => ContinuousMonitor\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let isIDialingEvent, isIAgentCalledEvent, isIAgentConnectEvent, isIQueueCallerAbandonEvent, isIQueueCallerJoinEvent, isIQueueMemberAddedEvent, isIQueueMemberRemovedEvent, isICallOnHoldEvent, isICallUnHoldEvent, isIContactStatusEvent, isICallHangupEvent;\n    module.link(\"@rocket.chat/core-typings\", {\n      isIDialingEvent(v) {\n        isIDialingEvent = v;\n      },\n      isIAgentCalledEvent(v) {\n        isIAgentCalledEvent = v;\n      },\n      isIAgentConnectEvent(v) {\n        isIAgentConnectEvent = v;\n      },\n      isIQueueCallerAbandonEvent(v) {\n        isIQueueCallerAbandonEvent = v;\n      },\n      isIQueueCallerJoinEvent(v) {\n        isIQueueCallerJoinEvent = v;\n      },\n      isIQueueMemberAddedEvent(v) {\n        isIQueueMemberAddedEvent = v;\n      },\n      isIQueueMemberRemovedEvent(v) {\n        isIQueueMemberRemovedEvent = v;\n      },\n      isICallOnHoldEvent(v) {\n        isICallOnHoldEvent = v;\n      },\n      isICallUnHoldEvent(v) {\n        isICallUnHoldEvent = v;\n      },\n      isIContactStatusEvent(v) {\n        isIContactStatusEvent = v;\n      },\n      isICallHangupEvent(v) {\n        isICallHangupEvent = v;\n      }\n    }, 1);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 2);\n    let Users, PbxEvents;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      PbxEvents(v) {\n        PbxEvents = v;\n      }\n    }, 3);\n    let notifyOnPbxEventChangedById;\n    module.link(\"../../../../../../app/lib/server/lib/notifyListener\", {\n      notifyOnPbxEventChangedById(v) {\n        notifyOnPbxEventChangedById = v;\n      }\n    }, 4);\n    let Command, CommandType;\n    module.link(\"../Command\", {\n      Command(v) {\n        Command = v;\n      },\n      CommandType(v) {\n        CommandType = v;\n      }\n    }, 5);\n    let Commands;\n    module.link(\"../Commands\", {\n      Commands(v) {\n        Commands = v;\n      }\n    }, 6);\n    let ACDQueue;\n    module.link(\"./ACDQueue\", {\n      ACDQueue(v) {\n        ACDQueue = v;\n      }\n    }, 7);\n    let CallbackContext;\n    module.link(\"./CallbackContext\", {\n      CallbackContext(v) {\n        CallbackContext = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ContinuousMonitor extends Command {\n      constructor(command, parametersNeeded, db) {\n        super(command, parametersNeeded, db);\n        this.logger = void 0;\n        this._type = CommandType.AMI;\n        this.logger = new Logger('ContinuousMonitor');\n      }\n      async getMembersFromQueueDetails(queueDetails) {\n        const {\n          members\n        } = queueDetails;\n        if (!members) {\n          return [];\n        }\n        const extensionList = members.map(m => {\n          return m.name.toLowerCase().replace('pjsip/', '');\n        });\n        this.logger.debug(\"Finding members of queue \".concat(queueDetails.name, \" between users\"));\n        return (await Users.findByExtensions(extensionList).toArray()).map(u => u._id);\n      }\n      // Todo : Move this out of connector. This class is a busy class.\n      // Not sure if we should do it here.\n      async getQueueDetails(queueName) {\n        const queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n        queue.connection = this.connection;\n        const queueDetails = await queue.executeCommand({\n          queueName\n        });\n        return queueDetails.result;\n      }\n      async processQueueMembershipChange(event) {\n        const extension = event.interface.toLowerCase().replace('pjsip/', '');\n        const {\n          queue\n        } = event;\n        const queueDetails = await this.getQueueDetails(queue);\n        const {\n          calls\n        } = queueDetails;\n        const user = await Users.findOneByExtension(extension, {\n          projection: {\n            _id: 1,\n            username: 1,\n            extension: 1\n          }\n        });\n        if (user) {\n          if (isIQueueMemberAddedEvent(event)) {\n            void api.broadcast(\"voip.events\", user._id, {\n              data: {\n                queue,\n                queuedCalls: calls\n              },\n              event: 'queue-member-added'\n            });\n          } else if (isIQueueMemberRemovedEvent(event)) {\n            void api.broadcast(\"voip.events\", user._id, {\n              event: 'queue-member-removed',\n              data: {\n                queue,\n                queuedCalls: calls\n              }\n            });\n          }\n        }\n      }\n      async processAgentCalled(event) {\n        this.logger.debug(\"Got new event queue.agentcalled at \".concat(event.queue));\n        const extension = event.interface.toLowerCase().replace('pjsip/', '');\n        const user = await Users.findOneByExtension(extension, {\n          projection: {\n            _id: 1,\n            username: 1,\n            extension: 1\n          }\n        });\n        if (!user) {\n          this.logger.debug(\"Cannot broadcast queue.agentcalled. No agent found at extension \".concat(extension));\n          return;\n        }\n        this.logger.debug(\"Broadcasting event queue.agentcalled to \".concat(user._id, \"@\").concat(event.queue, \" on extension \").concat(extension));\n        const callerId = {\n          id: event.calleridnum,\n          name: event.calleridname\n        };\n        void api.broadcast('voip.events', user._id, {\n          event: 'agent-called',\n          data: {\n            callerId,\n            queue: event.queue\n          }\n        });\n        // api.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n      }\n      async storePbxEvent(event, eventName) {\n        try {\n          const now = new Date();\n          // store pbx event\n          if (isIContactStatusEvent(event)) {\n            // This event represents when an agent drops a call because of disconnection\n            // May happen for any reason outside of our control, like closing the browswer\n            // Or network/power issues\n            const {\n              insertedId\n            } = await PbxEvents.insertOne({\n              event: eventName,\n              uniqueId: \"\".concat(eventName, \"-\").concat(event.contactstatus, \"-\").concat(now.getTime()),\n              ts: now,\n              agentExtension: event.aor\n            });\n            void notifyOnPbxEventChangedById(insertedId, 'inserted');\n            return;\n          }\n          let uniqueId = \"\".concat(eventName, \"-\").concat(event.calleridnum, \"-\");\n          if (event.queue) {\n            uniqueId += \"\".concat(event.queue, \"-\").concat(event.uniqueid);\n          } else {\n            uniqueId += \"\".concat(event.channel, \"-\").concat(event.destchannel, \"-\").concat(event.uniqueid);\n          }\n          // NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n          // However, since we're not using it for anything special, it's a \"fair use\"\n          // uniqueId => {server}/{epoch}.{id of channel associated with this call}\n          const {\n            insertedId\n          } = await PbxEvents.insertOne({\n            uniqueId,\n            event: eventName,\n            ts: now,\n            phone: event.calleridnum,\n            queue: event.queue,\n            holdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n            callUniqueId: event.uniqueid,\n            callUniqueIdFallback: event.linkedid,\n            agentExtension: event === null || event === void 0 ? void 0 : event.connectedlinenum\n          });\n          void notifyOnPbxEventChangedById(insertedId, 'inserted');\n        } catch (e) {\n          this.logger.debug('Event was handled by other instance');\n        }\n      }\n      async processAndBroadcastEventToAllQueueMembers(event) {\n        this.logger.debug(\"Broadcasting to memebers, event =  \".concat(event.event));\n        const queueDetails = await this.getQueueDetails(event.queue);\n        const members = await this.getMembersFromQueueDetails(queueDetails);\n        switch (event.event) {\n          case 'QueueCallerJoin':\n            {\n              const callerId = {\n                id: event.calleridnum,\n                name: event.calleridname\n              };\n              await this.storePbxEvent(event, 'QueueCallerJoin');\n              this.logger.debug(\"Broadcasting event queue.callerjoined to \".concat(members.length, \" agents on queue \").concat(event.queue));\n              members.forEach(m => {\n                void api.broadcast('voip.events', m, {\n                  event: 'caller-joined',\n                  data: {\n                    callerId,\n                    queue: event.queue,\n                    queuedCalls: event.count\n                  }\n                });\n              });\n              break;\n            }\n          case 'QueueCallerAbandon':\n            {\n              const {\n                calls\n              } = queueDetails;\n              await this.storePbxEvent(event, 'QueueCallerAbandon');\n              this.logger.debug(\"Broadcasting event queue.callabandoned to \".concat(members.length, \" agents on queue \").concat(event.queue));\n              members.forEach(m => {\n                void api.broadcast('voip.events', m, {\n                  event: 'call-abandoned',\n                  data: {\n                    queue: event.queue,\n                    queuedCallAfterAbandon: calls\n                  }\n                });\n              });\n              break;\n            }\n          case 'AgentConnect':\n            {\n              const {\n                calls\n              } = queueDetails;\n              await this.storePbxEvent(event, 'AgentConnect');\n              this.logger.debug(\"Broadcasting event queue.agentconnected to \".concat(members.length, \" agents on queue \").concat(event.queue));\n              members.forEach(m => {\n                // event.holdtime signifies wait time in the queue.\n                void api.broadcast('voip.events', m, {\n                  event: 'agent-connected',\n                  data: {\n                    queue: event.queue,\n                    queuedCalls: calls,\n                    waitTimeInQueue: event.holdtime\n                  }\n                });\n              });\n              break;\n            }\n          default:\n            this.logger.error(\"Cant process \".concat(event, \". No handlers associated with it\"));\n        }\n      }\n      async processHoldUnholdEvents(event) {\n        return this.storePbxEvent(event, event.event);\n      }\n      async processHangupEvents(event) {\n        return this.storePbxEvent(event, event.event);\n      }\n      async processContactStatusEvent(event) {\n        if (event.contactstatus === 'Removed') {\n          // Room closing logic should be added here for the aor\n          // aor signifies address of record, which should be used for\n          // fetching the room for which serverBy = event.aor\n          return this.storePbxEvent(event, event.event);\n        }\n      }\n      async isCallBeginEventPresent(pbxEvent, uniqueId) {\n        if (pbxEvent && pbxEvent.callUniqueId === uniqueId) {\n          switch (pbxEvent.event.toLowerCase()) {\n            case 'queuecallerjoin':\n            case 'agentconnect':\n              return true;\n            default:\n              return false;\n          }\n        }\n        return false;\n      }\n      async manageDialEvents(event) {\n        const pbxEvent = await PbxEvents.findOneByUniqueId(event.uniqueid);\n        /**\n         * Dial events currently are used for detecting the outbound call\n         * This will later be used for matching call events.\n         *\n         * Dial events are generated even for the queued calls but queue events\n         * are not generated for direct calls (either outbound or directly to an agent).\n         *\n         * isCallBeginEventPresent checks if the call was off the queue. If it was,\n         * we would not try add the dial-event to the pbx database.\n         */\n        if (await this.isCallBeginEventPresent(pbxEvent, event.uniqueid)) {\n          return;\n        }\n        if (!['answer', 'ringing'].includes(event.dialstatus.toLowerCase())) {\n          this.logger.warn(\"Received unexpected event \".concat(event.event, \" dialstatus =  \").concat(event.dialstatus));\n          return;\n        }\n        /** This function adds necessary data to\n         * pbx_events database for outbound calls.\n         *\n         * event?.connectedlinenum is the extension/phone number that is being called\n         * and event.calleridnum is the extension that is initiating a call.\n         */\n        try {\n          const {\n            insertedId\n          } = await PbxEvents.insertOne({\n            uniqueId: \"\".concat(event.event, \"-\").concat(event.calleridnum, \"-\").concat(event.channel, \"-\").concat(event.destchannel, \"-\").concat(event.uniqueid),\n            event: event.event,\n            ts: new Date(),\n            phone: event === null || event === void 0 ? void 0 : event.connectedlinenum.replace(/\\D/g, ''),\n            // Remove all non-numeric characters\n            callUniqueId: event.uniqueid,\n            callUniqueIdFallback: event.linkedid,\n            agentExtension: event.calleridnum\n          });\n          void notifyOnPbxEventChangedById(insertedId, 'inserted');\n        } catch (e) {\n          // This could mean we received a duplicate event\n          // This is quite common since DialEnd event happens \"multiple times\" at the end of the call\n          // We receive one for DialEnd in progress and one for DialEnd finished.\n          this.logger.warn(\"Duplicate event \".concat(event.event, \" received for \").concat(event.uniqueid));\n          this.logger.debug(event);\n        }\n      }\n      async onEvent(event) {\n        this.logger.debug(\"Received event \".concat(event.event));\n        if (isIDialingEvent(event)) {\n          return this.manageDialEvents(event);\n        }\n        // Event received when a queue member is notified of a call in queue\n        if (isIAgentCalledEvent(event)) {\n          return this.processAgentCalled(event);\n        }\n        // Event received when a call joins queue\n        if (isIQueueCallerJoinEvent(event)) {\n          return this.processAndBroadcastEventToAllQueueMembers(event);\n        }\n        if (isIAgentConnectEvent(event)) {\n          return this.processAndBroadcastEventToAllQueueMembers(event);\n        }\n        if (isIQueueCallerAbandonEvent(event)) {\n          return this.processAndBroadcastEventToAllQueueMembers(event);\n        }\n        if (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n          return this.processQueueMembershipChange(event);\n        }\n        if (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n          return this.processHoldUnholdEvents(event);\n        }\n        if (isIContactStatusEvent(event)) {\n          return this.processContactStatusEvent(event);\n        }\n        if (isICallHangupEvent(event)) {\n          return this.processHangupEvents(event);\n        }\n        // Asterisk sends a metric ton of events, some may be useful but others doesn't\n        // We need to check which ones we want to use in future, but until that moment, this log\n        // Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n        this.logger.debug(\"Cannot handle event \".concat(event.event));\n      }\n      setupEventHandlers() {\n        // Setup necessary command event handlers based on the command\n        this.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('dialend', new CallbackContext(this.onEvent.bind(this), this));\n        this.connection.on('dialstate', new CallbackContext(this.onEvent.bind(this), this));\n      }\n      resetEventHandlers() {\n        this.connection.off('queuecallerjoin', this);\n        this.connection.off('agentcalled', this);\n        this.connection.off('agentconnect', this);\n        this.connection.off('queuememberadded', this);\n        this.connection.off('queuememberremoved', this);\n        this.connection.off('queuecallerabandon', this);\n        this.connection.off('hold', this);\n        this.connection.off('unhold', this);\n        this.connection.off('contactstatus', this);\n        this.connection.off('hangup', this);\n        this.connection.off('dialend', this);\n        this.connection.off('dialstate', this);\n      }\n      initMonitor(_data) {\n        /**\n         * See the implementation of |call| function in CallbackContext to understand\n         * why we are using regex here.\n         */\n        this.actionid = '.*';\n        this.setupEventHandlers();\n        return true;\n      }\n      cleanMonitor() {\n        this.resetEventHandlers();\n        return true;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","ContinuousMonitor","api","link","v","isIDialingEvent","isIAgentCalledEvent","isIAgentConnectEvent","isIQueueCallerAbandonEvent","isIQueueCallerJoinEvent","isIQueueMemberAddedEvent","isIQueueMemberRemovedEvent","isICallOnHoldEvent","isICallUnHoldEvent","isIContactStatusEvent","isICallHangupEvent","Logger","Users","PbxEvents","notifyOnPbxEventChangedById","Command","CommandType","Commands","ACDQueue","CallbackContext","__reifyWaitForDeps__","constructor","command","parametersNeeded","db","logger","_type","AMI","getMembersFromQueueDetails","queueDetails","members","extensionList","map","m","name","toLowerCase","replace","debug","concat","findByExtensions","toArray","u","_id","getQueueDetails","queueName","queue","queue_details","toString","connection","executeCommand","result","processQueueMembershipChange","event","extension","interface","calls","user","findOneByExtension","projection","username","broadcast","data","queuedCalls","processAgentCalled","callerId","id","calleridnum","calleridname","storePbxEvent","eventName","now","Date","insertedId","insertOne","uniqueId","contactstatus","getTime","ts","agentExtension","aor","uniqueid","channel","destchannel","phone","holdTime","holdtime","callUniqueId","callUniqueIdFallback","linkedid","connectedlinenum","e","processAndBroadcastEventToAllQueueMembers","length","forEach","count","queuedCallAfterAbandon","waitTimeInQueue","error","processHoldUnholdEvents","processHangupEvents","processContactStatusEvent","isCallBeginEventPresent","pbxEvent","manageDialEvents","findOneByUniqueId","includes","dialstatus","warn","onEvent","setupEventHandlers","on","bind","resetEventHandlers","off","initMonitor","_data","actionid","cleanMonitor","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/voip-asterisk/connector/asterisk/ami/ContinuousMonitor.ts"],"sourcesContent":["/**\n * This class is responsible for continuously monitoring the activity happening\n * on the asterisk. It is suggested that this class should be used only\n * for events which needs a continuous monitoring. For other types of action based events\n * such as queuesummary etc, Other classes should be used.\n *\n *\n * @remarks :\n * To begin with, we need 2 events tobe monitored\n * QueueCallerJoin.count would give us the total elements in the queue.\n * AgentCalled.queue and AgentCalled.destcalleridnum to signify which agent is currently ringing to serve the call.\n * (AgentConnect.calleridnum, connectedlinenum, queue) to signify which agent ansered the call from which queue.\n *\n */\nimport { api } from '@rocket.chat/core-services';\nimport type {\n\tIPbxEvent,\n\tIQueueDetails,\n\tIAgentCalledEvent,\n\tIAgentConnectEvent,\n\tIEventBase,\n\tIQueueCallerAbandon,\n\tIQueueCallerJoinEvent,\n\tIQueueEvent,\n\tIQueueMemberAdded,\n\tIQueueMemberRemoved,\n\tICallOnHold,\n\tICallUnHold,\n\tIContactStatus,\n\tICallHangup,\n\tIDialingEvent,\n} from '@rocket.chat/core-typings';\nimport {\n\tisIDialingEvent,\n\tisIAgentCalledEvent,\n\tisIAgentConnectEvent,\n\tisIQueueCallerAbandonEvent,\n\tisIQueueCallerJoinEvent,\n\tisIQueueMemberAddedEvent,\n\tisIQueueMemberRemovedEvent,\n\tisICallOnHoldEvent,\n\tisICallUnHoldEvent,\n\tisIContactStatusEvent,\n\tisICallHangupEvent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Users, PbxEvents } from '@rocket.chat/models';\nimport type { Db } from 'mongodb';\n\nimport { notifyOnPbxEventChangedById } from '../../../../../../app/lib/server/lib/notifyListener';\nimport { Command, CommandType } from '../Command';\nimport { Commands } from '../Commands';\nimport { ACDQueue } from './ACDQueue';\nimport { CallbackContext } from './CallbackContext';\n\nexport class ContinuousMonitor extends Command {\n\tprivate logger: Logger;\n\n\tconstructor(command: string, parametersNeeded: boolean, db: Db) {\n\t\tsuper(command, parametersNeeded, db);\n\t\tthis._type = CommandType.AMI;\n\t\tthis.logger = new Logger('ContinuousMonitor');\n\t}\n\n\tprivate async getMembersFromQueueDetails(queueDetails: IQueueDetails): Promise<string[]> {\n\t\tconst { members } = queueDetails;\n\t\tif (!members) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst extensionList = members.map((m) => {\n\t\t\treturn m.name.toLowerCase().replace('pjsip/', '');\n\t\t});\n\n\t\tthis.logger.debug(`Finding members of queue ${queueDetails.name} between users`);\n\t\treturn (await Users.findByExtensions(extensionList).toArray()).map((u) => u._id);\n\t}\n\n\t// Todo : Move this out of connector. This class is a busy class.\n\t// Not sure if we should do it here.\n\tprivate async getQueueDetails(queueName: string): Promise<IQueueDetails> {\n\t\tconst queue = new ACDQueue(Commands.queue_details.toString(), true, this.db);\n\t\tqueue.connection = this.connection;\n\t\tconst queueDetails = await queue.executeCommand({ queueName });\n\t\treturn queueDetails.result as unknown as IQueueDetails;\n\t}\n\n\tasync processQueueMembershipChange(event: IQueueMemberAdded | IQueueMemberRemoved): Promise<void> {\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst { queue } = event;\n\t\tconst queueDetails = await this.getQueueDetails(queue);\n\t\tconst { calls } = queueDetails;\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\t\tif (user) {\n\t\t\tif (isIQueueMemberAddedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { data: { queue, queuedCalls: calls }, event: 'queue-member-added' });\n\t\t\t} else if (isIQueueMemberRemovedEvent(event)) {\n\t\t\t\tvoid api.broadcast(`voip.events`, user._id, { event: 'queue-member-removed', data: { queue, queuedCalls: calls } });\n\t\t\t}\n\t\t}\n\t}\n\n\tasync processAgentCalled(event: IAgentCalledEvent): Promise<void> {\n\t\tthis.logger.debug(`Got new event queue.agentcalled at ${event.queue}`);\n\t\tconst extension = event.interface.toLowerCase().replace('pjsip/', '');\n\t\tconst user = await Users.findOneByExtension(extension, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tusername: 1,\n\t\t\t\textension: 1,\n\t\t\t},\n\t\t});\n\n\t\tif (!user) {\n\t\t\tthis.logger.debug(`Cannot broadcast queue.agentcalled. No agent found at extension ${extension}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logger.debug(`Broadcasting event queue.agentcalled to ${user._id}@${event.queue} on extension ${extension}`);\n\t\tconst callerId = {\n\t\t\tid: event.calleridnum,\n\t\t\tname: event.calleridname,\n\t\t};\n\n\t\tvoid api.broadcast('voip.events', user._id, { event: 'agent-called', data: { callerId, queue: event.queue } });\n\t\t// api.broadcast('queue.agentcalled', user._id, event.queue, callerId);\n\t}\n\n\tasync storePbxEvent(event: IQueueEvent | IContactStatus, eventName: string): Promise<void> {\n\t\ttry {\n\t\t\tconst now = new Date();\n\t\t\t// store pbx event\n\t\t\tif (isIContactStatusEvent(event)) {\n\t\t\t\t// This event represents when an agent drops a call because of disconnection\n\t\t\t\t// May happen for any reason outside of our control, like closing the browswer\n\t\t\t\t// Or network/power issues\n\t\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\t\tevent: eventName,\n\t\t\t\t\tuniqueId: `${eventName}-${event.contactstatus}-${now.getTime()}`,\n\t\t\t\t\tts: now,\n\t\t\t\t\tagentExtension: event.aor,\n\t\t\t\t});\n\n\t\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet uniqueId = `${eventName}-${event.calleridnum}-`;\n\t\t\tif (event.queue) {\n\t\t\t\tuniqueId += `${event.queue}-${event.uniqueid}`;\n\t\t\t} else {\n\t\t\t\tuniqueId += `${event.channel}-${event.destchannel}-${event.uniqueid}`;\n\t\t\t}\n\t\t\t// NOTE: using the uniqueId prop of event is not the recommented approach, since it's an opaque ID\n\t\t\t// However, since we're not using it for anything special, it's a \"fair use\"\n\t\t\t// uniqueId => {server}/{epoch}.{id of channel associated with this call}\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId,\n\t\t\t\tevent: eventName,\n\t\t\t\tts: now,\n\t\t\t\tphone: event.calleridnum,\n\t\t\t\tqueue: event.queue,\n\t\t\t\tholdTime: isIAgentConnectEvent(event) ? event.holdtime : '',\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event?.connectedlinenum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\tthis.logger.debug('Event was handled by other instance');\n\t\t}\n\t}\n\n\tasync processAndBroadcastEventToAllQueueMembers(\n\t\tevent: IQueueCallerJoinEvent | IQueueCallerAbandon | IAgentConnectEvent | ICallHangup,\n\t): Promise<void> {\n\t\tthis.logger.debug(`Broadcasting to memebers, event =  ${event.event}`);\n\t\tconst queueDetails = await this.getQueueDetails(event.queue);\n\t\tconst members = await this.getMembersFromQueueDetails(queueDetails);\n\t\tswitch (event.event) {\n\t\t\tcase 'QueueCallerJoin': {\n\t\t\t\tconst callerId = {\n\t\t\t\t\tid: event.calleridnum,\n\t\t\t\t\tname: event.calleridname,\n\t\t\t\t};\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerJoin');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callerjoined to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'caller-joined',\n\t\t\t\t\t\tdata: { callerId, queue: event.queue, queuedCalls: event.count },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'QueueCallerAbandon': {\n\t\t\t\tconst { calls } = queueDetails;\n\t\t\t\tawait this.storePbxEvent(event, 'QueueCallerAbandon');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.callabandoned to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\tvoid api.broadcast('voip.events', m, { event: 'call-abandoned', data: { queue: event.queue, queuedCallAfterAbandon: calls } });\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'AgentConnect': {\n\t\t\t\tconst { calls } = queueDetails;\n\n\t\t\t\tawait this.storePbxEvent(event, 'AgentConnect');\n\t\t\t\tthis.logger.debug(`Broadcasting event queue.agentconnected to ${members.length} agents on queue ${event.queue}`);\n\t\t\t\tmembers.forEach((m) => {\n\t\t\t\t\t// event.holdtime signifies wait time in the queue.\n\t\t\t\t\tvoid api.broadcast('voip.events', m, {\n\t\t\t\t\t\tevent: 'agent-connected',\n\t\t\t\t\t\tdata: { queue: event.queue, queuedCalls: calls, waitTimeInQueue: event.holdtime },\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.logger.error(`Cant process ${event}. No handlers associated with it`);\n\t\t}\n\t}\n\n\tasync processHoldUnholdEvents(event: ICallOnHold | ICallUnHold): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processHangupEvents(event: ICallHangup): Promise<void> {\n\t\treturn this.storePbxEvent(event, event.event);\n\t}\n\n\tasync processContactStatusEvent(event: IContactStatus): Promise<void> {\n\t\tif (event.contactstatus === 'Removed') {\n\t\t\t// Room closing logic should be added here for the aor\n\t\t\t// aor signifies address of record, which should be used for\n\t\t\t// fetching the room for which serverBy = event.aor\n\t\t\treturn this.storePbxEvent(event, event.event);\n\t\t}\n\t}\n\n\tasync isCallBeginEventPresent(pbxEvent: IPbxEvent | null, uniqueId: string): Promise<boolean> {\n\t\tif (pbxEvent && pbxEvent.callUniqueId === uniqueId) {\n\t\t\tswitch (pbxEvent.event.toLowerCase()) {\n\t\t\t\tcase 'queuecallerjoin':\n\t\t\t\tcase 'agentconnect':\n\t\t\t\t\treturn true;\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync manageDialEvents(event: IDialingEvent): Promise<void> {\n\t\tconst pbxEvent = await PbxEvents.findOneByUniqueId(event.uniqueid);\n\t\t/**\n\t\t * Dial events currently are used for detecting the outbound call\n\t\t * This will later be used for matching call events.\n\t\t *\n\t\t * Dial events are generated even for the queued calls but queue events\n\t\t * are not generated for direct calls (either outbound or directly to an agent).\n\t\t *\n\t\t * isCallBeginEventPresent checks if the call was off the queue. If it was,\n\t\t * we would not try add the dial-event to the pbx database.\n\t\t */\n\t\tif (await this.isCallBeginEventPresent(pbxEvent, event.uniqueid)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!['answer', 'ringing'].includes(event.dialstatus.toLowerCase())) {\n\t\t\tthis.logger.warn(`Received unexpected event ${event.event} dialstatus =  ${event.dialstatus}`);\n\t\t\treturn;\n\t\t}\n\t\t/** This function adds necessary data to\n\t\t * pbx_events database for outbound calls.\n\t\t *\n\t\t * event?.connectedlinenum is the extension/phone number that is being called\n\t\t * and event.calleridnum is the extension that is initiating a call.\n\t\t */\n\t\ttry {\n\t\t\tconst { insertedId } = await PbxEvents.insertOne({\n\t\t\t\tuniqueId: `${event.event}-${event.calleridnum}-${event.channel}-${event.destchannel}-${event.uniqueid}`,\n\t\t\t\tevent: event.event,\n\t\t\t\tts: new Date(),\n\t\t\t\tphone: event?.connectedlinenum.replace(/\\D/g, ''), // Remove all non-numeric characters\n\t\t\t\tcallUniqueId: event.uniqueid,\n\t\t\t\tcallUniqueIdFallback: event.linkedid,\n\t\t\t\tagentExtension: event.calleridnum,\n\t\t\t});\n\n\t\t\tvoid notifyOnPbxEventChangedById(insertedId, 'inserted');\n\t\t} catch (e) {\n\t\t\t// This could mean we received a duplicate event\n\t\t\t// This is quite common since DialEnd event happens \"multiple times\" at the end of the call\n\t\t\t// We receive one for DialEnd in progress and one for DialEnd finished.\n\t\t\tthis.logger.warn(`Duplicate event ${event.event} received for ${event.uniqueid}`);\n\t\t\tthis.logger.debug(event);\n\t\t}\n\t}\n\n\tasync onEvent(event: IEventBase): Promise<void> {\n\t\tthis.logger.debug(`Received event ${event.event}`);\n\t\tif (isIDialingEvent(event)) {\n\t\t\treturn this.manageDialEvents(event);\n\t\t}\n\t\t// Event received when a queue member is notified of a call in queue\n\t\tif (isIAgentCalledEvent(event)) {\n\t\t\treturn this.processAgentCalled(event);\n\t\t}\n\n\t\t// Event received when a call joins queue\n\t\tif (isIQueueCallerJoinEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIAgentConnectEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueCallerAbandonEvent(event)) {\n\t\t\treturn this.processAndBroadcastEventToAllQueueMembers(event);\n\t\t}\n\n\t\tif (isIQueueMemberAddedEvent(event) || isIQueueMemberRemovedEvent(event)) {\n\t\t\treturn this.processQueueMembershipChange(event);\n\t\t}\n\n\t\tif (isICallOnHoldEvent(event) || isICallUnHoldEvent(event)) {\n\t\t\treturn this.processHoldUnholdEvents(event);\n\t\t}\n\n\t\tif (isIContactStatusEvent(event)) {\n\t\t\treturn this.processContactStatusEvent(event);\n\t\t}\n\n\t\tif (isICallHangupEvent(event)) {\n\t\t\treturn this.processHangupEvents(event);\n\t\t}\n\n\t\t// Asterisk sends a metric ton of events, some may be useful but others doesn't\n\t\t// We need to check which ones we want to use in future, but until that moment, this log\n\t\t// Will be commented to avoid unnecesary noise. You can uncomment if you want to see all events\n\t\tthis.logger.debug(`Cannot handle event ${event.event}`);\n\t}\n\n\tsetupEventHandlers(): void {\n\t\t// Setup necessary command event handlers based on the command\n\t\tthis.connection.on('queuecallerjoin', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentcalled', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('agentconnect', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberadded', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuememberremoved', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('queuecallerabandon', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('unhold', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('contactstatus', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('hangup', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialend', new CallbackContext(this.onEvent.bind(this), this));\n\t\tthis.connection.on('dialstate', new CallbackContext(this.onEvent.bind(this), this));\n\t}\n\n\tresetEventHandlers(): void {\n\t\tthis.connection.off('queuecallerjoin', this);\n\t\tthis.connection.off('agentcalled', this);\n\t\tthis.connection.off('agentconnect', this);\n\t\tthis.connection.off('queuememberadded', this);\n\t\tthis.connection.off('queuememberremoved', this);\n\t\tthis.connection.off('queuecallerabandon', this);\n\t\tthis.connection.off('hold', this);\n\t\tthis.connection.off('unhold', this);\n\t\tthis.connection.off('contactstatus', this);\n\t\tthis.connection.off('hangup', this);\n\t\tthis.connection.off('dialend', this);\n\t\tthis.connection.off('dialstate', this);\n\t}\n\n\tinitMonitor(_data: any): boolean {\n\t\t/**\n\t\t * See the implementation of |call| function in CallbackContext to understand\n\t\t * why we are using regex here.\n\t\t */\n\t\tthis.actionid = '.*';\n\t\tthis.setupEventHandlers();\n\t\treturn true;\n\t}\n\n\tcleanMonitor(): boolean {\n\t\tthis.resetEventHandlers();\n\t\treturn true;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5444d39e812455cb7795a6b88297f57706050193"}
