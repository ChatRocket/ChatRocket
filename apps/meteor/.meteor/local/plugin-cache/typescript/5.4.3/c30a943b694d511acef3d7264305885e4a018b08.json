{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/message-pin/server/pinMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/message-pin/server/pinMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/message-pin/server/pinMessage.ts","inputSourceMap":{"version":3,"file":"app/message-pin/server/pinMessage.ts","sourceRoot":"","sources":["app/message-pin/server/pinMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport { isQuoteAttachment, isRegisterUser } from '@rocket.chat/core-typings';\nimport type { IMessage, MessageAttachment, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Subscriptions, Users, ReadReceipts } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../authorization/server';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { isTheLastMessage } from '../../lib/server/functions/isTheLastMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\nconst recursiveRemove = (msg: MessageAttachment, deep = 1) => {\n\tif (!msg || !isQuoteAttachment(msg)) {\n\t\treturn;\n\t}\n\n\tif (deep > (settings.get<number>('Message_QuoteChainLimit') ?? 0)) {\n\t\tdelete msg.attachments;\n\t\treturn msg;\n\t}\n\n\tmsg.attachments = Array.isArray(msg.attachments)\n\t\t? msg.attachments.map((nestedMsg) => recursiveRemove(nestedMsg, deep + 1)).filter(isTruthy)\n\t\t: undefined;\n\n\treturn msg;\n};\n\nconst shouldAdd = (attachments: MessageAttachment[], attachment: MessageQuoteAttachment) =>\n\t!attachments.some((_attachment) => isQuoteAttachment(_attachment) && _attachment.message_link === attachment.message_link);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tpinMessage(message: IMessage, pinnedAt?: Date): IMessage | null;\n\t\tunpinMessage(message: IMessage): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync pinMessage(message, pinnedAt) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'pinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(message._id, me);\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\toriginalMessage.pinned = true;\n\t\toriginalMessage.pinnedAt = pinnedAt || new Date();\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(message._id, originalMessage.pinned);\n\t\t}\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\tconst attachments: MessageAttachment[] = [];\n\n\t\tif (Array.isArray(originalMessage.attachments)) {\n\t\t\toriginalMessage.attachments.forEach((attachment) => {\n\t\t\t\tif (!isQuoteAttachment(attachment) || shouldAdd(attachments, attachment)) {\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tconst pinMessageType = originalMessage.t === 'e2e' ? 'message_pinned_e2e' : 'message_pinned';\n\n\t\treturn Message.saveSystemMessage(pinMessageType, originalMessage.rid, '', me, {\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\ttext: originalMessage.msg,\n\t\t\t\t\tauthor_name: originalMessage.u.username,\n\t\t\t\t\tauthor_icon: getUserAvatarURL(originalMessage.u.username),\n\t\t\t\t\tts: originalMessage.ts,\n\t\t\t\t\tattachments: attachments.map(recursiveRemove),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t},\n\tasync unpinMessage(message) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'unpinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n\t\t}\n\n\t\toriginalMessage.pinned = false;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(originalMessage._id, originalMessage.pinned);\n\t\t}\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn true;\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/message-pin/server/pinMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/message-pin/server/pinMessage.ts","inputSourceMap":{"version":3,"file":"app/message-pin/server/pinMessage.ts","sourceRoot":"","sources":["app/message-pin/server/pinMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport { isQuoteAttachment, isRegisterUser } from '@rocket.chat/core-typings';\nimport type { IMessage, MessageAttachment, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Subscriptions, Users, ReadReceipts } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../authorization/server';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { isTheLastMessage } from '../../lib/server/functions/isTheLastMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\nconst recursiveRemove = (msg: MessageAttachment, deep = 1) => {\n\tif (!msg || !isQuoteAttachment(msg)) {\n\t\treturn;\n\t}\n\n\tif (deep > (settings.get<number>('Message_QuoteChainLimit') ?? 0)) {\n\t\tdelete msg.attachments;\n\t\treturn msg;\n\t}\n\n\tmsg.attachments = Array.isArray(msg.attachments)\n\t\t? msg.attachments.map((nestedMsg) => recursiveRemove(nestedMsg, deep + 1)).filter(isTruthy)\n\t\t: undefined;\n\n\treturn msg;\n};\n\nconst shouldAdd = (attachments: MessageAttachment[], attachment: MessageQuoteAttachment) =>\n\t!attachments.some((_attachment) => isQuoteAttachment(_attachment) && _attachment.message_link === attachment.message_link);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tpinMessage(message: IMessage, pinnedAt?: Date): IMessage | null;\n\t\tunpinMessage(message: IMessage): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync pinMessage(message, pinnedAt) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'pinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(message._id, me);\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\toriginalMessage.pinned = true;\n\t\toriginalMessage.pinnedAt = pinnedAt || new Date();\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(message._id, originalMessage.pinned);\n\t\t}\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\tconst attachments: MessageAttachment[] = [];\n\n\t\tif (Array.isArray(originalMessage.attachments)) {\n\t\t\toriginalMessage.attachments.forEach((attachment) => {\n\t\t\t\tif (!isQuoteAttachment(attachment) || shouldAdd(attachments, attachment)) {\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tconst pinMessageType = originalMessage.t === 'e2e' ? 'message_pinned_e2e' : 'message_pinned';\n\n\t\treturn Message.saveSystemMessage(pinMessageType, originalMessage.rid, '', me, {\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\ttext: originalMessage.msg,\n\t\t\t\t\tauthor_name: originalMessage.u.username,\n\t\t\t\t\tauthor_icon: getUserAvatarURL(originalMessage.u.username),\n\t\t\t\t\tts: originalMessage.ts,\n\t\t\t\t\tattachments: attachments.map(recursiveRemove),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t},\n\tasync unpinMessage(message) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'unpinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n\t\t}\n\n\t\toriginalMessage.pinned = false;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(originalMessage._id, originalMessage.pinned);\n\t\t}\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn true;\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 0);\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 1);\n    let isQuoteAttachment, isRegisterUser;\n    module.link(\"@rocket.chat/core-typings\", {\n      isQuoteAttachment(v) {\n        isQuoteAttachment = v;\n      },\n      isRegisterUser(v) {\n        isRegisterUser = v;\n      }\n    }, 2);\n    let Messages, Rooms, Subscriptions, Users, ReadReceipts;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      }\n    }, 3);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 4);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 5);\n    let isTruthy;\n    module.link(\"../../../lib/isTruthy\", {\n      isTruthy(v) {\n        isTruthy = v;\n      }\n    }, 6);\n    let canAccessRoomAsync, roomAccessAttributes;\n    module.link(\"../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      },\n      roomAccessAttributes(v) {\n        roomAccessAttributes = v;\n      }\n    }, 7);\n    let hasPermissionAsync;\n    module.link(\"../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 8);\n    let isTheLastMessage;\n    module.link(\"../../lib/server/functions/isTheLastMessage\", {\n      isTheLastMessage(v) {\n        isTheLastMessage = v;\n      }\n    }, 9);\n    let notifyOnRoomChangedById, notifyOnMessageChange;\n    module.link(\"../../lib/server/lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let getUserAvatarURL;\n    module.link(\"../../utils/server/getUserAvatarURL\", {\n      getUserAvatarURL(v) {\n        getUserAvatarURL = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const recursiveRemove = function (msg) {\n      var _settings$get;\n      let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (!msg || !isQuoteAttachment(msg)) {\n        return;\n      }\n      if (deep > ((_settings$get = settings.get('Message_QuoteChainLimit')) !== null && _settings$get !== void 0 ? _settings$get : 0)) {\n        delete msg.attachments;\n        return msg;\n      }\n      msg.attachments = Array.isArray(msg.attachments) ? msg.attachments.map(nestedMsg => recursiveRemove(nestedMsg, deep + 1)).filter(isTruthy) : undefined;\n      return msg;\n    };\n    const shouldAdd = (attachments, attachment) => !attachments.some(_attachment => isQuoteAttachment(_attachment) && _attachment.message_link === attachment.message_link);\n    Meteor.methods({\n      async pinMessage(message, pinnedAt) {\n        var _Apps$self;\n        check(message._id, String);\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'pinMessage'\n          });\n        }\n        if (!settings.get('Message_AllowPinning')) {\n          throw new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n            method: 'pinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        let originalMessage = await Messages.findOneById(message._id);\n        if (originalMessage == null || originalMessage._id == null) {\n          throw new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n            method: 'pinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!subscription) {\n          // If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n          throw new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n            method: 'pinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        if (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'pinMessage'\n          });\n        }\n        const me = await Users.findOneById(userId);\n        if (!me) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'pinMessage'\n          });\n        }\n        // If we keep history of edits, insert a new message to store history information\n        if (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n          await Messages.cloneAndSaveAsHistoryById(message._id, me);\n        }\n        const room = await Rooms.findOneById(originalMessage.rid);\n        if (!room) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'pinMessage'\n          });\n        }\n        if (!(await canAccessRoomAsync(room, {\n          _id: userId\n        }))) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'pinMessage'\n          });\n        }\n        originalMessage.pinned = true;\n        originalMessage.pinnedAt = pinnedAt || new Date();\n        originalMessage.pinnedBy = {\n          _id: userId,\n          username: me.username\n        };\n        originalMessage = await Message.beforeSave({\n          message: originalMessage,\n          room,\n          user: me\n        });\n        await Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n        if (settings.get('Message_Read_Receipt_Store_Users')) {\n          await ReadReceipts.setPinnedByMessageId(message._id, originalMessage.pinned);\n        }\n        if (isTheLastMessage(room, message)) {\n          await Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n          void notifyOnRoomChangedById(room._id);\n        }\n        const attachments = [];\n        if (Array.isArray(originalMessage.attachments)) {\n          originalMessage.attachments.forEach(attachment => {\n            if (!isQuoteAttachment(attachment) || shouldAdd(attachments, attachment)) {\n              attachments.push(attachment);\n            }\n          });\n        }\n        // App IPostMessagePinned event hook\n        await ((_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : _Apps$self.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned));\n        const pinMessageType = originalMessage.t === 'e2e' ? 'message_pinned_e2e' : 'message_pinned';\n        return Message.saveSystemMessage(pinMessageType, originalMessage.rid, '', me, {\n          attachments: [{\n            text: originalMessage.msg,\n            author_name: originalMessage.u.username,\n            author_icon: getUserAvatarURL(originalMessage.u.username),\n            ts: originalMessage.ts,\n            attachments: attachments.map(recursiveRemove)\n          }]\n        });\n      },\n      async unpinMessage(message) {\n        var _Apps$self2;\n        check(message._id, String);\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'unpinMessage'\n          });\n        }\n        if (!settings.get('Message_AllowPinning')) {\n          throw new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n            method: 'unpinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        let originalMessage = await Messages.findOneById(message._id);\n        if (originalMessage == null || originalMessage._id == null) {\n          throw new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n            method: 'unpinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!subscription) {\n          // If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n          throw new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n            method: 'unpinMessage',\n            action: 'Message_pinning'\n          });\n        }\n        if (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'unpinMessage'\n          });\n        }\n        const me = await Users.findOneById(userId);\n        if (!me) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'unpinMessage'\n          });\n        }\n        // If we keep history of edits, insert a new message to store history information\n        if (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n          await Messages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n        }\n        originalMessage.pinned = false;\n        originalMessage.pinnedBy = {\n          _id: userId,\n          username: me.username\n        };\n        const room = await Rooms.findOneById(originalMessage.rid, {\n          projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n            lastMessage: 1\n          })\n        });\n        if (!room) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'unpinMessage'\n          });\n        }\n        if (!(await canAccessRoomAsync(room, {\n          _id: userId\n        }))) {\n          throw new Meteor.Error('not-authorized', 'Not Authorized', {\n            method: 'unpinMessage'\n          });\n        }\n        originalMessage = await Message.beforeSave({\n          message: originalMessage,\n          room,\n          user: me\n        });\n        if (isTheLastMessage(room, message)) {\n          await Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n          void notifyOnRoomChangedById(room._id);\n        }\n        // App IPostMessagePinned event hook\n        await ((_Apps$self2 = Apps.self) === null || _Apps$self2 === void 0 ? void 0 : _Apps$self2.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned));\n        await Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n        if (settings.get('Message_Read_Receipt_Store_Users')) {\n          await ReadReceipts.setPinnedByMessageId(originalMessage._id, originalMessage.pinned);\n        }\n        void notifyOnMessageChange({\n          id: message._id\n        });\n        return true;\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Apps","AppEvents","Message","isQuoteAttachment","isRegisterUser","Messages","Rooms","Subscriptions","Users","ReadReceipts","check","Meteor","isTruthy","canAccessRoomAsync","roomAccessAttributes","hasPermissionAsync","isTheLastMessage","notifyOnRoomChangedById","notifyOnMessageChange","settings","getUserAvatarURL","__reifyWaitForDeps__","recursiveRemove","msg","_settings$get","deep","arguments","length","undefined","get","attachments","Array","isArray","map","nestedMsg","filter","shouldAdd","attachment","some","_attachment","message_link","methods","pinMessage","message","pinnedAt","_Apps$self","_id","String","userId","Error","method","action","originalMessage","findOneById","subscription","findOneByRoomIdAndUserId","rid","projection","me","cloneAndSaveAsHistoryById","room","pinned","Date","pinnedBy","username","beforeSave","user","setPinnedByIdAndUserId","setPinnedByMessageId","setLastMessagePinned","forEach","push","self","triggerEvent","IPostMessagePinned","userAsync","pinMessageType","t","saveSystemMessage","text","author_name","u","author_icon","ts","unpinMessage","_Apps$self2","lastMessage","id","__reify_async_result__","_reifyError","async"],"sources":["app/message-pin/server/pinMessage.ts"],"sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport { isQuoteAttachment, isRegisterUser } from '@rocket.chat/core-typings';\nimport type { IMessage, MessageAttachment, MessageQuoteAttachment } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Rooms, Subscriptions, Users, ReadReceipts } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { isTruthy } from '../../../lib/isTruthy';\nimport { canAccessRoomAsync, roomAccessAttributes } from '../../authorization/server';\nimport { hasPermissionAsync } from '../../authorization/server/functions/hasPermission';\nimport { isTheLastMessage } from '../../lib/server/functions/isTheLastMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../../lib/server/lib/notifyListener';\nimport { settings } from '../../settings/server';\nimport { getUserAvatarURL } from '../../utils/server/getUserAvatarURL';\n\nconst recursiveRemove = (msg: MessageAttachment, deep = 1) => {\n\tif (!msg || !isQuoteAttachment(msg)) {\n\t\treturn;\n\t}\n\n\tif (deep > (settings.get<number>('Message_QuoteChainLimit') ?? 0)) {\n\t\tdelete msg.attachments;\n\t\treturn msg;\n\t}\n\n\tmsg.attachments = Array.isArray(msg.attachments)\n\t\t? msg.attachments.map((nestedMsg) => recursiveRemove(nestedMsg, deep + 1)).filter(isTruthy)\n\t\t: undefined;\n\n\treturn msg;\n};\n\nconst shouldAdd = (attachments: MessageAttachment[], attachment: MessageQuoteAttachment) =>\n\t!attachments.some((_attachment) => isQuoteAttachment(_attachment) && _attachment.message_link === attachment.message_link);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tpinMessage(message: IMessage, pinnedAt?: Date): IMessage | null;\n\t\tunpinMessage(message: IMessage): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync pinMessage(message, pinnedAt) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are pinning was not found', {\n\t\t\t\tmethod: 'pinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'pinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(message._id, me);\n\t\t}\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid);\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'pinMessage' });\n\t\t}\n\n\t\toriginalMessage.pinned = true;\n\t\toriginalMessage.pinnedAt = pinnedAt || new Date();\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(message._id, originalMessage.pinned);\n\t\t}\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\tconst attachments: MessageAttachment[] = [];\n\n\t\tif (Array.isArray(originalMessage.attachments)) {\n\t\t\toriginalMessage.attachments.forEach((attachment) => {\n\t\t\t\tif (!isQuoteAttachment(attachment) || shouldAdd(attachments, attachment)) {\n\t\t\t\t\tattachments.push(attachment);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tconst pinMessageType = originalMessage.t === 'e2e' ? 'message_pinned_e2e' : 'message_pinned';\n\n\t\treturn Message.saveSystemMessage(pinMessageType, originalMessage.rid, '', me, {\n\t\t\tattachments: [\n\t\t\t\t{\n\t\t\t\t\ttext: originalMessage.msg,\n\t\t\t\t\tauthor_name: originalMessage.u.username,\n\t\t\t\t\tauthor_icon: getUserAvatarURL(originalMessage.u.username),\n\t\t\t\t\tts: originalMessage.ts,\n\t\t\t\t\tattachments: attachments.map(recursiveRemove),\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t},\n\tasync unpinMessage(message) {\n\t\tcheck(message._id, String);\n\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t});\n\t\t}\n\n\t\tif (!settings.get('Message_AllowPinning')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message pinning not allowed', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tlet originalMessage = await Messages.findOneById(message._id);\n\t\tif (originalMessage == null || originalMessage._id == null) {\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(originalMessage.rid, userId, { projection: { _id: 1 } });\n\t\tif (!subscription) {\n\t\t\t// If it's a valid message but on a room that the user is not subscribed to, report that the message was not found.\n\t\t\tthrow new Meteor.Error('error-invalid-message', 'Message you are unpinning was not found', {\n\t\t\t\tmethod: 'unpinMessage',\n\t\t\t\taction: 'Message_pinning',\n\t\t\t});\n\t\t}\n\n\t\tif (!(await hasPermissionAsync(userId, 'pin-message', originalMessage.rid))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tconst me = await Users.findOneById(userId);\n\t\tif (!me) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'unpinMessage' });\n\t\t}\n\n\t\t// If we keep history of edits, insert a new message to store history information\n\t\tif (settings.get('Message_KeepHistory') && isRegisterUser(me)) {\n\t\t\tawait Messages.cloneAndSaveAsHistoryById(originalMessage._id, me);\n\t\t}\n\n\t\toriginalMessage.pinned = false;\n\t\toriginalMessage.pinnedBy = {\n\t\t\t_id: userId,\n\t\t\tusername: me.username,\n\t\t};\n\n\t\tconst room = await Rooms.findOneById(originalMessage.rid, { projection: { ...roomAccessAttributes, lastMessage: 1 } });\n\t\tif (!room) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\tif (!(await canAccessRoomAsync(room, { _id: userId }))) {\n\t\t\tthrow new Meteor.Error('not-authorized', 'Not Authorized', { method: 'unpinMessage' });\n\t\t}\n\n\t\toriginalMessage = await Message.beforeSave({ message: originalMessage, room, user: me });\n\n\t\tif (isTheLastMessage(room, message)) {\n\t\t\tawait Rooms.setLastMessagePinned(room._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\t\tvoid notifyOnRoomChangedById(room._id);\n\t\t}\n\n\t\t// App IPostMessagePinned event hook\n\t\tawait Apps.self?.triggerEvent(AppEvents.IPostMessagePinned, originalMessage, await Meteor.userAsync(), originalMessage.pinned);\n\n\t\tawait Messages.setPinnedByIdAndUserId(originalMessage._id, originalMessage.pinnedBy, originalMessage.pinned);\n\t\tif (settings.get('Message_Read_Receipt_Store_Users')) {\n\t\t\tawait ReadReceipts.setPinnedByMessageId(originalMessage._id, originalMessage.pinned);\n\t\t}\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: message._id,\n\t\t});\n\n\t\treturn true;\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c30a943b694d511acef3d7264305885e4a018b08"}
