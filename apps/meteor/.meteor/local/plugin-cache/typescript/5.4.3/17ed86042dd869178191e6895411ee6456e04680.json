{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/sendNotificationsOnMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/lib/sendNotificationsOnMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/sendNotificationsOnMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/sendNotificationsOnMessage.ts","sourceRoot":"","sources":["app/lib/server/lib/sendNotificationsOnMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\ttype IMessage,\n\ttype ISubscription,\n\ttype IUser,\n\ttype IRoom,\n\ttype NotificationItem,\n\tisEditedMessage,\n\ttype AtLeast,\n} from '@rocket.chat/core-typings';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport emojione from 'emojione';\nimport moment from 'moment';\nimport type { RootFilterOperators } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Notification } from '../../../notification-queue/server/NotificationQueue';\nimport { settings } from '../../../settings/server';\nimport { parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames } from '../functions/notifications';\nimport { notifyDesktopUser, shouldNotifyDesktop } from '../functions/notifications/desktop';\nimport { getEmailData, shouldNotifyEmail } from '../functions/notifications/email';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\nimport { getPushData, shouldNotifyMobile } from '../functions/notifications/mobile';\nimport { getMentions } from './notifyUsersOnMessage';\n\ntype SubscriptionAggregation = {\n\treceiver: [Pick<IUser, 'active' | 'emails' | 'language' | 'status' | 'statusConnection' | 'username' | 'settings'> | null];\n} & Pick<\n\tISubscription,\n\t'desktopNotifications' | 'emailNotifications' | 'mobilePushNotifications' | 'muteGroupMentions' | 'name' | 'rid' | 'userHighlights' | 'u'\n>;\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport const sendNotification = async ({\n\tsubscription,\n\tsender,\n\thasReplyToThread,\n\thasMentionToAll,\n\thasMentionToHere,\n\tmessage,\n\tnotificationMessage,\n\troom,\n\tmentionIds,\n\tdisableAllMessageNotifications,\n}: {\n\tsubscription: SubscriptionAggregation;\n\tsender: Pick<IUser, '_id' | 'name' | 'username'>;\n\n\thasReplyToThread: boolean;\n\thasMentionToAll: boolean;\n\thasMentionToHere: boolean;\n\tmessage: AtLeast<IMessage, '_id' | 'u' | 'msg' | 't' | 'attachments'>;\n\tnotificationMessage: string;\n\troom: IRoom;\n\tmentionIds: string[];\n\tdisableAllMessageNotifications: boolean;\n}) => {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\t// don't notify the sender\n\tif (subscription.u._id === sender._id) {\n\t\treturn;\n\t}\n\n\tconst hasMentionToUser = mentionIds.includes(subscription.u._id);\n\n\t// mute group notifications (@here and @all) if not directly mentioned as well\n\tif (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n\t\treturn;\n\t}\n\n\tif (!subscription.receiver) {\n\t\tsubscription.receiver = [\n\t\t\tawait Users.findOneById(subscription.u._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'active': 1,\n\t\t\t\t\t'emails': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t\t'statusConnection': 1,\n\t\t\t\t\t'username': 1,\n\t\t\t\t\t'settings.preferences.enableMobileRinging': 1,\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t}\n\n\tconst [receiver] = subscription.receiver;\n\n\tif (!receiver) {\n\t\tthrow new Error('receiver not found');\n\t}\n\n\tconst roomType = room.t;\n\t// If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n\tif (roomType === 'd' && !(await hasPermissionAsync(subscription.u._id, 'view-d-room'))) {\n\t\treturn;\n\t}\n\n\tconst isThread = !!message.tmid && !message.tshow;\n\tconst isVideoConf = message.t === 'videoconf';\n\n\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\n\t// busy users don't receive desktop notification\n\tif (\n\t\tshouldNotifyDesktop({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatus: receiver.status ?? 'offline',\n\t\t\tstatusConnection: receiver.statusConnection ?? 'offline',\n\t\t\tdesktopNotifications,\n\t\t\thasMentionToAll,\n\t\t\thasMentionToHere,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tawait notifyDesktopUser({\n\t\t\tnotificationMessage,\n\t\t\tuserId: subscription.u._id,\n\t\t\tuser: sender,\n\t\t\tmessage,\n\t\t\troom,\n\t\t});\n\t}\n\n\tconst queueItems: NotificationItem[] = [];\n\n\tif (\n\t\tshouldNotifyMobile({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tmobilePushNotifications,\n\t\t\thasMentionToAll,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t\tisVideoConf,\n\t\t\tuserPreferences: receiver.settings?.preferences,\n\t\t\troomUids: room.uids,\n\t\t})\n\t) {\n\t\tqueueItems.push({\n\t\t\ttype: 'push',\n\t\t\tdata: await getPushData({\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: subscription.u._id,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\treceiver,\n\t\t\t}),\n\t\t});\n\t}\n\n\tif (\n\t\treceiver.emails &&\n\t\tshouldNotifyEmail({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\temailNotifications,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasMentionToAll,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tconst messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n\t\tconst firstAttachment = message.attachments?.length && message.attachments.shift();\n\n\t\tif (firstAttachment) {\n\t\t\tfirstAttachment.description =\n\t\t\t\ttypeof firstAttachment.description === 'string' ? emojione.shortnameToUnicode(firstAttachment.description) : undefined;\n\t\t\tfirstAttachment.text = typeof firstAttachment.text === 'string' ? emojione.shortnameToUnicode(firstAttachment.text) : undefined;\n\t\t}\n\n\t\tconst attachments = firstAttachment ? [firstAttachment, ...(message.attachments ?? [])].filter(Boolean) : [];\n\t\tfor await (const email of receiver.emails) {\n\t\t\tif (email.verified) {\n\t\t\t\tqueueItems.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tdata: await getEmailData({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\tmsg: messageWithUnicode,\n\t\t\t\t\t\t\t...(attachments.length > 0 ? { attachments } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t\treceiver,\n\t\t\t\t\t\tsender,\n\t\t\t\t\t\tsubscription,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\temailAddress: email.address,\n\t\t\t\t\t\thasMentionToUser,\n\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (queueItems.length) {\n\t\tvoid Notification.scheduleItem({\n\t\t\tuser: receiver,\n\t\t\tuid: subscription.u._id,\n\t\t\trid: room._id,\n\t\t\tmid: message._id,\n\t\t\titems: queueItems,\n\t\t});\n\t}\n};\n\nconst project = {\n\t$project: {\n\t\t'desktopNotifications': 1,\n\t\t'emailNotifications': 1,\n\t\t'mobilePushNotifications': 1,\n\t\t'muteGroupMentions': 1,\n\t\t'name': 1,\n\t\t'rid': 1,\n\t\t'userHighlights': 1,\n\t\t'u._id': 1,\n\t\t'receiver.active': 1,\n\t\t'receiver.emails': 1,\n\t\t'receiver.language': 1,\n\t\t'receiver.status': 1,\n\t\t'receiver.statusConnection': 1,\n\t\t'receiver.username': 1,\n\t\t'receiver.settings.preferences.enableMobileRinging': 1,\n\t},\n} as const;\n\nconst filter = {\n\t$match: {\n\t\t'receiver.active': true,\n\t},\n} as const;\n\nconst lookup = {\n\t$lookup: {\n\t\tfrom: 'users',\n\t\tlocalField: 'u._id',\n\t\tforeignField: '_id',\n\t\tas: 'receiver',\n\t},\n} as const;\n\nexport async function sendMessageNotifications(message: IMessage, room: IRoom, usersInThread: string[] = []) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\tconst sender = await roomCoordinator.getRoomDirectives(room.t).getMsgSender(message);\n\tif (!sender) {\n\t\treturn message;\n\t}\n\n\tconst { toAll: hasMentionToAll, toHere: hasMentionToHere, mentionIds } = await getMentions(message);\n\n\tconst mentionIdsWithoutGroups = [...mentionIds];\n\n\t// getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n\tif (hasMentionToAll) {\n\t\tmentionIds.push('all');\n\t}\n\tif (hasMentionToHere) {\n\t\tmentionIds.push('here');\n\t}\n\n\t// add users in thread to mentions array because they follow the same rules\n\tmentionIds.push(...usersInThread);\n\n\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\tif (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions ?? []);\n\t}\n\n\t// Don't fetch all users if room exceeds max members\n\tconst maxMembersForNotification = settings.get<number>('Notifications_Max_Room_Members');\n\tconst roomMembersCount = await Users.countRoomMembers(room._id);\n\tconst disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n\n\tconst query: WithRequiredProperty<RootFilterOperators<ISubscription>, '$or'> = {\n\t\trid: room._id,\n\t\tignored: { $ne: sender._id },\n\t\tdisableNotifications: { $ne: true },\n\t\t$or: [{ 'userHighlights.0': { $exists: 1 } }, ...(usersInThread.length > 0 ? [{ 'u._id': { $in: usersInThread } }] : [])],\n\t} as const;\n\n\t(['desktop', 'mobile', 'email'] as const).forEach((kind) => {\n\t\tconst notificationField = kind === 'mobile' ? 'mobilePush' : `${kind}Notifications`;\n\n\t\tquery.$or.push({\n\t\t\t[notificationField]: 'all',\n\t\t\t...(disableAllMessageNotifications ? { [`${kind}PrefOrigin`]: { $ne: 'user' } } : {}),\n\t\t});\n\n\t\tif (disableAllMessageNotifications) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t});\n\t\t} else if (mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\n\t\tconst serverField = kind === 'email' ? 'emailNotificationMode' : `${kind}Notifications`;\n\t\tconst serverPreference = settings.get(`Accounts_Default_User_Preferences_${serverField}`);\n\n\t\tif (serverPreference === 'all' || hasMentionToAll || hasMentionToHere || room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t});\n\t\t} else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\t});\n\n\t// the find below is crucial. All subscription records returned will receive at least one kind of notification.\n\t// the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n\n\tconst subscriptions = await Subscriptions.col.aggregate<SubscriptionAggregation>([{ $match: query }, lookup, filter, project]).toArray();\n\n\tsubscriptions.forEach(\n\t\t(subscription) =>\n\t\t\tvoid sendNotification({\n\t\t\t\tsubscription,\n\t\t\t\tsender,\n\t\t\t\thasMentionToAll,\n\t\t\t\thasMentionToHere,\n\t\t\t\tmessage,\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmentionIds,\n\t\t\t\tdisableAllMessageNotifications,\n\t\t\t\thasReplyToThread: usersInThread?.includes(subscription.u._id),\n\t\t\t}),\n\t);\n\n\treturn {\n\t\tsender,\n\t\thasMentionToAll,\n\t\thasMentionToHere,\n\t\tnotificationMessage,\n\t\tmentionIds,\n\t\tmentionIdsWithoutGroups,\n\t};\n}\n\nexport async function sendAllNotifications(message: IMessage, room: IRoom) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn message;\n\t}\n\n\t// threads\n\tif (message.tmid) {\n\t\treturn message;\n\t}\n\t// skips this callback if the message was edited\n\tif (isEditedMessage(message)) {\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(new Date())) > 60000) {\n\t\treturn message;\n\t}\n\n\tif (!room || room.t == null) {\n\t\treturn message;\n\t}\n\n\tawait sendMessageNotifications(message, room);\n\n\treturn message;\n}\n\nsettings.watch('Troubleshoot_Disable_Notifications', (value) => {\n\tif (value) {\n\t\treturn callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n\t}\n\n\tcallbacks.add(\n\t\t'afterSaveMessage',\n\t\t(message, { room }) => sendAllNotifications(message, room),\n\t\tcallbacks.priority.LOW,\n\t\t'sendNotificationsOnMessage',\n\t);\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/sendNotificationsOnMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/lib/sendNotificationsOnMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/sendNotificationsOnMessage.ts","sourceRoot":"","sources":["app/lib/server/lib/sendNotificationsOnMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\ttype IMessage,\n\ttype ISubscription,\n\ttype IUser,\n\ttype IRoom,\n\ttype NotificationItem,\n\tisEditedMessage,\n\ttype AtLeast,\n} from '@rocket.chat/core-typings';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport emojione from 'emojione';\nimport moment from 'moment';\nimport type { RootFilterOperators } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Notification } from '../../../notification-queue/server/NotificationQueue';\nimport { settings } from '../../../settings/server';\nimport { parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames } from '../functions/notifications';\nimport { notifyDesktopUser, shouldNotifyDesktop } from '../functions/notifications/desktop';\nimport { getEmailData, shouldNotifyEmail } from '../functions/notifications/email';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\nimport { getPushData, shouldNotifyMobile } from '../functions/notifications/mobile';\nimport { getMentions } from './notifyUsersOnMessage';\n\ntype SubscriptionAggregation = {\n\treceiver: [Pick<IUser, 'active' | 'emails' | 'language' | 'status' | 'statusConnection' | 'username' | 'settings'> | null];\n} & Pick<\n\tISubscription,\n\t'desktopNotifications' | 'emailNotifications' | 'mobilePushNotifications' | 'muteGroupMentions' | 'name' | 'rid' | 'userHighlights' | 'u'\n>;\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport const sendNotification = async ({\n\tsubscription,\n\tsender,\n\thasReplyToThread,\n\thasMentionToAll,\n\thasMentionToHere,\n\tmessage,\n\tnotificationMessage,\n\troom,\n\tmentionIds,\n\tdisableAllMessageNotifications,\n}: {\n\tsubscription: SubscriptionAggregation;\n\tsender: Pick<IUser, '_id' | 'name' | 'username'>;\n\n\thasReplyToThread: boolean;\n\thasMentionToAll: boolean;\n\thasMentionToHere: boolean;\n\tmessage: AtLeast<IMessage, '_id' | 'u' | 'msg' | 't' | 'attachments'>;\n\tnotificationMessage: string;\n\troom: IRoom;\n\tmentionIds: string[];\n\tdisableAllMessageNotifications: boolean;\n}) => {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\t// don't notify the sender\n\tif (subscription.u._id === sender._id) {\n\t\treturn;\n\t}\n\n\tconst hasMentionToUser = mentionIds.includes(subscription.u._id);\n\n\t// mute group notifications (@here and @all) if not directly mentioned as well\n\tif (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n\t\treturn;\n\t}\n\n\tif (!subscription.receiver) {\n\t\tsubscription.receiver = [\n\t\t\tawait Users.findOneById(subscription.u._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'active': 1,\n\t\t\t\t\t'emails': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t\t'statusConnection': 1,\n\t\t\t\t\t'username': 1,\n\t\t\t\t\t'settings.preferences.enableMobileRinging': 1,\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t}\n\n\tconst [receiver] = subscription.receiver;\n\n\tif (!receiver) {\n\t\tthrow new Error('receiver not found');\n\t}\n\n\tconst roomType = room.t;\n\t// If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n\tif (roomType === 'd' && !(await hasPermissionAsync(subscription.u._id, 'view-d-room'))) {\n\t\treturn;\n\t}\n\n\tconst isThread = !!message.tmid && !message.tshow;\n\tconst isVideoConf = message.t === 'videoconf';\n\n\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\n\t// busy users don't receive desktop notification\n\tif (\n\t\tshouldNotifyDesktop({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatus: receiver.status ?? 'offline',\n\t\t\tstatusConnection: receiver.statusConnection ?? 'offline',\n\t\t\tdesktopNotifications,\n\t\t\thasMentionToAll,\n\t\t\thasMentionToHere,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tawait notifyDesktopUser({\n\t\t\tnotificationMessage,\n\t\t\tuserId: subscription.u._id,\n\t\t\tuser: sender,\n\t\t\tmessage,\n\t\t\troom,\n\t\t});\n\t}\n\n\tconst queueItems: NotificationItem[] = [];\n\n\tif (\n\t\tshouldNotifyMobile({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tmobilePushNotifications,\n\t\t\thasMentionToAll,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t\tisVideoConf,\n\t\t\tuserPreferences: receiver.settings?.preferences,\n\t\t\troomUids: room.uids,\n\t\t})\n\t) {\n\t\tqueueItems.push({\n\t\t\ttype: 'push',\n\t\t\tdata: await getPushData({\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: subscription.u._id,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\treceiver,\n\t\t\t}),\n\t\t});\n\t}\n\n\tif (\n\t\treceiver.emails &&\n\t\tshouldNotifyEmail({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\temailNotifications,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasMentionToAll,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tconst messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n\t\tconst firstAttachment = message.attachments?.length && message.attachments.shift();\n\n\t\tif (firstAttachment) {\n\t\t\tfirstAttachment.description =\n\t\t\t\ttypeof firstAttachment.description === 'string' ? emojione.shortnameToUnicode(firstAttachment.description) : undefined;\n\t\t\tfirstAttachment.text = typeof firstAttachment.text === 'string' ? emojione.shortnameToUnicode(firstAttachment.text) : undefined;\n\t\t}\n\n\t\tconst attachments = firstAttachment ? [firstAttachment, ...(message.attachments ?? [])].filter(Boolean) : [];\n\t\tfor await (const email of receiver.emails) {\n\t\t\tif (email.verified) {\n\t\t\t\tqueueItems.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tdata: await getEmailData({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\tmsg: messageWithUnicode,\n\t\t\t\t\t\t\t...(attachments.length > 0 ? { attachments } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t\treceiver,\n\t\t\t\t\t\tsender,\n\t\t\t\t\t\tsubscription,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\temailAddress: email.address,\n\t\t\t\t\t\thasMentionToUser,\n\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (queueItems.length) {\n\t\tvoid Notification.scheduleItem({\n\t\t\tuser: receiver,\n\t\t\tuid: subscription.u._id,\n\t\t\trid: room._id,\n\t\t\tmid: message._id,\n\t\t\titems: queueItems,\n\t\t});\n\t}\n};\n\nconst project = {\n\t$project: {\n\t\t'desktopNotifications': 1,\n\t\t'emailNotifications': 1,\n\t\t'mobilePushNotifications': 1,\n\t\t'muteGroupMentions': 1,\n\t\t'name': 1,\n\t\t'rid': 1,\n\t\t'userHighlights': 1,\n\t\t'u._id': 1,\n\t\t'receiver.active': 1,\n\t\t'receiver.emails': 1,\n\t\t'receiver.language': 1,\n\t\t'receiver.status': 1,\n\t\t'receiver.statusConnection': 1,\n\t\t'receiver.username': 1,\n\t\t'receiver.settings.preferences.enableMobileRinging': 1,\n\t},\n} as const;\n\nconst filter = {\n\t$match: {\n\t\t'receiver.active': true,\n\t},\n} as const;\n\nconst lookup = {\n\t$lookup: {\n\t\tfrom: 'users',\n\t\tlocalField: 'u._id',\n\t\tforeignField: '_id',\n\t\tas: 'receiver',\n\t},\n} as const;\n\nexport async function sendMessageNotifications(message: IMessage, room: IRoom, usersInThread: string[] = []) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\tconst sender = await roomCoordinator.getRoomDirectives(room.t).getMsgSender(message);\n\tif (!sender) {\n\t\treturn message;\n\t}\n\n\tconst { toAll: hasMentionToAll, toHere: hasMentionToHere, mentionIds } = await getMentions(message);\n\n\tconst mentionIdsWithoutGroups = [...mentionIds];\n\n\t// getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n\tif (hasMentionToAll) {\n\t\tmentionIds.push('all');\n\t}\n\tif (hasMentionToHere) {\n\t\tmentionIds.push('here');\n\t}\n\n\t// add users in thread to mentions array because they follow the same rules\n\tmentionIds.push(...usersInThread);\n\n\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\tif (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions ?? []);\n\t}\n\n\t// Don't fetch all users if room exceeds max members\n\tconst maxMembersForNotification = settings.get<number>('Notifications_Max_Room_Members');\n\tconst roomMembersCount = await Users.countRoomMembers(room._id);\n\tconst disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n\n\tconst query: WithRequiredProperty<RootFilterOperators<ISubscription>, '$or'> = {\n\t\trid: room._id,\n\t\tignored: { $ne: sender._id },\n\t\tdisableNotifications: { $ne: true },\n\t\t$or: [{ 'userHighlights.0': { $exists: 1 } }, ...(usersInThread.length > 0 ? [{ 'u._id': { $in: usersInThread } }] : [])],\n\t} as const;\n\n\t(['desktop', 'mobile', 'email'] as const).forEach((kind) => {\n\t\tconst notificationField = kind === 'mobile' ? 'mobilePush' : `${kind}Notifications`;\n\n\t\tquery.$or.push({\n\t\t\t[notificationField]: 'all',\n\t\t\t...(disableAllMessageNotifications ? { [`${kind}PrefOrigin`]: { $ne: 'user' } } : {}),\n\t\t});\n\n\t\tif (disableAllMessageNotifications) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t});\n\t\t} else if (mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\n\t\tconst serverField = kind === 'email' ? 'emailNotificationMode' : `${kind}Notifications`;\n\t\tconst serverPreference = settings.get(`Accounts_Default_User_Preferences_${serverField}`);\n\n\t\tif (serverPreference === 'all' || hasMentionToAll || hasMentionToHere || room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t});\n\t\t} else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\t});\n\n\t// the find below is crucial. All subscription records returned will receive at least one kind of notification.\n\t// the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n\n\tconst subscriptions = await Subscriptions.col.aggregate<SubscriptionAggregation>([{ $match: query }, lookup, filter, project]).toArray();\n\n\tsubscriptions.forEach(\n\t\t(subscription) =>\n\t\t\tvoid sendNotification({\n\t\t\t\tsubscription,\n\t\t\t\tsender,\n\t\t\t\thasMentionToAll,\n\t\t\t\thasMentionToHere,\n\t\t\t\tmessage,\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmentionIds,\n\t\t\t\tdisableAllMessageNotifications,\n\t\t\t\thasReplyToThread: usersInThread?.includes(subscription.u._id),\n\t\t\t}),\n\t);\n\n\treturn {\n\t\tsender,\n\t\thasMentionToAll,\n\t\thasMentionToHere,\n\t\tnotificationMessage,\n\t\tmentionIds,\n\t\tmentionIdsWithoutGroups,\n\t};\n}\n\nexport async function sendAllNotifications(message: IMessage, room: IRoom) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn message;\n\t}\n\n\t// threads\n\tif (message.tmid) {\n\t\treturn message;\n\t}\n\t// skips this callback if the message was edited\n\tif (isEditedMessage(message)) {\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(new Date())) > 60000) {\n\t\treturn message;\n\t}\n\n\tif (!room || room.t == null) {\n\t\treturn message;\n\t}\n\n\tawait sendMessageNotifications(message, room);\n\n\treturn message;\n}\n\nsettings.watch('Troubleshoot_Disable_Notifications', (value) => {\n\tif (value) {\n\t\treturn callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n\t}\n\n\tcallbacks.add(\n\t\t'afterSaveMessage',\n\t\t(message, { room }) => sendAllNotifications(message, room),\n\t\tcallbacks.priority.LOW,\n\t\t'sendNotificationsOnMessage',\n\t);\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      sendNotification: () => sendNotification,\n      sendMessageNotifications: () => sendMessageNotifications,\n      sendAllNotifications: () => sendAllNotifications\n    });\n    let isEditedMessage;\n    module.link(\"@rocket.chat/core-typings\", {\n      isEditedMessage(v) {\n        isEditedMessage = v;\n      }\n    }, 0);\n    let Subscriptions, Users;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let emojione;\n    module.link(\"emojione\", {\n      default(v) {\n        emojione = v;\n      }\n    }, 2);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 5);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 6);\n    let Notification;\n    module.link(\"../../../notification-queue/server/NotificationQueue\", {\n      Notification(v) {\n        Notification = v;\n      }\n    }, 7);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 8);\n    let parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames;\n    module.link(\"../functions/notifications\", {\n      parseMessageTextPerUser(v) {\n        parseMessageTextPerUser = v;\n      },\n      replaceMentionedUsernamesWithFullNames(v) {\n        replaceMentionedUsernamesWithFullNames = v;\n      }\n    }, 9);\n    let notifyDesktopUser, shouldNotifyDesktop;\n    module.link(\"../functions/notifications/desktop\", {\n      notifyDesktopUser(v) {\n        notifyDesktopUser = v;\n      },\n      shouldNotifyDesktop(v) {\n        shouldNotifyDesktop = v;\n      }\n    }, 10);\n    let getEmailData, shouldNotifyEmail;\n    module.link(\"../functions/notifications/email\", {\n      getEmailData(v) {\n        getEmailData = v;\n      },\n      shouldNotifyEmail(v) {\n        shouldNotifyEmail = v;\n      }\n    }, 11);\n    let messageContainsHighlight;\n    module.link(\"../functions/notifications/messageContainsHighlight\", {\n      messageContainsHighlight(v) {\n        messageContainsHighlight = v;\n      }\n    }, 12);\n    let getPushData, shouldNotifyMobile;\n    module.link(\"../functions/notifications/mobile\", {\n      getPushData(v) {\n        getPushData = v;\n      },\n      shouldNotifyMobile(v) {\n        shouldNotifyMobile = v;\n      }\n    }, 13);\n    let getMentions;\n    module.link(\"./notifyUsersOnMessage\", {\n      getMentions(v) {\n        getMentions = v;\n      }\n    }, 14);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const sendNotification = async _ref => {\n      var _receiver$status, _receiver$statusConne, _receiver$settings;\n      let {\n        subscription,\n        sender,\n        hasReplyToThread,\n        hasMentionToAll,\n        hasMentionToHere,\n        message,\n        notificationMessage,\n        room,\n        mentionIds,\n        disableAllMessageNotifications\n      } = _ref;\n      if (settings.get('Troubleshoot_Disable_Notifications') === true) {\n        return;\n      }\n      // don't notify the sender\n      if (subscription.u._id === sender._id) {\n        return;\n      }\n      const hasMentionToUser = mentionIds.includes(subscription.u._id);\n      // mute group notifications (@here and @all) if not directly mentioned as well\n      if (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n        return;\n      }\n      if (!subscription.receiver) {\n        subscription.receiver = [await Users.findOneById(subscription.u._id, {\n          projection: {\n            'active': 1,\n            'emails': 1,\n            'language': 1,\n            'status': 1,\n            'statusConnection': 1,\n            'username': 1,\n            'settings.preferences.enableMobileRinging': 1\n          }\n        })];\n      }\n      const [receiver] = subscription.receiver;\n      if (!receiver) {\n        throw new Error('receiver not found');\n      }\n      const roomType = room.t;\n      // If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n      if (roomType === 'd' && !(await hasPermissionAsync(subscription.u._id, 'view-d-room'))) {\n        return;\n      }\n      const isThread = !!message.tmid && !message.tshow;\n      const isVideoConf = message.t === 'videoconf';\n      notificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n      const isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n      const {\n        desktopNotifications,\n        mobilePushNotifications,\n        emailNotifications\n      } = subscription;\n      // busy users don't receive desktop notification\n      if (shouldNotifyDesktop({\n        disableAllMessageNotifications,\n        status: (_receiver$status = receiver.status) !== null && _receiver$status !== void 0 ? _receiver$status : 'offline',\n        statusConnection: (_receiver$statusConne = receiver.statusConnection) !== null && _receiver$statusConne !== void 0 ? _receiver$statusConne : 'offline',\n        desktopNotifications,\n        hasMentionToAll,\n        hasMentionToHere,\n        isHighlighted,\n        hasMentionToUser,\n        hasReplyToThread,\n        roomType,\n        isThread\n      })) {\n        await notifyDesktopUser({\n          notificationMessage,\n          userId: subscription.u._id,\n          user: sender,\n          message,\n          room\n        });\n      }\n      const queueItems = [];\n      if (shouldNotifyMobile({\n        disableAllMessageNotifications,\n        mobilePushNotifications,\n        hasMentionToAll,\n        isHighlighted,\n        hasMentionToUser,\n        hasReplyToThread,\n        roomType,\n        isThread,\n        isVideoConf,\n        userPreferences: (_receiver$settings = receiver.settings) === null || _receiver$settings === void 0 ? void 0 : _receiver$settings.preferences,\n        roomUids: room.uids\n      })) {\n        queueItems.push({\n          type: 'push',\n          data: await getPushData({\n            notificationMessage,\n            room,\n            message,\n            userId: subscription.u._id,\n            senderUsername: sender.username,\n            senderName: sender.name,\n            receiver\n          })\n        });\n      }\n      if (receiver.emails && shouldNotifyEmail({\n        disableAllMessageNotifications,\n        statusConnection: receiver.statusConnection,\n        emailNotifications,\n        isHighlighted,\n        hasMentionToUser,\n        hasMentionToAll,\n        hasReplyToThread,\n        roomType,\n        isThread\n      })) {\n        var _message$attachments, _message$attachments2;\n        const messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n        const firstAttachment = ((_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments.length) && message.attachments.shift();\n        if (firstAttachment) {\n          firstAttachment.description = typeof firstAttachment.description === 'string' ? emojione.shortnameToUnicode(firstAttachment.description) : undefined;\n          firstAttachment.text = typeof firstAttachment.text === 'string' ? emojione.shortnameToUnicode(firstAttachment.text) : undefined;\n        }\n        const attachments = firstAttachment ? [firstAttachment, ...((_message$attachments2 = message.attachments) !== null && _message$attachments2 !== void 0 ? _message$attachments2 : [])].filter(Boolean) : [];\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(receiver.emails), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const email = _step.value;\n            {\n              if (email.verified) {\n                queueItems.push({\n                  type: 'email',\n                  data: await getEmailData({\n                    message: _objectSpread(_objectSpread({}, message), {}, {\n                      msg: messageWithUnicode\n                    }, attachments.length > 0 ? {\n                      attachments\n                    } : {}),\n                    receiver,\n                    sender,\n                    subscription,\n                    room,\n                    emailAddress: email.address,\n                    hasMentionToUser\n                  })\n                });\n                break;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n      if (queueItems.length) {\n        void Notification.scheduleItem({\n          user: receiver,\n          uid: subscription.u._id,\n          rid: room._id,\n          mid: message._id,\n          items: queueItems\n        });\n      }\n    };\n    const project = {\n      $project: {\n        'desktopNotifications': 1,\n        'emailNotifications': 1,\n        'mobilePushNotifications': 1,\n        'muteGroupMentions': 1,\n        'name': 1,\n        'rid': 1,\n        'userHighlights': 1,\n        'u._id': 1,\n        'receiver.active': 1,\n        'receiver.emails': 1,\n        'receiver.language': 1,\n        'receiver.status': 1,\n        'receiver.statusConnection': 1,\n        'receiver.username': 1,\n        'receiver.settings.preferences.enableMobileRinging': 1\n      }\n    };\n    const filter = {\n      $match: {\n        'receiver.active': true\n      }\n    };\n    const lookup = {\n      $lookup: {\n        from: 'users',\n        localField: 'u._id',\n        foreignField: '_id',\n        as: 'receiver'\n      }\n    };\n    async function sendMessageNotifications(message, room) {\n      let usersInThread = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      if (settings.get('Troubleshoot_Disable_Notifications') === true) {\n        return;\n      }\n      const sender = await roomCoordinator.getRoomDirectives(room.t).getMsgSender(message);\n      if (!sender) {\n        return message;\n      }\n      const {\n        toAll: hasMentionToAll,\n        toHere: hasMentionToHere,\n        mentionIds\n      } = await getMentions(message);\n      const mentionIdsWithoutGroups = [...mentionIds];\n      // getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n      if (hasMentionToAll) {\n        mentionIds.push('all');\n      }\n      if (hasMentionToHere) {\n        mentionIds.push('here');\n      }\n      // add users in thread to mentions array because they follow the same rules\n      mentionIds.push(...usersInThread);\n      let notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n      if (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n        var _message$mentions;\n        notificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, (_message$mentions = message.mentions) !== null && _message$mentions !== void 0 ? _message$mentions : []);\n      }\n      // Don't fetch all users if room exceeds max members\n      const maxMembersForNotification = settings.get('Notifications_Max_Room_Members');\n      const roomMembersCount = await Users.countRoomMembers(room._id);\n      const disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n      const query = {\n        rid: room._id,\n        ignored: {\n          $ne: sender._id\n        },\n        disableNotifications: {\n          $ne: true\n        },\n        $or: [{\n          'userHighlights.0': {\n            $exists: 1\n          }\n        }, ...(usersInThread.length > 0 ? [{\n          'u._id': {\n            $in: usersInThread\n          }\n        }] : [])]\n      };\n      ['desktop', 'mobile', 'email'].forEach(kind => {\n        const notificationField = kind === 'mobile' ? 'mobilePush' : \"\".concat(kind, \"Notifications\");\n        query.$or.push(_objectSpread({\n          [notificationField]: 'all'\n        }, disableAllMessageNotifications ? {\n          [\"\".concat(kind, \"PrefOrigin\")]: {\n            $ne: 'user'\n          }\n        } : {}));\n        if (disableAllMessageNotifications) {\n          return;\n        }\n        if (room.t === 'd') {\n          query.$or.push({\n            [notificationField]: 'mentions'\n          });\n        } else if (mentionIdsWithoutGroups.length > 0) {\n          query.$or.push({\n            [notificationField]: 'mentions',\n            'u._id': {\n              $in: mentionIdsWithoutGroups\n            }\n          });\n        }\n        const serverField = kind === 'email' ? 'emailNotificationMode' : \"\".concat(kind, \"Notifications\");\n        const serverPreference = settings.get(\"Accounts_Default_User_Preferences_\".concat(serverField));\n        if (serverPreference === 'all' || hasMentionToAll || hasMentionToHere || room.t === 'd') {\n          query.$or.push({\n            [notificationField]: {\n              $exists: false\n            }\n          });\n        } else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n          query.$or.push({\n            [notificationField]: {\n              $exists: false\n            },\n            'u._id': {\n              $in: mentionIdsWithoutGroups\n            }\n          });\n        }\n      });\n      // the find below is crucial. All subscription records returned will receive at least one kind of notification.\n      // the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n      const subscriptions = await Subscriptions.col.aggregate([{\n        $match: query\n      }, lookup, filter, project]).toArray();\n      subscriptions.forEach(subscription => void sendNotification({\n        subscription,\n        sender,\n        hasMentionToAll,\n        hasMentionToHere,\n        message,\n        notificationMessage,\n        room,\n        mentionIds,\n        disableAllMessageNotifications,\n        hasReplyToThread: usersInThread === null || usersInThread === void 0 ? void 0 : usersInThread.includes(subscription.u._id)\n      }));\n      return {\n        sender,\n        hasMentionToAll,\n        hasMentionToHere,\n        notificationMessage,\n        mentionIds,\n        mentionIdsWithoutGroups\n      };\n    }\n    async function sendAllNotifications(message, room) {\n      if (settings.get('Troubleshoot_Disable_Notifications') === true) {\n        return message;\n      }\n      // threads\n      if (message.tmid) {\n        return message;\n      }\n      // skips this callback if the message was edited\n      if (isEditedMessage(message)) {\n        return message;\n      }\n      if (message.ts && Math.abs(moment(message.ts).diff(new Date())) > 60000) {\n        return message;\n      }\n      if (!room || room.t == null) {\n        return message;\n      }\n      await sendMessageNotifications(message, room);\n      return message;\n    }\n    settings.watch('Troubleshoot_Disable_Notifications', value => {\n      if (value) {\n        return callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n      }\n      callbacks.add('afterSaveMessage', (message, _ref2) => {\n        let {\n          room\n        } = _ref2;\n        return sendAllNotifications(message, room);\n      }, callbacks.priority.LOW, 'sendNotificationsOnMessage');\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","sendNotification","sendMessageNotifications","sendAllNotifications","isEditedMessage","Subscriptions","Users","emojione","moment","callbacks","roomCoordinator","hasPermissionAsync","Notification","settings","parseMessageTextPerUser","replaceMentionedUsernamesWithFullNames","notifyDesktopUser","shouldNotifyDesktop","getEmailData","shouldNotifyEmail","messageContainsHighlight","getPushData","shouldNotifyMobile","getMentions","__reifyWaitForDeps__","_ref","_receiver$status","_receiver$statusConne","_receiver$settings","subscription","sender","hasReplyToThread","hasMentionToAll","hasMentionToHere","message","notificationMessage","room","mentionIds","disableAllMessageNotifications","get","u","_id","hasMentionToUser","includes","muteGroupMentions","receiver","findOneById","projection","Error","roomType","t","isThread","tmid","tshow","isVideoConf","isHighlighted","userHighlights","desktopNotifications","mobilePushNotifications","emailNotifications","status","statusConnection","userId","user","queueItems","userPreferences","preferences","roomUids","uids","push","type","data","senderUsername","username","senderName","name","emails","_message$attachments","_message$attachments2","messageWithUnicode","msg","shortnameToUnicode","firstAttachment","attachments","length","shift","description","undefined","text","filter","Boolean","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","email","value","verified","emailAddress","address","err","return","scheduleItem","uid","rid","mid","items","project","$project","$match","lookup","$lookup","from","localField","foreignField","as","usersInThread","arguments","getRoomDirectives","getMsgSender","toAll","toHere","mentionIdsWithoutGroups","run","_message$mentions","mentions","maxMembersForNotification","roomMembersCount","countRoomMembers","query","ignored","$ne","disableNotifications","$or","$exists","$in","forEach","kind","notificationField","concat","serverField","serverPreference","subscriptions","col","aggregate","toArray","ts","Math","abs","diff","Date","watch","remove","add","_ref2","priority","LOW","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/lib/sendNotificationsOnMessage.ts"],"sourcesContent":["import {\n\ttype IMessage,\n\ttype ISubscription,\n\ttype IUser,\n\ttype IRoom,\n\ttype NotificationItem,\n\tisEditedMessage,\n\ttype AtLeast,\n} from '@rocket.chat/core-typings';\nimport { Subscriptions, Users } from '@rocket.chat/models';\nimport emojione from 'emojione';\nimport moment from 'moment';\nimport type { RootFilterOperators } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Notification } from '../../../notification-queue/server/NotificationQueue';\nimport { settings } from '../../../settings/server';\nimport { parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames } from '../functions/notifications';\nimport { notifyDesktopUser, shouldNotifyDesktop } from '../functions/notifications/desktop';\nimport { getEmailData, shouldNotifyEmail } from '../functions/notifications/email';\nimport { messageContainsHighlight } from '../functions/notifications/messageContainsHighlight';\nimport { getPushData, shouldNotifyMobile } from '../functions/notifications/mobile';\nimport { getMentions } from './notifyUsersOnMessage';\n\ntype SubscriptionAggregation = {\n\treceiver: [Pick<IUser, 'active' | 'emails' | 'language' | 'status' | 'statusConnection' | 'username' | 'settings'> | null];\n} & Pick<\n\tISubscription,\n\t'desktopNotifications' | 'emailNotifications' | 'mobilePushNotifications' | 'muteGroupMentions' | 'name' | 'rid' | 'userHighlights' | 'u'\n>;\n\ntype WithRequiredProperty<Type, Key extends keyof Type> = Type & {\n\t[Property in Key]-?: Type[Property];\n};\n\nexport const sendNotification = async ({\n\tsubscription,\n\tsender,\n\thasReplyToThread,\n\thasMentionToAll,\n\thasMentionToHere,\n\tmessage,\n\tnotificationMessage,\n\troom,\n\tmentionIds,\n\tdisableAllMessageNotifications,\n}: {\n\tsubscription: SubscriptionAggregation;\n\tsender: Pick<IUser, '_id' | 'name' | 'username'>;\n\n\thasReplyToThread: boolean;\n\thasMentionToAll: boolean;\n\thasMentionToHere: boolean;\n\tmessage: AtLeast<IMessage, '_id' | 'u' | 'msg' | 't' | 'attachments'>;\n\tnotificationMessage: string;\n\troom: IRoom;\n\tmentionIds: string[];\n\tdisableAllMessageNotifications: boolean;\n}) => {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\t// don't notify the sender\n\tif (subscription.u._id === sender._id) {\n\t\treturn;\n\t}\n\n\tconst hasMentionToUser = mentionIds.includes(subscription.u._id);\n\n\t// mute group notifications (@here and @all) if not directly mentioned as well\n\tif (!hasMentionToUser && !hasReplyToThread && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {\n\t\treturn;\n\t}\n\n\tif (!subscription.receiver) {\n\t\tsubscription.receiver = [\n\t\t\tawait Users.findOneById(subscription.u._id, {\n\t\t\t\tprojection: {\n\t\t\t\t\t'active': 1,\n\t\t\t\t\t'emails': 1,\n\t\t\t\t\t'language': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t\t'statusConnection': 1,\n\t\t\t\t\t'username': 1,\n\t\t\t\t\t'settings.preferences.enableMobileRinging': 1,\n\t\t\t\t},\n\t\t\t}),\n\t\t];\n\t}\n\n\tconst [receiver] = subscription.receiver;\n\n\tif (!receiver) {\n\t\tthrow new Error('receiver not found');\n\t}\n\n\tconst roomType = room.t;\n\t// If the user doesn't have permission to view direct messages, don't send notification of direct messages.\n\tif (roomType === 'd' && !(await hasPermissionAsync(subscription.u._id, 'view-d-room'))) {\n\t\treturn;\n\t}\n\n\tconst isThread = !!message.tmid && !message.tshow;\n\tconst isVideoConf = message.t === 'videoconf';\n\n\tnotificationMessage = await parseMessageTextPerUser(notificationMessage, message, receiver);\n\n\tconst isHighlighted = messageContainsHighlight(message, subscription.userHighlights);\n\n\tconst { desktopNotifications, mobilePushNotifications, emailNotifications } = subscription;\n\n\t// busy users don't receive desktop notification\n\tif (\n\t\tshouldNotifyDesktop({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatus: receiver.status ?? 'offline',\n\t\t\tstatusConnection: receiver.statusConnection ?? 'offline',\n\t\t\tdesktopNotifications,\n\t\t\thasMentionToAll,\n\t\t\thasMentionToHere,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tawait notifyDesktopUser({\n\t\t\tnotificationMessage,\n\t\t\tuserId: subscription.u._id,\n\t\t\tuser: sender,\n\t\t\tmessage,\n\t\t\troom,\n\t\t});\n\t}\n\n\tconst queueItems: NotificationItem[] = [];\n\n\tif (\n\t\tshouldNotifyMobile({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tmobilePushNotifications,\n\t\t\thasMentionToAll,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t\tisVideoConf,\n\t\t\tuserPreferences: receiver.settings?.preferences,\n\t\t\troomUids: room.uids,\n\t\t})\n\t) {\n\t\tqueueItems.push({\n\t\t\ttype: 'push',\n\t\t\tdata: await getPushData({\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmessage,\n\t\t\t\tuserId: subscription.u._id,\n\t\t\t\tsenderUsername: sender.username,\n\t\t\t\tsenderName: sender.name,\n\t\t\t\treceiver,\n\t\t\t}),\n\t\t});\n\t}\n\n\tif (\n\t\treceiver.emails &&\n\t\tshouldNotifyEmail({\n\t\t\tdisableAllMessageNotifications,\n\t\t\tstatusConnection: receiver.statusConnection,\n\t\t\temailNotifications,\n\t\t\tisHighlighted,\n\t\t\thasMentionToUser,\n\t\t\thasMentionToAll,\n\t\t\thasReplyToThread,\n\t\t\troomType,\n\t\t\tisThread,\n\t\t})\n\t) {\n\t\tconst messageWithUnicode = message.msg ? emojione.shortnameToUnicode(message.msg) : message.msg;\n\t\tconst firstAttachment = message.attachments?.length && message.attachments.shift();\n\n\t\tif (firstAttachment) {\n\t\t\tfirstAttachment.description =\n\t\t\t\ttypeof firstAttachment.description === 'string' ? emojione.shortnameToUnicode(firstAttachment.description) : undefined;\n\t\t\tfirstAttachment.text = typeof firstAttachment.text === 'string' ? emojione.shortnameToUnicode(firstAttachment.text) : undefined;\n\t\t}\n\n\t\tconst attachments = firstAttachment ? [firstAttachment, ...(message.attachments ?? [])].filter(Boolean) : [];\n\t\tfor await (const email of receiver.emails) {\n\t\t\tif (email.verified) {\n\t\t\t\tqueueItems.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tdata: await getEmailData({\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t...message,\n\t\t\t\t\t\t\tmsg: messageWithUnicode,\n\t\t\t\t\t\t\t...(attachments.length > 0 ? { attachments } : {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t\treceiver,\n\t\t\t\t\t\tsender,\n\t\t\t\t\t\tsubscription,\n\t\t\t\t\t\troom,\n\t\t\t\t\t\temailAddress: email.address,\n\t\t\t\t\t\thasMentionToUser,\n\t\t\t\t\t}),\n\t\t\t\t});\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (queueItems.length) {\n\t\tvoid Notification.scheduleItem({\n\t\t\tuser: receiver,\n\t\t\tuid: subscription.u._id,\n\t\t\trid: room._id,\n\t\t\tmid: message._id,\n\t\t\titems: queueItems,\n\t\t});\n\t}\n};\n\nconst project = {\n\t$project: {\n\t\t'desktopNotifications': 1,\n\t\t'emailNotifications': 1,\n\t\t'mobilePushNotifications': 1,\n\t\t'muteGroupMentions': 1,\n\t\t'name': 1,\n\t\t'rid': 1,\n\t\t'userHighlights': 1,\n\t\t'u._id': 1,\n\t\t'receiver.active': 1,\n\t\t'receiver.emails': 1,\n\t\t'receiver.language': 1,\n\t\t'receiver.status': 1,\n\t\t'receiver.statusConnection': 1,\n\t\t'receiver.username': 1,\n\t\t'receiver.settings.preferences.enableMobileRinging': 1,\n\t},\n} as const;\n\nconst filter = {\n\t$match: {\n\t\t'receiver.active': true,\n\t},\n} as const;\n\nconst lookup = {\n\t$lookup: {\n\t\tfrom: 'users',\n\t\tlocalField: 'u._id',\n\t\tforeignField: '_id',\n\t\tas: 'receiver',\n\t},\n} as const;\n\nexport async function sendMessageNotifications(message: IMessage, room: IRoom, usersInThread: string[] = []) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn;\n\t}\n\n\tconst sender = await roomCoordinator.getRoomDirectives(room.t).getMsgSender(message);\n\tif (!sender) {\n\t\treturn message;\n\t}\n\n\tconst { toAll: hasMentionToAll, toHere: hasMentionToHere, mentionIds } = await getMentions(message);\n\n\tconst mentionIdsWithoutGroups = [...mentionIds];\n\n\t// getMentions removes `all` and `here` from mentionIds so we need to add them back for compatibility\n\tif (hasMentionToAll) {\n\t\tmentionIds.push('all');\n\t}\n\tif (hasMentionToHere) {\n\t\tmentionIds.push('here');\n\t}\n\n\t// add users in thread to mentions array because they follow the same rules\n\tmentionIds.push(...usersInThread);\n\n\tlet notificationMessage = await callbacks.run('beforeSendMessageNotifications', message.msg);\n\tif (mentionIds.length > 0 && settings.get('UI_Use_Real_Name')) {\n\t\tnotificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions ?? []);\n\t}\n\n\t// Don't fetch all users if room exceeds max members\n\tconst maxMembersForNotification = settings.get<number>('Notifications_Max_Room_Members');\n\tconst roomMembersCount = await Users.countRoomMembers(room._id);\n\tconst disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;\n\n\tconst query: WithRequiredProperty<RootFilterOperators<ISubscription>, '$or'> = {\n\t\trid: room._id,\n\t\tignored: { $ne: sender._id },\n\t\tdisableNotifications: { $ne: true },\n\t\t$or: [{ 'userHighlights.0': { $exists: 1 } }, ...(usersInThread.length > 0 ? [{ 'u._id': { $in: usersInThread } }] : [])],\n\t} as const;\n\n\t(['desktop', 'mobile', 'email'] as const).forEach((kind) => {\n\t\tconst notificationField = kind === 'mobile' ? 'mobilePush' : `${kind}Notifications`;\n\n\t\tquery.$or.push({\n\t\t\t[notificationField]: 'all',\n\t\t\t...(disableAllMessageNotifications ? { [`${kind}PrefOrigin`]: { $ne: 'user' } } : {}),\n\t\t});\n\n\t\tif (disableAllMessageNotifications) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t});\n\t\t} else if (mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: 'mentions',\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\n\t\tconst serverField = kind === 'email' ? 'emailNotificationMode' : `${kind}Notifications`;\n\t\tconst serverPreference = settings.get(`Accounts_Default_User_Preferences_${serverField}`);\n\n\t\tif (serverPreference === 'all' || hasMentionToAll || hasMentionToHere || room.t === 'd') {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t});\n\t\t} else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length > 0) {\n\t\t\tquery.$or.push({\n\t\t\t\t[notificationField]: { $exists: false },\n\t\t\t\t'u._id': { $in: mentionIdsWithoutGroups },\n\t\t\t});\n\t\t}\n\t});\n\n\t// the find below is crucial. All subscription records returned will receive at least one kind of notification.\n\t// the query is defined by the server's default values and Notifications_Max_Room_Members setting.\n\n\tconst subscriptions = await Subscriptions.col.aggregate<SubscriptionAggregation>([{ $match: query }, lookup, filter, project]).toArray();\n\n\tsubscriptions.forEach(\n\t\t(subscription) =>\n\t\t\tvoid sendNotification({\n\t\t\t\tsubscription,\n\t\t\t\tsender,\n\t\t\t\thasMentionToAll,\n\t\t\t\thasMentionToHere,\n\t\t\t\tmessage,\n\t\t\t\tnotificationMessage,\n\t\t\t\troom,\n\t\t\t\tmentionIds,\n\t\t\t\tdisableAllMessageNotifications,\n\t\t\t\thasReplyToThread: usersInThread?.includes(subscription.u._id),\n\t\t\t}),\n\t);\n\n\treturn {\n\t\tsender,\n\t\thasMentionToAll,\n\t\thasMentionToHere,\n\t\tnotificationMessage,\n\t\tmentionIds,\n\t\tmentionIdsWithoutGroups,\n\t};\n}\n\nexport async function sendAllNotifications(message: IMessage, room: IRoom) {\n\tif (settings.get<boolean>('Troubleshoot_Disable_Notifications') === true) {\n\t\treturn message;\n\t}\n\n\t// threads\n\tif (message.tmid) {\n\t\treturn message;\n\t}\n\t// skips this callback if the message was edited\n\tif (isEditedMessage(message)) {\n\t\treturn message;\n\t}\n\n\tif (message.ts && Math.abs(moment(message.ts).diff(new Date())) > 60000) {\n\t\treturn message;\n\t}\n\n\tif (!room || room.t == null) {\n\t\treturn message;\n\t}\n\n\tawait sendMessageNotifications(message, room);\n\n\treturn message;\n}\n\nsettings.watch('Troubleshoot_Disable_Notifications', (value) => {\n\tif (value) {\n\t\treturn callbacks.remove('afterSaveMessage', 'sendNotificationsOnMessage');\n\t}\n\n\tcallbacks.add(\n\t\t'afterSaveMessage',\n\t\t(message, { room }) => sendAllNotifications(message, room),\n\t\tcallbacks.priority.LOW,\n\t\t'sendNotificationsOnMessage',\n\t);\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"17ed86042dd869178191e6895411ee6456e04680"}
