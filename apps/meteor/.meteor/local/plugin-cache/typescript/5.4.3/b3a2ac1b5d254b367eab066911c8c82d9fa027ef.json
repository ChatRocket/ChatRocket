{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/startup/services.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/startup/services.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/startup/services.ts","inputSourceMap":{"version":3,"file":"ee/server/startup/services.ts","sourceRoot":"","sources":["ee/server/startup/services.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAE/C,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,6CAA6C,CAAC;AAChF,OAAO,EAAE,cAAc,EAAE,MAAM,kDAAkD,CAAC;AAClF,OAAO,EAAE,aAAa,EAAE,MAAM,2EAA2E,CAAC;AAC1G,OAAO,EAAE,kBAAkB,EAAE,MAAM,oDAAoD,CAAC;AACxF,OAAO,EAAE,mBAAmB,EAAE,MAAM,sCAAsC,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAElF,+EAA+E;AAC/E,GAAG,CAAC,eAAe,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAC9C,GAAG,CAAC,eAAe,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;AACzC,GAAG,CAAC,eAAe,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;AAC1C,GAAG,CAAC,eAAe,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AAC/C,GAAG,CAAC,eAAe,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;AACzC,GAAG,CAAC,eAAe,CAAC,IAAI,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAEzE,4EAA4E;AAC5E,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;IACpB,GAAG,CAAC,eAAe,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,IAAmB,EAAE;IAC/D,IAAI,iBAAoC,CAAC;IAEzC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;QAChC,iBAAiB,GAAG,MAAM,iBAAiB,CAAC,uBAAuB,EAAE,CAAC;QACtE,GAAG,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,OAAO,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;QAChF,IAAI,iBAAiB,EAAE,CAAC;YACvB,MAAM,GAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;QACD,GAAG,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { License } from '@rocket.chat/license';\n\nimport { settings } from '../../../app/settings/server/cached';\nimport { isRunningMs } from '../../../server/lib/isRunningMs';\nimport { FederationService } from '../../../server/services/federation/service';\nimport { LicenseService } from '../../app/license/server/license.internalService';\nimport { OmnichannelEE } from '../../app/livechat-enterprise/server/services/omnichannel.internalService';\nimport { EnterpriseSettings } from '../../app/settings/server/settings.internalService';\nimport { FederationServiceEE } from '../local-services/federation/service';\nimport { InstanceService } from '../local-services/instance/service';\nimport { LDAPEEService } from '../local-services/ldap/service';\nimport { MessageReadsService } from '../local-services/message-reads/service';\nimport { VoipFreeSwitchService } from '../local-services/voip-freeswitch/service';\n\n// TODO consider registering these services only after a valid license is added\napi.registerService(new EnterpriseSettings());\napi.registerService(new LDAPEEService());\napi.registerService(new LicenseService());\napi.registerService(new MessageReadsService());\napi.registerService(new OmnichannelEE());\napi.registerService(new VoipFreeSwitchService((id) => settings.get(id)));\n\n// when not running micro services we want to start up the instance intercom\nif (!isRunningMs()) {\n\tapi.registerService(new InstanceService());\n}\n\nexport const startFederationService = async (): Promise<void> => {\n\tlet federationService: FederationService;\n\n\tif (!License.hasValidLicense()) {\n\t\tfederationService = await FederationService.createFederationService();\n\t\tapi.registerService(federationService);\n\t}\n\n\tvoid License.onLicense('federation', async () => {\n\t\tconst federationServiceEE = await FederationServiceEE.createFederationService();\n\t\tif (federationService) {\n\t\t\tawait api.destroyService(federationService);\n\t\t}\n\t\tapi.registerService(federationServiceEE);\n\t});\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/startup/services.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/startup/services.ts","inputSourceMap":{"version":3,"file":"ee/server/startup/services.ts","sourceRoot":"","sources":["ee/server/startup/services.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAE/C,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,6CAA6C,CAAC;AAChF,OAAO,EAAE,cAAc,EAAE,MAAM,kDAAkD,CAAC;AAClF,OAAO,EAAE,aAAa,EAAE,MAAM,2EAA2E,CAAC;AAC1G,OAAO,EAAE,kBAAkB,EAAE,MAAM,oDAAoD,CAAC;AACxF,OAAO,EAAE,mBAAmB,EAAE,MAAM,sCAAsC,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAC/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAElF,+EAA+E;AAC/E,GAAG,CAAC,eAAe,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAC9C,GAAG,CAAC,eAAe,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;AACzC,GAAG,CAAC,eAAe,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;AAC1C,GAAG,CAAC,eAAe,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AAC/C,GAAG,CAAC,eAAe,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;AACzC,GAAG,CAAC,eAAe,CAAC,IAAI,qBAAqB,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAEzE,4EAA4E;AAC5E,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;IACpB,GAAG,CAAC,eAAe,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,KAAK,IAAmB,EAAE;IAC/D,IAAI,iBAAoC,CAAC;IAEzC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;QAChC,iBAAiB,GAAG,MAAM,iBAAiB,CAAC,uBAAuB,EAAE,CAAC;QACtE,GAAG,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,OAAO,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,uBAAuB,EAAE,CAAC;QAChF,IAAI,iBAAiB,EAAE,CAAC;YACvB,MAAM,GAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;QACD,GAAG,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { License } from '@rocket.chat/license';\n\nimport { settings } from '../../../app/settings/server/cached';\nimport { isRunningMs } from '../../../server/lib/isRunningMs';\nimport { FederationService } from '../../../server/services/federation/service';\nimport { LicenseService } from '../../app/license/server/license.internalService';\nimport { OmnichannelEE } from '../../app/livechat-enterprise/server/services/omnichannel.internalService';\nimport { EnterpriseSettings } from '../../app/settings/server/settings.internalService';\nimport { FederationServiceEE } from '../local-services/federation/service';\nimport { InstanceService } from '../local-services/instance/service';\nimport { LDAPEEService } from '../local-services/ldap/service';\nimport { MessageReadsService } from '../local-services/message-reads/service';\nimport { VoipFreeSwitchService } from '../local-services/voip-freeswitch/service';\n\n// TODO consider registering these services only after a valid license is added\napi.registerService(new EnterpriseSettings());\napi.registerService(new LDAPEEService());\napi.registerService(new LicenseService());\napi.registerService(new MessageReadsService());\napi.registerService(new OmnichannelEE());\napi.registerService(new VoipFreeSwitchService((id) => settings.get(id)));\n\n// when not running micro services we want to start up the instance intercom\nif (!isRunningMs()) {\n\tapi.registerService(new InstanceService());\n}\n\nexport const startFederationService = async (): Promise<void> => {\n\tlet federationService: FederationService;\n\n\tif (!License.hasValidLicense()) {\n\t\tfederationService = await FederationService.createFederationService();\n\t\tapi.registerService(federationService);\n\t}\n\n\tvoid License.onLicense('federation', async () => {\n\t\tconst federationServiceEE = await FederationServiceEE.createFederationService();\n\t\tif (federationService) {\n\t\t\tawait api.destroyService(federationService);\n\t\t}\n\t\tapi.registerService(federationServiceEE);\n\t});\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      startFederationService: () => startFederationService\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let License;\n    module.link(\"@rocket.chat/license\", {\n      License(v) {\n        License = v;\n      }\n    }, 1);\n    let settings;\n    module.link(\"../../../app/settings/server/cached\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 2);\n    let isRunningMs;\n    module.link(\"../../../server/lib/isRunningMs\", {\n      isRunningMs(v) {\n        isRunningMs = v;\n      }\n    }, 3);\n    let FederationService;\n    module.link(\"../../../server/services/federation/service\", {\n      FederationService(v) {\n        FederationService = v;\n      }\n    }, 4);\n    let LicenseService;\n    module.link(\"../../app/license/server/license.internalService\", {\n      LicenseService(v) {\n        LicenseService = v;\n      }\n    }, 5);\n    let OmnichannelEE;\n    module.link(\"../../app/livechat-enterprise/server/services/omnichannel.internalService\", {\n      OmnichannelEE(v) {\n        OmnichannelEE = v;\n      }\n    }, 6);\n    let EnterpriseSettings;\n    module.link(\"../../app/settings/server/settings.internalService\", {\n      EnterpriseSettings(v) {\n        EnterpriseSettings = v;\n      }\n    }, 7);\n    let FederationServiceEE;\n    module.link(\"../local-services/federation/service\", {\n      FederationServiceEE(v) {\n        FederationServiceEE = v;\n      }\n    }, 8);\n    let InstanceService;\n    module.link(\"../local-services/instance/service\", {\n      InstanceService(v) {\n        InstanceService = v;\n      }\n    }, 9);\n    let LDAPEEService;\n    module.link(\"../local-services/ldap/service\", {\n      LDAPEEService(v) {\n        LDAPEEService = v;\n      }\n    }, 10);\n    let MessageReadsService;\n    module.link(\"../local-services/message-reads/service\", {\n      MessageReadsService(v) {\n        MessageReadsService = v;\n      }\n    }, 11);\n    let VoipFreeSwitchService;\n    module.link(\"../local-services/voip-freeswitch/service\", {\n      VoipFreeSwitchService(v) {\n        VoipFreeSwitchService = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    // TODO consider registering these services only after a valid license is added\n    api.registerService(new EnterpriseSettings());\n    api.registerService(new LDAPEEService());\n    api.registerService(new LicenseService());\n    api.registerService(new MessageReadsService());\n    api.registerService(new OmnichannelEE());\n    api.registerService(new VoipFreeSwitchService(id => settings.get(id)));\n    // when not running micro services we want to start up the instance intercom\n    if (!isRunningMs()) {\n      api.registerService(new InstanceService());\n    }\n    const startFederationService = async () => {\n      let federationService;\n      if (!License.hasValidLicense()) {\n        federationService = await FederationService.createFederationService();\n        api.registerService(federationService);\n      }\n      void License.onLicense('federation', async () => {\n        const federationServiceEE = await FederationServiceEE.createFederationService();\n        if (federationService) {\n          await api.destroyService(federationService);\n        }\n        api.registerService(federationServiceEE);\n      });\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","startFederationService","api","link","v","License","settings","isRunningMs","FederationService","LicenseService","OmnichannelEE","EnterpriseSettings","FederationServiceEE","InstanceService","LDAPEEService","MessageReadsService","VoipFreeSwitchService","__reifyWaitForDeps__","registerService","id","get","federationService","hasValidLicense","createFederationService","onLicense","federationServiceEE","destroyService","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/startup/services.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { License } from '@rocket.chat/license';\n\nimport { settings } from '../../../app/settings/server/cached';\nimport { isRunningMs } from '../../../server/lib/isRunningMs';\nimport { FederationService } from '../../../server/services/federation/service';\nimport { LicenseService } from '../../app/license/server/license.internalService';\nimport { OmnichannelEE } from '../../app/livechat-enterprise/server/services/omnichannel.internalService';\nimport { EnterpriseSettings } from '../../app/settings/server/settings.internalService';\nimport { FederationServiceEE } from '../local-services/federation/service';\nimport { InstanceService } from '../local-services/instance/service';\nimport { LDAPEEService } from '../local-services/ldap/service';\nimport { MessageReadsService } from '../local-services/message-reads/service';\nimport { VoipFreeSwitchService } from '../local-services/voip-freeswitch/service';\n\n// TODO consider registering these services only after a valid license is added\napi.registerService(new EnterpriseSettings());\napi.registerService(new LDAPEEService());\napi.registerService(new LicenseService());\napi.registerService(new MessageReadsService());\napi.registerService(new OmnichannelEE());\napi.registerService(new VoipFreeSwitchService((id) => settings.get(id)));\n\n// when not running micro services we want to start up the instance intercom\nif (!isRunningMs()) {\n\tapi.registerService(new InstanceService());\n}\n\nexport const startFederationService = async (): Promise<void> => {\n\tlet federationService: FederationService;\n\n\tif (!License.hasValidLicense()) {\n\t\tfederationService = await FederationService.createFederationService();\n\t\tapi.registerService(federationService);\n\t}\n\n\tvoid License.onLicense('federation', async () => {\n\t\tconst federationServiceEE = await FederationServiceEE.createFederationService();\n\t\tif (federationService) {\n\t\t\tawait api.destroyService(federationService);\n\t\t}\n\t\tapi.registerService(federationServiceEE);\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b3a2ac1b5d254b367eab066911c8c82d9fa027ef"}
