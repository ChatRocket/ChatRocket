{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/stream/stdout.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/stream/stdout.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/stream/stdout.ts","inputSourceMap":{"version":3,"file":"server/stream/stdout.ts","sourceRoot":"","sources":["server/stream/stdout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAChE,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,aAAa,MAAM,kDAAkD,CAAC;AAE7E,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,IAAU,EAAU,EAAE;IAC5D,IAAI,CAAC;QACJ,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACrC,MAAM,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,aAAa,IAAI,GAAG,EAAE,CAAC;YAC1B,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,UAAU,CAAC,EAAE,CAAC;YACnF,OAAO,MAAM,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,MAAM,CACZ;YACC,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,MAAM;SACb,EACD,EAAE,KAAK,EAAE,IAAI,EAAE,CACf,CAAC;IACH,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACZ,OAAO,MAAM,CAAC;IACf,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,IAAS,EAA2D,EAAE;IAC9F,OAAO;QACN,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;QACzC,EAAE,EAAE,IAAI,CAAC,EAAE;KACX,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,GAAQ,EAA2D,EAAE;IAC/F,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IACpC,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IAElC,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,SAAS,CAAC;IAEhC,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC;AAEjG,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;IAC7B,mGAAmG;IACnG,gDAAgD;IAChD,aAAa,CAAC,YAAY,CAAC,oBAAoB,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/E,CAAC,CAAC,CAAC;AAEH,MAAM,UAAU,OAAO;IAKtB,OAAO,aAAa,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { performance } from 'perf_hooks';\n\nimport { format } from '@rocket.chat/log-format';\nimport { getQueuedLogs, logEntries } from '@rocket.chat/logger';\nimport EJSON from 'ejson';\n\nimport notifications from '../../app/notifications/server/lib/Notifications';\n\nconst processString = (string: string, date: Date): string => {\n\ttry {\n\t\tconst obj = EJSON.parse(string);\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\tthrow new TypeError('Invalid JSON');\n\t\t}\n\n\t\tif ('toJSONValue' in obj) {\n\t\t\treturn format(obj.toJSONValue(), { color: true });\n\t\t}\n\n\t\tif (!Array.isArray(obj) && !(obj instanceof Date) && !(obj instanceof Uint8Array)) {\n\t\t\treturn format(obj, { color: true });\n\t\t}\n\t\treturn format(\n\t\t\t{\n\t\t\t\tmessage: string,\n\t\t\t\ttime: date,\n\t\t\t\tlevel: 'info',\n\t\t\t},\n\t\t\t{ color: true },\n\t\t);\n\t} catch (e) {\n\t\treturn string;\n\t}\n};\n\nconst rawTransformLog = (item: any): { id: string; string: string; ts: Date; time?: number } => {\n\treturn {\n\t\tid: item.id,\n\t\tstring: processString(item.data, item.ts),\n\t\tts: item.ts,\n\t};\n};\n\nconst timedTransformLog = (log: any): { id: string; string: string; ts: Date; time?: number } => {\n\tconst timeStart = performance.now();\n\tconst item = rawTransformLog(log);\n\tconst timeEnd = performance.now();\n\n\titem.time = timeEnd - timeStart;\n\n\treturn item;\n};\n\nconst transformLog = process.env.STDOUT_METRICS === 'true' ? timedTransformLog : rawTransformLog;\n\nlogEntries.on('log', (item) => {\n\t// TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n\t// won't be available when using micro services.\n\tnotifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nexport function getLogs(): {\n\tid: string;\n\tstring: string;\n\tts: Date;\n}[] {\n\treturn getQueuedLogs().map(transformLog);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/stream/stdout.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/stream/stdout.ts","inputSourceMap":{"version":3,"file":"server/stream/stdout.ts","sourceRoot":"","sources":["server/stream/stdout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAChE,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,aAAa,MAAM,kDAAkD,CAAC;AAE7E,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,IAAU,EAAU,EAAE;IAC5D,IAAI,CAAC;QACJ,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACrC,MAAM,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,aAAa,IAAI,GAAG,EAAE,CAAC;YAC1B,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,YAAY,UAAU,CAAC,EAAE,CAAC;YACnF,OAAO,MAAM,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACrC,CAAC;QACD,OAAO,MAAM,CACZ;YACC,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,MAAM;SACb,EACD,EAAE,KAAK,EAAE,IAAI,EAAE,CACf,CAAC;IACH,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACZ,OAAO,MAAM,CAAC;IACf,CAAC;AACF,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,IAAS,EAA2D,EAAE;IAC9F,OAAO;QACN,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,MAAM,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;QACzC,EAAE,EAAE,IAAI,CAAC,EAAE;KACX,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,GAAQ,EAA2D,EAAE;IAC/F,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IACpC,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IAElC,IAAI,CAAC,IAAI,GAAG,OAAO,GAAG,SAAS,CAAC;IAEhC,OAAO,IAAI,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,eAAe,CAAC;AAEjG,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;IAC7B,mGAAmG;IACnG,gDAAgD;IAChD,aAAa,CAAC,YAAY,CAAC,oBAAoB,CAAC,QAAQ,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/E,CAAC,CAAC,CAAC;AAEH,MAAM,UAAU,OAAO;IAKtB,OAAO,aAAa,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["import { performance } from 'perf_hooks';\n\nimport { format } from '@rocket.chat/log-format';\nimport { getQueuedLogs, logEntries } from '@rocket.chat/logger';\nimport EJSON from 'ejson';\n\nimport notifications from '../../app/notifications/server/lib/Notifications';\n\nconst processString = (string: string, date: Date): string => {\n\ttry {\n\t\tconst obj = EJSON.parse(string);\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\tthrow new TypeError('Invalid JSON');\n\t\t}\n\n\t\tif ('toJSONValue' in obj) {\n\t\t\treturn format(obj.toJSONValue(), { color: true });\n\t\t}\n\n\t\tif (!Array.isArray(obj) && !(obj instanceof Date) && !(obj instanceof Uint8Array)) {\n\t\t\treturn format(obj, { color: true });\n\t\t}\n\t\treturn format(\n\t\t\t{\n\t\t\t\tmessage: string,\n\t\t\t\ttime: date,\n\t\t\t\tlevel: 'info',\n\t\t\t},\n\t\t\t{ color: true },\n\t\t);\n\t} catch (e) {\n\t\treturn string;\n\t}\n};\n\nconst rawTransformLog = (item: any): { id: string; string: string; ts: Date; time?: number } => {\n\treturn {\n\t\tid: item.id,\n\t\tstring: processString(item.data, item.ts),\n\t\tts: item.ts,\n\t};\n};\n\nconst timedTransformLog = (log: any): { id: string; string: string; ts: Date; time?: number } => {\n\tconst timeStart = performance.now();\n\tconst item = rawTransformLog(log);\n\tconst timeEnd = performance.now();\n\n\titem.time = timeEnd - timeStart;\n\n\treturn item;\n};\n\nconst transformLog = process.env.STDOUT_METRICS === 'true' ? timedTransformLog : rawTransformLog;\n\nlogEntries.on('log', (item) => {\n\t// TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n\t// won't be available when using micro services.\n\tnotifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nexport function getLogs(): {\n\tid: string;\n\tstring: string;\n\tts: Date;\n}[] {\n\treturn getQueuedLogs().map(transformLog);\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      getLogs: () => getLogs\n    });\n    let performance;\n    module.link(\"perf_hooks\", {\n      performance(v) {\n        performance = v;\n      }\n    }, 0);\n    let format;\n    module.link(\"@rocket.chat/log-format\", {\n      format(v) {\n        format = v;\n      }\n    }, 1);\n    let getQueuedLogs, logEntries;\n    module.link(\"@rocket.chat/logger\", {\n      getQueuedLogs(v) {\n        getQueuedLogs = v;\n      },\n      logEntries(v) {\n        logEntries = v;\n      }\n    }, 2);\n    let EJSON;\n    module.link(\"ejson\", {\n      default(v) {\n        EJSON = v;\n      }\n    }, 3);\n    let notifications;\n    module.link(\"../../app/notifications/server/lib/Notifications\", {\n      default(v) {\n        notifications = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const processString = (string, date) => {\n      try {\n        const obj = EJSON.parse(string);\n        if (!obj || typeof obj !== 'object') {\n          throw new TypeError('Invalid JSON');\n        }\n        if ('toJSONValue' in obj) {\n          return format(obj.toJSONValue(), {\n            color: true\n          });\n        }\n        if (!Array.isArray(obj) && !(obj instanceof Date) && !(obj instanceof Uint8Array)) {\n          return format(obj, {\n            color: true\n          });\n        }\n        return format({\n          message: string,\n          time: date,\n          level: 'info'\n        }, {\n          color: true\n        });\n      } catch (e) {\n        return string;\n      }\n    };\n    const rawTransformLog = item => {\n      return {\n        id: item.id,\n        string: processString(item.data, item.ts),\n        ts: item.ts\n      };\n    };\n    const timedTransformLog = log => {\n      const timeStart = performance.now();\n      const item = rawTransformLog(log);\n      const timeEnd = performance.now();\n      item.time = timeEnd - timeStart;\n      return item;\n    };\n    const transformLog = process.env.STDOUT_METRICS === 'true' ? timedTransformLog : rawTransformLog;\n    logEntries.on('log', item => {\n      // TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n      // won't be available when using micro services.\n      notifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n    });\n    function getLogs() {\n      return getQueuedLogs().map(transformLog);\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","getLogs","performance","link","v","format","getQueuedLogs","logEntries","EJSON","default","notifications","__reifyWaitForDeps__","processString","string","date","obj","parse","TypeError","toJSONValue","color","Array","isArray","Date","Uint8Array","message","time","level","e","rawTransformLog","item","id","data","ts","timedTransformLog","log","timeStart","now","timeEnd","transformLog","process","env","STDOUT_METRICS","on","streamStdout","emitWithoutBroadcast","map","__reify_async_result__","_reifyError","self","async"],"sources":["server/stream/stdout.ts"],"sourcesContent":["import { performance } from 'perf_hooks';\n\nimport { format } from '@rocket.chat/log-format';\nimport { getQueuedLogs, logEntries } from '@rocket.chat/logger';\nimport EJSON from 'ejson';\n\nimport notifications from '../../app/notifications/server/lib/Notifications';\n\nconst processString = (string: string, date: Date): string => {\n\ttry {\n\t\tconst obj = EJSON.parse(string);\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\tthrow new TypeError('Invalid JSON');\n\t\t}\n\n\t\tif ('toJSONValue' in obj) {\n\t\t\treturn format(obj.toJSONValue(), { color: true });\n\t\t}\n\n\t\tif (!Array.isArray(obj) && !(obj instanceof Date) && !(obj instanceof Uint8Array)) {\n\t\t\treturn format(obj, { color: true });\n\t\t}\n\t\treturn format(\n\t\t\t{\n\t\t\t\tmessage: string,\n\t\t\t\ttime: date,\n\t\t\t\tlevel: 'info',\n\t\t\t},\n\t\t\t{ color: true },\n\t\t);\n\t} catch (e) {\n\t\treturn string;\n\t}\n};\n\nconst rawTransformLog = (item: any): { id: string; string: string; ts: Date; time?: number } => {\n\treturn {\n\t\tid: item.id,\n\t\tstring: processString(item.data, item.ts),\n\t\tts: item.ts,\n\t};\n};\n\nconst timedTransformLog = (log: any): { id: string; string: string; ts: Date; time?: number } => {\n\tconst timeStart = performance.now();\n\tconst item = rawTransformLog(log);\n\tconst timeEnd = performance.now();\n\n\titem.time = timeEnd - timeStart;\n\n\treturn item;\n};\n\nconst transformLog = process.env.STDOUT_METRICS === 'true' ? timedTransformLog : rawTransformLog;\n\nlogEntries.on('log', (item) => {\n\t// TODO having this as 'emitWithoutBroadcast' will not sent this data to ddp-streamer, so this data\n\t// won't be available when using micro services.\n\tnotifications.streamStdout.emitWithoutBroadcast('stdout', transformLog(item));\n});\n\nexport function getLogs(): {\n\tid: string;\n\tstring: string;\n\tts: Date;\n}[] {\n\treturn getQueuedLogs().map(transformLog);\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4c594bddfbae3cff1ac81b28148f6b9fc3e91b24"}
