{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ModerationReports.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/ModerationReports.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ModerationReports.ts","inputSourceMap":{"version":3,"file":"server/models/raw/ModerationReports.ts","sourceRoot":"","sources":["server/models/raw/ModerationReports.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIMessage,\n\tIModerationAudit,\n\tIModerationReport,\n\tRocketChatRecordDeleted,\n\tMessageReport,\n\tUserReport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IModerationReportsModel, PaginationParams } from '@rocket.chat/model-typings';\nimport type { AggregationCursor, Collection, Db, Document, FindCursor, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class ModerationReportsRaw extends BaseRaw<IModerationReport> implements IModerationReportsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IModerationReport>>) {\n\t\tsuper(db, 'moderation_reports', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] | undefined {\n\t\treturn [\n\t\t\t// TODO deprecated. remove within a migration in v7.0\n\t\t\t// { key: { 'ts': 1, 'reports.ts': 1 } },\n\t\t\t// { key: { 'message.u._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'reportedUser._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message.rid': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message._id': 1, 'ts': 1 } },\n\t\t\t// { key: { userId: 1, ts: 1 } },\n\t\t\t{ key: { _hidden: 1, ts: 1 } },\n\t\t\t{ key: { 'message._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'message.u._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'reportedUser._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t];\n\t}\n\n\tcreateWithMessageDescriptionAndUserId(\n\t\tmessage: IMessage,\n\t\tdescription: IModerationReport['description'],\n\t\troom: IModerationReport['room'],\n\t\treportedBy: IModerationReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record: Pick<IModerationReport, 'message' | 'description' | 'ts' | 'reportedBy' | 'room'> = {\n\t\t\tmessage,\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\troom,\n\t\t\tts: new Date(),\n\t\t};\n\t\treturn this.insertOne(record);\n\t}\n\n\tcreateWithDescriptionAndUser(\n\t\treportedUser: UserReport['reportedUser'],\n\t\tdescription: UserReport['description'],\n\t\treportedBy: UserReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record = {\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\treportedUser,\n\t\t\tts: new Date(),\n\t\t};\n\n\t\treturn this.insertOne(record);\n\t}\n\n\tfindMessageReportsGroupedByUser(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<IModerationAudit> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst params = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { user: '$message.u._id' },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t\trooms: { $addToSet: '$room' }, // to be replaced with room\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: '_id.user',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$user',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t// TODO: maybe clean up the projection, i.e. exclude things we don't need\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tmessage: '$reports.message.msg',\n\t\t\t\t\tmsgId: '$reports.message._id',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tusername: '$reports.message.u.username',\n\t\t\t\t\tname: '$reports.message.u.name',\n\t\t\t\t\tuserId: '$reports.message.u._id',\n\t\t\t\t\tisUserDeleted: { $cond: ['$user', false, true] },\n\t\t\t\t\tcount: 1,\n\t\t\t\t\trooms: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(params, { allowDiskUse: true });\n\t}\n\n\tfindUserReports(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<Pick<UserReport, '_id' | 'reportedUser' | 'ts'> & { count: number }> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst pipeline = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\tts: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$reportedUser._id',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\treportedUser: '$reports.reportedUser',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tcount: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(pipeline, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync getTotalUniqueReportedUsers(latest: Date, oldest: Date, selector: string, isMessageReports?: boolean): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...(isMessageReports ? this.getSearchQueryForSelector(selector) : this.getSearchQueryForSelectorUsers(selector)),\n\t\t};\n\n\t\tconst field = isMessageReports ? 'message.u._id' : 'reportedUser._id';\n\t\tconst pipeline = [{ $match: query }, { $group: { _id: `$${field}` } }, { $group: { _id: null, count: { $sum: 1 } } }];\n\n\t\tconst result = await this.col.aggregate(pipeline).toArray();\n\t\treturn result[0]?.count || 0;\n\t}\n\n\tcountMessageReportsInRange(latest: Date, oldest: Date, selector: string): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\t_hidden: { $ne: true },\n\t\t\tts: { $lt: latest, $gt: oldest },\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t});\n\t}\n\n\tfindReportedMessagesByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<MessageReport, '_id' | 'message' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst fuzzyQuery = selector\n\t\t\t? {\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {};\n\n\t\tconst params = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tmessage: 1,\n\t\t\t\tts: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated({ ...query, ...fuzzyQuery }, params);\n\t}\n\n\tfindUserReportsByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Omit<UserReport, 'moderationInfo'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'reportedUser._id': userId,\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\treportedUser: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tfindReportsByMessageId(\n\t\tmessageId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<IModerationReport, '_id' | 'description' | 'reportedBy' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message._id': messageId,\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tasync hideMessageReportsByMessageId(messageId: string, userId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message._id': messageId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: userId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideMessageReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideUserReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'reportedUser._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tprivate getSearchQueryForSelector(selector?: string): any {\n\t\tconst messageExistsQuery = { message: { $exists: true } };\n\t\tif (!selector) {\n\t\t\treturn messageExistsQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageExistsQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tprivate getSearchQueryForSelectorUsers(selector?: string): any {\n\t\tconst messageAbsentQuery = { message: { $exists: false } };\n\t\tif (!selector) {\n\t\t\treturn messageAbsentQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageAbsentQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/ModerationReports.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/ModerationReports.ts","inputSourceMap":{"version":3,"file":"server/models/raw/ModerationReports.ts","sourceRoot":"","sources":["server/models/raw/ModerationReports.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tIMessage,\n\tIModerationAudit,\n\tIModerationReport,\n\tRocketChatRecordDeleted,\n\tMessageReport,\n\tUserReport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IModerationReportsModel, PaginationParams } from '@rocket.chat/model-typings';\nimport type { AggregationCursor, Collection, Db, Document, FindCursor, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class ModerationReportsRaw extends BaseRaw<IModerationReport> implements IModerationReportsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IModerationReport>>) {\n\t\tsuper(db, 'moderation_reports', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] | undefined {\n\t\treturn [\n\t\t\t// TODO deprecated. remove within a migration in v7.0\n\t\t\t// { key: { 'ts': 1, 'reports.ts': 1 } },\n\t\t\t// { key: { 'message.u._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'reportedUser._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message.rid': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message._id': 1, 'ts': 1 } },\n\t\t\t// { key: { userId: 1, ts: 1 } },\n\t\t\t{ key: { _hidden: 1, ts: 1 } },\n\t\t\t{ key: { 'message._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'message.u._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'reportedUser._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t];\n\t}\n\n\tcreateWithMessageDescriptionAndUserId(\n\t\tmessage: IMessage,\n\t\tdescription: IModerationReport['description'],\n\t\troom: IModerationReport['room'],\n\t\treportedBy: IModerationReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record: Pick<IModerationReport, 'message' | 'description' | 'ts' | 'reportedBy' | 'room'> = {\n\t\t\tmessage,\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\troom,\n\t\t\tts: new Date(),\n\t\t};\n\t\treturn this.insertOne(record);\n\t}\n\n\tcreateWithDescriptionAndUser(\n\t\treportedUser: UserReport['reportedUser'],\n\t\tdescription: UserReport['description'],\n\t\treportedBy: UserReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record = {\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\treportedUser,\n\t\t\tts: new Date(),\n\t\t};\n\n\t\treturn this.insertOne(record);\n\t}\n\n\tfindMessageReportsGroupedByUser(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<IModerationAudit> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst params = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { user: '$message.u._id' },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t\trooms: { $addToSet: '$room' }, // to be replaced with room\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: '_id.user',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$user',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t// TODO: maybe clean up the projection, i.e. exclude things we don't need\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tmessage: '$reports.message.msg',\n\t\t\t\t\tmsgId: '$reports.message._id',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tusername: '$reports.message.u.username',\n\t\t\t\t\tname: '$reports.message.u.name',\n\t\t\t\t\tuserId: '$reports.message.u._id',\n\t\t\t\t\tisUserDeleted: { $cond: ['$user', false, true] },\n\t\t\t\t\tcount: 1,\n\t\t\t\t\trooms: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(params, { allowDiskUse: true });\n\t}\n\n\tfindUserReports(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<Pick<UserReport, '_id' | 'reportedUser' | 'ts'> & { count: number }> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst pipeline = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\tts: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$reportedUser._id',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\treportedUser: '$reports.reportedUser',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tcount: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(pipeline, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync getTotalUniqueReportedUsers(latest: Date, oldest: Date, selector: string, isMessageReports?: boolean): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...(isMessageReports ? this.getSearchQueryForSelector(selector) : this.getSearchQueryForSelectorUsers(selector)),\n\t\t};\n\n\t\tconst field = isMessageReports ? 'message.u._id' : 'reportedUser._id';\n\t\tconst pipeline = [{ $match: query }, { $group: { _id: `$${field}` } }, { $group: { _id: null, count: { $sum: 1 } } }];\n\n\t\tconst result = await this.col.aggregate(pipeline).toArray();\n\t\treturn result[0]?.count || 0;\n\t}\n\n\tcountMessageReportsInRange(latest: Date, oldest: Date, selector: string): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\t_hidden: { $ne: true },\n\t\t\tts: { $lt: latest, $gt: oldest },\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t});\n\t}\n\n\tfindReportedMessagesByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<MessageReport, '_id' | 'message' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst fuzzyQuery = selector\n\t\t\t? {\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {};\n\n\t\tconst params = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tmessage: 1,\n\t\t\t\tts: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated({ ...query, ...fuzzyQuery }, params);\n\t}\n\n\tfindUserReportsByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Omit<UserReport, 'moderationInfo'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'reportedUser._id': userId,\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\treportedUser: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tfindReportsByMessageId(\n\t\tmessageId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<IModerationReport, '_id' | 'description' | 'reportedBy' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message._id': messageId,\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tasync hideMessageReportsByMessageId(messageId: string, userId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message._id': messageId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: userId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideMessageReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideUserReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'reportedUser._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tprivate getSearchQueryForSelector(selector?: string): any {\n\t\tconst messageExistsQuery = { message: { $exists: true } };\n\t\tif (!selector) {\n\t\t\treturn messageExistsQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageExistsQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tprivate getSearchQueryForSelectorUsers(selector?: string): any {\n\t\tconst messageAbsentQuery = { message: { $exists: false } };\n\t\tif (!selector) {\n\t\t\treturn messageAbsentQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageAbsentQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      ModerationReportsRaw: () => ModerationReportsRaw\n    });\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 0);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ModerationReportsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'moderation_reports', trash);\n      }\n      modelIndexes() {\n        return [\n        // TODO deprecated. remove within a migration in v7.0\n        // { key: { 'ts': 1, 'reports.ts': 1 } },\n        // { key: { 'message.u._id': 1, 'ts': 1 } },\n        // { key: { 'reportedUser._id': 1, 'ts': 1 } },\n        // { key: { 'message.rid': 1, 'ts': 1 } },\n        // { key: { 'message._id': 1, 'ts': 1 } },\n        // { key: { userId: 1, ts: 1 } },\n        {\n          key: {\n            _hidden: 1,\n            ts: 1\n          }\n        }, {\n          key: {\n            'message._id': 1,\n            '_hidden': 1,\n            'ts': 1\n          }\n        }, {\n          key: {\n            'message.u._id': 1,\n            '_hidden': 1,\n            'ts': 1\n          }\n        }, {\n          key: {\n            'reportedUser._id': 1,\n            '_hidden': 1,\n            'ts': 1\n          }\n        }];\n      }\n      createWithMessageDescriptionAndUserId(message, description, room, reportedBy) {\n        const record = {\n          message,\n          description,\n          reportedBy,\n          room,\n          ts: new Date()\n        };\n        return this.insertOne(record);\n      }\n      createWithDescriptionAndUser(reportedUser, description, reportedBy) {\n        const record = {\n          description,\n          reportedBy,\n          reportedUser,\n          ts: new Date()\n        };\n        return this.insertOne(record);\n      }\n      findMessageReportsGroupedByUser(latest, oldest, selector, pagination) {\n        const query = _objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          ts: {\n            $lt: latest,\n            $gt: oldest\n          }\n        }, this.getSearchQueryForSelector(selector));\n        const {\n          sort,\n          offset,\n          count\n        } = pagination;\n        const params = [{\n          $match: query\n        }, {\n          $group: {\n            _id: {\n              user: '$message.u._id'\n            },\n            reports: {\n              $first: '$$ROOT'\n            },\n            rooms: {\n              $addToSet: '$room'\n            },\n            // to be replaced with room\n            count: {\n              $sum: 1\n            }\n          }\n        }, {\n          $sort: sort || {\n            'reports.ts': -1\n          }\n        }, {\n          $skip: offset\n        }, {\n          $limit: count\n        }, {\n          $lookup: {\n            from: 'users',\n            localField: '_id.user',\n            foreignField: '_id',\n            as: 'user'\n          }\n        }, {\n          $unwind: {\n            path: '$user',\n            preserveNullAndEmptyArrays: true\n          }\n        }, {\n          // TODO: maybe clean up the projection, i.e. exclude things we don't need\n          $project: {\n            _id: 0,\n            message: '$reports.message.msg',\n            msgId: '$reports.message._id',\n            ts: '$reports.ts',\n            username: '$reports.message.u.username',\n            name: '$reports.message.u.name',\n            userId: '$reports.message.u._id',\n            isUserDeleted: {\n              $cond: ['$user', false, true]\n            },\n            count: 1,\n            rooms: 1\n          }\n        }];\n        return this.col.aggregate(params, {\n          allowDiskUse: true\n        });\n      }\n      findUserReports(latest, oldest, selector, pagination) {\n        const query = _objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          ts: {\n            $lt: latest,\n            $gt: oldest\n          }\n        }, this.getSearchQueryForSelectorUsers(selector));\n        const {\n          sort,\n          offset,\n          count\n        } = pagination;\n        const pipeline = [{\n          $match: query\n        }, {\n          $sort: {\n            ts: -1\n          }\n        }, {\n          $group: {\n            _id: '$reportedUser._id',\n            count: {\n              $sum: 1\n            },\n            reports: {\n              $first: '$$ROOT'\n            }\n          }\n        }, {\n          $sort: sort || {\n            'reports.ts': -1\n          }\n        }, {\n          $skip: offset\n        }, {\n          $limit: count\n        }, {\n          $project: {\n            _id: 0,\n            reportedUser: '$reports.reportedUser',\n            ts: '$reports.ts',\n            count: 1\n          }\n        }];\n        return this.col.aggregate(pipeline, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      async getTotalUniqueReportedUsers(latest, oldest, selector, isMessageReports) {\n        var _result$;\n        const query = _objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          ts: {\n            $lt: latest,\n            $gt: oldest\n          }\n        }, isMessageReports ? this.getSearchQueryForSelector(selector) : this.getSearchQueryForSelectorUsers(selector));\n        const field = isMessageReports ? 'message.u._id' : 'reportedUser._id';\n        const pipeline = [{\n          $match: query\n        }, {\n          $group: {\n            _id: \"$\".concat(field)\n          }\n        }, {\n          $group: {\n            _id: null,\n            count: {\n              $sum: 1\n            }\n          }\n        }];\n        const result = await this.col.aggregate(pipeline).toArray();\n        return ((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.count) || 0;\n      }\n      countMessageReportsInRange(latest, oldest, selector) {\n        return this.col.countDocuments(_objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          ts: {\n            $lt: latest,\n            $gt: oldest\n          }\n        }, this.getSearchQueryForSelector(selector)));\n      }\n      findReportedMessagesByReportedUserId(userId, selector, pagination) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'message.u._id': userId\n        };\n        const {\n          sort,\n          offset,\n          count\n        } = pagination;\n        const fuzzyQuery = selector ? {\n          'message.msg': {\n            $regex: selector,\n            $options: 'i'\n          }\n        } : {};\n        const params = _objectSpread({\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: {\n            _id: 1,\n            message: 1,\n            ts: 1,\n            room: 1\n          }\n        }, options);\n        return this.findPaginated(_objectSpread(_objectSpread({}, query), fuzzyQuery), params);\n      }\n      findUserReportsByReportedUserId(userId, selector, pagination) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread({\n          '_hidden': {\n            $ne: true\n          },\n          'reportedUser._id': userId\n        }, this.getSearchQueryForSelectorUsers(selector));\n        const {\n          count,\n          offset,\n          sort\n        } = pagination;\n        const opts = _objectSpread({\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: {\n            _id: 1,\n            description: 1,\n            ts: 1,\n            reportedBy: 1,\n            reportedUser: 1\n          }\n        }, options);\n        return this.findPaginated(query, opts);\n      }\n      findReportsByMessageId(messageId, selector, pagination) {\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = _objectSpread({\n          '_hidden': {\n            $ne: true\n          },\n          'message._id': messageId\n        }, this.getSearchQueryForSelector(selector));\n        const {\n          count,\n          offset,\n          sort\n        } = pagination;\n        const opts = _objectSpread({\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: {\n            _id: 1,\n            description: 1,\n            ts: 1,\n            reportedBy: 1,\n            room: 1\n          }\n        }, options);\n        return this.findPaginated(query, opts);\n      }\n      async hideMessageReportsByMessageId(messageId, userId, reason, action) {\n        const query = {\n          'message._id': messageId\n        };\n        const update = {\n          $set: {\n            _hidden: true,\n            moderationInfo: {\n              hiddenAt: new Date(),\n              moderatedBy: userId,\n              reason,\n              action\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async hideMessageReportsByUserId(userId, moderatorId, reason, action) {\n        const query = {\n          'message.u._id': userId\n        };\n        const update = {\n          $set: {\n            _hidden: true,\n            moderationInfo: {\n              hiddenAt: new Date(),\n              moderatedBy: moderatorId,\n              reason,\n              action\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      async hideUserReportsByUserId(userId, moderatorId, reason, action) {\n        const query = {\n          'reportedUser._id': userId\n        };\n        const update = {\n          $set: {\n            _hidden: true,\n            moderationInfo: {\n              hiddenAt: new Date(),\n              moderatedBy: moderatorId,\n              reason,\n              action\n            }\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      getSearchQueryForSelector(selector) {\n        const messageExistsQuery = {\n          message: {\n            $exists: true\n          }\n        };\n        if (!selector) {\n          return messageExistsQuery;\n        }\n        return _objectSpread(_objectSpread({}, messageExistsQuery), {}, {\n          $or: [{\n            'message.msg': {\n              $regex: selector,\n              $options: 'i'\n            }\n          }, {\n            description: {\n              $regex: selector,\n              $options: 'i'\n            }\n          }, {\n            'message.u.username': {\n              $regex: selector,\n              $options: 'i'\n            }\n          }, {\n            'message.u.name': {\n              $regex: selector,\n              $options: 'i'\n            }\n          }]\n        });\n      }\n      getSearchQueryForSelectorUsers(selector) {\n        const messageAbsentQuery = {\n          message: {\n            $exists: false\n          }\n        };\n        if (!selector) {\n          return messageAbsentQuery;\n        }\n        return _objectSpread(_objectSpread({}, messageAbsentQuery), {}, {\n          $or: [{\n            'reportedUser.username': {\n              $regex: selector,\n              $options: 'i'\n            }\n          }, {\n            'reportedUser.name': {\n              $regex: selector,\n              $options: 'i'\n            }\n          }]\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","ModerationReportsRaw","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","_hidden","ts","createWithMessageDescriptionAndUserId","message","description","room","reportedBy","record","Date","insertOne","createWithDescriptionAndUser","reportedUser","findMessageReportsGroupedByUser","latest","oldest","selector","pagination","query","$ne","$lt","$gt","getSearchQueryForSelector","sort","offset","count","params","$match","$group","_id","user","reports","$first","rooms","$addToSet","$sum","$sort","$skip","$limit","$lookup","from","localField","foreignField","as","$unwind","path","preserveNullAndEmptyArrays","$project","msgId","username","name","userId","isUserDeleted","$cond","col","aggregate","allowDiskUse","findUserReports","getSearchQueryForSelectorUsers","pipeline","readPreference","getTotalUniqueReportedUsers","isMessageReports","_result$","field","concat","result","toArray","countMessageReportsInRange","countDocuments","findReportedMessagesByReportedUserId","options","arguments","length","undefined","fuzzyQuery","$regex","$options","skip","limit","projection","findPaginated","findUserReportsByReportedUserId","opts","findReportsByMessageId","messageId","hideMessageReportsByMessageId","reason","action","update","$set","moderationInfo","hiddenAt","moderatedBy","updateMany","hideMessageReportsByUserId","moderatorId","hideUserReportsByUserId","messageExistsQuery","$exists","$or","messageAbsentQuery","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/ModerationReports.ts"],"sourcesContent":["import type {\n\tIMessage,\n\tIModerationAudit,\n\tIModerationReport,\n\tRocketChatRecordDeleted,\n\tMessageReport,\n\tUserReport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IModerationReportsModel, PaginationParams } from '@rocket.chat/model-typings';\nimport type { AggregationCursor, Collection, Db, Document, FindCursor, FindOptions, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class ModerationReportsRaw extends BaseRaw<IModerationReport> implements IModerationReportsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IModerationReport>>) {\n\t\tsuper(db, 'moderation_reports', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] | undefined {\n\t\treturn [\n\t\t\t// TODO deprecated. remove within a migration in v7.0\n\t\t\t// { key: { 'ts': 1, 'reports.ts': 1 } },\n\t\t\t// { key: { 'message.u._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'reportedUser._id': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message.rid': 1, 'ts': 1 } },\n\t\t\t// { key: { 'message._id': 1, 'ts': 1 } },\n\t\t\t// { key: { userId: 1, ts: 1 } },\n\t\t\t{ key: { _hidden: 1, ts: 1 } },\n\t\t\t{ key: { 'message._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'message.u._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t\t{ key: { 'reportedUser._id': 1, '_hidden': 1, 'ts': 1 } },\n\t\t];\n\t}\n\n\tcreateWithMessageDescriptionAndUserId(\n\t\tmessage: IMessage,\n\t\tdescription: IModerationReport['description'],\n\t\troom: IModerationReport['room'],\n\t\treportedBy: IModerationReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record: Pick<IModerationReport, 'message' | 'description' | 'ts' | 'reportedBy' | 'room'> = {\n\t\t\tmessage,\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\troom,\n\t\t\tts: new Date(),\n\t\t};\n\t\treturn this.insertOne(record);\n\t}\n\n\tcreateWithDescriptionAndUser(\n\t\treportedUser: UserReport['reportedUser'],\n\t\tdescription: UserReport['description'],\n\t\treportedBy: UserReport['reportedBy'],\n\t): ReturnType<BaseRaw<IModerationReport>['insertOne']> {\n\t\tconst record = {\n\t\t\tdescription,\n\t\t\treportedBy,\n\t\t\treportedUser,\n\t\t\tts: new Date(),\n\t\t};\n\n\t\treturn this.insertOne(record);\n\t}\n\n\tfindMessageReportsGroupedByUser(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<IModerationAudit> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst params = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: { user: '$message.u._id' },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t\trooms: { $addToSet: '$room' }, // to be replaced with room\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'users',\n\t\t\t\t\tlocalField: '_id.user',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'user',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$user',\n\t\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t// TODO: maybe clean up the projection, i.e. exclude things we don't need\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tmessage: '$reports.message.msg',\n\t\t\t\t\tmsgId: '$reports.message._id',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tusername: '$reports.message.u.username',\n\t\t\t\t\tname: '$reports.message.u.name',\n\t\t\t\t\tuserId: '$reports.message.u._id',\n\t\t\t\t\tisUserDeleted: { $cond: ['$user', false, true] },\n\t\t\t\t\tcount: 1,\n\t\t\t\t\trooms: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(params, { allowDiskUse: true });\n\t}\n\n\tfindUserReports(\n\t\tlatest: Date,\n\t\toldest: Date,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t): AggregationCursor<Pick<UserReport, '_id' | 'reportedUser' | 'ts'> & { count: number }> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst pipeline = [\n\t\t\t{ $match: query },\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\tts: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$reportedUser._id',\n\t\t\t\t\tcount: { $sum: 1 },\n\t\t\t\t\treports: { $first: '$$ROOT' },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: sort || {\n\t\t\t\t\t'reports.ts': -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$skip: offset,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$limit: count,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\treportedUser: '$reports.reportedUser',\n\t\t\t\t\tts: '$reports.ts',\n\t\t\t\t\tcount: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn this.col.aggregate(pipeline, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n\n\tasync getTotalUniqueReportedUsers(latest: Date, oldest: Date, selector: string, isMessageReports?: boolean): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\tts: {\n\t\t\t\t$lt: latest,\n\t\t\t\t$gt: oldest,\n\t\t\t},\n\t\t\t...(isMessageReports ? this.getSearchQueryForSelector(selector) : this.getSearchQueryForSelectorUsers(selector)),\n\t\t};\n\n\t\tconst field = isMessageReports ? 'message.u._id' : 'reportedUser._id';\n\t\tconst pipeline = [{ $match: query }, { $group: { _id: `$${field}` } }, { $group: { _id: null, count: { $sum: 1 } } }];\n\n\t\tconst result = await this.col.aggregate(pipeline).toArray();\n\t\treturn result[0]?.count || 0;\n\t}\n\n\tcountMessageReportsInRange(latest: Date, oldest: Date, selector: string): Promise<number> {\n\t\treturn this.col.countDocuments({\n\t\t\t_hidden: { $ne: true },\n\t\t\tts: { $lt: latest, $gt: oldest },\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t});\n\t}\n\n\tfindReportedMessagesByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<MessageReport, '_id' | 'message' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst { sort, offset, count } = pagination;\n\n\t\tconst fuzzyQuery = selector\n\t\t\t? {\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t  }\n\t\t\t: {};\n\n\t\tconst params = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tmessage: 1,\n\t\t\t\tts: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated({ ...query, ...fuzzyQuery }, params);\n\t}\n\n\tfindUserReportsByReportedUserId(\n\t\tuserId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Omit<UserReport, 'moderationInfo'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'reportedUser._id': userId,\n\t\t\t...this.getSearchQueryForSelectorUsers(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\treportedUser: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tfindReportsByMessageId(\n\t\tmessageId: string,\n\t\tselector: string,\n\t\tpagination: PaginationParams<IModerationReport>,\n\t\toptions: FindOptions<IModerationReport> = {},\n\t): FindPaginated<FindCursor<Pick<IModerationReport, '_id' | 'description' | 'reportedBy' | 'ts' | 'room'>>> {\n\t\tconst query = {\n\t\t\t'_hidden': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'message._id': messageId,\n\t\t\t...this.getSearchQueryForSelector(selector),\n\t\t};\n\n\t\tconst { count, offset, sort } = pagination;\n\n\t\tconst opts = {\n\t\t\tsort: sort || {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t\tskip: offset,\n\t\t\tlimit: count,\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tdescription: 1,\n\t\t\t\tts: 1,\n\t\t\t\treportedBy: 1,\n\t\t\t\troom: 1,\n\t\t\t},\n\t\t\t...options,\n\t\t};\n\n\t\treturn this.findPaginated(query, opts);\n\t}\n\n\tasync hideMessageReportsByMessageId(messageId: string, userId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message._id': messageId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: userId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideMessageReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'message.u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync hideUserReportsByUserId(userId: string, moderatorId: string, reason: string, action: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'reportedUser._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t_hidden: true,\n\t\t\t\tmoderationInfo: { hiddenAt: new Date(), moderatedBy: moderatorId, reason, action },\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tprivate getSearchQueryForSelector(selector?: string): any {\n\t\tconst messageExistsQuery = { message: { $exists: true } };\n\t\tif (!selector) {\n\t\t\treturn messageExistsQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageExistsQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'message.msg': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'message.u.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tprivate getSearchQueryForSelectorUsers(selector?: string): any {\n\t\tconst messageAbsentQuery = { message: { $exists: false } };\n\t\tif (!selector) {\n\t\t\treturn messageAbsentQuery;\n\t\t}\n\t\treturn {\n\t\t\t...messageAbsentQuery,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.username': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'reportedUser.name': {\n\t\t\t\t\t\t$regex: selector,\n\t\t\t\t\t\t$options: 'i',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"3de2c333a07ab0ee3be0b53191d34ac25e83cb62"}
