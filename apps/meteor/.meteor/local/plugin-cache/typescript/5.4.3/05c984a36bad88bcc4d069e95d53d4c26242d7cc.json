{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/im.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/im.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/im.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/im.ts","sourceRoot":"","sources":["app/api/server/v1/im.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Docs: https://github.com/RocketChat/developer-docs/blob/master/reference/api/rest-api/endpoints/team-collaboration-endpoints/im-endpoints\n */\nimport type { IMessage, IRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { Subscriptions, Uploads, Messages, Rooms, Users } from '@rocket.chat/models';\nimport {\n\tisDmDeleteProps,\n\tisDmFileProps,\n\tisDmMemberProps,\n\tisDmMessagesProps,\n\tisDmCreateProps,\n\tisDmHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasAtLeastOnePermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { getRoomByNameOrIdWithOptionToJoin } from '../../../lib/server/functions/getRoomByNameOrIdWithOptionToJoin';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\n// TODO: Refact or remove\n\ntype findDirectMessageRoomProps =\n\t| {\n\t\t\troomId: string;\n\t  }\n\t| {\n\t\t\tusername: string;\n\t  };\n\nconst findDirectMessageRoom = async (\n\tkeys: findDirectMessageRoomProps,\n\tuid: string,\n): Promise<{ room: IRoom; subscription: ISubscription | null }> => {\n\tif (!('roomId' in keys) && !('username' in keys)) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" or \"username\" is required');\n\t}\n\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'findDirectMessageRoom',\n\t\t});\n\t}\n\n\tconst room = await getRoomByNameOrIdWithOptionToJoin({\n\t\tuser,\n\t\tnameOrId: 'roomId' in keys ? keys.roomId : keys.username,\n\t\ttype: 'd',\n\t});\n\n\tif (!room || room?.t !== 'd') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" param provided does not match any direct message');\n\t}\n\n\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });\n\n\treturn {\n\t\troom,\n\t\tsubscription,\n\t};\n};\n\nAPI.v1.addRoute(\n\t['dm.create', 'im.create'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmCreateProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst users =\n\t\t\t\t'username' in this.bodyParams\n\t\t\t\t\t? [this.bodyParams.username]\n\t\t\t\t\t: this.bodyParams.usernames.split(',').map((username: string) => username.trim());\n\n\t\t\tconst room = await createDirectMessage(users, this.userId, this.bodyParams.excludeSelf);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: { ...room, _id: room.rid },\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.delete', 'im.delete'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.bodyParams, this.userId);\n\n\t\t\tconst canAccess =\n\t\t\t\t(await canAccessRoomIdAsync(room._id, this.userId)) || (await hasPermissionAsync(this.userId, 'view-room-administration'));\n\t\t\tif (!canAccess) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.close', 'im.close'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tlet subscription;\n\n\t\t\tconst roomExists = !!(await Rooms.findOneById(roomId));\n\t\t\tif (!roomExists) {\n\t\t\t\t// even if the room doesn't exist, we should allow the user to close the subscription anyways\n\t\t\t\tsubscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n\t\t\t} else {\n\t\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\n\t\t\t\tconst { subscription: subs } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\t\tsubscription = subs;\n\t\t\t}\n\n\t\t\tif (!subscription) {\n\t\t\t\treturn API.v1.failure(`The user is not subscribed to the room`);\n\t\t\t}\n\n\t\t\tif (!subscription.open) {\n\t\t\t\treturn API.v1.failure(`The direct message room, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// https://github.com/RocketChat/Rocket.Chat/pull/9679 as reference\nAPI.v1.addRoute(\n\t['dm.counters', 'im.counters'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { roomId, userId: ruserId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\t\t\tlet lm = null;\n\n\t\t\tif (ruserId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = ruserId;\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, user);\n\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, user);\n\n\t\t\tlm = room?.lm ? new Date(room.lm).toISOString() : new Date(room._updatedAt).toISOString(); // lm is the last message timestamp\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tif (subscription.ls && room.msgs) {\n\t\t\t\t\tunreads = subscription.unread;\n\t\t\t\t\tunreadsFrom = new Date(subscription.ls).toISOString(); // last read timestamp\n\t\t\t\t}\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.files', 'im.files'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmFileProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst ourQuery = query ? { rid: room._id, ...query } : { rid: room._id };\n\n\t\t\tconst { cursor, totalCount } = Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.history', 'im.history'],\n\t{ authRequired: true, validateParams: isDmHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset = 0, count = 20 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { roomId, latest, oldest, inclusive, unreads, showThreadMessages } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tconst objectParams = {\n\t\t\t\trid: room._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t};\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', objectParams);\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.members', 'im.members'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst extraQuery = {\n\t\t\t\t_id: { $in: room.uids },\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t};\n\n\t\t\tconst canSeeExtension = await hasAtLeastOnePermissionAsync(\n\t\t\t\tthis.userId,\n\t\t\t\t['view-full-other-user-info', 'view-user-voip-extension'],\n\t\t\t\troom._id,\n\t\t\t);\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tfederated: 1,\n\t\t\t\t\t...(canSeeExtension && { freeSwitchExtension: 1 }),\n\t\t\t\t},\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tsort: {\n\t\t\t\t\t_updatedAt: -1,\n\t\t\t\t\tusername: sort?.username ? sort.username : 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages', 'im.messages'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMessagesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = { rid: room._id, ...query };\n\t\t\tconst sortObj = { ts: sort?.ts ?? -1 };\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sortObj,\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\t...(fields && { projection: fields }),\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages.others', 'im.messages.others'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tif (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/im.messages.others',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });\n\t\t\tif (!room || room?.t !== 'd') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', `No direct message room found by the id of: ${roomId}`);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated<IMessage>(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [msgs, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (!msgs) {\n\t\t\t\tthrow new Meteor.Error('error-no-messages', 'No messages found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(msgs, this.userId),\n\t\t\t\toffset,\n\t\t\t\tcount: msgs.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list', 'im.list'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = { name: 1 }, fields } = await this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breaking notice since we removed the query param\n\n\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })\n\t\t\t\t.map((item) => item.rid)\n\t\t\t\t.toArray();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ t: 'd', _id: { $in: subscriptions } },\n\t\t\t\t{\n\t\t\t\t\tsort,\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [ims, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(ims.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: ims.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list.everyone', 'im.list.everyone'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count }: { offset: number; count: number } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ ...query, t: 'd' },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(rooms.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.open', 'im.open'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tif (!subscription?.open) {\n\t\t\t\tawait Meteor.callAsync('openRoom', room._id);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.setTopic', 'im.setTopic'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, topic } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tawait saveRoomSettings(this.userId, room._id, 'roomTopic', topic);\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/im.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/im.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/im.ts","sourceRoot":"","sources":["app/api/server/v1/im.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Docs: https://github.com/RocketChat/developer-docs/blob/master/reference/api/rest-api/endpoints/team-collaboration-endpoints/im-endpoints\n */\nimport type { IMessage, IRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { Subscriptions, Uploads, Messages, Rooms, Users } from '@rocket.chat/models';\nimport {\n\tisDmDeleteProps,\n\tisDmFileProps,\n\tisDmMemberProps,\n\tisDmMessagesProps,\n\tisDmCreateProps,\n\tisDmHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasAtLeastOnePermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { getRoomByNameOrIdWithOptionToJoin } from '../../../lib/server/functions/getRoomByNameOrIdWithOptionToJoin';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\n// TODO: Refact or remove\n\ntype findDirectMessageRoomProps =\n\t| {\n\t\t\troomId: string;\n\t  }\n\t| {\n\t\t\tusername: string;\n\t  };\n\nconst findDirectMessageRoom = async (\n\tkeys: findDirectMessageRoomProps,\n\tuid: string,\n): Promise<{ room: IRoom; subscription: ISubscription | null }> => {\n\tif (!('roomId' in keys) && !('username' in keys)) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" or \"username\" is required');\n\t}\n\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'findDirectMessageRoom',\n\t\t});\n\t}\n\n\tconst room = await getRoomByNameOrIdWithOptionToJoin({\n\t\tuser,\n\t\tnameOrId: 'roomId' in keys ? keys.roomId : keys.username,\n\t\ttype: 'd',\n\t});\n\n\tif (!room || room?.t !== 'd') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" param provided does not match any direct message');\n\t}\n\n\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });\n\n\treturn {\n\t\troom,\n\t\tsubscription,\n\t};\n};\n\nAPI.v1.addRoute(\n\t['dm.create', 'im.create'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmCreateProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst users =\n\t\t\t\t'username' in this.bodyParams\n\t\t\t\t\t? [this.bodyParams.username]\n\t\t\t\t\t: this.bodyParams.usernames.split(',').map((username: string) => username.trim());\n\n\t\t\tconst room = await createDirectMessage(users, this.userId, this.bodyParams.excludeSelf);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: { ...room, _id: room.rid },\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.delete', 'im.delete'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.bodyParams, this.userId);\n\n\t\t\tconst canAccess =\n\t\t\t\t(await canAccessRoomIdAsync(room._id, this.userId)) || (await hasPermissionAsync(this.userId, 'view-room-administration'));\n\t\t\tif (!canAccess) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.close', 'im.close'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tlet subscription;\n\n\t\t\tconst roomExists = !!(await Rooms.findOneById(roomId));\n\t\t\tif (!roomExists) {\n\t\t\t\t// even if the room doesn't exist, we should allow the user to close the subscription anyways\n\t\t\t\tsubscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n\t\t\t} else {\n\t\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\n\t\t\t\tconst { subscription: subs } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\t\tsubscription = subs;\n\t\t\t}\n\n\t\t\tif (!subscription) {\n\t\t\t\treturn API.v1.failure(`The user is not subscribed to the room`);\n\t\t\t}\n\n\t\t\tif (!subscription.open) {\n\t\t\t\treturn API.v1.failure(`The direct message room, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// https://github.com/RocketChat/Rocket.Chat/pull/9679 as reference\nAPI.v1.addRoute(\n\t['dm.counters', 'im.counters'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { roomId, userId: ruserId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\t\t\tlet lm = null;\n\n\t\t\tif (ruserId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = ruserId;\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, user);\n\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, user);\n\n\t\t\tlm = room?.lm ? new Date(room.lm).toISOString() : new Date(room._updatedAt).toISOString(); // lm is the last message timestamp\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tif (subscription.ls && room.msgs) {\n\t\t\t\t\tunreads = subscription.unread;\n\t\t\t\t\tunreadsFrom = new Date(subscription.ls).toISOString(); // last read timestamp\n\t\t\t\t}\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.files', 'im.files'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmFileProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst ourQuery = query ? { rid: room._id, ...query } : { rid: room._id };\n\n\t\t\tconst { cursor, totalCount } = Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.history', 'im.history'],\n\t{ authRequired: true, validateParams: isDmHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset = 0, count = 20 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { roomId, latest, oldest, inclusive, unreads, showThreadMessages } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tconst objectParams = {\n\t\t\t\trid: room._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t};\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', objectParams);\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.members', 'im.members'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst extraQuery = {\n\t\t\t\t_id: { $in: room.uids },\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t};\n\n\t\t\tconst canSeeExtension = await hasAtLeastOnePermissionAsync(\n\t\t\t\tthis.userId,\n\t\t\t\t['view-full-other-user-info', 'view-user-voip-extension'],\n\t\t\t\troom._id,\n\t\t\t);\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tfederated: 1,\n\t\t\t\t\t...(canSeeExtension && { freeSwitchExtension: 1 }),\n\t\t\t\t},\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tsort: {\n\t\t\t\t\t_updatedAt: -1,\n\t\t\t\t\tusername: sort?.username ? sort.username : 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages', 'im.messages'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMessagesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = { rid: room._id, ...query };\n\t\t\tconst sortObj = { ts: sort?.ts ?? -1 };\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sortObj,\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\t...(fields && { projection: fields }),\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages.others', 'im.messages.others'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tif (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/im.messages.others',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });\n\t\t\tif (!room || room?.t !== 'd') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', `No direct message room found by the id of: ${roomId}`);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated<IMessage>(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [msgs, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (!msgs) {\n\t\t\t\tthrow new Meteor.Error('error-no-messages', 'No messages found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(msgs, this.userId),\n\t\t\t\toffset,\n\t\t\t\tcount: msgs.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list', 'im.list'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = { name: 1 }, fields } = await this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breaking notice since we removed the query param\n\n\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })\n\t\t\t\t.map((item) => item.rid)\n\t\t\t\t.toArray();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ t: 'd', _id: { $in: subscriptions } },\n\t\t\t\t{\n\t\t\t\t\tsort,\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [ims, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(ims.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: ims.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list.everyone', 'im.list.everyone'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count }: { offset: number; count: number } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ ...query, t: 'd' },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(rooms.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.open', 'im.open'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tif (!subscription?.open) {\n\t\t\t\tawait Meteor.callAsync('openRoom', room._id);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.setTopic', 'im.setTopic'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, topic } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tawait saveRoomSettings(this.userId, room._id, 'roomTopic', topic);\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic,\n\t\t\t});\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Subscriptions, Uploads, Messages, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Uploads(v) {\n        Uploads = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let isDmDeleteProps, isDmFileProps, isDmMemberProps, isDmMessagesProps, isDmCreateProps, isDmHistoryProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isDmDeleteProps(v) {\n        isDmDeleteProps = v;\n      },\n      isDmFileProps(v) {\n        isDmFileProps = v;\n      },\n      isDmMemberProps(v) {\n        isDmMemberProps = v;\n      },\n      isDmMessagesProps(v) {\n        isDmMessagesProps = v;\n      },\n      isDmCreateProps(v) {\n        isDmCreateProps = v;\n      },\n      isDmHistoryProps(v) {\n        isDmHistoryProps = v;\n      }\n    }, 1);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let eraseRoom;\n    module.link(\"../../../../server/lib/eraseRoom\", {\n      eraseRoom(v) {\n        eraseRoom = v;\n      }\n    }, 4);\n    let createDirectMessage;\n    module.link(\"../../../../server/methods/createDirectMessage\", {\n      createDirectMessage(v) {\n        createDirectMessage = v;\n      }\n    }, 5);\n    let hideRoomMethod;\n    module.link(\"../../../../server/methods/hideRoom\", {\n      hideRoomMethod(v) {\n        hideRoomMethod = v;\n      }\n    }, 6);\n    let canAccessRoomIdAsync;\n    module.link(\"../../../authorization/server/functions/canAccessRoom\", {\n      canAccessRoomIdAsync(v) {\n        canAccessRoomIdAsync = v;\n      }\n    }, 7);\n    let hasAtLeastOnePermissionAsync, hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasAtLeastOnePermissionAsync(v) {\n        hasAtLeastOnePermissionAsync = v;\n      },\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 8);\n    let saveRoomSettings;\n    module.link(\"../../../channel-settings/server/methods/saveRoomSettings\", {\n      saveRoomSettings(v) {\n        saveRoomSettings = v;\n      }\n    }, 9);\n    let getRoomByNameOrIdWithOptionToJoin;\n    module.link(\"../../../lib/server/functions/getRoomByNameOrIdWithOptionToJoin\", {\n      getRoomByNameOrIdWithOptionToJoin(v) {\n        getRoomByNameOrIdWithOptionToJoin = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 12);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 13);\n    let addUserToFileObj;\n    module.link(\"../helpers/addUserToFileObj\", {\n      addUserToFileObj(v) {\n        addUserToFileObj = v;\n      }\n    }, 14);\n    let composeRoomWithLastMessage;\n    module.link(\"../helpers/composeRoomWithLastMessage\", {\n      composeRoomWithLastMessage(v) {\n        composeRoomWithLastMessage = v;\n      }\n    }, 15);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 16);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const findDirectMessageRoom = async (keys, uid) => {\n      if (!('roomId' in keys) && !('username' in keys)) {\n        throw new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" or \"username\" is required');\n      }\n      const user = await Users.findOneById(uid, {\n        projection: {\n          username: 1\n        }\n      });\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'findDirectMessageRoom'\n        });\n      }\n      const room = await getRoomByNameOrIdWithOptionToJoin({\n        user,\n        nameOrId: 'roomId' in keys ? keys.roomId : keys.username,\n        type: 'd'\n      });\n      if (!room || (room === null || room === void 0 ? void 0 : room.t) !== 'd') {\n        throw new Meteor.Error('error-room-not-found', 'The required \"roomId\" param provided does not match any direct message');\n      }\n      const subscription = await Subscriptions.findOne({\n        'rid': room._id,\n        'u._id': uid\n      });\n      return {\n        room,\n        subscription\n      };\n    };\n    API.v1.addRoute(['dm.create', 'im.create'], {\n      authRequired: true,\n      validateParams: isDmCreateProps\n    }, {\n      async post() {\n        const users = 'username' in this.bodyParams ? [this.bodyParams.username] : this.bodyParams.usernames.split(',').map(username => username.trim());\n        const room = await createDirectMessage(users, this.userId, this.bodyParams.excludeSelf);\n        return API.v1.success({\n          room: _objectSpread(_objectSpread({}, room), {}, {\n            _id: room.rid\n          })\n        });\n      }\n    });\n    API.v1.addRoute(['dm.delete', 'im.delete'], {\n      authRequired: true,\n      validateParams: isDmDeleteProps\n    }, {\n      async post() {\n        const {\n          room\n        } = await findDirectMessageRoom(this.bodyParams, this.userId);\n        const canAccess = (await canAccessRoomIdAsync(room._id, this.userId)) || (await hasPermissionAsync(this.userId, 'view-room-administration'));\n        if (!canAccess) {\n          throw new Meteor.Error('error-not-allowed', 'Not allowed');\n        }\n        await eraseRoom(room._id, this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute(['dm.close', 'im.close'], {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId\n        } = this.bodyParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n        }\n        let subscription;\n        const roomExists = !!(await Rooms.findOneById(roomId));\n        if (!roomExists) {\n          // even if the room doesn't exist, we should allow the user to close the subscription anyways\n          subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n        } else {\n          const canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n          if (!canAccess) {\n            return API.v1.unauthorized();\n          }\n          const {\n            subscription: subs\n          } = await findDirectMessageRoom({\n            roomId\n          }, this.userId);\n          subscription = subs;\n        }\n        if (!subscription) {\n          return API.v1.failure(\"The user is not subscribed to the room\");\n        }\n        if (!subscription.open) {\n          return API.v1.failure(\"The direct message room, is already closed to the sender\");\n        }\n        await hideRoomMethod(this.userId, roomId);\n        return API.v1.success();\n      }\n    });\n    // https://github.com/RocketChat/Rocket.Chat/pull/9679 as reference\n    API.v1.addRoute(['dm.counters', 'im.counters'], {\n      authRequired: true\n    }, {\n      async get() {\n        const access = await hasPermissionAsync(this.userId, 'view-room-administration');\n        const {\n          roomId,\n          userId: ruserId\n        } = this.queryParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n        }\n        let user = this.userId;\n        let unreads = null;\n        let userMentions = null;\n        let unreadsFrom = null;\n        let joined = false;\n        let msgs = null;\n        let latest = null;\n        let members = null;\n        let lm = null;\n        if (ruserId) {\n          if (!access) {\n            return API.v1.unauthorized();\n          }\n          user = ruserId;\n        }\n        const canAccess = await canAccessRoomIdAsync(roomId, user);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const {\n          room,\n          subscription\n        } = await findDirectMessageRoom({\n          roomId\n        }, user);\n        lm = room !== null && room !== void 0 && room.lm ? new Date(room.lm).toISOString() : new Date(room._updatedAt).toISOString(); // lm is the last message timestamp\n        if (subscription !== null && subscription !== void 0 && subscription.open) {\n          if (subscription.ls && room.msgs) {\n            unreads = subscription.unread;\n            unreadsFrom = new Date(subscription.ls).toISOString(); // last read timestamp\n          }\n          userMentions = subscription.userMentions;\n          joined = true;\n        }\n        if (access || joined) {\n          msgs = room.msgs;\n          latest = lm;\n          members = room.usersCount;\n        }\n        return API.v1.success({\n          joined,\n          members,\n          unreads,\n          unreadsFrom,\n          msgs,\n          latest,\n          userMentions\n        });\n      }\n    });\n    API.v1.addRoute(['dm.files', 'im.files'], {\n      authRequired: true,\n      validateParams: isDmFileProps\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const {\n          room\n        } = await findDirectMessageRoom(this.queryParams, this.userId);\n        const canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const ourQuery = query ? _objectSpread({\n          rid: room._id\n        }, query) : {\n          rid: room._id\n        };\n        const {\n          cursor,\n          totalCount\n        } = Uploads.findPaginatedWithoutThumbs(ourQuery, {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          files: await addUserToFileObj(files),\n          count: files.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.history', 'im.history'], {\n      authRequired: true,\n      validateParams: isDmHistoryProps\n    }, {\n      async get() {\n        const {\n          offset = 0,\n          count = 20\n        } = await getPaginationItems(this.queryParams);\n        const {\n          roomId,\n          latest,\n          oldest,\n          inclusive,\n          unreads,\n          showThreadMessages\n        } = this.queryParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n        }\n        const {\n          room\n        } = await findDirectMessageRoom({\n          roomId\n        }, this.userId);\n        const objectParams = {\n          rid: room._id,\n          latest: latest ? new Date(latest) : new Date(),\n          oldest: oldest && new Date(oldest),\n          inclusive: inclusive === 'true',\n          offset,\n          count,\n          unreads: unreads === 'true',\n          showThreadMessages: showThreadMessages === 'true'\n        };\n        const result = await Meteor.callAsync('getChannelHistory', objectParams);\n        if (!result) {\n          return API.v1.unauthorized();\n        }\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute(['dm.members', 'im.members'], {\n      authRequired: true,\n      validateParams: isDmMemberProps\n    }, {\n      async get() {\n        const {\n          room\n        } = await findDirectMessageRoom(this.queryParams, this.userId);\n        const canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        check(this.queryParams, Match.ObjectIncluding({\n          status: Match.Maybe([String]),\n          filter: Match.Maybe(String)\n        }));\n        const {\n          status,\n          filter\n        } = this.queryParams;\n        const extraQuery = _objectSpread({\n          _id: {\n            $in: room.uids\n          }\n        }, status && {\n          status: {\n            $in: status\n          }\n        });\n        const canSeeExtension = await hasAtLeastOnePermissionAsync(this.userId, ['view-full-other-user-info', 'view-user-voip-extension'], room._id);\n        const options = {\n          projection: _objectSpread({\n            _id: 1,\n            username: 1,\n            name: 1,\n            status: 1,\n            statusText: 1,\n            utcOffset: 1,\n            federated: 1\n          }, canSeeExtension && {\n            freeSwitchExtension: 1\n          }),\n          skip: offset,\n          limit: count,\n          sort: {\n            _updatedAt: -1,\n            username: sort !== null && sort !== void 0 && sort.username ? sort.username : 1\n          }\n        };\n        const searchFields = settings.get('Accounts_SearchFields').trim().split(',');\n        const {\n          cursor,\n          totalCount\n        } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n        const [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          members,\n          count: members.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.messages', 'im.messages'], {\n      authRequired: true,\n      validateParams: isDmMessagesProps\n    }, {\n      async get() {\n        var _sort$ts;\n        const {\n          room\n        } = await findDirectMessageRoom(this.queryParams, this.userId);\n        const canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = _objectSpread({\n          rid: room._id\n        }, query);\n        const sortObj = {\n          ts: (_sort$ts = sort === null || sort === void 0 ? void 0 : sort.ts) !== null && _sort$ts !== void 0 ? _sort$ts : -1\n        };\n        const {\n          cursor,\n          totalCount\n        } = Messages.findPaginated(ourQuery, _objectSpread({\n          sort: sortObj,\n          skip: offset,\n          limit: count\n        }, fields && {\n          projection: fields\n        }));\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(messages, this.userId),\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.messages.others', 'im.messages.others'], {\n      authRequired: true,\n      permissionsRequired: ['view-room-administration']\n    }, {\n      async get() {\n        if (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n          throw new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n            route: '/api/v1/im.messages.others'\n          });\n        }\n        const {\n          roomId\n        } = this.queryParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n        }\n        const room = await Rooms.findOneById(roomId, {\n          projection: {\n            _id: 1,\n            t: 1\n          }\n        });\n        if (!room || (room === null || room === void 0 ? void 0 : room.t) !== 'd') {\n          throw new Meteor.Error('error-room-not-found', \"No direct message room found by the id of: \".concat(roomId));\n        }\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const ourQuery = Object.assign({}, query, {\n          rid: room._id\n        });\n        const {\n          cursor,\n          totalCount\n        } = Messages.findPaginated(ourQuery, {\n          sort: sort || {\n            ts: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [msgs, total] = await Promise.all([cursor.toArray(), totalCount]);\n        if (!msgs) {\n          throw new Meteor.Error('error-no-messages', 'No messages found');\n        }\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(msgs, this.userId),\n          offset,\n          count: msgs.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.list', 'im.list'], {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort = {\n            name: 1\n          },\n          fields\n        } = await this.parseJsonQuery();\n        // TODO: CACHE: Add Breaking notice since we removed the query param\n        const subscriptions = await Subscriptions.find({\n          'u._id': this.userId,\n          't': 'd'\n        }, {\n          projection: {\n            rid: 1\n          }\n        }).map(item => item.rid).toArray();\n        const {\n          cursor,\n          totalCount\n        } = Rooms.findPaginated({\n          t: 'd',\n          _id: {\n            $in: subscriptions\n          }\n        }, {\n          sort,\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [ims, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          ims: await Promise.all(ims.map(room => composeRoomWithLastMessage(room, this.userId))),\n          offset,\n          count: ims.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.list.everyone', 'im.list.everyone'], {\n      authRequired: true,\n      permissionsRequired: ['view-room-administration']\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        const {\n          cursor,\n          totalCount\n        } = Rooms.findPaginated(_objectSpread(_objectSpread({}, query), {}, {\n          t: 'd'\n        }), {\n          sort: sort || {\n            name: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          ims: await Promise.all(rooms.map(room => composeRoomWithLastMessage(room, this.userId))),\n          offset,\n          count: rooms.length,\n          total\n        });\n      }\n    });\n    API.v1.addRoute(['dm.open', 'im.open'], {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId\n        } = this.bodyParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n        }\n        const canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const {\n          room,\n          subscription\n        } = await findDirectMessageRoom({\n          roomId\n        }, this.userId);\n        if (!(subscription !== null && subscription !== void 0 && subscription.open)) {\n          await Meteor.callAsync('openRoom', room._id);\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute(['dm.setTopic', 'im.setTopic'], {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId,\n          topic\n        } = this.bodyParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n        }\n        const canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n        if (!canAccess) {\n          return API.v1.unauthorized();\n        }\n        const {\n          room\n        } = await findDirectMessageRoom({\n          roomId\n        }, this.userId);\n        await saveRoomSettings(this.userId, room._id, 'roomTopic', topic);\n        return API.v1.success({\n          topic\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Subscriptions","Uploads","Messages","Rooms","Users","isDmDeleteProps","isDmFileProps","isDmMemberProps","isDmMessagesProps","isDmCreateProps","isDmHistoryProps","Match","check","Meteor","eraseRoom","createDirectMessage","hideRoomMethod","canAccessRoomIdAsync","hasAtLeastOnePermissionAsync","hasPermissionAsync","saveRoomSettings","getRoomByNameOrIdWithOptionToJoin","settings","normalizeMessagesForUser","API","addUserToFileObj","composeRoomWithLastMessage","getPaginationItems","__reifyWaitForDeps__","findDirectMessageRoom","keys","uid","Error","user","findOneById","projection","username","method","room","nameOrId","roomId","type","t","subscription","findOne","_id","v1","addRoute","authRequired","validateParams","post","users","bodyParams","usernames","split","map","trim","userId","excludeSelf","success","rid","canAccess","roomExists","findOneByRoomIdAndUserId","unauthorized","subs","failure","open","get","access","ruserId","queryParams","unreads","userMentions","unreadsFrom","joined","msgs","latest","members","lm","Date","toISOString","_updatedAt","ls","unread","usersCount","offset","count","sort","fields","query","parseJsonQuery","ourQuery","cursor","totalCount","findPaginatedWithoutThumbs","name","skip","limit","files","total","Promise","all","toArray","length","oldest","inclusive","showThreadMessages","objectParams","result","callAsync","ObjectIncluding","status","Maybe","String","filter","extraQuery","$in","uids","canSeeExtension","options","statusText","utcOffset","federated","freeSwitchExtension","searchFields","findPaginatedByActiveUsersExcept","_sort$ts","sortObj","ts","findPaginated","messages","permissionsRequired","route","concat","Object","assign","subscriptions","find","item","ims","rooms","topic","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/im.ts"],"sourcesContent":["/**\n * Docs: https://github.com/RocketChat/developer-docs/blob/master/reference/api/rest-api/endpoints/team-collaboration-endpoints/im-endpoints\n */\nimport type { IMessage, IRoom, ISubscription } from '@rocket.chat/core-typings';\nimport { Subscriptions, Uploads, Messages, Rooms, Users } from '@rocket.chat/models';\nimport {\n\tisDmDeleteProps,\n\tisDmFileProps,\n\tisDmMemberProps,\n\tisDmMessagesProps,\n\tisDmCreateProps,\n\tisDmHistoryProps,\n} from '@rocket.chat/rest-typings';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { eraseRoom } from '../../../../server/lib/eraseRoom';\nimport { createDirectMessage } from '../../../../server/methods/createDirectMessage';\nimport { hideRoomMethod } from '../../../../server/methods/hideRoom';\nimport { canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { hasAtLeastOnePermissionAsync, hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { saveRoomSettings } from '../../../channel-settings/server/methods/saveRoomSettings';\nimport { getRoomByNameOrIdWithOptionToJoin } from '../../../lib/server/functions/getRoomByNameOrIdWithOptionToJoin';\nimport { settings } from '../../../settings/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { addUserToFileObj } from '../helpers/addUserToFileObj';\nimport { composeRoomWithLastMessage } from '../helpers/composeRoomWithLastMessage';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\n\n// TODO: Refact or remove\n\ntype findDirectMessageRoomProps =\n\t| {\n\t\t\troomId: string;\n\t  }\n\t| {\n\t\t\tusername: string;\n\t  };\n\nconst findDirectMessageRoom = async (\n\tkeys: findDirectMessageRoomProps,\n\tuid: string,\n): Promise<{ room: IRoom; subscription: ISubscription | null }> => {\n\tif (!('roomId' in keys) && !('username' in keys)) {\n\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" or \"username\" is required');\n\t}\n\n\tconst user = await Users.findOneById(uid, { projection: { username: 1 } });\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\tmethod: 'findDirectMessageRoom',\n\t\t});\n\t}\n\n\tconst room = await getRoomByNameOrIdWithOptionToJoin({\n\t\tuser,\n\t\tnameOrId: 'roomId' in keys ? keys.roomId : keys.username,\n\t\ttype: 'd',\n\t});\n\n\tif (!room || room?.t !== 'd') {\n\t\tthrow new Meteor.Error('error-room-not-found', 'The required \"roomId\" param provided does not match any direct message');\n\t}\n\n\tconst subscription = await Subscriptions.findOne({ 'rid': room._id, 'u._id': uid });\n\n\treturn {\n\t\troom,\n\t\tsubscription,\n\t};\n};\n\nAPI.v1.addRoute(\n\t['dm.create', 'im.create'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmCreateProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst users =\n\t\t\t\t'username' in this.bodyParams\n\t\t\t\t\t? [this.bodyParams.username]\n\t\t\t\t\t: this.bodyParams.usernames.split(',').map((username: string) => username.trim());\n\n\t\t\tconst room = await createDirectMessage(users, this.userId, this.bodyParams.excludeSelf);\n\n\t\t\treturn API.v1.success({\n\t\t\t\troom: { ...room, _id: room.rid },\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.delete', 'im.delete'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmDeleteProps,\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.bodyParams, this.userId);\n\n\t\t\tconst canAccess =\n\t\t\t\t(await canAccessRoomIdAsync(room._id, this.userId)) || (await hasPermissionAsync(this.userId, 'view-room-administration'));\n\t\t\tif (!canAccess) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tawait eraseRoom(room._id, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.close', 'im.close'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tlet subscription;\n\n\t\t\tconst roomExists = !!(await Rooms.findOneById(roomId));\n\t\t\tif (!roomExists) {\n\t\t\t\t// even if the room doesn't exist, we should allow the user to close the subscription anyways\n\t\t\t\tsubscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId);\n\t\t\t} else {\n\t\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\t\tif (!canAccess) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\n\t\t\t\tconst { subscription: subs } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\t\tsubscription = subs;\n\t\t\t}\n\n\t\t\tif (!subscription) {\n\t\t\t\treturn API.v1.failure(`The user is not subscribed to the room`);\n\t\t\t}\n\n\t\t\tif (!subscription.open) {\n\t\t\t\treturn API.v1.failure(`The direct message room, is already closed to the sender`);\n\t\t\t}\n\n\t\t\tawait hideRoomMethod(this.userId, roomId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\n// https://github.com/RocketChat/Rocket.Chat/pull/9679 as reference\nAPI.v1.addRoute(\n\t['dm.counters', 'im.counters'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst access = await hasPermissionAsync(this.userId, 'view-room-administration');\n\t\t\tconst { roomId, userId: ruserId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tlet user = this.userId;\n\t\t\tlet unreads = null;\n\t\t\tlet userMentions = null;\n\t\t\tlet unreadsFrom = null;\n\t\t\tlet joined = false;\n\t\t\tlet msgs = null;\n\t\t\tlet latest = null;\n\t\t\tlet members = null;\n\t\t\tlet lm = null;\n\n\t\t\tif (ruserId) {\n\t\t\t\tif (!access) {\n\t\t\t\t\treturn API.v1.unauthorized();\n\t\t\t\t}\n\t\t\t\tuser = ruserId;\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, user);\n\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, user);\n\n\t\t\tlm = room?.lm ? new Date(room.lm).toISOString() : new Date(room._updatedAt).toISOString(); // lm is the last message timestamp\n\n\t\t\tif (subscription?.open) {\n\t\t\t\tif (subscription.ls && room.msgs) {\n\t\t\t\t\tunreads = subscription.unread;\n\t\t\t\t\tunreadsFrom = new Date(subscription.ls).toISOString(); // last read timestamp\n\t\t\t\t}\n\t\t\t\tuserMentions = subscription.userMentions;\n\t\t\t\tjoined = true;\n\t\t\t}\n\n\t\t\tif (access || joined) {\n\t\t\t\tmsgs = room.msgs;\n\t\t\t\tlatest = lm;\n\t\t\t\tmembers = room.usersCount;\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tjoined,\n\t\t\t\tmembers,\n\t\t\t\tunreads,\n\t\t\t\tunreadsFrom,\n\t\t\t\tmsgs,\n\t\t\t\tlatest,\n\t\t\t\tuserMentions,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.files', 'im.files'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmFileProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst ourQuery = query ? { rid: room._id, ...query } : { rid: room._id };\n\n\t\t\tconst { cursor, totalCount } = Uploads.findPaginatedWithoutThumbs(ourQuery, {\n\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [files, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tfiles: await addUserToFileObj(files),\n\t\t\t\tcount: files.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.history', 'im.history'],\n\t{ authRequired: true, validateParams: isDmHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset = 0, count = 20 } = await getPaginationItems(this.queryParams);\n\t\t\tconst { roomId, latest, oldest, inclusive, unreads, showThreadMessages } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Query param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tconst objectParams = {\n\t\t\t\trid: room._id,\n\t\t\t\tlatest: latest ? new Date(latest) : new Date(),\n\t\t\t\toldest: oldest && new Date(oldest),\n\t\t\t\tinclusive: inclusive === 'true',\n\t\t\t\toffset,\n\t\t\t\tcount,\n\t\t\t\tunreads: unreads === 'true',\n\t\t\t\tshowThreadMessages: showThreadMessages === 'true',\n\t\t\t};\n\n\t\t\tconst result = await Meteor.callAsync('getChannelHistory', objectParams);\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.members', 'im.members'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMemberProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tcheck(\n\t\t\t\tthis.queryParams,\n\t\t\t\tMatch.ObjectIncluding({\n\t\t\t\t\tstatus: Match.Maybe([String]),\n\t\t\t\t\tfilter: Match.Maybe(String),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst { status, filter } = this.queryParams;\n\n\t\t\tconst extraQuery = {\n\t\t\t\t_id: { $in: room.uids },\n\t\t\t\t...(status && { status: { $in: status } }),\n\t\t\t};\n\n\t\t\tconst canSeeExtension = await hasAtLeastOnePermissionAsync(\n\t\t\t\tthis.userId,\n\t\t\t\t['view-full-other-user-info', 'view-user-voip-extension'],\n\t\t\t\troom._id,\n\t\t\t);\n\n\t\t\tconst options = {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t\tstatusText: 1,\n\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\tfederated: 1,\n\t\t\t\t\t...(canSeeExtension && { freeSwitchExtension: 1 }),\n\t\t\t\t},\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tsort: {\n\t\t\t\t\t_updatedAt: -1,\n\t\t\t\t\tusername: sort?.username ? sort.username : 1,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst searchFields = settings.get<string>('Accounts_SearchFields').trim().split(',');\n\n\t\t\tconst { cursor, totalCount } = Users.findPaginatedByActiveUsersExcept(filter, [], options, searchFields, [extraQuery]);\n\n\t\t\tconst [members, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmembers,\n\t\t\t\tcount: members.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages', 'im.messages'],\n\t{\n\t\tauthRequired: true,\n\t\tvalidateParams: isDmMessagesProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { room } = await findDirectMessageRoom(this.queryParams, this.userId);\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(room._id, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst ourQuery = { rid: room._id, ...query };\n\t\t\tconst sortObj = { ts: sort?.ts ?? -1 };\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated(ourQuery, {\n\t\t\t\tsort: sortObj,\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\t...(fields && { projection: fields }),\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.messages.others', 'im.messages.others'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tif (settings.get('API_Enable_Direct_Message_History_EndPoint') !== true) {\n\t\t\t\tthrow new Meteor.Error('error-endpoint-disabled', 'This endpoint is disabled', {\n\t\t\t\t\troute: '/api/v1/im.messages.others',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomid-param-not-provided', 'The parameter \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst room = await Rooms.findOneById<Pick<IRoom, '_id' | 't'>>(roomId, { projection: { _id: 1, t: 1 } });\n\t\t\tif (!room || room?.t !== 'd') {\n\t\t\t\tthrow new Meteor.Error('error-room-not-found', `No direct message room found by the id of: ${roomId}`);\n\t\t\t}\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\t\t\tconst ourQuery = Object.assign({}, query, { rid: room._id });\n\n\t\t\tconst { cursor, totalCount } = Messages.findPaginated<IMessage>(ourQuery, {\n\t\t\t\tsort: sort || { ts: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [msgs, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\tif (!msgs) {\n\t\t\t\tthrow new Meteor.Error('error-no-messages', 'No messages found');\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(msgs, this.userId),\n\t\t\t\toffset,\n\t\t\t\tcount: msgs.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list', 'im.list'],\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort = { name: 1 }, fields } = await this.parseJsonQuery();\n\n\t\t\t// TODO: CACHE: Add Breaking notice since we removed the query param\n\n\t\t\tconst subscriptions = await Subscriptions.find({ 'u._id': this.userId, 't': 'd' }, { projection: { rid: 1 } })\n\t\t\t\t.map((item) => item.rid)\n\t\t\t\t.toArray();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ t: 'd', _id: { $in: subscriptions } },\n\t\t\t\t{\n\t\t\t\t\tsort,\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [ims, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(ims.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: ims.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.list.everyone', 'im.list.everyone'],\n\t{ authRequired: true, permissionsRequired: ['view-room-administration'] },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count }: { offset: number; count: number } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tconst { cursor, totalCount } = Rooms.findPaginated(\n\t\t\t\t{ ...query, t: 'd' },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { name: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [rooms, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tims: await Promise.all(rooms.map((room: IRoom) => composeRoomWithLastMessage(room, this.userId))),\n\t\t\t\toffset,\n\t\t\t\tcount: rooms.length,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.open', 'im.open'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room, subscription } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tif (!subscription?.open) {\n\t\t\t\tawait Meteor.callAsync('openRoom', room._id);\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t['dm.setTopic', 'im.setTopic'],\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, topic } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-room-param-not-provided', 'Body param \"roomId\" is required');\n\t\t\t}\n\n\t\t\tconst canAccess = await canAccessRoomIdAsync(roomId, this.userId);\n\t\t\tif (!canAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { room } = await findDirectMessageRoom({ roomId }, this.userId);\n\n\t\t\tawait saveRoomSettings(this.userId, room._id, 'roomTopic', topic);\n\n\t\t\treturn API.v1.success({\n\t\t\t\ttopic,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"05c984a36bad88bcc4d069e95d53d4c26242d7cc"}
