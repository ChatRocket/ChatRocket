{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/User.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/User.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/User.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/User.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/User.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users, MatrixBridgedUser } from '@rocket.chat/models';\n\nimport { _setRealName as setRealName } from '../../../../../../app/lib/server/functions/setRealName';\nimport { setUserAvatar } from '../../../../../../app/lib/server/functions/setUserAvatar';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\n\nconst createFederatedUserInstance = (externalUserId: string, user: IUser, remote = true): FederatedUser => {\n\tconst federatedUser = FederatedUser.createWithInternalReference(externalUserId, !remote, user);\n\n\treturn federatedUser;\n};\n\nexport const getFederatedUserByInternalUsername = async (username: string): Promise<FederatedUser | undefined> => {\n\tconst user = await Users.findOneByUsername(username);\n\tif (!user) {\n\t\treturn;\n\t}\n\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\tif (!internalBridgedUser) {\n\t\treturn;\n\t}\n\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\treturn createFederatedUserInstance(externalUserId, user, remote);\n};\n\nexport class RocketChatUserAdapter {\n\tpublic async getFederatedUserByExternalId(externalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByExternalUserId(externalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUsersByExternalIds(externalUserIds: string[]): Promise<FederatedUser[]> {\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tif (internalBridgedUsers.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\t\t(acc, bridgedUser) => ({ ...acc, [bridgedUser.uid]: { mui: bridgedUser.mui, remote: bridgedUser.remote } }),\n\t\t\t{},\n\t\t);\n\t\tconst users = await Users.findByIds(internalUserIds).toArray();\n\n\t\tif (users.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn users.map((user) => createFederatedUserInstance(internalUserIdsMap[user._id].mui, user, internalUserIdsMap[user._id].remote));\n\t}\n\n\tpublic async getFederatedUserByInternalId(internalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(internalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { uid: userId, mui: externalUserId, remote } = internalBridgedUser;\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUserByInternalUsername(username: string): Promise<FederatedUser | undefined> {\n\t\tconst user = await Users.findOneByUsername(username);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t}\n\n\tpublic async getInternalUserById(userId: string): Promise<IUser> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user?.username) {\n\t\t\tthrow new Error(`User with internalId ${userId} not found`);\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic async getInternalUserByUsername(username: string): Promise<IUser | undefined> {\n\t\treturn Users.findOneByUsername(username);\n\t}\n\n\tpublic async createFederatedUser(federatedUser: FederatedUser): Promise<void> {\n\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tif (existingLocalUser) {\n\t\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\t\texistingLocalUser._id,\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedUser.isRemote(),\n\t\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t\t);\n\t\t}\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());\n\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\tinsertedId,\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tfederatedUser.isRemote(),\n\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t);\n\t}\n\n\tpublic async setAvatar(federatedUser: FederatedUser, avatarUrl: string): Promise<void> {\n\t\tawait setUserAvatar(federatedUser.getInternalReference(), avatarUrl, 'image/jpeg', 'url'); // this mimetype is fixed here, but the function when called with a url as source don't use that mimetype\n\t}\n\n\tpublic async updateFederationAvatar(internalUserId: string, externalAvatarUrl: string): Promise<void> {\n\t\tawait Users.setFederationAvatarUrlById(internalUserId, externalAvatarUrl);\n\t}\n\n\tpublic async updateRealName(internalUser: IUser, name: string): Promise<void> {\n\t\tawait setRealName(internalUser._id, name, internalUser);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/User.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/User.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/User.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/User.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users, MatrixBridgedUser } from '@rocket.chat/models';\n\nimport { _setRealName as setRealName } from '../../../../../../app/lib/server/functions/setRealName';\nimport { setUserAvatar } from '../../../../../../app/lib/server/functions/setUserAvatar';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\n\nconst createFederatedUserInstance = (externalUserId: string, user: IUser, remote = true): FederatedUser => {\n\tconst federatedUser = FederatedUser.createWithInternalReference(externalUserId, !remote, user);\n\n\treturn federatedUser;\n};\n\nexport const getFederatedUserByInternalUsername = async (username: string): Promise<FederatedUser | undefined> => {\n\tconst user = await Users.findOneByUsername(username);\n\tif (!user) {\n\t\treturn;\n\t}\n\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\tif (!internalBridgedUser) {\n\t\treturn;\n\t}\n\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\treturn createFederatedUserInstance(externalUserId, user, remote);\n};\n\nexport class RocketChatUserAdapter {\n\tpublic async getFederatedUserByExternalId(externalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByExternalUserId(externalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUsersByExternalIds(externalUserIds: string[]): Promise<FederatedUser[]> {\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tif (internalBridgedUsers.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\t\t(acc, bridgedUser) => ({ ...acc, [bridgedUser.uid]: { mui: bridgedUser.mui, remote: bridgedUser.remote } }),\n\t\t\t{},\n\t\t);\n\t\tconst users = await Users.findByIds(internalUserIds).toArray();\n\n\t\tif (users.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn users.map((user) => createFederatedUserInstance(internalUserIdsMap[user._id].mui, user, internalUserIdsMap[user._id].remote));\n\t}\n\n\tpublic async getFederatedUserByInternalId(internalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(internalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { uid: userId, mui: externalUserId, remote } = internalBridgedUser;\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUserByInternalUsername(username: string): Promise<FederatedUser | undefined> {\n\t\tconst user = await Users.findOneByUsername(username);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t}\n\n\tpublic async getInternalUserById(userId: string): Promise<IUser> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user?.username) {\n\t\t\tthrow new Error(`User with internalId ${userId} not found`);\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic async getInternalUserByUsername(username: string): Promise<IUser | undefined> {\n\t\treturn Users.findOneByUsername(username);\n\t}\n\n\tpublic async createFederatedUser(federatedUser: FederatedUser): Promise<void> {\n\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tif (existingLocalUser) {\n\t\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\t\texistingLocalUser._id,\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedUser.isRemote(),\n\t\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t\t);\n\t\t}\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());\n\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\tinsertedId,\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tfederatedUser.isRemote(),\n\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t);\n\t}\n\n\tpublic async setAvatar(federatedUser: FederatedUser, avatarUrl: string): Promise<void> {\n\t\tawait setUserAvatar(federatedUser.getInternalReference(), avatarUrl, 'image/jpeg', 'url'); // this mimetype is fixed here, but the function when called with a url as source don't use that mimetype\n\t}\n\n\tpublic async updateFederationAvatar(internalUserId: string, externalAvatarUrl: string): Promise<void> {\n\t\tawait Users.setFederationAvatarUrlById(internalUserId, externalAvatarUrl);\n\t}\n\n\tpublic async updateRealName(internalUser: IUser, name: string): Promise<void> {\n\t\tawait setRealName(internalUser._id, name, internalUser);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      getFederatedUserByInternalUsername: () => getFederatedUserByInternalUsername,\n      RocketChatUserAdapter: () => RocketChatUserAdapter\n    });\n    let Users, MatrixBridgedUser;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      MatrixBridgedUser(v) {\n        MatrixBridgedUser = v;\n      }\n    }, 0);\n    let setRealName;\n    module.link(\"../../../../../../app/lib/server/functions/setRealName\", {\n      _setRealName(v) {\n        setRealName = v;\n      }\n    }, 1);\n    let setUserAvatar;\n    module.link(\"../../../../../../app/lib/server/functions/setUserAvatar\", {\n      setUserAvatar(v) {\n        setUserAvatar = v;\n      }\n    }, 2);\n    let FederatedUser;\n    module.link(\"../../../domain/FederatedUser\", {\n      FederatedUser(v) {\n        FederatedUser = v;\n      }\n    }, 3);\n    let extractServerNameFromExternalIdentifier;\n    module.link(\"../../matrix/converters/room/RoomReceiver\", {\n      extractServerNameFromExternalIdentifier(v) {\n        extractServerNameFromExternalIdentifier = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const createFederatedUserInstance = function (externalUserId, user) {\n      let remote = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      const federatedUser = FederatedUser.createWithInternalReference(externalUserId, !remote, user);\n      return federatedUser;\n    };\n    const getFederatedUserByInternalUsername = async username => {\n      const user = await Users.findOneByUsername(username);\n      if (!user) {\n        return;\n      }\n      const internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n      if (!internalBridgedUser) {\n        return;\n      }\n      const {\n        mui: externalUserId,\n        remote\n      } = internalBridgedUser;\n      return createFederatedUserInstance(externalUserId, user, remote);\n    };\n    class RocketChatUserAdapter {\n      async getFederatedUserByExternalId(externalUserId) {\n        const internalBridgedUser = await MatrixBridgedUser.getBridgedUserByExternalUserId(externalUserId);\n        if (!internalBridgedUser) {\n          return;\n        }\n        const user = await Users.findOneById(internalBridgedUser.uid);\n        if (user) {\n          return createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n        }\n      }\n      async getFederatedUsersByExternalIds(externalUserIds) {\n        const internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n        if (internalBridgedUsers.length === 0) {\n          return [];\n        }\n        const internalUserIds = internalBridgedUsers.map(bridgedUser => bridgedUser.uid);\n        const internalUserIdsMap = internalBridgedUsers.reduce((acc, bridgedUser) => _objectSpread(_objectSpread({}, acc), {}, {\n          [bridgedUser.uid]: {\n            mui: bridgedUser.mui,\n            remote: bridgedUser.remote\n          }\n        }), {});\n        const users = await Users.findByIds(internalUserIds).toArray();\n        if (users.length === 0) {\n          return [];\n        }\n        return users.map(user => createFederatedUserInstance(internalUserIdsMap[user._id].mui, user, internalUserIdsMap[user._id].remote));\n      }\n      async getFederatedUserByInternalId(internalUserId) {\n        const internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(internalUserId);\n        if (!internalBridgedUser) {\n          return;\n        }\n        const {\n          uid: userId,\n          mui: externalUserId,\n          remote\n        } = internalBridgedUser;\n        const user = await Users.findOneById(userId);\n        if (user) {\n          return createFederatedUserInstance(externalUserId, user, remote);\n        }\n      }\n      async getFederatedUserByInternalUsername(username) {\n        const user = await Users.findOneByUsername(username);\n        if (!user) {\n          return;\n        }\n        const internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n        if (!internalBridgedUser) {\n          return;\n        }\n        const {\n          mui: externalUserId,\n          remote\n        } = internalBridgedUser;\n        return createFederatedUserInstance(externalUserId, user, remote);\n      }\n      async getInternalUserById(userId) {\n        const user = await Users.findOneById(userId);\n        if (!(user !== null && user !== void 0 && user.username)) {\n          throw new Error(\"User with internalId \".concat(userId, \" not found\"));\n        }\n        return user;\n      }\n      async getInternalUserByUsername(username) {\n        return Users.findOneByUsername(username);\n      }\n      async createFederatedUser(federatedUser) {\n        const existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername()));\n        if (existingLocalUser) {\n          return MatrixBridgedUser.createOrUpdateByLocalId(existingLocalUser._id, federatedUser.getExternalId(), federatedUser.isRemote(), extractServerNameFromExternalIdentifier(federatedUser.getExternalId()));\n        }\n        const {\n          insertedId\n        } = await Users.insertOne(federatedUser.getStorageRepresentation());\n        return MatrixBridgedUser.createOrUpdateByLocalId(insertedId, federatedUser.getExternalId(), federatedUser.isRemote(), extractServerNameFromExternalIdentifier(federatedUser.getExternalId()));\n      }\n      async setAvatar(federatedUser, avatarUrl) {\n        await setUserAvatar(federatedUser.getInternalReference(), avatarUrl, 'image/jpeg', 'url'); // this mimetype is fixed here, but the function when called with a url as source don't use that mimetype\n      }\n      async updateFederationAvatar(internalUserId, externalAvatarUrl) {\n        await Users.setFederationAvatarUrlById(internalUserId, externalAvatarUrl);\n      }\n      async updateRealName(internalUser, name) {\n        await setRealName(internalUser._id, name, internalUser);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","getFederatedUserByInternalUsername","RocketChatUserAdapter","Users","MatrixBridgedUser","setRealName","_setRealName","setUserAvatar","FederatedUser","extractServerNameFromExternalIdentifier","__reifyWaitForDeps__","createFederatedUserInstance","externalUserId","user","remote","arguments","length","undefined","federatedUser","createWithInternalReference","username","findOneByUsername","internalBridgedUser","getBridgedUserByLocalId","_id","mui","getFederatedUserByExternalId","getBridgedUserByExternalUserId","findOneById","uid","getFederatedUsersByExternalIds","externalUserIds","internalBridgedUsers","getLocalUsersByExternalIds","internalUserIds","map","bridgedUser","internalUserIdsMap","reduce","acc","users","findByIds","toArray","getFederatedUserByInternalId","internalUserId","userId","getInternalUserById","Error","concat","getInternalUserByUsername","createFederatedUser","existingLocalUser","getUsername","createOrUpdateByLocalId","getExternalId","isRemote","insertedId","insertOne","getStorageRepresentation","setAvatar","avatarUrl","getInternalReference","updateFederationAvatar","externalAvatarUrl","setFederationAvatarUrlById","updateRealName","internalUser","name","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/infrastructure/rocket-chat/adapters/User.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users, MatrixBridgedUser } from '@rocket.chat/models';\n\nimport { _setRealName as setRealName } from '../../../../../../app/lib/server/functions/setRealName';\nimport { setUserAvatar } from '../../../../../../app/lib/server/functions/setUserAvatar';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { extractServerNameFromExternalIdentifier } from '../../matrix/converters/room/RoomReceiver';\n\nconst createFederatedUserInstance = (externalUserId: string, user: IUser, remote = true): FederatedUser => {\n\tconst federatedUser = FederatedUser.createWithInternalReference(externalUserId, !remote, user);\n\n\treturn federatedUser;\n};\n\nexport const getFederatedUserByInternalUsername = async (username: string): Promise<FederatedUser | undefined> => {\n\tconst user = await Users.findOneByUsername(username);\n\tif (!user) {\n\t\treturn;\n\t}\n\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\tif (!internalBridgedUser) {\n\t\treturn;\n\t}\n\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\treturn createFederatedUserInstance(externalUserId, user, remote);\n};\n\nexport class RocketChatUserAdapter {\n\tpublic async getFederatedUserByExternalId(externalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByExternalUserId(externalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst user = await Users.findOneById(internalBridgedUser.uid);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, internalBridgedUser.remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUsersByExternalIds(externalUserIds: string[]): Promise<FederatedUser[]> {\n\t\tconst internalBridgedUsers = await MatrixBridgedUser.getLocalUsersByExternalIds(externalUserIds);\n\t\tif (internalBridgedUsers.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst internalUserIds = internalBridgedUsers.map((bridgedUser) => bridgedUser.uid);\n\t\tconst internalUserIdsMap: Record<string, Record<string, any>> = internalBridgedUsers.reduce(\n\t\t\t(acc, bridgedUser) => ({ ...acc, [bridgedUser.uid]: { mui: bridgedUser.mui, remote: bridgedUser.remote } }),\n\t\t\t{},\n\t\t);\n\t\tconst users = await Users.findByIds(internalUserIds).toArray();\n\n\t\tif (users.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn users.map((user) => createFederatedUserInstance(internalUserIdsMap[user._id].mui, user, internalUserIdsMap[user._id].remote));\n\t}\n\n\tpublic async getFederatedUserByInternalId(internalUserId: string): Promise<FederatedUser | undefined> {\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(internalUserId);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { uid: userId, mui: externalUserId, remote } = internalBridgedUser;\n\t\tconst user = await Users.findOneById(userId);\n\n\t\tif (user) {\n\t\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t\t}\n\t}\n\n\tpublic async getFederatedUserByInternalUsername(username: string): Promise<FederatedUser | undefined> {\n\t\tconst user = await Users.findOneByUsername(username);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\t\tconst internalBridgedUser = await MatrixBridgedUser.getBridgedUserByLocalId(user._id);\n\t\tif (!internalBridgedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst { mui: externalUserId, remote } = internalBridgedUser;\n\n\t\treturn createFederatedUserInstance(externalUserId, user, remote);\n\t}\n\n\tpublic async getInternalUserById(userId: string): Promise<IUser> {\n\t\tconst user = await Users.findOneById(userId);\n\t\tif (!user?.username) {\n\t\t\tthrow new Error(`User with internalId ${userId} not found`);\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic async getInternalUserByUsername(username: string): Promise<IUser | undefined> {\n\t\treturn Users.findOneByUsername(username);\n\t}\n\n\tpublic async createFederatedUser(federatedUser: FederatedUser): Promise<void> {\n\t\tconst existingLocalUser = federatedUser.getUsername() && (await Users.findOneByUsername(federatedUser.getUsername() as string));\n\t\tif (existingLocalUser) {\n\t\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\t\texistingLocalUser._id,\n\t\t\t\tfederatedUser.getExternalId(),\n\t\t\t\tfederatedUser.isRemote(),\n\t\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t\t);\n\t\t}\n\t\tconst { insertedId } = await Users.insertOne(federatedUser.getStorageRepresentation());\n\t\treturn MatrixBridgedUser.createOrUpdateByLocalId(\n\t\t\tinsertedId,\n\t\t\tfederatedUser.getExternalId(),\n\t\t\tfederatedUser.isRemote(),\n\t\t\textractServerNameFromExternalIdentifier(federatedUser.getExternalId()),\n\t\t);\n\t}\n\n\tpublic async setAvatar(federatedUser: FederatedUser, avatarUrl: string): Promise<void> {\n\t\tawait setUserAvatar(federatedUser.getInternalReference(), avatarUrl, 'image/jpeg', 'url'); // this mimetype is fixed here, but the function when called with a url as source don't use that mimetype\n\t}\n\n\tpublic async updateFederationAvatar(internalUserId: string, externalAvatarUrl: string): Promise<void> {\n\t\tawait Users.setFederationAvatarUrlById(internalUserId, externalAvatarUrl);\n\t}\n\n\tpublic async updateRealName(internalUser: IUser, name: string): Promise<void> {\n\t\tawait setRealName(internalUser._id, name, internalUser);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"00f1c1fc6fc2b84d3187891e13be6613d3f1a3f9"}
