{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Messages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Messages.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Messages.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Messages.ts","sourceRoot":"","sources":["server/models/raw/Messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatDepartment,\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tMessageTypesValues,\n\tRocketChatRecordDeleted,\n\tMessageAttachment,\n\tIMessageWithPendingFileImport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IMessagesModel } from '@rocket.chat/model-typings';\nimport type { PaginatedRequest } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tCountDocumentsOptions,\n\tAggregateOptions,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tIndexDescription,\n\tInsertOneResult,\n\tDeleteResult,\n\tUpdateResult,\n\tDocument,\n\tUpdateFilter,\n\tModifyResult,\n} from 'mongodb';\n\nimport { otrSystemMessages } from '../../../app/otr/lib/constants';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DeepWritable<T> = T extends (...args: any) => any\n\t? T\n\t: {\n\t\t\t-readonly [P in keyof T]: DeepWritable<T[P]>;\n\t\t};\n\nexport class MessagesRaw extends BaseRaw<IMessage> implements IMessagesModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IMessage>>) {\n\t\tsuper(db, 'message', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { rid: 1, ts: 1, _updatedAt: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { 'u._id': 1 } },\n\t\t\t{ key: { editedAt: 1 }, sparse: true },\n\t\t\t{ key: { 'editedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'rid': 1, 't': 1, 'u._id': 1 } },\n\t\t\t{ key: { expireAt: 1 }, expireAfterSeconds: 0 },\n\t\t\t{ key: { msg: 'text' } },\n\t\t\t{ key: { 'file._id': 1 }, sparse: true },\n\t\t\t{ key: { 'mentions.username': 1 }, sparse: true },\n\t\t\t{ key: { pinned: 1 }, sparse: true },\n\t\t\t{ key: { location: '2dsphere' } },\n\t\t\t{ key: { slackTs: 1, slackBotId: 1 }, sparse: true },\n\t\t\t{ key: { unread: 1 }, sparse: true },\n\t\t\t{ key: { 'pinnedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'starred._id': 1 }, sparse: true },\n\n\t\t\t// discussions\n\t\t\t{ key: { drid: 1 }, sparse: true },\n\n\t\t\t// threads\n\t\t\t{ key: { tmid: 1 }, sparse: true },\n\t\t\t{ key: { tcount: 1, tlm: 1 }, sparse: true },\n\t\t\t{ key: { rid: 1, tlm: -1 }, partialFilterExpression: { tcount: { $exists: true } } }, // used for the List Threads\n\t\t\t{ key: { rid: 1, tcount: 1 } }, // used for the List Threads Count\n\n\t\t\t// livechat\n\t\t\t{ key: { 'navigation.token': 1 }, sparse: true },\n\n\t\t\t{ key: { 'federation.eventId': 1 }, sparse: true },\n\t\t\t{ key: { t: 1 }, sparse: true },\n\t\t];\n\t}\n\n\tfindVisibleByMentionAndRoomId(username: IUser['username'], rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedVisibleByMentionAndRoomId(\n\t\tusername: IUser['username'],\n\t\trid: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarredByUserAtRoom(\n\t\tuserId: IUser['_id'],\n\t\troomId: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': userId,\n\t\t\t'rid': roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByRoomIdAndType(\n\t\troomId: IRoom['_id'],\n\t\ttype: IMessage['t'],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\t// TODO: do we need this? currently not used anywhere\n\tfindDiscussionsByRoom(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = { rid, drid: { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDiscussionsByRoomAndText(rid: IRoom['_id'], text: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tdrid: { $exists: true },\n\t\t\tmsg: new RegExp(escapeRegExp(text), 'i'),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount: true;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: false;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: boolean;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }> | AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }> {\n\t\t// FIXME: aggregation type definitions\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'livechat_transfer_history',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\tlocalField: 'rid',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'room',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$room',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$room.departmentId',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [match, lookup, unwind];\n\t\tif (departmentId) {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'room.departmentId': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [...firstParams, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params, { readPreference: readSecondaryPreferred() });\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<{ _id: string | null; numberOfTransferredRooms: number }>(params, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tgetTotalOfMessagesSentByDate({ start, end, options = {} }: { start: Date; end: Date; options?: PaginatedRequest }): Promise<any[]> {\n\t\tconst params: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [\n\t\t\t{ $match: { t: { $exists: false }, ts: { $gte: start, $lte: end } } },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\tdate: {\n\t\t\t\t\t\t\t$dateToString: { format: '%Y%m%d', date: '$ts' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmessages: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id.rid',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tdate: '$_id.date',\n\t\t\t\t\t\t\tmessages: '$messages',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tdata: '$data',\n\t\t\t\t\troom: {\n\t\t\t\t\t\t_id: '$room._id',\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.fname', false] }, '$room.fname', '$room.name'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t\tusernames: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.usernames', false] }, '$room.usernames', []],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$data',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tdate: '$data.date',\n\t\t\t\t\troom: 1,\n\t\t\t\t\ttype: 1,\n\t\t\t\t\tmessages: '$data.messages',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options.sort) {\n\t\t\tparams.push({ $sort: options.sort });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindLivechatClosedMessages(rid: IRoom['_id'], searchTerm?: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t\t...(searchTerm && { msg: new RegExp(escapeRegExp(searchTerm), 'ig') }),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatClosingMessage(rid: IRoom['_id'], options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\treturn this.findOne<IMessage>(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tt: 'livechat-close',\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatMessages(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tts: Date,\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: { $lt: ts },\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesAndUsers(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tusers?: string[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t...(Array.isArray(users) && users.length > 0 && { 'u._id': { $nin: users } }),\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindLivechatMessagesWithoutTypes(\n\t\trid: IRoom['_id'],\n\t\tignoredTypes: IMessage['t'][],\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t};\n\n\t\tif (ignoredTypes.length > 0) {\n\t\t\tquery.t = { $nin: ignoredTypes };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync addBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne({ _id }, { $addToSet: { blocks: { $each: blocks } } });\n\t}\n\n\tasync countRoomsWithStarredMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { 'starred._id': { $exists: true } } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countRoomsWithMessageType(type: IMessage['t'], options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { t: type } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countByType(type: IMessage['t'], options: CountDocumentsOptions): Promise<number> {\n\t\treturn this.col.countDocuments({ t: type }, options);\n\t}\n\n\tasync countRoomsWithPinnedMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { pinned: true } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tfindPinned(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountPinned(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tfindPaginatedPinnedByRoom(roomId: IMessage['rid'], options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarred(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountStarred(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tasync setFederationReactionEventId(username: string, _id: string, reaction: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: username,\n\t\t\t\t} as any,\n\t\t\t},\n\t\t);\n\t}\n\n\tasync unsetFederationReactionEventId(federationEventId: string, _id: string, reaction: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationId(federationEventId: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'federation.eventId': federationEventId });\n\t}\n\n\tasync setFederationEventIdById(_id: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'federation.eventId': federationEventId,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationIdAndUsernameOnReactions(federationEventId: string, username: string): Promise<IMessage | null> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\tt: { $ne: 'rm' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\tdocument: '$$ROOT',\n\t\t\t\t\t\t\t\treactions: { $objectToArray: '$reactions' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\t\tpath: '$reactions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ 'reactions.v.usernames': { $in: [username] } },\n\t\t\t\t\t\t\t\t\t{ [`reactions.v.federationReactionEventIds.${federationEventId}`]: username },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ $replaceRoot: { newRoot: '$document' } },\n\t\t\t\t\t],\n\t\t\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t\t\t)\n\t\t\t\t.toArray()\n\t\t)[0] as IMessage;\n\t}\n\n\tremoveByRoomId(roomId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: roomId });\n\t}\n\n\tsetReactions(messageId: string, reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $set: { reactions } });\n\t}\n\n\tkeepHistoryForToken(token: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'expireAt': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\texpireAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetRoomIdByToken(token: string, rid: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\t\t'rid': null,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\trid,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetReactions(messageId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $unset: { reactions: 1 } });\n\t}\n\n\tdeleteOldOTRMessages(roomId: string, ts: Date): Promise<DeleteResult> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid: roomId,\n\t\t\tt: {\n\t\t\t\t$in: [\n\t\t\t\t\t'otr',\n\t\t\t\t\totrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\totrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t\t\totrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t],\n\t\t\t},\n\t\t\tts: { $lte: ts },\n\t\t};\n\t\treturn this.col.deleteMany(query);\n\t}\n\n\taddTranslations(messageId: string, translations: Record<string, string>, providerName: string): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = { translationProvider: providerName };\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\taddAttachmentTranslations(messageId: string, attachmentIndex: string, translations: Record<string, string>): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = {};\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`attachments.${attachmentIndex}.translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\tsetImportFileRocketChatAttachment(\n\t\timportFileId: string,\n\t\trocketChatUrl: string,\n\t\tattachment: MessageAttachment,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'_importFile.id': importFileId,\n\t\t};\n\n\t\treturn this.updateMany(query, {\n\t\t\t$set: {\n\t\t\t\t'_importFile.rocketChatUrl': rocketChatUrl,\n\t\t\t\t'_importFile.downloaded': true,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tattachments: attachment,\n\t\t\t},\n\t\t});\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsInclusive(roomId: string, afterTimestamp: Date, beforeTimestamp: Date): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gte: afterTimestamp,\n\t\t\t\t$lte: beforeTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\t// FIND\n\tfindByMention(username: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = { 'mentions.username': username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindFilesByUserId(userId: string, options: FindOptions<IMessage> = {}): FindCursor<Pick<IMessage, 'file'>> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindFilesByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t'file._id': { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(ignoreThreads ? { tmid: { $exists: false }, tcount: { $exists: false } } : {}),\n\t\t\t...(ignoreDiscussion ? { drid: { $exists: false } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindDiscussionByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\tdrid: { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomId<T extends IMessage = IMessage>(rid: string, options?: FindOptions<T>): FindCursor<T> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByIds(ids: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_id: { $in: ids },\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleThreadByThreadId(tmid: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\ttmid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypes(\n\t\troomId: string,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdAfterTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindForUpdates(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$lt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\troomId: string,\n\t\ttimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$lte' : '$lt']: timestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions: FindOptions<IMessage> = {},\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync getLastTimestamp(options: FindOptions<IMessage> = { projection: { _id: 0, ts: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ts: -1 };\n\t\toptions.limit = 1;\n\t\tconst [message] = await this.find({}, options).toArray();\n\t\treturn message?.ts;\n\t}\n\n\tfindByRoomIdAndMessageIds(rid: string, messageIds: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: {\n\t\t\t\t$in: messageIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneBySlackBotIdAndSlackTs(slackBotId: string, slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\tslackBotId,\n\t\t\tslackTs,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneBySlackTs(slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = { slackTs };\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: string, messageId: string, options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetLastVisibleUserMessageSentByRoomId(rid: string, messageId?: string): Promise<IMessage | null> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\t$or: [{ t: 'e2e' }, { t: { $exists: false }, tmid: { $exists: false } }, { t: { $exists: false }, tshow: true }],\n\t\t\t...(messageId && { _id: { $ne: messageId } }),\n\t\t};\n\n\t\tconst options: FindOptions<IMessage> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne<IMessage>(query, options);\n\t}\n\n\tasync cloneAndSaveAsHistoryByRecord(record: IMessage, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst { _id: _, ...nRecord } = record;\n\t\treturn this.insertOne({\n\t\t\t...nRecord,\n\t\t\t_hidden: true,\n\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\tparent: record._id,\n\t\t\teditedAt: new Date(),\n\t\t\teditedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync cloneAndSaveAsHistoryById(_id: string, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst record = await this.findOneById(_id);\n\t\tif (!record) {\n\t\t\tthrow new Error('Record not found');\n\t\t}\n\n\t\treturn this.cloneAndSaveAsHistoryByRecord(record, user);\n\t}\n\n\t// UPDATE\n\tsetHiddenById(_id: string, hidden: boolean): Promise<UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetHiddenByIds(ids: string[], hidden: boolean): Promise<Document | UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAsDeletedByIdAndUser(_id: string, user: IMessage['u']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsDeletedByIdsAndUser(ids: string[], user: IMessage['u']): Promise<Document | UpdateResult> {\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetPinnedByIdAndUserId(\n\t\t_id: string,\n\t\tpinnedBy: Pick<IUser, '_id' | 'username'> | undefined,\n\t\tpinned?: boolean,\n\t\tpinnedAt?: Date,\n\t): Promise<UpdateResult> {\n\t\tif (pinned == null) {\n\t\t\tpinned = true;\n\t\t}\n\t\tif (pinnedAt == null) {\n\t\t\tpinnedAt = undefined;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tpinned,\n\t\t\t\tpinnedAt: pinnedAt || new Date(),\n\t\t\t\tpinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetUrlsById(_id: string, urls: NonNullable<IMessage['urls']>): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\turls,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllUsernamesByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameOfEditByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'editedBy._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'editedBy.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameAndMessageOfMentionByIdAndOldUsername(\n\t\t_id: string,\n\t\toldUsername: string,\n\t\tnewUsername: string,\n\t\tnewMessage: string,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'mentions.username': oldUsername,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t'mentions.$.username': newUsername,\n\t\t\t\t'msg': newMessage,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUserStarById(_id: string, userId: string, starred?: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IMessage>;\n\t\tconst query = { _id };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetMessageAttachments(_id: string, attachments: IMessage['attachments']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetSlackBotIdAndSlackTs(_id: string, slackBotId: string, slackTs: Date): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tslackBotId,\n\t\t\t\tslackTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunlinkUserId(userId: string, newUserId: string, newUsername: string, newNameAlias: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'alias': newNameAlias,\n\t\t\t\t'u._id': newUserId,\n\t\t\t\t'u.username': newUsername,\n\t\t\t\t'u.name': undefined,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\n\tasync createWithTypeRoomIdMessageUserAndUnread(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\tuser: Pick<IMessage['u'], '_id' | 'username' | 'name'>,\n\t\tunread?: boolean,\n\t\textraData?: Partial<IMessage>,\n\t): Promise<InsertOneResult<IMessage>> {\n\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\t\tt: type,\n\t\t\trid,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tgroupable: false as const,\n\t\t\t...(unread && { unread: true }),\n\t\t};\n\n\t\tconst data = Object.assign(record, extraData);\n\n\t\treturn this.insertOne(data);\n\t}\n\n\t// REMOVE\n\n\tremoveByRoomIds(rids: string[]): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: { $in: rids } });\n\t}\n\n\tfindThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t{\n\t\t\trid,\n\t\t\tpinned,\n\t\t\tignoreDiscussion = true,\n\t\t\tts,\n\t\t\tusers = [],\n\t\t}: { rid: string; pinned: boolean; ignoreDiscussion?: boolean; ts: Filter<IMessage>['ts']; users: string[] },\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\ttlm: { $exists: true },\n\t\t\ttcount: { $exists: true },\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t): Promise<string[]> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\treturn (\n\t\t\tawait this.find(query, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tlimit,\n\t\t\t}).toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\tasync removeByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\tselectedMessageIds: string[] = [],\n\t): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\tconst notCountedMessages = (\n\t\t\tawait this.find(\n\t\t\t\t{\n\t\t\t\t\t...query,\n\t\t\t\t\t$or: [{ _hidden: true }, { editedAt: { $exists: true }, editedBy: { $exists: true }, t: 'rm' }],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t},\n\t\t\t\t\tlimit,\n\t\t\t\t},\n\t\t\t).toArray()\n\t\t).length;\n\n\t\tif (!limit) {\n\t\t\tconst count = (await this.deleteMany(query)).deletedCount - notCountedMessages;\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst count =\n\t\t\t(\n\t\t\t\tawait this.deleteMany({\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: selectedMessageIds,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t).deletedCount - notCountedMessages;\n\n\t\treturn count;\n\t}\n\n\tremoveByUserId(userId: string): Promise<DeleteResult> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tgetMessageByFileId(fileID: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'file._id': fileID });\n\t}\n\n\tgetMessageByFileIdAndUsername(fileID: string, userId: string): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\t'file._id': fileID,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\tunread: 0,\n\t\t\t\tmentions: 0,\n\t\t\t\tchannels: 0,\n\t\t\t\tgroupable: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetVisibleMessagesAsRead(rid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetThreadMessagesAsRead(tmid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAsReadById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindVisibleUnreadMessagesByRoomAndDate(rid: string, after: Date): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\tunread: true,\n\t\t\trid,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttshow: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\tfindUnreadThreadMessagesByDate(\n\t\ttmid: string,\n\t\tuserId: string,\n\t\tafter: Date,\n\t): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'unread': true,\n\t\t\ttmid,\n\t\t\t'tshow': { $exists: false },\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Copy metadata from the discussion to the system message in the parent channel\n\t * which links to the discussion.\n\t * Since we don't pass this metadata into the model's function, it is not a subject\n\t * to race conditions: If multiple updates occur, the current state will be updated\n\t * only if the new state of the discussion room is really newer.\n\t */\n\tasync refreshDiscussionMetadata(room: Pick<IRoom, '_id' | 'msgs' | 'lm'>): Promise<ModifyResult<IMessage>> {\n\t\tconst { _id: drid, msgs: dcount, lm: dlm } = room;\n\n\t\tconst query = {\n\t\t\tdrid,\n\t\t};\n\n\t\treturn this.findOneAndUpdate(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdcount,\n\t\t\t\t\tdlm,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tcountThreads(): Promise<number> {\n\t\treturn this.col.countDocuments({ tcount: { $exists: true } });\n\t}\n\n\tupdateRepliesByThreadId(tmid: string, replies: string[], ts: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: {\n\t\t\t\t\t$each: replies,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\ttlm: ts,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getThreadFollowsByThreadId(tmid: string): Promise<string[] | undefined> {\n\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });\n\t\treturn msg?.replies;\n\t}\n\n\taddThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$pull: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindThreadsByRoomId(rid: string, skip: number, limit: number): FindCursor<IMessage> {\n\t\treturn this.find({ rid, tcount: { $exists: true } }, { sort: { tlm: -1 }, skip, limit });\n\t}\n\n\tfindAgentLastMessageByVisitorLastMessageTs(roomId: string, visitorLastMessageTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tts: { $gt: visitorLastMessageTs },\n\t\t\ttoken: { $exists: false },\n\t\t};\n\n\t\treturn this.findOne(query, { sort: { ts: 1 } });\n\t}\n\n\tfindAllImportedMessagesWithFilesToDownload(): FindCursor<IMessageWithPendingFileImport> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find<IMessageWithPendingFileImport>(query);\n\t}\n\n\tcountAllImportedMessagesWithFilesToDownload(): Promise<number> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tdecreaseReplyCountById(_id: string, inc = -1): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$inc: {\n\t\t\t\ttcount: inc,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Messages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Messages.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Messages.ts","sourceRoot":"","sources":["server/models/raw/Messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatDepartment,\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tMessageTypesValues,\n\tRocketChatRecordDeleted,\n\tMessageAttachment,\n\tIMessageWithPendingFileImport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IMessagesModel } from '@rocket.chat/model-typings';\nimport type { PaginatedRequest } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tCountDocumentsOptions,\n\tAggregateOptions,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tIndexDescription,\n\tInsertOneResult,\n\tDeleteResult,\n\tUpdateResult,\n\tDocument,\n\tUpdateFilter,\n\tModifyResult,\n} from 'mongodb';\n\nimport { otrSystemMessages } from '../../../app/otr/lib/constants';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DeepWritable<T> = T extends (...args: any) => any\n\t? T\n\t: {\n\t\t\t-readonly [P in keyof T]: DeepWritable<T[P]>;\n\t\t};\n\nexport class MessagesRaw extends BaseRaw<IMessage> implements IMessagesModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IMessage>>) {\n\t\tsuper(db, 'message', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { rid: 1, ts: 1, _updatedAt: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { 'u._id': 1 } },\n\t\t\t{ key: { editedAt: 1 }, sparse: true },\n\t\t\t{ key: { 'editedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'rid': 1, 't': 1, 'u._id': 1 } },\n\t\t\t{ key: { expireAt: 1 }, expireAfterSeconds: 0 },\n\t\t\t{ key: { msg: 'text' } },\n\t\t\t{ key: { 'file._id': 1 }, sparse: true },\n\t\t\t{ key: { 'mentions.username': 1 }, sparse: true },\n\t\t\t{ key: { pinned: 1 }, sparse: true },\n\t\t\t{ key: { location: '2dsphere' } },\n\t\t\t{ key: { slackTs: 1, slackBotId: 1 }, sparse: true },\n\t\t\t{ key: { unread: 1 }, sparse: true },\n\t\t\t{ key: { 'pinnedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'starred._id': 1 }, sparse: true },\n\n\t\t\t// discussions\n\t\t\t{ key: { drid: 1 }, sparse: true },\n\n\t\t\t// threads\n\t\t\t{ key: { tmid: 1 }, sparse: true },\n\t\t\t{ key: { tcount: 1, tlm: 1 }, sparse: true },\n\t\t\t{ key: { rid: 1, tlm: -1 }, partialFilterExpression: { tcount: { $exists: true } } }, // used for the List Threads\n\t\t\t{ key: { rid: 1, tcount: 1 } }, // used for the List Threads Count\n\n\t\t\t// livechat\n\t\t\t{ key: { 'navigation.token': 1 }, sparse: true },\n\n\t\t\t{ key: { 'federation.eventId': 1 }, sparse: true },\n\t\t\t{ key: { t: 1 }, sparse: true },\n\t\t];\n\t}\n\n\tfindVisibleByMentionAndRoomId(username: IUser['username'], rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedVisibleByMentionAndRoomId(\n\t\tusername: IUser['username'],\n\t\trid: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarredByUserAtRoom(\n\t\tuserId: IUser['_id'],\n\t\troomId: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': userId,\n\t\t\t'rid': roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByRoomIdAndType(\n\t\troomId: IRoom['_id'],\n\t\ttype: IMessage['t'],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\t// TODO: do we need this? currently not used anywhere\n\tfindDiscussionsByRoom(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = { rid, drid: { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDiscussionsByRoomAndText(rid: IRoom['_id'], text: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tdrid: { $exists: true },\n\t\t\tmsg: new RegExp(escapeRegExp(text), 'i'),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount: true;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: false;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: boolean;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }> | AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }> {\n\t\t// FIXME: aggregation type definitions\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'livechat_transfer_history',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\tlocalField: 'rid',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'room',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$room',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$room.departmentId',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [match, lookup, unwind];\n\t\tif (departmentId) {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'room.departmentId': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [...firstParams, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params, { readPreference: readSecondaryPreferred() });\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<{ _id: string | null; numberOfTransferredRooms: number }>(params, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tgetTotalOfMessagesSentByDate({ start, end, options = {} }: { start: Date; end: Date; options?: PaginatedRequest }): Promise<any[]> {\n\t\tconst params: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [\n\t\t\t{ $match: { t: { $exists: false }, ts: { $gte: start, $lte: end } } },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\tdate: {\n\t\t\t\t\t\t\t$dateToString: { format: '%Y%m%d', date: '$ts' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmessages: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id.rid',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tdate: '$_id.date',\n\t\t\t\t\t\t\tmessages: '$messages',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tdata: '$data',\n\t\t\t\t\troom: {\n\t\t\t\t\t\t_id: '$room._id',\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.fname', false] }, '$room.fname', '$room.name'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t\tusernames: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.usernames', false] }, '$room.usernames', []],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$data',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tdate: '$data.date',\n\t\t\t\t\troom: 1,\n\t\t\t\t\ttype: 1,\n\t\t\t\t\tmessages: '$data.messages',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options.sort) {\n\t\t\tparams.push({ $sort: options.sort });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindLivechatClosedMessages(rid: IRoom['_id'], searchTerm?: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t\t...(searchTerm && { msg: new RegExp(escapeRegExp(searchTerm), 'ig') }),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatClosingMessage(rid: IRoom['_id'], options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\treturn this.findOne<IMessage>(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tt: 'livechat-close',\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatMessages(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tts: Date,\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: { $lt: ts },\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesAndUsers(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tusers?: string[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t...(Array.isArray(users) && users.length > 0 && { 'u._id': { $nin: users } }),\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindLivechatMessagesWithoutTypes(\n\t\trid: IRoom['_id'],\n\t\tignoredTypes: IMessage['t'][],\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t};\n\n\t\tif (ignoredTypes.length > 0) {\n\t\t\tquery.t = { $nin: ignoredTypes };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync addBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne({ _id }, { $addToSet: { blocks: { $each: blocks } } });\n\t}\n\n\tasync countRoomsWithStarredMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { 'starred._id': { $exists: true } } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countRoomsWithMessageType(type: IMessage['t'], options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { t: type } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countByType(type: IMessage['t'], options: CountDocumentsOptions): Promise<number> {\n\t\treturn this.col.countDocuments({ t: type }, options);\n\t}\n\n\tasync countRoomsWithPinnedMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { pinned: true } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tfindPinned(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountPinned(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tfindPaginatedPinnedByRoom(roomId: IMessage['rid'], options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarred(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountStarred(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tasync setFederationReactionEventId(username: string, _id: string, reaction: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: username,\n\t\t\t\t} as any,\n\t\t\t},\n\t\t);\n\t}\n\n\tasync unsetFederationReactionEventId(federationEventId: string, _id: string, reaction: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationId(federationEventId: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'federation.eventId': federationEventId });\n\t}\n\n\tasync setFederationEventIdById(_id: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'federation.eventId': federationEventId,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationIdAndUsernameOnReactions(federationEventId: string, username: string): Promise<IMessage | null> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\tt: { $ne: 'rm' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\tdocument: '$$ROOT',\n\t\t\t\t\t\t\t\treactions: { $objectToArray: '$reactions' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\t\tpath: '$reactions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ 'reactions.v.usernames': { $in: [username] } },\n\t\t\t\t\t\t\t\t\t{ [`reactions.v.federationReactionEventIds.${federationEventId}`]: username },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ $replaceRoot: { newRoot: '$document' } },\n\t\t\t\t\t],\n\t\t\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t\t\t)\n\t\t\t\t.toArray()\n\t\t)[0] as IMessage;\n\t}\n\n\tremoveByRoomId(roomId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: roomId });\n\t}\n\n\tsetReactions(messageId: string, reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $set: { reactions } });\n\t}\n\n\tkeepHistoryForToken(token: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'expireAt': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\texpireAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetRoomIdByToken(token: string, rid: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\t\t'rid': null,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\trid,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetReactions(messageId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $unset: { reactions: 1 } });\n\t}\n\n\tdeleteOldOTRMessages(roomId: string, ts: Date): Promise<DeleteResult> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid: roomId,\n\t\t\tt: {\n\t\t\t\t$in: [\n\t\t\t\t\t'otr',\n\t\t\t\t\totrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\totrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t\t\totrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t],\n\t\t\t},\n\t\t\tts: { $lte: ts },\n\t\t};\n\t\treturn this.col.deleteMany(query);\n\t}\n\n\taddTranslations(messageId: string, translations: Record<string, string>, providerName: string): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = { translationProvider: providerName };\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\taddAttachmentTranslations(messageId: string, attachmentIndex: string, translations: Record<string, string>): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = {};\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`attachments.${attachmentIndex}.translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\tsetImportFileRocketChatAttachment(\n\t\timportFileId: string,\n\t\trocketChatUrl: string,\n\t\tattachment: MessageAttachment,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'_importFile.id': importFileId,\n\t\t};\n\n\t\treturn this.updateMany(query, {\n\t\t\t$set: {\n\t\t\t\t'_importFile.rocketChatUrl': rocketChatUrl,\n\t\t\t\t'_importFile.downloaded': true,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tattachments: attachment,\n\t\t\t},\n\t\t});\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsInclusive(roomId: string, afterTimestamp: Date, beforeTimestamp: Date): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gte: afterTimestamp,\n\t\t\t\t$lte: beforeTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\t// FIND\n\tfindByMention(username: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = { 'mentions.username': username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindFilesByUserId(userId: string, options: FindOptions<IMessage> = {}): FindCursor<Pick<IMessage, 'file'>> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindFilesByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t'file._id': { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(ignoreThreads ? { tmid: { $exists: false }, tcount: { $exists: false } } : {}),\n\t\t\t...(ignoreDiscussion ? { drid: { $exists: false } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindDiscussionByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\tdrid: { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomId<T extends IMessage = IMessage>(rid: string, options?: FindOptions<T>): FindCursor<T> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByIds(ids: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_id: { $in: ids },\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleThreadByThreadId(tmid: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\ttmid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypes(\n\t\troomId: string,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdAfterTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindForUpdates(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$lt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\troomId: string,\n\t\ttimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$lte' : '$lt']: timestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions: FindOptions<IMessage> = {},\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync getLastTimestamp(options: FindOptions<IMessage> = { projection: { _id: 0, ts: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ts: -1 };\n\t\toptions.limit = 1;\n\t\tconst [message] = await this.find({}, options).toArray();\n\t\treturn message?.ts;\n\t}\n\n\tfindByRoomIdAndMessageIds(rid: string, messageIds: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: {\n\t\t\t\t$in: messageIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneBySlackBotIdAndSlackTs(slackBotId: string, slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\tslackBotId,\n\t\t\tslackTs,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneBySlackTs(slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = { slackTs };\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: string, messageId: string, options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetLastVisibleUserMessageSentByRoomId(rid: string, messageId?: string): Promise<IMessage | null> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\t$or: [{ t: 'e2e' }, { t: { $exists: false }, tmid: { $exists: false } }, { t: { $exists: false }, tshow: true }],\n\t\t\t...(messageId && { _id: { $ne: messageId } }),\n\t\t};\n\n\t\tconst options: FindOptions<IMessage> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne<IMessage>(query, options);\n\t}\n\n\tasync cloneAndSaveAsHistoryByRecord(record: IMessage, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst { _id: _, ...nRecord } = record;\n\t\treturn this.insertOne({\n\t\t\t...nRecord,\n\t\t\t_hidden: true,\n\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\tparent: record._id,\n\t\t\teditedAt: new Date(),\n\t\t\teditedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync cloneAndSaveAsHistoryById(_id: string, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst record = await this.findOneById(_id);\n\t\tif (!record) {\n\t\t\tthrow new Error('Record not found');\n\t\t}\n\n\t\treturn this.cloneAndSaveAsHistoryByRecord(record, user);\n\t}\n\n\t// UPDATE\n\tsetHiddenById(_id: string, hidden: boolean): Promise<UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetHiddenByIds(ids: string[], hidden: boolean): Promise<Document | UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAsDeletedByIdAndUser(_id: string, user: IMessage['u']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsDeletedByIdsAndUser(ids: string[], user: IMessage['u']): Promise<Document | UpdateResult> {\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetPinnedByIdAndUserId(\n\t\t_id: string,\n\t\tpinnedBy: Pick<IUser, '_id' | 'username'> | undefined,\n\t\tpinned?: boolean,\n\t\tpinnedAt?: Date,\n\t): Promise<UpdateResult> {\n\t\tif (pinned == null) {\n\t\t\tpinned = true;\n\t\t}\n\t\tif (pinnedAt == null) {\n\t\t\tpinnedAt = undefined;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tpinned,\n\t\t\t\tpinnedAt: pinnedAt || new Date(),\n\t\t\t\tpinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetUrlsById(_id: string, urls: NonNullable<IMessage['urls']>): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\turls,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllUsernamesByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameOfEditByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'editedBy._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'editedBy.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameAndMessageOfMentionByIdAndOldUsername(\n\t\t_id: string,\n\t\toldUsername: string,\n\t\tnewUsername: string,\n\t\tnewMessage: string,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'mentions.username': oldUsername,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t'mentions.$.username': newUsername,\n\t\t\t\t'msg': newMessage,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUserStarById(_id: string, userId: string, starred?: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IMessage>;\n\t\tconst query = { _id };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetMessageAttachments(_id: string, attachments: IMessage['attachments']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetSlackBotIdAndSlackTs(_id: string, slackBotId: string, slackTs: Date): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tslackBotId,\n\t\t\t\tslackTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunlinkUserId(userId: string, newUserId: string, newUsername: string, newNameAlias: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'alias': newNameAlias,\n\t\t\t\t'u._id': newUserId,\n\t\t\t\t'u.username': newUsername,\n\t\t\t\t'u.name': undefined,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\n\tasync createWithTypeRoomIdMessageUserAndUnread(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\tuser: Pick<IMessage['u'], '_id' | 'username' | 'name'>,\n\t\tunread?: boolean,\n\t\textraData?: Partial<IMessage>,\n\t): Promise<InsertOneResult<IMessage>> {\n\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\t\tt: type,\n\t\t\trid,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tgroupable: false as const,\n\t\t\t...(unread && { unread: true }),\n\t\t};\n\n\t\tconst data = Object.assign(record, extraData);\n\n\t\treturn this.insertOne(data);\n\t}\n\n\t// REMOVE\n\n\tremoveByRoomIds(rids: string[]): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: { $in: rids } });\n\t}\n\n\tfindThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t{\n\t\t\trid,\n\t\t\tpinned,\n\t\t\tignoreDiscussion = true,\n\t\t\tts,\n\t\t\tusers = [],\n\t\t}: { rid: string; pinned: boolean; ignoreDiscussion?: boolean; ts: Filter<IMessage>['ts']; users: string[] },\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\ttlm: { $exists: true },\n\t\t\ttcount: { $exists: true },\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t): Promise<string[]> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\treturn (\n\t\t\tawait this.find(query, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tlimit,\n\t\t\t}).toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\tasync removeByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\tselectedMessageIds: string[] = [],\n\t): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\tconst notCountedMessages = (\n\t\t\tawait this.find(\n\t\t\t\t{\n\t\t\t\t\t...query,\n\t\t\t\t\t$or: [{ _hidden: true }, { editedAt: { $exists: true }, editedBy: { $exists: true }, t: 'rm' }],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t},\n\t\t\t\t\tlimit,\n\t\t\t\t},\n\t\t\t).toArray()\n\t\t).length;\n\n\t\tif (!limit) {\n\t\t\tconst count = (await this.deleteMany(query)).deletedCount - notCountedMessages;\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst count =\n\t\t\t(\n\t\t\t\tawait this.deleteMany({\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: selectedMessageIds,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t).deletedCount - notCountedMessages;\n\n\t\treturn count;\n\t}\n\n\tremoveByUserId(userId: string): Promise<DeleteResult> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tgetMessageByFileId(fileID: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'file._id': fileID });\n\t}\n\n\tgetMessageByFileIdAndUsername(fileID: string, userId: string): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\t'file._id': fileID,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\tunread: 0,\n\t\t\t\tmentions: 0,\n\t\t\t\tchannels: 0,\n\t\t\t\tgroupable: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetVisibleMessagesAsRead(rid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetThreadMessagesAsRead(tmid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAsReadById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindVisibleUnreadMessagesByRoomAndDate(rid: string, after: Date): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\tunread: true,\n\t\t\trid,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttshow: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\tfindUnreadThreadMessagesByDate(\n\t\ttmid: string,\n\t\tuserId: string,\n\t\tafter: Date,\n\t): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'unread': true,\n\t\t\ttmid,\n\t\t\t'tshow': { $exists: false },\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Copy metadata from the discussion to the system message in the parent channel\n\t * which links to the discussion.\n\t * Since we don't pass this metadata into the model's function, it is not a subject\n\t * to race conditions: If multiple updates occur, the current state will be updated\n\t * only if the new state of the discussion room is really newer.\n\t */\n\tasync refreshDiscussionMetadata(room: Pick<IRoom, '_id' | 'msgs' | 'lm'>): Promise<ModifyResult<IMessage>> {\n\t\tconst { _id: drid, msgs: dcount, lm: dlm } = room;\n\n\t\tconst query = {\n\t\t\tdrid,\n\t\t};\n\n\t\treturn this.findOneAndUpdate(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdcount,\n\t\t\t\t\tdlm,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tcountThreads(): Promise<number> {\n\t\treturn this.col.countDocuments({ tcount: { $exists: true } });\n\t}\n\n\tupdateRepliesByThreadId(tmid: string, replies: string[], ts: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: {\n\t\t\t\t\t$each: replies,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\ttlm: ts,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getThreadFollowsByThreadId(tmid: string): Promise<string[] | undefined> {\n\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });\n\t\treturn msg?.replies;\n\t}\n\n\taddThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$pull: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindThreadsByRoomId(rid: string, skip: number, limit: number): FindCursor<IMessage> {\n\t\treturn this.find({ rid, tcount: { $exists: true } }, { sort: { tlm: -1 }, skip, limit });\n\t}\n\n\tfindAgentLastMessageByVisitorLastMessageTs(roomId: string, visitorLastMessageTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tts: { $gt: visitorLastMessageTs },\n\t\t\ttoken: { $exists: false },\n\t\t};\n\n\t\treturn this.findOne(query, { sort: { ts: 1 } });\n\t}\n\n\tfindAllImportedMessagesWithFilesToDownload(): FindCursor<IMessageWithPendingFileImport> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find<IMessageWithPendingFileImport>(query);\n\t}\n\n\tcountAllImportedMessagesWithFilesToDownload(): Promise<number> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tdecreaseReplyCountById(_id: string, inc = -1): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$inc: {\n\t\t\t\ttcount: inc,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"_id\"];\n    module.export({\n      MessagesRaw: () => MessagesRaw\n    });\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 0);\n    let otrSystemMessages;\n    module.link(\"../../../app/otr/lib/constants\", {\n      otrSystemMessages(v) {\n        otrSystemMessages = v;\n      }\n    }, 1);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 2);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class MessagesRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'message', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            rid: 1,\n            ts: 1,\n            _updatedAt: 1\n          }\n        }, {\n          key: {\n            ts: 1\n          }\n        }, {\n          key: {\n            'u._id': 1\n          }\n        }, {\n          key: {\n            editedAt: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'editedBy._id': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'rid': 1,\n            't': 1,\n            'u._id': 1\n          }\n        }, {\n          key: {\n            expireAt: 1\n          },\n          expireAfterSeconds: 0\n        }, {\n          key: {\n            msg: 'text'\n          }\n        }, {\n          key: {\n            'file._id': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'mentions.username': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            pinned: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            location: '2dsphere'\n          }\n        }, {\n          key: {\n            slackTs: 1,\n            slackBotId: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            unread: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'pinnedBy._id': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'starred._id': 1\n          },\n          sparse: true\n        },\n        // discussions\n        {\n          key: {\n            drid: 1\n          },\n          sparse: true\n        },\n        // threads\n        {\n          key: {\n            tmid: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            tcount: 1,\n            tlm: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            rid: 1,\n            tlm: -1\n          },\n          partialFilterExpression: {\n            tcount: {\n              $exists: true\n            }\n          }\n        },\n        // used for the List Threads\n        {\n          key: {\n            rid: 1,\n            tcount: 1\n          }\n        },\n        // used for the List Threads Count\n        // livechat\n        {\n          key: {\n            'navigation.token': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'federation.eventId': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            t: 1\n          },\n          sparse: true\n        }];\n      }\n      findVisibleByMentionAndRoomId(username, rid, options) {\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'mentions.username': username,\n          rid\n        };\n        return this.find(query, options);\n      }\n      findPaginatedVisibleByMentionAndRoomId(username, rid, options) {\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'mentions.username': username,\n          rid\n        };\n        return this.findPaginated(query, options);\n      }\n      findStarredByUserAtRoom(userId, roomId, options) {\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'starred._id': userId,\n          'rid': roomId\n        };\n        return this.findPaginated(query, options);\n      }\n      findPaginatedByRoomIdAndType(roomId, type) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const query = {\n          rid: roomId,\n          t: type\n        };\n        return this.findPaginated(query, options);\n      }\n      // TODO: do we need this? currently not used anywhere\n      findDiscussionsByRoom(rid, options) {\n        const query = {\n          rid,\n          drid: {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      findDiscussionsByRoomAndText(rid, text, options) {\n        const query = {\n          rid,\n          drid: {\n            $exists: true\n          },\n          msg: new RegExp(escapeRegExp(text), 'i')\n        };\n        return this.findPaginated(query, options);\n      }\n      findAllNumberOfTransferredRooms(_ref) {\n        let {\n          start,\n          end,\n          departmentId,\n          onlyCount = false,\n          options = {}\n        } = _ref;\n        // FIXME: aggregation type definitions\n        const match = {\n          $match: {\n            t: 'livechat_transfer_history',\n            ts: {\n              $gte: new Date(start),\n              $lte: new Date(end)\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_room',\n            localField: 'rid',\n            foreignField: '_id',\n            as: 'room'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$room',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: null,\n              departmentId: '$room.departmentId'\n            },\n            numberOfTransferredRooms: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            _id: {\n              $ifNull: ['$_id.departmentId', null]\n            },\n            numberOfTransferredRooms: 1\n          }\n        };\n        const firstParams = [match, lookup, unwind];\n        if (departmentId) {\n          firstParams.push({\n            $match: {\n              'room.departmentId': departmentId\n            }\n          });\n        }\n        const sort = {\n          $sort: options.sort || {\n            name: 1\n          }\n        };\n        const params = [...firstParams, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params, {\n            readPreference: readSecondaryPreferred()\n          });\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        });\n      }\n      getTotalOfMessagesSentByDate(_ref2) {\n        let {\n          start,\n          end,\n          options = {}\n        } = _ref2;\n        const params = [{\n          $match: {\n            t: {\n              $exists: false\n            },\n            ts: {\n              $gte: start,\n              $lte: end\n            }\n          }\n        }, {\n          $group: {\n            _id: {\n              rid: '$rid',\n              date: {\n                $dateToString: {\n                  format: '%Y%m%d',\n                  date: '$ts'\n                }\n              }\n            },\n            messages: {\n              $sum: 1\n            }\n          }\n        }, {\n          $group: {\n            _id: '$_id.rid',\n            data: {\n              $push: {\n                date: '$_id.date',\n                messages: '$messages'\n              }\n            }\n          }\n        }, {\n          $lookup: {\n            from: 'rocketchat_room',\n            localField: '_id',\n            foreignField: '_id',\n            as: 'room'\n          }\n        }, {\n          $unwind: {\n            path: '$room'\n          }\n        }, {\n          $project: {\n            data: '$data',\n            room: {\n              _id: '$room._id',\n              name: {\n                $cond: [{\n                  $ifNull: ['$room.fname', false]\n                }, '$room.fname', '$room.name']\n              },\n              t: '$room.t',\n              usernames: {\n                $cond: [{\n                  $ifNull: ['$room.usernames', false]\n                }, '$room.usernames', []]\n              }\n            },\n            type: 'messages'\n          }\n        }, {\n          $unwind: {\n            path: '$data'\n          }\n        }, {\n          $project: {\n            _id: 0,\n            date: '$data.date',\n            room: 1,\n            type: 1,\n            messages: '$data.messages'\n          }\n        }];\n        if (options.sort) {\n          params.push({\n            $sort: options.sort\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      findLivechatClosedMessages(rid, searchTerm, options) {\n        return this.findPaginated(_objectSpread({\n          rid,\n          $or: [{\n            t: {\n              $exists: false\n            }\n          }, {\n            t: 'livechat-close'\n          }]\n        }, searchTerm && {\n          msg: new RegExp(escapeRegExp(searchTerm), 'ig')\n        }), options);\n      }\n      findLivechatClosingMessage(rid, options) {\n        return this.findOne({\n          rid,\n          t: 'livechat-close'\n        }, options);\n      }\n      findLivechatMessages(rid, options) {\n        return this.find({\n          rid,\n          $or: [{\n            t: {\n              $exists: false\n            }\n          }, {\n            t: 'livechat-close'\n          }]\n        }, options);\n      }\n      findVisibleByRoomIdNotContainingTypesBeforeTs(roomId, types, ts, showSystemMessages, options) {\n        let showThreadMessages = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        const query = _objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            $lt: ts\n          }\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        });\n        if (types.length > 0) {\n          query.t = {\n            $nin: types\n          };\n        }\n        if (!showSystemMessages) {\n          query.t = {\n            $exists: false\n          };\n        }\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdNotContainingTypesAndUsers(roomId, types, users, options) {\n        let showThreadMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        const query = _objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          }\n        }, Array.isArray(users) && users.length > 0 && {\n          'u._id': {\n            $nin: users\n          }\n        }), {}, {\n          rid: roomId\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        });\n        if (types.length > 0) {\n          query.t = {\n            $nin: types\n          };\n        }\n        return this.find(query, options);\n      }\n      findLivechatMessagesWithoutTypes(rid, ignoredTypes, showSystemMessages, options) {\n        const query = {\n          rid\n        };\n        if (ignoredTypes.length > 0) {\n          query.t = {\n            $nin: ignoredTypes\n          };\n        }\n        if (!showSystemMessages) {\n          query.t = {\n            $exists: false\n          };\n        }\n        return this.find(query, options);\n      }\n      async setBlocksById(_id, blocks) {\n        await this.updateOne({\n          _id\n        }, {\n          $set: {\n            blocks\n          }\n        });\n      }\n      async addBlocksById(_id, blocks) {\n        await this.updateOne({\n          _id\n        }, {\n          $addToSet: {\n            blocks: {\n              $each: blocks\n            }\n          }\n        });\n      }\n      async countRoomsWithStarredMessages(options) {\n        const queryResult = await this.col.aggregate([{\n          $match: {\n            'starred._id': {\n              $exists: true\n            }\n          }\n        }, {\n          $group: {\n            _id: '$rid'\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: 1\n            }\n          }\n        }], options).next();\n        return (queryResult === null || queryResult === void 0 ? void 0 : queryResult.total) || 0;\n      }\n      async countRoomsWithMessageType(type, options) {\n        const queryResult = await this.col.aggregate([{\n          $match: {\n            t: type\n          }\n        }, {\n          $group: {\n            _id: '$rid'\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: 1\n            }\n          }\n        }], options).next();\n        return (queryResult === null || queryResult === void 0 ? void 0 : queryResult.total) || 0;\n      }\n      async countByType(type, options) {\n        return this.col.countDocuments({\n          t: type\n        }, options);\n      }\n      async countRoomsWithPinnedMessages(options) {\n        const queryResult = await this.col.aggregate([{\n          $match: {\n            pinned: true\n          }\n        }, {\n          $group: {\n            _id: '$rid'\n          }\n        }, {\n          $group: {\n            _id: null,\n            total: {\n              $sum: 1\n            }\n          }\n        }], options).next();\n        return (queryResult === null || queryResult === void 0 ? void 0 : queryResult.total) || 0;\n      }\n      findPinned(options) {\n        const query = {\n          t: {\n            $ne: 'rm'\n          },\n          _hidden: {\n            $ne: true\n          },\n          pinned: true\n        };\n        return this.find(query, options);\n      }\n      countPinned(options) {\n        const query = {\n          t: {\n            $ne: 'rm'\n          },\n          _hidden: {\n            $ne: true\n          },\n          pinned: true\n        };\n        return this.countDocuments(query, options);\n      }\n      findPaginatedPinnedByRoom(roomId, options) {\n        const query = {\n          t: {\n            $ne: 'rm'\n          },\n          _hidden: {\n            $ne: true\n          },\n          pinned: true,\n          rid: roomId\n        };\n        return this.findPaginated(query, options);\n      }\n      findStarred(options) {\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'starred._id': {\n            $exists: true\n          }\n        };\n        return this.find(query, options);\n      }\n      countStarred(options) {\n        const query = {\n          '_hidden': {\n            $ne: true\n          },\n          'starred._id': {\n            $exists: true\n          }\n        };\n        return this.countDocuments(query, options);\n      }\n      async setFederationReactionEventId(username, _id, reaction, federationEventId) {\n        await this.updateOne({\n          _id\n        }, {\n          $set: {\n            [\"reactions.\".concat(reaction, \".federationReactionEventIds.\").concat(federationEventId)]: username\n          }\n        });\n      }\n      async unsetFederationReactionEventId(federationEventId, _id, reaction) {\n        await this.updateOne({\n          _id\n        }, {\n          $unset: {\n            [\"reactions.\".concat(reaction, \".federationReactionEventIds.\").concat(federationEventId)]: 1\n          }\n        });\n      }\n      async findOneByFederationId(federationEventId) {\n        return this.findOne({\n          'federation.eventId': federationEventId\n        });\n      }\n      async setFederationEventIdById(_id, federationEventId) {\n        await this.updateOne({\n          _id\n        }, {\n          $set: {\n            'federation.eventId': federationEventId\n          }\n        });\n      }\n      async findOneByFederationIdAndUsernameOnReactions(federationEventId, username) {\n        return (await this.col.aggregate([{\n          $match: {\n            t: {\n              $ne: 'rm'\n            }\n          }\n        }, {\n          $project: {\n            document: '$$ROOT',\n            reactions: {\n              $objectToArray: '$reactions'\n            }\n          }\n        }, {\n          $unwind: {\n            path: '$reactions'\n          }\n        }, {\n          $match: {\n            $and: [{\n              'reactions.v.usernames': {\n                $in: [username]\n              }\n            }, {\n              [\"reactions.v.federationReactionEventIds.\".concat(federationEventId)]: username\n            }]\n          }\n        }, {\n          $replaceRoot: {\n            newRoot: '$document'\n          }\n        }], {\n          readPreference: readSecondaryPreferred()\n        }).toArray())[0];\n      }\n      removeByRoomId(roomId) {\n        return this.deleteMany({\n          rid: roomId\n        });\n      }\n      setReactions(messageId, reactions) {\n        return this.updateOne({\n          _id: messageId\n        }, {\n          $set: {\n            reactions\n          }\n        });\n      }\n      keepHistoryForToken(token) {\n        return this.updateMany({\n          'navigation.token': token,\n          'expireAt': {\n            $exists: true\n          }\n        }, {\n          $unset: {\n            expireAt: 1\n          }\n        });\n      }\n      setRoomIdByToken(token, rid) {\n        return this.updateMany({\n          'navigation.token': token,\n          // @ts-expect-error - mongo allows it, but types don't :(\n          'rid': null\n        }, {\n          $set: {\n            rid\n          }\n        });\n      }\n      unsetReactions(messageId) {\n        return this.updateOne({\n          _id: messageId\n        }, {\n          $unset: {\n            reactions: 1\n          }\n        });\n      }\n      deleteOldOTRMessages(roomId, ts) {\n        const query = {\n          rid: roomId,\n          t: {\n            $in: ['otr', otrSystemMessages.USER_JOINED_OTR, otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH, otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY]\n          },\n          ts: {\n            $lte: ts\n          }\n        };\n        return this.col.deleteMany(query);\n      }\n      addTranslations(messageId, translations, providerName) {\n        const updateObj = {\n          translationProvider: providerName\n        };\n        Object.keys(translations).forEach(key => {\n          const translation = translations[key];\n          updateObj[\"translations.\".concat(key)] = translation;\n        });\n        return this.updateOne({\n          _id: messageId\n        }, {\n          $set: updateObj\n        });\n      }\n      addAttachmentTranslations(messageId, attachmentIndex, translations) {\n        const updateObj = {};\n        Object.keys(translations).forEach(key => {\n          const translation = translations[key];\n          updateObj[\"attachments.\".concat(attachmentIndex, \".translations.\").concat(key)] = translation;\n        });\n        return this.updateOne({\n          _id: messageId\n        }, {\n          $set: updateObj\n        });\n      }\n      setImportFileRocketChatAttachment(importFileId, rocketChatUrl, attachment) {\n        const query = {\n          '_importFile.id': importFileId\n        };\n        return this.updateMany(query, {\n          $set: {\n            '_importFile.rocketChatUrl': rocketChatUrl,\n            '_importFile.downloaded': true\n          },\n          $addToSet: {\n            attachments: attachment\n          }\n        });\n      }\n      countVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            $gte: afterTimestamp,\n            $lte: beforeTimestamp\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      // FIND\n      findByMention(username, options) {\n        const query = {\n          'mentions.username': username\n        };\n        return this.find(query, options);\n      }\n      findFilesByUserId(userId) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const query = {\n          'u._id': userId,\n          'file._id': {\n            $exists: true\n          }\n        };\n        return this.find(query, _objectSpread({\n          projection: {\n            'file._id': 1\n          }\n        }, options));\n      }\n      findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned) {\n        let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        let ts = arguments.length > 3 ? arguments[3] : undefined;\n        let users = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        let ignoreThreads = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        let options = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n        const query = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n          rid,\n          ts,\n          'file._id': {\n            $exists: true\n          }\n        }, excludePinned ? {\n          pinned: {\n            $ne: true\n          }\n        } : {}), ignoreThreads ? {\n          tmid: {\n            $exists: false\n          },\n          tcount: {\n            $exists: false\n          }\n        } : {}), ignoreDiscussion ? {\n          drid: {\n            $exists: false\n          }\n        } : {}), users.length ? {\n          'u.username': {\n            $in: users\n          }\n        } : {});\n        return this.find(query, _objectSpread({\n          projection: {\n            'file._id': 1\n          }\n        }, options));\n      }\n      findDiscussionByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts) {\n        let users = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        const query = _objectSpread(_objectSpread({\n          rid,\n          ts,\n          drid: {\n            $exists: true\n          }\n        }, excludePinned ? {\n          pinned: {\n            $ne: true\n          }\n        } : {}), users.length ? {\n          'u.username': {\n            $in: users\n          }\n        } : {});\n        return this.find(query, options);\n      }\n      findVisibleByRoomId(rid, options) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          rid\n        };\n        return this.find(query, options);\n      }\n      findVisibleByIds(ids, options) {\n        const query = {\n          _id: {\n            $in: ids\n          },\n          _hidden: {\n            $ne: true\n          }\n        };\n        return this.find(query, options);\n      }\n      findVisibleThreadByThreadId(tmid, options) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          tmid\n        };\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdNotContainingTypes(roomId, types, options) {\n        let showThreadMessages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        const query = _objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }), Array.isArray(types) && types.length > 0 && {\n          t: {\n            $nin: types\n          }\n        });\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            $gt: timestamp\n          }\n        };\n        return this.find(query, options);\n      }\n      findForUpdates(roomId, timestamp, options) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          _updatedAt: {\n            $gt: timestamp\n          }\n        };\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {\n        const query = {\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            $lt: timestamp\n          }\n        };\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options) {\n        let showThreadMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        let inclusive = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        const query = _objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            [inclusive ? '$lte' : '$lt']: timestamp\n          }\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }), Array.isArray(types) && types.length > 0 && {\n          t: {\n            $nin: types\n          }\n        });\n        return this.find(query, options);\n      }\n      findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types) {\n        let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        let showThreadMessages = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        let inclusive = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        const query = _objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            [inclusive ? '$gte' : '$gt']: afterTimestamp,\n            [inclusive ? '$lte' : '$lt']: beforeTimestamp\n          }\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }), Array.isArray(types) && types.length > 0 && {\n          t: {\n            $nin: types\n          }\n        });\n        return this.find(query, options);\n      }\n      countVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types) {\n        let showThreadMessages = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n        let inclusive = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        const query = _objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          },\n          rid: roomId,\n          ts: {\n            [inclusive ? '$gte' : '$gt']: afterTimestamp,\n            [inclusive ? '$lte' : '$lt']: beforeTimestamp\n          }\n        }, !showThreadMessages && {\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }), Array.isArray(types) && types.length > 0 && {\n          t: {\n            $nin: types\n          }\n        });\n        return this.col.countDocuments(query);\n      }\n      async getLastTimestamp() {\n        let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          projection: {\n            _id: 0,\n            ts: 1\n          }\n        };\n        options.sort = {\n          ts: -1\n        };\n        options.limit = 1;\n        const [message] = await this.find({}, options).toArray();\n        return message === null || message === void 0 ? void 0 : message.ts;\n      }\n      findByRoomIdAndMessageIds(rid, messageIds, options) {\n        const query = {\n          rid,\n          _id: {\n            $in: messageIds\n          }\n        };\n        return this.find(query, options);\n      }\n      findOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {\n        const query = {\n          slackBotId,\n          slackTs\n        };\n        return this.findOne(query);\n      }\n      findOneBySlackTs(slackTs) {\n        const query = {\n          slackTs\n        };\n        return this.findOne(query);\n      }\n      findOneByRoomIdAndMessageId(rid, messageId, options) {\n        const query = {\n          rid,\n          _id: messageId\n        };\n        return this.findOne(query, options);\n      }\n      getLastVisibleUserMessageSentByRoomId(rid, messageId) {\n        const query = _objectSpread({\n          rid,\n          _hidden: {\n            $ne: true\n          },\n          $or: [{\n            t: 'e2e'\n          }, {\n            t: {\n              $exists: false\n            },\n            tmid: {\n              $exists: false\n            }\n          }, {\n            t: {\n              $exists: false\n            },\n            tshow: true\n          }]\n        }, messageId && {\n          _id: {\n            $ne: messageId\n          }\n        });\n        const options = {\n          sort: {\n            ts: -1\n          }\n        };\n        return this.findOne(query, options);\n      }\n      async cloneAndSaveAsHistoryByRecord(record, user) {\n        const {\n            _id: _\n          } = record,\n          nRecord = _objectWithoutProperties(record, _excluded);\n        return this.insertOne(_objectSpread(_objectSpread({}, nRecord), {}, {\n          _hidden: true,\n          // @ts-expect-error - mongo allows it, but types don't :(\n          parent: record._id,\n          editedAt: new Date(),\n          editedBy: {\n            _id: user._id,\n            username: user.username\n          }\n        }));\n      }\n      async cloneAndSaveAsHistoryById(_id, user) {\n        const record = await this.findOneById(_id);\n        if (!record) {\n          throw new Error('Record not found');\n        }\n        return this.cloneAndSaveAsHistoryByRecord(record, user);\n      }\n      // UPDATE\n      setHiddenById(_id, hidden) {\n        if (hidden == null) {\n          hidden = true;\n        }\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            _hidden: hidden\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setHiddenByIds(ids, hidden) {\n        if (hidden == null) {\n          hidden = true;\n        }\n        const query = {\n          _id: {\n            $in: ids\n          }\n        };\n        const update = {\n          $set: {\n            _hidden: hidden\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setAsDeletedByIdAndUser(_id, user) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            msg: '',\n            t: 'rm',\n            urls: [],\n            mentions: [],\n            attachments: [],\n            reactions: {},\n            editedAt: new Date(),\n            editedBy: {\n              _id: user._id,\n              username: user.username\n            }\n          },\n          $unset: {\n            md: 1,\n            blocks: 1,\n            tshow: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setAsDeletedByIdsAndUser(ids, user) {\n        const query = {\n          _id: {\n            $in: ids\n          }\n        };\n        const update = {\n          $set: {\n            msg: '',\n            t: 'rm',\n            urls: [],\n            mentions: [],\n            attachments: [],\n            reactions: {},\n            editedAt: new Date(),\n            editedBy: {\n              _id: user._id,\n              username: user.username\n            }\n          },\n          $unset: {\n            md: 1,\n            blocks: 1,\n            tshow: 1\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      setPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {\n        if (pinned == null) {\n          pinned = true;\n        }\n        if (pinnedAt == null) {\n          pinnedAt = undefined;\n        }\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            pinned,\n            pinnedAt: pinnedAt || new Date(),\n            pinnedBy\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setUrlsById(_id, urls) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            urls\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateAllUsernamesByUserId(userId, username) {\n        const query = {\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            'u.username': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateUsernameOfEditByUserId(userId, username) {\n        const query = {\n          'editedBy._id': userId\n        };\n        const update = {\n          $set: {\n            'editedBy.username': username\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {\n        const query = {\n          _id,\n          'mentions.username': oldUsername\n        };\n        const update = {\n          $set: {\n            'mentions.$.username': newUsername,\n            'msg': newMessage\n          },\n          $unset: {\n            md: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateUserStarById(_id, userId, starred) {\n        let update;\n        const query = {\n          _id\n        };\n        if (starred) {\n          update = {\n            $addToSet: {\n              starred: {\n                _id: userId\n              }\n            }\n          };\n        } else {\n          update = {\n            $pull: {\n              starred: {\n                _id: userId\n              }\n            }\n          };\n        }\n        return this.updateOne(query, update);\n      }\n      setMessageAttachments(_id, attachments) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            attachments\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {\n        const query = {\n          _id\n        };\n        const update = {\n          $set: {\n            slackBotId,\n            slackTs\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      unlinkUserId(userId, newUserId, newUsername, newNameAlias) {\n        const query = {\n          'u._id': userId\n        };\n        const update = {\n          $set: {\n            'alias': newNameAlias,\n            'u._id': newUserId,\n            'u.username': newUsername,\n            'u.name': undefined\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      // INSERT\n      async createWithTypeRoomIdMessageUserAndUnread(type, rid, message, user, unread, extraData) {\n        const record = _objectSpread({\n          t: type,\n          rid,\n          ts: new Date(),\n          msg: message,\n          u: {\n            _id: user._id,\n            username: user.username,\n            name: user.name\n          },\n          groupable: false\n        }, unread && {\n          unread: true\n        });\n        const data = Object.assign(record, extraData);\n        return this.insertOne(data);\n      }\n      // REMOVE\n      removeByRoomIds(rids) {\n        return this.deleteMany({\n          rid: {\n            $in: rids\n          }\n        });\n      }\n      findThreadsByRoomIdPinnedTimestampAndUsers(_ref3, options) {\n        let {\n          rid,\n          pinned,\n          ignoreDiscussion = true,\n          ts,\n          users = []\n        } = _ref3;\n        const query = _objectSpread({\n          rid,\n          ts,\n          tlm: {\n            $exists: true\n          },\n          tcount: {\n            $exists: true\n          }\n        }, users.length > 0 && {\n          'u.username': {\n            $in: users\n          }\n        });\n        if (pinned) {\n          query.pinned = {\n            $ne: true\n          };\n        }\n        if (ignoreDiscussion) {\n          query.drid = {\n            $exists: false\n          };\n        }\n        return this.find(query, options);\n      }\n      async findByIdPinnedTimestampLimitAndUsers(rid, ignorePinned) {\n        let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        let ts = arguments.length > 3 ? arguments[3] : undefined;\n        let limit = arguments.length > 4 ? arguments[4] : undefined;\n        let users = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        let ignoreThreads = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n        const query = _objectSpread({\n          rid,\n          ts\n        }, users.length > 0 && {\n          'u.username': {\n            $in: users\n          }\n        });\n        if (ignorePinned) {\n          query.pinned = {\n            $ne: true\n          };\n        }\n        if (ignoreDiscussion) {\n          query.drid = {\n            $exists: false\n          };\n        }\n        if (ignoreThreads) {\n          query.tmid = {\n            $exists: false\n          };\n          query.tcount = {\n            $exists: false\n          };\n        }\n        return (await this.find(query, {\n          projection: {\n            _id: 1\n          },\n          limit\n        }).toArray()).map(_ref4 => {\n          let {\n            _id\n          } = _ref4;\n          return _id;\n        });\n      }\n      async removeByIdPinnedTimestampLimitAndUsers(rid, ignorePinned) {\n        let ignoreDiscussion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        let ts = arguments.length > 3 ? arguments[3] : undefined;\n        let limit = arguments.length > 4 ? arguments[4] : undefined;\n        let users = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        let ignoreThreads = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n        let selectedMessageIds = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : [];\n        const query = _objectSpread({\n          rid,\n          ts\n        }, users.length > 0 && {\n          'u.username': {\n            $in: users\n          }\n        });\n        if (ignorePinned) {\n          query.pinned = {\n            $ne: true\n          };\n        }\n        if (ignoreDiscussion) {\n          query.drid = {\n            $exists: false\n          };\n        }\n        if (ignoreThreads) {\n          query.tmid = {\n            $exists: false\n          };\n          query.tcount = {\n            $exists: false\n          };\n        }\n        const notCountedMessages = (await this.find(_objectSpread(_objectSpread({}, query), {}, {\n          $or: [{\n            _hidden: true\n          }, {\n            editedAt: {\n              $exists: true\n            },\n            editedBy: {\n              $exists: true\n            },\n            t: 'rm'\n          }]\n        }), {\n          projection: {\n            _id: 1\n          },\n          limit\n        }).toArray()).length;\n        if (!limit) {\n          const count = (await this.deleteMany(query)).deletedCount - notCountedMessages;\n          return count;\n        }\n        const count = (await this.deleteMany({\n          _id: {\n            $in: selectedMessageIds\n          }\n        })).deletedCount - notCountedMessages;\n        return count;\n      }\n      removeByUserId(userId) {\n        const query = {\n          'u._id': userId\n        };\n        return this.deleteMany(query);\n      }\n      getMessageByFileId(fileID) {\n        return this.findOne({\n          'file._id': fileID\n        });\n      }\n      getMessageByFileIdAndUsername(fileID, userId) {\n        const query = {\n          'file._id': fileID,\n          'u._id': userId\n        };\n        const options = {\n          projection: {\n            unread: 0,\n            mentions: 0,\n            channels: 0,\n            groupable: 0\n          }\n        };\n        return this.findOne(query, options);\n      }\n      setVisibleMessagesAsRead(rid, until) {\n        return this.updateMany({\n          rid,\n          unread: true,\n          ts: {\n            $lt: until\n          },\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }, {\n          $unset: {\n            unread: 1\n          }\n        });\n      }\n      setThreadMessagesAsRead(tmid, until) {\n        return this.updateMany({\n          tmid,\n          unread: true,\n          ts: {\n            $lt: until\n          }\n        }, {\n          $unset: {\n            unread: 1\n          }\n        });\n      }\n      setAsReadById(_id) {\n        return this.updateOne({\n          _id\n        }, {\n          $unset: {\n            unread: 1\n          }\n        });\n      }\n      findVisibleUnreadMessagesByRoomAndDate(rid, after) {\n        const query = _objectSpread({\n          unread: true,\n          rid,\n          $or: [{\n            tmid: {\n              $exists: false\n            }\n          }, {\n            tshow: true\n          }]\n        }, after && {\n          ts: {\n            $gt: after\n          }\n        });\n        return this.find(query, {\n          projection: {\n            _id: 1,\n            t: 1,\n            pinned: 1,\n            drid: 1,\n            tmid: 1\n          }\n        });\n      }\n      findUnreadThreadMessagesByDate(tmid, userId, after) {\n        const query = _objectSpread({\n          'u._id': {\n            $ne: userId\n          },\n          'unread': true,\n          tmid,\n          'tshow': {\n            $exists: false\n          }\n        }, after && {\n          ts: {\n            $gt: after\n          }\n        });\n        return this.find(query, {\n          projection: {\n            _id: 1,\n            t: 1,\n            pinned: 1,\n            drid: 1,\n            tmid: 1\n          }\n        });\n      }\n      /**\n       * Copy metadata from the discussion to the system message in the parent channel\n       * which links to the discussion.\n       * Since we don't pass this metadata into the model's function, it is not a subject\n       * to race conditions: If multiple updates occur, the current state will be updated\n       * only if the new state of the discussion room is really newer.\n       */\n      async refreshDiscussionMetadata(room) {\n        const {\n          _id: drid,\n          msgs: dcount,\n          lm: dlm\n        } = room;\n        const query = {\n          drid\n        };\n        return this.findOneAndUpdate(query, {\n          $set: {\n            dcount,\n            dlm\n          }\n        }, {\n          returnDocument: 'after'\n        });\n      }\n      // //////////////////////////////////////////////////////////////////\n      // threads\n      countThreads() {\n        return this.col.countDocuments({\n          tcount: {\n            $exists: true\n          }\n        });\n      }\n      updateRepliesByThreadId(tmid, replies, ts) {\n        const query = {\n          _id: tmid\n        };\n        const update = {\n          $addToSet: {\n            replies: {\n              $each: replies\n            }\n          },\n          $set: {\n            tlm: ts\n          },\n          $inc: {\n            tcount: 1\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async getThreadFollowsByThreadId(tmid) {\n        const msg = await this.findOneById(tmid, {\n          projection: {\n            replies: 1\n          }\n        });\n        return msg === null || msg === void 0 ? void 0 : msg.replies;\n      }\n      addThreadFollowerByThreadId(tmid, userId) {\n        const query = {\n          _id: tmid\n        };\n        const update = {\n          $addToSet: {\n            replies: userId\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      removeThreadFollowerByThreadId(tmid, userId) {\n        const query = {\n          _id: tmid\n        };\n        const update = {\n          $pull: {\n            replies: userId\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      findThreadsByRoomId(rid, skip, limit) {\n        return this.find({\n          rid,\n          tcount: {\n            $exists: true\n          }\n        }, {\n          sort: {\n            tlm: -1\n          },\n          skip,\n          limit\n        });\n      }\n      findAgentLastMessageByVisitorLastMessageTs(roomId, visitorLastMessageTs) {\n        const query = {\n          rid: roomId,\n          ts: {\n            $gt: visitorLastMessageTs\n          },\n          token: {\n            $exists: false\n          }\n        };\n        return this.findOne(query, {\n          sort: {\n            ts: 1\n          }\n        });\n      }\n      findAllImportedMessagesWithFilesToDownload() {\n        const query = {\n          '_importFile.downloadUrl': {\n            $exists: true\n          },\n          '_importFile.rocketChatUrl': {\n            $exists: false\n          },\n          '_importFile.downloaded': {\n            $ne: true\n          },\n          '_importFile.external': {\n            $ne: true\n          }\n        };\n        return this.find(query);\n      }\n      countAllImportedMessagesWithFilesToDownload() {\n        const query = {\n          '_importFile.downloadUrl': {\n            $exists: true\n          },\n          '_importFile.rocketChatUrl': {\n            $exists: false\n          },\n          '_importFile.downloaded': {\n            $ne: true\n          },\n          '_importFile.external': {\n            $ne: true\n          }\n        };\n        return this.col.countDocuments(query);\n      }\n      decreaseReplyCountById(_id) {\n        let inc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n        const query = {\n          _id\n        };\n        const update = {\n          $inc: {\n            tcount: inc\n          }\n        };\n        return this.updateOne(query, update);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_excluded","export","MessagesRaw","escapeRegExp","otrSystemMessages","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","rid","ts","_updatedAt","editedAt","sparse","expireAt","expireAfterSeconds","msg","pinned","location","slackTs","slackBotId","unread","drid","tmid","tcount","tlm","partialFilterExpression","$exists","t","findVisibleByMentionAndRoomId","username","options","query","$ne","find","findPaginatedVisibleByMentionAndRoomId","findPaginated","findStarredByUserAtRoom","userId","roomId","findPaginatedByRoomIdAndType","type","arguments","length","undefined","findDiscussionsByRoom","findDiscussionsByRoomAndText","text","RegExp","findAllNumberOfTransferredRooms","_ref","start","end","departmentId","onlyCount","match","$match","$gte","Date","$lte","lookup","$lookup","from","localField","foreignField","as","unwind","$unwind","path","preserveNullAndEmptyArrays","group","$group","_id","numberOfTransferredRooms","$sum","project","$project","$ifNull","firstParams","push","sort","$sort","name","params","$count","col","aggregate","readPreference","offset","$skip","count","$limit","allowDiskUse","getTotalOfMessagesSentByDate","_ref2","date","$dateToString","format","messages","data","$push","room","$cond","usernames","toArray","findLivechatClosedMessages","searchTerm","$or","findLivechatClosingMessage","findOne","findLivechatMessages","findVisibleByRoomIdNotContainingTypesBeforeTs","types","showSystemMessages","showThreadMessages","_hidden","$lt","tshow","$nin","findVisibleByRoomIdNotContainingTypesAndUsers","users","Array","isArray","findLivechatMessagesWithoutTypes","ignoredTypes","setBlocksById","blocks","updateOne","$set","addBlocksById","$addToSet","$each","countRoomsWithStarredMessages","queryResult","total","next","countRoomsWithMessageType","countByType","countDocuments","countRoomsWithPinnedMessages","findPinned","countPinned","findPaginatedPinnedByRoom","findStarred","countStarred","setFederationReactionEventId","reaction","federationEventId","concat","unsetFederationReactionEventId","$unset","findOneByFederationId","setFederationEventIdById","findOneByFederationIdAndUsernameOnReactions","document","reactions","$objectToArray","$and","$in","$replaceRoot","newRoot","removeByRoomId","deleteMany","setReactions","messageId","keepHistoryForToken","token","updateMany","setRoomIdByToken","unsetReactions","deleteOldOTRMessages","USER_JOINED_OTR","USER_REQUESTED_OTR_KEY_REFRESH","USER_KEY_REFRESHED_SUCCESSFULLY","addTranslations","translations","providerName","updateObj","translationProvider","Object","keys","forEach","translation","addAttachmentTranslations","attachmentIndex","setImportFileRocketChatAttachment","importFileId","rocketChatUrl","attachment","attachments","countVisibleByRoomIdBetweenTimestampsInclusive","afterTimestamp","beforeTimestamp","findByMention","findFilesByUserId","projection","findFilesByRoomIdPinnedTimestampAndUsers","excludePinned","ignoreDiscussion","ignoreThreads","findDiscussionByRoomIdPinnedTimestampAndUsers","findVisibleByRoomId","findVisibleByIds","ids","findVisibleThreadByThreadId","findVisibleByRoomIdNotContainingTypes","findVisibleByRoomIdAfterTimestamp","timestamp","$gt","findForUpdates","findVisibleByRoomIdBeforeTimestamp","findVisibleByRoomIdBeforeTimestampNotContainingTypes","inclusive","findVisibleByRoomIdBetweenTimestampsNotContainingTypes","countVisibleByRoomIdBetweenTimestampsNotContainingTypes","getLastTimestamp","limit","message","findByRoomIdAndMessageIds","messageIds","findOneBySlackBotIdAndSlackTs","findOneBySlackTs","findOneByRoomIdAndMessageId","getLastVisibleUserMessageSentByRoomId","cloneAndSaveAsHistoryByRecord","record","user","_","nRecord","insertOne","parent","editedBy","cloneAndSaveAsHistoryById","findOneById","Error","setHiddenById","hidden","update","setHiddenByIds","setAsDeletedByIdAndUser","urls","mentions","md","setAsDeletedByIdsAndUser","setPinnedByIdAndUserId","pinnedBy","pinnedAt","setUrlsById","updateAllUsernamesByUserId","updateUsernameOfEditByUserId","updateUsernameAndMessageOfMentionByIdAndOldUsername","oldUsername","newUsername","newMessage","updateUserStarById","starred","$pull","setMessageAttachments","setSlackBotIdAndSlackTs","unlinkUserId","newUserId","newNameAlias","createWithTypeRoomIdMessageUserAndUnread","extraData","u","groupable","assign","removeByRoomIds","rids","findThreadsByRoomIdPinnedTimestampAndUsers","_ref3","findByIdPinnedTimestampLimitAndUsers","ignorePinned","map","_ref4","removeByIdPinnedTimestampLimitAndUsers","selectedMessageIds","notCountedMessages","deletedCount","removeByUserId","getMessageByFileId","fileID","getMessageByFileIdAndUsername","channels","setVisibleMessagesAsRead","until","setThreadMessagesAsRead","setAsReadById","findVisibleUnreadMessagesByRoomAndDate","after","findUnreadThreadMessagesByDate","refreshDiscussionMetadata","msgs","dcount","lm","dlm","findOneAndUpdate","returnDocument","countThreads","updateRepliesByThreadId","replies","$inc","getThreadFollowsByThreadId","addThreadFollowerByThreadId","removeThreadFollowerByThreadId","findThreadsByRoomId","skip","findAgentLastMessageByVisitorLastMessageTs","visitorLastMessageTs","findAllImportedMessagesWithFilesToDownload","countAllImportedMessagesWithFilesToDownload","decreaseReplyCountById","inc","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Messages.ts"],"sourcesContent":["import type {\n\tILivechatDepartment,\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tMessageTypesValues,\n\tRocketChatRecordDeleted,\n\tMessageAttachment,\n\tIMessageWithPendingFileImport,\n} from '@rocket.chat/core-typings';\nimport type { FindPaginated, IMessagesModel } from '@rocket.chat/model-typings';\nimport type { PaginatedRequest } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tCountDocumentsOptions,\n\tAggregateOptions,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tFindOptions,\n\tIndexDescription,\n\tInsertOneResult,\n\tDeleteResult,\n\tUpdateResult,\n\tDocument,\n\tUpdateFilter,\n\tModifyResult,\n} from 'mongodb';\n\nimport { otrSystemMessages } from '../../../app/otr/lib/constants';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DeepWritable<T> = T extends (...args: any) => any\n\t? T\n\t: {\n\t\t\t-readonly [P in keyof T]: DeepWritable<T[P]>;\n\t\t};\n\nexport class MessagesRaw extends BaseRaw<IMessage> implements IMessagesModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<IMessage>>) {\n\t\tsuper(db, 'message', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { rid: 1, ts: 1, _updatedAt: 1 } },\n\t\t\t{ key: { ts: 1 } },\n\t\t\t{ key: { 'u._id': 1 } },\n\t\t\t{ key: { editedAt: 1 }, sparse: true },\n\t\t\t{ key: { 'editedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'rid': 1, 't': 1, 'u._id': 1 } },\n\t\t\t{ key: { expireAt: 1 }, expireAfterSeconds: 0 },\n\t\t\t{ key: { msg: 'text' } },\n\t\t\t{ key: { 'file._id': 1 }, sparse: true },\n\t\t\t{ key: { 'mentions.username': 1 }, sparse: true },\n\t\t\t{ key: { pinned: 1 }, sparse: true },\n\t\t\t{ key: { location: '2dsphere' } },\n\t\t\t{ key: { slackTs: 1, slackBotId: 1 }, sparse: true },\n\t\t\t{ key: { unread: 1 }, sparse: true },\n\t\t\t{ key: { 'pinnedBy._id': 1 }, sparse: true },\n\t\t\t{ key: { 'starred._id': 1 }, sparse: true },\n\n\t\t\t// discussions\n\t\t\t{ key: { drid: 1 }, sparse: true },\n\n\t\t\t// threads\n\t\t\t{ key: { tmid: 1 }, sparse: true },\n\t\t\t{ key: { tcount: 1, tlm: 1 }, sparse: true },\n\t\t\t{ key: { rid: 1, tlm: -1 }, partialFilterExpression: { tcount: { $exists: true } } }, // used for the List Threads\n\t\t\t{ key: { rid: 1, tcount: 1 } }, // used for the List Threads Count\n\n\t\t\t// livechat\n\t\t\t{ key: { 'navigation.token': 1 }, sparse: true },\n\n\t\t\t{ key: { 'federation.eventId': 1 }, sparse: true },\n\t\t\t{ key: { t: 1 }, sparse: true },\n\t\t];\n\t}\n\n\tfindVisibleByMentionAndRoomId(username: IUser['username'], rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindPaginatedVisibleByMentionAndRoomId(\n\t\tusername: IUser['username'],\n\t\trid: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'mentions.username': username,\n\t\t\trid,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarredByUserAtRoom(\n\t\tuserId: IUser['_id'],\n\t\troomId: IRoom['_id'],\n\t\toptions?: FindOptions<IMessage>,\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': userId,\n\t\t\t'rid': roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindPaginatedByRoomIdAndType(\n\t\troomId: IRoom['_id'],\n\t\ttype: IMessage['t'],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tt: type,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\t// TODO: do we need this? currently not used anywhere\n\tfindDiscussionsByRoom(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = { rid, drid: { $exists: true } };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindDiscussionsByRoomAndText(rid: IRoom['_id'], text: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tdrid: { $exists: true },\n\t\t\tmsg: new RegExp(escapeRegExp(text), 'i'),\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount: true;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount,\n\t\toptions,\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: false;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }>;\n\n\tfindAllNumberOfTransferredRooms({\n\t\tstart,\n\t\tend,\n\t\tdepartmentId,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: Date;\n\t\tend: Date;\n\t\tdepartmentId?: ILivechatDepartment['_id'];\n\t\tonlyCount?: boolean;\n\t\toptions?: PaginatedRequest;\n\t}): AggregationCursor<{ total: number }> | AggregationCursor<{ _id: string | null; numberOfTransferredRooms: number }> {\n\t\t// FIXME: aggregation type definitions\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tt: 'livechat_transfer_history',\n\t\t\t\tts: { $gte: new Date(start), $lte: new Date(end) },\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\tlocalField: 'rid',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'room',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$room',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: {\n\t\t\t\t\t_id: null,\n\t\t\t\t\tdepartmentId: '$room.departmentId',\n\t\t\t\t},\n\t\t\t\tnumberOfTransferredRooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: { $ifNull: ['$_id.departmentId', null] },\n\t\t\t\tnumberOfTransferredRooms: 1,\n\t\t\t},\n\t\t};\n\t\tconst firstParams: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [match, lookup, unwind];\n\t\tif (departmentId) {\n\t\t\tfirstParams.push({\n\t\t\t\t$match: {\n\t\t\t\t\t'room.departmentId': departmentId,\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst sort = { $sort: options.sort || { name: 1 } };\n\t\tconst params = [...firstParams, group, project, sort];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params, { readPreference: readSecondaryPreferred() });\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<{ _id: string | null; numberOfTransferredRooms: number }>(params, {\n\t\t\tallowDiskUse: true,\n\t\t\treadPreference: readSecondaryPreferred(),\n\t\t});\n\t}\n\n\tgetTotalOfMessagesSentByDate({ start, end, options = {} }: { start: Date; end: Date; options?: PaginatedRequest }): Promise<any[]> {\n\t\tconst params: Exclude<Parameters<Collection<IMessage>['aggregate']>[0], undefined> = [\n\t\t\t{ $match: { t: { $exists: false }, ts: { $gte: start, $lte: end } } },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\tdate: {\n\t\t\t\t\t\t\t$dateToString: { format: '%Y%m%d', date: '$ts' },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tmessages: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: '$_id.rid',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tdate: '$_id.date',\n\t\t\t\t\t\t\tmessages: '$messages',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$lookup: {\n\t\t\t\t\tfrom: 'rocketchat_room',\n\t\t\t\t\tlocalField: '_id',\n\t\t\t\t\tforeignField: '_id',\n\t\t\t\t\tas: 'room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$room',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tdata: '$data',\n\t\t\t\t\troom: {\n\t\t\t\t\t\t_id: '$room._id',\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.fname', false] }, '$room.fname', '$room.name'],\n\t\t\t\t\t\t},\n\t\t\t\t\t\tt: '$room.t',\n\t\t\t\t\t\tusernames: {\n\t\t\t\t\t\t\t$cond: [{ $ifNull: ['$room.usernames', false] }, '$room.usernames', []],\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'messages',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$data',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\tdate: '$data.date',\n\t\t\t\t\troom: 1,\n\t\t\t\t\ttype: 1,\n\t\t\t\t\tmessages: '$data.messages',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t\tif (options.sort) {\n\t\t\tparams.push({ $sort: options.sort });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() }).toArray();\n\t}\n\n\tfindLivechatClosedMessages(rid: IRoom['_id'], searchTerm?: string, options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\treturn this.findPaginated(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t\t...(searchTerm && { msg: new RegExp(escapeRegExp(searchTerm), 'ig') }),\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatClosingMessage(rid: IRoom['_id'], options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\treturn this.findOne<IMessage>(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tt: 'livechat-close',\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindLivechatMessages(rid: IRoom['_id'], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\t$or: [{ t: { $exists: false } }, { t: 'livechat-close' }],\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesBeforeTs(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tts: Date,\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: { $lt: ts },\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypesAndUsers(\n\t\troomId: IRoom['_id'],\n\t\ttypes: IMessage['t'][],\n\t\tusers?: string[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t...(Array.isArray(users) && users.length > 0 && { 'u._id': { $nin: users } }),\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t};\n\n\t\tif (types.length > 0) {\n\t\t\tquery.t = { $nin: types };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindLivechatMessagesWithoutTypes(\n\t\trid: IRoom['_id'],\n\t\tignoredTypes: IMessage['t'][],\n\t\tshowSystemMessages: boolean,\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t};\n\n\t\tif (ignoredTypes.length > 0) {\n\t\t\tquery.t = { $nin: ignoredTypes };\n\t\t}\n\n\t\tif (!showSystemMessages) {\n\t\t\tquery.t = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync setBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tblocks,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync addBlocksById(_id: string, blocks: Required<IMessage>['blocks']): Promise<void> {\n\t\tawait this.updateOne({ _id }, { $addToSet: { blocks: { $each: blocks } } });\n\t}\n\n\tasync countRoomsWithStarredMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { 'starred._id': { $exists: true } } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countRoomsWithMessageType(type: IMessage['t'], options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { t: type } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tasync countByType(type: IMessage['t'], options: CountDocumentsOptions): Promise<number> {\n\t\treturn this.col.countDocuments({ t: type }, options);\n\t}\n\n\tasync countRoomsWithPinnedMessages(options: AggregateOptions): Promise<number> {\n\t\tconst queryResult = await this.col\n\t\t\t.aggregate<{ _id: null; total: number }>(\n\t\t\t\t[\n\t\t\t\t\t{ $match: { pinned: true } },\n\t\t\t\t\t{ $group: { _id: '$rid' } },\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: null,\n\t\t\t\t\t\t\ttotal: { $sum: 1 },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\toptions,\n\t\t\t)\n\t\t\t.next();\n\n\t\treturn queryResult?.total || 0;\n\t}\n\n\tfindPinned(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountPinned(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' as MessageTypesValues },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tfindPaginatedPinnedByRoom(roomId: IMessage['rid'], options?: FindOptions<IMessage>): FindPaginated<FindCursor<IMessage>> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\tt: { $ne: 'rm' },\n\t\t\t_hidden: { $ne: true },\n\t\t\tpinned: true,\n\t\t\trid: roomId,\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tfindStarred(options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountStarred(options?: CountDocumentsOptions): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t'_hidden': { $ne: true },\n\t\t\t'starred._id': { $exists: true },\n\t\t};\n\n\t\treturn this.countDocuments(query, options);\n\t}\n\n\tasync setFederationReactionEventId(username: string, _id: string, reaction: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: username,\n\t\t\t\t} as any,\n\t\t\t},\n\t\t);\n\t}\n\n\tasync unsetFederationReactionEventId(federationEventId: string, _id: string, reaction: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\t[`reactions.${reaction}.federationReactionEventIds.${federationEventId}`]: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationId(federationEventId: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'federation.eventId': federationEventId });\n\t}\n\n\tasync setFederationEventIdById(_id: string, federationEventId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\t'federation.eventId': federationEventId,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync findOneByFederationIdAndUsernameOnReactions(federationEventId: string, username: string): Promise<IMessage | null> {\n\t\treturn (\n\t\t\tawait this.col\n\t\t\t\t.aggregate(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\tt: { $ne: 'rm' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t\tdocument: '$$ROOT',\n\t\t\t\t\t\t\t\treactions: { $objectToArray: '$reactions' },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$unwind: {\n\t\t\t\t\t\t\t\tpath: '$reactions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t\t$and: [\n\t\t\t\t\t\t\t\t\t{ 'reactions.v.usernames': { $in: [username] } },\n\t\t\t\t\t\t\t\t\t{ [`reactions.v.federationReactionEventIds.${federationEventId}`]: username },\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ $replaceRoot: { newRoot: '$document' } },\n\t\t\t\t\t],\n\t\t\t\t\t{ readPreference: readSecondaryPreferred() },\n\t\t\t\t)\n\t\t\t\t.toArray()\n\t\t)[0] as IMessage;\n\t}\n\n\tremoveByRoomId(roomId: string): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: roomId });\n\t}\n\n\tsetReactions(messageId: string, reactions: IMessage['reactions']): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $set: { reactions } });\n\t}\n\n\tkeepHistoryForToken(token: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t'expireAt': {\n\t\t\t\t\t$exists: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\texpireAt: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetRoomIdByToken(token: string, rid: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\t'navigation.token': token,\n\t\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\t\t'rid': null,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\trid,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tunsetReactions(messageId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: messageId }, { $unset: { reactions: 1 } });\n\t}\n\n\tdeleteOldOTRMessages(roomId: string, ts: Date): Promise<DeleteResult> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid: roomId,\n\t\t\tt: {\n\t\t\t\t$in: [\n\t\t\t\t\t'otr',\n\t\t\t\t\totrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\totrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t\t\totrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t],\n\t\t\t},\n\t\t\tts: { $lte: ts },\n\t\t};\n\t\treturn this.col.deleteMany(query);\n\t}\n\n\taddTranslations(messageId: string, translations: Record<string, string>, providerName: string): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = { translationProvider: providerName };\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\taddAttachmentTranslations(messageId: string, attachmentIndex: string, translations: Record<string, string>): Promise<UpdateResult> {\n\t\tconst updateObj: DeepWritable<UpdateFilter<IMessage>['$set']> = {};\n\t\tObject.keys(translations).forEach((key) => {\n\t\t\tconst translation = translations[key];\n\t\t\tupdateObj[`attachments.${attachmentIndex}.translations.${key}`] = translation;\n\t\t});\n\t\treturn this.updateOne({ _id: messageId }, { $set: updateObj });\n\t}\n\n\tsetImportFileRocketChatAttachment(\n\t\timportFileId: string,\n\t\trocketChatUrl: string,\n\t\tattachment: MessageAttachment,\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'_importFile.id': importFileId,\n\t\t};\n\n\t\treturn this.updateMany(query, {\n\t\t\t$set: {\n\t\t\t\t'_importFile.rocketChatUrl': rocketChatUrl,\n\t\t\t\t'_importFile.downloaded': true,\n\t\t\t},\n\t\t\t$addToSet: {\n\t\t\t\tattachments: attachment,\n\t\t\t},\n\t\t});\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsInclusive(roomId: string, afterTimestamp: Date, beforeTimestamp: Date): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gte: afterTimestamp,\n\t\t\t\t$lte: beforeTimestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\t// FIND\n\tfindByMention(username: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = { 'mentions.username': username };\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindFilesByUserId(userId: string, options: FindOptions<IMessage> = {}): FindCursor<Pick<IMessage, 'file'>> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t\t'file._id': { $exists: true },\n\t\t};\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindFilesByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t'file._id': { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(ignoreThreads ? { tmid: { $exists: false }, tcount: { $exists: false } } : {}),\n\t\t\t...(ignoreDiscussion ? { drid: { $exists: false } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, { projection: { 'file._id': 1 }, ...options });\n\t}\n\n\tfindDiscussionByRoomIdPinnedTimestampAndUsers(\n\t\trid: string,\n\t\texcludePinned: boolean,\n\t\tts: Filter<IMessage>['ts'],\n\t\tusers: string[] = [],\n\t\toptions: FindOptions<IMessage> = {},\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\tdrid: { $exists: true },\n\t\t\t...(excludePinned ? { pinned: { $ne: true } } : {}),\n\t\t\t...(users.length ? { 'u.username': { $in: users } } : {}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomId<T extends IMessage = IMessage>(rid: string, options?: FindOptions<T>): FindCursor<T> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\trid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByIds(ids: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_id: { $in: ids },\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleThreadByThreadId(tmid: string, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\n\t\t\ttmid,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdNotContainingTypes(\n\t\troomId: string,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdAfterTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindForUpdates(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\t_updatedAt: {\n\t\t\t\t$gt: timestamp,\n\t\t\t},\n\t\t};\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestamp(roomId: string, timestamp: Date, options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t$lt: timestamp,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBeforeTimestampNotContainingTypes(\n\t\troomId: string,\n\t\ttimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions?: FindOptions<IMessage>,\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$lte' : '$lt']: timestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\toptions: FindOptions<IMessage> = {},\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tcountVisibleByRoomIdBetweenTimestampsNotContainingTypes(\n\t\troomId: string,\n\t\tafterTimestamp: Date,\n\t\tbeforeTimestamp: Date,\n\t\ttypes: MessageTypesValues[],\n\t\tshowThreadMessages = true,\n\t\tinclusive = false,\n\t): Promise<number> {\n\t\tconst query = {\n\t\t\t_hidden: {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\trid: roomId,\n\t\t\tts: {\n\t\t\t\t[inclusive ? '$gte' : '$gt']: afterTimestamp,\n\t\t\t\t[inclusive ? '$lte' : '$lt']: beforeTimestamp,\n\t\t\t},\n\t\t\t...(!showThreadMessages && {\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t}),\n\t\t\t...(Array.isArray(types) &&\n\t\t\t\ttypes.length > 0 && {\n\t\t\t\t\tt: { $nin: types },\n\t\t\t\t}),\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tasync getLastTimestamp(options: FindOptions<IMessage> = { projection: { _id: 0, ts: 1 } }): Promise<Date | undefined> {\n\t\toptions.sort = { ts: -1 };\n\t\toptions.limit = 1;\n\t\tconst [message] = await this.find({}, options).toArray();\n\t\treturn message?.ts;\n\t}\n\n\tfindByRoomIdAndMessageIds(rid: string, messageIds: string[], options?: FindOptions<IMessage>): FindCursor<IMessage> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: {\n\t\t\t\t$in: messageIds,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindOneBySlackBotIdAndSlackTs(slackBotId: string, slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\tslackBotId,\n\t\t\tslackTs,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneBySlackTs(slackTs: Date): Promise<IMessage | null> {\n\t\tconst query = { slackTs };\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneByRoomIdAndMessageId(rid: string, messageId: string, options?: FindOptions<IMessage>): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\t_id: messageId,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tgetLastVisibleUserMessageSentByRoomId(rid: string, messageId?: string): Promise<IMessage | null> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\t_hidden: { $ne: true },\n\t\t\t$or: [{ t: 'e2e' }, { t: { $exists: false }, tmid: { $exists: false } }, { t: { $exists: false }, tshow: true }],\n\t\t\t...(messageId && { _id: { $ne: messageId } }),\n\t\t};\n\n\t\tconst options: FindOptions<IMessage> = {\n\t\t\tsort: {\n\t\t\t\tts: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne<IMessage>(query, options);\n\t}\n\n\tasync cloneAndSaveAsHistoryByRecord(record: IMessage, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst { _id: _, ...nRecord } = record;\n\t\treturn this.insertOne({\n\t\t\t...nRecord,\n\t\t\t_hidden: true,\n\t\t\t// @ts-expect-error - mongo allows it, but types don't :(\n\t\t\tparent: record._id,\n\t\t\teditedAt: new Date(),\n\t\t\teditedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t});\n\t}\n\n\tasync cloneAndSaveAsHistoryById(_id: string, user: IMessage['u']): Promise<InsertOneResult<IMessage>> {\n\t\tconst record = await this.findOneById(_id);\n\t\tif (!record) {\n\t\t\tthrow new Error('Record not found');\n\t\t}\n\n\t\treturn this.cloneAndSaveAsHistoryByRecord(record, user);\n\t}\n\n\t// UPDATE\n\tsetHiddenById(_id: string, hidden: boolean): Promise<UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetHiddenByIds(ids: string[], hidden: boolean): Promise<Document | UpdateResult> {\n\t\tif (hidden == null) {\n\t\t\thidden = true;\n\t\t}\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t_hidden: hidden,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetAsDeletedByIdAndUser(_id: string, user: IMessage['u']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetAsDeletedByIdsAndUser(ids: string[], user: IMessage['u']): Promise<Document | UpdateResult> {\n\t\tconst query = { _id: { $in: ids } };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tmsg: '',\n\t\t\t\tt: 'rm',\n\t\t\t\turls: [],\n\t\t\t\tmentions: [],\n\t\t\t\tattachments: [],\n\t\t\t\treactions: {},\n\t\t\t\teditedAt: new Date(),\n\t\t\t\teditedBy: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername: user.username,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t\tblocks: 1,\n\t\t\t\ttshow: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tsetPinnedByIdAndUserId(\n\t\t_id: string,\n\t\tpinnedBy: Pick<IUser, '_id' | 'username'> | undefined,\n\t\tpinned?: boolean,\n\t\tpinnedAt?: Date,\n\t): Promise<UpdateResult> {\n\t\tif (pinned == null) {\n\t\t\tpinned = true;\n\t\t}\n\t\tif (pinnedAt == null) {\n\t\t\tpinnedAt = undefined;\n\t\t}\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tpinned,\n\t\t\t\tpinnedAt: pinnedAt || new Date(),\n\t\t\t\tpinnedBy,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetUrlsById(_id: string, urls: NonNullable<IMessage['urls']>): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\turls,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateAllUsernamesByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'u._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'u.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameOfEditByUserId(userId: string, username: string): Promise<UpdateResult | Document> {\n\t\tconst query = { 'editedBy._id': userId };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'editedBy.username': username,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateUsernameAndMessageOfMentionByIdAndOldUsername(\n\t\t_id: string,\n\t\toldUsername: string,\n\t\tnewUsername: string,\n\t\tnewMessage: string,\n\t): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\t'mentions.username': oldUsername,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\t'mentions.$.username': newUsername,\n\t\t\t\t'msg': newMessage,\n\t\t\t},\n\t\t\t$unset: {\n\t\t\t\tmd: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateUserStarById(_id: string, userId: string, starred?: boolean): Promise<UpdateResult> {\n\t\tlet update: UpdateFilter<IMessage>;\n\t\tconst query = { _id };\n\n\t\tif (starred) {\n\t\t\tupdate = {\n\t\t\t\t$addToSet: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t} else {\n\t\t\tupdate = {\n\t\t\t\t$pull: {\n\t\t\t\t\tstarred: { _id: userId },\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetMessageAttachments(_id: string, attachments: IMessage['attachments']): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tattachments,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetSlackBotIdAndSlackTs(_id: string, slackBotId: string, slackTs: Date): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$set: {\n\t\t\t\tslackBotId,\n\t\t\t\tslackTs,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tunlinkUserId(userId: string, newUserId: string, newUsername: string, newNameAlias: string): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\t'alias': newNameAlias,\n\t\t\t\t'u._id': newUserId,\n\t\t\t\t'u.username': newUsername,\n\t\t\t\t'u.name': undefined,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\t// INSERT\n\n\tasync createWithTypeRoomIdMessageUserAndUnread(\n\t\ttype: MessageTypesValues,\n\t\trid: string,\n\t\tmessage: string,\n\t\tuser: Pick<IMessage['u'], '_id' | 'username' | 'name'>,\n\t\tunread?: boolean,\n\t\textraData?: Partial<IMessage>,\n\t): Promise<InsertOneResult<IMessage>> {\n\t\tconst record: Omit<IMessage, '_id' | '_updatedAt'> = {\n\t\t\tt: type,\n\t\t\trid,\n\t\t\tts: new Date(),\n\t\t\tmsg: message,\n\t\t\tu: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t\tname: user.name,\n\t\t\t},\n\t\t\tgroupable: false as const,\n\t\t\t...(unread && { unread: true }),\n\t\t};\n\n\t\tconst data = Object.assign(record, extraData);\n\n\t\treturn this.insertOne(data);\n\t}\n\n\t// REMOVE\n\n\tremoveByRoomIds(rids: string[]): Promise<DeleteResult> {\n\t\treturn this.deleteMany({ rid: { $in: rids } });\n\t}\n\n\tfindThreadsByRoomIdPinnedTimestampAndUsers(\n\t\t{\n\t\t\trid,\n\t\t\tpinned,\n\t\t\tignoreDiscussion = true,\n\t\t\tts,\n\t\t\tusers = [],\n\t\t}: { rid: string; pinned: boolean; ignoreDiscussion?: boolean; ts: Filter<IMessage>['ts']; users: string[] },\n\t\toptions?: FindOptions<IMessage>,\n\t): FindCursor<IMessage> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\ttlm: { $exists: true },\n\t\t\ttcount: { $exists: true },\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (pinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\treturn this.find(query, options);\n\t}\n\n\tasync findByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t): Promise<string[]> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\treturn (\n\t\t\tawait this.find(query, {\n\t\t\t\tprojection: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t\tlimit,\n\t\t\t}).toArray()\n\t\t).map(({ _id }) => _id);\n\t}\n\n\tasync removeByIdPinnedTimestampLimitAndUsers(\n\t\trid: string,\n\t\tignorePinned: boolean,\n\t\tignoreDiscussion = true,\n\t\tts: Filter<IMessage>['ts'],\n\t\tlimit: number,\n\t\tusers: string[] = [],\n\t\tignoreThreads = true,\n\t\tselectedMessageIds: string[] = [],\n\t): Promise<number> {\n\t\tconst query: Filter<IMessage> = {\n\t\t\trid,\n\t\t\tts,\n\t\t\t...(users.length > 0 && { 'u.username': { $in: users } }),\n\t\t};\n\n\t\tif (ignorePinned) {\n\t\t\tquery.pinned = { $ne: true };\n\t\t}\n\n\t\tif (ignoreDiscussion) {\n\t\t\tquery.drid = { $exists: false };\n\t\t}\n\n\t\tif (ignoreThreads) {\n\t\t\tquery.tmid = { $exists: false };\n\t\t\tquery.tcount = { $exists: false };\n\t\t}\n\n\t\tconst notCountedMessages = (\n\t\t\tawait this.find(\n\t\t\t\t{\n\t\t\t\t\t...query,\n\t\t\t\t\t$or: [{ _hidden: true }, { editedAt: { $exists: true }, editedBy: { $exists: true }, t: 'rm' }],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tprojection: {\n\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t},\n\t\t\t\t\tlimit,\n\t\t\t\t},\n\t\t\t).toArray()\n\t\t).length;\n\n\t\tif (!limit) {\n\t\t\tconst count = (await this.deleteMany(query)).deletedCount - notCountedMessages;\n\n\t\t\treturn count;\n\t\t}\n\n\t\tconst count =\n\t\t\t(\n\t\t\t\tawait this.deleteMany({\n\t\t\t\t\t_id: {\n\t\t\t\t\t\t$in: selectedMessageIds,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t).deletedCount - notCountedMessages;\n\n\t\treturn count;\n\t}\n\n\tremoveByUserId(userId: string): Promise<DeleteResult> {\n\t\tconst query = { 'u._id': userId };\n\n\t\treturn this.deleteMany(query);\n\t}\n\n\tgetMessageByFileId(fileID: string): Promise<IMessage | null> {\n\t\treturn this.findOne({ 'file._id': fileID });\n\t}\n\n\tgetMessageByFileIdAndUsername(fileID: string, userId: string): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\t'file._id': fileID,\n\t\t\t'u._id': userId,\n\t\t};\n\n\t\tconst options = {\n\t\t\tprojection: {\n\t\t\t\tunread: 0,\n\t\t\t\tmentions: 0,\n\t\t\t\tchannels: 0,\n\t\t\t\tgroupable: 0,\n\t\t\t},\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tsetVisibleMessagesAsRead(rid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\trid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttshow: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetThreadMessagesAsRead(tmid: string, until: Date): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttmid,\n\t\t\t\tunread: true,\n\t\t\t\tts: { $lt: until },\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetAsReadById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tunread: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tfindVisibleUnreadMessagesByRoomAndDate(rid: string, after: Date): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\tunread: true,\n\t\t\trid,\n\t\t\t$or: [\n\t\t\t\t{\n\t\t\t\t\ttmid: { $exists: false },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttshow: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\tfindUnreadThreadMessagesByDate(\n\t\ttmid: string,\n\t\tuserId: string,\n\t\tafter: Date,\n\t): FindCursor<Pick<IMessage, '_id' | 't' | 'pinned' | 'drid' | 'tmid'>> {\n\t\tconst query = {\n\t\t\t'u._id': { $ne: userId },\n\t\t\t'unread': true,\n\t\t\ttmid,\n\t\t\t'tshow': { $exists: false },\n\t\t\t...(after && { ts: { $gt: after } }),\n\t\t};\n\n\t\treturn this.find(query, {\n\t\t\tprojection: {\n\t\t\t\t_id: 1,\n\t\t\t\tt: 1,\n\t\t\t\tpinned: 1,\n\t\t\t\tdrid: 1,\n\t\t\t\ttmid: 1,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Copy metadata from the discussion to the system message in the parent channel\n\t * which links to the discussion.\n\t * Since we don't pass this metadata into the model's function, it is not a subject\n\t * to race conditions: If multiple updates occur, the current state will be updated\n\t * only if the new state of the discussion room is really newer.\n\t */\n\tasync refreshDiscussionMetadata(room: Pick<IRoom, '_id' | 'msgs' | 'lm'>): Promise<ModifyResult<IMessage>> {\n\t\tconst { _id: drid, msgs: dcount, lm: dlm } = room;\n\n\t\tconst query = {\n\t\t\tdrid,\n\t\t};\n\n\t\treturn this.findOneAndUpdate(\n\t\t\tquery,\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdcount,\n\t\t\t\t\tdlm,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\t}\n\n\t// //////////////////////////////////////////////////////////////////\n\t// threads\n\n\tcountThreads(): Promise<number> {\n\t\treturn this.col.countDocuments({ tcount: { $exists: true } });\n\t}\n\n\tupdateRepliesByThreadId(tmid: string, replies: string[], ts: Date): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: {\n\t\t\t\t\t$each: replies,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$set: {\n\t\t\t\ttlm: ts,\n\t\t\t},\n\t\t\t$inc: {\n\t\t\t\ttcount: 1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync getThreadFollowsByThreadId(tmid: string): Promise<string[] | undefined> {\n\t\tconst msg = await this.findOneById(tmid, { projection: { replies: 1 } });\n\t\treturn msg?.replies;\n\t}\n\n\taddThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$addToSet: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tremoveThreadFollowerByThreadId(tmid: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: tmid,\n\t\t};\n\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$pull: {\n\t\t\t\treplies: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindThreadsByRoomId(rid: string, skip: number, limit: number): FindCursor<IMessage> {\n\t\treturn this.find({ rid, tcount: { $exists: true } }, { sort: { tlm: -1 }, skip, limit });\n\t}\n\n\tfindAgentLastMessageByVisitorLastMessageTs(roomId: string, visitorLastMessageTs: Date): Promise<IMessage | null> {\n\t\tconst query = {\n\t\t\trid: roomId,\n\t\t\tts: { $gt: visitorLastMessageTs },\n\t\t\ttoken: { $exists: false },\n\t\t};\n\n\t\treturn this.findOne(query, { sort: { ts: 1 } });\n\t}\n\n\tfindAllImportedMessagesWithFilesToDownload(): FindCursor<IMessageWithPendingFileImport> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.find<IMessageWithPendingFileImport>(query);\n\t}\n\n\tcountAllImportedMessagesWithFilesToDownload(): Promise<number> {\n\t\tconst query = {\n\t\t\t'_importFile.downloadUrl': {\n\t\t\t\t$exists: true,\n\t\t\t},\n\t\t\t'_importFile.rocketChatUrl': {\n\t\t\t\t$exists: false,\n\t\t\t},\n\t\t\t'_importFile.downloaded': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t\t'_importFile.external': {\n\t\t\t\t$ne: true,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col.countDocuments(query);\n\t}\n\n\tdecreaseReplyCountById(_id: string, inc = -1): Promise<UpdateResult> {\n\t\tconst query = { _id };\n\t\tconst update: UpdateFilter<IMessage> = {\n\t\t\t$inc: {\n\t\t\t\ttcount: inc,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"b97645ab77d042eabc2916ed4be8b5290f4081e2"}
