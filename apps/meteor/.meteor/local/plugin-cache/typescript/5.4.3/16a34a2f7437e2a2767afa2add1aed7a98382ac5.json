{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/client/methods/sendMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/lib/client/methods/sendMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/client/methods/sendMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/client/methods/sendMessage.ts","sourceRoot":"","sources":["app/lib/client/methods/sendMessage.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,uBAAuB,EAAE,MAAM,gDAAgD,CAAC;AACzF,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,mCAAmC,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,CAAC,EAAE,MAAM,yBAAyB,CAAC;AAE5C,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,WAAW,CAAC,OAAO;QACxB,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;YACtC,OAAO,KAAK,CAAC;QACd,CAAC;QACD,MAAM,oBAAoB,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACtF,IAAI,oBAAoB,EAAE,CAAC;YAC1B,OAAO,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAkB,CAAC;QAC3C,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;YACrB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,CAAC,GAAG;YACX,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;SACrB,CAAC;QACF,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,IAAI,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,EAAE,CAAC;YAClD,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,4DAA4D;QAC5D,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3F,IAAI,IAAI,EAAE,SAAS,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,MAAM,uBAAuB,CAAC,OAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACnE,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5B,OAAO,SAAS,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { IMessage, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { onClientMessageReceived } from '../../../../client/lib/onClientMessageReceived';\nimport { dispatchToastMessage } from '../../../../client/lib/toast';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { ChatMessage, ChatRoom } from '../../../models/client';\nimport { settings } from '../../../settings/client';\nimport { t } from '../../../utils/lib/i18n';\n\nMeteor.methods<ServerMethods>({\n\tasync sendMessage(message) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid || trim(message.msg) === '') {\n\t\t\treturn false;\n\t\t}\n\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });\n\t\tif (messageAlreadyExists) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: t('Message_Already_Sent') });\n\t\t}\n\t\tconst user = Meteor.user() as IUser | null;\n\t\tif (!user?.username) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'sendMessage' });\n\t\t}\n\t\tmessage.ts = new Date();\n\t\tmessage.u = {\n\t\t\t_id: uid,\n\t\t\tusername: user.username,\n\t\t\tname: user.name || '',\n\t\t};\n\t\tmessage.temp = true;\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\tmessage.unread = true;\n\t\t}\n\n\t\t// If the room is federated, send the message to matrix only\n\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });\n\t\tif (room?.federated) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait onClientMessageReceived(message as IMessage).then((message) => {\n\t\t\tChatMessage.insert(message);\n\t\t\treturn callbacks.run('afterSaveMessage', message, { room });\n\t\t});\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/client/methods/sendMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/client/methods/sendMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/client/methods/sendMessage.ts","sourceRoot":"","sources":["app/lib/client/methods/sendMessage.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,uBAAuB,EAAE,MAAM,gDAAgD,CAAC;AACzF,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,mCAAmC,CAAC;AACzD,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,CAAC,EAAE,MAAM,yBAAyB,CAAC;AAE5C,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,WAAW,CAAC,OAAO;QACxB,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;YACtC,OAAO,KAAK,CAAC;QACd,CAAC;QACD,MAAM,oBAAoB,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QACtF,IAAI,oBAAoB,EAAE,CAAC;YAC1B,OAAO,oBAAoB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;QACpF,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAkB,CAAC;QAC3C,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;YACrB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,OAAO,CAAC,CAAC,GAAG;YACX,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;SACrB,CAAC;QACF,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,IAAI,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,EAAE,CAAC;YAClD,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,4DAA4D;QAC5D,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3F,IAAI,IAAI,EAAE,SAAS,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,MAAM,uBAAuB,CAAC,OAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACnE,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5B,OAAO,SAAS,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { IMessage, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { onClientMessageReceived } from '../../../../client/lib/onClientMessageReceived';\nimport { dispatchToastMessage } from '../../../../client/lib/toast';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { ChatMessage, ChatRoom } from '../../../models/client';\nimport { settings } from '../../../settings/client';\nimport { t } from '../../../utils/lib/i18n';\n\nMeteor.methods<ServerMethods>({\n\tasync sendMessage(message) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid || trim(message.msg) === '') {\n\t\t\treturn false;\n\t\t}\n\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });\n\t\tif (messageAlreadyExists) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: t('Message_Already_Sent') });\n\t\t}\n\t\tconst user = Meteor.user() as IUser | null;\n\t\tif (!user?.username) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'sendMessage' });\n\t\t}\n\t\tmessage.ts = new Date();\n\t\tmessage.u = {\n\t\t\t_id: uid,\n\t\t\tusername: user.username,\n\t\t\tname: user.name || '',\n\t\t};\n\t\tmessage.temp = true;\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\tmessage.unread = true;\n\t\t}\n\n\t\t// If the room is federated, send the message to matrix only\n\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });\n\t\tif (room?.federated) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait onClientMessageReceived(message as IMessage).then((message) => {\n\t\t\tChatMessage.insert(message);\n\t\t\treturn callbacks.run('afterSaveMessage', message, { room });\n\t\t});\n\t},\n});\n"]}}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nlet onClientMessageReceived;\nmodule.link(\"../../../../client/lib/onClientMessageReceived\", {\n  onClientMessageReceived(v) {\n    onClientMessageReceived = v;\n  }\n}, 1);\nlet dispatchToastMessage;\nmodule.link(\"../../../../client/lib/toast\", {\n  dispatchToastMessage(v) {\n    dispatchToastMessage = v;\n  }\n}, 2);\nlet callbacks;\nmodule.link(\"../../../../lib/callbacks\", {\n  callbacks(v) {\n    callbacks = v;\n  }\n}, 3);\nlet trim;\nmodule.link(\"../../../../lib/utils/stringUtils\", {\n  trim(v) {\n    trim = v;\n  }\n}, 4);\nlet ChatMessage, ChatRoom;\nmodule.link(\"../../../models/client\", {\n  ChatMessage(v) {\n    ChatMessage = v;\n  },\n  ChatRoom(v) {\n    ChatRoom = v;\n  }\n}, 5);\nlet settings;\nmodule.link(\"../../../settings/client\", {\n  settings(v) {\n    settings = v;\n  }\n}, 6);\nlet t;\nmodule.link(\"../../../utils/lib/i18n\", {\n  t(v) {\n    t = v;\n  }\n}, 7);\nMeteor.methods({\n  async sendMessage(message) {\n    const uid = Meteor.userId();\n    if (!uid || trim(message.msg) === '') {\n      return false;\n    }\n    const messageAlreadyExists = message._id && ChatMessage.findOne({\n      _id: message._id\n    });\n    if (messageAlreadyExists) {\n      return dispatchToastMessage({\n        type: 'error',\n        message: t('Message_Already_Sent')\n      });\n    }\n    const user = Meteor.user();\n    if (!(user !== null && user !== void 0 && user.username)) {\n      throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n        method: 'sendMessage'\n      });\n    }\n    message.ts = new Date();\n    message.u = {\n      _id: uid,\n      username: user.username,\n      name: user.name || ''\n    };\n    message.temp = true;\n    if (settings.get('Message_Read_Receipt_Enabled')) {\n      message.unread = true;\n    }\n    // If the room is federated, send the message to matrix only\n    const room = ChatRoom.findOne({\n      _id: message.rid\n    }, {\n      fields: {\n        federated: 1,\n        name: 1\n      }\n    });\n    if (room !== null && room !== void 0 && room.federated) {\n      return;\n    }\n    await onClientMessageReceived(message).then(message => {\n      ChatMessage.insert(message);\n      return callbacks.run('afterSaveMessage', message, {\n        room\n      });\n    });\n  }\n});","map":{"version":3,"names":["Meteor","module","link","v","onClientMessageReceived","dispatchToastMessage","callbacks","trim","ChatMessage","ChatRoom","settings","t","methods","sendMessage","message","uid","userId","msg","messageAlreadyExists","_id","findOne","type","user","username","Error","method","ts","Date","u","name","temp","get","unread","room","rid","fields","federated","then","insert","run"],"sources":["app/lib/client/methods/sendMessage.ts"],"sourcesContent":["import type { IMessage, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { onClientMessageReceived } from '../../../../client/lib/onClientMessageReceived';\nimport { dispatchToastMessage } from '../../../../client/lib/toast';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport { ChatMessage, ChatRoom } from '../../../models/client';\nimport { settings } from '../../../settings/client';\nimport { t } from '../../../utils/lib/i18n';\n\nMeteor.methods<ServerMethods>({\n\tasync sendMessage(message) {\n\t\tconst uid = Meteor.userId();\n\t\tif (!uid || trim(message.msg) === '') {\n\t\t\treturn false;\n\t\t}\n\t\tconst messageAlreadyExists = message._id && ChatMessage.findOne({ _id: message._id });\n\t\tif (messageAlreadyExists) {\n\t\t\treturn dispatchToastMessage({ type: 'error', message: t('Message_Already_Sent') });\n\t\t}\n\t\tconst user = Meteor.user() as IUser | null;\n\t\tif (!user?.username) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'sendMessage' });\n\t\t}\n\t\tmessage.ts = new Date();\n\t\tmessage.u = {\n\t\t\t_id: uid,\n\t\t\tusername: user.username,\n\t\t\tname: user.name || '',\n\t\t};\n\t\tmessage.temp = true;\n\t\tif (settings.get('Message_Read_Receipt_Enabled')) {\n\t\t\tmessage.unread = true;\n\t\t}\n\n\t\t// If the room is federated, send the message to matrix only\n\t\tconst room = ChatRoom.findOne({ _id: message.rid }, { fields: { federated: 1, name: 1 } });\n\t\tif (room?.federated) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait onClientMessageReceived(message as IMessage).then((message) => {\n\t\t\tChatMessage.insert(message);\n\t\t\treturn callbacks.run('afterSaveMessage', message, { room });\n\t\t});\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"16a34a2f7437e2a2767afa2add1aed7a98382ac5"}
