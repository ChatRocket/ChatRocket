{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/receiver/RoomServiceReceiver.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/application/room/receiver/RoomServiceReceiver.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/receiver/RoomServiceReceiver.ts","inputSourceMap":{"version":3,"file":"server/services/federation/application/room/receiver/RoomServiceReceiver.ts","sourceRoot":"","sources":["server/services/federation/application/room/receiver/RoomServiceReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: Refactor this file splitting it into smaller files + removing the complexity of the most important method (changeMembership)\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport { isDirectMessageRoom, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { EVENT_ORIGIN } from '../../../domain/IFederationBridge';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { removeExternalSpecificCharsFromExternalIdentifier } from '../../../infrastructure/matrix/converters/room/RoomReceiver';\nimport type { InMemoryQueue } from '../../../infrastructure/queue/InMemoryQueue';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationRoomCreateInputDto,\n\tFederationRoomChangeMembershipDto,\n\tFederationRoomReceiveExternalMessageDto,\n\tFederationRoomChangeJoinRulesDto,\n\tFederationRoomChangeNameDto,\n\tFederationRoomChangeTopicDto,\n\tFederationRoomReceiveExternalFileMessageDto,\n\tFederationRoomRedactEventDto,\n\tFederationRoomEditExternalMessageDto,\n\tFederationRoomRoomChangePowerLevelsEventDto,\n} from '../input/RoomReceiverDto';\nimport { getMessageRedactionHandler } from '../message/receiver/message-redaction-helper';\n\nexport class FederationRoomServiceReceiver extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected federationQueueInstance: InMemoryQueue,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onCreateRoom(roomCreateInput: FederationRoomCreateInputDto): Promise<void> {\n\t\tconst { externalRoomId, wasInternallyProgramaticallyCreated = false, internalRoomId = '' } = roomCreateInput;\n\t\tif (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!wasInternallyProgramaticallyCreated) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!room || !isDirectMessageRoom(room)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tpublic async onChangeRoomMembership(roomChangeMembershipInput: FederationRoomChangeMembershipDto): Promise<void> {\n\t\tconst {\n\t\t\texternalRoomId,\n\t\t\tnormalizedInviteeId,\n\t\t\tnormalizedRoomId,\n\t\t\tnormalizedInviterId,\n\t\t\texternalInviteeId,\n\t\t\texternalInviterId,\n\t\t\tinviteeUsernameOnly,\n\t\t\tinviterUsernameOnly,\n\t\t\teventOrigin,\n\t\t\troomType,\n\t\t\tleave,\n\t\t\tuserProfile,\n\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\texternalRoomName,\n\t\t\texternalEventId,\n\t\t} = roomChangeMembershipInput;\n\t\tconst wasGeneratedOnTheProxyServer = eventOrigin === EVENT_ORIGIN.LOCAL;\n\t\tconst affectedFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tconst isUserJoiningByHimself = externalInviterId === externalInviteeId && !leave;\n\n\t\tif (userProfile?.avatarUrl) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserAvatarInternally(federatedUser, userProfile?.avatarUrl));\n\t\t}\n\t\tif (userProfile?.displayName) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserDisplayNameInternally(federatedUser, userProfile?.displayName));\n\t\t}\n\n\t\tif (wasGeneratedOnTheProxyServer && !isUserJoiningByHimself && !affectedFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviterId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst inviterUsername = isInviterFromTheSameHomeServer ? inviterUsernameOnly : normalizedInviterId;\n\t\tconst inviteeUsername = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, inviterUsername, isInviterFromTheSameHomeServer);\n\t\t}\n\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviteeId, inviteeUsername, isInviteeFromTheSameHomeServer);\n\t\t}\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId));\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId));\n\n\t\tif (!federatedInviteeUser || !federatedInviterUser) {\n\t\t\tthrow new Error('Invitee or inviter user not found');\n\t\t}\n\n\t\tif (isUserJoiningByHimself) {\n\t\t\tawait this.whenUserIsJoiningByHimself(externalRoomId, normalizedRoomId, federatedInviterUser, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!wasGeneratedOnTheProxyServer && !affectedFederatedRoom) {\n\t\t\tif (!roomType) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isDirectMessageRoom({ t: roomType })) {\n\t\t\t\tconst wereAllInviteesProvidedByCreationalEventAtOnce = allInviteesExternalIdsWhenDM && allInviteesExternalIdsWhenDM.length > 0;\n\t\t\t\tif (wereAllInviteesProvidedByCreationalEventAtOnce) {\n\t\t\t\t\treturn this.handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\t\t\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\tfederatedInviterUser,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn this.handleDMRoomInviteWhenNotifiedByRegularEventsOnly(federatedInviteeUser, federatedInviterUser, externalRoomId);\n\t\t\t}\n\n\t\t\tconst newFederatedRoom = FederatedRoom.createInstance(externalRoomId, normalizedRoomId, federatedInviterUser, roomType);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t\tif (externalRoomName) {\n\t\t\t\tawait this.onChangeRoomName({\n\t\t\t\t\texternalRoomId,\n\t\t\t\t\tnormalizedRoomName: externalRoomName,\n\t\t\t\t\texternalEventId,\n\t\t\t\t\texternalSenderId: externalInviterId,\n\t\t\t\t\tnormalizedRoomId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst roomHistoricalJoinEvents = await this.bridge.getRoomHistoricalJoinEvents(externalRoomId, externalInviteeId, [\n\t\t\t\texternalInviterId,\n\t\t\t\texternalInviteeId,\n\t\t\t]);\n\t\t\troomHistoricalJoinEvents.forEach((event) => this.federationQueueInstance.addToQueue(event));\n\t\t}\n\n\t\tconst federatedRoom = affectedFederatedRoom || (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId));\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t);\n\t\tif (!leave && inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\treturn;\n\t\t}\n\t\tif (leave) {\n\t\t\tif (!inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.removeUserFromRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\t\treturn;\n\t\t}\n\t\tif (!wasGeneratedOnTheProxyServer && federatedRoom.isDirectMessage()) {\n\t\t\tconst directMessageRoom = federatedRoom as DirectMessageFederatedRoom;\n\t\t\tif (directMessageRoom.isUserPartOfTheRoom(federatedInviteeUser)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdirectMessageRoom.addMember(federatedInviteeUser);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(\n\t\t\t\texternalRoomId,\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tdirectMessageRoom.getMembers(),\n\t\t\t);\n\t\t\tawait this.internalRoomAdapter.removeDirectMessageRoom(federatedRoom);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t}\n\t}\n\n\tprivate async whenUserIsJoiningByHimself(\n\t\texternalRoomId: string,\n\t\tnormalizedRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t\tfederatedInviteeUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t);\n\t\t\tif (inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.addUserToRoom(room, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomData = await this.bridge.getRoomData(federatedInviterUser.getExternalId(), externalRoomId);\n\t\tif (!externalRoomData) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tconst roomCreationProcessIsRunningLocallyAlready =\n\t\t\t!room && creatorUser && federatedInviterUser.getInternalId() === creatorUser.getInternalId();\n\t\tif (roomCreationProcessIsRunningLocallyAlready) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!creatorUser) {\n\t\t\tawait this.createFederatedUserAndReturnIt(externalRoomData.creator.id, externalRoomData.creator.username);\n\t\t}\n\t\tconst federatedCreatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tif (!federatedCreatorUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst isRoomFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst newFederatedRoom = FederatedRoom.createInstance(\n\t\t\texternalRoomId,\n\t\t\tnormalizedRoomId,\n\t\t\tfederatedCreatorUser,\n\t\t\tRoomType.CHANNEL,\n\t\t\tisRoomFromTheSameHomeServer ? externalRoomData.name : undefined,\n\t\t);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\t\tif (!isRoomFromTheSameHomeServer && externalRoomData.name) {\n\t\t\tawait this.onChangeRoomName({\n\t\t\t\texternalRoomId,\n\t\t\t\tnormalizedRoomName: externalRoomData.name,\n\t\t\t\texternalEventId: '',\n\t\t\t\texternalSenderId: federatedCreatorUser.getExternalId(),\n\t\t\t\tnormalizedRoomId,\n\t\t\t});\n\t\t}\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\t// Do not need to await this, this can be done in parallel\n\t\tvoid this.createFederatedUsersForRoomMembers(\n\t\t\tfederatedRoom,\n\t\t\texternalRoomData.joinedMembers,\n\t\t\texternalRoomData.creator.id,\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser);\n\t}\n\n\tprivate async createFederatedUserAndReturnIt(externalUserId: string, externalUsername?: string): Promise<FederatedUser> {\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\tconst isUserFromTheSameHomeserver = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalUserId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst existsOnlyOnProxyServer = isUserFromTheSameHomeserver;\n\t\tconst localUsername = externalUsername || removeExternalSpecificCharsFromExternalIdentifier(externalUserId);\n\t\tconst username = isUserFromTheSameHomeserver ? localUsername : removeExternalSpecificCharsFromExternalIdentifier(externalUserId); // TODO: move these common functions to a proper layer\n\t\tawait this.createFederatedUserInternallyOnly(externalUserId, username, existsOnlyOnProxyServer);\n\n\t\treturn (await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId)) as FederatedUser;\n\t}\n\n\tprivate async createFederatedUsersForRoomMembers(\n\t\tfederatedRoom: FederatedRoom,\n\t\texternalMembersExternalIds: string[],\n\t\tcreatorExternalId: string,\n\t\tmyselfExternalId: string,\n\t): Promise<void> {\n\t\tconst membersExcludingOnesInvolvedInTheCreationProcess = externalMembersExternalIds.filter(\n\t\t\t(externalMemberId) => externalMemberId !== creatorExternalId && externalMemberId !== myselfExternalId,\n\t\t);\n\n\t\tconst federatedUsers = await Promise.all(\n\t\t\tmembersExcludingOnesInvolvedInTheCreationProcess.map((externalMemberId) => this.createFederatedUserAndReturnIt(externalMemberId)),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUsersToRoomWhenJoinExternalPublicRoom(\n\t\t\tfederatedUsers.filter(Boolean) as FederatedUser[],\n\t\t\tfederatedRoom,\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\tallInviteesExternalIds: {\n\t\t\texternalInviteeId: string;\n\t\t\tnormalizedInviteeId: string;\n\t\t\tinviteeUsernameOnly: string;\n\t\t}[],\n\t\texternalRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst allInvitees = await Promise.all(\n\t\t\tallInviteesExternalIds.map(async (dmExternalInviteeId) => {\n\t\t\t\tconst invitee = await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId);\n\t\t\t\tif (!invitee) {\n\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t);\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\t\t? dmExternalInviteeId.inviteeUsernameOnly\n\t\t\t\t\t\t: dmExternalInviteeId.normalizedInviteeId;\n\t\t\t\t\tawait this.createFederatedUserInternallyOnly(\n\t\t\t\t\t\tdmExternalInviteeId.externalInviteeId,\n\t\t\t\t\t\tdmInviteeUsername,\n\t\t\t\t\t\tisDMInviteeFromTheSameHomeServer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (invitee ||\n\t\t\t\t\t(await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId))) as FederatedUser;\n\t\t\t}),\n\t\t);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\tfederatedInviterUser,\n\t\t\t...allInvitees,\n\t\t]);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tallInvitees\n\t\t\t\t.filter((invitee) =>\n\t\t\t\t\tFederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.getExternalId()),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())),\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(\n\t\tfederatedInviteeUser: FederatedUser,\n\t\tfederatedInviterUser: FederatedUser,\n\t\texternalRoomId: string,\n\t): Promise<void> {\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n\n\tpublic async onExternalMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\texternalFormattedText,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalFormattedText,\n\t\t\texternalEventId,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalMessageEditedReceived(roomEditExternalMessageInput: FederationRoomEditExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, editsEvent, newExternalFormattedText, newRawMessage } = roomEditExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(editsEvent);\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: leaked business logic, move this to its proper place\n\t\tconst isAQuotedMessage = message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link));\n\t\tif (isAQuotedMessage) {\n\t\t\tconst wasGeneratedLocally = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(externalSenderId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\tif (wasGeneratedLocally) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst internalFormattedMessageToBeEdited = await this.internalMessageAdapter.getMessageToEditWhenReplyAndQuote(\n\t\t\t\tmessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tnewRawMessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tsenderUser,\n\t\t\t);\n\t\t\t// TODO: create an entity to abstract all the message logic\n\t\t\tif (!FederatedRoom.shouldUpdateMessage(internalFormattedMessageToBeEdited, message)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.editQuotedMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tnewRawMessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tmessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif (!FederatedRoom.shouldUpdateMessage(newRawMessage, message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.editMessage(\n\t\t\tsenderUser,\n\t\t\tnewRawMessage,\n\t\t\tnewExternalFormattedText,\n\t\t\tmessage,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalFileMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId } = roomReceiveExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendFileMessage(senderUser, federatedRoom, files, attachments, externalEventId);\n\t}\n\n\tpublic async onChangeJoinRules(roomJoinRulesChangeInput: FederationRoomChangeJoinRulesDto): Promise<void> {\n\t\tconst { externalRoomId, roomType } = roomJoinRulesChangeInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tif (notAllowedChangeJoinRules) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomType(roomType);\n\t\tawait this.internalRoomAdapter.updateRoomType(federatedRoom);\n\t}\n\n\tpublic async onChangeRoomName(roomChangeNameInput: FederationRoomChangeNameDto): Promise<void> {\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst shouldUseExternalRoomIdAsRoomName = !FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (shouldUseExternalRoomIdAsRoomName && federatedRoom.shouldUpdateRoomName(externalRoomId)) {\n\t\t\tfederatedRoom.changeRoomName(externalRoomId);\n\t\t\tawait this.internalRoomAdapter.updateRoomName(federatedRoom);\n\t\t}\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(normalizedRoomName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeDisplayRoomName(normalizedRoomName);\n\n\t\tawait this.internalRoomAdapter.updateDisplayRoomName(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onChangeRoomTopic(roomChangeTopicInput: FederationRoomChangeTopicDto): Promise<void> {\n\t\tconst { externalRoomId, roomTopic, externalSenderId } = roomChangeTopicInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(roomTopic)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomTopic(roomTopic);\n\n\t\tawait this.internalRoomAdapter.updateRoomTopic(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onRedactEvent(roomRedactEventInput: FederationRoomRedactEventDto): Promise<void> {\n\t\tconst { externalRoomId, redactsEvent, externalSenderId } = roomRedactEventInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst handler = await getMessageRedactionHandler(this.internalMessageAdapter, redactsEvent, federatedUser);\n\t\tif (!handler) {\n\t\t\treturn;\n\t\t}\n\t\tawait handler.handle();\n\t}\n\n\tpublic async onChangeRoomPowerLevels(roomPowerLevelsInput: FederationRoomRoomChangePowerLevelsEventDto): Promise<void> {\n\t\tconst { externalRoomId, roleChangesToApply = {}, externalSenderId } = roomPowerLevelsInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUserWhoChangedThePermission = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUserWhoChangedThePermission) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUsers = await this.internalUserAdapter.getFederatedUsersByExternalIds(Object.keys(roleChangesToApply));\n\n\t\tawait Promise.all(\n\t\t\tfederatedUsers.map((targetFederatedUser) => {\n\t\t\t\tconst changes = roleChangesToApply[targetFederatedUser.getExternalId()];\n\t\t\t\tif (!changes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rolesToRemove = changes.filter((change) => change.action === 'remove').map((change) => change.role);\n\t\t\t\tconst rolesToAdd = changes.filter((change) => change.action === 'add').map((change) => change.role);\n\n\t\t\t\treturn this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\t\t\tfederatedRoom,\n\t\t\t\t\ttargetFederatedUser,\n\t\t\t\t\tfromUser: federatedUserWhoChangedThePermission,\n\t\t\t\t\trolesToAdd,\n\t\t\t\t\trolesToRemove,\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId, thread } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t\texternalFormattedText,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t\texternalFormattedText,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedFileMessageReceived(\n\t\troomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto,\n\t): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId, thread } = roomReceiveExternalMessageInput;\n\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadFileMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\tfiles,\n\t\t\tattachments,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/application/room/receiver/RoomServiceReceiver.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/application/room/receiver/RoomServiceReceiver.ts","inputSourceMap":{"version":3,"file":"server/services/federation/application/room/receiver/RoomServiceReceiver.ts","sourceRoot":"","sources":["server/services/federation/application/room/receiver/RoomServiceReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: Refactor this file splitting it into smaller files + removing the complexity of the most important method (changeMembership)\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport { isDirectMessageRoom, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { EVENT_ORIGIN } from '../../../domain/IFederationBridge';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { removeExternalSpecificCharsFromExternalIdentifier } from '../../../infrastructure/matrix/converters/room/RoomReceiver';\nimport type { InMemoryQueue } from '../../../infrastructure/queue/InMemoryQueue';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationRoomCreateInputDto,\n\tFederationRoomChangeMembershipDto,\n\tFederationRoomReceiveExternalMessageDto,\n\tFederationRoomChangeJoinRulesDto,\n\tFederationRoomChangeNameDto,\n\tFederationRoomChangeTopicDto,\n\tFederationRoomReceiveExternalFileMessageDto,\n\tFederationRoomRedactEventDto,\n\tFederationRoomEditExternalMessageDto,\n\tFederationRoomRoomChangePowerLevelsEventDto,\n} from '../input/RoomReceiverDto';\nimport { getMessageRedactionHandler } from '../message/receiver/message-redaction-helper';\n\nexport class FederationRoomServiceReceiver extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected federationQueueInstance: InMemoryQueue,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onCreateRoom(roomCreateInput: FederationRoomCreateInputDto): Promise<void> {\n\t\tconst { externalRoomId, wasInternallyProgramaticallyCreated = false, internalRoomId = '' } = roomCreateInput;\n\t\tif (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!wasInternallyProgramaticallyCreated) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!room || !isDirectMessageRoom(room)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tpublic async onChangeRoomMembership(roomChangeMembershipInput: FederationRoomChangeMembershipDto): Promise<void> {\n\t\tconst {\n\t\t\texternalRoomId,\n\t\t\tnormalizedInviteeId,\n\t\t\tnormalizedRoomId,\n\t\t\tnormalizedInviterId,\n\t\t\texternalInviteeId,\n\t\t\texternalInviterId,\n\t\t\tinviteeUsernameOnly,\n\t\t\tinviterUsernameOnly,\n\t\t\teventOrigin,\n\t\t\troomType,\n\t\t\tleave,\n\t\t\tuserProfile,\n\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\texternalRoomName,\n\t\t\texternalEventId,\n\t\t} = roomChangeMembershipInput;\n\t\tconst wasGeneratedOnTheProxyServer = eventOrigin === EVENT_ORIGIN.LOCAL;\n\t\tconst affectedFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tconst isUserJoiningByHimself = externalInviterId === externalInviteeId && !leave;\n\n\t\tif (userProfile?.avatarUrl) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserAvatarInternally(federatedUser, userProfile?.avatarUrl));\n\t\t}\n\t\tif (userProfile?.displayName) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserDisplayNameInternally(federatedUser, userProfile?.displayName));\n\t\t}\n\n\t\tif (wasGeneratedOnTheProxyServer && !isUserJoiningByHimself && !affectedFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviterId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst inviterUsername = isInviterFromTheSameHomeServer ? inviterUsernameOnly : normalizedInviterId;\n\t\tconst inviteeUsername = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, inviterUsername, isInviterFromTheSameHomeServer);\n\t\t}\n\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviteeId, inviteeUsername, isInviteeFromTheSameHomeServer);\n\t\t}\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId));\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId));\n\n\t\tif (!federatedInviteeUser || !federatedInviterUser) {\n\t\t\tthrow new Error('Invitee or inviter user not found');\n\t\t}\n\n\t\tif (isUserJoiningByHimself) {\n\t\t\tawait this.whenUserIsJoiningByHimself(externalRoomId, normalizedRoomId, federatedInviterUser, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!wasGeneratedOnTheProxyServer && !affectedFederatedRoom) {\n\t\t\tif (!roomType) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isDirectMessageRoom({ t: roomType })) {\n\t\t\t\tconst wereAllInviteesProvidedByCreationalEventAtOnce = allInviteesExternalIdsWhenDM && allInviteesExternalIdsWhenDM.length > 0;\n\t\t\t\tif (wereAllInviteesProvidedByCreationalEventAtOnce) {\n\t\t\t\t\treturn this.handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\t\t\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\tfederatedInviterUser,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn this.handleDMRoomInviteWhenNotifiedByRegularEventsOnly(federatedInviteeUser, federatedInviterUser, externalRoomId);\n\t\t\t}\n\n\t\t\tconst newFederatedRoom = FederatedRoom.createInstance(externalRoomId, normalizedRoomId, federatedInviterUser, roomType);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t\tif (externalRoomName) {\n\t\t\t\tawait this.onChangeRoomName({\n\t\t\t\t\texternalRoomId,\n\t\t\t\t\tnormalizedRoomName: externalRoomName,\n\t\t\t\t\texternalEventId,\n\t\t\t\t\texternalSenderId: externalInviterId,\n\t\t\t\t\tnormalizedRoomId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst roomHistoricalJoinEvents = await this.bridge.getRoomHistoricalJoinEvents(externalRoomId, externalInviteeId, [\n\t\t\t\texternalInviterId,\n\t\t\t\texternalInviteeId,\n\t\t\t]);\n\t\t\troomHistoricalJoinEvents.forEach((event) => this.federationQueueInstance.addToQueue(event));\n\t\t}\n\n\t\tconst federatedRoom = affectedFederatedRoom || (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId));\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t);\n\t\tif (!leave && inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\treturn;\n\t\t}\n\t\tif (leave) {\n\t\t\tif (!inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.removeUserFromRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\t\treturn;\n\t\t}\n\t\tif (!wasGeneratedOnTheProxyServer && federatedRoom.isDirectMessage()) {\n\t\t\tconst directMessageRoom = federatedRoom as DirectMessageFederatedRoom;\n\t\t\tif (directMessageRoom.isUserPartOfTheRoom(federatedInviteeUser)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdirectMessageRoom.addMember(federatedInviteeUser);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(\n\t\t\t\texternalRoomId,\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tdirectMessageRoom.getMembers(),\n\t\t\t);\n\t\t\tawait this.internalRoomAdapter.removeDirectMessageRoom(federatedRoom);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t}\n\t}\n\n\tprivate async whenUserIsJoiningByHimself(\n\t\texternalRoomId: string,\n\t\tnormalizedRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t\tfederatedInviteeUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t);\n\t\t\tif (inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.addUserToRoom(room, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomData = await this.bridge.getRoomData(federatedInviterUser.getExternalId(), externalRoomId);\n\t\tif (!externalRoomData) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tconst roomCreationProcessIsRunningLocallyAlready =\n\t\t\t!room && creatorUser && federatedInviterUser.getInternalId() === creatorUser.getInternalId();\n\t\tif (roomCreationProcessIsRunningLocallyAlready) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!creatorUser) {\n\t\t\tawait this.createFederatedUserAndReturnIt(externalRoomData.creator.id, externalRoomData.creator.username);\n\t\t}\n\t\tconst federatedCreatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tif (!federatedCreatorUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst isRoomFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst newFederatedRoom = FederatedRoom.createInstance(\n\t\t\texternalRoomId,\n\t\t\tnormalizedRoomId,\n\t\t\tfederatedCreatorUser,\n\t\t\tRoomType.CHANNEL,\n\t\t\tisRoomFromTheSameHomeServer ? externalRoomData.name : undefined,\n\t\t);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\t\tif (!isRoomFromTheSameHomeServer && externalRoomData.name) {\n\t\t\tawait this.onChangeRoomName({\n\t\t\t\texternalRoomId,\n\t\t\t\tnormalizedRoomName: externalRoomData.name,\n\t\t\t\texternalEventId: '',\n\t\t\t\texternalSenderId: federatedCreatorUser.getExternalId(),\n\t\t\t\tnormalizedRoomId,\n\t\t\t});\n\t\t}\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\t// Do not need to await this, this can be done in parallel\n\t\tvoid this.createFederatedUsersForRoomMembers(\n\t\t\tfederatedRoom,\n\t\t\texternalRoomData.joinedMembers,\n\t\t\texternalRoomData.creator.id,\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser);\n\t}\n\n\tprivate async createFederatedUserAndReturnIt(externalUserId: string, externalUsername?: string): Promise<FederatedUser> {\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\tconst isUserFromTheSameHomeserver = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalUserId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst existsOnlyOnProxyServer = isUserFromTheSameHomeserver;\n\t\tconst localUsername = externalUsername || removeExternalSpecificCharsFromExternalIdentifier(externalUserId);\n\t\tconst username = isUserFromTheSameHomeserver ? localUsername : removeExternalSpecificCharsFromExternalIdentifier(externalUserId); // TODO: move these common functions to a proper layer\n\t\tawait this.createFederatedUserInternallyOnly(externalUserId, username, existsOnlyOnProxyServer);\n\n\t\treturn (await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId)) as FederatedUser;\n\t}\n\n\tprivate async createFederatedUsersForRoomMembers(\n\t\tfederatedRoom: FederatedRoom,\n\t\texternalMembersExternalIds: string[],\n\t\tcreatorExternalId: string,\n\t\tmyselfExternalId: string,\n\t): Promise<void> {\n\t\tconst membersExcludingOnesInvolvedInTheCreationProcess = externalMembersExternalIds.filter(\n\t\t\t(externalMemberId) => externalMemberId !== creatorExternalId && externalMemberId !== myselfExternalId,\n\t\t);\n\n\t\tconst federatedUsers = await Promise.all(\n\t\t\tmembersExcludingOnesInvolvedInTheCreationProcess.map((externalMemberId) => this.createFederatedUserAndReturnIt(externalMemberId)),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUsersToRoomWhenJoinExternalPublicRoom(\n\t\t\tfederatedUsers.filter(Boolean) as FederatedUser[],\n\t\t\tfederatedRoom,\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\tallInviteesExternalIds: {\n\t\t\texternalInviteeId: string;\n\t\t\tnormalizedInviteeId: string;\n\t\t\tinviteeUsernameOnly: string;\n\t\t}[],\n\t\texternalRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst allInvitees = await Promise.all(\n\t\t\tallInviteesExternalIds.map(async (dmExternalInviteeId) => {\n\t\t\t\tconst invitee = await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId);\n\t\t\t\tif (!invitee) {\n\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t);\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\t\t? dmExternalInviteeId.inviteeUsernameOnly\n\t\t\t\t\t\t: dmExternalInviteeId.normalizedInviteeId;\n\t\t\t\t\tawait this.createFederatedUserInternallyOnly(\n\t\t\t\t\t\tdmExternalInviteeId.externalInviteeId,\n\t\t\t\t\t\tdmInviteeUsername,\n\t\t\t\t\t\tisDMInviteeFromTheSameHomeServer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (invitee ||\n\t\t\t\t\t(await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId))) as FederatedUser;\n\t\t\t}),\n\t\t);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\tfederatedInviterUser,\n\t\t\t...allInvitees,\n\t\t]);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tallInvitees\n\t\t\t\t.filter((invitee) =>\n\t\t\t\t\tFederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.getExternalId()),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())),\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(\n\t\tfederatedInviteeUser: FederatedUser,\n\t\tfederatedInviterUser: FederatedUser,\n\t\texternalRoomId: string,\n\t): Promise<void> {\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n\n\tpublic async onExternalMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\texternalFormattedText,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalFormattedText,\n\t\t\texternalEventId,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalMessageEditedReceived(roomEditExternalMessageInput: FederationRoomEditExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, editsEvent, newExternalFormattedText, newRawMessage } = roomEditExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(editsEvent);\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: leaked business logic, move this to its proper place\n\t\tconst isAQuotedMessage = message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link));\n\t\tif (isAQuotedMessage) {\n\t\t\tconst wasGeneratedLocally = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(externalSenderId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\tif (wasGeneratedLocally) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst internalFormattedMessageToBeEdited = await this.internalMessageAdapter.getMessageToEditWhenReplyAndQuote(\n\t\t\t\tmessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tnewRawMessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tsenderUser,\n\t\t\t);\n\t\t\t// TODO: create an entity to abstract all the message logic\n\t\t\tif (!FederatedRoom.shouldUpdateMessage(internalFormattedMessageToBeEdited, message)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.editQuotedMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tnewRawMessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tmessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif (!FederatedRoom.shouldUpdateMessage(newRawMessage, message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.editMessage(\n\t\t\tsenderUser,\n\t\t\tnewRawMessage,\n\t\t\tnewExternalFormattedText,\n\t\t\tmessage,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalFileMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId } = roomReceiveExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendFileMessage(senderUser, federatedRoom, files, attachments, externalEventId);\n\t}\n\n\tpublic async onChangeJoinRules(roomJoinRulesChangeInput: FederationRoomChangeJoinRulesDto): Promise<void> {\n\t\tconst { externalRoomId, roomType } = roomJoinRulesChangeInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tif (notAllowedChangeJoinRules) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomType(roomType);\n\t\tawait this.internalRoomAdapter.updateRoomType(federatedRoom);\n\t}\n\n\tpublic async onChangeRoomName(roomChangeNameInput: FederationRoomChangeNameDto): Promise<void> {\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst shouldUseExternalRoomIdAsRoomName = !FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (shouldUseExternalRoomIdAsRoomName && federatedRoom.shouldUpdateRoomName(externalRoomId)) {\n\t\t\tfederatedRoom.changeRoomName(externalRoomId);\n\t\t\tawait this.internalRoomAdapter.updateRoomName(federatedRoom);\n\t\t}\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(normalizedRoomName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeDisplayRoomName(normalizedRoomName);\n\n\t\tawait this.internalRoomAdapter.updateDisplayRoomName(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onChangeRoomTopic(roomChangeTopicInput: FederationRoomChangeTopicDto): Promise<void> {\n\t\tconst { externalRoomId, roomTopic, externalSenderId } = roomChangeTopicInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(roomTopic)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomTopic(roomTopic);\n\n\t\tawait this.internalRoomAdapter.updateRoomTopic(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onRedactEvent(roomRedactEventInput: FederationRoomRedactEventDto): Promise<void> {\n\t\tconst { externalRoomId, redactsEvent, externalSenderId } = roomRedactEventInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst handler = await getMessageRedactionHandler(this.internalMessageAdapter, redactsEvent, federatedUser);\n\t\tif (!handler) {\n\t\t\treturn;\n\t\t}\n\t\tawait handler.handle();\n\t}\n\n\tpublic async onChangeRoomPowerLevels(roomPowerLevelsInput: FederationRoomRoomChangePowerLevelsEventDto): Promise<void> {\n\t\tconst { externalRoomId, roleChangesToApply = {}, externalSenderId } = roomPowerLevelsInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUserWhoChangedThePermission = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUserWhoChangedThePermission) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUsers = await this.internalUserAdapter.getFederatedUsersByExternalIds(Object.keys(roleChangesToApply));\n\n\t\tawait Promise.all(\n\t\t\tfederatedUsers.map((targetFederatedUser) => {\n\t\t\t\tconst changes = roleChangesToApply[targetFederatedUser.getExternalId()];\n\t\t\t\tif (!changes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rolesToRemove = changes.filter((change) => change.action === 'remove').map((change) => change.role);\n\t\t\t\tconst rolesToAdd = changes.filter((change) => change.action === 'add').map((change) => change.role);\n\n\t\t\t\treturn this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\t\t\tfederatedRoom,\n\t\t\t\t\ttargetFederatedUser,\n\t\t\t\t\tfromUser: federatedUserWhoChangedThePermission,\n\t\t\t\t\trolesToAdd,\n\t\t\t\t\trolesToRemove,\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId, thread } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t\texternalFormattedText,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t\texternalFormattedText,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedFileMessageReceived(\n\t\troomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto,\n\t): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId, thread } = roomReceiveExternalMessageInput;\n\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadFileMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\tfiles,\n\t\t\tattachments,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      FederationRoomServiceReceiver: () => FederationRoomServiceReceiver\n    });\n    let RoomType;\n    module.link(\"@rocket.chat/apps-engine/definition/rooms\", {\n      RoomType(v) {\n        RoomType = v;\n      }\n    }, 0);\n    let isDirectMessageRoom, isQuoteAttachment;\n    module.link(\"@rocket.chat/core-typings\", {\n      isDirectMessageRoom(v) {\n        isDirectMessageRoom = v;\n      },\n      isQuoteAttachment(v) {\n        isQuoteAttachment = v;\n      }\n    }, 1);\n    let DirectMessageFederatedRoom, FederatedRoom;\n    module.link(\"../../../domain/FederatedRoom\", {\n      DirectMessageFederatedRoom(v) {\n        DirectMessageFederatedRoom = v;\n      },\n      FederatedRoom(v) {\n        FederatedRoom = v;\n      }\n    }, 2);\n    let FederatedUser;\n    module.link(\"../../../domain/FederatedUser\", {\n      FederatedUser(v) {\n        FederatedUser = v;\n      }\n    }, 3);\n    let EVENT_ORIGIN;\n    module.link(\"../../../domain/IFederationBridge\", {\n      EVENT_ORIGIN(v) {\n        EVENT_ORIGIN = v;\n      }\n    }, 4);\n    let removeExternalSpecificCharsFromExternalIdentifier;\n    module.link(\"../../../infrastructure/matrix/converters/room/RoomReceiver\", {\n      removeExternalSpecificCharsFromExternalIdentifier(v) {\n        removeExternalSpecificCharsFromExternalIdentifier = v;\n      }\n    }, 5);\n    let AbstractFederationApplicationService;\n    module.link(\"../../AbstractFederationApplicationService\", {\n      AbstractFederationApplicationService(v) {\n        AbstractFederationApplicationService = v;\n      }\n    }, 6);\n    let getMessageRedactionHandler;\n    module.link(\"../message/receiver/message-redaction-helper\", {\n      getMessageRedactionHandler(v) {\n        getMessageRedactionHandler = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class FederationRoomServiceReceiver extends AbstractFederationApplicationService {\n      constructor(internalRoomAdapter, internalUserAdapter, internalMessageAdapter, internalFileAdapter, internalSettingsAdapter, internalNotificationAdapter, federationQueueInstance, bridge) {\n        super(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n        this.internalRoomAdapter = void 0;\n        this.internalUserAdapter = void 0;\n        this.internalMessageAdapter = void 0;\n        this.internalFileAdapter = void 0;\n        this.internalSettingsAdapter = void 0;\n        this.internalNotificationAdapter = void 0;\n        this.federationQueueInstance = void 0;\n        this.bridge = void 0;\n        this.internalRoomAdapter = internalRoomAdapter;\n        this.internalUserAdapter = internalUserAdapter;\n        this.internalMessageAdapter = internalMessageAdapter;\n        this.internalFileAdapter = internalFileAdapter;\n        this.internalSettingsAdapter = internalSettingsAdapter;\n        this.internalNotificationAdapter = internalNotificationAdapter;\n        this.federationQueueInstance = federationQueueInstance;\n        this.bridge = bridge;\n      }\n      async onCreateRoom(roomCreateInput) {\n        const {\n          externalRoomId,\n          wasInternallyProgramaticallyCreated = false,\n          internalRoomId = ''\n        } = roomCreateInput;\n        if (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId)) {\n          return;\n        }\n        if (!wasInternallyProgramaticallyCreated) {\n          return;\n        }\n        const room = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n        if (!room || !isDirectMessageRoom(room)) {\n          return;\n        }\n        await this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n      }\n      async onChangeRoomMembership(roomChangeMembershipInput) {\n        const {\n          externalRoomId,\n          normalizedInviteeId,\n          normalizedRoomId,\n          normalizedInviterId,\n          externalInviteeId,\n          externalInviterId,\n          inviteeUsernameOnly,\n          inviterUsernameOnly,\n          eventOrigin,\n          roomType,\n          leave,\n          userProfile,\n          allInviteesExternalIdsWhenDM,\n          externalRoomName,\n          externalEventId\n        } = roomChangeMembershipInput;\n        const wasGeneratedOnTheProxyServer = eventOrigin === EVENT_ORIGIN.LOCAL;\n        const affectedFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        const isUserJoiningByHimself = externalInviterId === externalInviteeId && !leave;\n        if (userProfile !== null && userProfile !== void 0 && userProfile.avatarUrl) {\n          const federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n          federatedUser && (await this.updateUserAvatarInternally(federatedUser, userProfile === null || userProfile === void 0 ? void 0 : userProfile.avatarUrl));\n        }\n        if (userProfile !== null && userProfile !== void 0 && userProfile.displayName) {\n          const federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n          federatedUser && (await this.updateUserDisplayNameInternally(federatedUser, userProfile === null || userProfile === void 0 ? void 0 : userProfile.displayName));\n        }\n        if (wasGeneratedOnTheProxyServer && !isUserJoiningByHimself && !affectedFederatedRoom) {\n          return;\n        }\n        const isInviterFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalInviterId), this.internalHomeServerDomain);\n        const isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalInviteeId), this.internalHomeServerDomain);\n        const inviterUsername = isInviterFromTheSameHomeServer ? inviterUsernameOnly : normalizedInviterId;\n        const inviteeUsername = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n        const inviterUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId);\n        if (!inviterUser) {\n          await this.createFederatedUserInternallyOnly(externalInviterId, inviterUsername, isInviterFromTheSameHomeServer);\n        }\n        const inviteeUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n        if (!inviteeUser) {\n          await this.createFederatedUserInternallyOnly(externalInviteeId, inviteeUsername, isInviteeFromTheSameHomeServer);\n        }\n        const federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId));\n        const federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId));\n        if (!federatedInviteeUser || !federatedInviterUser) {\n          throw new Error('Invitee or inviter user not found');\n        }\n        if (isUserJoiningByHimself) {\n          await this.whenUserIsJoiningByHimself(externalRoomId, normalizedRoomId, federatedInviterUser, federatedInviteeUser);\n          return;\n        }\n        if (!wasGeneratedOnTheProxyServer && !affectedFederatedRoom) {\n          if (!roomType) {\n            return;\n          }\n          if (isDirectMessageRoom({\n            t: roomType\n          })) {\n            const wereAllInviteesProvidedByCreationalEventAtOnce = allInviteesExternalIdsWhenDM && allInviteesExternalIdsWhenDM.length > 0;\n            if (wereAllInviteesProvidedByCreationalEventAtOnce) {\n              return this.handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(allInviteesExternalIdsWhenDM, externalRoomId, federatedInviterUser);\n            }\n            return this.handleDMRoomInviteWhenNotifiedByRegularEventsOnly(federatedInviteeUser, federatedInviterUser, externalRoomId);\n          }\n          const newFederatedRoom = FederatedRoom.createInstance(externalRoomId, normalizedRoomId, federatedInviterUser, roomType);\n          const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n          await this.bridge.joinRoom(externalRoomId, externalInviteeId);\n          if (externalRoomName) {\n            await this.onChangeRoomName({\n              externalRoomId,\n              normalizedRoomName: externalRoomName,\n              externalEventId,\n              externalSenderId: externalInviterId,\n              normalizedRoomId\n            });\n          }\n          await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n          const roomHistoricalJoinEvents = await this.bridge.getRoomHistoricalJoinEvents(externalRoomId, externalInviteeId, [externalInviterId, externalInviteeId]);\n          roomHistoricalJoinEvents.forEach(event => this.federationQueueInstance.addToQueue(event));\n        }\n        const federatedRoom = affectedFederatedRoom || (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId));\n        if (!federatedRoom) {\n          return;\n        }\n        const inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(federatedRoom.getInternalId(), federatedInviteeUser.getInternalId());\n        if (!leave && inviteeAlreadyJoinedTheInternalRoom) {\n          return;\n        }\n        if (leave) {\n          if (!inviteeAlreadyJoinedTheInternalRoom) {\n            return;\n          }\n          await this.internalRoomAdapter.removeUserFromRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n          return;\n        }\n        if (!wasGeneratedOnTheProxyServer && federatedRoom.isDirectMessage()) {\n          const directMessageRoom = federatedRoom;\n          if (directMessageRoom.isUserPartOfTheRoom(federatedInviteeUser)) {\n            return;\n          }\n          directMessageRoom.addMember(federatedInviteeUser);\n          const newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, directMessageRoom.getMembers());\n          await this.internalRoomAdapter.removeDirectMessageRoom(federatedRoom);\n          const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n          await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n          return;\n        }\n        await this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n        if (isInviteeFromTheSameHomeServer) {\n          await this.bridge.joinRoom(externalRoomId, externalInviteeId);\n        }\n      }\n      async whenUserIsJoiningByHimself(externalRoomId, normalizedRoomId, federatedInviterUser, federatedInviteeUser) {\n        const room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (room) {\n          await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(room.getInternalId(), this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n          const inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(room.getInternalId(), federatedInviteeUser.getInternalId());\n          if (inviteeAlreadyJoinedTheInternalRoom) {\n            return;\n          }\n          await this.internalRoomAdapter.addUserToRoom(room, federatedInviteeUser);\n          return;\n        }\n        const externalRoomData = await this.bridge.getRoomData(federatedInviterUser.getExternalId(), externalRoomId);\n        if (!externalRoomData) {\n          return;\n        }\n        const creatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n        const roomCreationProcessIsRunningLocallyAlready = !room && creatorUser && federatedInviterUser.getInternalId() === creatorUser.getInternalId();\n        if (roomCreationProcessIsRunningLocallyAlready) {\n          return;\n        }\n        if (!creatorUser) {\n          await this.createFederatedUserAndReturnIt(externalRoomData.creator.id, externalRoomData.creator.username);\n        }\n        const federatedCreatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n        if (!federatedCreatorUser) {\n          return;\n        }\n        const isRoomFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalRoomId), this.internalHomeServerDomain);\n        const newFederatedRoom = FederatedRoom.createInstance(externalRoomId, normalizedRoomId, federatedCreatorUser, RoomType.CHANNEL, isRoomFromTheSameHomeServer ? externalRoomData.name : undefined);\n        const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n        if (!isRoomFromTheSameHomeServer && externalRoomData.name) {\n          await this.onChangeRoomName({\n            externalRoomId,\n            normalizedRoomName: externalRoomData.name,\n            externalEventId: '',\n            externalSenderId: federatedCreatorUser.getExternalId(),\n            normalizedRoomId\n          });\n        }\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        // Do not need to await this, this can be done in parallel\n        void this.createFederatedUsersForRoomMembers(federatedRoom, externalRoomData.joinedMembers, externalRoomData.creator.id, federatedInviteeUser.getExternalId());\n        await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n        await this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser);\n      }\n      async createFederatedUserAndReturnIt(externalUserId, externalUsername) {\n        const user = await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId);\n        if (user) {\n          return user;\n        }\n        const isUserFromTheSameHomeserver = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalUserId), this.internalHomeServerDomain);\n        const existsOnlyOnProxyServer = isUserFromTheSameHomeserver;\n        const localUsername = externalUsername || removeExternalSpecificCharsFromExternalIdentifier(externalUserId);\n        const username = isUserFromTheSameHomeserver ? localUsername : removeExternalSpecificCharsFromExternalIdentifier(externalUserId); // TODO: move these common functions to a proper layer\n        await this.createFederatedUserInternallyOnly(externalUserId, username, existsOnlyOnProxyServer);\n        return await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId);\n      }\n      async createFederatedUsersForRoomMembers(federatedRoom, externalMembersExternalIds, creatorExternalId, myselfExternalId) {\n        const membersExcludingOnesInvolvedInTheCreationProcess = externalMembersExternalIds.filter(externalMemberId => externalMemberId !== creatorExternalId && externalMemberId !== myselfExternalId);\n        const federatedUsers = await Promise.all(membersExcludingOnesInvolvedInTheCreationProcess.map(externalMemberId => this.createFederatedUserAndReturnIt(externalMemberId)));\n        await this.internalRoomAdapter.addUsersToRoomWhenJoinExternalPublicRoom(federatedUsers.filter(Boolean), federatedRoom);\n      }\n      async handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(allInviteesExternalIds, externalRoomId, federatedInviterUser) {\n        const allInvitees = await Promise.all(allInviteesExternalIds.map(async dmExternalInviteeId => {\n          const invitee = await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId);\n          if (!invitee) {\n            const isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId), this.internalHomeServerDomain);\n            const dmInviteeUsername = isDMInviteeFromTheSameHomeServer ? dmExternalInviteeId.inviteeUsernameOnly : dmExternalInviteeId.normalizedInviteeId;\n            await this.createFederatedUserInternallyOnly(dmExternalInviteeId.externalInviteeId, dmInviteeUsername, isDMInviteeFromTheSameHomeServer);\n          }\n          return invitee || (await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId));\n        }));\n        const newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [federatedInviterUser, ...allInvitees]);\n        const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n        await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n        await Promise.all(allInvitees.filter(invitee => FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(invitee.getExternalId()), this.internalHomeServerDomain)).map(invitee => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())));\n      }\n      async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(federatedInviteeUser, federatedInviterUser, externalRoomId) {\n        const members = [federatedInviterUser, federatedInviteeUser];\n        const newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n        const createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n        const isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()), this.internalHomeServerDomain);\n        await this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(createdInternalRoomId, this.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter));\n        if (isInviteeFromTheSameHomeServer) {\n          await this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n        }\n      }\n      async onExternalMessageReceived(roomReceiveExternalMessageInput) {\n        const {\n          externalRoomId,\n          externalSenderId,\n          rawMessage,\n          externalFormattedText,\n          externalEventId,\n          replyToEventId\n        } = roomReceiveExternalMessageInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!senderUser) {\n          return;\n        }\n        const message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n        if (message) {\n          return;\n        }\n        if (replyToEventId) {\n          const messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n          if (!messageToReplyTo) {\n            return;\n          }\n          await this.internalMessageAdapter.sendQuoteMessage(senderUser, federatedRoom, externalFormattedText, rawMessage, externalEventId, messageToReplyTo, this.internalHomeServerDomain);\n          return;\n        }\n        await this.internalMessageAdapter.sendMessage(senderUser, federatedRoom, rawMessage, externalFormattedText, externalEventId, this.internalHomeServerDomain);\n      }\n      async onExternalMessageEditedReceived(roomEditExternalMessageInput) {\n        var _message$attachments;\n        const {\n          externalRoomId,\n          externalSenderId,\n          editsEvent,\n          newExternalFormattedText,\n          newRawMessage\n        } = roomEditExternalMessageInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!senderUser) {\n          return;\n        }\n        const message = await this.internalMessageAdapter.getMessageByFederationId(editsEvent);\n        if (!message) {\n          return;\n        }\n        // TODO: leaked business logic, move this to its proper place\n        const isAQuotedMessage = (_message$attachments = message.attachments) === null || _message$attachments === void 0 ? void 0 : _message$attachments.some(attachment => isQuoteAttachment(attachment) && Boolean(attachment.message_link));\n        if (isAQuotedMessage) {\n          const wasGeneratedLocally = FederatedUser.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalSenderId), this.internalHomeServerDomain);\n          if (wasGeneratedLocally) {\n            return;\n          }\n          const internalFormattedMessageToBeEdited = await this.internalMessageAdapter.getMessageToEditWhenReplyAndQuote(message, newExternalFormattedText, newRawMessage, this.internalHomeServerDomain, senderUser);\n          // TODO: create an entity to abstract all the message logic\n          if (!FederatedRoom.shouldUpdateMessage(internalFormattedMessageToBeEdited, message)) {\n            return;\n          }\n          await this.internalMessageAdapter.editQuotedMessage(senderUser, newRawMessage, newExternalFormattedText, message, this.internalHomeServerDomain);\n          return;\n        }\n        if (!FederatedRoom.shouldUpdateMessage(newRawMessage, message)) {\n          return;\n        }\n        await this.internalMessageAdapter.editMessage(senderUser, newRawMessage, newExternalFormattedText, message, this.internalHomeServerDomain);\n      }\n      async onExternalFileMessageReceived(roomReceiveExternalMessageInput) {\n        const {\n          externalRoomId,\n          externalSenderId,\n          messageBody,\n          externalEventId,\n          replyToEventId\n        } = roomReceiveExternalMessageInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!senderUser) {\n          return;\n        }\n        const message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n        if (message) {\n          return;\n        }\n        const fileDetails = {\n          name: messageBody.filename,\n          size: messageBody.size,\n          type: messageBody.mimetype,\n          rid: federatedRoom.getInternalId(),\n          userId: senderUser.getInternalId()\n        };\n        const readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n        const {\n          files = [],\n          attachments\n        } = await this.internalFileAdapter.uploadFile(readableStream, federatedRoom.getInternalId(), senderUser.getInternalReference(), fileDetails);\n        if (replyToEventId) {\n          const messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n          if (!messageToReplyTo) {\n            return;\n          }\n          await this.internalMessageAdapter.sendQuoteFileMessage(senderUser, federatedRoom, files, attachments, externalEventId, messageToReplyTo, this.internalHomeServerDomain);\n          return;\n        }\n        await this.internalMessageAdapter.sendFileMessage(senderUser, federatedRoom, files, attachments, externalEventId);\n      }\n      async onChangeJoinRules(roomJoinRulesChangeInput) {\n        const {\n          externalRoomId,\n          roomType\n        } = roomJoinRulesChangeInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n        if (notAllowedChangeJoinRules) {\n          return;\n        }\n        federatedRoom.changeRoomType(roomType);\n        await this.internalRoomAdapter.updateRoomType(federatedRoom);\n      }\n      async onChangeRoomName(roomChangeNameInput) {\n        const {\n          externalRoomId,\n          normalizedRoomName,\n          externalSenderId\n        } = roomChangeNameInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!federatedUser) {\n          return;\n        }\n        const shouldUseExternalRoomIdAsRoomName = !FederatedRoom.isOriginalFromTheProxyServer(this.bridge.extractHomeserverOrigin(externalRoomId), this.internalHomeServerDomain);\n        if (shouldUseExternalRoomIdAsRoomName && federatedRoom.shouldUpdateRoomName(externalRoomId)) {\n          federatedRoom.changeRoomName(externalRoomId);\n          await this.internalRoomAdapter.updateRoomName(federatedRoom);\n        }\n        if (!federatedRoom.shouldUpdateDisplayRoomName(normalizedRoomName)) {\n          return;\n        }\n        federatedRoom.changeDisplayRoomName(normalizedRoomName);\n        await this.internalRoomAdapter.updateDisplayRoomName(federatedRoom, federatedUser);\n      }\n      async onChangeRoomTopic(roomChangeTopicInput) {\n        const {\n          externalRoomId,\n          roomTopic,\n          externalSenderId\n        } = roomChangeTopicInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        if (!federatedRoom.shouldUpdateRoomTopic(roomTopic)) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!federatedUser) {\n          return;\n        }\n        federatedRoom.changeRoomTopic(roomTopic);\n        await this.internalRoomAdapter.updateRoomTopic(federatedRoom, federatedUser);\n      }\n      async onRedactEvent(roomRedactEventInput) {\n        const {\n          externalRoomId,\n          redactsEvent,\n          externalSenderId\n        } = roomRedactEventInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!federatedUser) {\n          return;\n        }\n        const handler = await getMessageRedactionHandler(this.internalMessageAdapter, redactsEvent, federatedUser);\n        if (!handler) {\n          return;\n        }\n        await handler.handle();\n      }\n      async onChangeRoomPowerLevels(roomPowerLevelsInput) {\n        const {\n          externalRoomId,\n          roleChangesToApply = {},\n          externalSenderId\n        } = roomPowerLevelsInput;\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const federatedUserWhoChangedThePermission = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!federatedUserWhoChangedThePermission) {\n          return;\n        }\n        const federatedUsers = await this.internalUserAdapter.getFederatedUsersByExternalIds(Object.keys(roleChangesToApply));\n        await Promise.all(federatedUsers.map(targetFederatedUser => {\n          const changes = roleChangesToApply[targetFederatedUser.getExternalId()];\n          if (!changes) {\n            return;\n          }\n          const rolesToRemove = changes.filter(change => change.action === 'remove').map(change => change.role);\n          const rolesToAdd = changes.filter(change => change.action === 'add').map(change => change.role);\n          return this.internalRoomAdapter.applyRoomRolesToUser({\n            federatedRoom,\n            targetFederatedUser,\n            fromUser: federatedUserWhoChangedThePermission,\n            rolesToAdd,\n            rolesToRemove,\n            notifyChannel: true\n          });\n        }));\n      }\n      async onExternalThreadedMessageReceived(roomReceiveExternalMessageInput) {\n        const {\n          externalRoomId,\n          externalSenderId,\n          rawMessage,\n          externalFormattedText,\n          externalEventId,\n          replyToEventId,\n          thread\n        } = roomReceiveExternalMessageInput;\n        if (!(thread !== null && thread !== void 0 && thread.rootEventId)) {\n          return;\n        }\n        const parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n        if (!parentMessage) {\n          return;\n        }\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!senderUser) {\n          return;\n        }\n        const message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n        if (message) {\n          return;\n        }\n        if (replyToEventId) {\n          const messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n          if (!messageToReplyTo) {\n            return;\n          }\n          await this.internalMessageAdapter.sendThreadQuoteMessage(senderUser, federatedRoom, rawMessage, externalEventId, messageToReplyTo, this.internalHomeServerDomain, parentMessage._id, externalFormattedText);\n          return;\n        }\n        await this.internalMessageAdapter.sendThreadMessage(senderUser, federatedRoom, rawMessage, externalEventId, parentMessage._id, externalFormattedText, this.internalHomeServerDomain);\n      }\n      async onExternalThreadedFileMessageReceived(roomReceiveExternalMessageInput) {\n        const {\n          externalRoomId,\n          externalSenderId,\n          messageBody,\n          externalEventId,\n          replyToEventId,\n          thread\n        } = roomReceiveExternalMessageInput;\n        if (!(thread !== null && thread !== void 0 && thread.rootEventId)) {\n          return;\n        }\n        const parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n        if (!parentMessage) {\n          return;\n        }\n        const federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n        if (!federatedRoom) {\n          return;\n        }\n        const senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n        if (!senderUser) {\n          return;\n        }\n        const message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n        if (message) {\n          return;\n        }\n        const fileDetails = {\n          name: messageBody.filename,\n          size: messageBody.size,\n          type: messageBody.mimetype,\n          rid: federatedRoom.getInternalId(),\n          userId: senderUser.getInternalId()\n        };\n        const readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n        const {\n          files = [],\n          attachments\n        } = await this.internalFileAdapter.uploadFile(readableStream, federatedRoom.getInternalId(), senderUser.getInternalReference(), fileDetails);\n        if (replyToEventId) {\n          const messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n          if (!messageToReplyTo) {\n            return;\n          }\n          await this.internalMessageAdapter.sendThreadQuoteFileMessage(senderUser, federatedRoom, files, attachments, externalEventId, messageToReplyTo, this.internalHomeServerDomain, parentMessage._id);\n          return;\n        }\n        await this.internalMessageAdapter.sendThreadFileMessage(senderUser, federatedRoom, files, attachments, externalEventId, parentMessage._id);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","FederationRoomServiceReceiver","RoomType","link","v","isDirectMessageRoom","isQuoteAttachment","DirectMessageFederatedRoom","FederatedRoom","FederatedUser","EVENT_ORIGIN","removeExternalSpecificCharsFromExternalIdentifier","AbstractFederationApplicationService","getMessageRedactionHandler","__reifyWaitForDeps__","constructor","internalRoomAdapter","internalUserAdapter","internalMessageAdapter","internalFileAdapter","internalSettingsAdapter","internalNotificationAdapter","federationQueueInstance","bridge","onCreateRoom","roomCreateInput","externalRoomId","wasInternallyProgramaticallyCreated","internalRoomId","getFederatedRoomByExternalId","room","getInternalRoomById","updateFederatedRoomByInternalRoomId","onChangeRoomMembership","roomChangeMembershipInput","normalizedInviteeId","normalizedRoomId","normalizedInviterId","externalInviteeId","externalInviterId","inviteeUsernameOnly","inviterUsernameOnly","eventOrigin","roomType","leave","userProfile","allInviteesExternalIdsWhenDM","externalRoomName","externalEventId","wasGeneratedOnTheProxyServer","LOCAL","affectedFederatedRoom","isUserJoiningByHimself","avatarUrl","federatedUser","getFederatedUserByExternalId","updateUserAvatarInternally","displayName","updateUserDisplayNameInternally","isInviterFromTheSameHomeServer","isOriginalFromTheProxyServer","extractHomeserverOrigin","internalHomeServerDomain","isInviteeFromTheSameHomeServer","inviterUsername","inviteeUsername","inviterUser","createFederatedUserInternallyOnly","inviteeUser","federatedInviteeUser","federatedInviterUser","Error","whenUserIsJoiningByHimself","t","wereAllInviteesProvidedByCreationalEventAtOnce","length","handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent","handleDMRoomInviteWhenNotifiedByRegularEventsOnly","newFederatedRoom","createInstance","createdInternalRoomId","createFederatedRoom","joinRoom","onChangeRoomName","normalizedRoomName","externalSenderId","subscribeToUserTypingEventsOnFederatedRoomId","broadcastUserTypingOnRoom","bind","roomHistoricalJoinEvents","getRoomHistoricalJoinEvents","forEach","event","addToQueue","federatedRoom","inviteeAlreadyJoinedTheInternalRoom","isUserAlreadyJoined","getInternalId","removeUserFromRoom","isDirectMessage","directMessageRoom","isUserPartOfTheRoom","addMember","getMembers","removeDirectMessageRoom","createFederatedRoomForDirectMessage","addUserToRoom","externalRoomData","getRoomData","getExternalId","creatorUser","creator","id","roomCreationProcessIsRunningLocallyAlready","createFederatedUserAndReturnIt","username","federatedCreatorUser","isRoomFromTheSameHomeServer","CHANNEL","name","undefined","createFederatedUsersForRoomMembers","joinedMembers","externalUserId","externalUsername","user","isUserFromTheSameHomeserver","existsOnlyOnProxyServer","localUsername","externalMembersExternalIds","creatorExternalId","myselfExternalId","membersExcludingOnesInvolvedInTheCreationProcess","filter","externalMemberId","federatedUsers","Promise","all","map","addUsersToRoomWhenJoinExternalPublicRoom","Boolean","allInviteesExternalIds","allInvitees","dmExternalInviteeId","invitee","isDMInviteeFromTheSameHomeServer","dmInviteeUsername","members","onExternalMessageReceived","roomReceiveExternalMessageInput","rawMessage","externalFormattedText","replyToEventId","senderUser","message","getMessageByFederationId","messageToReplyTo","sendQuoteMessage","sendMessage","onExternalMessageEditedReceived","roomEditExternalMessageInput","_message$attachments","editsEvent","newExternalFormattedText","newRawMessage","isAQuotedMessage","attachments","some","attachment","message_link","wasGeneratedLocally","internalFormattedMessageToBeEdited","getMessageToEditWhenReplyAndQuote","shouldUpdateMessage","editQuotedMessage","editMessage","onExternalFileMessageReceived","messageBody","fileDetails","filename","size","type","mimetype","rid","userId","readableStream","getReadStreamForFileFromUrl","url","files","uploadFile","getInternalReference","sendQuoteFileMessage","sendFileMessage","onChangeJoinRules","roomJoinRulesChangeInput","notAllowedChangeJoinRules","changeRoomType","updateRoomType","roomChangeNameInput","shouldUseExternalRoomIdAsRoomName","shouldUpdateRoomName","changeRoomName","updateRoomName","shouldUpdateDisplayRoomName","changeDisplayRoomName","updateDisplayRoomName","onChangeRoomTopic","roomChangeTopicInput","roomTopic","shouldUpdateRoomTopic","changeRoomTopic","updateRoomTopic","onRedactEvent","roomRedactEventInput","redactsEvent","handler","handle","onChangeRoomPowerLevels","roomPowerLevelsInput","roleChangesToApply","federatedUserWhoChangedThePermission","getFederatedUsersByExternalIds","Object","keys","targetFederatedUser","changes","rolesToRemove","change","action","role","rolesToAdd","applyRoomRolesToUser","fromUser","notifyChannel","onExternalThreadedMessageReceived","thread","rootEventId","parentMessage","sendThreadQuoteMessage","_id","sendThreadMessage","onExternalThreadedFileMessageReceived","sendThreadQuoteFileMessage","sendThreadFileMessage","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/application/room/receiver/RoomServiceReceiver.ts"],"sourcesContent":["// TODO: Refactor this file splitting it into smaller files + removing the complexity of the most important method (changeMembership)\nimport { RoomType } from '@rocket.chat/apps-engine/definition/rooms';\nimport { isDirectMessageRoom, isQuoteAttachment } from '@rocket.chat/core-typings';\n\nimport { DirectMessageFederatedRoom, FederatedRoom } from '../../../domain/FederatedRoom';\nimport { FederatedUser } from '../../../domain/FederatedUser';\nimport { EVENT_ORIGIN } from '../../../domain/IFederationBridge';\nimport type { IFederationBridge } from '../../../domain/IFederationBridge';\nimport { removeExternalSpecificCharsFromExternalIdentifier } from '../../../infrastructure/matrix/converters/room/RoomReceiver';\nimport type { InMemoryQueue } from '../../../infrastructure/queue/InMemoryQueue';\nimport type { RocketChatFileAdapter } from '../../../infrastructure/rocket-chat/adapters/File';\nimport type { RocketChatMessageAdapter } from '../../../infrastructure/rocket-chat/adapters/Message';\nimport type { RocketChatNotificationAdapter } from '../../../infrastructure/rocket-chat/adapters/Notification';\nimport type { RocketChatRoomAdapter } from '../../../infrastructure/rocket-chat/adapters/Room';\nimport type { RocketChatSettingsAdapter } from '../../../infrastructure/rocket-chat/adapters/Settings';\nimport type { RocketChatUserAdapter } from '../../../infrastructure/rocket-chat/adapters/User';\nimport { AbstractFederationApplicationService } from '../../AbstractFederationApplicationService';\nimport type {\n\tFederationRoomCreateInputDto,\n\tFederationRoomChangeMembershipDto,\n\tFederationRoomReceiveExternalMessageDto,\n\tFederationRoomChangeJoinRulesDto,\n\tFederationRoomChangeNameDto,\n\tFederationRoomChangeTopicDto,\n\tFederationRoomReceiveExternalFileMessageDto,\n\tFederationRoomRedactEventDto,\n\tFederationRoomEditExternalMessageDto,\n\tFederationRoomRoomChangePowerLevelsEventDto,\n} from '../input/RoomReceiverDto';\nimport { getMessageRedactionHandler } from '../message/receiver/message-redaction-helper';\n\nexport class FederationRoomServiceReceiver extends AbstractFederationApplicationService {\n\tconstructor(\n\t\tprotected internalRoomAdapter: RocketChatRoomAdapter,\n\t\tprotected internalUserAdapter: RocketChatUserAdapter,\n\t\tprotected internalMessageAdapter: RocketChatMessageAdapter,\n\t\tprotected internalFileAdapter: RocketChatFileAdapter,\n\t\tprotected internalSettingsAdapter: RocketChatSettingsAdapter,\n\t\tprotected internalNotificationAdapter: RocketChatNotificationAdapter,\n\t\tprotected federationQueueInstance: InMemoryQueue,\n\t\tprotected bridge: IFederationBridge,\n\t) {\n\t\tsuper(bridge, internalUserAdapter, internalFileAdapter, internalSettingsAdapter);\n\t}\n\n\tpublic async onCreateRoom(roomCreateInput: FederationRoomCreateInputDto): Promise<void> {\n\t\tconst { externalRoomId, wasInternallyProgramaticallyCreated = false, internalRoomId = '' } = roomCreateInput;\n\t\tif (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId)) {\n\t\t\treturn;\n\t\t}\n\t\tif (!wasInternallyProgramaticallyCreated) {\n\t\t\treturn;\n\t\t}\n\t\tconst room = await this.internalRoomAdapter.getInternalRoomById(internalRoomId);\n\t\tif (!room || !isDirectMessageRoom(room)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.updateFederatedRoomByInternalRoomId(internalRoomId, externalRoomId);\n\t}\n\n\tpublic async onChangeRoomMembership(roomChangeMembershipInput: FederationRoomChangeMembershipDto): Promise<void> {\n\t\tconst {\n\t\t\texternalRoomId,\n\t\t\tnormalizedInviteeId,\n\t\t\tnormalizedRoomId,\n\t\t\tnormalizedInviterId,\n\t\t\texternalInviteeId,\n\t\t\texternalInviterId,\n\t\t\tinviteeUsernameOnly,\n\t\t\tinviterUsernameOnly,\n\t\t\teventOrigin,\n\t\t\troomType,\n\t\t\tleave,\n\t\t\tuserProfile,\n\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\texternalRoomName,\n\t\t\texternalEventId,\n\t\t} = roomChangeMembershipInput;\n\t\tconst wasGeneratedOnTheProxyServer = eventOrigin === EVENT_ORIGIN.LOCAL;\n\t\tconst affectedFederatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tconst isUserJoiningByHimself = externalInviterId === externalInviteeId && !leave;\n\n\t\tif (userProfile?.avatarUrl) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserAvatarInternally(federatedUser, userProfile?.avatarUrl));\n\t\t}\n\t\tif (userProfile?.displayName) {\n\t\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\t\tfederatedUser && (await this.updateUserDisplayNameInternally(federatedUser, userProfile?.displayName));\n\t\t}\n\n\t\tif (wasGeneratedOnTheProxyServer && !isUserJoiningByHimself && !affectedFederatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isInviterFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviterId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalInviteeId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst inviterUsername = isInviterFromTheSameHomeServer ? inviterUsernameOnly : normalizedInviterId;\n\t\tconst inviteeUsername = isInviteeFromTheSameHomeServer ? inviteeUsernameOnly : normalizedInviteeId;\n\n\t\tconst inviterUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId);\n\t\tif (!inviterUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviterId, inviterUsername, isInviterFromTheSameHomeServer);\n\t\t}\n\n\t\tconst inviteeUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId);\n\t\tif (!inviteeUser) {\n\t\t\tawait this.createFederatedUserInternallyOnly(externalInviteeId, inviteeUsername, isInviteeFromTheSameHomeServer);\n\t\t}\n\t\tconst federatedInviteeUser = inviteeUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviteeId));\n\t\tconst federatedInviterUser = inviterUser || (await this.internalUserAdapter.getFederatedUserByExternalId(externalInviterId));\n\n\t\tif (!federatedInviteeUser || !federatedInviterUser) {\n\t\t\tthrow new Error('Invitee or inviter user not found');\n\t\t}\n\n\t\tif (isUserJoiningByHimself) {\n\t\t\tawait this.whenUserIsJoiningByHimself(externalRoomId, normalizedRoomId, federatedInviterUser, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!wasGeneratedOnTheProxyServer && !affectedFederatedRoom) {\n\t\t\tif (!roomType) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isDirectMessageRoom({ t: roomType })) {\n\t\t\t\tconst wereAllInviteesProvidedByCreationalEventAtOnce = allInviteesExternalIdsWhenDM && allInviteesExternalIdsWhenDM.length > 0;\n\t\t\t\tif (wereAllInviteesProvidedByCreationalEventAtOnce) {\n\t\t\t\t\treturn this.handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\t\t\t\t\tallInviteesExternalIdsWhenDM,\n\t\t\t\t\t\texternalRoomId,\n\t\t\t\t\t\tfederatedInviterUser,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn this.handleDMRoomInviteWhenNotifiedByRegularEventsOnly(federatedInviteeUser, federatedInviterUser, externalRoomId);\n\t\t\t}\n\n\t\t\tconst newFederatedRoom = FederatedRoom.createInstance(externalRoomId, normalizedRoomId, federatedInviterUser, roomType);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t\tif (externalRoomName) {\n\t\t\t\tawait this.onChangeRoomName({\n\t\t\t\t\texternalRoomId,\n\t\t\t\t\tnormalizedRoomName: externalRoomName,\n\t\t\t\t\texternalEventId,\n\t\t\t\t\texternalSenderId: externalInviterId,\n\t\t\t\t\tnormalizedRoomId,\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst roomHistoricalJoinEvents = await this.bridge.getRoomHistoricalJoinEvents(externalRoomId, externalInviteeId, [\n\t\t\t\texternalInviterId,\n\t\t\t\texternalInviteeId,\n\t\t\t]);\n\t\t\troomHistoricalJoinEvents.forEach((event) => this.federationQueueInstance.addToQueue(event));\n\t\t}\n\n\t\tconst federatedRoom = affectedFederatedRoom || (await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId));\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t);\n\t\tif (!leave && inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\treturn;\n\t\t}\n\t\tif (leave) {\n\t\t\tif (!inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.removeUserFromRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\t\treturn;\n\t\t}\n\t\tif (!wasGeneratedOnTheProxyServer && federatedRoom.isDirectMessage()) {\n\t\t\tconst directMessageRoom = federatedRoom as DirectMessageFederatedRoom;\n\t\t\tif (directMessageRoom.isUserPartOfTheRoom(federatedInviteeUser)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdirectMessageRoom.addMember(federatedInviteeUser);\n\t\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(\n\t\t\t\texternalRoomId,\n\t\t\t\tfederatedInviterUser,\n\t\t\t\tdirectMessageRoom.getMembers(),\n\t\t\t);\n\t\t\tawait this.internalRoomAdapter.removeDirectMessageRoom(federatedRoom);\n\t\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\tcreatedInternalRoomId,\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser, federatedInviterUser);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, externalInviteeId);\n\t\t}\n\t}\n\n\tprivate async whenUserIsJoiningByHimself(\n\t\texternalRoomId: string,\n\t\tnormalizedRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t\tfederatedInviteeUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst room = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (room) {\n\t\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t\t);\n\t\t\tconst inviteeAlreadyJoinedTheInternalRoom = await this.internalRoomAdapter.isUserAlreadyJoined(\n\t\t\t\troom.getInternalId(),\n\t\t\t\tfederatedInviteeUser.getInternalId(),\n\t\t\t);\n\t\t\tif (inviteeAlreadyJoinedTheInternalRoom) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalRoomAdapter.addUserToRoom(room, federatedInviteeUser);\n\t\t\treturn;\n\t\t}\n\n\t\tconst externalRoomData = await this.bridge.getRoomData(federatedInviterUser.getExternalId(), externalRoomId);\n\t\tif (!externalRoomData) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tconst roomCreationProcessIsRunningLocallyAlready =\n\t\t\t!room && creatorUser && federatedInviterUser.getInternalId() === creatorUser.getInternalId();\n\t\tif (roomCreationProcessIsRunningLocallyAlready) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!creatorUser) {\n\t\t\tawait this.createFederatedUserAndReturnIt(externalRoomData.creator.id, externalRoomData.creator.username);\n\t\t}\n\t\tconst federatedCreatorUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalRoomData.creator.id);\n\t\tif (!federatedCreatorUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst isRoomFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst newFederatedRoom = FederatedRoom.createInstance(\n\t\t\texternalRoomId,\n\t\t\tnormalizedRoomId,\n\t\t\tfederatedCreatorUser,\n\t\t\tRoomType.CHANNEL,\n\t\t\tisRoomFromTheSameHomeServer ? externalRoomData.name : undefined,\n\t\t);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoom(newFederatedRoom);\n\t\tif (!isRoomFromTheSameHomeServer && externalRoomData.name) {\n\t\t\tawait this.onChangeRoomName({\n\t\t\t\texternalRoomId,\n\t\t\t\tnormalizedRoomName: externalRoomData.name,\n\t\t\t\texternalEventId: '',\n\t\t\t\texternalSenderId: federatedCreatorUser.getExternalId(),\n\t\t\t\tnormalizedRoomId,\n\t\t\t});\n\t\t}\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\t\t// Do not need to await this, this can be done in parallel\n\t\tvoid this.createFederatedUsersForRoomMembers(\n\t\t\tfederatedRoom,\n\t\t\texternalRoomData.joinedMembers,\n\t\t\texternalRoomData.creator.id,\n\t\t\tfederatedInviteeUser.getExternalId(),\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUserToRoom(federatedRoom, federatedInviteeUser);\n\t}\n\n\tprivate async createFederatedUserAndReturnIt(externalUserId: string, externalUsername?: string): Promise<FederatedUser> {\n\t\tconst user = await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId);\n\t\tif (user) {\n\t\t\treturn user;\n\t\t}\n\t\tconst isUserFromTheSameHomeserver = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalUserId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tconst existsOnlyOnProxyServer = isUserFromTheSameHomeserver;\n\t\tconst localUsername = externalUsername || removeExternalSpecificCharsFromExternalIdentifier(externalUserId);\n\t\tconst username = isUserFromTheSameHomeserver ? localUsername : removeExternalSpecificCharsFromExternalIdentifier(externalUserId); // TODO: move these common functions to a proper layer\n\t\tawait this.createFederatedUserInternallyOnly(externalUserId, username, existsOnlyOnProxyServer);\n\n\t\treturn (await this.internalUserAdapter.getFederatedUserByExternalId(externalUserId)) as FederatedUser;\n\t}\n\n\tprivate async createFederatedUsersForRoomMembers(\n\t\tfederatedRoom: FederatedRoom,\n\t\texternalMembersExternalIds: string[],\n\t\tcreatorExternalId: string,\n\t\tmyselfExternalId: string,\n\t): Promise<void> {\n\t\tconst membersExcludingOnesInvolvedInTheCreationProcess = externalMembersExternalIds.filter(\n\t\t\t(externalMemberId) => externalMemberId !== creatorExternalId && externalMemberId !== myselfExternalId,\n\t\t);\n\n\t\tconst federatedUsers = await Promise.all(\n\t\t\tmembersExcludingOnesInvolvedInTheCreationProcess.map((externalMemberId) => this.createFederatedUserAndReturnIt(externalMemberId)),\n\t\t);\n\t\tawait this.internalRoomAdapter.addUsersToRoomWhenJoinExternalPublicRoom(\n\t\t\tfederatedUsers.filter(Boolean) as FederatedUser[],\n\t\t\tfederatedRoom,\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenAllUsersWereBeingProvidedInTheCreationalEvent(\n\t\tallInviteesExternalIds: {\n\t\t\texternalInviteeId: string;\n\t\t\tnormalizedInviteeId: string;\n\t\t\tinviteeUsernameOnly: string;\n\t\t}[],\n\t\texternalRoomId: string,\n\t\tfederatedInviterUser: FederatedUser,\n\t): Promise<void> {\n\t\tconst allInvitees = await Promise.all(\n\t\t\tallInviteesExternalIds.map(async (dmExternalInviteeId) => {\n\t\t\t\tconst invitee = await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId);\n\t\t\t\tif (!invitee) {\n\t\t\t\t\tconst isDMInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(dmExternalInviteeId.externalInviteeId),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t);\n\t\t\t\t\tconst dmInviteeUsername = isDMInviteeFromTheSameHomeServer\n\t\t\t\t\t\t? dmExternalInviteeId.inviteeUsernameOnly\n\t\t\t\t\t\t: dmExternalInviteeId.normalizedInviteeId;\n\t\t\t\t\tawait this.createFederatedUserInternallyOnly(\n\t\t\t\t\t\tdmExternalInviteeId.externalInviteeId,\n\t\t\t\t\t\tdmInviteeUsername,\n\t\t\t\t\t\tisDMInviteeFromTheSameHomeServer,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn (invitee ||\n\t\t\t\t\t(await this.internalUserAdapter.getFederatedUserByExternalId(dmExternalInviteeId.externalInviteeId))) as FederatedUser;\n\t\t\t}),\n\t\t);\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, [\n\t\t\tfederatedInviterUser,\n\t\t\t...allInvitees,\n\t\t]);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tawait Promise.all(\n\t\t\tallInvitees\n\t\t\t\t.filter((invitee) =>\n\t\t\t\t\tFederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\t\t\tthis.bridge.extractHomeserverOrigin(invitee.getExternalId()),\n\t\t\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t.map((invitee) => this.bridge.joinRoom(externalRoomId, invitee.getExternalId())),\n\t\t);\n\t}\n\n\tprivate async handleDMRoomInviteWhenNotifiedByRegularEventsOnly(\n\t\tfederatedInviteeUser: FederatedUser,\n\t\tfederatedInviterUser: FederatedUser,\n\t\texternalRoomId: string,\n\t): Promise<void> {\n\t\tconst members = [federatedInviterUser, federatedInviteeUser];\n\t\tconst newFederatedRoom = DirectMessageFederatedRoom.createInstance(externalRoomId, federatedInviterUser, members);\n\t\tconst createdInternalRoomId = await this.internalRoomAdapter.createFederatedRoomForDirectMessage(newFederatedRoom);\n\t\tconst isInviteeFromTheSameHomeServer = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(federatedInviteeUser.getExternalId()),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tawait this.internalNotificationAdapter.subscribeToUserTypingEventsOnFederatedRoomId(\n\t\t\tcreatedInternalRoomId,\n\t\t\tthis.internalNotificationAdapter.broadcastUserTypingOnRoom.bind(this.internalNotificationAdapter),\n\t\t);\n\t\tif (isInviteeFromTheSameHomeServer) {\n\t\t\tawait this.bridge.joinRoom(externalRoomId, federatedInviteeUser.getExternalId());\n\t\t}\n\t}\n\n\tpublic async onExternalMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\texternalFormattedText,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalFormattedText,\n\t\t\texternalEventId,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalMessageEditedReceived(roomEditExternalMessageInput: FederationRoomEditExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, editsEvent, newExternalFormattedText, newRawMessage } = roomEditExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(editsEvent);\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: leaked business logic, move this to its proper place\n\t\tconst isAQuotedMessage = message.attachments?.some((attachment) => isQuoteAttachment(attachment) && Boolean(attachment.message_link));\n\t\tif (isAQuotedMessage) {\n\t\t\tconst wasGeneratedLocally = FederatedUser.isOriginalFromTheProxyServer(\n\t\t\t\tthis.bridge.extractHomeserverOrigin(externalSenderId),\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\tif (wasGeneratedLocally) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst internalFormattedMessageToBeEdited = await this.internalMessageAdapter.getMessageToEditWhenReplyAndQuote(\n\t\t\t\tmessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tnewRawMessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tsenderUser,\n\t\t\t);\n\t\t\t// TODO: create an entity to abstract all the message logic\n\t\t\tif (!FederatedRoom.shouldUpdateMessage(internalFormattedMessageToBeEdited, message)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.editQuotedMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tnewRawMessage,\n\t\t\t\tnewExternalFormattedText,\n\t\t\t\tmessage,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tif (!FederatedRoom.shouldUpdateMessage(newRawMessage, message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.editMessage(\n\t\t\tsenderUser,\n\t\t\tnewRawMessage,\n\t\t\tnewExternalFormattedText,\n\t\t\tmessage,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalFileMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId } = roomReceiveExternalMessageInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendFileMessage(senderUser, federatedRoom, files, attachments, externalEventId);\n\t}\n\n\tpublic async onChangeJoinRules(roomJoinRulesChangeInput: FederationRoomChangeJoinRulesDto): Promise<void> {\n\t\tconst { externalRoomId, roomType } = roomJoinRulesChangeInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst notAllowedChangeJoinRules = federatedRoom.isDirectMessage();\n\t\tif (notAllowedChangeJoinRules) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomType(roomType);\n\t\tawait this.internalRoomAdapter.updateRoomType(federatedRoom);\n\t}\n\n\tpublic async onChangeRoomName(roomChangeNameInput: FederationRoomChangeNameDto): Promise<void> {\n\t\tconst { externalRoomId, normalizedRoomName, externalSenderId } = roomChangeNameInput;\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst shouldUseExternalRoomIdAsRoomName = !FederatedRoom.isOriginalFromTheProxyServer(\n\t\t\tthis.bridge.extractHomeserverOrigin(externalRoomId),\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t\tif (shouldUseExternalRoomIdAsRoomName && federatedRoom.shouldUpdateRoomName(externalRoomId)) {\n\t\t\tfederatedRoom.changeRoomName(externalRoomId);\n\t\t\tawait this.internalRoomAdapter.updateRoomName(federatedRoom);\n\t\t}\n\t\tif (!federatedRoom.shouldUpdateDisplayRoomName(normalizedRoomName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeDisplayRoomName(normalizedRoomName);\n\n\t\tawait this.internalRoomAdapter.updateDisplayRoomName(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onChangeRoomTopic(roomChangeTopicInput: FederationRoomChangeTopicDto): Promise<void> {\n\t\tconst { externalRoomId, roomTopic, externalSenderId } = roomChangeTopicInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!federatedRoom.shouldUpdateRoomTopic(roomTopic)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\n\t\tfederatedRoom.changeRoomTopic(roomTopic);\n\n\t\tawait this.internalRoomAdapter.updateRoomTopic(federatedRoom, federatedUser);\n\t}\n\n\tpublic async onRedactEvent(roomRedactEventInput: FederationRoomRedactEventDto): Promise<void> {\n\t\tconst { externalRoomId, redactsEvent, externalSenderId } = roomRedactEventInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst handler = await getMessageRedactionHandler(this.internalMessageAdapter, redactsEvent, federatedUser);\n\t\tif (!handler) {\n\t\t\treturn;\n\t\t}\n\t\tawait handler.handle();\n\t}\n\n\tpublic async onChangeRoomPowerLevels(roomPowerLevelsInput: FederationRoomRoomChangePowerLevelsEventDto): Promise<void> {\n\t\tconst { externalRoomId, roleChangesToApply = {}, externalSenderId } = roomPowerLevelsInput;\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUserWhoChangedThePermission = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!federatedUserWhoChangedThePermission) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedUsers = await this.internalUserAdapter.getFederatedUsersByExternalIds(Object.keys(roleChangesToApply));\n\n\t\tawait Promise.all(\n\t\t\tfederatedUsers.map((targetFederatedUser) => {\n\t\t\t\tconst changes = roleChangesToApply[targetFederatedUser.getExternalId()];\n\t\t\t\tif (!changes) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rolesToRemove = changes.filter((change) => change.action === 'remove').map((change) => change.role);\n\t\t\t\tconst rolesToAdd = changes.filter((change) => change.action === 'add').map((change) => change.role);\n\n\t\t\t\treturn this.internalRoomAdapter.applyRoomRolesToUser({\n\t\t\t\t\tfederatedRoom,\n\t\t\t\t\ttargetFederatedUser,\n\t\t\t\t\tfromUser: federatedUserWhoChangedThePermission,\n\t\t\t\t\trolesToAdd,\n\t\t\t\t\trolesToRemove,\n\t\t\t\t\tnotifyChannel: true,\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedMessageReceived(roomReceiveExternalMessageInput: FederationRoomReceiveExternalMessageDto): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, rawMessage, externalFormattedText, externalEventId, replyToEventId, thread } =\n\t\t\troomReceiveExternalMessageInput;\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\trawMessage,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t\texternalFormattedText,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\trawMessage,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t\texternalFormattedText,\n\t\t\tthis.internalHomeServerDomain,\n\t\t);\n\t}\n\n\tpublic async onExternalThreadedFileMessageReceived(\n\t\troomReceiveExternalMessageInput: FederationRoomReceiveExternalFileMessageDto,\n\t): Promise<void> {\n\t\tconst { externalRoomId, externalSenderId, messageBody, externalEventId, replyToEventId, thread } = roomReceiveExternalMessageInput;\n\n\t\tif (!thread?.rootEventId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentMessage = await this.internalMessageAdapter.getMessageByFederationId(thread.rootEventId);\n\t\tif (!parentMessage) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst federatedRoom = await this.internalRoomAdapter.getFederatedRoomByExternalId(externalRoomId);\n\t\tif (!federatedRoom) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst senderUser = await this.internalUserAdapter.getFederatedUserByExternalId(externalSenderId);\n\t\tif (!senderUser) {\n\t\t\treturn;\n\t\t}\n\t\tconst message = await this.internalMessageAdapter.getMessageByFederationId(externalEventId);\n\t\tif (message) {\n\t\t\treturn;\n\t\t}\n\t\tconst fileDetails = {\n\t\t\tname: messageBody.filename,\n\t\t\tsize: messageBody.size,\n\t\t\ttype: messageBody.mimetype,\n\t\t\trid: federatedRoom.getInternalId(),\n\t\t\tuserId: senderUser.getInternalId(),\n\t\t};\n\t\tconst readableStream = await this.bridge.getReadStreamForFileFromUrl(senderUser.getExternalId(), messageBody.url);\n\t\tconst { files = [], attachments } = await this.internalFileAdapter.uploadFile(\n\t\t\treadableStream,\n\t\t\tfederatedRoom.getInternalId(),\n\t\t\tsenderUser.getInternalReference(),\n\t\t\tfileDetails,\n\t\t);\n\n\t\tif (replyToEventId) {\n\t\t\tconst messageToReplyTo = await this.internalMessageAdapter.getMessageByFederationId(replyToEventId);\n\t\t\tif (!messageToReplyTo) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.internalMessageAdapter.sendThreadQuoteFileMessage(\n\t\t\t\tsenderUser,\n\t\t\t\tfederatedRoom,\n\t\t\t\tfiles,\n\t\t\t\tattachments,\n\t\t\t\texternalEventId,\n\t\t\t\tmessageToReplyTo,\n\t\t\t\tthis.internalHomeServerDomain,\n\t\t\t\tparentMessage._id,\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.internalMessageAdapter.sendThreadFileMessage(\n\t\t\tsenderUser,\n\t\t\tfederatedRoom,\n\t\t\tfiles,\n\t\t\tattachments,\n\t\t\texternalEventId,\n\t\t\tparentMessage._id,\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"9b13cd6b6f0c2f30dad0c7f4caa41c3aec1bd642"}
