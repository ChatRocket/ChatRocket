{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/updateMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/updateMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/updateMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/updateMessage.ts","sourceRoot":"","sources":["app/lib/server/functions/updateMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppEvents, Apps } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\nimport { settings } from '../../../settings/server';\nimport { afterSaveMessage } from '../lib/afterSaveMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../lib/notifyListener';\nimport { validateCustomMessageFields } from '../lib/validateCustomMessageFields';\n\nexport const updateMessage = async function (\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tuser: IUser,\n\toriginalMsg?: IMessage,\n\tpreviewUrls?: string[],\n): Promise<void> {\n\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\tif (!originalMessage) {\n\t\tthrow new Error('Invalid message ID.');\n\t}\n\n\tlet messageData: IMessage = Object.assign({}, originalMessage, message);\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps.self && Apps.isLoaded()) {\n\t\tconst prevent = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedPrevent, messageData);\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedExtend, messageData);\n\t\tresult = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedModify, result);\n\n\t\tif (typeof result === 'object') {\n\t\t\tObject.assign(messageData, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tawait Messages.cloneAndSaveAsHistoryById(messageData._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t}\n\n\tObject.assign(messageData, {\n\t\teditedAt: new Date(),\n\t\teditedBy: {\n\t\t\t_id: user._id,\n\t\t\tusername: user.username,\n\t\t},\n\t});\n\n\tparseUrlsInMessage(messageData, previewUrls);\n\n\tconst room = await Rooms.findOneById(messageData.rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tmessageData = await Message.beforeSave({ message: messageData, room, user });\n\n\tif (messageData.customFields) {\n\t\tvalidateCustomMessageFields({\n\t\t\tcustomFields: messageData.customFields,\n\t\t\tmessageCustomFieldsEnabled: settings.get<boolean>('Message_CustomFields_Enabled'),\n\t\t\tmessageCustomFields: settings.get<string>('Message_CustomFields'),\n\t\t});\n\t}\n\n\tconst { _id, ...editedMessage } = messageData;\n\n\tif (!editedMessage.msg) {\n\t\tdelete editedMessage.md;\n\t}\n\n\t// do not send $unset if not defined. Can cause exceptions in certain mongo versions.\n\tawait Messages.updateOne(\n\t\t{ _id },\n\t\t{\n\t\t\t$set: {\n\t\t\t\t...editedMessage,\n\t\t\t},\n\t\t\t...(!editedMessage.md && { $unset: { md: 1 } }),\n\t\t},\n\t);\n\n\tif (Apps.self?.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tvoid Apps.getBridges()?.getListenerBridge().messageEvent(AppEvents.IPostMessageUpdated, messageData);\n\t}\n\n\tsetImmediate(async () => {\n\t\tconst msg = await Messages.findOneById(_id);\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\t// although this is an \"afterSave\" kind callback, we know they can extend message's properties\n\t\t// so we wait for it to run before broadcasting\n\t\tconst data = await afterSaveMessage(msg, room, user._id);\n\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: msg._id,\n\t\t\tdata,\n\t\t});\n\n\t\tif (room?.lastMessage?._id === msg._id) {\n\t\t\tvoid notifyOnRoomChangedById(message.rid);\n\t\t}\n\t});\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/updateMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/updateMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/updateMessage.ts","sourceRoot":"","sources":["app/lib/server/functions/updateMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppEvents, Apps } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\nimport { settings } from '../../../settings/server';\nimport { afterSaveMessage } from '../lib/afterSaveMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../lib/notifyListener';\nimport { validateCustomMessageFields } from '../lib/validateCustomMessageFields';\n\nexport const updateMessage = async function (\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tuser: IUser,\n\toriginalMsg?: IMessage,\n\tpreviewUrls?: string[],\n): Promise<void> {\n\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\tif (!originalMessage) {\n\t\tthrow new Error('Invalid message ID.');\n\t}\n\n\tlet messageData: IMessage = Object.assign({}, originalMessage, message);\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps.self && Apps.isLoaded()) {\n\t\tconst prevent = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedPrevent, messageData);\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedExtend, messageData);\n\t\tresult = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedModify, result);\n\n\t\tif (typeof result === 'object') {\n\t\t\tObject.assign(messageData, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tawait Messages.cloneAndSaveAsHistoryById(messageData._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t}\n\n\tObject.assign(messageData, {\n\t\teditedAt: new Date(),\n\t\teditedBy: {\n\t\t\t_id: user._id,\n\t\t\tusername: user.username,\n\t\t},\n\t});\n\n\tparseUrlsInMessage(messageData, previewUrls);\n\n\tconst room = await Rooms.findOneById(messageData.rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tmessageData = await Message.beforeSave({ message: messageData, room, user });\n\n\tif (messageData.customFields) {\n\t\tvalidateCustomMessageFields({\n\t\t\tcustomFields: messageData.customFields,\n\t\t\tmessageCustomFieldsEnabled: settings.get<boolean>('Message_CustomFields_Enabled'),\n\t\t\tmessageCustomFields: settings.get<string>('Message_CustomFields'),\n\t\t});\n\t}\n\n\tconst { _id, ...editedMessage } = messageData;\n\n\tif (!editedMessage.msg) {\n\t\tdelete editedMessage.md;\n\t}\n\n\t// do not send $unset if not defined. Can cause exceptions in certain mongo versions.\n\tawait Messages.updateOne(\n\t\t{ _id },\n\t\t{\n\t\t\t$set: {\n\t\t\t\t...editedMessage,\n\t\t\t},\n\t\t\t...(!editedMessage.md && { $unset: { md: 1 } }),\n\t\t},\n\t);\n\n\tif (Apps.self?.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tvoid Apps.getBridges()?.getListenerBridge().messageEvent(AppEvents.IPostMessageUpdated, messageData);\n\t}\n\n\tsetImmediate(async () => {\n\t\tconst msg = await Messages.findOneById(_id);\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\t// although this is an \"afterSave\" kind callback, we know they can extend message's properties\n\t\t// so we wait for it to run before broadcasting\n\t\tconst data = await afterSaveMessage(msg, room, user._id);\n\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: msg._id,\n\t\t\tdata,\n\t\t});\n\n\t\tif (room?.lastMessage?._id === msg._id) {\n\t\t\tvoid notifyOnRoomChangedById(message.rid);\n\t\t}\n\t});\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    const _excluded = [\"_id\"];\n    module.export({\n      updateMessage: () => updateMessage\n    });\n    let AppEvents, Apps;\n    module.link(\"@rocket.chat/apps\", {\n      AppEvents(v) {\n        AppEvents = v;\n      },\n      Apps(v) {\n        Apps = v;\n      }\n    }, 0);\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 1);\n    let Messages, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let parseUrlsInMessage;\n    module.link(\"./parseUrlsInMessage\", {\n      parseUrlsInMessage(v) {\n        parseUrlsInMessage = v;\n      }\n    }, 4);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 5);\n    let afterSaveMessage;\n    module.link(\"../lib/afterSaveMessage\", {\n      afterSaveMessage(v) {\n        afterSaveMessage = v;\n      }\n    }, 6);\n    let notifyOnRoomChangedById, notifyOnMessageChange;\n    module.link(\"../lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnMessageChange(v) {\n        notifyOnMessageChange = v;\n      }\n    }, 7);\n    let validateCustomMessageFields;\n    module.link(\"../lib/validateCustomMessageFields\", {\n      validateCustomMessageFields(v) {\n        validateCustomMessageFields = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const updateMessage = async function (message, user, originalMsg, previewUrls) {\n      var _Apps$self;\n      const originalMessage = originalMsg || (await Messages.findOneById(message._id));\n      if (!originalMessage) {\n        throw new Error('Invalid message ID.');\n      }\n      let messageData = Object.assign({}, originalMessage, message);\n      // For the Rocket.Chat Apps :)\n      if (message && Apps.self && Apps.isLoaded()) {\n        const prevent = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedPrevent, messageData);\n        if (prevent) {\n          throw new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n        }\n        let result = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedExtend, messageData);\n        result = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedModify, result);\n        if (typeof result === 'object') {\n          Object.assign(messageData, result);\n        }\n      }\n      // If we keep history of edits, insert a new message to store history information\n      if (settings.get('Message_KeepHistory')) {\n        await Messages.cloneAndSaveAsHistoryById(messageData._id, user);\n      }\n      Object.assign(messageData, {\n        editedAt: new Date(),\n        editedBy: {\n          _id: user._id,\n          username: user.username\n        }\n      });\n      parseUrlsInMessage(messageData, previewUrls);\n      const room = await Rooms.findOneById(messageData.rid);\n      if (!room) {\n        return;\n      }\n      messageData = await Message.beforeSave({\n        message: messageData,\n        room,\n        user\n      });\n      if (messageData.customFields) {\n        validateCustomMessageFields({\n          customFields: messageData.customFields,\n          messageCustomFieldsEnabled: settings.get('Message_CustomFields_Enabled'),\n          messageCustomFields: settings.get('Message_CustomFields')\n        });\n      }\n      const {\n          _id\n        } = messageData,\n        editedMessage = _objectWithoutProperties(messageData, _excluded);\n      if (!editedMessage.msg) {\n        delete editedMessage.md;\n      }\n      // do not send $unset if not defined. Can cause exceptions in certain mongo versions.\n      await Messages.updateOne({\n        _id\n      }, _objectSpread({\n        $set: _objectSpread({}, editedMessage)\n      }, !editedMessage.md && {\n        $unset: {\n          md: 1\n        }\n      }));\n      if ((_Apps$self = Apps.self) !== null && _Apps$self !== void 0 && _Apps$self.isLoaded()) {\n        var _Apps$getBridges;\n        // This returns a promise, but it won't mutate anything about the message\n        // so, we don't really care if it is successful or fails\n        void ((_Apps$getBridges = Apps.getBridges()) === null || _Apps$getBridges === void 0 ? void 0 : _Apps$getBridges.getListenerBridge().messageEvent(AppEvents.IPostMessageUpdated, messageData));\n      }\n      setImmediate(async () => {\n        var _room$lastMessage;\n        const msg = await Messages.findOneById(_id);\n        if (!msg) {\n          return;\n        }\n        // although this is an \"afterSave\" kind callback, we know they can extend message's properties\n        // so we wait for it to run before broadcasting\n        const data = await afterSaveMessage(msg, room, user._id);\n        void notifyOnMessageChange({\n          id: msg._id,\n          data\n        });\n        if ((room === null || room === void 0 ? void 0 : (_room$lastMessage = room.lastMessage) === null || _room$lastMessage === void 0 ? void 0 : _room$lastMessage._id) === msg._id) {\n          void notifyOnRoomChangedById(message.rid);\n        }\n      });\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_excluded","export","updateMessage","AppEvents","Apps","Message","Messages","Rooms","Meteor","parseUrlsInMessage","settings","afterSaveMessage","notifyOnRoomChangedById","notifyOnMessageChange","validateCustomMessageFields","__reifyWaitForDeps__","message","user","originalMsg","previewUrls","_Apps$self","originalMessage","findOneById","_id","Error","messageData","Object","assign","self","isLoaded","prevent","getBridges","getListenerBridge","messageEvent","IPreMessageUpdatedPrevent","result","IPreMessageUpdatedExtend","IPreMessageUpdatedModify","get","cloneAndSaveAsHistoryById","editedAt","Date","editedBy","username","room","rid","beforeSave","customFields","messageCustomFieldsEnabled","messageCustomFields","editedMessage","msg","md","updateOne","$set","$unset","_Apps$getBridges","IPostMessageUpdated","setImmediate","_room$lastMessage","data","id","lastMessage","__reify_async_result__","_reifyError","async"],"sources":["app/lib/server/functions/updateMessage.ts"],"sourcesContent":["import { AppEvents, Apps } from '@rocket.chat/apps';\nimport { Message } from '@rocket.chat/core-services';\nimport type { IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport { Messages, Rooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { parseUrlsInMessage } from './parseUrlsInMessage';\nimport { settings } from '../../../settings/server';\nimport { afterSaveMessage } from '../lib/afterSaveMessage';\nimport { notifyOnRoomChangedById, notifyOnMessageChange } from '../lib/notifyListener';\nimport { validateCustomMessageFields } from '../lib/validateCustomMessageFields';\n\nexport const updateMessage = async function (\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tuser: IUser,\n\toriginalMsg?: IMessage,\n\tpreviewUrls?: string[],\n): Promise<void> {\n\tconst originalMessage = originalMsg || (await Messages.findOneById(message._id));\n\tif (!originalMessage) {\n\t\tthrow new Error('Invalid message ID.');\n\t}\n\n\tlet messageData: IMessage = Object.assign({}, originalMessage, message);\n\n\t// For the Rocket.Chat Apps :)\n\tif (message && Apps.self && Apps.isLoaded()) {\n\t\tconst prevent = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedPrevent, messageData);\n\t\tif (prevent) {\n\t\t\tthrow new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');\n\t\t}\n\n\t\tlet result = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedExtend, messageData);\n\t\tresult = await Apps.getBridges().getListenerBridge().messageEvent(AppEvents.IPreMessageUpdatedModify, result);\n\n\t\tif (typeof result === 'object') {\n\t\t\tObject.assign(messageData, result);\n\t\t}\n\t}\n\n\t// If we keep history of edits, insert a new message to store history information\n\tif (settings.get('Message_KeepHistory')) {\n\t\tawait Messages.cloneAndSaveAsHistoryById(messageData._id, user as Required<Pick<IUser, '_id' | 'username' | 'name'>>);\n\t}\n\n\tObject.assign(messageData, {\n\t\teditedAt: new Date(),\n\t\teditedBy: {\n\t\t\t_id: user._id,\n\t\t\tusername: user.username,\n\t\t},\n\t});\n\n\tparseUrlsInMessage(messageData, previewUrls);\n\n\tconst room = await Rooms.findOneById(messageData.rid);\n\tif (!room) {\n\t\treturn;\n\t}\n\n\tmessageData = await Message.beforeSave({ message: messageData, room, user });\n\n\tif (messageData.customFields) {\n\t\tvalidateCustomMessageFields({\n\t\t\tcustomFields: messageData.customFields,\n\t\t\tmessageCustomFieldsEnabled: settings.get<boolean>('Message_CustomFields_Enabled'),\n\t\t\tmessageCustomFields: settings.get<string>('Message_CustomFields'),\n\t\t});\n\t}\n\n\tconst { _id, ...editedMessage } = messageData;\n\n\tif (!editedMessage.msg) {\n\t\tdelete editedMessage.md;\n\t}\n\n\t// do not send $unset if not defined. Can cause exceptions in certain mongo versions.\n\tawait Messages.updateOne(\n\t\t{ _id },\n\t\t{\n\t\t\t$set: {\n\t\t\t\t...editedMessage,\n\t\t\t},\n\t\t\t...(!editedMessage.md && { $unset: { md: 1 } }),\n\t\t},\n\t);\n\n\tif (Apps.self?.isLoaded()) {\n\t\t// This returns a promise, but it won't mutate anything about the message\n\t\t// so, we don't really care if it is successful or fails\n\t\tvoid Apps.getBridges()?.getListenerBridge().messageEvent(AppEvents.IPostMessageUpdated, messageData);\n\t}\n\n\tsetImmediate(async () => {\n\t\tconst msg = await Messages.findOneById(_id);\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\t// although this is an \"afterSave\" kind callback, we know they can extend message's properties\n\t\t// so we wait for it to run before broadcasting\n\t\tconst data = await afterSaveMessage(msg, room, user._id);\n\n\t\tvoid notifyOnMessageChange({\n\t\t\tid: msg._id,\n\t\t\tdata,\n\t\t});\n\n\t\tif (room?.lastMessage?._id === msg._id) {\n\t\t\tvoid notifyOnRoomChangedById(message.rid);\n\t\t}\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c650dd08245ec795f598ac6a3bbd5e34cb7d6ae6"}
