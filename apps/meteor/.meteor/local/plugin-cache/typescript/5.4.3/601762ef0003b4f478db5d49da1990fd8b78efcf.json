{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/OverviewData.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel-analytics/OverviewData.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/OverviewData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/OverviewData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/OverviewData.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable new-cap */\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport moment from 'moment-timezone';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype OverviewDataValidActions = 'Conversations' | 'Productivity';\n\nexport class OverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is OverviewDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ['Conversations', 'Productivity'].includes(action);\n\t}\n\n\tcallAction<T extends OverviewDataValidActions>(\n\t\taction: T,\n\t\t...args: [moment.Moment, moment.Moment, string?, string?, ((v: string) => string)?, Filter<IOmnichannelRoom>?]\n\t) {\n\t\tswitch (action) {\n\t\t\tcase 'Conversations':\n\t\t\t\treturn this.Conversations(...args);\n\t\t\tcase 'Productivity':\n\t\t\t\treturn this.Productivity(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tgetKeyHavingMaxValue<T>(map: Map<T, number>, def: T): T {\n\t\tlet maxValue = 0;\n\t\tlet maxKey = def; // default\n\n\t\tmap.forEach((value, key) => {\n\t\t\tif (value > maxValue) {\n\t\t\t\tmaxValue = value;\n\t\t\t\tmaxKey = key;\n\t\t\t}\n\t\t});\n\n\t\treturn maxKey;\n\t}\n\n\tsumAllMapKeys<T>(map: Map<T, number>): number {\n\t\tlet sum = 0;\n\n\t\tmap.forEach((value) => {\n\t\t\tsum += value;\n\t\t});\n\n\t\treturn sum;\n\t}\n\n\tgetBusiestDay(map: Map<string, Map<string, number>>): string {\n\t\tlet mostMessages = -1;\n\t\tlet busiestDay = '-';\n\n\t\tmap.forEach((value, key) => {\n\t\t\tconst v = this.sumAllMapKeys(value);\n\t\t\tif (v > mostMessages) {\n\t\t\t\tmostMessages = v;\n\t\t\t\tbusiestDay = key;\n\t\t\t}\n\t\t});\n\n\t\treturn busiestDay;\n\t}\n\n\tgetAllMapKeysSize<T>(map: Map<T, Map<T, number>>): number {\n\t\tlet size = 0;\n\n\t\t[...map.keys()].forEach((key) => {\n\t\t\tsize += map.get(key)?.size || 0;\n\t\t});\n\n\t\treturn size;\n\t}\n\n\tasync Conversations(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\ttimezone = 'UTC',\n\t\tt = (v: string): string => v,\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst analyticsMap = new Map();\n\t\tlet openConversations = 0; // open conversations\n\t\tlet totalMessages = 0; // total msgs\n\t\tlet totalConversations = 0; // Total conversations\n\t\tconst days = to.diff(from, 'days') + 1; // total days\n\n\t\tconst date = {\n\t\t\tgte: moment.tz(from, timezone).startOf('day').utc(),\n\t\t\tlte: moment.tz(to, timezone).endOf('day').utc(),\n\t\t};\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst cursor = this.roomsModel.getAnalyticsBetweenDate(date, { departmentId }, extraQuery);\n\n\t\tfor await (const room of cursor) {\n\t\t\ttotalConversations++;\n\n\t\t\tif (room.metrics && !room.metrics.chatDuration && !room.onHold) {\n\t\t\t\topenConversations++;\n\t\t\t}\n\t\t\tconst creationDay = moment.tz(room.ts, timezone).format('DD-MM-YYYY'); // @string: 01-01-2021\n\t\t\tconst creationHour = moment.tz(room.ts, timezone).format('H'); // @int : 0, 1, ... 23\n\n\t\t\tif (!analyticsMap.has(creationDay)) {\n\t\t\t\tanalyticsMap.set(creationDay, new Map());\n\t\t\t}\n\n\t\t\tconst dayMap = analyticsMap.get(creationDay);\n\n\t\t\tif (!dayMap.has(creationHour)) {\n\t\t\t\tdayMap.set(creationHour, 0);\n\t\t\t}\n\n\t\t\tdayMap.set(creationHour, dayMap.get(creationHour) ? dayMap.get(creationHour) + room.msgs : room.msgs);\n\t\t\ttotalMessages += room.msgs;\n\t\t}\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst onHoldConversations = await this.roomsModel.getOnHoldConversationsBetweenDate(from, to, departmentId, extraQuery);\n\t\tconst busiestDayFromMap = this.getBusiestDay(analyticsMap); // returns busiest day based on the number of messages sent on that day\n\t\tconst busiestHour = this.getKeyHavingMaxValue<number>(analyticsMap.get(busiestDayFromMap) || new Map(), -1); // returns key with max value\n\t\tconst busiestTimeFrom = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).format('hA') : ''; // @string: 12AM, 1AM ...\n\t\tconst busiestTimeTo = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).add(1, 'hour').format('hA') : ''; // @string: 1AM, 2AM ...\n\t\tconst busiestDay = busiestDayFromMap !== '-' ? moment.tz(busiestDayFromMap, 'DD-MM-YYYY', timezone).format('dddd') : ''; // @string: Monday, Tuesday ...\n\n\t\treturn [\n\t\t\t{\n\t\t\t\ttitle: 'Total_conversations',\n\t\t\t\tvalue: totalConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Open_conversations',\n\t\t\t\tvalue: openConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'On_Hold_conversations',\n\t\t\t\tvalue: onHoldConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Total_messages',\n\t\t\t\tvalue: totalMessages,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_day',\n\t\t\t\tvalue: t(busiestDay) || '-',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Conversations_per_day',\n\t\t\t\tvalue: (totalConversations / days).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_time',\n\t\t\t\tvalue: `${busiestTimeFrom}${busiestTimeTo ? ` - ${busiestTimeTo}` : ''}` || '-',\n\t\t\t},\n\t\t];\n\t}\n\n\tasync Productivity(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\t_timezone?: string,\n\t\t_t = (v: string): string => v,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t) {\n\t\tlet avgResponseTime = 0;\n\t\tlet firstResponseTime = 0;\n\t\tlet avgReactionTime = 0;\n\t\tlet count = 0;\n\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response && metrics.reaction) {\n\t\t\t\tavgResponseTime += metrics.response.avg;\n\t\t\t\tfirstResponseTime += metrics.response.ft;\n\t\t\t\tavgReactionTime += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tif (count) {\n\t\t\tavgResponseTime /= count;\n\t\t\tfirstResponseTime /= count;\n\t\t\tavgReactionTime /= count;\n\t\t}\n\n\t\tconst data = [\n\t\t\t{\n\t\t\t\ttitle: 'Avg_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_first_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(firstResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_reaction_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgReactionTime.toFixed(2)),\n\t\t\t},\n\t\t];\n\n\t\treturn data;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel-analytics/OverviewData.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel-analytics/OverviewData.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel-analytics/OverviewData.ts","sourceRoot":"","sources":["server/services/omnichannel-analytics/OverviewData.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable new-cap */\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport moment from 'moment-timezone';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype OverviewDataValidActions = 'Conversations' | 'Productivity';\n\nexport class OverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is OverviewDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ['Conversations', 'Productivity'].includes(action);\n\t}\n\n\tcallAction<T extends OverviewDataValidActions>(\n\t\taction: T,\n\t\t...args: [moment.Moment, moment.Moment, string?, string?, ((v: string) => string)?, Filter<IOmnichannelRoom>?]\n\t) {\n\t\tswitch (action) {\n\t\t\tcase 'Conversations':\n\t\t\t\treturn this.Conversations(...args);\n\t\t\tcase 'Productivity':\n\t\t\t\treturn this.Productivity(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tgetKeyHavingMaxValue<T>(map: Map<T, number>, def: T): T {\n\t\tlet maxValue = 0;\n\t\tlet maxKey = def; // default\n\n\t\tmap.forEach((value, key) => {\n\t\t\tif (value > maxValue) {\n\t\t\t\tmaxValue = value;\n\t\t\t\tmaxKey = key;\n\t\t\t}\n\t\t});\n\n\t\treturn maxKey;\n\t}\n\n\tsumAllMapKeys<T>(map: Map<T, number>): number {\n\t\tlet sum = 0;\n\n\t\tmap.forEach((value) => {\n\t\t\tsum += value;\n\t\t});\n\n\t\treturn sum;\n\t}\n\n\tgetBusiestDay(map: Map<string, Map<string, number>>): string {\n\t\tlet mostMessages = -1;\n\t\tlet busiestDay = '-';\n\n\t\tmap.forEach((value, key) => {\n\t\t\tconst v = this.sumAllMapKeys(value);\n\t\t\tif (v > mostMessages) {\n\t\t\t\tmostMessages = v;\n\t\t\t\tbusiestDay = key;\n\t\t\t}\n\t\t});\n\n\t\treturn busiestDay;\n\t}\n\n\tgetAllMapKeysSize<T>(map: Map<T, Map<T, number>>): number {\n\t\tlet size = 0;\n\n\t\t[...map.keys()].forEach((key) => {\n\t\t\tsize += map.get(key)?.size || 0;\n\t\t});\n\n\t\treturn size;\n\t}\n\n\tasync Conversations(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\ttimezone = 'UTC',\n\t\tt = (v: string): string => v,\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst analyticsMap = new Map();\n\t\tlet openConversations = 0; // open conversations\n\t\tlet totalMessages = 0; // total msgs\n\t\tlet totalConversations = 0; // Total conversations\n\t\tconst days = to.diff(from, 'days') + 1; // total days\n\n\t\tconst date = {\n\t\t\tgte: moment.tz(from, timezone).startOf('day').utc(),\n\t\t\tlte: moment.tz(to, timezone).endOf('day').utc(),\n\t\t};\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst cursor = this.roomsModel.getAnalyticsBetweenDate(date, { departmentId }, extraQuery);\n\n\t\tfor await (const room of cursor) {\n\t\t\ttotalConversations++;\n\n\t\t\tif (room.metrics && !room.metrics.chatDuration && !room.onHold) {\n\t\t\t\topenConversations++;\n\t\t\t}\n\t\t\tconst creationDay = moment.tz(room.ts, timezone).format('DD-MM-YYYY'); // @string: 01-01-2021\n\t\t\tconst creationHour = moment.tz(room.ts, timezone).format('H'); // @int : 0, 1, ... 23\n\n\t\t\tif (!analyticsMap.has(creationDay)) {\n\t\t\t\tanalyticsMap.set(creationDay, new Map());\n\t\t\t}\n\n\t\t\tconst dayMap = analyticsMap.get(creationDay);\n\n\t\t\tif (!dayMap.has(creationHour)) {\n\t\t\t\tdayMap.set(creationHour, 0);\n\t\t\t}\n\n\t\t\tdayMap.set(creationHour, dayMap.get(creationHour) ? dayMap.get(creationHour) + room.msgs : room.msgs);\n\t\t\ttotalMessages += room.msgs;\n\t\t}\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst onHoldConversations = await this.roomsModel.getOnHoldConversationsBetweenDate(from, to, departmentId, extraQuery);\n\t\tconst busiestDayFromMap = this.getBusiestDay(analyticsMap); // returns busiest day based on the number of messages sent on that day\n\t\tconst busiestHour = this.getKeyHavingMaxValue<number>(analyticsMap.get(busiestDayFromMap) || new Map(), -1); // returns key with max value\n\t\tconst busiestTimeFrom = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).format('hA') : ''; // @string: 12AM, 1AM ...\n\t\tconst busiestTimeTo = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).add(1, 'hour').format('hA') : ''; // @string: 1AM, 2AM ...\n\t\tconst busiestDay = busiestDayFromMap !== '-' ? moment.tz(busiestDayFromMap, 'DD-MM-YYYY', timezone).format('dddd') : ''; // @string: Monday, Tuesday ...\n\n\t\treturn [\n\t\t\t{\n\t\t\t\ttitle: 'Total_conversations',\n\t\t\t\tvalue: totalConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Open_conversations',\n\t\t\t\tvalue: openConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'On_Hold_conversations',\n\t\t\t\tvalue: onHoldConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Total_messages',\n\t\t\t\tvalue: totalMessages,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_day',\n\t\t\t\tvalue: t(busiestDay) || '-',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Conversations_per_day',\n\t\t\t\tvalue: (totalConversations / days).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_time',\n\t\t\t\tvalue: `${busiestTimeFrom}${busiestTimeTo ? ` - ${busiestTimeTo}` : ''}` || '-',\n\t\t\t},\n\t\t];\n\t}\n\n\tasync Productivity(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\t_timezone?: string,\n\t\t_t = (v: string): string => v,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t) {\n\t\tlet avgResponseTime = 0;\n\t\tlet firstResponseTime = 0;\n\t\tlet avgReactionTime = 0;\n\t\tlet count = 0;\n\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response && metrics.reaction) {\n\t\t\t\tavgResponseTime += metrics.response.avg;\n\t\t\t\tfirstResponseTime += metrics.response.ft;\n\t\t\t\tavgReactionTime += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tif (count) {\n\t\t\tavgResponseTime /= count;\n\t\t\tfirstResponseTime /= count;\n\t\t\tavgReactionTime /= count;\n\t\t}\n\n\t\tconst data = [\n\t\t\t{\n\t\t\t\ttitle: 'Avg_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_first_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(firstResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_reaction_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgReactionTime.toFixed(2)),\n\t\t\t},\n\t\t];\n\n\t\treturn data;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      OverviewData: () => OverviewData\n    });\n    let moment;\n    module.link(\"moment-timezone\", {\n      default(v) {\n        moment = v;\n      }\n    }, 0);\n    let secondsToHHMMSS;\n    module.link(\"../../../lib/utils/secondsToHHMMSS\", {\n      secondsToHHMMSS(v) {\n        secondsToHHMMSS = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class OverviewData {\n      constructor(roomsModel) {\n        this.roomsModel = void 0;\n        this.roomsModel = roomsModel;\n      }\n      isActionAllowed(action) {\n        if (!action) {\n          return false;\n        }\n        return ['Conversations', 'Productivity'].includes(action);\n      }\n      callAction(action) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        switch (action) {\n          case 'Conversations':\n            return this.Conversations(...args);\n          case 'Productivity':\n            return this.Productivity(...args);\n          default:\n            throw new Error('Invalid action');\n        }\n      }\n      getKeyHavingMaxValue(map, def) {\n        let maxValue = 0;\n        let maxKey = def; // default\n        map.forEach((value, key) => {\n          if (value > maxValue) {\n            maxValue = value;\n            maxKey = key;\n          }\n        });\n        return maxKey;\n      }\n      sumAllMapKeys(map) {\n        let sum = 0;\n        map.forEach(value => {\n          sum += value;\n        });\n        return sum;\n      }\n      getBusiestDay(map) {\n        let mostMessages = -1;\n        let busiestDay = '-';\n        map.forEach((value, key) => {\n          const v = this.sumAllMapKeys(value);\n          if (v > mostMessages) {\n            mostMessages = v;\n            busiestDay = key;\n          }\n        });\n        return busiestDay;\n      }\n      getAllMapKeysSize(map) {\n        let size = 0;\n        [...map.keys()].forEach(key => {\n          var _map$get;\n          size += ((_map$get = map.get(key)) === null || _map$get === void 0 ? void 0 : _map$get.size) || 0;\n        });\n        return size;\n      }\n      async Conversations(from, to, departmentId) {\n        let timezone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'UTC';\n        let t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : v => v;\n        let extraQuery = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n        const analyticsMap = new Map();\n        let openConversations = 0; // open conversations\n        let totalMessages = 0; // total msgs\n        let totalConversations = 0; // Total conversations\n        const days = to.diff(from, 'days') + 1; // total days\n        const date = {\n          gte: moment.tz(from, timezone).startOf('day').utc(),\n          lte: moment.tz(to, timezone).endOf('day').utc()\n        };\n        // @ts-expect-error - Check extraquery usage on this func\n        const cursor = this.roomsModel.getAnalyticsBetweenDate(date, {\n          departmentId\n        }, extraQuery);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const room = _step.value;\n            {\n              totalConversations++;\n              if (room.metrics && !room.metrics.chatDuration && !room.onHold) {\n                openConversations++;\n              }\n              const creationDay = moment.tz(room.ts, timezone).format('DD-MM-YYYY'); // @string: 01-01-2021\n              const creationHour = moment.tz(room.ts, timezone).format('H'); // @int : 0, 1, ... 23\n              if (!analyticsMap.has(creationDay)) {\n                analyticsMap.set(creationDay, new Map());\n              }\n              const dayMap = analyticsMap.get(creationDay);\n              if (!dayMap.has(creationHour)) {\n                dayMap.set(creationHour, 0);\n              }\n              dayMap.set(creationHour, dayMap.get(creationHour) ? dayMap.get(creationHour) + room.msgs : room.msgs);\n              totalMessages += room.msgs;\n            }\n          }\n          // @ts-expect-error - Check extraquery usage on this func\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        const onHoldConversations = await this.roomsModel.getOnHoldConversationsBetweenDate(from, to, departmentId, extraQuery);\n        const busiestDayFromMap = this.getBusiestDay(analyticsMap); // returns busiest day based on the number of messages sent on that day\n        const busiestHour = this.getKeyHavingMaxValue(analyticsMap.get(busiestDayFromMap) || new Map(), -1); // returns key with max value\n        const busiestTimeFrom = busiestHour >= 0 ? moment.tz(\"\".concat(busiestHour), 'H', timezone).format('hA') : ''; // @string: 12AM, 1AM ...\n        const busiestTimeTo = busiestHour >= 0 ? moment.tz(\"\".concat(busiestHour), 'H', timezone).add(1, 'hour').format('hA') : ''; // @string: 1AM, 2AM ...\n        const busiestDay = busiestDayFromMap !== '-' ? moment.tz(busiestDayFromMap, 'DD-MM-YYYY', timezone).format('dddd') : ''; // @string: Monday, Tuesday ...\n        return [{\n          title: 'Total_conversations',\n          value: totalConversations\n        }, {\n          title: 'Open_conversations',\n          value: openConversations\n        }, {\n          title: 'On_Hold_conversations',\n          value: onHoldConversations\n        }, {\n          title: 'Total_messages',\n          value: totalMessages\n        }, {\n          title: 'Busiest_day',\n          value: t(busiestDay) || '-'\n        }, {\n          title: 'Conversations_per_day',\n          value: (totalConversations / days).toFixed(2)\n        }, {\n          title: 'Busiest_time',\n          value: \"\".concat(busiestTimeFrom).concat(busiestTimeTo ? \" - \".concat(busiestTimeTo) : '') || '-'\n        }];\n      }\n      async Productivity(from, to, departmentId, _timezone) {\n        let _t = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : v => v;\n        let extraQuery = arguments.length > 5 ? arguments[5] : undefined;\n        let avgResponseTime = 0;\n        let firstResponseTime = 0;\n        let avgReactionTime = 0;\n        let count = 0;\n        const date = {\n          gte: from.toDate(),\n          lte: to.toDate()\n        };\n        await this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, {\n          departmentId\n        }, extraQuery).forEach(_ref => {\n          let {\n            metrics\n          } = _ref;\n          if (metrics !== null && metrics !== void 0 && metrics.response && metrics.reaction) {\n            avgResponseTime += metrics.response.avg;\n            firstResponseTime += metrics.response.ft;\n            avgReactionTime += metrics.reaction.ft;\n            count++;\n          }\n        });\n        if (count) {\n          avgResponseTime /= count;\n          firstResponseTime /= count;\n          avgReactionTime /= count;\n        }\n        const data = [{\n          title: 'Avg_response_time',\n          value: secondsToHHMMSS(avgResponseTime.toFixed(2))\n        }, {\n          title: 'Avg_first_response_time',\n          value: secondsToHHMMSS(firstResponseTime.toFixed(2))\n        }, {\n          title: 'Avg_reaction_time',\n          value: secondsToHHMMSS(avgReactionTime.toFixed(2))\n        }];\n        return data;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","OverviewData","moment","secondsToHHMMSS","__reifyWaitForDeps__","constructor","roomsModel","isActionAllowed","action","includes","callAction","_len","arguments","length","args","Array","_key","Conversations","Productivity","Error","getKeyHavingMaxValue","map","def","maxValue","maxKey","forEach","value","key","sumAllMapKeys","sum","getBusiestDay","mostMessages","busiestDay","getAllMapKeysSize","size","keys","_map$get","get","from","to","departmentId","timezone","undefined","t","extraQuery","analyticsMap","Map","openConversations","totalMessages","totalConversations","days","diff","date","gte","tz","startOf","utc","lte","endOf","cursor","getAnalyticsBetweenDate","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","room","metrics","chatDuration","onHold","creationDay","ts","format","creationHour","has","set","dayMap","msgs","err","return","onHoldConversations","getOnHoldConversationsBetweenDate","busiestDayFromMap","busiestHour","busiestTimeFrom","concat","busiestTimeTo","add","title","toFixed","_timezone","_t","avgResponseTime","firstResponseTime","avgReactionTime","count","toDate","getAnalyticsMetricsBetweenDate","_ref","response","reaction","avg","ft","data","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel-analytics/OverviewData.ts"],"sourcesContent":["/* eslint-disable new-cap */\nimport type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ILivechatRoomsModel } from '@rocket.chat/model-typings';\nimport moment from 'moment-timezone';\nimport type { Filter } from 'mongodb';\n\nimport { secondsToHHMMSS } from '../../../lib/utils/secondsToHHMMSS';\n\ntype OverviewDataValidActions = 'Conversations' | 'Productivity';\n\nexport class OverviewData {\n\tconstructor(private readonly roomsModel: ILivechatRoomsModel) {}\n\n\tisActionAllowed(action: string | undefined): action is OverviewDataValidActions {\n\t\tif (!action) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ['Conversations', 'Productivity'].includes(action);\n\t}\n\n\tcallAction<T extends OverviewDataValidActions>(\n\t\taction: T,\n\t\t...args: [moment.Moment, moment.Moment, string?, string?, ((v: string) => string)?, Filter<IOmnichannelRoom>?]\n\t) {\n\t\tswitch (action) {\n\t\t\tcase 'Conversations':\n\t\t\t\treturn this.Conversations(...args);\n\t\t\tcase 'Productivity':\n\t\t\t\treturn this.Productivity(...args);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid action');\n\t\t}\n\t}\n\n\tgetKeyHavingMaxValue<T>(map: Map<T, number>, def: T): T {\n\t\tlet maxValue = 0;\n\t\tlet maxKey = def; // default\n\n\t\tmap.forEach((value, key) => {\n\t\t\tif (value > maxValue) {\n\t\t\t\tmaxValue = value;\n\t\t\t\tmaxKey = key;\n\t\t\t}\n\t\t});\n\n\t\treturn maxKey;\n\t}\n\n\tsumAllMapKeys<T>(map: Map<T, number>): number {\n\t\tlet sum = 0;\n\n\t\tmap.forEach((value) => {\n\t\t\tsum += value;\n\t\t});\n\n\t\treturn sum;\n\t}\n\n\tgetBusiestDay(map: Map<string, Map<string, number>>): string {\n\t\tlet mostMessages = -1;\n\t\tlet busiestDay = '-';\n\n\t\tmap.forEach((value, key) => {\n\t\t\tconst v = this.sumAllMapKeys(value);\n\t\t\tif (v > mostMessages) {\n\t\t\t\tmostMessages = v;\n\t\t\t\tbusiestDay = key;\n\t\t\t}\n\t\t});\n\n\t\treturn busiestDay;\n\t}\n\n\tgetAllMapKeysSize<T>(map: Map<T, Map<T, number>>): number {\n\t\tlet size = 0;\n\n\t\t[...map.keys()].forEach((key) => {\n\t\t\tsize += map.get(key)?.size || 0;\n\t\t});\n\n\t\treturn size;\n\t}\n\n\tasync Conversations(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\ttimezone = 'UTC',\n\t\tt = (v: string): string => v,\n\t\textraQuery: Filter<IOmnichannelRoom> = {},\n\t) {\n\t\tconst analyticsMap = new Map();\n\t\tlet openConversations = 0; // open conversations\n\t\tlet totalMessages = 0; // total msgs\n\t\tlet totalConversations = 0; // Total conversations\n\t\tconst days = to.diff(from, 'days') + 1; // total days\n\n\t\tconst date = {\n\t\t\tgte: moment.tz(from, timezone).startOf('day').utc(),\n\t\t\tlte: moment.tz(to, timezone).endOf('day').utc(),\n\t\t};\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst cursor = this.roomsModel.getAnalyticsBetweenDate(date, { departmentId }, extraQuery);\n\n\t\tfor await (const room of cursor) {\n\t\t\ttotalConversations++;\n\n\t\t\tif (room.metrics && !room.metrics.chatDuration && !room.onHold) {\n\t\t\t\topenConversations++;\n\t\t\t}\n\t\t\tconst creationDay = moment.tz(room.ts, timezone).format('DD-MM-YYYY'); // @string: 01-01-2021\n\t\t\tconst creationHour = moment.tz(room.ts, timezone).format('H'); // @int : 0, 1, ... 23\n\n\t\t\tif (!analyticsMap.has(creationDay)) {\n\t\t\t\tanalyticsMap.set(creationDay, new Map());\n\t\t\t}\n\n\t\t\tconst dayMap = analyticsMap.get(creationDay);\n\n\t\t\tif (!dayMap.has(creationHour)) {\n\t\t\t\tdayMap.set(creationHour, 0);\n\t\t\t}\n\n\t\t\tdayMap.set(creationHour, dayMap.get(creationHour) ? dayMap.get(creationHour) + room.msgs : room.msgs);\n\t\t\ttotalMessages += room.msgs;\n\t\t}\n\n\t\t// @ts-expect-error - Check extraquery usage on this func\n\t\tconst onHoldConversations = await this.roomsModel.getOnHoldConversationsBetweenDate(from, to, departmentId, extraQuery);\n\t\tconst busiestDayFromMap = this.getBusiestDay(analyticsMap); // returns busiest day based on the number of messages sent on that day\n\t\tconst busiestHour = this.getKeyHavingMaxValue<number>(analyticsMap.get(busiestDayFromMap) || new Map(), -1); // returns key with max value\n\t\tconst busiestTimeFrom = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).format('hA') : ''; // @string: 12AM, 1AM ...\n\t\tconst busiestTimeTo = busiestHour >= 0 ? moment.tz(`${busiestHour}`, 'H', timezone).add(1, 'hour').format('hA') : ''; // @string: 1AM, 2AM ...\n\t\tconst busiestDay = busiestDayFromMap !== '-' ? moment.tz(busiestDayFromMap, 'DD-MM-YYYY', timezone).format('dddd') : ''; // @string: Monday, Tuesday ...\n\n\t\treturn [\n\t\t\t{\n\t\t\t\ttitle: 'Total_conversations',\n\t\t\t\tvalue: totalConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Open_conversations',\n\t\t\t\tvalue: openConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'On_Hold_conversations',\n\t\t\t\tvalue: onHoldConversations,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Total_messages',\n\t\t\t\tvalue: totalMessages,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_day',\n\t\t\t\tvalue: t(busiestDay) || '-',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Conversations_per_day',\n\t\t\t\tvalue: (totalConversations / days).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Busiest_time',\n\t\t\t\tvalue: `${busiestTimeFrom}${busiestTimeTo ? ` - ${busiestTimeTo}` : ''}` || '-',\n\t\t\t},\n\t\t];\n\t}\n\n\tasync Productivity(\n\t\tfrom: moment.Moment,\n\t\tto: moment.Moment,\n\t\tdepartmentId?: string,\n\t\t_timezone?: string,\n\t\t_t = (v: string): string => v,\n\t\textraQuery?: Filter<IOmnichannelRoom>,\n\t) {\n\t\tlet avgResponseTime = 0;\n\t\tlet firstResponseTime = 0;\n\t\tlet avgReactionTime = 0;\n\t\tlet count = 0;\n\n\t\tconst date = {\n\t\t\tgte: from.toDate(),\n\t\t\tlte: to.toDate(),\n\t\t};\n\n\t\tawait this.roomsModel.getAnalyticsMetricsBetweenDate('l', date, { departmentId }, extraQuery).forEach(({ metrics }) => {\n\t\t\tif (metrics?.response && metrics.reaction) {\n\t\t\t\tavgResponseTime += metrics.response.avg;\n\t\t\t\tfirstResponseTime += metrics.response.ft;\n\t\t\t\tavgReactionTime += metrics.reaction.ft;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t});\n\n\t\tif (count) {\n\t\t\tavgResponseTime /= count;\n\t\t\tfirstResponseTime /= count;\n\t\t\tavgReactionTime /= count;\n\t\t}\n\n\t\tconst data = [\n\t\t\t{\n\t\t\t\ttitle: 'Avg_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_first_response_time',\n\t\t\t\tvalue: secondsToHHMMSS(firstResponseTime.toFixed(2)),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Avg_reaction_time',\n\t\t\t\tvalue: secondsToHHMMSS(avgReactionTime.toFixed(2)),\n\t\t\t},\n\t\t];\n\n\t\treturn data;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"601762ef0003b4f478db5d49da1990fd8b78efcf"}
