{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/meteor/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/meteor/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/meteor/service.ts","inputSourceMap":{"version":3,"file":"server/services/meteor/service.ts","sourceRoot":"","sources":["server/services/meteor/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { AutoUpdateRecord, IMeteor } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, LoginServiceConfiguration, UserStatus } from '@rocket.chat/core-typings';\nimport { LoginServiceConfiguration as LoginServiceConfigurationModel, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { triggerHandler } from '../../../app/integrations/server/lib/triggerHandler';\nimport { Livechat } from '../../../app/livechat/server/lib/LivechatTyped';\nimport { onlineAgents, monitorAgents } from '../../../app/livechat/server/lib/stream/agentStatus';\nimport { metrics } from '../../../app/metrics/server';\nimport notifications from '../../../app/notifications/server/lib/Notifications';\nimport { settings } from '../../../app/settings/server';\nimport { use } from '../../../app/settings/server/Middleware';\nimport { setValue, updateValue } from '../../../app/settings/server/raw';\nimport { getURL } from '../../../app/utils/server/getURL';\nimport { configureEmailInboxes } from '../../features/EmailInbox/EmailInbox';\nimport { ListenersModule } from '../../modules/listeners/listeners.module';\n\ntype Callbacks = {\n\tadded(id: string, record: object): void;\n\tchanged(id: string, record: object): void;\n\tremoved(id: string): void;\n};\n\nlet processOnChange: (diff: Record<string, any>, id: string) => void;\n// eslint-disable-next-line no-undef\nconst disableOplog = !!(Package as any)['disable-oplog'];\nconst serviceConfigCallbacks = new Set<Callbacks>();\n\nconst disableMsgRoundtripTracking = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING).toLowerCase());\n\nif (disableOplog) {\n\t// Stores the callbacks for the disconnection reactivity bellow\n\tconst userCallbacks = new Map();\n\n\t// Overrides the native observe changes to prevent database polling and stores the callbacks\n\t// for the users' tokens to re-implement the reactivity based on our database listeners\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tMongoInternals.Connection.prototype._observeChanges = async function (\n\t\t{\n\t\t\tcollectionName,\n\t\t\tselector,\n\t\t\toptions = {},\n\t\t}: {\n\t\t\tcollectionName: string;\n\t\t\tselector: Record<string, any>;\n\t\t\toptions?: {\n\t\t\t\tprojection?: Record<string, number>;\n\t\t\t\tfields?: Record<string, number>;\n\t\t\t};\n\t\t},\n\t\t_ordered: boolean,\n\t\tcallbacks: Callbacks,\n\t): Promise<any> {\n\t\t// console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n\t\tlet cbs: Set<{ hashedToken: string; callbacks: Callbacks }>;\n\t\tlet data: { hashedToken: string; callbacks: Callbacks };\n\t\tif (callbacks?.added) {\n\t\t\tconst records = await mongo\n\t\t\t\t.rawCollection(collectionName)\n\t\t\t\t.find(selector, {\n\t\t\t\t\t...(options.projection || options.fields ? { projection: options.projection || options.fields } : {}),\n\t\t\t\t})\n\t\t\t\t.toArray();\n\n\t\t\tfor (const { _id, ...fields } of records) {\n\t\t\t\tcallbacks.added(String(_id), fields);\n\t\t\t}\n\n\t\t\tif (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n\t\t\t\tcbs = userCallbacks.get(selector._id) || new Set();\n\t\t\t\tdata = {\n\t\t\t\t\thashedToken: selector['services.resume.loginTokens.hashedToken'],\n\t\t\t\t\tcallbacks,\n\t\t\t\t};\n\n\t\t\t\tcbs.add(data);\n\t\t\t\tuserCallbacks.set(selector._id, cbs);\n\t\t\t}\n\t\t}\n\n\t\tif (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n\t\t\tserviceConfigCallbacks.add(callbacks);\n\t\t}\n\n\t\treturn {\n\t\t\tstop(): void {\n\t\t\t\tif (cbs) {\n\t\t\t\t\tcbs.delete(data);\n\t\t\t\t}\n\t\t\t\tserviceConfigCallbacks.delete(callbacks);\n\t\t\t},\n\t\t};\n\t};\n\n\t// Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n\t// associated was removed\n\tprocessOnChange = (diff: Record<string, any>, id: string): void => {\n\t\tif (!diff || !('services.resume.loginTokens' in diff)) {\n\t\t\treturn;\n\t\t}\n\t\tconst loginTokens: undefined | { hashedToken: string }[] = diff['services.resume.loginTokens'];\n\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);\n\n\t\tconst cbs = userCallbacks.get(id);\n\t\tif (cbs) {\n\t\t\t[...cbs]\n\t\t\t\t.filter(({ hashedToken }) => tokens === undefined || !tokens.includes(hashedToken))\n\t\t\t\t.forEach((item) => {\n\t\t\t\t\titem.callbacks.removed(id);\n\t\t\t\t\tcbs.delete(item);\n\t\t\t\t});\n\t\t}\n\t};\n}\n\nsettings.set = use(settings.set, (context, next) => {\n\tnext(...context);\n\tconst [record] = context;\n\tupdateValue(record._id, record);\n});\n\nconst clientVersionsStore = new Map<string, AutoUpdateRecord>();\n\nexport class MeteorService extends ServiceClassInternal implements IMeteor {\n\tprotected name = 'meteor';\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tnew ListenersModule(this, notifications);\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tsettings.set(setting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettings.set({ ...setting, value: undefined });\n\t\t\tsetValue(setting._id, undefined);\n\t\t});\n\n\t\tif (disableOplog) {\n\t\t\tthis.onEvent('watch.loginServiceConfiguration', ({ clientAction, id, data }) => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks.removed?.(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (data) {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks[clientAction === 'inserted' ? 'added' : 'changed']?.(id, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.users', async (data) => {\n\t\t\tif (disableOplog) {\n\t\t\t\tif (data.clientAction === 'updated' && data.diff) {\n\t\t\t\t\tprocessOnChange(data.diff, data.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!monitorAgents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.clientAction !== 'removed' && 'diff' in data && !data.diff.status && !data.diff.statusLivechat) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (data.clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tconst agent = await Users.findOneAgentById<Pick<ILivechatAgent, 'status' | 'statusLivechat'>>(data.id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tstatusLivechat: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n\t\t\t\t\tif (serviceOnline) {\n\t\t\t\t\t\treturn onlineAgents.add(data.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tonlineAgents.remove(data.id);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tonlineAgents.remove(data.id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.integrations', async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updated':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.removeIntegration(data);\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\ttriggerHandler.removeIntegration({ _id: id });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.emailInbox', async () => {\n\t\t\tawait configureEmailInboxes();\n\t\t});\n\n\t\tif (!disableMsgRoundtripTracking) {\n\t\t\tthis.onEvent('watch.messages', async ({ message }) => {\n\t\t\t\tif (message?._updatedAt instanceof Date) {\n\t\t\t\t\tmetrics.messageRoundtripTime.observe(Date.now() - message._updatedAt.getTime());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasync started(): Promise<void> {\n\t\t// Even after server startup, client versions might not be updated yet, the only way\n\t\t// to make sure we can send the most up to date versions is using the publication below.\n\t\t// Since it receives each document one at a time, we have to store them to be able to send\n\t\t// them all when needed (i.e.: on ddp-streamer startup).\n\t\tMeteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n\t\t\tadded(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tchanged(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tonStop() {\n\t\t\t\t//\n\t\t\t},\n\t\t\tready() {\n\t\t\t\t//\n\t\t\t},\n\t\t});\n\t}\n\n\tasync getAutoUpdateClientVersions(): Promise<Record<string, AutoUpdateRecord>> {\n\t\treturn Object.fromEntries(clientVersionsStore);\n\t}\n\n\tasync getLoginServiceConfiguration(): Promise<LoginServiceConfiguration[]> {\n\t\treturn LoginServiceConfigurationModel.find({}, { projection: { secret: 0 } }).toArray();\n\t}\n\n\tasync callMethodWithToken(userId: string, token: string, method: string, args: any[]): Promise<void | any> {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!user) {\n\t\t\treturn {\n\t\t\t\tresult: Meteor.callAsync(method, ...args),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresult: Meteor.runAsUser(userId, () => Meteor.callAsync(method, ...args)),\n\t\t};\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus): Promise<void> {\n\t\treturn Livechat.notifyGuestStatusChanged(token, status);\n\t}\n\n\tasync getURL(path: string, params: Record<string, any> = {}, cloudDeepLinkUrl?: string): Promise<string> {\n\t\treturn getURL(path, params, cloudDeepLinkUrl);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/meteor/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/meteor/service.ts","inputSourceMap":{"version":3,"file":"server/services/meteor/service.ts","sourceRoot":"","sources":["server/services/meteor/service.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { AutoUpdateRecord, IMeteor } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, LoginServiceConfiguration, UserStatus } from '@rocket.chat/core-typings';\nimport { LoginServiceConfiguration as LoginServiceConfigurationModel, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { triggerHandler } from '../../../app/integrations/server/lib/triggerHandler';\nimport { Livechat } from '../../../app/livechat/server/lib/LivechatTyped';\nimport { onlineAgents, monitorAgents } from '../../../app/livechat/server/lib/stream/agentStatus';\nimport { metrics } from '../../../app/metrics/server';\nimport notifications from '../../../app/notifications/server/lib/Notifications';\nimport { settings } from '../../../app/settings/server';\nimport { use } from '../../../app/settings/server/Middleware';\nimport { setValue, updateValue } from '../../../app/settings/server/raw';\nimport { getURL } from '../../../app/utils/server/getURL';\nimport { configureEmailInboxes } from '../../features/EmailInbox/EmailInbox';\nimport { ListenersModule } from '../../modules/listeners/listeners.module';\n\ntype Callbacks = {\n\tadded(id: string, record: object): void;\n\tchanged(id: string, record: object): void;\n\tremoved(id: string): void;\n};\n\nlet processOnChange: (diff: Record<string, any>, id: string) => void;\n// eslint-disable-next-line no-undef\nconst disableOplog = !!(Package as any)['disable-oplog'];\nconst serviceConfigCallbacks = new Set<Callbacks>();\n\nconst disableMsgRoundtripTracking = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING).toLowerCase());\n\nif (disableOplog) {\n\t// Stores the callbacks for the disconnection reactivity bellow\n\tconst userCallbacks = new Map();\n\n\t// Overrides the native observe changes to prevent database polling and stores the callbacks\n\t// for the users' tokens to re-implement the reactivity based on our database listeners\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tMongoInternals.Connection.prototype._observeChanges = async function (\n\t\t{\n\t\t\tcollectionName,\n\t\t\tselector,\n\t\t\toptions = {},\n\t\t}: {\n\t\t\tcollectionName: string;\n\t\t\tselector: Record<string, any>;\n\t\t\toptions?: {\n\t\t\t\tprojection?: Record<string, number>;\n\t\t\t\tfields?: Record<string, number>;\n\t\t\t};\n\t\t},\n\t\t_ordered: boolean,\n\t\tcallbacks: Callbacks,\n\t): Promise<any> {\n\t\t// console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n\t\tlet cbs: Set<{ hashedToken: string; callbacks: Callbacks }>;\n\t\tlet data: { hashedToken: string; callbacks: Callbacks };\n\t\tif (callbacks?.added) {\n\t\t\tconst records = await mongo\n\t\t\t\t.rawCollection(collectionName)\n\t\t\t\t.find(selector, {\n\t\t\t\t\t...(options.projection || options.fields ? { projection: options.projection || options.fields } : {}),\n\t\t\t\t})\n\t\t\t\t.toArray();\n\n\t\t\tfor (const { _id, ...fields } of records) {\n\t\t\t\tcallbacks.added(String(_id), fields);\n\t\t\t}\n\n\t\t\tif (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n\t\t\t\tcbs = userCallbacks.get(selector._id) || new Set();\n\t\t\t\tdata = {\n\t\t\t\t\thashedToken: selector['services.resume.loginTokens.hashedToken'],\n\t\t\t\t\tcallbacks,\n\t\t\t\t};\n\n\t\t\t\tcbs.add(data);\n\t\t\t\tuserCallbacks.set(selector._id, cbs);\n\t\t\t}\n\t\t}\n\n\t\tif (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n\t\t\tserviceConfigCallbacks.add(callbacks);\n\t\t}\n\n\t\treturn {\n\t\t\tstop(): void {\n\t\t\t\tif (cbs) {\n\t\t\t\t\tcbs.delete(data);\n\t\t\t\t}\n\t\t\t\tserviceConfigCallbacks.delete(callbacks);\n\t\t\t},\n\t\t};\n\t};\n\n\t// Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n\t// associated was removed\n\tprocessOnChange = (diff: Record<string, any>, id: string): void => {\n\t\tif (!diff || !('services.resume.loginTokens' in diff)) {\n\t\t\treturn;\n\t\t}\n\t\tconst loginTokens: undefined | { hashedToken: string }[] = diff['services.resume.loginTokens'];\n\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);\n\n\t\tconst cbs = userCallbacks.get(id);\n\t\tif (cbs) {\n\t\t\t[...cbs]\n\t\t\t\t.filter(({ hashedToken }) => tokens === undefined || !tokens.includes(hashedToken))\n\t\t\t\t.forEach((item) => {\n\t\t\t\t\titem.callbacks.removed(id);\n\t\t\t\t\tcbs.delete(item);\n\t\t\t\t});\n\t\t}\n\t};\n}\n\nsettings.set = use(settings.set, (context, next) => {\n\tnext(...context);\n\tconst [record] = context;\n\tupdateValue(record._id, record);\n});\n\nconst clientVersionsStore = new Map<string, AutoUpdateRecord>();\n\nexport class MeteorService extends ServiceClassInternal implements IMeteor {\n\tprotected name = 'meteor';\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tnew ListenersModule(this, notifications);\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tsettings.set(setting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettings.set({ ...setting, value: undefined });\n\t\t\tsetValue(setting._id, undefined);\n\t\t});\n\n\t\tif (disableOplog) {\n\t\t\tthis.onEvent('watch.loginServiceConfiguration', ({ clientAction, id, data }) => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks.removed?.(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (data) {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks[clientAction === 'inserted' ? 'added' : 'changed']?.(id, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.users', async (data) => {\n\t\t\tif (disableOplog) {\n\t\t\t\tif (data.clientAction === 'updated' && data.diff) {\n\t\t\t\t\tprocessOnChange(data.diff, data.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!monitorAgents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.clientAction !== 'removed' && 'diff' in data && !data.diff.status && !data.diff.statusLivechat) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (data.clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tconst agent = await Users.findOneAgentById<Pick<ILivechatAgent, 'status' | 'statusLivechat'>>(data.id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tstatusLivechat: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n\t\t\t\t\tif (serviceOnline) {\n\t\t\t\t\t\treturn onlineAgents.add(data.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tonlineAgents.remove(data.id);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tonlineAgents.remove(data.id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.integrations', async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updated':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.removeIntegration(data);\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\ttriggerHandler.removeIntegration({ _id: id });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.emailInbox', async () => {\n\t\t\tawait configureEmailInboxes();\n\t\t});\n\n\t\tif (!disableMsgRoundtripTracking) {\n\t\t\tthis.onEvent('watch.messages', async ({ message }) => {\n\t\t\t\tif (message?._updatedAt instanceof Date) {\n\t\t\t\t\tmetrics.messageRoundtripTime.observe(Date.now() - message._updatedAt.getTime());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasync started(): Promise<void> {\n\t\t// Even after server startup, client versions might not be updated yet, the only way\n\t\t// to make sure we can send the most up to date versions is using the publication below.\n\t\t// Since it receives each document one at a time, we have to store them to be able to send\n\t\t// them all when needed (i.e.: on ddp-streamer startup).\n\t\tMeteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n\t\t\tadded(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tchanged(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tonStop() {\n\t\t\t\t//\n\t\t\t},\n\t\t\tready() {\n\t\t\t\t//\n\t\t\t},\n\t\t});\n\t}\n\n\tasync getAutoUpdateClientVersions(): Promise<Record<string, AutoUpdateRecord>> {\n\t\treturn Object.fromEntries(clientVersionsStore);\n\t}\n\n\tasync getLoginServiceConfiguration(): Promise<LoginServiceConfiguration[]> {\n\t\treturn LoginServiceConfigurationModel.find({}, { projection: { secret: 0 } }).toArray();\n\t}\n\n\tasync callMethodWithToken(userId: string, token: string, method: string, args: any[]): Promise<void | any> {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!user) {\n\t\t\treturn {\n\t\t\t\tresult: Meteor.callAsync(method, ...args),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresult: Meteor.runAsUser(userId, () => Meteor.callAsync(method, ...args)),\n\t\t};\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus): Promise<void> {\n\t\treturn Livechat.notifyGuestStatusChanged(token, status);\n\t}\n\n\tasync getURL(path: string, params: Record<string, any> = {}, cloudDeepLinkUrl?: string): Promise<string> {\n\t\treturn getURL(path, params, cloudDeepLinkUrl);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module1, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectWithoutProperties;\n    module1.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 0);\n    let _objectSpread;\n    module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 1);\n    const _excluded = [\"_id\"];\n    module1.export({\n      MeteorService: () => MeteorService\n    });\n    let api, ServiceClassInternal;\n    module1.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      },\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let LoginServiceConfigurationModel, Users;\n    module1.link(\"@rocket.chat/models\", {\n      LoginServiceConfiguration(v) {\n        LoginServiceConfigurationModel = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Meteor;\n    module1.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let MongoInternals;\n    module1.link(\"meteor/mongo\", {\n      MongoInternals(v) {\n        MongoInternals = v;\n      }\n    }, 3);\n    let triggerHandler;\n    module1.link(\"../../../app/integrations/server/lib/triggerHandler\", {\n      triggerHandler(v) {\n        triggerHandler = v;\n      }\n    }, 4);\n    let Livechat;\n    module1.link(\"../../../app/livechat/server/lib/LivechatTyped\", {\n      Livechat(v) {\n        Livechat = v;\n      }\n    }, 5);\n    let onlineAgents, monitorAgents;\n    module1.link(\"../../../app/livechat/server/lib/stream/agentStatus\", {\n      onlineAgents(v) {\n        onlineAgents = v;\n      },\n      monitorAgents(v) {\n        monitorAgents = v;\n      }\n    }, 6);\n    let metrics;\n    module1.link(\"../../../app/metrics/server\", {\n      metrics(v) {\n        metrics = v;\n      }\n    }, 7);\n    let notifications;\n    module1.link(\"../../../app/notifications/server/lib/Notifications\", {\n      default(v) {\n        notifications = v;\n      }\n    }, 8);\n    let settings;\n    module1.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 9);\n    let use;\n    module1.link(\"../../../app/settings/server/Middleware\", {\n      use(v) {\n        use = v;\n      }\n    }, 10);\n    let setValue, updateValue;\n    module1.link(\"../../../app/settings/server/raw\", {\n      setValue(v) {\n        setValue = v;\n      },\n      updateValue(v) {\n        updateValue = v;\n      }\n    }, 11);\n    let getURL;\n    module1.link(\"../../../app/utils/server/getURL\", {\n      getURL(v) {\n        getURL = v;\n      }\n    }, 12);\n    let configureEmailInboxes;\n    module1.link(\"../../features/EmailInbox/EmailInbox\", {\n      configureEmailInboxes(v) {\n        configureEmailInboxes = v;\n      }\n    }, 13);\n    let ListenersModule;\n    module1.link(\"../../modules/listeners/listeners.module\", {\n      ListenersModule(v) {\n        ListenersModule = v;\n      }\n    }, 14);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    let processOnChange;\n    // eslint-disable-next-line no-undef\n    const disableOplog = !!Package['disable-oplog'];\n    const serviceConfigCallbacks = new Set();\n    const disableMsgRoundtripTracking = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING).toLowerCase());\n    if (disableOplog) {\n      // Stores the callbacks for the disconnection reactivity bellow\n      const userCallbacks = new Map();\n      // Overrides the native observe changes to prevent database polling and stores the callbacks\n      // for the users' tokens to re-implement the reactivity based on our database listeners\n      const {\n        mongo\n      } = MongoInternals.defaultRemoteCollectionDriver();\n      MongoInternals.Connection.prototype._observeChanges = async function (_ref, _ordered, callbacks) {\n        let {\n          collectionName,\n          selector,\n          options = {}\n        } = _ref;\n        // console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n        let cbs;\n        let data;\n        if (callbacks !== null && callbacks !== void 0 && callbacks.added) {\n          const records = await mongo.rawCollection(collectionName).find(selector, _objectSpread({}, options.projection || options.fields ? {\n            projection: options.projection || options.fields\n          } : {})).toArray();\n          for (const _ref2 of records) {\n            const {\n                _id\n              } = _ref2,\n              fields = _objectWithoutProperties(_ref2, _excluded);\n            callbacks.added(String(_id), fields);\n          }\n          if (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n            cbs = userCallbacks.get(selector._id) || new Set();\n            data = {\n              hashedToken: selector['services.resume.loginTokens.hashedToken'],\n              callbacks\n            };\n            cbs.add(data);\n            userCallbacks.set(selector._id, cbs);\n          }\n        }\n        if (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n          serviceConfigCallbacks.add(callbacks);\n        }\n        return {\n          stop() {\n            if (cbs) {\n              cbs.delete(data);\n            }\n            serviceConfigCallbacks.delete(callbacks);\n          }\n        };\n      };\n      // Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n      // associated was removed\n      processOnChange = (diff, id) => {\n        if (!diff || !('services.resume.loginTokens' in diff)) {\n          return;\n        }\n        const loginTokens = diff['services.resume.loginTokens'];\n        const tokens = loginTokens === null || loginTokens === void 0 ? void 0 : loginTokens.map(_ref3 => {\n          let {\n            hashedToken\n          } = _ref3;\n          return hashedToken;\n        });\n        const cbs = userCallbacks.get(id);\n        if (cbs) {\n          [...cbs].filter(_ref4 => {\n            let {\n              hashedToken\n            } = _ref4;\n            return tokens === undefined || !tokens.includes(hashedToken);\n          }).forEach(item => {\n            item.callbacks.removed(id);\n            cbs.delete(item);\n          });\n        }\n      };\n    }\n    settings.set = use(settings.set, (context, next) => {\n      next(...context);\n      const [record] = context;\n      updateValue(record._id, record);\n    });\n    const clientVersionsStore = new Map();\n    class MeteorService extends ServiceClassInternal {\n      constructor() {\n        super();\n        this.name = 'meteor';\n        new ListenersModule(this, notifications);\n        this.onEvent('watch.settings', async _ref5 => {\n          let {\n            clientAction,\n            setting\n          } = _ref5;\n          if (clientAction !== 'removed') {\n            settings.set(setting);\n            return;\n          }\n          settings.set(_objectSpread(_objectSpread({}, setting), {}, {\n            value: undefined\n          }));\n          setValue(setting._id, undefined);\n        });\n        if (disableOplog) {\n          this.onEvent('watch.loginServiceConfiguration', _ref6 => {\n            let {\n              clientAction,\n              id,\n              data\n            } = _ref6;\n            if (clientAction === 'removed') {\n              serviceConfigCallbacks.forEach(callbacks => {\n                var _callbacks$removed;\n                (_callbacks$removed = callbacks.removed) === null || _callbacks$removed === void 0 ? void 0 : _callbacks$removed.call(callbacks, id);\n              });\n              return;\n            }\n            if (data) {\n              serviceConfigCallbacks.forEach(callbacks => {\n                var _callbacks;\n                (_callbacks = callbacks[clientAction === 'inserted' ? 'added' : 'changed']) === null || _callbacks === void 0 ? void 0 : _callbacks.call(callbacks, id, data);\n              });\n            }\n          });\n        }\n        this.onEvent('watch.users', async data => {\n          if (disableOplog) {\n            if (data.clientAction === 'updated' && data.diff) {\n              processOnChange(data.diff, data.id);\n            }\n          }\n          if (!monitorAgents) {\n            return;\n          }\n          if (data.clientAction !== 'removed' && 'diff' in data && !data.diff.status && !data.diff.statusLivechat) {\n            return;\n          }\n          switch (data.clientAction) {\n            case 'updated':\n            case 'inserted':\n              const agent = await Users.findOneAgentById(data.id, {\n                projection: {\n                  status: 1,\n                  statusLivechat: 1\n                }\n              });\n              const serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n              if (serviceOnline) {\n                return onlineAgents.add(data.id);\n              }\n              onlineAgents.remove(data.id);\n              break;\n            case 'removed':\n              onlineAgents.remove(data.id);\n              break;\n          }\n        });\n        this.onEvent('watch.integrations', async _ref7 => {\n          let {\n            clientAction,\n            id,\n            data\n          } = _ref7;\n          switch (clientAction) {\n            case 'inserted':\n              if (data.type === 'webhook-outgoing') {\n                triggerHandler.addIntegration(data);\n              }\n              break;\n            case 'updated':\n              if (data.type === 'webhook-outgoing') {\n                triggerHandler.removeIntegration(data);\n                triggerHandler.addIntegration(data);\n              }\n              break;\n            case 'removed':\n              triggerHandler.removeIntegration({\n                _id: id\n              });\n              break;\n          }\n        });\n        this.onEvent('watch.emailInbox', async () => {\n          await configureEmailInboxes();\n        });\n        if (!disableMsgRoundtripTracking) {\n          this.onEvent('watch.messages', async _ref8 => {\n            let {\n              message\n            } = _ref8;\n            if ((message === null || message === void 0 ? void 0 : message._updatedAt) instanceof Date) {\n              metrics.messageRoundtripTime.observe(Date.now() - message._updatedAt.getTime());\n            }\n          });\n        }\n      }\n      async started() {\n        // Even after server startup, client versions might not be updated yet, the only way\n        // to make sure we can send the most up to date versions is using the publication below.\n        // Since it receives each document one at a time, we have to store them to be able to send\n        // them all when needed (i.e.: on ddp-streamer startup).\n        Meteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n          added(_collection, _id, version) {\n            clientVersionsStore.set(_id, version);\n            void api.broadcast('meteor.clientVersionUpdated', version);\n          },\n          changed(_collection, _id, version) {\n            clientVersionsStore.set(_id, version);\n            void api.broadcast('meteor.clientVersionUpdated', version);\n          },\n          onStop() {\n            //\n          },\n          ready() {\n            //\n          }\n        });\n      }\n      async getAutoUpdateClientVersions() {\n        return Object.fromEntries(clientVersionsStore);\n      }\n      async getLoginServiceConfiguration() {\n        return LoginServiceConfigurationModel.find({}, {\n          projection: {\n            secret: 0\n          }\n        }).toArray();\n      }\n      async callMethodWithToken(userId, token, method, args) {\n        const user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!user) {\n          return {\n            result: Meteor.callAsync(method, ...args)\n          };\n        }\n        return {\n          result: Meteor.runAsUser(userId, () => Meteor.callAsync(method, ...args))\n        };\n      }\n      async notifyGuestStatusChanged(token, status) {\n        return Livechat.notifyGuestStatusChanged(token, status);\n      }\n      async getURL(path) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let cloudDeepLinkUrl = arguments.length > 2 ? arguments[2] : undefined;\n        return getURL(path, params, cloudDeepLinkUrl);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectWithoutProperties","module1","link","default","v","_objectSpread","_excluded","export","MeteorService","api","ServiceClassInternal","LoginServiceConfigurationModel","Users","LoginServiceConfiguration","Meteor","MongoInternals","triggerHandler","Livechat","onlineAgents","monitorAgents","metrics","notifications","settings","use","setValue","updateValue","getURL","configureEmailInboxes","ListenersModule","__reifyWaitForDeps__","processOnChange","disableOplog","Package","serviceConfigCallbacks","Set","disableMsgRoundtripTracking","includes","String","process","env","DISABLE_MESSAGE_ROUNDTRIP_TRACKING","toLowerCase","userCallbacks","Map","mongo","defaultRemoteCollectionDriver","Connection","prototype","_observeChanges","_ref","_ordered","callbacks","collectionName","selector","options","cbs","data","added","records","rawCollection","find","projection","fields","toArray","_ref2","_id","get","hashedToken","add","set","stop","delete","diff","id","loginTokens","tokens","map","_ref3","filter","_ref4","undefined","forEach","item","removed","context","next","record","clientVersionsStore","constructor","name","onEvent","_ref5","clientAction","setting","value","_ref6","_callbacks$removed","call","_callbacks","status","statusLivechat","agent","findOneAgentById","serviceOnline","remove","_ref7","type","addIntegration","removeIntegration","_ref8","message","_updatedAt","Date","messageRoundtripTime","observe","now","getTime","started","server","publish_handlers","meteor_autoupdate_clientVersions","_collection","version","broadcast","changed","onStop","ready","getAutoUpdateClientVersions","Object","fromEntries","getLoginServiceConfiguration","secret","callMethodWithToken","userId","token","method","args","user","findOneByIdAndLoginHashedToken","result","callAsync","runAsUser","notifyGuestStatusChanged","path","params","arguments","length","cloudDeepLinkUrl","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/meteor/service.ts"],"sourcesContent":["import { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport type { AutoUpdateRecord, IMeteor } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, LoginServiceConfiguration, UserStatus } from '@rocket.chat/core-typings';\nimport { LoginServiceConfiguration as LoginServiceConfigurationModel, Users } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\nimport { MongoInternals } from 'meteor/mongo';\n\nimport { triggerHandler } from '../../../app/integrations/server/lib/triggerHandler';\nimport { Livechat } from '../../../app/livechat/server/lib/LivechatTyped';\nimport { onlineAgents, monitorAgents } from '../../../app/livechat/server/lib/stream/agentStatus';\nimport { metrics } from '../../../app/metrics/server';\nimport notifications from '../../../app/notifications/server/lib/Notifications';\nimport { settings } from '../../../app/settings/server';\nimport { use } from '../../../app/settings/server/Middleware';\nimport { setValue, updateValue } from '../../../app/settings/server/raw';\nimport { getURL } from '../../../app/utils/server/getURL';\nimport { configureEmailInboxes } from '../../features/EmailInbox/EmailInbox';\nimport { ListenersModule } from '../../modules/listeners/listeners.module';\n\ntype Callbacks = {\n\tadded(id: string, record: object): void;\n\tchanged(id: string, record: object): void;\n\tremoved(id: string): void;\n};\n\nlet processOnChange: (diff: Record<string, any>, id: string) => void;\n// eslint-disable-next-line no-undef\nconst disableOplog = !!(Package as any)['disable-oplog'];\nconst serviceConfigCallbacks = new Set<Callbacks>();\n\nconst disableMsgRoundtripTracking = ['yes', 'true'].includes(String(process.env.DISABLE_MESSAGE_ROUNDTRIP_TRACKING).toLowerCase());\n\nif (disableOplog) {\n\t// Stores the callbacks for the disconnection reactivity bellow\n\tconst userCallbacks = new Map();\n\n\t// Overrides the native observe changes to prevent database polling and stores the callbacks\n\t// for the users' tokens to re-implement the reactivity based on our database listeners\n\tconst { mongo } = MongoInternals.defaultRemoteCollectionDriver();\n\tMongoInternals.Connection.prototype._observeChanges = async function (\n\t\t{\n\t\t\tcollectionName,\n\t\t\tselector,\n\t\t\toptions = {},\n\t\t}: {\n\t\t\tcollectionName: string;\n\t\t\tselector: Record<string, any>;\n\t\t\toptions?: {\n\t\t\t\tprojection?: Record<string, number>;\n\t\t\t\tfields?: Record<string, number>;\n\t\t\t};\n\t\t},\n\t\t_ordered: boolean,\n\t\tcallbacks: Callbacks,\n\t): Promise<any> {\n\t\t// console.error('Connection.Collection.prototype._observeChanges', collectionName, selector, options);\n\t\tlet cbs: Set<{ hashedToken: string; callbacks: Callbacks }>;\n\t\tlet data: { hashedToken: string; callbacks: Callbacks };\n\t\tif (callbacks?.added) {\n\t\t\tconst records = await mongo\n\t\t\t\t.rawCollection(collectionName)\n\t\t\t\t.find(selector, {\n\t\t\t\t\t...(options.projection || options.fields ? { projection: options.projection || options.fields } : {}),\n\t\t\t\t})\n\t\t\t\t.toArray();\n\n\t\t\tfor (const { _id, ...fields } of records) {\n\t\t\t\tcallbacks.added(String(_id), fields);\n\t\t\t}\n\n\t\t\tif (collectionName === 'users' && selector['services.resume.loginTokens.hashedToken']) {\n\t\t\t\tcbs = userCallbacks.get(selector._id) || new Set();\n\t\t\t\tdata = {\n\t\t\t\t\thashedToken: selector['services.resume.loginTokens.hashedToken'],\n\t\t\t\t\tcallbacks,\n\t\t\t\t};\n\n\t\t\t\tcbs.add(data);\n\t\t\t\tuserCallbacks.set(selector._id, cbs);\n\t\t\t}\n\t\t}\n\n\t\tif (collectionName === 'meteor_accounts_loginServiceConfiguration') {\n\t\t\tserviceConfigCallbacks.add(callbacks);\n\t\t}\n\n\t\treturn {\n\t\t\tstop(): void {\n\t\t\t\tif (cbs) {\n\t\t\t\t\tcbs.delete(data);\n\t\t\t\t}\n\t\t\t\tserviceConfigCallbacks.delete(callbacks);\n\t\t\t},\n\t\t};\n\t};\n\n\t// Re-implement meteor's reactivity that uses observe to disconnect sessions when the token\n\t// associated was removed\n\tprocessOnChange = (diff: Record<string, any>, id: string): void => {\n\t\tif (!diff || !('services.resume.loginTokens' in diff)) {\n\t\t\treturn;\n\t\t}\n\t\tconst loginTokens: undefined | { hashedToken: string }[] = diff['services.resume.loginTokens'];\n\t\tconst tokens = loginTokens?.map(({ hashedToken }) => hashedToken);\n\n\t\tconst cbs = userCallbacks.get(id);\n\t\tif (cbs) {\n\t\t\t[...cbs]\n\t\t\t\t.filter(({ hashedToken }) => tokens === undefined || !tokens.includes(hashedToken))\n\t\t\t\t.forEach((item) => {\n\t\t\t\t\titem.callbacks.removed(id);\n\t\t\t\t\tcbs.delete(item);\n\t\t\t\t});\n\t\t}\n\t};\n}\n\nsettings.set = use(settings.set, (context, next) => {\n\tnext(...context);\n\tconst [record] = context;\n\tupdateValue(record._id, record);\n});\n\nconst clientVersionsStore = new Map<string, AutoUpdateRecord>();\n\nexport class MeteorService extends ServiceClassInternal implements IMeteor {\n\tprotected name = 'meteor';\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tnew ListenersModule(this, notifications);\n\n\t\tthis.onEvent('watch.settings', async ({ clientAction, setting }): Promise<void> => {\n\t\t\tif (clientAction !== 'removed') {\n\t\t\t\tsettings.set(setting);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsettings.set({ ...setting, value: undefined });\n\t\t\tsetValue(setting._id, undefined);\n\t\t});\n\n\t\tif (disableOplog) {\n\t\t\tthis.onEvent('watch.loginServiceConfiguration', ({ clientAction, id, data }) => {\n\t\t\t\tif (clientAction === 'removed') {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks.removed?.(id);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (data) {\n\t\t\t\t\tserviceConfigCallbacks.forEach((callbacks) => {\n\t\t\t\t\t\tcallbacks[clientAction === 'inserted' ? 'added' : 'changed']?.(id, data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.onEvent('watch.users', async (data) => {\n\t\t\tif (disableOplog) {\n\t\t\t\tif (data.clientAction === 'updated' && data.diff) {\n\t\t\t\t\tprocessOnChange(data.diff, data.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!monitorAgents) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.clientAction !== 'removed' && 'diff' in data && !data.diff.status && !data.diff.statusLivechat) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (data.clientAction) {\n\t\t\t\tcase 'updated':\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tconst agent = await Users.findOneAgentById<Pick<ILivechatAgent, 'status' | 'statusLivechat'>>(data.id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tstatus: 1,\n\t\t\t\t\t\t\tstatusLivechat: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tconst serviceOnline = agent && agent.status !== 'offline' && agent.statusLivechat === 'available';\n\n\t\t\t\t\tif (serviceOnline) {\n\t\t\t\t\t\treturn onlineAgents.add(data.id);\n\t\t\t\t\t}\n\n\t\t\t\t\tonlineAgents.remove(data.id);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\tonlineAgents.remove(data.id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.integrations', async ({ clientAction, id, data }) => {\n\t\t\tswitch (clientAction) {\n\t\t\t\tcase 'inserted':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'updated':\n\t\t\t\t\tif (data.type === 'webhook-outgoing') {\n\t\t\t\t\t\ttriggerHandler.removeIntegration(data);\n\t\t\t\t\t\ttriggerHandler.addIntegration(data);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'removed':\n\t\t\t\t\ttriggerHandler.removeIntegration({ _id: id });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\tthis.onEvent('watch.emailInbox', async () => {\n\t\t\tawait configureEmailInboxes();\n\t\t});\n\n\t\tif (!disableMsgRoundtripTracking) {\n\t\t\tthis.onEvent('watch.messages', async ({ message }) => {\n\t\t\t\tif (message?._updatedAt instanceof Date) {\n\t\t\t\t\tmetrics.messageRoundtripTime.observe(Date.now() - message._updatedAt.getTime());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasync started(): Promise<void> {\n\t\t// Even after server startup, client versions might not be updated yet, the only way\n\t\t// to make sure we can send the most up to date versions is using the publication below.\n\t\t// Since it receives each document one at a time, we have to store them to be able to send\n\t\t// them all when needed (i.e.: on ddp-streamer startup).\n\t\tMeteor.server.publish_handlers.meteor_autoupdate_clientVersions.call({\n\t\t\tadded(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tchanged(_collection: string, _id: string, version: AutoUpdateRecord) {\n\t\t\t\tclientVersionsStore.set(_id, version);\n\t\t\t\tvoid api.broadcast('meteor.clientVersionUpdated', version);\n\t\t\t},\n\t\t\tonStop() {\n\t\t\t\t//\n\t\t\t},\n\t\t\tready() {\n\t\t\t\t//\n\t\t\t},\n\t\t});\n\t}\n\n\tasync getAutoUpdateClientVersions(): Promise<Record<string, AutoUpdateRecord>> {\n\t\treturn Object.fromEntries(clientVersionsStore);\n\t}\n\n\tasync getLoginServiceConfiguration(): Promise<LoginServiceConfiguration[]> {\n\t\treturn LoginServiceConfigurationModel.find({}, { projection: { secret: 0 } }).toArray();\n\t}\n\n\tasync callMethodWithToken(userId: string, token: string, method: string, args: any[]): Promise<void | any> {\n\t\tconst user = await Users.findOneByIdAndLoginHashedToken(userId, token, {\n\t\t\tprojection: { _id: 1 },\n\t\t});\n\t\tif (!user) {\n\t\t\treturn {\n\t\t\t\tresult: Meteor.callAsync(method, ...args),\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tresult: Meteor.runAsUser(userId, () => Meteor.callAsync(method, ...args)),\n\t\t};\n\t}\n\n\tasync notifyGuestStatusChanged(token: string, status: UserStatus): Promise<void> {\n\t\treturn Livechat.notifyGuestStatusChanged(token, status);\n\t}\n\n\tasync getURL(path: string, params: Record<string, any> = {}, cloudDeepLinkUrl?: string): Promise<string> {\n\t\treturn getURL(path, params, cloudDeepLinkUrl);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8f2b1c70e86d1239c12f6cd78a706bbd66a5432a"}
