{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/room.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/room.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/room.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/room.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/room.ts"],"names":[],"mappings":"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","sourcesContent":["import { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IOmnichannelInquiryExtraData, IUser, SelectedAgent, TransferByData } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users, LivechatRooms, Messages } from '@rocket.chat/models';\nimport {\n\tisLiveChatRoomForwardProps,\n\tisPOSTLivechatRoomCloseParams,\n\tisPOSTLivechatRoomTransferParams,\n\tisPOSTLivechatRoomSurveyParams,\n\tisLiveChatRoomJoinProps,\n\tisLiveChatRoomSaveInfoProps,\n\tisPOSTLivechatRoomCloseByUserParams,\n} from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\nimport { API } from '../../../../api/server';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { canAccessRoomAsync } from '../../../../authorization/server';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../../lib/server/functions/addUserToRoom';\nimport { closeLivechatRoom } from '../../../../lib/server/functions/closeLivechatRoom';\nimport { settings as rcSettings } from '../../../../settings/server';\nimport { normalizeTransferredByData } from '../../lib/Helper';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport type { CloseRoomParams } from '../../lib/localTypes';\nimport { findGuest, findRoom, settings, findAgent, onCheckRoomParams } from '../lib/livechat';\n\nconst isAgentWithInfo = (agentObj: ILivechatAgent | { hiddenInfo: boolean }): agentObj is ILivechatAgent => !('hiddenInfo' in agentObj);\n\nAPI.v1.addRoute(\n\t'livechat/room',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\t// I'll temporary use check for validation, as validateParams doesnt support what's being done here\n\t\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\t\t\ttoken: String,\n\t\t\t\trid: Match.Maybe(String),\n\t\t\t\tagentId: Match.Maybe(String),\n\t\t\t});\n\n\t\t\tcheck(this.queryParams, extraCheckParams as any);\n\n\t\t\tconst { token, rid, agentId, ...extraParams } = this.queryParams;\n\n\t\t\tconst guest = token && (await findGuest(token));\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await LivechatRooms.findOneOpenByVisitorToken(token, {});\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\n\t\t\t\tlet agent: SelectedAgent | undefined;\n\t\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\t\tif (agentObj) {\n\t\t\t\t\tif (isAgentWithInfo(agentObj)) {\n\t\t\t\t\t\tconst { username = undefined } = agentObj;\n\t\t\t\t\t\tagent = { agentId, username };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tagent = { agentId };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomInfo = {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t...(isWidget(this.request.headers)\n\t\t\t\t\t\t\t? { type: OmnichannelSourceType.WIDGET, destination: this.request.headers.host }\n\t\t\t\t\t\t\t: { type: OmnichannelSourceType.API }),\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst newRoom = await LivechatTyped.createRoom({\n\t\t\t\t\tvisitor: guest,\n\t\t\t\t\troomInfo,\n\t\t\t\t\tagent,\n\t\t\t\t\textraData: extraParams as IOmnichannelInquiryExtraData,\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\troom: newRoom,\n\t\t\t\t\tnewRoom: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(rid, token, {});\n\t\t\tif (!froom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room: froom, newRoom: false });\n\t\t},\n\t},\n);\n\n// Note: use this route if a visitor is closing a room\n// If a RC user(like eg agent) is closing a room, use the `livechat/room.closeByUser` route\nAPI.v1.addRoute(\n\t'livechat/room.close',\n\t{ validateParams: isPOSTLivechatRoomCloseParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token } = this.bodyParams;\n\n\t\t\tif (!rcSettings.get('Omnichannel_allow_visitors_to_close_conversation')) {\n\t\t\t\tthrow new Error('error-not-allowed-to-close-conversation');\n\t\t\t}\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });\n\n\t\t\tconst options: CloseRoomParams['options'] = {};\n\t\t\tif (room.servedBy) {\n\t\t\t\tconst servingAgent: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset' | 'settings' | 'language'> | null =\n\t\t\t\t\tawait Users.findOneById(room.servedBy._id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\t\t\tsettings: 1,\n\t\t\t\t\t\t\tlanguage: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\tif (servingAgent?.settings?.preferences?.omnichannelTranscriptPDF) {\n\t\t\t\t\toptions.pdfTranscript = {\n\t\t\t\t\t\trequestedBy: servingAgent._id,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// We'll send the transcript by email only if the setting is disabled (that means, we're not asking the user if he wants to receive the transcript by email)\n\t\t\t\t// And the agent has the preference enabled to send the transcript by email and the visitor has an email address\n\t\t\t\t// When Livechat_enable_transcript is enabled, the email will be sent via livechat/transcript route\n\t\t\t\tif (\n\t\t\t\t\t!rcSettings.get<boolean>('Livechat_enable_transcript') &&\n\t\t\t\t\tservingAgent?.settings?.preferences?.omnichannelTranscriptEmail &&\n\t\t\t\t\tvisitor.visitorEmails?.length &&\n\t\t\t\t\tvisitor.visitorEmails?.[0]?.address\n\t\t\t\t) {\n\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst t = i18n.getFixedT(language);\n\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\n\t\t\t\t\toptions.emailTranscript = {\n\t\t\t\t\t\tsendToVisitor: true,\n\t\t\t\t\t\trequestData: {\n\t\t\t\t\t\t\temail: visitorEmail,\n\t\t\t\t\t\t\trequestedAt: new Date(),\n\t\t\t\t\t\t\trequestedBy: servingAgent,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait LivechatTyped.closeRoom({ visitor, room, comment, options });\n\n\t\t\treturn API.v1.success({ rid, comment });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.closeByUser',\n\t{\n\t\tvalidateParams: isPOSTLivechatRoomCloseByUserParams,\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['close-livechat-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, comment, tags, generateTranscriptPdf, transcriptEmail } = this.bodyParams;\n\n\t\t\tawait closeLivechatRoom(this.user, rid, { comment, tags, generateTranscriptPdf, transcriptEmail });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.transfer',\n\t{ validateParams: isPOSTLivechatRoomTransferParams, deprecation: { version: '7.0.0' } },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, department } = this.bodyParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tlet room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\t// update visited page history to not expire\n\t\t\tawait Messages.keepHistoryForToken(token);\n\n\t\t\tconst { _id, username, name } = guest;\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\n\t\t\tif (!(await LivechatTyped.transfer(room, guest, { departmentId: department, transferredBy }))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\troom = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.survey',\n\t{ validateParams: isPOSTLivechatRoomSurveyParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, data } = this.bodyParams;\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst config = await settings();\n\t\t\tif (!config.survey?.items || !config.survey.values) {\n\t\t\t\tthrow new Error('invalid-livechat-config');\n\t\t\t}\n\n\t\t\tconst updateData: { [k: string]: string } = {};\n\t\t\tfor (const item of data) {\n\t\t\t\tif ((config.survey.items.includes(item.name) && config.survey.values.includes(item.value)) || item.name === 'additionalFeedback') {\n\t\t\t\t\tupdateData[item.name] = item.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(updateData).length === 0) {\n\t\t\t\tthrow new Error('invalid-data');\n\t\t\t}\n\n\t\t\tif (!(await LivechatRooms.updateSurveyFeedbackById(room._id, updateData))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({ rid, data: updateData });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.forward',\n\t{ authRequired: true, permissionsRequired: ['view-l-room', 'transfer-livechat-guest'], validateParams: isLiveChatRoomForwardProps },\n\t{\n\t\tasync post() {\n\t\t\tconst transferData = this.bodyParams as typeof this.bodyParams & {\n\t\t\t\ttransferredBy: TransferByData;\n\t\t\t\ttransferredTo?: { _id: string; username?: string; name?: string };\n\t\t\t};\n\n\t\t\tconst room = await LivechatRooms.findOneById(this.bodyParams.roomId);\n\t\t\tif (!room || room.t !== 'l') {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v?._id);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-visitor');\n\t\t\t}\n\n\t\t\ttransferData.transferredBy = normalizeTransferredByData(this.user, room);\n\t\t\tif (transferData.userId) {\n\t\t\t\tconst userToTransfer = await Users.findOneById(transferData.userId);\n\t\t\t\tif (userToTransfer) {\n\t\t\t\t\ttransferData.transferredTo = {\n\t\t\t\t\t\t_id: userToTransfer._id,\n\t\t\t\t\t\tusername: userToTransfer.username,\n\t\t\t\t\t\tname: userToTransfer.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst chatForwardedResult = await LivechatTyped.transfer(room, guest, transferData);\n\t\t\tif (!chatForwardedResult) {\n\t\t\t\tthrow new Error('error-forwarding-chat');\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.join',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomJoinProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tconst { user } = this;\n\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tconst room = await LivechatRooms.findOneById(roomId);\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\tawait addUserToRoom(roomId, user);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.saveInfo',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomSaveInfoProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomData, guestData } = this.bodyParams;\n\t\t\tconst room = await LivechatRooms.findOneById(roomData._id);\n\t\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(!room.servedBy || room.servedBy._id !== this.userId) &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'save-others-livechat-room-info'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (room.sms) {\n\t\t\t\tdelete guestData.phone;\n\t\t\t}\n\n\t\t\t// We want this both operations to be concurrent, so we have to go with Promise.allSettled\n\t\t\tconst result = await Promise.allSettled([LivechatTyped.saveGuest(guestData, this.userId), LivechatTyped.saveRoomInfo(roomData)]);\n\n\t\t\tconst firstError = result.find((item) => item.status === 'rejected');\n\t\t\tif (firstError) {\n\t\t\t\tthrow new Error((firstError as PromiseRejectedResult).reason.error);\n\t\t\t}\n\n\t\t\tawait callbacks.run('livechat.saveInfo', await LivechatRooms.findOneById(roomData._id), {\n\t\t\t\tuser: this.user,\n\t\t\t\toldRoom: room,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/room.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/room.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/room.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/room.ts"],"names":[],"mappings":"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","sourcesContent":["import { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IOmnichannelInquiryExtraData, IUser, SelectedAgent, TransferByData } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users, LivechatRooms, Messages } from '@rocket.chat/models';\nimport {\n\tisLiveChatRoomForwardProps,\n\tisPOSTLivechatRoomCloseParams,\n\tisPOSTLivechatRoomTransferParams,\n\tisPOSTLivechatRoomSurveyParams,\n\tisLiveChatRoomJoinProps,\n\tisLiveChatRoomSaveInfoProps,\n\tisPOSTLivechatRoomCloseByUserParams,\n} from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\nimport { API } from '../../../../api/server';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { canAccessRoomAsync } from '../../../../authorization/server';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../../lib/server/functions/addUserToRoom';\nimport { closeLivechatRoom } from '../../../../lib/server/functions/closeLivechatRoom';\nimport { settings as rcSettings } from '../../../../settings/server';\nimport { normalizeTransferredByData } from '../../lib/Helper';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport type { CloseRoomParams } from '../../lib/localTypes';\nimport { findGuest, findRoom, settings, findAgent, onCheckRoomParams } from '../lib/livechat';\n\nconst isAgentWithInfo = (agentObj: ILivechatAgent | { hiddenInfo: boolean }): agentObj is ILivechatAgent => !('hiddenInfo' in agentObj);\n\nAPI.v1.addRoute(\n\t'livechat/room',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\t// I'll temporary use check for validation, as validateParams doesnt support what's being done here\n\t\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\t\t\ttoken: String,\n\t\t\t\trid: Match.Maybe(String),\n\t\t\t\tagentId: Match.Maybe(String),\n\t\t\t});\n\n\t\t\tcheck(this.queryParams, extraCheckParams as any);\n\n\t\t\tconst { token, rid, agentId, ...extraParams } = this.queryParams;\n\n\t\t\tconst guest = token && (await findGuest(token));\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await LivechatRooms.findOneOpenByVisitorToken(token, {});\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\n\t\t\t\tlet agent: SelectedAgent | undefined;\n\t\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\t\tif (agentObj) {\n\t\t\t\t\tif (isAgentWithInfo(agentObj)) {\n\t\t\t\t\t\tconst { username = undefined } = agentObj;\n\t\t\t\t\t\tagent = { agentId, username };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tagent = { agentId };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomInfo = {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t...(isWidget(this.request.headers)\n\t\t\t\t\t\t\t? { type: OmnichannelSourceType.WIDGET, destination: this.request.headers.host }\n\t\t\t\t\t\t\t: { type: OmnichannelSourceType.API }),\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst newRoom = await LivechatTyped.createRoom({\n\t\t\t\t\tvisitor: guest,\n\t\t\t\t\troomInfo,\n\t\t\t\t\tagent,\n\t\t\t\t\textraData: extraParams as IOmnichannelInquiryExtraData,\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\troom: newRoom,\n\t\t\t\t\tnewRoom: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(rid, token, {});\n\t\t\tif (!froom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room: froom, newRoom: false });\n\t\t},\n\t},\n);\n\n// Note: use this route if a visitor is closing a room\n// If a RC user(like eg agent) is closing a room, use the `livechat/room.closeByUser` route\nAPI.v1.addRoute(\n\t'livechat/room.close',\n\t{ validateParams: isPOSTLivechatRoomCloseParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token } = this.bodyParams;\n\n\t\t\tif (!rcSettings.get('Omnichannel_allow_visitors_to_close_conversation')) {\n\t\t\t\tthrow new Error('error-not-allowed-to-close-conversation');\n\t\t\t}\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });\n\n\t\t\tconst options: CloseRoomParams['options'] = {};\n\t\t\tif (room.servedBy) {\n\t\t\t\tconst servingAgent: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset' | 'settings' | 'language'> | null =\n\t\t\t\t\tawait Users.findOneById(room.servedBy._id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\t\t\tsettings: 1,\n\t\t\t\t\t\t\tlanguage: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\tif (servingAgent?.settings?.preferences?.omnichannelTranscriptPDF) {\n\t\t\t\t\toptions.pdfTranscript = {\n\t\t\t\t\t\trequestedBy: servingAgent._id,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// We'll send the transcript by email only if the setting is disabled (that means, we're not asking the user if he wants to receive the transcript by email)\n\t\t\t\t// And the agent has the preference enabled to send the transcript by email and the visitor has an email address\n\t\t\t\t// When Livechat_enable_transcript is enabled, the email will be sent via livechat/transcript route\n\t\t\t\tif (\n\t\t\t\t\t!rcSettings.get<boolean>('Livechat_enable_transcript') &&\n\t\t\t\t\tservingAgent?.settings?.preferences?.omnichannelTranscriptEmail &&\n\t\t\t\t\tvisitor.visitorEmails?.length &&\n\t\t\t\t\tvisitor.visitorEmails?.[0]?.address\n\t\t\t\t) {\n\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst t = i18n.getFixedT(language);\n\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\n\t\t\t\t\toptions.emailTranscript = {\n\t\t\t\t\t\tsendToVisitor: true,\n\t\t\t\t\t\trequestData: {\n\t\t\t\t\t\t\temail: visitorEmail,\n\t\t\t\t\t\t\trequestedAt: new Date(),\n\t\t\t\t\t\t\trequestedBy: servingAgent,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait LivechatTyped.closeRoom({ visitor, room, comment, options });\n\n\t\t\treturn API.v1.success({ rid, comment });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.closeByUser',\n\t{\n\t\tvalidateParams: isPOSTLivechatRoomCloseByUserParams,\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['close-livechat-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, comment, tags, generateTranscriptPdf, transcriptEmail } = this.bodyParams;\n\n\t\t\tawait closeLivechatRoom(this.user, rid, { comment, tags, generateTranscriptPdf, transcriptEmail });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.transfer',\n\t{ validateParams: isPOSTLivechatRoomTransferParams, deprecation: { version: '7.0.0' } },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, department } = this.bodyParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tlet room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\t// update visited page history to not expire\n\t\t\tawait Messages.keepHistoryForToken(token);\n\n\t\t\tconst { _id, username, name } = guest;\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\n\t\t\tif (!(await LivechatTyped.transfer(room, guest, { departmentId: department, transferredBy }))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\troom = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.survey',\n\t{ validateParams: isPOSTLivechatRoomSurveyParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, data } = this.bodyParams;\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst config = await settings();\n\t\t\tif (!config.survey?.items || !config.survey.values) {\n\t\t\t\tthrow new Error('invalid-livechat-config');\n\t\t\t}\n\n\t\t\tconst updateData: { [k: string]: string } = {};\n\t\t\tfor (const item of data) {\n\t\t\t\tif ((config.survey.items.includes(item.name) && config.survey.values.includes(item.value)) || item.name === 'additionalFeedback') {\n\t\t\t\t\tupdateData[item.name] = item.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(updateData).length === 0) {\n\t\t\t\tthrow new Error('invalid-data');\n\t\t\t}\n\n\t\t\tif (!(await LivechatRooms.updateSurveyFeedbackById(room._id, updateData))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({ rid, data: updateData });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.forward',\n\t{ authRequired: true, permissionsRequired: ['view-l-room', 'transfer-livechat-guest'], validateParams: isLiveChatRoomForwardProps },\n\t{\n\t\tasync post() {\n\t\t\tconst transferData = this.bodyParams as typeof this.bodyParams & {\n\t\t\t\ttransferredBy: TransferByData;\n\t\t\t\ttransferredTo?: { _id: string; username?: string; name?: string };\n\t\t\t};\n\n\t\t\tconst room = await LivechatRooms.findOneById(this.bodyParams.roomId);\n\t\t\tif (!room || room.t !== 'l') {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v?._id);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-visitor');\n\t\t\t}\n\n\t\t\ttransferData.transferredBy = normalizeTransferredByData(this.user, room);\n\t\t\tif (transferData.userId) {\n\t\t\t\tconst userToTransfer = await Users.findOneById(transferData.userId);\n\t\t\t\tif (userToTransfer) {\n\t\t\t\t\ttransferData.transferredTo = {\n\t\t\t\t\t\t_id: userToTransfer._id,\n\t\t\t\t\t\tusername: userToTransfer.username,\n\t\t\t\t\t\tname: userToTransfer.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst chatForwardedResult = await LivechatTyped.transfer(room, guest, transferData);\n\t\t\tif (!chatForwardedResult) {\n\t\t\t\tthrow new Error('error-forwarding-chat');\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.join',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomJoinProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tconst { user } = this;\n\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tconst room = await LivechatRooms.findOneById(roomId);\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\tawait addUserToRoom(roomId, user);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.saveInfo',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomSaveInfoProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomData, guestData } = this.bodyParams;\n\t\t\tconst room = await LivechatRooms.findOneById(roomData._id);\n\t\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(!room.servedBy || room.servedBy._id !== this.userId) &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'save-others-livechat-room-info'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (room.sms) {\n\t\t\t\tdelete guestData.phone;\n\t\t\t}\n\n\t\t\t// We want this both operations to be concurrent, so we have to go with Promise.allSettled\n\t\t\tconst result = await Promise.allSettled([LivechatTyped.saveGuest(guestData, this.userId), LivechatTyped.saveRoomInfo(roomData)]);\n\n\t\t\tconst firstError = result.find((item) => item.status === 'rejected');\n\t\t\tif (firstError) {\n\t\t\t\tthrow new Error((firstError as PromiseRejectedResult).reason.error);\n\t\t\t}\n\n\t\t\tawait callbacks.run('livechat.saveInfo', await LivechatRooms.findOneById(roomData._id), {\n\t\t\t\tuser: this.user,\n\t\t\t\toldRoom: room,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    const _excluded = [\"token\", \"rid\", \"agentId\"];\n    let Omnichannel;\n    module.link(\"@rocket.chat/core-services\", {\n      Omnichannel(v) {\n        Omnichannel = v;\n      }\n    }, 0);\n    let isOmnichannelRoom, OmnichannelSourceType;\n    module.link(\"@rocket.chat/core-typings\", {\n      isOmnichannelRoom(v) {\n        isOmnichannelRoom = v;\n      },\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      }\n    }, 1);\n    let LivechatVisitors, Users, LivechatRooms, Messages;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Messages(v) {\n        Messages = v;\n      }\n    }, 2);\n    let isLiveChatRoomForwardProps, isPOSTLivechatRoomCloseParams, isPOSTLivechatRoomTransferParams, isPOSTLivechatRoomSurveyParams, isLiveChatRoomJoinProps, isLiveChatRoomSaveInfoProps, isPOSTLivechatRoomCloseByUserParams;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isLiveChatRoomForwardProps(v) {\n        isLiveChatRoomForwardProps = v;\n      },\n      isPOSTLivechatRoomCloseParams(v) {\n        isPOSTLivechatRoomCloseParams = v;\n      },\n      isPOSTLivechatRoomTransferParams(v) {\n        isPOSTLivechatRoomTransferParams = v;\n      },\n      isPOSTLivechatRoomSurveyParams(v) {\n        isPOSTLivechatRoomSurveyParams = v;\n      },\n      isLiveChatRoomJoinProps(v) {\n        isLiveChatRoomJoinProps = v;\n      },\n      isLiveChatRoomSaveInfoProps(v) {\n        isLiveChatRoomSaveInfoProps = v;\n      },\n      isPOSTLivechatRoomCloseByUserParams(v) {\n        isPOSTLivechatRoomCloseByUserParams = v;\n      }\n    }, 3);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 4);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 5);\n    let i18n;\n    module.link(\"../../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 6);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 7);\n    let isWidget;\n    module.link(\"../../../../api/server/helpers/isWidget\", {\n      isWidget(v) {\n        isWidget = v;\n      }\n    }, 8);\n    let canAccessRoomAsync;\n    module.link(\"../../../../authorization/server\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      }\n    }, 9);\n    let hasPermissionAsync;\n    module.link(\"../../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 10);\n    let addUserToRoom;\n    module.link(\"../../../../lib/server/functions/addUserToRoom\", {\n      addUserToRoom(v) {\n        addUserToRoom = v;\n      }\n    }, 11);\n    let closeLivechatRoom;\n    module.link(\"../../../../lib/server/functions/closeLivechatRoom\", {\n      closeLivechatRoom(v) {\n        closeLivechatRoom = v;\n      }\n    }, 12);\n    let rcSettings;\n    module.link(\"../../../../settings/server\", {\n      settings(v) {\n        rcSettings = v;\n      }\n    }, 13);\n    let normalizeTransferredByData;\n    module.link(\"../../lib/Helper\", {\n      normalizeTransferredByData(v) {\n        normalizeTransferredByData = v;\n      }\n    }, 14);\n    let LivechatTyped;\n    module.link(\"../../lib/LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 15);\n    let findGuest, findRoom, settings, findAgent, onCheckRoomParams;\n    module.link(\"../lib/livechat\", {\n      findGuest(v) {\n        findGuest = v;\n      },\n      findRoom(v) {\n        findRoom = v;\n      },\n      settings(v) {\n        settings = v;\n      },\n      findAgent(v) {\n        findAgent = v;\n      },\n      onCheckRoomParams(v) {\n        onCheckRoomParams = v;\n      }\n    }, 16);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const isAgentWithInfo = agentObj => !('hiddenInfo' in agentObj);\n    API.v1.addRoute('livechat/room', {\n      rateLimiterOptions: {\n        numRequestsAllowed: 5,\n        intervalTimeInMS: 60000\n      }\n    }, {\n      async get() {\n        // I'll temporary use check for validation, as validateParams doesnt support what's being done here\n        const extraCheckParams = await onCheckRoomParams({\n          token: String,\n          rid: Match.Maybe(String),\n          agentId: Match.Maybe(String)\n        });\n        check(this.queryParams, extraCheckParams);\n        const _this$queryParams = this.queryParams,\n          {\n            token,\n            rid,\n            agentId\n          } = _this$queryParams,\n          extraParams = _objectWithoutProperties(_this$queryParams, _excluded);\n        const guest = token && (await findGuest(token));\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        if (!rid) {\n          const room = await LivechatRooms.findOneOpenByVisitorToken(token, {});\n          if (room) {\n            return API.v1.success({\n              room,\n              newRoom: false\n            });\n          }\n          let agent;\n          const agentObj = agentId && (await findAgent(agentId));\n          if (agentObj) {\n            if (isAgentWithInfo(agentObj)) {\n              const {\n                username = undefined\n              } = agentObj;\n              agent = {\n                agentId,\n                username\n              };\n            } else {\n              agent = {\n                agentId\n              };\n            }\n          }\n          const roomInfo = {\n            source: _objectSpread({}, isWidget(this.request.headers) ? {\n              type: OmnichannelSourceType.WIDGET,\n              destination: this.request.headers.host\n            } : {\n              type: OmnichannelSourceType.API\n            })\n          };\n          const newRoom = await LivechatTyped.createRoom({\n            visitor: guest,\n            roomInfo,\n            agent,\n            extraData: extraParams\n          });\n          return API.v1.success({\n            room: newRoom,\n            newRoom: true\n          });\n        }\n        const froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(rid, token, {});\n        if (!froom) {\n          throw new Error('invalid-room');\n        }\n        return API.v1.success({\n          room: froom,\n          newRoom: false\n        });\n      }\n    });\n    // Note: use this route if a visitor is closing a room\n    // If a RC user(like eg agent) is closing a room, use the `livechat/room.closeByUser` route\n    API.v1.addRoute('livechat/room.close', {\n      validateParams: isPOSTLivechatRoomCloseParams\n    }, {\n      async post() {\n        const {\n          rid,\n          token\n        } = this.bodyParams;\n        if (!rcSettings.get('Omnichannel_allow_visitors_to_close_conversation')) {\n          throw new Error('error-not-allowed-to-close-conversation');\n        }\n        const visitor = await findGuest(token);\n        if (!visitor) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('room-closed');\n        }\n        const language = rcSettings.get('Language') || 'en';\n        const comment = i18n.t('Closed_by_visitor', {\n          lng: language\n        });\n        const options = {};\n        if (room.servedBy) {\n          var _servingAgent$setting, _servingAgent$setting2, _servingAgent$setting3, _servingAgent$setting4, _visitor$visitorEmail, _visitor$visitorEmail2, _visitor$visitorEmail3;\n          const servingAgent = await Users.findOneById(room.servedBy._id, {\n            projection: {\n              name: 1,\n              username: 1,\n              utcOffset: 1,\n              settings: 1,\n              language: 1\n            }\n          });\n          if (servingAgent !== null && servingAgent !== void 0 && (_servingAgent$setting = servingAgent.settings) !== null && _servingAgent$setting !== void 0 && (_servingAgent$setting2 = _servingAgent$setting.preferences) !== null && _servingAgent$setting2 !== void 0 && _servingAgent$setting2.omnichannelTranscriptPDF) {\n            options.pdfTranscript = {\n              requestedBy: servingAgent._id\n            };\n          }\n          // We'll send the transcript by email only if the setting is disabled (that means, we're not asking the user if he wants to receive the transcript by email)\n          // And the agent has the preference enabled to send the transcript by email and the visitor has an email address\n          // When Livechat_enable_transcript is enabled, the email will be sent via livechat/transcript route\n          if (!rcSettings.get('Livechat_enable_transcript') && servingAgent !== null && servingAgent !== void 0 && (_servingAgent$setting3 = servingAgent.settings) !== null && _servingAgent$setting3 !== void 0 && (_servingAgent$setting4 = _servingAgent$setting3.preferences) !== null && _servingAgent$setting4 !== void 0 && _servingAgent$setting4.omnichannelTranscriptEmail && (_visitor$visitorEmail = visitor.visitorEmails) !== null && _visitor$visitorEmail !== void 0 && _visitor$visitorEmail.length && (_visitor$visitorEmail2 = visitor.visitorEmails) !== null && _visitor$visitorEmail2 !== void 0 && (_visitor$visitorEmail3 = _visitor$visitorEmail2[0]) !== null && _visitor$visitorEmail3 !== void 0 && _visitor$visitorEmail3.address) {\n            var _visitor$visitorEmail4, _visitor$visitorEmail5;\n            const visitorEmail = (_visitor$visitorEmail4 = visitor.visitorEmails) === null || _visitor$visitorEmail4 === void 0 ? void 0 : (_visitor$visitorEmail5 = _visitor$visitorEmail4[0]) === null || _visitor$visitorEmail5 === void 0 ? void 0 : _visitor$visitorEmail5.address;\n            const language = servingAgent.language || rcSettings.get('Language') || 'en';\n            const t = i18n.getFixedT(language);\n            const subject = t('Transcript_of_your_livechat_conversation');\n            options.emailTranscript = {\n              sendToVisitor: true,\n              requestData: {\n                email: visitorEmail,\n                requestedAt: new Date(),\n                requestedBy: servingAgent,\n                subject\n              }\n            };\n          }\n        }\n        await LivechatTyped.closeRoom({\n          visitor,\n          room,\n          comment,\n          options\n        });\n        return API.v1.success({\n          rid,\n          comment\n        });\n      }\n    });\n    API.v1.addRoute('livechat/room.closeByUser', {\n      validateParams: isPOSTLivechatRoomCloseByUserParams,\n      authRequired: true,\n      permissionsRequired: ['close-livechat-room']\n    }, {\n      async post() {\n        const {\n          rid,\n          comment,\n          tags,\n          generateTranscriptPdf,\n          transcriptEmail\n        } = this.bodyParams;\n        await closeLivechatRoom(this.user, rid, {\n          comment,\n          tags,\n          generateTranscriptPdf,\n          transcriptEmail\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('livechat/room.transfer', {\n      validateParams: isPOSTLivechatRoomTransferParams,\n      deprecation: {\n        version: '7.0.0'\n      }\n    }, {\n      async post() {\n        const {\n          rid,\n          token,\n          department\n        } = this.bodyParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        let room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        // update visited page history to not expire\n        await Messages.keepHistoryForToken(token);\n        const {\n          _id,\n          username,\n          name\n        } = guest;\n        const transferredBy = normalizeTransferredByData({\n          _id,\n          username,\n          name,\n          userType: 'visitor'\n        }, room);\n        if (!(await LivechatTyped.transfer(room, guest, {\n          departmentId: department,\n          transferredBy\n        }))) {\n          return API.v1.failure();\n        }\n        room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        return API.v1.success({\n          room\n        });\n      }\n    });\n    API.v1.addRoute('livechat/room.survey', {\n      validateParams: isPOSTLivechatRoomSurveyParams\n    }, {\n      async post() {\n        var _config$survey;\n        const {\n          rid,\n          token,\n          data\n        } = this.bodyParams;\n        const visitor = await findGuest(token);\n        if (!visitor) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const config = await settings();\n        if (!((_config$survey = config.survey) !== null && _config$survey !== void 0 && _config$survey.items) || !config.survey.values) {\n          throw new Error('invalid-livechat-config');\n        }\n        const updateData = {};\n        for (const item of data) {\n          if (config.survey.items.includes(item.name) && config.survey.values.includes(item.value) || item.name === 'additionalFeedback') {\n            updateData[item.name] = item.value;\n          }\n        }\n        if (Object.keys(updateData).length === 0) {\n          throw new Error('invalid-data');\n        }\n        if (!(await LivechatRooms.updateSurveyFeedbackById(room._id, updateData))) {\n          return API.v1.failure();\n        }\n        return API.v1.success({\n          rid,\n          data: updateData\n        });\n      }\n    });\n    API.v1.addRoute('livechat/room.forward', {\n      authRequired: true,\n      permissionsRequired: ['view-l-room', 'transfer-livechat-guest'],\n      validateParams: isLiveChatRoomForwardProps\n    }, {\n      async post() {\n        var _room$v;\n        const transferData = this.bodyParams;\n        const room = await LivechatRooms.findOneById(this.bodyParams.roomId);\n        if (!room || room.t !== 'l') {\n          throw new Error('error-invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('This_conversation_is_already_closed');\n        }\n        if (!(await Omnichannel.isWithinMACLimit(room))) {\n          throw new Error('error-mac-limit-reached');\n        }\n        const guest = await LivechatVisitors.findOneEnabledById((_room$v = room.v) === null || _room$v === void 0 ? void 0 : _room$v._id);\n        if (!guest) {\n          throw new Error('error-invalid-visitor');\n        }\n        transferData.transferredBy = normalizeTransferredByData(this.user, room);\n        if (transferData.userId) {\n          const userToTransfer = await Users.findOneById(transferData.userId);\n          if (userToTransfer) {\n            transferData.transferredTo = {\n              _id: userToTransfer._id,\n              username: userToTransfer.username,\n              name: userToTransfer.name\n            };\n          }\n        }\n        const chatForwardedResult = await LivechatTyped.transfer(room, guest, transferData);\n        if (!chatForwardedResult) {\n          throw new Error('error-forwarding-chat');\n        }\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('livechat/room.join', {\n      authRequired: true,\n      permissionsRequired: ['view-l-room'],\n      validateParams: isLiveChatRoomJoinProps\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        const {\n          user\n        } = this;\n        if (!user) {\n          throw new Error('error-invalid-user');\n        }\n        const room = await LivechatRooms.findOneById(roomId);\n        if (!room) {\n          throw new Error('error-invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('room-closed');\n        }\n        if (!(await Omnichannel.isWithinMACLimit(room))) {\n          throw new Error('error-mac-limit-reached');\n        }\n        if (!(await canAccessRoomAsync(room, user))) {\n          throw new Error('error-not-allowed');\n        }\n        await addUserToRoom(roomId, user);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('livechat/room.saveInfo', {\n      authRequired: true,\n      permissionsRequired: ['view-l-room'],\n      validateParams: isLiveChatRoomSaveInfoProps\n    }, {\n      async post() {\n        const {\n          roomData,\n          guestData\n        } = this.bodyParams;\n        const room = await LivechatRooms.findOneById(roomData._id);\n        if (!room || !isOmnichannelRoom(room)) {\n          throw new Error('error-invalid-room');\n        }\n        if ((!room.servedBy || room.servedBy._id !== this.userId) && !(await hasPermissionAsync(this.userId, 'save-others-livechat-room-info'))) {\n          return API.v1.unauthorized();\n        }\n        if (room.sms) {\n          delete guestData.phone;\n        }\n        // We want this both operations to be concurrent, so we have to go with Promise.allSettled\n        const result = await Promise.allSettled([LivechatTyped.saveGuest(guestData, this.userId), LivechatTyped.saveRoomInfo(roomData)]);\n        const firstError = result.find(item => item.status === 'rejected');\n        if (firstError) {\n          throw new Error(firstError.reason.error);\n        }\n        await callbacks.run('livechat.saveInfo', await LivechatRooms.findOneById(roomData._id), {\n          user: this.user,\n          oldRoom: room\n        });\n        return API.v1.success();\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_excluded","Omnichannel","isOmnichannelRoom","OmnichannelSourceType","LivechatVisitors","Users","LivechatRooms","Messages","isLiveChatRoomForwardProps","isPOSTLivechatRoomCloseParams","isPOSTLivechatRoomTransferParams","isPOSTLivechatRoomSurveyParams","isLiveChatRoomJoinProps","isLiveChatRoomSaveInfoProps","isPOSTLivechatRoomCloseByUserParams","check","callbacks","i18n","API","isWidget","canAccessRoomAsync","hasPermissionAsync","addUserToRoom","closeLivechatRoom","rcSettings","settings","normalizeTransferredByData","LivechatTyped","Livechat","findGuest","findRoom","findAgent","onCheckRoomParams","__reifyWaitForDeps__","isAgentWithInfo","agentObj","v1","addRoute","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","get","extraCheckParams","token","String","rid","Match","Maybe","agentId","queryParams","_this$queryParams","extraParams","guest","Error","room","findOneOpenByVisitorToken","success","newRoom","agent","username","undefined","roomInfo","source","request","headers","type","WIDGET","destination","host","createRoom","visitor","extraData","froom","findOneOpenByRoomIdAndVisitorToken","validateParams","post","bodyParams","open","language","comment","t","lng","options","servedBy","_servingAgent$setting","_servingAgent$setting2","_servingAgent$setting3","_servingAgent$setting4","_visitor$visitorEmail","_visitor$visitorEmail2","_visitor$visitorEmail3","servingAgent","findOneById","_id","projection","name","utcOffset","preferences","omnichannelTranscriptPDF","pdfTranscript","requestedBy","omnichannelTranscriptEmail","visitorEmails","length","address","_visitor$visitorEmail4","_visitor$visitorEmail5","visitorEmail","getFixedT","subject","emailTranscript","sendToVisitor","requestData","email","requestedAt","Date","closeRoom","authRequired","permissionsRequired","tags","generateTranscriptPdf","transcriptEmail","user","deprecation","version","department","keepHistoryForToken","transferredBy","userType","transfer","departmentId","failure","_config$survey","data","config","survey","items","values","updateData","item","includes","value","Object","keys","updateSurveyFeedbackById","_room$v","transferData","roomId","isWithinMACLimit","findOneEnabledById","userId","userToTransfer","transferredTo","chatForwardedResult","roomData","guestData","unauthorized","sms","phone","result","Promise","allSettled","saveGuest","saveRoomInfo","firstError","find","status","reason","error","run","oldRoom","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/api/v1/room.ts"],"sourcesContent":["import { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IOmnichannelInquiryExtraData, IUser, SelectedAgent, TransferByData } from '@rocket.chat/core-typings';\nimport { isOmnichannelRoom, OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, Users, LivechatRooms, Messages } from '@rocket.chat/models';\nimport {\n\tisLiveChatRoomForwardProps,\n\tisPOSTLivechatRoomCloseParams,\n\tisPOSTLivechatRoomTransferParams,\n\tisPOSTLivechatRoomSurveyParams,\n\tisLiveChatRoomJoinProps,\n\tisLiveChatRoomSaveInfoProps,\n\tisPOSTLivechatRoomCloseByUserParams,\n} from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { i18n } from '../../../../../server/lib/i18n';\nimport { API } from '../../../../api/server';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { canAccessRoomAsync } from '../../../../authorization/server';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { addUserToRoom } from '../../../../lib/server/functions/addUserToRoom';\nimport { closeLivechatRoom } from '../../../../lib/server/functions/closeLivechatRoom';\nimport { settings as rcSettings } from '../../../../settings/server';\nimport { normalizeTransferredByData } from '../../lib/Helper';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport type { CloseRoomParams } from '../../lib/localTypes';\nimport { findGuest, findRoom, settings, findAgent, onCheckRoomParams } from '../lib/livechat';\n\nconst isAgentWithInfo = (agentObj: ILivechatAgent | { hiddenInfo: boolean }): agentObj is ILivechatAgent => !('hiddenInfo' in agentObj);\n\nAPI.v1.addRoute(\n\t'livechat/room',\n\t{\n\t\trateLimiterOptions: {\n\t\t\tnumRequestsAllowed: 5,\n\t\t\tintervalTimeInMS: 60000,\n\t\t},\n\t},\n\t{\n\t\tasync get() {\n\t\t\t// I'll temporary use check for validation, as validateParams doesnt support what's being done here\n\t\t\tconst extraCheckParams = await onCheckRoomParams({\n\t\t\t\ttoken: String,\n\t\t\t\trid: Match.Maybe(String),\n\t\t\t\tagentId: Match.Maybe(String),\n\t\t\t});\n\n\t\t\tcheck(this.queryParams, extraCheckParams as any);\n\n\t\t\tconst { token, rid, agentId, ...extraParams } = this.queryParams;\n\n\t\t\tconst guest = token && (await findGuest(token));\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await LivechatRooms.findOneOpenByVisitorToken(token, {});\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\n\t\t\t\tlet agent: SelectedAgent | undefined;\n\t\t\t\tconst agentObj = agentId && (await findAgent(agentId));\n\t\t\t\tif (agentObj) {\n\t\t\t\t\tif (isAgentWithInfo(agentObj)) {\n\t\t\t\t\t\tconst { username = undefined } = agentObj;\n\t\t\t\t\t\tagent = { agentId, username };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tagent = { agentId };\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst roomInfo = {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\t...(isWidget(this.request.headers)\n\t\t\t\t\t\t\t? { type: OmnichannelSourceType.WIDGET, destination: this.request.headers.host }\n\t\t\t\t\t\t\t: { type: OmnichannelSourceType.API }),\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst newRoom = await LivechatTyped.createRoom({\n\t\t\t\t\tvisitor: guest,\n\t\t\t\t\troomInfo,\n\t\t\t\t\tagent,\n\t\t\t\t\textraData: extraParams as IOmnichannelInquiryExtraData,\n\t\t\t\t});\n\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\troom: newRoom,\n\t\t\t\t\tnewRoom: true,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst froom = await LivechatRooms.findOneOpenByRoomIdAndVisitorToken(rid, token, {});\n\t\t\tif (!froom) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room: froom, newRoom: false });\n\t\t},\n\t},\n);\n\n// Note: use this route if a visitor is closing a room\n// If a RC user(like eg agent) is closing a room, use the `livechat/room.closeByUser` route\nAPI.v1.addRoute(\n\t'livechat/room.close',\n\t{ validateParams: isPOSTLivechatRoomCloseParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token } = this.bodyParams;\n\n\t\t\tif (!rcSettings.get('Omnichannel_allow_visitors_to_close_conversation')) {\n\t\t\t\tthrow new Error('error-not-allowed-to-close-conversation');\n\t\t\t}\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tconst language = rcSettings.get<string>('Language') || 'en';\n\t\t\tconst comment = i18n.t('Closed_by_visitor', { lng: language });\n\n\t\t\tconst options: CloseRoomParams['options'] = {};\n\t\t\tif (room.servedBy) {\n\t\t\t\tconst servingAgent: Pick<IUser, '_id' | 'name' | 'username' | 'utcOffset' | 'settings' | 'language'> | null =\n\t\t\t\t\tawait Users.findOneById(room.servedBy._id, {\n\t\t\t\t\t\tprojection: {\n\t\t\t\t\t\t\tname: 1,\n\t\t\t\t\t\t\tusername: 1,\n\t\t\t\t\t\t\tutcOffset: 1,\n\t\t\t\t\t\t\tsettings: 1,\n\t\t\t\t\t\t\tlanguage: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\tif (servingAgent?.settings?.preferences?.omnichannelTranscriptPDF) {\n\t\t\t\t\toptions.pdfTranscript = {\n\t\t\t\t\t\trequestedBy: servingAgent._id,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// We'll send the transcript by email only if the setting is disabled (that means, we're not asking the user if he wants to receive the transcript by email)\n\t\t\t\t// And the agent has the preference enabled to send the transcript by email and the visitor has an email address\n\t\t\t\t// When Livechat_enable_transcript is enabled, the email will be sent via livechat/transcript route\n\t\t\t\tif (\n\t\t\t\t\t!rcSettings.get<boolean>('Livechat_enable_transcript') &&\n\t\t\t\t\tservingAgent?.settings?.preferences?.omnichannelTranscriptEmail &&\n\t\t\t\t\tvisitor.visitorEmails?.length &&\n\t\t\t\t\tvisitor.visitorEmails?.[0]?.address\n\t\t\t\t) {\n\t\t\t\t\tconst visitorEmail = visitor.visitorEmails?.[0]?.address;\n\n\t\t\t\t\tconst language = servingAgent.language || rcSettings.get<string>('Language') || 'en';\n\t\t\t\t\tconst t = i18n.getFixedT(language);\n\t\t\t\t\tconst subject = t('Transcript_of_your_livechat_conversation');\n\n\t\t\t\t\toptions.emailTranscript = {\n\t\t\t\t\t\tsendToVisitor: true,\n\t\t\t\t\t\trequestData: {\n\t\t\t\t\t\t\temail: visitorEmail,\n\t\t\t\t\t\t\trequestedAt: new Date(),\n\t\t\t\t\t\t\trequestedBy: servingAgent,\n\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait LivechatTyped.closeRoom({ visitor, room, comment, options });\n\n\t\t\treturn API.v1.success({ rid, comment });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.closeByUser',\n\t{\n\t\tvalidateParams: isPOSTLivechatRoomCloseByUserParams,\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['close-livechat-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, comment, tags, generateTranscriptPdf, transcriptEmail } = this.bodyParams;\n\n\t\t\tawait closeLivechatRoom(this.user, rid, { comment, tags, generateTranscriptPdf, transcriptEmail });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.transfer',\n\t{ validateParams: isPOSTLivechatRoomTransferParams, deprecation: { version: '7.0.0' } },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, department } = this.bodyParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tlet room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\t// update visited page history to not expire\n\t\t\tawait Messages.keepHistoryForToken(token);\n\n\t\t\tconst { _id, username, name } = guest;\n\t\t\tconst transferredBy = normalizeTransferredByData({ _id, username, name, userType: 'visitor' }, room);\n\n\t\t\tif (!(await LivechatTyped.transfer(room, guest, { departmentId: department, transferredBy }))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\troom = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ room });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.survey',\n\t{ validateParams: isPOSTLivechatRoomSurveyParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, data } = this.bodyParams;\n\n\t\t\tconst visitor = await findGuest(token);\n\t\t\tif (!visitor) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst config = await settings();\n\t\t\tif (!config.survey?.items || !config.survey.values) {\n\t\t\t\tthrow new Error('invalid-livechat-config');\n\t\t\t}\n\n\t\t\tconst updateData: { [k: string]: string } = {};\n\t\t\tfor (const item of data) {\n\t\t\t\tif ((config.survey.items.includes(item.name) && config.survey.values.includes(item.value)) || item.name === 'additionalFeedback') {\n\t\t\t\t\tupdateData[item.name] = item.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Object.keys(updateData).length === 0) {\n\t\t\t\tthrow new Error('invalid-data');\n\t\t\t}\n\n\t\t\tif (!(await LivechatRooms.updateSurveyFeedbackById(room._id, updateData))) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({ rid, data: updateData });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.forward',\n\t{ authRequired: true, permissionsRequired: ['view-l-room', 'transfer-livechat-guest'], validateParams: isLiveChatRoomForwardProps },\n\t{\n\t\tasync post() {\n\t\t\tconst transferData = this.bodyParams as typeof this.bodyParams & {\n\t\t\t\ttransferredBy: TransferByData;\n\t\t\t\ttransferredTo?: { _id: string; username?: string; name?: string };\n\t\t\t};\n\n\t\t\tconst room = await LivechatRooms.findOneById(this.bodyParams.roomId);\n\t\t\tif (!room || room.t !== 'l') {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('This_conversation_is_already_closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.findOneEnabledById(room.v?._id);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-visitor');\n\t\t\t}\n\n\t\t\ttransferData.transferredBy = normalizeTransferredByData(this.user, room);\n\t\t\tif (transferData.userId) {\n\t\t\t\tconst userToTransfer = await Users.findOneById(transferData.userId);\n\t\t\t\tif (userToTransfer) {\n\t\t\t\t\ttransferData.transferredTo = {\n\t\t\t\t\t\t_id: userToTransfer._id,\n\t\t\t\t\t\tusername: userToTransfer.username,\n\t\t\t\t\t\tname: userToTransfer.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst chatForwardedResult = await LivechatTyped.transfer(room, guest, transferData);\n\t\t\tif (!chatForwardedResult) {\n\t\t\t\tthrow new Error('error-forwarding-chat');\n\t\t\t}\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.join',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomJoinProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\n\t\t\tconst { user } = this;\n\n\t\t\tif (!user) {\n\t\t\t\tthrow new Error('error-invalid-user');\n\t\t\t}\n\n\t\t\tconst room = await LivechatRooms.findOneById(roomId);\n\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\t\tthrow new Error('error-mac-limit-reached');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Error('error-not-allowed');\n\t\t\t}\n\n\t\t\tawait addUserToRoom(roomId, user);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/room.saveInfo',\n\t{ authRequired: true, permissionsRequired: ['view-l-room'], validateParams: isLiveChatRoomSaveInfoProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomData, guestData } = this.bodyParams;\n\t\t\tconst room = await LivechatRooms.findOneById(roomData._id);\n\t\t\tif (!room || !isOmnichannelRoom(room)) {\n\t\t\t\tthrow new Error('error-invalid-room');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(!room.servedBy || room.servedBy._id !== this.userId) &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'save-others-livechat-room-info'))\n\t\t\t) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tif (room.sms) {\n\t\t\t\tdelete guestData.phone;\n\t\t\t}\n\n\t\t\t// We want this both operations to be concurrent, so we have to go with Promise.allSettled\n\t\t\tconst result = await Promise.allSettled([LivechatTyped.saveGuest(guestData, this.userId), LivechatTyped.saveRoomInfo(roomData)]);\n\n\t\t\tconst firstError = result.find((item) => item.status === 'rejected');\n\t\t\tif (firstError) {\n\t\t\t\tthrow new Error((firstError as PromiseRejectedResult).reason.error);\n\t\t\t}\n\n\t\t\tawait callbacks.run('livechat.saveInfo', await LivechatRooms.findOneById(roomData._id), {\n\t\t\t\tuser: this.user,\n\t\t\t\toldRoom: room,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8544a2c018d12552ef475bad38f32621d92a8bf2"}
