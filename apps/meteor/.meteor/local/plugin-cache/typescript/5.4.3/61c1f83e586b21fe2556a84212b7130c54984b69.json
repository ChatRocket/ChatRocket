{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/channels.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/server/lib/engagementDashboard/channels.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/channels.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/channels.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/channels.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IDirectMessageRoom, IRoom } from '@rocket.chat/core-typings';\nimport { Analytics, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { convertDateToInt, diffBetweenDaysInclusive } from './date';\n\nexport const findChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\thideRoomsWithNoActivity,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\thideRoomsWithNoActivity: boolean;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tif (!hideRoomsWithNoActivity) {\n\t\treturn findAllChannelsWithNumberOfMessages({ start, end, options });\n\t}\n\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst aggregationResult = await Analytics.findRoomsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\t// The aggregation result may be undefined if there are no matching analytics or corresponding rooms in the period\n\tif (!aggregationResult.length) {\n\t\treturn { channels: [], total: 0 };\n\t}\n\n\tconst [{ channels, total }] = aggregationResult;\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n\nexport const findAllChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst channels = await Rooms.findChannelsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\tconst total = await Rooms.countDocuments({ t: { $in: roomTypes } });\n\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/server/lib/engagementDashboard/channels.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/server/lib/engagementDashboard/channels.ts","inputSourceMap":{"version":3,"file":"ee/server/lib/engagementDashboard/channels.ts","sourceRoot":"","sources":["ee/server/lib/engagementDashboard/channels.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IDirectMessageRoom, IRoom } from '@rocket.chat/core-typings';\nimport { Analytics, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { convertDateToInt, diffBetweenDaysInclusive } from './date';\n\nexport const findChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\thideRoomsWithNoActivity,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\thideRoomsWithNoActivity: boolean;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tif (!hideRoomsWithNoActivity) {\n\t\treturn findAllChannelsWithNumberOfMessages({ start, end, options });\n\t}\n\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst aggregationResult = await Analytics.findRoomsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\t// The aggregation result may be undefined if there are no matching analytics or corresponding rooms in the period\n\tif (!aggregationResult.length) {\n\t\treturn { channels: [], total: 0 };\n\t}\n\n\tconst [{ channels, total }] = aggregationResult;\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n\nexport const findAllChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst channels = await Rooms.findChannelsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\tconst total = await Rooms.countDocuments({ t: { $in: roomTypes } });\n\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      findChannelsWithNumberOfMessages: () => findChannelsWithNumberOfMessages,\n      findAllChannelsWithNumberOfMessages: () => findAllChannelsWithNumberOfMessages\n    });\n    let Analytics, Rooms;\n    module.link(\"@rocket.chat/models\", {\n      Analytics(v) {\n        Analytics = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      }\n    }, 0);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 1);\n    let roomCoordinator;\n    module.link(\"../../../../server/lib/rooms/roomCoordinator\", {\n      roomCoordinator(v) {\n        roomCoordinator = v;\n      }\n    }, 2);\n    let convertDateToInt, diffBetweenDaysInclusive;\n    module.link(\"./date\", {\n      convertDateToInt(v) {\n        convertDateToInt = v;\n      },\n      diffBetweenDaysInclusive(v) {\n        diffBetweenDaysInclusive = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const findChannelsWithNumberOfMessages = async _ref => {\n      let {\n        start,\n        end,\n        hideRoomsWithNoActivity,\n        options = {}\n      } = _ref;\n      if (!hideRoomsWithNoActivity) {\n        return findAllChannelsWithNumberOfMessages({\n          start,\n          end,\n          options\n        });\n      }\n      const daysBetweenDates = diffBetweenDaysInclusive(end, start);\n      const endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n      const startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n      const roomTypes = roomCoordinator.getTypesToShowOnDashboard();\n      const aggregationResult = await Analytics.findRoomsByTypesWithNumberOfMessagesBetweenDate({\n        types: roomTypes,\n        start: convertDateToInt(start),\n        end: convertDateToInt(end),\n        startOfLastWeek: convertDateToInt(startOfLastWeek),\n        endOfLastWeek: convertDateToInt(endOfLastWeek),\n        options\n      }).toArray();\n      // The aggregation result may be undefined if there are no matching analytics or corresponding rooms in the period\n      if (!aggregationResult.length) {\n        return {\n          channels: [],\n          total: 0\n        };\n      }\n      const [{\n        channels,\n        total\n      }] = aggregationResult;\n      return {\n        channels,\n        total\n      };\n    };\n    const findAllChannelsWithNumberOfMessages = async _ref2 => {\n      let {\n        start,\n        end,\n        options = {}\n      } = _ref2;\n      const daysBetweenDates = diffBetweenDaysInclusive(end, start);\n      const endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n      const startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n      const roomTypes = roomCoordinator.getTypesToShowOnDashboard();\n      const channels = await Rooms.findChannelsByTypesWithNumberOfMessagesBetweenDate({\n        types: roomTypes,\n        start: convertDateToInt(start),\n        end: convertDateToInt(end),\n        startOfLastWeek: convertDateToInt(startOfLastWeek),\n        endOfLastWeek: convertDateToInt(endOfLastWeek),\n        options\n      }).toArray();\n      const total = await Rooms.countDocuments({\n        t: {\n          $in: roomTypes\n        }\n      });\n      return {\n        channels,\n        total\n      };\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","findChannelsWithNumberOfMessages","findAllChannelsWithNumberOfMessages","Analytics","Rooms","link","v","moment","default","roomCoordinator","convertDateToInt","diffBetweenDaysInclusive","__reifyWaitForDeps__","_ref","start","end","hideRoomsWithNoActivity","options","daysBetweenDates","endOfLastWeek","subtract","toDate","startOfLastWeek","roomTypes","getTypesToShowOnDashboard","aggregationResult","findRoomsByTypesWithNumberOfMessagesBetweenDate","types","toArray","length","channels","total","_ref2","findChannelsByTypesWithNumberOfMessagesBetweenDate","countDocuments","t","$in","__reify_async_result__","_reifyError","self","async"],"sources":["ee/server/lib/engagementDashboard/channels.ts"],"sourcesContent":["import type { IDirectMessageRoom, IRoom } from '@rocket.chat/core-typings';\nimport { Analytics, Rooms } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { roomCoordinator } from '../../../../server/lib/rooms/roomCoordinator';\nimport { convertDateToInt, diffBetweenDaysInclusive } from './date';\n\nexport const findChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\thideRoomsWithNoActivity,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\thideRoomsWithNoActivity: boolean;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tif (!hideRoomsWithNoActivity) {\n\t\treturn findAllChannelsWithNumberOfMessages({ start, end, options });\n\t}\n\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst aggregationResult = await Analytics.findRoomsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\t// The aggregation result may be undefined if there are no matching analytics or corresponding rooms in the period\n\tif (!aggregationResult.length) {\n\t\treturn { channels: [], total: 0 };\n\t}\n\n\tconst [{ channels, total }] = aggregationResult;\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n\nexport const findAllChannelsWithNumberOfMessages = async ({\n\tstart,\n\tend,\n\toptions = {},\n}: {\n\tstart: Date;\n\tend: Date;\n\toptions: {\n\t\toffset?: number;\n\t\tcount?: number;\n\t};\n}): Promise<{\n\tchannels: {\n\t\troom: {\n\t\t\t_id: IRoom['_id'];\n\t\t\tname: IRoom['name'] | IRoom['fname'];\n\t\t\tts: IRoom['ts'];\n\t\t\tt: IRoom['t'];\n\t\t\t_updatedAt: IRoom['_updatedAt'];\n\t\t\tusernames?: IDirectMessageRoom['usernames'];\n\t\t};\n\t\tmessages: number;\n\t\tlastWeekMessages: number;\n\t\tdiffFromLastWeek: number;\n\t}[];\n\ttotal: number;\n}> => {\n\tconst daysBetweenDates = diffBetweenDaysInclusive(end, start);\n\tconst endOfLastWeek = moment(start).subtract(1, 'days').toDate();\n\tconst startOfLastWeek = moment(endOfLastWeek).subtract(daysBetweenDates, 'days').toDate();\n\tconst roomTypes = roomCoordinator.getTypesToShowOnDashboard() as Array<IRoom['t']>;\n\n\tconst channels = await Rooms.findChannelsByTypesWithNumberOfMessagesBetweenDate({\n\t\ttypes: roomTypes,\n\t\tstart: convertDateToInt(start),\n\t\tend: convertDateToInt(end),\n\t\tstartOfLastWeek: convertDateToInt(startOfLastWeek),\n\t\tendOfLastWeek: convertDateToInt(endOfLastWeek),\n\t\toptions,\n\t}).toArray();\n\n\tconst total = await Rooms.countDocuments({ t: { $in: roomTypes } });\n\n\treturn {\n\t\tchannels,\n\t\ttotal,\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"61c1f83e586b21fe2556a84212b7130c54984b69"}
