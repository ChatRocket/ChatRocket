{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/search/server/methods.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/search/server/methods.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/search/server/methods.ts","inputSourceMap":{"version":3,"file":"app/search/server/methods.ts","sourceRoot":"","sources":["app/search/server/methods.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessageSearchProvider, IMessageSearchSuggestion, IRoom, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SearchLogger } from './logger/logger';\nimport type { IRawSearchResult, ISearchResult } from './model/ISearchResult';\nimport { searchProviderService, validationService } from './service';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'rocketchatSearch.getProvider'(): IMessageSearchProvider | undefined;\n\t\t'rocketchatSearch.search'(text: string, context: { uid?: IUser['_id']; rid: IRoom['_id'] }, payload: unknown): Promise<ISearchResult>;\n\t\t'rocketchatSearch.suggest'(\n\t\t\ttext: string,\n\t\t\tcontext: { uid?: IUser['_id']; rid: IRoom['_id'] },\n\t\t\tpayload: unknown,\n\t\t): Promise<IMessageSearchSuggestion[]>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Get the current provider with key, description, resultTemplate, suggestionItemTemplate and settings (as Map)\n\t */\n\t'rocketchatSearch.getProvider'() {\n\t\tconst provider = searchProviderService.activeProvider;\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: provider.key,\n\t\t\tdescription: provider.i18nDescription,\n\t\t\ticon: provider.iconName,\n\t\t\tresultTemplate: provider.resultTemplate,\n\t\t\tsupportsSuggestions: provider.supportsSuggestions,\n\t\t\tsuggestionItemTemplate: provider.suggestionItemTemplate,\n\t\t\tsettings: Object.fromEntries(Object.values(provider.settingsAsMap).map((setting) => [setting.key, setting.value] as const)),\n\t\t};\n\t},\n\t/**\n\t * Search using the current search provider and check if results are valid for the user. The search result has\n\t * the format `{messages:{start:0,numFound:1,docs:[{...}]},users:{...},rooms:{...}}`\n\t * @param text the search text\n\t * @param context the context (uid, rid)\n\t * @param payload custom payload (e.g. for paging)\n\t */\n\tasync 'rocketchatSearch.search'(text, context, payload) {\n\t\tpayload = payload !== null ? payload : undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'search', text, context, payload });\n\n\t\treturn new Promise<IRawSearchResult>((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.search(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\treturn resolve(data);\n\t\t\t});\n\t\t}).then((result) => validationService.validateSearchResult(result));\n\t},\n\n\tasync 'rocketchatSearch.suggest'(text, context, payload) {\n\t\tpayload ??= undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'suggest', text, context, payload });\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.suggest(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/search/server/methods.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/search/server/methods.ts","inputSourceMap":{"version":3,"file":"app/search/server/methods.ts","sourceRoot":"","sources":["app/search/server/methods.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IMessageSearchProvider, IMessageSearchSuggestion, IRoom, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SearchLogger } from './logger/logger';\nimport type { IRawSearchResult, ISearchResult } from './model/ISearchResult';\nimport { searchProviderService, validationService } from './service';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'rocketchatSearch.getProvider'(): IMessageSearchProvider | undefined;\n\t\t'rocketchatSearch.search'(text: string, context: { uid?: IUser['_id']; rid: IRoom['_id'] }, payload: unknown): Promise<ISearchResult>;\n\t\t'rocketchatSearch.suggest'(\n\t\t\ttext: string,\n\t\t\tcontext: { uid?: IUser['_id']; rid: IRoom['_id'] },\n\t\t\tpayload: unknown,\n\t\t): Promise<IMessageSearchSuggestion[]>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Get the current provider with key, description, resultTemplate, suggestionItemTemplate and settings (as Map)\n\t */\n\t'rocketchatSearch.getProvider'() {\n\t\tconst provider = searchProviderService.activeProvider;\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: provider.key,\n\t\t\tdescription: provider.i18nDescription,\n\t\t\ticon: provider.iconName,\n\t\t\tresultTemplate: provider.resultTemplate,\n\t\t\tsupportsSuggestions: provider.supportsSuggestions,\n\t\t\tsuggestionItemTemplate: provider.suggestionItemTemplate,\n\t\t\tsettings: Object.fromEntries(Object.values(provider.settingsAsMap).map((setting) => [setting.key, setting.value] as const)),\n\t\t};\n\t},\n\t/**\n\t * Search using the current search provider and check if results are valid for the user. The search result has\n\t * the format `{messages:{start:0,numFound:1,docs:[{...}]},users:{...},rooms:{...}}`\n\t * @param text the search text\n\t * @param context the context (uid, rid)\n\t * @param payload custom payload (e.g. for paging)\n\t */\n\tasync 'rocketchatSearch.search'(text, context, payload) {\n\t\tpayload = payload !== null ? payload : undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'search', text, context, payload });\n\n\t\treturn new Promise<IRawSearchResult>((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.search(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\treturn resolve(data);\n\t\t\t});\n\t\t}).then((result) => validationService.validateSearchResult(result));\n\t},\n\n\tasync 'rocketchatSearch.suggest'(text, context, payload) {\n\t\tpayload ??= undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'suggest', text, context, payload });\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.suggest(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 0);\n    let SearchLogger;\n    module.link(\"./logger/logger\", {\n      SearchLogger(v) {\n        SearchLogger = v;\n      }\n    }, 1);\n    let searchProviderService, validationService;\n    module.link(\"./service\", {\n      searchProviderService(v) {\n        searchProviderService = v;\n      },\n      validationService(v) {\n        validationService = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      /**\n       * Get the current provider with key, description, resultTemplate, suggestionItemTemplate and settings (as Map)\n       */\n      'rocketchatSearch.getProvider'() {\n        const provider = searchProviderService.activeProvider;\n        if (!provider) {\n          return undefined;\n        }\n        return {\n          key: provider.key,\n          description: provider.i18nDescription,\n          icon: provider.iconName,\n          resultTemplate: provider.resultTemplate,\n          supportsSuggestions: provider.supportsSuggestions,\n          suggestionItemTemplate: provider.suggestionItemTemplate,\n          settings: Object.fromEntries(Object.values(provider.settingsAsMap).map(setting => [setting.key, setting.value]))\n        };\n      },\n      /**\n       * Search using the current search provider and check if results are valid for the user. The search result has\n       * the format `{messages:{start:0,numFound:1,docs:[{...}]},users:{...},rooms:{...}}`\n       * @param text the search text\n       * @param context the context (uid, rid)\n       * @param payload custom payload (e.g. for paging)\n       */\n      async 'rocketchatSearch.search'(text, context, payload) {\n        payload = payload !== null ? payload : undefined; // TODO is this cleanup necessary?\n        if (!searchProviderService.activeProvider) {\n          throw new Error('Provider currently not active');\n        }\n        SearchLogger.debug({\n          msg: 'search',\n          text,\n          context,\n          payload\n        });\n        return new Promise((resolve, reject) => {\n          var _searchProviderServic;\n          (_searchProviderServic = searchProviderService.activeProvider) === null || _searchProviderServic === void 0 ? void 0 : _searchProviderServic.search(text, context, payload, (error, data) => {\n            if (error) {\n              return reject(error);\n            }\n            return resolve(data);\n          });\n        }).then(result => validationService.validateSearchResult(result));\n      },\n      async 'rocketchatSearch.suggest'(text, context, payload) {\n        var _payload;\n        (_payload = payload) !== null && _payload !== void 0 ? _payload : payload = undefined; // TODO is this cleanup necessary?\n        if (!searchProviderService.activeProvider) {\n          throw new Error('Provider currently not active');\n        }\n        SearchLogger.debug({\n          msg: 'suggest',\n          text,\n          context,\n          payload\n        });\n        return new Promise((resolve, reject) => {\n          var _searchProviderServic2;\n          (_searchProviderServic2 = searchProviderService.activeProvider) === null || _searchProviderServic2 === void 0 ? void 0 : _searchProviderServic2.suggest(text, context, payload, (error, data) => {\n            if (error) {\n              reject(error);\n              return;\n            }\n            resolve(data);\n          });\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Meteor","module","link","v","SearchLogger","searchProviderService","validationService","__reifyWaitForDeps__","methods","rocketchatSearch.getProvider","provider","activeProvider","undefined","key","description","i18nDescription","icon","iconName","resultTemplate","supportsSuggestions","suggestionItemTemplate","settings","Object","fromEntries","values","settingsAsMap","map","setting","value","rocketchatSearch.search","text","context","payload","Error","debug","msg","Promise","resolve","reject","_searchProviderServic","search","error","data","then","result","validateSearchResult","rocketchatSearch.suggest","_payload","_searchProviderServic2","suggest","__reify_async_result__","_reifyError","self","async"],"sources":["app/search/server/methods.ts"],"sourcesContent":["import type { IMessageSearchProvider, IMessageSearchSuggestion, IRoom, IUser } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Meteor } from 'meteor/meteor';\n\nimport { SearchLogger } from './logger/logger';\nimport type { IRawSearchResult, ISearchResult } from './model/ISearchResult';\nimport { searchProviderService, validationService } from './service';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'rocketchatSearch.getProvider'(): IMessageSearchProvider | undefined;\n\t\t'rocketchatSearch.search'(text: string, context: { uid?: IUser['_id']; rid: IRoom['_id'] }, payload: unknown): Promise<ISearchResult>;\n\t\t'rocketchatSearch.suggest'(\n\t\t\ttext: string,\n\t\t\tcontext: { uid?: IUser['_id']; rid: IRoom['_id'] },\n\t\t\tpayload: unknown,\n\t\t): Promise<IMessageSearchSuggestion[]>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\t/**\n\t * Get the current provider with key, description, resultTemplate, suggestionItemTemplate and settings (as Map)\n\t */\n\t'rocketchatSearch.getProvider'() {\n\t\tconst provider = searchProviderService.activeProvider;\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tkey: provider.key,\n\t\t\tdescription: provider.i18nDescription,\n\t\t\ticon: provider.iconName,\n\t\t\tresultTemplate: provider.resultTemplate,\n\t\t\tsupportsSuggestions: provider.supportsSuggestions,\n\t\t\tsuggestionItemTemplate: provider.suggestionItemTemplate,\n\t\t\tsettings: Object.fromEntries(Object.values(provider.settingsAsMap).map((setting) => [setting.key, setting.value] as const)),\n\t\t};\n\t},\n\t/**\n\t * Search using the current search provider and check if results are valid for the user. The search result has\n\t * the format `{messages:{start:0,numFound:1,docs:[{...}]},users:{...},rooms:{...}}`\n\t * @param text the search text\n\t * @param context the context (uid, rid)\n\t * @param payload custom payload (e.g. for paging)\n\t */\n\tasync 'rocketchatSearch.search'(text, context, payload) {\n\t\tpayload = payload !== null ? payload : undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'search', text, context, payload });\n\n\t\treturn new Promise<IRawSearchResult>((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.search(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn reject(error);\n\t\t\t\t}\n\n\t\t\t\treturn resolve(data);\n\t\t\t});\n\t\t}).then((result) => validationService.validateSearchResult(result));\n\t},\n\n\tasync 'rocketchatSearch.suggest'(text, context, payload) {\n\t\tpayload ??= undefined; // TODO is this cleanup necessary?\n\n\t\tif (!searchProviderService.activeProvider) {\n\t\t\tthrow new Error('Provider currently not active');\n\t\t}\n\n\t\tSearchLogger.debug({ msg: 'suggest', text, context, payload });\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsearchProviderService.activeProvider?.suggest(text, context, payload, (error, data) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(data);\n\t\t\t});\n\t\t});\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"939c4bfd57e9491c556a167dca2a47c84df5d000"}
