{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/listener.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/meteor-accounts-saml/server/listener.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/listener.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/listener.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/listener.ts"],"names":[],"mappings":"AAGA,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAEjE,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAE1C,MAAM,eAAe,GAAG,UAAU,GAAuB;IACxD,qEAAqE;IACrE,IAAI,CAAC,GAAG,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEzC,sDAAsD;IACtD,eAAe;IACf,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,MAAM,GAAG;QACd,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;QACxB,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;QACzB,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC;KAC7B,CAAC;IAEF,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,OAAO,MAAM,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,KAAK,WAAW,GAAqB,EAAE,GAAmB,EAAE,IAAyB;IACvG,iEAAiE;IACjE,aAAa;IACb,IAAI,CAAC;QACJ,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC;YAC9B,IAAI,EAAE,CAAC;YACP,OAAO;QACR,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,OAAO,GAAG,SAAS,CAAC,yBAAyB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,YAAY,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,WAAW,6BAA6B,CAAC,CAAC;YAC3E,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,uHAAuH;QACvH,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACvC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;YAClB,QAAQ,EAAE,GAAG;SACb,CAAC,CAAC;QACH,GAAG,CAAC,GAAG,EAAE,CAAC;IACX,CAAC;AACF,CAAC,CAAC;AAEF,wCAAwC;AACxC,MAAM,CAAC,eAAe;KACpB,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KACtB,GAAG,CAAC,KAAK,EAAE,GAAoB,EAAE,GAAmB,EAAE,IAAyB,EAAE,EAAE,CAAC,UAAU,CAAC,GAAuB,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC","sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http';\n\nimport type { IIncomingMessage } from '@rocket.chat/core-typings';\nimport bodyParser from 'body-parser';\nimport { Meteor } from 'meteor/meteor';\nimport { RoutePolicy } from 'meteor/routepolicy';\nimport { WebApp } from 'meteor/webapp';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ISAMLAction } from './definition/ISAMLAction';\nimport { SAML } from './lib/SAML';\nimport { SAMLUtils } from './lib/Utils';\n\nRoutePolicy.declare('/_saml/', 'network');\n\nconst samlUrlToObject = function (url: string | undefined): ISAMLAction | null {\n\t// req.url will be '/_saml/<action>/<service name>/<credentialToken>'\n\tif (!url) {\n\t\treturn null;\n\t}\n\n\tconst splitUrl = url.split('?');\n\tconst splitPath = splitUrl[0].split('/');\n\n\t// Any non-saml request will continue down the default\n\t// middlewares.\n\tif (splitPath[1] !== '_saml') {\n\t\treturn null;\n\t}\n\n\tconst result = {\n\t\tactionName: splitPath[2],\n\t\tserviceName: splitPath[3],\n\t\tcredentialToken: splitPath[4],\n\t};\n\n\tSAMLUtils.log(result);\n\treturn result;\n};\n\nconst middleware = async function (req: IIncomingMessage, res: ServerResponse, next: (err?: any) => void): Promise<void> {\n\t// Make sure to catch any exceptions because otherwise we'd crash\n\t// the runner\n\ttry {\n\t\tconst samlObject = samlUrlToObject(req.url);\n\t\tif (!samlObject?.serviceName) {\n\t\t\tnext();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!samlObject.actionName) {\n\t\t\tthrow new Error('Missing SAML action');\n\t\t}\n\n\t\tconst service = SAMLUtils.getServiceProviderOptions(samlObject.serviceName);\n\t\tif (!service) {\n\t\t\tSystemLogger.error(`${samlObject.serviceName} service provider not found`);\n\t\t\tthrow new Error('SAML Service Provider not found.');\n\t\t}\n\n\t\tawait SAML.processRequest(req, res, service, samlObject);\n\t} catch (err) {\n\t\t// @ToDo: Ideally we should send some error message to the client, but there's no way to do it on a redirect right now.\n\t\tSystemLogger.error(err);\n\n\t\tconst url = Meteor.absoluteUrl('home');\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n};\n\n// Listen to incoming SAML http requests\nWebApp.connectHandlers\n\t.use(bodyParser.json())\n\t.use(async (req: IncomingMessage, res: ServerResponse, next: (err?: any) => void) => middleware(req as IIncomingMessage, res, next));\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/meteor-accounts-saml/server/listener.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/meteor-accounts-saml/server/listener.ts","inputSourceMap":{"version":3,"file":"app/meteor-accounts-saml/server/listener.ts","sourceRoot":"","sources":["app/meteor-accounts-saml/server/listener.ts"],"names":[],"mappings":"AAGA,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAEjE,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,WAAW,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAE1C,MAAM,eAAe,GAAG,UAAU,GAAuB;IACxD,qEAAqE;IACrE,IAAI,CAAC,GAAG,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEzC,sDAAsD;IACtD,eAAe;IACf,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,MAAM,GAAG;QACd,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;QACxB,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;QACzB,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC;KAC7B,CAAC;IAEF,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACtB,OAAO,MAAM,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,KAAK,WAAW,GAAqB,EAAE,GAAmB,EAAE,IAAyB;IACvG,iEAAiE;IACjE,aAAa;IACb,IAAI,CAAC;QACJ,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC;YAC9B,IAAI,EAAE,CAAC;YACP,OAAO;QACR,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,OAAO,GAAG,SAAS,CAAC,yBAAyB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,YAAY,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,WAAW,6BAA6B,CAAC,CAAC;YAC3E,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,uHAAuH;QACvH,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAExB,MAAM,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACvC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;YAClB,QAAQ,EAAE,GAAG;SACb,CAAC,CAAC;QACH,GAAG,CAAC,GAAG,EAAE,CAAC;IACX,CAAC;AACF,CAAC,CAAC;AAEF,wCAAwC;AACxC,MAAM,CAAC,eAAe;KACpB,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KACtB,GAAG,CAAC,KAAK,EAAE,GAAoB,EAAE,GAAmB,EAAE,IAAyB,EAAE,EAAE,CAAC,UAAU,CAAC,GAAuB,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC","sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http';\n\nimport type { IIncomingMessage } from '@rocket.chat/core-typings';\nimport bodyParser from 'body-parser';\nimport { Meteor } from 'meteor/meteor';\nimport { RoutePolicy } from 'meteor/routepolicy';\nimport { WebApp } from 'meteor/webapp';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ISAMLAction } from './definition/ISAMLAction';\nimport { SAML } from './lib/SAML';\nimport { SAMLUtils } from './lib/Utils';\n\nRoutePolicy.declare('/_saml/', 'network');\n\nconst samlUrlToObject = function (url: string | undefined): ISAMLAction | null {\n\t// req.url will be '/_saml/<action>/<service name>/<credentialToken>'\n\tif (!url) {\n\t\treturn null;\n\t}\n\n\tconst splitUrl = url.split('?');\n\tconst splitPath = splitUrl[0].split('/');\n\n\t// Any non-saml request will continue down the default\n\t// middlewares.\n\tif (splitPath[1] !== '_saml') {\n\t\treturn null;\n\t}\n\n\tconst result = {\n\t\tactionName: splitPath[2],\n\t\tserviceName: splitPath[3],\n\t\tcredentialToken: splitPath[4],\n\t};\n\n\tSAMLUtils.log(result);\n\treturn result;\n};\n\nconst middleware = async function (req: IIncomingMessage, res: ServerResponse, next: (err?: any) => void): Promise<void> {\n\t// Make sure to catch any exceptions because otherwise we'd crash\n\t// the runner\n\ttry {\n\t\tconst samlObject = samlUrlToObject(req.url);\n\t\tif (!samlObject?.serviceName) {\n\t\t\tnext();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!samlObject.actionName) {\n\t\t\tthrow new Error('Missing SAML action');\n\t\t}\n\n\t\tconst service = SAMLUtils.getServiceProviderOptions(samlObject.serviceName);\n\t\tif (!service) {\n\t\t\tSystemLogger.error(`${samlObject.serviceName} service provider not found`);\n\t\t\tthrow new Error('SAML Service Provider not found.');\n\t\t}\n\n\t\tawait SAML.processRequest(req, res, service, samlObject);\n\t} catch (err) {\n\t\t// @ToDo: Ideally we should send some error message to the client, but there's no way to do it on a redirect right now.\n\t\tSystemLogger.error(err);\n\n\t\tconst url = Meteor.absoluteUrl('home');\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n};\n\n// Listen to incoming SAML http requests\nWebApp.connectHandlers\n\t.use(bodyParser.json())\n\t.use(async (req: IncomingMessage, res: ServerResponse, next: (err?: any) => void) => middleware(req as IIncomingMessage, res, next));\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let bodyParser;\n    module.link(\"body-parser\", {\n      default(v) {\n        bodyParser = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    let RoutePolicy;\n    module.link(\"meteor/routepolicy\", {\n      RoutePolicy(v) {\n        RoutePolicy = v;\n      }\n    }, 2);\n    let WebApp;\n    module.link(\"meteor/webapp\", {\n      WebApp(v) {\n        WebApp = v;\n      }\n    }, 3);\n    let SystemLogger;\n    module.link(\"../../../server/lib/logger/system\", {\n      SystemLogger(v) {\n        SystemLogger = v;\n      }\n    }, 4);\n    let SAML;\n    module.link(\"./lib/SAML\", {\n      SAML(v) {\n        SAML = v;\n      }\n    }, 5);\n    let SAMLUtils;\n    module.link(\"./lib/Utils\", {\n      SAMLUtils(v) {\n        SAMLUtils = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    RoutePolicy.declare('/_saml/', 'network');\n    const samlUrlToObject = function (url) {\n      // req.url will be '/_saml/<action>/<service name>/<credentialToken>'\n      if (!url) {\n        return null;\n      }\n      const splitUrl = url.split('?');\n      const splitPath = splitUrl[0].split('/');\n      // Any non-saml request will continue down the default\n      // middlewares.\n      if (splitPath[1] !== '_saml') {\n        return null;\n      }\n      const result = {\n        actionName: splitPath[2],\n        serviceName: splitPath[3],\n        credentialToken: splitPath[4]\n      };\n      SAMLUtils.log(result);\n      return result;\n    };\n    const middleware = async function (req, res, next) {\n      // Make sure to catch any exceptions because otherwise we'd crash\n      // the runner\n      try {\n        const samlObject = samlUrlToObject(req.url);\n        if (!(samlObject !== null && samlObject !== void 0 && samlObject.serviceName)) {\n          next();\n          return;\n        }\n        if (!samlObject.actionName) {\n          throw new Error('Missing SAML action');\n        }\n        const service = SAMLUtils.getServiceProviderOptions(samlObject.serviceName);\n        if (!service) {\n          SystemLogger.error(\"\".concat(samlObject.serviceName, \" service provider not found\"));\n          throw new Error('SAML Service Provider not found.');\n        }\n        await SAML.processRequest(req, res, service, samlObject);\n      } catch (err) {\n        // @ToDo: Ideally we should send some error message to the client, but there's no way to do it on a redirect right now.\n        SystemLogger.error(err);\n        const url = Meteor.absoluteUrl('home');\n        res.writeHead(302, {\n          Location: url\n        });\n        res.end();\n      }\n    };\n    // Listen to incoming SAML http requests\n    WebApp.connectHandlers.use(bodyParser.json()).use(async (req, res, next) => middleware(req, res, next));\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["bodyParser","module","link","default","v","Meteor","RoutePolicy","WebApp","SystemLogger","SAML","SAMLUtils","__reifyWaitForDeps__","declare","samlUrlToObject","url","splitUrl","split","splitPath","result","actionName","serviceName","credentialToken","log","middleware","req","res","next","samlObject","Error","service","getServiceProviderOptions","error","concat","processRequest","err","absoluteUrl","writeHead","Location","end","connectHandlers","use","json","__reify_async_result__","_reifyError","self","async"],"sources":["app/meteor-accounts-saml/server/listener.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http';\n\nimport type { IIncomingMessage } from '@rocket.chat/core-typings';\nimport bodyParser from 'body-parser';\nimport { Meteor } from 'meteor/meteor';\nimport { RoutePolicy } from 'meteor/routepolicy';\nimport { WebApp } from 'meteor/webapp';\n\nimport { SystemLogger } from '../../../server/lib/logger/system';\nimport type { ISAMLAction } from './definition/ISAMLAction';\nimport { SAML } from './lib/SAML';\nimport { SAMLUtils } from './lib/Utils';\n\nRoutePolicy.declare('/_saml/', 'network');\n\nconst samlUrlToObject = function (url: string | undefined): ISAMLAction | null {\n\t// req.url will be '/_saml/<action>/<service name>/<credentialToken>'\n\tif (!url) {\n\t\treturn null;\n\t}\n\n\tconst splitUrl = url.split('?');\n\tconst splitPath = splitUrl[0].split('/');\n\n\t// Any non-saml request will continue down the default\n\t// middlewares.\n\tif (splitPath[1] !== '_saml') {\n\t\treturn null;\n\t}\n\n\tconst result = {\n\t\tactionName: splitPath[2],\n\t\tserviceName: splitPath[3],\n\t\tcredentialToken: splitPath[4],\n\t};\n\n\tSAMLUtils.log(result);\n\treturn result;\n};\n\nconst middleware = async function (req: IIncomingMessage, res: ServerResponse, next: (err?: any) => void): Promise<void> {\n\t// Make sure to catch any exceptions because otherwise we'd crash\n\t// the runner\n\ttry {\n\t\tconst samlObject = samlUrlToObject(req.url);\n\t\tif (!samlObject?.serviceName) {\n\t\t\tnext();\n\t\t\treturn;\n\t\t}\n\n\t\tif (!samlObject.actionName) {\n\t\t\tthrow new Error('Missing SAML action');\n\t\t}\n\n\t\tconst service = SAMLUtils.getServiceProviderOptions(samlObject.serviceName);\n\t\tif (!service) {\n\t\t\tSystemLogger.error(`${samlObject.serviceName} service provider not found`);\n\t\t\tthrow new Error('SAML Service Provider not found.');\n\t\t}\n\n\t\tawait SAML.processRequest(req, res, service, samlObject);\n\t} catch (err) {\n\t\t// @ToDo: Ideally we should send some error message to the client, but there's no way to do it on a redirect right now.\n\t\tSystemLogger.error(err);\n\n\t\tconst url = Meteor.absoluteUrl('home');\n\t\tres.writeHead(302, {\n\t\t\tLocation: url,\n\t\t});\n\t\tres.end();\n\t}\n};\n\n// Listen to incoming SAML http requests\nWebApp.connectHandlers\n\t.use(bodyParser.json())\n\t.use(async (req: IncomingMessage, res: ServerResponse, next: (err?: any) => void) => middleware(req as IIncomingMessage, res, next));\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"bf8610aff34f095072a9414dbe108502972736a3"}
