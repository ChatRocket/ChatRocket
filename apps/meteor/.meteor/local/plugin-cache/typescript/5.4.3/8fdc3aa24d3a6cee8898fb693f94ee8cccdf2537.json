{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/chat.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/chat.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/chat.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/chat.ts","sourceRoot":"","sources":["app/api/server/v1/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Users, Rooms, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisChatReportMessageProps,\n\tisChatGetURLPreviewProps,\n\tisChatUpdateProps,\n\tisChatGetThreadsListProps,\n\tisChatDeleteProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\n\nimport { reportMessage } from '../../../../server/lib/moderation/reportMessage';\nimport { roomAccessAttributes } from '../../../authorization/server';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { deleteMessageValidatingPermission } from '../../../lib/server/functions/deleteMessage';\nimport { processWebhookMessage } from '../../../lib/server/functions/processWebhookMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { executeUpdateMessage } from '../../../lib/server/methods/updateMessage';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { OEmbed } from '../../../oembed/server/server';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findDiscussionsFromRoom, findMentionedMessages, findStarredMessages } from '../lib/messages';\n\nAPI.v1.addRoute(\n\t'chat.delete',\n\t{ authRequired: true, validateParams: isChatDeleteProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.bodyParams.asUser &&\n\t\t\t\tmsg.u._id !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'force-delete-message', msg.rid))\n\t\t\t) {\n\t\t\t\treturn API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n\t\t\t}\n\n\t\t\tconst userId = this.bodyParams.asUser ? msg.u._id : this.userId;\n\t\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tawait deleteMessageValidatingPermission(msg, user._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: msg._id,\n\t\t\t\tts: Date.now().toString(),\n\t\t\t\tmessage: msg,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, lastUpdate } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!lastUpdate) {\n\t\t\t\tthrow new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(lastUpdate))) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('messages/get', roomId, { lastUpdate: new Date(lastUpdate) });\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: {\n\t\t\t\t\tupdated: await normalizeMessagesForUser(result.updated, this.userId),\n\t\t\t\t\tdeleted: result.deleted,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMessage',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!this.queryParams.msgId) {\n\t\t\t\treturn API.v1.failure('The \"msgId\" query parameter must be provided.');\n\t\t\t}\n\n\t\t\tconst msg = await Meteor.callAsync('getSingleMessage', this.queryParams.msgId);\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([msg], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.pinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst messageReturn = (await applyAirGappedRestrictionsValidation(() => processWebhookMessage(this.bodyParams, this.user)))[0];\n\n\t\t\tif (!messageReturn) {\n\t\t\t\treturn API.v1.failure('unknown-error');\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([messageReturn.message], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tts: Date.now(),\n\t\t\t\tchannel: messageReturn.channel,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.search',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!searchText) {\n\t\t\t\tthrow new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.message) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n\t\t\t}\n\n\t\t\tif (MessageTypes.isSystemMessage(this.bodyParams.message)) {\n\t\t\t\tthrow new Error(\"Cannot send system messages using 'chat.sendMessage'\");\n\t\t\t}\n\n\t\t\tconst sent = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>, this.bodyParams.previewUrls),\n\t\t\t);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: true,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unPinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unpinMessage', msg);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unStarMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: false,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.update',\n\t{ authRequired: true, validateParams: isChatUpdateProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId);\n\n\t\t\t// Ensure the message exists\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tconst msgFromBody = this.bodyParams.text;\n\n\t\t\t// Permission checks are already done in the updateMessage method, so no need to duplicate them\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteUpdateMessage(\n\t\t\t\t\tthis.userId,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: msg._id,\n\t\t\t\t\t\tmsg: msgFromBody,\n\t\t\t\t\t\trid: msg.rid,\n\t\t\t\t\t\tcustomFields: this.bodyParams.customFields as Record<string, any> | undefined,\n\t\t\t\t\t},\n\t\t\t\t\tthis.bodyParams.previewUrls,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;\n\n\t\t\tif (!emoji) {\n\t\t\t\tthrow new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n\t\t\t}\n\n\t\t\tawait executeSetReaction(this.userId, emoji, msg, this.bodyParams.shouldReact);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.reportMessage',\n\t{ authRequired: true, validateParams: isChatReportMessageProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { messageId, description } = this.bodyParams;\n\t\t\tif (!messageId) {\n\t\t\t\treturn API.v1.failure('The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!description) {\n\t\t\t\treturn API.v1.failure('The required \"description\" param is missing.');\n\t\t\t}\n\n\t\t\tawait reportMessage(messageId, description, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.ignoreUser',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, userId } = this.queryParams;\n\t\t\tlet { ignore = true } = this.queryParams;\n\n\t\t\tignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n\n\t\t\tif (!rid?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!userId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('ignoreUser', { rid, userId, ignore });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDeletedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, since } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!since) {\n\t\t\t\tthrow new Meteor.Error('The required \"since\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(since))) {\n\t\t\t\tthrow new Meteor.Error('The \"since\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.trashFindPaginatedDeletedAfter(\n\t\t\t\tnew Date(since),\n\t\t\t\t{ rid: roomId },\n\t\t\t\t{\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getPinnedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginatedPinnedByRoom(roomId, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadsList',\n\t{ authRequired: true, validateParams: isChatGetThreadsListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, type, text } = this.queryParams;\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst typeThread = {\n\t\t\t\t_hidden: { $ne: true },\n\t\t\t\t...(type === 'following' && { replies: { $in: [this.userId] } }),\n\t\t\t\t...(type === 'unread' && { _id: { $in: (await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id))?.tunread || [] } }),\n\t\t\t\tmsg: new RegExp(escapeRegExp(text || ''), 'i'),\n\t\t\t};\n\n\t\t\tconst threadQuery = { ...query, ...typeThread, rid: room._id, tcount: { $exists: true } };\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(threadQuery, {\n\t\t\t\tsort: sort || { tlm: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [threads, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: await normalizeMessagesForUser(threads, this.userId),\n\t\t\t\tcount: threads.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadsList',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!rid) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst threadQuery = Object.assign({}, query, { rid, tcount: { $exists: true } });\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: {\n\t\t\t\t\tupdate: await Messages.find(\n\t\t\t\t\t\t{ ...threadQuery, _updatedAt: { $gt: updatedSinceDate } },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t\t},\n\t\t\t\t\t).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n\t\t\t\t\t\tsort,\n\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t}).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(\n\t\t\t\t{ ...query, tmid },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: {\n\t\t\t\t\tupdate: await Messages.find({ ...query, tmid, _updatedAt: { $gt: updatedSinceDate } }, { projection: fields, sort }).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, { ...query, tmid }, { projection: fields, sort }).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.followMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('followMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unfollowMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unfollowMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMentionedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findMentionedMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getStarredMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findStarredMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tmessages.messages = await normalizeMessagesForUser(messages.messages, this.userId);\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, text } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext: text || '',\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.otr',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, type: otrType } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!otrType) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"type\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst { username, type } = this.user;\n\n\t\t\tif (!username) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user');\n\t\t\t}\n\n\t\t\tawait canSendMessageAsync(roomId, { uid: this.userId, username, type });\n\n\t\t\tawait Message.saveSystemMessage(otrType, roomId, username, { _id: this.userId, username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getURLPreview',\n\t{ authRequired: true, validateParams: isChatGetURLPreviewProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, url } = this.queryParams;\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { urlPreview } = await OEmbed.parseUrl(url);\n\t\t\turlPreview.ignoreParse = true;\n\n\t\t\treturn API.v1.success({ urlPreview });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/chat.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/chat.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/chat.ts","sourceRoot":"","sources":["app/api/server/v1/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Users, Rooms, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisChatReportMessageProps,\n\tisChatGetURLPreviewProps,\n\tisChatUpdateProps,\n\tisChatGetThreadsListProps,\n\tisChatDeleteProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\n\nimport { reportMessage } from '../../../../server/lib/moderation/reportMessage';\nimport { roomAccessAttributes } from '../../../authorization/server';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { deleteMessageValidatingPermission } from '../../../lib/server/functions/deleteMessage';\nimport { processWebhookMessage } from '../../../lib/server/functions/processWebhookMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { executeUpdateMessage } from '../../../lib/server/methods/updateMessage';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { OEmbed } from '../../../oembed/server/server';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findDiscussionsFromRoom, findMentionedMessages, findStarredMessages } from '../lib/messages';\n\nAPI.v1.addRoute(\n\t'chat.delete',\n\t{ authRequired: true, validateParams: isChatDeleteProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.bodyParams.asUser &&\n\t\t\t\tmsg.u._id !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'force-delete-message', msg.rid))\n\t\t\t) {\n\t\t\t\treturn API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n\t\t\t}\n\n\t\t\tconst userId = this.bodyParams.asUser ? msg.u._id : this.userId;\n\t\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tawait deleteMessageValidatingPermission(msg, user._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: msg._id,\n\t\t\t\tts: Date.now().toString(),\n\t\t\t\tmessage: msg,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, lastUpdate } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!lastUpdate) {\n\t\t\t\tthrow new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(lastUpdate))) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('messages/get', roomId, { lastUpdate: new Date(lastUpdate) });\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: {\n\t\t\t\t\tupdated: await normalizeMessagesForUser(result.updated, this.userId),\n\t\t\t\t\tdeleted: result.deleted,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMessage',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!this.queryParams.msgId) {\n\t\t\t\treturn API.v1.failure('The \"msgId\" query parameter must be provided.');\n\t\t\t}\n\n\t\t\tconst msg = await Meteor.callAsync('getSingleMessage', this.queryParams.msgId);\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([msg], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.pinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst messageReturn = (await applyAirGappedRestrictionsValidation(() => processWebhookMessage(this.bodyParams, this.user)))[0];\n\n\t\t\tif (!messageReturn) {\n\t\t\t\treturn API.v1.failure('unknown-error');\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([messageReturn.message], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tts: Date.now(),\n\t\t\t\tchannel: messageReturn.channel,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.search',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!searchText) {\n\t\t\t\tthrow new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.message) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n\t\t\t}\n\n\t\t\tif (MessageTypes.isSystemMessage(this.bodyParams.message)) {\n\t\t\t\tthrow new Error(\"Cannot send system messages using 'chat.sendMessage'\");\n\t\t\t}\n\n\t\t\tconst sent = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>, this.bodyParams.previewUrls),\n\t\t\t);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: true,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unPinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unpinMessage', msg);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unStarMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: false,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.update',\n\t{ authRequired: true, validateParams: isChatUpdateProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId);\n\n\t\t\t// Ensure the message exists\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tconst msgFromBody = this.bodyParams.text;\n\n\t\t\t// Permission checks are already done in the updateMessage method, so no need to duplicate them\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteUpdateMessage(\n\t\t\t\t\tthis.userId,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: msg._id,\n\t\t\t\t\t\tmsg: msgFromBody,\n\t\t\t\t\t\trid: msg.rid,\n\t\t\t\t\t\tcustomFields: this.bodyParams.customFields as Record<string, any> | undefined,\n\t\t\t\t\t},\n\t\t\t\t\tthis.bodyParams.previewUrls,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;\n\n\t\t\tif (!emoji) {\n\t\t\t\tthrow new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n\t\t\t}\n\n\t\t\tawait executeSetReaction(this.userId, emoji, msg, this.bodyParams.shouldReact);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.reportMessage',\n\t{ authRequired: true, validateParams: isChatReportMessageProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { messageId, description } = this.bodyParams;\n\t\t\tif (!messageId) {\n\t\t\t\treturn API.v1.failure('The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!description) {\n\t\t\t\treturn API.v1.failure('The required \"description\" param is missing.');\n\t\t\t}\n\n\t\t\tawait reportMessage(messageId, description, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.ignoreUser',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, userId } = this.queryParams;\n\t\t\tlet { ignore = true } = this.queryParams;\n\n\t\t\tignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n\n\t\t\tif (!rid?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!userId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('ignoreUser', { rid, userId, ignore });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDeletedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, since } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!since) {\n\t\t\t\tthrow new Meteor.Error('The required \"since\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(since))) {\n\t\t\t\tthrow new Meteor.Error('The \"since\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.trashFindPaginatedDeletedAfter(\n\t\t\t\tnew Date(since),\n\t\t\t\t{ rid: roomId },\n\t\t\t\t{\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getPinnedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginatedPinnedByRoom(roomId, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadsList',\n\t{ authRequired: true, validateParams: isChatGetThreadsListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, type, text } = this.queryParams;\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst typeThread = {\n\t\t\t\t_hidden: { $ne: true },\n\t\t\t\t...(type === 'following' && { replies: { $in: [this.userId] } }),\n\t\t\t\t...(type === 'unread' && { _id: { $in: (await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id))?.tunread || [] } }),\n\t\t\t\tmsg: new RegExp(escapeRegExp(text || ''), 'i'),\n\t\t\t};\n\n\t\t\tconst threadQuery = { ...query, ...typeThread, rid: room._id, tcount: { $exists: true } };\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(threadQuery, {\n\t\t\t\tsort: sort || { tlm: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [threads, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: await normalizeMessagesForUser(threads, this.userId),\n\t\t\t\tcount: threads.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadsList',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!rid) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst threadQuery = Object.assign({}, query, { rid, tcount: { $exists: true } });\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: {\n\t\t\t\t\tupdate: await Messages.find(\n\t\t\t\t\t\t{ ...threadQuery, _updatedAt: { $gt: updatedSinceDate } },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t\t},\n\t\t\t\t\t).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n\t\t\t\t\t\tsort,\n\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t}).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(\n\t\t\t\t{ ...query, tmid },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: {\n\t\t\t\t\tupdate: await Messages.find({ ...query, tmid, _updatedAt: { $gt: updatedSinceDate } }, { projection: fields, sort }).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, { ...query, tmid }, { projection: fields, sort }).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.followMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('followMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unfollowMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unfollowMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMentionedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findMentionedMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getStarredMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findStarredMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tmessages.messages = await normalizeMessagesForUser(messages.messages, this.userId);\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, text } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext: text || '',\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.otr',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, type: otrType } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!otrType) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"type\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst { username, type } = this.user;\n\n\t\t\tif (!username) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user');\n\t\t\t}\n\n\t\t\tawait canSendMessageAsync(roomId, { uid: this.userId, username, type });\n\n\t\t\tawait Message.saveSystemMessage(otrType, roomId, username, { _id: this.userId, username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getURLPreview',\n\t{ authRequired: true, validateParams: isChatGetURLPreviewProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, url } = this.queryParams;\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { urlPreview } = await OEmbed.parseUrl(url);\n\t\t\turlPreview.ignoreParse = true;\n\n\t\t\treturn API.v1.success({ urlPreview });\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let Messages, Users, Rooms, Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 1);\n    let isChatReportMessageProps, isChatGetURLPreviewProps, isChatUpdateProps, isChatGetThreadsListProps, isChatDeleteProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isChatReportMessageProps(v) {\n        isChatReportMessageProps = v;\n      },\n      isChatGetURLPreviewProps(v) {\n        isChatGetURLPreviewProps = v;\n      },\n      isChatUpdateProps(v) {\n        isChatUpdateProps = v;\n      },\n      isChatGetThreadsListProps(v) {\n        isChatGetThreadsListProps = v;\n      },\n      isChatDeleteProps(v) {\n        isChatDeleteProps = v;\n      }\n    }, 2);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let reportMessage;\n    module.link(\"../../../../server/lib/moderation/reportMessage\", {\n      reportMessage(v) {\n        reportMessage = v;\n      }\n    }, 5);\n    let roomAccessAttributes;\n    module.link(\"../../../authorization/server\", {\n      roomAccessAttributes(v) {\n        roomAccessAttributes = v;\n      }\n    }, 6);\n    let canAccessRoomAsync, canAccessRoomIdAsync;\n    module.link(\"../../../authorization/server/functions/canAccessRoom\", {\n      canAccessRoomAsync(v) {\n        canAccessRoomAsync = v;\n      },\n      canAccessRoomIdAsync(v) {\n        canAccessRoomIdAsync = v;\n      }\n    }, 7);\n    let canSendMessageAsync;\n    module.link(\"../../../authorization/server/functions/canSendMessage\", {\n      canSendMessageAsync(v) {\n        canSendMessageAsync = v;\n      }\n    }, 8);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 9);\n    let deleteMessageValidatingPermission;\n    module.link(\"../../../lib/server/functions/deleteMessage\", {\n      deleteMessageValidatingPermission(v) {\n        deleteMessageValidatingPermission = v;\n      }\n    }, 10);\n    let processWebhookMessage;\n    module.link(\"../../../lib/server/functions/processWebhookMessage\", {\n      processWebhookMessage(v) {\n        processWebhookMessage = v;\n      }\n    }, 11);\n    let executeSendMessage;\n    module.link(\"../../../lib/server/methods/sendMessage\", {\n      executeSendMessage(v) {\n        executeSendMessage = v;\n      }\n    }, 12);\n    let executeUpdateMessage;\n    module.link(\"../../../lib/server/methods/updateMessage\", {\n      executeUpdateMessage(v) {\n        executeUpdateMessage = v;\n      }\n    }, 13);\n    let applyAirGappedRestrictionsValidation;\n    module.link(\"../../../license/server/airGappedRestrictionsWrapper\", {\n      applyAirGappedRestrictionsValidation(v) {\n        applyAirGappedRestrictionsValidation = v;\n      }\n    }, 14);\n    let OEmbed;\n    module.link(\"../../../oembed/server/server\", {\n      OEmbed(v) {\n        OEmbed = v;\n      }\n    }, 15);\n    let executeSetReaction;\n    module.link(\"../../../reactions/server/setReaction\", {\n      executeSetReaction(v) {\n        executeSetReaction = v;\n      }\n    }, 16);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 17);\n    let MessageTypes;\n    module.link(\"../../../ui-utils/server\", {\n      MessageTypes(v) {\n        MessageTypes = v;\n      }\n    }, 18);\n    let normalizeMessagesForUser;\n    module.link(\"../../../utils/server/lib/normalizeMessagesForUser\", {\n      normalizeMessagesForUser(v) {\n        normalizeMessagesForUser = v;\n      }\n    }, 19);\n    let API;\n    module.link(\"../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 20);\n    let getPaginationItems;\n    module.link(\"../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 21);\n    let findDiscussionsFromRoom, findMentionedMessages, findStarredMessages;\n    module.link(\"../lib/messages\", {\n      findDiscussionsFromRoom(v) {\n        findDiscussionsFromRoom = v;\n      },\n      findMentionedMessages(v) {\n        findMentionedMessages = v;\n      },\n      findStarredMessages(v) {\n        findStarredMessages = v;\n      }\n    }, 22);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('chat.delete', {\n      authRequired: true,\n      validateParams: isChatDeleteProps\n    }, {\n      async post() {\n        const msg = await Messages.findOneById(this.bodyParams.msgId, {\n          projection: {\n            u: 1,\n            rid: 1\n          }\n        });\n        if (!msg) {\n          return API.v1.failure(\"No message found with the id of \\\"\".concat(this.bodyParams.msgId, \"\\\".\"));\n        }\n        if (this.bodyParams.roomId !== msg.rid) {\n          return API.v1.failure('The room id provided does not match where the message is from.');\n        }\n        if (this.bodyParams.asUser && msg.u._id !== this.userId && !(await hasPermissionAsync(this.userId, 'force-delete-message', msg.rid))) {\n          return API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n        }\n        const userId = this.bodyParams.asUser ? msg.u._id : this.userId;\n        const user = await Users.findOneById(userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (!user) {\n          return API.v1.failure('User not found');\n        }\n        await deleteMessageValidatingPermission(msg, user._id);\n        return API.v1.success({\n          _id: msg._id,\n          ts: Date.now().toString(),\n          message: msg\n        });\n      }\n    });\n    API.v1.addRoute('chat.syncMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId,\n          lastUpdate\n        } = this.queryParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n        }\n        if (!lastUpdate) {\n          throw new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n        } else if (isNaN(Date.parse(lastUpdate))) {\n          throw new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n        }\n        const result = await Meteor.callAsync('messages/get', roomId, {\n          lastUpdate: new Date(lastUpdate)\n        });\n        if (!result) {\n          return API.v1.failure();\n        }\n        return API.v1.success({\n          result: {\n            updated: await normalizeMessagesForUser(result.updated, this.userId),\n            deleted: result.deleted\n          }\n        });\n      }\n    });\n    API.v1.addRoute('chat.getMessage', {\n      authRequired: true\n    }, {\n      async get() {\n        if (!this.queryParams.msgId) {\n          return API.v1.failure('The \"msgId\" query parameter must be provided.');\n        }\n        const msg = await Meteor.callAsync('getSingleMessage', this.queryParams.msgId);\n        if (!msg) {\n          return API.v1.failure();\n        }\n        const [message] = await normalizeMessagesForUser([msg], this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('chat.pinMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$mess;\n        if (!((_this$bodyParams$mess = this.bodyParams.messageId) !== null && _this$bodyParams$mess !== void 0 && _this$bodyParams$mess.trim())) {\n          throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n        }\n        const msg = await Messages.findOneById(this.bodyParams.messageId);\n        if (!msg) {\n          throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n        }\n        const pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n        const [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('chat.postMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        const messageReturn = (await applyAirGappedRestrictionsValidation(() => processWebhookMessage(this.bodyParams, this.user)))[0];\n        if (!messageReturn) {\n          return API.v1.failure('unknown-error');\n        }\n        const [message] = await normalizeMessagesForUser([messageReturn.message], this.userId);\n        return API.v1.success({\n          ts: Date.now(),\n          channel: messageReturn.channel,\n          message\n        });\n      }\n    });\n    API.v1.addRoute('chat.search', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId,\n          searchText\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n        }\n        if (!searchText) {\n          throw new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n        }\n        const result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(result, this.userId)\n        });\n      }\n    });\n    // The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n    // for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n    // one channel whereas the other one allows for sending to more than one channel at a time.\n    API.v1.addRoute('chat.sendMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        if (!this.bodyParams.message) {\n          throw new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n        }\n        if (MessageTypes.isSystemMessage(this.bodyParams.message)) {\n          throw new Error(\"Cannot send system messages using 'chat.sendMessage'\");\n        }\n        const sent = await applyAirGappedRestrictionsValidation(() => executeSendMessage(this.userId, this.bodyParams.message, this.bodyParams.previewUrls));\n        const [message] = await normalizeMessagesForUser([sent], this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('chat.starMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$mess2;\n        if (!((_this$bodyParams$mess2 = this.bodyParams.messageId) !== null && _this$bodyParams$mess2 !== void 0 && _this$bodyParams$mess2.trim())) {\n          throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n        }\n        const msg = await Messages.findOneById(this.bodyParams.messageId);\n        if (!msg) {\n          throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n        }\n        await Meteor.callAsync('starMessage', {\n          _id: msg._id,\n          rid: msg.rid,\n          starred: true\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.unPinMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$mess3;\n        if (!((_this$bodyParams$mess3 = this.bodyParams.messageId) !== null && _this$bodyParams$mess3 !== void 0 && _this$bodyParams$mess3.trim())) {\n          throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n        }\n        const msg = await Messages.findOneById(this.bodyParams.messageId);\n        if (!msg) {\n          throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n        }\n        await Meteor.callAsync('unpinMessage', msg);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.unStarMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$mess4;\n        if (!((_this$bodyParams$mess4 = this.bodyParams.messageId) !== null && _this$bodyParams$mess4 !== void 0 && _this$bodyParams$mess4.trim())) {\n          throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n        }\n        const msg = await Messages.findOneById(this.bodyParams.messageId);\n        if (!msg) {\n          throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n        }\n        await Meteor.callAsync('starMessage', {\n          _id: msg._id,\n          rid: msg.rid,\n          starred: false\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.update', {\n      authRequired: true,\n      validateParams: isChatUpdateProps\n    }, {\n      async post() {\n        const msg = await Messages.findOneById(this.bodyParams.msgId);\n        // Ensure the message exists\n        if (!msg) {\n          return API.v1.failure(\"No message found with the id of \\\"\".concat(this.bodyParams.msgId, \"\\\".\"));\n        }\n        if (this.bodyParams.roomId !== msg.rid) {\n          return API.v1.failure('The room id provided does not match where the message is from.');\n        }\n        const msgFromBody = this.bodyParams.text;\n        // Permission checks are already done in the updateMessage method, so no need to duplicate them\n        await applyAirGappedRestrictionsValidation(() => executeUpdateMessage(this.userId, {\n          _id: msg._id,\n          msg: msgFromBody,\n          rid: msg.rid,\n          customFields: this.bodyParams.customFields\n        }, this.bodyParams.previewUrls));\n        const updatedMessage = await Messages.findOneById(msg._id);\n        const [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n        return API.v1.success({\n          message\n        });\n      }\n    });\n    API.v1.addRoute('chat.react', {\n      authRequired: true\n    }, {\n      async post() {\n        var _this$bodyParams$mess5;\n        if (!((_this$bodyParams$mess5 = this.bodyParams.messageId) !== null && _this$bodyParams$mess5 !== void 0 && _this$bodyParams$mess5.trim())) {\n          throw new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n        }\n        const msg = await Messages.findOneById(this.bodyParams.messageId);\n        if (!msg) {\n          throw new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n        }\n        const emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : this.bodyParams.reaction;\n        if (!emoji) {\n          throw new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n        }\n        await executeSetReaction(this.userId, emoji, msg, this.bodyParams.shouldReact);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.reportMessage', {\n      authRequired: true,\n      validateParams: isChatReportMessageProps\n    }, {\n      async post() {\n        const {\n          messageId,\n          description\n        } = this.bodyParams;\n        if (!messageId) {\n          return API.v1.failure('The required \"messageId\" param is missing.');\n        }\n        if (!description) {\n          return API.v1.failure('The required \"description\" param is missing.');\n        }\n        await reportMessage(messageId, description, this.userId);\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.ignoreUser', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          rid,\n          userId\n        } = this.queryParams;\n        let {\n          ignore = true\n        } = this.queryParams;\n        ignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n        if (!(rid !== null && rid !== void 0 && rid.trim())) {\n          throw new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n        }\n        if (!(userId !== null && userId !== void 0 && userId.trim())) {\n          throw new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n        }\n        await Meteor.callAsync('ignoreUser', {\n          rid,\n          userId,\n          ignore\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.getDeletedMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId,\n          since\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('The required \"roomId\" query param is missing.');\n        }\n        if (!since) {\n          throw new Meteor.Error('The required \"since\" query param is missing.');\n        } else if (isNaN(Date.parse(since))) {\n          throw new Meteor.Error('The \"since\" query parameter must be a valid date.');\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Messages.trashFindPaginatedDeletedAfter(new Date(since), {\n          rid: roomId\n        }, {\n          skip: offset,\n          limit: count,\n          projection: {\n            _id: 1\n          }\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages,\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('chat.getPinnedMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n        }\n        if (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n          throw new Meteor.Error('error-not-allowed', 'Not allowed');\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Messages.findPaginatedPinnedByRoom(roomId, {\n          skip: offset,\n          limit: count\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages: await normalizeMessagesForUser(messages, this.userId),\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('chat.getThreadsList', {\n      authRequired: true,\n      validateParams: isChatGetThreadsListProps\n    }, {\n      async get() {\n        var _await$Subscriptions$;\n        const {\n          rid,\n          type,\n          text\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields,\n          query\n        } = await this.parseJsonQuery();\n        if (!settings.get('Threads_enabled')) {\n          throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        const room = await Rooms.findOneById(rid, {\n          projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n            t: 1,\n            _id: 1\n          })\n        });\n        if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        const typeThread = _objectSpread(_objectSpread(_objectSpread({\n          _hidden: {\n            $ne: true\n          }\n        }, type === 'following' && {\n          replies: {\n            $in: [this.userId]\n          }\n        }), type === 'unread' && {\n          _id: {\n            $in: ((_await$Subscriptions$ = await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id)) === null || _await$Subscriptions$ === void 0 ? void 0 : _await$Subscriptions$.tunread) || []\n          }\n        }), {}, {\n          msg: new RegExp(escapeRegExp(text || ''), 'i')\n        });\n        const threadQuery = _objectSpread(_objectSpread(_objectSpread({}, query), typeThread), {}, {\n          rid: room._id,\n          tcount: {\n            $exists: true\n          }\n        });\n        const {\n          cursor,\n          totalCount\n        } = await Messages.findPaginated(threadQuery, {\n          sort: sort || {\n            tlm: -1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [threads, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          threads: await normalizeMessagesForUser(threads, this.userId),\n          count: threads.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('chat.syncThreadsList', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          rid\n        } = this.queryParams;\n        const {\n          query,\n          fields,\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          updatedSince\n        } = this.queryParams;\n        let updatedSinceDate;\n        if (!settings.get('Threads_enabled')) {\n          throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n        }\n        if (!rid) {\n          throw new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n        }\n        if (!updatedSince) {\n          throw new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n        }\n        if (isNaN(Date.parse(updatedSince))) {\n          throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n        } else {\n          updatedSinceDate = new Date(updatedSince);\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        const room = await Rooms.findOneById(rid, {\n          projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n            t: 1,\n            _id: 1\n          })\n        });\n        if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        const threadQuery = Object.assign({}, query, {\n          rid,\n          tcount: {\n            $exists: true\n          }\n        });\n        return API.v1.success({\n          threads: {\n            update: await Messages.find(_objectSpread(_objectSpread({}, threadQuery), {}, {\n              _updatedAt: {\n                $gt: updatedSinceDate\n              }\n            }), {\n              sort,\n              projection: fields\n            }).toArray(),\n            remove: await Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n              sort,\n              projection: fields\n            }).toArray()\n          }\n        });\n      }\n    });\n    API.v1.addRoute('chat.getThreadMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          tmid\n        } = this.queryParams;\n        const {\n          query,\n          fields,\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!settings.get('Threads_enabled')) {\n          throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n        }\n        if (!tmid) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n        }\n        const thread = await Messages.findOneById(tmid, {\n          projection: {\n            rid: 1\n          }\n        });\n        if (!(thread !== null && thread !== void 0 && thread.rid)) {\n          throw new Meteor.Error('error-invalid-message', 'Invalid Message');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        const room = await Rooms.findOneById(thread.rid, {\n          projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n            t: 1,\n            _id: 1\n          })\n        });\n        if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        const {\n          cursor,\n          totalCount\n        } = await Messages.findPaginated(_objectSpread(_objectSpread({}, query), {}, {\n          tmid\n        }), {\n          sort: sort || {\n            ts: 1\n          },\n          skip: offset,\n          limit: count,\n          projection: fields\n        });\n        const [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n        return API.v1.success({\n          messages,\n          count: messages.length,\n          offset,\n          total\n        });\n      }\n    });\n    API.v1.addRoute('chat.syncThreadMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          tmid\n        } = this.queryParams;\n        const {\n          query,\n          fields,\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          updatedSince\n        } = this.queryParams;\n        let updatedSinceDate;\n        if (!settings.get('Threads_enabled')) {\n          throw new Meteor.Error('error-not-allowed', 'Threads Disabled');\n        }\n        if (!tmid) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n        }\n        if (!updatedSince) {\n          throw new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n        }\n        if (isNaN(Date.parse(updatedSince))) {\n          throw new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n        } else {\n          updatedSinceDate = new Date(updatedSince);\n        }\n        const thread = await Messages.findOneById(tmid, {\n          projection: {\n            rid: 1\n          }\n        });\n        if (!(thread !== null && thread !== void 0 && thread.rid)) {\n          throw new Meteor.Error('error-invalid-message', 'Invalid Message');\n        }\n        const user = await Users.findOneById(this.userId, {\n          projection: {\n            _id: 1\n          }\n        });\n        const room = await Rooms.findOneById(thread.rid, {\n          projection: _objectSpread(_objectSpread({}, roomAccessAttributes), {}, {\n            t: 1,\n            _id: 1\n          })\n        });\n        if (!room || !user || !(await canAccessRoomAsync(room, user))) {\n          throw new Meteor.Error('error-not-allowed', 'Not Allowed');\n        }\n        return API.v1.success({\n          messages: {\n            update: await Messages.find(_objectSpread(_objectSpread({}, query), {}, {\n              tmid,\n              _updatedAt: {\n                $gt: updatedSinceDate\n              }\n            }), {\n              projection: fields,\n              sort\n            }).toArray(),\n            remove: await Messages.trashFindDeletedAfter(updatedSinceDate, _objectSpread(_objectSpread({}, query), {}, {\n              tmid\n            }), {\n              projection: fields,\n              sort\n            }).toArray()\n          }\n        });\n      }\n    });\n    API.v1.addRoute('chat.followMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          mid\n        } = this.bodyParams;\n        if (!mid) {\n          throw new Meteor.Error('The required \"mid\" body param is missing.');\n        }\n        await Meteor.callAsync('followMessage', {\n          mid\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.unfollowMessage', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          mid\n        } = this.bodyParams;\n        if (!mid) {\n          throw new Meteor.Error('The required \"mid\" body param is missing.');\n        }\n        await Meteor.callAsync('unfollowMessage', {\n          mid\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.getMentionedMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n        }\n        const messages = await findMentionedMessages({\n          uid: this.userId,\n          roomId,\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        });\n        return API.v1.success(messages);\n      }\n    });\n    API.v1.addRoute('chat.getStarredMessages', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n        }\n        const messages = await findStarredMessages({\n          uid: this.userId,\n          roomId,\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        });\n        messages.messages = await normalizeMessagesForUser(messages.messages, this.userId);\n        return API.v1.success(messages);\n      }\n    });\n    API.v1.addRoute('chat.getDiscussions', {\n      authRequired: true\n    }, {\n      async get() {\n        const {\n          roomId,\n          text\n        } = this.queryParams;\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        if (!roomId) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n        }\n        const messages = await findDiscussionsFromRoom({\n          uid: this.userId,\n          roomId,\n          text: text || '',\n          pagination: {\n            offset,\n            count,\n            sort\n          }\n        });\n        return API.v1.success(messages);\n      }\n    });\n    API.v1.addRoute('chat.otr', {\n      authRequired: true\n    }, {\n      async post() {\n        const {\n          roomId,\n          type: otrType\n        } = this.bodyParams;\n        if (!roomId) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n        }\n        if (!otrType) {\n          throw new Meteor.Error('error-invalid-params', 'The required \"type\" query param is missing.');\n        }\n        const {\n          username,\n          type\n        } = this.user;\n        if (!username) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user');\n        }\n        await canSendMessageAsync(roomId, {\n          uid: this.userId,\n          username,\n          type\n        });\n        await Message.saveSystemMessage(otrType, roomId, username, {\n          _id: this.userId,\n          username\n        });\n        return API.v1.success();\n      }\n    });\n    API.v1.addRoute('chat.getURLPreview', {\n      authRequired: true,\n      validateParams: isChatGetURLPreviewProps\n    }, {\n      async get() {\n        const {\n          roomId,\n          url\n        } = this.queryParams;\n        if (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n          throw new Meteor.Error('error-not-allowed', 'Not allowed');\n        }\n        const {\n          urlPreview\n        } = await OEmbed.parseUrl(url);\n        urlPreview.ignoreParse = true;\n        return API.v1.success({\n          urlPreview\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","Message","Messages","Users","Rooms","Subscriptions","isChatReportMessageProps","isChatGetURLPreviewProps","isChatUpdateProps","isChatGetThreadsListProps","isChatDeleteProps","escapeRegExp","Meteor","reportMessage","roomAccessAttributes","canAccessRoomAsync","canAccessRoomIdAsync","canSendMessageAsync","hasPermissionAsync","deleteMessageValidatingPermission","processWebhookMessage","executeSendMessage","executeUpdateMessage","applyAirGappedRestrictionsValidation","OEmbed","executeSetReaction","settings","MessageTypes","normalizeMessagesForUser","API","getPaginationItems","findDiscussionsFromRoom","findMentionedMessages","findStarredMessages","__reifyWaitForDeps__","v1","addRoute","authRequired","validateParams","post","msg","findOneById","bodyParams","msgId","projection","u","rid","failure","concat","roomId","asUser","_id","userId","user","success","ts","Date","now","toString","message","get","lastUpdate","queryParams","Error","isNaN","parse","result","callAsync","updated","deleted","_this$bodyParams$mess","messageId","trim","pinnedMessage","messageReturn","channel","searchText","offset","count","docs","messages","isSystemMessage","sent","previewUrls","_this$bodyParams$mess2","starred","_this$bodyParams$mess3","_this$bodyParams$mess4","msgFromBody","text","customFields","updatedMessage","_this$bodyParams$mess5","emoji","reaction","shouldReact","description","ignore","test","since","cursor","totalCount","trashFindPaginatedDeletedAfter","skip","limit","total","Promise","all","toArray","length","findPaginatedPinnedByRoom","_await$Subscriptions$","type","sort","fields","query","parseJsonQuery","room","t","typeThread","_hidden","$ne","replies","$in","findOneByRoomIdAndUserId","tunread","RegExp","threadQuery","tcount","$exists","findPaginated","tlm","threads","updatedSince","updatedSinceDate","Object","assign","update","find","_updatedAt","$gt","remove","trashFindDeletedAfter","tmid","thread","mid","uid","pagination","otrType","username","saveSystemMessage","url","urlPreview","parseUrl","ignoreParse","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/chat.ts"],"sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Messages, Users, Rooms, Subscriptions } from '@rocket.chat/models';\nimport {\n\tisChatReportMessageProps,\n\tisChatGetURLPreviewProps,\n\tisChatUpdateProps,\n\tisChatGetThreadsListProps,\n\tisChatDeleteProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Meteor } from 'meteor/meteor';\n\nimport { reportMessage } from '../../../../server/lib/moderation/reportMessage';\nimport { roomAccessAttributes } from '../../../authorization/server';\nimport { canAccessRoomAsync, canAccessRoomIdAsync } from '../../../authorization/server/functions/canAccessRoom';\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { deleteMessageValidatingPermission } from '../../../lib/server/functions/deleteMessage';\nimport { processWebhookMessage } from '../../../lib/server/functions/processWebhookMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport { executeUpdateMessage } from '../../../lib/server/methods/updateMessage';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { OEmbed } from '../../../oembed/server/server';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\nimport { settings } from '../../../settings/server';\nimport { MessageTypes } from '../../../ui-utils/server';\nimport { normalizeMessagesForUser } from '../../../utils/server/lib/normalizeMessagesForUser';\nimport { API } from '../api';\nimport { getPaginationItems } from '../helpers/getPaginationItems';\nimport { findDiscussionsFromRoom, findMentionedMessages, findStarredMessages } from '../lib/messages';\n\nAPI.v1.addRoute(\n\t'chat.delete',\n\t{ authRequired: true, validateParams: isChatDeleteProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId, { projection: { u: 1, rid: 1 } });\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis.bodyParams.asUser &&\n\t\t\t\tmsg.u._id !== this.userId &&\n\t\t\t\t!(await hasPermissionAsync(this.userId, 'force-delete-message', msg.rid))\n\t\t\t) {\n\t\t\t\treturn API.v1.failure('Unauthorized. You must have the permission \"force-delete-message\" to delete other\\'s message as them.');\n\t\t\t}\n\n\t\t\tconst userId = this.bodyParams.asUser ? msg.u._id : this.userId;\n\t\t\tconst user = await Users.findOneById(userId, { projection: { _id: 1 } });\n\n\t\t\tif (!user) {\n\t\t\t\treturn API.v1.failure('User not found');\n\t\t\t}\n\n\t\t\tawait deleteMessageValidatingPermission(msg, user._id);\n\n\t\t\treturn API.v1.success({\n\t\t\t\t_id: msg._id,\n\t\t\t\tts: Date.now().toString(),\n\t\t\t\tmessage: msg,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, lastUpdate } = this.queryParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!lastUpdate) {\n\t\t\t\tthrow new Meteor.Error('error-lastUpdate-param-not-provided', 'The required \"lastUpdate\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(lastUpdate))) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-invalid', 'The \"lastUpdate\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst result = await Meteor.callAsync('messages/get', roomId, { lastUpdate: new Date(lastUpdate) });\n\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\treturn API.v1.success({\n\t\t\t\tresult: {\n\t\t\t\t\tupdated: await normalizeMessagesForUser(result.updated, this.userId),\n\t\t\t\t\tdeleted: result.deleted,\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMessage',\n\t{\n\t\tauthRequired: true,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tif (!this.queryParams.msgId) {\n\t\t\t\treturn API.v1.failure('The \"msgId\" query parameter must be provided.');\n\t\t\t}\n\n\t\t\tconst msg = await Meteor.callAsync('getSingleMessage', this.queryParams.msgId);\n\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([msg], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.pinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst pinnedMessage = await Meteor.callAsync('pinMessage', msg);\n\n\t\t\tconst [message] = await normalizeMessagesForUser([pinnedMessage], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.postMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst messageReturn = (await applyAirGappedRestrictionsValidation(() => processWebhookMessage(this.bodyParams, this.user)))[0];\n\n\t\t\tif (!messageReturn) {\n\t\t\t\treturn API.v1.failure('unknown-error');\n\t\t\t}\n\n\t\t\tconst [message] = await normalizeMessagesForUser([messageReturn.message], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tts: Date.now(),\n\t\t\t\tchannel: messageReturn.channel,\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.search',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!searchText) {\n\t\t\t\tthrow new Meteor.Error('error-searchText-param-not-provided', 'The required \"searchText\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst result = (await Meteor.callAsync('messageSearch', searchText, roomId, count, offset)).message.docs;\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(result, this.userId),\n\t\t\t});\n\t\t},\n\t},\n);\n\n// The difference between `chat.postMessage` and `chat.sendMessage` is that `chat.sendMessage` allows\n// for passing a value for `_id` and the other one doesn't. Also, `chat.sendMessage` only sends it to\n// one channel whereas the other one allows for sending to more than one channel at a time.\nAPI.v1.addRoute(\n\t'chat.sendMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.message) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The \"message\" parameter must be provided.');\n\t\t\t}\n\n\t\t\tif (MessageTypes.isSystemMessage(this.bodyParams.message)) {\n\t\t\t\tthrow new Error(\"Cannot send system messages using 'chat.sendMessage'\");\n\t\t\t}\n\n\t\t\tconst sent = await applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteSendMessage(this.userId, this.bodyParams.message as Pick<IMessage, 'rid'>, this.bodyParams.previewUrls),\n\t\t\t);\n\t\t\tconst [message] = await normalizeMessagesForUser([sent], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.starMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: true,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unPinMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unpinMessage', msg);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unStarMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is required.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('starMessage', {\n\t\t\t\t_id: msg._id,\n\t\t\t\trid: msg.rid,\n\t\t\t\tstarred: false,\n\t\t\t});\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.update',\n\t{ authRequired: true, validateParams: isChatUpdateProps },\n\t{\n\t\tasync post() {\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.msgId);\n\n\t\t\t// Ensure the message exists\n\t\t\tif (!msg) {\n\t\t\t\treturn API.v1.failure(`No message found with the id of \"${this.bodyParams.msgId}\".`);\n\t\t\t}\n\n\t\t\tif (this.bodyParams.roomId !== msg.rid) {\n\t\t\t\treturn API.v1.failure('The room id provided does not match where the message is from.');\n\t\t\t}\n\n\t\t\tconst msgFromBody = this.bodyParams.text;\n\n\t\t\t// Permission checks are already done in the updateMessage method, so no need to duplicate them\n\t\t\tawait applyAirGappedRestrictionsValidation(() =>\n\t\t\t\texecuteUpdateMessage(\n\t\t\t\t\tthis.userId,\n\t\t\t\t\t{\n\t\t\t\t\t\t_id: msg._id,\n\t\t\t\t\t\tmsg: msgFromBody,\n\t\t\t\t\t\trid: msg.rid,\n\t\t\t\t\t\tcustomFields: this.bodyParams.customFields as Record<string, any> | undefined,\n\t\t\t\t\t},\n\t\t\t\t\tthis.bodyParams.previewUrls,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tconst updatedMessage = await Messages.findOneById(msg._id);\n\t\t\tconst [message] = await normalizeMessagesForUser(updatedMessage ? [updatedMessage] : [], this.userId);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessage,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.react',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tif (!this.bodyParams.messageId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-messageid-param-not-provided', 'The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(this.bodyParams.messageId);\n\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Meteor.Error('error-message-not-found', 'The provided \"messageId\" does not match any existing message.');\n\t\t\t}\n\n\t\t\tconst emoji = 'emoji' in this.bodyParams ? this.bodyParams.emoji : (this.bodyParams as { reaction: string }).reaction;\n\n\t\t\tif (!emoji) {\n\t\t\t\tthrow new Meteor.Error('error-emoji-param-not-provided', 'The required \"emoji\" param is missing.');\n\t\t\t}\n\n\t\t\tawait executeSetReaction(this.userId, emoji, msg, this.bodyParams.shouldReact);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.reportMessage',\n\t{ authRequired: true, validateParams: isChatReportMessageProps },\n\t{\n\t\tasync post() {\n\t\t\tconst { messageId, description } = this.bodyParams;\n\t\t\tif (!messageId) {\n\t\t\t\treturn API.v1.failure('The required \"messageId\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!description) {\n\t\t\t\treturn API.v1.failure('The required \"description\" param is missing.');\n\t\t\t}\n\n\t\t\tawait reportMessage(messageId, description, this.userId);\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.ignoreUser',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, userId } = this.queryParams;\n\t\t\tlet { ignore = true } = this.queryParams;\n\n\t\t\tignore = typeof ignore === 'string' ? /true|1/.test(ignore) : ignore;\n\n\t\t\tif (!rid?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" param is missing.');\n\t\t\t}\n\n\t\t\tif (!userId?.trim()) {\n\t\t\t\tthrow new Meteor.Error('error-user-id-param-not-provided', 'The required \"userId\" param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('ignoreUser', { rid, userId, ignore });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDeletedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, since } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!since) {\n\t\t\t\tthrow new Meteor.Error('The required \"since\" query param is missing.');\n\t\t\t} else if (isNaN(Date.parse(since))) {\n\t\t\t\tthrow new Meteor.Error('The \"since\" query parameter must be a valid date.');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.trashFindPaginatedDeletedAfter(\n\t\t\t\tnew Date(since),\n\t\t\t\t{ rid: roomId },\n\t\t\t\t{\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getPinnedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-roomId-param-not-provided', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginatedPinnedByRoom(roomId, {\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t});\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: await normalizeMessagesForUser(messages, this.userId),\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadsList',\n\t{ authRequired: true, validateParams: isChatGetThreadsListProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid, type, text } = this.queryParams;\n\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort, fields, query } = await this.parseJsonQuery();\n\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\n\t\t\tconst typeThread = {\n\t\t\t\t_hidden: { $ne: true },\n\t\t\t\t...(type === 'following' && { replies: { $in: [this.userId] } }),\n\t\t\t\t...(type === 'unread' && { _id: { $in: (await Subscriptions.findOneByRoomIdAndUserId(room._id, user._id))?.tunread || [] } }),\n\t\t\t\tmsg: new RegExp(escapeRegExp(text || ''), 'i'),\n\t\t\t};\n\n\t\t\tconst threadQuery = { ...query, ...typeThread, rid: room._id, tcount: { $exists: true } };\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(threadQuery, {\n\t\t\t\tsort: sort || { tlm: -1 },\n\t\t\t\tskip: offset,\n\t\t\t\tlimit: count,\n\t\t\t\tprojection: fields,\n\t\t\t});\n\n\t\t\tconst [threads, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: await normalizeMessagesForUser(threads, this.userId),\n\t\t\t\tcount: threads.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadsList',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { rid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!rid) {\n\t\t\t\tthrow new Meteor.Error('error-room-id-param-not-provided', 'The required \"rid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst threadQuery = Object.assign({}, query, { rid, tcount: { $exists: true } });\n\t\t\treturn API.v1.success({\n\t\t\t\tthreads: {\n\t\t\t\t\tupdate: await Messages.find(\n\t\t\t\t\t\t{ ...threadQuery, _updatedAt: { $gt: updatedSinceDate } },\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsort,\n\t\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t\t},\n\t\t\t\t\t).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, threadQuery, {\n\t\t\t\t\t\tsort,\n\t\t\t\t\t\tprojection: fields,\n\t\t\t\t\t}).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!settings.get('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\tconst { cursor, totalCount } = await Messages.findPaginated(\n\t\t\t\t{ ...query, tmid },\n\t\t\t\t{\n\t\t\t\t\tsort: sort || { ts: 1 },\n\t\t\t\t\tskip: offset,\n\t\t\t\t\tlimit: count,\n\t\t\t\t\tprojection: fields,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst [messages, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages,\n\t\t\t\tcount: messages.length,\n\t\t\t\toffset,\n\t\t\t\ttotal,\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.syncThreadMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { tmid } = this.queryParams;\n\t\t\tconst { query, fields, sort } = await this.parseJsonQuery();\n\t\t\tconst { updatedSince } = this.queryParams;\n\t\t\tlet updatedSinceDate;\n\t\t\tif (!settings.get<boolean>('Threads_enabled')) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Threads Disabled');\n\t\t\t}\n\t\t\tif (!tmid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"tmid\" query param is missing.');\n\t\t\t}\n\t\t\tif (!updatedSince) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The required param \"updatedSince\" is missing.');\n\t\t\t}\n\t\t\tif (isNaN(Date.parse(updatedSince))) {\n\t\t\t\tthrow new Meteor.Error('error-updatedSince-param-invalid', 'The \"updatedSince\" query parameter must be a valid date.');\n\t\t\t} else {\n\t\t\t\tupdatedSinceDate = new Date(updatedSince);\n\t\t\t}\n\t\t\tconst thread = await Messages.findOneById(tmid, { projection: { rid: 1 } });\n\t\t\tif (!thread?.rid) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-message', 'Invalid Message');\n\t\t\t}\n\t\t\tconst user = await Users.findOneById(this.userId, { projection: { _id: 1 } });\n\t\t\tconst room = await Rooms.findOneById(thread.rid, { projection: { ...roomAccessAttributes, t: 1, _id: 1 } });\n\n\t\t\tif (!room || !user || !(await canAccessRoomAsync(room, user))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not Allowed');\n\t\t\t}\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: {\n\t\t\t\t\tupdate: await Messages.find({ ...query, tmid, _updatedAt: { $gt: updatedSinceDate } }, { projection: fields, sort }).toArray(),\n\t\t\t\t\tremove: await Messages.trashFindDeletedAfter(updatedSinceDate, { ...query, tmid }, { projection: fields, sort }).toArray(),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.followMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('followMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.unfollowMessage',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { mid } = this.bodyParams;\n\n\t\t\tif (!mid) {\n\t\t\t\tthrow new Meteor.Error('The required \"mid\" body param is missing.');\n\t\t\t}\n\n\t\t\tawait Meteor.callAsync('unfollowMessage', { mid });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getMentionedMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findMentionedMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getStarredMessages',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findStarredMessages({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tmessages.messages = await normalizeMessagesForUser(messages.messages, this.userId);\n\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getDiscussions',\n\t{ authRequired: true },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, text } = this.queryParams;\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\t\t\tconst messages = await findDiscussionsFromRoom({\n\t\t\t\tuid: this.userId,\n\t\t\t\troomId,\n\t\t\t\ttext: text || '',\n\t\t\t\tpagination: {\n\t\t\t\t\toffset,\n\t\t\t\t\tcount,\n\t\t\t\t\tsort,\n\t\t\t\t},\n\t\t\t});\n\t\t\treturn API.v1.success(messages);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.otr',\n\t{ authRequired: true },\n\t{\n\t\tasync post() {\n\t\t\tconst { roomId, type: otrType } = this.bodyParams;\n\n\t\t\tif (!roomId) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"roomId\" query param is missing.');\n\t\t\t}\n\n\t\t\tif (!otrType) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params', 'The required \"type\" query param is missing.');\n\t\t\t}\n\n\t\t\tconst { username, type } = this.user;\n\n\t\t\tif (!username) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user');\n\t\t\t}\n\n\t\t\tawait canSendMessageAsync(roomId, { uid: this.userId, username, type });\n\n\t\t\tawait Message.saveSystemMessage(otrType, roomId, username, { _id: this.userId, username });\n\n\t\t\treturn API.v1.success();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'chat.getURLPreview',\n\t{ authRequired: true, validateParams: isChatGetURLPreviewProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { roomId, url } = this.queryParams;\n\n\t\t\tif (!(await canAccessRoomIdAsync(roomId, this.userId))) {\n\t\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed');\n\t\t\t}\n\n\t\t\tconst { urlPreview } = await OEmbed.parseUrl(url);\n\t\t\turlPreview.ignoreParse = true;\n\n\t\t\treturn API.v1.success({ urlPreview });\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"8fdc3aa24d3a6cee8898fb693f94ee8cccdf2537"}
