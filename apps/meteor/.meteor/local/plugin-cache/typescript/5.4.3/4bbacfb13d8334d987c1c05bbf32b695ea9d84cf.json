{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Contacts.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/Contacts.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Contacts.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/Contacts.ts","sourceRoot":"","sources":["app/livechat/server/lib/Contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tAtLeast,\n\tILivechatContact,\n\tILivechatContactChannel,\n\tILivechatCustomField,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUser,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatVisitors,\n\tUsers,\n\tLivechatRooms,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tRooms,\n\tSubscriptions,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport type { PaginatedResult, VisitorSearchChatsResult } from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { MatchKeysAndValues, OnlyFieldsOfType, FindOptions, Sort } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedByRoom,\n} from '../../../lib/server/lib/notifyListener';\nimport { i18n } from '../../../utils/lib/i18n';\n\ntype RegisterContactProps = {\n\t_id?: string;\n\ttoken: string;\n\tname: string;\n\tusername?: string;\n\temail?: string;\n\tphone?: string;\n\tcustomFields?: Record<string, unknown | string>;\n\tcontactManager?: {\n\t\tusername: string;\n\t};\n};\n\ntype CreateContactParams = {\n\tname: string;\n\temails?: string[];\n\tphones?: string[];\n\tunknown: boolean;\n\tcustomFields?: Record<string, string | unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype UpdateContactParams = {\n\tcontactId: string;\n\tname?: string;\n\temails?: string[];\n\tphones?: string[];\n\tcustomFields?: Record<string, unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype GetContactsParams = {\n\tsearchText?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\ntype GetContactHistoryParams = {\n\tcontactId: string;\n\tsource?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\nexport const Contacts = {\n\tasync registerContact({\n\t\ttoken,\n\t\tname,\n\t\temail = '',\n\t\tphone,\n\t\tusername,\n\t\tcustomFields = {},\n\t\tcontactManager,\n\t}: RegisterContactProps): Promise<string> {\n\t\tcheck(token, String);\n\n\t\tconst visitorEmail = email.trim().toLowerCase();\n\n\t\tif (contactManager?.username) {\n\t\t\t// verify if the user exists with this username and has a livechat-agent role\n\t\t\tconst user = await Users.findOneByUsername(contactManager.username, { projection: { roles: 1 } });\n\t\t\tif (!user) {\n\t\t\t\tthrow new Meteor.Error('error-contact-manager-not-found', `No user found with username ${contactManager.username}`);\n\t\t\t}\n\t\t\tif (!user.roles || !Array.isArray(user.roles) || !user.roles.includes('livechat-agent')) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-contact-manager', 'The contact manager must have the role \"livechat-agent\"');\n\t\t\t}\n\t\t}\n\n\t\tlet contactId;\n\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (user) {\n\t\t\tcontactId = user._id;\n\t\t} else {\n\t\t\tif (!username) {\n\t\t\t\tusername = await LivechatVisitors.getNextVisitorUsername();\n\t\t\t}\n\n\t\t\tlet existingUser = null;\n\n\t\t\tif (visitorEmail !== '' && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(visitorEmail))) {\n\t\t\t\tcontactId = existingUser._id;\n\t\t\t} else {\n\t\t\t\tconst userData = {\n\t\t\t\t\tusername,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\ttoken,\n\t\t\t\t};\n\n\t\t\t\tcontactId = (await LivechatVisitors.insertOne(userData)).insertedId;\n\t\t\t}\n\t\t}\n\n\t\tconst allowedCF = await getAllowedCustomFields();\n\t\tconst livechatData: Record<string, string> = validateCustomFields(allowedCF, customFields, { ignoreAdditionalFields: true });\n\n\t\tconst fieldsToRemove = {\n\t\t\t// if field is explicitely set to empty string, remove\n\t\t\t...(phone === '' && { phone: 1 }),\n\t\t\t...(visitorEmail === '' && { visitorEmails: 1 }),\n\t\t\t...(!contactManager?.username && { contactManager: 1 }),\n\t\t};\n\n\t\tconst updateUser: { $set: MatchKeysAndValues<ILivechatVisitor>; $unset?: OnlyFieldsOfType<ILivechatVisitor> } = {\n\t\t\t$set: {\n\t\t\t\ttoken,\n\t\t\t\tname,\n\t\t\t\tlivechatData,\n\t\t\t\t// if phone has some value, set\n\t\t\t\t...(phone && { phone: [{ phoneNumber: phone }] }),\n\t\t\t\t...(visitorEmail && { visitorEmails: [{ address: visitorEmail }] }),\n\t\t\t\t...(contactManager?.username && { contactManager: { username: contactManager.username } }),\n\t\t\t},\n\t\t\t...(Object.keys(fieldsToRemove).length && { $unset: fieldsToRemove }),\n\t\t};\n\n\t\tawait LivechatVisitors.updateOne({ _id: contactId }, updateUser);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms: IOmnichannelRoom[] = await LivechatRooms.findByVisitorId(contactId, {}, extraQuery).toArray();\n\n\t\tif (rooms?.length) {\n\t\t\tfor await (const room of rooms) {\n\t\t\t\tconst { _id: rid } = room;\n\n\t\t\t\tconst responses = await Promise.all([\n\t\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t\t]);\n\n\t\t\t\tif (responses[0]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnRoomChangedById(rid);\n\t\t\t\t}\n\n\t\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t\t}\n\n\t\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn contactId;\n\t},\n};\n\nexport function isSingleContactEnabled(): boolean {\n\t// The Single Contact feature is not yet available in production, but can already be partially used in test environments.\n\treturn process.env.TEST_MODE?.toUpperCase() === 'TRUE';\n}\n\nexport async function createContactFromVisitor(visitor: ILivechatVisitor): Promise<string> {\n\tif (visitor.contactId) {\n\t\tthrow new Error('error-contact-already-exists');\n\t}\n\n\tconst contactData: InsertionModel<ILivechatContact> = {\n\t\tname: visitor.name || visitor.username,\n\t\temails: visitor.visitorEmails,\n\t\tphones: visitor.phone || undefined,\n\t\tunknown: true,\n\t\tchannels: [],\n\t\tcustomFields: visitor.livechatData,\n\t\tcreatedAt: new Date(),\n\t};\n\n\tif (visitor.contactManager) {\n\t\tconst contactManagerId = await Users.findOneByUsername<Pick<IUser, '_id'>>(visitor.contactManager.username, { projection: { _id: 1 } });\n\t\tif (contactManagerId) {\n\t\t\tcontactData.contactManager = contactManagerId._id;\n\t\t}\n\t}\n\n\tconst { insertedId: contactId } = await LivechatContacts.insertOne(contactData);\n\n\tawait LivechatVisitors.updateOne({ _id: visitor._id }, { $set: { contactId } });\n\n\treturn contactId;\n}\n\nexport async function createContact(params: CreateContactParams): Promise<string> {\n\tconst { name, emails, phones, customFields: receivedCustomFields = {}, contactManager, channels, unknown } = params;\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst allowedCustomFields = await getAllowedCustomFields();\n\tconst customFields = validateCustomFields(allowedCustomFields, receivedCustomFields);\n\n\tconst { insertedId } = await LivechatContacts.insertOne({\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t\tunknown,\n\t\tcreatedAt: new Date(),\n\t});\n\n\treturn insertedId;\n}\n\nexport async function updateContact(params: UpdateContactParams): Promise<ILivechatContact> {\n\tconst { contactId, name, emails, phones, customFields: receivedCustomFields, contactManager, channels } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id'>>(contactId, { projection: { _id: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst customFields = receivedCustomFields && validateCustomFields(await getAllowedCustomFields(), receivedCustomFields);\n\n\tconst updatedContact = await LivechatContacts.updateContact(contactId, {\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t});\n\n\treturn updatedContact;\n}\n\nexport async function getContacts(params: GetContactsParams): Promise<PaginatedResult<{ contacts: ILivechatContact[] }>> {\n\tconst { searchText, count, offset, sort } = params;\n\n\tconst { cursor, totalCount } = LivechatContacts.findPaginatedContacts(searchText, {\n\t\tlimit: count,\n\t\tskip: offset,\n\t\tsort: sort ?? { name: 1 },\n\t});\n\n\tconst [contacts, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tcontacts,\n\t\tcount,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function getContactHistory(\n\tparams: GetContactHistoryParams,\n): Promise<PaginatedResult<{ history: VisitorSearchChatsResult[] }>> {\n\tconst { contactId, source, count, offset, sort } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, 'channels'>>(contactId, { projection: { channels: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tconst visitorsIds = new Set(contact.channels?.map((channel: ILivechatContactChannel) => channel.visitorId));\n\n\tif (!visitorsIds?.size) {\n\t\treturn { history: [], count: 0, offset, total: 0 };\n\t}\n\n\tconst options: FindOptions<IOmnichannelRoom> = {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t\tprojection: {\n\t\t\tfname: 1,\n\t\t\tts: 1,\n\t\t\tv: 1,\n\t\t\tmsgs: 1,\n\t\t\tservedBy: 1,\n\t\t\tclosedAt: 1,\n\t\t\tclosedBy: 1,\n\t\t\tcloser: 1,\n\t\t\ttags: 1,\n\t\t\tsource: 1,\n\t\t},\n\t};\n\n\tconst { totalCount, cursor } = LivechatRooms.findPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds: Array.from(visitorsIds),\n\t\tsource,\n\t\toptions,\n\t});\n\n\tconst [total, history] = await Promise.all([totalCount, cursor.toArray()]);\n\n\treturn {\n\t\thistory,\n\t\tcount: history.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nasync function getAllowedCustomFields(): Promise<Pick<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[]> {\n\treturn LivechatCustomField.findByScope(\n\t\t'visitor',\n\t\t{\n\t\t\tprojection: { _id: 1, label: 1, regexp: 1, required: 1 },\n\t\t},\n\t\tfalse,\n\t).toArray();\n}\n\nexport function validateCustomFields(\n\tallowedCustomFields: AtLeast<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[],\n\tcustomFields: Record<string, string | unknown>,\n\toptions?: { ignoreAdditionalFields?: boolean },\n): Record<string, string> {\n\tconst validValues: Record<string, string> = {};\n\n\tfor (const cf of allowedCustomFields) {\n\t\tif (!customFields.hasOwnProperty(cf._id)) {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tconst cfValue: string = trim(customFields[cf._id]);\n\n\t\tif (!cfValue || typeof cfValue !== 'string') {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (cf.regexp) {\n\t\t\tconst regex = new RegExp(cf.regexp);\n\t\t\tif (!regex.test(cfValue)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t}\n\n\t\tvalidValues[cf._id] = cfValue;\n\t}\n\n\tif (!options?.ignoreAdditionalFields) {\n\t\tconst allowedCustomFieldIds = new Set(allowedCustomFields.map((cf) => cf._id));\n\t\tfor (const key in customFields) {\n\t\t\tif (!allowedCustomFieldIds.has(key)) {\n\t\t\t\tthrow new Error(i18n.t('error-custom-field-not-allowed', { key }));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validValues;\n}\n\nexport async function validateContactManager(contactManagerUserId: string) {\n\tconst contactManagerUser = await Users.findOneAgentById<Pick<IUser, '_id'>>(contactManagerUserId, { projection: { _id: 1 } });\n\tif (!contactManagerUser) {\n\t\tthrow new Error('error-contact-manager-not-found');\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/Contacts.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/Contacts.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/Contacts.ts","sourceRoot":"","sources":["app/livechat/server/lib/Contacts.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tAtLeast,\n\tILivechatContact,\n\tILivechatContactChannel,\n\tILivechatCustomField,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUser,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatVisitors,\n\tUsers,\n\tLivechatRooms,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tRooms,\n\tSubscriptions,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport type { PaginatedResult, VisitorSearchChatsResult } from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { MatchKeysAndValues, OnlyFieldsOfType, FindOptions, Sort } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedByRoom,\n} from '../../../lib/server/lib/notifyListener';\nimport { i18n } from '../../../utils/lib/i18n';\n\ntype RegisterContactProps = {\n\t_id?: string;\n\ttoken: string;\n\tname: string;\n\tusername?: string;\n\temail?: string;\n\tphone?: string;\n\tcustomFields?: Record<string, unknown | string>;\n\tcontactManager?: {\n\t\tusername: string;\n\t};\n};\n\ntype CreateContactParams = {\n\tname: string;\n\temails?: string[];\n\tphones?: string[];\n\tunknown: boolean;\n\tcustomFields?: Record<string, string | unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype UpdateContactParams = {\n\tcontactId: string;\n\tname?: string;\n\temails?: string[];\n\tphones?: string[];\n\tcustomFields?: Record<string, unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype GetContactsParams = {\n\tsearchText?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\ntype GetContactHistoryParams = {\n\tcontactId: string;\n\tsource?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\nexport const Contacts = {\n\tasync registerContact({\n\t\ttoken,\n\t\tname,\n\t\temail = '',\n\t\tphone,\n\t\tusername,\n\t\tcustomFields = {},\n\t\tcontactManager,\n\t}: RegisterContactProps): Promise<string> {\n\t\tcheck(token, String);\n\n\t\tconst visitorEmail = email.trim().toLowerCase();\n\n\t\tif (contactManager?.username) {\n\t\t\t// verify if the user exists with this username and has a livechat-agent role\n\t\t\tconst user = await Users.findOneByUsername(contactManager.username, { projection: { roles: 1 } });\n\t\t\tif (!user) {\n\t\t\t\tthrow new Meteor.Error('error-contact-manager-not-found', `No user found with username ${contactManager.username}`);\n\t\t\t}\n\t\t\tif (!user.roles || !Array.isArray(user.roles) || !user.roles.includes('livechat-agent')) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-contact-manager', 'The contact manager must have the role \"livechat-agent\"');\n\t\t\t}\n\t\t}\n\n\t\tlet contactId;\n\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (user) {\n\t\t\tcontactId = user._id;\n\t\t} else {\n\t\t\tif (!username) {\n\t\t\t\tusername = await LivechatVisitors.getNextVisitorUsername();\n\t\t\t}\n\n\t\t\tlet existingUser = null;\n\n\t\t\tif (visitorEmail !== '' && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(visitorEmail))) {\n\t\t\t\tcontactId = existingUser._id;\n\t\t\t} else {\n\t\t\t\tconst userData = {\n\t\t\t\t\tusername,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\ttoken,\n\t\t\t\t};\n\n\t\t\t\tcontactId = (await LivechatVisitors.insertOne(userData)).insertedId;\n\t\t\t}\n\t\t}\n\n\t\tconst allowedCF = await getAllowedCustomFields();\n\t\tconst livechatData: Record<string, string> = validateCustomFields(allowedCF, customFields, { ignoreAdditionalFields: true });\n\n\t\tconst fieldsToRemove = {\n\t\t\t// if field is explicitely set to empty string, remove\n\t\t\t...(phone === '' && { phone: 1 }),\n\t\t\t...(visitorEmail === '' && { visitorEmails: 1 }),\n\t\t\t...(!contactManager?.username && { contactManager: 1 }),\n\t\t};\n\n\t\tconst updateUser: { $set: MatchKeysAndValues<ILivechatVisitor>; $unset?: OnlyFieldsOfType<ILivechatVisitor> } = {\n\t\t\t$set: {\n\t\t\t\ttoken,\n\t\t\t\tname,\n\t\t\t\tlivechatData,\n\t\t\t\t// if phone has some value, set\n\t\t\t\t...(phone && { phone: [{ phoneNumber: phone }] }),\n\t\t\t\t...(visitorEmail && { visitorEmails: [{ address: visitorEmail }] }),\n\t\t\t\t...(contactManager?.username && { contactManager: { username: contactManager.username } }),\n\t\t\t},\n\t\t\t...(Object.keys(fieldsToRemove).length && { $unset: fieldsToRemove }),\n\t\t};\n\n\t\tawait LivechatVisitors.updateOne({ _id: contactId }, updateUser);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms: IOmnichannelRoom[] = await LivechatRooms.findByVisitorId(contactId, {}, extraQuery).toArray();\n\n\t\tif (rooms?.length) {\n\t\t\tfor await (const room of rooms) {\n\t\t\t\tconst { _id: rid } = room;\n\n\t\t\t\tconst responses = await Promise.all([\n\t\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t\t]);\n\n\t\t\t\tif (responses[0]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnRoomChangedById(rid);\n\t\t\t\t}\n\n\t\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t\t}\n\n\t\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn contactId;\n\t},\n};\n\nexport function isSingleContactEnabled(): boolean {\n\t// The Single Contact feature is not yet available in production, but can already be partially used in test environments.\n\treturn process.env.TEST_MODE?.toUpperCase() === 'TRUE';\n}\n\nexport async function createContactFromVisitor(visitor: ILivechatVisitor): Promise<string> {\n\tif (visitor.contactId) {\n\t\tthrow new Error('error-contact-already-exists');\n\t}\n\n\tconst contactData: InsertionModel<ILivechatContact> = {\n\t\tname: visitor.name || visitor.username,\n\t\temails: visitor.visitorEmails,\n\t\tphones: visitor.phone || undefined,\n\t\tunknown: true,\n\t\tchannels: [],\n\t\tcustomFields: visitor.livechatData,\n\t\tcreatedAt: new Date(),\n\t};\n\n\tif (visitor.contactManager) {\n\t\tconst contactManagerId = await Users.findOneByUsername<Pick<IUser, '_id'>>(visitor.contactManager.username, { projection: { _id: 1 } });\n\t\tif (contactManagerId) {\n\t\t\tcontactData.contactManager = contactManagerId._id;\n\t\t}\n\t}\n\n\tconst { insertedId: contactId } = await LivechatContacts.insertOne(contactData);\n\n\tawait LivechatVisitors.updateOne({ _id: visitor._id }, { $set: { contactId } });\n\n\treturn contactId;\n}\n\nexport async function createContact(params: CreateContactParams): Promise<string> {\n\tconst { name, emails, phones, customFields: receivedCustomFields = {}, contactManager, channels, unknown } = params;\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst allowedCustomFields = await getAllowedCustomFields();\n\tconst customFields = validateCustomFields(allowedCustomFields, receivedCustomFields);\n\n\tconst { insertedId } = await LivechatContacts.insertOne({\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t\tunknown,\n\t\tcreatedAt: new Date(),\n\t});\n\n\treturn insertedId;\n}\n\nexport async function updateContact(params: UpdateContactParams): Promise<ILivechatContact> {\n\tconst { contactId, name, emails, phones, customFields: receivedCustomFields, contactManager, channels } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id'>>(contactId, { projection: { _id: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst customFields = receivedCustomFields && validateCustomFields(await getAllowedCustomFields(), receivedCustomFields);\n\n\tconst updatedContact = await LivechatContacts.updateContact(contactId, {\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t});\n\n\treturn updatedContact;\n}\n\nexport async function getContacts(params: GetContactsParams): Promise<PaginatedResult<{ contacts: ILivechatContact[] }>> {\n\tconst { searchText, count, offset, sort } = params;\n\n\tconst { cursor, totalCount } = LivechatContacts.findPaginatedContacts(searchText, {\n\t\tlimit: count,\n\t\tskip: offset,\n\t\tsort: sort ?? { name: 1 },\n\t});\n\n\tconst [contacts, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tcontacts,\n\t\tcount,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function getContactHistory(\n\tparams: GetContactHistoryParams,\n): Promise<PaginatedResult<{ history: VisitorSearchChatsResult[] }>> {\n\tconst { contactId, source, count, offset, sort } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, 'channels'>>(contactId, { projection: { channels: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tconst visitorsIds = new Set(contact.channels?.map((channel: ILivechatContactChannel) => channel.visitorId));\n\n\tif (!visitorsIds?.size) {\n\t\treturn { history: [], count: 0, offset, total: 0 };\n\t}\n\n\tconst options: FindOptions<IOmnichannelRoom> = {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t\tprojection: {\n\t\t\tfname: 1,\n\t\t\tts: 1,\n\t\t\tv: 1,\n\t\t\tmsgs: 1,\n\t\t\tservedBy: 1,\n\t\t\tclosedAt: 1,\n\t\t\tclosedBy: 1,\n\t\t\tcloser: 1,\n\t\t\ttags: 1,\n\t\t\tsource: 1,\n\t\t},\n\t};\n\n\tconst { totalCount, cursor } = LivechatRooms.findPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds: Array.from(visitorsIds),\n\t\tsource,\n\t\toptions,\n\t});\n\n\tconst [total, history] = await Promise.all([totalCount, cursor.toArray()]);\n\n\treturn {\n\t\thistory,\n\t\tcount: history.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nasync function getAllowedCustomFields(): Promise<Pick<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[]> {\n\treturn LivechatCustomField.findByScope(\n\t\t'visitor',\n\t\t{\n\t\t\tprojection: { _id: 1, label: 1, regexp: 1, required: 1 },\n\t\t},\n\t\tfalse,\n\t).toArray();\n}\n\nexport function validateCustomFields(\n\tallowedCustomFields: AtLeast<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[],\n\tcustomFields: Record<string, string | unknown>,\n\toptions?: { ignoreAdditionalFields?: boolean },\n): Record<string, string> {\n\tconst validValues: Record<string, string> = {};\n\n\tfor (const cf of allowedCustomFields) {\n\t\tif (!customFields.hasOwnProperty(cf._id)) {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tconst cfValue: string = trim(customFields[cf._id]);\n\n\t\tif (!cfValue || typeof cfValue !== 'string') {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (cf.regexp) {\n\t\t\tconst regex = new RegExp(cf.regexp);\n\t\t\tif (!regex.test(cfValue)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t}\n\n\t\tvalidValues[cf._id] = cfValue;\n\t}\n\n\tif (!options?.ignoreAdditionalFields) {\n\t\tconst allowedCustomFieldIds = new Set(allowedCustomFields.map((cf) => cf._id));\n\t\tfor (const key in customFields) {\n\t\t\tif (!allowedCustomFieldIds.has(key)) {\n\t\t\t\tthrow new Error(i18n.t('error-custom-field-not-allowed', { key }));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validValues;\n}\n\nexport async function validateContactManager(contactManagerUserId: string) {\n\tconst contactManagerUser = await Users.findOneAgentById<Pick<IUser, '_id'>>(contactManagerUserId, { projection: { _id: 1 } });\n\tif (!contactManagerUser) {\n\t\tthrow new Error('error-contact-manager-not-found');\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 1);\n    module.export({\n      Contacts: () => Contacts,\n      isSingleContactEnabled: () => isSingleContactEnabled,\n      createContactFromVisitor: () => createContactFromVisitor,\n      createContact: () => createContact,\n      updateContact: () => updateContact,\n      getContacts: () => getContacts,\n      getContactHistory: () => getContactHistory,\n      validateCustomFields: () => validateCustomFields,\n      validateContactManager: () => validateContactManager\n    });\n    let LivechatVisitors, Users, LivechatRooms, LivechatCustomField, LivechatInquiry, Rooms, Subscriptions, LivechatContacts;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      LivechatCustomField(v) {\n        LivechatCustomField = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      LivechatContacts(v) {\n        LivechatContacts = v;\n      }\n    }, 0);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let trim;\n    module.link(\"../../../../lib/utils/stringUtils\", {\n      trim(v) {\n        trim = v;\n      }\n    }, 4);\n    let notifyOnRoomChangedById, notifyOnSubscriptionChangedByRoomId, notifyOnLivechatInquiryChangedByRoom;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnSubscriptionChangedByRoomId(v) {\n        notifyOnSubscriptionChangedByRoomId = v;\n      },\n      notifyOnLivechatInquiryChangedByRoom(v) {\n        notifyOnLivechatInquiryChangedByRoom = v;\n      }\n    }, 5);\n    let i18n;\n    module.link(\"../../../utils/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const Contacts = {\n      async registerContact(_ref) {\n        let {\n          token,\n          name,\n          email = '',\n          phone,\n          username,\n          customFields = {},\n          contactManager\n        } = _ref;\n        check(token, String);\n        const visitorEmail = email.trim().toLowerCase();\n        if (contactManager !== null && contactManager !== void 0 && contactManager.username) {\n          // verify if the user exists with this username and has a livechat-agent role\n          const user = await Users.findOneByUsername(contactManager.username, {\n            projection: {\n              roles: 1\n            }\n          });\n          if (!user) {\n            throw new Meteor.Error('error-contact-manager-not-found', \"No user found with username \".concat(contactManager.username));\n          }\n          if (!user.roles || !Array.isArray(user.roles) || !user.roles.includes('livechat-agent')) {\n            throw new Meteor.Error('error-invalid-contact-manager', 'The contact manager must have the role \"livechat-agent\"');\n          }\n        }\n        let contactId;\n        const user = await LivechatVisitors.getVisitorByToken(token, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (user) {\n          contactId = user._id;\n        } else {\n          if (!username) {\n            username = await LivechatVisitors.getNextVisitorUsername();\n          }\n          let existingUser = null;\n          if (visitorEmail !== '' && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(visitorEmail))) {\n            contactId = existingUser._id;\n          } else {\n            const userData = {\n              username,\n              ts: new Date(),\n              token\n            };\n            contactId = (await LivechatVisitors.insertOne(userData)).insertedId;\n          }\n        }\n        const allowedCF = await getAllowedCustomFields();\n        const livechatData = validateCustomFields(allowedCF, customFields, {\n          ignoreAdditionalFields: true\n        });\n        const fieldsToRemove = _objectSpread(_objectSpread(_objectSpread({}, phone === '' && {\n          phone: 1\n        }), visitorEmail === '' && {\n          visitorEmails: 1\n        }), !(contactManager !== null && contactManager !== void 0 && contactManager.username) && {\n          contactManager: 1\n        });\n        const updateUser = _objectSpread({\n          $set: _objectSpread(_objectSpread(_objectSpread({\n            token,\n            name,\n            livechatData\n          }, phone && {\n            phone: [{\n              phoneNumber: phone\n            }]\n          }), visitorEmail && {\n            visitorEmails: [{\n              address: visitorEmail\n            }]\n          }), (contactManager === null || contactManager === void 0 ? void 0 : contactManager.username) && {\n            contactManager: {\n              username: contactManager.username\n            }\n          })\n        }, Object.keys(fieldsToRemove).length && {\n          $unset: fieldsToRemove\n        });\n        await LivechatVisitors.updateOne({\n          _id: contactId\n        }, updateUser);\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        const rooms = await LivechatRooms.findByVisitorId(contactId, {}, extraQuery).toArray();\n        if (rooms !== null && rooms !== void 0 && rooms.length) {\n          var _iteratorAbruptCompletion = false;\n          var _didIteratorError = false;\n          var _iteratorError;\n          try {\n            for (var _iterator = _asyncIterator(rooms), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n              const room = _step.value;\n              {\n                var _responses$, _responses$2, _responses$3;\n                const {\n                  _id: rid\n                } = room;\n                const responses = await Promise.all([Rooms.setFnameById(rid, name), LivechatInquiry.setNameByRoomId(rid, name), Subscriptions.updateDisplayNameByRoomId(rid, name)]);\n                if ((_responses$ = responses[0]) !== null && _responses$ !== void 0 && _responses$.modifiedCount) {\n                  void notifyOnRoomChangedById(rid);\n                }\n                if ((_responses$2 = responses[1]) !== null && _responses$2 !== void 0 && _responses$2.modifiedCount) {\n                  void notifyOnLivechatInquiryChangedByRoom(rid, 'updated', {\n                    name\n                  });\n                }\n                if ((_responses$3 = responses[2]) !== null && _responses$3 !== void 0 && _responses$3.modifiedCount) {\n                  void notifyOnSubscriptionChangedByRoomId(rid);\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion && _iterator.return != null) {\n                await _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n        return contactId;\n      }\n    };\n    function isSingleContactEnabled() {\n      var _process$env$TEST_MOD;\n      // The Single Contact feature is not yet available in production, but can already be partially used in test environments.\n      return ((_process$env$TEST_MOD = process.env.TEST_MODE) === null || _process$env$TEST_MOD === void 0 ? void 0 : _process$env$TEST_MOD.toUpperCase()) === 'TRUE';\n    }\n    async function createContactFromVisitor(visitor) {\n      if (visitor.contactId) {\n        throw new Error('error-contact-already-exists');\n      }\n      const contactData = {\n        name: visitor.name || visitor.username,\n        emails: visitor.visitorEmails,\n        phones: visitor.phone || undefined,\n        unknown: true,\n        channels: [],\n        customFields: visitor.livechatData,\n        createdAt: new Date()\n      };\n      if (visitor.contactManager) {\n        const contactManagerId = await Users.findOneByUsername(visitor.contactManager.username, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (contactManagerId) {\n          contactData.contactManager = contactManagerId._id;\n        }\n      }\n      const {\n        insertedId: contactId\n      } = await LivechatContacts.insertOne(contactData);\n      await LivechatVisitors.updateOne({\n        _id: visitor._id\n      }, {\n        $set: {\n          contactId\n        }\n      });\n      return contactId;\n    }\n    async function createContact(params) {\n      const {\n        name,\n        emails,\n        phones,\n        customFields: receivedCustomFields = {},\n        contactManager,\n        channels,\n        unknown\n      } = params;\n      if (contactManager) {\n        await validateContactManager(contactManager);\n      }\n      const allowedCustomFields = await getAllowedCustomFields();\n      const customFields = validateCustomFields(allowedCustomFields, receivedCustomFields);\n      const {\n        insertedId\n      } = await LivechatContacts.insertOne({\n        name,\n        emails: emails === null || emails === void 0 ? void 0 : emails.map(address => ({\n          address\n        })),\n        phones: phones === null || phones === void 0 ? void 0 : phones.map(phoneNumber => ({\n          phoneNumber\n        })),\n        contactManager,\n        channels,\n        customFields,\n        unknown,\n        createdAt: new Date()\n      });\n      return insertedId;\n    }\n    async function updateContact(params) {\n      const {\n        contactId,\n        name,\n        emails,\n        phones,\n        customFields: receivedCustomFields,\n        contactManager,\n        channels\n      } = params;\n      const contact = await LivechatContacts.findOneById(contactId, {\n        projection: {\n          _id: 1\n        }\n      });\n      if (!contact) {\n        throw new Error('error-contact-not-found');\n      }\n      if (contactManager) {\n        await validateContactManager(contactManager);\n      }\n      const customFields = receivedCustomFields && validateCustomFields(await getAllowedCustomFields(), receivedCustomFields);\n      const updatedContact = await LivechatContacts.updateContact(contactId, {\n        name,\n        emails: emails === null || emails === void 0 ? void 0 : emails.map(address => ({\n          address\n        })),\n        phones: phones === null || phones === void 0 ? void 0 : phones.map(phoneNumber => ({\n          phoneNumber\n        })),\n        contactManager,\n        channels,\n        customFields\n      });\n      return updatedContact;\n    }\n    async function getContacts(params) {\n      const {\n        searchText,\n        count,\n        offset,\n        sort\n      } = params;\n      const {\n        cursor,\n        totalCount\n      } = LivechatContacts.findPaginatedContacts(searchText, {\n        limit: count,\n        skip: offset,\n        sort: sort !== null && sort !== void 0 ? sort : {\n          name: 1\n        }\n      });\n      const [contacts, total] = await Promise.all([cursor.toArray(), totalCount]);\n      return {\n        contacts,\n        count,\n        offset,\n        total\n      };\n    }\n    async function getContactHistory(params) {\n      var _contact$channels;\n      const {\n        contactId,\n        source,\n        count,\n        offset,\n        sort\n      } = params;\n      const contact = await LivechatContacts.findOneById(contactId, {\n        projection: {\n          channels: 1\n        }\n      });\n      if (!contact) {\n        throw new Error('error-contact-not-found');\n      }\n      const visitorsIds = new Set((_contact$channels = contact.channels) === null || _contact$channels === void 0 ? void 0 : _contact$channels.map(channel => channel.visitorId));\n      if (!(visitorsIds !== null && visitorsIds !== void 0 && visitorsIds.size)) {\n        return {\n          history: [],\n          count: 0,\n          offset,\n          total: 0\n        };\n      }\n      const options = {\n        sort: sort || {\n          ts: -1\n        },\n        skip: offset,\n        limit: count,\n        projection: {\n          fname: 1,\n          ts: 1,\n          v: 1,\n          msgs: 1,\n          servedBy: 1,\n          closedAt: 1,\n          closedBy: 1,\n          closer: 1,\n          tags: 1,\n          source: 1\n        }\n      };\n      const {\n        totalCount,\n        cursor\n      } = LivechatRooms.findPaginatedRoomsByVisitorsIdsAndSource({\n        visitorsIds: Array.from(visitorsIds),\n        source,\n        options\n      });\n      const [total, history] = await Promise.all([totalCount, cursor.toArray()]);\n      return {\n        history,\n        count: history.length,\n        offset,\n        total\n      };\n    }\n    async function getAllowedCustomFields() {\n      return LivechatCustomField.findByScope('visitor', {\n        projection: {\n          _id: 1,\n          label: 1,\n          regexp: 1,\n          required: 1\n        }\n      }, false).toArray();\n    }\n    function validateCustomFields(allowedCustomFields, customFields, options) {\n      const validValues = {};\n      for (const cf of allowedCustomFields) {\n        if (!customFields.hasOwnProperty(cf._id)) {\n          if (cf.required) {\n            throw new Error(i18n.t('error-invalid-custom-field-value', {\n              field: cf.label\n            }));\n          }\n          continue;\n        }\n        const cfValue = trim(customFields[cf._id]);\n        if (!cfValue || typeof cfValue !== 'string') {\n          if (cf.required) {\n            throw new Error(i18n.t('error-invalid-custom-field-value', {\n              field: cf.label\n            }));\n          }\n          continue;\n        }\n        if (cf.regexp) {\n          const regex = new RegExp(cf.regexp);\n          if (!regex.test(cfValue)) {\n            throw new Error(i18n.t('error-invalid-custom-field-value', {\n              field: cf.label\n            }));\n          }\n        }\n        validValues[cf._id] = cfValue;\n      }\n      if (!(options !== null && options !== void 0 && options.ignoreAdditionalFields)) {\n        const allowedCustomFieldIds = new Set(allowedCustomFields.map(cf => cf._id));\n        for (const key in customFields) {\n          if (!allowedCustomFieldIds.has(key)) {\n            throw new Error(i18n.t('error-custom-field-not-allowed', {\n              key\n            }));\n          }\n        }\n      }\n      return validValues;\n    }\n    async function validateContactManager(contactManagerUserId) {\n      const contactManagerUser = await Users.findOneAgentById(contactManagerUserId, {\n        projection: {\n          _id: 1\n        }\n      });\n      if (!contactManagerUser) {\n        throw new Error('error-contact-manager-not-found');\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_asyncIterator","export","Contacts","isSingleContactEnabled","createContactFromVisitor","createContact","updateContact","getContacts","getContactHistory","validateCustomFields","validateContactManager","LivechatVisitors","Users","LivechatRooms","LivechatCustomField","LivechatInquiry","Rooms","Subscriptions","LivechatContacts","check","Meteor","callbacks","trim","notifyOnRoomChangedById","notifyOnSubscriptionChangedByRoomId","notifyOnLivechatInquiryChangedByRoom","i18n","__reifyWaitForDeps__","registerContact","_ref","token","name","email","phone","username","customFields","contactManager","String","visitorEmail","toLowerCase","user","findOneByUsername","projection","roles","Error","concat","Array","isArray","includes","contactId","getVisitorByToken","_id","getNextVisitorUsername","existingUser","findOneGuestByEmailAddress","userData","ts","Date","insertOne","insertedId","allowedCF","getAllowedCustomFields","livechatData","ignoreAdditionalFields","fieldsToRemove","visitorEmails","updateUser","$set","phoneNumber","address","Object","keys","length","$unset","updateOne","extraQuery","run","rooms","findByVisitorId","toArray","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","room","value","_responses$","_responses$2","_responses$3","rid","responses","Promise","all","setFnameById","setNameByRoomId","updateDisplayNameByRoomId","modifiedCount","err","return","_process$env$TEST_MOD","process","env","TEST_MODE","toUpperCase","visitor","contactData","emails","phones","undefined","unknown","channels","createdAt","contactManagerId","params","receivedCustomFields","allowedCustomFields","map","contact","findOneById","updatedContact","searchText","count","offset","sort","cursor","totalCount","findPaginatedContacts","limit","skip","contacts","total","_contact$channels","source","visitorsIds","Set","channel","visitorId","size","history","options","fname","msgs","servedBy","closedAt","closedBy","closer","tags","findPaginatedRoomsByVisitorsIdsAndSource","from","findByScope","label","regexp","required","validValues","cf","hasOwnProperty","t","field","cfValue","regex","RegExp","test","allowedCustomFieldIds","key","has","contactManagerUserId","contactManagerUser","findOneAgentById","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/lib/Contacts.ts"],"sourcesContent":["import type {\n\tAtLeast,\n\tILivechatContact,\n\tILivechatContactChannel,\n\tILivechatCustomField,\n\tILivechatVisitor,\n\tIOmnichannelRoom,\n\tIUser,\n} from '@rocket.chat/core-typings';\nimport type { InsertionModel } from '@rocket.chat/model-typings';\nimport {\n\tLivechatVisitors,\n\tUsers,\n\tLivechatRooms,\n\tLivechatCustomField,\n\tLivechatInquiry,\n\tRooms,\n\tSubscriptions,\n\tLivechatContacts,\n} from '@rocket.chat/models';\nimport type { PaginatedResult, VisitorSearchChatsResult } from '@rocket.chat/rest-typings';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport type { MatchKeysAndValues, OnlyFieldsOfType, FindOptions, Sort } from 'mongodb';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { trim } from '../../../../lib/utils/stringUtils';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnSubscriptionChangedByRoomId,\n\tnotifyOnLivechatInquiryChangedByRoom,\n} from '../../../lib/server/lib/notifyListener';\nimport { i18n } from '../../../utils/lib/i18n';\n\ntype RegisterContactProps = {\n\t_id?: string;\n\ttoken: string;\n\tname: string;\n\tusername?: string;\n\temail?: string;\n\tphone?: string;\n\tcustomFields?: Record<string, unknown | string>;\n\tcontactManager?: {\n\t\tusername: string;\n\t};\n};\n\ntype CreateContactParams = {\n\tname: string;\n\temails?: string[];\n\tphones?: string[];\n\tunknown: boolean;\n\tcustomFields?: Record<string, string | unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype UpdateContactParams = {\n\tcontactId: string;\n\tname?: string;\n\temails?: string[];\n\tphones?: string[];\n\tcustomFields?: Record<string, unknown>;\n\tcontactManager?: string;\n\tchannels?: ILivechatContactChannel[];\n};\n\ntype GetContactsParams = {\n\tsearchText?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\ntype GetContactHistoryParams = {\n\tcontactId: string;\n\tsource?: string;\n\tcount: number;\n\toffset: number;\n\tsort: Sort;\n};\n\nexport const Contacts = {\n\tasync registerContact({\n\t\ttoken,\n\t\tname,\n\t\temail = '',\n\t\tphone,\n\t\tusername,\n\t\tcustomFields = {},\n\t\tcontactManager,\n\t}: RegisterContactProps): Promise<string> {\n\t\tcheck(token, String);\n\n\t\tconst visitorEmail = email.trim().toLowerCase();\n\n\t\tif (contactManager?.username) {\n\t\t\t// verify if the user exists with this username and has a livechat-agent role\n\t\t\tconst user = await Users.findOneByUsername(contactManager.username, { projection: { roles: 1 } });\n\t\t\tif (!user) {\n\t\t\t\tthrow new Meteor.Error('error-contact-manager-not-found', `No user found with username ${contactManager.username}`);\n\t\t\t}\n\t\t\tif (!user.roles || !Array.isArray(user.roles) || !user.roles.includes('livechat-agent')) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-contact-manager', 'The contact manager must have the role \"livechat-agent\"');\n\t\t\t}\n\t\t}\n\n\t\tlet contactId;\n\n\t\tconst user = await LivechatVisitors.getVisitorByToken(token, { projection: { _id: 1 } });\n\n\t\tif (user) {\n\t\t\tcontactId = user._id;\n\t\t} else {\n\t\t\tif (!username) {\n\t\t\t\tusername = await LivechatVisitors.getNextVisitorUsername();\n\t\t\t}\n\n\t\t\tlet existingUser = null;\n\n\t\t\tif (visitorEmail !== '' && (existingUser = await LivechatVisitors.findOneGuestByEmailAddress(visitorEmail))) {\n\t\t\t\tcontactId = existingUser._id;\n\t\t\t} else {\n\t\t\t\tconst userData = {\n\t\t\t\t\tusername,\n\t\t\t\t\tts: new Date(),\n\t\t\t\t\ttoken,\n\t\t\t\t};\n\n\t\t\t\tcontactId = (await LivechatVisitors.insertOne(userData)).insertedId;\n\t\t\t}\n\t\t}\n\n\t\tconst allowedCF = await getAllowedCustomFields();\n\t\tconst livechatData: Record<string, string> = validateCustomFields(allowedCF, customFields, { ignoreAdditionalFields: true });\n\n\t\tconst fieldsToRemove = {\n\t\t\t// if field is explicitely set to empty string, remove\n\t\t\t...(phone === '' && { phone: 1 }),\n\t\t\t...(visitorEmail === '' && { visitorEmails: 1 }),\n\t\t\t...(!contactManager?.username && { contactManager: 1 }),\n\t\t};\n\n\t\tconst updateUser: { $set: MatchKeysAndValues<ILivechatVisitor>; $unset?: OnlyFieldsOfType<ILivechatVisitor> } = {\n\t\t\t$set: {\n\t\t\t\ttoken,\n\t\t\t\tname,\n\t\t\t\tlivechatData,\n\t\t\t\t// if phone has some value, set\n\t\t\t\t...(phone && { phone: [{ phoneNumber: phone }] }),\n\t\t\t\t...(visitorEmail && { visitorEmails: [{ address: visitorEmail }] }),\n\t\t\t\t...(contactManager?.username && { contactManager: { username: contactManager.username } }),\n\t\t\t},\n\t\t\t...(Object.keys(fieldsToRemove).length && { $unset: fieldsToRemove }),\n\t\t};\n\n\t\tawait LivechatVisitors.updateOne({ _id: contactId }, updateUser);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst rooms: IOmnichannelRoom[] = await LivechatRooms.findByVisitorId(contactId, {}, extraQuery).toArray();\n\n\t\tif (rooms?.length) {\n\t\t\tfor await (const room of rooms) {\n\t\t\t\tconst { _id: rid } = room;\n\n\t\t\t\tconst responses = await Promise.all([\n\t\t\t\t\tRooms.setFnameById(rid, name),\n\t\t\t\t\tLivechatInquiry.setNameByRoomId(rid, name),\n\t\t\t\t\tSubscriptions.updateDisplayNameByRoomId(rid, name),\n\t\t\t\t]);\n\n\t\t\t\tif (responses[0]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnRoomChangedById(rid);\n\t\t\t\t}\n\n\t\t\t\tif (responses[1]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnLivechatInquiryChangedByRoom(rid, 'updated', { name });\n\t\t\t\t}\n\n\t\t\t\tif (responses[2]?.modifiedCount) {\n\t\t\t\t\tvoid notifyOnSubscriptionChangedByRoomId(rid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn contactId;\n\t},\n};\n\nexport function isSingleContactEnabled(): boolean {\n\t// The Single Contact feature is not yet available in production, but can already be partially used in test environments.\n\treturn process.env.TEST_MODE?.toUpperCase() === 'TRUE';\n}\n\nexport async function createContactFromVisitor(visitor: ILivechatVisitor): Promise<string> {\n\tif (visitor.contactId) {\n\t\tthrow new Error('error-contact-already-exists');\n\t}\n\n\tconst contactData: InsertionModel<ILivechatContact> = {\n\t\tname: visitor.name || visitor.username,\n\t\temails: visitor.visitorEmails,\n\t\tphones: visitor.phone || undefined,\n\t\tunknown: true,\n\t\tchannels: [],\n\t\tcustomFields: visitor.livechatData,\n\t\tcreatedAt: new Date(),\n\t};\n\n\tif (visitor.contactManager) {\n\t\tconst contactManagerId = await Users.findOneByUsername<Pick<IUser, '_id'>>(visitor.contactManager.username, { projection: { _id: 1 } });\n\t\tif (contactManagerId) {\n\t\t\tcontactData.contactManager = contactManagerId._id;\n\t\t}\n\t}\n\n\tconst { insertedId: contactId } = await LivechatContacts.insertOne(contactData);\n\n\tawait LivechatVisitors.updateOne({ _id: visitor._id }, { $set: { contactId } });\n\n\treturn contactId;\n}\n\nexport async function createContact(params: CreateContactParams): Promise<string> {\n\tconst { name, emails, phones, customFields: receivedCustomFields = {}, contactManager, channels, unknown } = params;\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst allowedCustomFields = await getAllowedCustomFields();\n\tconst customFields = validateCustomFields(allowedCustomFields, receivedCustomFields);\n\n\tconst { insertedId } = await LivechatContacts.insertOne({\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t\tunknown,\n\t\tcreatedAt: new Date(),\n\t});\n\n\treturn insertedId;\n}\n\nexport async function updateContact(params: UpdateContactParams): Promise<ILivechatContact> {\n\tconst { contactId, name, emails, phones, customFields: receivedCustomFields, contactManager, channels } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, '_id'>>(contactId, { projection: { _id: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tif (contactManager) {\n\t\tawait validateContactManager(contactManager);\n\t}\n\n\tconst customFields = receivedCustomFields && validateCustomFields(await getAllowedCustomFields(), receivedCustomFields);\n\n\tconst updatedContact = await LivechatContacts.updateContact(contactId, {\n\t\tname,\n\t\temails: emails?.map((address) => ({ address })),\n\t\tphones: phones?.map((phoneNumber) => ({ phoneNumber })),\n\t\tcontactManager,\n\t\tchannels,\n\t\tcustomFields,\n\t});\n\n\treturn updatedContact;\n}\n\nexport async function getContacts(params: GetContactsParams): Promise<PaginatedResult<{ contacts: ILivechatContact[] }>> {\n\tconst { searchText, count, offset, sort } = params;\n\n\tconst { cursor, totalCount } = LivechatContacts.findPaginatedContacts(searchText, {\n\t\tlimit: count,\n\t\tskip: offset,\n\t\tsort: sort ?? { name: 1 },\n\t});\n\n\tconst [contacts, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tcontacts,\n\t\tcount,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function getContactHistory(\n\tparams: GetContactHistoryParams,\n): Promise<PaginatedResult<{ history: VisitorSearchChatsResult[] }>> {\n\tconst { contactId, source, count, offset, sort } = params;\n\n\tconst contact = await LivechatContacts.findOneById<Pick<ILivechatContact, 'channels'>>(contactId, { projection: { channels: 1 } });\n\n\tif (!contact) {\n\t\tthrow new Error('error-contact-not-found');\n\t}\n\n\tconst visitorsIds = new Set(contact.channels?.map((channel: ILivechatContactChannel) => channel.visitorId));\n\n\tif (!visitorsIds?.size) {\n\t\treturn { history: [], count: 0, offset, total: 0 };\n\t}\n\n\tconst options: FindOptions<IOmnichannelRoom> = {\n\t\tsort: sort || { ts: -1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t\tprojection: {\n\t\t\tfname: 1,\n\t\t\tts: 1,\n\t\t\tv: 1,\n\t\t\tmsgs: 1,\n\t\t\tservedBy: 1,\n\t\t\tclosedAt: 1,\n\t\t\tclosedBy: 1,\n\t\t\tcloser: 1,\n\t\t\ttags: 1,\n\t\t\tsource: 1,\n\t\t},\n\t};\n\n\tconst { totalCount, cursor } = LivechatRooms.findPaginatedRoomsByVisitorsIdsAndSource({\n\t\tvisitorsIds: Array.from(visitorsIds),\n\t\tsource,\n\t\toptions,\n\t});\n\n\tconst [total, history] = await Promise.all([totalCount, cursor.toArray()]);\n\n\treturn {\n\t\thistory,\n\t\tcount: history.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nasync function getAllowedCustomFields(): Promise<Pick<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[]> {\n\treturn LivechatCustomField.findByScope(\n\t\t'visitor',\n\t\t{\n\t\t\tprojection: { _id: 1, label: 1, regexp: 1, required: 1 },\n\t\t},\n\t\tfalse,\n\t).toArray();\n}\n\nexport function validateCustomFields(\n\tallowedCustomFields: AtLeast<ILivechatCustomField, '_id' | 'label' | 'regexp' | 'required'>[],\n\tcustomFields: Record<string, string | unknown>,\n\toptions?: { ignoreAdditionalFields?: boolean },\n): Record<string, string> {\n\tconst validValues: Record<string, string> = {};\n\n\tfor (const cf of allowedCustomFields) {\n\t\tif (!customFields.hasOwnProperty(cf._id)) {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tconst cfValue: string = trim(customFields[cf._id]);\n\n\t\tif (!cfValue || typeof cfValue !== 'string') {\n\t\t\tif (cf.required) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (cf.regexp) {\n\t\t\tconst regex = new RegExp(cf.regexp);\n\t\t\tif (!regex.test(cfValue)) {\n\t\t\t\tthrow new Error(i18n.t('error-invalid-custom-field-value', { field: cf.label }));\n\t\t\t}\n\t\t}\n\n\t\tvalidValues[cf._id] = cfValue;\n\t}\n\n\tif (!options?.ignoreAdditionalFields) {\n\t\tconst allowedCustomFieldIds = new Set(allowedCustomFields.map((cf) => cf._id));\n\t\tfor (const key in customFields) {\n\t\t\tif (!allowedCustomFieldIds.has(key)) {\n\t\t\t\tthrow new Error(i18n.t('error-custom-field-not-allowed', { key }));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn validValues;\n}\n\nexport async function validateContactManager(contactManagerUserId: string) {\n\tconst contactManagerUser = await Users.findOneAgentById<Pick<IUser, '_id'>>(contactManagerUserId, { projection: { _id: 1 } });\n\tif (!contactManagerUser) {\n\t\tthrow new Error('error-contact-manager-not-found');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"4bbacfb13d8334d987c1c05bbf32b695ea9d84cf"}
