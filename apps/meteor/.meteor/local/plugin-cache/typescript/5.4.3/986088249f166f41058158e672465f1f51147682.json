{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel/queue.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/omnichannel/queue.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel/queue.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel/queue.ts","sourceRoot":"","sources":["server/services/omnichannel/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { type InquiryWithAgentInfo, type IOmnichannelQueue } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { LivechatInquiry, LivechatRooms } from '@rocket.chat/models';\n\nimport { queueLogger } from './logger';\nimport { dispatchAgentDelegated } from '../../../app/livechat/server/lib/Helper';\nimport { RoutingManager } from '../../../app/livechat/server/lib/RoutingManager';\nimport { getInquirySortMechanismSetting } from '../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../app/settings/server';\n\nconst DEFAULT_RACE_TIMEOUT = 5000;\n\nexport class OmnichannelQueue implements IOmnichannelQueue {\n\tprivate running = false;\n\n\tprivate queues: (string | undefined)[] = [];\n\n\tprivate delay() {\n\t\tconst timeout = settings.get<number>('Omnichannel_queue_delay_timeout') ?? 5;\n\t\treturn timeout < 1 ? DEFAULT_RACE_TIMEOUT : timeout * 1000;\n\t}\n\n\tpublic isRunning() {\n\t\treturn this.running;\n\t}\n\n\tasync start() {\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeQueues = await this.getActiveQueues();\n\t\tqueueLogger.debug(`Active queues: ${activeQueues.length}`);\n\t\tthis.running = true;\n\n\t\tqueueLogger.info('Service started');\n\t\treturn this.execute();\n\t}\n\n\tasync stop() {\n\t\tif (!this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatInquiry.unlockAll();\n\n\t\tthis.running = false;\n\t\tqueueLogger.info('Service stopped');\n\t}\n\n\tprivate async getActiveQueues() {\n\t\t// undefined = public queue(without department)\n\t\treturn ([undefined] as typeof this.queues).concat(await LivechatInquiry.getDistinctQueuedDepartments({}));\n\t}\n\n\tprivate async nextQueue() {\n\t\tif (!this.queues.length) {\n\t\t\tqueueLogger.debug('No more registered queues. Refreshing');\n\t\t\tthis.queues = await this.getActiveQueues();\n\t\t}\n\n\t\treturn this.queues.shift();\n\t}\n\n\tprivate async execute() {\n\t\tif (!this.running) {\n\t\t\tqueueLogger.debug('Queue stopped. Cannot execute');\n\t\t\treturn;\n\t\t}\n\n\t\tif (await License.shouldPreventAction('monthlyActiveContacts', 1)) {\n\t\t\tqueueLogger.debug('MAC limit reached. Queue wont execute');\n\t\t\tthis.running = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = await this.nextQueue();\n\t\tconst queueDelayTimeout = this.delay();\n\t\tqueueLogger.debug(`Executing queue ${queue || 'Public'} with timeout of ${queueDelayTimeout}`);\n\n\t\tvoid this.checkQueue(queue).catch((e) => {\n\t\t\tqueueLogger.error(e);\n\t\t});\n\t}\n\n\tprivate async checkQueue(queue: string | undefined) {\n\t\tqueueLogger.debug(`Processing items for queue ${queue || 'Public'}`);\n\t\ttry {\n\t\t\tconst nextInquiry = await LivechatInquiry.findNextAndLock(getInquirySortMechanismSetting(), queue);\n\t\t\tif (!nextInquiry) {\n\t\t\t\tqueueLogger.debug(`No more items for queue ${queue || 'Public'}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst result = await this.processWaitingQueue(queue, nextInquiry as InquiryWithAgentInfo);\n\n\t\t\tif (!result) {\n\t\t\t\t// Note: this removes the \"one-shot\" behavior of queue, allowing it to take a conversation again in the future\n\t\t\t\t// And sorting them by _updatedAt: -1 will make it so that the oldest inquiries are taken first\n\t\t\t\t// preventing us from playing with the same inquiry over and over again\n\t\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} not taken. Unlocking and re-queueing`);\n\t\t\t\tconst updatedQueue = await LivechatInquiry.unlockAndQueue(nextInquiry._id);\n\t\t\t\treturn updatedQueue;\n\t\t\t}\n\n\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} taken successfully. Unlocking`);\n\t\t\tawait LivechatInquiry.unlock(nextInquiry._id);\n\t\t\tqueueLogger.debug({\n\t\t\t\tmsg: 'Inquiry processed',\n\t\t\t\tinquiry: nextInquiry._id,\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\tresult,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tqueueLogger.error({\n\t\t\t\tmsg: 'Error processing queue',\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\terr: e,\n\t\t\t});\n\t\t} finally {\n\t\t\tsetTimeout(this.execute.bind(this), this.delay());\n\t\t}\n\t}\n\n\tasync shouldStart() {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tvoid this.stop();\n\t\t\treturn;\n\t\t}\n\n\t\tconst routingSupportsAutoAssign = RoutingManager.getConfig()?.autoAssignAgent;\n\t\tqueueLogger.debug({\n\t\t\tmsg: 'Routing method supports auto assignment',\n\t\t\tmethod: settings.get('Livechat_Routing_Method'),\n\t\t\tstatus: routingSupportsAutoAssign ? 'Starting' : 'Stopping',\n\t\t});\n\n\t\tvoid (routingSupportsAutoAssign ? this.start() : this.stop());\n\t}\n\n\tprivate async reconciliation(reason: 'closed' | 'taken' | 'missing', { roomId, inquiryId }: { roomId: string; inquiryId: string }) {\n\t\tswitch (reason) {\n\t\t\tcase 'closed': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room closed. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'taken': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room taken. Updating inquiry status',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\t// Reconciliate served inquiries, by updating their status to taken after queue tried to pick and failed\n\t\t\t\tawait LivechatInquiry.takeInquiry(inquiryId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'missing': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room from inquiry missing. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async processWaitingQueue(department: string | undefined, inquiry: InquiryWithAgentInfo) {\n\t\tconst queue = department || 'Public';\n\n\t\tqueueLogger.debug(`Processing inquiry ${inquiry._id} from queue ${queue}`);\n\t\tconst { defaultAgent } = inquiry;\n\n\t\tconst roomFromDb = await LivechatRooms.findOneById(inquiry.rid);\n\n\t\t// This is a precaution to avoid taking inquiries tied to rooms that no longer exist.\n\t\t// This should never happen.\n\t\tif (!roomFromDb) {\n\t\t\treturn this.reconciliation('missing', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is a precaution to avoid taking the same inquiry multiple times. It should not happen, but it's a safety net\n\t\tif (roomFromDb.servedBy) {\n\t\t\treturn this.reconciliation('taken', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is another precaution. If the room is closed, we should not take it\n\t\tif (roomFromDb.closedAt) {\n\t\t\treturn this.reconciliation('closed', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, roomFromDb);\n\n\t\tif (room?.servedBy) {\n\t\t\tconst {\n\t\t\t\t_id: rid,\n\t\t\t\tservedBy: { _id: agentId },\n\t\t\t} = room;\n\t\t\tqueueLogger.debug(`Inquiry ${inquiry._id} taken successfully by agent ${agentId}. Notifying`);\n\t\t\tsetTimeout(() => {\n\t\t\t\tvoid dispatchAgentDelegated(rid, agentId);\n\t\t\t}, 1000);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/omnichannel/queue.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/omnichannel/queue.ts","inputSourceMap":{"version":3,"file":"server/services/omnichannel/queue.ts","sourceRoot":"","sources":["server/services/omnichannel/queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { type InquiryWithAgentInfo, type IOmnichannelQueue } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { LivechatInquiry, LivechatRooms } from '@rocket.chat/models';\n\nimport { queueLogger } from './logger';\nimport { dispatchAgentDelegated } from '../../../app/livechat/server/lib/Helper';\nimport { RoutingManager } from '../../../app/livechat/server/lib/RoutingManager';\nimport { getInquirySortMechanismSetting } from '../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../app/settings/server';\n\nconst DEFAULT_RACE_TIMEOUT = 5000;\n\nexport class OmnichannelQueue implements IOmnichannelQueue {\n\tprivate running = false;\n\n\tprivate queues: (string | undefined)[] = [];\n\n\tprivate delay() {\n\t\tconst timeout = settings.get<number>('Omnichannel_queue_delay_timeout') ?? 5;\n\t\treturn timeout < 1 ? DEFAULT_RACE_TIMEOUT : timeout * 1000;\n\t}\n\n\tpublic isRunning() {\n\t\treturn this.running;\n\t}\n\n\tasync start() {\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeQueues = await this.getActiveQueues();\n\t\tqueueLogger.debug(`Active queues: ${activeQueues.length}`);\n\t\tthis.running = true;\n\n\t\tqueueLogger.info('Service started');\n\t\treturn this.execute();\n\t}\n\n\tasync stop() {\n\t\tif (!this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatInquiry.unlockAll();\n\n\t\tthis.running = false;\n\t\tqueueLogger.info('Service stopped');\n\t}\n\n\tprivate async getActiveQueues() {\n\t\t// undefined = public queue(without department)\n\t\treturn ([undefined] as typeof this.queues).concat(await LivechatInquiry.getDistinctQueuedDepartments({}));\n\t}\n\n\tprivate async nextQueue() {\n\t\tif (!this.queues.length) {\n\t\t\tqueueLogger.debug('No more registered queues. Refreshing');\n\t\t\tthis.queues = await this.getActiveQueues();\n\t\t}\n\n\t\treturn this.queues.shift();\n\t}\n\n\tprivate async execute() {\n\t\tif (!this.running) {\n\t\t\tqueueLogger.debug('Queue stopped. Cannot execute');\n\t\t\treturn;\n\t\t}\n\n\t\tif (await License.shouldPreventAction('monthlyActiveContacts', 1)) {\n\t\t\tqueueLogger.debug('MAC limit reached. Queue wont execute');\n\t\t\tthis.running = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = await this.nextQueue();\n\t\tconst queueDelayTimeout = this.delay();\n\t\tqueueLogger.debug(`Executing queue ${queue || 'Public'} with timeout of ${queueDelayTimeout}`);\n\n\t\tvoid this.checkQueue(queue).catch((e) => {\n\t\t\tqueueLogger.error(e);\n\t\t});\n\t}\n\n\tprivate async checkQueue(queue: string | undefined) {\n\t\tqueueLogger.debug(`Processing items for queue ${queue || 'Public'}`);\n\t\ttry {\n\t\t\tconst nextInquiry = await LivechatInquiry.findNextAndLock(getInquirySortMechanismSetting(), queue);\n\t\t\tif (!nextInquiry) {\n\t\t\t\tqueueLogger.debug(`No more items for queue ${queue || 'Public'}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst result = await this.processWaitingQueue(queue, nextInquiry as InquiryWithAgentInfo);\n\n\t\t\tif (!result) {\n\t\t\t\t// Note: this removes the \"one-shot\" behavior of queue, allowing it to take a conversation again in the future\n\t\t\t\t// And sorting them by _updatedAt: -1 will make it so that the oldest inquiries are taken first\n\t\t\t\t// preventing us from playing with the same inquiry over and over again\n\t\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} not taken. Unlocking and re-queueing`);\n\t\t\t\tconst updatedQueue = await LivechatInquiry.unlockAndQueue(nextInquiry._id);\n\t\t\t\treturn updatedQueue;\n\t\t\t}\n\n\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} taken successfully. Unlocking`);\n\t\t\tawait LivechatInquiry.unlock(nextInquiry._id);\n\t\t\tqueueLogger.debug({\n\t\t\t\tmsg: 'Inquiry processed',\n\t\t\t\tinquiry: nextInquiry._id,\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\tresult,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tqueueLogger.error({\n\t\t\t\tmsg: 'Error processing queue',\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\terr: e,\n\t\t\t});\n\t\t} finally {\n\t\t\tsetTimeout(this.execute.bind(this), this.delay());\n\t\t}\n\t}\n\n\tasync shouldStart() {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tvoid this.stop();\n\t\t\treturn;\n\t\t}\n\n\t\tconst routingSupportsAutoAssign = RoutingManager.getConfig()?.autoAssignAgent;\n\t\tqueueLogger.debug({\n\t\t\tmsg: 'Routing method supports auto assignment',\n\t\t\tmethod: settings.get('Livechat_Routing_Method'),\n\t\t\tstatus: routingSupportsAutoAssign ? 'Starting' : 'Stopping',\n\t\t});\n\n\t\tvoid (routingSupportsAutoAssign ? this.start() : this.stop());\n\t}\n\n\tprivate async reconciliation(reason: 'closed' | 'taken' | 'missing', { roomId, inquiryId }: { roomId: string; inquiryId: string }) {\n\t\tswitch (reason) {\n\t\t\tcase 'closed': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room closed. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'taken': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room taken. Updating inquiry status',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\t// Reconciliate served inquiries, by updating their status to taken after queue tried to pick and failed\n\t\t\t\tawait LivechatInquiry.takeInquiry(inquiryId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'missing': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room from inquiry missing. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async processWaitingQueue(department: string | undefined, inquiry: InquiryWithAgentInfo) {\n\t\tconst queue = department || 'Public';\n\n\t\tqueueLogger.debug(`Processing inquiry ${inquiry._id} from queue ${queue}`);\n\t\tconst { defaultAgent } = inquiry;\n\n\t\tconst roomFromDb = await LivechatRooms.findOneById(inquiry.rid);\n\n\t\t// This is a precaution to avoid taking inquiries tied to rooms that no longer exist.\n\t\t// This should never happen.\n\t\tif (!roomFromDb) {\n\t\t\treturn this.reconciliation('missing', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is a precaution to avoid taking the same inquiry multiple times. It should not happen, but it's a safety net\n\t\tif (roomFromDb.servedBy) {\n\t\t\treturn this.reconciliation('taken', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is another precaution. If the room is closed, we should not take it\n\t\tif (roomFromDb.closedAt) {\n\t\t\treturn this.reconciliation('closed', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, roomFromDb);\n\n\t\tif (room?.servedBy) {\n\t\t\tconst {\n\t\t\t\t_id: rid,\n\t\t\t\tservedBy: { _id: agentId },\n\t\t\t} = room;\n\t\t\tqueueLogger.debug(`Inquiry ${inquiry._id} taken successfully by agent ${agentId}. Notifying`);\n\t\t\tsetTimeout(() => {\n\t\t\t\tvoid dispatchAgentDelegated(rid, agentId);\n\t\t\t}, 1000);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      OmnichannelQueue: () => OmnichannelQueue\n    });\n    let License;\n    module.link(\"@rocket.chat/license\", {\n      License(v) {\n        License = v;\n      }\n    }, 0);\n    let LivechatInquiry, LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let queueLogger;\n    module.link(\"./logger\", {\n      queueLogger(v) {\n        queueLogger = v;\n      }\n    }, 2);\n    let dispatchAgentDelegated;\n    module.link(\"../../../app/livechat/server/lib/Helper\", {\n      dispatchAgentDelegated(v) {\n        dispatchAgentDelegated = v;\n      }\n    }, 3);\n    let RoutingManager;\n    module.link(\"../../../app/livechat/server/lib/RoutingManager\", {\n      RoutingManager(v) {\n        RoutingManager = v;\n      }\n    }, 4);\n    let getInquirySortMechanismSetting;\n    module.link(\"../../../app/livechat/server/lib/settings\", {\n      getInquirySortMechanismSetting(v) {\n        getInquirySortMechanismSetting = v;\n      }\n    }, 5);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const DEFAULT_RACE_TIMEOUT = 5000;\n    class OmnichannelQueue {\n      constructor() {\n        this.running = false;\n        this.queues = [];\n      }\n      delay() {\n        var _settings$get;\n        const timeout = (_settings$get = settings.get('Omnichannel_queue_delay_timeout')) !== null && _settings$get !== void 0 ? _settings$get : 5;\n        return timeout < 1 ? DEFAULT_RACE_TIMEOUT : timeout * 1000;\n      }\n      isRunning() {\n        return this.running;\n      }\n      async start() {\n        if (this.running) {\n          return;\n        }\n        const activeQueues = await this.getActiveQueues();\n        queueLogger.debug(\"Active queues: \".concat(activeQueues.length));\n        this.running = true;\n        queueLogger.info('Service started');\n        return this.execute();\n      }\n      async stop() {\n        if (!this.running) {\n          return;\n        }\n        await LivechatInquiry.unlockAll();\n        this.running = false;\n        queueLogger.info('Service stopped');\n      }\n      async getActiveQueues() {\n        // undefined = public queue(without department)\n        return [undefined].concat(await LivechatInquiry.getDistinctQueuedDepartments({}));\n      }\n      async nextQueue() {\n        if (!this.queues.length) {\n          queueLogger.debug('No more registered queues. Refreshing');\n          this.queues = await this.getActiveQueues();\n        }\n        return this.queues.shift();\n      }\n      async execute() {\n        if (!this.running) {\n          queueLogger.debug('Queue stopped. Cannot execute');\n          return;\n        }\n        if (await License.shouldPreventAction('monthlyActiveContacts', 1)) {\n          queueLogger.debug('MAC limit reached. Queue wont execute');\n          this.running = false;\n          return;\n        }\n        const queue = await this.nextQueue();\n        const queueDelayTimeout = this.delay();\n        queueLogger.debug(\"Executing queue \".concat(queue || 'Public', \" with timeout of \").concat(queueDelayTimeout));\n        void this.checkQueue(queue).catch(e => {\n          queueLogger.error(e);\n        });\n      }\n      async checkQueue(queue) {\n        queueLogger.debug(\"Processing items for queue \".concat(queue || 'Public'));\n        try {\n          const nextInquiry = await LivechatInquiry.findNextAndLock(getInquirySortMechanismSetting(), queue);\n          if (!nextInquiry) {\n            queueLogger.debug(\"No more items for queue \".concat(queue || 'Public'));\n            return;\n          }\n          const result = await this.processWaitingQueue(queue, nextInquiry);\n          if (!result) {\n            // Note: this removes the \"one-shot\" behavior of queue, allowing it to take a conversation again in the future\n            // And sorting them by _updatedAt: -1 will make it so that the oldest inquiries are taken first\n            // preventing us from playing with the same inquiry over and over again\n            queueLogger.debug(\"Inquiry \".concat(nextInquiry._id, \" not taken. Unlocking and re-queueing\"));\n            const updatedQueue = await LivechatInquiry.unlockAndQueue(nextInquiry._id);\n            return updatedQueue;\n          }\n          queueLogger.debug(\"Inquiry \".concat(nextInquiry._id, \" taken successfully. Unlocking\"));\n          await LivechatInquiry.unlock(nextInquiry._id);\n          queueLogger.debug({\n            msg: 'Inquiry processed',\n            inquiry: nextInquiry._id,\n            queue: queue || 'Public',\n            result\n          });\n        } catch (e) {\n          queueLogger.error({\n            msg: 'Error processing queue',\n            queue: queue || 'Public',\n            err: e\n          });\n        } finally {\n          setTimeout(this.execute.bind(this), this.delay());\n        }\n      }\n      async shouldStart() {\n        var _RoutingManager$getCo;\n        if (!settings.get('Livechat_enabled')) {\n          void this.stop();\n          return;\n        }\n        const routingSupportsAutoAssign = (_RoutingManager$getCo = RoutingManager.getConfig()) === null || _RoutingManager$getCo === void 0 ? void 0 : _RoutingManager$getCo.autoAssignAgent;\n        queueLogger.debug({\n          msg: 'Routing method supports auto assignment',\n          method: settings.get('Livechat_Routing_Method'),\n          status: routingSupportsAutoAssign ? 'Starting' : 'Stopping'\n        });\n        void (routingSupportsAutoAssign ? this.start() : this.stop());\n      }\n      async reconciliation(reason, _ref) {\n        let {\n          roomId,\n          inquiryId\n        } = _ref;\n        switch (reason) {\n          case 'closed':\n            {\n              queueLogger.debug({\n                msg: 'Room closed. Removing inquiry',\n                roomId,\n                inquiryId,\n                step: 'reconciliation'\n              });\n              await LivechatInquiry.removeByRoomId(roomId);\n              break;\n            }\n          case 'taken':\n            {\n              queueLogger.debug({\n                msg: 'Room taken. Updating inquiry status',\n                roomId,\n                inquiryId,\n                step: 'reconciliation'\n              });\n              // Reconciliate served inquiries, by updating their status to taken after queue tried to pick and failed\n              await LivechatInquiry.takeInquiry(inquiryId);\n              break;\n            }\n          case 'missing':\n            {\n              queueLogger.debug({\n                msg: 'Room from inquiry missing. Removing inquiry',\n                roomId,\n                inquiryId,\n                step: 'reconciliation'\n              });\n              await LivechatInquiry.removeByRoomId(roomId);\n              break;\n            }\n          default:\n            {\n              return true;\n            }\n        }\n        return true;\n      }\n      async processWaitingQueue(department, inquiry) {\n        const queue = department || 'Public';\n        queueLogger.debug(\"Processing inquiry \".concat(inquiry._id, \" from queue \").concat(queue));\n        const {\n          defaultAgent\n        } = inquiry;\n        const roomFromDb = await LivechatRooms.findOneById(inquiry.rid);\n        // This is a precaution to avoid taking inquiries tied to rooms that no longer exist.\n        // This should never happen.\n        if (!roomFromDb) {\n          return this.reconciliation('missing', {\n            roomId: inquiry.rid,\n            inquiryId: inquiry._id\n          });\n        }\n        // This is a precaution to avoid taking the same inquiry multiple times. It should not happen, but it's a safety net\n        if (roomFromDb.servedBy) {\n          return this.reconciliation('taken', {\n            roomId: inquiry.rid,\n            inquiryId: inquiry._id\n          });\n        }\n        // This is another precaution. If the room is closed, we should not take it\n        if (roomFromDb.closedAt) {\n          return this.reconciliation('closed', {\n            roomId: inquiry.rid,\n            inquiryId: inquiry._id\n          });\n        }\n        const room = await RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, roomFromDb);\n        if (room !== null && room !== void 0 && room.servedBy) {\n          const {\n            _id: rid,\n            servedBy: {\n              _id: agentId\n            }\n          } = room;\n          queueLogger.debug(\"Inquiry \".concat(inquiry._id, \" taken successfully by agent \").concat(agentId, \". Notifying\"));\n          setTimeout(() => {\n            void dispatchAgentDelegated(rid, agentId);\n          }, 1000);\n          return true;\n        }\n        return false;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","OmnichannelQueue","License","link","v","LivechatInquiry","LivechatRooms","queueLogger","dispatchAgentDelegated","RoutingManager","getInquirySortMechanismSetting","settings","__reifyWaitForDeps__","DEFAULT_RACE_TIMEOUT","constructor","running","queues","delay","_settings$get","timeout","get","isRunning","start","activeQueues","getActiveQueues","debug","concat","length","info","execute","stop","unlockAll","undefined","getDistinctQueuedDepartments","nextQueue","shift","shouldPreventAction","queue","queueDelayTimeout","checkQueue","catch","e","error","nextInquiry","findNextAndLock","result","processWaitingQueue","_id","updatedQueue","unlockAndQueue","unlock","msg","inquiry","err","setTimeout","bind","shouldStart","_RoutingManager$getCo","routingSupportsAutoAssign","getConfig","autoAssignAgent","method","status","reconciliation","reason","_ref","roomId","inquiryId","step","removeByRoomId","takeInquiry","department","defaultAgent","roomFromDb","findOneById","rid","servedBy","closedAt","room","delegateInquiry","agentId","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/omnichannel/queue.ts"],"sourcesContent":["import { type InquiryWithAgentInfo, type IOmnichannelQueue } from '@rocket.chat/core-typings';\nimport { License } from '@rocket.chat/license';\nimport { LivechatInquiry, LivechatRooms } from '@rocket.chat/models';\n\nimport { queueLogger } from './logger';\nimport { dispatchAgentDelegated } from '../../../app/livechat/server/lib/Helper';\nimport { RoutingManager } from '../../../app/livechat/server/lib/RoutingManager';\nimport { getInquirySortMechanismSetting } from '../../../app/livechat/server/lib/settings';\nimport { settings } from '../../../app/settings/server';\n\nconst DEFAULT_RACE_TIMEOUT = 5000;\n\nexport class OmnichannelQueue implements IOmnichannelQueue {\n\tprivate running = false;\n\n\tprivate queues: (string | undefined)[] = [];\n\n\tprivate delay() {\n\t\tconst timeout = settings.get<number>('Omnichannel_queue_delay_timeout') ?? 5;\n\t\treturn timeout < 1 ? DEFAULT_RACE_TIMEOUT : timeout * 1000;\n\t}\n\n\tpublic isRunning() {\n\t\treturn this.running;\n\t}\n\n\tasync start() {\n\t\tif (this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeQueues = await this.getActiveQueues();\n\t\tqueueLogger.debug(`Active queues: ${activeQueues.length}`);\n\t\tthis.running = true;\n\n\t\tqueueLogger.info('Service started');\n\t\treturn this.execute();\n\t}\n\n\tasync stop() {\n\t\tif (!this.running) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait LivechatInquiry.unlockAll();\n\n\t\tthis.running = false;\n\t\tqueueLogger.info('Service stopped');\n\t}\n\n\tprivate async getActiveQueues() {\n\t\t// undefined = public queue(without department)\n\t\treturn ([undefined] as typeof this.queues).concat(await LivechatInquiry.getDistinctQueuedDepartments({}));\n\t}\n\n\tprivate async nextQueue() {\n\t\tif (!this.queues.length) {\n\t\t\tqueueLogger.debug('No more registered queues. Refreshing');\n\t\t\tthis.queues = await this.getActiveQueues();\n\t\t}\n\n\t\treturn this.queues.shift();\n\t}\n\n\tprivate async execute() {\n\t\tif (!this.running) {\n\t\t\tqueueLogger.debug('Queue stopped. Cannot execute');\n\t\t\treturn;\n\t\t}\n\n\t\tif (await License.shouldPreventAction('monthlyActiveContacts', 1)) {\n\t\t\tqueueLogger.debug('MAC limit reached. Queue wont execute');\n\t\t\tthis.running = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst queue = await this.nextQueue();\n\t\tconst queueDelayTimeout = this.delay();\n\t\tqueueLogger.debug(`Executing queue ${queue || 'Public'} with timeout of ${queueDelayTimeout}`);\n\n\t\tvoid this.checkQueue(queue).catch((e) => {\n\t\t\tqueueLogger.error(e);\n\t\t});\n\t}\n\n\tprivate async checkQueue(queue: string | undefined) {\n\t\tqueueLogger.debug(`Processing items for queue ${queue || 'Public'}`);\n\t\ttry {\n\t\t\tconst nextInquiry = await LivechatInquiry.findNextAndLock(getInquirySortMechanismSetting(), queue);\n\t\t\tif (!nextInquiry) {\n\t\t\t\tqueueLogger.debug(`No more items for queue ${queue || 'Public'}`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst result = await this.processWaitingQueue(queue, nextInquiry as InquiryWithAgentInfo);\n\n\t\t\tif (!result) {\n\t\t\t\t// Note: this removes the \"one-shot\" behavior of queue, allowing it to take a conversation again in the future\n\t\t\t\t// And sorting them by _updatedAt: -1 will make it so that the oldest inquiries are taken first\n\t\t\t\t// preventing us from playing with the same inquiry over and over again\n\t\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} not taken. Unlocking and re-queueing`);\n\t\t\t\tconst updatedQueue = await LivechatInquiry.unlockAndQueue(nextInquiry._id);\n\t\t\t\treturn updatedQueue;\n\t\t\t}\n\n\t\t\tqueueLogger.debug(`Inquiry ${nextInquiry._id} taken successfully. Unlocking`);\n\t\t\tawait LivechatInquiry.unlock(nextInquiry._id);\n\t\t\tqueueLogger.debug({\n\t\t\t\tmsg: 'Inquiry processed',\n\t\t\t\tinquiry: nextInquiry._id,\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\tresult,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tqueueLogger.error({\n\t\t\t\tmsg: 'Error processing queue',\n\t\t\t\tqueue: queue || 'Public',\n\t\t\t\terr: e,\n\t\t\t});\n\t\t} finally {\n\t\t\tsetTimeout(this.execute.bind(this), this.delay());\n\t\t}\n\t}\n\n\tasync shouldStart() {\n\t\tif (!settings.get('Livechat_enabled')) {\n\t\t\tvoid this.stop();\n\t\t\treturn;\n\t\t}\n\n\t\tconst routingSupportsAutoAssign = RoutingManager.getConfig()?.autoAssignAgent;\n\t\tqueueLogger.debug({\n\t\t\tmsg: 'Routing method supports auto assignment',\n\t\t\tmethod: settings.get('Livechat_Routing_Method'),\n\t\t\tstatus: routingSupportsAutoAssign ? 'Starting' : 'Stopping',\n\t\t});\n\n\t\tvoid (routingSupportsAutoAssign ? this.start() : this.stop());\n\t}\n\n\tprivate async reconciliation(reason: 'closed' | 'taken' | 'missing', { roomId, inquiryId }: { roomId: string; inquiryId: string }) {\n\t\tswitch (reason) {\n\t\t\tcase 'closed': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room closed. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'taken': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room taken. Updating inquiry status',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\t// Reconciliate served inquiries, by updating their status to taken after queue tried to pick and failed\n\t\t\t\tawait LivechatInquiry.takeInquiry(inquiryId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'missing': {\n\t\t\t\tqueueLogger.debug({\n\t\t\t\t\tmsg: 'Room from inquiry missing. Removing inquiry',\n\t\t\t\t\troomId,\n\t\t\t\t\tinquiryId,\n\t\t\t\t\tstep: 'reconciliation',\n\t\t\t\t});\n\t\t\t\tawait LivechatInquiry.removeByRoomId(roomId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async processWaitingQueue(department: string | undefined, inquiry: InquiryWithAgentInfo) {\n\t\tconst queue = department || 'Public';\n\n\t\tqueueLogger.debug(`Processing inquiry ${inquiry._id} from queue ${queue}`);\n\t\tconst { defaultAgent } = inquiry;\n\n\t\tconst roomFromDb = await LivechatRooms.findOneById(inquiry.rid);\n\n\t\t// This is a precaution to avoid taking inquiries tied to rooms that no longer exist.\n\t\t// This should never happen.\n\t\tif (!roomFromDb) {\n\t\t\treturn this.reconciliation('missing', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is a precaution to avoid taking the same inquiry multiple times. It should not happen, but it's a safety net\n\t\tif (roomFromDb.servedBy) {\n\t\t\treturn this.reconciliation('taken', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\t// This is another precaution. If the room is closed, we should not take it\n\t\tif (roomFromDb.closedAt) {\n\t\t\treturn this.reconciliation('closed', { roomId: inquiry.rid, inquiryId: inquiry._id });\n\t\t}\n\n\t\tconst room = await RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, roomFromDb);\n\n\t\tif (room?.servedBy) {\n\t\t\tconst {\n\t\t\t\t_id: rid,\n\t\t\t\tservedBy: { _id: agentId },\n\t\t\t} = room;\n\t\t\tqueueLogger.debug(`Inquiry ${inquiry._id} taken successfully by agent ${agentId}. Notifying`);\n\t\t\tsetTimeout(() => {\n\t\t\t\tvoid dispatchAgentDelegated(rid, agentId);\n\t\t\t}, 1000);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"986088249f166f41058158e672465f1f51147682"}
