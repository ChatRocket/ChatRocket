{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/callbacks.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"lib/callbacks.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/callbacks.ts","inputSourceMap":{"version":3,"file":"lib/callbacks.ts","sourceRoot":"","sources":["lib/callbacks.ts"],"names":[],"mappings":"AA+BA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AA6OtD;;;GAGG;AAEH,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,SAAS,EAQnC,CAAC","sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tILivechatDepartmentRecord,\n\tILivechatAgent,\n\tOmnichannelAgentStatus,\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tVideoConference,\n\tOEmbedMeta,\n\tOEmbedUrlContent,\n\tUsername,\n\tIOmnichannelRoom,\n\tILivechatTag,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tILivechatTagRecord,\n\tTransferData,\n\tAtLeast,\n\tUserStatus,\n\tILivechatDepartment,\n\tMessageMention,\n\tOmnichannelSourceType,\n} from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FilterOperators } from 'mongodb';\n\nimport type { ILoginAttempt } from '../app/authentication/server/ILoginAttempt';\nimport type { IBusinessHourBehavior } from '../app/livechat/server/business-hour/AbstractBusinessHour';\nimport type { CloseRoomParams } from '../app/livechat/server/lib/localTypes';\nimport { Callbacks } from './callbacks/callbacksBase';\n\n/**\n * Callbacks returning void, like event listeners.\n *\n * TODO: move those to event-based systems\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\ninterface EventLikeCallbackSignatures {\n\t'afterActivateUser': (user: IUser) => void;\n\t'afterCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreatePrivateGroup': (owner: IUser, room: IRoom) => void;\n\t'afterDeactivateUser': (user: IUser) => void;\n\t'afterDeleteMessage': (message: IMessage, room: IRoom) => void;\n\t'workspaceLicenseChanged': (license: string) => void;\n\t'workspaceLicenseRemoved': () => void;\n\t'afterReadMessages': (rid: IRoom['_id'], params: { uid: IUser['_id']; lastSeen?: Date; tmid?: IMessage['_id'] }) => void;\n\t'beforeReadMessages': (rid: IRoom['_id'], uid: IUser['_id']) => void;\n\t'afterDeleteUser': (user: IUser) => void;\n\t'afterFileUpload': (params: { user: IUser; room: IRoom; message: IMessage }) => void;\n\t'afterRoomNameChange': (params: { rid: string; name: string; oldName: string }) => void;\n\t'afterSaveMessage': (message: IMessage, params: { room: IRoom; uid?: string; roomUpdater?: Updater<IRoom> }) => void;\n\t'afterOmnichannelSaveMessage': (message: IMessage, constant: { room: IOmnichannelRoom; roomUpdater: Updater<IOmnichannelRoom> }) => void;\n\t'livechat.removeAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.saveAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.closeRoom': (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => void;\n\t'livechat:afterReturnRoomAsInquiry': (params: { room: IRoom }) => void;\n\t'livechat.setUserStatusLivechat': (params: { userId: IUser['_id']; status: OmnichannelAgentStatus }) => void;\n\t'livechat.agentStatusChanged': (params: { userId: IUser['_id']; status: UserStatus }) => void;\n\t'livechat.onNewAgentCreated': (agentId: string) => void;\n\t'livechat.afterTakeInquiry': (\n\t\tparams: { inquiry: InquiryWithAgentInfo; room: IOmnichannelRoom },\n\t\tagent: { agentId: string; username: string },\n\t) => void;\n\t'livechat.afterAgentRemoved': (params: { agent: Pick<IUser, '_id' | 'username'> }) => void;\n\t'afterAddedToRoom': (params: { user: IUser; inviter?: IUser }, room: IRoom) => void;\n\t'beforeAddedToRoom': (params: {\n\t\tuser: AtLeast<IUser, '_id' | 'federated' | 'roles'>;\n\t\tinviter: AtLeast<IUser, '_id' | 'username'>;\n\t}) => void;\n\t'afterCreateDirectRoom': (params: IRoom, second: { members: IUser[]; creatorId: IUser['_id'] }) => void;\n\t'beforeDeleteRoom': (params: IRoom) => void;\n\t'beforeJoinDefaultChannels': (user: IUser) => void;\n\t'beforeCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreateRoom': (owner: IUser, room: IRoom) => void;\n\t'onValidateLogin': (login: ILoginAttempt) => void;\n\t'federation.afterCreateFederatedRoom': (room: IRoom, second: { owner: IUser; originalMemberList: string[] }) => void;\n\t'beforeCreateDirectRoom': (members: IUser[]) => void;\n\t'federation.beforeCreateDirectMessage': (members: IUser[]) => void;\n\t'afterSetReaction': (message: IMessage, { user, reaction }: { user: IUser; reaction: string; shouldReact: boolean }) => void;\n\t'afterUnsetReaction': (\n\t\tmessage: IMessage,\n\t\t{ user, reaction }: { user: IUser; reaction: string; shouldReact: boolean; oldMessage: IMessage },\n\t) => void;\n\t'federation.beforeAddUserToARoom': (params: { user: IUser | string; inviter: IUser }, room: IRoom) => void;\n\t'federation.onAddUsersToARoom': (params: { invitees: IUser[] | Username[]; inviter: IUser }, room: IRoom) => void;\n\t'onJoinVideoConference': (callId: VideoConference['_id'], userId?: IUser['_id']) => Promise<void>;\n\t'usernameSet': () => void;\n\t'beforeJoinRoom': (user: IUser, room: IRoom) => void;\n\t'beforeMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'beforeUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterValidateLogin': (login: { user: IUser }) => void;\n\t'afterJoinRoom': (user: IUser, room: IRoom) => void;\n\t'livechat.afterDepartmentDisabled': (department: ILivechatDepartmentRecord) => void;\n\t'livechat.afterDepartmentArchived': (department: Pick<ILivechatDepartmentRecord, '_id' | 'businessHourId'>) => void;\n\t'beforeSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser }) => void;\n\t'afterSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser | null }) => void;\n\t'livechat.afterTagRemoved': (tag: ILivechatTagRecord) => void;\n\t'afterUserImport': (data: { inserted: IUser['_id'][]; updated: IUser['_id']; skipped: number; failed: number }) => void;\n}\n\n/**\n * Callbacks that are supposed to be composed like a chain.\n *\n * TODO: develop a middleware alternative and grant independence of execution order\n */\ntype ChainedCallbackSignatures = {\n\t'livechat.beforeRoom': (\n\t\troomInfo: Record<string, unknown>,\n\t\textraData?: Record<string, unknown> & { sla?: string },\n\t) => Record<string, unknown>;\n\t'livechat.newRoom': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\n\t'livechat.beforeForwardRoomToDepartment': <T extends { room: IOmnichannelRoom; transferData?: { department: { _id: string } } }>(\n\t\toptions: T,\n\t) => Promise<T>;\n\n\t'livechat.beforeRouteChat': (inquiry: ILivechatInquiryRecord, agent?: { agentId: string; username: string }) => ILivechatInquiryRecord;\n\t'livechat.checkDefaultAgentOnNewRoom': (agent: SelectedAgent, visitor?: ILivechatVisitor) => SelectedAgent | null;\n\n\t'livechat.onLoadForwardDepartmentRestrictions': (params: { departmentId: string }) => Record<string, unknown>;\n\n\t'livechat.saveInfo': (\n\t\tnewRoom: IOmnichannelRoom,\n\t\tprops: { user: Required<Pick<IUser, '_id' | 'username' | 'name'>>; oldRoom: IOmnichannelRoom },\n\t) => IOmnichannelRoom;\n\n\t'livechat.onCheckRoomApiParams': (params: Record<string, unknown>) => Record<string, unknown>;\n\n\t'livechat.onLoadConfigApi': (config: { room: IOmnichannelRoom }) => Record<string, unknown>;\n\n\t'afterCreateUser': (user: AtLeast<IUser, '_id' | 'username' | 'roles'>) => IUser;\n\t'afterDeleteRoom': (rid: IRoom['_id']) => IRoom['_id'];\n\t'livechat:afterOnHold': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:afterOnHoldChatResumed': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:onTransferFailure': (\n\t\troom: IRoom,\n\t\tparams: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\ttransferData: TransferData;\n\t\t\tdepartment: AtLeast<ILivechatDepartmentRecord, '_id' | 'fallbackForwardDepartment' | 'name'>;\n\t\t},\n\t) => IOmnichannelRoom | Promise<boolean>;\n\t'livechat.afterForwardChatToAgent': (params: {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t};\n\t'livechat.afterForwardChatToDepartment': (params: {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t};\n\t'livechat.afterInquiryQueued': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'livechat.afterRemoveDepartment': (params: {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t}) => {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t};\n\t'livechat.applySimultaneousChatRestrictions': (_: undefined, params: { departmentId?: ILivechatDepartmentRecord['_id'] }) => undefined;\n\t'livechat.beforeDelegateAgent': (agent: SelectedAgent | undefined, params?: { department?: string }) => SelectedAgent | null | undefined;\n\t'livechat.applyDepartmentRestrictions': (\n\t\tquery: FilterOperators<ILivechatDepartmentRecord>,\n\t\tparams: { userId: IUser['_id'] },\n\t) => FilterOperators<ILivechatDepartmentRecord>;\n\t'livechat.applyRoomRestrictions': (query: FilterOperators<IOmnichannelRoom>) => FilterOperators<IOmnichannelRoom>;\n\t'livechat.onMaxNumberSimultaneousChatsReached': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'on-business-hour-start': (params: { BusinessHourBehaviorClass: { new (): IBusinessHourBehavior } }) => {\n\t\tBusinessHourBehaviorClass: { new (): IBusinessHourBehavior };\n\t};\n\t'renderMessage': <T extends IMessage & { html: string }>(message: T) => T;\n\t'oembed:beforeGetUrlContent': (data: { urlObj: URL }) => {\n\t\turlObj: URL;\n\t};\n\t'oembed:afterParseContent': (data: { url: string; meta: OEmbedMeta; headers: { [k: string]: string }; content: OEmbedUrlContent }) => {\n\t\turl: string;\n\t\tmeta: OEmbedMeta;\n\t\theaders: { [k: string]: string };\n\t\tcontent: OEmbedUrlContent;\n\t};\n\t'livechat.beforeListTags': () => ILivechatTag[];\n\t'livechat.offlineMessage': (data: { name: string; email: string; message: string; department?: string; host?: string }) => void;\n\t'livechat.chatQueued': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'livechat.leadCapture': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'beforeSendMessageNotifications': (message: string) => string;\n\t'livechat.onAgentAssignmentFailed': (\n\t\troom: IOmnichannelRoom,\n\t\tparams: {\n\t\t\tinquiry: {\n\t\t\t\t_id: string;\n\t\t\t\trid: string;\n\t\t\t\tstatus: string;\n\t\t\t};\n\t\t\toptions: { forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any }; clientAction?: boolean };\n\t\t},\n\t) => Promise<(IOmnichannelRoom & { chatQueued: boolean }) | undefined>;\n\t'livechat.beforeInquiry': (\n\t\tdata: Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t) => Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t};\n\t'roomNameChanged': (room: IRoom) => void;\n\t'roomTopicChanged': (room: IRoom) => void;\n\t'roomAnnouncementChanged': (room: IRoom) => void;\n\t'roomTypeChanged': (room: IRoom) => void;\n\t'archiveRoom': (room: IRoom) => void;\n\t'unarchiveRoom': (room: IRoom) => void;\n\t'roomAvatarChanged': (room: IRoom) => void;\n\t'beforeGetMentions': (mentionIds: string[], teamMentions: MessageMention[]) => Promise<string[]>;\n\t'livechat.manageDepartmentUnit': (params: { userId: string; departmentId: string; unitId?: string }) => void;\n};\n\nexport type Hook =\n\t| keyof EventLikeCallbackSignatures\n\t| keyof ChainedCallbackSignatures\n\t| 'afterProcessOAuthUser'\n\t| 'afterRoomArchived'\n\t| 'afterRoomTopicChange'\n\t| 'afterSaveUser'\n\t| 'afterValidateNewOAuthUser'\n\t| 'beforeActivateUser'\n\t| 'beforeReadMessages'\n\t| 'beforeRemoveFromRoom'\n\t| 'beforeValidateLogin'\n\t| 'livechat.beforeForwardRoomToDepartment'\n\t| 'livechat.chatQueued'\n\t| 'livechat.checkAgentBeforeTakeInquiry'\n\t| 'livechat.sendTranscript'\n\t| 'livechat.closeRoom'\n\t| 'livechat.offlineMessage'\n\t| 'livechat.onCheckRoomApiParams'\n\t| 'livechat.onLoadConfigApi'\n\t| 'livechat.manageDepartmentUnit'\n\t| 'loginPageStateChange'\n\t| 'mapLDAPUserData'\n\t| 'onCreateUser'\n\t| 'onLDAPLogin'\n\t| 'onValidateLogin'\n\t| 'openBroadcast'\n\t| 'renderNotification'\n\t| 'streamMessage'\n\t| 'streamNewMessage'\n\t| 'userAvatarSet'\n\t| 'userConfirmationEmailRequested'\n\t| 'userForgotPasswordEmailRequested'\n\t| 'usernameSet'\n\t| 'userPasswordReset'\n\t| 'userRegistered'\n\t| 'userStatusManuallySet'\n\t| 'test';\n\n/**\n * Callback hooks provide an easy way to add extra steps to common operations.\n * @deprecated\n */\n\nexport const callbacks = new Callbacks<\n\t{\n\t\t[key in keyof ChainedCallbackSignatures]: ChainedCallbackSignatures[key];\n\t},\n\t{\n\t\t[key in keyof EventLikeCallbackSignatures]: EventLikeCallbackSignatures[key];\n\t},\n\tHook\n>();\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/lib/callbacks.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"lib/callbacks.ts","inputSourceMap":{"version":3,"file":"lib/callbacks.ts","sourceRoot":"","sources":["lib/callbacks.ts"],"names":[],"mappings":"AA+BA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AA6OtD;;;GAGG;AAEH,MAAM,CAAC,MAAM,SAAS,GAAG,IAAI,SAAS,EAQnC,CAAC","sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tILivechatDepartmentRecord,\n\tILivechatAgent,\n\tOmnichannelAgentStatus,\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tVideoConference,\n\tOEmbedMeta,\n\tOEmbedUrlContent,\n\tUsername,\n\tIOmnichannelRoom,\n\tILivechatTag,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tILivechatTagRecord,\n\tTransferData,\n\tAtLeast,\n\tUserStatus,\n\tILivechatDepartment,\n\tMessageMention,\n\tOmnichannelSourceType,\n} from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FilterOperators } from 'mongodb';\n\nimport type { ILoginAttempt } from '../app/authentication/server/ILoginAttempt';\nimport type { IBusinessHourBehavior } from '../app/livechat/server/business-hour/AbstractBusinessHour';\nimport type { CloseRoomParams } from '../app/livechat/server/lib/localTypes';\nimport { Callbacks } from './callbacks/callbacksBase';\n\n/**\n * Callbacks returning void, like event listeners.\n *\n * TODO: move those to event-based systems\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\ninterface EventLikeCallbackSignatures {\n\t'afterActivateUser': (user: IUser) => void;\n\t'afterCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreatePrivateGroup': (owner: IUser, room: IRoom) => void;\n\t'afterDeactivateUser': (user: IUser) => void;\n\t'afterDeleteMessage': (message: IMessage, room: IRoom) => void;\n\t'workspaceLicenseChanged': (license: string) => void;\n\t'workspaceLicenseRemoved': () => void;\n\t'afterReadMessages': (rid: IRoom['_id'], params: { uid: IUser['_id']; lastSeen?: Date; tmid?: IMessage['_id'] }) => void;\n\t'beforeReadMessages': (rid: IRoom['_id'], uid: IUser['_id']) => void;\n\t'afterDeleteUser': (user: IUser) => void;\n\t'afterFileUpload': (params: { user: IUser; room: IRoom; message: IMessage }) => void;\n\t'afterRoomNameChange': (params: { rid: string; name: string; oldName: string }) => void;\n\t'afterSaveMessage': (message: IMessage, params: { room: IRoom; uid?: string; roomUpdater?: Updater<IRoom> }) => void;\n\t'afterOmnichannelSaveMessage': (message: IMessage, constant: { room: IOmnichannelRoom; roomUpdater: Updater<IOmnichannelRoom> }) => void;\n\t'livechat.removeAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.saveAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.closeRoom': (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => void;\n\t'livechat:afterReturnRoomAsInquiry': (params: { room: IRoom }) => void;\n\t'livechat.setUserStatusLivechat': (params: { userId: IUser['_id']; status: OmnichannelAgentStatus }) => void;\n\t'livechat.agentStatusChanged': (params: { userId: IUser['_id']; status: UserStatus }) => void;\n\t'livechat.onNewAgentCreated': (agentId: string) => void;\n\t'livechat.afterTakeInquiry': (\n\t\tparams: { inquiry: InquiryWithAgentInfo; room: IOmnichannelRoom },\n\t\tagent: { agentId: string; username: string },\n\t) => void;\n\t'livechat.afterAgentRemoved': (params: { agent: Pick<IUser, '_id' | 'username'> }) => void;\n\t'afterAddedToRoom': (params: { user: IUser; inviter?: IUser }, room: IRoom) => void;\n\t'beforeAddedToRoom': (params: {\n\t\tuser: AtLeast<IUser, '_id' | 'federated' | 'roles'>;\n\t\tinviter: AtLeast<IUser, '_id' | 'username'>;\n\t}) => void;\n\t'afterCreateDirectRoom': (params: IRoom, second: { members: IUser[]; creatorId: IUser['_id'] }) => void;\n\t'beforeDeleteRoom': (params: IRoom) => void;\n\t'beforeJoinDefaultChannels': (user: IUser) => void;\n\t'beforeCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreateRoom': (owner: IUser, room: IRoom) => void;\n\t'onValidateLogin': (login: ILoginAttempt) => void;\n\t'federation.afterCreateFederatedRoom': (room: IRoom, second: { owner: IUser; originalMemberList: string[] }) => void;\n\t'beforeCreateDirectRoom': (members: IUser[]) => void;\n\t'federation.beforeCreateDirectMessage': (members: IUser[]) => void;\n\t'afterSetReaction': (message: IMessage, { user, reaction }: { user: IUser; reaction: string; shouldReact: boolean }) => void;\n\t'afterUnsetReaction': (\n\t\tmessage: IMessage,\n\t\t{ user, reaction }: { user: IUser; reaction: string; shouldReact: boolean; oldMessage: IMessage },\n\t) => void;\n\t'federation.beforeAddUserToARoom': (params: { user: IUser | string; inviter: IUser }, room: IRoom) => void;\n\t'federation.onAddUsersToARoom': (params: { invitees: IUser[] | Username[]; inviter: IUser }, room: IRoom) => void;\n\t'onJoinVideoConference': (callId: VideoConference['_id'], userId?: IUser['_id']) => Promise<void>;\n\t'usernameSet': () => void;\n\t'beforeJoinRoom': (user: IUser, room: IRoom) => void;\n\t'beforeMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'beforeUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterValidateLogin': (login: { user: IUser }) => void;\n\t'afterJoinRoom': (user: IUser, room: IRoom) => void;\n\t'livechat.afterDepartmentDisabled': (department: ILivechatDepartmentRecord) => void;\n\t'livechat.afterDepartmentArchived': (department: Pick<ILivechatDepartmentRecord, '_id' | 'businessHourId'>) => void;\n\t'beforeSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser }) => void;\n\t'afterSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser | null }) => void;\n\t'livechat.afterTagRemoved': (tag: ILivechatTagRecord) => void;\n\t'afterUserImport': (data: { inserted: IUser['_id'][]; updated: IUser['_id']; skipped: number; failed: number }) => void;\n}\n\n/**\n * Callbacks that are supposed to be composed like a chain.\n *\n * TODO: develop a middleware alternative and grant independence of execution order\n */\ntype ChainedCallbackSignatures = {\n\t'livechat.beforeRoom': (\n\t\troomInfo: Record<string, unknown>,\n\t\textraData?: Record<string, unknown> & { sla?: string },\n\t) => Record<string, unknown>;\n\t'livechat.newRoom': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\n\t'livechat.beforeForwardRoomToDepartment': <T extends { room: IOmnichannelRoom; transferData?: { department: { _id: string } } }>(\n\t\toptions: T,\n\t) => Promise<T>;\n\n\t'livechat.beforeRouteChat': (inquiry: ILivechatInquiryRecord, agent?: { agentId: string; username: string }) => ILivechatInquiryRecord;\n\t'livechat.checkDefaultAgentOnNewRoom': (agent: SelectedAgent, visitor?: ILivechatVisitor) => SelectedAgent | null;\n\n\t'livechat.onLoadForwardDepartmentRestrictions': (params: { departmentId: string }) => Record<string, unknown>;\n\n\t'livechat.saveInfo': (\n\t\tnewRoom: IOmnichannelRoom,\n\t\tprops: { user: Required<Pick<IUser, '_id' | 'username' | 'name'>>; oldRoom: IOmnichannelRoom },\n\t) => IOmnichannelRoom;\n\n\t'livechat.onCheckRoomApiParams': (params: Record<string, unknown>) => Record<string, unknown>;\n\n\t'livechat.onLoadConfigApi': (config: { room: IOmnichannelRoom }) => Record<string, unknown>;\n\n\t'afterCreateUser': (user: AtLeast<IUser, '_id' | 'username' | 'roles'>) => IUser;\n\t'afterDeleteRoom': (rid: IRoom['_id']) => IRoom['_id'];\n\t'livechat:afterOnHold': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:afterOnHoldChatResumed': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:onTransferFailure': (\n\t\troom: IRoom,\n\t\tparams: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\ttransferData: TransferData;\n\t\t\tdepartment: AtLeast<ILivechatDepartmentRecord, '_id' | 'fallbackForwardDepartment' | 'name'>;\n\t\t},\n\t) => IOmnichannelRoom | Promise<boolean>;\n\t'livechat.afterForwardChatToAgent': (params: {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t};\n\t'livechat.afterForwardChatToDepartment': (params: {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t};\n\t'livechat.afterInquiryQueued': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'livechat.afterRemoveDepartment': (params: {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t}) => {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t};\n\t'livechat.applySimultaneousChatRestrictions': (_: undefined, params: { departmentId?: ILivechatDepartmentRecord['_id'] }) => undefined;\n\t'livechat.beforeDelegateAgent': (agent: SelectedAgent | undefined, params?: { department?: string }) => SelectedAgent | null | undefined;\n\t'livechat.applyDepartmentRestrictions': (\n\t\tquery: FilterOperators<ILivechatDepartmentRecord>,\n\t\tparams: { userId: IUser['_id'] },\n\t) => FilterOperators<ILivechatDepartmentRecord>;\n\t'livechat.applyRoomRestrictions': (query: FilterOperators<IOmnichannelRoom>) => FilterOperators<IOmnichannelRoom>;\n\t'livechat.onMaxNumberSimultaneousChatsReached': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'on-business-hour-start': (params: { BusinessHourBehaviorClass: { new (): IBusinessHourBehavior } }) => {\n\t\tBusinessHourBehaviorClass: { new (): IBusinessHourBehavior };\n\t};\n\t'renderMessage': <T extends IMessage & { html: string }>(message: T) => T;\n\t'oembed:beforeGetUrlContent': (data: { urlObj: URL }) => {\n\t\turlObj: URL;\n\t};\n\t'oembed:afterParseContent': (data: { url: string; meta: OEmbedMeta; headers: { [k: string]: string }; content: OEmbedUrlContent }) => {\n\t\turl: string;\n\t\tmeta: OEmbedMeta;\n\t\theaders: { [k: string]: string };\n\t\tcontent: OEmbedUrlContent;\n\t};\n\t'livechat.beforeListTags': () => ILivechatTag[];\n\t'livechat.offlineMessage': (data: { name: string; email: string; message: string; department?: string; host?: string }) => void;\n\t'livechat.chatQueued': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'livechat.leadCapture': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'beforeSendMessageNotifications': (message: string) => string;\n\t'livechat.onAgentAssignmentFailed': (\n\t\troom: IOmnichannelRoom,\n\t\tparams: {\n\t\t\tinquiry: {\n\t\t\t\t_id: string;\n\t\t\t\trid: string;\n\t\t\t\tstatus: string;\n\t\t\t};\n\t\t\toptions: { forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any }; clientAction?: boolean };\n\t\t},\n\t) => Promise<(IOmnichannelRoom & { chatQueued: boolean }) | undefined>;\n\t'livechat.beforeInquiry': (\n\t\tdata: Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t) => Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t};\n\t'roomNameChanged': (room: IRoom) => void;\n\t'roomTopicChanged': (room: IRoom) => void;\n\t'roomAnnouncementChanged': (room: IRoom) => void;\n\t'roomTypeChanged': (room: IRoom) => void;\n\t'archiveRoom': (room: IRoom) => void;\n\t'unarchiveRoom': (room: IRoom) => void;\n\t'roomAvatarChanged': (room: IRoom) => void;\n\t'beforeGetMentions': (mentionIds: string[], teamMentions: MessageMention[]) => Promise<string[]>;\n\t'livechat.manageDepartmentUnit': (params: { userId: string; departmentId: string; unitId?: string }) => void;\n};\n\nexport type Hook =\n\t| keyof EventLikeCallbackSignatures\n\t| keyof ChainedCallbackSignatures\n\t| 'afterProcessOAuthUser'\n\t| 'afterRoomArchived'\n\t| 'afterRoomTopicChange'\n\t| 'afterSaveUser'\n\t| 'afterValidateNewOAuthUser'\n\t| 'beforeActivateUser'\n\t| 'beforeReadMessages'\n\t| 'beforeRemoveFromRoom'\n\t| 'beforeValidateLogin'\n\t| 'livechat.beforeForwardRoomToDepartment'\n\t| 'livechat.chatQueued'\n\t| 'livechat.checkAgentBeforeTakeInquiry'\n\t| 'livechat.sendTranscript'\n\t| 'livechat.closeRoom'\n\t| 'livechat.offlineMessage'\n\t| 'livechat.onCheckRoomApiParams'\n\t| 'livechat.onLoadConfigApi'\n\t| 'livechat.manageDepartmentUnit'\n\t| 'loginPageStateChange'\n\t| 'mapLDAPUserData'\n\t| 'onCreateUser'\n\t| 'onLDAPLogin'\n\t| 'onValidateLogin'\n\t| 'openBroadcast'\n\t| 'renderNotification'\n\t| 'streamMessage'\n\t| 'streamNewMessage'\n\t| 'userAvatarSet'\n\t| 'userConfirmationEmailRequested'\n\t| 'userForgotPasswordEmailRequested'\n\t| 'usernameSet'\n\t| 'userPasswordReset'\n\t| 'userRegistered'\n\t| 'userStatusManuallySet'\n\t| 'test';\n\n/**\n * Callback hooks provide an easy way to add extra steps to common operations.\n * @deprecated\n */\n\nexport const callbacks = new Callbacks<\n\t{\n\t\t[key in keyof ChainedCallbackSignatures]: ChainedCallbackSignatures[key];\n\t},\n\t{\n\t\t[key in keyof EventLikeCallbackSignatures]: EventLikeCallbackSignatures[key];\n\t},\n\tHook\n>();\n"]}}},"code":"module.export({\n  callbacks: function () {\n    return callbacks;\n  }\n});\nvar Callbacks;\nmodule.link(\"./callbacks/callbacksBase\", {\n  Callbacks: function (v) {\n    Callbacks = v;\n  }\n}, 0);\nvar callbacks = new Callbacks();","map":{"version":3,"names":["module","export","callbacks","Callbacks","link","v"],"sources":["lib/callbacks.ts"],"sourcesContent":["import type {\n\tIMessage,\n\tIRoom,\n\tIUser,\n\tILivechatDepartmentRecord,\n\tILivechatAgent,\n\tOmnichannelAgentStatus,\n\tILivechatInquiryRecord,\n\tILivechatVisitor,\n\tVideoConference,\n\tOEmbedMeta,\n\tOEmbedUrlContent,\n\tUsername,\n\tIOmnichannelRoom,\n\tILivechatTag,\n\tSelectedAgent,\n\tInquiryWithAgentInfo,\n\tILivechatTagRecord,\n\tTransferData,\n\tAtLeast,\n\tUserStatus,\n\tILivechatDepartment,\n\tMessageMention,\n\tOmnichannelSourceType,\n} from '@rocket.chat/core-typings';\nimport type { Updater } from '@rocket.chat/models';\nimport type { FilterOperators } from 'mongodb';\n\nimport type { ILoginAttempt } from '../app/authentication/server/ILoginAttempt';\nimport type { IBusinessHourBehavior } from '../app/livechat/server/business-hour/AbstractBusinessHour';\nimport type { CloseRoomParams } from '../app/livechat/server/lib/localTypes';\nimport { Callbacks } from './callbacks/callbacksBase';\n\n/**\n * Callbacks returning void, like event listeners.\n *\n * TODO: move those to event-based systems\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\ninterface EventLikeCallbackSignatures {\n\t'afterActivateUser': (user: IUser) => void;\n\t'afterCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreatePrivateGroup': (owner: IUser, room: IRoom) => void;\n\t'afterDeactivateUser': (user: IUser) => void;\n\t'afterDeleteMessage': (message: IMessage, room: IRoom) => void;\n\t'workspaceLicenseChanged': (license: string) => void;\n\t'workspaceLicenseRemoved': () => void;\n\t'afterReadMessages': (rid: IRoom['_id'], params: { uid: IUser['_id']; lastSeen?: Date; tmid?: IMessage['_id'] }) => void;\n\t'beforeReadMessages': (rid: IRoom['_id'], uid: IUser['_id']) => void;\n\t'afterDeleteUser': (user: IUser) => void;\n\t'afterFileUpload': (params: { user: IUser; room: IRoom; message: IMessage }) => void;\n\t'afterRoomNameChange': (params: { rid: string; name: string; oldName: string }) => void;\n\t'afterSaveMessage': (message: IMessage, params: { room: IRoom; uid?: string; roomUpdater?: Updater<IRoom> }) => void;\n\t'afterOmnichannelSaveMessage': (message: IMessage, constant: { room: IOmnichannelRoom; roomUpdater: Updater<IOmnichannelRoom> }) => void;\n\t'livechat.removeAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.saveAgentDepartment': (params: { departmentId: ILivechatDepartmentRecord['_id']; agentsId: ILivechatAgent['_id'][] }) => void;\n\t'livechat.closeRoom': (params: { room: IOmnichannelRoom; options: CloseRoomParams['options'] }) => void;\n\t'livechat:afterReturnRoomAsInquiry': (params: { room: IRoom }) => void;\n\t'livechat.setUserStatusLivechat': (params: { userId: IUser['_id']; status: OmnichannelAgentStatus }) => void;\n\t'livechat.agentStatusChanged': (params: { userId: IUser['_id']; status: UserStatus }) => void;\n\t'livechat.onNewAgentCreated': (agentId: string) => void;\n\t'livechat.afterTakeInquiry': (\n\t\tparams: { inquiry: InquiryWithAgentInfo; room: IOmnichannelRoom },\n\t\tagent: { agentId: string; username: string },\n\t) => void;\n\t'livechat.afterAgentRemoved': (params: { agent: Pick<IUser, '_id' | 'username'> }) => void;\n\t'afterAddedToRoom': (params: { user: IUser; inviter?: IUser }, room: IRoom) => void;\n\t'beforeAddedToRoom': (params: {\n\t\tuser: AtLeast<IUser, '_id' | 'federated' | 'roles'>;\n\t\tinviter: AtLeast<IUser, '_id' | 'username'>;\n\t}) => void;\n\t'afterCreateDirectRoom': (params: IRoom, second: { members: IUser[]; creatorId: IUser['_id'] }) => void;\n\t'beforeDeleteRoom': (params: IRoom) => void;\n\t'beforeJoinDefaultChannels': (user: IUser) => void;\n\t'beforeCreateChannel': (owner: IUser, room: IRoom) => void;\n\t'afterCreateRoom': (owner: IUser, room: IRoom) => void;\n\t'onValidateLogin': (login: ILoginAttempt) => void;\n\t'federation.afterCreateFederatedRoom': (room: IRoom, second: { owner: IUser; originalMemberList: string[] }) => void;\n\t'beforeCreateDirectRoom': (members: IUser[]) => void;\n\t'federation.beforeCreateDirectMessage': (members: IUser[]) => void;\n\t'afterSetReaction': (message: IMessage, { user, reaction }: { user: IUser; reaction: string; shouldReact: boolean }) => void;\n\t'afterUnsetReaction': (\n\t\tmessage: IMessage,\n\t\t{ user, reaction }: { user: IUser; reaction: string; shouldReact: boolean; oldMessage: IMessage },\n\t) => void;\n\t'federation.beforeAddUserToARoom': (params: { user: IUser | string; inviter: IUser }, room: IRoom) => void;\n\t'federation.onAddUsersToARoom': (params: { invitees: IUser[] | Username[]; inviter: IUser }, room: IRoom) => void;\n\t'onJoinVideoConference': (callId: VideoConference['_id'], userId?: IUser['_id']) => Promise<void>;\n\t'usernameSet': () => void;\n\t'beforeJoinRoom': (user: IUser, room: IRoom) => void;\n\t'beforeMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterMuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'beforeUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterUnmuteUser': (users: { mutedUser: IUser; fromUser: IUser }, room: IRoom) => void;\n\t'afterValidateLogin': (login: { user: IUser }) => void;\n\t'afterJoinRoom': (user: IUser, room: IRoom) => void;\n\t'livechat.afterDepartmentDisabled': (department: ILivechatDepartmentRecord) => void;\n\t'livechat.afterDepartmentArchived': (department: Pick<ILivechatDepartmentRecord, '_id' | 'businessHourId'>) => void;\n\t'beforeSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser }) => void;\n\t'afterSaveUser': ({ user, oldUser }: { user: IUser; oldUser?: IUser | null }) => void;\n\t'livechat.afterTagRemoved': (tag: ILivechatTagRecord) => void;\n\t'afterUserImport': (data: { inserted: IUser['_id'][]; updated: IUser['_id']; skipped: number; failed: number }) => void;\n}\n\n/**\n * Callbacks that are supposed to be composed like a chain.\n *\n * TODO: develop a middleware alternative and grant independence of execution order\n */\ntype ChainedCallbackSignatures = {\n\t'livechat.beforeRoom': (\n\t\troomInfo: Record<string, unknown>,\n\t\textraData?: Record<string, unknown> & { sla?: string },\n\t) => Record<string, unknown>;\n\t'livechat.newRoom': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\n\t'livechat.beforeForwardRoomToDepartment': <T extends { room: IOmnichannelRoom; transferData?: { department: { _id: string } } }>(\n\t\toptions: T,\n\t) => Promise<T>;\n\n\t'livechat.beforeRouteChat': (inquiry: ILivechatInquiryRecord, agent?: { agentId: string; username: string }) => ILivechatInquiryRecord;\n\t'livechat.checkDefaultAgentOnNewRoom': (agent: SelectedAgent, visitor?: ILivechatVisitor) => SelectedAgent | null;\n\n\t'livechat.onLoadForwardDepartmentRestrictions': (params: { departmentId: string }) => Record<string, unknown>;\n\n\t'livechat.saveInfo': (\n\t\tnewRoom: IOmnichannelRoom,\n\t\tprops: { user: Required<Pick<IUser, '_id' | 'username' | 'name'>>; oldRoom: IOmnichannelRoom },\n\t) => IOmnichannelRoom;\n\n\t'livechat.onCheckRoomApiParams': (params: Record<string, unknown>) => Record<string, unknown>;\n\n\t'livechat.onLoadConfigApi': (config: { room: IOmnichannelRoom }) => Record<string, unknown>;\n\n\t'afterCreateUser': (user: AtLeast<IUser, '_id' | 'username' | 'roles'>) => IUser;\n\t'afterDeleteRoom': (rid: IRoom['_id']) => IRoom['_id'];\n\t'livechat:afterOnHold': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:afterOnHoldChatResumed': (room: Pick<IOmnichannelRoom, '_id'>) => Pick<IOmnichannelRoom, '_id'>;\n\t'livechat:onTransferFailure': (\n\t\troom: IRoom,\n\t\tparams: {\n\t\t\tguest: ILivechatVisitor;\n\t\t\ttransferData: TransferData;\n\t\t\tdepartment: AtLeast<ILivechatDepartmentRecord, '_id' | 'fallbackForwardDepartment' | 'name'>;\n\t\t},\n\t) => IOmnichannelRoom | Promise<boolean>;\n\t'livechat.afterForwardChatToAgent': (params: {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tservedBy: { _id: string; ts: Date; username?: string };\n\t\toldServedBy: { _id: string; ts: Date; username?: string };\n\t};\n\t'livechat.afterForwardChatToDepartment': (params: {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t}) => {\n\t\trid: IRoom['_id'];\n\t\tnewDepartmentId: ILivechatDepartmentRecord['_id'];\n\t\toldDepartmentId: ILivechatDepartmentRecord['_id'];\n\t};\n\t'livechat.afterInquiryQueued': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'livechat.afterRemoveDepartment': (params: {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t}) => {\n\t\tdepartment: AtLeast<ILivechatDepartment, '_id' | 'businessHourId'>;\n\t\tagentsId: ILivechatAgent['_id'][];\n\t};\n\t'livechat.applySimultaneousChatRestrictions': (_: undefined, params: { departmentId?: ILivechatDepartmentRecord['_id'] }) => undefined;\n\t'livechat.beforeDelegateAgent': (agent: SelectedAgent | undefined, params?: { department?: string }) => SelectedAgent | null | undefined;\n\t'livechat.applyDepartmentRestrictions': (\n\t\tquery: FilterOperators<ILivechatDepartmentRecord>,\n\t\tparams: { userId: IUser['_id'] },\n\t) => FilterOperators<ILivechatDepartmentRecord>;\n\t'livechat.applyRoomRestrictions': (query: FilterOperators<IOmnichannelRoom>) => FilterOperators<IOmnichannelRoom>;\n\t'livechat.onMaxNumberSimultaneousChatsReached': (inquiry: ILivechatInquiryRecord) => ILivechatInquiryRecord;\n\t'on-business-hour-start': (params: { BusinessHourBehaviorClass: { new (): IBusinessHourBehavior } }) => {\n\t\tBusinessHourBehaviorClass: { new (): IBusinessHourBehavior };\n\t};\n\t'renderMessage': <T extends IMessage & { html: string }>(message: T) => T;\n\t'oembed:beforeGetUrlContent': (data: { urlObj: URL }) => {\n\t\turlObj: URL;\n\t};\n\t'oembed:afterParseContent': (data: { url: string; meta: OEmbedMeta; headers: { [k: string]: string }; content: OEmbedUrlContent }) => {\n\t\turl: string;\n\t\tmeta: OEmbedMeta;\n\t\theaders: { [k: string]: string };\n\t\tcontent: OEmbedUrlContent;\n\t};\n\t'livechat.beforeListTags': () => ILivechatTag[];\n\t'livechat.offlineMessage': (data: { name: string; email: string; message: string; department?: string; host?: string }) => void;\n\t'livechat.chatQueued': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'livechat.leadCapture': (room: IOmnichannelRoom) => IOmnichannelRoom;\n\t'beforeSendMessageNotifications': (message: string) => string;\n\t'livechat.onAgentAssignmentFailed': (\n\t\troom: IOmnichannelRoom,\n\t\tparams: {\n\t\t\tinquiry: {\n\t\t\t\t_id: string;\n\t\t\t\trid: string;\n\t\t\t\tstatus: string;\n\t\t\t};\n\t\t\toptions: { forwardingToDepartment?: { oldDepartmentId?: string; transferData?: any }; clientAction?: boolean };\n\t\t},\n\t) => Promise<(IOmnichannelRoom & { chatQueued: boolean }) | undefined>;\n\t'livechat.beforeInquiry': (\n\t\tdata: Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\t\tcustomFields?: Record<string, unknown>;\n\t\t\tsource?: OmnichannelSourceType;\n\t\t},\n\t) => Pick<ILivechatInquiryRecord, 'source'> & { sla?: string; priority?: string; [other: string]: unknown } & {\n\t\tcustomFields?: Record<string, unknown>;\n\t\tsource?: OmnichannelSourceType;\n\t};\n\t'roomNameChanged': (room: IRoom) => void;\n\t'roomTopicChanged': (room: IRoom) => void;\n\t'roomAnnouncementChanged': (room: IRoom) => void;\n\t'roomTypeChanged': (room: IRoom) => void;\n\t'archiveRoom': (room: IRoom) => void;\n\t'unarchiveRoom': (room: IRoom) => void;\n\t'roomAvatarChanged': (room: IRoom) => void;\n\t'beforeGetMentions': (mentionIds: string[], teamMentions: MessageMention[]) => Promise<string[]>;\n\t'livechat.manageDepartmentUnit': (params: { userId: string; departmentId: string; unitId?: string }) => void;\n};\n\nexport type Hook =\n\t| keyof EventLikeCallbackSignatures\n\t| keyof ChainedCallbackSignatures\n\t| 'afterProcessOAuthUser'\n\t| 'afterRoomArchived'\n\t| 'afterRoomTopicChange'\n\t| 'afterSaveUser'\n\t| 'afterValidateNewOAuthUser'\n\t| 'beforeActivateUser'\n\t| 'beforeReadMessages'\n\t| 'beforeRemoveFromRoom'\n\t| 'beforeValidateLogin'\n\t| 'livechat.beforeForwardRoomToDepartment'\n\t| 'livechat.chatQueued'\n\t| 'livechat.checkAgentBeforeTakeInquiry'\n\t| 'livechat.sendTranscript'\n\t| 'livechat.closeRoom'\n\t| 'livechat.offlineMessage'\n\t| 'livechat.onCheckRoomApiParams'\n\t| 'livechat.onLoadConfigApi'\n\t| 'livechat.manageDepartmentUnit'\n\t| 'loginPageStateChange'\n\t| 'mapLDAPUserData'\n\t| 'onCreateUser'\n\t| 'onLDAPLogin'\n\t| 'onValidateLogin'\n\t| 'openBroadcast'\n\t| 'renderNotification'\n\t| 'streamMessage'\n\t| 'streamNewMessage'\n\t| 'userAvatarSet'\n\t| 'userConfirmationEmailRequested'\n\t| 'userForgotPasswordEmailRequested'\n\t| 'usernameSet'\n\t| 'userPasswordReset'\n\t| 'userRegistered'\n\t| 'userStatusManuallySet'\n\t| 'test';\n\n/**\n * Callback hooks provide an easy way to add extra steps to common operations.\n * @deprecated\n */\n\nexport const callbacks = new Callbacks<\n\t{\n\t\t[key in keyof ChainedCallbackSignatures]: ChainedCallbackSignatures[key];\n\t},\n\t{\n\t\t[key in keyof EventLikeCallbackSignatures]: EventLikeCallbackSignatures[key];\n\t},\n\tHook\n>();\n"],"mappings":"AA+BAA,MAAA,CAAOC,MAAE;EAAAC,SAAW,WAAAA,CAAA,EAAM;IAAA,OAAAA,SAAA;EAAA;AAA2B,CAAC;AAAA,IAAAC,SAAA;AAAAH,MAAA,CAAAI,IAAA;EAAAD,SAAA,WAAAA,CAAAE,CAAA;IAAAF,SAAA,GAAAE,CAAA;EAAA;AAAA;AAkP/C,IAAMH,SAAS,GAAG,IAAIC,SAAS,EAQnC","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0e62b4b6d43977fcda62806ea423a7959895e703"}
