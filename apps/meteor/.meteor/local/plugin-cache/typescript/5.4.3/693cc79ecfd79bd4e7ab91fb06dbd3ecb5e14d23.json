{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Helper.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/business-hour/Helper.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Helper.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/Helper.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { ILivechatAgentStatus, LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { createDefaultBusinessHourRow } from './LivechatBusinessHours';\nimport { filterBusinessHoursThatMustBeOpened } from './filterBusinessHoursThatMustBeOpened';\nimport { notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { businessHourLogger } from '../lib/logger';\n\nexport { filterBusinessHoursThatMustBeOpened };\n\nexport const filterBusinessHoursThatMustBeOpenedByDay = async (\n\tbusinessHours: ILivechatBusinessHour[],\n\tday: string, // Format: moment.format('dddd')\n): Promise<Pick<ILivechatBusinessHour, '_id' | 'type'>[]> => {\n\treturn filterBusinessHoursThatMustBeOpened(\n\t\tbusinessHours.filter((businessHour) =>\n\t\t\tbusinessHour.workHours.some((workHour) => workHour.start.utc.dayOfWeek === day || workHour.finish.utc.dayOfWeek === day),\n\t\t),\n\t);\n};\n\nexport const openBusinessHourDefault = async (): Promise<void> => {\n\tawait Users.removeBusinessHoursFromAllUsers();\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tprojection: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tbusinessHourLogger.debug({ msg: 'Opening default business hours', businessHoursToOpenIds });\n\tawait Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n\tif (businessHoursToOpenIds.length) {\n\t\tawait makeOnlineAgentsAvailable();\n\t}\n\tawait makeAgentsUnavailableBasedOnBusinessHour();\n};\n\nexport const createDefaultBusinessHourIfNotExists = async (): Promise<void> => {\n\tif ((await LivechatBusinessHours.col.countDocuments({ type: LivechatBusinessHourTypes.DEFAULT })) === 0) {\n\t\tawait LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n\t}\n};\n\nexport async function makeAgentsUnavailableBasedOnBusinessHour(agentIds: string[] | null = null) {\n\tconst results = await Users.findAgentsAvailableWithoutBusinessHours(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.NOT_AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'not-available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n\nexport async function makeOnlineAgentsAvailable(agentIds: string[] | null = null) {\n\tconst results = await Users.findOnlineButNotAvailableAgents(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/business-hour/Helper.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/business-hour/Helper.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/business-hour/Helper.ts","sourceRoot":"","sources":["app/livechat/server/business-hour/Helper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { ILivechatAgentStatus, LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { createDefaultBusinessHourRow } from './LivechatBusinessHours';\nimport { filterBusinessHoursThatMustBeOpened } from './filterBusinessHoursThatMustBeOpened';\nimport { notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { businessHourLogger } from '../lib/logger';\n\nexport { filterBusinessHoursThatMustBeOpened };\n\nexport const filterBusinessHoursThatMustBeOpenedByDay = async (\n\tbusinessHours: ILivechatBusinessHour[],\n\tday: string, // Format: moment.format('dddd')\n): Promise<Pick<ILivechatBusinessHour, '_id' | 'type'>[]> => {\n\treturn filterBusinessHoursThatMustBeOpened(\n\t\tbusinessHours.filter((businessHour) =>\n\t\t\tbusinessHour.workHours.some((workHour) => workHour.start.utc.dayOfWeek === day || workHour.finish.utc.dayOfWeek === day),\n\t\t),\n\t);\n};\n\nexport const openBusinessHourDefault = async (): Promise<void> => {\n\tawait Users.removeBusinessHoursFromAllUsers();\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tprojection: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tbusinessHourLogger.debug({ msg: 'Opening default business hours', businessHoursToOpenIds });\n\tawait Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n\tif (businessHoursToOpenIds.length) {\n\t\tawait makeOnlineAgentsAvailable();\n\t}\n\tawait makeAgentsUnavailableBasedOnBusinessHour();\n};\n\nexport const createDefaultBusinessHourIfNotExists = async (): Promise<void> => {\n\tif ((await LivechatBusinessHours.col.countDocuments({ type: LivechatBusinessHourTypes.DEFAULT })) === 0) {\n\t\tawait LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n\t}\n};\n\nexport async function makeAgentsUnavailableBasedOnBusinessHour(agentIds: string[] | null = null) {\n\tconst results = await Users.findAgentsAvailableWithoutBusinessHours(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.NOT_AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'not-available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n\nexport async function makeOnlineAgentsAvailable(agentIds: string[] | null = null) {\n\tconst results = await Users.findOnlineButNotAvailableAgents(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      filterBusinessHoursThatMustBeOpened: () => filterBusinessHoursThatMustBeOpened,\n      filterBusinessHoursThatMustBeOpenedByDay: () => filterBusinessHoursThatMustBeOpenedByDay,\n      openBusinessHourDefault: () => openBusinessHourDefault,\n      createDefaultBusinessHourIfNotExists: () => createDefaultBusinessHourIfNotExists,\n      makeAgentsUnavailableBasedOnBusinessHour: () => makeAgentsUnavailableBasedOnBusinessHour,\n      makeOnlineAgentsAvailable: () => makeOnlineAgentsAvailable\n    });\n    let ILivechatAgentStatus, LivechatBusinessHourTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      ILivechatAgentStatus(v) {\n        ILivechatAgentStatus = v;\n      },\n      LivechatBusinessHourTypes(v) {\n        LivechatBusinessHourTypes = v;\n      }\n    }, 0);\n    let LivechatBusinessHours, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatBusinessHours(v) {\n        LivechatBusinessHours = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 2);\n    let createDefaultBusinessHourRow;\n    module.link(\"./LivechatBusinessHours\", {\n      createDefaultBusinessHourRow(v) {\n        createDefaultBusinessHourRow = v;\n      }\n    }, 3);\n    let filterBusinessHoursThatMustBeOpened;\n    module.link(\"./filterBusinessHoursThatMustBeOpened\", {\n      filterBusinessHoursThatMustBeOpened(v) {\n        filterBusinessHoursThatMustBeOpened = v;\n      }\n    }, 4);\n    let notifyOnUserChangeAsync;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnUserChangeAsync(v) {\n        notifyOnUserChangeAsync = v;\n      }\n    }, 5);\n    let businessHourLogger;\n    module.link(\"../lib/logger\", {\n      businessHourLogger(v) {\n        businessHourLogger = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const filterBusinessHoursThatMustBeOpenedByDay = async (businessHours, day) => {\n      return filterBusinessHoursThatMustBeOpened(businessHours.filter(businessHour => businessHour.workHours.some(workHour => workHour.start.utc.dayOfWeek === day || workHour.finish.utc.dayOfWeek === day)));\n    };\n    const openBusinessHourDefault = async () => {\n      await Users.removeBusinessHoursFromAllUsers();\n      const currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n      const day = currentTime.format('dddd');\n      const activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n        projection: {\n          workHours: 1,\n          timezone: 1,\n          type: 1,\n          active: 1\n        }\n      });\n      const businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map(businessHour => businessHour._id);\n      businessHourLogger.debug({\n        msg: 'Opening default business hours',\n        businessHoursToOpenIds\n      });\n      await Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n      if (businessHoursToOpenIds.length) {\n        await makeOnlineAgentsAvailable();\n      }\n      await makeAgentsUnavailableBasedOnBusinessHour();\n    };\n    const createDefaultBusinessHourIfNotExists = async () => {\n      if ((await LivechatBusinessHours.col.countDocuments({\n        type: LivechatBusinessHourTypes.DEFAULT\n      })) === 0) {\n        await LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n      }\n    };\n    async function makeAgentsUnavailableBasedOnBusinessHour() {\n      let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      const results = await Users.findAgentsAvailableWithoutBusinessHours(agentIds).toArray();\n      const update = await Users.updateLivechatStatusByAgentIds(results.map(_ref => {\n        let {\n          _id\n        } = _ref;\n        return _id;\n      }), ILivechatAgentStatus.NOT_AVAILABLE);\n      if (update.modifiedCount === 0) {\n        return;\n      }\n      void notifyOnUserChangeAsync(async () => results.map(_ref2 => {\n        let {\n          _id,\n          openBusinessHours\n        } = _ref2;\n        return {\n          id: _id,\n          clientAction: 'updated',\n          diff: {\n            statusLivechat: 'not-available',\n            openBusinessHours\n          }\n        };\n      }));\n    }\n    async function makeOnlineAgentsAvailable() {\n      let agentIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      const results = await Users.findOnlineButNotAvailableAgents(agentIds).toArray();\n      const update = await Users.updateLivechatStatusByAgentIds(results.map(_ref3 => {\n        let {\n          _id\n        } = _ref3;\n        return _id;\n      }), ILivechatAgentStatus.AVAILABLE);\n      if (update.modifiedCount === 0) {\n        return;\n      }\n      void notifyOnUserChangeAsync(async () => results.map(_ref4 => {\n        let {\n          _id,\n          openBusinessHours\n        } = _ref4;\n        return {\n          id: _id,\n          clientAction: 'updated',\n          diff: {\n            statusLivechat: 'available',\n            openBusinessHours\n          }\n        };\n      }));\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","filterBusinessHoursThatMustBeOpened","filterBusinessHoursThatMustBeOpenedByDay","openBusinessHourDefault","createDefaultBusinessHourIfNotExists","makeAgentsUnavailableBasedOnBusinessHour","makeOnlineAgentsAvailable","ILivechatAgentStatus","LivechatBusinessHourTypes","link","v","LivechatBusinessHours","Users","moment","default","createDefaultBusinessHourRow","notifyOnUserChangeAsync","businessHourLogger","__reifyWaitForDeps__","businessHours","day","filter","businessHour","workHours","some","workHour","start","utc","dayOfWeek","finish","removeBusinessHoursFromAllUsers","currentTime","format","activeBusinessHours","findDefaultActiveAndOpenBusinessHoursByDay","projection","timezone","type","active","businessHoursToOpenIds","map","_id","debug","msg","openAgentsBusinessHoursByBusinessHourId","length","col","countDocuments","DEFAULT","insertOne","agentIds","arguments","undefined","results","findAgentsAvailableWithoutBusinessHours","toArray","update","updateLivechatStatusByAgentIds","_ref","NOT_AVAILABLE","modifiedCount","_ref2","openBusinessHours","id","clientAction","diff","statusLivechat","findOnlineButNotAvailableAgents","_ref3","AVAILABLE","_ref4","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/business-hour/Helper.ts"],"sourcesContent":["import type { ILivechatBusinessHour } from '@rocket.chat/core-typings';\nimport { ILivechatAgentStatus, LivechatBusinessHourTypes } from '@rocket.chat/core-typings';\nimport { LivechatBusinessHours, Users } from '@rocket.chat/models';\nimport moment from 'moment';\n\nimport { createDefaultBusinessHourRow } from './LivechatBusinessHours';\nimport { filterBusinessHoursThatMustBeOpened } from './filterBusinessHoursThatMustBeOpened';\nimport { notifyOnUserChangeAsync } from '../../../lib/server/lib/notifyListener';\nimport { businessHourLogger } from '../lib/logger';\n\nexport { filterBusinessHoursThatMustBeOpened };\n\nexport const filterBusinessHoursThatMustBeOpenedByDay = async (\n\tbusinessHours: ILivechatBusinessHour[],\n\tday: string, // Format: moment.format('dddd')\n): Promise<Pick<ILivechatBusinessHour, '_id' | 'type'>[]> => {\n\treturn filterBusinessHoursThatMustBeOpened(\n\t\tbusinessHours.filter((businessHour) =>\n\t\t\tbusinessHour.workHours.some((workHour) => workHour.start.utc.dayOfWeek === day || workHour.finish.utc.dayOfWeek === day),\n\t\t),\n\t);\n};\n\nexport const openBusinessHourDefault = async (): Promise<void> => {\n\tawait Users.removeBusinessHoursFromAllUsers();\n\tconst currentTime = moment(moment().format('dddd:HH:mm'), 'dddd:HH:mm');\n\tconst day = currentTime.format('dddd');\n\tconst activeBusinessHours = await LivechatBusinessHours.findDefaultActiveAndOpenBusinessHoursByDay(day, {\n\t\tprojection: {\n\t\t\tworkHours: 1,\n\t\t\ttimezone: 1,\n\t\t\ttype: 1,\n\t\t\tactive: 1,\n\t\t},\n\t});\n\n\tconst businessHoursToOpenIds = (await filterBusinessHoursThatMustBeOpened(activeBusinessHours)).map((businessHour) => businessHour._id);\n\tbusinessHourLogger.debug({ msg: 'Opening default business hours', businessHoursToOpenIds });\n\tawait Users.openAgentsBusinessHoursByBusinessHourId(businessHoursToOpenIds);\n\tif (businessHoursToOpenIds.length) {\n\t\tawait makeOnlineAgentsAvailable();\n\t}\n\tawait makeAgentsUnavailableBasedOnBusinessHour();\n};\n\nexport const createDefaultBusinessHourIfNotExists = async (): Promise<void> => {\n\tif ((await LivechatBusinessHours.col.countDocuments({ type: LivechatBusinessHourTypes.DEFAULT })) === 0) {\n\t\tawait LivechatBusinessHours.insertOne(createDefaultBusinessHourRow());\n\t}\n};\n\nexport async function makeAgentsUnavailableBasedOnBusinessHour(agentIds: string[] | null = null) {\n\tconst results = await Users.findAgentsAvailableWithoutBusinessHours(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.NOT_AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'not-available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n\nexport async function makeOnlineAgentsAvailable(agentIds: string[] | null = null) {\n\tconst results = await Users.findOnlineButNotAvailableAgents(agentIds).toArray();\n\n\tconst update = await Users.updateLivechatStatusByAgentIds(\n\t\tresults.map(({ _id }) => _id),\n\t\tILivechatAgentStatus.AVAILABLE,\n\t);\n\n\tif (update.modifiedCount === 0) {\n\t\treturn;\n\t}\n\n\tvoid notifyOnUserChangeAsync(async () =>\n\t\tresults.map(({ _id, openBusinessHours }) => {\n\t\t\treturn {\n\t\t\t\tid: _id,\n\t\t\t\tclientAction: 'updated',\n\t\t\t\tdiff: {\n\t\t\t\t\tstatusLivechat: 'available',\n\t\t\t\t\topenBusinessHours,\n\t\t\t\t},\n\t\t\t};\n\t\t}),\n\t);\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"693cc79ecfd79bd4e7ab91fb06dbd3ecb5e14d23"}
