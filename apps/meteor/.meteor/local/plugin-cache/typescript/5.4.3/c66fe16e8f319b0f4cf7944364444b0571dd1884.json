{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/methods/removeAllClosedRooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/methods/removeAllClosedRooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/methods/removeAllClosedRooms.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/methods/removeAllClosedRooms.ts","sourceRoot":"","sources":["app/livechat/server/methods/removeAllClosedRooms.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uDAAuD,CAAC;AAC3F,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAShD,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,+BAA+B,CAAC,aAAa;QAClD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,+BAA+B,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAE7B,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC,EAAE,CAAC;YAChF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,EAAE;gBAC1D,MAAM,EAAE,8BAA8B;aACtC,CAAC,CAAC;QACJ,CAAC;QAED,8EAA8E;QAC9E,MAAM,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAE,+BAA+B,CAAC,CAAC;QAEpE,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;QAC7E,MAAM,QAAQ,GAAoB,EAAE,CAAC;QACrC,MAAM,aAAa,CAAC,eAAe,CAAC,aAAa,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAoB,EAAE,EAAE;YACxG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAE,YAAY,QAAQ,CAAC,MAAM,eAAe,CAAC,CAAC;QAC/E,OAAO,QAAQ,CAAC,MAAM,CAAC;IACxB,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Livechat } from '../lib/LivechatTyped';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'livechat:removeAllClosedRooms'(departmentIds?: string[]): Promise<number>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'livechat:removeAllClosedRooms'(departmentIds) {\n\t\tconst logger = new Logger('livechat:removeAllClosedRooms');\n\t\tconst user = Meteor.userId();\n\n\t\tif (!user || !(await hasPermissionAsync(user, 'remove-closed-livechat-rooms'))) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\t\tmethod: 'livechat:removeAllClosedRoom',\n\t\t\t});\n\t\t}\n\n\t\t// These are not debug logs since we want to know when the action is performed\n\t\tlogger.info(`User ${Meteor.userId()} is removing all closed rooms`);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait LivechatRooms.findClosedRooms(departmentIds, {}, extraQuery).forEach(({ _id }: IOmnichannelRoom) => {\n\t\t\tpromises.push(Livechat.removeRoom(_id));\n\t\t});\n\t\tawait Promise.all(promises);\n\n\t\tlogger.info(`User ${Meteor.userId()} removed ${promises.length} closed rooms`);\n\t\treturn promises.length;\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/methods/removeAllClosedRooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/methods/removeAllClosedRooms.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/methods/removeAllClosedRooms.ts","sourceRoot":"","sources":["app/livechat/server/methods/removeAllClosedRooms.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,uDAAuD,CAAC;AAC3F,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAShD,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,+BAA+B,CAAC,aAAa;QAClD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,+BAA+B,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAE7B,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,MAAM,kBAAkB,CAAC,IAAI,EAAE,8BAA8B,CAAC,CAAC,EAAE,CAAC;YAChF,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,aAAa,EAAE;gBAC1D,MAAM,EAAE,8BAA8B;aACtC,CAAC,CAAC;QACJ,CAAC;QAED,8EAA8E;QAC9E,MAAM,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAE,+BAA+B,CAAC,CAAC;QAEpE,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,GAAG,CAAC,gCAAgC,EAAE,EAAE,CAAC,CAAC;QAC7E,MAAM,QAAQ,GAAoB,EAAE,CAAC;QACrC,MAAM,aAAa,CAAC,eAAe,CAAC,aAAa,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAoB,EAAE,EAAE;YACxG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE5B,MAAM,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC,MAAM,EAAE,YAAY,QAAQ,CAAC,MAAM,eAAe,CAAC,CAAC;QAC/E,OAAO,QAAQ,CAAC,MAAM,CAAC;IACxB,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Livechat } from '../lib/LivechatTyped';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'livechat:removeAllClosedRooms'(departmentIds?: string[]): Promise<number>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'livechat:removeAllClosedRooms'(departmentIds) {\n\t\tconst logger = new Logger('livechat:removeAllClosedRooms');\n\t\tconst user = Meteor.userId();\n\n\t\tif (!user || !(await hasPermissionAsync(user, 'remove-closed-livechat-rooms'))) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\t\tmethod: 'livechat:removeAllClosedRoom',\n\t\t\t});\n\t\t}\n\n\t\t// These are not debug logs since we want to know when the action is performed\n\t\tlogger.info(`User ${Meteor.userId()} is removing all closed rooms`);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait LivechatRooms.findClosedRooms(departmentIds, {}, extraQuery).forEach(({ _id }: IOmnichannelRoom) => {\n\t\t\tpromises.push(Livechat.removeRoom(_id));\n\t\t});\n\t\tawait Promise.all(promises);\n\n\t\tlogger.info(`User ${Meteor.userId()} removed ${promises.length} closed rooms`);\n\t\treturn promises.length;\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 0);\n    let LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 3);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 4);\n    let Livechat;\n    module.link(\"../lib/LivechatTyped\", {\n      Livechat(v) {\n        Livechat = v;\n      }\n    }, 5);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    Meteor.methods({\n      async 'livechat:removeAllClosedRooms'(departmentIds) {\n        const logger = new Logger('livechat:removeAllClosedRooms');\n        const user = Meteor.userId();\n        if (!user || !(await hasPermissionAsync(user, 'remove-closed-livechat-rooms'))) {\n          throw new Meteor.Error('error-not-allowed', 'Not allowed', {\n            method: 'livechat:removeAllClosedRoom'\n          });\n        }\n        // These are not debug logs since we want to know when the action is performed\n        logger.info(\"User \".concat(Meteor.userId(), \" is removing all closed rooms\"));\n        const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n        const promises = [];\n        await LivechatRooms.findClosedRooms(departmentIds, {}, extraQuery).forEach(_ref => {\n          let {\n            _id\n          } = _ref;\n          promises.push(Livechat.removeRoom(_id));\n        });\n        await Promise.all(promises);\n        logger.info(\"User \".concat(Meteor.userId(), \" removed \").concat(promises.length, \" closed rooms\"));\n        return promises.length;\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Logger","module","link","v","LivechatRooms","Meteor","callbacks","hasPermissionAsync","Livechat","__reifyWaitForDeps__","methods","livechat:removeAllClosedRooms","departmentIds","logger","user","userId","Error","method","info","concat","extraQuery","run","promises","findClosedRooms","forEach","_ref","_id","push","removeRoom","Promise","all","length","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/methods/removeAllClosedRooms.ts"],"sourcesContent":["import type { IOmnichannelRoom } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatRooms } from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { callbacks } from '../../../../lib/callbacks';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { Livechat } from '../lib/LivechatTyped';\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\t'livechat:removeAllClosedRooms'(departmentIds?: string[]): Promise<number>;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync 'livechat:removeAllClosedRooms'(departmentIds) {\n\t\tconst logger = new Logger('livechat:removeAllClosedRooms');\n\t\tconst user = Meteor.userId();\n\n\t\tif (!user || !(await hasPermissionAsync(user, 'remove-closed-livechat-rooms'))) {\n\t\t\tthrow new Meteor.Error('error-not-allowed', 'Not allowed', {\n\t\t\t\tmethod: 'livechat:removeAllClosedRoom',\n\t\t\t});\n\t\t}\n\n\t\t// These are not debug logs since we want to know when the action is performed\n\t\tlogger.info(`User ${Meteor.userId()} is removing all closed rooms`);\n\n\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\tconst promises: Promise<void>[] = [];\n\t\tawait LivechatRooms.findClosedRooms(departmentIds, {}, extraQuery).forEach(({ _id }: IOmnichannelRoom) => {\n\t\t\tpromises.push(Livechat.removeRoom(_id));\n\t\t});\n\t\tawait Promise.all(promises);\n\n\t\tlogger.info(`User ${Meteor.userId()} removed ${promises.length} closed rooms`);\n\t\treturn promises.length;\n\t},\n});\n"],"mappings":";;;IAEA,IAAAA,MAAS;IAAAC,MAAQ,CAAAC,IAAA,CAAM,qBAAqB,EAAC;MAAAF,OAAAG,CAAA;QAAAH,MAAA,GAAAG,CAAA;MAAA;IAAA;IAAA,IAAAC,aAAA;IAAAH,MAAA,CAAAC,IAAA;MAAAE,cAAAD,CAAA;QAAAC,aAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,MAAA;IAAAJ,MAAA,CAAAC,IAAA;MAAAG,OAAAF,CAAA;QAAAE,MAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,SAAA;IAAAL,MAAA,CAAAC,IAAA;MAAAI,UAAAH,CAAA;QAAAG,SAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,kBAAA;IAAAN,MAAA,CAAAC,IAAA;MAAAK,mBAAAJ,CAAA;QAAAI,kBAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,QAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,SAAAL,CAAA;QAAAK,QAAA,GAAAL,CAAA;MAAA;IAAA;IAAA,IAAAM,oBAAA,WAAAA,oBAAA;IAe7CJ,MAAM,CAACK,OAAO,CAAgB;MAC7B,MAAM,+BAA+BC,CAACC,aAAa;QAClD,MAAMC,MAAM,GAAG,IAAIb,MAAM,CAAC,+BAA+B,CAAC;QAC1D,MAAMc,IAAI,GAAGT,MAAM,CAACU,MAAM,EAAE;QAE5B,IAAI,CAACD,IAAI,IAAI,EAAE,MAAMP,kBAAkB,CAACO,IAAI,EAAE,8BAA8B,CAAC,CAAC,EAAE;UAC/E,MAAM,IAAIT,MAAM,CAACW,KAAK,CAAC,mBAAmB,EAAE,aAAa,EAAE;YAC1DC,MAAM,EAAE;WACR,CAAC;QACH;QAEA;QACAJ,MAAM,CAACK,IAAI,SAAAC,MAAA,CAASd,MAAM,CAACU,MAAM,EAAE,kCAA+B,CAAC;QAEnE,MAAMK,UAAU,GAAG,MAAMd,SAAS,CAACe,GAAG,CAAC,gCAAgC,EAAE,EAAE,CAAC;QAC5E,MAAMC,QAAQ,GAAoB,EAAE;QACpC,MAAMlB,aAAa,CAACmB,eAAe,CAACX,aAAa,EAAE,EAAE,EAAEQ,UAAU,CAAC,CAACI,OAAO,CAACC,IAAA,IAA8B;UAAA,IAA7B;YAAEC;UAAG,CAAoB,GAAAD,IAAA;UACpGH,QAAQ,CAACK,IAAI,CAACnB,QAAQ,CAACoB,UAAU,CAACF,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,MAAMG,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;QAE3BT,MAAM,CAACK,IAAI,SAAAC,MAAA,CAASd,MAAM,CAACU,MAAM,EAAE,eAAAI,MAAA,CAAYG,QAAQ,CAACS,MAAM,kBAAe,CAAC;QAC9E,OAAOT,QAAQ,CAACS,MAAM;MACvB;KACA,CAAC;IAACC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"c66fe16e8f319b0f4cf7944364444b0571dd1884"}
