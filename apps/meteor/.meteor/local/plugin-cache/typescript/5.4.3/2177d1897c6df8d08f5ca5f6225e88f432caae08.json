{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/service.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/voip-asterisk/service.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/service.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/service.ts","sourceRoot":"","sources":["server/services/voip-asterisk/service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IVoipService } from '@rocket.chat/core-services';\nimport { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { ServerType, isICallServerConfigData, isIExtensionDetails } from '@rocket.chat/core-typings';\nimport type {\n\tIVoipConnectorResult,\n\tIQueueDetails,\n\tIQueueSummary,\n\tIManagementServerConnectionStatus,\n\tIVoipCallServerConfig,\n\tIVoipManagementServerConfig,\n\tIQueueMembershipDetails,\n\tIQueueMembershipSubscription,\n\tIRegistrationInfo,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport mem from 'memoize';\nimport type { Db } from 'mongodb';\n\nimport { CommandType } from './connector/asterisk/Command';\nimport { CommandHandler } from './connector/asterisk/CommandHandler';\nimport { Commands } from './connector/asterisk/Commands';\nimport { getServerConfigDataFromSettings, voipEnabled } from './lib/Helper';\n\nexport class VoipAsteriskService extends ServiceClassInternal implements IVoipService {\n\tprotected name = 'voip-asterisk';\n\n\tprivate logger: Logger;\n\n\tcommandHandler: CommandHandler;\n\n\tprivate active = false;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.logger = new Logger('VoIPAsteriskService');\n\t\tthis.commandHandler = new CommandHandler(db);\n\t\tif (!voipEnabled()) {\n\t\t\tthis.logger.warn({ msg: 'Voip is not enabled. Cant start the service' });\n\t\t\treturn;\n\t\t}\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tvoid this.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP Asterisk service');\n\t\tif (this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already started' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.commandHandler.initConnection(CommandType.AMI);\n\t\t\tthis.active = true;\n\t\t\tvoid api.broadcast('connector.statuschanged', true);\n\t\t\tthis.logger.info('VoIP Asterisk service started');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error initializing VOIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis.logger.info('Stopping VoIP Asterisk service');\n\t\tif (!this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already stopped' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.commandHandler.stop();\n\t\t\tthis.active = false;\n\t\t\tvoid api.broadcast('connector.statuschanged', false);\n\t\t\tthis.logger.info('VoIP Asterisk service stopped');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error stopping VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.logger.info('Restarting VoIP Asterisk service due to settings changes');\n\t\ttry {\n\t\t\t// Disable voip service\n\t\t\tawait this.stop();\n\t\t\t// To then restart it\n\t\t\tawait this.init();\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error refreshing VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tgetServerConfigData(type: ServerType): IVoipCallServerConfig | IVoipManagementServerConfig {\n\t\treturn getServerConfigDataFromSettings(type);\n\t}\n\n\tasync getQueueSummary(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.queue_summary);\n\t}\n\n\tprivate cachedQueueSummary(): () => Promise<IVoipConnectorResult> {\n\t\t// arbitrary 5 secs cache to prevent fetching this from asterisk too often\n\t\treturn mem(this.getQueueSummary.bind(this), { maxAge: 5000 });\n\t}\n\n\tcachedQueueDetails(): () => Promise<{ name: string; members: string[] }[]> {\n\t\treturn mem(this.getQueueDetails.bind(this), { maxAge: 5000 });\n\t}\n\n\tprivate async getQueueDetails(): Promise<{ name: string; members: string[] }[]> {\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tfor await (const queue of queues) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue,\n\t\t\t})) as IVoipConnectorResult;\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqueueInfo.push({\n\t\t\t\tname: queue,\n\t\t\t\tmembers: (queueDetails.result as IQueueDetails).members.map((member) => member.name.replace('PJSIP/', '')),\n\t\t\t});\n\t\t}\n\n\t\treturn queueInfo;\n\t}\n\n\tasync getQueuedCallsForThisExtension({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipDetails = {\n\t\t\tqueueCount: 0,\n\t\t\tcallWaitingCount: 0,\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmembershipDetails.callWaitingCount += Number(details.calls);\n\t\t\tmembershipDetails.queueCount++;\n\t\t}\n\n\t\treturn { result: membershipDetails };\n\t}\n\n\tasync getQueueMembership({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipSubscription = {\n\t\t\tqueues: [],\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmembershipDetails.queues.push(queue);\n\t\t}\n\t\treturn { result: membershipDetails };\n\t}\n\n\tgetConnectorVersion(): string {\n\t\treturn this.commandHandler.getVersion();\n\t}\n\n\tasync getExtensionList(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_list, undefined);\n\t}\n\n\tasync getExtensionDetails(requestParams: { extension: string }): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\t}\n\n\tasync getRegistrationInfo(requestParams: { extension: string }): Promise<{ result: IRegistrationInfo }> {\n\t\tconst config = this.getServerConfigData(ServerType.CALL_SERVER);\n\t\tif (!config) {\n\t\t\tthis.logger.warn({ msg: 'API = connector.extension.getRegistrationInfo callserver settings not found' });\n\t\t\tthis.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n\t\t\tthrow new Error('Not found');\n\t\t}\n\n\t\tconst endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\n\t\tif (!isIExtensionDetails(endpointDetails.result)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid endpointDetails response');\n\t\t}\n\t\tif (!isICallServerConfigData(config.configData)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid configData response');\n\t\t}\n\n\t\tconst result = {\n\t\t\tcallServerConfig: config.configData,\n\t\t\textensionDetails: endpointDetails.result,\n\t\t};\n\n\t\treturn {\n\t\t\tresult,\n\t\t};\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking management server connection');\n\t\treturn this.commandHandler.checkManagementConnection(host, port, userName, password);\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking call server connection');\n\t\treturn this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/voip-asterisk/service.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/voip-asterisk/service.ts","inputSourceMap":{"version":3,"file":"server/services/voip-asterisk/service.ts","sourceRoot":"","sources":["server/services/voip-asterisk/service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AACvE,OAAO,EAAE,UAAU,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAYrG,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,GAAG,MAAM,SAAS,CAAC;AAG1B,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,cAAc,EAAE,MAAM,qCAAqC,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AACzD,OAAO,EAAE,+BAA+B,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE5E,MAAM,OAAO,mBAAoB,SAAQ,oBAAoB;IAClD,IAAI,GAAG,eAAe,CAAC;IAEzB,MAAM,CAAS;IAEvB,cAAc,CAAiB;IAEvB,MAAM,GAAG,KAAK,CAAC;IAEvB,YAAY,EAAM;QACjB,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,6CAA6C,EAAE,CAAC,CAAC;YACzE,OAAO;QACR,CAAC;QACD,2CAA2C;QAC3C,oDAAoD;QACpD,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,IAAI;QACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QACnD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,uCAAuC,EAAE,CAAC,CAAC;YACnE,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,KAAK,GAAG,CAAC,SAAS,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,0CAA0C,EAAE,GAAG,EAAE,CAAC,CAAC;QAC7E,CAAC;IACF,CAAC;IAED,KAAK,CAAC,IAAI;QACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,uCAAuC,EAAE,CAAC,CAAC;YACnE,OAAO;QACR,CAAC;QAED,IAAI,CAAC;YACJ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,KAAK,GAAG,CAAC,SAAS,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QACnD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,sCAAsC,EAAE,GAAG,EAAE,CAAC,CAAC;QACzE,CAAC;IACF,CAAC;IAED,KAAK,CAAC,OAAO;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QAC7E,IAAI,CAAC;YACJ,uBAAuB;YACvB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,qBAAqB;YACrB,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,wCAAwC,EAAE,GAAG,EAAE,CAAC,CAAC;QAC3E,CAAC;IACF,CAAC;IAED,mBAAmB,CAAC,IAAgB;QACnC,OAAO,+BAA+B,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,eAAe;QACpB,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACnE,CAAC;IAEO,kBAAkB;QACzB,0EAA0E;QAC1E,OAAO,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,kBAAkB;QACjB,OAAO,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEO,KAAK,CAAC,eAAe;QAC5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,EAAE,CAAC;QAClD,MAAM,MAAM,GAAI,OAAO,CAAC,MAAqC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEjF,MAAM,SAAS,GAA0C,EAAE,CAAC;QAC5D,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAClC,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,EAAE;gBACtF,SAAS,EAAE,KAAK;aAChB,CAAC,CAAyB,CAAC;YAC5B,MAAM,OAAO,GAAG,YAAY,CAAC,MAAuB,CAAC;YACrD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;gBAC9B,kDAAkD;gBAClD,YAAY;gBACZ,SAAS;YACV,CAAC;YACD,SAAS,CAAC,IAAI,CAAC;gBACd,IAAI,EAAE,KAAK;gBACX,OAAO,EAAG,YAAY,CAAC,MAAwB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aAC1G,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,EAAE,SAAS,EAAyB;QACxE,MAAM,iBAAiB,GAA4B;YAClD,UAAU,EAAE,CAAC;YACb,gBAAgB,EAAE,CAAC;YACnB,SAAS;SACT,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAyB,CAAC;QAEhH,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,YAAY,CAAC,MAAyB,EAAE,CAAC;YAClE,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,EAAE;gBACtF,SAAS,EAAE,KAAK,CAAC,IAAI;aACrB,CAAC,CAAyB,CAAC;YAE5B,MAAM,OAAO,GAAG,YAAY,CAAC,MAAuB,CAAC;YAErD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBAC7B,kDAAkD;gBAClD,YAAY;gBACZ,SAAS;YACV,CAAC;YAED,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,SAAS,EAAE,CAAC;gBAChB,0DAA0D;gBAC1D,4BAA4B;gBAC5B,SAAS;YACV,CAAC;YAED,iBAAiB,CAAC,gBAAgB,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5D,iBAAiB,CAAC,UAAU,EAAE,CAAC;QAChC,CAAC;QAED,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,EAAE,SAAS,EAAyB;QAC5D,MAAM,iBAAiB,GAAiC;YACvD,MAAM,EAAE,EAAE;YACV,SAAS;SACT,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAyB,CAAC;QAEhH,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,YAAY,CAAC,MAAyB,EAAE,CAAC;YAClE,MAAM,YAAY,GAAG,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,EAAE;gBACtF,SAAS,EAAE,KAAK,CAAC,IAAI;aACrB,CAAC,CAAyB,CAAC;YAE5B,MAAM,OAAO,GAAG,YAAY,CAAC,MAAuB,CAAC;YAErD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC;gBAC9B,kDAAkD;gBAClD,YAAY;gBACZ,SAAS;YACV,CAAC;YACD,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,SAAS,EAAE,CAAC;gBAChB,0DAA0D;gBAC1D,4BAA4B;gBAC5B,SAAS;YACV,CAAC;YACD,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC;QACD,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC;IACtC,CAAC;IAED,mBAAmB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,gBAAgB;QACrB,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IAC/E,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,aAAoC;QAC7D,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,aAAoC;QAC7D,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,6EAA6E,EAAE,CAAC,CAAC;YACzG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kGAAkG,CAAC,CAAC;YACrH,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;QAC9B,CAAC;QAED,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAEzG,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;YAClD,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;QACzE,CAAC;QACD,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,MAAM,GAAG;YACd,gBAAgB,EAAE,MAAM,CAAC,UAAU;YACnC,gBAAgB,EAAE,eAAe,CAAC,MAAM;SACxC,CAAC;QAEF,OAAO;YACN,MAAM;SACN,CAAC;IACH,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC9B,IAAY,EACZ,IAAY,EACZ,QAAgB,EAChB,QAAgB;QAEhB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,OAAO,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACtF,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,YAAoB,EAAE,QAAiB;QACtE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAC9E,CAAC;CACD","sourcesContent":["import type { IVoipService } from '@rocket.chat/core-services';\nimport { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { ServerType, isICallServerConfigData, isIExtensionDetails } from '@rocket.chat/core-typings';\nimport type {\n\tIVoipConnectorResult,\n\tIQueueDetails,\n\tIQueueSummary,\n\tIManagementServerConnectionStatus,\n\tIVoipCallServerConfig,\n\tIVoipManagementServerConfig,\n\tIQueueMembershipDetails,\n\tIQueueMembershipSubscription,\n\tIRegistrationInfo,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport mem from 'memoize';\nimport type { Db } from 'mongodb';\n\nimport { CommandType } from './connector/asterisk/Command';\nimport { CommandHandler } from './connector/asterisk/CommandHandler';\nimport { Commands } from './connector/asterisk/Commands';\nimport { getServerConfigDataFromSettings, voipEnabled } from './lib/Helper';\n\nexport class VoipAsteriskService extends ServiceClassInternal implements IVoipService {\n\tprotected name = 'voip-asterisk';\n\n\tprivate logger: Logger;\n\n\tcommandHandler: CommandHandler;\n\n\tprivate active = false;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.logger = new Logger('VoIPAsteriskService');\n\t\tthis.commandHandler = new CommandHandler(db);\n\t\tif (!voipEnabled()) {\n\t\t\tthis.logger.warn({ msg: 'Voip is not enabled. Cant start the service' });\n\t\t\treturn;\n\t\t}\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tvoid this.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP Asterisk service');\n\t\tif (this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already started' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.commandHandler.initConnection(CommandType.AMI);\n\t\t\tthis.active = true;\n\t\t\tvoid api.broadcast('connector.statuschanged', true);\n\t\t\tthis.logger.info('VoIP Asterisk service started');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error initializing VOIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis.logger.info('Stopping VoIP Asterisk service');\n\t\tif (!this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already stopped' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.commandHandler.stop();\n\t\t\tthis.active = false;\n\t\t\tvoid api.broadcast('connector.statuschanged', false);\n\t\t\tthis.logger.info('VoIP Asterisk service stopped');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error stopping VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.logger.info('Restarting VoIP Asterisk service due to settings changes');\n\t\ttry {\n\t\t\t// Disable voip service\n\t\t\tawait this.stop();\n\t\t\t// To then restart it\n\t\t\tawait this.init();\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error refreshing VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tgetServerConfigData(type: ServerType): IVoipCallServerConfig | IVoipManagementServerConfig {\n\t\treturn getServerConfigDataFromSettings(type);\n\t}\n\n\tasync getQueueSummary(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.queue_summary);\n\t}\n\n\tprivate cachedQueueSummary(): () => Promise<IVoipConnectorResult> {\n\t\t// arbitrary 5 secs cache to prevent fetching this from asterisk too often\n\t\treturn mem(this.getQueueSummary.bind(this), { maxAge: 5000 });\n\t}\n\n\tcachedQueueDetails(): () => Promise<{ name: string; members: string[] }[]> {\n\t\treturn mem(this.getQueueDetails.bind(this), { maxAge: 5000 });\n\t}\n\n\tprivate async getQueueDetails(): Promise<{ name: string; members: string[] }[]> {\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tfor await (const queue of queues) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue,\n\t\t\t})) as IVoipConnectorResult;\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqueueInfo.push({\n\t\t\t\tname: queue,\n\t\t\t\tmembers: (queueDetails.result as IQueueDetails).members.map((member) => member.name.replace('PJSIP/', '')),\n\t\t\t});\n\t\t}\n\n\t\treturn queueInfo;\n\t}\n\n\tasync getQueuedCallsForThisExtension({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipDetails = {\n\t\t\tqueueCount: 0,\n\t\t\tcallWaitingCount: 0,\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmembershipDetails.callWaitingCount += Number(details.calls);\n\t\t\tmembershipDetails.queueCount++;\n\t\t}\n\n\t\treturn { result: membershipDetails };\n\t}\n\n\tasync getQueueMembership({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipSubscription = {\n\t\t\tqueues: [],\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmembershipDetails.queues.push(queue);\n\t\t}\n\t\treturn { result: membershipDetails };\n\t}\n\n\tgetConnectorVersion(): string {\n\t\treturn this.commandHandler.getVersion();\n\t}\n\n\tasync getExtensionList(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_list, undefined);\n\t}\n\n\tasync getExtensionDetails(requestParams: { extension: string }): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\t}\n\n\tasync getRegistrationInfo(requestParams: { extension: string }): Promise<{ result: IRegistrationInfo }> {\n\t\tconst config = this.getServerConfigData(ServerType.CALL_SERVER);\n\t\tif (!config) {\n\t\t\tthis.logger.warn({ msg: 'API = connector.extension.getRegistrationInfo callserver settings not found' });\n\t\t\tthis.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n\t\t\tthrow new Error('Not found');\n\t\t}\n\n\t\tconst endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\n\t\tif (!isIExtensionDetails(endpointDetails.result)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid endpointDetails response');\n\t\t}\n\t\tif (!isICallServerConfigData(config.configData)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid configData response');\n\t\t}\n\n\t\tconst result = {\n\t\t\tcallServerConfig: config.configData,\n\t\t\textensionDetails: endpointDetails.result,\n\t\t};\n\n\t\treturn {\n\t\t\tresult,\n\t\t};\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking management server connection');\n\t\treturn this.commandHandler.checkManagementConnection(host, port, userName, password);\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking call server connection');\n\t\treturn this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      VoipAsteriskService: () => VoipAsteriskService\n    });\n    let api, ServiceClassInternal;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      },\n      ServiceClassInternal(v) {\n        ServiceClassInternal = v;\n      }\n    }, 0);\n    let ServerType, isICallServerConfigData, isIExtensionDetails;\n    module.link(\"@rocket.chat/core-typings\", {\n      ServerType(v) {\n        ServerType = v;\n      },\n      isICallServerConfigData(v) {\n        isICallServerConfigData = v;\n      },\n      isIExtensionDetails(v) {\n        isIExtensionDetails = v;\n      }\n    }, 1);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 2);\n    let mem;\n    module.link(\"memoize\", {\n      default(v) {\n        mem = v;\n      }\n    }, 3);\n    let CommandType;\n    module.link(\"./connector/asterisk/Command\", {\n      CommandType(v) {\n        CommandType = v;\n      }\n    }, 4);\n    let CommandHandler;\n    module.link(\"./connector/asterisk/CommandHandler\", {\n      CommandHandler(v) {\n        CommandHandler = v;\n      }\n    }, 5);\n    let Commands;\n    module.link(\"./connector/asterisk/Commands\", {\n      Commands(v) {\n        Commands = v;\n      }\n    }, 6);\n    let getServerConfigDataFromSettings, voipEnabled;\n    module.link(\"./lib/Helper\", {\n      getServerConfigDataFromSettings(v) {\n        getServerConfigDataFromSettings = v;\n      },\n      voipEnabled(v) {\n        voipEnabled = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class VoipAsteriskService extends ServiceClassInternal {\n      constructor(db) {\n        super();\n        this.name = 'voip-asterisk';\n        this.logger = void 0;\n        this.commandHandler = void 0;\n        this.active = false;\n        this.logger = new Logger('VoIPAsteriskService');\n        this.commandHandler = new CommandHandler(db);\n        if (!voipEnabled()) {\n          this.logger.warn({\n            msg: 'Voip is not enabled. Cant start the service'\n          });\n          return;\n        }\n        // Init from constructor if we already have\n        // voip enabled by default while starting the server\n        void this.init();\n      }\n      async init() {\n        this.logger.info('Starting VoIP Asterisk service');\n        if (this.active) {\n          this.logger.warn({\n            msg: 'VoIP Asterisk service already started'\n          });\n          return;\n        }\n        try {\n          await this.commandHandler.initConnection(CommandType.AMI);\n          this.active = true;\n          void api.broadcast('connector.statuschanged', true);\n          this.logger.info('VoIP Asterisk service started');\n        } catch (err) {\n          this.logger.error({\n            msg: 'Error initializing VOIP Asterisk service',\n            err\n          });\n        }\n      }\n      async stop() {\n        this.logger.info('Stopping VoIP Asterisk service');\n        if (!this.active) {\n          this.logger.warn({\n            msg: 'VoIP Asterisk service already stopped'\n          });\n          return;\n        }\n        try {\n          this.commandHandler.stop();\n          this.active = false;\n          void api.broadcast('connector.statuschanged', false);\n          this.logger.info('VoIP Asterisk service stopped');\n        } catch (err) {\n          this.logger.error({\n            msg: 'Error stopping VoIP Asterisk service',\n            err\n          });\n        }\n      }\n      async refresh() {\n        this.logger.info('Restarting VoIP Asterisk service due to settings changes');\n        try {\n          // Disable voip service\n          await this.stop();\n          // To then restart it\n          await this.init();\n        } catch (err) {\n          this.logger.error({\n            msg: 'Error refreshing VoIP Asterisk service',\n            err\n          });\n        }\n      }\n      getServerConfigData(type) {\n        return getServerConfigDataFromSettings(type);\n      }\n      async getQueueSummary() {\n        return this.commandHandler.executeCommand(Commands.queue_summary);\n      }\n      cachedQueueSummary() {\n        // arbitrary 5 secs cache to prevent fetching this from asterisk too often\n        return mem(this.getQueueSummary.bind(this), {\n          maxAge: 5000\n        });\n      }\n      cachedQueueDetails() {\n        return mem(this.getQueueDetails.bind(this), {\n          maxAge: 5000\n        });\n      }\n      async getQueueDetails() {\n        const summary = await this.cachedQueueSummary()();\n        const queues = summary.result.map(q => q.name);\n        const queueInfo = [];\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n          for (var _iterator = _asyncIterator(queues), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n            const queue = _step.value;\n            {\n              var _details$members;\n              const queueDetails = await this.commandHandler.executeCommand(Commands.queue_details, {\n                queueName: queue\n              });\n              const details = queueDetails.result;\n              if (!((_details$members = details.members) !== null && _details$members !== void 0 && _details$members.length)) {\n                // Go to the next queue if queue does not have any\n                // memmbers.\n                continue;\n              }\n              queueInfo.push({\n                name: queue,\n                members: queueDetails.result.members.map(member => member.name.replace('PJSIP/', ''))\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) {\n              await _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n        return queueInfo;\n      }\n      async getQueuedCallsForThisExtension(_ref) {\n        let {\n          extension\n        } = _ref;\n        const membershipDetails = {\n          queueCount: 0,\n          callWaitingCount: 0,\n          extension\n        };\n        const queueSummary = await this.commandHandler.executeCommand(Commands.queue_summary);\n        var _iteratorAbruptCompletion2 = false;\n        var _didIteratorError2 = false;\n        var _iteratorError2;\n        try {\n          for (var _iterator2 = _asyncIterator(queueSummary.result), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n            const queue = _step2.value;\n            {\n              const queueDetails = await this.commandHandler.executeCommand(Commands.queue_details, {\n                queueName: queue.name\n              });\n              const details = queueDetails.result;\n              if (!details.members.length) {\n                // Go to the next queue if queue does not have any\n                // memmbers.\n                continue;\n              }\n              const isAMember = details.members.some(element => element.name.endsWith(extension));\n              if (!isAMember) {\n                // Current extension is not a member of queue in question.\n                // continue with next queue.\n                continue;\n              }\n              membershipDetails.callWaitingCount += Number(details.calls);\n              membershipDetails.queueCount++;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n              await _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n        return {\n          result: membershipDetails\n        };\n      }\n      async getQueueMembership(_ref2) {\n        let {\n          extension\n        } = _ref2;\n        const membershipDetails = {\n          queues: [],\n          extension\n        };\n        const queueSummary = await this.commandHandler.executeCommand(Commands.queue_summary);\n        var _iteratorAbruptCompletion3 = false;\n        var _didIteratorError3 = false;\n        var _iteratorError3;\n        try {\n          for (var _iterator3 = _asyncIterator(queueSummary.result), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n            const queue = _step3.value;\n            {\n              var _details$members2;\n              const queueDetails = await this.commandHandler.executeCommand(Commands.queue_details, {\n                queueName: queue.name\n              });\n              const details = queueDetails.result;\n              if (!((_details$members2 = details.members) !== null && _details$members2 !== void 0 && _details$members2.length)) {\n                // Go to the next queue if queue does not have any\n                // memmbers.\n                continue;\n              }\n              const isAMember = details.members.some(element => element.name.endsWith(extension));\n              if (!isAMember) {\n                // Current extension is not a member of queue in question.\n                // continue with next queue.\n                continue;\n              }\n              membershipDetails.queues.push(queue);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n              await _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n        return {\n          result: membershipDetails\n        };\n      }\n      getConnectorVersion() {\n        return this.commandHandler.getVersion();\n      }\n      async getExtensionList() {\n        return this.commandHandler.executeCommand(Commands.extension_list, undefined);\n      }\n      async getExtensionDetails(requestParams) {\n        return this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n      }\n      async getRegistrationInfo(requestParams) {\n        const config = this.getServerConfigData(ServerType.CALL_SERVER);\n        if (!config) {\n          this.logger.warn({\n            msg: 'API = connector.extension.getRegistrationInfo callserver settings not found'\n          });\n          this.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n          throw new Error('Not found');\n        }\n        const endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n        if (!isIExtensionDetails(endpointDetails.result)) {\n          throw new Error('getRegistrationInfo Invalid endpointDetails response');\n        }\n        if (!isICallServerConfigData(config.configData)) {\n          throw new Error('getRegistrationInfo Invalid configData response');\n        }\n        const result = {\n          callServerConfig: config.configData,\n          extensionDetails: endpointDetails.result\n        };\n        return {\n          result\n        };\n      }\n      async checkManagementConnection(host, port, userName, password) {\n        this.logger.debug('Checking management server connection');\n        return this.commandHandler.checkManagementConnection(host, port, userName, password);\n      }\n      async checkCallserverConnection(websocketUrl, protocol) {\n        this.logger.debug('Checking call server connection');\n        return this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","VoipAsteriskService","api","ServiceClassInternal","ServerType","isICallServerConfigData","isIExtensionDetails","Logger","mem","CommandType","CommandHandler","Commands","getServerConfigDataFromSettings","voipEnabled","__reifyWaitForDeps__","constructor","db","name","logger","commandHandler","active","warn","msg","init","info","initConnection","AMI","broadcast","err","error","stop","refresh","getServerConfigData","type","getQueueSummary","executeCommand","queue_summary","cachedQueueSummary","bind","maxAge","cachedQueueDetails","getQueueDetails","summary","queues","result","map","q","queueInfo","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","queue","value","_details$members","queueDetails","queue_details","queueName","details","members","length","push","member","replace","return","getQueuedCallsForThisExtension","_ref","extension","membershipDetails","queueCount","callWaitingCount","queueSummary","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","isAMember","some","element","endsWith","Number","calls","getQueueMembership","_ref2","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_details$members2","getConnectorVersion","getVersion","getExtensionList","extension_list","undefined","getExtensionDetails","requestParams","extension_info","getRegistrationInfo","config","CALL_SERVER","Error","endpointDetails","configData","callServerConfig","extensionDetails","checkManagementConnection","host","port","userName","password","debug","checkCallserverConnection","websocketUrl","protocol","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/voip-asterisk/service.ts"],"sourcesContent":["import type { IVoipService } from '@rocket.chat/core-services';\nimport { api, ServiceClassInternal } from '@rocket.chat/core-services';\nimport { ServerType, isICallServerConfigData, isIExtensionDetails } from '@rocket.chat/core-typings';\nimport type {\n\tIVoipConnectorResult,\n\tIQueueDetails,\n\tIQueueSummary,\n\tIManagementServerConnectionStatus,\n\tIVoipCallServerConfig,\n\tIVoipManagementServerConfig,\n\tIQueueMembershipDetails,\n\tIQueueMembershipSubscription,\n\tIRegistrationInfo,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport mem from 'memoize';\nimport type { Db } from 'mongodb';\n\nimport { CommandType } from './connector/asterisk/Command';\nimport { CommandHandler } from './connector/asterisk/CommandHandler';\nimport { Commands } from './connector/asterisk/Commands';\nimport { getServerConfigDataFromSettings, voipEnabled } from './lib/Helper';\n\nexport class VoipAsteriskService extends ServiceClassInternal implements IVoipService {\n\tprotected name = 'voip-asterisk';\n\n\tprivate logger: Logger;\n\n\tcommandHandler: CommandHandler;\n\n\tprivate active = false;\n\n\tconstructor(db: Db) {\n\t\tsuper();\n\n\t\tthis.logger = new Logger('VoIPAsteriskService');\n\t\tthis.commandHandler = new CommandHandler(db);\n\t\tif (!voipEnabled()) {\n\t\t\tthis.logger.warn({ msg: 'Voip is not enabled. Cant start the service' });\n\t\t\treturn;\n\t\t}\n\t\t// Init from constructor if we already have\n\t\t// voip enabled by default while starting the server\n\t\tvoid this.init();\n\t}\n\n\tasync init(): Promise<void> {\n\t\tthis.logger.info('Starting VoIP Asterisk service');\n\t\tif (this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already started' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.commandHandler.initConnection(CommandType.AMI);\n\t\t\tthis.active = true;\n\t\t\tvoid api.broadcast('connector.statuschanged', true);\n\t\t\tthis.logger.info('VoIP Asterisk service started');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error initializing VOIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis.logger.info('Stopping VoIP Asterisk service');\n\t\tif (!this.active) {\n\t\t\tthis.logger.warn({ msg: 'VoIP Asterisk service already stopped' });\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.commandHandler.stop();\n\t\t\tthis.active = false;\n\t\t\tvoid api.broadcast('connector.statuschanged', false);\n\t\t\tthis.logger.info('VoIP Asterisk service stopped');\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error stopping VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tasync refresh(): Promise<void> {\n\t\tthis.logger.info('Restarting VoIP Asterisk service due to settings changes');\n\t\ttry {\n\t\t\t// Disable voip service\n\t\t\tawait this.stop();\n\t\t\t// To then restart it\n\t\t\tawait this.init();\n\t\t} catch (err) {\n\t\t\tthis.logger.error({ msg: 'Error refreshing VoIP Asterisk service', err });\n\t\t}\n\t}\n\n\tgetServerConfigData(type: ServerType): IVoipCallServerConfig | IVoipManagementServerConfig {\n\t\treturn getServerConfigDataFromSettings(type);\n\t}\n\n\tasync getQueueSummary(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.queue_summary);\n\t}\n\n\tprivate cachedQueueSummary(): () => Promise<IVoipConnectorResult> {\n\t\t// arbitrary 5 secs cache to prevent fetching this from asterisk too often\n\t\treturn mem(this.getQueueSummary.bind(this), { maxAge: 5000 });\n\t}\n\n\tcachedQueueDetails(): () => Promise<{ name: string; members: string[] }[]> {\n\t\treturn mem(this.getQueueDetails.bind(this), { maxAge: 5000 });\n\t}\n\n\tprivate async getQueueDetails(): Promise<{ name: string; members: string[] }[]> {\n\t\tconst summary = await this.cachedQueueSummary()();\n\t\tconst queues = (summary.result as unknown as IQueueSummary[]).map((q) => q.name);\n\n\t\tconst queueInfo: { name: string; members: string[] }[] = [];\n\t\tfor await (const queue of queues) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue,\n\t\t\t})) as IVoipConnectorResult;\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tqueueInfo.push({\n\t\t\t\tname: queue,\n\t\t\t\tmembers: (queueDetails.result as IQueueDetails).members.map((member) => member.name.replace('PJSIP/', '')),\n\t\t\t});\n\t\t}\n\n\t\treturn queueInfo;\n\t}\n\n\tasync getQueuedCallsForThisExtension({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipDetails = {\n\t\t\tqueueCount: 0,\n\t\t\tcallWaitingCount: 0,\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmembershipDetails.callWaitingCount += Number(details.calls);\n\t\t\tmembershipDetails.queueCount++;\n\t\t}\n\n\t\treturn { result: membershipDetails };\n\t}\n\n\tasync getQueueMembership({ extension }: { extension: string }): Promise<IVoipConnectorResult> {\n\t\tconst membershipDetails: IQueueMembershipSubscription = {\n\t\t\tqueues: [],\n\t\t\textension,\n\t\t};\n\t\tconst queueSummary = (await this.commandHandler.executeCommand(Commands.queue_summary)) as IVoipConnectorResult;\n\n\t\tfor await (const queue of queueSummary.result as IQueueSummary[]) {\n\t\t\tconst queueDetails = (await this.commandHandler.executeCommand(Commands.queue_details, {\n\t\t\t\tqueueName: queue.name,\n\t\t\t})) as IVoipConnectorResult;\n\n\t\t\tconst details = queueDetails.result as IQueueDetails;\n\n\t\t\tif (!details.members?.length) {\n\t\t\t\t// Go to the next queue if queue does not have any\n\t\t\t\t// memmbers.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst isAMember = details.members.some((element) => element.name.endsWith(extension));\n\t\t\tif (!isAMember) {\n\t\t\t\t// Current extension is not a member of queue in question.\n\t\t\t\t// continue with next queue.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmembershipDetails.queues.push(queue);\n\t\t}\n\t\treturn { result: membershipDetails };\n\t}\n\n\tgetConnectorVersion(): string {\n\t\treturn this.commandHandler.getVersion();\n\t}\n\n\tasync getExtensionList(): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_list, undefined);\n\t}\n\n\tasync getExtensionDetails(requestParams: { extension: string }): Promise<IVoipConnectorResult> {\n\t\treturn this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\t}\n\n\tasync getRegistrationInfo(requestParams: { extension: string }): Promise<{ result: IRegistrationInfo }> {\n\t\tconst config = this.getServerConfigData(ServerType.CALL_SERVER);\n\t\tif (!config) {\n\t\t\tthis.logger.warn({ msg: 'API = connector.extension.getRegistrationInfo callserver settings not found' });\n\t\t\tthis.logger.warn('Check call server settings, without them you wont be be able to send/receive calls on RocketChat');\n\t\t\tthrow new Error('Not found');\n\t\t}\n\n\t\tconst endpointDetails = await this.commandHandler.executeCommand(Commands.extension_info, requestParams);\n\n\t\tif (!isIExtensionDetails(endpointDetails.result)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid endpointDetails response');\n\t\t}\n\t\tif (!isICallServerConfigData(config.configData)) {\n\t\t\tthrow new Error('getRegistrationInfo Invalid configData response');\n\t\t}\n\n\t\tconst result = {\n\t\t\tcallServerConfig: config.configData,\n\t\t\textensionDetails: endpointDetails.result,\n\t\t};\n\n\t\treturn {\n\t\t\tresult,\n\t\t};\n\t}\n\n\tasync checkManagementConnection(\n\t\thost: string,\n\t\tport: string,\n\t\tuserName: string,\n\t\tpassword: string,\n\t): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking management server connection');\n\t\treturn this.commandHandler.checkManagementConnection(host, port, userName, password);\n\t}\n\n\tasync checkCallserverConnection(websocketUrl: string, protocol?: string): Promise<IManagementServerConnectionStatus> {\n\t\tthis.logger.debug('Checking call server connection');\n\t\treturn this.commandHandler.checkCallserverConnection(websocketUrl, protocol);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2177d1897c6df8d08f5ca5f6225e88f432caae08"}
