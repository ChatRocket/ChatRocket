{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/rooms.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/api/server/v1/voip/rooms.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/rooms.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/rooms.ts","sourceRoot":"","sources":["app/api/server/v1/voip/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IVoipRoom } from '@rocket.chat/core-typings';\nimport { VoipRoom, LivechatVisitors, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { isVoipRoomProps, isVoipRoomsProps, isVoipRoomCloseProps } from '@rocket.chat/rest-typings';\n\nimport { typedJsonParse } from '../../../../../lib/typedJSONParse';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\ntype DateParam = { start?: string; end?: string };\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};\n};\nconst validateDateParams = (property: string, date: DateParam = {}): DateParam => {\n\tif (date?.start && isNaN(Date.parse(date.start))) {\n\t\tthrow new Error(`The \"${property}.start\" query parameter must be a valid date.`);\n\t}\n\tif (date?.end && isNaN(Date.parse(date.end))) {\n\t\tthrow new Error(`The \"${property}.end\" query parameter must be a valid date.`);\n\t}\n\treturn date;\n};\nconst parseAndValidate = (property: string, date?: string): DateParam => {\n\treturn validateDateParams(property, parseDateParams(date));\n};\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nconst isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\n\treturn 'rid' in props && 'token' in props;\n};\n\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\n\treturn 'agentId' in props && 'direction' in props;\n};\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 },\n\t\tpermissionsRequired: ['inbound-voip-calls'],\n\t\tvalidateParams: isVoipRoomProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { token } = this.queryParams;\n\t\t\tlet agentId: string | undefined = undefined;\n\t\t\tlet direction: IVoipRoom['direction'] = 'inbound';\n\t\t\tlet rid: string | undefined = undefined;\n\n\t\t\tif (isRoomCreationProps(this.queryParams)) {\n\t\t\t\tagentId = this.queryParams.agentId;\n\t\t\t\tdirection = this.queryParams.direction;\n\t\t\t}\n\n\t\t\tif (isRoomSearchProps(this.queryParams)) {\n\t\t\t\trid = this.queryParams.rid;\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!guest) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await VoipRoom.findOneOpenByVisitorToken(token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\t\t\t\tif (!agentId) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst agentObj: ILivechatAgent = await Users.findOneAgentById(agentId, {\n\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t});\n\t\t\t\tif (!agentObj?.username) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst { username, _id } = agentObj;\n\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(\n\t\t\t\t\tawait LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n\t\t\t\t\t\tprojection: API.v1.defaultFieldsToExclude,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/rooms',\n\t{ authRequired: true, validateParams: isVoipRoomsProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\t\t\tconst { agents, open, tags, queue, visitorId, direction, roomName } = this.queryParams;\n\t\t\tconst { createdAt: createdAtParam, closedAt: closedAtParam } = this.queryParams;\n\n\t\t\t// Reusing same L room permissions for simplicity\n\t\t\tconst hasAdminAccess = await hasPermissionAsync(this.userId, 'view-livechat-rooms');\n\t\t\tconst hasAgentAccess =\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-l-room')) && agents?.includes(this.userId) && agents?.length === 1;\n\t\t\tif (!hasAdminAccess && !hasAgentAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\tdirection,\n\t\t\t\t\troomName,\n\t\t\t\t\toptions: { sort, offset, count, fields },\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'voip/room.close',\n\t{ authRequired: true, validateParams: isVoipRoomCloseProps, permissionsRequired: ['inbound-voip-calls'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, options } = this.bodyParams;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!visitor) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\t\t\tconst room = await LivechatVoip.findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\tif (!room.open) {\n\t\t\t\treturn API.v1.failure('room-closed');\n\t\t\t}\n\t\t\tconst closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, 'voip-call-wrapup', options);\n\t\t\tif (!closeResult) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\t\t\treturn API.v1.success({ rid });\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/api/server/v1/voip/rooms.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/api/server/v1/voip/rooms.ts","inputSourceMap":{"version":3,"file":"app/api/server/v1/voip/rooms.ts","sourceRoot":"","sources":["app/api/server/v1/voip/rooms.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IVoipRoom } from '@rocket.chat/core-typings';\nimport { VoipRoom, LivechatVisitors, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { isVoipRoomProps, isVoipRoomsProps, isVoipRoomCloseProps } from '@rocket.chat/rest-typings';\n\nimport { typedJsonParse } from '../../../../../lib/typedJSONParse';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\ntype DateParam = { start?: string; end?: string };\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};\n};\nconst validateDateParams = (property: string, date: DateParam = {}): DateParam => {\n\tif (date?.start && isNaN(Date.parse(date.start))) {\n\t\tthrow new Error(`The \"${property}.start\" query parameter must be a valid date.`);\n\t}\n\tif (date?.end && isNaN(Date.parse(date.end))) {\n\t\tthrow new Error(`The \"${property}.end\" query parameter must be a valid date.`);\n\t}\n\treturn date;\n};\nconst parseAndValidate = (property: string, date?: string): DateParam => {\n\treturn validateDateParams(property, parseDateParams(date));\n};\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nconst isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\n\treturn 'rid' in props && 'token' in props;\n};\n\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\n\treturn 'agentId' in props && 'direction' in props;\n};\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 },\n\t\tpermissionsRequired: ['inbound-voip-calls'],\n\t\tvalidateParams: isVoipRoomProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { token } = this.queryParams;\n\t\t\tlet agentId: string | undefined = undefined;\n\t\t\tlet direction: IVoipRoom['direction'] = 'inbound';\n\t\t\tlet rid: string | undefined = undefined;\n\n\t\t\tif (isRoomCreationProps(this.queryParams)) {\n\t\t\t\tagentId = this.queryParams.agentId;\n\t\t\t\tdirection = this.queryParams.direction;\n\t\t\t}\n\n\t\t\tif (isRoomSearchProps(this.queryParams)) {\n\t\t\t\trid = this.queryParams.rid;\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!guest) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await VoipRoom.findOneOpenByVisitorToken(token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\t\t\t\tif (!agentId) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst agentObj: ILivechatAgent = await Users.findOneAgentById(agentId, {\n\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t});\n\t\t\t\tif (!agentObj?.username) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst { username, _id } = agentObj;\n\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(\n\t\t\t\t\tawait LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n\t\t\t\t\t\tprojection: API.v1.defaultFieldsToExclude,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/rooms',\n\t{ authRequired: true, validateParams: isVoipRoomsProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\t\t\tconst { agents, open, tags, queue, visitorId, direction, roomName } = this.queryParams;\n\t\t\tconst { createdAt: createdAtParam, closedAt: closedAtParam } = this.queryParams;\n\n\t\t\t// Reusing same L room permissions for simplicity\n\t\t\tconst hasAdminAccess = await hasPermissionAsync(this.userId, 'view-livechat-rooms');\n\t\t\tconst hasAgentAccess =\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-l-room')) && agents?.includes(this.userId) && agents?.length === 1;\n\t\t\tif (!hasAdminAccess && !hasAgentAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\tdirection,\n\t\t\t\t\troomName,\n\t\t\t\t\toptions: { sort, offset, count, fields },\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'voip/room.close',\n\t{ authRequired: true, validateParams: isVoipRoomCloseProps, permissionsRequired: ['inbound-voip-calls'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, options } = this.bodyParams;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!visitor) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\t\t\tconst room = await LivechatVoip.findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\tif (!room.open) {\n\t\t\t\treturn API.v1.failure('room-closed');\n\t\t\t}\n\t\t\tconst closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, 'voip-call-wrapup', options);\n\t\t\tif (!closeResult) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\t\t\treturn API.v1.success({ rid });\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let LivechatVoip;\n    module.link(\"@rocket.chat/core-services\", {\n      LivechatVoip(v) {\n        LivechatVoip = v;\n      }\n    }, 0);\n    let VoipRoom, LivechatVisitors, Users;\n    module.link(\"@rocket.chat/models\", {\n      VoipRoom(v) {\n        VoipRoom = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let isVoipRoomProps, isVoipRoomsProps, isVoipRoomCloseProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isVoipRoomProps(v) {\n        isVoipRoomProps = v;\n      },\n      isVoipRoomsProps(v) {\n        isVoipRoomsProps = v;\n      },\n      isVoipRoomCloseProps(v) {\n        isVoipRoomCloseProps = v;\n      }\n    }, 3);\n    let typedJsonParse;\n    module.link(\"../../../../../lib/typedJSONParse\", {\n      typedJsonParse(v) {\n        typedJsonParse = v;\n      }\n    }, 4);\n    let hasPermissionAsync;\n    module.link(\"../../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 5);\n    let API;\n    module.link(\"../../api\", {\n      API(v) {\n        API = v;\n      }\n    }, 6);\n    let getPaginationItems;\n    module.link(\"../../helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const parseDateParams = date => {\n      return date && typeof date === 'string' ? typedJsonParse(date) : {};\n    };\n    const validateDateParams = function (property) {\n      let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (date !== null && date !== void 0 && date.start && isNaN(Date.parse(date.start))) {\n        throw new Error(\"The \\\"\".concat(property, \".start\\\" query parameter must be a valid date.\"));\n      }\n      if (date !== null && date !== void 0 && date.end && isNaN(Date.parse(date.end))) {\n        throw new Error(\"The \\\"\".concat(property, \".end\\\" query parameter must be a valid date.\"));\n      }\n      return date;\n    };\n    const parseAndValidate = (property, date) => {\n      return validateDateParams(property, parseDateParams(date));\n    };\n    /**\n     * @openapi\n     *  /voip/server/api/v1/voip/room\n     *    get:\n     *      description: Creates a new room if rid is not passed, else gets an existing room\n     * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n     * \t\tcenter is 600 calls a day\n     * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n     * \t\twe will keep the safe limit which is 5 calls a minute.\n     *      security:\n     *      parameters:\n     *        - name: token\n     *          in: query\n     *          description: The visitor token\n     *          required: true\n     *          schema:\n     *            type: string\n     *          example: ByehQjC44FwMeiLbX\n     *        - name: rid\n     *          in: query\n     *          description: The room id\n     *          required: false\n     *          schema:\n     *            type: string\n     *          example: ByehQjC44FwMeiLbX\n     *        - name: agentId\n     *          in: query\n     *          description: Agent Id\n     *          required: false\n     *          schema:\n     *            type: string\n     *          example: ByehQjC44FwMeiLbX\n     *      responses:\n     *        200:\n     *          description: Room object and flag indicating whether a new room is created.\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      room:\n     *                        type: object\n     *                        items:\n     *                          $ref: '#/components/schemas/IRoom'\n     *                      newRoom:\n     *                        type: boolean\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    const isRoomSearchProps = props => {\n      return 'rid' in props && 'token' in props;\n    };\n    const isRoomCreationProps = props => {\n      return 'agentId' in props && 'direction' in props;\n    };\n    API.v1.addRoute('voip/room', {\n      authRequired: true,\n      rateLimiterOptions: {\n        numRequestsAllowed: 5,\n        intervalTimeInMS: 60000\n      },\n      permissionsRequired: ['inbound-voip-calls'],\n      validateParams: isVoipRoomProps\n    }, {\n      async get() {\n        const {\n          token\n        } = this.queryParams;\n        let agentId = undefined;\n        let direction = 'inbound';\n        let rid = undefined;\n        if (isRoomCreationProps(this.queryParams)) {\n          agentId = this.queryParams.agentId;\n          direction = this.queryParams.direction;\n        }\n        if (isRoomSearchProps(this.queryParams)) {\n          rid = this.queryParams.rid;\n        }\n        const guest = await LivechatVisitors.getVisitorByToken(token, {});\n        if (!guest) {\n          return API.v1.failure('invalid-token');\n        }\n        if (!rid) {\n          const room = await VoipRoom.findOneOpenByVisitorToken(token, {\n            projection: API.v1.defaultFieldsToExclude\n          });\n          if (room) {\n            return API.v1.success({\n              room,\n              newRoom: false\n            });\n          }\n          if (!agentId) {\n            return API.v1.failure('agent-not-found');\n          }\n          const agentObj = await Users.findOneAgentById(agentId, {\n            projection: {\n              username: 1\n            }\n          });\n          if (!(agentObj !== null && agentObj !== void 0 && agentObj.username)) {\n            return API.v1.failure('agent-not-found');\n          }\n          const {\n            username,\n            _id\n          } = agentObj;\n          const agent = {\n            agentId: _id,\n            username\n          };\n          const rid = Random.id();\n          return API.v1.success(await LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n            projection: API.v1.defaultFieldsToExclude\n          }));\n        }\n        const room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, {\n          projection: API.v1.defaultFieldsToExclude\n        });\n        if (!room) {\n          return API.v1.failure('invalid-room');\n        }\n        return API.v1.success({\n          room,\n          newRoom: false\n        });\n      }\n    });\n    API.v1.addRoute('voip/rooms', {\n      authRequired: true,\n      validateParams: isVoipRoomsProps\n    }, {\n      async get() {\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort,\n          fields\n        } = await this.parseJsonQuery();\n        const {\n          agents,\n          open,\n          tags,\n          queue,\n          visitorId,\n          direction,\n          roomName\n        } = this.queryParams;\n        const {\n          createdAt: createdAtParam,\n          closedAt: closedAtParam\n        } = this.queryParams;\n        // Reusing same L room permissions for simplicity\n        const hasAdminAccess = await hasPermissionAsync(this.userId, 'view-livechat-rooms');\n        const hasAgentAccess = (await hasPermissionAsync(this.userId, 'view-l-room')) && (agents === null || agents === void 0 ? void 0 : agents.includes(this.userId)) && (agents === null || agents === void 0 ? void 0 : agents.length) === 1;\n        if (!hasAdminAccess && !hasAgentAccess) {\n          return API.v1.unauthorized();\n        }\n        const createdAt = parseAndValidate('createdAt', createdAtParam);\n        const closedAt = parseAndValidate('closedAt', closedAtParam);\n        return API.v1.success(await LivechatVoip.findVoipRooms({\n          agents,\n          open: open === 'true',\n          tags,\n          queue,\n          visitorId,\n          createdAt,\n          closedAt,\n          direction,\n          roomName,\n          options: {\n            sort,\n            offset,\n            count,\n            fields\n          }\n        }));\n      }\n    });\n    /**\n     * @openapi\n     *  /voip/server/api/v1/voip/room.close\n     *    post:\n     *      description: Closes an open room\n     * \t\tbased on rid and token. Setting rate limit for this too\n     * \t\tBecause room creation happens 5/minute, rate limit for this api\n     * \t\tis also set to 5/minute.\n     *      security:\n     *\t\trequestBody:\n     *      required: true\n     *      content:\n     *\t\t\tapplication/json:\n     *          schema:\n     *          \ttype: object\n     *\t\t\t  \tproperties:\n     *\t\t\t\t\trid:\n     *                 \t\ttype: string\n     *\t\t\t\t\ttoken:\n     *\t\t\t\t\t\ttype: string\n     *      responses:\n     *        200:\n     *          description: rid of closed room and a comment for closing room\n     *          content:\n     *            application/json:\n     *              schema:\n     *                allOf:\n     *                  - $ref: '#/components/schemas/ApiSuccessV1'\n     *                  - type: object\n     *                    properties:\n     *                      rid:\n     *                        \ttype: string\n     *                      comment:\n     *                      \ttype: string\n     *        default:\n     *          description: Unexpected error\n     *          content:\n     *            application/json:\n     *              schema:\n     *                $ref: '#/components/schemas/ApiFailureV1'\n     */\n    API.v1.addRoute('voip/room.close', {\n      authRequired: true,\n      validateParams: isVoipRoomCloseProps,\n      permissionsRequired: ['inbound-voip-calls']\n    }, {\n      async post() {\n        const {\n          rid,\n          token,\n          options\n        } = this.bodyParams;\n        const visitor = await LivechatVisitors.getVisitorByToken(token, {});\n        if (!visitor) {\n          return API.v1.failure('invalid-token');\n        }\n        const room = await LivechatVoip.findRoom(token, rid);\n        if (!room) {\n          return API.v1.failure('invalid-room');\n        }\n        if (!room.open) {\n          return API.v1.failure('room-closed');\n        }\n        const closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, 'voip-call-wrapup', options);\n        if (!closeResult) {\n          return API.v1.failure();\n        }\n        return API.v1.success({\n          rid\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["LivechatVoip","module","link","v","VoipRoom","LivechatVisitors","Users","Random","isVoipRoomProps","isVoipRoomsProps","isVoipRoomCloseProps","typedJsonParse","hasPermissionAsync","API","getPaginationItems","__reifyWaitForDeps__","parseDateParams","date","validateDateParams","property","arguments","length","undefined","start","isNaN","Date","parse","Error","concat","end","parseAndValidate","isRoomSearchProps","props","isRoomCreationProps","v1","addRoute","authRequired","rateLimiterOptions","numRequestsAllowed","intervalTimeInMS","permissionsRequired","validateParams","get","token","queryParams","agentId","direction","rid","guest","getVisitorByToken","failure","room","findOneOpenByVisitorToken","projection","defaultFieldsToExclude","success","newRoom","agentObj","findOneAgentById","username","_id","agent","id","getNewRoom","findOneByIdAndVisitorToken","offset","count","sort","fields","parseJsonQuery","agents","open","tags","queue","visitorId","roomName","createdAt","createdAtParam","closedAt","closedAtParam","hasAdminAccess","userId","hasAgentAccess","includes","unauthorized","findVoipRooms","options","post","bodyParams","visitor","findRoom","closeResult","closeRoom","user","__reify_async_result__","_reifyError","self","async"],"sources":["app/api/server/v1/voip/rooms.ts"],"sourcesContent":["import { LivechatVoip } from '@rocket.chat/core-services';\nimport type { ILivechatAgent, IVoipRoom } from '@rocket.chat/core-typings';\nimport { VoipRoom, LivechatVisitors, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { isVoipRoomProps, isVoipRoomsProps, isVoipRoomCloseProps } from '@rocket.chat/rest-typings';\n\nimport { typedJsonParse } from '../../../../../lib/typedJSONParse';\nimport { hasPermissionAsync } from '../../../../authorization/server/functions/hasPermission';\nimport { API } from '../../api';\nimport { getPaginationItems } from '../../helpers/getPaginationItems';\n\ntype DateParam = { start?: string; end?: string };\nconst parseDateParams = (date?: string): DateParam => {\n\treturn date && typeof date === 'string' ? typedJsonParse<DateParam>(date) : {};\n};\nconst validateDateParams = (property: string, date: DateParam = {}): DateParam => {\n\tif (date?.start && isNaN(Date.parse(date.start))) {\n\t\tthrow new Error(`The \"${property}.start\" query parameter must be a valid date.`);\n\t}\n\tif (date?.end && isNaN(Date.parse(date.end))) {\n\t\tthrow new Error(`The \"${property}.end\" query parameter must be a valid date.`);\n\t}\n\treturn date;\n};\nconst parseAndValidate = (property: string, date?: string): DateParam => {\n\treturn validateDateParams(property, parseDateParams(date));\n};\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room\n *    get:\n *      description: Creates a new room if rid is not passed, else gets an existing room\n * \t\tbased on rid and token . This configures the rate limit. An average call volume in a contact\n * \t\tcenter is 600 calls a day\n * \t\tconsidering 8 hour shift. Which comes to 1.25 calls per minute.\n * \t\twe will keep the safe limit which is 5 calls a minute.\n *      security:\n *      parameters:\n *        - name: token\n *          in: query\n *          description: The visitor token\n *          required: true\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: rid\n *          in: query\n *          description: The room id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *        - name: agentId\n *          in: query\n *          description: Agent Id\n *          required: false\n *          schema:\n *            type: string\n *          example: ByehQjC44FwMeiLbX\n *      responses:\n *        200:\n *          description: Room object and flag indicating whether a new room is created.\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      room:\n *                        type: object\n *                        items:\n *                          $ref: '#/components/schemas/IRoom'\n *                      newRoom:\n *                        type: boolean\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\n\nconst isRoomSearchProps = (props: any): props is { rid: string; token: string } => {\n\treturn 'rid' in props && 'token' in props;\n};\n\nconst isRoomCreationProps = (props: any): props is { agentId: string; direction: IVoipRoom['direction'] } => {\n\treturn 'agentId' in props && 'direction' in props;\n};\n\nAPI.v1.addRoute(\n\t'voip/room',\n\t{\n\t\tauthRequired: true,\n\t\trateLimiterOptions: { numRequestsAllowed: 5, intervalTimeInMS: 60000 },\n\t\tpermissionsRequired: ['inbound-voip-calls'],\n\t\tvalidateParams: isVoipRoomProps,\n\t},\n\t{\n\t\tasync get() {\n\t\t\tconst { token } = this.queryParams;\n\t\t\tlet agentId: string | undefined = undefined;\n\t\t\tlet direction: IVoipRoom['direction'] = 'inbound';\n\t\t\tlet rid: string | undefined = undefined;\n\n\t\t\tif (isRoomCreationProps(this.queryParams)) {\n\t\t\t\tagentId = this.queryParams.agentId;\n\t\t\t\tdirection = this.queryParams.direction;\n\t\t\t}\n\n\t\t\tif (isRoomSearchProps(this.queryParams)) {\n\t\t\t\trid = this.queryParams.rid;\n\t\t\t}\n\n\t\t\tconst guest = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!guest) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\n\t\t\tif (!rid) {\n\t\t\t\tconst room = await VoipRoom.findOneOpenByVisitorToken(token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\t\tif (room) {\n\t\t\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t\t\t}\n\t\t\t\tif (!agentId) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst agentObj: ILivechatAgent = await Users.findOneAgentById(agentId, {\n\t\t\t\t\tprojection: { username: 1 },\n\t\t\t\t});\n\t\t\t\tif (!agentObj?.username) {\n\t\t\t\t\treturn API.v1.failure('agent-not-found');\n\t\t\t\t}\n\n\t\t\t\tconst { username, _id } = agentObj;\n\t\t\t\tconst agent = { agentId: _id, username };\n\t\t\t\tconst rid = Random.id();\n\n\t\t\t\treturn API.v1.success(\n\t\t\t\t\tawait LivechatVoip.getNewRoom(guest, agent, rid, direction, {\n\t\t\t\t\t\tprojection: API.v1.defaultFieldsToExclude,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst room = await VoipRoom.findOneByIdAndVisitorToken(rid, token, { projection: API.v1.defaultFieldsToExclude });\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\treturn API.v1.success({ room, newRoom: false });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'voip/rooms',\n\t{ authRequired: true, validateParams: isVoipRoomsProps },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\n\t\t\tconst { sort, fields } = await this.parseJsonQuery();\n\t\t\tconst { agents, open, tags, queue, visitorId, direction, roomName } = this.queryParams;\n\t\t\tconst { createdAt: createdAtParam, closedAt: closedAtParam } = this.queryParams;\n\n\t\t\t// Reusing same L room permissions for simplicity\n\t\t\tconst hasAdminAccess = await hasPermissionAsync(this.userId, 'view-livechat-rooms');\n\t\t\tconst hasAgentAccess =\n\t\t\t\t(await hasPermissionAsync(this.userId, 'view-l-room')) && agents?.includes(this.userId) && agents?.length === 1;\n\t\t\tif (!hasAdminAccess && !hasAgentAccess) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst createdAt = parseAndValidate('createdAt', createdAtParam);\n\t\t\tconst closedAt = parseAndValidate('closedAt', closedAtParam);\n\n\t\t\treturn API.v1.success(\n\t\t\t\tawait LivechatVoip.findVoipRooms({\n\t\t\t\t\tagents,\n\t\t\t\t\topen: open === 'true',\n\t\t\t\t\ttags,\n\t\t\t\t\tqueue,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tcreatedAt,\n\t\t\t\t\tclosedAt,\n\t\t\t\t\tdirection,\n\t\t\t\t\troomName,\n\t\t\t\t\toptions: { sort, offset, count, fields },\n\t\t\t\t}),\n\t\t\t);\n\t\t},\n\t},\n);\n\n/**\n * @openapi\n *  /voip/server/api/v1/voip/room.close\n *    post:\n *      description: Closes an open room\n * \t\tbased on rid and token. Setting rate limit for this too\n * \t\tBecause room creation happens 5/minute, rate limit for this api\n * \t\tis also set to 5/minute.\n *      security:\n *\t\trequestBody:\n *      required: true\n *      content:\n *\t\t\tapplication/json:\n *          schema:\n *          \ttype: object\n *\t\t\t  \tproperties:\n *\t\t\t\t\trid:\n *                 \t\ttype: string\n *\t\t\t\t\ttoken:\n *\t\t\t\t\t\ttype: string\n *      responses:\n *        200:\n *          description: rid of closed room and a comment for closing room\n *          content:\n *            application/json:\n *              schema:\n *                allOf:\n *                  - $ref: '#/components/schemas/ApiSuccessV1'\n *                  - type: object\n *                    properties:\n *                      rid:\n *                        \ttype: string\n *                      comment:\n *                      \ttype: string\n *        default:\n *          description: Unexpected error\n *          content:\n *            application/json:\n *              schema:\n *                $ref: '#/components/schemas/ApiFailureV1'\n */\nAPI.v1.addRoute(\n\t'voip/room.close',\n\t{ authRequired: true, validateParams: isVoipRoomCloseProps, permissionsRequired: ['inbound-voip-calls'] },\n\t{\n\t\tasync post() {\n\t\t\tconst { rid, token, options } = this.bodyParams;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByToken(token, {});\n\t\t\tif (!visitor) {\n\t\t\t\treturn API.v1.failure('invalid-token');\n\t\t\t}\n\t\t\tconst room = await LivechatVoip.findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\treturn API.v1.failure('invalid-room');\n\t\t\t}\n\t\t\tif (!room.open) {\n\t\t\t\treturn API.v1.failure('room-closed');\n\t\t\t}\n\t\t\tconst closeResult = await LivechatVoip.closeRoom(visitor, room, this.user, 'voip-call-wrapup', options);\n\t\t\tif (!closeResult) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\t\t\treturn API.v1.success({ rid });\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d08c1ba1b7c7a445e8b745fcced1dcf72752f4a8"}
