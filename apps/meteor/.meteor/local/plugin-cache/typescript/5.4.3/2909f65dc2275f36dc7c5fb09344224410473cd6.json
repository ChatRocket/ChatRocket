{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/otr/client/OTRRoom.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/otr/client/OTRRoom.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/otr/client/OTRRoom.ts","inputSourceMap":{"version":3,"file":"app/otr/client/OTRRoom.ts","sourceRoot":"","sources":["app/otr/client/OTRRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom, IMessage, IUser } from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport EJSON from 'ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport GenericModal from '../../../client/components/GenericModal';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport type { UserPresence } from '../../../client/lib/presence';\nimport { Presence } from '../../../client/lib/presence';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { getUidDirectMessage } from '../../../client/lib/utils/getUidDirectMessage';\nimport { goToRoomById } from '../../../client/lib/utils/goToRoomById';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport type { IOnUserStreamData, IOTRAlgorithm, IOTRDecrypt, IOTRRoom } from '../lib/IOTR';\nimport { OtrRoomState } from '../lib/OtrRoomState';\nimport { otrSystemMessages } from '../lib/constants';\nimport {\n\tdecryptAES,\n\tderiveBits,\n\tdigest,\n\tencryptAES,\n\texportKey,\n\tgenerateKeyPair,\n\timportKey,\n\timportKeyRaw,\n\tjoinEncryptedData,\n} from '../lib/functions';\n\nexport class OTRRoom implements IOTRRoom {\n\tprivate _userId: string;\n\n\tprivate _roomId: string;\n\n\tprivate _keyPair: CryptoKeyPair | null;\n\n\tprivate _exportedPublicKey: JsonWebKey;\n\n\tprivate _sessionKey: CryptoKey | null;\n\n\tprivate _userOnlineComputation: Tracker.Computation;\n\n\tprivate peerId: string;\n\n\tprivate state: ReactiveVar<OtrRoomState> = new ReactiveVar(OtrRoomState.NOT_STARTED);\n\n\tprivate isFirstOTR: boolean;\n\n\tprivate onPresenceEventHook: (event: UserPresence | undefined) => void;\n\n\tprotected constructor(uid: IUser['_id'], rid: IRoom['_id'], peerId: IUser['_id']) {\n\t\tthis._userId = uid;\n\t\tthis._roomId = rid;\n\t\tthis._keyPair = null;\n\t\tthis._sessionKey = null;\n\t\tthis.peerId = peerId;\n\t\tthis.isFirstOTR = true;\n\t\tthis.onPresenceEventHook = this.onPresenceEvent.bind(this);\n\t}\n\n\tpublic static create(uid: IUser['_id'], rid: IRoom['_id']): OTRRoom | undefined {\n\t\tconst peerId = getUidDirectMessage(rid);\n\n\t\tif (!peerId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new OTRRoom(uid, rid, peerId);\n\t}\n\n\tgetPeerId(): string {\n\t\treturn this.peerId;\n\t}\n\n\tgetState(): OtrRoomState {\n\t\treturn this.state.get();\n\t}\n\n\tsetState(nextState: OtrRoomState): void {\n\t\tif (this.getState() === nextState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.set(nextState);\n\t}\n\n\tasync handshake(refresh?: boolean): Promise<void> {\n\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\n\t\tawait this.generateKeyPair();\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'handshake',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t\trefresh,\n\t\t\t},\n\t\t]);\n\n\t\tif (refresh) {\n\t\t\tconst user = Meteor.user();\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\troomId: this._roomId,\n\t\t\t\ttype: otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t});\n\t\t\tthis.isFirstOTR = false;\n\t\t}\n\t}\n\n\tonPresenceEvent(event: UserPresence | undefined): void {\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\t\tif (event.status !== UserStatus.OFFLINE) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.warn(`OTR Room ${this._roomId} ended because ${this.peerId} went offline`);\n\t\tthis.end();\n\n\t\timperativeModal.open({\n\t\t\tcomponent: GenericModal,\n\t\t\tprops: {\n\t\t\t\tvariant: 'warning',\n\t\t\t\ttitle: t('OTR'),\n\t\t\t\tchildren: t('OTR_Session_ended_other_user_went_offline', { username: event.username }),\n\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t},\n\t\t});\n\t}\n\n\t// Starts listening to other user's status changes and end OTR if any of the Users goes offline\n\t// this should be called in 2 places: on acknowledge (meaning user accepted OTR) or on establish (meaning user initiated OTR)\n\tlistenToUserStatus(): void {\n\t\tPresence.listen(this.peerId, this.onPresenceEventHook);\n\t}\n\n\tacknowledge(): void {\n\t\tvoid sdk.rest.post('/v1/statistics.telemetry', { params: [{ eventName: 'otrStats', timestamp: Date.now(), rid: this._roomId }] });\n\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'acknowledge',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t},\n\t\t]);\n\t}\n\n\tdeny(): void {\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.DECLINED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'deny',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\tsoftReset(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t}\n\n\tend(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tPresence.stop(this.peerId, this.onPresenceEventHook);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'end',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\treset(): void {\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t}\n\n\tasync generateKeyPair(): Promise<void> {\n\t\tif (this._userOnlineComputation) {\n\t\t\tthis._userOnlineComputation.stop();\n\t\t}\n\n\t\tthis._userOnlineComputation = Tracker.autorun(() => {\n\t\t\tconst $room = document.querySelector(`#chat-window-${this._roomId}`);\n\t\t\tconst $title = $room?.querySelector('.rc-header__title');\n\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\tif ($room && $title && !$title.querySelector('.otr-icon')) {\n\t\t\t\t\t$title.prepend(\"<i class='otr-icon icon-key'></i>\");\n\t\t\t\t}\n\t\t\t} else if ($title) {\n\t\t\t\t$title.querySelector('.otr-icon')?.remove();\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\t// Generate an ephemeral key pair.\n\t\t\tthis._keyPair = await generateKeyPair();\n\n\t\t\tif (!this._keyPair.publicKey) {\n\t\t\t\tthrow new Error('Public key is not generated');\n\t\t\t}\n\n\t\t\tthis._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n\n\t\t\t// Once we have generated new keys, it's safe to delete old messages\n\t\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync importPublicKey(publicKey: string): Promise<void> {\n\t\ttry {\n\t\t\tif (!this._keyPair) throw new Error('No key pair');\n\t\t\tconst publicKeyObject: JsonWebKey = EJSON.parse(publicKey);\n\t\t\tconst peerPublicKey = await importKey(publicKeyObject);\n\t\t\tconst ecdhObj: IOTRAlgorithm = {\n\t\t\t\tname: 'ECDH',\n\t\t\t\tnamedCurve: 'P-256',\n\t\t\t\tpublic: peerPublicKey,\n\t\t\t};\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst hashedBits = await digest(bits);\n\t\t\t// We truncate the hash to 128 bits.\n\t\t\tconst sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n\t\t\t// Session key available.\n\t\t\tthis._sessionKey = await importKeyRaw(sessionKeyData);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync encryptText(data: string | Uint8Array): Promise<string> {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available');\n\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\n\t\t\treturn EJSON.stringify(output);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync encrypt(message: Pick<IMessage, '_id' | 'msg'>): Promise<string> {\n\t\ttry {\n\t\t\tconst data = new TextEncoder().encode(\n\t\t\t\tEJSON.stringify({\n\t\t\t\t\t_id: message._id,\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t\tuserId: this._userId,\n\t\t\t\t\tack: Random.id((Random.fraction() + 1) * 20),\n\t\t\t\t\tts: new Date(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync decrypt(message: string): Promise<IOTRDecrypt | string> {\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available.');\n\n\t\t\tconst cipherText: Uint8Array = EJSON.parse(message);\n\t\t\tconst data = await decryptAES(cipherText, this._sessionKey);\n\t\t\tconst msgDecoded: IOTRDecrypt = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n\t\t\tif (msgDecoded && typeof msgDecoded === 'object') {\n\t\t\t\treturn msgDecoded;\n\t\t\t}\n\t\t\treturn message;\n\t\t} catch (e) {\n\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\treturn message;\n\t\t}\n\t}\n\n\tasync onUserStream(type: string, data: IOnUserStreamData): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase 'handshake':\n\t\t\t\tlet timeout: NodeJS.Timeout;\n\n\t\t\t\tconst establishConnection = async (): Promise<void> => {\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\t\tawait this.generateKeyPair();\n\t\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\t\t\t\t\t\tawait goToRoomById(data.roomId);\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\t\t\t\t\t\t\tthis.acknowledge();\n\t\t\t\t\t\t\tthis.listenToUserStatus();\n\n\t\t\t\t\t\t\tif (data.refresh) {\n\t\t\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\t\t\ttype: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t\t\tthrow new Meteor.Error('establish-connection-error', 'Establish connection error.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst closeOrCancelModal = (): void => {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tthis.deny();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(data.userId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* \tWe have to check if there's an in progress handshake request because\n\t\t\t\t\t\t\tNotifications.notifyUser will sometimes dispatch 2 events */\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.REQUESTED) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState(OtrRoomState.REQUESTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n\t\t\t\t\t\t\t\t\tusername: obj.username,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tconfirmText: t('Yes'),\n\t\t\t\t\t\t\t\tcancelText: t('No'),\n\t\t\t\t\t\t\t\tonClose: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonCancel: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonConfirm: async (): Promise<void> => {\n\t\t\t\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.TIMEOUT);\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'acknowledge':\n\t\t\t\ttry {\n\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\n\t\t\t\t\tif (this.isFirstOTR) {\n\t\t\t\t\t\tthis.listenToUserStatus();\n\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\ttype: otrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.isFirstOTR = false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'deny':\n\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHING) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.setState(OtrRoomState.DECLINED);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(this.peerId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_ended_the_OTR_session', { username: obj.username }),\n\t\t\t\t\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/otr/client/OTRRoom.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/otr/client/OTRRoom.ts","inputSourceMap":{"version":3,"file":"app/otr/client/OTRRoom.ts","sourceRoot":"","sources":["app/otr/client/OTRRoom.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IRoom, IMessage, IUser } from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport EJSON from 'ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport GenericModal from '../../../client/components/GenericModal';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport type { UserPresence } from '../../../client/lib/presence';\nimport { Presence } from '../../../client/lib/presence';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { getUidDirectMessage } from '../../../client/lib/utils/getUidDirectMessage';\nimport { goToRoomById } from '../../../client/lib/utils/goToRoomById';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport type { IOnUserStreamData, IOTRAlgorithm, IOTRDecrypt, IOTRRoom } from '../lib/IOTR';\nimport { OtrRoomState } from '../lib/OtrRoomState';\nimport { otrSystemMessages } from '../lib/constants';\nimport {\n\tdecryptAES,\n\tderiveBits,\n\tdigest,\n\tencryptAES,\n\texportKey,\n\tgenerateKeyPair,\n\timportKey,\n\timportKeyRaw,\n\tjoinEncryptedData,\n} from '../lib/functions';\n\nexport class OTRRoom implements IOTRRoom {\n\tprivate _userId: string;\n\n\tprivate _roomId: string;\n\n\tprivate _keyPair: CryptoKeyPair | null;\n\n\tprivate _exportedPublicKey: JsonWebKey;\n\n\tprivate _sessionKey: CryptoKey | null;\n\n\tprivate _userOnlineComputation: Tracker.Computation;\n\n\tprivate peerId: string;\n\n\tprivate state: ReactiveVar<OtrRoomState> = new ReactiveVar(OtrRoomState.NOT_STARTED);\n\n\tprivate isFirstOTR: boolean;\n\n\tprivate onPresenceEventHook: (event: UserPresence | undefined) => void;\n\n\tprotected constructor(uid: IUser['_id'], rid: IRoom['_id'], peerId: IUser['_id']) {\n\t\tthis._userId = uid;\n\t\tthis._roomId = rid;\n\t\tthis._keyPair = null;\n\t\tthis._sessionKey = null;\n\t\tthis.peerId = peerId;\n\t\tthis.isFirstOTR = true;\n\t\tthis.onPresenceEventHook = this.onPresenceEvent.bind(this);\n\t}\n\n\tpublic static create(uid: IUser['_id'], rid: IRoom['_id']): OTRRoom | undefined {\n\t\tconst peerId = getUidDirectMessage(rid);\n\n\t\tif (!peerId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new OTRRoom(uid, rid, peerId);\n\t}\n\n\tgetPeerId(): string {\n\t\treturn this.peerId;\n\t}\n\n\tgetState(): OtrRoomState {\n\t\treturn this.state.get();\n\t}\n\n\tsetState(nextState: OtrRoomState): void {\n\t\tif (this.getState() === nextState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.set(nextState);\n\t}\n\n\tasync handshake(refresh?: boolean): Promise<void> {\n\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\n\t\tawait this.generateKeyPair();\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'handshake',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t\trefresh,\n\t\t\t},\n\t\t]);\n\n\t\tif (refresh) {\n\t\t\tconst user = Meteor.user();\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\troomId: this._roomId,\n\t\t\t\ttype: otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t});\n\t\t\tthis.isFirstOTR = false;\n\t\t}\n\t}\n\n\tonPresenceEvent(event: UserPresence | undefined): void {\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\t\tif (event.status !== UserStatus.OFFLINE) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.warn(`OTR Room ${this._roomId} ended because ${this.peerId} went offline`);\n\t\tthis.end();\n\n\t\timperativeModal.open({\n\t\t\tcomponent: GenericModal,\n\t\t\tprops: {\n\t\t\t\tvariant: 'warning',\n\t\t\t\ttitle: t('OTR'),\n\t\t\t\tchildren: t('OTR_Session_ended_other_user_went_offline', { username: event.username }),\n\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t},\n\t\t});\n\t}\n\n\t// Starts listening to other user's status changes and end OTR if any of the Users goes offline\n\t// this should be called in 2 places: on acknowledge (meaning user accepted OTR) or on establish (meaning user initiated OTR)\n\tlistenToUserStatus(): void {\n\t\tPresence.listen(this.peerId, this.onPresenceEventHook);\n\t}\n\n\tacknowledge(): void {\n\t\tvoid sdk.rest.post('/v1/statistics.telemetry', { params: [{ eventName: 'otrStats', timestamp: Date.now(), rid: this._roomId }] });\n\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'acknowledge',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t},\n\t\t]);\n\t}\n\n\tdeny(): void {\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.DECLINED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'deny',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\tsoftReset(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t}\n\n\tend(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tPresence.stop(this.peerId, this.onPresenceEventHook);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'end',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\treset(): void {\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t}\n\n\tasync generateKeyPair(): Promise<void> {\n\t\tif (this._userOnlineComputation) {\n\t\t\tthis._userOnlineComputation.stop();\n\t\t}\n\n\t\tthis._userOnlineComputation = Tracker.autorun(() => {\n\t\t\tconst $room = document.querySelector(`#chat-window-${this._roomId}`);\n\t\t\tconst $title = $room?.querySelector('.rc-header__title');\n\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\tif ($room && $title && !$title.querySelector('.otr-icon')) {\n\t\t\t\t\t$title.prepend(\"<i class='otr-icon icon-key'></i>\");\n\t\t\t\t}\n\t\t\t} else if ($title) {\n\t\t\t\t$title.querySelector('.otr-icon')?.remove();\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\t// Generate an ephemeral key pair.\n\t\t\tthis._keyPair = await generateKeyPair();\n\n\t\t\tif (!this._keyPair.publicKey) {\n\t\t\t\tthrow new Error('Public key is not generated');\n\t\t\t}\n\n\t\t\tthis._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n\n\t\t\t// Once we have generated new keys, it's safe to delete old messages\n\t\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync importPublicKey(publicKey: string): Promise<void> {\n\t\ttry {\n\t\t\tif (!this._keyPair) throw new Error('No key pair');\n\t\t\tconst publicKeyObject: JsonWebKey = EJSON.parse(publicKey);\n\t\t\tconst peerPublicKey = await importKey(publicKeyObject);\n\t\t\tconst ecdhObj: IOTRAlgorithm = {\n\t\t\t\tname: 'ECDH',\n\t\t\t\tnamedCurve: 'P-256',\n\t\t\t\tpublic: peerPublicKey,\n\t\t\t};\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst hashedBits = await digest(bits);\n\t\t\t// We truncate the hash to 128 bits.\n\t\t\tconst sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n\t\t\t// Session key available.\n\t\t\tthis._sessionKey = await importKeyRaw(sessionKeyData);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync encryptText(data: string | Uint8Array): Promise<string> {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available');\n\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\n\t\t\treturn EJSON.stringify(output);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync encrypt(message: Pick<IMessage, '_id' | 'msg'>): Promise<string> {\n\t\ttry {\n\t\t\tconst data = new TextEncoder().encode(\n\t\t\t\tEJSON.stringify({\n\t\t\t\t\t_id: message._id,\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t\tuserId: this._userId,\n\t\t\t\t\tack: Random.id((Random.fraction() + 1) * 20),\n\t\t\t\t\tts: new Date(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync decrypt(message: string): Promise<IOTRDecrypt | string> {\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available.');\n\n\t\t\tconst cipherText: Uint8Array = EJSON.parse(message);\n\t\t\tconst data = await decryptAES(cipherText, this._sessionKey);\n\t\t\tconst msgDecoded: IOTRDecrypt = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n\t\t\tif (msgDecoded && typeof msgDecoded === 'object') {\n\t\t\t\treturn msgDecoded;\n\t\t\t}\n\t\t\treturn message;\n\t\t} catch (e) {\n\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\treturn message;\n\t\t}\n\t}\n\n\tasync onUserStream(type: string, data: IOnUserStreamData): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase 'handshake':\n\t\t\t\tlet timeout: NodeJS.Timeout;\n\n\t\t\t\tconst establishConnection = async (): Promise<void> => {\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\t\tawait this.generateKeyPair();\n\t\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\t\t\t\t\t\tawait goToRoomById(data.roomId);\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\t\t\t\t\t\t\tthis.acknowledge();\n\t\t\t\t\t\t\tthis.listenToUserStatus();\n\n\t\t\t\t\t\t\tif (data.refresh) {\n\t\t\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\t\t\ttype: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t\t\tthrow new Meteor.Error('establish-connection-error', 'Establish connection error.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst closeOrCancelModal = (): void => {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tthis.deny();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(data.userId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* \tWe have to check if there's an in progress handshake request because\n\t\t\t\t\t\t\tNotifications.notifyUser will sometimes dispatch 2 events */\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.REQUESTED) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState(OtrRoomState.REQUESTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n\t\t\t\t\t\t\t\t\tusername: obj.username,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tconfirmText: t('Yes'),\n\t\t\t\t\t\t\t\tcancelText: t('No'),\n\t\t\t\t\t\t\t\tonClose: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonCancel: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonConfirm: async (): Promise<void> => {\n\t\t\t\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.TIMEOUT);\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'acknowledge':\n\t\t\t\ttry {\n\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\n\t\t\t\t\tif (this.isFirstOTR) {\n\t\t\t\t\t\tthis.listenToUserStatus();\n\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\ttype: otrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.isFirstOTR = false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'deny':\n\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHING) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.setState(OtrRoomState.DECLINED);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(this.peerId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_ended_the_OTR_session', { username: obj.username }),\n\t\t\t\t\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n"]}}},"code":"module.export({\n  OTRRoom: () => OTRRoom\n});\nlet UserStatus;\nmodule.link(\"@rocket.chat/core-typings\", {\n  UserStatus(v) {\n    UserStatus = v;\n  }\n}, 0);\nlet Random;\nmodule.link(\"@rocket.chat/random\", {\n  Random(v) {\n    Random = v;\n  }\n}, 1);\nlet EJSON;\nmodule.link(\"ejson\", {\n  default(v) {\n    EJSON = v;\n  }\n}, 2);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 3);\nlet ReactiveVar;\nmodule.link(\"meteor/reactive-var\", {\n  ReactiveVar(v) {\n    ReactiveVar = v;\n  }\n}, 4);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 5);\nlet GenericModal;\nmodule.link(\"../../../client/components/GenericModal\", {\n  default(v) {\n    GenericModal = v;\n  }\n}, 6);\nlet imperativeModal;\nmodule.link(\"../../../client/lib/imperativeModal\", {\n  imperativeModal(v) {\n    imperativeModal = v;\n  }\n}, 7);\nlet Presence;\nmodule.link(\"../../../client/lib/presence\", {\n  Presence(v) {\n    Presence = v;\n  }\n}, 8);\nlet dispatchToastMessage;\nmodule.link(\"../../../client/lib/toast\", {\n  dispatchToastMessage(v) {\n    dispatchToastMessage = v;\n  }\n}, 9);\nlet getUidDirectMessage;\nmodule.link(\"../../../client/lib/utils/getUidDirectMessage\", {\n  getUidDirectMessage(v) {\n    getUidDirectMessage = v;\n  }\n}, 10);\nlet goToRoomById;\nmodule.link(\"../../../client/lib/utils/goToRoomById\", {\n  goToRoomById(v) {\n    goToRoomById = v;\n  }\n}, 11);\nlet sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk(v) {\n    sdk = v;\n  }\n}, 12);\nlet t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t(v) {\n    t = v;\n  }\n}, 13);\nlet OtrRoomState;\nmodule.link(\"../lib/OtrRoomState\", {\n  OtrRoomState(v) {\n    OtrRoomState = v;\n  }\n}, 14);\nlet otrSystemMessages;\nmodule.link(\"../lib/constants\", {\n  otrSystemMessages(v) {\n    otrSystemMessages = v;\n  }\n}, 15);\nlet decryptAES, deriveBits, digest, encryptAES, exportKey, generateKeyPair, importKey, importKeyRaw, joinEncryptedData;\nmodule.link(\"../lib/functions\", {\n  decryptAES(v) {\n    decryptAES = v;\n  },\n  deriveBits(v) {\n    deriveBits = v;\n  },\n  digest(v) {\n    digest = v;\n  },\n  encryptAES(v) {\n    encryptAES = v;\n  },\n  exportKey(v) {\n    exportKey = v;\n  },\n  generateKeyPair(v) {\n    generateKeyPair = v;\n  },\n  importKey(v) {\n    importKey = v;\n  },\n  importKeyRaw(v) {\n    importKeyRaw = v;\n  },\n  joinEncryptedData(v) {\n    joinEncryptedData = v;\n  }\n}, 16);\nclass OTRRoom {\n  constructor(uid, rid, peerId) {\n    this._userId = void 0;\n    this._roomId = void 0;\n    this._keyPair = void 0;\n    this._exportedPublicKey = void 0;\n    this._sessionKey = void 0;\n    this._userOnlineComputation = void 0;\n    this.peerId = void 0;\n    this.state = new ReactiveVar(OtrRoomState.NOT_STARTED);\n    this.isFirstOTR = void 0;\n    this.onPresenceEventHook = void 0;\n    this._userId = uid;\n    this._roomId = rid;\n    this._keyPair = null;\n    this._sessionKey = null;\n    this.peerId = peerId;\n    this.isFirstOTR = true;\n    this.onPresenceEventHook = this.onPresenceEvent.bind(this);\n  }\n  static create(uid, rid) {\n    const peerId = getUidDirectMessage(rid);\n    if (!peerId) {\n      return undefined;\n    }\n    return new OTRRoom(uid, rid, peerId);\n  }\n  getPeerId() {\n    return this.peerId;\n  }\n  getState() {\n    return this.state.get();\n  }\n  setState(nextState) {\n    if (this.getState() === nextState) {\n      return;\n    }\n    this.state.set(nextState);\n  }\n  async handshake(refresh) {\n    this.setState(OtrRoomState.ESTABLISHING);\n    await this.generateKeyPair();\n    sdk.publish('notify-user', [\"\".concat(this.peerId, \"/otr\"), 'handshake', {\n      roomId: this._roomId,\n      userId: this._userId,\n      publicKey: EJSON.stringify(this._exportedPublicKey),\n      refresh\n    }]);\n    if (refresh) {\n      const user = Meteor.user();\n      if (!user) {\n        return;\n      }\n      await sdk.rest.post('/v1/chat.otr', {\n        roomId: this._roomId,\n        type: otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH\n      });\n      this.isFirstOTR = false;\n    }\n  }\n  onPresenceEvent(event) {\n    if (!event) {\n      return;\n    }\n    if (event.status !== UserStatus.OFFLINE) {\n      return;\n    }\n    console.warn(\"OTR Room \".concat(this._roomId, \" ended because \").concat(this.peerId, \" went offline\"));\n    this.end();\n    imperativeModal.open({\n      component: GenericModal,\n      props: {\n        variant: 'warning',\n        title: t('OTR'),\n        children: t('OTR_Session_ended_other_user_went_offline', {\n          username: event.username\n        }),\n        confirmText: t('Ok'),\n        onClose: imperativeModal.close,\n        onConfirm: imperativeModal.close\n      }\n    });\n  }\n  // Starts listening to other user's status changes and end OTR if any of the Users goes offline\n  // this should be called in 2 places: on acknowledge (meaning user accepted OTR) or on establish (meaning user initiated OTR)\n  listenToUserStatus() {\n    Presence.listen(this.peerId, this.onPresenceEventHook);\n  }\n  acknowledge() {\n    void sdk.rest.post('/v1/statistics.telemetry', {\n      params: [{\n        eventName: 'otrStats',\n        timestamp: Date.now(),\n        rid: this._roomId\n      }]\n    });\n    sdk.publish('notify-user', [\"\".concat(this.peerId, \"/otr\"), 'acknowledge', {\n      roomId: this._roomId,\n      userId: this._userId,\n      publicKey: EJSON.stringify(this._exportedPublicKey)\n    }]);\n  }\n  deny() {\n    this.reset();\n    this.setState(OtrRoomState.DECLINED);\n    sdk.publish('notify-user', [\"\".concat(this.peerId, \"/otr\"), 'deny', {\n      roomId: this._roomId,\n      userId: this._userId\n    }]);\n  }\n  softReset() {\n    this.isFirstOTR = true;\n    this.setState(OtrRoomState.NOT_STARTED);\n    this._keyPair = null;\n    this._exportedPublicKey = {};\n    this._sessionKey = null;\n  }\n  end() {\n    this.isFirstOTR = true;\n    this.reset();\n    this.setState(OtrRoomState.NOT_STARTED);\n    Presence.stop(this.peerId, this.onPresenceEventHook);\n    sdk.publish('notify-user', [\"\".concat(this.peerId, \"/otr\"), 'end', {\n      roomId: this._roomId,\n      userId: this._userId\n    }]);\n  }\n  reset() {\n    this._keyPair = null;\n    this._exportedPublicKey = {};\n    this._sessionKey = null;\n    void sdk.call('deleteOldOTRMessages', this._roomId);\n  }\n  async generateKeyPair() {\n    if (this._userOnlineComputation) {\n      this._userOnlineComputation.stop();\n    }\n    this._userOnlineComputation = Tracker.autorun(() => {\n      const $room = document.querySelector(\"#chat-window-\".concat(this._roomId));\n      const $title = $room === null || $room === void 0 ? void 0 : $room.querySelector('.rc-header__title');\n      if (this.getState() === OtrRoomState.ESTABLISHED) {\n        if ($room && $title && !$title.querySelector('.otr-icon')) {\n          $title.prepend(\"<i class='otr-icon icon-key'></i>\");\n        }\n      } else if ($title) {\n        var _$title$querySelector;\n        (_$title$querySelector = $title.querySelector('.otr-icon')) === null || _$title$querySelector === void 0 ? void 0 : _$title$querySelector.remove();\n      }\n    });\n    try {\n      // Generate an ephemeral key pair.\n      this._keyPair = await generateKeyPair();\n      if (!this._keyPair.publicKey) {\n        throw new Error('Public key is not generated');\n      }\n      this._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n      // Once we have generated new keys, it's safe to delete old messages\n      void sdk.call('deleteOldOTRMessages', this._roomId);\n    } catch (e) {\n      this.setState(OtrRoomState.ERROR);\n      throw e;\n    }\n  }\n  async importPublicKey(publicKey) {\n    try {\n      if (!this._keyPair) throw new Error('No key pair');\n      const publicKeyObject = EJSON.parse(publicKey);\n      const peerPublicKey = await importKey(publicKeyObject);\n      const ecdhObj = {\n        name: 'ECDH',\n        namedCurve: 'P-256',\n        public: peerPublicKey\n      };\n      const bits = await deriveBits({\n        ecdhObj,\n        _keyPair: this._keyPair\n      });\n      const hashedBits = await digest(bits);\n      // We truncate the hash to 128 bits.\n      const sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n      // Session key available.\n      this._sessionKey = await importKeyRaw(sessionKeyData);\n    } catch (e) {\n      this.setState(OtrRoomState.ERROR);\n      throw e;\n    }\n  }\n  async encryptText(data) {\n    if (typeof data === 'string') {\n      data = new TextEncoder().encode(EJSON.stringify({\n        text: data,\n        ack: Random.id((Random.fraction() + 1) * 20)\n      }));\n    }\n    try {\n      if (!this._sessionKey) throw new Error('Session Key not available');\n      const iv = crypto.getRandomValues(new Uint8Array(12));\n      const encryptedData = await encryptAES({\n        iv,\n        _sessionKey: this._sessionKey,\n        data\n      });\n      const output = joinEncryptedData({\n        encryptedData,\n        iv\n      });\n      return EJSON.stringify(output);\n    } catch (e) {\n      this.setState(OtrRoomState.ERROR);\n      throw new Meteor.Error('encryption-error', 'Encryption error.');\n    }\n  }\n  async encrypt(message) {\n    try {\n      const data = new TextEncoder().encode(EJSON.stringify({\n        _id: message._id,\n        text: message.msg,\n        userId: this._userId,\n        ack: Random.id((Random.fraction() + 1) * 20),\n        ts: new Date()\n      }));\n      const enc = await this.encryptText(data);\n      return enc;\n    } catch (e) {\n      throw new Meteor.Error('encryption-error', 'Encryption error.');\n    }\n  }\n  async decrypt(message) {\n    try {\n      if (!this._sessionKey) throw new Error('Session Key not available.');\n      const cipherText = EJSON.parse(message);\n      const data = await decryptAES(cipherText, this._sessionKey);\n      const msgDecoded = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n      if (msgDecoded && typeof msgDecoded === 'object') {\n        return msgDecoded;\n      }\n      return message;\n    } catch (e) {\n      dispatchToastMessage({\n        type: 'error',\n        message: e\n      });\n      this.setState(OtrRoomState.ERROR);\n      return message;\n    }\n  }\n  async onUserStream(type, data) {\n    switch (type) {\n      case 'handshake':\n        let timeout;\n        const establishConnection = async () => {\n          this.setState(OtrRoomState.ESTABLISHING);\n          clearTimeout(timeout);\n          try {\n            if (!data.publicKey) throw new Error('Public key is not generated');\n            await this.generateKeyPair();\n            await this.importPublicKey(data.publicKey);\n            await goToRoomById(data.roomId);\n            setTimeout(async () => {\n              this.setState(OtrRoomState.ESTABLISHED);\n              this.acknowledge();\n              this.listenToUserStatus();\n              if (data.refresh) {\n                await sdk.rest.post('/v1/chat.otr', {\n                  roomId: this._roomId,\n                  type: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY\n                });\n              }\n            }, 0);\n          } catch (e) {\n            dispatchToastMessage({\n              type: 'error',\n              message: e\n            });\n            throw new Meteor.Error('establish-connection-error', 'Establish connection error.');\n          }\n        };\n        const closeOrCancelModal = () => {\n          clearTimeout(timeout);\n          this.deny();\n          imperativeModal.close();\n        };\n        try {\n          const obj = await Presence.get(data.userId);\n          if (!(obj !== null && obj !== void 0 && obj.username)) {\n            throw new Meteor.Error('user-not-defined', 'User not defined.');\n          }\n          if (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n            this.reset();\n            await establishConnection();\n          } else {\n            /* \tWe have to check if there's an in progress handshake request because\n                Notifications.notifyUser will sometimes dispatch 2 events */\n            if (this.getState() === OtrRoomState.REQUESTED) {\n              return;\n            }\n            if (this.getState() === OtrRoomState.ESTABLISHED) {\n              this.reset();\n            }\n            this.setState(OtrRoomState.REQUESTED);\n            imperativeModal.open({\n              component: GenericModal,\n              props: {\n                variant: 'warning',\n                title: t('OTR'),\n                children: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n                  username: obj.username\n                }),\n                confirmText: t('Yes'),\n                cancelText: t('No'),\n                onClose: () => closeOrCancelModal(),\n                onCancel: () => closeOrCancelModal(),\n                onConfirm: async () => {\n                  await establishConnection();\n                  imperativeModal.close();\n                }\n              }\n            });\n            timeout = setTimeout(() => {\n              this.setState(OtrRoomState.TIMEOUT);\n              imperativeModal.close();\n            }, 10000);\n          }\n        } catch (e) {\n          dispatchToastMessage({\n            type: 'error',\n            message: e\n          });\n        }\n        break;\n      case 'acknowledge':\n        try {\n          if (!data.publicKey) throw new Error('Public key is not generated');\n          await this.importPublicKey(data.publicKey);\n          this.setState(OtrRoomState.ESTABLISHED);\n          if (this.isFirstOTR) {\n            this.listenToUserStatus();\n            await sdk.rest.post('/v1/chat.otr', {\n              roomId: this._roomId,\n              type: otrSystemMessages.USER_JOINED_OTR\n            });\n          }\n          this.isFirstOTR = false;\n        } catch (e) {\n          dispatchToastMessage({\n            type: 'error',\n            message: e\n          });\n        }\n        break;\n      case 'deny':\n        if (this.getState() === OtrRoomState.ESTABLISHING) {\n          this.reset();\n          this.setState(OtrRoomState.DECLINED);\n        }\n        break;\n      case 'end':\n        try {\n          const obj = await Presence.get(this.peerId);\n          if (!(obj !== null && obj !== void 0 && obj.username)) {\n            throw new Meteor.Error('user-not-defined', 'User not defined.');\n          }\n          if (this.getState() === OtrRoomState.ESTABLISHED) {\n            this.reset();\n            this.setState(OtrRoomState.NOT_STARTED);\n            imperativeModal.open({\n              component: GenericModal,\n              props: {\n                variant: 'warning',\n                title: t('OTR'),\n                children: t('Username_ended_the_OTR_session', {\n                  username: obj.username\n                }),\n                confirmText: t('Ok'),\n                onClose: imperativeModal.close,\n                onConfirm: imperativeModal.close\n              }\n            });\n          }\n        } catch (e) {\n          dispatchToastMessage({\n            type: 'error',\n            message: e\n          });\n        }\n        break;\n    }\n  }\n}","map":{"version":3,"names":["module","export","OTRRoom","UserStatus","link","v","Random","EJSON","default","Meteor","ReactiveVar","Tracker","GenericModal","imperativeModal","Presence","dispatchToastMessage","getUidDirectMessage","goToRoomById","sdk","t","OtrRoomState","otrSystemMessages","decryptAES","deriveBits","digest","encryptAES","exportKey","generateKeyPair","importKey","importKeyRaw","joinEncryptedData","constructor","uid","rid","peerId","_userId","_roomId","_keyPair","_exportedPublicKey","_sessionKey","_userOnlineComputation","state","NOT_STARTED","isFirstOTR","onPresenceEventHook","onPresenceEvent","bind","create","undefined","getPeerId","getState","get","setState","nextState","set","handshake","refresh","ESTABLISHING","publish","concat","roomId","userId","publicKey","stringify","user","rest","post","type","USER_REQUESTED_OTR_KEY_REFRESH","event","status","OFFLINE","console","warn","end","open","component","props","variant","title","children","username","confirmText","onClose","close","onConfirm","listenToUserStatus","listen","acknowledge","params","eventName","timestamp","Date","now","deny","reset","DECLINED","softReset","stop","call","autorun","$room","document","querySelector","$title","ESTABLISHED","prepend","_$title$querySelector","remove","Error","e","ERROR","importPublicKey","publicKeyObject","parse","peerPublicKey","ecdhObj","name","namedCurve","public","bits","hashedBits","sessionKeyData","Uint8Array","slice","encryptText","data","TextEncoder","encode","text","ack","id","fraction","iv","crypto","getRandomValues","encryptedData","output","encrypt","message","_id","msg","ts","enc","decrypt","cipherText","msgDecoded","TextDecoder","decode","onUserStream","timeout","establishConnection","clearTimeout","setTimeout","USER_KEY_REFRESHED_SUCCESSFULLY","closeOrCancelModal","obj","REQUESTED","cancelText","onCancel","TIMEOUT","USER_JOINED_OTR"],"sources":["app/otr/client/OTRRoom.ts"],"sourcesContent":["import type { IRoom, IMessage, IUser } from '@rocket.chat/core-typings';\nimport { UserStatus } from '@rocket.chat/core-typings';\nimport { Random } from '@rocket.chat/random';\nimport EJSON from 'ejson';\nimport { Meteor } from 'meteor/meteor';\nimport { ReactiveVar } from 'meteor/reactive-var';\nimport { Tracker } from 'meteor/tracker';\n\nimport GenericModal from '../../../client/components/GenericModal';\nimport { imperativeModal } from '../../../client/lib/imperativeModal';\nimport type { UserPresence } from '../../../client/lib/presence';\nimport { Presence } from '../../../client/lib/presence';\nimport { dispatchToastMessage } from '../../../client/lib/toast';\nimport { getUidDirectMessage } from '../../../client/lib/utils/getUidDirectMessage';\nimport { goToRoomById } from '../../../client/lib/utils/goToRoomById';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\nimport type { IOnUserStreamData, IOTRAlgorithm, IOTRDecrypt, IOTRRoom } from '../lib/IOTR';\nimport { OtrRoomState } from '../lib/OtrRoomState';\nimport { otrSystemMessages } from '../lib/constants';\nimport {\n\tdecryptAES,\n\tderiveBits,\n\tdigest,\n\tencryptAES,\n\texportKey,\n\tgenerateKeyPair,\n\timportKey,\n\timportKeyRaw,\n\tjoinEncryptedData,\n} from '../lib/functions';\n\nexport class OTRRoom implements IOTRRoom {\n\tprivate _userId: string;\n\n\tprivate _roomId: string;\n\n\tprivate _keyPair: CryptoKeyPair | null;\n\n\tprivate _exportedPublicKey: JsonWebKey;\n\n\tprivate _sessionKey: CryptoKey | null;\n\n\tprivate _userOnlineComputation: Tracker.Computation;\n\n\tprivate peerId: string;\n\n\tprivate state: ReactiveVar<OtrRoomState> = new ReactiveVar(OtrRoomState.NOT_STARTED);\n\n\tprivate isFirstOTR: boolean;\n\n\tprivate onPresenceEventHook: (event: UserPresence | undefined) => void;\n\n\tprotected constructor(uid: IUser['_id'], rid: IRoom['_id'], peerId: IUser['_id']) {\n\t\tthis._userId = uid;\n\t\tthis._roomId = rid;\n\t\tthis._keyPair = null;\n\t\tthis._sessionKey = null;\n\t\tthis.peerId = peerId;\n\t\tthis.isFirstOTR = true;\n\t\tthis.onPresenceEventHook = this.onPresenceEvent.bind(this);\n\t}\n\n\tpublic static create(uid: IUser['_id'], rid: IRoom['_id']): OTRRoom | undefined {\n\t\tconst peerId = getUidDirectMessage(rid);\n\n\t\tif (!peerId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new OTRRoom(uid, rid, peerId);\n\t}\n\n\tgetPeerId(): string {\n\t\treturn this.peerId;\n\t}\n\n\tgetState(): OtrRoomState {\n\t\treturn this.state.get();\n\t}\n\n\tsetState(nextState: OtrRoomState): void {\n\t\tif (this.getState() === nextState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state.set(nextState);\n\t}\n\n\tasync handshake(refresh?: boolean): Promise<void> {\n\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\n\t\tawait this.generateKeyPair();\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'handshake',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t\trefresh,\n\t\t\t},\n\t\t]);\n\n\t\tif (refresh) {\n\t\t\tconst user = Meteor.user();\n\t\t\tif (!user) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\troomId: this._roomId,\n\t\t\t\ttype: otrSystemMessages.USER_REQUESTED_OTR_KEY_REFRESH,\n\t\t\t});\n\t\t\tthis.isFirstOTR = false;\n\t\t}\n\t}\n\n\tonPresenceEvent(event: UserPresence | undefined): void {\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\t\tif (event.status !== UserStatus.OFFLINE) {\n\t\t\treturn;\n\t\t}\n\t\tconsole.warn(`OTR Room ${this._roomId} ended because ${this.peerId} went offline`);\n\t\tthis.end();\n\n\t\timperativeModal.open({\n\t\t\tcomponent: GenericModal,\n\t\t\tprops: {\n\t\t\t\tvariant: 'warning',\n\t\t\t\ttitle: t('OTR'),\n\t\t\t\tchildren: t('OTR_Session_ended_other_user_went_offline', { username: event.username }),\n\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t},\n\t\t});\n\t}\n\n\t// Starts listening to other user's status changes and end OTR if any of the Users goes offline\n\t// this should be called in 2 places: on acknowledge (meaning user accepted OTR) or on establish (meaning user initiated OTR)\n\tlistenToUserStatus(): void {\n\t\tPresence.listen(this.peerId, this.onPresenceEventHook);\n\t}\n\n\tacknowledge(): void {\n\t\tvoid sdk.rest.post('/v1/statistics.telemetry', { params: [{ eventName: 'otrStats', timestamp: Date.now(), rid: this._roomId }] });\n\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'acknowledge',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t\tpublicKey: EJSON.stringify(this._exportedPublicKey),\n\t\t\t},\n\t\t]);\n\t}\n\n\tdeny(): void {\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.DECLINED);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'deny',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\tsoftReset(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t}\n\n\tend(): void {\n\t\tthis.isFirstOTR = true;\n\t\tthis.reset();\n\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\tPresence.stop(this.peerId, this.onPresenceEventHook);\n\t\tsdk.publish('notify-user', [\n\t\t\t`${this.peerId}/otr`,\n\t\t\t'end',\n\t\t\t{\n\t\t\t\troomId: this._roomId,\n\t\t\t\tuserId: this._userId,\n\t\t\t},\n\t\t]);\n\t}\n\n\treset(): void {\n\t\tthis._keyPair = null;\n\t\tthis._exportedPublicKey = {};\n\t\tthis._sessionKey = null;\n\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t}\n\n\tasync generateKeyPair(): Promise<void> {\n\t\tif (this._userOnlineComputation) {\n\t\t\tthis._userOnlineComputation.stop();\n\t\t}\n\n\t\tthis._userOnlineComputation = Tracker.autorun(() => {\n\t\t\tconst $room = document.querySelector(`#chat-window-${this._roomId}`);\n\t\t\tconst $title = $room?.querySelector('.rc-header__title');\n\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\tif ($room && $title && !$title.querySelector('.otr-icon')) {\n\t\t\t\t\t$title.prepend(\"<i class='otr-icon icon-key'></i>\");\n\t\t\t\t}\n\t\t\t} else if ($title) {\n\t\t\t\t$title.querySelector('.otr-icon')?.remove();\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\t// Generate an ephemeral key pair.\n\t\t\tthis._keyPair = await generateKeyPair();\n\n\t\t\tif (!this._keyPair.publicKey) {\n\t\t\t\tthrow new Error('Public key is not generated');\n\t\t\t}\n\n\t\t\tthis._exportedPublicKey = await exportKey(this._keyPair.publicKey);\n\n\t\t\t// Once we have generated new keys, it's safe to delete old messages\n\t\t\tvoid sdk.call('deleteOldOTRMessages', this._roomId);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync importPublicKey(publicKey: string): Promise<void> {\n\t\ttry {\n\t\t\tif (!this._keyPair) throw new Error('No key pair');\n\t\t\tconst publicKeyObject: JsonWebKey = EJSON.parse(publicKey);\n\t\t\tconst peerPublicKey = await importKey(publicKeyObject);\n\t\t\tconst ecdhObj: IOTRAlgorithm = {\n\t\t\t\tname: 'ECDH',\n\t\t\t\tnamedCurve: 'P-256',\n\t\t\t\tpublic: peerPublicKey,\n\t\t\t};\n\t\t\tconst bits = await deriveBits({ ecdhObj, _keyPair: this._keyPair });\n\t\t\tconst hashedBits = await digest(bits);\n\t\t\t// We truncate the hash to 128 bits.\n\t\t\tconst sessionKeyData = new Uint8Array(hashedBits).slice(0, 16);\n\t\t\t// Session key available.\n\t\t\tthis._sessionKey = await importKeyRaw(sessionKeyData);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync encryptText(data: string | Uint8Array): Promise<string> {\n\t\tif (typeof data === 'string') {\n\t\t\tdata = new TextEncoder().encode(EJSON.stringify({ text: data, ack: Random.id((Random.fraction() + 1) * 20) }));\n\t\t}\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available');\n\n\t\t\tconst iv = crypto.getRandomValues(new Uint8Array(12));\n\t\t\tconst encryptedData = await encryptAES({ iv, _sessionKey: this._sessionKey, data });\n\n\t\t\tconst output = joinEncryptedData({ encryptedData, iv });\n\n\t\t\treturn EJSON.stringify(output);\n\t\t} catch (e) {\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync encrypt(message: Pick<IMessage, '_id' | 'msg'>): Promise<string> {\n\t\ttry {\n\t\t\tconst data = new TextEncoder().encode(\n\t\t\t\tEJSON.stringify({\n\t\t\t\t\t_id: message._id,\n\t\t\t\t\ttext: message.msg,\n\t\t\t\t\tuserId: this._userId,\n\t\t\t\t\tack: Random.id((Random.fraction() + 1) * 20),\n\t\t\t\t\tts: new Date(),\n\t\t\t\t}),\n\t\t\t);\n\t\t\tconst enc = await this.encryptText(data);\n\t\t\treturn enc;\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error('encryption-error', 'Encryption error.');\n\t\t}\n\t}\n\n\tasync decrypt(message: string): Promise<IOTRDecrypt | string> {\n\t\ttry {\n\t\t\tif (!this._sessionKey) throw new Error('Session Key not available.');\n\n\t\t\tconst cipherText: Uint8Array = EJSON.parse(message);\n\t\t\tconst data = await decryptAES(cipherText, this._sessionKey);\n\t\t\tconst msgDecoded: IOTRDecrypt = EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(data)));\n\t\t\tif (msgDecoded && typeof msgDecoded === 'object') {\n\t\t\t\treturn msgDecoded;\n\t\t\t}\n\t\t\treturn message;\n\t\t} catch (e) {\n\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\tthis.setState(OtrRoomState.ERROR);\n\t\t\treturn message;\n\t\t}\n\t}\n\n\tasync onUserStream(type: string, data: IOnUserStreamData): Promise<void> {\n\t\tswitch (type) {\n\t\t\tcase 'handshake':\n\t\t\t\tlet timeout: NodeJS.Timeout;\n\n\t\t\t\tconst establishConnection = async (): Promise<void> => {\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHING);\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\t\tawait this.generateKeyPair();\n\t\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\t\t\t\t\t\tawait goToRoomById(data.roomId);\n\t\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\t\t\t\t\t\t\tthis.acknowledge();\n\t\t\t\t\t\t\tthis.listenToUserStatus();\n\n\t\t\t\t\t\t\tif (data.refresh) {\n\t\t\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\t\t\ttype: otrSystemMessages.USER_KEY_REFRESHED_SUCCESSFULLY,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t\t\tthrow new Meteor.Error('establish-connection-error', 'Establish connection error.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tconst closeOrCancelModal = (): void => {\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tthis.deny();\n\t\t\t\t\timperativeModal.close();\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(data.userId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.refresh && this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t/* \tWe have to check if there's an in progress handshake request because\n\t\t\t\t\t\t\tNotifications.notifyUser will sometimes dispatch 2 events */\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.REQUESTED) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setState(OtrRoomState.REQUESTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_wants_to_start_otr_Do_you_want_to_accept', {\n\t\t\t\t\t\t\t\t\tusername: obj.username,\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tconfirmText: t('Yes'),\n\t\t\t\t\t\t\t\tcancelText: t('No'),\n\t\t\t\t\t\t\t\tonClose: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonCancel: (): void => closeOrCancelModal(),\n\t\t\t\t\t\t\t\tonConfirm: async (): Promise<void> => {\n\t\t\t\t\t\t\t\t\tawait establishConnection();\n\t\t\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\ttimeout = setTimeout(() => {\n\t\t\t\t\t\t\tthis.setState(OtrRoomState.TIMEOUT);\n\t\t\t\t\t\t\timperativeModal.close();\n\t\t\t\t\t\t}, 10000);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'acknowledge':\n\t\t\t\ttry {\n\t\t\t\t\tif (!data.publicKey) throw new Error('Public key is not generated');\n\t\t\t\t\tawait this.importPublicKey(data.publicKey);\n\n\t\t\t\t\tthis.setState(OtrRoomState.ESTABLISHED);\n\n\t\t\t\t\tif (this.isFirstOTR) {\n\t\t\t\t\t\tthis.listenToUserStatus();\n\t\t\t\t\t\tawait sdk.rest.post('/v1/chat.otr', {\n\t\t\t\t\t\t\troomId: this._roomId,\n\t\t\t\t\t\t\ttype: otrSystemMessages.USER_JOINED_OTR,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.isFirstOTR = false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'deny':\n\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHING) {\n\t\t\t\t\tthis.reset();\n\t\t\t\t\tthis.setState(OtrRoomState.DECLINED);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'end':\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = await Presence.get(this.peerId);\n\t\t\t\t\tif (!obj?.username) {\n\t\t\t\t\t\tthrow new Meteor.Error('user-not-defined', 'User not defined.');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.getState() === OtrRoomState.ESTABLISHED) {\n\t\t\t\t\t\tthis.reset();\n\t\t\t\t\t\tthis.setState(OtrRoomState.NOT_STARTED);\n\t\t\t\t\t\timperativeModal.open({\n\t\t\t\t\t\t\tcomponent: GenericModal,\n\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\tvariant: 'warning',\n\t\t\t\t\t\t\t\ttitle: t('OTR'),\n\t\t\t\t\t\t\t\tchildren: t('Username_ended_the_OTR_session', { username: obj.username }),\n\t\t\t\t\t\t\t\tconfirmText: t('Ok'),\n\t\t\t\t\t\t\t\tonClose: imperativeModal.close,\n\t\t\t\t\t\t\t\tonConfirm: imperativeModal.close,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdispatchToastMessage({ type: 'error', message: e });\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2909f65dc2275f36dc7c5fb09344224410473cd6"}
