{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatAgentActivity.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatAgentActivity.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatAgentActivity.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatAgentActivity.ts","sourceRoot":"","sources":["server/models/raw/LivechatAgentActivity.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatAgentActivity, IServiceHistory, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { ILivechatAgentActivityModel } from '@rocket.chat/model-typings';\nimport moment from 'moment';\nimport type { AggregationCursor, Collection, Document, FindCursor, Db, ModifyResult, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\n\nexport class LivechatAgentActivityRaw extends BaseRaw<ILivechatAgentActivity> implements ILivechatAgentActivityModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatAgentActivity>>) {\n\t\tsuper(db, 'livechat_agent_activity', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { date: 1 } }, { key: { agentId: 1, date: 1 }, unique: true }];\n\t}\n\n\tfindOneByAgendIdAndDate(agentId: string, date: ILivechatAgentActivity['date']): Promise<ILivechatAgentActivity | null> {\n\t\treturn this.findOne({ agentId, date });\n\t}\n\n\tasync createOrUpdate(\n\t\tdata: Partial<Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStartedAt'>> = {},\n\t): Promise<ModifyResult<ILivechatAgentActivity> | undefined> {\n\t\tconst { date, agentId, lastStartedAt } = data;\n\n\t\tif (!date || !agentId) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ agentId, date },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tlastStoppedAt: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tlastStartedAt: lastStartedAt || new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdate,\n\t\t\t\t\tagentId,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tupdateLastStoppedAt({\n\t\tagentId,\n\t\tdate,\n\t\tlastStoppedAt,\n\t\tavailableTime,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStoppedAt' | 'availableTime'>): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$inc: { availableTime },\n\t\t\t$set: {\n\t\t\t\tlastStoppedAt,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateServiceHistory({\n\t\tagentId,\n\t\tdate,\n\t\tserviceHistory,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId'> & { serviceHistory: IServiceHistory }): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\tserviceHistory,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindOpenSessions(): FindCursor<ILivechatAgentActivity> {\n\t\tconst query = {\n\t\t\tlastStoppedAt: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAllAverageAvailableServiceTime({ date, departmentId }: { date: Date; departmentId?: string }): Promise<\n\t\t{\n\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t}[]\n\t> {\n\t\tconst match = { $match: { date } };\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: 'agentId',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsMatch = {\n\t\t\t$match: {\n\t\t\t\t'departments.departmentId': departmentId,\n\t\t\t},\n\t\t};\n\t\tconst sumAvailableTimeWithCurrentTime = {\n\t\t\t$sum: [{ $divide: [{ $subtract: [new Date(), '$lastStartedAt'] }, 1000] }, '$availableTime'],\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tallAvailableTimeInSeconds: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [{ $ifNull: ['$lastStoppedAt', false] }, '$availableTime', sumAvailableTimeWithCurrentTime],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\taverageAvailableServiceTimeInSeconds: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allAvailableTimeInSeconds', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst params = [match] as object[];\n\t\tif (departmentId && (departmentId !== 'undefined' || departmentId !== undefined)) {\n\t\t\tparams.push(lookup);\n\t\t\tparams.push(unwind);\n\t\t\tparams.push(departmentsMatch);\n\t\t}\n\t\tparams.push(group);\n\t\tparams.push(project);\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t\t}>(params, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t}\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount: true;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: false;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity>;\n\n\tfindAvailableServiceTimeHistory({\n\t\tstart,\n\t\tend,\n\t\tfullReport,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity> | AggregationCursor<{ total: number }> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tdate: {\n\t\t\t\t\t$gte: parseInt(moment(start).format('YYYYMMDD')),\n\t\t\t\t\t$lte: parseInt(moment(end).format('YYYYMMDD')),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$user._id', username: '$user.username' },\n\t\t\t\tserviceHistory: { $first: '$serviceHistory' },\n\t\t\t\tavailableTimeInSeconds: { $sum: '$availableTime' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tavailableTimeInSeconds: 1,\n\t\t\t\t...(fullReport && { serviceHistory: 1 }),\n\t\t\t},\n\t\t};\n\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params = [match, lookup, unwind, group, project, sort] as object[];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<ILivechatAgentActivity>(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatAgentActivity.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatAgentActivity.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatAgentActivity.ts","sourceRoot":"","sources":["server/models/raw/LivechatAgentActivity.ts"],"names":[],"mappings":"AAEA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAE/E,MAAM,OAAO,wBAAyB,SAAQ,OAA+B;IAC5E,YAAY,EAAM,EAAE,KAAmE;QACtF,KAAK,CAAC,EAAE,EAAE,yBAAyB,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED,YAAY;QACX,OAAO,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/E,CAAC;IAED,uBAAuB,CAAC,OAAe,EAAE,IAAoC;QAC5E,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,cAAc,CACnB,OAAoF,EAAE;QAEtF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;QAE9C,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACvB,OAAO;QACR,CAAC;QAED,OAAO,IAAI,CAAC,gBAAgB,CAC3B,EAAE,OAAO,EAAE,IAAI,EAAE,EACjB;YACC,MAAM,EAAE;gBACP,aAAa,EAAE,CAAC;aAChB;YACD,IAAI,EAAE;gBACL,aAAa,EAAE,aAAa,IAAI,IAAI,IAAI,EAAE;aAC1C;YACD,YAAY,EAAE;gBACb,IAAI;gBACJ,OAAO;aACP;SACD,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CAChB,CAAC;IACH,CAAC;IAED,mBAAmB,CAAC,EACnB,OAAO,EACP,IAAI,EACJ,aAAa,EACb,aAAa,GACyE;QACtF,MAAM,KAAK,GAAG;YACb,OAAO;YACP,IAAI;SACJ,CAAC;QACF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE,EAAE,aAAa,EAAE;YACvB,IAAI,EAAE;gBACL,aAAa;aACb;SACD,CAAC;QACF,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,oBAAoB,CAAC,EACpB,OAAO,EACP,IAAI,EACJ,cAAc,GAC0E;QACxF,MAAM,KAAK,GAAG;YACb,OAAO;YACP,IAAI;SACJ,CAAC;QACF,MAAM,MAAM,GAAG;YACd,SAAS,EAAE;gBACV,cAAc;aACd;SACD,CAAC;QACF,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,gBAAgB;QACf,MAAM,KAAK,GAAG;YACb,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SACjC,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,kCAAkC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAyC;QAK/F,MAAM,KAAK,GAAG,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC;QACnC,MAAM,MAAM,GAAG;YACd,OAAO,EAAE;gBACR,IAAI,EAAE,uCAAuC;gBAC7C,UAAU,EAAE,SAAS;gBACrB,YAAY,EAAE,SAAS;gBACvB,EAAE,EAAE,aAAa;aACjB;SACD,CAAC;QACF,MAAM,MAAM,GAAG;YACd,OAAO,EAAE;gBACR,IAAI,EAAE,cAAc;gBACpB,0BAA0B,EAAE,IAAI;aAChC;SACD,CAAC;QACF,MAAM,gBAAgB,GAAG;YACxB,MAAM,EAAE;gBACP,0BAA0B,EAAE,YAAY;aACxC;SACD,CAAC;QACF,MAAM,+BAA+B,GAAG;YACvC,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,gBAAgB,CAAC;SAC5F,CAAC;QACF,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,GAAG,EAAE,IAAI;gBACT,yBAAyB,EAAE;oBAC1B,IAAI,EAAE;wBACL,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,gBAAgB,EAAE,KAAK,CAAC,EAAE,EAAE,gBAAgB,EAAE,+BAA+B,CAAC;qBAClG;iBACD;gBACD,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;aAClB;SACD,CAAC;QAEF,MAAM,OAAO,GAAG;YACf,QAAQ,EAAE;gBACT,oCAAoC,EAAE;oBACrC,MAAM,EAAE;wBACP,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,CAAC,4BAA4B,EAAE,QAAQ,CAAC,EAAE,CAAC;qBACzF;iBACD;aACD;SACD,CAAC;QAEF,MAAM,MAAM,GAAG,CAAC,KAAK,CAAa,CAAC;QACnC,IAAI,YAAY,IAAI,CAAC,YAAY,KAAK,WAAW,IAAI,YAAY,KAAK,SAAS,CAAC,EAAE,CAAC;YAClF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAEP,MAAM,EAAE,EAAE,cAAc,EAAE,sBAAsB,EAAE,EAAE,CAAC;aACvD,OAAO,EAAE,CAAC;IACb,CAAC;IAkBD,+BAA+B,CAAC,EAC/B,KAAK,EACL,GAAG,EACH,UAAU,EACV,SAAS,GAAG,KAAK,EACjB,OAAO,GAAG,EAAE,GAOZ;QACA,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,IAAI,EAAE;oBACL,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBAChD,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBAC9C;aACD;SACD,CAAC;QACF,MAAM,MAAM,GAAG;YACd,OAAO,EAAE;gBACR,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,SAAS;gBACrB,YAAY,EAAE,KAAK;gBACnB,EAAE,EAAE,MAAM;aACV;SACD,CAAC;QACF,MAAM,MAAM,GAAG;YACd,OAAO,EAAE;gBACR,IAAI,EAAE,OAAO;aACb;SACD,CAAC;QACF,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,GAAG,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,QAAQ,EAAE,gBAAgB,EAAE;gBACrD,cAAc,EAAE,EAAE,MAAM,EAAE,iBAAiB,EAAE;gBAC7C,sBAAsB,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE;aAClD;SACD,CAAC;QACF,MAAM,OAAO,GAAG;YACf,QAAQ,EAAE;gBACT,GAAG,EAAE,CAAC;gBACN,QAAQ,EAAE,eAAe;gBACzB,sBAAsB,EAAE,CAAC;gBACzB,GAAG,CAAC,UAAU,IAAI,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;aACxC;SACD,CAAC;QAEF,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;QACxD,MAAM,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,CAAa,CAAC;QACzE,IAAI,SAAS,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAoB,MAAM,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QACxC,CAAC;QACD,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QACxC,CAAC;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAyB,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,cAAc,EAAE,sBAAsB,EAAE,EAAE,CAAC,CAAC;IAC7H,CAAC;CACD","sourcesContent":["import type { ILivechatAgentActivity, IServiceHistory, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { ILivechatAgentActivityModel } from '@rocket.chat/model-typings';\nimport moment from 'moment';\nimport type { AggregationCursor, Collection, Document, FindCursor, Db, ModifyResult, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\n\nexport class LivechatAgentActivityRaw extends BaseRaw<ILivechatAgentActivity> implements ILivechatAgentActivityModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatAgentActivity>>) {\n\t\tsuper(db, 'livechat_agent_activity', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { date: 1 } }, { key: { agentId: 1, date: 1 }, unique: true }];\n\t}\n\n\tfindOneByAgendIdAndDate(agentId: string, date: ILivechatAgentActivity['date']): Promise<ILivechatAgentActivity | null> {\n\t\treturn this.findOne({ agentId, date });\n\t}\n\n\tasync createOrUpdate(\n\t\tdata: Partial<Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStartedAt'>> = {},\n\t): Promise<ModifyResult<ILivechatAgentActivity> | undefined> {\n\t\tconst { date, agentId, lastStartedAt } = data;\n\n\t\tif (!date || !agentId) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ agentId, date },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tlastStoppedAt: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tlastStartedAt: lastStartedAt || new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdate,\n\t\t\t\t\tagentId,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tupdateLastStoppedAt({\n\t\tagentId,\n\t\tdate,\n\t\tlastStoppedAt,\n\t\tavailableTime,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStoppedAt' | 'availableTime'>): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$inc: { availableTime },\n\t\t\t$set: {\n\t\t\t\tlastStoppedAt,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateServiceHistory({\n\t\tagentId,\n\t\tdate,\n\t\tserviceHistory,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId'> & { serviceHistory: IServiceHistory }): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\tserviceHistory,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindOpenSessions(): FindCursor<ILivechatAgentActivity> {\n\t\tconst query = {\n\t\t\tlastStoppedAt: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAllAverageAvailableServiceTime({ date, departmentId }: { date: Date; departmentId?: string }): Promise<\n\t\t{\n\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t}[]\n\t> {\n\t\tconst match = { $match: { date } };\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: 'agentId',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsMatch = {\n\t\t\t$match: {\n\t\t\t\t'departments.departmentId': departmentId,\n\t\t\t},\n\t\t};\n\t\tconst sumAvailableTimeWithCurrentTime = {\n\t\t\t$sum: [{ $divide: [{ $subtract: [new Date(), '$lastStartedAt'] }, 1000] }, '$availableTime'],\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tallAvailableTimeInSeconds: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [{ $ifNull: ['$lastStoppedAt', false] }, '$availableTime', sumAvailableTimeWithCurrentTime],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\taverageAvailableServiceTimeInSeconds: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allAvailableTimeInSeconds', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst params = [match] as object[];\n\t\tif (departmentId && (departmentId !== 'undefined' || departmentId !== undefined)) {\n\t\t\tparams.push(lookup);\n\t\t\tparams.push(unwind);\n\t\t\tparams.push(departmentsMatch);\n\t\t}\n\t\tparams.push(group);\n\t\tparams.push(project);\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t\t}>(params, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t}\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount: true;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: false;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity>;\n\n\tfindAvailableServiceTimeHistory({\n\t\tstart,\n\t\tend,\n\t\tfullReport,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity> | AggregationCursor<{ total: number }> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tdate: {\n\t\t\t\t\t$gte: parseInt(moment(start).format('YYYYMMDD')),\n\t\t\t\t\t$lte: parseInt(moment(end).format('YYYYMMDD')),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$user._id', username: '$user.username' },\n\t\t\t\tserviceHistory: { $first: '$serviceHistory' },\n\t\t\t\tavailableTimeInSeconds: { $sum: '$availableTime' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tavailableTimeInSeconds: 1,\n\t\t\t\t...(fullReport && { serviceHistory: 1 }),\n\t\t\t},\n\t\t};\n\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params = [match, lookup, unwind, group, project, sort] as object[];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<ILivechatAgentActivity>(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatAgentActivityRaw: () => LivechatAgentActivityRaw\n    });\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 0);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 1);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatAgentActivityRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'livechat_agent_activity', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            date: 1\n          }\n        }, {\n          key: {\n            agentId: 1,\n            date: 1\n          },\n          unique: true\n        }];\n      }\n      findOneByAgendIdAndDate(agentId, date) {\n        return this.findOne({\n          agentId,\n          date\n        });\n      }\n      async createOrUpdate() {\n        let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const {\n          date,\n          agentId,\n          lastStartedAt\n        } = data;\n        if (!date || !agentId) {\n          return;\n        }\n        return this.findOneAndUpdate({\n          agentId,\n          date\n        }, {\n          $unset: {\n            lastStoppedAt: 1\n          },\n          $set: {\n            lastStartedAt: lastStartedAt || new Date()\n          },\n          $setOnInsert: {\n            date,\n            agentId\n          }\n        }, {\n          upsert: true\n        });\n      }\n      updateLastStoppedAt(_ref) {\n        let {\n          agentId,\n          date,\n          lastStoppedAt,\n          availableTime\n        } = _ref;\n        const query = {\n          agentId,\n          date\n        };\n        const update = {\n          $inc: {\n            availableTime\n          },\n          $set: {\n            lastStoppedAt\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      updateServiceHistory(_ref2) {\n        let {\n          agentId,\n          date,\n          serviceHistory\n        } = _ref2;\n        const query = {\n          agentId,\n          date\n        };\n        const update = {\n          $addToSet: {\n            serviceHistory\n          }\n        };\n        return this.updateMany(query, update);\n      }\n      findOpenSessions() {\n        const query = {\n          lastStoppedAt: {\n            $exists: false\n          }\n        };\n        return this.find(query);\n      }\n      findAllAverageAvailableServiceTime(_ref3) {\n        let {\n          date,\n          departmentId\n        } = _ref3;\n        const match = {\n          $match: {\n            date\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'rocketchat_livechat_department_agents',\n            localField: 'agentId',\n            foreignField: 'agentId',\n            as: 'departments'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$departments',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const departmentsMatch = {\n          $match: {\n            'departments.departmentId': departmentId\n          }\n        };\n        const sumAvailableTimeWithCurrentTime = {\n          $sum: [{\n            $divide: [{\n              $subtract: [new Date(), '$lastStartedAt']\n            }, 1000]\n          }, '$availableTime']\n        };\n        const group = {\n          $group: {\n            _id: null,\n            allAvailableTimeInSeconds: {\n              $sum: {\n                $cond: [{\n                  $ifNull: ['$lastStoppedAt', false]\n                }, '$availableTime', sumAvailableTimeWithCurrentTime]\n              }\n            },\n            rooms: {\n              $sum: 1\n            }\n          }\n        };\n        const project = {\n          $project: {\n            averageAvailableServiceTimeInSeconds: {\n              $trunc: {\n                $cond: [{\n                  $eq: ['$rooms', 0]\n                }, 0, {\n                  $divide: ['$allAvailableTimeInSeconds', '$rooms']\n                }]\n              }\n            }\n          }\n        };\n        const params = [match];\n        if (departmentId && (departmentId !== 'undefined' || departmentId !== undefined)) {\n          params.push(lookup);\n          params.push(unwind);\n          params.push(departmentsMatch);\n        }\n        params.push(group);\n        params.push(project);\n        return this.col.aggregate(params, {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      findAvailableServiceTimeHistory(_ref4) {\n        let {\n          start,\n          end,\n          fullReport,\n          onlyCount = false,\n          options = {}\n        } = _ref4;\n        const match = {\n          $match: {\n            date: {\n              $gte: parseInt(moment(start).format('YYYYMMDD')),\n              $lte: parseInt(moment(end).format('YYYYMMDD'))\n            }\n          }\n        };\n        const lookup = {\n          $lookup: {\n            from: 'users',\n            localField: 'agentId',\n            foreignField: '_id',\n            as: 'user'\n          }\n        };\n        const unwind = {\n          $unwind: {\n            path: '$user'\n          }\n        };\n        const group = {\n          $group: {\n            _id: {\n              _id: '$user._id',\n              username: '$user.username'\n            },\n            serviceHistory: {\n              $first: '$serviceHistory'\n            },\n            availableTimeInSeconds: {\n              $sum: '$availableTime'\n            }\n          }\n        };\n        const project = {\n          $project: _objectSpread({\n            _id: 0,\n            username: '$_id.username',\n            availableTimeInSeconds: 1\n          }, fullReport && {\n            serviceHistory: 1\n          })\n        };\n        const sort = {\n          $sort: options.sort || {\n            username: 1\n          }\n        };\n        const params = [match, lookup, unwind, group, project, sort];\n        if (onlyCount) {\n          params.push({\n            $count: 'total'\n          });\n          return this.col.aggregate(params);\n        }\n        if (options.offset) {\n          params.push({\n            $skip: options.offset\n          });\n        }\n        if (options.count) {\n          params.push({\n            $limit: options.count\n          });\n        }\n        return this.col.aggregate(params, {\n          allowDiskUse: true,\n          readPreference: readSecondaryPreferred()\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatAgentActivityRaw","moment","BaseRaw","readSecondaryPreferred","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","date","agentId","unique","findOneByAgendIdAndDate","findOne","createOrUpdate","data","arguments","length","undefined","lastStartedAt","findOneAndUpdate","$unset","lastStoppedAt","$set","Date","$setOnInsert","upsert","updateLastStoppedAt","_ref","availableTime","query","update","$inc","updateMany","updateServiceHistory","_ref2","serviceHistory","$addToSet","findOpenSessions","$exists","find","findAllAverageAvailableServiceTime","_ref3","departmentId","match","$match","lookup","$lookup","from","localField","foreignField","as","unwind","$unwind","path","preserveNullAndEmptyArrays","departmentsMatch","sumAvailableTimeWithCurrentTime","$sum","$divide","$subtract","group","$group","_id","allAvailableTimeInSeconds","$cond","$ifNull","rooms","project","$project","averageAvailableServiceTimeInSeconds","$trunc","$eq","params","push","col","aggregate","readPreference","toArray","findAvailableServiceTimeHistory","_ref4","start","end","fullReport","onlyCount","options","$gte","parseInt","format","$lte","username","$first","availableTimeInSeconds","sort","$sort","$count","offset","$skip","count","$limit","allowDiskUse","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatAgentActivity.ts"],"sourcesContent":["import type { ILivechatAgentActivity, IServiceHistory, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { ILivechatAgentActivityModel } from '@rocket.chat/model-typings';\nimport moment from 'moment';\nimport type { AggregationCursor, Collection, Document, FindCursor, Db, ModifyResult, IndexDescription, UpdateResult } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\n\nexport class LivechatAgentActivityRaw extends BaseRaw<ILivechatAgentActivity> implements ILivechatAgentActivityModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatAgentActivity>>) {\n\t\tsuper(db, 'livechat_agent_activity', trash);\n\t}\n\n\tmodelIndexes(): IndexDescription[] {\n\t\treturn [{ key: { date: 1 } }, { key: { agentId: 1, date: 1 }, unique: true }];\n\t}\n\n\tfindOneByAgendIdAndDate(agentId: string, date: ILivechatAgentActivity['date']): Promise<ILivechatAgentActivity | null> {\n\t\treturn this.findOne({ agentId, date });\n\t}\n\n\tasync createOrUpdate(\n\t\tdata: Partial<Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStartedAt'>> = {},\n\t): Promise<ModifyResult<ILivechatAgentActivity> | undefined> {\n\t\tconst { date, agentId, lastStartedAt } = data;\n\n\t\tif (!date || !agentId) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.findOneAndUpdate(\n\t\t\t{ agentId, date },\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tlastStoppedAt: 1,\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tlastStartedAt: lastStartedAt || new Date(),\n\t\t\t\t},\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tdate,\n\t\t\t\t\tagentId,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tupdateLastStoppedAt({\n\t\tagentId,\n\t\tdate,\n\t\tlastStoppedAt,\n\t\tavailableTime,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId' | 'lastStoppedAt' | 'availableTime'>): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$inc: { availableTime },\n\t\t\t$set: {\n\t\t\t\tlastStoppedAt,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tupdateServiceHistory({\n\t\tagentId,\n\t\tdate,\n\t\tserviceHistory,\n\t}: Pick<ILivechatAgentActivity, 'date' | 'agentId'> & { serviceHistory: IServiceHistory }): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tagentId,\n\t\t\tdate,\n\t\t};\n\t\tconst update = {\n\t\t\t$addToSet: {\n\t\t\t\tserviceHistory,\n\t\t\t},\n\t\t};\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tfindOpenSessions(): FindCursor<ILivechatAgentActivity> {\n\t\tconst query = {\n\t\t\tlastStoppedAt: { $exists: false },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tfindAllAverageAvailableServiceTime({ date, departmentId }: { date: Date; departmentId?: string }): Promise<\n\t\t{\n\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t}[]\n\t> {\n\t\tconst match = { $match: { date } };\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'rocketchat_livechat_department_agents',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: 'agentId',\n\t\t\t\tas: 'departments',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$departments',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\t\tconst departmentsMatch = {\n\t\t\t$match: {\n\t\t\t\t'departments.departmentId': departmentId,\n\t\t\t},\n\t\t};\n\t\tconst sumAvailableTimeWithCurrentTime = {\n\t\t\t$sum: [{ $divide: [{ $subtract: [new Date(), '$lastStartedAt'] }, 1000] }, '$availableTime'],\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: null,\n\t\t\t\tallAvailableTimeInSeconds: {\n\t\t\t\t\t$sum: {\n\t\t\t\t\t\t$cond: [{ $ifNull: ['$lastStoppedAt', false] }, '$availableTime', sumAvailableTimeWithCurrentTime],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trooms: { $sum: 1 },\n\t\t\t},\n\t\t};\n\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\taverageAvailableServiceTimeInSeconds: {\n\t\t\t\t\t$trunc: {\n\t\t\t\t\t\t$cond: [{ $eq: ['$rooms', 0] }, 0, { $divide: ['$allAvailableTimeInSeconds', '$rooms'] }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst params = [match] as object[];\n\t\tif (departmentId && (departmentId !== 'undefined' || departmentId !== undefined)) {\n\t\t\tparams.push(lookup);\n\t\t\tparams.push(unwind);\n\t\t\tparams.push(departmentsMatch);\n\t\t}\n\t\tparams.push(group);\n\t\tparams.push(project);\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\taverageAvailableServiceTimeInSeconds: number;\n\t\t\t}>(params, { readPreference: readSecondaryPreferred() })\n\t\t\t.toArray();\n\t}\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount: true;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<{ total: number }>;\n\n\tfindAvailableServiceTimeHistory(p: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: false;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity>;\n\n\tfindAvailableServiceTimeHistory({\n\t\tstart,\n\t\tend,\n\t\tfullReport,\n\t\tonlyCount = false,\n\t\toptions = {},\n\t}: {\n\t\tstart: string;\n\t\tend: string;\n\t\tfullReport: boolean;\n\t\tonlyCount?: boolean;\n\t\toptions?: { sort?: Record<string, number>; offset?: number; count?: number };\n\t}): AggregationCursor<ILivechatAgentActivity> | AggregationCursor<{ total: number }> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tdate: {\n\t\t\t\t\t$gte: parseInt(moment(start).format('YYYYMMDD')),\n\t\t\t\t\t$lte: parseInt(moment(end).format('YYYYMMDD')),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst lookup = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'agentId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: 'user',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$user',\n\t\t\t},\n\t\t};\n\t\tconst group = {\n\t\t\t$group: {\n\t\t\t\t_id: { _id: '$user._id', username: '$user.username' },\n\t\t\t\tserviceHistory: { $first: '$serviceHistory' },\n\t\t\t\tavailableTimeInSeconds: { $sum: '$availableTime' },\n\t\t\t},\n\t\t};\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\tusername: '$_id.username',\n\t\t\t\tavailableTimeInSeconds: 1,\n\t\t\t\t...(fullReport && { serviceHistory: 1 }),\n\t\t\t},\n\t\t};\n\n\t\tconst sort = { $sort: options.sort || { username: 1 } };\n\t\tconst params = [match, lookup, unwind, group, project, sort] as object[];\n\t\tif (onlyCount) {\n\t\t\tparams.push({ $count: 'total' });\n\t\t\treturn this.col.aggregate<{ total: number }>(params);\n\t\t}\n\t\tif (options.offset) {\n\t\t\tparams.push({ $skip: options.offset });\n\t\t}\n\t\tif (options.count) {\n\t\t\tparams.push({ $limit: options.count });\n\t\t}\n\t\treturn this.col.aggregate<ILivechatAgentActivity>(params, { allowDiskUse: true, readPreference: readSecondaryPreferred() });\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"bb6ba762b4ff602bb8743b9bce51df4fd8c83390"}
