{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/QueueManager.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/lib/QueueManager.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/QueueManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/QueueManager.ts","sourceRoot":"","sources":["app/livechat/server/lib/QueueManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatDepartment, IOmnichannelRoomInfo, IOmnichannelRoomExtraData } from '@rocket.chat/core-typings';\nimport {\n\tLivechatInquiryStatus,\n\ttype ILivechatInquiryRecord,\n\ttype ILivechatVisitor,\n\ttype IOmnichannelRoom,\n\ttype SelectedAgent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatDepartment, LivechatDepartmentAgents, LivechatInquiry, LivechatRooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { dispatchInquiryPosition } from '../../../../ee/app/livechat-enterprise/server/lib/Helper';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnSettingChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport { createLivechatRoom, createLivechatInquiry, allowAgentSkipQueue } from './Helper';\nimport { Livechat } from './LivechatTyped';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\nimport { getInquirySortMechanismSetting } from './settings';\n\nconst logger = new Logger('QueueManager');\n\nexport const saveQueueInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\tif (!queuedInquiry) {\n\t\treturn;\n\t}\n\n\tawait callbacks.run('livechat.afterInquiryQueued', queuedInquiry);\n\n\tvoid notifyOnLivechatInquiryChanged(queuedInquiry, 'updated', {\n\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\tqueuedAt: new Date(),\n\t\ttakenAt: undefined,\n\t});\n};\n\n/**\n *  @deprecated\n */\nexport const queueInquiry = async (inquiry: ILivechatInquiryRecord, defaultAgent?: SelectedAgent) => {\n\tconst room = await LivechatRooms.findOneById(inquiry.rid, { projection: { v: 1 } });\n\n\tif (!room) {\n\t\tawait saveQueueInquiry(inquiry);\n\t\treturn;\n\t}\n\n\treturn QueueManager.requeueInquiry(inquiry, room, defaultAgent);\n};\n\nconst getDepartment = async (department: string): Promise<string | undefined> => {\n\tif (!department) {\n\t\treturn;\n\t}\n\n\tif (await LivechatDepartmentAgents.checkOnlineForDepartment(department)) {\n\t\treturn department;\n\t}\n\n\tconst departmentDocument = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(\n\t\tdepartment,\n\t\t{\n\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t},\n\t);\n\n\tif (departmentDocument?.fallbackForwardDepartment) {\n\t\treturn getDepartment(departmentDocument.fallbackForwardDepartment);\n\t}\n};\n\nexport class QueueManager {\n\tstatic async requeueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent) {\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tlogger.error({ msg: 'MAC limit reached, not routing inquiry', inquiry });\n\t\t\t// We'll queue these inquiries so when new license is applied, they just start rolling again\n\t\t\t// Minimizing disruption\n\t\t\tawait saveQueueInquiry(inquiry);\n\t\t\treturn;\n\t\t}\n\n\t\tconst inquiryAgent = await RoutingManager.delegateAgent(defaultAgent, inquiry);\n\t\tlogger.debug(`Delegating inquiry with id ${inquiry._id} to agent ${defaultAgent?.username}`);\n\t\tconst dbInquiry = await callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent);\n\n\t\tif (!dbInquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tif (dbInquiry.status === 'ready') {\n\t\t\tlogger.debug(`Inquiry with id ${inquiry._id} is ready. Delegating to agent ${inquiryAgent?.username}`);\n\t\t\treturn RoutingManager.delegateInquiry(dbInquiry, inquiryAgent, undefined, room);\n\t\t}\n\t}\n\n\tprivate static fnQueueInquiryStatus: (typeof QueueManager)['getInquiryStatus'] | undefined;\n\n\tpublic static patchInquiryStatus(fn: (typeof QueueManager)['getInquiryStatus']) {\n\t\tthis.fnQueueInquiryStatus = fn;\n\t}\n\n\tstatic async getInquiryStatus({ room, agent }: { room: IOmnichannelRoom; agent?: SelectedAgent }): Promise<LivechatInquiryStatus> {\n\t\tif (this.fnQueueInquiryStatus) {\n\t\t\treturn this.fnQueueInquiryStatus({ room, agent });\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (settings.get('Livechat_waiting_queue')) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn LivechatInquiryStatus.READY;\n\t\t}\n\n\t\tif (!agent || !(await allowAgentSkipQueue(agent))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\treturn LivechatInquiryStatus.READY;\n\t}\n\n\tstatic async queueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent | null) {\n\t\tif (inquiry.status === 'ready') {\n\t\t\tlogger.debug({ msg: 'Inquiry is ready. Delegating', inquiry, defaultAgent });\n\t\t\treturn RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, room);\n\t\t}\n\n\t\tawait callbacks.run('livechat.afterInquiryQueued', inquiry);\n\n\t\tvoid callbacks.run('livechat.chatQueued', room);\n\n\t\tawait this.dispatchInquiryQueued(inquiry, room, defaultAgent);\n\t}\n\n\tstatic async requestRoom({\n\t\tguest,\n\t\trid = Random.id(),\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t\textraData: { customFields, ...extraData } = {},\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\trid?: string;\n\t\tmessage?: string;\n\t\troomInfo: IOmnichannelRoomInfo;\n\t\tagent?: SelectedAgent;\n\t\textraData?: IOmnichannelRoomExtraData;\n\t}) {\n\t\tlogger.debug(`Requesting a room for guest ${guest._id}`);\n\t\tcheck(\n\t\t\tguest,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tactivity: Match.Maybe([String]),\n\t\t\t}),\n\t\t);\n\n\t\tconst defaultAgent =\n\t\t\t(await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\t\tdepartment: guest.department,\n\t\t\t})) || undefined;\n\n\t\tconst department = guest.department && (await getDepartment(guest.department));\n\n\t\t/**\n\t\t * we have 4 cases here\n\t\t * 1. agent and no department\n\t\t * 2. no agent and no department\n\t\t * 3. no agent and department\n\t\t * 4. agent and department informed\n\t\t *\n\t\t * in case 1, we check if the agent is online\n\t\t * in case 2, we check if there is at least one online agent in the whole service\n\t\t * in case 3, we check if there is at least one online agent in the department\n\t\t *\n\t\t * the case 4 is weird, but we are not throwing an error, just because the application works in some mysterious way\n\t\t * we don't have explicitly defined what to do in this case so we just kept the old behavior\n\t\t * it seems that agent has priority over department\n\t\t * but some cases department is handled before agent\n\t\t *\n\t\t */\n\n\t\tif (!settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tif (agent && !defaultAgent) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!defaultAgent && guest.department && !department) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!agent && !guest.department && !(await Livechat.checkOnlineAgents())) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\t\t}\n\n\t\tconst name = guest.name || guest.username;\n\n\t\tconst room = await createLivechatRoom(rid, name, { ...guest, ...(department && { department }) }, roomInfo, {\n\t\t\t...extraData,\n\t\t\t...(Boolean(customFields) && { customFields }),\n\t\t});\n\n\t\tif (!room) {\n\t\t\tlogger.error(`Room for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tlogger.debug(`Room for visitor ${guest._id} created with id ${room._id}`);\n\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tinitialStatus: await this.getInquiryStatus({ room, agent: defaultAgent }),\n\t\t\tguest,\n\t\t\tmessage,\n\t\t\textraData: { ...extraData, source: roomInfo.source },\n\t\t});\n\n\t\tif (!inquiry) {\n\t\t\tlogger.error(`Inquiry for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomStarted, room);\n\n\t\tconst livechatSetting = await LivechatRooms.updateRoomCount();\n\t\tif (livechatSetting) {\n\t\t\tvoid notifyOnSettingChanged(livechatSetting);\n\t\t}\n\n\t\tconst newRoom = (await this.queueInquiry(inquiry, room, defaultAgent)) ?? (await LivechatRooms.findOneById(rid));\n\t\tif (!newRoom) {\n\t\t\tlogger.error(`Room with id ${rid} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\n\t\tif (\n\t\t\t!newRoom.servedBy &&\n\t\t\tsettings.get('Livechat_waiting_queue') &&\n\t\t\tsettings.get('Omnichannel_calculate_dispatch_service_queue_statistics')\n\t\t) {\n\t\t\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\t\t\tinquiryId: inquiry._id,\n\t\t\t\tdepartment,\n\t\t\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t\t\t});\n\n\t\t\tif (inq) {\n\t\t\t\tvoid dispatchInquiryPosition(inq);\n\t\t\t}\n\t\t}\n\n\t\treturn newRoom;\n\t}\n\n\tstatic async unarchiveRoom(archivedRoom: IOmnichannelRoom) {\n\t\tif (!archivedRoom) {\n\t\t\tthrow new Error('no-room-to-unarchive');\n\t\t}\n\n\t\tconst { _id: rid, open, closedAt, fname: name, servedBy, v, departmentId: department, lastMessage: message, source } = archivedRoom;\n\n\t\tif (!rid || !closedAt || !!open) {\n\t\t\treturn archivedRoom;\n\t\t}\n\n\t\tlogger.debug(`Attempting to unarchive room with id ${rid}`);\n\n\t\tconst oldInquiry = await LivechatInquiry.findOneByRoomId<Pick<ILivechatInquiryRecord, '_id'>>(rid, { projection: { _id: 1 } });\n\t\tif (oldInquiry) {\n\t\t\tlogger.debug(`Removing old inquiry (${oldInquiry._id}) for room ${rid}`);\n\t\t\tawait LivechatInquiry.removeByRoomId(rid);\n\t\t\tvoid notifyOnLivechatInquiryChangedById(oldInquiry._id, 'removed');\n\t\t}\n\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),\n\t\t};\n\n\t\tlet defaultAgent: SelectedAgent | undefined;\n\t\tif (servedBy?.username && (await Users.findOneOnlineAgentByUserList(servedBy.username))) {\n\t\t\tdefaultAgent = { agentId: servedBy._id, username: servedBy.username };\n\t\t}\n\n\t\tawait LivechatRooms.unarchiveOneById(rid);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tguest,\n\t\t\tmessage: message?.msg,\n\t\t\textraData: { source },\n\t\t});\n\t\tif (!inquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tawait this.requeueInquiry(inquiry, room, defaultAgent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued`);\n\n\t\treturn room;\n\t}\n\n\tprivate static dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, agent?: SelectedAgent | null) => {\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\t\tconst { department, rid, v } = inquiry;\n\t\t// Alert only the online agents of the queued request\n\t\tconst onlineAgents = await getOnlineAgents(department, agent);\n\n\t\tif (!onlineAgents) {\n\t\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst notificationUserName = v && (v.name || v.username);\n\n\t\tfor await (const agent of onlineAgents) {\n\t\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\t\tawait sendNotification({\n\t\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\t\tsubscription: {\n\t\t\t\t\trid,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t},\n\t\t\t\t\treceiver: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactive,\n\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tname: '',\n\t\t\t\t},\n\t\t\t\tsender: v,\n\t\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\t\thasReplyToThread: false,\n\t\t\t\tdisableAllMessageNotifications: false,\n\t\t\t\thasMentionToHere: false,\n\t\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\t\troom: { ...room, name: i18n.t('New_chat_in_queue', { lng: language }) },\n\t\t\t\tmentionIds: [],\n\t\t\t});\n\t\t}\n\t};\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/lib/QueueManager.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/lib/QueueManager.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/lib/QueueManager.ts","sourceRoot":"","sources":["app/livechat/server/lib/QueueManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatDepartment, IOmnichannelRoomInfo, IOmnichannelRoomExtraData } from '@rocket.chat/core-typings';\nimport {\n\tLivechatInquiryStatus,\n\ttype ILivechatInquiryRecord,\n\ttype ILivechatVisitor,\n\ttype IOmnichannelRoom,\n\ttype SelectedAgent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatDepartment, LivechatDepartmentAgents, LivechatInquiry, LivechatRooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { dispatchInquiryPosition } from '../../../../ee/app/livechat-enterprise/server/lib/Helper';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnSettingChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport { createLivechatRoom, createLivechatInquiry, allowAgentSkipQueue } from './Helper';\nimport { Livechat } from './LivechatTyped';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\nimport { getInquirySortMechanismSetting } from './settings';\n\nconst logger = new Logger('QueueManager');\n\nexport const saveQueueInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\tif (!queuedInquiry) {\n\t\treturn;\n\t}\n\n\tawait callbacks.run('livechat.afterInquiryQueued', queuedInquiry);\n\n\tvoid notifyOnLivechatInquiryChanged(queuedInquiry, 'updated', {\n\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\tqueuedAt: new Date(),\n\t\ttakenAt: undefined,\n\t});\n};\n\n/**\n *  @deprecated\n */\nexport const queueInquiry = async (inquiry: ILivechatInquiryRecord, defaultAgent?: SelectedAgent) => {\n\tconst room = await LivechatRooms.findOneById(inquiry.rid, { projection: { v: 1 } });\n\n\tif (!room) {\n\t\tawait saveQueueInquiry(inquiry);\n\t\treturn;\n\t}\n\n\treturn QueueManager.requeueInquiry(inquiry, room, defaultAgent);\n};\n\nconst getDepartment = async (department: string): Promise<string | undefined> => {\n\tif (!department) {\n\t\treturn;\n\t}\n\n\tif (await LivechatDepartmentAgents.checkOnlineForDepartment(department)) {\n\t\treturn department;\n\t}\n\n\tconst departmentDocument = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(\n\t\tdepartment,\n\t\t{\n\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t},\n\t);\n\n\tif (departmentDocument?.fallbackForwardDepartment) {\n\t\treturn getDepartment(departmentDocument.fallbackForwardDepartment);\n\t}\n};\n\nexport class QueueManager {\n\tstatic async requeueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent) {\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tlogger.error({ msg: 'MAC limit reached, not routing inquiry', inquiry });\n\t\t\t// We'll queue these inquiries so when new license is applied, they just start rolling again\n\t\t\t// Minimizing disruption\n\t\t\tawait saveQueueInquiry(inquiry);\n\t\t\treturn;\n\t\t}\n\n\t\tconst inquiryAgent = await RoutingManager.delegateAgent(defaultAgent, inquiry);\n\t\tlogger.debug(`Delegating inquiry with id ${inquiry._id} to agent ${defaultAgent?.username}`);\n\t\tconst dbInquiry = await callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent);\n\n\t\tif (!dbInquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tif (dbInquiry.status === 'ready') {\n\t\t\tlogger.debug(`Inquiry with id ${inquiry._id} is ready. Delegating to agent ${inquiryAgent?.username}`);\n\t\t\treturn RoutingManager.delegateInquiry(dbInquiry, inquiryAgent, undefined, room);\n\t\t}\n\t}\n\n\tprivate static fnQueueInquiryStatus: (typeof QueueManager)['getInquiryStatus'] | undefined;\n\n\tpublic static patchInquiryStatus(fn: (typeof QueueManager)['getInquiryStatus']) {\n\t\tthis.fnQueueInquiryStatus = fn;\n\t}\n\n\tstatic async getInquiryStatus({ room, agent }: { room: IOmnichannelRoom; agent?: SelectedAgent }): Promise<LivechatInquiryStatus> {\n\t\tif (this.fnQueueInquiryStatus) {\n\t\t\treturn this.fnQueueInquiryStatus({ room, agent });\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (settings.get('Livechat_waiting_queue')) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn LivechatInquiryStatus.READY;\n\t\t}\n\n\t\tif (!agent || !(await allowAgentSkipQueue(agent))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\treturn LivechatInquiryStatus.READY;\n\t}\n\n\tstatic async queueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent | null) {\n\t\tif (inquiry.status === 'ready') {\n\t\t\tlogger.debug({ msg: 'Inquiry is ready. Delegating', inquiry, defaultAgent });\n\t\t\treturn RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, room);\n\t\t}\n\n\t\tawait callbacks.run('livechat.afterInquiryQueued', inquiry);\n\n\t\tvoid callbacks.run('livechat.chatQueued', room);\n\n\t\tawait this.dispatchInquiryQueued(inquiry, room, defaultAgent);\n\t}\n\n\tstatic async requestRoom({\n\t\tguest,\n\t\trid = Random.id(),\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t\textraData: { customFields, ...extraData } = {},\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\trid?: string;\n\t\tmessage?: string;\n\t\troomInfo: IOmnichannelRoomInfo;\n\t\tagent?: SelectedAgent;\n\t\textraData?: IOmnichannelRoomExtraData;\n\t}) {\n\t\tlogger.debug(`Requesting a room for guest ${guest._id}`);\n\t\tcheck(\n\t\t\tguest,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tactivity: Match.Maybe([String]),\n\t\t\t}),\n\t\t);\n\n\t\tconst defaultAgent =\n\t\t\t(await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\t\tdepartment: guest.department,\n\t\t\t})) || undefined;\n\n\t\tconst department = guest.department && (await getDepartment(guest.department));\n\n\t\t/**\n\t\t * we have 4 cases here\n\t\t * 1. agent and no department\n\t\t * 2. no agent and no department\n\t\t * 3. no agent and department\n\t\t * 4. agent and department informed\n\t\t *\n\t\t * in case 1, we check if the agent is online\n\t\t * in case 2, we check if there is at least one online agent in the whole service\n\t\t * in case 3, we check if there is at least one online agent in the department\n\t\t *\n\t\t * the case 4 is weird, but we are not throwing an error, just because the application works in some mysterious way\n\t\t * we don't have explicitly defined what to do in this case so we just kept the old behavior\n\t\t * it seems that agent has priority over department\n\t\t * but some cases department is handled before agent\n\t\t *\n\t\t */\n\n\t\tif (!settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tif (agent && !defaultAgent) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!defaultAgent && guest.department && !department) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!agent && !guest.department && !(await Livechat.checkOnlineAgents())) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\t\t}\n\n\t\tconst name = guest.name || guest.username;\n\n\t\tconst room = await createLivechatRoom(rid, name, { ...guest, ...(department && { department }) }, roomInfo, {\n\t\t\t...extraData,\n\t\t\t...(Boolean(customFields) && { customFields }),\n\t\t});\n\n\t\tif (!room) {\n\t\t\tlogger.error(`Room for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tlogger.debug(`Room for visitor ${guest._id} created with id ${room._id}`);\n\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tinitialStatus: await this.getInquiryStatus({ room, agent: defaultAgent }),\n\t\t\tguest,\n\t\t\tmessage,\n\t\t\textraData: { ...extraData, source: roomInfo.source },\n\t\t});\n\n\t\tif (!inquiry) {\n\t\t\tlogger.error(`Inquiry for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomStarted, room);\n\n\t\tconst livechatSetting = await LivechatRooms.updateRoomCount();\n\t\tif (livechatSetting) {\n\t\t\tvoid notifyOnSettingChanged(livechatSetting);\n\t\t}\n\n\t\tconst newRoom = (await this.queueInquiry(inquiry, room, defaultAgent)) ?? (await LivechatRooms.findOneById(rid));\n\t\tif (!newRoom) {\n\t\t\tlogger.error(`Room with id ${rid} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\n\t\tif (\n\t\t\t!newRoom.servedBy &&\n\t\t\tsettings.get('Livechat_waiting_queue') &&\n\t\t\tsettings.get('Omnichannel_calculate_dispatch_service_queue_statistics')\n\t\t) {\n\t\t\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\t\t\tinquiryId: inquiry._id,\n\t\t\t\tdepartment,\n\t\t\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t\t\t});\n\n\t\t\tif (inq) {\n\t\t\t\tvoid dispatchInquiryPosition(inq);\n\t\t\t}\n\t\t}\n\n\t\treturn newRoom;\n\t}\n\n\tstatic async unarchiveRoom(archivedRoom: IOmnichannelRoom) {\n\t\tif (!archivedRoom) {\n\t\t\tthrow new Error('no-room-to-unarchive');\n\t\t}\n\n\t\tconst { _id: rid, open, closedAt, fname: name, servedBy, v, departmentId: department, lastMessage: message, source } = archivedRoom;\n\n\t\tif (!rid || !closedAt || !!open) {\n\t\t\treturn archivedRoom;\n\t\t}\n\n\t\tlogger.debug(`Attempting to unarchive room with id ${rid}`);\n\n\t\tconst oldInquiry = await LivechatInquiry.findOneByRoomId<Pick<ILivechatInquiryRecord, '_id'>>(rid, { projection: { _id: 1 } });\n\t\tif (oldInquiry) {\n\t\t\tlogger.debug(`Removing old inquiry (${oldInquiry._id}) for room ${rid}`);\n\t\t\tawait LivechatInquiry.removeByRoomId(rid);\n\t\t\tvoid notifyOnLivechatInquiryChangedById(oldInquiry._id, 'removed');\n\t\t}\n\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),\n\t\t};\n\n\t\tlet defaultAgent: SelectedAgent | undefined;\n\t\tif (servedBy?.username && (await Users.findOneOnlineAgentByUserList(servedBy.username))) {\n\t\t\tdefaultAgent = { agentId: servedBy._id, username: servedBy.username };\n\t\t}\n\n\t\tawait LivechatRooms.unarchiveOneById(rid);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tguest,\n\t\t\tmessage: message?.msg,\n\t\t\textraData: { source },\n\t\t});\n\t\tif (!inquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tawait this.requeueInquiry(inquiry, room, defaultAgent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued`);\n\n\t\treturn room;\n\t}\n\n\tprivate static dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, agent?: SelectedAgent | null) => {\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\t\tconst { department, rid, v } = inquiry;\n\t\t// Alert only the online agents of the queued request\n\t\tconst onlineAgents = await getOnlineAgents(department, agent);\n\n\t\tif (!onlineAgents) {\n\t\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst notificationUserName = v && (v.name || v.username);\n\n\t\tfor await (const agent of onlineAgents) {\n\t\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\t\tawait sendNotification({\n\t\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\t\tsubscription: {\n\t\t\t\t\trid,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t},\n\t\t\t\t\treceiver: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactive,\n\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tname: '',\n\t\t\t\t},\n\t\t\t\tsender: v,\n\t\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\t\thasReplyToThread: false,\n\t\t\t\tdisableAllMessageNotifications: false,\n\t\t\t\thasMentionToHere: false,\n\t\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\t\troom: { ...room, name: i18n.t('New_chat_in_queue', { lng: language }) },\n\t\t\t\tmentionIds: [],\n\t\t\t});\n\t\t}\n\t};\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    const _excluded = [\"customFields\"];\n    module.export({\n      saveQueueInquiry: () => saveQueueInquiry,\n      queueInquiry: () => queueInquiry,\n      QueueManager: () => QueueManager\n    });\n    let Apps, AppEvents;\n    module.link(\"@rocket.chat/apps\", {\n      Apps(v) {\n        Apps = v;\n      },\n      AppEvents(v) {\n        AppEvents = v;\n      }\n    }, 0);\n    let Omnichannel;\n    module.link(\"@rocket.chat/core-services\", {\n      Omnichannel(v) {\n        Omnichannel = v;\n      }\n    }, 1);\n    let LivechatInquiryStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatInquiryStatus(v) {\n        LivechatInquiryStatus = v;\n      }\n    }, 2);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 3);\n    let LivechatDepartment, LivechatDepartmentAgents, LivechatInquiry, LivechatRooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      LivechatDepartment(v) {\n        LivechatDepartment = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 4);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 5);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 6);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 7);\n    let dispatchInquiryPosition;\n    module.link(\"../../../../ee/app/livechat-enterprise/server/lib/Helper\", {\n      dispatchInquiryPosition(v) {\n        dispatchInquiryPosition = v;\n      }\n    }, 8);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 9);\n    let sendNotification;\n    module.link(\"../../../lib/server\", {\n      sendNotification(v) {\n        sendNotification = v;\n      }\n    }, 10);\n    let notifyOnLivechatInquiryChangedById, notifyOnLivechatInquiryChanged, notifyOnSettingChanged;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnLivechatInquiryChangedById(v) {\n        notifyOnLivechatInquiryChangedById = v;\n      },\n      notifyOnLivechatInquiryChanged(v) {\n        notifyOnLivechatInquiryChanged = v;\n      },\n      notifyOnSettingChanged(v) {\n        notifyOnSettingChanged = v;\n      }\n    }, 11);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 12);\n    let i18n;\n    module.link(\"../../../utils/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 13);\n    let createLivechatRoom, createLivechatInquiry, allowAgentSkipQueue;\n    module.link(\"./Helper\", {\n      createLivechatRoom(v) {\n        createLivechatRoom = v;\n      },\n      createLivechatInquiry(v) {\n        createLivechatInquiry = v;\n      },\n      allowAgentSkipQueue(v) {\n        allowAgentSkipQueue = v;\n      }\n    }, 14);\n    let Livechat;\n    module.link(\"./LivechatTyped\", {\n      Livechat(v) {\n        Livechat = v;\n      }\n    }, 15);\n    let RoutingManager;\n    module.link(\"./RoutingManager\", {\n      RoutingManager(v) {\n        RoutingManager = v;\n      }\n    }, 16);\n    let getOnlineAgents;\n    module.link(\"./getOnlineAgents\", {\n      getOnlineAgents(v) {\n        getOnlineAgents = v;\n      }\n    }, 17);\n    let getInquirySortMechanismSetting;\n    module.link(\"./settings\", {\n      getInquirySortMechanismSetting(v) {\n        getInquirySortMechanismSetting = v;\n      }\n    }, 18);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const logger = new Logger('QueueManager');\n    const saveQueueInquiry = async inquiry => {\n      const queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n      if (!queuedInquiry) {\n        return;\n      }\n      await callbacks.run('livechat.afterInquiryQueued', queuedInquiry);\n      void notifyOnLivechatInquiryChanged(queuedInquiry, 'updated', {\n        status: LivechatInquiryStatus.QUEUED,\n        queuedAt: new Date(),\n        takenAt: undefined\n      });\n    };\n    const queueInquiry = async (inquiry, defaultAgent) => {\n      const room = await LivechatRooms.findOneById(inquiry.rid, {\n        projection: {\n          v: 1\n        }\n      });\n      if (!room) {\n        await saveQueueInquiry(inquiry);\n        return;\n      }\n      return QueueManager.requeueInquiry(inquiry, room, defaultAgent);\n    };\n    const getDepartment = async department => {\n      if (!department) {\n        return;\n      }\n      if (await LivechatDepartmentAgents.checkOnlineForDepartment(department)) {\n        return department;\n      }\n      const departmentDocument = await LivechatDepartment.findOneById(department, {\n        projection: {\n          fallbackForwardDepartment: 1\n        }\n      });\n      if (departmentDocument !== null && departmentDocument !== void 0 && departmentDocument.fallbackForwardDepartment) {\n        return getDepartment(departmentDocument.fallbackForwardDepartment);\n      }\n    };\n    class QueueManager {\n      static async requeueInquiry(inquiry, room, defaultAgent) {\n        if (!(await Omnichannel.isWithinMACLimit(room))) {\n          logger.error({\n            msg: 'MAC limit reached, not routing inquiry',\n            inquiry\n          });\n          // We'll queue these inquiries so when new license is applied, they just start rolling again\n          // Minimizing disruption\n          await saveQueueInquiry(inquiry);\n          return;\n        }\n        const inquiryAgent = await RoutingManager.delegateAgent(defaultAgent, inquiry);\n        logger.debug(\"Delegating inquiry with id \".concat(inquiry._id, \" to agent \").concat(defaultAgent === null || defaultAgent === void 0 ? void 0 : defaultAgent.username));\n        const dbInquiry = await callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent);\n        if (!dbInquiry) {\n          throw new Error('inquiry-not-found');\n        }\n        if (dbInquiry.status === 'ready') {\n          logger.debug(\"Inquiry with id \".concat(inquiry._id, \" is ready. Delegating to agent \").concat(inquiryAgent === null || inquiryAgent === void 0 ? void 0 : inquiryAgent.username));\n          return RoutingManager.delegateInquiry(dbInquiry, inquiryAgent, undefined, room);\n        }\n      }\n      static patchInquiryStatus(fn) {\n        this.fnQueueInquiryStatus = fn;\n      }\n      static async getInquiryStatus(_ref) {\n        var _RoutingManager$getCo;\n        let {\n          room,\n          agent\n        } = _ref;\n        if (this.fnQueueInquiryStatus) {\n          return this.fnQueueInquiryStatus({\n            room,\n            agent\n          });\n        }\n        if (!(await Omnichannel.isWithinMACLimit(room))) {\n          return LivechatInquiryStatus.QUEUED;\n        }\n        if (settings.get('Livechat_waiting_queue')) {\n          return LivechatInquiryStatus.QUEUED;\n        }\n        if ((_RoutingManager$getCo = RoutingManager.getConfig()) !== null && _RoutingManager$getCo !== void 0 && _RoutingManager$getCo.autoAssignAgent) {\n          return LivechatInquiryStatus.READY;\n        }\n        if (!agent || !(await allowAgentSkipQueue(agent))) {\n          return LivechatInquiryStatus.QUEUED;\n        }\n        return LivechatInquiryStatus.READY;\n      }\n      static async queueInquiry(inquiry, room, defaultAgent) {\n        if (inquiry.status === 'ready') {\n          logger.debug({\n            msg: 'Inquiry is ready. Delegating',\n            inquiry,\n            defaultAgent\n          });\n          return RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, room);\n        }\n        await callbacks.run('livechat.afterInquiryQueued', inquiry);\n        void callbacks.run('livechat.chatQueued', room);\n        await this.dispatchInquiryQueued(inquiry, room, defaultAgent);\n      }\n      static async requestRoom(_ref2) {\n        var _Apps$self, _await$this$queueInqu;\n        let {\n            guest,\n            rid = Random.id(),\n            message,\n            roomInfo,\n            agent,\n            extraData: {\n              customFields\n            } = {}\n          } = _ref2,\n          extraData = _objectWithoutProperties(_ref2.extraData, _excluded);\n        logger.debug(\"Requesting a room for guest \".concat(guest._id));\n        check(guest, Match.ObjectIncluding({\n          _id: String,\n          username: String,\n          status: Match.Maybe(String),\n          department: Match.Maybe(String),\n          name: Match.Maybe(String),\n          activity: Match.Maybe([String])\n        }));\n        const defaultAgent = (await callbacks.run('livechat.beforeDelegateAgent', agent, {\n          department: guest.department\n        })) || undefined;\n        const department = guest.department && (await getDepartment(guest.department));\n        /**\n         * we have 4 cases here\n         * 1. agent and no department\n         * 2. no agent and no department\n         * 3. no agent and department\n         * 4. agent and department informed\n         *\n         * in case 1, we check if the agent is online\n         * in case 2, we check if there is at least one online agent in the whole service\n         * in case 3, we check if there is at least one online agent in the department\n         *\n         * the case 4 is weird, but we are not throwing an error, just because the application works in some mysterious way\n         * we don't have explicitly defined what to do in this case so we just kept the old behavior\n         * it seems that agent has priority over department\n         * but some cases department is handled before agent\n         *\n         */\n        if (!settings.get('Livechat_accept_chats_with_no_agents')) {\n          if (agent && !defaultAgent) {\n            throw new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n          }\n          if (!defaultAgent && guest.department && !department) {\n            throw new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n          }\n          if (!agent && !guest.department && !(await Livechat.checkOnlineAgents())) {\n            throw new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n          }\n        }\n        const name = guest.name || guest.username;\n        const room = await createLivechatRoom(rid, name, _objectSpread(_objectSpread({}, guest), department && {\n          department\n        }), roomInfo, _objectSpread(_objectSpread({}, extraData), Boolean(customFields) && {\n          customFields\n        }));\n        if (!room) {\n          logger.error(\"Room for visitor \".concat(guest._id, \" not found\"));\n          throw new Error('room-not-found');\n        }\n        logger.debug(\"Room for visitor \".concat(guest._id, \" created with id \").concat(room._id));\n        const inquiry = await createLivechatInquiry({\n          rid,\n          name,\n          initialStatus: await this.getInquiryStatus({\n            room,\n            agent: defaultAgent\n          }),\n          guest,\n          message,\n          extraData: _objectSpread(_objectSpread({}, extraData), {}, {\n            source: roomInfo.source\n          })\n        });\n        if (!inquiry) {\n          logger.error(\"Inquiry for visitor \".concat(guest._id, \" not found\"));\n          throw new Error('inquiry-not-found');\n        }\n        void ((_Apps$self = Apps.self) === null || _Apps$self === void 0 ? void 0 : _Apps$self.triggerEvent(AppEvents.IPostLivechatRoomStarted, room));\n        const livechatSetting = await LivechatRooms.updateRoomCount();\n        if (livechatSetting) {\n          void notifyOnSettingChanged(livechatSetting);\n        }\n        const newRoom = (_await$this$queueInqu = await this.queueInquiry(inquiry, room, defaultAgent)) !== null && _await$this$queueInqu !== void 0 ? _await$this$queueInqu : await LivechatRooms.findOneById(rid);\n        if (!newRoom) {\n          logger.error(\"Room with id \".concat(rid, \" not found\"));\n          throw new Error('room-not-found');\n        }\n        if (!newRoom.servedBy && settings.get('Livechat_waiting_queue') && settings.get('Omnichannel_calculate_dispatch_service_queue_statistics')) {\n          const [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n            inquiryId: inquiry._id,\n            department,\n            queueSortBy: getInquirySortMechanismSetting()\n          });\n          if (inq) {\n            void dispatchInquiryPosition(inq);\n          }\n        }\n        return newRoom;\n      }\n      static async unarchiveRoom(archivedRoom) {\n        if (!archivedRoom) {\n          throw new Error('no-room-to-unarchive');\n        }\n        const {\n          _id: rid,\n          open,\n          closedAt,\n          fname: name,\n          servedBy,\n          v,\n          departmentId: department,\n          lastMessage: message,\n          source\n        } = archivedRoom;\n        if (!rid || !closedAt || !!open) {\n          return archivedRoom;\n        }\n        logger.debug(\"Attempting to unarchive room with id \".concat(rid));\n        const oldInquiry = await LivechatInquiry.findOneByRoomId(rid, {\n          projection: {\n            _id: 1\n          }\n        });\n        if (oldInquiry) {\n          logger.debug(\"Removing old inquiry (\".concat(oldInquiry._id, \") for room \").concat(rid));\n          await LivechatInquiry.removeByRoomId(rid);\n          void notifyOnLivechatInquiryChangedById(oldInquiry._id, 'removed');\n        }\n        const guest = _objectSpread(_objectSpread({}, v), department && {\n          department\n        });\n        let defaultAgent;\n        if (servedBy !== null && servedBy !== void 0 && servedBy.username && (await Users.findOneOnlineAgentByUserList(servedBy.username))) {\n          defaultAgent = {\n            agentId: servedBy._id,\n            username: servedBy.username\n          };\n        }\n        await LivechatRooms.unarchiveOneById(rid);\n        const room = await LivechatRooms.findOneById(rid);\n        if (!room) {\n          throw new Error('room-not-found');\n        }\n        const inquiry = await createLivechatInquiry({\n          rid,\n          name,\n          guest,\n          message: message === null || message === void 0 ? void 0 : message.msg,\n          extraData: {\n            source\n          }\n        });\n        if (!inquiry) {\n          throw new Error('inquiry-not-found');\n        }\n        await this.requeueInquiry(inquiry, room, defaultAgent);\n        logger.debug(\"Inquiry \".concat(inquiry._id, \" queued\"));\n        return room;\n      }\n    }\n    QueueManager.fnQueueInquiryStatus = void 0;\n    QueueManager.dispatchInquiryQueued = async (inquiry, room, agent) => {\n      var _RoutingManager$getCo2;\n      if ((_RoutingManager$getCo2 = RoutingManager.getConfig()) !== null && _RoutingManager$getCo2 !== void 0 && _RoutingManager$getCo2.autoAssignAgent) {\n        return;\n      }\n      logger.debug(\"Notifying agents of new inquiry \".concat(inquiry._id, \" queued\"));\n      const {\n        department,\n        rid,\n        v\n      } = inquiry;\n      // Alert only the online agents of the queued request\n      const onlineAgents = await getOnlineAgents(department, agent);\n      if (!onlineAgents) {\n        logger.debug('Cannot notify agents of queued inquiry. No online agents found');\n        return;\n      }\n      const notificationUserName = v && (v.name || v.username);\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(onlineAgents), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const agent = _step.value;\n          {\n            const {\n              _id,\n              active,\n              emails,\n              language,\n              status,\n              statusConnection,\n              username\n            } = agent;\n            await sendNotification({\n              // fake a subscription in order to make use of the function defined above\n              subscription: {\n                rid,\n                u: {\n                  _id\n                },\n                receiver: [{\n                  active,\n                  emails,\n                  language,\n                  status,\n                  statusConnection,\n                  username\n                }],\n                name: ''\n              },\n              sender: v,\n              hasMentionToAll: true,\n              // consider all agents to be in the room\n              hasReplyToThread: false,\n              disableAllMessageNotifications: false,\n              hasMentionToHere: false,\n              message: {\n                _id: '',\n                u: v,\n                msg: ''\n              },\n              // we should use server's language for this type of messages instead of user's\n              notificationMessage: i18n.t('User_started_a_new_conversation', {\n                username: notificationUserName,\n                lng: language\n              }),\n              room: _objectSpread(_objectSpread({}, room), {}, {\n                name: i18n.t('New_chat_in_queue', {\n                  lng: language\n                })\n              }),\n              mentionIds: []\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_asyncIterator","_excluded","export","saveQueueInquiry","queueInquiry","QueueManager","Apps","AppEvents","Omnichannel","LivechatInquiryStatus","Logger","LivechatDepartment","LivechatDepartmentAgents","LivechatInquiry","LivechatRooms","Users","Random","Match","check","Meteor","dispatchInquiryPosition","callbacks","sendNotification","notifyOnLivechatInquiryChangedById","notifyOnLivechatInquiryChanged","notifyOnSettingChanged","settings","i18n","createLivechatRoom","createLivechatInquiry","allowAgentSkipQueue","Livechat","RoutingManager","getOnlineAgents","getInquirySortMechanismSetting","__reifyWaitForDeps__","logger","inquiry","queuedInquiry","_id","run","status","QUEUED","queuedAt","Date","takenAt","undefined","defaultAgent","room","findOneById","rid","projection","requeueInquiry","getDepartment","department","checkOnlineForDepartment","departmentDocument","fallbackForwardDepartment","isWithinMACLimit","error","msg","inquiryAgent","delegateAgent","debug","concat","username","dbInquiry","Error","delegateInquiry","patchInquiryStatus","fn","fnQueueInquiryStatus","getInquiryStatus","_ref","_RoutingManager$getCo","agent","get","getConfig","autoAssignAgent","READY","dispatchInquiryQueued","requestRoom","_ref2","_Apps$self","_await$this$queueInqu","guest","id","message","roomInfo","extraData","customFields","ObjectIncluding","String","Maybe","name","activity","checkOnlineAgents","Boolean","initialStatus","source","self","triggerEvent","IPostLivechatRoomStarted","livechatSetting","updateRoomCount","newRoom","servedBy","inq","getCurrentSortedQueueAsync","inquiryId","queueSortBy","unarchiveRoom","archivedRoom","open","closedAt","fname","departmentId","lastMessage","oldInquiry","findOneByRoomId","removeByRoomId","findOneOnlineAgentByUserList","agentId","unarchiveOneById","_RoutingManager$getCo2","onlineAgents","notificationUserName","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","active","emails","language","statusConnection","subscription","u","receiver","sender","hasMentionToAll","hasReplyToThread","disableAllMessageNotifications","hasMentionToHere","notificationMessage","t","lng","mentionIds","err","return","__reify_async_result__","_reifyError","async"],"sources":["app/livechat/server/lib/QueueManager.ts"],"sourcesContent":["import { Apps, AppEvents } from '@rocket.chat/apps';\nimport { Omnichannel } from '@rocket.chat/core-services';\nimport type { ILivechatDepartment, IOmnichannelRoomInfo, IOmnichannelRoomExtraData } from '@rocket.chat/core-typings';\nimport {\n\tLivechatInquiryStatus,\n\ttype ILivechatInquiryRecord,\n\ttype ILivechatVisitor,\n\ttype IOmnichannelRoom,\n\ttype SelectedAgent,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { LivechatDepartment, LivechatDepartmentAgents, LivechatInquiry, LivechatRooms, Users } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { dispatchInquiryPosition } from '../../../../ee/app/livechat-enterprise/server/lib/Helper';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { sendNotification } from '../../../lib/server';\nimport {\n\tnotifyOnLivechatInquiryChangedById,\n\tnotifyOnLivechatInquiryChanged,\n\tnotifyOnSettingChanged,\n} from '../../../lib/server/lib/notifyListener';\nimport { settings } from '../../../settings/server';\nimport { i18n } from '../../../utils/lib/i18n';\nimport { createLivechatRoom, createLivechatInquiry, allowAgentSkipQueue } from './Helper';\nimport { Livechat } from './LivechatTyped';\nimport { RoutingManager } from './RoutingManager';\nimport { getOnlineAgents } from './getOnlineAgents';\nimport { getInquirySortMechanismSetting } from './settings';\n\nconst logger = new Logger('QueueManager');\n\nexport const saveQueueInquiry = async (inquiry: ILivechatInquiryRecord) => {\n\tconst queuedInquiry = await LivechatInquiry.queueInquiry(inquiry._id);\n\tif (!queuedInquiry) {\n\t\treturn;\n\t}\n\n\tawait callbacks.run('livechat.afterInquiryQueued', queuedInquiry);\n\n\tvoid notifyOnLivechatInquiryChanged(queuedInquiry, 'updated', {\n\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\tqueuedAt: new Date(),\n\t\ttakenAt: undefined,\n\t});\n};\n\n/**\n *  @deprecated\n */\nexport const queueInquiry = async (inquiry: ILivechatInquiryRecord, defaultAgent?: SelectedAgent) => {\n\tconst room = await LivechatRooms.findOneById(inquiry.rid, { projection: { v: 1 } });\n\n\tif (!room) {\n\t\tawait saveQueueInquiry(inquiry);\n\t\treturn;\n\t}\n\n\treturn QueueManager.requeueInquiry(inquiry, room, defaultAgent);\n};\n\nconst getDepartment = async (department: string): Promise<string | undefined> => {\n\tif (!department) {\n\t\treturn;\n\t}\n\n\tif (await LivechatDepartmentAgents.checkOnlineForDepartment(department)) {\n\t\treturn department;\n\t}\n\n\tconst departmentDocument = await LivechatDepartment.findOneById<Pick<ILivechatDepartment, '_id' | 'fallbackForwardDepartment'>>(\n\t\tdepartment,\n\t\t{\n\t\t\tprojection: { fallbackForwardDepartment: 1 },\n\t\t},\n\t);\n\n\tif (departmentDocument?.fallbackForwardDepartment) {\n\t\treturn getDepartment(departmentDocument.fallbackForwardDepartment);\n\t}\n};\n\nexport class QueueManager {\n\tstatic async requeueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent) {\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\tlogger.error({ msg: 'MAC limit reached, not routing inquiry', inquiry });\n\t\t\t// We'll queue these inquiries so when new license is applied, they just start rolling again\n\t\t\t// Minimizing disruption\n\t\t\tawait saveQueueInquiry(inquiry);\n\t\t\treturn;\n\t\t}\n\n\t\tconst inquiryAgent = await RoutingManager.delegateAgent(defaultAgent, inquiry);\n\t\tlogger.debug(`Delegating inquiry with id ${inquiry._id} to agent ${defaultAgent?.username}`);\n\t\tconst dbInquiry = await callbacks.run('livechat.beforeRouteChat', inquiry, inquiryAgent);\n\n\t\tif (!dbInquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tif (dbInquiry.status === 'ready') {\n\t\t\tlogger.debug(`Inquiry with id ${inquiry._id} is ready. Delegating to agent ${inquiryAgent?.username}`);\n\t\t\treturn RoutingManager.delegateInquiry(dbInquiry, inquiryAgent, undefined, room);\n\t\t}\n\t}\n\n\tprivate static fnQueueInquiryStatus: (typeof QueueManager)['getInquiryStatus'] | undefined;\n\n\tpublic static patchInquiryStatus(fn: (typeof QueueManager)['getInquiryStatus']) {\n\t\tthis.fnQueueInquiryStatus = fn;\n\t}\n\n\tstatic async getInquiryStatus({ room, agent }: { room: IOmnichannelRoom; agent?: SelectedAgent }): Promise<LivechatInquiryStatus> {\n\t\tif (this.fnQueueInquiryStatus) {\n\t\t\treturn this.fnQueueInquiryStatus({ room, agent });\n\t\t}\n\n\t\tif (!(await Omnichannel.isWithinMACLimit(room))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (settings.get('Livechat_waiting_queue')) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn LivechatInquiryStatus.READY;\n\t\t}\n\n\t\tif (!agent || !(await allowAgentSkipQueue(agent))) {\n\t\t\treturn LivechatInquiryStatus.QUEUED;\n\t\t}\n\n\t\treturn LivechatInquiryStatus.READY;\n\t}\n\n\tstatic async queueInquiry(inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, defaultAgent?: SelectedAgent | null) {\n\t\tif (inquiry.status === 'ready') {\n\t\t\tlogger.debug({ msg: 'Inquiry is ready. Delegating', inquiry, defaultAgent });\n\t\t\treturn RoutingManager.delegateInquiry(inquiry, defaultAgent, undefined, room);\n\t\t}\n\n\t\tawait callbacks.run('livechat.afterInquiryQueued', inquiry);\n\n\t\tvoid callbacks.run('livechat.chatQueued', room);\n\n\t\tawait this.dispatchInquiryQueued(inquiry, room, defaultAgent);\n\t}\n\n\tstatic async requestRoom({\n\t\tguest,\n\t\trid = Random.id(),\n\t\tmessage,\n\t\troomInfo,\n\t\tagent,\n\t\textraData: { customFields, ...extraData } = {},\n\t}: {\n\t\tguest: ILivechatVisitor;\n\t\trid?: string;\n\t\tmessage?: string;\n\t\troomInfo: IOmnichannelRoomInfo;\n\t\tagent?: SelectedAgent;\n\t\textraData?: IOmnichannelRoomExtraData;\n\t}) {\n\t\tlogger.debug(`Requesting a room for guest ${guest._id}`);\n\t\tcheck(\n\t\t\tguest,\n\t\t\tMatch.ObjectIncluding({\n\t\t\t\t_id: String,\n\t\t\t\tusername: String,\n\t\t\t\tstatus: Match.Maybe(String),\n\t\t\t\tdepartment: Match.Maybe(String),\n\t\t\t\tname: Match.Maybe(String),\n\t\t\t\tactivity: Match.Maybe([String]),\n\t\t\t}),\n\t\t);\n\n\t\tconst defaultAgent =\n\t\t\t(await callbacks.run('livechat.beforeDelegateAgent', agent, {\n\t\t\t\tdepartment: guest.department,\n\t\t\t})) || undefined;\n\n\t\tconst department = guest.department && (await getDepartment(guest.department));\n\n\t\t/**\n\t\t * we have 4 cases here\n\t\t * 1. agent and no department\n\t\t * 2. no agent and no department\n\t\t * 3. no agent and department\n\t\t * 4. agent and department informed\n\t\t *\n\t\t * in case 1, we check if the agent is online\n\t\t * in case 2, we check if there is at least one online agent in the whole service\n\t\t * in case 3, we check if there is at least one online agent in the department\n\t\t *\n\t\t * the case 4 is weird, but we are not throwing an error, just because the application works in some mysterious way\n\t\t * we don't have explicitly defined what to do in this case so we just kept the old behavior\n\t\t * it seems that agent has priority over department\n\t\t * but some cases department is handled before agent\n\t\t *\n\t\t */\n\n\t\tif (!settings.get('Livechat_accept_chats_with_no_agents')) {\n\t\t\tif (agent && !defaultAgent) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!defaultAgent && guest.department && !department) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\n\t\t\tif (!agent && !guest.department && !(await Livechat.checkOnlineAgents())) {\n\t\t\t\tthrow new Meteor.Error('no-agent-online', 'Sorry, no online agents');\n\t\t\t}\n\t\t}\n\n\t\tconst name = guest.name || guest.username;\n\n\t\tconst room = await createLivechatRoom(rid, name, { ...guest, ...(department && { department }) }, roomInfo, {\n\t\t\t...extraData,\n\t\t\t...(Boolean(customFields) && { customFields }),\n\t\t});\n\n\t\tif (!room) {\n\t\t\tlogger.error(`Room for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tlogger.debug(`Room for visitor ${guest._id} created with id ${room._id}`);\n\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tinitialStatus: await this.getInquiryStatus({ room, agent: defaultAgent }),\n\t\t\tguest,\n\t\t\tmessage,\n\t\t\textraData: { ...extraData, source: roomInfo.source },\n\t\t});\n\n\t\tif (!inquiry) {\n\t\t\tlogger.error(`Inquiry for visitor ${guest._id} not found`);\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tvoid Apps.self?.triggerEvent(AppEvents.IPostLivechatRoomStarted, room);\n\n\t\tconst livechatSetting = await LivechatRooms.updateRoomCount();\n\t\tif (livechatSetting) {\n\t\t\tvoid notifyOnSettingChanged(livechatSetting);\n\t\t}\n\n\t\tconst newRoom = (await this.queueInquiry(inquiry, room, defaultAgent)) ?? (await LivechatRooms.findOneById(rid));\n\t\tif (!newRoom) {\n\t\t\tlogger.error(`Room with id ${rid} not found`);\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\n\t\tif (\n\t\t\t!newRoom.servedBy &&\n\t\t\tsettings.get('Livechat_waiting_queue') &&\n\t\t\tsettings.get('Omnichannel_calculate_dispatch_service_queue_statistics')\n\t\t) {\n\t\t\tconst [inq] = await LivechatInquiry.getCurrentSortedQueueAsync({\n\t\t\t\tinquiryId: inquiry._id,\n\t\t\t\tdepartment,\n\t\t\t\tqueueSortBy: getInquirySortMechanismSetting(),\n\t\t\t});\n\n\t\t\tif (inq) {\n\t\t\t\tvoid dispatchInquiryPosition(inq);\n\t\t\t}\n\t\t}\n\n\t\treturn newRoom;\n\t}\n\n\tstatic async unarchiveRoom(archivedRoom: IOmnichannelRoom) {\n\t\tif (!archivedRoom) {\n\t\t\tthrow new Error('no-room-to-unarchive');\n\t\t}\n\n\t\tconst { _id: rid, open, closedAt, fname: name, servedBy, v, departmentId: department, lastMessage: message, source } = archivedRoom;\n\n\t\tif (!rid || !closedAt || !!open) {\n\t\t\treturn archivedRoom;\n\t\t}\n\n\t\tlogger.debug(`Attempting to unarchive room with id ${rid}`);\n\n\t\tconst oldInquiry = await LivechatInquiry.findOneByRoomId<Pick<ILivechatInquiryRecord, '_id'>>(rid, { projection: { _id: 1 } });\n\t\tif (oldInquiry) {\n\t\t\tlogger.debug(`Removing old inquiry (${oldInquiry._id}) for room ${rid}`);\n\t\t\tawait LivechatInquiry.removeByRoomId(rid);\n\t\t\tvoid notifyOnLivechatInquiryChangedById(oldInquiry._id, 'removed');\n\t\t}\n\n\t\tconst guest = {\n\t\t\t...v,\n\t\t\t...(department && { department }),\n\t\t};\n\n\t\tlet defaultAgent: SelectedAgent | undefined;\n\t\tif (servedBy?.username && (await Users.findOneOnlineAgentByUserList(servedBy.username))) {\n\t\t\tdefaultAgent = { agentId: servedBy._id, username: servedBy.username };\n\t\t}\n\n\t\tawait LivechatRooms.unarchiveOneById(rid);\n\t\tconst room = await LivechatRooms.findOneById(rid);\n\t\tif (!room) {\n\t\t\tthrow new Error('room-not-found');\n\t\t}\n\t\tconst inquiry = await createLivechatInquiry({\n\t\t\trid,\n\t\t\tname,\n\t\t\tguest,\n\t\t\tmessage: message?.msg,\n\t\t\textraData: { source },\n\t\t});\n\t\tif (!inquiry) {\n\t\t\tthrow new Error('inquiry-not-found');\n\t\t}\n\n\t\tawait this.requeueInquiry(inquiry, room, defaultAgent);\n\t\tlogger.debug(`Inquiry ${inquiry._id} queued`);\n\n\t\treturn room;\n\t}\n\n\tprivate static dispatchInquiryQueued = async (inquiry: ILivechatInquiryRecord, room: IOmnichannelRoom, agent?: SelectedAgent | null) => {\n\t\tif (RoutingManager.getConfig()?.autoAssignAgent) {\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(`Notifying agents of new inquiry ${inquiry._id} queued`);\n\n\t\tconst { department, rid, v } = inquiry;\n\t\t// Alert only the online agents of the queued request\n\t\tconst onlineAgents = await getOnlineAgents(department, agent);\n\n\t\tif (!onlineAgents) {\n\t\t\tlogger.debug('Cannot notify agents of queued inquiry. No online agents found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst notificationUserName = v && (v.name || v.username);\n\n\t\tfor await (const agent of onlineAgents) {\n\t\t\tconst { _id, active, emails, language, status, statusConnection, username } = agent;\n\t\t\tawait sendNotification({\n\t\t\t\t// fake a subscription in order to make use of the function defined above\n\t\t\t\tsubscription: {\n\t\t\t\t\trid,\n\t\t\t\t\tu: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t},\n\t\t\t\t\treceiver: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tactive,\n\t\t\t\t\t\t\temails,\n\t\t\t\t\t\t\tlanguage,\n\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\tstatusConnection,\n\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tname: '',\n\t\t\t\t},\n\t\t\t\tsender: v,\n\t\t\t\thasMentionToAll: true, // consider all agents to be in the room\n\t\t\t\thasReplyToThread: false,\n\t\t\t\tdisableAllMessageNotifications: false,\n\t\t\t\thasMentionToHere: false,\n\t\t\t\tmessage: { _id: '', u: v, msg: '' },\n\t\t\t\t// we should use server's language for this type of messages instead of user's\n\t\t\t\tnotificationMessage: i18n.t('User_started_a_new_conversation', { username: notificationUserName, lng: language }),\n\t\t\t\troom: { ...room, name: i18n.t('New_chat_in_queue', { lng: language }) },\n\t\t\t\tmentionIds: [],\n\t\t\t});\n\t\t}\n\t};\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e9f31f7fd287615360c377fc1e9e84d7b338d970"}
