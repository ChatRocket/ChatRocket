{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/messages.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/messages.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/messages.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/messages.ts","sourceRoot":"","sources":["app/apps/server/bridges/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator, IAppsMessage, IAppsUser } from '@rocket.chat/apps';\nimport type { Reaction } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { ITypingDescriptor } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { MessageBridge } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { api } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions, Messages } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\n\nexport class AppMessageBridge extends MessageBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(message: IAppsMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tconst convertedMessage: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst definedMessage = convertedMessage as IMessage;\n\n\t\tconst sentMessage = await executeSendMessage(definedMessage.u._id, definedMessage);\n\t\treturn sentMessage._id;\n\t}\n\n\tprotected async getById(messageId: string, appId: string): Promise<IAppsMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst message: IAppsMessage | undefined = await this.orch.getConverters()?.get('messages').convertById(messageId);\n\t\treturn message as IAppsMessage;\n\t}\n\n\tprotected async update(message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tif (!message.editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tif (!message.id || !(await Messages.findOneById(message.id))) {\n\t\t\tthrow new Error('A message must exist to update.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst editor = await Users.findOneById(message.editor.id);\n\n\t\tif (!editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tawait updateMessage(msg as IMessage, editor);\n\t}\n\n\tprotected async delete(message: IAppsMessage, user: IAppsUser, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a message.`);\n\n\t\tif (!message.id) {\n\t\t\tthrow new Error('Invalid message id');\n\t\t}\n\n\t\tconst convertedMsg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedUser = (await Users.findOneById(user.id)) || this.orch.getConverters()?.get('users').convertToRocketChat(user);\n\n\t\tawait deleteMessage(convertedMsg as IMessage, convertedUser);\n\t}\n\n\tprotected async notifyUser(user: IAppsUser, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a user.`);\n\n\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('notify.ephemeralMessage', user.id, msg.rid, {\n\t\t\t...msg,\n\t\t});\n\t}\n\n\tprotected async notifyRoom(room: IRoom, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a room's users.`);\n\n\t\tif (!room?.id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedMessage = msg as IMessage;\n\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);\n\n\t\tawait Users.findByIds(users, { projection: { _id: 1 } }).forEach(\n\t\t\t({ _id }: { _id: string }) =>\n\t\t\t\tvoid api.broadcast('notify.ephemeralMessage', _id, room.id, {\n\t\t\t\t\t...convertedMessage,\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tprotected async typing({ scope, id, username, isTyping }: ITypingDescriptor): Promise<void> {\n\t\tswitch (scope) {\n\t\t\tcase 'room':\n\t\t\t\tif (!username) {\n\t\t\t\t\tthrow new Error('Invalid username');\n\t\t\t\t}\n\n\t\t\t\tnotifications.notifyRoom(id, 'user-activity', username, isTyping ? ['user-typing'] : []);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unrecognized typing scope provided');\n\t\t}\n\t}\n\n\tprivate isValidReaction(reaction: Reaction): boolean {\n\t\treturn reaction.startsWith(':') && reaction.endsWith(':');\n\t}\n\n\tprotected async addReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, true);\n\t}\n\n\tprotected async removeReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, false);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/messages.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/messages.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/messages.ts","sourceRoot":"","sources":["app/apps/server/bridges/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator, IAppsMessage, IAppsUser } from '@rocket.chat/apps';\nimport type { Reaction } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { ITypingDescriptor } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { MessageBridge } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { api } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions, Messages } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\n\nexport class AppMessageBridge extends MessageBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(message: IAppsMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tconst convertedMessage: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst definedMessage = convertedMessage as IMessage;\n\n\t\tconst sentMessage = await executeSendMessage(definedMessage.u._id, definedMessage);\n\t\treturn sentMessage._id;\n\t}\n\n\tprotected async getById(messageId: string, appId: string): Promise<IAppsMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst message: IAppsMessage | undefined = await this.orch.getConverters()?.get('messages').convertById(messageId);\n\t\treturn message as IAppsMessage;\n\t}\n\n\tprotected async update(message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tif (!message.editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tif (!message.id || !(await Messages.findOneById(message.id))) {\n\t\t\tthrow new Error('A message must exist to update.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst editor = await Users.findOneById(message.editor.id);\n\n\t\tif (!editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tawait updateMessage(msg as IMessage, editor);\n\t}\n\n\tprotected async delete(message: IAppsMessage, user: IAppsUser, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a message.`);\n\n\t\tif (!message.id) {\n\t\t\tthrow new Error('Invalid message id');\n\t\t}\n\n\t\tconst convertedMsg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedUser = (await Users.findOneById(user.id)) || this.orch.getConverters()?.get('users').convertToRocketChat(user);\n\n\t\tawait deleteMessage(convertedMsg as IMessage, convertedUser);\n\t}\n\n\tprotected async notifyUser(user: IAppsUser, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a user.`);\n\n\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('notify.ephemeralMessage', user.id, msg.rid, {\n\t\t\t...msg,\n\t\t});\n\t}\n\n\tprotected async notifyRoom(room: IRoom, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a room's users.`);\n\n\t\tif (!room?.id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedMessage = msg as IMessage;\n\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);\n\n\t\tawait Users.findByIds(users, { projection: { _id: 1 } }).forEach(\n\t\t\t({ _id }: { _id: string }) =>\n\t\t\t\tvoid api.broadcast('notify.ephemeralMessage', _id, room.id, {\n\t\t\t\t\t...convertedMessage,\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tprotected async typing({ scope, id, username, isTyping }: ITypingDescriptor): Promise<void> {\n\t\tswitch (scope) {\n\t\t\tcase 'room':\n\t\t\t\tif (!username) {\n\t\t\t\t\tthrow new Error('Invalid username');\n\t\t\t\t}\n\n\t\t\t\tnotifications.notifyRoom(id, 'user-activity', username, isTyping ? ['user-typing'] : []);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unrecognized typing scope provided');\n\t\t}\n\t}\n\n\tprivate isValidReaction(reaction: Reaction): boolean {\n\t\treturn reaction.startsWith(':') && reaction.endsWith(':');\n\t}\n\n\tprotected async addReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, true);\n\t}\n\n\tprotected async removeReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, false);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      AppMessageBridge: () => AppMessageBridge\n    });\n    let MessageBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/MessageBridge\", {\n      MessageBridge(v) {\n        MessageBridge = v;\n      }\n    }, 0);\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 1);\n    let Users, Subscriptions, Messages;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Messages(v) {\n        Messages = v;\n      }\n    }, 2);\n    let deleteMessage;\n    module.link(\"../../../lib/server/functions/deleteMessage\", {\n      deleteMessage(v) {\n        deleteMessage = v;\n      }\n    }, 3);\n    let updateMessage;\n    module.link(\"../../../lib/server/functions/updateMessage\", {\n      updateMessage(v) {\n        updateMessage = v;\n      }\n    }, 4);\n    let executeSendMessage;\n    module.link(\"../../../lib/server/methods/sendMessage\", {\n      executeSendMessage(v) {\n        executeSendMessage = v;\n      }\n    }, 5);\n    let notifications;\n    module.link(\"../../../notifications/server/lib/Notifications\", {\n      default(v) {\n        notifications = v;\n      }\n    }, 6);\n    let executeSetReaction;\n    module.link(\"../../../reactions/server/setReaction\", {\n      executeSetReaction(v) {\n        executeSetReaction = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppMessageBridge extends MessageBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.orch = orch;\n      }\n      async create(message, appId) {\n        var _this$orch$getConvert;\n        this.orch.debugLog(\"The App \".concat(appId, \" is creating a new message.\"));\n        const convertedMessage = await ((_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('messages').convertAppMessage(message));\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const definedMessage = convertedMessage;\n        const sentMessage = await executeSendMessage(definedMessage.u._id, definedMessage);\n        return sentMessage._id;\n      }\n      async getById(messageId, appId) {\n        var _this$orch$getConvert2;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the message: \\\"\").concat(messageId, \"\\\"\"));\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const message = await ((_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('messages').convertById(messageId));\n        return message;\n      }\n      async update(message, appId) {\n        var _this$orch$getConvert3;\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating a message.\"));\n        if (!message.editor) {\n          throw new Error('Invalid editor assigned to the message for the update.');\n        }\n        if (!message.id || !(await Messages.findOneById(message.id))) {\n          throw new Error('A message must exist to update.');\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const msg = await ((_this$orch$getConvert3 = this.orch.getConverters()) === null || _this$orch$getConvert3 === void 0 ? void 0 : _this$orch$getConvert3.get('messages').convertAppMessage(message));\n        const editor = await Users.findOneById(message.editor.id);\n        if (!editor) {\n          throw new Error('Invalid editor assigned to the message for the update.');\n        }\n        await updateMessage(msg, editor);\n      }\n      async delete(message, user, appId) {\n        var _this$orch$getConvert4, _this$orch$getConvert5;\n        this.orch.debugLog(\"The App \".concat(appId, \" is deleting a message.\"));\n        if (!message.id) {\n          throw new Error('Invalid message id');\n        }\n        const convertedMsg = await ((_this$orch$getConvert4 = this.orch.getConverters()) === null || _this$orch$getConvert4 === void 0 ? void 0 : _this$orch$getConvert4.get('messages').convertAppMessage(message));\n        const convertedUser = (await Users.findOneById(user.id)) || ((_this$orch$getConvert5 = this.orch.getConverters()) === null || _this$orch$getConvert5 === void 0 ? void 0 : _this$orch$getConvert5.get('users').convertToRocketChat(user));\n        await deleteMessage(convertedMsg, convertedUser);\n      }\n      async notifyUser(user, message, appId) {\n        var _this$orch$getConvert6;\n        this.orch.debugLog(\"The App \".concat(appId, \" is notifying a user.\"));\n        const msg = await ((_this$orch$getConvert6 = this.orch.getConverters()) === null || _this$orch$getConvert6 === void 0 ? void 0 : _this$orch$getConvert6.get('messages').convertAppMessage(message));\n        if (!msg) {\n          return;\n        }\n        void api.broadcast('notify.ephemeralMessage', user.id, msg.rid, _objectSpread({}, msg));\n      }\n      async notifyRoom(room, message, appId) {\n        var _this$orch$getConvert7;\n        this.orch.debugLog(\"The App \".concat(appId, \" is notifying a room's users.\"));\n        if (!(room !== null && room !== void 0 && room.id)) {\n          return;\n        }\n        // #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n        const msg = await ((_this$orch$getConvert7 = this.orch.getConverters()) === null || _this$orch$getConvert7 === void 0 ? void 0 : _this$orch$getConvert7.get('messages').convertAppMessage(message));\n        const convertedMessage = msg;\n        const users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, {\n          projection: {\n            'u._id': 1\n          }\n        }).toArray()).map(s => s.u._id);\n        await Users.findByIds(users, {\n          projection: {\n            _id: 1\n          }\n        }).forEach(_ref => {\n          let {\n            _id\n          } = _ref;\n          return void api.broadcast('notify.ephemeralMessage', _id, room.id, _objectSpread({}, convertedMessage));\n        });\n      }\n      async typing(_ref2) {\n        let {\n          scope,\n          id,\n          username,\n          isTyping\n        } = _ref2;\n        switch (scope) {\n          case 'room':\n            if (!username) {\n              throw new Error('Invalid username');\n            }\n            notifications.notifyRoom(id, 'user-activity', username, isTyping ? ['user-typing'] : []);\n            return;\n          default:\n            throw new Error('Unrecognized typing scope provided');\n        }\n      }\n      isValidReaction(reaction) {\n        return reaction.startsWith(':') && reaction.endsWith(':');\n      }\n      async addReaction(messageId, userId, reaction) {\n        if (!this.isValidReaction(reaction)) {\n          throw new Error('Invalid reaction');\n        }\n        return executeSetReaction(userId, reaction, messageId, true);\n      }\n      async removeReaction(messageId, userId, reaction) {\n        if (!this.isValidReaction(reaction)) {\n          throw new Error('Invalid reaction');\n        }\n        return executeSetReaction(userId, reaction, messageId, false);\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","AppMessageBridge","MessageBridge","api","Users","Subscriptions","Messages","deleteMessage","updateMessage","executeSendMessage","notifications","executeSetReaction","__reifyWaitForDeps__","constructor","orch","create","message","appId","_this$orch$getConvert","debugLog","concat","convertedMessage","getConverters","get","convertAppMessage","definedMessage","sentMessage","u","_id","getById","messageId","_this$orch$getConvert2","convertById","update","_this$orch$getConvert3","editor","Error","id","findOneById","msg","delete","user","_this$orch$getConvert4","_this$orch$getConvert5","convertedMsg","convertedUser","convertToRocketChat","notifyUser","_this$orch$getConvert6","broadcast","rid","notifyRoom","room","_this$orch$getConvert7","users","findByRoomIdWhenUserIdExists","projection","toArray","map","s","findByIds","forEach","_ref","typing","_ref2","scope","username","isTyping","isValidReaction","reaction","startsWith","endsWith","addReaction","userId","removeReaction","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/messages.ts"],"sourcesContent":["import type { IAppServerOrchestrator, IAppsMessage, IAppsUser } from '@rocket.chat/apps';\nimport type { Reaction } from '@rocket.chat/apps-engine/definition/messages';\nimport type { IRoom } from '@rocket.chat/apps-engine/definition/rooms';\nimport type { ITypingDescriptor } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { MessageBridge } from '@rocket.chat/apps-engine/server/bridges/MessageBridge';\nimport { api } from '@rocket.chat/core-services';\nimport type { IMessage } from '@rocket.chat/core-typings';\nimport { Users, Subscriptions, Messages } from '@rocket.chat/models';\n\nimport { deleteMessage } from '../../../lib/server/functions/deleteMessage';\nimport { updateMessage } from '../../../lib/server/functions/updateMessage';\nimport { executeSendMessage } from '../../../lib/server/methods/sendMessage';\nimport notifications from '../../../notifications/server/lib/Notifications';\nimport { executeSetReaction } from '../../../reactions/server/setReaction';\n\nexport class AppMessageBridge extends MessageBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async create(message: IAppsMessage, appId: string): Promise<string> {\n\t\tthis.orch.debugLog(`The App ${appId} is creating a new message.`);\n\n\t\tconst convertedMessage: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst definedMessage = convertedMessage as IMessage;\n\n\t\tconst sentMessage = await executeSendMessage(definedMessage.u._id, definedMessage);\n\t\treturn sentMessage._id;\n\t}\n\n\tprotected async getById(messageId: string, appId: string): Promise<IAppsMessage> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the message: \"${messageId}\"`);\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst message: IAppsMessage | undefined = await this.orch.getConverters()?.get('messages').convertById(messageId);\n\t\treturn message as IAppsMessage;\n\t}\n\n\tprotected async update(message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating a message.`);\n\n\t\tif (!message.editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tif (!message.id || !(await Messages.findOneById(message.id))) {\n\t\t\tthrow new Error('A message must exist to update.');\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst editor = await Users.findOneById(message.editor.id);\n\n\t\tif (!editor) {\n\t\t\tthrow new Error('Invalid editor assigned to the message for the update.');\n\t\t}\n\n\t\tawait updateMessage(msg as IMessage, editor);\n\t}\n\n\tprotected async delete(message: IAppsMessage, user: IAppsUser, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is deleting a message.`);\n\n\t\tif (!message.id) {\n\t\t\tthrow new Error('Invalid message id');\n\t\t}\n\n\t\tconst convertedMsg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedUser = (await Users.findOneById(user.id)) || this.orch.getConverters()?.get('users').convertToRocketChat(user);\n\n\t\tawait deleteMessage(convertedMsg as IMessage, convertedUser);\n\t}\n\n\tprotected async notifyUser(user: IAppsUser, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a user.`);\n\n\t\tconst msg = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\n\t\tif (!msg) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('notify.ephemeralMessage', user.id, msg.rid, {\n\t\t\t...msg,\n\t\t});\n\t}\n\n\tprotected async notifyRoom(room: IRoom, message: IAppsMessage, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is notifying a room's users.`);\n\n\t\tif (!room?.id) {\n\t\t\treturn;\n\t\t}\n\n\t\t// #TODO: #AppsEngineTypes - Remove explicit types and typecasts once the apps-engine definition/implementation mismatch is fixed.\n\t\tconst msg: IMessage | undefined = await this.orch.getConverters()?.get('messages').convertAppMessage(message);\n\t\tconst convertedMessage = msg as IMessage;\n\n\t\tconst users = (await Subscriptions.findByRoomIdWhenUserIdExists(room.id, { projection: { 'u._id': 1 } }).toArray()).map((s) => s.u._id);\n\n\t\tawait Users.findByIds(users, { projection: { _id: 1 } }).forEach(\n\t\t\t({ _id }: { _id: string }) =>\n\t\t\t\tvoid api.broadcast('notify.ephemeralMessage', _id, room.id, {\n\t\t\t\t\t...convertedMessage,\n\t\t\t\t}),\n\t\t);\n\t}\n\n\tprotected async typing({ scope, id, username, isTyping }: ITypingDescriptor): Promise<void> {\n\t\tswitch (scope) {\n\t\t\tcase 'room':\n\t\t\t\tif (!username) {\n\t\t\t\t\tthrow new Error('Invalid username');\n\t\t\t\t}\n\n\t\t\t\tnotifications.notifyRoom(id, 'user-activity', username, isTyping ? ['user-typing'] : []);\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unrecognized typing scope provided');\n\t\t}\n\t}\n\n\tprivate isValidReaction(reaction: Reaction): boolean {\n\t\treturn reaction.startsWith(':') && reaction.endsWith(':');\n\t}\n\n\tprotected async addReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, true);\n\t}\n\n\tprotected async removeReaction(messageId: string, userId: string, reaction: Reaction): Promise<void> {\n\t\tif (!this.isValidReaction(reaction)) {\n\t\t\tthrow new Error('Invalid reaction');\n\t\t}\n\n\t\treturn executeSetReaction(userId, reaction, messageId, false);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"7ac5aeb2ccabd354eb4ec9f436797564addfc5e0"}
