{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatVisitors.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatVisitors.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatVisitors.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatVisitors.ts","sourceRoot":"","sources":["server/models/raw/LivechatVisitors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ILivechatVisitor, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatVisitorsModel } from '@rocket.chat/model-typings';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tFindCursor,\n\tDb,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tIndexDescription,\n\tDeleteResult,\n\tUpdateFilter,\n\tModifyResult,\n\tFindOneAndUpdateOptions,\n} from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { notifyOnSettingChanged } from '../../../app/lib/server/lib/notifyListener';\n\nexport class LivechatVisitorsRaw extends BaseRaw<ILivechatVisitor> implements ILivechatVisitorsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatVisitor>>) {\n\t\tsuper(db, 'livechat_visitor', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { token: 1 } },\n\t\t\t{ key: { 'phone.phoneNumber': 1 }, sparse: true },\n\t\t\t{ key: { 'visitorEmails.address': 1 }, sparse: true },\n\t\t\t{ key: { name: 1 }, sparse: true },\n\t\t\t{ key: { username: 1 } },\n\t\t\t{ key: { 'contactMananger.username': 1 }, sparse: true },\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { activity: 1 }, partialFilterExpression: { activity: { $exists: true } } },\n\t\t\t{ key: { disabled: 1 }, partialFilterExpression: { disabled: { $exists: true } } },\n\t\t];\n\t}\n\n\tfindOneVisitorByPhone(phone: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'phone.phoneNumber': phone,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneGuestByEmailAddress(emailAddress: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'visitorEmails.address': String(emailAddress).toLowerCase(),\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t/**\n\t * Find visitors by _id\n\t * @param {string} token - Visitor token\n\t */\n\tfindById(_id: string, options: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindEnabled(query: Filter<ILivechatVisitor>, options?: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t...query,\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindOneEnabledById<T extends Document = ILivechatVisitor>(_id: string, options?: FindOptions<ILivechatVisitor>): Promise<T | null> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findOne<T>(query, options);\n\t}\n\n\tfindVisitorByToken(token: string): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tgetVisitorByToken(token: string, options: FindOptions<ILivechatVisitor>): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcountVisitorsBetweenDate({ start, end, department }: { start: Date; end: Date; department?: string }): Promise<number> {\n\t\tconst query = {\n\t\t\tdisabled: { $ne: true },\n\t\t\t_updatedAt: {\n\t\t\t\t$gte: new Date(start),\n\t\t\t\t$lt: new Date(end),\n\t\t\t},\n\t\t\t...(department && department !== 'undefined' && { department }),\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tasync getNextVisitorUsername(): Promise<string> {\n\t\t// TODO remove dependency from another model - this logic should be inside a service/function\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_guest_count', 1, { returnDocument: 'after' });\n\n\t\tif (!livechatCount.value) {\n\t\t\tthrow new Error(\"Can't find Livechat_guest_count setting\");\n\t\t}\n\n\t\tvoid notifyOnSettingChanged(livechatCount.value);\n\n\t\treturn `guest-${livechatCount.value.value}`;\n\t}\n\n\tfindByNameRegexWithExceptionsAndConditions<P extends Document = ILivechatVisitor>(\n\t\tsearchTerm: string,\n\t\texceptions: string[] = [],\n\t\tconditions: Filter<ILivechatVisitor> = {},\n\t\toptions: FindOptions<P extends ILivechatVisitor ? ILivechatVisitor : P> = {},\n\t): AggregationCursor<\n\t\tP & {\n\t\t\tcustom_name: string;\n\t\t}\n\t> {\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(searchTerm).trim()}`, 'i');\n\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tname: nameRegex,\n\t\t\t\t_id: {\n\t\t\t\t\t$nin: exceptions,\n\t\t\t\t},\n\t\t\t\t...conditions,\n\t\t\t},\n\t\t};\n\n\t\tconst { projection, sort, skip, limit } = options;\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t// TODO: move this logic to client\n\t\t\t\tcustom_name: { $concat: ['$username', ' - ', '$name'] },\n\t\t\t\t...projection,\n\t\t\t},\n\t\t};\n\n\t\tconst order = { $sort: sort || { name: 1 } };\n\t\tconst params: Record<string, unknown>[] = [match, order, skip && { $skip: skip }, limit && { $limit: limit }, project].filter(\n\t\t\tBoolean,\n\t\t) as Record<string, unknown>[];\n\n\t\treturn this.col.aggregate(params);\n\t}\n\n\t/**\n\t * Find visitors by their email or phone or username or name\n\t */\n\tasync findPaginatedVisitorsByEmailOrPhoneOrNameOrUsernameOrCustomField(\n\t\temailOrPhone?: string,\n\t\tnameOrUsername?: RegExp,\n\t\tallowedCustomFields: string[] = [],\n\t\toptions?: FindOptions<ILivechatVisitor>,\n\t): Promise<FindPaginated<FindCursor<ILivechatVisitor>>> {\n\t\tif (!emailOrPhone && !nameOrUsername && allowedCustomFields.length === 0) {\n\t\t\treturn this.findPaginated({ disabled: { $ne: true } }, options);\n\t\t}\n\n\t\tconst query: Filter<ILivechatVisitor> = {\n\t\t\t$or: [\n\t\t\t\t...(emailOrPhone\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'visitorEmails.address': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'phone.phoneNumber': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...(nameOrUsername\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tusername: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...allowedCustomFields.map((c: string) => ({ [`livechatData.${c}`]: nameOrUsername })),\n\t\t\t],\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tasync findOneByEmailAndPhoneAndCustomField(\n\t\temail: string | null | undefined,\n\t\tphone: string | null | undefined,\n\t\tcustomFields?: { [key: string]: RegExp },\n\t): Promise<ILivechatVisitor | null> {\n\t\tconst query = Object.assign(\n\t\t\t{\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t...(email && { visitorEmails: { address: email } }),\n\t\t\t\t...(phone && { phone: { phoneNumber: phone } }),\n\t\t\t\t...customFields,\n\t\t\t},\n\t\t);\n\n\t\tif (Object.keys(query).length === 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.findOne(query);\n\t}\n\n\tasync updateLivechatDataByToken(\n\t\ttoken: string,\n\t\tkey: string,\n\t\tvalue: unknown,\n\t\toverwrite = true,\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });\n\t\t\tif (user?.livechatData && typeof user.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t} as UpdateFilter<ILivechatVisitor>; // TODO: Remove this cast when TypeScript is updated\n\t\t// TypeScript is not smart enough to infer that `messages.${string}` matches keys of `ILivechatVisitor`;\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateLastAgentByToken(token: string, lastAgent: ILivechatVisitor['lastAgent']): Promise<Document | UpdateResult> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastAgent,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateById(_id: string, update: UpdateFilter<ILivechatVisitor>): Promise<Document | UpdateResult> {\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tasync updateOneByIdOrToken(\n\t\tupdate: Partial<ILivechatVisitor>,\n\t\toptions?: FindOneAndUpdateOptions,\n\t): Promise<ModifyResult<ILivechatVisitor>> {\n\t\tlet query: Filter<ILivechatVisitor> = {};\n\n\t\tif (update._id) {\n\t\t\tquery = { _id: update._id };\n\t\t} else if (update.token) {\n\t\t\tquery = { token: update.token };\n\t\t\tupdate._id = new ObjectId().toHexString();\n\t\t}\n\n\t\treturn this.findOneAndUpdate(query, { $set: update }, options);\n\t}\n\n\tsaveGuestById(\n\t\t_id: string,\n\t\tdata: { name?: string; username?: string; email?: string; phone?: string; livechatData: { [k: string]: any } },\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst setData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$set']> = {};\n\t\tconst unsetData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$unset']> = {};\n\n\t\tif (data.name) {\n\t\t\tif (data.name?.trim()) {\n\t\t\t\tsetData.name = data.name.trim();\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email) {\n\t\t\tif (data.email?.trim()) {\n\t\t\t\tsetData.visitorEmails = [{ address: data.email.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.visitorEmails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone) {\n\t\t\tif (data.phone?.trim()) {\n\t\t\t\tsetData.phone = [{ phoneNumber: data.phone.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.livechatData) {\n\t\t\tObject.keys(data.livechatData).forEach((key) => {\n\t\t\t\tconst value = data.livechatData[key]?.trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t...(Object.keys(setData).length && { $set: setData as UpdateFilter<ILivechatVisitor>['$set'] }),\n\t\t\t...(Object.keys(unsetData).length && { $unset: unsetData as UpdateFilter<ILivechatVisitor>['$unset'] }),\n\t\t};\n\n\t\tif (!Object.keys(update).length) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveDepartmentById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $unset: { department: 1 } });\n\t}\n\n\tremoveById(_id: string): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ _id });\n\t}\n\n\tsaveGuestEmailPhoneById(_id: string, emails: string[], phones: string[]): Promise<UpdateResult | Document | void> {\n\t\tconst saveEmail = ([] as string[])\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email?.trim())\n\t\t\t.map((email) => ({ address: email }));\n\n\t\tconst savePhone = ([] as string[])\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone?.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$addToSet: {\n\t\t\t\t...(saveEmail.length && { visitorEmails: { $each: saveEmail } }),\n\t\t\t\t...(savePhone.length && { phone: { $each: savePhone } }),\n\t\t\t},\n\t\t};\n\n\t\tif (!Object.keys(update.$addToSet as Record<string, any>).length) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveContactManagerByUsername(manager: string): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tcontactManager: {\n\t\t\t\t\tusername: manager,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tcontactManager: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tisVisitorActiveOnPeriod(visitorId: string, period: string): Promise<boolean> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t\tactivity: period,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { _id: 1 } }).then(Boolean);\n\t}\n\n\tmarkVisitorActiveForPeriod(visitorId: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tactivity: {\n\t\t\t\t\t$each: [period],\n\t\t\t\t\t$slice: -12,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tdisableById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: { disabled: true },\n\t\t\t\t$unset: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\ttoken: 1,\n\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\tphone: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\tlastChat: 1,\n\t\t\t\t\tip: 1,\n\t\t\t\t\thost: 1,\n\t\t\t\t\tuserAgent: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcountVisitorsOnPeriod(period: string): Promise<number> {\n\t\treturn this.countDocuments({\n\t\t\tactivity: period,\n\t\t});\n\t}\n\n\tsetLastChatById(_id: string, lastChat: Required<ILivechatVisitor['lastChat']>): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastChat,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n\ntype DeepWriteable<T> = { -readonly [P in keyof T]: DeepWriteable<T[P]> };\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatVisitors.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatVisitors.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatVisitors.ts","sourceRoot":"","sources":["server/models/raw/LivechatVisitors.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAgB3D,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AACpC,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AAEpF,MAAM,OAAO,mBAAoB,SAAQ,OAAyB;IACjE,YAAY,EAAM,EAAE,KAA6D;QAChF,KAAK,CAAC,EAAE,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;IAES,YAAY;QACrB,OAAO;YACN,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE;YACrB,EAAE,GAAG,EAAE,EAAE,mBAAmB,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;YACjD,EAAE,GAAG,EAAE,EAAE,uBAAuB,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;YACrD,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;YAClC,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE;YACxB,EAAE,GAAG,EAAE,EAAE,0BAA0B,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;YACxD,EAAE,GAAG,EAAE,EAAE,kBAAkB,EAAE,CAAC,EAAE,EAAE;YAClC,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,uBAAuB,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE;YAClF,EAAE,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,uBAAuB,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE;SAClF,CAAC;IACH,CAAC;IAED,qBAAqB,CAAC,KAAa;QAClC,MAAM,KAAK,GAAG;YACb,mBAAmB,EAAE,KAAK;SAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,0BAA0B,CAAC,YAAoB;QAC9C,MAAM,KAAK,GAAG;YACb,uBAAuB,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE;SAC3D,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,GAAW,EAAE,OAAsC;QAC3D,MAAM,KAAK,GAAG;YACb,GAAG;SACH,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,WAAW,CAAC,KAA+B,EAAE,OAAuC;QACnF,OAAO,IAAI,CAAC,IAAI,CACf;YACC,GAAG,KAAK;YACR,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACvB,EACD,OAAO,CACP,CAAC;IACH,CAAC;IAED,kBAAkB,CAAwC,GAAW,EAAE,OAAuC;QAC7G,MAAM,KAAK,GAAG;YACb,GAAG;YACH,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACvB,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAI,KAAK,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,kBAAkB,CAAC,KAAa;QAC/B,MAAM,KAAK,GAAG;YACb,KAAK;YACL,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACvB,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,iBAAiB,CAAC,KAAa,EAAE,OAAsC;QACtE,MAAM,KAAK,GAAG;YACb,KAAK;SACL,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,wBAAwB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,UAAU,EAAmD;QACnG,MAAM,KAAK,GAAG;YACb,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;YACvB,UAAU,EAAE;gBACX,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC;gBACrB,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,CAAC;aAClB;YACD,GAAG,CAAC,UAAU,IAAI,UAAU,KAAK,WAAW,IAAI,EAAE,UAAU,EAAE,CAAC;SAC/D,CAAC;QAEF,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,6FAA6F;QAC7F,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC;QAEhH,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC5D,CAAC;QAED,KAAK,sBAAsB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEjD,OAAO,SAAS,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC7C,CAAC;IAED,0CAA0C,CACzC,UAAkB,EAClB,aAAuB,EAAE,EACzB,aAAuC,EAAE,EACzC,UAA0E,EAAE;QAM5E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;YAChC,UAAU,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QAEzE,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,IAAI,EAAE,SAAS;gBACf,GAAG,EAAE;oBACJ,IAAI,EAAE,UAAU;iBAChB;gBACD,GAAG,UAAU;aACb;SACD,CAAC;QAEF,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC;QAClD,MAAM,OAAO,GAAG;YACf,QAAQ,EAAE;gBACT,kCAAkC;gBAClC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,OAAO,CAAC,EAAE;gBACvD,GAAG,UAAU;aACb;SACD,CAAC;QAEF,MAAM,KAAK,GAAG,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7C,MAAM,MAAM,GAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC,MAAM,CAC5H,OAAO,CACsB,CAAC;QAE/B,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gEAAgE,CACrE,YAAqB,EACrB,cAAuB,EACvB,sBAAgC,EAAE,EAClC,OAAuC;QAEvC,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1E,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;QACjE,CAAC;QAED,MAAM,KAAK,GAA6B;YACvC,GAAG,EAAE;gBACJ,GAAG,CAAC,YAAY;oBACf,CAAC,CAAC;wBACA;4BACC,uBAAuB,EAAE,YAAY;yBACrC;wBACD;4BACC,mBAAmB,EAAE,YAAY;yBACjC;qBACD;oBACF,CAAC,CAAC,EAAE,CAAC;gBACN,GAAG,CAAC,cAAc;oBACjB,CAAC,CAAC;wBACA;4BACC,IAAI,EAAE,cAAc;yBACpB;wBACD;4BACC,QAAQ,EAAE,cAAc;yBACxB;qBACD;oBACF,CAAC,CAAC,EAAE,CAAC;gBACN,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;aACtF;YACD,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACvB,CAAC;QAEF,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,oCAAoC,CACzC,KAAgC,EAChC,KAAgC,EAChC,YAAwC;QAExC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAC1B;YACC,QAAQ,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACvB,EACD;YACC,GAAG,CAAC,KAAK,IAAI,EAAE,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC;YACnD,GAAG,CAAC,KAAK,IAAI,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC;YAC/C,GAAG,YAAY;SACf,CACD,CAAC;QAEF,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACrC,OAAO,IAAI,CAAC;QACb,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC9B,KAAa,EACb,GAAW,EACX,KAAc,EACd,SAAS,GAAG,IAAI;QAEhB,MAAM,KAAK,GAAG;YACb,KAAK;SACL,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,CAAC;YAChB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACtF,IAAI,IAAI,EAAE,YAAY,IAAI,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE,CAAC;gBACzE,OAAO,IAAI,CAAC;YACb,CAAC;QACF,CAAC;QAED,MAAM,MAAM,GAAmC;YAC9C,IAAI,EAAE;gBACL,CAAC,gBAAgB,GAAG,EAAE,CAAC,EAAE,KAAK;aAC9B;SACiC,CAAC,CAAC,oDAAoD;QACzF,wGAAwG;QAExG,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,sBAAsB,CAAC,KAAa,EAAE,SAAwC;QAC7E,MAAM,KAAK,GAAG;YACb,KAAK;SACL,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,SAAS;aACT;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,UAAU,CAAC,GAAW,EAAE,MAAsC;QAC7D,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,oBAAoB,CACzB,MAAiC,EACjC,OAAiC;QAEjC,IAAI,KAAK,GAA6B,EAAE,CAAC;QAEzC,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;YAChB,KAAK,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,CAAC;QAC7B,CAAC;aAAM,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACzB,KAAK,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;YAChC,MAAM,CAAC,GAAG,GAAG,IAAI,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,CAAC;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;IAChE,CAAC;IAED,aAAa,CACZ,GAAW,EACX,IAA8G;QAE9G,MAAM,OAAO,GAA0D,EAAE,CAAC;QAC1E,MAAM,SAAS,GAA4D,EAAE,CAAC;QAE9E,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC;gBACvB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACP,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;YACpB,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC;gBACxB,OAAO,CAAC,aAAa,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC1D,CAAC;iBAAM,CAAC;gBACP,SAAS,CAAC,aAAa,GAAG,CAAC,CAAC;YAC7B,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC;gBACxB,OAAO,CAAC,KAAK,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtD,CAAC;iBAAM,CAAC;gBACP,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;YACrB,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC;gBAC7C,IAAI,KAAK,EAAE,CAAC;oBACX,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC;gBACxC,CAAC;qBAAM,CAAC;oBACP,SAAS,CAAC,gBAAgB,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;gBACtC,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,MAAM,GAAmC;YAC9C,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,IAAI,EAAE,IAAI,EAAE,OAAiD,EAAE,CAAC;YAC/F,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,SAAqD,EAAE,CAAC;SACvG,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YACjC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,oBAAoB,CAAC,GAAW;QAC/B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAC/D,CAAC;IAED,UAAU,CAAC,GAAW;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,uBAAuB,CAAC,GAAW,EAAE,MAAgB,EAAE,MAAgB;QACtE,MAAM,SAAS,GAAI,EAAe;aAChC,MAAM,CAAC,MAAM,CAAC;aACd,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC;aAChC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAEvC,MAAM,SAAS,GAAI,EAAe;aAChC,MAAM,CAAC,MAAM,CAAC;aACd,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;aACtD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAE3C,MAAM,MAAM,GAAmC;YAC9C,SAAS,EAAE;gBACV,GAAG,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,aAAa,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC;gBAChE,GAAG,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC;aACxD;SACD,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAgC,CAAC,CAAC,MAAM,EAAE,CAAC;YAClE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,8BAA8B,CAAC,OAAe;QAC7C,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,cAAc,EAAE;gBACf,QAAQ,EAAE,OAAO;aACjB;SACD,EACD;YACC,MAAM,EAAE;gBACP,cAAc,EAAE,IAAI;aACpB;SACD,CACD,CAAC;IACH,CAAC;IAED,uBAAuB,CAAC,SAAiB,EAAE,MAAc;QACxD,MAAM,KAAK,GAAG;YACb,GAAG,EAAE,SAAS;YACd,QAAQ,EAAE,MAAM;SAChB,CAAC;QAEF,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtE,CAAC;IAED,0BAA0B,CAAC,SAAiB,EAAE,MAAc;QAC3D,MAAM,KAAK,GAAG;YACb,GAAG,EAAE,SAAS;SACd,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,KAAK,EAAE;gBACN,QAAQ,EAAE;oBACT,KAAK,EAAE,CAAC,MAAM,CAAC;oBACf,MAAM,EAAE,CAAC,EAAE;iBACX;aACD;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,WAAW,CAAC,GAAW;QACtB,OAAO,IAAI,CAAC,SAAS,CACpB,EAAE,GAAG,EAAE,EACP;YACC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE;YACxB,MAAM,EAAE;gBACP,UAAU,EAAE,CAAC;gBACb,cAAc,EAAE,CAAC;gBACjB,KAAK,EAAE,CAAC;gBACR,aAAa,EAAE,CAAC;gBAChB,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;gBACP,YAAY,EAAE,CAAC;gBACf,QAAQ,EAAE,CAAC;gBACX,EAAE,EAAE,CAAC;gBACL,IAAI,EAAE,CAAC;gBACP,SAAS,EAAE,CAAC;gBACZ,QAAQ,EAAE,CAAC;gBACX,EAAE,EAAE,CAAC;gBACL,MAAM,EAAE,CAAC;aACT;SACD,CACD,CAAC;IACH,CAAC;IAED,qBAAqB,CAAC,MAAc;QACnC,OAAO,IAAI,CAAC,cAAc,CAAC;YAC1B,QAAQ,EAAE,MAAM;SAChB,CAAC,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,GAAW,EAAE,QAAgD;QAC5E,OAAO,IAAI,CAAC,SAAS,CACpB,EAAE,GAAG,EAAE,EACP;YACC,IAAI,EAAE;gBACL,QAAQ;aACR;SACD,CACD,CAAC;IACH,CAAC;CACD","sourcesContent":["import type { ILivechatVisitor, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatVisitorsModel } from '@rocket.chat/model-typings';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tFindCursor,\n\tDb,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tIndexDescription,\n\tDeleteResult,\n\tUpdateFilter,\n\tModifyResult,\n\tFindOneAndUpdateOptions,\n} from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { notifyOnSettingChanged } from '../../../app/lib/server/lib/notifyListener';\n\nexport class LivechatVisitorsRaw extends BaseRaw<ILivechatVisitor> implements ILivechatVisitorsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatVisitor>>) {\n\t\tsuper(db, 'livechat_visitor', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { token: 1 } },\n\t\t\t{ key: { 'phone.phoneNumber': 1 }, sparse: true },\n\t\t\t{ key: { 'visitorEmails.address': 1 }, sparse: true },\n\t\t\t{ key: { name: 1 }, sparse: true },\n\t\t\t{ key: { username: 1 } },\n\t\t\t{ key: { 'contactMananger.username': 1 }, sparse: true },\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { activity: 1 }, partialFilterExpression: { activity: { $exists: true } } },\n\t\t\t{ key: { disabled: 1 }, partialFilterExpression: { disabled: { $exists: true } } },\n\t\t];\n\t}\n\n\tfindOneVisitorByPhone(phone: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'phone.phoneNumber': phone,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneGuestByEmailAddress(emailAddress: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'visitorEmails.address': String(emailAddress).toLowerCase(),\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t/**\n\t * Find visitors by _id\n\t * @param {string} token - Visitor token\n\t */\n\tfindById(_id: string, options: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindEnabled(query: Filter<ILivechatVisitor>, options?: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t...query,\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindOneEnabledById<T extends Document = ILivechatVisitor>(_id: string, options?: FindOptions<ILivechatVisitor>): Promise<T | null> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findOne<T>(query, options);\n\t}\n\n\tfindVisitorByToken(token: string): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tgetVisitorByToken(token: string, options: FindOptions<ILivechatVisitor>): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcountVisitorsBetweenDate({ start, end, department }: { start: Date; end: Date; department?: string }): Promise<number> {\n\t\tconst query = {\n\t\t\tdisabled: { $ne: true },\n\t\t\t_updatedAt: {\n\t\t\t\t$gte: new Date(start),\n\t\t\t\t$lt: new Date(end),\n\t\t\t},\n\t\t\t...(department && department !== 'undefined' && { department }),\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tasync getNextVisitorUsername(): Promise<string> {\n\t\t// TODO remove dependency from another model - this logic should be inside a service/function\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_guest_count', 1, { returnDocument: 'after' });\n\n\t\tif (!livechatCount.value) {\n\t\t\tthrow new Error(\"Can't find Livechat_guest_count setting\");\n\t\t}\n\n\t\tvoid notifyOnSettingChanged(livechatCount.value);\n\n\t\treturn `guest-${livechatCount.value.value}`;\n\t}\n\n\tfindByNameRegexWithExceptionsAndConditions<P extends Document = ILivechatVisitor>(\n\t\tsearchTerm: string,\n\t\texceptions: string[] = [],\n\t\tconditions: Filter<ILivechatVisitor> = {},\n\t\toptions: FindOptions<P extends ILivechatVisitor ? ILivechatVisitor : P> = {},\n\t): AggregationCursor<\n\t\tP & {\n\t\t\tcustom_name: string;\n\t\t}\n\t> {\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(searchTerm).trim()}`, 'i');\n\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tname: nameRegex,\n\t\t\t\t_id: {\n\t\t\t\t\t$nin: exceptions,\n\t\t\t\t},\n\t\t\t\t...conditions,\n\t\t\t},\n\t\t};\n\n\t\tconst { projection, sort, skip, limit } = options;\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t// TODO: move this logic to client\n\t\t\t\tcustom_name: { $concat: ['$username', ' - ', '$name'] },\n\t\t\t\t...projection,\n\t\t\t},\n\t\t};\n\n\t\tconst order = { $sort: sort || { name: 1 } };\n\t\tconst params: Record<string, unknown>[] = [match, order, skip && { $skip: skip }, limit && { $limit: limit }, project].filter(\n\t\t\tBoolean,\n\t\t) as Record<string, unknown>[];\n\n\t\treturn this.col.aggregate(params);\n\t}\n\n\t/**\n\t * Find visitors by their email or phone or username or name\n\t */\n\tasync findPaginatedVisitorsByEmailOrPhoneOrNameOrUsernameOrCustomField(\n\t\temailOrPhone?: string,\n\t\tnameOrUsername?: RegExp,\n\t\tallowedCustomFields: string[] = [],\n\t\toptions?: FindOptions<ILivechatVisitor>,\n\t): Promise<FindPaginated<FindCursor<ILivechatVisitor>>> {\n\t\tif (!emailOrPhone && !nameOrUsername && allowedCustomFields.length === 0) {\n\t\t\treturn this.findPaginated({ disabled: { $ne: true } }, options);\n\t\t}\n\n\t\tconst query: Filter<ILivechatVisitor> = {\n\t\t\t$or: [\n\t\t\t\t...(emailOrPhone\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'visitorEmails.address': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'phone.phoneNumber': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...(nameOrUsername\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tusername: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...allowedCustomFields.map((c: string) => ({ [`livechatData.${c}`]: nameOrUsername })),\n\t\t\t],\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tasync findOneByEmailAndPhoneAndCustomField(\n\t\temail: string | null | undefined,\n\t\tphone: string | null | undefined,\n\t\tcustomFields?: { [key: string]: RegExp },\n\t): Promise<ILivechatVisitor | null> {\n\t\tconst query = Object.assign(\n\t\t\t{\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t...(email && { visitorEmails: { address: email } }),\n\t\t\t\t...(phone && { phone: { phoneNumber: phone } }),\n\t\t\t\t...customFields,\n\t\t\t},\n\t\t);\n\n\t\tif (Object.keys(query).length === 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.findOne(query);\n\t}\n\n\tasync updateLivechatDataByToken(\n\t\ttoken: string,\n\t\tkey: string,\n\t\tvalue: unknown,\n\t\toverwrite = true,\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });\n\t\t\tif (user?.livechatData && typeof user.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t} as UpdateFilter<ILivechatVisitor>; // TODO: Remove this cast when TypeScript is updated\n\t\t// TypeScript is not smart enough to infer that `messages.${string}` matches keys of `ILivechatVisitor`;\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateLastAgentByToken(token: string, lastAgent: ILivechatVisitor['lastAgent']): Promise<Document | UpdateResult> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastAgent,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateById(_id: string, update: UpdateFilter<ILivechatVisitor>): Promise<Document | UpdateResult> {\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tasync updateOneByIdOrToken(\n\t\tupdate: Partial<ILivechatVisitor>,\n\t\toptions?: FindOneAndUpdateOptions,\n\t): Promise<ModifyResult<ILivechatVisitor>> {\n\t\tlet query: Filter<ILivechatVisitor> = {};\n\n\t\tif (update._id) {\n\t\t\tquery = { _id: update._id };\n\t\t} else if (update.token) {\n\t\t\tquery = { token: update.token };\n\t\t\tupdate._id = new ObjectId().toHexString();\n\t\t}\n\n\t\treturn this.findOneAndUpdate(query, { $set: update }, options);\n\t}\n\n\tsaveGuestById(\n\t\t_id: string,\n\t\tdata: { name?: string; username?: string; email?: string; phone?: string; livechatData: { [k: string]: any } },\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst setData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$set']> = {};\n\t\tconst unsetData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$unset']> = {};\n\n\t\tif (data.name) {\n\t\t\tif (data.name?.trim()) {\n\t\t\t\tsetData.name = data.name.trim();\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email) {\n\t\t\tif (data.email?.trim()) {\n\t\t\t\tsetData.visitorEmails = [{ address: data.email.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.visitorEmails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone) {\n\t\t\tif (data.phone?.trim()) {\n\t\t\t\tsetData.phone = [{ phoneNumber: data.phone.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.livechatData) {\n\t\t\tObject.keys(data.livechatData).forEach((key) => {\n\t\t\t\tconst value = data.livechatData[key]?.trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t...(Object.keys(setData).length && { $set: setData as UpdateFilter<ILivechatVisitor>['$set'] }),\n\t\t\t...(Object.keys(unsetData).length && { $unset: unsetData as UpdateFilter<ILivechatVisitor>['$unset'] }),\n\t\t};\n\n\t\tif (!Object.keys(update).length) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveDepartmentById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $unset: { department: 1 } });\n\t}\n\n\tremoveById(_id: string): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ _id });\n\t}\n\n\tsaveGuestEmailPhoneById(_id: string, emails: string[], phones: string[]): Promise<UpdateResult | Document | void> {\n\t\tconst saveEmail = ([] as string[])\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email?.trim())\n\t\t\t.map((email) => ({ address: email }));\n\n\t\tconst savePhone = ([] as string[])\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone?.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$addToSet: {\n\t\t\t\t...(saveEmail.length && { visitorEmails: { $each: saveEmail } }),\n\t\t\t\t...(savePhone.length && { phone: { $each: savePhone } }),\n\t\t\t},\n\t\t};\n\n\t\tif (!Object.keys(update.$addToSet as Record<string, any>).length) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveContactManagerByUsername(manager: string): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tcontactManager: {\n\t\t\t\t\tusername: manager,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tcontactManager: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tisVisitorActiveOnPeriod(visitorId: string, period: string): Promise<boolean> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t\tactivity: period,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { _id: 1 } }).then(Boolean);\n\t}\n\n\tmarkVisitorActiveForPeriod(visitorId: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tactivity: {\n\t\t\t\t\t$each: [period],\n\t\t\t\t\t$slice: -12,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tdisableById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: { disabled: true },\n\t\t\t\t$unset: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\ttoken: 1,\n\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\tphone: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\tlastChat: 1,\n\t\t\t\t\tip: 1,\n\t\t\t\t\thost: 1,\n\t\t\t\t\tuserAgent: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcountVisitorsOnPeriod(period: string): Promise<number> {\n\t\treturn this.countDocuments({\n\t\t\tactivity: period,\n\t\t});\n\t}\n\n\tsetLastChatById(_id: string, lastChat: Required<ILivechatVisitor['lastChat']>): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastChat,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n\ntype DeepWriteable<T> = { -readonly [P in keyof T]: DeepWriteable<T[P]> };\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatVisitorsRaw: () => LivechatVisitorsRaw\n    });\n    let Settings;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      }\n    }, 0);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 1);\n    let ObjectId;\n    module.link(\"mongodb\", {\n      ObjectId(v) {\n        ObjectId = v;\n      }\n    }, 2);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 3);\n    let notifyOnSettingChanged;\n    module.link(\"../../../app/lib/server/lib/notifyListener\", {\n      notifyOnSettingChanged(v) {\n        notifyOnSettingChanged = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatVisitorsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'livechat_visitor', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            token: 1\n          }\n        }, {\n          key: {\n            'phone.phoneNumber': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'visitorEmails.address': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            name: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            username: 1\n          }\n        }, {\n          key: {\n            'contactMananger.username': 1\n          },\n          sparse: true\n        }, {\n          key: {\n            'livechatData.$**': 1\n          }\n        }, {\n          key: {\n            activity: 1\n          },\n          partialFilterExpression: {\n            activity: {\n              $exists: true\n            }\n          }\n        }, {\n          key: {\n            disabled: 1\n          },\n          partialFilterExpression: {\n            disabled: {\n              $exists: true\n            }\n          }\n        }];\n      }\n      findOneVisitorByPhone(phone) {\n        const query = {\n          'phone.phoneNumber': phone\n        };\n        return this.findOne(query);\n      }\n      findOneGuestByEmailAddress(emailAddress) {\n        const query = {\n          'visitorEmails.address': String(emailAddress).toLowerCase()\n        };\n        return this.findOne(query);\n      }\n      /**\n       * Find visitors by _id\n       * @param {string} token - Visitor token\n       */\n      findById(_id, options) {\n        const query = {\n          _id\n        };\n        return this.find(query, options);\n      }\n      findEnabled(query, options) {\n        return this.find(_objectSpread(_objectSpread({}, query), {}, {\n          disabled: {\n            $ne: true\n          }\n        }), options);\n      }\n      findOneEnabledById(_id, options) {\n        const query = {\n          _id,\n          disabled: {\n            $ne: true\n          }\n        };\n        return this.findOne(query, options);\n      }\n      findVisitorByToken(token) {\n        const query = {\n          token,\n          disabled: {\n            $ne: true\n          }\n        };\n        return this.find(query);\n      }\n      getVisitorByToken(token, options) {\n        const query = {\n          token\n        };\n        return this.findOne(query, options);\n      }\n      countVisitorsBetweenDate(_ref) {\n        let {\n          start,\n          end,\n          department\n        } = _ref;\n        const query = _objectSpread({\n          disabled: {\n            $ne: true\n          },\n          _updatedAt: {\n            $gte: new Date(start),\n            $lt: new Date(end)\n          }\n        }, department && department !== 'undefined' && {\n          department\n        });\n        return this.countDocuments(query);\n      }\n      async getNextVisitorUsername() {\n        // TODO remove dependency from another model - this logic should be inside a service/function\n        const livechatCount = await Settings.incrementValueById('Livechat_guest_count', 1, {\n          returnDocument: 'after'\n        });\n        if (!livechatCount.value) {\n          throw new Error(\"Can't find Livechat_guest_count setting\");\n        }\n        void notifyOnSettingChanged(livechatCount.value);\n        return \"guest-\".concat(livechatCount.value.value);\n      }\n      findByNameRegexWithExceptionsAndConditions(searchTerm) {\n        let exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        let conditions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        if (!Array.isArray(exceptions)) {\n          exceptions = [exceptions];\n        }\n        const nameRegex = new RegExp(\"^\".concat(escapeRegExp(searchTerm).trim()), 'i');\n        const match = {\n          $match: _objectSpread({\n            name: nameRegex,\n            _id: {\n              $nin: exceptions\n            }\n          }, conditions)\n        };\n        const {\n          projection,\n          sort,\n          skip,\n          limit\n        } = options;\n        const project = {\n          $project: _objectSpread({\n            // TODO: move this logic to client\n            custom_name: {\n              $concat: ['$username', ' - ', '$name']\n            }\n          }, projection)\n        };\n        const order = {\n          $sort: sort || {\n            name: 1\n          }\n        };\n        const params = [match, order, skip && {\n          $skip: skip\n        }, limit && {\n          $limit: limit\n        }, project].filter(Boolean);\n        return this.col.aggregate(params);\n      }\n      /**\n       * Find visitors by their email or phone or username or name\n       */\n      async findPaginatedVisitorsByEmailOrPhoneOrNameOrUsernameOrCustomField(emailOrPhone, nameOrUsername) {\n        let allowedCustomFields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        let options = arguments.length > 3 ? arguments[3] : undefined;\n        if (!emailOrPhone && !nameOrUsername && allowedCustomFields.length === 0) {\n          return this.findPaginated({\n            disabled: {\n              $ne: true\n            }\n          }, options);\n        }\n        const query = {\n          $or: [...(emailOrPhone ? [{\n            'visitorEmails.address': emailOrPhone\n          }, {\n            'phone.phoneNumber': emailOrPhone\n          }] : []), ...(nameOrUsername ? [{\n            name: nameOrUsername\n          }, {\n            username: nameOrUsername\n          }] : []), ...allowedCustomFields.map(c => ({\n            [\"livechatData.\".concat(c)]: nameOrUsername\n          }))],\n          disabled: {\n            $ne: true\n          }\n        };\n        return this.findPaginated(query, options);\n      }\n      async findOneByEmailAndPhoneAndCustomField(email, phone, customFields) {\n        const query = Object.assign({\n          disabled: {\n            $ne: true\n          }\n        }, _objectSpread(_objectSpread(_objectSpread({}, email && {\n          visitorEmails: {\n            address: email\n          }\n        }), phone && {\n          phone: {\n            phoneNumber: phone\n          }\n        }), customFields));\n        if (Object.keys(query).length === 1) {\n          return null;\n        }\n        return this.findOne(query);\n      }\n      async updateLivechatDataByToken(token, key, value) {\n        let overwrite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n        const query = {\n          token\n        };\n        if (!overwrite) {\n          const user = await this.getVisitorByToken(token, {\n            projection: {\n              livechatData: 1\n            }\n          });\n          if (user !== null && user !== void 0 && user.livechatData && typeof user.livechatData[key] !== 'undefined') {\n            return true;\n          }\n        }\n        const update = {\n          $set: {\n            [\"livechatData.\".concat(key)]: value\n          }\n        }; // TODO: Remove this cast when TypeScript is updated\n        // TypeScript is not smart enough to infer that `messages.${string}` matches keys of `ILivechatVisitor`;\n        return this.updateOne(query, update);\n      }\n      updateLastAgentByToken(token, lastAgent) {\n        const query = {\n          token\n        };\n        const update = {\n          $set: {\n            lastAgent\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      updateById(_id, update) {\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      async updateOneByIdOrToken(update, options) {\n        let query = {};\n        if (update._id) {\n          query = {\n            _id: update._id\n          };\n        } else if (update.token) {\n          query = {\n            token: update.token\n          };\n          update._id = new ObjectId().toHexString();\n        }\n        return this.findOneAndUpdate(query, {\n          $set: update\n        }, options);\n      }\n      saveGuestById(_id, data) {\n        const setData = {};\n        const unsetData = {};\n        if (data.name) {\n          var _data$name;\n          if ((_data$name = data.name) !== null && _data$name !== void 0 && _data$name.trim()) {\n            setData.name = data.name.trim();\n          } else {\n            unsetData.name = 1;\n          }\n        }\n        if (data.email) {\n          var _data$email;\n          if ((_data$email = data.email) !== null && _data$email !== void 0 && _data$email.trim()) {\n            setData.visitorEmails = [{\n              address: data.email.trim()\n            }];\n          } else {\n            unsetData.visitorEmails = 1;\n          }\n        }\n        if (data.phone) {\n          var _data$phone;\n          if ((_data$phone = data.phone) !== null && _data$phone !== void 0 && _data$phone.trim()) {\n            setData.phone = [{\n              phoneNumber: data.phone.trim()\n            }];\n          } else {\n            unsetData.phone = 1;\n          }\n        }\n        if (data.livechatData) {\n          Object.keys(data.livechatData).forEach(key => {\n            var _data$livechatData$ke;\n            const value = (_data$livechatData$ke = data.livechatData[key]) === null || _data$livechatData$ke === void 0 ? void 0 : _data$livechatData$ke.trim();\n            if (value) {\n              setData[\"livechatData.\".concat(key)] = value;\n            } else {\n              unsetData[\"livechatData.\".concat(key)] = 1;\n            }\n          });\n        }\n        const update = _objectSpread(_objectSpread({}, Object.keys(setData).length && {\n          $set: setData\n        }), Object.keys(unsetData).length && {\n          $unset: unsetData\n        });\n        if (!Object.keys(update).length) {\n          return Promise.resolve(true);\n        }\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      removeDepartmentById(_id) {\n        return this.updateOne({\n          _id\n        }, {\n          $unset: {\n            department: 1\n          }\n        });\n      }\n      removeById(_id) {\n        return this.deleteOne({\n          _id\n        });\n      }\n      saveGuestEmailPhoneById(_id, emails, phones) {\n        const saveEmail = [].concat(emails).filter(email => email === null || email === void 0 ? void 0 : email.trim()).map(email => ({\n          address: email\n        }));\n        const savePhone = [].concat(phones).filter(phone => phone === null || phone === void 0 ? void 0 : phone.trim().replace(/[^\\d]/g, '')).map(phone => ({\n          phoneNumber: phone\n        }));\n        const update = {\n          $addToSet: _objectSpread(_objectSpread({}, saveEmail.length && {\n            visitorEmails: {\n              $each: saveEmail\n            }\n          }), savePhone.length && {\n            phone: {\n              $each: savePhone\n            }\n          })\n        };\n        if (!Object.keys(update.$addToSet).length) {\n          return Promise.resolve();\n        }\n        return this.updateOne({\n          _id\n        }, update);\n      }\n      removeContactManagerByUsername(manager) {\n        return this.updateMany({\n          contactManager: {\n            username: manager\n          }\n        }, {\n          $unset: {\n            contactManager: true\n          }\n        });\n      }\n      isVisitorActiveOnPeriod(visitorId, period) {\n        const query = {\n          _id: visitorId,\n          activity: period\n        };\n        return this.findOne(query, {\n          projection: {\n            _id: 1\n          }\n        }).then(Boolean);\n      }\n      markVisitorActiveForPeriod(visitorId, period) {\n        const query = {\n          _id: visitorId\n        };\n        const update = {\n          $push: {\n            activity: {\n              $each: [period],\n              $slice: -12\n            }\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      disableById(_id) {\n        return this.updateOne({\n          _id\n        }, {\n          $set: {\n            disabled: true\n          },\n          $unset: {\n            department: 1,\n            contactManager: 1,\n            token: 1,\n            visitorEmails: 1,\n            phone: 1,\n            name: 1,\n            livechatData: 1,\n            lastChat: 1,\n            ip: 1,\n            host: 1,\n            userAgent: 1,\n            username: 1,\n            ts: 1,\n            status: 1\n          }\n        });\n      }\n      countVisitorsOnPeriod(period) {\n        return this.countDocuments({\n          activity: period\n        });\n      }\n      setLastChatById(_id, lastChat) {\n        return this.updateOne({\n          _id\n        }, {\n          $set: {\n            lastChat\n          }\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatVisitorsRaw","Settings","escapeRegExp","ObjectId","BaseRaw","notifyOnSettingChanged","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","token","sparse","name","username","activity","partialFilterExpression","$exists","disabled","findOneVisitorByPhone","phone","query","findOne","findOneGuestByEmailAddress","emailAddress","String","toLowerCase","findById","_id","options","find","findEnabled","$ne","findOneEnabledById","findVisitorByToken","getVisitorByToken","countVisitorsBetweenDate","_ref","start","end","department","_updatedAt","$gte","Date","$lt","countDocuments","getNextVisitorUsername","livechatCount","incrementValueById","returnDocument","value","Error","concat","findByNameRegexWithExceptionsAndConditions","searchTerm","exceptions","arguments","length","undefined","conditions","Array","isArray","nameRegex","RegExp","trim","match","$match","$nin","projection","sort","skip","limit","project","$project","custom_name","$concat","order","$sort","params","$skip","$limit","filter","Boolean","col","aggregate","findPaginatedVisitorsByEmailOrPhoneOrNameOrUsernameOrCustomField","emailOrPhone","nameOrUsername","allowedCustomFields","findPaginated","$or","map","c","findOneByEmailAndPhoneAndCustomField","email","customFields","Object","assign","visitorEmails","address","phoneNumber","keys","updateLivechatDataByToken","overwrite","user","livechatData","update","$set","updateOne","updateLastAgentByToken","lastAgent","updateById","updateOneByIdOrToken","toHexString","findOneAndUpdate","saveGuestById","data","setData","unsetData","_data$name","_data$email","_data$phone","forEach","_data$livechatData$ke","$unset","Promise","resolve","removeDepartmentById","removeById","deleteOne","saveGuestEmailPhoneById","emails","phones","saveEmail","savePhone","replace","$addToSet","$each","removeContactManagerByUsername","manager","updateMany","contactManager","isVisitorActiveOnPeriod","visitorId","period","then","markVisitorActiveForPeriod","$push","$slice","disableById","lastChat","ip","host","userAgent","ts","status","countVisitorsOnPeriod","setLastChatById","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatVisitors.ts"],"sourcesContent":["import type { ILivechatVisitor, RocketChatRecordDeleted } from '@rocket.chat/core-typings';\nimport type { FindPaginated, ILivechatVisitorsModel } from '@rocket.chat/model-typings';\nimport { Settings } from '@rocket.chat/models';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type {\n\tAggregationCursor,\n\tCollection,\n\tFindCursor,\n\tDb,\n\tDocument,\n\tFilter,\n\tFindOptions,\n\tUpdateResult,\n\tIndexDescription,\n\tDeleteResult,\n\tUpdateFilter,\n\tModifyResult,\n\tFindOneAndUpdateOptions,\n} from 'mongodb';\nimport { ObjectId } from 'mongodb';\n\nimport { BaseRaw } from './BaseRaw';\nimport { notifyOnSettingChanged } from '../../../app/lib/server/lib/notifyListener';\n\nexport class LivechatVisitorsRaw extends BaseRaw<ILivechatVisitor> implements ILivechatVisitorsModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatVisitor>>) {\n\t\tsuper(db, 'livechat_visitor', trash);\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { token: 1 } },\n\t\t\t{ key: { 'phone.phoneNumber': 1 }, sparse: true },\n\t\t\t{ key: { 'visitorEmails.address': 1 }, sparse: true },\n\t\t\t{ key: { name: 1 }, sparse: true },\n\t\t\t{ key: { username: 1 } },\n\t\t\t{ key: { 'contactMananger.username': 1 }, sparse: true },\n\t\t\t{ key: { 'livechatData.$**': 1 } },\n\t\t\t{ key: { activity: 1 }, partialFilterExpression: { activity: { $exists: true } } },\n\t\t\t{ key: { disabled: 1 }, partialFilterExpression: { disabled: { $exists: true } } },\n\t\t];\n\t}\n\n\tfindOneVisitorByPhone(phone: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'phone.phoneNumber': phone,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tfindOneGuestByEmailAddress(emailAddress: string): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\t'visitorEmails.address': String(emailAddress).toLowerCase(),\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\t/**\n\t * Find visitors by _id\n\t * @param {string} token - Visitor token\n\t */\n\tfindById(_id: string, options: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t};\n\n\t\treturn this.find(query, options);\n\t}\n\n\tfindEnabled(query: Filter<ILivechatVisitor>, options?: FindOptions<ILivechatVisitor>): FindCursor<ILivechatVisitor> {\n\t\treturn this.find(\n\t\t\t{\n\t\t\t\t...query,\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t}\n\n\tfindOneEnabledById<T extends Document = ILivechatVisitor>(_id: string, options?: FindOptions<ILivechatVisitor>): Promise<T | null> {\n\t\tconst query = {\n\t\t\t_id,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findOne<T>(query, options);\n\t}\n\n\tfindVisitorByToken(token: string): FindCursor<ILivechatVisitor> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.find(query);\n\t}\n\n\tgetVisitorByToken(token: string, options: FindOptions<ILivechatVisitor>): Promise<ILivechatVisitor | null> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\treturn this.findOne(query, options);\n\t}\n\n\tcountVisitorsBetweenDate({ start, end, department }: { start: Date; end: Date; department?: string }): Promise<number> {\n\t\tconst query = {\n\t\t\tdisabled: { $ne: true },\n\t\t\t_updatedAt: {\n\t\t\t\t$gte: new Date(start),\n\t\t\t\t$lt: new Date(end),\n\t\t\t},\n\t\t\t...(department && department !== 'undefined' && { department }),\n\t\t};\n\n\t\treturn this.countDocuments(query);\n\t}\n\n\tasync getNextVisitorUsername(): Promise<string> {\n\t\t// TODO remove dependency from another model - this logic should be inside a service/function\n\t\tconst livechatCount = await Settings.incrementValueById('Livechat_guest_count', 1, { returnDocument: 'after' });\n\n\t\tif (!livechatCount.value) {\n\t\t\tthrow new Error(\"Can't find Livechat_guest_count setting\");\n\t\t}\n\n\t\tvoid notifyOnSettingChanged(livechatCount.value);\n\n\t\treturn `guest-${livechatCount.value.value}`;\n\t}\n\n\tfindByNameRegexWithExceptionsAndConditions<P extends Document = ILivechatVisitor>(\n\t\tsearchTerm: string,\n\t\texceptions: string[] = [],\n\t\tconditions: Filter<ILivechatVisitor> = {},\n\t\toptions: FindOptions<P extends ILivechatVisitor ? ILivechatVisitor : P> = {},\n\t): AggregationCursor<\n\t\tP & {\n\t\t\tcustom_name: string;\n\t\t}\n\t> {\n\t\tif (!Array.isArray(exceptions)) {\n\t\t\texceptions = [exceptions];\n\t\t}\n\n\t\tconst nameRegex = new RegExp(`^${escapeRegExp(searchTerm).trim()}`, 'i');\n\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\tname: nameRegex,\n\t\t\t\t_id: {\n\t\t\t\t\t$nin: exceptions,\n\t\t\t\t},\n\t\t\t\t...conditions,\n\t\t\t},\n\t\t};\n\n\t\tconst { projection, sort, skip, limit } = options;\n\t\tconst project = {\n\t\t\t$project: {\n\t\t\t\t// TODO: move this logic to client\n\t\t\t\tcustom_name: { $concat: ['$username', ' - ', '$name'] },\n\t\t\t\t...projection,\n\t\t\t},\n\t\t};\n\n\t\tconst order = { $sort: sort || { name: 1 } };\n\t\tconst params: Record<string, unknown>[] = [match, order, skip && { $skip: skip }, limit && { $limit: limit }, project].filter(\n\t\t\tBoolean,\n\t\t) as Record<string, unknown>[];\n\n\t\treturn this.col.aggregate(params);\n\t}\n\n\t/**\n\t * Find visitors by their email or phone or username or name\n\t */\n\tasync findPaginatedVisitorsByEmailOrPhoneOrNameOrUsernameOrCustomField(\n\t\temailOrPhone?: string,\n\t\tnameOrUsername?: RegExp,\n\t\tallowedCustomFields: string[] = [],\n\t\toptions?: FindOptions<ILivechatVisitor>,\n\t): Promise<FindPaginated<FindCursor<ILivechatVisitor>>> {\n\t\tif (!emailOrPhone && !nameOrUsername && allowedCustomFields.length === 0) {\n\t\t\treturn this.findPaginated({ disabled: { $ne: true } }, options);\n\t\t}\n\n\t\tconst query: Filter<ILivechatVisitor> = {\n\t\t\t$or: [\n\t\t\t\t...(emailOrPhone\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'visitorEmails.address': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'phone.phoneNumber': emailOrPhone,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...(nameOrUsername\n\t\t\t\t\t? [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tusername: nameOrUsername,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]\n\t\t\t\t\t: []),\n\t\t\t\t...allowedCustomFields.map((c: string) => ({ [`livechatData.${c}`]: nameOrUsername })),\n\t\t\t],\n\t\t\tdisabled: { $ne: true },\n\t\t};\n\n\t\treturn this.findPaginated(query, options);\n\t}\n\n\tasync findOneByEmailAndPhoneAndCustomField(\n\t\temail: string | null | undefined,\n\t\tphone: string | null | undefined,\n\t\tcustomFields?: { [key: string]: RegExp },\n\t): Promise<ILivechatVisitor | null> {\n\t\tconst query = Object.assign(\n\t\t\t{\n\t\t\t\tdisabled: { $ne: true },\n\t\t\t},\n\t\t\t{\n\t\t\t\t...(email && { visitorEmails: { address: email } }),\n\t\t\t\t...(phone && { phone: { phoneNumber: phone } }),\n\t\t\t\t...customFields,\n\t\t\t},\n\t\t);\n\n\t\tif (Object.keys(query).length === 1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.findOne(query);\n\t}\n\n\tasync updateLivechatDataByToken(\n\t\ttoken: string,\n\t\tkey: string,\n\t\tvalue: unknown,\n\t\toverwrite = true,\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tif (!overwrite) {\n\t\t\tconst user = await this.getVisitorByToken(token, { projection: { livechatData: 1 } });\n\t\t\tif (user?.livechatData && typeof user.livechatData[key] !== 'undefined') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$set: {\n\t\t\t\t[`livechatData.${key}`]: value,\n\t\t\t},\n\t\t} as UpdateFilter<ILivechatVisitor>; // TODO: Remove this cast when TypeScript is updated\n\t\t// TypeScript is not smart enough to infer that `messages.${string}` matches keys of `ILivechatVisitor`;\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateLastAgentByToken(token: string, lastAgent: ILivechatVisitor['lastAgent']): Promise<Document | UpdateResult> {\n\t\tconst query = {\n\t\t\ttoken,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlastAgent,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tupdateById(_id: string, update: UpdateFilter<ILivechatVisitor>): Promise<Document | UpdateResult> {\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tasync updateOneByIdOrToken(\n\t\tupdate: Partial<ILivechatVisitor>,\n\t\toptions?: FindOneAndUpdateOptions,\n\t): Promise<ModifyResult<ILivechatVisitor>> {\n\t\tlet query: Filter<ILivechatVisitor> = {};\n\n\t\tif (update._id) {\n\t\t\tquery = { _id: update._id };\n\t\t} else if (update.token) {\n\t\t\tquery = { token: update.token };\n\t\t\tupdate._id = new ObjectId().toHexString();\n\t\t}\n\n\t\treturn this.findOneAndUpdate(query, { $set: update }, options);\n\t}\n\n\tsaveGuestById(\n\t\t_id: string,\n\t\tdata: { name?: string; username?: string; email?: string; phone?: string; livechatData: { [k: string]: any } },\n\t): Promise<UpdateResult | Document | boolean> {\n\t\tconst setData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$set']> = {};\n\t\tconst unsetData: DeepWriteable<UpdateFilter<ILivechatVisitor>['$unset']> = {};\n\n\t\tif (data.name) {\n\t\t\tif (data.name?.trim()) {\n\t\t\t\tsetData.name = data.name.trim();\n\t\t\t} else {\n\t\t\t\tunsetData.name = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.email) {\n\t\t\tif (data.email?.trim()) {\n\t\t\t\tsetData.visitorEmails = [{ address: data.email.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.visitorEmails = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.phone) {\n\t\t\tif (data.phone?.trim()) {\n\t\t\t\tsetData.phone = [{ phoneNumber: data.phone.trim() }];\n\t\t\t} else {\n\t\t\t\tunsetData.phone = 1;\n\t\t\t}\n\t\t}\n\n\t\tif (data.livechatData) {\n\t\t\tObject.keys(data.livechatData).forEach((key) => {\n\t\t\t\tconst value = data.livechatData[key]?.trim();\n\t\t\t\tif (value) {\n\t\t\t\t\tsetData[`livechatData.${key}`] = value;\n\t\t\t\t} else {\n\t\t\t\t\tunsetData[`livechatData.${key}`] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t...(Object.keys(setData).length && { $set: setData as UpdateFilter<ILivechatVisitor>['$set'] }),\n\t\t\t...(Object.keys(unsetData).length && { $unset: unsetData as UpdateFilter<ILivechatVisitor>['$unset'] }),\n\t\t};\n\n\t\tif (!Object.keys(update).length) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveDepartmentById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $unset: { department: 1 } });\n\t}\n\n\tremoveById(_id: string): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ _id });\n\t}\n\n\tsaveGuestEmailPhoneById(_id: string, emails: string[], phones: string[]): Promise<UpdateResult | Document | void> {\n\t\tconst saveEmail = ([] as string[])\n\t\t\t.concat(emails)\n\t\t\t.filter((email) => email?.trim())\n\t\t\t.map((email) => ({ address: email }));\n\n\t\tconst savePhone = ([] as string[])\n\t\t\t.concat(phones)\n\t\t\t.filter((phone) => phone?.trim().replace(/[^\\d]/g, ''))\n\t\t\t.map((phone) => ({ phoneNumber: phone }));\n\n\t\tconst update: UpdateFilter<ILivechatVisitor> = {\n\t\t\t$addToSet: {\n\t\t\t\t...(saveEmail.length && { visitorEmails: { $each: saveEmail } }),\n\t\t\t\t...(savePhone.length && { phone: { $each: savePhone } }),\n\t\t\t},\n\t\t};\n\n\t\tif (!Object.keys(update.$addToSet as Record<string, any>).length) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.updateOne({ _id }, update);\n\t}\n\n\tremoveContactManagerByUsername(manager: string): Promise<Document | UpdateResult> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tcontactManager: {\n\t\t\t\t\tusername: manager,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: {\n\t\t\t\t\tcontactManager: true,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tisVisitorActiveOnPeriod(visitorId: string, period: string): Promise<boolean> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t\tactivity: period,\n\t\t};\n\n\t\treturn this.findOne(query, { projection: { _id: 1 } }).then(Boolean);\n\t}\n\n\tmarkVisitorActiveForPeriod(visitorId: string, period: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\t_id: visitorId,\n\t\t};\n\n\t\tconst update = {\n\t\t\t$push: {\n\t\t\t\tactivity: {\n\t\t\t\t\t$each: [period],\n\t\t\t\t\t$slice: -12,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tdisableById(_id: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: { disabled: true },\n\t\t\t\t$unset: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t\tcontactManager: 1,\n\t\t\t\t\ttoken: 1,\n\t\t\t\t\tvisitorEmails: 1,\n\t\t\t\t\tphone: 1,\n\t\t\t\t\tname: 1,\n\t\t\t\t\tlivechatData: 1,\n\t\t\t\t\tlastChat: 1,\n\t\t\t\t\tip: 1,\n\t\t\t\t\thost: 1,\n\t\t\t\t\tuserAgent: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tcountVisitorsOnPeriod(period: string): Promise<number> {\n\t\treturn this.countDocuments({\n\t\t\tactivity: period,\n\t\t});\n\t}\n\n\tsetLastChatById(_id: string, lastChat: Required<ILivechatVisitor['lastChat']>): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id },\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastChat,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n\ntype DeepWriteable<T> = { -readonly [P in keyof T]: DeepWriteable<T[P]> };\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"682e4e6627f69fc1fd40b9ba6e3dc3a78a1e3c43"}
