{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/voip/LocalStream.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"client/lib/voip/LocalStream.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/voip/LocalStream.ts","inputSourceMap":{"version":3,"file":"client/lib/voip/LocalStream.ts","sourceRoot":"","sources":["client/lib/voip/LocalStream.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is used for local stream manipulation.\n * @remarks\n * This class does not really store any local stream for the reason\n * that the local stream tracks are stored in the peer connection.\n *\n * This simply provides necessary methods for stream manipulation.\n *\n * Currently it does not use any of its base functionality. Nevertheless\n * there might be a need that we may want to do some stream operations\n * such as closing of tracks, in future. For that purpose, it is written\n * this way.\n *\n */\n\nimport type { Session } from 'sip.js';\nimport type { MediaStreamFactory, SessionDescriptionHandler } from 'sip.js/lib/platform/web';\nimport { defaultMediaStreamFactory } from 'sip.js/lib/platform/web';\n\nimport Stream from './Stream';\n\nexport default class LocalStream extends Stream {\n\tstatic async requestNewStream(constraints: MediaStreamConstraints, session: Session): Promise<MediaStream | undefined> {\n\t\tconst factory: MediaStreamFactory = defaultMediaStreamFactory();\n\t\tif (session?.sessionDescriptionHandler) {\n\t\t\treturn factory(constraints, session.sessionDescriptionHandler as SessionDescriptionHandler);\n\t\t}\n\t}\n\n\tstatic async replaceTrack(peerConnection: RTCPeerConnection, newStream: MediaStream, mediaType?: 'audio' | 'video'): Promise<boolean> {\n\t\tconst senders = peerConnection.getSenders();\n\t\tif (!senders) {\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * This will be called when media device change happens.\n\t\t * This needs to be called externally when the device change occurs.\n\t\t * This function first acquires the new stream based on device selection\n\t\t * and then replaces the track in the sender of existing stream by track acquired\n\t\t * by caputuring new stream.\n\t\t *\n\t\t * Notes:\n\t\t * Each sender represents a track in the RTCPeerConnection.\n\t\t * Peer connection will contain single track for\n\t\t * each, audio, video and data.\n\t\t * Furthermore, We are assuming that\n\t\t * newly captured stream will have a single track for each media type. i.e\n\t\t * audio video and data. But this assumption may not be true atleast in theory. One may see multiple\n\t\t * audio track in the captured stream or multiple senders for same kind in the peer connection\n\t\t * If/When such situation arrives in future, we may need to revisit the track replacement logic.\n\t\t * */\n\n\t\tswitch (mediaType) {\n\t\t\tcase 'audio': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getAudioTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No audio tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'audio') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tcase 'video': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No video tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'video') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < newTracks.length; j++) {\n\t\t\t\t\t\tif (senders[i].track?.kind === newTracks[j].kind) {\n\t\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[j]);\n\t\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/client/lib/voip/LocalStream.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"client/lib/voip/LocalStream.ts","inputSourceMap":{"version":3,"file":"client/lib/voip/LocalStream.ts","sourceRoot":"","sources":["client/lib/voip/LocalStream.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This class is used for local stream manipulation.\n * @remarks\n * This class does not really store any local stream for the reason\n * that the local stream tracks are stored in the peer connection.\n *\n * This simply provides necessary methods for stream manipulation.\n *\n * Currently it does not use any of its base functionality. Nevertheless\n * there might be a need that we may want to do some stream operations\n * such as closing of tracks, in future. For that purpose, it is written\n * this way.\n *\n */\n\nimport type { Session } from 'sip.js';\nimport type { MediaStreamFactory, SessionDescriptionHandler } from 'sip.js/lib/platform/web';\nimport { defaultMediaStreamFactory } from 'sip.js/lib/platform/web';\n\nimport Stream from './Stream';\n\nexport default class LocalStream extends Stream {\n\tstatic async requestNewStream(constraints: MediaStreamConstraints, session: Session): Promise<MediaStream | undefined> {\n\t\tconst factory: MediaStreamFactory = defaultMediaStreamFactory();\n\t\tif (session?.sessionDescriptionHandler) {\n\t\t\treturn factory(constraints, session.sessionDescriptionHandler as SessionDescriptionHandler);\n\t\t}\n\t}\n\n\tstatic async replaceTrack(peerConnection: RTCPeerConnection, newStream: MediaStream, mediaType?: 'audio' | 'video'): Promise<boolean> {\n\t\tconst senders = peerConnection.getSenders();\n\t\tif (!senders) {\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * This will be called when media device change happens.\n\t\t * This needs to be called externally when the device change occurs.\n\t\t * This function first acquires the new stream based on device selection\n\t\t * and then replaces the track in the sender of existing stream by track acquired\n\t\t * by caputuring new stream.\n\t\t *\n\t\t * Notes:\n\t\t * Each sender represents a track in the RTCPeerConnection.\n\t\t * Peer connection will contain single track for\n\t\t * each, audio, video and data.\n\t\t * Furthermore, We are assuming that\n\t\t * newly captured stream will have a single track for each media type. i.e\n\t\t * audio video and data. But this assumption may not be true atleast in theory. One may see multiple\n\t\t * audio track in the captured stream or multiple senders for same kind in the peer connection\n\t\t * If/When such situation arrives in future, we may need to revisit the track replacement logic.\n\t\t * */\n\n\t\tswitch (mediaType) {\n\t\t\tcase 'audio': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getAudioTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No audio tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'audio') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tcase 'video': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No video tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'video') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < newTracks.length; j++) {\n\t\t\t\t\t\tif (senders[i].track?.kind === newTracks[j].kind) {\n\t\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[j]);\n\t\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nmodule.export({\n  \"default\": function () {\n    return LocalStream;\n  }\n});\nvar defaultMediaStreamFactory;\nmodule.link(\"sip.js/lib/platform/web\", {\n  defaultMediaStreamFactory: function (v) {\n    defaultMediaStreamFactory = v;\n  }\n}, 0);\nvar Stream;\nmodule.link(\"./Stream\", {\n  \"default\": function (v) {\n    Stream = v;\n  }\n}, 1);\nvar LocalStream = /*#__PURE__*/function (_Stream) {\n  function LocalStream() {\n    return _Stream.apply(this, arguments) || this;\n  }\n  _inheritsLoose(LocalStream, _Stream);\n  LocalStream.requestNewStream = function () {\n    function requestNewStream(constraints, session) {\n      var factory;\n      return _regeneratorRuntime.async(function () {\n        function requestNewStream$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              factory = defaultMediaStreamFactory();\n              if (!(session !== null && session !== void 0 && session.sessionDescriptionHandler)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\", factory(constraints, session.sessionDescriptionHandler));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return requestNewStream$;\n      }(), null, null, null, Promise);\n    }\n    return requestNewStream;\n  }();\n  LocalStream.replaceTrack = function () {\n    function replaceTrack(peerConnection, newStream, mediaType) {\n      var senders, replaced, newTracks, i, _senders$i$track, _replaced, _newTracks, _i, _senders$_i$track, _replaced2, _newTracks2, _i2, j, _senders$_i2$track;\n      return _regeneratorRuntime.async(function () {\n        function replaceTrack$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              senders = peerConnection.getSenders();\n              if (senders) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 3:\n              _context2.t0 = mediaType;\n              _context2.next = _context2.t0 === 'audio' ? 6 : _context2.t0 === 'video' ? 21 : 36;\n              break;\n            case 6:\n              replaced = false;\n              newTracks = newStream.getAudioTracks();\n              if (newTracks) {\n                _context2.next = 11;\n                break;\n              }\n              console.warn('replaceTrack() : No audio tracks in the stream. Returning');\n              return _context2.abrupt(\"return\", false);\n            case 11:\n              i = 0;\n            case 12:\n              if (!(i < (senders === null || senders === void 0 ? void 0 : senders.length))) {\n                _context2.next = 20;\n                break;\n              }\n              if (!(((_senders$i$track = senders[i].track) === null || _senders$i$track === void 0 ? void 0 : _senders$i$track.kind) === 'audio')) {\n                _context2.next = 17;\n                break;\n              }\n              senders[i].replaceTrack(newTracks[0]);\n              replaced = true;\n              return _context2.abrupt(\"break\", 20);\n            case 17:\n              i++;\n              _context2.next = 12;\n              break;\n            case 20:\n              return _context2.abrupt(\"return\", replaced);\n            case 21:\n              _replaced = false;\n              _newTracks = newStream.getVideoTracks();\n              if (_newTracks) {\n                _context2.next = 26;\n                break;\n              }\n              console.warn('replaceTrack() : No video tracks in the stream. Returning');\n              return _context2.abrupt(\"return\", false);\n            case 26:\n              _i = 0;\n            case 27:\n              if (!(_i < (senders === null || senders === void 0 ? void 0 : senders.length))) {\n                _context2.next = 35;\n                break;\n              }\n              if (!(((_senders$_i$track = senders[_i].track) === null || _senders$_i$track === void 0 ? void 0 : _senders$_i$track.kind) === 'video')) {\n                _context2.next = 32;\n                break;\n              }\n              senders[_i].replaceTrack(_newTracks[0]);\n              _replaced = true;\n              return _context2.abrupt(\"break\", 35);\n            case 32:\n              _i++;\n              _context2.next = 27;\n              break;\n            case 35:\n              return _context2.abrupt(\"return\", _replaced);\n            case 36:\n              _replaced2 = false;\n              _newTracks2 = newStream.getVideoTracks();\n              if (_newTracks2) {\n                _context2.next = 41;\n                break;\n              }\n              console.warn('replaceTrack() : No tracks in the stream. Returning');\n              return _context2.abrupt(\"return\", false);\n            case 41:\n              _i2 = 0;\n            case 42:\n              if (!(_i2 < (senders === null || senders === void 0 ? void 0 : senders.length))) {\n                _context2.next = 55;\n                break;\n              }\n              j = 0;\n            case 44:\n              if (!(j < _newTracks2.length)) {\n                _context2.next = 52;\n                break;\n              }\n              if (!(((_senders$_i2$track = senders[_i2].track) === null || _senders$_i2$track === void 0 ? void 0 : _senders$_i2$track.kind) === _newTracks2[j].kind)) {\n                _context2.next = 49;\n                break;\n              }\n              senders[_i2].replaceTrack(_newTracks2[j]);\n              _replaced2 = true;\n              return _context2.abrupt(\"break\", 52);\n            case 49:\n              j++;\n              _context2.next = 44;\n              break;\n            case 52:\n              _i2++;\n              _context2.next = 42;\n              break;\n            case 55:\n              return _context2.abrupt(\"return\", _replaced2);\n            case 56:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n        return replaceTrack$;\n      }(), null, null, null, Promise);\n    }\n    return replaceTrack;\n  }();\n  return LocalStream;\n}(Stream);","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","_inheritsLoose","export","LocalStream","defaultMediaStreamFactory","Stream","_Stream","apply","arguments","requestNewStream","constraints","session","factory","async","requestNewStream$","_context","prev","next","sessionDescriptionHandler","abrupt","stop","Promise","replaceTrack","peerConnection","newStream","mediaType","senders","replaced","newTracks","i","_senders$i$track","_replaced","_newTracks","_i","_senders$_i$track","_replaced2","_newTracks2","_i2","j","_senders$_i2$track","replaceTrack$","_context2","getSenders","t0","getAudioTracks","console","warn","length","track","kind","getVideoTracks"],"sources":["client/lib/voip/LocalStream.ts"],"sourcesContent":["/**\n * This class is used for local stream manipulation.\n * @remarks\n * This class does not really store any local stream for the reason\n * that the local stream tracks are stored in the peer connection.\n *\n * This simply provides necessary methods for stream manipulation.\n *\n * Currently it does not use any of its base functionality. Nevertheless\n * there might be a need that we may want to do some stream operations\n * such as closing of tracks, in future. For that purpose, it is written\n * this way.\n *\n */\n\nimport type { Session } from 'sip.js';\nimport type { MediaStreamFactory, SessionDescriptionHandler } from 'sip.js/lib/platform/web';\nimport { defaultMediaStreamFactory } from 'sip.js/lib/platform/web';\n\nimport Stream from './Stream';\n\nexport default class LocalStream extends Stream {\n\tstatic async requestNewStream(constraints: MediaStreamConstraints, session: Session): Promise<MediaStream | undefined> {\n\t\tconst factory: MediaStreamFactory = defaultMediaStreamFactory();\n\t\tif (session?.sessionDescriptionHandler) {\n\t\t\treturn factory(constraints, session.sessionDescriptionHandler as SessionDescriptionHandler);\n\t\t}\n\t}\n\n\tstatic async replaceTrack(peerConnection: RTCPeerConnection, newStream: MediaStream, mediaType?: 'audio' | 'video'): Promise<boolean> {\n\t\tconst senders = peerConnection.getSenders();\n\t\tif (!senders) {\n\t\t\treturn false;\n\t\t}\n\t\t/**\n\t\t * This will be called when media device change happens.\n\t\t * This needs to be called externally when the device change occurs.\n\t\t * This function first acquires the new stream based on device selection\n\t\t * and then replaces the track in the sender of existing stream by track acquired\n\t\t * by caputuring new stream.\n\t\t *\n\t\t * Notes:\n\t\t * Each sender represents a track in the RTCPeerConnection.\n\t\t * Peer connection will contain single track for\n\t\t * each, audio, video and data.\n\t\t * Furthermore, We are assuming that\n\t\t * newly captured stream will have a single track for each media type. i.e\n\t\t * audio video and data. But this assumption may not be true atleast in theory. One may see multiple\n\t\t * audio track in the captured stream or multiple senders for same kind in the peer connection\n\t\t * If/When such situation arrives in future, we may need to revisit the track replacement logic.\n\t\t * */\n\n\t\tswitch (mediaType) {\n\t\t\tcase 'audio': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getAudioTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No audio tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'audio') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tcase 'video': {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No video tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tif (senders[i].track?.kind === 'video') {\n\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[0]);\n\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tlet replaced = false;\n\t\t\t\tconst newTracks = newStream.getVideoTracks();\n\t\t\t\tif (!newTracks) {\n\t\t\t\t\tconsole.warn('replaceTrack() : No tracks in the stream. Returning');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < senders?.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < newTracks.length; j++) {\n\t\t\t\t\t\tif (senders[i].track?.kind === newTracks[j].kind) {\n\t\t\t\t\t\t\tsenders[i].replaceTrack(newTracks[j]);\n\t\t\t\t\t\t\treplaced = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn replaced;\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"AAAA,IAAAA,mBAAA;AAAAC,MAAA,CAAAC,IAAA;EAAAC,OAAA,WAAAA,CAAAC,CAAA;IAAAJ,mBAAA,GAAAI,CAAA;EAAA;AAAA;AAAA,IAAAC,cAAA;AAAAJ,MAAA,CAAAC,IAAA;EAAAC,OAAA,WAAAA,CAAAC,CAAA;IAAAC,cAAA,GAAAD,CAAA;EAAA;AAAA;AAAAH,MAAA,CAAAK,MAAA;EAAA,oBAAAH,CAAA;IAAA,OAAAI,WAAA;EAAA;AAAA;AAAA,IAAAC,yBAAA;AAAAP,MAAA,CAAAC,IAAA;EAAAM,yBAAA,WAAAA,CAAAJ,CAAA;IAAAI,yBAAA,GAAAJ,CAAA;EAAA;AAAA;AAAA,IAAAK,MAAA;AAAAR,MAAA,CAAAC,IAAA;EAAA,oBAAAC,CAAAC,CAAA;IAAAK,MAAA,GAAAL,CAAA;EAAA;AAAA;AAAA,IAqBqBG,WAAY,0BAAAG,OAAA;EAAA,SAAAH,YAAA;IAAA,OAAAG,OAAA,CAAAC,KAAA,OAAAC,SAAA;EAAA;EAAAP,cAAA,CAAAE,WAAA,EAAAG,OAAA;EAAAH,WAAA,CACnBM,gBAAgB;IAA7B,SAAAA,iBAA8BC,WAAmC,EAAEC,OAAgB;MAAA,IAAAC,OAAA;MAAA,OAAAhB,mBAAA,CAAAiB,KAAA;QAAA,SAAAC,kBAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAC5EL,OAAO,GAAuBR,yBAAyB,EAAE;cAAA,MAC3DO,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEO,yBAAyB;gBAAAH,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAI,MAAA,WAC9BP,OAAO,CAACF,WAAW,EAAEC,OAAO,CAACO,yBAAsD,CAAC;YAAA;YAAA;cAAA,OAAAH,QAAA,CAAAK,IAAA;UAAA;QAAA;QAAA,OAAAN,iBAAA;MAAA,uBAAAO,OAAA;IAAA;IAE5F,OAAAZ,gBAAA;EAAA;EAAAN,WAAA,CAEYmB,YAAY;IAAzB,SAAAA,aAA0BC,cAAiC,EAAEC,SAAsB,EAAEC,SAA6B;MAAA,IAAAC,OAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,CAAA,EAAAC,gBAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,EAAA,EAAAC,iBAAA,EAAAC,UAAA,EAAAC,WAAA,EAAAC,GAAA,EAAAC,CAAA,EAAAC,kBAAA;MAAA,OAAA3C,mBAAA,CAAAiB,KAAA;QAAA,SAAA2B,cAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzB,IAAA,GAAAyB,SAAA,CAAAxB,IAAA;YAAA;cAC3GS,OAAO,GAAGH,cAAc,CAACmB,UAAU,EAAE;cAAA,IACtChB,OAAO;gBAAAe,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cAAA,OAAAwB,SAAA,CAAAtB,MAAA,WACJ,KAAK;YAAA;cAAAsB,SAAA,CAAAE,EAAA,GAoBLlB,SAAS;cAAAgB,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAAE,EAAA,KACX,OAAO,OAAAF,SAAA,CAAAE,EAAA,KAgBP,OAAO;cAAA;YAAA;cAfPhB,QAAQ,GAAG,KAAK;cACdC,SAAS,GAAGJ,SAAS,CAACoB,cAAc,EAAE;cAAA,IACvChB,SAAS;gBAAAa,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACb4B,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC;cAAC,OAAAL,SAAA,CAAAtB,MAAA,WACnE,KAAK;YAAA;cAEJU,CAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,CAAC,IAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,MAAM;gBAAAN,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cAAA,MAC9B,EAAAa,gBAAA,GAAAJ,OAAO,CAACG,CAAC,CAAC,CAACmB,KAAK,cAAAlB,gBAAA,uBAAhBA,gBAAA,CAAkBmB,IAAI,MAAK,OAAO;gBAAAR,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACrCS,OAAO,CAACG,CAAC,CAAC,CAACP,YAAY,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC;cACrCD,QAAQ,GAAG,IAAI;cAAC,OAAAc,SAAA,CAAAtB,MAAA;YAAA;cAHmBU,CAAC,EAAE;cAAAY,SAAA,CAAAxB,IAAA;cAAA;YAAA;cAAA,OAAAwB,SAAA,CAAAtB,MAAA,WAOjCQ,QAAQ;YAAA;cAGXA,SAAQ,GAAG,KAAK;cACdC,UAAS,GAAGJ,SAAS,CAAC0B,cAAc,EAAE;cAAA,IACvCtB,UAAS;gBAAAa,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACb4B,OAAO,CAACC,IAAI,CAAC,2DAA2D,CAAC;cAAC,OAAAL,SAAA,CAAAtB,MAAA,WACnE,KAAK;YAAA;cAEJU,EAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,EAAC,IAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,MAAM;gBAAAN,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cAAA,MAC9B,EAAAiB,iBAAA,GAAAR,OAAO,CAACG,EAAC,CAAC,CAACmB,KAAK,cAAAd,iBAAA,uBAAhBA,iBAAA,CAAkBe,IAAI,MAAK,OAAO;gBAAAR,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACrCS,OAAO,CAACG,EAAC,CAAC,CAACP,YAAY,CAACM,UAAS,CAAC,CAAC,CAAC,CAAC;cACrCD,SAAQ,GAAG,IAAI;cAAC,OAAAc,SAAA,CAAAtB,MAAA;YAAA;cAHmBU,EAAC,EAAE;cAAAY,SAAA,CAAAxB,IAAA;cAAA;YAAA;cAAA,OAAAwB,SAAA,CAAAtB,MAAA,WAOjCQ,SAAQ;YAAA;cAGXA,UAAQ,GAAG,KAAK;cACdC,WAAS,GAAGJ,SAAS,CAAC0B,cAAc,EAAE;cAAA,IACvCtB,WAAS;gBAAAa,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACb4B,OAAO,CAACC,IAAI,CAAC,qDAAqD,CAAC;cAAC,OAAAL,SAAA,CAAAtB,MAAA,WAC7D,KAAK;YAAA;cAEJU,GAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,GAAC,IAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqB,MAAM;gBAAAN,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cACzBqB,CAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,CAAC,GAAGV,WAAS,CAACmB,MAAM;gBAAAN,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cAAA,MAC/B,EAAAsB,kBAAA,GAAAb,OAAO,CAACG,GAAC,CAAC,CAACmB,KAAK,cAAAT,kBAAA,uBAAhBA,kBAAA,CAAkBU,IAAI,MAAKrB,WAAS,CAACU,CAAC,CAAC,CAACW,IAAI;gBAAAR,SAAA,CAAAxB,IAAA;gBAAA;cAAA;cAC/CS,OAAO,CAACG,GAAC,CAAC,CAACP,YAAY,CAACM,WAAS,CAACU,CAAC,CAAC,CAAC;cACrCX,UAAQ,GAAG,IAAI;cAAC,OAAAc,SAAA,CAAAtB,MAAA;YAAA;cAHoBmB,CAAC,EAAE;cAAAG,SAAA,CAAAxB,IAAA;cAAA;YAAA;cADLY,GAAC,EAAE;cAAAY,SAAA,CAAAxB,IAAA;cAAA;YAAA;cAAA,OAAAwB,SAAA,CAAAtB,MAAA,WASjCQ,UAAQ;YAAA;YAAA;cAAA,OAAAc,SAAA,CAAArB,IAAA;UAAA;QAAA;QAAA,OAAAoB,aAAA;MAAA,uBAAAnB,OAAA;IAAA;IAGjB,OAAAC,YAAA;EAAA;EAAA,OAAAnB,WAAA;AAAA,EAnFuCE,MAAM","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"6dc48956bcd57cb1afd1ce7586b860eccedc3811"}
