{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyListener.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/lib/notifyListener.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyListener.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/notifyListener.ts","sourceRoot":"","sources":["app/lib/server/lib/notifyListener.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tIRocketChatRecord,\n\tIRoom,\n\tILoginServiceConfiguration,\n\tISetting,\n\tIRole,\n\tIPermission,\n\tIIntegration,\n\tIPbxEvent,\n\tLoginServiceConfiguration as LoginServiceConfigurationData,\n\tILivechatInquiryRecord,\n\tILivechatPriority,\n\tILivechatDepartmentAgents,\n\tIEmailInbox,\n\tIIntegrationHistory,\n\tAtLeast,\n\tISubscription,\n\tISettingColor,\n\tIUser,\n\tIMessage,\n\tSettingValue,\n\tMessageTypesValues,\n} from '@rocket.chat/core-typings';\nimport {\n\tRooms,\n\tPermissions,\n\tSettings,\n\tPbxEvents,\n\tRoles,\n\tIntegrations,\n\tLoginServiceConfiguration,\n\tIntegrationHistory,\n\tSubscriptions,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tUsers,\n\tMessages,\n} from '@rocket.chat/models';\nimport mem from 'memoize';\n\nimport { subscriptionFields } from '../../../../lib/publishFields';\nimport { shouldHideSystemMessage } from '../../../../server/lib/systemMessage/hideSystemMessage';\n\ntype ClientAction = 'inserted' | 'updated' | 'removed';\n\nfunction withDbWatcherCheck<T extends (...args: any[]) => Promise<void>>(fn: T): T {\n\treturn dbWatchersDisabled ? fn : ((() => Promise.resolve()) as T);\n}\n\nexport const notifyOnLivechatPriorityChanged = withDbWatcherCheck(\n\tasync (data: Pick<ILivechatPriority, 'name' | '_id'>, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst { _id, ...rest } = data;\n\t\tvoid api.broadcast('watch.priorities', { clientAction, id: _id, diff: { ...rest } });\n\t},\n);\n\nexport const notifyOnRoomChanged = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(data: T | T[], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedById = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(ids: T['_id'] | T['_id'][], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst eligibleIds = Array.isArray(ids) ? ids : [ids];\n\t\tconst items = Rooms.findByIds(eligibleIds);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUsernamesOrUids = withDbWatcherCheck(\n\tasync <T extends IRoom>(\n\t\tuids: T['u']['_id'][],\n\t\tusernames: T['u']['username'][],\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tconst items = Rooms.findByUsernamesOrUids(uids, usernames);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUserDM = withDbWatcherCheck(\n\tasync <T extends IRoom>(userId: T['u']['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Rooms.findDMsByUids([userId]);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChanged = withDbWatcherCheck(\n\tasync (permission: IPermission, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('permission.changed', { clientAction, data: permission });\n\n\t\tif (permission.level === 'settings' && permission.settingId) {\n\t\t\tconst setting = await Settings.findOneNotHiddenById(permission.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid notifyOnSettingChanged(setting, 'updated');\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChangedById = withDbWatcherCheck(\n\tasync (pid: IPermission['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst permission = await Permissions.findOneById(pid);\n\t\tif (!permission) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn notifyOnPermissionChanged(permission, clientAction);\n\t},\n);\n\nexport const notifyOnPbxEventChangedById = withDbWatcherCheck(\n\tasync <T extends IPbxEvent>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await PbxEvents.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.pbxevents', { clientAction, id, data: item });\n\t},\n);\n\nexport const notifyOnRoleChanged = withDbWatcherCheck(\n\tasync <T extends IRole>(role: T, clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tvoid api.broadcast('watch.roles', { clientAction, role });\n\t},\n);\n\nexport const notifyOnRoleChangedById = withDbWatcherCheck(\n\tasync <T extends IRole>(id: T['_id'], clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tconst role = await Roles.findOneById(id);\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnRoleChanged(role, clientAction);\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChanged = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(\n\t\tservice: Partial<T> & Pick<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.loginServiceConfiguration', {\n\t\t\tclientAction,\n\t\t\tid: service._id,\n\t\t\tdata: service,\n\t\t});\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChangedByService = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(service: T['service'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await LoginServiceConfiguration.findOneByService<Omit<LoginServiceConfigurationData, 'secret'>>(service, {\n\t\t\tprojection: { secret: 0 },\n\t\t});\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnLoginServiceConfigurationChanged(item, clientAction);\n\t},\n);\n\nexport const notifyOnIntegrationChanged = withDbWatcherCheck(\n\tasync <T extends IIntegration>(data: T, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnIntegrationChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await Integrations.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t},\n);\n\nexport const notifyOnIntegrationChangedByUserId = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['userId'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByUserId(id);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnIntegrationChangedByChannels = withDbWatcherCheck(\n\tasync <T extends IIntegration>(channels: T['channel'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByChannels(channels);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnEmailInboxChanged = withDbWatcherCheck(\n\tasync <T extends IEmailInbox>(\n\t\tdata: Pick<T, '_id'> | T, // TODO: improve typing\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.emailInbox', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChanged = withDbWatcherCheck(\n\tasync (\n\t\tdata: ILivechatInquiryRecord | ILivechatInquiryRecord[],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry: item, diff });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedById = withDbWatcherCheck(\n\tasync (\n\t\tid: ILivechatInquiryRecord['_id'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = clientAction === 'removed' ? await LivechatInquiry.trashFindOneById(id) : await LivechatInquiry.findOneById(id);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByRoom = withDbWatcherCheck(\n\tasync (\n\t\trid: ILivechatInquiryRecord['rid'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByToken = withDbWatcherCheck(\n\tasync (\n\t\ttoken: ILivechatInquiryRecord['v']['token'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByToken(token);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChanged = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(\n\t\tdata: AtLeast<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff: Partial<T> = {},\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: data._id, data, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(id: T['_id'], clientAction: ClientAction = 'updated', diff: Partial<T> = {}): Promise<void> => {\n\t\tconst item = await IntegrationHistory.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: item._id, data: item, diff });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChanged = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdata: Partial<T> & Pick<T, '_id' | 'agentId' | 'departmentId'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByDepartmentId(departmentId, { projection: { _id: 1, agentId: 1, departmentId: 1 } });\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tagentsIds: T['agentId'][],\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsIds, departmentId, {\n\t\t\tprojection: { _id: 1, agentId: 1, departmentId: 1 },\n\t\t});\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnSettingChanged = withDbWatcherCheck(\n\tasync (setting: ISetting & { editor?: ISettingColor['editor'] }, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting });\n\t},\n);\n\nexport const notifyOnSettingChangedById = withDbWatcherCheck(\n\tasync (id: ISetting['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = clientAction === 'removed' ? await Settings.trashFindOneById(id) : await Settings.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting: item });\n\t},\n);\n\ntype NotifyUserChange = {\n\tid: IUser['_id'];\n\tclientAction: 'inserted' | 'removed' | 'updated';\n\tdata?: IUser;\n\tdiff?: Record<string, any>;\n\tunset?: Record<string, number>;\n};\n\nexport const notifyOnUserChange = withDbWatcherCheck(async ({ clientAction, id, data, diff, unset }: NotifyUserChange) => {\n\tif (clientAction === 'removed') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id });\n\t\treturn;\n\t}\n\n\tif (clientAction === 'inserted') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id, data: data! });\n\t\treturn;\n\t}\n\n\tvoid api.broadcast('watch.users', { clientAction, diff: diff!, unset: unset || {}, id });\n});\n\n/**\n * Calls the callback only if DB Watchers are disabled\n */\nexport const notifyOnUserChangeAsync = withDbWatcherCheck(async (cb: () => Promise<NotifyUserChange | NotifyUserChange[] | void>) => {\n\tconst result = await cb();\n\tif (!result) {\n\t\treturn;\n\t}\n\n\tif (Array.isArray(result)) {\n\t\tresult.forEach((n) => notifyOnUserChange(n));\n\t\treturn;\n\t}\n\n\treturn notifyOnUserChange(result);\n});\n\n// TODO this may be only useful on 'inserted'\nexport const notifyOnUserChangeById = withDbWatcherCheck(\n\tasync ({ clientAction, id }: { id: IUser['_id']; clientAction: 'inserted' | 'removed' | 'updated' }) => {\n\t\tconst user = await Users.findOneById(id);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnUserChange({ id, clientAction, data: user });\n\t},\n);\n\nconst getUserNameCached = mem(\n\tasync (userId: string): Promise<string | undefined> => {\n\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\treturn user?.name;\n\t},\n\t{ maxAge: 10000 },\n);\n\nconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\nexport async function getMessageToBroadcast({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<IMessage | void> {\n\tconst message = data ?? (await Messages.findOneById(id));\n\tif (!message) {\n\t\treturn;\n\t}\n\n\tif (message.t) {\n\t\tconst hiddenSystemMessages = (await getSettingCached('Hide_System_Messages')) as MessageTypesValues[];\n\t\tconst shouldHide = shouldHideSystemMessage(message.t, hiddenSystemMessages);\n\n\t\tif (shouldHide) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (message._hidden || message.imported != null) {\n\t\treturn;\n\t}\n\n\tconst useRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\tif (useRealName) {\n\t\tif (message.u?._id) {\n\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\tif (name) {\n\t\t\t\tmessage.u.name = name;\n\t\t\t}\n\t\t}\n\n\t\tif (message.mentions?.length) {\n\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\tif (name) {\n\t\t\t\t\tmention.name = name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn message;\n}\n\nexport const notifyOnMessageChange = withDbWatcherCheck(async ({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<void> => {\n\tconst message = await getMessageToBroadcast({ id, data });\n\tif (!message) {\n\t\treturn;\n\t}\n\tvoid api.broadcast('watch.messages', { message });\n});\n\nexport const notifyOnSubscriptionChanged = withDbWatcherCheck(\n\tasync (subscription: ISubscription, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserId = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuid: ISubscription['u']['_id'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomIds(uid, [rid], { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedById = withDbWatcherCheck(\n\tasync (id: ISubscription['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst subscription = await Subscriptions.findOneById(id);\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserPreferences = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tnotificationOriginField: keyof ISubscription,\n\t\toriginFieldNotEqualValue: 'user' | 'subscription',\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserPreferences(uid, notificationOriginField, originFieldNotEqualValue, {\n\t\t\tprojection: subscriptionFields,\n\t\t});\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomId = withDbWatcherCheck(\n\tasync (rid: ISubscription['rid'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomId(rid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByAutoTranslateAndUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByAutoTranslateAndUserId(uid, true, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserIdAndRoomType = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tt: ISubscription['t'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomType(uid, t, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByNameAndRoomType = withDbWatcherCheck(\n\tasync (filter: Partial<Pick<ISubscription, 'name' | 't'>>, clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByNameAndRoomType(filter, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserId(uid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserIds = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuids: ISubscription['u']['_id'][],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomIdAndUserIds(rid, uids, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/lib/notifyListener.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/lib/notifyListener.ts","inputSourceMap":{"version":3,"file":"app/lib/server/lib/notifyListener.ts","sourceRoot":"","sources":["app/lib/server/lib/notifyListener.ts"],"names":[],"mappings":"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","sourcesContent":["import { api, dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tIRocketChatRecord,\n\tIRoom,\n\tILoginServiceConfiguration,\n\tISetting,\n\tIRole,\n\tIPermission,\n\tIIntegration,\n\tIPbxEvent,\n\tLoginServiceConfiguration as LoginServiceConfigurationData,\n\tILivechatInquiryRecord,\n\tILivechatPriority,\n\tILivechatDepartmentAgents,\n\tIEmailInbox,\n\tIIntegrationHistory,\n\tAtLeast,\n\tISubscription,\n\tISettingColor,\n\tIUser,\n\tIMessage,\n\tSettingValue,\n\tMessageTypesValues,\n} from '@rocket.chat/core-typings';\nimport {\n\tRooms,\n\tPermissions,\n\tSettings,\n\tPbxEvents,\n\tRoles,\n\tIntegrations,\n\tLoginServiceConfiguration,\n\tIntegrationHistory,\n\tSubscriptions,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tUsers,\n\tMessages,\n} from '@rocket.chat/models';\nimport mem from 'memoize';\n\nimport { subscriptionFields } from '../../../../lib/publishFields';\nimport { shouldHideSystemMessage } from '../../../../server/lib/systemMessage/hideSystemMessage';\n\ntype ClientAction = 'inserted' | 'updated' | 'removed';\n\nfunction withDbWatcherCheck<T extends (...args: any[]) => Promise<void>>(fn: T): T {\n\treturn dbWatchersDisabled ? fn : ((() => Promise.resolve()) as T);\n}\n\nexport const notifyOnLivechatPriorityChanged = withDbWatcherCheck(\n\tasync (data: Pick<ILivechatPriority, 'name' | '_id'>, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst { _id, ...rest } = data;\n\t\tvoid api.broadcast('watch.priorities', { clientAction, id: _id, diff: { ...rest } });\n\t},\n);\n\nexport const notifyOnRoomChanged = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(data: T | T[], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedById = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(ids: T['_id'] | T['_id'][], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst eligibleIds = Array.isArray(ids) ? ids : [ids];\n\t\tconst items = Rooms.findByIds(eligibleIds);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUsernamesOrUids = withDbWatcherCheck(\n\tasync <T extends IRoom>(\n\t\tuids: T['u']['_id'][],\n\t\tusernames: T['u']['username'][],\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tconst items = Rooms.findByUsernamesOrUids(uids, usernames);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUserDM = withDbWatcherCheck(\n\tasync <T extends IRoom>(userId: T['u']['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Rooms.findDMsByUids([userId]);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChanged = withDbWatcherCheck(\n\tasync (permission: IPermission, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('permission.changed', { clientAction, data: permission });\n\n\t\tif (permission.level === 'settings' && permission.settingId) {\n\t\t\tconst setting = await Settings.findOneNotHiddenById(permission.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid notifyOnSettingChanged(setting, 'updated');\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChangedById = withDbWatcherCheck(\n\tasync (pid: IPermission['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst permission = await Permissions.findOneById(pid);\n\t\tif (!permission) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn notifyOnPermissionChanged(permission, clientAction);\n\t},\n);\n\nexport const notifyOnPbxEventChangedById = withDbWatcherCheck(\n\tasync <T extends IPbxEvent>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await PbxEvents.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.pbxevents', { clientAction, id, data: item });\n\t},\n);\n\nexport const notifyOnRoleChanged = withDbWatcherCheck(\n\tasync <T extends IRole>(role: T, clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tvoid api.broadcast('watch.roles', { clientAction, role });\n\t},\n);\n\nexport const notifyOnRoleChangedById = withDbWatcherCheck(\n\tasync <T extends IRole>(id: T['_id'], clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tconst role = await Roles.findOneById(id);\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnRoleChanged(role, clientAction);\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChanged = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(\n\t\tservice: Partial<T> & Pick<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.loginServiceConfiguration', {\n\t\t\tclientAction,\n\t\t\tid: service._id,\n\t\t\tdata: service,\n\t\t});\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChangedByService = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(service: T['service'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await LoginServiceConfiguration.findOneByService<Omit<LoginServiceConfigurationData, 'secret'>>(service, {\n\t\t\tprojection: { secret: 0 },\n\t\t});\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnLoginServiceConfigurationChanged(item, clientAction);\n\t},\n);\n\nexport const notifyOnIntegrationChanged = withDbWatcherCheck(\n\tasync <T extends IIntegration>(data: T, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnIntegrationChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await Integrations.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t},\n);\n\nexport const notifyOnIntegrationChangedByUserId = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['userId'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByUserId(id);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnIntegrationChangedByChannels = withDbWatcherCheck(\n\tasync <T extends IIntegration>(channels: T['channel'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByChannels(channels);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnEmailInboxChanged = withDbWatcherCheck(\n\tasync <T extends IEmailInbox>(\n\t\tdata: Pick<T, '_id'> | T, // TODO: improve typing\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.emailInbox', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChanged = withDbWatcherCheck(\n\tasync (\n\t\tdata: ILivechatInquiryRecord | ILivechatInquiryRecord[],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry: item, diff });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedById = withDbWatcherCheck(\n\tasync (\n\t\tid: ILivechatInquiryRecord['_id'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = clientAction === 'removed' ? await LivechatInquiry.trashFindOneById(id) : await LivechatInquiry.findOneById(id);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByRoom = withDbWatcherCheck(\n\tasync (\n\t\trid: ILivechatInquiryRecord['rid'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByToken = withDbWatcherCheck(\n\tasync (\n\t\ttoken: ILivechatInquiryRecord['v']['token'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByToken(token);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChanged = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(\n\t\tdata: AtLeast<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff: Partial<T> = {},\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: data._id, data, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(id: T['_id'], clientAction: ClientAction = 'updated', diff: Partial<T> = {}): Promise<void> => {\n\t\tconst item = await IntegrationHistory.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: item._id, data: item, diff });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChanged = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdata: Partial<T> & Pick<T, '_id' | 'agentId' | 'departmentId'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByDepartmentId(departmentId, { projection: { _id: 1, agentId: 1, departmentId: 1 } });\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tagentsIds: T['agentId'][],\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsIds, departmentId, {\n\t\t\tprojection: { _id: 1, agentId: 1, departmentId: 1 },\n\t\t});\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnSettingChanged = withDbWatcherCheck(\n\tasync (setting: ISetting & { editor?: ISettingColor['editor'] }, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting });\n\t},\n);\n\nexport const notifyOnSettingChangedById = withDbWatcherCheck(\n\tasync (id: ISetting['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = clientAction === 'removed' ? await Settings.trashFindOneById(id) : await Settings.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting: item });\n\t},\n);\n\ntype NotifyUserChange = {\n\tid: IUser['_id'];\n\tclientAction: 'inserted' | 'removed' | 'updated';\n\tdata?: IUser;\n\tdiff?: Record<string, any>;\n\tunset?: Record<string, number>;\n};\n\nexport const notifyOnUserChange = withDbWatcherCheck(async ({ clientAction, id, data, diff, unset }: NotifyUserChange) => {\n\tif (clientAction === 'removed') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id });\n\t\treturn;\n\t}\n\n\tif (clientAction === 'inserted') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id, data: data! });\n\t\treturn;\n\t}\n\n\tvoid api.broadcast('watch.users', { clientAction, diff: diff!, unset: unset || {}, id });\n});\n\n/**\n * Calls the callback only if DB Watchers are disabled\n */\nexport const notifyOnUserChangeAsync = withDbWatcherCheck(async (cb: () => Promise<NotifyUserChange | NotifyUserChange[] | void>) => {\n\tconst result = await cb();\n\tif (!result) {\n\t\treturn;\n\t}\n\n\tif (Array.isArray(result)) {\n\t\tresult.forEach((n) => notifyOnUserChange(n));\n\t\treturn;\n\t}\n\n\treturn notifyOnUserChange(result);\n});\n\n// TODO this may be only useful on 'inserted'\nexport const notifyOnUserChangeById = withDbWatcherCheck(\n\tasync ({ clientAction, id }: { id: IUser['_id']; clientAction: 'inserted' | 'removed' | 'updated' }) => {\n\t\tconst user = await Users.findOneById(id);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnUserChange({ id, clientAction, data: user });\n\t},\n);\n\nconst getUserNameCached = mem(\n\tasync (userId: string): Promise<string | undefined> => {\n\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\treturn user?.name;\n\t},\n\t{ maxAge: 10000 },\n);\n\nconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\nexport async function getMessageToBroadcast({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<IMessage | void> {\n\tconst message = data ?? (await Messages.findOneById(id));\n\tif (!message) {\n\t\treturn;\n\t}\n\n\tif (message.t) {\n\t\tconst hiddenSystemMessages = (await getSettingCached('Hide_System_Messages')) as MessageTypesValues[];\n\t\tconst shouldHide = shouldHideSystemMessage(message.t, hiddenSystemMessages);\n\n\t\tif (shouldHide) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (message._hidden || message.imported != null) {\n\t\treturn;\n\t}\n\n\tconst useRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\tif (useRealName) {\n\t\tif (message.u?._id) {\n\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\tif (name) {\n\t\t\t\tmessage.u.name = name;\n\t\t\t}\n\t\t}\n\n\t\tif (message.mentions?.length) {\n\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\tif (name) {\n\t\t\t\t\tmention.name = name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn message;\n}\n\nexport const notifyOnMessageChange = withDbWatcherCheck(async ({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<void> => {\n\tconst message = await getMessageToBroadcast({ id, data });\n\tif (!message) {\n\t\treturn;\n\t}\n\tvoid api.broadcast('watch.messages', { message });\n});\n\nexport const notifyOnSubscriptionChanged = withDbWatcherCheck(\n\tasync (subscription: ISubscription, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserId = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuid: ISubscription['u']['_id'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomIds(uid, [rid], { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedById = withDbWatcherCheck(\n\tasync (id: ISubscription['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst subscription = await Subscriptions.findOneById(id);\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserPreferences = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tnotificationOriginField: keyof ISubscription,\n\t\toriginFieldNotEqualValue: 'user' | 'subscription',\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserPreferences(uid, notificationOriginField, originFieldNotEqualValue, {\n\t\t\tprojection: subscriptionFields,\n\t\t});\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomId = withDbWatcherCheck(\n\tasync (rid: ISubscription['rid'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomId(rid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByAutoTranslateAndUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByAutoTranslateAndUserId(uid, true, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserIdAndRoomType = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tt: ISubscription['t'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomType(uid, t, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByNameAndRoomType = withDbWatcherCheck(\n\tasync (filter: Partial<Pick<ISubscription, 'name' | 't'>>, clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByNameAndRoomType(filter, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserId(uid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserIds = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuids: ISubscription['u']['_id'][],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomIdAndUserIds(rid, uids, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let _objectWithoutProperties;\n    module.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n      default(v) {\n        _objectWithoutProperties = v;\n      }\n    }, 1);\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 2);\n    const _excluded = [\"_id\"];\n    module.export({\n      notifyOnLivechatPriorityChanged: () => notifyOnLivechatPriorityChanged,\n      notifyOnRoomChanged: () => notifyOnRoomChanged,\n      notifyOnRoomChangedById: () => notifyOnRoomChangedById,\n      notifyOnRoomChangedByUsernamesOrUids: () => notifyOnRoomChangedByUsernamesOrUids,\n      notifyOnRoomChangedByUserDM: () => notifyOnRoomChangedByUserDM,\n      notifyOnPermissionChanged: () => notifyOnPermissionChanged,\n      notifyOnPermissionChangedById: () => notifyOnPermissionChangedById,\n      notifyOnPbxEventChangedById: () => notifyOnPbxEventChangedById,\n      notifyOnRoleChanged: () => notifyOnRoleChanged,\n      notifyOnRoleChangedById: () => notifyOnRoleChangedById,\n      notifyOnLoginServiceConfigurationChanged: () => notifyOnLoginServiceConfigurationChanged,\n      notifyOnLoginServiceConfigurationChangedByService: () => notifyOnLoginServiceConfigurationChangedByService,\n      notifyOnIntegrationChanged: () => notifyOnIntegrationChanged,\n      notifyOnIntegrationChangedById: () => notifyOnIntegrationChangedById,\n      notifyOnIntegrationChangedByUserId: () => notifyOnIntegrationChangedByUserId,\n      notifyOnIntegrationChangedByChannels: () => notifyOnIntegrationChangedByChannels,\n      notifyOnEmailInboxChanged: () => notifyOnEmailInboxChanged,\n      notifyOnLivechatInquiryChanged: () => notifyOnLivechatInquiryChanged,\n      notifyOnLivechatInquiryChangedById: () => notifyOnLivechatInquiryChangedById,\n      notifyOnLivechatInquiryChangedByRoom: () => notifyOnLivechatInquiryChangedByRoom,\n      notifyOnLivechatInquiryChangedByToken: () => notifyOnLivechatInquiryChangedByToken,\n      notifyOnIntegrationHistoryChanged: () => notifyOnIntegrationHistoryChanged,\n      notifyOnIntegrationHistoryChangedById: () => notifyOnIntegrationHistoryChangedById,\n      notifyOnLivechatDepartmentAgentChanged: () => notifyOnLivechatDepartmentAgentChanged,\n      notifyOnLivechatDepartmentAgentChangedByDepartmentId: () => notifyOnLivechatDepartmentAgentChangedByDepartmentId,\n      notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId: () => notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId,\n      notifyOnSettingChanged: () => notifyOnSettingChanged,\n      notifyOnSettingChangedById: () => notifyOnSettingChangedById,\n      notifyOnUserChange: () => notifyOnUserChange,\n      notifyOnUserChangeAsync: () => notifyOnUserChangeAsync,\n      notifyOnUserChangeById: () => notifyOnUserChangeById,\n      getMessageToBroadcast: () => getMessageToBroadcast,\n      notifyOnMessageChange: () => notifyOnMessageChange,\n      notifyOnSubscriptionChanged: () => notifyOnSubscriptionChanged,\n      notifyOnSubscriptionChangedByRoomIdAndUserId: () => notifyOnSubscriptionChangedByRoomIdAndUserId,\n      notifyOnSubscriptionChangedById: () => notifyOnSubscriptionChangedById,\n      notifyOnSubscriptionChangedByUserPreferences: () => notifyOnSubscriptionChangedByUserPreferences,\n      notifyOnSubscriptionChangedByRoomId: () => notifyOnSubscriptionChangedByRoomId,\n      notifyOnSubscriptionChangedByAutoTranslateAndUserId: () => notifyOnSubscriptionChangedByAutoTranslateAndUserId,\n      notifyOnSubscriptionChangedByUserIdAndRoomType: () => notifyOnSubscriptionChangedByUserIdAndRoomType,\n      notifyOnSubscriptionChangedByNameAndRoomType: () => notifyOnSubscriptionChangedByNameAndRoomType,\n      notifyOnSubscriptionChangedByUserId: () => notifyOnSubscriptionChangedByUserId,\n      notifyOnSubscriptionChangedByRoomIdAndUserIds: () => notifyOnSubscriptionChangedByRoomIdAndUserIds\n    });\n    let api, dbWatchersDisabled;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      },\n      dbWatchersDisabled(v) {\n        dbWatchersDisabled = v;\n      }\n    }, 0);\n    let Rooms, Permissions, Settings, PbxEvents, Roles, Integrations, LoginServiceConfiguration, IntegrationHistory, Subscriptions, LivechatInquiry, LivechatDepartmentAgents, Users, Messages;\n    module.link(\"@rocket.chat/models\", {\n      Rooms(v) {\n        Rooms = v;\n      },\n      Permissions(v) {\n        Permissions = v;\n      },\n      Settings(v) {\n        Settings = v;\n      },\n      PbxEvents(v) {\n        PbxEvents = v;\n      },\n      Roles(v) {\n        Roles = v;\n      },\n      Integrations(v) {\n        Integrations = v;\n      },\n      LoginServiceConfiguration(v) {\n        LoginServiceConfiguration = v;\n      },\n      IntegrationHistory(v) {\n        IntegrationHistory = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      Messages(v) {\n        Messages = v;\n      }\n    }, 1);\n    let mem;\n    module.link(\"memoize\", {\n      default(v) {\n        mem = v;\n      }\n    }, 2);\n    let subscriptionFields;\n    module.link(\"../../../../lib/publishFields\", {\n      subscriptionFields(v) {\n        subscriptionFields = v;\n      }\n    }, 3);\n    let shouldHideSystemMessage;\n    module.link(\"../../../../server/lib/systemMessage/hideSystemMessage\", {\n      shouldHideSystemMessage(v) {\n        shouldHideSystemMessage = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    function withDbWatcherCheck(fn) {\n      return dbWatchersDisabled ? fn : () => Promise.resolve();\n    }\n    const notifyOnLivechatPriorityChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const {\n          _id\n        } = data,\n        rest = _objectWithoutProperties(data, _excluded);\n      void api.broadcast('watch.priorities', {\n        clientAction,\n        id: _id,\n        diff: _objectSpread({}, rest)\n      });\n    });\n    const notifyOnRoomChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const items = Array.isArray(data) ? data : [data];\n      for (const item of items) {\n        void api.broadcast('watch.rooms', {\n          clientAction,\n          room: item\n        });\n      }\n    });\n    const notifyOnRoomChangedById = withDbWatcherCheck(async function (ids) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const eligibleIds = Array.isArray(ids) ? ids : [ids];\n      const items = Rooms.findByIds(eligibleIds);\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(items), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const item = _step.value;\n          {\n            void api.broadcast('watch.rooms', {\n              clientAction,\n              room: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            await _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    });\n    const notifyOnRoomChangedByUsernamesOrUids = withDbWatcherCheck(async function (uids, usernames) {\n      let clientAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updated';\n      const items = Rooms.findByUsernamesOrUids(uids, usernames);\n      var _iteratorAbruptCompletion2 = false;\n      var _didIteratorError2 = false;\n      var _iteratorError2;\n      try {\n        for (var _iterator2 = _asyncIterator(items), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n          const item = _step2.value;\n          {\n            void api.broadcast('watch.rooms', {\n              clientAction,\n              room: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n            await _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    });\n    const notifyOnRoomChangedByUserDM = withDbWatcherCheck(async function (userId) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const items = Rooms.findDMsByUids([userId]);\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n      var _iteratorError3;\n      try {\n        for (var _iterator3 = _asyncIterator(items), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n          const item = _step3.value;\n          {\n            void api.broadcast('watch.rooms', {\n              clientAction,\n              room: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            await _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    });\n    const notifyOnPermissionChanged = withDbWatcherCheck(async function (permission) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('permission.changed', {\n        clientAction,\n        data: permission\n      });\n      if (permission.level === 'settings' && permission.settingId) {\n        const setting = await Settings.findOneNotHiddenById(permission.settingId);\n        if (!setting) {\n          return;\n        }\n        void notifyOnSettingChanged(setting, 'updated');\n      }\n    });\n    const notifyOnPermissionChangedById = withDbWatcherCheck(async function (pid) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const permission = await Permissions.findOneById(pid);\n      if (!permission) {\n        return;\n      }\n      return notifyOnPermissionChanged(permission, clientAction);\n    });\n    const notifyOnPbxEventChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const item = await PbxEvents.findOneById(id);\n      if (!item) {\n        return;\n      }\n      void api.broadcast('watch.pbxevents', {\n        clientAction,\n        id,\n        data: item\n      });\n    });\n    const notifyOnRoleChanged = withDbWatcherCheck(async function (role) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'changed';\n      void api.broadcast('watch.roles', {\n        clientAction,\n        role\n      });\n    });\n    const notifyOnRoleChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'changed';\n      const role = await Roles.findOneById(id);\n      if (!role) {\n        return;\n      }\n      void notifyOnRoleChanged(role, clientAction);\n    });\n    const notifyOnLoginServiceConfigurationChanged = withDbWatcherCheck(async function (service) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.loginServiceConfiguration', {\n        clientAction,\n        id: service._id,\n        data: service\n      });\n    });\n    const notifyOnLoginServiceConfigurationChangedByService = withDbWatcherCheck(async function (service) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const item = await LoginServiceConfiguration.findOneByService(service, {\n        projection: {\n          secret: 0\n        }\n      });\n      if (!item) {\n        return;\n      }\n      void notifyOnLoginServiceConfigurationChanged(item, clientAction);\n    });\n    const notifyOnIntegrationChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.integrations', {\n        clientAction,\n        id: data._id,\n        data\n      });\n    });\n    const notifyOnIntegrationChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const item = await Integrations.findOneById(id);\n      if (!item) {\n        return;\n      }\n      void api.broadcast('watch.integrations', {\n        clientAction,\n        id: item._id,\n        data: item\n      });\n    });\n    const notifyOnIntegrationChangedByUserId = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const items = Integrations.findByUserId(id);\n      var _iteratorAbruptCompletion4 = false;\n      var _didIteratorError4 = false;\n      var _iteratorError4;\n      try {\n        for (var _iterator4 = _asyncIterator(items), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n          const item = _step4.value;\n          {\n            void api.broadcast('watch.integrations', {\n              clientAction,\n              id: item._id,\n              data: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n            await _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    });\n    const notifyOnIntegrationChangedByChannels = withDbWatcherCheck(async function (channels) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const items = Integrations.findByChannels(channels);\n      var _iteratorAbruptCompletion5 = false;\n      var _didIteratorError5 = false;\n      var _iteratorError5;\n      try {\n        for (var _iterator5 = _asyncIterator(items), _step5; _iteratorAbruptCompletion5 = !(_step5 = await _iterator5.next()).done; _iteratorAbruptCompletion5 = false) {\n          const item = _step5.value;\n          {\n            void api.broadcast('watch.integrations', {\n              clientAction,\n              id: item._id,\n              data: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion5 && _iterator5.return != null) {\n            await _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n    });\n    const notifyOnEmailInboxChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.emailInbox', {\n        clientAction,\n        id: data._id,\n        data\n      });\n    });\n    const notifyOnLivechatInquiryChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 ? arguments[2] : undefined;\n      const items = Array.isArray(data) ? data : [data];\n      for (const item of items) {\n        void api.broadcast('watch.inquiries', {\n          clientAction,\n          inquiry: item,\n          diff\n        });\n      }\n    });\n    const notifyOnLivechatInquiryChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 ? arguments[2] : undefined;\n      const inquiry = clientAction === 'removed' ? await LivechatInquiry.trashFindOneById(id) : await LivechatInquiry.findOneById(id);\n      if (!inquiry) {\n        return;\n      }\n      void api.broadcast('watch.inquiries', {\n        clientAction,\n        inquiry,\n        diff\n      });\n    });\n    const notifyOnLivechatInquiryChangedByRoom = withDbWatcherCheck(async function (rid) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 ? arguments[2] : undefined;\n      const inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n      if (!inquiry) {\n        return;\n      }\n      void api.broadcast('watch.inquiries', {\n        clientAction,\n        inquiry,\n        diff\n      });\n    });\n    const notifyOnLivechatInquiryChangedByToken = withDbWatcherCheck(async function (token) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 ? arguments[2] : undefined;\n      const inquiry = await LivechatInquiry.findOneByToken(token);\n      if (!inquiry) {\n        return;\n      }\n      void api.broadcast('watch.inquiries', {\n        clientAction,\n        inquiry,\n        diff\n      });\n    });\n    const notifyOnIntegrationHistoryChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      void api.broadcast('watch.integrationHistory', {\n        clientAction,\n        id: data._id,\n        data,\n        diff\n      });\n    });\n    const notifyOnIntegrationHistoryChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      let diff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      const item = await IntegrationHistory.findOneById(id);\n      if (!item) {\n        return;\n      }\n      void api.broadcast('watch.integrationHistory', {\n        clientAction,\n        id: item._id,\n        data: item,\n        diff\n      });\n    });\n    const notifyOnLivechatDepartmentAgentChanged = withDbWatcherCheck(async function (data) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.livechatDepartmentAgents', {\n        clientAction,\n        id: data._id,\n        data\n      });\n    });\n    const notifyOnLivechatDepartmentAgentChangedByDepartmentId = withDbWatcherCheck(async function (departmentId) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const items = LivechatDepartmentAgents.findByDepartmentId(departmentId, {\n        projection: {\n          _id: 1,\n          agentId: 1,\n          departmentId: 1\n        }\n      });\n      var _iteratorAbruptCompletion6 = false;\n      var _didIteratorError6 = false;\n      var _iteratorError6;\n      try {\n        for (var _iterator6 = _asyncIterator(items), _step6; _iteratorAbruptCompletion6 = !(_step6 = await _iterator6.next()).done; _iteratorAbruptCompletion6 = false) {\n          const item = _step6.value;\n          {\n            void api.broadcast('watch.livechatDepartmentAgents', {\n              clientAction,\n              id: item._id,\n              data: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion6 && _iterator6.return != null) {\n            await _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    });\n    const notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId = withDbWatcherCheck(async function (agentsIds, departmentId) {\n      let clientAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updated';\n      const items = LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsIds, departmentId, {\n        projection: {\n          _id: 1,\n          agentId: 1,\n          departmentId: 1\n        }\n      });\n      var _iteratorAbruptCompletion7 = false;\n      var _didIteratorError7 = false;\n      var _iteratorError7;\n      try {\n        for (var _iterator7 = _asyncIterator(items), _step7; _iteratorAbruptCompletion7 = !(_step7 = await _iterator7.next()).done; _iteratorAbruptCompletion7 = false) {\n          const item = _step7.value;\n          {\n            void api.broadcast('watch.livechatDepartmentAgents', {\n              clientAction,\n              id: item._id,\n              data: item\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion7 && _iterator7.return != null) {\n            await _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n    });\n    const notifyOnSettingChanged = withDbWatcherCheck(async function (setting) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.settings', {\n        clientAction,\n        setting\n      });\n    });\n    const notifyOnSettingChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const item = clientAction === 'removed' ? await Settings.trashFindOneById(id) : await Settings.findOneById(id);\n      if (!item) {\n        return;\n      }\n      void api.broadcast('watch.settings', {\n        clientAction,\n        setting: item\n      });\n    });\n    const notifyOnUserChange = withDbWatcherCheck(async _ref => {\n      let {\n        clientAction,\n        id,\n        data,\n        diff,\n        unset\n      } = _ref;\n      if (clientAction === 'removed') {\n        void api.broadcast('watch.users', {\n          clientAction,\n          id\n        });\n        return;\n      }\n      if (clientAction === 'inserted') {\n        void api.broadcast('watch.users', {\n          clientAction,\n          id,\n          data: data\n        });\n        return;\n      }\n      void api.broadcast('watch.users', {\n        clientAction,\n        diff: diff,\n        unset: unset || {},\n        id\n      });\n    });\n    const notifyOnUserChangeAsync = withDbWatcherCheck(async cb => {\n      const result = await cb();\n      if (!result) {\n        return;\n      }\n      if (Array.isArray(result)) {\n        result.forEach(n => notifyOnUserChange(n));\n        return;\n      }\n      return notifyOnUserChange(result);\n    });\n    const notifyOnUserChangeById = withDbWatcherCheck(async _ref2 => {\n      let {\n        clientAction,\n        id\n      } = _ref2;\n      const user = await Users.findOneById(id);\n      if (!user) {\n        return;\n      }\n      void notifyOnUserChange({\n        id,\n        clientAction,\n        data: user\n      });\n    });\n    const getUserNameCached = mem(async userId => {\n      const user = await Users.findOne(userId, {\n        projection: {\n          name: 1\n        }\n      });\n      return user === null || user === void 0 ? void 0 : user.name;\n    }, {\n      maxAge: 10000\n    });\n    const getSettingCached = mem(async setting => Settings.getValueById(setting), {\n      maxAge: 10000\n    });\n    async function getMessageToBroadcast(_ref3) {\n      let {\n        id,\n        data\n      } = _ref3;\n      const message = data !== null && data !== void 0 ? data : await Messages.findOneById(id);\n      if (!message) {\n        return;\n      }\n      if (message.t) {\n        const hiddenSystemMessages = await getSettingCached('Hide_System_Messages');\n        const shouldHide = shouldHideSystemMessage(message.t, hiddenSystemMessages);\n        if (shouldHide) {\n          return;\n        }\n      }\n      if (message._hidden || message.imported != null) {\n        return;\n      }\n      const useRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n      if (useRealName) {\n        var _message$u, _message$mentions;\n        if ((_message$u = message.u) !== null && _message$u !== void 0 && _message$u._id) {\n          const name = await getUserNameCached(message.u._id);\n          if (name) {\n            message.u.name = name;\n          }\n        }\n        if ((_message$mentions = message.mentions) !== null && _message$mentions !== void 0 && _message$mentions.length) {\n          var _iteratorAbruptCompletion8 = false;\n          var _didIteratorError8 = false;\n          var _iteratorError8;\n          try {\n            for (var _iterator8 = _asyncIterator(message.mentions), _step8; _iteratorAbruptCompletion8 = !(_step8 = await _iterator8.next()).done; _iteratorAbruptCompletion8 = false) {\n              const mention = _step8.value;\n              {\n                const name = await getUserNameCached(mention._id);\n                if (name) {\n                  mention.name = name;\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (_iteratorAbruptCompletion8 && _iterator8.return != null) {\n                await _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n      }\n      return message;\n    }\n    const notifyOnMessageChange = withDbWatcherCheck(async _ref4 => {\n      let {\n        id,\n        data\n      } = _ref4;\n      const message = await getMessageToBroadcast({\n        id,\n        data\n      });\n      if (!message) {\n        return;\n      }\n      void api.broadcast('watch.messages', {\n        message\n      });\n    });\n    const notifyOnSubscriptionChanged = withDbWatcherCheck(async function (subscription) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      void api.broadcast('watch.subscriptions', {\n        clientAction,\n        subscription\n      });\n    });\n    const notifyOnSubscriptionChangedByRoomIdAndUserId = withDbWatcherCheck(async function (rid, uid) {\n      let clientAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updated';\n      const cursor = Subscriptions.findByUserIdAndRoomIds(uid, [rid], {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedById = withDbWatcherCheck(async function (id) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const subscription = await Subscriptions.findOneById(id);\n      if (!subscription) {\n        return;\n      }\n      void api.broadcast('watch.subscriptions', {\n        clientAction,\n        subscription\n      });\n    });\n    const notifyOnSubscriptionChangedByUserPreferences = withDbWatcherCheck(async function (uid, notificationOriginField, originFieldNotEqualValue) {\n      let clientAction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'updated';\n      const cursor = Subscriptions.findByUserPreferences(uid, notificationOriginField, originFieldNotEqualValue, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByRoomId = withDbWatcherCheck(async function (rid) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const cursor = Subscriptions.findByRoomId(rid, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByAutoTranslateAndUserId = withDbWatcherCheck(async function (uid) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const cursor = Subscriptions.findByAutoTranslateAndUserId(uid, true, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByUserIdAndRoomType = withDbWatcherCheck(async function (uid, t) {\n      let clientAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updated';\n      const cursor = Subscriptions.findByUserIdAndRoomType(uid, t, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByNameAndRoomType = withDbWatcherCheck(async function (filter) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const cursor = Subscriptions.findByNameAndRoomType(filter, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByUserId = withDbWatcherCheck(async function (uid) {\n      let clientAction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'updated';\n      const cursor = Subscriptions.findByUserId(uid, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    const notifyOnSubscriptionChangedByRoomIdAndUserIds = withDbWatcherCheck(async function (rid, uids) {\n      let clientAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'updated';\n      const cursor = Subscriptions.findByRoomIdAndUserIds(rid, uids, {\n        projection: subscriptionFields\n      });\n      void cursor.forEach(subscription => {\n        void api.broadcast('watch.subscriptions', {\n          clientAction,\n          subscription\n        });\n      });\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","_objectWithoutProperties","_asyncIterator","_excluded","export","notifyOnLivechatPriorityChanged","notifyOnRoomChanged","notifyOnRoomChangedById","notifyOnRoomChangedByUsernamesOrUids","notifyOnRoomChangedByUserDM","notifyOnPermissionChanged","notifyOnPermissionChangedById","notifyOnPbxEventChangedById","notifyOnRoleChanged","notifyOnRoleChangedById","notifyOnLoginServiceConfigurationChanged","notifyOnLoginServiceConfigurationChangedByService","notifyOnIntegrationChanged","notifyOnIntegrationChangedById","notifyOnIntegrationChangedByUserId","notifyOnIntegrationChangedByChannels","notifyOnEmailInboxChanged","notifyOnLivechatInquiryChanged","notifyOnLivechatInquiryChangedById","notifyOnLivechatInquiryChangedByRoom","notifyOnLivechatInquiryChangedByToken","notifyOnIntegrationHistoryChanged","notifyOnIntegrationHistoryChangedById","notifyOnLivechatDepartmentAgentChanged","notifyOnLivechatDepartmentAgentChangedByDepartmentId","notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId","notifyOnSettingChanged","notifyOnSettingChangedById","notifyOnUserChange","notifyOnUserChangeAsync","notifyOnUserChangeById","getMessageToBroadcast","notifyOnMessageChange","notifyOnSubscriptionChanged","notifyOnSubscriptionChangedByRoomIdAndUserId","notifyOnSubscriptionChangedById","notifyOnSubscriptionChangedByUserPreferences","notifyOnSubscriptionChangedByRoomId","notifyOnSubscriptionChangedByAutoTranslateAndUserId","notifyOnSubscriptionChangedByUserIdAndRoomType","notifyOnSubscriptionChangedByNameAndRoomType","notifyOnSubscriptionChangedByUserId","notifyOnSubscriptionChangedByRoomIdAndUserIds","api","dbWatchersDisabled","Rooms","Permissions","Settings","PbxEvents","Roles","Integrations","LoginServiceConfiguration","IntegrationHistory","Subscriptions","LivechatInquiry","LivechatDepartmentAgents","Users","Messages","mem","subscriptionFields","shouldHideSystemMessage","__reifyWaitForDeps__","withDbWatcherCheck","fn","Promise","resolve","data","clientAction","arguments","length","undefined","_id","rest","broadcast","id","diff","items","Array","isArray","item","room","ids","eligibleIds","findByIds","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","value","err","return","uids","usernames","findByUsernamesOrUids","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","userId","findDMsByUids","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","permission","level","settingId","setting","findOneNotHiddenById","pid","findOneById","role","service","findOneByService","projection","secret","findByUserId","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","channels","findByChannels","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","inquiry","trashFindOneById","rid","findOneByRoomId","token","findOneByToken","departmentId","findByDepartmentId","agentId","_iteratorAbruptCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","agentsIds","findByAgentsAndDepartmentId","_iteratorAbruptCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","_ref","unset","cb","result","forEach","n","_ref2","user","getUserNameCached","findOne","name","maxAge","getSettingCached","getValueById","_ref3","message","t","hiddenSystemMessages","shouldHide","_hidden","imported","useRealName","_message$u","_message$mentions","u","mentions","_iteratorAbruptCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","mention","_ref4","subscription","uid","cursor","findByUserIdAndRoomIds","notificationOriginField","originFieldNotEqualValue","findByUserPreferences","findByRoomId","findByAutoTranslateAndUserId","findByUserIdAndRoomType","filter","findByNameAndRoomType","findByRoomIdAndUserIds","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/lib/notifyListener.ts"],"sourcesContent":["import { api, dbWatchersDisabled } from '@rocket.chat/core-services';\nimport type {\n\tIRocketChatRecord,\n\tIRoom,\n\tILoginServiceConfiguration,\n\tISetting,\n\tIRole,\n\tIPermission,\n\tIIntegration,\n\tIPbxEvent,\n\tLoginServiceConfiguration as LoginServiceConfigurationData,\n\tILivechatInquiryRecord,\n\tILivechatPriority,\n\tILivechatDepartmentAgents,\n\tIEmailInbox,\n\tIIntegrationHistory,\n\tAtLeast,\n\tISubscription,\n\tISettingColor,\n\tIUser,\n\tIMessage,\n\tSettingValue,\n\tMessageTypesValues,\n} from '@rocket.chat/core-typings';\nimport {\n\tRooms,\n\tPermissions,\n\tSettings,\n\tPbxEvents,\n\tRoles,\n\tIntegrations,\n\tLoginServiceConfiguration,\n\tIntegrationHistory,\n\tSubscriptions,\n\tLivechatInquiry,\n\tLivechatDepartmentAgents,\n\tUsers,\n\tMessages,\n} from '@rocket.chat/models';\nimport mem from 'memoize';\n\nimport { subscriptionFields } from '../../../../lib/publishFields';\nimport { shouldHideSystemMessage } from '../../../../server/lib/systemMessage/hideSystemMessage';\n\ntype ClientAction = 'inserted' | 'updated' | 'removed';\n\nfunction withDbWatcherCheck<T extends (...args: any[]) => Promise<void>>(fn: T): T {\n\treturn dbWatchersDisabled ? fn : ((() => Promise.resolve()) as T);\n}\n\nexport const notifyOnLivechatPriorityChanged = withDbWatcherCheck(\n\tasync (data: Pick<ILivechatPriority, 'name' | '_id'>, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst { _id, ...rest } = data;\n\t\tvoid api.broadcast('watch.priorities', { clientAction, id: _id, diff: { ...rest } });\n\t},\n);\n\nexport const notifyOnRoomChanged = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(data: T | T[], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedById = withDbWatcherCheck(\n\tasync <T extends IRocketChatRecord>(ids: T['_id'] | T['_id'][], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst eligibleIds = Array.isArray(ids) ? ids : [ids];\n\t\tconst items = Rooms.findByIds(eligibleIds);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUsernamesOrUids = withDbWatcherCheck(\n\tasync <T extends IRoom>(\n\t\tuids: T['u']['_id'][],\n\t\tusernames: T['u']['username'][],\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tconst items = Rooms.findByUsernamesOrUids(uids, usernames);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnRoomChangedByUserDM = withDbWatcherCheck(\n\tasync <T extends IRoom>(userId: T['u']['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Rooms.findDMsByUids([userId]);\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.rooms', { clientAction, room: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChanged = withDbWatcherCheck(\n\tasync (permission: IPermission, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('permission.changed', { clientAction, data: permission });\n\n\t\tif (permission.level === 'settings' && permission.settingId) {\n\t\t\tconst setting = await Settings.findOneNotHiddenById(permission.settingId);\n\t\t\tif (!setting) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvoid notifyOnSettingChanged(setting, 'updated');\n\t\t}\n\t},\n);\n\nexport const notifyOnPermissionChangedById = withDbWatcherCheck(\n\tasync (pid: IPermission['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst permission = await Permissions.findOneById(pid);\n\t\tif (!permission) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn notifyOnPermissionChanged(permission, clientAction);\n\t},\n);\n\nexport const notifyOnPbxEventChangedById = withDbWatcherCheck(\n\tasync <T extends IPbxEvent>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await PbxEvents.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.pbxevents', { clientAction, id, data: item });\n\t},\n);\n\nexport const notifyOnRoleChanged = withDbWatcherCheck(\n\tasync <T extends IRole>(role: T, clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tvoid api.broadcast('watch.roles', { clientAction, role });\n\t},\n);\n\nexport const notifyOnRoleChangedById = withDbWatcherCheck(\n\tasync <T extends IRole>(id: T['_id'], clientAction: 'removed' | 'changed' = 'changed'): Promise<void> => {\n\t\tconst role = await Roles.findOneById(id);\n\t\tif (!role) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnRoleChanged(role, clientAction);\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChanged = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(\n\t\tservice: Partial<T> & Pick<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.loginServiceConfiguration', {\n\t\t\tclientAction,\n\t\t\tid: service._id,\n\t\t\tdata: service,\n\t\t});\n\t},\n);\n\nexport const notifyOnLoginServiceConfigurationChangedByService = withDbWatcherCheck(\n\tasync <T extends ILoginServiceConfiguration>(service: T['service'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await LoginServiceConfiguration.findOneByService<Omit<LoginServiceConfigurationData, 'secret'>>(service, {\n\t\t\tprojection: { secret: 0 },\n\t\t});\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnLoginServiceConfigurationChanged(item, clientAction);\n\t},\n);\n\nexport const notifyOnIntegrationChanged = withDbWatcherCheck(\n\tasync <T extends IIntegration>(data: T, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnIntegrationChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = await Integrations.findOneById(id);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t},\n);\n\nexport const notifyOnIntegrationChangedByUserId = withDbWatcherCheck(\n\tasync <T extends IIntegration>(id: T['userId'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByUserId(id);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnIntegrationChangedByChannels = withDbWatcherCheck(\n\tasync <T extends IIntegration>(channels: T['channel'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst items = Integrations.findByChannels(channels);\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.integrations', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnEmailInboxChanged = withDbWatcherCheck(\n\tasync <T extends IEmailInbox>(\n\t\tdata: Pick<T, '_id'> | T, // TODO: improve typing\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.emailInbox', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChanged = withDbWatcherCheck(\n\tasync (\n\t\tdata: ILivechatInquiryRecord | ILivechatInquiryRecord[],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst items = Array.isArray(data) ? data : [data];\n\n\t\tfor (const item of items) {\n\t\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry: item, diff });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedById = withDbWatcherCheck(\n\tasync (\n\t\tid: ILivechatInquiryRecord['_id'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = clientAction === 'removed' ? await LivechatInquiry.trashFindOneById(id) : await LivechatInquiry.findOneById(id);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByRoom = withDbWatcherCheck(\n\tasync (\n\t\trid: ILivechatInquiryRecord['rid'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByRoomId(rid, {});\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnLivechatInquiryChangedByToken = withDbWatcherCheck(\n\tasync (\n\t\ttoken: ILivechatInquiryRecord['v']['token'],\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff?: Partial<Record<keyof ILivechatInquiryRecord, unknown> & { queuedAt: unknown; takenAt: unknown }>,\n\t): Promise<void> => {\n\t\tconst inquiry = await LivechatInquiry.findOneByToken(token);\n\n\t\tif (!inquiry) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.inquiries', { clientAction, inquiry, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChanged = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(\n\t\tdata: AtLeast<T, '_id'>,\n\t\tclientAction: ClientAction = 'updated',\n\t\tdiff: Partial<T> = {},\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: data._id, data, diff });\n\t},\n);\n\nexport const notifyOnIntegrationHistoryChangedById = withDbWatcherCheck(\n\tasync <T extends IIntegrationHistory>(id: T['_id'], clientAction: ClientAction = 'updated', diff: Partial<T> = {}): Promise<void> => {\n\t\tconst item = await IntegrationHistory.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.integrationHistory', { clientAction, id: item._id, data: item, diff });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChanged = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdata: Partial<T> & Pick<T, '_id' | 'agentId' | 'departmentId'>,\n\t\tclientAction: ClientAction = 'updated',\n\t): Promise<void> => {\n\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: data._id, data });\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByDepartmentId(departmentId, { projection: { _id: 1, agentId: 1, departmentId: 1 } });\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnLivechatDepartmentAgentChangedByAgentsAndDepartmentId = withDbWatcherCheck(\n\tasync <T extends ILivechatDepartmentAgents>(\n\t\tagentsIds: T['agentId'][],\n\t\tdepartmentId: T['departmentId'],\n\t\tclientAction: 'inserted' | 'updated' = 'updated',\n\t): Promise<void> => {\n\t\tconst items = LivechatDepartmentAgents.findByAgentsAndDepartmentId(agentsIds, departmentId, {\n\t\t\tprojection: { _id: 1, agentId: 1, departmentId: 1 },\n\t\t});\n\n\t\tfor await (const item of items) {\n\t\t\tvoid api.broadcast('watch.livechatDepartmentAgents', { clientAction, id: item._id, data: item });\n\t\t}\n\t},\n);\n\nexport const notifyOnSettingChanged = withDbWatcherCheck(\n\tasync (setting: ISetting & { editor?: ISettingColor['editor'] }, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting });\n\t},\n);\n\nexport const notifyOnSettingChangedById = withDbWatcherCheck(\n\tasync (id: ISetting['_id'], clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tconst item = clientAction === 'removed' ? await Settings.trashFindOneById(id) : await Settings.findOneById(id);\n\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.settings', { clientAction, setting: item });\n\t},\n);\n\ntype NotifyUserChange = {\n\tid: IUser['_id'];\n\tclientAction: 'inserted' | 'removed' | 'updated';\n\tdata?: IUser;\n\tdiff?: Record<string, any>;\n\tunset?: Record<string, number>;\n};\n\nexport const notifyOnUserChange = withDbWatcherCheck(async ({ clientAction, id, data, diff, unset }: NotifyUserChange) => {\n\tif (clientAction === 'removed') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id });\n\t\treturn;\n\t}\n\n\tif (clientAction === 'inserted') {\n\t\tvoid api.broadcast('watch.users', { clientAction, id, data: data! });\n\t\treturn;\n\t}\n\n\tvoid api.broadcast('watch.users', { clientAction, diff: diff!, unset: unset || {}, id });\n});\n\n/**\n * Calls the callback only if DB Watchers are disabled\n */\nexport const notifyOnUserChangeAsync = withDbWatcherCheck(async (cb: () => Promise<NotifyUserChange | NotifyUserChange[] | void>) => {\n\tconst result = await cb();\n\tif (!result) {\n\t\treturn;\n\t}\n\n\tif (Array.isArray(result)) {\n\t\tresult.forEach((n) => notifyOnUserChange(n));\n\t\treturn;\n\t}\n\n\treturn notifyOnUserChange(result);\n});\n\n// TODO this may be only useful on 'inserted'\nexport const notifyOnUserChangeById = withDbWatcherCheck(\n\tasync ({ clientAction, id }: { id: IUser['_id']; clientAction: 'inserted' | 'removed' | 'updated' }) => {\n\t\tconst user = await Users.findOneById(id);\n\t\tif (!user) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid notifyOnUserChange({ id, clientAction, data: user });\n\t},\n);\n\nconst getUserNameCached = mem(\n\tasync (userId: string): Promise<string | undefined> => {\n\t\tconst user = await Users.findOne<Pick<IUser, 'name'>>(userId, { projection: { name: 1 } });\n\t\treturn user?.name;\n\t},\n\t{ maxAge: 10000 },\n);\n\nconst getSettingCached = mem(async (setting: string): Promise<SettingValue> => Settings.getValueById(setting), { maxAge: 10000 });\n\nexport async function getMessageToBroadcast({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<IMessage | void> {\n\tconst message = data ?? (await Messages.findOneById(id));\n\tif (!message) {\n\t\treturn;\n\t}\n\n\tif (message.t) {\n\t\tconst hiddenSystemMessages = (await getSettingCached('Hide_System_Messages')) as MessageTypesValues[];\n\t\tconst shouldHide = shouldHideSystemMessage(message.t, hiddenSystemMessages);\n\n\t\tif (shouldHide) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (message._hidden || message.imported != null) {\n\t\treturn;\n\t}\n\n\tconst useRealName = (await getSettingCached('UI_Use_Real_Name')) === true;\n\tif (useRealName) {\n\t\tif (message.u?._id) {\n\t\t\tconst name = await getUserNameCached(message.u._id);\n\t\t\tif (name) {\n\t\t\t\tmessage.u.name = name;\n\t\t\t}\n\t\t}\n\n\t\tif (message.mentions?.length) {\n\t\t\tfor await (const mention of message.mentions) {\n\t\t\t\tconst name = await getUserNameCached(mention._id);\n\t\t\t\tif (name) {\n\t\t\t\t\tmention.name = name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn message;\n}\n\nexport const notifyOnMessageChange = withDbWatcherCheck(async ({ id, data }: { id: IMessage['_id']; data?: IMessage }): Promise<void> => {\n\tconst message = await getMessageToBroadcast({ id, data });\n\tif (!message) {\n\t\treturn;\n\t}\n\tvoid api.broadcast('watch.messages', { message });\n});\n\nexport const notifyOnSubscriptionChanged = withDbWatcherCheck(\n\tasync (subscription: ISubscription, clientAction: ClientAction = 'updated'): Promise<void> => {\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserId = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuid: ISubscription['u']['_id'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomIds(uid, [rid], { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedById = withDbWatcherCheck(\n\tasync (id: ISubscription['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst subscription = await Subscriptions.findOneById(id);\n\t\tif (!subscription) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserPreferences = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tnotificationOriginField: keyof ISubscription,\n\t\toriginFieldNotEqualValue: 'user' | 'subscription',\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserPreferences(uid, notificationOriginField, originFieldNotEqualValue, {\n\t\t\tprojection: subscriptionFields,\n\t\t});\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomId = withDbWatcherCheck(\n\tasync (rid: ISubscription['rid'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomId(rid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByAutoTranslateAndUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByAutoTranslateAndUserId(uid, true, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserIdAndRoomType = withDbWatcherCheck(\n\tasync (\n\t\tuid: ISubscription['u']['_id'],\n\t\tt: ISubscription['t'],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserIdAndRoomType(uid, t, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByNameAndRoomType = withDbWatcherCheck(\n\tasync (filter: Partial<Pick<ISubscription, 'name' | 't'>>, clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByNameAndRoomType(filter, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByUserId = withDbWatcherCheck(\n\tasync (uid: ISubscription['u']['_id'], clientAction: Exclude<ClientAction, 'removed'> = 'updated'): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByUserId(uid, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n\nexport const notifyOnSubscriptionChangedByRoomIdAndUserIds = withDbWatcherCheck(\n\tasync (\n\t\trid: ISubscription['rid'],\n\t\tuids: ISubscription['u']['_id'][],\n\t\tclientAction: Exclude<ClientAction, 'removed'> = 'updated',\n\t): Promise<void> => {\n\t\tconst cursor = Subscriptions.findByRoomIdAndUserIds(rid, uids, { projection: subscriptionFields });\n\n\t\tvoid cursor.forEach((subscription) => {\n\t\t\tvoid api.broadcast('watch.subscriptions', { clientAction, subscription });\n\t\t});\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"aa946a8c6468978c1e66012421e0ffe4258b8768"}
