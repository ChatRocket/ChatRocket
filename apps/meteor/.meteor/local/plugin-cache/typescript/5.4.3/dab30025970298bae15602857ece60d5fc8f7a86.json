{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/deleteUser.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/functions/deleteUser.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/deleteUser.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/deleteUser.ts","sourceRoot":"","sources":["app/lib/server/functions/deleteUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { isUserFederated, type IUser } from '@rocket.chat/core-typings';\nimport {\n\tIntegrations,\n\tFederationServers,\n\tLivechatVisitors,\n\tLivechatDepartmentAgents,\n\tMessages,\n\tRooms,\n\tSubscriptions,\n\tUsers,\n\tReadReceipts,\n\tLivechatUnitMonitors,\n\tModerationReports,\n\tMatrixBridgedUser,\n} from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnIntegrationChangedByUserId,\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\n\nexport async function deleteUser(userId: string, confirmRelinquish = false, deletedBy?: IUser['_id']): Promise<void> {\n\tif (userId === 'rocket.cat') {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Deleting the rocket.cat user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t\taction: 'Delete_user',\n\t\t});\n\t}\n\n\tconst user = await Users.findOneById(userId, {\n\t\tprojection: { username: 1, avatarOrigin: 1, roles: 1, federated: 1 },\n\t});\n\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Deleting federated, external user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\tif (remoteUser) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'User participated in federation, this user can only be deactivated permanently', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\n\tif (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n\t\tconst rooms = await getUserSingleOwnedRooms(subscribedRooms);\n\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t}\n\n\t// Users without username can't do anything, so there is nothing to remove\n\tif (user.username != null) {\n\t\tlet userToReplaceWhenUnlinking: IUser | null = null;\n\t\tconst nameAlias = i18n.t('Removed_User');\n\t\tawait relinquishRoomOwnerships(userId, subscribedRooms);\n\n\t\tconst messageErasureType = settings.get<'Delete' | 'Unlink' | 'Keep'>('Message_ErasureType');\n\t\tswitch (messageErasureType) {\n\t\t\tcase 'Delete':\n\t\t\t\tconst store = FileUpload.getStore('Uploads');\n\t\t\t\tconst cursor = Messages.findFilesByUserId(userId);\n\n\t\t\t\tfor await (const { file } of cursor) {\n\t\t\t\t\tif (!file) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tawait store.deleteById(file._id);\n\t\t\t\t}\n\n\t\t\t\tawait Messages.removeByUserId(userId);\n\t\t\t\tawait ReadReceipts.removeByUserId(userId);\n\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(\n\t\t\t\t\tuserId,\n\t\t\t\t\tdeletedBy || userId,\n\t\t\t\t\tdeletedBy === userId ? 'user deleted own account' : 'user account deleted',\n\t\t\t\t\t'DELETE_USER',\n\t\t\t\t);\n\n\t\t\t\tbreak;\n\t\t\tcase 'Unlink':\n\t\t\t\tuserToReplaceWhenUnlinking = await Users.findOneById('rocket.cat');\n\t\t\t\tif (!userToReplaceWhenUnlinking?._id || !userToReplaceWhenUnlinking?.username) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tawait Messages.unlinkUserId(userId, userToReplaceWhenUnlinking?._id, userToReplaceWhenUnlinking?.username, nameAlias);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tawait Rooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\t\tawait Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n\t\tconst rids = subscribedRooms.map((room) => room.rid);\n\t\tvoid notifyOnRoomChangedById(rids);\n\n\t\tawait Subscriptions.removeByUserId(userId);\n\n\t\t// Remove user as livechat agent\n\t\tif (user.roles.includes('livechat-agent')) {\n\t\t\tconst departmentAgents = await LivechatDepartmentAgents.findByAgentId(userId).toArray();\n\n\t\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByAgentId(userId);\n\n\t\t\tif (deletedCount > 0) {\n\t\t\t\tdepartmentAgents.forEach((depAgent) => {\n\t\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_id: depAgent._id,\n\t\t\t\t\t\t\tagentId: userId,\n\t\t\t\t\t\t\tdepartmentId: depAgent.departmentId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'removed',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (user.roles.includes('livechat-monitor')) {\n\t\t\t// Remove user as Unit Monitor\n\t\t\tawait LivechatUnitMonitors.removeByMonitorId(userId);\n\t\t}\n\n\t\t// This is for compatibility. Since we allowed any user to be contact manager b4, we need to have the same logic\n\t\t// for deletion.\n\t\tawait LivechatVisitors.removeContactManagerByUsername(user.username);\n\n\t\t// removes user's avatar\n\t\tif (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url' || user.avatarOrigin === 'rest') {\n\t\t\tawait FileUpload.getStore('Avatars').deleteByName(user.username);\n\t\t}\n\n\t\t// Disables all the integrations which rely on the user being deleted.\n\t\tawait Integrations.disableByUserId(userId);\n\t\tvoid notifyOnIntegrationChangedByUserId(userId);\n\n\t\t// Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't disappear from logged in sessions\n\t\tif (messageErasureType === 'Delete') {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t});\n\t\t}\n\t\tif (messageErasureType === 'Unlink' && userToReplaceWhenUnlinking) {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t\treplaceByUser: { _id: userToReplaceWhenUnlinking._id, username: userToReplaceWhenUnlinking?.username, alias: nameAlias },\n\t\t\t});\n\t\t}\n\t}\n\n\t// Remove user from users database\n\tawait Users.removeById(userId);\n\n\t// update name and fname of group direct messages\n\tawait updateGroupDMsName(user);\n\n\t// Refresh the servers list\n\tawait FederationServers.refreshServers();\n\n\tvoid notifyOnUserChange({ clientAction: 'removed', id: user._id });\n\n\tawait callbacks.run('afterDeleteUser', user);\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/functions/deleteUser.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/functions/deleteUser.ts","inputSourceMap":{"version":3,"file":"app/lib/server/functions/deleteUser.ts","sourceRoot":"","sources":["app/lib/server/functions/deleteUser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,4BAA4B,CAAC;AACjD,OAAO,EAAE,eAAe,EAAc,MAAM,2BAA2B,CAAC;AACxE,OAAO,EACN,YAAY,EACZ,iBAAiB,EACjB,gBAAgB,EAChB,wBAAwB,EACxB,QAAQ,EACR,KAAK,EACL,aAAa,EACb,KAAK,EACL,YAAY,EACZ,oBAAoB,EACpB,iBAAiB,EACjB,iBAAiB,GACjB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAE,oCAAoC,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AAC5G,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,6BAA6B,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,6BAA6B,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EACN,uBAAuB,EACvB,kCAAkC,EAClC,sCAAsC,EACtC,kBAAkB,GAClB,MAAM,uBAAuB,CAAC;AAE/B,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,MAAc,EAAE,iBAAiB,GAAG,KAAK,EAAE,SAAwB;IACnG,IAAI,MAAM,KAAK,YAAY,EAAE,CAAC;QAC7B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,6CAA6C,EAAE;YACjG,MAAM,EAAE,YAAY;YACpB,MAAM,EAAE,aAAa;SACrB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE;QAC5C,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE;KACpE,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO;IACR,CAAC;IAED,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QAC3B,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,kDAAkD,EAAE;YAC/F,MAAM,EAAE,YAAY;SACpB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,UAAU,GAAG,MAAM,iBAAiB,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;IAClF,IAAI,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,gFAAgF,EAAE;YAC7H,MAAM,EAAE,YAAY;SACpB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,eAAe,GAAG,MAAM,oCAAoC,CAAC,MAAM,CAAC,CAAC;IAE3E,IAAI,yBAAyB,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACtE,MAAM,KAAK,GAAG,MAAM,uBAAuB,CAAC,eAAe,CAAC,CAAC;QAC7D,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IACtD,CAAC;IAED,0EAA0E;IAC1E,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAC;QAC3B,IAAI,0BAA0B,GAAiB,IAAI,CAAC;QACpD,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;QACzC,MAAM,wBAAwB,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAExD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAA+B,qBAAqB,CAAC,CAAC;QAC7F,QAAQ,kBAAkB,EAAE,CAAC;YAC5B,KAAK,QAAQ;gBACZ,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAElD,IAAI,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,MAAM,EAAE,CAAC;oBACrC,IAAI,CAAC,IAAI,EAAE,CAAC;wBACX,SAAS;oBACV,CAAC;oBACD,MAAM,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClC,CAAC;gBAED,MAAM,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACtC,MAAM,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAE1C,MAAM,iBAAiB,CAAC,0BAA0B,CACjD,MAAM,EACN,SAAS,IAAI,MAAM,EACnB,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,sBAAsB,EAC1E,aAAa,CACb,CAAC;gBAEF,MAAM;YACP,KAAK,QAAQ;gBACZ,0BAA0B,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACnE,IAAI,CAAC,0BAA0B,EAAE,GAAG,IAAI,CAAC,0BAA0B,EAAE,QAAQ,EAAE,CAAC;oBAC/E,MAAM;gBACP,CAAC;gBACD,MAAM,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE,0BAA0B,EAAE,GAAG,EAAE,0BAA0B,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACtH,MAAM;QACR,CAAC;QAED,MAAM,KAAK,CAAC,yCAAyC,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,oCAAoC;QAClH,MAAM,KAAK,CAAC,kCAAkC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,oCAAoC;QAEnG,MAAM,IAAI,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrD,KAAK,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAEnC,MAAM,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE3C,gCAAgC;QAChC,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;YAC3C,MAAM,gBAAgB,GAAG,MAAM,wBAAwB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAExF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,wBAAwB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAEhF,IAAI,YAAY,GAAG,CAAC,EAAE,CAAC;gBACtB,gBAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACrC,KAAK,sCAAsC,CAC1C;wBACC,GAAG,EAAE,QAAQ,CAAC,GAAG;wBACjB,OAAO,EAAE,MAAM;wBACf,YAAY,EAAE,QAAQ,CAAC,YAAY;qBACnC,EACD,SAAS,CACT,CAAC;gBACH,CAAC,CAAC,CAAC;YACJ,CAAC;QACF,CAAC;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC7C,8BAA8B;YAC9B,MAAM,oBAAoB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACtD,CAAC;QAED,gHAAgH;QAChH,gBAAgB;QAChB,MAAM,gBAAgB,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErE,wBAAwB;QACxB,IAAI,IAAI,CAAC,YAAY,KAAK,QAAQ,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,IAAI,IAAI,CAAC,YAAY,KAAK,MAAM,EAAE,CAAC;YACnG,MAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClE,CAAC;QAED,sEAAsE;QACtE,MAAM,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC3C,KAAK,kCAAkC,CAAC,MAAM,CAAC,CAAC;QAEhD,mHAAmH;QACnH,IAAI,kBAAkB,KAAK,QAAQ,EAAE,CAAC;YACrC,KAAK,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE;gBACxC,kBAAkB;aAClB,CAAC,CAAC;QACJ,CAAC;QACD,IAAI,kBAAkB,KAAK,QAAQ,IAAI,0BAA0B,EAAE,CAAC;YACnE,KAAK,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,EAAE;gBACxC,kBAAkB;gBAClB,aAAa,EAAE,EAAE,GAAG,EAAE,0BAA0B,CAAC,GAAG,EAAE,QAAQ,EAAE,0BAA0B,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE;aACxH,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED,kCAAkC;IAClC,MAAM,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAE/B,iDAAiD;IACjD,MAAM,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAE/B,2BAA2B;IAC3B,MAAM,iBAAiB,CAAC,cAAc,EAAE,CAAC;IAEzC,KAAK,kBAAkB,CAAC,EAAE,YAAY,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAEnE,MAAM,SAAS,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { isUserFederated, type IUser } from '@rocket.chat/core-typings';\nimport {\n\tIntegrations,\n\tFederationServers,\n\tLivechatVisitors,\n\tLivechatDepartmentAgents,\n\tMessages,\n\tRooms,\n\tSubscriptions,\n\tUsers,\n\tReadReceipts,\n\tLivechatUnitMonitors,\n\tModerationReports,\n\tMatrixBridgedUser,\n} from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnIntegrationChangedByUserId,\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\n\nexport async function deleteUser(userId: string, confirmRelinquish = false, deletedBy?: IUser['_id']): Promise<void> {\n\tif (userId === 'rocket.cat') {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Deleting the rocket.cat user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t\taction: 'Delete_user',\n\t\t});\n\t}\n\n\tconst user = await Users.findOneById(userId, {\n\t\tprojection: { username: 1, avatarOrigin: 1, roles: 1, federated: 1 },\n\t});\n\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Deleting federated, external user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\tif (remoteUser) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'User participated in federation, this user can only be deactivated permanently', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\n\tif (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n\t\tconst rooms = await getUserSingleOwnedRooms(subscribedRooms);\n\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t}\n\n\t// Users without username can't do anything, so there is nothing to remove\n\tif (user.username != null) {\n\t\tlet userToReplaceWhenUnlinking: IUser | null = null;\n\t\tconst nameAlias = i18n.t('Removed_User');\n\t\tawait relinquishRoomOwnerships(userId, subscribedRooms);\n\n\t\tconst messageErasureType = settings.get<'Delete' | 'Unlink' | 'Keep'>('Message_ErasureType');\n\t\tswitch (messageErasureType) {\n\t\t\tcase 'Delete':\n\t\t\t\tconst store = FileUpload.getStore('Uploads');\n\t\t\t\tconst cursor = Messages.findFilesByUserId(userId);\n\n\t\t\t\tfor await (const { file } of cursor) {\n\t\t\t\t\tif (!file) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tawait store.deleteById(file._id);\n\t\t\t\t}\n\n\t\t\t\tawait Messages.removeByUserId(userId);\n\t\t\t\tawait ReadReceipts.removeByUserId(userId);\n\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(\n\t\t\t\t\tuserId,\n\t\t\t\t\tdeletedBy || userId,\n\t\t\t\t\tdeletedBy === userId ? 'user deleted own account' : 'user account deleted',\n\t\t\t\t\t'DELETE_USER',\n\t\t\t\t);\n\n\t\t\t\tbreak;\n\t\t\tcase 'Unlink':\n\t\t\t\tuserToReplaceWhenUnlinking = await Users.findOneById('rocket.cat');\n\t\t\t\tif (!userToReplaceWhenUnlinking?._id || !userToReplaceWhenUnlinking?.username) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tawait Messages.unlinkUserId(userId, userToReplaceWhenUnlinking?._id, userToReplaceWhenUnlinking?.username, nameAlias);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tawait Rooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\t\tawait Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n\t\tconst rids = subscribedRooms.map((room) => room.rid);\n\t\tvoid notifyOnRoomChangedById(rids);\n\n\t\tawait Subscriptions.removeByUserId(userId);\n\n\t\t// Remove user as livechat agent\n\t\tif (user.roles.includes('livechat-agent')) {\n\t\t\tconst departmentAgents = await LivechatDepartmentAgents.findByAgentId(userId).toArray();\n\n\t\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByAgentId(userId);\n\n\t\t\tif (deletedCount > 0) {\n\t\t\t\tdepartmentAgents.forEach((depAgent) => {\n\t\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_id: depAgent._id,\n\t\t\t\t\t\t\tagentId: userId,\n\t\t\t\t\t\t\tdepartmentId: depAgent.departmentId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'removed',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (user.roles.includes('livechat-monitor')) {\n\t\t\t// Remove user as Unit Monitor\n\t\t\tawait LivechatUnitMonitors.removeByMonitorId(userId);\n\t\t}\n\n\t\t// This is for compatibility. Since we allowed any user to be contact manager b4, we need to have the same logic\n\t\t// for deletion.\n\t\tawait LivechatVisitors.removeContactManagerByUsername(user.username);\n\n\t\t// removes user's avatar\n\t\tif (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url' || user.avatarOrigin === 'rest') {\n\t\t\tawait FileUpload.getStore('Avatars').deleteByName(user.username);\n\t\t}\n\n\t\t// Disables all the integrations which rely on the user being deleted.\n\t\tawait Integrations.disableByUserId(userId);\n\t\tvoid notifyOnIntegrationChangedByUserId(userId);\n\n\t\t// Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't disappear from logged in sessions\n\t\tif (messageErasureType === 'Delete') {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t});\n\t\t}\n\t\tif (messageErasureType === 'Unlink' && userToReplaceWhenUnlinking) {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t\treplaceByUser: { _id: userToReplaceWhenUnlinking._id, username: userToReplaceWhenUnlinking?.username, alias: nameAlias },\n\t\t\t});\n\t\t}\n\t}\n\n\t// Remove user from users database\n\tawait Users.removeById(userId);\n\n\t// update name and fname of group direct messages\n\tawait updateGroupDMsName(user);\n\n\t// Refresh the servers list\n\tawait FederationServers.refreshServers();\n\n\tvoid notifyOnUserChange({ clientAction: 'removed', id: user._id });\n\n\tawait callbacks.run('afterDeleteUser', user);\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _asyncIterator;\n    module.link(\"@babel/runtime/helpers/asyncIterator\", {\n      default(v) {\n        _asyncIterator = v;\n      }\n    }, 0);\n    module.export({\n      deleteUser: () => deleteUser\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let isUserFederated;\n    module.link(\"@rocket.chat/core-typings\", {\n      isUserFederated(v) {\n        isUserFederated = v;\n      }\n    }, 1);\n    let Integrations, FederationServers, LivechatVisitors, LivechatDepartmentAgents, Messages, Rooms, Subscriptions, Users, ReadReceipts, LivechatUnitMonitors, ModerationReports, MatrixBridgedUser;\n    module.link(\"@rocket.chat/models\", {\n      Integrations(v) {\n        Integrations = v;\n      },\n      FederationServers(v) {\n        FederationServers = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatDepartmentAgents(v) {\n        LivechatDepartmentAgents = v;\n      },\n      Messages(v) {\n        Messages = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Subscriptions(v) {\n        Subscriptions = v;\n      },\n      Users(v) {\n        Users = v;\n      },\n      ReadReceipts(v) {\n        ReadReceipts = v;\n      },\n      LivechatUnitMonitors(v) {\n        LivechatUnitMonitors = v;\n      },\n      ModerationReports(v) {\n        ModerationReports = v;\n      },\n      MatrixBridgedUser(v) {\n        MatrixBridgedUser = v;\n      }\n    }, 2);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 3);\n    let getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner;\n    module.link(\"./getRoomsWithSingleOwner\", {\n      getSubscribedRoomsForUserWithDetails(v) {\n        getSubscribedRoomsForUserWithDetails = v;\n      },\n      shouldRemoveOrChangeOwner(v) {\n        shouldRemoveOrChangeOwner = v;\n      }\n    }, 4);\n    let getUserSingleOwnedRooms;\n    module.link(\"./getUserSingleOwnedRooms\", {\n      getUserSingleOwnedRooms(v) {\n        getUserSingleOwnedRooms = v;\n      }\n    }, 5);\n    let relinquishRoomOwnerships;\n    module.link(\"./relinquishRoomOwnerships\", {\n      relinquishRoomOwnerships(v) {\n        relinquishRoomOwnerships = v;\n      }\n    }, 6);\n    let updateGroupDMsName;\n    module.link(\"./updateGroupDMsName\", {\n      updateGroupDMsName(v) {\n        updateGroupDMsName = v;\n      }\n    }, 7);\n    let callbacks;\n    module.link(\"../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 8);\n    let i18n;\n    module.link(\"../../../../server/lib/i18n\", {\n      i18n(v) {\n        i18n = v;\n      }\n    }, 9);\n    let FileUpload;\n    module.link(\"../../../file-upload/server\", {\n      FileUpload(v) {\n        FileUpload = v;\n      }\n    }, 10);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 11);\n    let notifyOnRoomChangedById, notifyOnIntegrationChangedByUserId, notifyOnLivechatDepartmentAgentChanged, notifyOnUserChange;\n    module.link(\"../lib/notifyListener\", {\n      notifyOnRoomChangedById(v) {\n        notifyOnRoomChangedById = v;\n      },\n      notifyOnIntegrationChangedByUserId(v) {\n        notifyOnIntegrationChangedByUserId = v;\n      },\n      notifyOnLivechatDepartmentAgentChanged(v) {\n        notifyOnLivechatDepartmentAgentChanged = v;\n      },\n      notifyOnUserChange(v) {\n        notifyOnUserChange = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function deleteUser(userId) {\n      var _userToReplaceWhenUnl, _userToReplaceWhenUnl2, _userToReplaceWhenUnl3, _userToReplaceWhenUnl4;\n      let confirmRelinquish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let deletedBy = arguments.length > 2 ? arguments[2] : undefined;\n      if (userId === 'rocket.cat') {\n        throw new Meteor.Error('error-action-not-allowed', 'Deleting the rocket.cat user is not allowed', {\n          method: 'deleteUser',\n          action: 'Delete_user'\n        });\n      }\n      const user = await Users.findOneById(userId, {\n        projection: {\n          username: 1,\n          avatarOrigin: 1,\n          roles: 1,\n          federated: 1\n        }\n      });\n      if (!user) {\n        return;\n      }\n      if (isUserFederated(user)) {\n        throw new Meteor.Error('error-not-allowed', 'Deleting federated, external user is not allowed', {\n          method: 'deleteUser'\n        });\n      }\n      const remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n      if (remoteUser) {\n        throw new Meteor.Error('error-not-allowed', 'User participated in federation, this user can only be deactivated permanently', {\n          method: 'deleteUser'\n        });\n      }\n      const subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n      if (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n        const rooms = await getUserSingleOwnedRooms(subscribedRooms);\n        throw new Meteor.Error('user-last-owner', '', rooms);\n      }\n      // Users without username can't do anything, so there is nothing to remove\n      if (user.username != null) {\n        let userToReplaceWhenUnlinking = null;\n        const nameAlias = i18n.t('Removed_User');\n        await relinquishRoomOwnerships(userId, subscribedRooms);\n        const messageErasureType = settings.get('Message_ErasureType');\n        switch (messageErasureType) {\n          case 'Delete':\n            const store = FileUpload.getStore('Uploads');\n            const cursor = Messages.findFilesByUserId(userId);\n            var _iteratorAbruptCompletion = false;\n            var _didIteratorError = false;\n            var _iteratorError;\n            try {\n              for (var _iterator = _asyncIterator(cursor), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n                const {\n                  file\n                } = _step.value;\n                {\n                  if (!file) {\n                    continue;\n                  }\n                  await store.deleteById(file._id);\n                }\n              }\n            } catch (err) {\n              _didIteratorError = true;\n              _iteratorError = err;\n            } finally {\n              try {\n                if (_iteratorAbruptCompletion && _iterator.return != null) {\n                  await _iterator.return();\n                }\n              } finally {\n                if (_didIteratorError) {\n                  throw _iteratorError;\n                }\n              }\n            }\n            await Messages.removeByUserId(userId);\n            await ReadReceipts.removeByUserId(userId);\n            await ModerationReports.hideMessageReportsByUserId(userId, deletedBy || userId, deletedBy === userId ? 'user deleted own account' : 'user account deleted', 'DELETE_USER');\n            break;\n          case 'Unlink':\n            userToReplaceWhenUnlinking = await Users.findOneById('rocket.cat');\n            if (!((_userToReplaceWhenUnl = userToReplaceWhenUnlinking) !== null && _userToReplaceWhenUnl !== void 0 && _userToReplaceWhenUnl._id) || !((_userToReplaceWhenUnl2 = userToReplaceWhenUnlinking) !== null && _userToReplaceWhenUnl2 !== void 0 && _userToReplaceWhenUnl2.username)) {\n              break;\n            }\n            await Messages.unlinkUserId(userId, (_userToReplaceWhenUnl3 = userToReplaceWhenUnlinking) === null || _userToReplaceWhenUnl3 === void 0 ? void 0 : _userToReplaceWhenUnl3._id, (_userToReplaceWhenUnl4 = userToReplaceWhenUnlinking) === null || _userToReplaceWhenUnl4 === void 0 ? void 0 : _userToReplaceWhenUnl4.username, nameAlias);\n            break;\n        }\n        await Rooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n        await Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n        const rids = subscribedRooms.map(room => room.rid);\n        void notifyOnRoomChangedById(rids);\n        await Subscriptions.removeByUserId(userId);\n        // Remove user as livechat agent\n        if (user.roles.includes('livechat-agent')) {\n          const departmentAgents = await LivechatDepartmentAgents.findByAgentId(userId).toArray();\n          const {\n            deletedCount\n          } = await LivechatDepartmentAgents.removeByAgentId(userId);\n          if (deletedCount > 0) {\n            departmentAgents.forEach(depAgent => {\n              void notifyOnLivechatDepartmentAgentChanged({\n                _id: depAgent._id,\n                agentId: userId,\n                departmentId: depAgent.departmentId\n              }, 'removed');\n            });\n          }\n        }\n        if (user.roles.includes('livechat-monitor')) {\n          // Remove user as Unit Monitor\n          await LivechatUnitMonitors.removeByMonitorId(userId);\n        }\n        // This is for compatibility. Since we allowed any user to be contact manager b4, we need to have the same logic\n        // for deletion.\n        await LivechatVisitors.removeContactManagerByUsername(user.username);\n        // removes user's avatar\n        if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url' || user.avatarOrigin === 'rest') {\n          await FileUpload.getStore('Avatars').deleteByName(user.username);\n        }\n        // Disables all the integrations which rely on the user being deleted.\n        await Integrations.disableByUserId(userId);\n        void notifyOnIntegrationChangedByUserId(userId);\n        // Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't disappear from logged in sessions\n        if (messageErasureType === 'Delete') {\n          void api.broadcast('user.deleted', user, {\n            messageErasureType\n          });\n        }\n        if (messageErasureType === 'Unlink' && userToReplaceWhenUnlinking) {\n          var _userToReplaceWhenUnl5;\n          void api.broadcast('user.deleted', user, {\n            messageErasureType,\n            replaceByUser: {\n              _id: userToReplaceWhenUnlinking._id,\n              username: (_userToReplaceWhenUnl5 = userToReplaceWhenUnlinking) === null || _userToReplaceWhenUnl5 === void 0 ? void 0 : _userToReplaceWhenUnl5.username,\n              alias: nameAlias\n            }\n          });\n        }\n      }\n      // Remove user from users database\n      await Users.removeById(userId);\n      // update name and fname of group direct messages\n      await updateGroupDMsName(user);\n      // Refresh the servers list\n      await FederationServers.refreshServers();\n      void notifyOnUserChange({\n        clientAction: 'removed',\n        id: user._id\n      });\n      await callbacks.run('afterDeleteUser', user);\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_asyncIterator","module","link","default","v","export","deleteUser","api","isUserFederated","Integrations","FederationServers","LivechatVisitors","LivechatDepartmentAgents","Messages","Rooms","Subscriptions","Users","ReadReceipts","LivechatUnitMonitors","ModerationReports","MatrixBridgedUser","Meteor","getSubscribedRoomsForUserWithDetails","shouldRemoveOrChangeOwner","getUserSingleOwnedRooms","relinquishRoomOwnerships","updateGroupDMsName","callbacks","i18n","FileUpload","settings","notifyOnRoomChangedById","notifyOnIntegrationChangedByUserId","notifyOnLivechatDepartmentAgentChanged","notifyOnUserChange","__reifyWaitForDeps__","userId","_userToReplaceWhenUnl","_userToReplaceWhenUnl2","_userToReplaceWhenUnl3","_userToReplaceWhenUnl4","confirmRelinquish","arguments","length","undefined","deletedBy","Error","method","action","user","findOneById","projection","username","avatarOrigin","roles","federated","remoteUser","getExternalUserIdByLocalUserId","subscribedRooms","rooms","userToReplaceWhenUnlinking","nameAlias","t","messageErasureType","get","store","getStore","cursor","findFilesByUserId","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","file","value","deleteById","_id","err","return","removeByUserId","hideMessageReportsByUserId","unlinkUserId","updateGroupDMsRemovingUsernamesByUsername","removeDirectRoomContainingUsername","rids","map","room","rid","includes","departmentAgents","findByAgentId","toArray","deletedCount","removeByAgentId","forEach","depAgent","agentId","departmentId","removeByMonitorId","removeContactManagerByUsername","deleteByName","disableByUserId","broadcast","_userToReplaceWhenUnl5","replaceByUser","alias","removeById","refreshServers","clientAction","id","run","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/functions/deleteUser.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport { isUserFederated, type IUser } from '@rocket.chat/core-typings';\nimport {\n\tIntegrations,\n\tFederationServers,\n\tLivechatVisitors,\n\tLivechatDepartmentAgents,\n\tMessages,\n\tRooms,\n\tSubscriptions,\n\tUsers,\n\tReadReceipts,\n\tLivechatUnitMonitors,\n\tModerationReports,\n\tMatrixBridgedUser,\n} from '@rocket.chat/models';\nimport { Meteor } from 'meteor/meteor';\n\nimport { getSubscribedRoomsForUserWithDetails, shouldRemoveOrChangeOwner } from './getRoomsWithSingleOwner';\nimport { getUserSingleOwnedRooms } from './getUserSingleOwnedRooms';\nimport { relinquishRoomOwnerships } from './relinquishRoomOwnerships';\nimport { updateGroupDMsName } from './updateGroupDMsName';\nimport { callbacks } from '../../../../lib/callbacks';\nimport { i18n } from '../../../../server/lib/i18n';\nimport { FileUpload } from '../../../file-upload/server';\nimport { settings } from '../../../settings/server';\nimport {\n\tnotifyOnRoomChangedById,\n\tnotifyOnIntegrationChangedByUserId,\n\tnotifyOnLivechatDepartmentAgentChanged,\n\tnotifyOnUserChange,\n} from '../lib/notifyListener';\n\nexport async function deleteUser(userId: string, confirmRelinquish = false, deletedBy?: IUser['_id']): Promise<void> {\n\tif (userId === 'rocket.cat') {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Deleting the rocket.cat user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t\taction: 'Delete_user',\n\t\t});\n\t}\n\n\tconst user = await Users.findOneById(userId, {\n\t\tprojection: { username: 1, avatarOrigin: 1, roles: 1, federated: 1 },\n\t});\n\n\tif (!user) {\n\t\treturn;\n\t}\n\n\tif (isUserFederated(user)) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'Deleting federated, external user is not allowed', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst remoteUser = await MatrixBridgedUser.getExternalUserIdByLocalUserId(userId);\n\tif (remoteUser) {\n\t\tthrow new Meteor.Error('error-not-allowed', 'User participated in federation, this user can only be deactivated permanently', {\n\t\t\tmethod: 'deleteUser',\n\t\t});\n\t}\n\n\tconst subscribedRooms = await getSubscribedRoomsForUserWithDetails(userId);\n\n\tif (shouldRemoveOrChangeOwner(subscribedRooms) && !confirmRelinquish) {\n\t\tconst rooms = await getUserSingleOwnedRooms(subscribedRooms);\n\t\tthrow new Meteor.Error('user-last-owner', '', rooms);\n\t}\n\n\t// Users without username can't do anything, so there is nothing to remove\n\tif (user.username != null) {\n\t\tlet userToReplaceWhenUnlinking: IUser | null = null;\n\t\tconst nameAlias = i18n.t('Removed_User');\n\t\tawait relinquishRoomOwnerships(userId, subscribedRooms);\n\n\t\tconst messageErasureType = settings.get<'Delete' | 'Unlink' | 'Keep'>('Message_ErasureType');\n\t\tswitch (messageErasureType) {\n\t\t\tcase 'Delete':\n\t\t\t\tconst store = FileUpload.getStore('Uploads');\n\t\t\t\tconst cursor = Messages.findFilesByUserId(userId);\n\n\t\t\t\tfor await (const { file } of cursor) {\n\t\t\t\t\tif (!file) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tawait store.deleteById(file._id);\n\t\t\t\t}\n\n\t\t\t\tawait Messages.removeByUserId(userId);\n\t\t\t\tawait ReadReceipts.removeByUserId(userId);\n\n\t\t\t\tawait ModerationReports.hideMessageReportsByUserId(\n\t\t\t\t\tuserId,\n\t\t\t\t\tdeletedBy || userId,\n\t\t\t\t\tdeletedBy === userId ? 'user deleted own account' : 'user account deleted',\n\t\t\t\t\t'DELETE_USER',\n\t\t\t\t);\n\n\t\t\t\tbreak;\n\t\t\tcase 'Unlink':\n\t\t\t\tuserToReplaceWhenUnlinking = await Users.findOneById('rocket.cat');\n\t\t\t\tif (!userToReplaceWhenUnlinking?._id || !userToReplaceWhenUnlinking?.username) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tawait Messages.unlinkUserId(userId, userToReplaceWhenUnlinking?._id, userToReplaceWhenUnlinking?.username, nameAlias);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tawait Rooms.updateGroupDMsRemovingUsernamesByUsername(user.username, userId); // Remove direct rooms with the user\n\t\tawait Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user\n\n\t\tconst rids = subscribedRooms.map((room) => room.rid);\n\t\tvoid notifyOnRoomChangedById(rids);\n\n\t\tawait Subscriptions.removeByUserId(userId);\n\n\t\t// Remove user as livechat agent\n\t\tif (user.roles.includes('livechat-agent')) {\n\t\t\tconst departmentAgents = await LivechatDepartmentAgents.findByAgentId(userId).toArray();\n\n\t\t\tconst { deletedCount } = await LivechatDepartmentAgents.removeByAgentId(userId);\n\n\t\t\tif (deletedCount > 0) {\n\t\t\t\tdepartmentAgents.forEach((depAgent) => {\n\t\t\t\t\tvoid notifyOnLivechatDepartmentAgentChanged(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_id: depAgent._id,\n\t\t\t\t\t\t\tagentId: userId,\n\t\t\t\t\t\t\tdepartmentId: depAgent.departmentId,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'removed',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tif (user.roles.includes('livechat-monitor')) {\n\t\t\t// Remove user as Unit Monitor\n\t\t\tawait LivechatUnitMonitors.removeByMonitorId(userId);\n\t\t}\n\n\t\t// This is for compatibility. Since we allowed any user to be contact manager b4, we need to have the same logic\n\t\t// for deletion.\n\t\tawait LivechatVisitors.removeContactManagerByUsername(user.username);\n\n\t\t// removes user's avatar\n\t\tif (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url' || user.avatarOrigin === 'rest') {\n\t\t\tawait FileUpload.getStore('Avatars').deleteByName(user.username);\n\t\t}\n\n\t\t// Disables all the integrations which rely on the user being deleted.\n\t\tawait Integrations.disableByUserId(userId);\n\t\tvoid notifyOnIntegrationChangedByUserId(userId);\n\n\t\t// Don't broadcast user.deleted for Erasure Type of 'Keep' so that messages don't disappear from logged in sessions\n\t\tif (messageErasureType === 'Delete') {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t});\n\t\t}\n\t\tif (messageErasureType === 'Unlink' && userToReplaceWhenUnlinking) {\n\t\t\tvoid api.broadcast('user.deleted', user, {\n\t\t\t\tmessageErasureType,\n\t\t\t\treplaceByUser: { _id: userToReplaceWhenUnlinking._id, username: userToReplaceWhenUnlinking?.username, alias: nameAlias },\n\t\t\t});\n\t\t}\n\t}\n\n\t// Remove user from users database\n\tawait Users.removeById(userId);\n\n\t// update name and fname of group direct messages\n\tawait updateGroupDMsName(user);\n\n\t// Refresh the servers list\n\tawait FederationServers.refreshServers();\n\n\tvoid notifyOnUserChange({ clientAction: 'removed', id: user._id });\n\n\tawait callbacks.run('afterDeleteUser', user);\n}\n"],"mappings":";;;IAAA,IAAAA,cAAc;IAAAC,MAAM,CAAAC,IAAA,uCAA6B;MAAAC,QAAAC,CAAA;QAAAJ,cAAA,GAAAI,CAAA;MAAA;IAAA;IAAjDH,MAAA,CAAOI,MAAK,CAAE;MAAAC,UAAM,EAAAA,CAAA,KAAAA;IAAA;IAAA,IAAAC,GAA6B;IAAAN,MAAA,CAAAC,IAAA;MAAAK,IAAAH,CAAA;QAAAG,GAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,eAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,gBAAAJ,CAAA;QAAAI,eAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,YAAA,EAAAC,iBAAA,EAAAC,gBAAA,EAAAC,wBAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAC,aAAA,EAAAC,KAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,iBAAA,EAAAC,iBAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAO,aAAAL,CAAA;QAAAK,YAAA,GAAAL,CAAA;MAAA;MAAAM,kBAAAN,CAAA;QAAAM,iBAAA,GAAAN,CAAA;MAAA;MAAAO,iBAAAP,CAAA;QAAAO,gBAAA,GAAAP,CAAA;MAAA;MAAAQ,yBAAAR,CAAA;QAAAQ,wBAAA,GAAAR,CAAA;MAAA;MAAAS,SAAAT,CAAA;QAAAS,QAAA,GAAAT,CAAA;MAAA;MAAAU,MAAAV,CAAA;QAAAU,KAAA,GAAAV,CAAA;MAAA;MAAAW,cAAAX,CAAA;QAAAW,aAAA,GAAAX,CAAA;MAAA;MAAAY,MAAAZ,CAAA;QAAAY,KAAA,GAAAZ,CAAA;MAAA;MAAAa,aAAAb,CAAA;QAAAa,YAAA,GAAAb,CAAA;MAAA;MAAAc,qBAAAd,CAAA;QAAAc,oBAAA,GAAAd,CAAA;MAAA;MAAAe,kBAAAf,CAAA;QAAAe,iBAAA,GAAAf,CAAA;MAAA;MAAAgB,kBAAAhB,CAAA;QAAAgB,iBAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,MAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,OAAAjB,CAAA;QAAAiB,MAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,oCAAA,EAAAC,yBAAA;IAAAtB,MAAA,CAAAC,IAAA;MAAAoB,qCAAAlB,CAAA;QAAAkB,oCAAA,GAAAlB,CAAA;MAAA;MAAAmB,0BAAAnB,CAAA;QAAAmB,yBAAA,GAAAnB,CAAA;MAAA;IAAA;IAAA,IAAAoB,uBAAA;IAAAvB,MAAA,CAAAC,IAAA;MAAAsB,wBAAApB,CAAA;QAAAoB,uBAAA,GAAApB,CAAA;MAAA;IAAA;IAAA,IAAAqB,wBAAA;IAAAxB,MAAA,CAAAC,IAAA;MAAAuB,yBAAArB,CAAA;QAAAqB,wBAAA,GAAArB,CAAA;MAAA;IAAA;IAAA,IAAAsB,kBAAA;IAAAzB,MAAA,CAAAC,IAAA;MAAAwB,mBAAAtB,CAAA;QAAAsB,kBAAA,GAAAtB,CAAA;MAAA;IAAA;IAAA,IAAAuB,SAAA;IAAA1B,MAAA,CAAAC,IAAA;MAAAyB,UAAAvB,CAAA;QAAAuB,SAAA,GAAAvB,CAAA;MAAA;IAAA;IAAA,IAAAwB,IAAA;IAAA3B,MAAA,CAAAC,IAAA;MAAA0B,KAAAxB,CAAA;QAAAwB,IAAA,GAAAxB,CAAA;MAAA;IAAA;IAAA,IAAAyB,UAAA;IAAA5B,MAAA,CAAAC,IAAA;MAAA2B,WAAAzB,CAAA;QAAAyB,UAAA,GAAAzB,CAAA;MAAA;IAAA;IAAA,IAAA0B,QAAA;IAAA7B,MAAA,CAAAC,IAAA;MAAA4B,SAAA1B,CAAA;QAAA0B,QAAA,GAAA1B,CAAA;MAAA;IAAA;IAAA,IAAA2B,uBAAA,EAAAC,kCAAA,EAAAC,sCAAA,EAAAC,kBAAA;IAAAjC,MAAA,CAAAC,IAAA;MAAA6B,wBAAA3B,CAAA;QAAA2B,uBAAA,GAAA3B,CAAA;MAAA;MAAA4B,mCAAA5B,CAAA;QAAA4B,kCAAA,GAAA5B,CAAA;MAAA;MAAA6B,uCAAA7B,CAAA;QAAA6B,sCAAA,GAAA7B,CAAA;MAAA;MAAA8B,mBAAA9B,CAAA;QAAA8B,kBAAA,GAAA9B,CAAA;MAAA;IAAA;IAAA,IAAA+B,oBAAA,WAAAA,oBAAA;IAiC1C,eAAe7B,UAAUA,CAAC8B,MAAc,EAAqD;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAAA,IAAnDC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAAA,IAAEG,SAAwB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MACnG,IAAIR,MAAM,KAAK,YAAY,EAAE;QAC5B,MAAM,IAAIf,MAAM,CAACyB,KAAK,CAAC,0BAA0B,EAAE,6CAA6C,EAAE;UACjGC,MAAM,EAAE,YAAY;UACpBC,MAAM,EAAE;SACR,CAAC;MACH;MAEA,MAAMC,IAAI,GAAG,MAAMjC,KAAK,CAACkC,WAAW,CAACd,MAAM,EAAE;QAC5Ce,UAAU,EAAE;UAAEC,QAAQ,EAAE,CAAC;UAAEC,YAAY,EAAE,CAAC;UAAEC,KAAK,EAAE,CAAC;UAAEC,SAAS,EAAE;QAAC;OAClE,CAAC;MAEF,IAAI,CAACN,IAAI,EAAE;QACV;MACD;MAEA,IAAIzC,eAAe,CAACyC,IAAI,CAAC,EAAE;QAC1B,MAAM,IAAI5B,MAAM,CAACyB,KAAK,CAAC,mBAAmB,EAAE,kDAAkD,EAAE;UAC/FC,MAAM,EAAE;SACR,CAAC;MACH;MAEA,MAAMS,UAAU,GAAG,MAAMpC,iBAAiB,CAACqC,8BAA8B,CAACrB,MAAM,CAAC;MACjF,IAAIoB,UAAU,EAAE;QACf,MAAM,IAAInC,MAAM,CAACyB,KAAK,CAAC,mBAAmB,EAAE,gFAAgF,EAAE;UAC7HC,MAAM,EAAE;SACR,CAAC;MACH;MAEA,MAAMW,eAAe,GAAG,MAAMpC,oCAAoC,CAACc,MAAM,CAAC;MAE1E,IAAIb,yBAAyB,CAACmC,eAAe,CAAC,IAAI,CAACjB,iBAAiB,EAAE;QACrE,MAAMkB,KAAK,GAAG,MAAMnC,uBAAuB,CAACkC,eAAe,CAAC;QAC5D,MAAM,IAAIrC,MAAM,CAACyB,KAAK,CAAC,iBAAiB,EAAE,EAAE,EAAEa,KAAK,CAAC;MACrD;MAEA;MACA,IAAIV,IAAI,CAACG,QAAQ,IAAI,IAAI,EAAE;QAC1B,IAAIQ,0BAA0B,GAAiB,IAAI;QACnD,MAAMC,SAAS,GAAGjC,IAAI,CAACkC,CAAC,CAAC,cAAc,CAAC;QACxC,MAAMrC,wBAAwB,CAACW,MAAM,EAAEsB,eAAe,CAAC;QAEvD,MAAMK,kBAAkB,GAAGjC,QAAQ,CAACkC,GAAG,CAA+B,qBAAqB,CAAC;QAC5F,QAAQD,kBAAkB;UACzB,KAAK,QAAQ;YACZ,MAAME,KAAK,GAAGpC,UAAU,CAACqC,QAAQ,CAAC,SAAS,CAAC;YAC5C,MAAMC,MAAM,GAAGtD,QAAQ,CAACuD,iBAAiB,CAAChC,MAAM,CAAC;YAAC,IAAAiC,yBAAA;YAAA,IAAAC,iBAAA;YAAA,IAAAC,cAAA;YAAA;cAElD,SAAAC,SAAA,GAAAxE,cAAA,CAA6BmE,MAAM,GAAAM,KAAA,EAAAJ,yBAAA,KAAAI,KAAA,SAAAD,SAAA,CAAAE,IAAA,IAAAC,IAAA,EAAAN,yBAAA,UAAE;gBAAA,MAApB;kBAAEO;gBAAI,CAAE,GAAAH,KAAA,CAAAI,KAAA;gBAAA;kBACxB,IAAI,CAACD,IAAI,EAAE;oBACV;kBACD;kBACA,MAAMX,KAAK,CAACa,UAAU,CAACF,IAAI,CAACG,GAAG,CAAC;gBAAC;cAClC;YAAC,SAAAC,GAAA;cAAAV,iBAAA;cAAAC,cAAA,GAAAS,GAAA;YAAA;cAAA;gBAAA,IAAAX,yBAAA,IAAAG,SAAA,CAAAS,MAAA;kBAAA,MAAAT,SAAA,CAAAS,MAAA;gBAAA;cAAA;gBAAA,IAAAX,iBAAA;kBAAA,MAAAC,cAAA;gBAAA;cAAA;YAAA;YAED,MAAM1D,QAAQ,CAACqE,cAAc,CAAC9C,MAAM,CAAC;YACrC,MAAMnB,YAAY,CAACiE,cAAc,CAAC9C,MAAM,CAAC;YAEzC,MAAMjB,iBAAiB,CAACgE,0BAA0B,CACjD/C,MAAM,EACNS,SAAS,IAAIT,MAAM,EACnBS,SAAS,KAAKT,MAAM,GAAG,0BAA0B,GAAG,sBAAsB,EAC1E,aAAa,CACb;YAED;UACD,KAAK,QAAQ;YACZwB,0BAA0B,GAAG,MAAM5C,KAAK,CAACkC,WAAW,CAAC,YAAY,CAAC;YAClE,IAAI,GAAAb,qBAAA,GAACuB,0BAA0B,cAAAvB,qBAAA,eAA1BA,qBAAA,CAA4B0C,GAAG,KAAI,GAAAzC,sBAAA,GAACsB,0BAA0B,cAAAtB,sBAAA,eAA1BA,sBAAA,CAA4Bc,QAAQ,GAAE;cAC9E;YACD;YACA,MAAMvC,QAAQ,CAACuE,YAAY,CAAChD,MAAM,GAAAG,sBAAA,GAAEqB,0BAA0B,cAAArB,sBAAA,uBAA1BA,sBAAA,CAA4BwC,GAAG,GAAAvC,sBAAA,GAAEoB,0BAA0B,cAAApB,sBAAA,uBAA1BA,sBAAA,CAA4BY,QAAQ,EAAES,SAAS,CAAC;YACrH;QACF;QAEA,MAAM/C,KAAK,CAACuE,yCAAyC,CAACpC,IAAI,CAACG,QAAQ,EAAEhB,MAAM,CAAC,CAAC,CAAC;QAC9E,MAAMtB,KAAK,CAACwE,kCAAkC,CAACrC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;QAE/D,MAAMmC,IAAI,GAAG7B,eAAe,CAAC8B,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC;QACpD,KAAK3D,uBAAuB,CAACwD,IAAI,CAAC;QAElC,MAAMxE,aAAa,CAACmE,cAAc,CAAC9C,MAAM,CAAC;QAE1C;QACA,IAAIa,IAAI,CAACK,KAAK,CAACqC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;UAC1C,MAAMC,gBAAgB,GAAG,MAAMhF,wBAAwB,CAACiF,aAAa,CAACzD,MAAM,CAAC,CAAC0D,OAAO,EAAE;UAEvF,MAAM;YAAEC;UAAY,CAAE,GAAG,MAAMnF,wBAAwB,CAACoF,eAAe,CAAC5D,MAAM,CAAC;UAE/E,IAAI2D,YAAY,GAAG,CAAC,EAAE;YACrBH,gBAAgB,CAACK,OAAO,CAAEC,QAAQ,IAAI;cACrC,KAAKjE,sCAAsC,CAC1C;gBACC8C,GAAG,EAAEmB,QAAQ,CAACnB,GAAG;gBACjBoB,OAAO,EAAE/D,MAAM;gBACfgE,YAAY,EAAEF,QAAQ,CAACE;eACvB,EACD,SAAS,CACT;YACF,CAAC,CAAC;UACH;QACD;QAEA,IAAInD,IAAI,CAACK,KAAK,CAACqC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC5C;UACA,MAAMzE,oBAAoB,CAACmF,iBAAiB,CAACjE,MAAM,CAAC;QACrD;QAEA;QACA;QACA,MAAMzB,gBAAgB,CAAC2F,8BAA8B,CAACrD,IAAI,CAACG,QAAQ,CAAC;QAEpE;QACA,IAAIH,IAAI,CAACI,YAAY,KAAK,QAAQ,IAAIJ,IAAI,CAACI,YAAY,KAAK,KAAK,IAAIJ,IAAI,CAACI,YAAY,KAAK,MAAM,EAAE;UAClG,MAAMxB,UAAU,CAACqC,QAAQ,CAAC,SAAS,CAAC,CAACqC,YAAY,CAACtD,IAAI,CAACG,QAAQ,CAAC;QACjE;QAEA;QACA,MAAM3C,YAAY,CAAC+F,eAAe,CAACpE,MAAM,CAAC;QAC1C,KAAKJ,kCAAkC,CAACI,MAAM,CAAC;QAE/C;QACA,IAAI2B,kBAAkB,KAAK,QAAQ,EAAE;UACpC,KAAKxD,GAAG,CAACkG,SAAS,CAAC,cAAc,EAAExD,IAAI,EAAE;YACxCc;WACA,CAAC;QACH;QACA,IAAIA,kBAAkB,KAAK,QAAQ,IAAIH,0BAA0B,EAAE;UAAA,IAAA8C,sBAAA;UAClE,KAAKnG,GAAG,CAACkG,SAAS,CAAC,cAAc,EAAExD,IAAI,EAAE;YACxCc,kBAAkB;YAClB4C,aAAa,EAAE;cAAE5B,GAAG,EAAEnB,0BAA0B,CAACmB,GAAG;cAAE3B,QAAQ,GAAAsD,sBAAA,GAAE9C,0BAA0B,cAAA8C,sBAAA,uBAA1BA,sBAAA,CAA4BtD,QAAQ;cAAEwD,KAAK,EAAE/C;YAAS;WACtH,CAAC;QACH;MACD;MAEA;MACA,MAAM7C,KAAK,CAAC6F,UAAU,CAACzE,MAAM,CAAC;MAE9B;MACA,MAAMV,kBAAkB,CAACuB,IAAI,CAAC;MAE9B;MACA,MAAMvC,iBAAiB,CAACoG,cAAc,EAAE;MAExC,KAAK5E,kBAAkB,CAAC;QAAE6E,YAAY,EAAE,SAAS;QAAEC,EAAE,EAAE/D,IAAI,CAAC8B;MAAG,CAAE,CAAC;MAElE,MAAMpD,SAAS,CAACsF,GAAG,CAAC,iBAAiB,EAAEhE,IAAI,CAAC;IAC7C;IAACiE,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"dab30025970298bae15602857ece60d5fc8f7a86"}
