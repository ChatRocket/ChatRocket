{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/priorities.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"ee/app/livechat-enterprise/server/api/lib/priorities.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/priorities.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/api/lib/priorities.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/api/lib/priorities.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { ILivechatPriority, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatInquiry, LivechatPriority, LivechatRooms } from '@rocket.chat/models';\nimport type { PaginatedResult } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { FindOptions } from 'mongodb';\n\nimport { logger } from '../../lib/logger';\n\ntype FindPriorityParams = {\n\ttext?: string;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort: FindOptions<ILivechatPriority>['sort'];\n\t};\n};\n\nexport async function findPriority({\n\ttext,\n\tpagination: { offset, count, sort },\n}: FindPriorityParams): Promise<PaginatedResult<{ priorities: ILivechatPriority[] }>> {\n\tconst query = {\n\t\t...(text && { $or: [{ name: new RegExp(escapeRegExp(text), 'i') }, { description: new RegExp(escapeRegExp(text), 'i') }] }),\n\t};\n\n\tconst { cursor, totalCount } = await LivechatPriority.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [priorities, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tpriorities,\n\t\tcount: priorities.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function updatePriority(\n\t_id: string,\n\tdata: Pick<ILivechatPriority, 'name'> & { reset?: boolean },\n): Promise<ILivechatPriority | null> {\n\tif (data.name) {\n\t\t// If we want to enforce translated duplicates we need to change this\n\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });\n\t\tif (priority && priority._id !== _id) {\n\t\t\tthrow new Error('error-duplicate-priority-name');\n\t\t}\n\t}\n\n\tconst createdResult = await LivechatPriority.updatePriority(_id, data.reset || false, data.name);\n\n\tif (!createdResult.ok || !createdResult.value) {\n\t\tlogger.error(`Error updating priority: ${_id}. Unsuccessful result from mongodb. Result`, createdResult);\n\t\tthrow Error('error-unable-to-update-priority');\n\t}\n\n\treturn createdResult.value;\n}\n\nexport const updateRoomPriority = async (\n\trid: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriorityId: string,\n): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tconst priority = await LivechatPriority.findOneById(priorityId);\n\tif (!priority) {\n\t\tthrow new Error('error-invalid-priority');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.setPriorityByRoomId(rid, priority),\n\t\tLivechatInquiry.setPriorityForRoom(rid, priority),\n\t\taddPriorityChangeHistoryToRoom(room._id, user, priority),\n\t]);\n};\n\nexport const removePriorityFromRoom = async (rid: string, user: Required<Pick<IUser, '_id' | 'username' | 'name'>>): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.unsetPriorityByRoomId(rid),\n\t\tLivechatInquiry.unsetPriorityForRoom(rid),\n\t\taddPriorityChangeHistoryToRoom(rid, user),\n\t]);\n};\n\nconst addPriorityChangeHistoryToRoom = async (\n\troomId: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriority?: Pick<ILivechatPriority, 'name' | 'i18n'>,\n) => {\n\tawait Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n\t\tpriorityData: {\n\t\t\tdefinedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\t...(priority && { priority }),\n\t\t},\n\t});\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/ee/app/livechat-enterprise/server/api/lib/priorities.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"ee/app/livechat-enterprise/server/api/lib/priorities.ts","inputSourceMap":{"version":3,"file":"ee/app/livechat-enterprise/server/api/lib/priorities.ts","sourceRoot":"","sources":["ee/app/livechat-enterprise/server/api/lib/priorities.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { ILivechatPriority, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatInquiry, LivechatPriority, LivechatRooms } from '@rocket.chat/models';\nimport type { PaginatedResult } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { FindOptions } from 'mongodb';\n\nimport { logger } from '../../lib/logger';\n\ntype FindPriorityParams = {\n\ttext?: string;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort: FindOptions<ILivechatPriority>['sort'];\n\t};\n};\n\nexport async function findPriority({\n\ttext,\n\tpagination: { offset, count, sort },\n}: FindPriorityParams): Promise<PaginatedResult<{ priorities: ILivechatPriority[] }>> {\n\tconst query = {\n\t\t...(text && { $or: [{ name: new RegExp(escapeRegExp(text), 'i') }, { description: new RegExp(escapeRegExp(text), 'i') }] }),\n\t};\n\n\tconst { cursor, totalCount } = await LivechatPriority.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [priorities, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tpriorities,\n\t\tcount: priorities.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function updatePriority(\n\t_id: string,\n\tdata: Pick<ILivechatPriority, 'name'> & { reset?: boolean },\n): Promise<ILivechatPriority | null> {\n\tif (data.name) {\n\t\t// If we want to enforce translated duplicates we need to change this\n\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });\n\t\tif (priority && priority._id !== _id) {\n\t\t\tthrow new Error('error-duplicate-priority-name');\n\t\t}\n\t}\n\n\tconst createdResult = await LivechatPriority.updatePriority(_id, data.reset || false, data.name);\n\n\tif (!createdResult.ok || !createdResult.value) {\n\t\tlogger.error(`Error updating priority: ${_id}. Unsuccessful result from mongodb. Result`, createdResult);\n\t\tthrow Error('error-unable-to-update-priority');\n\t}\n\n\treturn createdResult.value;\n}\n\nexport const updateRoomPriority = async (\n\trid: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriorityId: string,\n): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tconst priority = await LivechatPriority.findOneById(priorityId);\n\tif (!priority) {\n\t\tthrow new Error('error-invalid-priority');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.setPriorityByRoomId(rid, priority),\n\t\tLivechatInquiry.setPriorityForRoom(rid, priority),\n\t\taddPriorityChangeHistoryToRoom(room._id, user, priority),\n\t]);\n};\n\nexport const removePriorityFromRoom = async (rid: string, user: Required<Pick<IUser, '_id' | 'username' | 'name'>>): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.unsetPriorityByRoomId(rid),\n\t\tLivechatInquiry.unsetPriorityForRoom(rid),\n\t\taddPriorityChangeHistoryToRoom(rid, user),\n\t]);\n};\n\nconst addPriorityChangeHistoryToRoom = async (\n\troomId: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriority?: Pick<ILivechatPriority, 'name' | 'i18n'>,\n) => {\n\tawait Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n\t\tpriorityData: {\n\t\t\tdefinedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\t...(priority && { priority }),\n\t\t},\n\t});\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      findPriority: () => findPriority,\n      updatePriority: () => updatePriority,\n      updateRoomPriority: () => updateRoomPriority,\n      removePriorityFromRoom: () => removePriorityFromRoom\n    });\n    let Message;\n    module.link(\"@rocket.chat/core-services\", {\n      Message(v) {\n        Message = v;\n      }\n    }, 0);\n    let LivechatInquiry, LivechatPriority, LivechatRooms;\n    module.link(\"@rocket.chat/models\", {\n      LivechatInquiry(v) {\n        LivechatInquiry = v;\n      },\n      LivechatPriority(v) {\n        LivechatPriority = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let logger;\n    module.link(\"../../lib/logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function findPriority(_ref) {\n      let {\n        text,\n        pagination: {\n          offset,\n          count,\n          sort\n        }\n      } = _ref;\n      const query = _objectSpread({}, text && {\n        $or: [{\n          name: new RegExp(escapeRegExp(text), 'i')\n        }, {\n          description: new RegExp(escapeRegExp(text), 'i')\n        }]\n      });\n      const {\n        cursor,\n        totalCount\n      } = await LivechatPriority.findPaginated(query, {\n        sort: sort || {\n          name: 1\n        },\n        skip: offset,\n        limit: count\n      });\n      const [priorities, total] = await Promise.all([cursor.toArray(), totalCount]);\n      return {\n        priorities,\n        count: priorities.length,\n        offset,\n        total\n      };\n    }\n    async function updatePriority(_id, data) {\n      if (data.name) {\n        // If we want to enforce translated duplicates we need to change this\n        const priority = await LivechatPriority.findOneNameUsingRegex(data.name, {\n          projection: {\n            name: 1\n          }\n        });\n        if (priority && priority._id !== _id) {\n          throw new Error('error-duplicate-priority-name');\n        }\n      }\n      const createdResult = await LivechatPriority.updatePriority(_id, data.reset || false, data.name);\n      if (!createdResult.ok || !createdResult.value) {\n        logger.error(\"Error updating priority: \".concat(_id, \". Unsuccessful result from mongodb. Result\"), createdResult);\n        throw Error('error-unable-to-update-priority');\n      }\n      return createdResult.value;\n    }\n    const updateRoomPriority = async (rid, user, priorityId) => {\n      const room = await LivechatRooms.findOneById(rid, {\n        projection: {\n          _id: 1\n        }\n      });\n      if (!room) {\n        throw new Error('error-room-does-not-exist');\n      }\n      const priority = await LivechatPriority.findOneById(priorityId);\n      if (!priority) {\n        throw new Error('error-invalid-priority');\n      }\n      await Promise.all([LivechatRooms.setPriorityByRoomId(rid, priority), LivechatInquiry.setPriorityForRoom(rid, priority), addPriorityChangeHistoryToRoom(room._id, user, priority)]);\n    };\n    const removePriorityFromRoom = async (rid, user) => {\n      const room = await LivechatRooms.findOneById(rid, {\n        projection: {\n          _id: 1\n        }\n      });\n      if (!room) {\n        throw new Error('error-room-does-not-exist');\n      }\n      await Promise.all([LivechatRooms.unsetPriorityByRoomId(rid), LivechatInquiry.unsetPriorityForRoom(rid), addPriorityChangeHistoryToRoom(rid, user)]);\n    };\n    const addPriorityChangeHistoryToRoom = async (roomId, user, priority) => {\n      await Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n        priorityData: _objectSpread({\n          definedBy: {\n            _id: user._id,\n            username: user.username\n          }\n        }, priority && {\n          priority\n        })\n      });\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","findPriority","updatePriority","updateRoomPriority","removePriorityFromRoom","Message","LivechatInquiry","LivechatPriority","LivechatRooms","escapeRegExp","logger","__reifyWaitForDeps__","_ref","text","pagination","offset","count","sort","query","$or","name","RegExp","description","cursor","totalCount","findPaginated","skip","limit","priorities","total","Promise","all","toArray","length","_id","data","priority","findOneNameUsingRegex","projection","Error","createdResult","reset","ok","value","error","concat","rid","user","priorityId","room","findOneById","setPriorityByRoomId","setPriorityForRoom","addPriorityChangeHistoryToRoom","unsetPriorityByRoomId","unsetPriorityForRoom","roomId","saveSystemMessage","priorityData","definedBy","username","__reify_async_result__","_reifyError","self","async"],"sources":["ee/app/livechat-enterprise/server/api/lib/priorities.ts"],"sourcesContent":["import { Message } from '@rocket.chat/core-services';\nimport type { ILivechatPriority, IOmnichannelRoom, IUser } from '@rocket.chat/core-typings';\nimport { LivechatInquiry, LivechatPriority, LivechatRooms } from '@rocket.chat/models';\nimport type { PaginatedResult } from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport type { FindOptions } from 'mongodb';\n\nimport { logger } from '../../lib/logger';\n\ntype FindPriorityParams = {\n\ttext?: string;\n\tpagination: {\n\t\toffset: number;\n\t\tcount: number;\n\t\tsort: FindOptions<ILivechatPriority>['sort'];\n\t};\n};\n\nexport async function findPriority({\n\ttext,\n\tpagination: { offset, count, sort },\n}: FindPriorityParams): Promise<PaginatedResult<{ priorities: ILivechatPriority[] }>> {\n\tconst query = {\n\t\t...(text && { $or: [{ name: new RegExp(escapeRegExp(text), 'i') }, { description: new RegExp(escapeRegExp(text), 'i') }] }),\n\t};\n\n\tconst { cursor, totalCount } = await LivechatPriority.findPaginated(query, {\n\t\tsort: sort || { name: 1 },\n\t\tskip: offset,\n\t\tlimit: count,\n\t});\n\n\tconst [priorities, total] = await Promise.all([cursor.toArray(), totalCount]);\n\n\treturn {\n\t\tpriorities,\n\t\tcount: priorities.length,\n\t\toffset,\n\t\ttotal,\n\t};\n}\n\nexport async function updatePriority(\n\t_id: string,\n\tdata: Pick<ILivechatPriority, 'name'> & { reset?: boolean },\n): Promise<ILivechatPriority | null> {\n\tif (data.name) {\n\t\t// If we want to enforce translated duplicates we need to change this\n\t\tconst priority = await LivechatPriority.findOneNameUsingRegex(data.name, { projection: { name: 1 } });\n\t\tif (priority && priority._id !== _id) {\n\t\t\tthrow new Error('error-duplicate-priority-name');\n\t\t}\n\t}\n\n\tconst createdResult = await LivechatPriority.updatePriority(_id, data.reset || false, data.name);\n\n\tif (!createdResult.ok || !createdResult.value) {\n\t\tlogger.error(`Error updating priority: ${_id}. Unsuccessful result from mongodb. Result`, createdResult);\n\t\tthrow Error('error-unable-to-update-priority');\n\t}\n\n\treturn createdResult.value;\n}\n\nexport const updateRoomPriority = async (\n\trid: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriorityId: string,\n): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tconst priority = await LivechatPriority.findOneById(priorityId);\n\tif (!priority) {\n\t\tthrow new Error('error-invalid-priority');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.setPriorityByRoomId(rid, priority),\n\t\tLivechatInquiry.setPriorityForRoom(rid, priority),\n\t\taddPriorityChangeHistoryToRoom(room._id, user, priority),\n\t]);\n};\n\nexport const removePriorityFromRoom = async (rid: string, user: Required<Pick<IUser, '_id' | 'username' | 'name'>>): Promise<void> => {\n\tconst room = await LivechatRooms.findOneById<Pick<IOmnichannelRoom, '_id'>>(rid, { projection: { _id: 1 } });\n\tif (!room) {\n\t\tthrow new Error('error-room-does-not-exist');\n\t}\n\n\tawait Promise.all([\n\t\tLivechatRooms.unsetPriorityByRoomId(rid),\n\t\tLivechatInquiry.unsetPriorityForRoom(rid),\n\t\taddPriorityChangeHistoryToRoom(rid, user),\n\t]);\n};\n\nconst addPriorityChangeHistoryToRoom = async (\n\troomId: string,\n\tuser: Required<Pick<IUser, '_id' | 'username' | 'name'>>,\n\tpriority?: Pick<ILivechatPriority, 'name' | 'i18n'>,\n) => {\n\tawait Message.saveSystemMessage('omnichannel_priority_change_history', roomId, '', user, {\n\t\tpriorityData: {\n\t\t\tdefinedBy: {\n\t\t\t\t_id: user._id,\n\t\t\t\tusername: user.username,\n\t\t\t},\n\t\t\t...(priority && { priority }),\n\t\t},\n\t});\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"78dc93de248e29a3cc382e8d349d2d8da5e9bdf6"}
