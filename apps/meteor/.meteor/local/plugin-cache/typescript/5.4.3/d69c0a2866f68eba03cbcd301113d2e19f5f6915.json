{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/cas/findExistingCASUser.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/lib/cas/findExistingCASUser.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/cas/findExistingCASUser.ts","inputSourceMap":{"version":3,"file":"server/lib/cas/findExistingCASUser.ts","sourceRoot":"","sources":["server/lib/cas/findExistingCASUser.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,QAAgB,EAA8B,EAAE;IACzF,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,0BAA0B,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9E,IAAI,OAAO,EAAE,CAAC;QACb,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAU,oBAAoB,CAAC,EAAE,CAAC;QAClD,OAAO;IACR,CAAC;IAED,uFAAuF;IACvF,uIAAuI;IACvI,8DAA8D;IAC9D,mCAAmC;IACnC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACtD,IAAI,IAAI,EAAE,CAAC;QACV,8DAA8D;QAC9D,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,0BAA0B,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7F,OAAO,IAAI,CAAC;IACb,CAAC;AACF,CAAC,CAAC","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../app/settings/server';\n\nexport const findExistingCASUser = async (username: string): Promise<IUser | undefined> => {\n\tconst casUser = await Users.findOne({ 'services.cas.external_id': username });\n\tif (casUser) {\n\t\treturn casUser;\n\t}\n\n\tif (!settings.get<boolean>('CAS_trust_username')) {\n\t\treturn;\n\t}\n\n\t// If that user was not found, check if there's any Rocket.Chat user with that username\n\t// With this, CAS login will continue to work if the user is renamed on both sides and also if the user is renamed only on Rocket.Chat.\n\t// It'll also allow non-CAS users to switch to CAS based login\n\t// #TODO: Remove regex based search\n\tconst regex = new RegExp(`^${username}$`, 'i');\n\tconst user = await Users.findOne({ username: regex });\n\tif (user) {\n\t\t// Update the user's external_id to reflect this new username.\n\t\tawait Users.updateOne({ _id: user._id }, { $set: { 'services.cas.external_id': username } });\n\t\treturn user;\n\t}\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/lib/cas/findExistingCASUser.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/lib/cas/findExistingCASUser.ts","inputSourceMap":{"version":3,"file":"server/lib/cas/findExistingCASUser.ts","sourceRoot":"","sources":["server/lib/cas/findExistingCASUser.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,MAAM,CAAC,MAAM,mBAAmB,GAAG,KAAK,EAAE,QAAgB,EAA8B,EAAE;IACzF,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,0BAA0B,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC9E,IAAI,OAAO,EAAE,CAAC;QACb,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAU,oBAAoB,CAAC,EAAE,CAAC;QAClD,OAAO;IACR,CAAC;IAED,uFAAuF;IACvF,uIAAuI;IACvI,8DAA8D;IAC9D,mCAAmC;IACnC,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,IAAI,QAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;IAC/C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACtD,IAAI,IAAI,EAAE,CAAC;QACV,8DAA8D;QAC9D,MAAM,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,0BAA0B,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC7F,OAAO,IAAI,CAAC;IACb,CAAC;AACF,CAAC,CAAC","sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../app/settings/server';\n\nexport const findExistingCASUser = async (username: string): Promise<IUser | undefined> => {\n\tconst casUser = await Users.findOne({ 'services.cas.external_id': username });\n\tif (casUser) {\n\t\treturn casUser;\n\t}\n\n\tif (!settings.get<boolean>('CAS_trust_username')) {\n\t\treturn;\n\t}\n\n\t// If that user was not found, check if there's any Rocket.Chat user with that username\n\t// With this, CAS login will continue to work if the user is renamed on both sides and also if the user is renamed only on Rocket.Chat.\n\t// It'll also allow non-CAS users to switch to CAS based login\n\t// #TODO: Remove regex based search\n\tconst regex = new RegExp(`^${username}$`, 'i');\n\tconst user = await Users.findOne({ username: regex });\n\tif (user) {\n\t\t// Update the user's external_id to reflect this new username.\n\t\tawait Users.updateOne({ _id: user._id }, { $set: { 'services.cas.external_id': username } });\n\t\treturn user;\n\t}\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      findExistingCASUser: () => findExistingCASUser\n    });\n    let Users;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let settings;\n    module.link(\"../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const findExistingCASUser = async username => {\n      const casUser = await Users.findOne({\n        'services.cas.external_id': username\n      });\n      if (casUser) {\n        return casUser;\n      }\n      if (!settings.get('CAS_trust_username')) {\n        return;\n      }\n      // If that user was not found, check if there's any Rocket.Chat user with that username\n      // With this, CAS login will continue to work if the user is renamed on both sides and also if the user is renamed only on Rocket.Chat.\n      // It'll also allow non-CAS users to switch to CAS based login\n      // #TODO: Remove regex based search\n      const regex = new RegExp(\"^\".concat(username, \"$\"), 'i');\n      const user = await Users.findOne({\n        username: regex\n      });\n      if (user) {\n        // Update the user's external_id to reflect this new username.\n        await Users.updateOne({\n          _id: user._id\n        }, {\n          $set: {\n            'services.cas.external_id': username\n          }\n        });\n        return user;\n      }\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","findExistingCASUser","Users","link","v","settings","__reifyWaitForDeps__","username","casUser","findOne","get","regex","RegExp","concat","user","updateOne","_id","$set","__reify_async_result__","_reifyError","self","async"],"sources":["server/lib/cas/findExistingCASUser.ts"],"sourcesContent":["import type { IUser } from '@rocket.chat/core-typings';\nimport { Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../app/settings/server';\n\nexport const findExistingCASUser = async (username: string): Promise<IUser | undefined> => {\n\tconst casUser = await Users.findOne({ 'services.cas.external_id': username });\n\tif (casUser) {\n\t\treturn casUser;\n\t}\n\n\tif (!settings.get<boolean>('CAS_trust_username')) {\n\t\treturn;\n\t}\n\n\t// If that user was not found, check if there's any Rocket.Chat user with that username\n\t// With this, CAS login will continue to work if the user is renamed on both sides and also if the user is renamed only on Rocket.Chat.\n\t// It'll also allow non-CAS users to switch to CAS based login\n\t// #TODO: Remove regex based search\n\tconst regex = new RegExp(`^${username}$`, 'i');\n\tconst user = await Users.findOne({ username: regex });\n\tif (user) {\n\t\t// Update the user's external_id to reflect this new username.\n\t\tawait Users.updateOne({ _id: user._id }, { $set: { 'services.cas.external_id': username } });\n\t\treturn user;\n\t}\n};\n"],"mappings":";;;IACAA,MAAA,CAAOC,MAAE,CAAK;MAAAC,mBAAQ,EAAAA,CAAA,KAAAA;IAAsB;IAAA,IAAAC,KAAA;IAAAH,MAAA,CAAAI,IAAA;MAAAD,MAAAE,CAAA;QAAAF,KAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,QAAA;IAAAN,MAAA,CAAAI,IAAA;MAAAE,SAAAD,CAAA;QAAAC,QAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,oBAAA,WAAAA,oBAAA;IAIrC,MAAML,mBAAmB,GAAG,MAAOM,QAAgB,IAAgC;MACzF,MAAMC,OAAO,GAAG,MAAMN,KAAK,CAACO,OAAO,CAAC;QAAE,0BAA0B,EAAEF;MAAQ,CAAE,CAAC;MAC7E,IAAIC,OAAO,EAAE;QACZ,OAAOA,OAAO;MACf;MAEA,IAAI,CAACH,QAAQ,CAACK,GAAG,CAAU,oBAAoB,CAAC,EAAE;QACjD;MACD;MAEA;MACA;MACA;MACA;MACA,MAAMC,KAAK,GAAG,IAAIC,MAAM,KAAAC,MAAA,CAAKN,QAAQ,QAAK,GAAG,CAAC;MAC9C,MAAMO,IAAI,GAAG,MAAMZ,KAAK,CAACO,OAAO,CAAC;QAAEF,QAAQ,EAAEI;MAAK,CAAE,CAAC;MACrD,IAAIG,IAAI,EAAE;QACT;QACA,MAAMZ,KAAK,CAACa,SAAS,CAAC;UAAEC,GAAG,EAAEF,IAAI,CAACE;QAAG,CAAE,EAAE;UAAEC,IAAI,EAAE;YAAE,0BAA0B,EAAEV;UAAQ;QAAE,CAAE,CAAC;QAC5F,OAAOO,IAAI;MACZ;IACD,CAAC;IAACI,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d69c0a2866f68eba03cbcd301113d2e19f5f6915"}
