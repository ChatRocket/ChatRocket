{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AAEjE,MAAM,2BAA2B;IAChC,KAAK,CAAC,uBAAuB;QAK5B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,uCAAuC,CAAC,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACvH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO;YACN,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;YACnC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB;QAK7B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,wCAAwC,CAAC,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACxH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO;YACN,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;YACnC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC7B,OAAO,KAAK,CAAC,2BAA2B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC7B,OAAO,KAAK,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,mCAAmC;QACxC,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,mCAAmC,CAClF,QAAQ,CAAC,GAAG,CAAC,qCAAqC,CAAC,CACnD,CAAC;QAEF,OAAO;YACN,QAAQ,EAAE,eAAe,CAAC,MAAM;YAChC,OAAO,EAAE,eAAe;SACxB,CAAC;IACH,CAAC;CACD;AAED,MAAM,CAAC,MAAM,6BAA6B,GAAG,KAAK,IAA0C,EAAE;IAC7F,MAAM,iBAAiB,GAAG,IAAI,2BAA2B,EAAE,CAAC;IAE5D,OAAO;QACN,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC;QAClD,6BAA6B,EAAE,QAAQ,CAAC,GAAG,CAAC,kDAAkD,CAAC;QAC/F,WAAW,EAAE,MAAM,iBAAiB,CAAC,uBAAuB,EAAE;QAC9D,YAAY,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QAChE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QACzE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QAC1E,wBAAwB,EAAE,MAAM,iBAAiB,CAAC,mCAAmC,EAAE;KACvF,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { IMatrixFederationStatistics } from '@rocket.chat/core-typings';\nimport { MatrixBridgedRoom, Rooms, Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../../../../app/settings/server';\n\nclass RocketChatStatisticsAdapter {\n\tasync getBiggestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findBiggestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getSmallestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getAmountOfExternalUsers(): Promise<number> {\n\t\treturn Users.countFederatedExternalUsers();\n\t}\n\n\tasync getAmountOfExternalRooms(): Promise<number> {\n\t\treturn Rooms.countFederatedRooms();\n\t}\n\n\tasync getAmountOfConnectedExternalServers(): Promise<{ quantity: number; servers: string[] }> {\n\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\t\tsettings.get('Federation_Matrix_homeserver_domain'),\n\t\t);\n\n\t\treturn {\n\t\t\tquantity: externalServers.length,\n\t\t\tservers: externalServers,\n\t\t};\n\t}\n}\n\nexport const getMatrixFederationStatistics = async (): Promise<IMatrixFederationStatistics> => {\n\tconst statisticsService = new RocketChatStatisticsAdapter();\n\n\treturn {\n\t\tenabled: settings.get('Federation_Matrix_enabled'),\n\t\tmaximumSizeOfPublicRoomsUsers: settings.get('Federation_Matrix_max_size_of_public_rooms_users'),\n\t\tbiggestRoom: await statisticsService.getBiggestRoomAvailable(),\n\t\tsmallestRoom: await statisticsService.getSmallestRoomAvailable(),\n\t\tamountOfExternalUsers: await statisticsService.getAmountOfExternalUsers(),\n\t\tamountOfFederatedRooms: await statisticsService.getAmountOfExternalRooms(),\n\t\texternalConnectedServers: await statisticsService.getAmountOfConnectedExternalServers(),\n\t};\n};\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","inputSourceMap":{"version":3,"file":"server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts","sourceRoot":"","sources":["server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,QAAQ,EAAE,MAAM,uCAAuC,CAAC;AAEjE,MAAM,2BAA2B;IAChC,KAAK,CAAC,uBAAuB;QAK5B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,uCAAuC,CAAC,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACvH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO;YACN,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;YACnC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB;QAK7B,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,wCAAwC,CAAC,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACxH,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QACD,OAAO;YACN,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;YACnC,UAAU,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC7B,OAAO,KAAK,CAAC,2BAA2B,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC7B,OAAO,KAAK,CAAC,mBAAmB,EAAE,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,mCAAmC;QACxC,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,mCAAmC,CAClF,QAAQ,CAAC,GAAG,CAAC,qCAAqC,CAAC,CACnD,CAAC;QAEF,OAAO;YACN,QAAQ,EAAE,eAAe,CAAC,MAAM;YAChC,OAAO,EAAE,eAAe;SACxB,CAAC;IACH,CAAC;CACD;AAED,MAAM,CAAC,MAAM,6BAA6B,GAAG,KAAK,IAA0C,EAAE;IAC7F,MAAM,iBAAiB,GAAG,IAAI,2BAA2B,EAAE,CAAC;IAE5D,OAAO;QACN,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,2BAA2B,CAAC;QAClD,6BAA6B,EAAE,QAAQ,CAAC,GAAG,CAAC,kDAAkD,CAAC;QAC/F,WAAW,EAAE,MAAM,iBAAiB,CAAC,uBAAuB,EAAE;QAC9D,YAAY,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QAChE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QACzE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC,wBAAwB,EAAE;QAC1E,wBAAwB,EAAE,MAAM,iBAAiB,CAAC,mCAAmC,EAAE;KACvF,CAAC;AACH,CAAC,CAAC","sourcesContent":["import type { IMatrixFederationStatistics } from '@rocket.chat/core-typings';\nimport { MatrixBridgedRoom, Rooms, Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../../../../app/settings/server';\n\nclass RocketChatStatisticsAdapter {\n\tasync getBiggestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findBiggestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getSmallestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getAmountOfExternalUsers(): Promise<number> {\n\t\treturn Users.countFederatedExternalUsers();\n\t}\n\n\tasync getAmountOfExternalRooms(): Promise<number> {\n\t\treturn Rooms.countFederatedRooms();\n\t}\n\n\tasync getAmountOfConnectedExternalServers(): Promise<{ quantity: number; servers: string[] }> {\n\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\t\tsettings.get('Federation_Matrix_homeserver_domain'),\n\t\t);\n\n\t\treturn {\n\t\t\tquantity: externalServers.length,\n\t\t\tservers: externalServers,\n\t\t};\n\t}\n}\n\nexport const getMatrixFederationStatistics = async (): Promise<IMatrixFederationStatistics> => {\n\tconst statisticsService = new RocketChatStatisticsAdapter();\n\n\treturn {\n\t\tenabled: settings.get('Federation_Matrix_enabled'),\n\t\tmaximumSizeOfPublicRoomsUsers: settings.get('Federation_Matrix_max_size_of_public_rooms_users'),\n\t\tbiggestRoom: await statisticsService.getBiggestRoomAvailable(),\n\t\tsmallestRoom: await statisticsService.getSmallestRoomAvailable(),\n\t\tamountOfExternalUsers: await statisticsService.getAmountOfExternalUsers(),\n\t\tamountOfFederatedRooms: await statisticsService.getAmountOfExternalRooms(),\n\t\texternalConnectedServers: await statisticsService.getAmountOfConnectedExternalServers(),\n\t};\n};\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      getMatrixFederationStatistics: () => getMatrixFederationStatistics\n    });\n    let MatrixBridgedRoom, Rooms, Users;\n    module.link(\"@rocket.chat/models\", {\n      MatrixBridgedRoom(v) {\n        MatrixBridgedRoom = v;\n      },\n      Rooms(v) {\n        Rooms = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let settings;\n    module.link(\"../../../../../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RocketChatStatisticsAdapter {\n      async getBiggestRoomAvailable() {\n        const room = await Rooms.findBiggestFederatedRoomInNumberOfUsers({\n          projection: {\n            usersCount: 1,\n            fname: 1,\n            name: 1\n          }\n        });\n        if (!room) {\n          return null;\n        }\n        return {\n          _id: room._id,\n          name: room.fname || room.name || '',\n          usersCount: room.usersCount\n        };\n      }\n      async getSmallestRoomAvailable() {\n        const room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({\n          projection: {\n            usersCount: 1,\n            fname: 1,\n            name: 1\n          }\n        });\n        if (!room) {\n          return null;\n        }\n        return {\n          _id: room._id,\n          name: room.fname || room.name || '',\n          usersCount: room.usersCount\n        };\n      }\n      async getAmountOfExternalUsers() {\n        return Users.countFederatedExternalUsers();\n      }\n      async getAmountOfExternalRooms() {\n        return Rooms.countFederatedRooms();\n      }\n      async getAmountOfConnectedExternalServers() {\n        const externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(settings.get('Federation_Matrix_homeserver_domain'));\n        return {\n          quantity: externalServers.length,\n          servers: externalServers\n        };\n      }\n    }\n    const getMatrixFederationStatistics = async () => {\n      const statisticsService = new RocketChatStatisticsAdapter();\n      return {\n        enabled: settings.get('Federation_Matrix_enabled'),\n        maximumSizeOfPublicRoomsUsers: settings.get('Federation_Matrix_max_size_of_public_rooms_users'),\n        biggestRoom: await statisticsService.getBiggestRoomAvailable(),\n        smallestRoom: await statisticsService.getSmallestRoomAvailable(),\n        amountOfExternalUsers: await statisticsService.getAmountOfExternalUsers(),\n        amountOfFederatedRooms: await statisticsService.getAmountOfExternalRooms(),\n        externalConnectedServers: await statisticsService.getAmountOfConnectedExternalServers()\n      };\n    };\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","getMatrixFederationStatistics","MatrixBridgedRoom","Rooms","Users","link","v","settings","__reifyWaitForDeps__","RocketChatStatisticsAdapter","getBiggestRoomAvailable","room","findBiggestFederatedRoomInNumberOfUsers","projection","usersCount","fname","name","_id","getSmallestRoomAvailable","findSmallestFederatedRoomInNumberOfUsers","getAmountOfExternalUsers","countFederatedExternalUsers","getAmountOfExternalRooms","countFederatedRooms","getAmountOfConnectedExternalServers","externalServers","getExternalServerConnectedExcluding","get","quantity","length","servers","statisticsService","enabled","maximumSizeOfPublicRoomsUsers","biggestRoom","smallestRoom","amountOfExternalUsers","amountOfFederatedRooms","externalConnectedServers","__reify_async_result__","_reifyError","self","async"],"sources":["server/services/federation/infrastructure/rocket-chat/adapters/Statistics.ts"],"sourcesContent":["import type { IMatrixFederationStatistics } from '@rocket.chat/core-typings';\nimport { MatrixBridgedRoom, Rooms, Users } from '@rocket.chat/models';\n\nimport { settings } from '../../../../../../app/settings/server';\n\nclass RocketChatStatisticsAdapter {\n\tasync getBiggestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findBiggestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getSmallestRoomAvailable(): Promise<{\n\t\t_id: string;\n\t\tname: string;\n\t\tusersCount: number;\n\t} | null> {\n\t\tconst room = await Rooms.findSmallestFederatedRoomInNumberOfUsers({ projection: { usersCount: 1, fname: 1, name: 1 } });\n\t\tif (!room) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t_id: room._id,\n\t\t\tname: room.fname || room.name || '',\n\t\t\tusersCount: room.usersCount,\n\t\t};\n\t}\n\n\tasync getAmountOfExternalUsers(): Promise<number> {\n\t\treturn Users.countFederatedExternalUsers();\n\t}\n\n\tasync getAmountOfExternalRooms(): Promise<number> {\n\t\treturn Rooms.countFederatedRooms();\n\t}\n\n\tasync getAmountOfConnectedExternalServers(): Promise<{ quantity: number; servers: string[] }> {\n\t\tconst externalServers = await MatrixBridgedRoom.getExternalServerConnectedExcluding(\n\t\t\tsettings.get('Federation_Matrix_homeserver_domain'),\n\t\t);\n\n\t\treturn {\n\t\t\tquantity: externalServers.length,\n\t\t\tservers: externalServers,\n\t\t};\n\t}\n}\n\nexport const getMatrixFederationStatistics = async (): Promise<IMatrixFederationStatistics> => {\n\tconst statisticsService = new RocketChatStatisticsAdapter();\n\n\treturn {\n\t\tenabled: settings.get('Federation_Matrix_enabled'),\n\t\tmaximumSizeOfPublicRoomsUsers: settings.get('Federation_Matrix_max_size_of_public_rooms_users'),\n\t\tbiggestRoom: await statisticsService.getBiggestRoomAvailable(),\n\t\tsmallestRoom: await statisticsService.getSmallestRoomAvailable(),\n\t\tamountOfExternalUsers: await statisticsService.getAmountOfExternalUsers(),\n\t\tamountOfFederatedRooms: await statisticsService.getAmountOfExternalRooms(),\n\t\texternalConnectedServers: await statisticsService.getAmountOfConnectedExternalServers(),\n\t};\n};\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2ce6d9a186faa8a236987fb7552310ab572d65c6"}
