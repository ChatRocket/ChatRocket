{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/Importer.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/importer/server/classes/Importer.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/Importer.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/Importer.ts","sourceRoot":"","sources":["app/importer/server/classes/Importer.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type {\n\tIImport,\n\tIImportRecord,\n\tIImportChannel,\n\tIImportUser,\n\tIImportProgress,\n\tIImporterShortSelection,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Settings, ImportData, Imports } from '@rocket.chat/models';\nimport AdmZip from 'adm-zip';\nimport type { MatchKeysAndValues, MongoServerError } from 'mongodb';\n\nimport { Selection, SelectionChannel, SelectionUser } from '..';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { t } from '../../../utils/lib/i18n';\nimport { ProgressStep, ImportPreparingStartedStates } from '../../lib/ImporterProgressStep';\nimport type { ImporterInfo } from '../definitions/ImporterInfo';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport type { ConverterOptions } from './ImportDataConverter';\nimport { ImporterProgress } from './ImporterProgress';\nimport { ImporterWebsocket } from './ImporterWebsocket';\n\ntype OldSettings = {\n\tallowedDomainList?: string | null;\n\tallowUsernameChange?: boolean | null;\n\tmaxFileSize?: number | null;\n\tmediaTypeWhiteList?: string | null;\n\tmediaTypeBlackList?: string | null;\n};\n\n/**\n * Base class for all of the importers.\n */\nexport class Importer {\n\tprivate _reportProgressHandler: ReturnType<typeof setTimeout> | undefined;\n\n\tprotected AdmZip = AdmZip;\n\n\tprotected converter: ImportDataConverter;\n\n\tprotected info: ImporterInfo;\n\n\tprotected logger: Logger;\n\n\tprotected oldSettings: OldSettings;\n\n\tprotected _lastProgressReportTotal = 0;\n\n\tpublic importRecord: IImport;\n\n\tpublic progress: ImporterProgress;\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tif (!info.key || !info.importer) {\n\t\t\tthrow new Error('Information passed in must be a valid ImporterInfo instance.');\n\t\t}\n\n\t\tthis.info = info;\n\t\tthis.logger = new Logger(`${this.info.name} Importer`);\n\n\t\tthis.converter = new ImportDataConverter(this.logger, converterOptions);\n\n\t\tthis.importRecord = importRecord;\n\t\tthis.progress = new ImporterProgress(this.info.key, this.info.name);\n\t\tthis.oldSettings = {};\n\n\t\tthis.progress.step = this.importRecord.status;\n\t\tthis._lastProgressReportTotal = 0;\n\t\tthis.reloadCount();\n\n\t\tthis.logger.debug(`Constructed a new ${this.info.name} Importer.`);\n\t}\n\n\t/**\n\t * Registers the file name and content type on the import operation\n\t */\n\tasync startFileUpload(fileName: string, contentType?: string): Promise<IImport> {\n\t\tawait this.updateProgress(ProgressStep.UPLOADING);\n\t\treturn this.updateRecord({ file: fileName, ...(contentType ? { contentType } : {}) });\n\t}\n\n\t/**\n\t * Takes the uploaded file and extracts the users, channels, and messages from it.\n\t *\n\t * @param {string} _fullFilePath the full path of the uploaded file\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync prepareUsingLocalFile(_fullFilePath: string): Promise<ImporterProgress> {\n\t\treturn this.updateProgress(ProgressStep.PREPARING_STARTED);\n\t}\n\n\t/**\n\t * Starts the import process. The implementing method should defer\n\t * as soon as the selection is set, so the user who started the process\n\t * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n\t * The returned object should be the progress.\n\t *\n\t * @param {IImporterShortSelection} importSelection The selection data.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync startImport(importSelection: IImporterShortSelection, startedByUserId: string): Promise<ImporterProgress> {\n\t\tawait this.updateProgress(ProgressStep.IMPORTING_STARTED);\n\t\tthis.reloadCount();\n\t\tconst started = Date.now();\n\n\t\tconst beforeImportFn = async ({ data, dataType: type }: IImportRecord) => {\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'channel': {\n\t\t\t\t\tif (importSelection.channels?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.channels?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst channelData = data as IImportChannel;\n\n\t\t\t\t\tconst id = channelData.t === 'd' ? '__directMessages__' : channelData.importIds[0];\n\t\t\t\t\treturn importSelection.channels.list?.includes(id);\n\t\t\t\t}\n\t\t\t\tcase 'user': {\n\t\t\t\t\tif (importSelection.users?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.users?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst userData = data as IImportUser;\n\t\t\t\t\tconst id = userData.importIds[0];\n\t\t\t\t\treturn importSelection.users.list.includes(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst afterImportFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst afterImportAllMessagesFn = async (importedRoomIds: string[]): Promise<void> =>\n\t\t\tapi.broadcast('notify.importedMessages', { roomIds: importedRoomIds });\n\n\t\tconst afterBatchFn = async (successCount: number, errorCount: number) => {\n\t\t\tif (successCount) {\n\t\t\t\tawait this.addCountCompleted(successCount);\n\t\t\t}\n\t\t\tif (errorCount) {\n\t\t\t\tawait this.addCountError(errorCount);\n\t\t\t}\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst onErrorFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\t\t};\n\n\t\tprocess.nextTick(async () => {\n\t\t\tawait this.backupSettingValues();\n\n\t\t\ttry {\n\t\t\t\tawait this.applySettingValues({});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tawait this.converter.convertUsers({ beforeImportFn, afterImportFn, onErrorFn, afterBatchFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tawait this.converter.convertChannels(startedByUserId, { beforeImportFn, afterImportFn, onErrorFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tawait this.converter.convertMessages({ afterImportFn, onErrorFn, afterImportAllMessagesFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tprocess.nextTick(async () => {\n\t\t\t\t\tawait this.converter.clearSuccessfullyImportedData();\n\t\t\t\t});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tawait this.updateProgress(ProgressStep.ERROR);\n\t\t\t} finally {\n\t\t\t\tawait this.applySettingValues(this.oldSettings);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`Import took ${timeTook} milliseconds.`);\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tasync backupSettingValues() {\n\t\tconst allowUsernameChange = (await Settings.findOneById('Accounts_AllowUsernameChange'))?.value as boolean | null;\n\t\tconst maxFileSize = (await Settings.findOneById('FileUpload_MaxFileSize'))?.value as number | null;\n\t\tconst mediaTypeWhiteList = (await Settings.findOneById('FileUpload_MediaTypeWhiteList'))?.value as string | null;\n\t\tconst mediaTypeBlackList = (await Settings.findOneById('FileUpload_MediaTypeBlackList'))?.value as string | null;\n\n\t\tthis.oldSettings = {\n\t\t\tallowUsernameChange,\n\t\t\tmaxFileSize,\n\t\t\tmediaTypeWhiteList,\n\t\t\tmediaTypeBlackList,\n\t\t};\n\t}\n\n\tasync applySettingValues(settingValues: OldSettings) {\n\t\tconst settingsIds = [\n\t\t\t{ _id: 'Accounts_AllowUsernameChange', value: settingValues.allowUsernameChange ?? true },\n\t\t\t{ _id: 'FileUpload_MaxFileSize', value: settingValues.maxFileSize ?? -1 },\n\t\t\t{ _id: 'FileUpload_MediaTypeWhiteList', value: settingValues.mediaTypeWhiteList ?? '*' },\n\t\t\t{ _id: 'FileUpload_MediaTypeBlackList', value: settingValues.mediaTypeBlackList ?? '' },\n\t\t];\n\n\t\tconst promises = settingsIds.map((setting) => Settings.updateValueById(setting._id, setting.value));\n\n\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\tif (value?.modifiedCount) {\n\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]._id);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetProgress(): ImporterProgress {\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Updates the progress step of this importer.\n\t * It also changes some internal settings at various stages of the import.\n\t * This way the importer can adjust user/room information at will.\n\t *\n\t * @param {ProgressStep} step The progress step which this import is currently at.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync updateProgress(step: IImportProgress['step']): Promise<ImporterProgress> {\n\t\tthis.progress.step = step;\n\n\t\tthis.logger.debug(`${this.info.name} is now at ${step}.`);\n\t\tawait this.updateRecord({ status: this.progress.step });\n\n\t\t// Do not send the default progress report during the preparing stage - the classes are sending their own report in a different format.\n\t\tif (!ImportPreparingStartedStates.includes(this.progress.step)) {\n\t\t\tthis.reportProgress();\n\t\t}\n\n\t\treturn this.progress;\n\t}\n\n\treloadCount() {\n\t\tthis.progress.count.total = this.importRecord.count?.total || 0;\n\t\tthis.progress.count.completed = this.importRecord.count?.completed || 0;\n\t\tthis.progress.count.error = this.importRecord.count?.error || 0;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items needed to complete.\n\t *\n\t * @param {number} count The amount to add to the total count of items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountToTotal(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.total += count;\n\t\tawait this.updateRecord({ 'count.total': this.progress.count.total });\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items completed.\n\t *\n\t * @param {number} count The amount to add to the total count of finished items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountCompleted(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.completed += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync addCountError(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.error += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync maybeUpdateRecord() {\n\t\t// Only update the database every 500 messages (or 50 for users/channels)\n\t\t// Or the completed is greater than or equal to the total amount\n\t\tconst count = this.progress.count.completed + this.progress.count.error;\n\t\tconst range = ([ProgressStep.IMPORTING_USERS, ProgressStep.IMPORTING_CHANNELS] as IImportProgress['step'][]).includes(\n\t\t\tthis.progress.step,\n\t\t)\n\t\t\t? 50\n\t\t\t: 500;\n\n\t\tif (count % range === 0 || count >= this.progress.count.total || count - this._lastProgressReportTotal > range) {\n\t\t\tthis._lastProgressReportTotal = this.progress.count.completed + this.progress.count.error;\n\t\t\tawait this.updateRecord({ 'count.completed': this.progress.count.completed, 'count.error': this.progress.count.error });\n\t\t\tthis.reportProgress();\n\t\t} else if (!this._reportProgressHandler) {\n\t\t\tthis._reportProgressHandler = setTimeout(() => {\n\t\t\t\tthis.reportProgress();\n\t\t\t}, 250);\n\t\t}\n\n\t\tthis.logger.log(`${this.progress.count.completed} records imported, ${this.progress.count.error} failed`);\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Sends an updated progress to the websocket\n\t */\n\treportProgress() {\n\t\tif (this._reportProgressHandler) {\n\t\t\tclearTimeout(this._reportProgressHandler);\n\t\t\tthis._reportProgressHandler = undefined;\n\t\t}\n\t\tImporterWebsocket.progressUpdated(this.progress);\n\t}\n\n\t/**\n\t * Updates the import record with the given fields being `set`.\n\t */\n\tasync updateRecord(fields: MatchKeysAndValues<IImport>): Promise<IImport> {\n\t\tif (!this.importRecord) {\n\t\t\treturn this.importRecord;\n\t\t}\n\n\t\tawait Imports.update({ _id: this.importRecord._id }, { $set: fields });\n\t\t// #TODO: Remove need for the typecast\n\t\tthis.importRecord = (await Imports.findOne(this.importRecord._id)) as IImport;\n\n\t\treturn this.importRecord;\n\t}\n\n\tasync buildSelection(): Promise<Selection> {\n\t\tawait this.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\tconst users = await ImportData.getAllUsersForSelection();\n\t\tconst channels = await ImportData.getAllChannelsForSelection();\n\t\tconst hasDM = await ImportData.checkIfDirectMessagesExists();\n\n\t\tconst selectionUsers = users.map(\n\t\t\t(u) =>\n\t\t\t\tnew SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true),\n\t\t);\n\t\tconst selectionChannels = channels.map(\n\t\t\t(c) => new SelectionChannel(c.data.importIds[0], c.data.name, Boolean(c.data.archived), true, c.data.t === 'p', c.data.t === 'd'),\n\t\t);\n\t\tconst selectionMessages = await ImportData.countMessages();\n\n\t\tif (hasDM) {\n\t\t\tselectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, true));\n\t\t}\n\n\t\tconst results = new Selection(this.info.name, selectionUsers, selectionChannels, selectionMessages);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Utility method to check if the passed in error is a `MongoServerError` with the `codeName` of `'CursorNotFound'`.\n\t */\n\tprotected isCursorNotFoundError(error: unknown): error is MongoServerError & { codeName: 'CursorNotFound' } {\n\t\treturn typeof error === 'object' && error !== null && 'codeName' in error && error.codeName === 'CursorNotFound';\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/importer/server/classes/Importer.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/importer/server/classes/Importer.ts","inputSourceMap":{"version":3,"file":"app/importer/server/classes/Importer.ts","sourceRoot":"","sources":["app/importer/server/classes/Importer.ts"],"names":[],"mappings":"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","sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type {\n\tIImport,\n\tIImportRecord,\n\tIImportChannel,\n\tIImportUser,\n\tIImportProgress,\n\tIImporterShortSelection,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Settings, ImportData, Imports } from '@rocket.chat/models';\nimport AdmZip from 'adm-zip';\nimport type { MatchKeysAndValues, MongoServerError } from 'mongodb';\n\nimport { Selection, SelectionChannel, SelectionUser } from '..';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { t } from '../../../utils/lib/i18n';\nimport { ProgressStep, ImportPreparingStartedStates } from '../../lib/ImporterProgressStep';\nimport type { ImporterInfo } from '../definitions/ImporterInfo';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport type { ConverterOptions } from './ImportDataConverter';\nimport { ImporterProgress } from './ImporterProgress';\nimport { ImporterWebsocket } from './ImporterWebsocket';\n\ntype OldSettings = {\n\tallowedDomainList?: string | null;\n\tallowUsernameChange?: boolean | null;\n\tmaxFileSize?: number | null;\n\tmediaTypeWhiteList?: string | null;\n\tmediaTypeBlackList?: string | null;\n};\n\n/**\n * Base class for all of the importers.\n */\nexport class Importer {\n\tprivate _reportProgressHandler: ReturnType<typeof setTimeout> | undefined;\n\n\tprotected AdmZip = AdmZip;\n\n\tprotected converter: ImportDataConverter;\n\n\tprotected info: ImporterInfo;\n\n\tprotected logger: Logger;\n\n\tprotected oldSettings: OldSettings;\n\n\tprotected _lastProgressReportTotal = 0;\n\n\tpublic importRecord: IImport;\n\n\tpublic progress: ImporterProgress;\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tif (!info.key || !info.importer) {\n\t\t\tthrow new Error('Information passed in must be a valid ImporterInfo instance.');\n\t\t}\n\n\t\tthis.info = info;\n\t\tthis.logger = new Logger(`${this.info.name} Importer`);\n\n\t\tthis.converter = new ImportDataConverter(this.logger, converterOptions);\n\n\t\tthis.importRecord = importRecord;\n\t\tthis.progress = new ImporterProgress(this.info.key, this.info.name);\n\t\tthis.oldSettings = {};\n\n\t\tthis.progress.step = this.importRecord.status;\n\t\tthis._lastProgressReportTotal = 0;\n\t\tthis.reloadCount();\n\n\t\tthis.logger.debug(`Constructed a new ${this.info.name} Importer.`);\n\t}\n\n\t/**\n\t * Registers the file name and content type on the import operation\n\t */\n\tasync startFileUpload(fileName: string, contentType?: string): Promise<IImport> {\n\t\tawait this.updateProgress(ProgressStep.UPLOADING);\n\t\treturn this.updateRecord({ file: fileName, ...(contentType ? { contentType } : {}) });\n\t}\n\n\t/**\n\t * Takes the uploaded file and extracts the users, channels, and messages from it.\n\t *\n\t * @param {string} _fullFilePath the full path of the uploaded file\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync prepareUsingLocalFile(_fullFilePath: string): Promise<ImporterProgress> {\n\t\treturn this.updateProgress(ProgressStep.PREPARING_STARTED);\n\t}\n\n\t/**\n\t * Starts the import process. The implementing method should defer\n\t * as soon as the selection is set, so the user who started the process\n\t * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n\t * The returned object should be the progress.\n\t *\n\t * @param {IImporterShortSelection} importSelection The selection data.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync startImport(importSelection: IImporterShortSelection, startedByUserId: string): Promise<ImporterProgress> {\n\t\tawait this.updateProgress(ProgressStep.IMPORTING_STARTED);\n\t\tthis.reloadCount();\n\t\tconst started = Date.now();\n\n\t\tconst beforeImportFn = async ({ data, dataType: type }: IImportRecord) => {\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'channel': {\n\t\t\t\t\tif (importSelection.channels?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.channels?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst channelData = data as IImportChannel;\n\n\t\t\t\t\tconst id = channelData.t === 'd' ? '__directMessages__' : channelData.importIds[0];\n\t\t\t\t\treturn importSelection.channels.list?.includes(id);\n\t\t\t\t}\n\t\t\t\tcase 'user': {\n\t\t\t\t\tif (importSelection.users?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.users?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst userData = data as IImportUser;\n\t\t\t\t\tconst id = userData.importIds[0];\n\t\t\t\t\treturn importSelection.users.list.includes(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst afterImportFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst afterImportAllMessagesFn = async (importedRoomIds: string[]): Promise<void> =>\n\t\t\tapi.broadcast('notify.importedMessages', { roomIds: importedRoomIds });\n\n\t\tconst afterBatchFn = async (successCount: number, errorCount: number) => {\n\t\t\tif (successCount) {\n\t\t\t\tawait this.addCountCompleted(successCount);\n\t\t\t}\n\t\t\tif (errorCount) {\n\t\t\t\tawait this.addCountError(errorCount);\n\t\t\t}\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst onErrorFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\t\t};\n\n\t\tprocess.nextTick(async () => {\n\t\t\tawait this.backupSettingValues();\n\n\t\t\ttry {\n\t\t\t\tawait this.applySettingValues({});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tawait this.converter.convertUsers({ beforeImportFn, afterImportFn, onErrorFn, afterBatchFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tawait this.converter.convertChannels(startedByUserId, { beforeImportFn, afterImportFn, onErrorFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tawait this.converter.convertMessages({ afterImportFn, onErrorFn, afterImportAllMessagesFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tprocess.nextTick(async () => {\n\t\t\t\t\tawait this.converter.clearSuccessfullyImportedData();\n\t\t\t\t});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tawait this.updateProgress(ProgressStep.ERROR);\n\t\t\t} finally {\n\t\t\t\tawait this.applySettingValues(this.oldSettings);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`Import took ${timeTook} milliseconds.`);\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tasync backupSettingValues() {\n\t\tconst allowUsernameChange = (await Settings.findOneById('Accounts_AllowUsernameChange'))?.value as boolean | null;\n\t\tconst maxFileSize = (await Settings.findOneById('FileUpload_MaxFileSize'))?.value as number | null;\n\t\tconst mediaTypeWhiteList = (await Settings.findOneById('FileUpload_MediaTypeWhiteList'))?.value as string | null;\n\t\tconst mediaTypeBlackList = (await Settings.findOneById('FileUpload_MediaTypeBlackList'))?.value as string | null;\n\n\t\tthis.oldSettings = {\n\t\t\tallowUsernameChange,\n\t\t\tmaxFileSize,\n\t\t\tmediaTypeWhiteList,\n\t\t\tmediaTypeBlackList,\n\t\t};\n\t}\n\n\tasync applySettingValues(settingValues: OldSettings) {\n\t\tconst settingsIds = [\n\t\t\t{ _id: 'Accounts_AllowUsernameChange', value: settingValues.allowUsernameChange ?? true },\n\t\t\t{ _id: 'FileUpload_MaxFileSize', value: settingValues.maxFileSize ?? -1 },\n\t\t\t{ _id: 'FileUpload_MediaTypeWhiteList', value: settingValues.mediaTypeWhiteList ?? '*' },\n\t\t\t{ _id: 'FileUpload_MediaTypeBlackList', value: settingValues.mediaTypeBlackList ?? '' },\n\t\t];\n\n\t\tconst promises = settingsIds.map((setting) => Settings.updateValueById(setting._id, setting.value));\n\n\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\tif (value?.modifiedCount) {\n\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]._id);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetProgress(): ImporterProgress {\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Updates the progress step of this importer.\n\t * It also changes some internal settings at various stages of the import.\n\t * This way the importer can adjust user/room information at will.\n\t *\n\t * @param {ProgressStep} step The progress step which this import is currently at.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync updateProgress(step: IImportProgress['step']): Promise<ImporterProgress> {\n\t\tthis.progress.step = step;\n\n\t\tthis.logger.debug(`${this.info.name} is now at ${step}.`);\n\t\tawait this.updateRecord({ status: this.progress.step });\n\n\t\t// Do not send the default progress report during the preparing stage - the classes are sending their own report in a different format.\n\t\tif (!ImportPreparingStartedStates.includes(this.progress.step)) {\n\t\t\tthis.reportProgress();\n\t\t}\n\n\t\treturn this.progress;\n\t}\n\n\treloadCount() {\n\t\tthis.progress.count.total = this.importRecord.count?.total || 0;\n\t\tthis.progress.count.completed = this.importRecord.count?.completed || 0;\n\t\tthis.progress.count.error = this.importRecord.count?.error || 0;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items needed to complete.\n\t *\n\t * @param {number} count The amount to add to the total count of items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountToTotal(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.total += count;\n\t\tawait this.updateRecord({ 'count.total': this.progress.count.total });\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items completed.\n\t *\n\t * @param {number} count The amount to add to the total count of finished items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountCompleted(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.completed += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync addCountError(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.error += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync maybeUpdateRecord() {\n\t\t// Only update the database every 500 messages (or 50 for users/channels)\n\t\t// Or the completed is greater than or equal to the total amount\n\t\tconst count = this.progress.count.completed + this.progress.count.error;\n\t\tconst range = ([ProgressStep.IMPORTING_USERS, ProgressStep.IMPORTING_CHANNELS] as IImportProgress['step'][]).includes(\n\t\t\tthis.progress.step,\n\t\t)\n\t\t\t? 50\n\t\t\t: 500;\n\n\t\tif (count % range === 0 || count >= this.progress.count.total || count - this._lastProgressReportTotal > range) {\n\t\t\tthis._lastProgressReportTotal = this.progress.count.completed + this.progress.count.error;\n\t\t\tawait this.updateRecord({ 'count.completed': this.progress.count.completed, 'count.error': this.progress.count.error });\n\t\t\tthis.reportProgress();\n\t\t} else if (!this._reportProgressHandler) {\n\t\t\tthis._reportProgressHandler = setTimeout(() => {\n\t\t\t\tthis.reportProgress();\n\t\t\t}, 250);\n\t\t}\n\n\t\tthis.logger.log(`${this.progress.count.completed} records imported, ${this.progress.count.error} failed`);\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Sends an updated progress to the websocket\n\t */\n\treportProgress() {\n\t\tif (this._reportProgressHandler) {\n\t\t\tclearTimeout(this._reportProgressHandler);\n\t\t\tthis._reportProgressHandler = undefined;\n\t\t}\n\t\tImporterWebsocket.progressUpdated(this.progress);\n\t}\n\n\t/**\n\t * Updates the import record with the given fields being `set`.\n\t */\n\tasync updateRecord(fields: MatchKeysAndValues<IImport>): Promise<IImport> {\n\t\tif (!this.importRecord) {\n\t\t\treturn this.importRecord;\n\t\t}\n\n\t\tawait Imports.update({ _id: this.importRecord._id }, { $set: fields });\n\t\t// #TODO: Remove need for the typecast\n\t\tthis.importRecord = (await Imports.findOne(this.importRecord._id)) as IImport;\n\n\t\treturn this.importRecord;\n\t}\n\n\tasync buildSelection(): Promise<Selection> {\n\t\tawait this.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\tconst users = await ImportData.getAllUsersForSelection();\n\t\tconst channels = await ImportData.getAllChannelsForSelection();\n\t\tconst hasDM = await ImportData.checkIfDirectMessagesExists();\n\n\t\tconst selectionUsers = users.map(\n\t\t\t(u) =>\n\t\t\t\tnew SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true),\n\t\t);\n\t\tconst selectionChannels = channels.map(\n\t\t\t(c) => new SelectionChannel(c.data.importIds[0], c.data.name, Boolean(c.data.archived), true, c.data.t === 'p', c.data.t === 'd'),\n\t\t);\n\t\tconst selectionMessages = await ImportData.countMessages();\n\n\t\tif (hasDM) {\n\t\t\tselectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, true));\n\t\t}\n\n\t\tconst results = new Selection(this.info.name, selectionUsers, selectionChannels, selectionMessages);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Utility method to check if the passed in error is a `MongoServerError` with the `codeName` of `'CursorNotFound'`.\n\t */\n\tprotected isCursorNotFoundError(error: unknown): error is MongoServerError & { codeName: 'CursorNotFound' } {\n\t\treturn typeof error === 'object' && error !== null && 'codeName' in error && error.codeName === 'CursorNotFound';\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      Importer: () => Importer\n    });\n    let api;\n    module.link(\"@rocket.chat/core-services\", {\n      api(v) {\n        api = v;\n      }\n    }, 0);\n    let Logger;\n    module.link(\"@rocket.chat/logger\", {\n      Logger(v) {\n        Logger = v;\n      }\n    }, 1);\n    let Settings, ImportData, Imports;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      },\n      ImportData(v) {\n        ImportData = v;\n      },\n      Imports(v) {\n        Imports = v;\n      }\n    }, 2);\n    let AdmZip;\n    module.link(\"adm-zip\", {\n      default(v) {\n        AdmZip = v;\n      }\n    }, 3);\n    let Selection, SelectionChannel, SelectionUser;\n    module.link(\"..\", {\n      Selection(v) {\n        Selection = v;\n      },\n      SelectionChannel(v) {\n        SelectionChannel = v;\n      },\n      SelectionUser(v) {\n        SelectionUser = v;\n      }\n    }, 4);\n    let notifyOnSettingChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 5);\n    let t;\n    module.link(\"../../../utils/lib/i18n\", {\n      t(v) {\n        t = v;\n      }\n    }, 6);\n    let ProgressStep, ImportPreparingStartedStates;\n    module.link(\"../../lib/ImporterProgressStep\", {\n      ProgressStep(v) {\n        ProgressStep = v;\n      },\n      ImportPreparingStartedStates(v) {\n        ImportPreparingStartedStates = v;\n      }\n    }, 7);\n    let ImportDataConverter;\n    module.link(\"./ImportDataConverter\", {\n      ImportDataConverter(v) {\n        ImportDataConverter = v;\n      }\n    }, 8);\n    let ImporterProgress;\n    module.link(\"./ImporterProgress\", {\n      ImporterProgress(v) {\n        ImporterProgress = v;\n      }\n    }, 9);\n    let ImporterWebsocket;\n    module.link(\"./ImporterWebsocket\", {\n      ImporterWebsocket(v) {\n        ImporterWebsocket = v;\n      }\n    }, 10);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class Importer {\n      constructor(info, importRecord) {\n        let converterOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        this._reportProgressHandler = void 0;\n        this.AdmZip = AdmZip;\n        this.converter = void 0;\n        this.info = void 0;\n        this.logger = void 0;\n        this.oldSettings = void 0;\n        this._lastProgressReportTotal = 0;\n        this.importRecord = void 0;\n        this.progress = void 0;\n        if (!info.key || !info.importer) {\n          throw new Error('Information passed in must be a valid ImporterInfo instance.');\n        }\n        this.info = info;\n        this.logger = new Logger(\"\".concat(this.info.name, \" Importer\"));\n        this.converter = new ImportDataConverter(this.logger, converterOptions);\n        this.importRecord = importRecord;\n        this.progress = new ImporterProgress(this.info.key, this.info.name);\n        this.oldSettings = {};\n        this.progress.step = this.importRecord.status;\n        this._lastProgressReportTotal = 0;\n        this.reloadCount();\n        this.logger.debug(\"Constructed a new \".concat(this.info.name, \" Importer.\"));\n      }\n      /**\n       * Registers the file name and content type on the import operation\n       */\n      async startFileUpload(fileName, contentType) {\n        await this.updateProgress(ProgressStep.UPLOADING);\n        return this.updateRecord(_objectSpread({\n          file: fileName\n        }, contentType ? {\n          contentType\n        } : {}));\n      }\n      /**\n       * Takes the uploaded file and extracts the users, channels, and messages from it.\n       *\n       * @param {string} _fullFilePath the full path of the uploaded file\n       * @returns {ImporterProgress} The progress record of the import.\n       */\n      async prepareUsingLocalFile(_fullFilePath) {\n        return this.updateProgress(ProgressStep.PREPARING_STARTED);\n      }\n      /**\n       * Starts the import process. The implementing method should defer\n       * as soon as the selection is set, so the user who started the process\n       * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n       * The returned object should be the progress.\n       *\n       * @param {IImporterShortSelection} importSelection The selection data.\n       * @returns {ImporterProgress} The progress record of the import.\n       */\n      async startImport(importSelection, startedByUserId) {\n        await this.updateProgress(ProgressStep.IMPORTING_STARTED);\n        this.reloadCount();\n        const started = Date.now();\n        const beforeImportFn = async _ref => {\n          let {\n            data,\n            dataType: type\n          } = _ref;\n          if (this.importRecord.valid === false) {\n            this.converter.abort();\n            throw new Error('The import operation is no longer valid.');\n          }\n          switch (type) {\n            case 'channel':\n              {\n                var _importSelection$chan, _importSelection$chan2, _importSelection$chan3, _importSelection$chan4;\n                if ((_importSelection$chan = importSelection.channels) !== null && _importSelection$chan !== void 0 && _importSelection$chan.all) {\n                  return true;\n                }\n                if (!((_importSelection$chan2 = importSelection.channels) !== null && _importSelection$chan2 !== void 0 && (_importSelection$chan3 = _importSelection$chan2.list) !== null && _importSelection$chan3 !== void 0 && _importSelection$chan3.length)) {\n                  return false;\n                }\n                const channelData = data;\n                const id = channelData.t === 'd' ? '__directMessages__' : channelData.importIds[0];\n                return (_importSelection$chan4 = importSelection.channels.list) === null || _importSelection$chan4 === void 0 ? void 0 : _importSelection$chan4.includes(id);\n              }\n            case 'user':\n              {\n                var _importSelection$user, _importSelection$user2, _importSelection$user3;\n                if ((_importSelection$user = importSelection.users) !== null && _importSelection$user !== void 0 && _importSelection$user.all) {\n                  return true;\n                }\n                if (!((_importSelection$user2 = importSelection.users) !== null && _importSelection$user2 !== void 0 && (_importSelection$user3 = _importSelection$user2.list) !== null && _importSelection$user3 !== void 0 && _importSelection$user3.length)) {\n                  return false;\n                }\n                const userData = data;\n                const id = userData.importIds[0];\n                return importSelection.users.list.includes(id);\n              }\n          }\n          return false;\n        };\n        const afterImportFn = async () => {\n          await this.addCountCompleted(1);\n          if (this.importRecord.valid === false) {\n            this.converter.abort();\n            throw new Error('The import operation is no longer valid.');\n          }\n        };\n        const afterImportAllMessagesFn = async importedRoomIds => api.broadcast('notify.importedMessages', {\n          roomIds: importedRoomIds\n        });\n        const afterBatchFn = async (successCount, errorCount) => {\n          if (successCount) {\n            await this.addCountCompleted(successCount);\n          }\n          if (errorCount) {\n            await this.addCountError(errorCount);\n          }\n          if (this.importRecord.valid === false) {\n            this.converter.abort();\n            throw new Error('The import operation is no longer valid.');\n          }\n        };\n        const onErrorFn = async () => {\n          await this.addCountCompleted(1);\n        };\n        process.nextTick(async () => {\n          await this.backupSettingValues();\n          try {\n            await this.applySettingValues({});\n            await this.updateProgress(ProgressStep.IMPORTING_USERS);\n            await this.converter.convertUsers({\n              beforeImportFn,\n              afterImportFn,\n              onErrorFn,\n              afterBatchFn\n            });\n            await this.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n            await this.converter.convertChannels(startedByUserId, {\n              beforeImportFn,\n              afterImportFn,\n              onErrorFn\n            });\n            await this.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n            await this.converter.convertMessages({\n              afterImportFn,\n              onErrorFn,\n              afterImportAllMessagesFn\n            });\n            await this.updateProgress(ProgressStep.FINISHING);\n            process.nextTick(async () => {\n              await this.converter.clearSuccessfullyImportedData();\n            });\n            await this.updateProgress(ProgressStep.DONE);\n          } catch (e) {\n            this.logger.error(e);\n            await this.updateProgress(ProgressStep.ERROR);\n          } finally {\n            await this.applySettingValues(this.oldSettings);\n          }\n          const timeTook = Date.now() - started;\n          this.logger.log(\"Import took \".concat(timeTook, \" milliseconds.\"));\n        });\n        return this.getProgress();\n      }\n      async backupSettingValues() {\n        var _await$Settings$findO, _await$Settings$findO2, _await$Settings$findO3, _await$Settings$findO4;\n        const allowUsernameChange = (_await$Settings$findO = await Settings.findOneById('Accounts_AllowUsernameChange')) === null || _await$Settings$findO === void 0 ? void 0 : _await$Settings$findO.value;\n        const maxFileSize = (_await$Settings$findO2 = await Settings.findOneById('FileUpload_MaxFileSize')) === null || _await$Settings$findO2 === void 0 ? void 0 : _await$Settings$findO2.value;\n        const mediaTypeWhiteList = (_await$Settings$findO3 = await Settings.findOneById('FileUpload_MediaTypeWhiteList')) === null || _await$Settings$findO3 === void 0 ? void 0 : _await$Settings$findO3.value;\n        const mediaTypeBlackList = (_await$Settings$findO4 = await Settings.findOneById('FileUpload_MediaTypeBlackList')) === null || _await$Settings$findO4 === void 0 ? void 0 : _await$Settings$findO4.value;\n        this.oldSettings = {\n          allowUsernameChange,\n          maxFileSize,\n          mediaTypeWhiteList,\n          mediaTypeBlackList\n        };\n      }\n      async applySettingValues(settingValues) {\n        var _settingValues$allowU, _settingValues$maxFil, _settingValues$mediaT, _settingValues$mediaT2;\n        const settingsIds = [{\n          _id: 'Accounts_AllowUsernameChange',\n          value: (_settingValues$allowU = settingValues.allowUsernameChange) !== null && _settingValues$allowU !== void 0 ? _settingValues$allowU : true\n        }, {\n          _id: 'FileUpload_MaxFileSize',\n          value: (_settingValues$maxFil = settingValues.maxFileSize) !== null && _settingValues$maxFil !== void 0 ? _settingValues$maxFil : -1\n        }, {\n          _id: 'FileUpload_MediaTypeWhiteList',\n          value: (_settingValues$mediaT = settingValues.mediaTypeWhiteList) !== null && _settingValues$mediaT !== void 0 ? _settingValues$mediaT : '*'\n        }, {\n          _id: 'FileUpload_MediaTypeBlackList',\n          value: (_settingValues$mediaT2 = settingValues.mediaTypeBlackList) !== null && _settingValues$mediaT2 !== void 0 ? _settingValues$mediaT2 : ''\n        }];\n        const promises = settingsIds.map(setting => Settings.updateValueById(setting._id, setting.value));\n        (await Promise.all(promises)).forEach((value, index) => {\n          if (value !== null && value !== void 0 && value.modifiedCount) {\n            void notifyOnSettingChangedById(settingsIds[index]._id);\n          }\n        });\n      }\n      getProgress() {\n        return this.progress;\n      }\n      /**\n       * Updates the progress step of this importer.\n       * It also changes some internal settings at various stages of the import.\n       * This way the importer can adjust user/room information at will.\n       *\n       * @param {ProgressStep} step The progress step which this import is currently at.\n       * @returns {ImporterProgress} The progress record of the import.\n       */\n      async updateProgress(step) {\n        this.progress.step = step;\n        this.logger.debug(\"\".concat(this.info.name, \" is now at \").concat(step, \".\"));\n        await this.updateRecord({\n          status: this.progress.step\n        });\n        // Do not send the default progress report during the preparing stage - the classes are sending their own report in a different format.\n        if (!ImportPreparingStartedStates.includes(this.progress.step)) {\n          this.reportProgress();\n        }\n        return this.progress;\n      }\n      reloadCount() {\n        var _this$importRecord$co, _this$importRecord$co2, _this$importRecord$co3;\n        this.progress.count.total = ((_this$importRecord$co = this.importRecord.count) === null || _this$importRecord$co === void 0 ? void 0 : _this$importRecord$co.total) || 0;\n        this.progress.count.completed = ((_this$importRecord$co2 = this.importRecord.count) === null || _this$importRecord$co2 === void 0 ? void 0 : _this$importRecord$co2.completed) || 0;\n        this.progress.count.error = ((_this$importRecord$co3 = this.importRecord.count) === null || _this$importRecord$co3 === void 0 ? void 0 : _this$importRecord$co3.error) || 0;\n      }\n      /**\n       * Adds the passed in value to the total amount of items needed to complete.\n       *\n       * @param {number} count The amount to add to the total count of items.\n       * @returns {ImporterProgress} The progress record of the import.\n       */\n      async addCountToTotal(count) {\n        this.progress.count.total += count;\n        await this.updateRecord({\n          'count.total': this.progress.count.total\n        });\n        return this.progress;\n      }\n      /**\n       * Adds the passed in value to the total amount of items completed.\n       *\n       * @param {number} count The amount to add to the total count of finished items.\n       * @returns {ImporterProgress} The progress record of the import.\n       */\n      async addCountCompleted(count) {\n        this.progress.count.completed += count;\n        return this.maybeUpdateRecord();\n      }\n      async addCountError(count) {\n        this.progress.count.error += count;\n        return this.maybeUpdateRecord();\n      }\n      async maybeUpdateRecord() {\n        // Only update the database every 500 messages (or 50 for users/channels)\n        // Or the completed is greater than or equal to the total amount\n        const count = this.progress.count.completed + this.progress.count.error;\n        const range = [ProgressStep.IMPORTING_USERS, ProgressStep.IMPORTING_CHANNELS].includes(this.progress.step) ? 50 : 500;\n        if (count % range === 0 || count >= this.progress.count.total || count - this._lastProgressReportTotal > range) {\n          this._lastProgressReportTotal = this.progress.count.completed + this.progress.count.error;\n          await this.updateRecord({\n            'count.completed': this.progress.count.completed,\n            'count.error': this.progress.count.error\n          });\n          this.reportProgress();\n        } else if (!this._reportProgressHandler) {\n          this._reportProgressHandler = setTimeout(() => {\n            this.reportProgress();\n          }, 250);\n        }\n        this.logger.log(\"\".concat(this.progress.count.completed, \" records imported, \").concat(this.progress.count.error, \" failed\"));\n        return this.progress;\n      }\n      /**\n       * Sends an updated progress to the websocket\n       */\n      reportProgress() {\n        if (this._reportProgressHandler) {\n          clearTimeout(this._reportProgressHandler);\n          this._reportProgressHandler = undefined;\n        }\n        ImporterWebsocket.progressUpdated(this.progress);\n      }\n      /**\n       * Updates the import record with the given fields being `set`.\n       */\n      async updateRecord(fields) {\n        if (!this.importRecord) {\n          return this.importRecord;\n        }\n        await Imports.update({\n          _id: this.importRecord._id\n        }, {\n          $set: fields\n        });\n        // #TODO: Remove need for the typecast\n        this.importRecord = await Imports.findOne(this.importRecord._id);\n        return this.importRecord;\n      }\n      async buildSelection() {\n        await this.updateProgress(ProgressStep.USER_SELECTION);\n        const users = await ImportData.getAllUsersForSelection();\n        const channels = await ImportData.getAllChannelsForSelection();\n        const hasDM = await ImportData.checkIfDirectMessagesExists();\n        const selectionUsers = users.map(u => new SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true));\n        const selectionChannels = channels.map(c => new SelectionChannel(c.data.importIds[0], c.data.name, Boolean(c.data.archived), true, c.data.t === 'p', c.data.t === 'd'));\n        const selectionMessages = await ImportData.countMessages();\n        if (hasDM) {\n          selectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, true));\n        }\n        const results = new Selection(this.info.name, selectionUsers, selectionChannels, selectionMessages);\n        return results;\n      }\n      /**\n       * Utility method to check if the passed in error is a `MongoServerError` with the `codeName` of `'CursorNotFound'`.\n       */\n      isCursorNotFoundError(error) {\n        return typeof error === 'object' && error !== null && 'codeName' in error && error.codeName === 'CursorNotFound';\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","Importer","api","Logger","Settings","ImportData","Imports","AdmZip","Selection","SelectionChannel","SelectionUser","notifyOnSettingChangedById","t","ProgressStep","ImportPreparingStartedStates","ImportDataConverter","ImporterProgress","ImporterWebsocket","__reifyWaitForDeps__","constructor","info","importRecord","converterOptions","arguments","length","undefined","_reportProgressHandler","converter","logger","oldSettings","_lastProgressReportTotal","progress","key","importer","Error","concat","name","step","status","reloadCount","debug","startFileUpload","fileName","contentType","updateProgress","UPLOADING","updateRecord","file","prepareUsingLocalFile","_fullFilePath","PREPARING_STARTED","startImport","importSelection","startedByUserId","IMPORTING_STARTED","started","Date","now","beforeImportFn","_ref","data","dataType","type","valid","abort","_importSelection$chan","_importSelection$chan2","_importSelection$chan3","_importSelection$chan4","channels","all","list","channelData","id","importIds","includes","_importSelection$user","_importSelection$user2","_importSelection$user3","users","userData","afterImportFn","addCountCompleted","afterImportAllMessagesFn","importedRoomIds","broadcast","roomIds","afterBatchFn","successCount","errorCount","addCountError","onErrorFn","process","nextTick","backupSettingValues","applySettingValues","IMPORTING_USERS","convertUsers","IMPORTING_CHANNELS","convertChannels","IMPORTING_MESSAGES","convertMessages","FINISHING","clearSuccessfullyImportedData","DONE","e","error","ERROR","timeTook","log","getProgress","_await$Settings$findO","_await$Settings$findO2","_await$Settings$findO3","_await$Settings$findO4","allowUsernameChange","findOneById","value","maxFileSize","mediaTypeWhiteList","mediaTypeBlackList","settingValues","_settingValues$allowU","_settingValues$maxFil","_settingValues$mediaT","_settingValues$mediaT2","settingsIds","_id","promises","map","setting","updateValueById","Promise","forEach","index","modifiedCount","reportProgress","_this$importRecord$co","_this$importRecord$co2","_this$importRecord$co3","count","total","completed","addCountToTotal","maybeUpdateRecord","range","setTimeout","clearTimeout","progressUpdated","fields","update","$set","findOne","buildSelection","USER_SELECTION","getAllUsersForSelection","getAllChannelsForSelection","hasDM","checkIfDirectMessagesExists","selectionUsers","u","username","emails","Boolean","deleted","selectionChannels","c","archived","selectionMessages","countMessages","push","results","isCursorNotFoundError","codeName","__reify_async_result__","_reifyError","self","async"],"sources":["app/importer/server/classes/Importer.ts"],"sourcesContent":["import { api } from '@rocket.chat/core-services';\nimport type {\n\tIImport,\n\tIImportRecord,\n\tIImportChannel,\n\tIImportUser,\n\tIImportProgress,\n\tIImporterShortSelection,\n} from '@rocket.chat/core-typings';\nimport { Logger } from '@rocket.chat/logger';\nimport { Settings, ImportData, Imports } from '@rocket.chat/models';\nimport AdmZip from 'adm-zip';\nimport type { MatchKeysAndValues, MongoServerError } from 'mongodb';\n\nimport { Selection, SelectionChannel, SelectionUser } from '..';\nimport { notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\nimport { t } from '../../../utils/lib/i18n';\nimport { ProgressStep, ImportPreparingStartedStates } from '../../lib/ImporterProgressStep';\nimport type { ImporterInfo } from '../definitions/ImporterInfo';\nimport { ImportDataConverter } from './ImportDataConverter';\nimport type { ConverterOptions } from './ImportDataConverter';\nimport { ImporterProgress } from './ImporterProgress';\nimport { ImporterWebsocket } from './ImporterWebsocket';\n\ntype OldSettings = {\n\tallowedDomainList?: string | null;\n\tallowUsernameChange?: boolean | null;\n\tmaxFileSize?: number | null;\n\tmediaTypeWhiteList?: string | null;\n\tmediaTypeBlackList?: string | null;\n};\n\n/**\n * Base class for all of the importers.\n */\nexport class Importer {\n\tprivate _reportProgressHandler: ReturnType<typeof setTimeout> | undefined;\n\n\tprotected AdmZip = AdmZip;\n\n\tprotected converter: ImportDataConverter;\n\n\tprotected info: ImporterInfo;\n\n\tprotected logger: Logger;\n\n\tprotected oldSettings: OldSettings;\n\n\tprotected _lastProgressReportTotal = 0;\n\n\tpublic importRecord: IImport;\n\n\tpublic progress: ImporterProgress;\n\n\tconstructor(info: ImporterInfo, importRecord: IImport, converterOptions: ConverterOptions = {}) {\n\t\tif (!info.key || !info.importer) {\n\t\t\tthrow new Error('Information passed in must be a valid ImporterInfo instance.');\n\t\t}\n\n\t\tthis.info = info;\n\t\tthis.logger = new Logger(`${this.info.name} Importer`);\n\n\t\tthis.converter = new ImportDataConverter(this.logger, converterOptions);\n\n\t\tthis.importRecord = importRecord;\n\t\tthis.progress = new ImporterProgress(this.info.key, this.info.name);\n\t\tthis.oldSettings = {};\n\n\t\tthis.progress.step = this.importRecord.status;\n\t\tthis._lastProgressReportTotal = 0;\n\t\tthis.reloadCount();\n\n\t\tthis.logger.debug(`Constructed a new ${this.info.name} Importer.`);\n\t}\n\n\t/**\n\t * Registers the file name and content type on the import operation\n\t */\n\tasync startFileUpload(fileName: string, contentType?: string): Promise<IImport> {\n\t\tawait this.updateProgress(ProgressStep.UPLOADING);\n\t\treturn this.updateRecord({ file: fileName, ...(contentType ? { contentType } : {}) });\n\t}\n\n\t/**\n\t * Takes the uploaded file and extracts the users, channels, and messages from it.\n\t *\n\t * @param {string} _fullFilePath the full path of the uploaded file\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync prepareUsingLocalFile(_fullFilePath: string): Promise<ImporterProgress> {\n\t\treturn this.updateProgress(ProgressStep.PREPARING_STARTED);\n\t}\n\n\t/**\n\t * Starts the import process. The implementing method should defer\n\t * as soon as the selection is set, so the user who started the process\n\t * doesn't end up with a \"locked\" UI while Meteor waits for a response.\n\t * The returned object should be the progress.\n\t *\n\t * @param {IImporterShortSelection} importSelection The selection data.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync startImport(importSelection: IImporterShortSelection, startedByUserId: string): Promise<ImporterProgress> {\n\t\tawait this.updateProgress(ProgressStep.IMPORTING_STARTED);\n\t\tthis.reloadCount();\n\t\tconst started = Date.now();\n\n\t\tconst beforeImportFn = async ({ data, dataType: type }: IImportRecord) => {\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'channel': {\n\t\t\t\t\tif (importSelection.channels?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.channels?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst channelData = data as IImportChannel;\n\n\t\t\t\t\tconst id = channelData.t === 'd' ? '__directMessages__' : channelData.importIds[0];\n\t\t\t\t\treturn importSelection.channels.list?.includes(id);\n\t\t\t\t}\n\t\t\t\tcase 'user': {\n\t\t\t\t\tif (importSelection.users?.all) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (!importSelection.users?.list?.length) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst userData = data as IImportUser;\n\t\t\t\t\tconst id = userData.importIds[0];\n\t\t\t\t\treturn importSelection.users.list.includes(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst afterImportFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst afterImportAllMessagesFn = async (importedRoomIds: string[]): Promise<void> =>\n\t\t\tapi.broadcast('notify.importedMessages', { roomIds: importedRoomIds });\n\n\t\tconst afterBatchFn = async (successCount: number, errorCount: number) => {\n\t\t\tif (successCount) {\n\t\t\t\tawait this.addCountCompleted(successCount);\n\t\t\t}\n\t\t\tif (errorCount) {\n\t\t\t\tawait this.addCountError(errorCount);\n\t\t\t}\n\n\t\t\tif (this.importRecord.valid === false) {\n\t\t\t\tthis.converter.abort();\n\t\t\t\tthrow new Error('The import operation is no longer valid.');\n\t\t\t}\n\t\t};\n\n\t\tconst onErrorFn = async () => {\n\t\t\tawait this.addCountCompleted(1);\n\t\t};\n\n\t\tprocess.nextTick(async () => {\n\t\t\tawait this.backupSettingValues();\n\n\t\t\ttry {\n\t\t\t\tawait this.applySettingValues({});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_USERS);\n\t\t\t\tawait this.converter.convertUsers({ beforeImportFn, afterImportFn, onErrorFn, afterBatchFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tawait this.converter.convertChannels(startedByUserId, { beforeImportFn, afterImportFn, onErrorFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tawait this.converter.convertMessages({ afterImportFn, onErrorFn, afterImportAllMessagesFn });\n\n\t\t\t\tawait this.updateProgress(ProgressStep.FINISHING);\n\n\t\t\t\tprocess.nextTick(async () => {\n\t\t\t\t\tawait this.converter.clearSuccessfullyImportedData();\n\t\t\t\t});\n\n\t\t\t\tawait this.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tawait this.updateProgress(ProgressStep.ERROR);\n\t\t\t} finally {\n\t\t\t\tawait this.applySettingValues(this.oldSettings);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`Import took ${timeTook} milliseconds.`);\n\t\t});\n\n\t\treturn this.getProgress();\n\t}\n\n\tasync backupSettingValues() {\n\t\tconst allowUsernameChange = (await Settings.findOneById('Accounts_AllowUsernameChange'))?.value as boolean | null;\n\t\tconst maxFileSize = (await Settings.findOneById('FileUpload_MaxFileSize'))?.value as number | null;\n\t\tconst mediaTypeWhiteList = (await Settings.findOneById('FileUpload_MediaTypeWhiteList'))?.value as string | null;\n\t\tconst mediaTypeBlackList = (await Settings.findOneById('FileUpload_MediaTypeBlackList'))?.value as string | null;\n\n\t\tthis.oldSettings = {\n\t\t\tallowUsernameChange,\n\t\t\tmaxFileSize,\n\t\t\tmediaTypeWhiteList,\n\t\t\tmediaTypeBlackList,\n\t\t};\n\t}\n\n\tasync applySettingValues(settingValues: OldSettings) {\n\t\tconst settingsIds = [\n\t\t\t{ _id: 'Accounts_AllowUsernameChange', value: settingValues.allowUsernameChange ?? true },\n\t\t\t{ _id: 'FileUpload_MaxFileSize', value: settingValues.maxFileSize ?? -1 },\n\t\t\t{ _id: 'FileUpload_MediaTypeWhiteList', value: settingValues.mediaTypeWhiteList ?? '*' },\n\t\t\t{ _id: 'FileUpload_MediaTypeBlackList', value: settingValues.mediaTypeBlackList ?? '' },\n\t\t];\n\n\t\tconst promises = settingsIds.map((setting) => Settings.updateValueById(setting._id, setting.value));\n\n\t\t(await Promise.all(promises)).forEach((value, index) => {\n\t\t\tif (value?.modifiedCount) {\n\t\t\t\tvoid notifyOnSettingChangedById(settingsIds[index]._id);\n\t\t\t}\n\t\t});\n\t}\n\n\tgetProgress(): ImporterProgress {\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Updates the progress step of this importer.\n\t * It also changes some internal settings at various stages of the import.\n\t * This way the importer can adjust user/room information at will.\n\t *\n\t * @param {ProgressStep} step The progress step which this import is currently at.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync updateProgress(step: IImportProgress['step']): Promise<ImporterProgress> {\n\t\tthis.progress.step = step;\n\n\t\tthis.logger.debug(`${this.info.name} is now at ${step}.`);\n\t\tawait this.updateRecord({ status: this.progress.step });\n\n\t\t// Do not send the default progress report during the preparing stage - the classes are sending their own report in a different format.\n\t\tif (!ImportPreparingStartedStates.includes(this.progress.step)) {\n\t\t\tthis.reportProgress();\n\t\t}\n\n\t\treturn this.progress;\n\t}\n\n\treloadCount() {\n\t\tthis.progress.count.total = this.importRecord.count?.total || 0;\n\t\tthis.progress.count.completed = this.importRecord.count?.completed || 0;\n\t\tthis.progress.count.error = this.importRecord.count?.error || 0;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items needed to complete.\n\t *\n\t * @param {number} count The amount to add to the total count of items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountToTotal(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.total += count;\n\t\tawait this.updateRecord({ 'count.total': this.progress.count.total });\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Adds the passed in value to the total amount of items completed.\n\t *\n\t * @param {number} count The amount to add to the total count of finished items.\n\t * @returns {ImporterProgress} The progress record of the import.\n\t */\n\tasync addCountCompleted(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.completed += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync addCountError(count: number): Promise<ImporterProgress> {\n\t\tthis.progress.count.error += count;\n\n\t\treturn this.maybeUpdateRecord();\n\t}\n\n\tasync maybeUpdateRecord() {\n\t\t// Only update the database every 500 messages (or 50 for users/channels)\n\t\t// Or the completed is greater than or equal to the total amount\n\t\tconst count = this.progress.count.completed + this.progress.count.error;\n\t\tconst range = ([ProgressStep.IMPORTING_USERS, ProgressStep.IMPORTING_CHANNELS] as IImportProgress['step'][]).includes(\n\t\t\tthis.progress.step,\n\t\t)\n\t\t\t? 50\n\t\t\t: 500;\n\n\t\tif (count % range === 0 || count >= this.progress.count.total || count - this._lastProgressReportTotal > range) {\n\t\t\tthis._lastProgressReportTotal = this.progress.count.completed + this.progress.count.error;\n\t\t\tawait this.updateRecord({ 'count.completed': this.progress.count.completed, 'count.error': this.progress.count.error });\n\t\t\tthis.reportProgress();\n\t\t} else if (!this._reportProgressHandler) {\n\t\t\tthis._reportProgressHandler = setTimeout(() => {\n\t\t\t\tthis.reportProgress();\n\t\t\t}, 250);\n\t\t}\n\n\t\tthis.logger.log(`${this.progress.count.completed} records imported, ${this.progress.count.error} failed`);\n\n\t\treturn this.progress;\n\t}\n\n\t/**\n\t * Sends an updated progress to the websocket\n\t */\n\treportProgress() {\n\t\tif (this._reportProgressHandler) {\n\t\t\tclearTimeout(this._reportProgressHandler);\n\t\t\tthis._reportProgressHandler = undefined;\n\t\t}\n\t\tImporterWebsocket.progressUpdated(this.progress);\n\t}\n\n\t/**\n\t * Updates the import record with the given fields being `set`.\n\t */\n\tasync updateRecord(fields: MatchKeysAndValues<IImport>): Promise<IImport> {\n\t\tif (!this.importRecord) {\n\t\t\treturn this.importRecord;\n\t\t}\n\n\t\tawait Imports.update({ _id: this.importRecord._id }, { $set: fields });\n\t\t// #TODO: Remove need for the typecast\n\t\tthis.importRecord = (await Imports.findOne(this.importRecord._id)) as IImport;\n\n\t\treturn this.importRecord;\n\t}\n\n\tasync buildSelection(): Promise<Selection> {\n\t\tawait this.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\tconst users = await ImportData.getAllUsersForSelection();\n\t\tconst channels = await ImportData.getAllChannelsForSelection();\n\t\tconst hasDM = await ImportData.checkIfDirectMessagesExists();\n\n\t\tconst selectionUsers = users.map(\n\t\t\t(u) =>\n\t\t\t\tnew SelectionUser(u.data.importIds[0], u.data.username, u.data.emails[0], Boolean(u.data.deleted), u.data.type === 'bot', true),\n\t\t);\n\t\tconst selectionChannels = channels.map(\n\t\t\t(c) => new SelectionChannel(c.data.importIds[0], c.data.name, Boolean(c.data.archived), true, c.data.t === 'p', c.data.t === 'd'),\n\t\t);\n\t\tconst selectionMessages = await ImportData.countMessages();\n\n\t\tif (hasDM) {\n\t\t\tselectionChannels.push(new SelectionChannel('__directMessages__', t('Direct_Messages'), false, true, true, true));\n\t\t}\n\n\t\tconst results = new Selection(this.info.name, selectionUsers, selectionChannels, selectionMessages);\n\n\t\treturn results;\n\t}\n\n\t/**\n\t * Utility method to check if the passed in error is a `MongoServerError` with the `codeName` of `'CursorNotFound'`.\n\t */\n\tprotected isCursorNotFoundError(error: unknown): error is MongoServerError & { codeName: 'CursorNotFound' } {\n\t\treturn typeof error === 'object' && error !== null && 'codeName' in error && error.codeName === 'CursorNotFound';\n\t}\n}\n"],"mappings":";;;IAAA,IAAAA,aAAc;IAAAC,MAAM,CAAAC,IAAA,uCAA6B;MAAAC,QAAAC,CAAA;QAAAJ,aAAA,GAAAI,CAAA;MAAA;IAAA;IAAjDH,MAAA,CAAOI,MAAK,CAAE;MAAAC,QAAM,EAAAA,CAAA,KAAAA;IAAA;IAAA,IAAAC,GAAA;IAAAN,MAA6B,CAAAC,IAAA;MAAAK,IAAAH,CAAA;QAAAG,GAAA,GAAAH,CAAA;MAAA;IAAA;IAAA,IAAAI,MAAA;IAAAP,MAAA,CAAAC,IAAA;MAAAM,OAAAJ,CAAA;QAAAI,MAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,QAAA,EAAAC,UAAA,EAAAC,OAAA;IAAAV,MAAA,CAAAC,IAAA;MAAAO,SAAAL,CAAA;QAAAK,QAAA,GAAAL,CAAA;MAAA;MAAAM,WAAAN,CAAA;QAAAM,UAAA,GAAAN,CAAA;MAAA;MAAAO,QAAAP,CAAA;QAAAO,OAAA,GAAAP,CAAA;MAAA;IAAA;IAAA,IAAAQ,MAAA;IAAAX,MAAA,CAAAC,IAAA;MAAAC,QAAAC,CAAA;QAAAQ,MAAA,GAAAR,CAAA;MAAA;IAAA;IAAA,IAAAS,SAAA,EAAAC,gBAAA,EAAAC,aAAA;IAAAd,MAAA,CAAAC,IAAA;MAAAW,UAAAT,CAAA;QAAAS,SAAA,GAAAT,CAAA;MAAA;MAAAU,iBAAAV,CAAA;QAAAU,gBAAA,GAAAV,CAAA;MAAA;MAAAW,cAAAX,CAAA;QAAAW,aAAA,GAAAX,CAAA;MAAA;IAAA;IAAA,IAAAY,0BAAA;IAAAf,MAAA,CAAAC,IAAA;MAAAc,2BAAAZ,CAAA;QAAAY,0BAAA,GAAAZ,CAAA;MAAA;IAAA;IAAA,IAAAa,CAAA;IAAAhB,MAAA,CAAAC,IAAA;MAAAe,EAAAb,CAAA;QAAAa,CAAA,GAAAb,CAAA;MAAA;IAAA;IAAA,IAAAc,YAAA,EAAAC,4BAAA;IAAAlB,MAAA,CAAAC,IAAA;MAAAgB,aAAAd,CAAA;QAAAc,YAAA,GAAAd,CAAA;MAAA;MAAAe,6BAAAf,CAAA;QAAAe,4BAAA,GAAAf,CAAA;MAAA;IAAA;IAAA,IAAAgB,mBAAA;IAAAnB,MAAA,CAAAC,IAAA;MAAAkB,oBAAAhB,CAAA;QAAAgB,mBAAA,GAAAhB,CAAA;MAAA;IAAA;IAAA,IAAAiB,gBAAA;IAAApB,MAAA,CAAAC,IAAA;MAAAmB,iBAAAjB,CAAA;QAAAiB,gBAAA,GAAAjB,CAAA;MAAA;IAAA;IAAA,IAAAkB,iBAAA;IAAArB,MAAA,CAAAC,IAAA;MAAAoB,kBAAAlB,CAAA;QAAAkB,iBAAA,GAAAlB,CAAA;MAAA;IAAA;IAAA,IAAAmB,oBAAA,WAAAA,oBAAA;IAmC3C,MAAOjB,QAAQ;MAmBpBkB,YAAYC,IAAkB,EAAEC,YAAqB,EAAyC;QAAA,IAAvCC,gBAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqC,EAAE;QAAA,KAlBtFG,sBAAsB;QAAA,KAEpBnB,MAAM,GAAGA,MAAM;QAAA,KAEfoB,SAAS;QAAA,KAETP,IAAI;QAAA,KAEJQ,MAAM;QAAA,KAENC,WAAW;QAAA,KAEXC,wBAAwB,GAAG,CAAC;QAAA,KAE/BT,YAAY;QAAA,KAEZU,QAAQ;QAGd,IAAI,CAACX,IAAI,CAACY,GAAG,IAAI,CAACZ,IAAI,CAACa,QAAQ,EAAE;UAChC,MAAM,IAAIC,KAAK,CAAC,8DAA8D,CAAC;QAChF;QAEA,IAAI,CAACd,IAAI,GAAGA,IAAI;QAChB,IAAI,CAACQ,MAAM,GAAG,IAAIzB,MAAM,IAAAgC,MAAA,CAAI,IAAI,CAACf,IAAI,CAACgB,IAAI,cAAW,CAAC;QAEtD,IAAI,CAACT,SAAS,GAAG,IAAIZ,mBAAmB,CAAC,IAAI,CAACa,MAAM,EAAEN,gBAAgB,CAAC;QAEvE,IAAI,CAACD,YAAY,GAAGA,YAAY;QAChC,IAAI,CAACU,QAAQ,GAAG,IAAIf,gBAAgB,CAAC,IAAI,CAACI,IAAI,CAACY,GAAG,EAAE,IAAI,CAACZ,IAAI,CAACgB,IAAI,CAAC;QACnE,IAAI,CAACP,WAAW,GAAG,EAAE;QAErB,IAAI,CAACE,QAAQ,CAACM,IAAI,GAAG,IAAI,CAAChB,YAAY,CAACiB,MAAM;QAC7C,IAAI,CAACR,wBAAwB,GAAG,CAAC;QACjC,IAAI,CAACS,WAAW,EAAE;QAElB,IAAI,CAACX,MAAM,CAACY,KAAK,sBAAAL,MAAA,CAAsB,IAAI,CAACf,IAAI,CAACgB,IAAI,eAAY,CAAC;MACnE;MAEA;;;MAGA,MAAMK,eAAeA,CAACC,QAAgB,EAAEC,WAAoB;QAC3D,MAAM,IAAI,CAACC,cAAc,CAAC/B,YAAY,CAACgC,SAAS,CAAC;QACjD,OAAO,IAAI,CAACC,YAAY,CAAAnD,aAAA;UAAGoD,IAAI,EAAEL;QAAQ,GAAMC,WAAW,GAAG;UAAEA;QAAW,CAAE,GAAG,EAAE,CAAG,CAAC;MACtF;MAEA;;;;;;MAMA,MAAMK,qBAAqBA,CAACC,aAAqB;QAChD,OAAO,IAAI,CAACL,cAAc,CAAC/B,YAAY,CAACqC,iBAAiB,CAAC;MAC3D;MAEA;;;;;;;;;MASA,MAAMC,WAAWA,CAACC,eAAwC,EAAEC,eAAuB;QAClF,MAAM,IAAI,CAACT,cAAc,CAAC/B,YAAY,CAACyC,iBAAiB,CAAC;QACzD,IAAI,CAACf,WAAW,EAAE;QAClB,MAAMgB,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE;QAE1B,MAAMC,cAAc,GAAG,MAAAC,IAAA,IAAkD;UAAA,IAA3C;YAAEC,IAAI;YAAEC,QAAQ,EAAEC;UAAI,CAAiB,GAAAH,IAAA;UACpE,IAAI,IAAI,CAACtC,YAAY,CAAC0C,KAAK,KAAK,KAAK,EAAE;YACtC,IAAI,CAACpC,SAAS,CAACqC,KAAK,EAAE;YACtB,MAAM,IAAI9B,KAAK,CAAC,0CAA0C,CAAC;UAC5D;UAEA,QAAQ4B,IAAI;YACX,KAAK,SAAS;cAAE;gBAAA,IAAAG,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;gBACf,KAAAH,qBAAA,GAAIb,eAAe,CAACiB,QAAQ,cAAAJ,qBAAA,eAAxBA,qBAAA,CAA0BK,GAAG,EAAE;kBAClC,OAAO,IAAI;gBACZ;gBACA,IAAI,GAAAJ,sBAAA,GAACd,eAAe,CAACiB,QAAQ,cAAAH,sBAAA,gBAAAC,sBAAA,GAAxBD,sBAAA,CAA0BK,IAAI,cAAAJ,sBAAA,eAA9BA,sBAAA,CAAgC3C,MAAM,GAAE;kBAC5C,OAAO,KAAK;gBACb;gBAEA,MAAMgD,WAAW,GAAGZ,IAAsB;gBAE1C,MAAMa,EAAE,GAAGD,WAAW,CAAC5D,CAAC,KAAK,GAAG,GAAG,oBAAoB,GAAG4D,WAAW,CAACE,SAAS,CAAC,CAAC,CAAC;gBAClF,QAAAN,sBAAA,GAAOhB,eAAe,CAACiB,QAAQ,CAACE,IAAI,cAAAH,sBAAA,uBAA7BA,sBAAA,CAA+BO,QAAQ,CAACF,EAAE,CAAC;cACnD;YACA,KAAK,MAAM;cAAE;gBAAA,IAAAG,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;gBACZ,KAAAF,qBAAA,GAAIxB,eAAe,CAAC2B,KAAK,cAAAH,qBAAA,eAArBA,qBAAA,CAAuBN,GAAG,EAAE;kBAC/B,OAAO,IAAI;gBACZ;gBACA,IAAI,GAAAO,sBAAA,GAACzB,eAAe,CAAC2B,KAAK,cAAAF,sBAAA,gBAAAC,sBAAA,GAArBD,sBAAA,CAAuBN,IAAI,cAAAO,sBAAA,eAA3BA,sBAAA,CAA6BtD,MAAM,GAAE;kBACzC,OAAO,KAAK;gBACb;gBAEA,MAAMwD,QAAQ,GAAGpB,IAAmB;gBACpC,MAAMa,EAAE,GAAGO,QAAQ,CAACN,SAAS,CAAC,CAAC,CAAC;gBAChC,OAAOtB,eAAe,CAAC2B,KAAK,CAACR,IAAI,CAACI,QAAQ,CAACF,EAAE,CAAC;cAC/C;UACD;UAEA,OAAO,KAAK;QACb,CAAC;QAED,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAW;UAChC,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAC;UAE/B,IAAI,IAAI,CAAC7D,YAAY,CAAC0C,KAAK,KAAK,KAAK,EAAE;YACtC,IAAI,CAACpC,SAAS,CAACqC,KAAK,EAAE;YACtB,MAAM,IAAI9B,KAAK,CAAC,0CAA0C,CAAC;UAC5D;QACD,CAAC;QAED,MAAMiD,wBAAwB,GAAG,MAAOC,eAAyB,IAChElF,GAAG,CAACmF,SAAS,CAAC,yBAAyB,EAAE;UAAEC,OAAO,EAAEF;QAAe,CAAE,CAAC;QAEvE,MAAMG,YAAY,GAAG,MAAAA,CAAOC,YAAoB,EAAEC,UAAkB,KAAI;UACvE,IAAID,YAAY,EAAE;YACjB,MAAM,IAAI,CAACN,iBAAiB,CAACM,YAAY,CAAC;UAC3C;UACA,IAAIC,UAAU,EAAE;YACf,MAAM,IAAI,CAACC,aAAa,CAACD,UAAU,CAAC;UACrC;UAEA,IAAI,IAAI,CAACpE,YAAY,CAAC0C,KAAK,KAAK,KAAK,EAAE;YACtC,IAAI,CAACpC,SAAS,CAACqC,KAAK,EAAE;YACtB,MAAM,IAAI9B,KAAK,CAAC,0CAA0C,CAAC;UAC5D;QACD,CAAC;QAED,MAAMyD,SAAS,GAAG,MAAAA,CAAA,KAAW;UAC5B,MAAM,IAAI,CAACT,iBAAiB,CAAC,CAAC,CAAC;QAChC,CAAC;QAEDU,OAAO,CAACC,QAAQ,CAAC,YAAW;UAC3B,MAAM,IAAI,CAACC,mBAAmB,EAAE;UAEhC,IAAI;YACH,MAAM,IAAI,CAACC,kBAAkB,CAAC,EAAE,CAAC;YAEjC,MAAM,IAAI,CAACnD,cAAc,CAAC/B,YAAY,CAACmF,eAAe,CAAC;YACvD,MAAM,IAAI,CAACrE,SAAS,CAACsE,YAAY,CAAC;cAAEvC,cAAc;cAAEuB,aAAa;cAAEU,SAAS;cAAEJ;YAAY,CAAE,CAAC;YAE7F,MAAM,IAAI,CAAC3C,cAAc,CAAC/B,YAAY,CAACqF,kBAAkB,CAAC;YAC1D,MAAM,IAAI,CAACvE,SAAS,CAACwE,eAAe,CAAC9C,eAAe,EAAE;cAAEK,cAAc;cAAEuB,aAAa;cAAEU;YAAS,CAAE,CAAC;YAEnG,MAAM,IAAI,CAAC/C,cAAc,CAAC/B,YAAY,CAACuF,kBAAkB,CAAC;YAC1D,MAAM,IAAI,CAACzE,SAAS,CAAC0E,eAAe,CAAC;cAAEpB,aAAa;cAAEU,SAAS;cAAER;YAAwB,CAAE,CAAC;YAE5F,MAAM,IAAI,CAACvC,cAAc,CAAC/B,YAAY,CAACyF,SAAS,CAAC;YAEjDV,OAAO,CAACC,QAAQ,CAAC,YAAW;cAC3B,MAAM,IAAI,CAAClE,SAAS,CAAC4E,6BAA6B,EAAE;YACrD,CAAC,CAAC;YAEF,MAAM,IAAI,CAAC3D,cAAc,CAAC/B,YAAY,CAAC2F,IAAI,CAAC;UAC7C,CAAC,CAAC,OAAOC,CAAC,EAAE;YACX,IAAI,CAAC7E,MAAM,CAAC8E,KAAK,CAACD,CAAC,CAAC;YACpB,MAAM,IAAI,CAAC7D,cAAc,CAAC/B,YAAY,CAAC8F,KAAK,CAAC;UAC9C,CAAC,SAAS;YACT,MAAM,IAAI,CAACZ,kBAAkB,CAAC,IAAI,CAAClE,WAAW,CAAC;UAChD;UAEA,MAAM+E,QAAQ,GAAGpD,IAAI,CAACC,GAAG,EAAE,GAAGF,OAAO;UACrC,IAAI,CAAC3B,MAAM,CAACiF,GAAG,gBAAA1E,MAAA,CAAgByE,QAAQ,mBAAgB,CAAC;QACzD,CAAC,CAAC;QAEF,OAAO,IAAI,CAACE,WAAW,EAAE;MAC1B;MAEA,MAAMhB,mBAAmBA,CAAA;QAAA,IAAAiB,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QACxB,MAAMC,mBAAmB,IAAAJ,qBAAA,GAAI,MAAM3G,QAAQ,CAACgH,WAAW,CAAC,8BAA8B,CAAC,cAAAL,qBAAA,uBAA3DA,qBAAA,CAA8DM,KAAuB;QACjH,MAAMC,WAAW,IAAAN,sBAAA,GAAI,MAAM5G,QAAQ,CAACgH,WAAW,CAAC,wBAAwB,CAAC,cAAAJ,sBAAA,uBAArDA,sBAAA,CAAwDK,KAAsB;QAClG,MAAME,kBAAkB,IAAAN,sBAAA,GAAI,MAAM7G,QAAQ,CAACgH,WAAW,CAAC,+BAA+B,CAAC,cAAAH,sBAAA,uBAA5DA,sBAAA,CAA+DI,KAAsB;QAChH,MAAMG,kBAAkB,IAAAN,sBAAA,GAAI,MAAM9G,QAAQ,CAACgH,WAAW,CAAC,+BAA+B,CAAC,cAAAF,sBAAA,uBAA5DA,sBAAA,CAA+DG,KAAsB;QAEhH,IAAI,CAACxF,WAAW,GAAG;UAClBsF,mBAAmB;UACnBG,WAAW;UACXC,kBAAkB;UAClBC;SACA;MACF;MAEA,MAAMzB,kBAAkBA,CAAC0B,aAA0B;QAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QAClD,MAAMC,WAAW,GAAG,CACnB;UAAEC,GAAG,EAAE,8BAA8B;UAAEV,KAAK,GAAAK,qBAAA,GAAED,aAAa,CAACN,mBAAmB,cAAAO,qBAAA,cAAAA,qBAAA,GAAI;QAAI,CAAE,EACzF;UAAEK,GAAG,EAAE,wBAAwB;UAAEV,KAAK,GAAAM,qBAAA,GAAEF,aAAa,CAACH,WAAW,cAAAK,qBAAA,cAAAA,qBAAA,GAAI,CAAC;QAAC,CAAE,EACzE;UAAEI,GAAG,EAAE,+BAA+B;UAAEV,KAAK,GAAAO,qBAAA,GAAEH,aAAa,CAACF,kBAAkB,cAAAK,qBAAA,cAAAA,qBAAA,GAAI;QAAG,CAAE,EACxF;UAAEG,GAAG,EAAE,+BAA+B;UAAEV,KAAK,GAAAQ,sBAAA,GAAEJ,aAAa,CAACD,kBAAkB,cAAAK,sBAAA,cAAAA,sBAAA,GAAI;QAAE,CAAE,CACvF;QAED,MAAMG,QAAQ,GAAGF,WAAW,CAACG,GAAG,CAAEC,OAAO,IAAK9H,QAAQ,CAAC+H,eAAe,CAACD,OAAO,CAACH,GAAG,EAAEG,OAAO,CAACb,KAAK,CAAC,CAAC;QAEnG,CAAC,MAAMe,OAAO,CAAC9D,GAAG,CAAC0D,QAAQ,CAAC,EAAEK,OAAO,CAAC,CAAChB,KAAK,EAAEiB,KAAK,KAAI;UACtD,IAAIjB,KAAK,aAALA,KAAK,eAALA,KAAK,CAAEkB,aAAa,EAAE;YACzB,KAAK5H,0BAA0B,CAACmH,WAAW,CAACQ,KAAK,CAAC,CAACP,GAAG,CAAC;UACxD;QACD,CAAC,CAAC;MACH;MAEAjB,WAAWA,CAAA;QACV,OAAO,IAAI,CAAC/E,QAAQ;MACrB;MAEA;;;;;;;;MAQA,MAAMa,cAAcA,CAACP,IAA6B;QACjD,IAAI,CAACN,QAAQ,CAACM,IAAI,GAAGA,IAAI;QAEzB,IAAI,CAACT,MAAM,CAACY,KAAK,IAAAL,MAAA,CAAI,IAAI,CAACf,IAAI,CAACgB,IAAI,iBAAAD,MAAA,CAAcE,IAAI,MAAG,CAAC;QACzD,MAAM,IAAI,CAACS,YAAY,CAAC;UAAER,MAAM,EAAE,IAAI,CAACP,QAAQ,CAACM;QAAI,CAAE,CAAC;QAEvD;QACA,IAAI,CAACvB,4BAA4B,CAAC6D,QAAQ,CAAC,IAAI,CAAC5C,QAAQ,CAACM,IAAI,CAAC,EAAE;UAC/D,IAAI,CAACmG,cAAc,EAAE;QACtB;QAEA,OAAO,IAAI,CAACzG,QAAQ;MACrB;MAEAQ,WAAWA,CAAA;QAAA,IAAAkG,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;QACV,IAAI,CAAC5G,QAAQ,CAAC6G,KAAK,CAACC,KAAK,GAAG,EAAAJ,qBAAA,OAAI,CAACpH,YAAY,CAACuH,KAAK,cAAAH,qBAAA,uBAAvBA,qBAAA,CAAyBI,KAAK,KAAI,CAAC;QAC/D,IAAI,CAAC9G,QAAQ,CAAC6G,KAAK,CAACE,SAAS,GAAG,EAAAJ,sBAAA,OAAI,CAACrH,YAAY,CAACuH,KAAK,cAAAF,sBAAA,uBAAvBA,sBAAA,CAAyBI,SAAS,KAAI,CAAC;QACvE,IAAI,CAAC/G,QAAQ,CAAC6G,KAAK,CAAClC,KAAK,GAAG,EAAAiC,sBAAA,OAAI,CAACtH,YAAY,CAACuH,KAAK,cAAAD,sBAAA,uBAAvBA,sBAAA,CAAyBjC,KAAK,KAAI,CAAC;MAChE;MAEA;;;;;;MAMA,MAAMqC,eAAeA,CAACH,KAAa;QAClC,IAAI,CAAC7G,QAAQ,CAAC6G,KAAK,CAACC,KAAK,IAAID,KAAK;QAClC,MAAM,IAAI,CAAC9F,YAAY,CAAC;UAAE,aAAa,EAAE,IAAI,CAACf,QAAQ,CAAC6G,KAAK,CAACC;QAAK,CAAE,CAAC;QAErE,OAAO,IAAI,CAAC9G,QAAQ;MACrB;MAEA;;;;;;MAMA,MAAMmD,iBAAiBA,CAAC0D,KAAa;QACpC,IAAI,CAAC7G,QAAQ,CAAC6G,KAAK,CAACE,SAAS,IAAIF,KAAK;QAEtC,OAAO,IAAI,CAACI,iBAAiB,EAAE;MAChC;MAEA,MAAMtD,aAAaA,CAACkD,KAAa;QAChC,IAAI,CAAC7G,QAAQ,CAAC6G,KAAK,CAAClC,KAAK,IAAIkC,KAAK;QAElC,OAAO,IAAI,CAACI,iBAAiB,EAAE;MAChC;MAEA,MAAMA,iBAAiBA,CAAA;QACtB;QACA;QACA,MAAMJ,KAAK,GAAG,IAAI,CAAC7G,QAAQ,CAAC6G,KAAK,CAACE,SAAS,GAAG,IAAI,CAAC/G,QAAQ,CAAC6G,KAAK,CAAClC,KAAK;QACvE,MAAMuC,KAAK,GAAI,CAACpI,YAAY,CAACmF,eAAe,EAAEnF,YAAY,CAACqF,kBAAkB,CAA+B,CAACvB,QAAQ,CACpH,IAAI,CAAC5C,QAAQ,CAACM,IAAI,CAClB,GACE,EAAE,GACF,GAAG;QAEN,IAAIuG,KAAK,GAAGK,KAAK,KAAK,CAAC,IAAIL,KAAK,IAAI,IAAI,CAAC7G,QAAQ,CAAC6G,KAAK,CAACC,KAAK,IAAID,KAAK,GAAG,IAAI,CAAC9G,wBAAwB,GAAGmH,KAAK,EAAE;UAC/G,IAAI,CAACnH,wBAAwB,GAAG,IAAI,CAACC,QAAQ,CAAC6G,KAAK,CAACE,SAAS,GAAG,IAAI,CAAC/G,QAAQ,CAAC6G,KAAK,CAAClC,KAAK;UACzF,MAAM,IAAI,CAAC5D,YAAY,CAAC;YAAE,iBAAiB,EAAE,IAAI,CAACf,QAAQ,CAAC6G,KAAK,CAACE,SAAS;YAAE,aAAa,EAAE,IAAI,CAAC/G,QAAQ,CAAC6G,KAAK,CAAClC;UAAK,CAAE,CAAC;UACvH,IAAI,CAAC8B,cAAc,EAAE;QACtB,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC9G,sBAAsB,EAAE;UACxC,IAAI,CAACA,sBAAsB,GAAGwH,UAAU,CAAC,MAAK;YAC7C,IAAI,CAACV,cAAc,EAAE;UACtB,CAAC,EAAE,GAAG,CAAC;QACR;QAEA,IAAI,CAAC5G,MAAM,CAACiF,GAAG,IAAA1E,MAAA,CAAI,IAAI,CAACJ,QAAQ,CAAC6G,KAAK,CAACE,SAAS,yBAAA3G,MAAA,CAAsB,IAAI,CAACJ,QAAQ,CAAC6G,KAAK,CAAClC,KAAK,YAAS,CAAC;QAEzG,OAAO,IAAI,CAAC3E,QAAQ;MACrB;MAEA;;;MAGAyG,cAAcA,CAAA;QACb,IAAI,IAAI,CAAC9G,sBAAsB,EAAE;UAChCyH,YAAY,CAAC,IAAI,CAACzH,sBAAsB,CAAC;UACzC,IAAI,CAACA,sBAAsB,GAAGD,SAAS;QACxC;QACAR,iBAAiB,CAACmI,eAAe,CAAC,IAAI,CAACrH,QAAQ,CAAC;MACjD;MAEA;;;MAGA,MAAMe,YAAYA,CAACuG,MAAmC;QACrD,IAAI,CAAC,IAAI,CAAChI,YAAY,EAAE;UACvB,OAAO,IAAI,CAACA,YAAY;QACzB;QAEA,MAAMf,OAAO,CAACgJ,MAAM,CAAC;UAAEvB,GAAG,EAAE,IAAI,CAAC1G,YAAY,CAAC0G;QAAG,CAAE,EAAE;UAAEwB,IAAI,EAAEF;QAAM,CAAE,CAAC;QACtE;QACA,IAAI,CAAChI,YAAY,GAAI,MAAMf,OAAO,CAACkJ,OAAO,CAAC,IAAI,CAACnI,YAAY,CAAC0G,GAAG,CAAa;QAE7E,OAAO,IAAI,CAAC1G,YAAY;MACzB;MAEA,MAAMoI,cAAcA,CAAA;QACnB,MAAM,IAAI,CAAC7G,cAAc,CAAC/B,YAAY,CAAC6I,cAAc,CAAC;QAEtD,MAAM3E,KAAK,GAAG,MAAM1E,UAAU,CAACsJ,uBAAuB,EAAE;QACxD,MAAMtF,QAAQ,GAAG,MAAMhE,UAAU,CAACuJ,0BAA0B,EAAE;QAC9D,MAAMC,KAAK,GAAG,MAAMxJ,UAAU,CAACyJ,2BAA2B,EAAE;QAE5D,MAAMC,cAAc,GAAGhF,KAAK,CAACkD,GAAG,CAC9B+B,CAAC,IACD,IAAItJ,aAAa,CAACsJ,CAAC,CAACpG,IAAI,CAACc,SAAS,CAAC,CAAC,CAAC,EAAEsF,CAAC,CAACpG,IAAI,CAACqG,QAAQ,EAAED,CAAC,CAACpG,IAAI,CAACsG,MAAM,CAAC,CAAC,CAAC,EAAEC,OAAO,CAACH,CAAC,CAACpG,IAAI,CAACwG,OAAO,CAAC,EAAEJ,CAAC,CAACpG,IAAI,CAACE,IAAI,KAAK,KAAK,EAAE,IAAI,CAAC,CAChI;QACD,MAAMuG,iBAAiB,GAAGhG,QAAQ,CAAC4D,GAAG,CACpCqC,CAAC,IAAK,IAAI7J,gBAAgB,CAAC6J,CAAC,CAAC1G,IAAI,CAACc,SAAS,CAAC,CAAC,CAAC,EAAE4F,CAAC,CAAC1G,IAAI,CAACxB,IAAI,EAAE+H,OAAO,CAACG,CAAC,CAAC1G,IAAI,CAAC2G,QAAQ,CAAC,EAAE,IAAI,EAAED,CAAC,CAAC1G,IAAI,CAAChD,CAAC,KAAK,GAAG,EAAE0J,CAAC,CAAC1G,IAAI,CAAChD,CAAC,KAAK,GAAG,CAAC,CACjI;QACD,MAAM4J,iBAAiB,GAAG,MAAMnK,UAAU,CAACoK,aAAa,EAAE;QAE1D,IAAIZ,KAAK,EAAE;UACVQ,iBAAiB,CAACK,IAAI,CAAC,IAAIjK,gBAAgB,CAAC,oBAAoB,EAAEG,CAAC,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClH;QAEA,MAAM+J,OAAO,GAAG,IAAInK,SAAS,CAAC,IAAI,CAACY,IAAI,CAACgB,IAAI,EAAE2H,cAAc,EAAEM,iBAAiB,EAAEG,iBAAiB,CAAC;QAEnG,OAAOG,OAAO;MACf;MAEA;;;MAGUC,qBAAqBA,CAAClE,KAAc;QAC7C,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,UAAU,IAAIA,KAAK,IAAIA,KAAK,CAACmE,QAAQ,KAAK,gBAAgB;MACjH;;IACAC,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2f5d1ce989a3a708c727cd597231ff1d9504c0e4"}
