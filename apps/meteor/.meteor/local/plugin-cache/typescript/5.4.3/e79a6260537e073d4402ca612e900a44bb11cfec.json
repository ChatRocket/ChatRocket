{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/updateMessage.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/lib/server/methods/updateMessage.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/updateMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/updateMessage.ts","sourceRoot":"","sources":["app/lib/server/methods/updateMessage.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IEditedMessage, IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { updateMessage } from '../functions/updateMessage';\n\nconst allowedEditedFields = ['tshow', 'alias', 'attachments', 'avatar', 'emoji', 'msg', 'customFields', 'content', 'e2eMentions'];\n\nexport async function executeUpdateMessage(\n\tuid: IUser['_id'],\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tpreviewUrls?: string[],\n) {\n\tconst originalMessage = await Messages.findOneById(message._id);\n\tif (!originalMessage?._id) {\n\t\treturn;\n\t}\n\n\tObject.entries(message).forEach(([key, value]) => {\n\t\tif (!allowedEditedFields.includes(key) && value !== originalMessage[key as keyof IMessage]) {\n\t\t\tthrow new Meteor.Error('error-invalid-update-key', `Cannot update the message ${key}`, {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t});\n\n\t// IF the message has custom fields, always update\n\t// Ideally, we'll compare the custom fields to check for change, but since we don't know the shape of\n\t// custom fields, as it's user defined, we're gonna update\n\tconst msgText = originalMessage?.attachments?.[0]?.description ?? originalMessage.msg;\n\tif (msgText === message.msg && !previewUrls && !message.customFields) {\n\t\treturn;\n\t}\n\n\tif (!!message.tmid && originalMessage._id === message.tmid) {\n\t\tthrow new Meteor.Error('error-message-same-as-tmid', 'Cannot set tmid the same as the _id', {\n\t\t\tmethod: 'updateMessage',\n\t\t});\n\t}\n\n\tif (!originalMessage.tmid && !!message.tmid) {\n\t\tthrow new Meteor.Error('error-message-change-to-thread', 'Cannot update message to a thread', { method: 'updateMessage' });\n\t}\n\n\tconst _hasPermission = await hasPermissionAsync(uid, 'edit-message', message.rid);\n\tconst editAllowed = settings.get('Message_AllowEditing');\n\tconst editOwn = originalMessage.u && originalMessage.u._id === uid;\n\n\tif (!_hasPermission && (!editAllowed || !editOwn)) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n\t\t\tmethod: 'updateMessage',\n\t\t\taction: 'Message_editing',\n\t\t});\n\t}\n\n\tconst blockEditInMinutes = settings.get('Message_AllowEditing_BlockEditInMinutes');\n\tconst bypassBlockTimeLimit = await hasPermissionAsync(uid, 'bypass-time-limit-edit-and-delete', message.rid);\n\n\tif (!bypassBlockTimeLimit && Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {\n\t\tlet currentTsDiff = 0;\n\t\tlet msgTs;\n\n\t\tif (originalMessage.ts instanceof Date || Match.test(originalMessage.ts, Number)) {\n\t\t\tmsgTs = moment(originalMessage.ts);\n\t\t}\n\t\tif (msgTs) {\n\t\t\tcurrentTsDiff = moment().diff(msgTs, 'minutes');\n\t\t}\n\t\tif (currentTsDiff >= blockEditInMinutes) {\n\t\t\tthrow new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t}\n\n\tconst user = await Users.findOneById(uid);\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t}\n\tawait canSendMessageAsync(message.rid, { uid: user._id, username: user.username ?? undefined, ...user });\n\n\t// It is possible to have an empty array as the attachments property, so ensure both things exist\n\tif (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {\n\t\toriginalMessage.attachments[0].description = message.msg;\n\t\tmessage.attachments = originalMessage.attachments;\n\t\tmessage.msg = originalMessage.msg;\n\t}\n\n\tmessage.u = originalMessage.u;\n\n\treturn updateMessage(message, user, originalMessage, previewUrls);\n}\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tupdateMessage(message: IEditedMessage, previewUrls?: string[]): void;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync updateMessage(message: IEditedMessage, previewUrls?: string[]) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\t\tcheck(previewUrls, Match.Maybe([String]));\n\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t\t}\n\n\t\treturn applyAirGappedRestrictionsValidation(() => executeUpdateMessage(uid, message, previewUrls));\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/lib/server/methods/updateMessage.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/lib/server/methods/updateMessage.ts","inputSourceMap":{"version":3,"file":"app/lib/server/methods/updateMessage.ts","sourceRoot":"","sources":["app/lib/server/methods/updateMessage.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,mBAAmB,EAAE,MAAM,wDAAwD,CAAC;AAC7F,OAAO,EAAE,kBAAkB,EAAE,MAAM,uDAAuD,CAAC;AAC3F,OAAO,EAAE,oCAAoC,EAAE,MAAM,sDAAsD,CAAC;AAC5G,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D,MAAM,mBAAmB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;AAElI,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACzC,GAAiB,EACjB,OAAkE,EAClE,WAAsB;IAEtB,MAAM,eAAe,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAChE,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC;QAC3B,OAAO;IACR,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAChD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,KAAK,eAAe,CAAC,GAAqB,CAAC,EAAE,CAAC;YAC5F,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,6BAA6B,GAAG,EAAE,EAAE;gBACtF,MAAM,EAAE,eAAe;aACvB,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,CAAC,CAAC;IAEH,kDAAkD;IAClD,qGAAqG;IACrG,0DAA0D;IAC1D,MAAM,OAAO,GAAG,eAAe,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,IAAI,eAAe,CAAC,GAAG,CAAC;IACtF,IAAI,OAAO,KAAK,OAAO,CAAC,GAAG,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QACtE,OAAO;IACR,CAAC;IAED,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,eAAe,CAAC,GAAG,KAAK,OAAO,CAAC,IAAI,EAAE,CAAC;QAC5D,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,4BAA4B,EAAE,qCAAqC,EAAE;YAC3F,MAAM,EAAE,eAAe;SACvB,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;QAC7C,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,mCAAmC,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;IAC5H,CAAC;IAED,MAAM,cAAc,GAAG,MAAM,kBAAkB,CAAC,GAAG,EAAE,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAClF,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACzD,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC;IAEnE,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;QACnD,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,0BAA0B,EAAE,6BAA6B,EAAE;YACjF,MAAM,EAAE,eAAe;YACvB,MAAM,EAAE,iBAAiB;SACzB,CAAC,CAAC;IACJ,CAAC;IAED,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;IACnF,MAAM,oBAAoB,GAAG,MAAM,kBAAkB,CAAC,GAAG,EAAE,mCAAmC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;IAE7G,IAAI,CAAC,oBAAoB,IAAI,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,IAAI,kBAAkB,KAAK,CAAC,EAAE,CAAC;QACjG,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,KAAK,CAAC;QAEV,IAAI,eAAe,CAAC,EAAE,YAAY,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC;YAClF,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,KAAK,EAAE,CAAC;YACX,aAAa,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,aAAa,IAAI,kBAAkB,EAAE,CAAC;YACzC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,4BAA4B,EAAE;gBACrF,MAAM,EAAE,eAAe;aACvB,CAAC,CAAC;QACJ,CAAC;IACF,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;IAC3F,CAAC;IACD,MAAM,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;IAEzG,iGAAiG;IACjG,IAAI,eAAe,CAAC,WAAW,IAAI,eAAe,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QACvI,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC;QACzD,OAAO,CAAC,WAAW,GAAG,eAAe,CAAC,WAAW,CAAC;QAClD,OAAO,CAAC,GAAG,GAAG,eAAe,CAAC,GAAG,CAAC;IACnC,CAAC;IAED,OAAO,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC;IAE9B,OAAO,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;AACnE,CAAC;AASD,MAAM,CAAC,OAAO,CAAgB;IAC7B,KAAK,CAAC,aAAa,CAAC,OAAuB,EAAE,WAAsB;QAClE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QACvD,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAE1C,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;QAE5B,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,EAAE,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;QAC3F,CAAC;QAED,OAAO,oCAAoC,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IACpG,CAAC;CACD,CAAC,CAAC","sourcesContent":["import type { IEditedMessage, IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { updateMessage } from '../functions/updateMessage';\n\nconst allowedEditedFields = ['tshow', 'alias', 'attachments', 'avatar', 'emoji', 'msg', 'customFields', 'content', 'e2eMentions'];\n\nexport async function executeUpdateMessage(\n\tuid: IUser['_id'],\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tpreviewUrls?: string[],\n) {\n\tconst originalMessage = await Messages.findOneById(message._id);\n\tif (!originalMessage?._id) {\n\t\treturn;\n\t}\n\n\tObject.entries(message).forEach(([key, value]) => {\n\t\tif (!allowedEditedFields.includes(key) && value !== originalMessage[key as keyof IMessage]) {\n\t\t\tthrow new Meteor.Error('error-invalid-update-key', `Cannot update the message ${key}`, {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t});\n\n\t// IF the message has custom fields, always update\n\t// Ideally, we'll compare the custom fields to check for change, but since we don't know the shape of\n\t// custom fields, as it's user defined, we're gonna update\n\tconst msgText = originalMessage?.attachments?.[0]?.description ?? originalMessage.msg;\n\tif (msgText === message.msg && !previewUrls && !message.customFields) {\n\t\treturn;\n\t}\n\n\tif (!!message.tmid && originalMessage._id === message.tmid) {\n\t\tthrow new Meteor.Error('error-message-same-as-tmid', 'Cannot set tmid the same as the _id', {\n\t\t\tmethod: 'updateMessage',\n\t\t});\n\t}\n\n\tif (!originalMessage.tmid && !!message.tmid) {\n\t\tthrow new Meteor.Error('error-message-change-to-thread', 'Cannot update message to a thread', { method: 'updateMessage' });\n\t}\n\n\tconst _hasPermission = await hasPermissionAsync(uid, 'edit-message', message.rid);\n\tconst editAllowed = settings.get('Message_AllowEditing');\n\tconst editOwn = originalMessage.u && originalMessage.u._id === uid;\n\n\tif (!_hasPermission && (!editAllowed || !editOwn)) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n\t\t\tmethod: 'updateMessage',\n\t\t\taction: 'Message_editing',\n\t\t});\n\t}\n\n\tconst blockEditInMinutes = settings.get('Message_AllowEditing_BlockEditInMinutes');\n\tconst bypassBlockTimeLimit = await hasPermissionAsync(uid, 'bypass-time-limit-edit-and-delete', message.rid);\n\n\tif (!bypassBlockTimeLimit && Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {\n\t\tlet currentTsDiff = 0;\n\t\tlet msgTs;\n\n\t\tif (originalMessage.ts instanceof Date || Match.test(originalMessage.ts, Number)) {\n\t\t\tmsgTs = moment(originalMessage.ts);\n\t\t}\n\t\tif (msgTs) {\n\t\t\tcurrentTsDiff = moment().diff(msgTs, 'minutes');\n\t\t}\n\t\tif (currentTsDiff >= blockEditInMinutes) {\n\t\t\tthrow new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t}\n\n\tconst user = await Users.findOneById(uid);\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t}\n\tawait canSendMessageAsync(message.rid, { uid: user._id, username: user.username ?? undefined, ...user });\n\n\t// It is possible to have an empty array as the attachments property, so ensure both things exist\n\tif (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {\n\t\toriginalMessage.attachments[0].description = message.msg;\n\t\tmessage.attachments = originalMessage.attachments;\n\t\tmessage.msg = originalMessage.msg;\n\t}\n\n\tmessage.u = originalMessage.u;\n\n\treturn updateMessage(message, user, originalMessage, previewUrls);\n}\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tupdateMessage(message: IEditedMessage, previewUrls?: string[]): void;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync updateMessage(message: IEditedMessage, previewUrls?: string[]) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\t\tcheck(previewUrls, Match.Maybe([String]));\n\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t\t}\n\n\t\treturn applyAirGappedRestrictionsValidation(() => executeUpdateMessage(uid, message, previewUrls));\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      executeUpdateMessage: () => executeUpdateMessage\n    });\n    let Messages, Users;\n    module.link(\"@rocket.chat/models\", {\n      Messages(v) {\n        Messages = v;\n      },\n      Users(v) {\n        Users = v;\n      }\n    }, 0);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let moment;\n    module.link(\"moment\", {\n      default(v) {\n        moment = v;\n      }\n    }, 3);\n    let canSendMessageAsync;\n    module.link(\"../../../authorization/server/functions/canSendMessage\", {\n      canSendMessageAsync(v) {\n        canSendMessageAsync = v;\n      }\n    }, 4);\n    let hasPermissionAsync;\n    module.link(\"../../../authorization/server/functions/hasPermission\", {\n      hasPermissionAsync(v) {\n        hasPermissionAsync = v;\n      }\n    }, 5);\n    let applyAirGappedRestrictionsValidation;\n    module.link(\"../../../license/server/airGappedRestrictionsWrapper\", {\n      applyAirGappedRestrictionsValidation(v) {\n        applyAirGappedRestrictionsValidation = v;\n      }\n    }, 6);\n    let settings;\n    module.link(\"../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 7);\n    let updateMessage;\n    module.link(\"../functions/updateMessage\", {\n      updateMessage(v) {\n        updateMessage = v;\n      }\n    }, 8);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const allowedEditedFields = ['tshow', 'alias', 'attachments', 'avatar', 'emoji', 'msg', 'customFields', 'content', 'e2eMentions'];\n    async function executeUpdateMessage(uid, message, previewUrls) {\n      var _originalMessage$atta, _originalMessage$atta2, _originalMessage$atta3, _user$username;\n      const originalMessage = await Messages.findOneById(message._id);\n      if (!(originalMessage !== null && originalMessage !== void 0 && originalMessage._id)) {\n        return;\n      }\n      Object.entries(message).forEach(_ref => {\n        let [key, value] = _ref;\n        if (!allowedEditedFields.includes(key) && value !== originalMessage[key]) {\n          throw new Meteor.Error('error-invalid-update-key', \"Cannot update the message \".concat(key), {\n            method: 'updateMessage'\n          });\n        }\n      });\n      // IF the message has custom fields, always update\n      // Ideally, we'll compare the custom fields to check for change, but since we don't know the shape of\n      // custom fields, as it's user defined, we're gonna update\n      const msgText = (_originalMessage$atta = originalMessage === null || originalMessage === void 0 ? void 0 : (_originalMessage$atta2 = originalMessage.attachments) === null || _originalMessage$atta2 === void 0 ? void 0 : (_originalMessage$atta3 = _originalMessage$atta2[0]) === null || _originalMessage$atta3 === void 0 ? void 0 : _originalMessage$atta3.description) !== null && _originalMessage$atta !== void 0 ? _originalMessage$atta : originalMessage.msg;\n      if (msgText === message.msg && !previewUrls && !message.customFields) {\n        return;\n      }\n      if (!!message.tmid && originalMessage._id === message.tmid) {\n        throw new Meteor.Error('error-message-same-as-tmid', 'Cannot set tmid the same as the _id', {\n          method: 'updateMessage'\n        });\n      }\n      if (!originalMessage.tmid && !!message.tmid) {\n        throw new Meteor.Error('error-message-change-to-thread', 'Cannot update message to a thread', {\n          method: 'updateMessage'\n        });\n      }\n      const _hasPermission = await hasPermissionAsync(uid, 'edit-message', message.rid);\n      const editAllowed = settings.get('Message_AllowEditing');\n      const editOwn = originalMessage.u && originalMessage.u._id === uid;\n      if (!_hasPermission && (!editAllowed || !editOwn)) {\n        throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n          method: 'updateMessage',\n          action: 'Message_editing'\n        });\n      }\n      const blockEditInMinutes = settings.get('Message_AllowEditing_BlockEditInMinutes');\n      const bypassBlockTimeLimit = await hasPermissionAsync(uid, 'bypass-time-limit-edit-and-delete', message.rid);\n      if (!bypassBlockTimeLimit && Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {\n        let currentTsDiff = 0;\n        let msgTs;\n        if (originalMessage.ts instanceof Date || Match.test(originalMessage.ts, Number)) {\n          msgTs = moment(originalMessage.ts);\n        }\n        if (msgTs) {\n          currentTsDiff = moment().diff(msgTs, 'minutes');\n        }\n        if (currentTsDiff >= blockEditInMinutes) {\n          throw new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {\n            method: 'updateMessage'\n          });\n        }\n      }\n      const user = await Users.findOneById(uid);\n      if (!user) {\n        throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n          method: 'updateMessage'\n        });\n      }\n      await canSendMessageAsync(message.rid, _objectSpread({\n        uid: user._id,\n        username: (_user$username = user.username) !== null && _user$username !== void 0 ? _user$username : undefined\n      }, user));\n      // It is possible to have an empty array as the attachments property, so ensure both things exist\n      if (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {\n        originalMessage.attachments[0].description = message.msg;\n        message.attachments = originalMessage.attachments;\n        message.msg = originalMessage.msg;\n      }\n      message.u = originalMessage.u;\n      return updateMessage(message, user, originalMessage, previewUrls);\n    }\n    Meteor.methods({\n      async updateMessage(message, previewUrls) {\n        check(message, Match.ObjectIncluding({\n          _id: String\n        }));\n        check(previewUrls, Match.Maybe([String]));\n        const uid = Meteor.userId();\n        if (!uid) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'updateMessage'\n          });\n        }\n        return applyAirGappedRestrictionsValidation(() => executeUpdateMessage(uid, message, previewUrls));\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","executeUpdateMessage","Messages","Users","Match","check","Meteor","moment","canSendMessageAsync","hasPermissionAsync","applyAirGappedRestrictionsValidation","settings","updateMessage","__reifyWaitForDeps__","allowedEditedFields","uid","message","previewUrls","_originalMessage$atta","_originalMessage$atta2","_originalMessage$atta3","_user$username","originalMessage","findOneById","_id","Object","entries","forEach","_ref","key","value","includes","Error","concat","method","msgText","attachments","description","msg","customFields","tmid","_hasPermission","rid","editAllowed","get","editOwn","u","action","blockEditInMinutes","bypassBlockTimeLimit","test","Number","currentTsDiff","msgTs","ts","Date","diff","user","username","undefined","length","methods","ObjectIncluding","String","Maybe","userId","__reify_async_result__","_reifyError","self","async"],"sources":["app/lib/server/methods/updateMessage.ts"],"sourcesContent":["import type { IEditedMessage, IMessage, IUser, AtLeast } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Messages, Users } from '@rocket.chat/models';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\nimport moment from 'moment';\n\nimport { canSendMessageAsync } from '../../../authorization/server/functions/canSendMessage';\nimport { hasPermissionAsync } from '../../../authorization/server/functions/hasPermission';\nimport { applyAirGappedRestrictionsValidation } from '../../../license/server/airGappedRestrictionsWrapper';\nimport { settings } from '../../../settings/server';\nimport { updateMessage } from '../functions/updateMessage';\n\nconst allowedEditedFields = ['tshow', 'alias', 'attachments', 'avatar', 'emoji', 'msg', 'customFields', 'content', 'e2eMentions'];\n\nexport async function executeUpdateMessage(\n\tuid: IUser['_id'],\n\tmessage: AtLeast<IMessage, '_id' | 'rid' | 'msg' | 'customFields'>,\n\tpreviewUrls?: string[],\n) {\n\tconst originalMessage = await Messages.findOneById(message._id);\n\tif (!originalMessage?._id) {\n\t\treturn;\n\t}\n\n\tObject.entries(message).forEach(([key, value]) => {\n\t\tif (!allowedEditedFields.includes(key) && value !== originalMessage[key as keyof IMessage]) {\n\t\t\tthrow new Meteor.Error('error-invalid-update-key', `Cannot update the message ${key}`, {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t});\n\n\t// IF the message has custom fields, always update\n\t// Ideally, we'll compare the custom fields to check for change, but since we don't know the shape of\n\t// custom fields, as it's user defined, we're gonna update\n\tconst msgText = originalMessage?.attachments?.[0]?.description ?? originalMessage.msg;\n\tif (msgText === message.msg && !previewUrls && !message.customFields) {\n\t\treturn;\n\t}\n\n\tif (!!message.tmid && originalMessage._id === message.tmid) {\n\t\tthrow new Meteor.Error('error-message-same-as-tmid', 'Cannot set tmid the same as the _id', {\n\t\t\tmethod: 'updateMessage',\n\t\t});\n\t}\n\n\tif (!originalMessage.tmid && !!message.tmid) {\n\t\tthrow new Meteor.Error('error-message-change-to-thread', 'Cannot update message to a thread', { method: 'updateMessage' });\n\t}\n\n\tconst _hasPermission = await hasPermissionAsync(uid, 'edit-message', message.rid);\n\tconst editAllowed = settings.get('Message_AllowEditing');\n\tconst editOwn = originalMessage.u && originalMessage.u._id === uid;\n\n\tif (!_hasPermission && (!editAllowed || !editOwn)) {\n\t\tthrow new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {\n\t\t\tmethod: 'updateMessage',\n\t\t\taction: 'Message_editing',\n\t\t});\n\t}\n\n\tconst blockEditInMinutes = settings.get('Message_AllowEditing_BlockEditInMinutes');\n\tconst bypassBlockTimeLimit = await hasPermissionAsync(uid, 'bypass-time-limit-edit-and-delete', message.rid);\n\n\tif (!bypassBlockTimeLimit && Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {\n\t\tlet currentTsDiff = 0;\n\t\tlet msgTs;\n\n\t\tif (originalMessage.ts instanceof Date || Match.test(originalMessage.ts, Number)) {\n\t\t\tmsgTs = moment(originalMessage.ts);\n\t\t}\n\t\tif (msgTs) {\n\t\t\tcurrentTsDiff = moment().diff(msgTs, 'minutes');\n\t\t}\n\t\tif (currentTsDiff >= blockEditInMinutes) {\n\t\t\tthrow new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {\n\t\t\t\tmethod: 'updateMessage',\n\t\t\t});\n\t\t}\n\t}\n\n\tconst user = await Users.findOneById(uid);\n\tif (!user) {\n\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t}\n\tawait canSendMessageAsync(message.rid, { uid: user._id, username: user.username ?? undefined, ...user });\n\n\t// It is possible to have an empty array as the attachments property, so ensure both things exist\n\tif (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {\n\t\toriginalMessage.attachments[0].description = message.msg;\n\t\tmessage.attachments = originalMessage.attachments;\n\t\tmessage.msg = originalMessage.msg;\n\t}\n\n\tmessage.u = originalMessage.u;\n\n\treturn updateMessage(message, user, originalMessage, previewUrls);\n}\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tupdateMessage(message: IEditedMessage, previewUrls?: string[]): void;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync updateMessage(message: IEditedMessage, previewUrls?: string[]) {\n\t\tcheck(message, Match.ObjectIncluding({ _id: String }));\n\t\tcheck(previewUrls, Match.Maybe([String]));\n\n\t\tconst uid = Meteor.userId();\n\n\t\tif (!uid) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', { method: 'updateMessage' });\n\t\t}\n\n\t\treturn applyAirGappedRestrictionsValidation(() => executeUpdateMessage(uid, message, previewUrls));\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"e79a6260537e073d4402ca612e900a44bb11cfec"}
