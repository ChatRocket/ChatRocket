{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"app/e2e/client/rocketchat.e2e.room.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.room.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.room.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/e2e/client/rocketchat.e2e.room.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/e2e/client/rocketchat.e2e.room.ts","inputSourceMap":{"version":3,"file":"app/e2e/client/rocketchat.e2e.room.ts","sourceRoot":"","sources":["app/e2e/client/rocketchat.e2e.room.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"]}}},"code":"const _excluded = [\"_id\"],\n  _excluded2 = [\"msg\", \"attachments\"];\nlet _objectWithoutProperties;\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n}, 0);\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 1);\nlet _asyncIterator;\nmodule.link(\"@babel/runtime/helpers/asyncIterator\", {\n  default(v) {\n    _asyncIterator = v;\n  }\n}, 2);\nmodule.export({\n  E2ERoom: () => E2ERoom\n});\nlet Base64;\nmodule.link(\"@rocket.chat/base64\", {\n  Base64(v) {\n    Base64 = v;\n  }\n}, 0);\nlet Emitter;\nmodule.link(\"@rocket.chat/emitter\", {\n  Emitter(v) {\n    Emitter = v;\n  }\n}, 1);\nlet EJSON;\nmodule.link(\"ejson\", {\n  default(v) {\n    EJSON = v;\n  }\n}, 2);\nlet E2ERoomState;\nmodule.link(\"./E2ERoomState\", {\n  E2ERoomState(v) {\n    E2ERoomState = v;\n  }\n}, 3);\nlet toString, toArrayBuffer, joinVectorAndEcryptedData, splitVectorAndEcryptedData, encryptRSA, encryptAES, decryptRSA, decryptAES, generateAESKey, exportJWKKey, importAESKey, importRSAKey, readFileAsArrayBuffer, encryptAESCTR, generateAESCTRKey, sha256HashFromArrayBuffer, createSha256HashFromText;\nmodule.link(\"./helper\", {\n  toString(v) {\n    toString = v;\n  },\n  toArrayBuffer(v) {\n    toArrayBuffer = v;\n  },\n  joinVectorAndEcryptedData(v) {\n    joinVectorAndEcryptedData = v;\n  },\n  splitVectorAndEcryptedData(v) {\n    splitVectorAndEcryptedData = v;\n  },\n  encryptRSA(v) {\n    encryptRSA = v;\n  },\n  encryptAES(v) {\n    encryptAES = v;\n  },\n  decryptRSA(v) {\n    decryptRSA = v;\n  },\n  decryptAES(v) {\n    decryptAES = v;\n  },\n  generateAESKey(v) {\n    generateAESKey = v;\n  },\n  exportJWKKey(v) {\n    exportJWKKey = v;\n  },\n  importAESKey(v) {\n    importAESKey = v;\n  },\n  importRSAKey(v) {\n    importRSAKey = v;\n  },\n  readFileAsArrayBuffer(v) {\n    readFileAsArrayBuffer = v;\n  },\n  encryptAESCTR(v) {\n    encryptAESCTR = v;\n  },\n  generateAESCTRKey(v) {\n    generateAESCTRKey = v;\n  },\n  sha256HashFromArrayBuffer(v) {\n    sha256HashFromArrayBuffer = v;\n  },\n  createSha256HashFromText(v) {\n    createSha256HashFromText = v;\n  }\n}, 4);\nlet log, logError;\nmodule.link(\"./logger\", {\n  log(v) {\n    log = v;\n  },\n  logError(v) {\n    logError = v;\n  }\n}, 5);\nlet e2e;\nmodule.link(\"./rocketchat.e2e\", {\n  e2e(v) {\n    e2e = v;\n  }\n}, 6);\nlet RoomManager;\nmodule.link(\"../../../client/lib/RoomManager\", {\n  RoomManager(v) {\n    RoomManager = v;\n  }\n}, 7);\nlet roomCoordinator;\nmodule.link(\"../../../client/lib/rooms/roomCoordinator\", {\n  roomCoordinator(v) {\n    roomCoordinator = v;\n  }\n}, 8);\nlet RoomSettingsEnum;\nmodule.link(\"../../../definition/IRoomTypeConfig\", {\n  RoomSettingsEnum(v) {\n    RoomSettingsEnum = v;\n  }\n}, 9);\nlet ChatRoom, Subscriptions, Messages;\nmodule.link(\"../../models/client\", {\n  ChatRoom(v) {\n    ChatRoom = v;\n  },\n  Subscriptions(v) {\n    Subscriptions = v;\n  },\n  Messages(v) {\n    Messages = v;\n  }\n}, 10);\nlet sdk;\nmodule.link(\"../../utils/client/lib/SDKClient\", {\n  sdk(v) {\n    sdk = v;\n  }\n}, 11);\nlet t;\nmodule.link(\"../../utils/lib/i18n\", {\n  t(v) {\n    t = v;\n  }\n}, 12);\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\nconst permitedMutations = {\n  [E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n  [E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n  [E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n  [E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n  [E2ERoomState.ESTABLISHING]: [E2ERoomState.READY, E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED, E2ERoomState.WAITING_KEYS, E2ERoomState.CREATING_KEYS]\n};\nconst filterMutation = (currentState, nextState) => {\n  if (currentState === nextState) {\n    return nextState === E2ERoomState.ERROR;\n  }\n  if (!(currentState in permitedMutations)) {\n    return nextState;\n  }\n  if (permitedMutations[currentState].includes(nextState)) {\n    return nextState;\n  }\n  return false;\n};\nclass E2ERoom extends Emitter {\n  constructor(userId, room) {\n    super();\n    this.state = undefined;\n    this[PAUSED] = undefined;\n    this[KEY_ID] = void 0;\n    this.userId = void 0;\n    this.roomId = void 0;\n    this.typeOfRoom = void 0;\n    this.roomKeyId = void 0;\n    this.groupSessionKey = void 0;\n    this.oldKeys = void 0;\n    this.sessionKeyExportedString = void 0;\n    this.sessionKeyExported = void 0;\n    this.userId = userId;\n    this.roomId = room._id;\n    this.typeOfRoom = room.t;\n    this.roomKeyId = room.e2eKeyId;\n    this.once(E2ERoomState.READY, async () => {\n      await this.decryptOldRoomKeys();\n      return this.decryptPendingMessages();\n    });\n    this.once(E2ERoomState.READY, () => this.decryptSubscription());\n    this.on('STATE_CHANGED', prev => {\n      if (this.roomId === RoomManager.opened) {\n        this.log(\"[PREV: \".concat(prev, \"]\"), 'State CHANGED');\n      }\n    });\n    this.on('STATE_CHANGED', () => this.handshake());\n    this.setState(E2ERoomState.NOT_STARTED);\n  }\n  log() {\n    for (var _len = arguments.length, msg = new Array(_len), _key = 0; _key < _len; _key++) {\n      msg[_key] = arguments[_key];\n    }\n    log(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n  error() {\n    for (var _len2 = arguments.length, msg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      msg[_key2] = arguments[_key2];\n    }\n    logError(\"E2E ROOM { state: \".concat(this.state, \", rid: \").concat(this.roomId, \" }\"), ...msg);\n  }\n  hasSessionKey() {\n    return !!this.groupSessionKey;\n  }\n  getState() {\n    return this.state;\n  }\n  setState(requestedState) {\n    const currentState = this.state;\n    const nextState = filterMutation(currentState, requestedState);\n    if (!nextState) {\n      this.error(\"invalid state \".concat(currentState, \" -> \").concat(requestedState));\n      return;\n    }\n    this.state = nextState;\n    this.log(currentState, '->', nextState);\n    this.emit('STATE_CHANGED', currentState);\n    this.emit(nextState, this);\n  }\n  isReady() {\n    return this.state === E2ERoomState.READY;\n  }\n  isDisabled() {\n    return this.state === E2ERoomState.DISABLED;\n  }\n  enable() {\n    if (this.state === E2ERoomState.READY) {\n      return;\n    }\n    this.setState(E2ERoomState.READY);\n  }\n  disable() {\n    this.setState(E2ERoomState.DISABLED);\n  }\n  pause() {\n    this.log('PAUSED', this[PAUSED], '->', true);\n    this[PAUSED] = true;\n    this.emit('PAUSED', true);\n  }\n  resume() {\n    this.log('PAUSED', this[PAUSED], '->', false);\n    this[PAUSED] = false;\n    this.emit('PAUSED', false);\n  }\n  keyReceived() {\n    this.setState(E2ERoomState.KEYS_RECEIVED);\n  }\n  async shouldConvertSentMessages(message) {\n    if (!this.isReady() || this[PAUSED]) {\n      return false;\n    }\n    if (this[PAUSED] === undefined) {\n      return new Promise(resolve => {\n        this.once('PAUSED', resolve);\n      });\n    }\n    if (message.msg[0] === '/') {\n      return false;\n    }\n    return true;\n  }\n  shouldConvertReceivedMessages() {\n    return this.isReady();\n  }\n  isWaitingKeys() {\n    return this.state === E2ERoomState.WAITING_KEYS;\n  }\n  get keyID() {\n    return this[KEY_ID];\n  }\n  set keyID(keyID) {\n    this[KEY_ID] = keyID;\n  }\n  async decryptSubscription() {\n    var _subscription$lastMes;\n    const subscription = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    if ((subscription === null || subscription === void 0 ? void 0 : (_subscription$lastMes = subscription.lastMessage) === null || _subscription$lastMes === void 0 ? void 0 : _subscription$lastMes.t) !== 'e2e') {\n      this.log('decryptSubscriptions nothing to do');\n      return;\n    }\n    const message = await this.decryptMessage(subscription.lastMessage);\n    Subscriptions.update({\n      _id: subscription._id\n    }, {\n      $set: {\n        lastMessage: message\n      }\n    });\n    this.log('decryptSubscriptions Done');\n  }\n  async decryptOldRoomKeys() {\n    const sub = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    if (!(sub !== null && sub !== void 0 && sub.oldRoomKeys) || (sub === null || sub === void 0 ? void 0 : sub.oldRoomKeys.length) === 0) {\n      this.log('decryptOldRoomKeys nothing to do');\n      return;\n    }\n    const keys = [];\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n      for (var _iterator = _asyncIterator(sub.oldRoomKeys), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false) {\n        const key = _step.value;\n        {\n          try {\n            const k = await this.decryptSessionKey(key.E2EKey);\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: k\n            }));\n          } catch (e) {\n            this.error(\"Cannot decrypt old room key with id \".concat(key.e2eKeyId, \". This is likely because user private key changed or is missing. Skipping\"));\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: null\n            }));\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion && _iterator.return != null) {\n          await _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n    this.oldKeys = keys;\n    this.log('decryptOldRoomKeys Done');\n  }\n  async exportOldRoomKeys(oldKeys) {\n    this.log('exportOldRoomKeys starting');\n    if (!oldKeys || oldKeys.length === 0) {\n      this.log('exportOldRoomKeys nothing to do');\n      return;\n    }\n    const keys = [];\n    var _iteratorAbruptCompletion2 = false;\n    var _didIteratorError2 = false;\n    var _iteratorError2;\n    try {\n      for (var _iterator2 = _asyncIterator(oldKeys), _step2; _iteratorAbruptCompletion2 = !(_step2 = await _iterator2.next()).done; _iteratorAbruptCompletion2 = false) {\n        const key = _step2.value;\n        {\n          try {\n            if (!key.E2EKey) {\n              continue;\n            }\n            const k = await this.exportSessionKey(key.E2EKey);\n            keys.push(_objectSpread(_objectSpread({}, key), {}, {\n              E2EKey: k\n            }));\n          } catch (e) {\n            this.error(\"Cannot decrypt old room key with id \".concat(key.e2eKeyId, \". This is likely because user private key changed or is missing. Skipping\"));\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (_iteratorAbruptCompletion2 && _iterator2.return != null) {\n          await _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n    this.log(\"exportOldRoomKeys Done: \".concat(keys.length, \" keys exported\"));\n    return keys;\n  }\n  async decryptPendingMessages() {\n    return Messages.find({\n      rid: this.roomId,\n      t: 'e2e',\n      e2e: 'pending'\n    }).forEach(async _ref => {\n      let {\n          _id\n        } = _ref,\n        msg = _objectWithoutProperties(_ref, _excluded);\n      Messages.update({\n        _id\n      }, await this.decryptMessage(msg));\n    });\n  }\n  // Initiates E2E Encryption\n  async handshake() {\n    if (!e2e.isReady()) {\n      return;\n    }\n    if (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n      return;\n    }\n    this.setState(E2ERoomState.ESTABLISHING);\n    try {\n      var _Subscriptions$findOn;\n      const groupKey = (_Subscriptions$findOn = Subscriptions.findOne({\n        rid: this.roomId\n      })) === null || _Subscriptions$findOn === void 0 ? void 0 : _Subscriptions$findOn.E2EKey;\n      if (groupKey) {\n        await this.importGroupKey(groupKey);\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n    } catch (error) {\n      this.setState(E2ERoomState.ERROR);\n      this.error('Error fetching group key: ', error);\n      return;\n    }\n    try {\n      const room = ChatRoom.findOne({\n        _id: this.roomId\n      });\n      // Only room creator can set keys for room\n      if (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n        this.setState(E2ERoomState.CREATING_KEYS);\n        await this.createGroupKey();\n        this.setState(E2ERoomState.READY);\n        return;\n      }\n      this.setState(E2ERoomState.WAITING_KEYS);\n      this.log('Requesting room key');\n      sdk.publish('notify-room-users', [\"\".concat(this.roomId, \"/e2ekeyRequest\"), this.roomId, room.e2eKeyId]);\n    } catch (error) {\n      // this.error = error;\n      this.setState(E2ERoomState.ERROR);\n    }\n  }\n  userShouldCreateKeys(room) {\n    // On DMs, we'll allow any user to set the keys\n    if (room.t === 'd') {\n      return true;\n    }\n    return room.u._id === this.userId;\n  }\n  isSupportedRoomType(type) {\n    return roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n  }\n  async decryptSessionKey(key) {\n    return importAESKey(JSON.parse(await this.exportSessionKey(key)));\n  }\n  async exportSessionKey(key) {\n    key = key.slice(12);\n    key = Base64.decode(key);\n    const decryptedKey = await decryptRSA(e2e.privateKey, key);\n    return toString(decryptedKey);\n  }\n  async importGroupKey(groupKey) {\n    this.log('Importing room key ->', this.roomId);\n    // Get existing group key\n    // const keyID = groupKey.slice(0, 12);\n    groupKey = groupKey.slice(12);\n    groupKey = Base64.decode(groupKey);\n    // Decrypt obtained encrypted session key\n    try {\n      const decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n      this.sessionKeyExportedString = toString(decryptedKey);\n    } catch (error) {\n      this.error('Error decrypting group key: ', error);\n      return false;\n    }\n    // When a new e2e room is created, it will be initialized without an e2e key id\n    // This will prevent new rooms from storing `undefined` as the keyid\n    if (!this.keyID) {\n      this.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n    }\n    // Import session key for use.\n    try {\n      const key = await importAESKey(JSON.parse(this.sessionKeyExportedString));\n      // Key has been obtained. E2E is now in session.\n      this.groupSessionKey = key;\n    } catch (error) {\n      this.error('Error importing group key: ', error);\n      return false;\n    }\n    return true;\n  }\n  async createNewGroupKey() {\n    this.groupSessionKey = await generateAESKey();\n    const sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n    this.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n    this.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n  }\n  async createGroupKey() {\n    this.log('Creating room key');\n    try {\n      await this.createNewGroupKey();\n      await sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n      await sdk.rest.post('/v1/e2e.updateGroupKey', {\n        rid: this.roomId,\n        uid: this.userId,\n        key: await this.encryptGroupKeyForParticipant(e2e.publicKey)\n      });\n      await this.encryptKeyForOtherParticipants();\n    } catch (error) {\n      this.error('Error exporting group key: ', error);\n      throw error;\n    }\n  }\n  async resetRoomKey() {\n    this.log('Resetting room key');\n    if (!e2e.publicKey) {\n      this.error('Cannot reset room key. No public key found.');\n      return;\n    }\n    this.setState(E2ERoomState.CREATING_KEYS);\n    try {\n      await this.createNewGroupKey();\n      const e2eNewKeys = {\n        e2eKeyId: this.keyID,\n        e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey)\n      };\n      this.setState(E2ERoomState.READY);\n      this.log(\"Room key reset done for room \".concat(this.roomId));\n      return e2eNewKeys;\n    } catch (error) {\n      this.error('Error resetting group key: ', error);\n      throw error;\n    }\n  }\n  onRoomKeyReset(keyID) {\n    this.log(\"Room keyID was reset. New keyID: \".concat(keyID, \" Previous keyID: \").concat(this.keyID));\n    this.setState(E2ERoomState.WAITING_KEYS);\n    this.keyID = keyID;\n    this.groupSessionKey = undefined;\n    this.sessionKeyExportedString = undefined;\n    this.sessionKeyExported = undefined;\n    this.oldKeys = undefined;\n  }\n  async encryptKeyForOtherParticipants() {\n    // Encrypt generated session key for every user in room and publish to subscription model.\n    try {\n      const mySub = Subscriptions.findOne({\n        rid: this.roomId\n      });\n      const decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys);\n      const users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter(user => {\n        var _user$e2e;\n        return user === null || user === void 0 ? void 0 : (_user$e2e = user.e2e) === null || _user$e2e === void 0 ? void 0 : _user$e2e.public_key;\n      });\n      if (!users.length) {\n        return;\n      }\n      const usersSuggestedGroupKeys = {\n        [this.roomId]: []\n      };\n      var _iteratorAbruptCompletion3 = false;\n      var _didIteratorError3 = false;\n      var _iteratorError3;\n      try {\n        for (var _iterator3 = _asyncIterator(users), _step3; _iteratorAbruptCompletion3 = !(_step3 = await _iterator3.next()).done; _iteratorAbruptCompletion3 = false) {\n          const user = _step3.value;\n          {\n            var _user$e2e2;\n            const encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e.public_key);\n            const oldKeys = await this.encryptOldKeysForParticipant((_user$e2e2 = user.e2e) === null || _user$e2e2 === void 0 ? void 0 : _user$e2e2.public_key, decryptedOldGroupKeys);\n            usersSuggestedGroupKeys[this.roomId].push(_objectSpread({\n              _id: user._id,\n              key: encryptedGroupKey\n            }, oldKeys && {\n              oldKeys\n            }));\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion3 && _iterator3.return != null) {\n            await _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n      await sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', {\n        usersSuggestedGroupKeys\n      });\n    } catch (error) {\n      return this.error('Error getting room users: ', error);\n    }\n  }\n  async encryptOldKeysForParticipant(publicKey, oldRoomKeys) {\n    if (!oldRoomKeys || oldRoomKeys.length === 0) {\n      return;\n    }\n    let userKey;\n    try {\n      userKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n    } catch (error) {\n      return this.error('Error importing user key: ', error);\n    }\n    try {\n      const keys = [];\n      var _iteratorAbruptCompletion4 = false;\n      var _didIteratorError4 = false;\n      var _iteratorError4;\n      try {\n        for (var _iterator4 = _asyncIterator(oldRoomKeys), _step4; _iteratorAbruptCompletion4 = !(_step4 = await _iterator4.next()).done; _iteratorAbruptCompletion4 = false) {\n          const oldRoomKey = _step4.value;\n          {\n            if (!oldRoomKey.E2EKey) {\n              continue;\n            }\n            const encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n            const encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n            keys.push(_objectSpread(_objectSpread({}, oldRoomKey), {}, {\n              E2EKey: encryptedKeyToString\n            }));\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion4 && _iterator4.return != null) {\n            await _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n      return keys;\n    } catch (error) {\n      return this.error('Error encrypting user key: ', error);\n    }\n  }\n  async encryptGroupKeyForParticipant(publicKey) {\n    let userKey;\n    try {\n      userKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n    } catch (error) {\n      return this.error('Error importing user key: ', error);\n    }\n    // const vector = crypto.getRandomValues(new Uint8Array(16));\n    // Encrypt session key for this user with his/her public key\n    try {\n      const encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n      const encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n      return encryptedUserKeyToString;\n    } catch (error) {\n      return this.error('Error encrypting user key: ', error);\n    }\n  }\n  // Encrypts files before upload. I/O is in arraybuffers.\n  async encryptFile(file) {\n    // if (!this.isSupportedRoomType(this.typeOfRoom)) {\n    // \treturn;\n    // }\n    const fileArrayBuffer = await readFileAsArrayBuffer(file);\n    const hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    const key = await generateAESCTRKey();\n    let result;\n    try {\n      result = await encryptAESCTR(vector, key, fileArrayBuffer);\n    } catch (error) {\n      console.log(error);\n      return this.error('Error encrypting group key: ', error);\n    }\n    const exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n    const fileName = await createSha256HashFromText(file.name);\n    const encryptedFile = new File([toArrayBuffer(result)], fileName);\n    return {\n      file: encryptedFile,\n      key: exportedKey,\n      iv: Base64.encode(vector),\n      type: file.type,\n      hash\n    };\n  }\n  // Decrypt uploaded encrypted files. I/O is in arraybuffers.\n  async decryptFile(file, key, iv) {\n    const ivArray = Base64.decode(iv);\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', key, {\n      name: 'AES-CTR'\n    }, true, ['encrypt', 'decrypt']);\n    return window.crypto.subtle.decrypt({\n      name: 'AES-CTR',\n      counter: ivArray,\n      length: 64\n    }, cryptoKey, file);\n  }\n  // Encrypts messages\n  async encryptText(data) {\n    const vector = crypto.getRandomValues(new Uint8Array(16));\n    try {\n      const result = await encryptAES(vector, this.groupSessionKey, data);\n      return this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n    } catch (error) {\n      this.error('Error encrypting message: ', error);\n      throw error;\n    }\n  }\n  // Helper function for encryption of content\n  async encryptMessageContent(contentToBeEncrypted) {\n    const data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n    return {\n      algorithm: 'rc.v1.aes-sha2',\n      ciphertext: await this.encryptText(data)\n    };\n  }\n  // Helper function for encryption of content\n  async encryptMessage(message) {\n    const {\n        msg,\n        attachments\n      } = message,\n      rest = _objectWithoutProperties(message, _excluded2);\n    const content = await this.encryptMessageContent({\n      msg,\n      attachments\n    });\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      content,\n      t: 'e2e',\n      e2e: 'pending'\n    });\n  }\n  // Helper function for encryption of messages\n  encrypt(message) {\n    if (!this.isSupportedRoomType(this.typeOfRoom)) {\n      return;\n    }\n    if (!this.groupSessionKey) {\n      throw new Error(t('E2E_Invalid_Key'));\n    }\n    const ts = new Date();\n    const data = new TextEncoder().encode(EJSON.stringify({\n      _id: message._id,\n      text: message.msg,\n      userId: this.userId,\n      ts\n    }));\n    return this.encryptText(data);\n  }\n  async decryptContent(data) {\n    if (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n      const content = await this.decrypt(data.content.ciphertext);\n      Object.assign(data, content);\n    }\n    return data;\n  }\n  // Decrypt messages\n  async decryptMessage(message) {\n    if (message.t !== 'e2e' || message.e2e === 'done') {\n      return message;\n    }\n    if (message.msg) {\n      const data = await this.decrypt(message.msg);\n      if (data !== null && data !== void 0 && data.text) {\n        message.msg = data.text;\n      }\n    }\n    message = await this.decryptContent(message);\n    return _objectSpread(_objectSpread({}, message), {}, {\n      e2e: 'done'\n    });\n  }\n  async doDecrypt(vector, key, cipherText) {\n    const result = await decryptAES(vector, key, cipherText);\n    return EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n  }\n  async decrypt(message) {\n    const keyID = message.slice(0, 12);\n    message = message.slice(12);\n    const [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n    let oldKey = '';\n    if (keyID !== this.keyID) {\n      var _this$oldKeys;\n      const oldRoomKey = (_this$oldKeys = this.oldKeys) === null || _this$oldKeys === void 0 ? void 0 : _this$oldKeys.find(key => key.e2eKeyId === keyID);\n      // Messages already contain a keyID stored with them\n      // That means that if we cannot find a keyID for the key the message has preppended to\n      // The message is indecipherable.\n      // In these cases, we'll give a last shot using the current session key, which may not work\n      // but will be enough to help with some mobile issues.\n      if (!oldRoomKey) {\n        try {\n          return await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n        } catch (error) {\n          this.error('Error decrypting message: ', error, message);\n          return {\n            msg: t('E2E_indecipherable')\n          };\n        }\n      }\n      oldKey = oldRoomKey.E2EKey;\n    }\n    try {\n      return await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n    } catch (error) {\n      this.error('Error decrypting message: ', error, message);\n      return {\n        msg: t('E2E_Key_Error')\n      };\n    }\n  }\n  provideKeyToUser(keyId) {\n    if (this.keyID !== keyId) {\n      return;\n    }\n    void this.encryptKeyForOtherParticipants();\n    this.setState(E2ERoomState.READY);\n  }\n  onStateChange(cb) {\n    this.on('STATE_CHANGED', cb);\n    return () => this.off('STATE_CHANGED', cb);\n  }\n  async encryptGroupKeyForParticipantsWaitingForTheKeys(users) {\n    if (!this.isReady()) {\n      return;\n    }\n    const mySub = Subscriptions.findOne({\n      rid: this.roomId\n    });\n    const decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub === null || mySub === void 0 ? void 0 : mySub.oldRoomKeys);\n    const usersWithKeys = await Promise.all(users.map(async user => {\n      const {\n        _id,\n        public_key\n      } = user;\n      const key = await this.encryptGroupKeyForParticipant(public_key);\n      const oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n      return _objectSpread({\n        _id,\n        key\n      }, oldKeys && {\n        oldKeys\n      });\n    }));\n    return usersWithKeys;\n  }\n}","map":{"version":3,"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","_asyncIterator","export","E2ERoom","Base64","Emitter","EJSON","E2ERoomState","toString","toArrayBuffer","joinVectorAndEcryptedData","splitVectorAndEcryptedData","encryptRSA","encryptAES","decryptRSA","decryptAES","generateAESKey","exportJWKKey","importAESKey","importRSAKey","readFileAsArrayBuffer","encryptAESCTR","generateAESCTRKey","sha256HashFromArrayBuffer","createSha256HashFromText","log","logError","e2e","RoomManager","roomCoordinator","RoomSettingsEnum","ChatRoom","Subscriptions","Messages","sdk","t","KEY_ID","Symbol","PAUSED","permitedMutations","NOT_STARTED","ESTABLISHING","DISABLED","KEYS_RECEIVED","READY","CREATING_KEYS","WAITING_KEYS","ERROR","filterMutation","currentState","nextState","includes","constructor","userId","room","state","undefined","roomId","typeOfRoom","roomKeyId","groupSessionKey","oldKeys","sessionKeyExportedString","sessionKeyExported","_id","e2eKeyId","once","decryptOldRoomKeys","decryptPendingMessages","decryptSubscription","on","prev","opened","concat","handshake","setState","_len","arguments","length","msg","Array","_key","error","_len2","_key2","hasSessionKey","getState","requestedState","emit","isReady","isDisabled","enable","disable","pause","resume","keyReceived","shouldConvertSentMessages","message","Promise","resolve","shouldConvertReceivedMessages","isWaitingKeys","keyID","_subscription$lastMes","subscription","findOne","rid","lastMessage","decryptMessage","update","$set","sub","oldRoomKeys","keys","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","key","value","k","decryptSessionKey","E2EKey","push","e","err","return","exportOldRoomKeys","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","exportSessionKey","find","forEach","_ref","_excluded","_Subscriptions$findOn","groupKey","importGroupKey","userShouldCreateKeys","createGroupKey","publish","u","isSupportedRoomType","type","getRoomDirectives","allowRoomSettingChange","E2E","JSON","parse","slice","decode","decryptedKey","privateKey","createNewGroupKey","stringify","call","rest","post","uid","encryptGroupKeyForParticipant","publicKey","encryptKeyForOtherParticipants","resetRoomKey","e2eNewKeys","e2eKey","onRoomKeyReset","mySub","decryptedOldGroupKeys","users","filter","user","_user$e2e","public_key","usersSuggestedGroupKeys","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_user$e2e2","encryptedGroupKey","encryptOldKeysForParticipant","userKey","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","oldRoomKey","encryptedKey","encryptedKeyToString","encode","Uint8Array","encryptedUserKey","encryptedUserKeyToString","encryptFile","file","fileArrayBuffer","hash","vector","crypto","getRandomValues","result","console","exportedKey","window","subtle","exportKey","fileName","name","encryptedFile","File","iv","decryptFile","ivArray","cryptoKey","importKey","decrypt","counter","encryptText","data","encryptMessageContent","contentToBeEncrypted","TextEncoder","algorithm","ciphertext","encryptMessage","attachments","_excluded2","content","encrypt","Error","ts","Date","text","decryptContent","Object","assign","doDecrypt","cipherText","TextDecoder","oldKey","_this$oldKeys","provideKeyToUser","keyId","onStateChange","cb","off","encryptGroupKeyForParticipantsWaitingForTheKeys","usersWithKeys","all","map"],"sources":["app/e2e/client/rocketchat.e2e.room.ts"],"sourcesContent":["import { Base64 } from '@rocket.chat/base64';\nimport { Emitter } from '@rocket.chat/emitter';\nimport EJSON from 'ejson';\n\nimport { E2ERoomState } from './E2ERoomState';\nimport {\n\ttoString,\n\ttoArrayBuffer,\n\tjoinVectorAndEcryptedData,\n\tsplitVectorAndEcryptedData,\n\tencryptRSA,\n\tencryptAES,\n\tdecryptRSA,\n\tdecryptAES,\n\tgenerateAESKey,\n\texportJWKKey,\n\timportAESKey,\n\timportRSAKey,\n\treadFileAsArrayBuffer,\n\tencryptAESCTR,\n\tgenerateAESCTRKey,\n\tsha256HashFromArrayBuffer,\n\tcreateSha256HashFromText,\n} from './helper';\nimport { log, logError } from './logger';\nimport { e2e } from './rocketchat.e2e';\nimport { RoomManager } from '../../../client/lib/RoomManager';\nimport { roomCoordinator } from '../../../client/lib/rooms/roomCoordinator';\nimport { RoomSettingsEnum } from '../../../definition/IRoomTypeConfig';\nimport { ChatRoom, Subscriptions, Messages } from '../../models/client';\nimport { sdk } from '../../utils/client/lib/SDKClient';\nimport { t } from '../../utils/lib/i18n';\n\nconst KEY_ID = Symbol('keyID');\nconst PAUSED = Symbol('PAUSED');\n\nconst permitedMutations: any = {\n\t[E2ERoomState.NOT_STARTED]: [E2ERoomState.ESTABLISHING, E2ERoomState.DISABLED, E2ERoomState.KEYS_RECEIVED],\n\t[E2ERoomState.READY]: [E2ERoomState.DISABLED, E2ERoomState.CREATING_KEYS, E2ERoomState.WAITING_KEYS],\n\t[E2ERoomState.ERROR]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.NOT_STARTED],\n\t[E2ERoomState.WAITING_KEYS]: [E2ERoomState.KEYS_RECEIVED, E2ERoomState.ERROR, E2ERoomState.DISABLED],\n\t[E2ERoomState.ESTABLISHING]: [\n\t\tE2ERoomState.READY,\n\t\tE2ERoomState.KEYS_RECEIVED,\n\t\tE2ERoomState.ERROR,\n\t\tE2ERoomState.DISABLED,\n\t\tE2ERoomState.WAITING_KEYS,\n\t\tE2ERoomState.CREATING_KEYS,\n\t],\n};\n\nconst filterMutation = (currentState: any, nextState: any): any => {\n\tif (currentState === nextState) {\n\t\treturn nextState === E2ERoomState.ERROR;\n\t}\n\n\tif (!(currentState in permitedMutations)) {\n\t\treturn nextState;\n\t}\n\n\tif (permitedMutations[currentState].includes(nextState)) {\n\t\treturn nextState;\n\t}\n\n\treturn false;\n};\n\nexport class E2ERoom extends Emitter {\n\tstate: any = undefined;\n\n\t[PAUSED]: boolean | undefined = undefined;\n\n\t[KEY_ID]: any;\n\n\tuserId: any;\n\n\troomId: any;\n\n\ttypeOfRoom: any;\n\n\troomKeyId: any;\n\n\tgroupSessionKey: any;\n\n\toldKeys: any;\n\n\tsessionKeyExportedString: string | undefined;\n\n\tsessionKeyExported: any;\n\n\tconstructor(userId: any, room: any) {\n\t\tsuper();\n\n\t\tthis.userId = userId;\n\t\tthis.roomId = room._id;\n\t\tthis.typeOfRoom = room.t;\n\t\tthis.roomKeyId = room.e2eKeyId;\n\n\t\tthis.once(E2ERoomState.READY, async () => {\n\t\t\tawait this.decryptOldRoomKeys();\n\t\t\treturn this.decryptPendingMessages();\n\t\t});\n\t\tthis.once(E2ERoomState.READY, () => this.decryptSubscription());\n\t\tthis.on('STATE_CHANGED', (prev) => {\n\t\t\tif (this.roomId === RoomManager.opened) {\n\t\t\t\tthis.log(`[PREV: ${prev}]`, 'State CHANGED');\n\t\t\t}\n\t\t});\n\t\tthis.on('STATE_CHANGED', () => this.handshake());\n\n\t\tthis.setState(E2ERoomState.NOT_STARTED);\n\t}\n\n\tlog(...msg: unknown[]) {\n\t\tlog(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\terror(...msg: unknown[]) {\n\t\tlogError(`E2E ROOM { state: ${this.state}, rid: ${this.roomId} }`, ...msg);\n\t}\n\n\thasSessionKey() {\n\t\treturn !!this.groupSessionKey;\n\t}\n\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\tsetState(requestedState: any) {\n\t\tconst currentState = this.state;\n\t\tconst nextState = filterMutation(currentState, requestedState);\n\n\t\tif (!nextState) {\n\t\t\tthis.error(`invalid state ${currentState} -> ${requestedState}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.state = nextState;\n\t\tthis.log(currentState, '->', nextState);\n\t\tthis.emit('STATE_CHANGED', currentState);\n\t\tthis.emit(nextState, this);\n\t}\n\n\tisReady() {\n\t\treturn this.state === E2ERoomState.READY;\n\t}\n\n\tisDisabled() {\n\t\treturn this.state === E2ERoomState.DISABLED;\n\t}\n\n\tenable() {\n\t\tif (this.state === E2ERoomState.READY) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tdisable() {\n\t\tthis.setState(E2ERoomState.DISABLED);\n\t}\n\n\tpause() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', true);\n\t\tthis[PAUSED] = true;\n\t\tthis.emit('PAUSED', true);\n\t}\n\n\tresume() {\n\t\tthis.log('PAUSED', this[PAUSED], '->', false);\n\t\tthis[PAUSED] = false;\n\t\tthis.emit('PAUSED', false);\n\t}\n\n\tkeyReceived() {\n\t\tthis.setState(E2ERoomState.KEYS_RECEIVED);\n\t}\n\n\tasync shouldConvertSentMessages(message: any) {\n\t\tif (!this.isReady() || this[PAUSED]) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this[PAUSED] === undefined) {\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tthis.once('PAUSED', resolve);\n\t\t\t});\n\t\t}\n\n\t\tif (message.msg[0] === '/') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshouldConvertReceivedMessages() {\n\t\treturn this.isReady();\n\t}\n\n\tisWaitingKeys() {\n\t\treturn this.state === E2ERoomState.WAITING_KEYS;\n\t}\n\n\tget keyID() {\n\t\treturn this[KEY_ID];\n\t}\n\n\tset keyID(keyID) {\n\t\tthis[KEY_ID] = keyID;\n\t}\n\n\tasync decryptSubscription() {\n\t\tconst subscription = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (subscription?.lastMessage?.t !== 'e2e') {\n\t\t\tthis.log('decryptSubscriptions nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst message = await this.decryptMessage(subscription.lastMessage);\n\n\t\tSubscriptions.update(\n\t\t\t{\n\t\t\t\t_id: subscription._id,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlastMessage: message,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tthis.log('decryptSubscriptions Done');\n\t}\n\n\tasync decryptOldRoomKeys() {\n\t\tconst sub = Subscriptions.findOne({ rid: this.roomId });\n\n\t\tif (!sub?.oldRoomKeys || sub?.oldRoomKeys.length === 0) {\n\t\t\tthis.log('decryptOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of sub.oldRoomKeys) {\n\t\t\ttry {\n\t\t\t\tconst k = await this.decryptSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t\tkeys.push({ ...key, E2EKey: null });\n\t\t\t}\n\t\t}\n\n\t\tthis.oldKeys = keys;\n\t\tthis.log('decryptOldRoomKeys Done');\n\t}\n\n\tasync exportOldRoomKeys(oldKeys: any) {\n\t\tthis.log('exportOldRoomKeys starting');\n\t\tif (!oldKeys || oldKeys.length === 0) {\n\t\t\tthis.log('exportOldRoomKeys nothing to do');\n\t\t\treturn;\n\t\t}\n\n\t\tconst keys = [];\n\t\tfor await (const key of oldKeys) {\n\t\t\ttry {\n\t\t\t\tif (!key.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst k = await this.exportSessionKey(key.E2EKey);\n\t\t\t\tkeys.push({\n\t\t\t\t\t...key,\n\t\t\t\t\tE2EKey: k,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tthis.error(\n\t\t\t\t\t`Cannot decrypt old room key with id ${key.e2eKeyId}. This is likely because user private key changed or is missing. Skipping`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.log(`exportOldRoomKeys Done: ${keys.length} keys exported`);\n\t\treturn keys;\n\t}\n\n\tasync decryptPendingMessages() {\n\t\treturn Messages.find({ rid: this.roomId, t: 'e2e', e2e: 'pending' }).forEach(async ({ _id, ...msg }) => {\n\t\t\tMessages.update({ _id }, await this.decryptMessage(msg));\n\t\t});\n\t}\n\n\t// Initiates E2E Encryption\n\tasync handshake() {\n\t\tif (!e2e.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state !== E2ERoomState.KEYS_RECEIVED && this.state !== E2ERoomState.NOT_STARTED) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.ESTABLISHING);\n\n\t\ttry {\n\t\t\tconst groupKey = Subscriptions.findOne({ rid: this.roomId })?.E2EKey;\n\t\t\tif (groupKey) {\n\t\t\t\tawait this.importGroupKey(groupKey);\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t\tthis.error('Error fetching group key: ', error);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst room = ChatRoom.findOne({ _id: this.roomId })!;\n\t\t\t// Only room creator can set keys for room\n\t\t\tif (!room.e2eKeyId && this.userShouldCreateKeys(room)) {\n\t\t\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\t\t\tawait this.createGroupKey();\n\t\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\t\tthis.log('Requesting room key');\n\t\t\tsdk.publish('notify-room-users', [`${this.roomId}/e2ekeyRequest`, this.roomId, room.e2eKeyId]);\n\t\t} catch (error) {\n\t\t\t// this.error = error;\n\t\t\tthis.setState(E2ERoomState.ERROR);\n\t\t}\n\t}\n\n\tuserShouldCreateKeys(room: any) {\n\t\t// On DMs, we'll allow any user to set the keys\n\t\tif (room.t === 'd') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn room.u._id === this.userId;\n\t}\n\n\tisSupportedRoomType(type: any) {\n\t\treturn roomCoordinator.getRoomDirectives(type).allowRoomSettingChange({}, RoomSettingsEnum.E2E);\n\t}\n\n\tasync decryptSessionKey(key: any) {\n\t\treturn importAESKey(JSON.parse(await this.exportSessionKey(key)));\n\t}\n\n\tasync exportSessionKey(key: any) {\n\t\tkey = key.slice(12);\n\t\tkey = Base64.decode(key);\n\n\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, key);\n\t\treturn toString(decryptedKey);\n\t}\n\n\tasync importGroupKey(groupKey: any) {\n\t\tthis.log('Importing room key ->', this.roomId);\n\t\t// Get existing group key\n\t\t// const keyID = groupKey.slice(0, 12);\n\t\tgroupKey = groupKey.slice(12);\n\t\tgroupKey = Base64.decode(groupKey);\n\n\t\t// Decrypt obtained encrypted session key\n\t\ttry {\n\t\t\tconst decryptedKey = await decryptRSA(e2e.privateKey, groupKey);\n\t\t\tthis.sessionKeyExportedString = toString(decryptedKey);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\t// When a new e2e room is created, it will be initialized without an e2e key id\n\t\t// This will prevent new rooms from storing `undefined` as the keyid\n\t\tif (!this.keyID) {\n\t\t\tthis.keyID = this.roomKeyId || (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t\t}\n\n\t\t// Import session key for use.\n\t\ttry {\n\t\t\tconst key = await importAESKey(JSON.parse(this.sessionKeyExportedString!));\n\t\t\t// Key has been obtained. E2E is now in session.\n\t\t\tthis.groupSessionKey = key;\n\t\t} catch (error) {\n\t\t\tthis.error('Error importing group key: ', error);\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync createNewGroupKey() {\n\t\tthis.groupSessionKey = await generateAESKey();\n\n\t\tconst sessionKeyExported = await exportJWKKey(this.groupSessionKey);\n\t\tthis.sessionKeyExportedString = JSON.stringify(sessionKeyExported);\n\t\tthis.keyID = (await createSha256HashFromText(this.sessionKeyExportedString)).slice(0, 12);\n\t}\n\n\tasync createGroupKey() {\n\t\tthis.log('Creating room key');\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tawait sdk.call('e2e.setRoomKeyID', this.roomId, this.keyID);\n\t\t\tawait sdk.rest.post('/v1/e2e.updateGroupKey', {\n\t\t\t\trid: this.roomId,\n\t\t\t\tuid: this.userId,\n\t\t\t\tkey: await this.encryptGroupKeyForParticipant(e2e.publicKey!),\n\t\t\t} as any);\n\t\t\tawait this.encryptKeyForOtherParticipants();\n\t\t} catch (error) {\n\t\t\tthis.error('Error exporting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync resetRoomKey() {\n\t\tthis.log('Resetting room key');\n\t\tif (!e2e.publicKey) {\n\t\t\tthis.error('Cannot reset room key. No public key found.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(E2ERoomState.CREATING_KEYS);\n\t\ttry {\n\t\t\tawait this.createNewGroupKey();\n\n\t\t\tconst e2eNewKeys = { e2eKeyId: this.keyID, e2eKey: await this.encryptGroupKeyForParticipant(e2e.publicKey) };\n\n\t\t\tthis.setState(E2ERoomState.READY);\n\t\t\tthis.log(`Room key reset done for room ${this.roomId}`);\n\n\t\t\treturn e2eNewKeys;\n\t\t} catch (error) {\n\t\t\tthis.error('Error resetting group key: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tonRoomKeyReset(keyID: any) {\n\t\tthis.log(`Room keyID was reset. New keyID: ${keyID} Previous keyID: ${this.keyID}`);\n\t\tthis.setState(E2ERoomState.WAITING_KEYS);\n\t\tthis.keyID = keyID;\n\t\tthis.groupSessionKey = undefined;\n\t\tthis.sessionKeyExportedString = undefined;\n\t\tthis.sessionKeyExported = undefined;\n\t\tthis.oldKeys = undefined;\n\t}\n\n\tasync encryptKeyForOtherParticipants() {\n\t\t// Encrypt generated session key for every user in room and publish to subscription model.\n\t\ttry {\n\t\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\t\tconst users = (await sdk.call('e2e.getUsersOfRoomWithoutKey', this.roomId)).users.filter((user) => user?.e2e?.public_key);\n\n\t\t\tif (!users.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst usersSuggestedGroupKeys = { [this.roomId]: [] as any[] };\n\t\t\tfor await (const user of users) {\n\t\t\t\tconst encryptedGroupKey = await this.encryptGroupKeyForParticipant(user.e2e!.public_key!);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(user.e2e?.public_key, decryptedOldGroupKeys);\n\n\t\t\t\tusersSuggestedGroupKeys[this.roomId].push({ _id: user._id, key: encryptedGroupKey, ...(oldKeys && { oldKeys }) });\n\t\t\t}\n\n\t\t\tawait sdk.rest.post('/v1/e2e.provideUsersSuggestedGroupKeys', { usersSuggestedGroupKeys });\n\t\t} catch (error) {\n\t\t\treturn this.error('Error getting room users: ', error);\n\t\t}\n\t}\n\n\tasync encryptOldKeysForParticipant(publicKey: any, oldRoomKeys: any) {\n\t\tif (!oldRoomKeys || oldRoomKeys.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet userKey;\n\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\n\t\ttry {\n\t\t\tconst keys = [];\n\t\t\tfor await (const oldRoomKey of oldRoomKeys) {\n\t\t\t\tif (!oldRoomKey.E2EKey) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst encryptedKey = await encryptRSA(userKey, toArrayBuffer(oldRoomKey.E2EKey));\n\t\t\t\tconst encryptedKeyToString = oldRoomKey.e2eKeyId + Base64.encode(new Uint8Array(encryptedKey));\n\n\t\t\t\tkeys.push({ ...oldRoomKey, E2EKey: encryptedKeyToString });\n\t\t\t}\n\t\t\treturn keys;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\tasync encryptGroupKeyForParticipant(publicKey: string) {\n\t\tlet userKey;\n\t\ttry {\n\t\t\tuserKey = await importRSAKey(JSON.parse(publicKey), ['encrypt']);\n\t\t} catch (error) {\n\t\t\treturn this.error('Error importing user key: ', error);\n\t\t}\n\t\t// const vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\t// Encrypt session key for this user with his/her public key\n\t\ttry {\n\t\t\tconst encryptedUserKey = await encryptRSA(userKey, toArrayBuffer(this.sessionKeyExportedString));\n\t\t\tconst encryptedUserKeyToString = this.keyID + Base64.encode(new Uint8Array(encryptedUserKey));\n\t\t\treturn encryptedUserKeyToString;\n\t\t} catch (error) {\n\t\t\treturn this.error('Error encrypting user key: ', error);\n\t\t}\n\t}\n\n\t// Encrypts files before upload. I/O is in arraybuffers.\n\tasync encryptFile(file: any) {\n\t\t// if (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t// \treturn;\n\t\t// }\n\n\t\tconst fileArrayBuffer = await readFileAsArrayBuffer(file);\n\n\t\tconst hash = await sha256HashFromArrayBuffer(new Uint8Array(fileArrayBuffer));\n\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\t\tconst key = await generateAESCTRKey();\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await encryptAESCTR(vector, key, fileArrayBuffer);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\treturn this.error('Error encrypting group key: ', error);\n\t\t}\n\n\t\tconst exportedKey = await window.crypto.subtle.exportKey('jwk', key);\n\n\t\tconst fileName = await createSha256HashFromText(file.name);\n\n\t\tconst encryptedFile = new File([toArrayBuffer(result)], fileName);\n\n\t\treturn {\n\t\t\tfile: encryptedFile,\n\t\t\tkey: exportedKey,\n\t\t\tiv: Base64.encode(vector),\n\t\t\ttype: file.type,\n\t\t\thash,\n\t\t};\n\t}\n\n\t// Decrypt uploaded encrypted files. I/O is in arraybuffers.\n\tasync decryptFile(file: any, key: any, iv: any) {\n\t\tconst ivArray = Base64.decode(iv);\n\t\tconst cryptoKey = await window.crypto.subtle.importKey('jwk', key, { name: 'AES-CTR' }, true, ['encrypt', 'decrypt']);\n\n\t\treturn window.crypto.subtle.decrypt({ name: 'AES-CTR', counter: ivArray, length: 64 }, cryptoKey, file);\n\t}\n\n\t// Encrypts messages\n\tasync encryptText(data: any) {\n\t\tconst vector = crypto.getRandomValues(new Uint8Array(16));\n\n\t\ttry {\n\t\t\tconst result = await encryptAES(vector, this.groupSessionKey, data);\n\t\t\treturn this.keyID + Base64.encode(joinVectorAndEcryptedData(vector, result));\n\t\t} catch (error) {\n\t\t\tthis.error('Error encrypting message: ', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessageContent(contentToBeEncrypted: any) {\n\t\tconst data = new TextEncoder().encode(EJSON.stringify(contentToBeEncrypted));\n\n\t\treturn {\n\t\t\talgorithm: 'rc.v1.aes-sha2',\n\t\t\tciphertext: await this.encryptText(data),\n\t\t};\n\t}\n\n\t// Helper function for encryption of content\n\tasync encryptMessage(message: any) {\n\t\tconst { msg, attachments, ...rest } = message;\n\n\t\tconst content = await this.encryptMessageContent({ msg, attachments });\n\n\t\treturn {\n\t\t\t...rest,\n\t\t\tcontent,\n\t\t\tt: 'e2e',\n\t\t\te2e: 'pending',\n\t\t};\n\t}\n\n\t// Helper function for encryption of messages\n\tencrypt(message: any) {\n\t\tif (!this.isSupportedRoomType(this.typeOfRoom)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.groupSessionKey) {\n\t\t\tthrow new Error(t('E2E_Invalid_Key'));\n\t\t}\n\n\t\tconst ts = new Date();\n\n\t\tconst data = new TextEncoder().encode(\n\t\t\tEJSON.stringify({\n\t\t\t\t_id: message._id,\n\t\t\t\ttext: message.msg,\n\t\t\t\tuserId: this.userId,\n\t\t\t\tts,\n\t\t\t}),\n\t\t);\n\n\t\treturn this.encryptText(data);\n\t}\n\n\tasync decryptContent(data: any) {\n\t\tif (data.content && data.content.algorithm === 'rc.v1.aes-sha2') {\n\t\t\tconst content = await this.decrypt(data.content.ciphertext);\n\t\t\tObject.assign(data, content);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t// Decrypt messages\n\tasync decryptMessage(message: any) {\n\t\tif (message.t !== 'e2e' || message.e2e === 'done') {\n\t\t\treturn message;\n\t\t}\n\n\t\tif (message.msg) {\n\t\t\tconst data = await this.decrypt(message.msg);\n\n\t\t\tif (data?.text) {\n\t\t\t\tmessage.msg = data.text;\n\t\t\t}\n\t\t}\n\n\t\tmessage = await this.decryptContent(message);\n\n\t\treturn {\n\t\t\t...message,\n\t\t\te2e: 'done',\n\t\t};\n\t}\n\n\tasync doDecrypt(vector: any, key: any, cipherText: any) {\n\t\tconst result = await decryptAES(vector, key, cipherText);\n\t\treturn EJSON.parse(new TextDecoder('UTF-8').decode(new Uint8Array(result)));\n\t}\n\n\tasync decrypt(message: any) {\n\t\tconst keyID = message.slice(0, 12);\n\t\tmessage = message.slice(12);\n\n\t\tconst [vector, cipherText] = splitVectorAndEcryptedData(Base64.decode(message));\n\n\t\tlet oldKey = '';\n\t\tif (keyID !== this.keyID) {\n\t\t\tconst oldRoomKey = this.oldKeys?.find((key: any) => key.e2eKeyId === keyID);\n\t\t\t// Messages already contain a keyID stored with them\n\t\t\t// That means that if we cannot find a keyID for the key the message has preppended to\n\t\t\t// The message is indecipherable.\n\t\t\t// In these cases, we'll give a last shot using the current session key, which may not work\n\t\t\t// but will be enough to help with some mobile issues.\n\t\t\tif (!oldRoomKey) {\n\t\t\t\ttry {\n\t\t\t\t\treturn await this.doDecrypt(vector, this.groupSessionKey, cipherText);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\t\t\treturn { msg: t('E2E_indecipherable') };\n\t\t\t\t}\n\t\t\t}\n\t\t\toldKey = oldRoomKey.E2EKey;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.doDecrypt(vector, oldKey || this.groupSessionKey, cipherText);\n\t\t} catch (error) {\n\t\t\tthis.error('Error decrypting message: ', error, message);\n\t\t\treturn { msg: t('E2E_Key_Error') };\n\t\t}\n\t}\n\n\tprovideKeyToUser(keyId: any) {\n\t\tif (this.keyID !== keyId) {\n\t\t\treturn;\n\t\t}\n\n\t\tvoid this.encryptKeyForOtherParticipants();\n\t\tthis.setState(E2ERoomState.READY);\n\t}\n\n\tonStateChange(cb: any) {\n\t\tthis.on('STATE_CHANGED', cb);\n\t\treturn () => this.off('STATE_CHANGED', cb);\n\t}\n\n\tasync encryptGroupKeyForParticipantsWaitingForTheKeys(users: any[]) {\n\t\tif (!this.isReady()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mySub = Subscriptions.findOne({ rid: this.roomId });\n\t\tconst decryptedOldGroupKeys = await this.exportOldRoomKeys(mySub?.oldRoomKeys);\n\t\tconst usersWithKeys = await Promise.all(\n\t\t\tusers.map(async (user) => {\n\t\t\t\tconst { _id, public_key } = user;\n\t\t\t\tconst key = await this.encryptGroupKeyForParticipant(public_key);\n\t\t\t\tconst oldKeys = await this.encryptOldKeysForParticipant(public_key, decryptedOldGroupKeys);\n\t\t\t\treturn { _id, key, ...(oldKeys && { oldKeys }) };\n\t\t\t}),\n\t\t);\n\n\t\treturn usersWithKeys;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ad9c3d80923e9ade9401572e4ec7e005db84472b"}
