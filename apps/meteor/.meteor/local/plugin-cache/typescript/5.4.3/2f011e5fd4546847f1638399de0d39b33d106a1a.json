{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/message.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/message.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/message.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/message.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/message.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, Messages } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport {\n\tisPOSTLivechatMessageParams,\n\tisGETLivechatMessageIdParams,\n\tisPUTLivechatMessageIdParams,\n\tisDELETELivechatMessageIdParams,\n\tisGETLivechatMessagesHistoryRidParams,\n\tisGETLivechatMessagesParams,\n} from '@rocket.chat/rest-typings';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { loadMessageHistory } from '../../../../lib/server/functions/loadMessageHistory';\nimport { settings } from '../../../../settings/server';\nimport { normalizeMessageFileUpload } from '../../../../utils/server/functions/normalizeMessageFileUpload';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, findGuestBySource, findRoom, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/message',\n\t{ validateParams: isPOSTLivechatMessageParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { token, rid, agent, msg } = this.bodyParams;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst guest = await findGuestBySource(token, sourceType);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tsettings.get('Livechat_enable_message_character_limit') &&\n\t\t\t\tmsg.length > parseInt(settings.get('Livechat_message_character_limit'))\n\t\t\t) {\n\t\t\t\tthrow new Error('message-length-exceeds-character-limit');\n\t\t\t}\n\n\t\t\tif (!guest.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, { type: sourceType });\n\t\t\t}\n\n\t\t\tconst _id = this.bodyParams._id || Random.id();\n\n\t\t\tconst sendMessage = {\n\t\t\t\tguest,\n\t\t\t\tmessage: {\n\t\t\t\t\t_id,\n\t\t\t\t\trid,\n\t\t\t\t\tmsg,\n\t\t\t\t\ttoken,\n\t\t\t\t},\n\t\t\t\tagent,\n\t\t\t\troomInfo: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst result = await LivechatTyped.sendMessage(sendMessage);\n\t\t\tif (result) {\n\t\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\t\tif (!message) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\t\t\t\treturn API.v1.success({ message });\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/message/:_id',\n\t{ validateParams: { GET: isGETLivechatMessageIdParams, PUT: isPUTLivechatMessageIdParams, DELETE: isDELETELivechatMessageIdParams } },\n\t{\n\t\tasync get() {\n\t\t\tconst { token, rid } = this.queryParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneByRoomIdAndMessageId(rid, _id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tif (message.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\n\t\tasync put() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(_id);\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.updateMessage({\n\t\t\t\tguest,\n\t\t\t\tmessage: { _id: msg._id, msg: this.bodyParams.msg, rid: msg.rid },\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tif (message?.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\t\tasync delete() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.deleteMessage({ guest, message });\n\t\t\tif (result) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tts: new Date().toISOString(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages.history/:rid',\n\t{ validateParams: isGETLivechatMessagesHistoryRidParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset } = await getPaginationItems(this.queryParams);\n\t\t\tconst { token } = this.queryParams;\n\t\t\tconst { rid } = this.urlParams;\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new Error('error-token-param-not-provided');\n\t\t\t}\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet ls = undefined;\n\t\t\tif (this.queryParams.ls) {\n\t\t\t\tls = new Date(this.queryParams.ls);\n\t\t\t}\n\n\t\t\tlet end = undefined;\n\t\t\tif (this.queryParams.end) {\n\t\t\t\tend = new Date(this.queryParams.end);\n\t\t\t}\n\n\t\t\tlet limit = 20;\n\t\t\tif (this.queryParams.limit) {\n\t\t\t\tlimit = parseInt(`${this.queryParams.limit}`, 10);\n\t\t\t}\n\n\t\t\tconst history = await loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\toffset,\n\t\t\t});\n\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\n\t\t\treturn API.v1.success({ messages });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages',\n\t{ authRequired: true, validateParams: isGETLivechatMessagesParams },\n\t{\n\t\tasync post() {\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t\t{ token: visitorToken, sourceFilter: { 'source.type': sourceType } },\n\t\t\t\t{},\n\t\t\t);\n\t\t\tlet rid: string;\n\t\t\tif (visitor) {\n\t\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n\t\t\t\tif (rooms && rooms.length > 0) {\n\t\t\t\t\trid = rooms[0]._id;\n\t\t\t\t} else {\n\t\t\t\t\trid = Random.id();\n\t\t\t\t}\n\n\t\t\t\tif (!visitor.source) {\n\t\t\t\t\tawait LivechatVisitors.setSourceById(visitor._id, { type: sourceType });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trid = Random.id();\n\n\t\t\t\tconst guest: typeof this.bodyParams.visitor & { connectionData?: unknown; source?: IOmnichannelSource } = this.bodyParams.visitor;\n\t\t\t\tguest.connectionData = normalizeHttpHeaderData(this.request.headers);\n\t\t\t\tguest.source = { type: sourceType };\n\n\t\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\t\tif (!visitor) {\n\t\t\t\t\tthrow new Error('error-livechat-visitor-registration');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst guest = visitor;\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-token');\n\t\t\t}\n\n\t\t\tconst sentMessages = await Promise.all(\n\t\t\t\tthis.bodyParams.messages.map(async (message: { msg: string }): Promise<{ username: string; msg: string; ts: number }> => {\n\t\t\t\t\tconst sendMessage = {\n\t\t\t\t\t\tguest,\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttoken: visitorToken,\n\t\t\t\t\t\t\tmsg: message.msg,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troomInfo: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst sentMessage = await LivechatTyped.sendMessage(sendMessage);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tusername: sentMessage.u.username,\n\t\t\t\t\t\tmsg: sentMessage.msg,\n\t\t\t\t\t\tts: sentMessage.ts,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: sentMessages,\n\t\t\t});\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/message.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/message.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/message.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/message.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, Messages } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport {\n\tisPOSTLivechatMessageParams,\n\tisGETLivechatMessageIdParams,\n\tisPUTLivechatMessageIdParams,\n\tisDELETELivechatMessageIdParams,\n\tisGETLivechatMessagesHistoryRidParams,\n\tisGETLivechatMessagesParams,\n} from '@rocket.chat/rest-typings';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { loadMessageHistory } from '../../../../lib/server/functions/loadMessageHistory';\nimport { settings } from '../../../../settings/server';\nimport { normalizeMessageFileUpload } from '../../../../utils/server/functions/normalizeMessageFileUpload';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, findGuestBySource, findRoom, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/message',\n\t{ validateParams: isPOSTLivechatMessageParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { token, rid, agent, msg } = this.bodyParams;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst guest = await findGuestBySource(token, sourceType);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tsettings.get('Livechat_enable_message_character_limit') &&\n\t\t\t\tmsg.length > parseInt(settings.get('Livechat_message_character_limit'))\n\t\t\t) {\n\t\t\t\tthrow new Error('message-length-exceeds-character-limit');\n\t\t\t}\n\n\t\t\tif (!guest.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, { type: sourceType });\n\t\t\t}\n\n\t\t\tconst _id = this.bodyParams._id || Random.id();\n\n\t\t\tconst sendMessage = {\n\t\t\t\tguest,\n\t\t\t\tmessage: {\n\t\t\t\t\t_id,\n\t\t\t\t\trid,\n\t\t\t\t\tmsg,\n\t\t\t\t\ttoken,\n\t\t\t\t},\n\t\t\t\tagent,\n\t\t\t\troomInfo: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst result = await LivechatTyped.sendMessage(sendMessage);\n\t\t\tif (result) {\n\t\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\t\tif (!message) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\t\t\t\treturn API.v1.success({ message });\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/message/:_id',\n\t{ validateParams: { GET: isGETLivechatMessageIdParams, PUT: isPUTLivechatMessageIdParams, DELETE: isDELETELivechatMessageIdParams } },\n\t{\n\t\tasync get() {\n\t\t\tconst { token, rid } = this.queryParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneByRoomIdAndMessageId(rid, _id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tif (message.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\n\t\tasync put() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(_id);\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.updateMessage({\n\t\t\t\tguest,\n\t\t\t\tmessage: { _id: msg._id, msg: this.bodyParams.msg, rid: msg.rid },\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tif (message?.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\t\tasync delete() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.deleteMessage({ guest, message });\n\t\t\tif (result) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tts: new Date().toISOString(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages.history/:rid',\n\t{ validateParams: isGETLivechatMessagesHistoryRidParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset } = await getPaginationItems(this.queryParams);\n\t\t\tconst { token } = this.queryParams;\n\t\t\tconst { rid } = this.urlParams;\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new Error('error-token-param-not-provided');\n\t\t\t}\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet ls = undefined;\n\t\t\tif (this.queryParams.ls) {\n\t\t\t\tls = new Date(this.queryParams.ls);\n\t\t\t}\n\n\t\t\tlet end = undefined;\n\t\t\tif (this.queryParams.end) {\n\t\t\t\tend = new Date(this.queryParams.end);\n\t\t\t}\n\n\t\t\tlet limit = 20;\n\t\t\tif (this.queryParams.limit) {\n\t\t\t\tlimit = parseInt(`${this.queryParams.limit}`, 10);\n\t\t\t}\n\n\t\t\tconst history = await loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\toffset,\n\t\t\t});\n\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\n\t\t\treturn API.v1.success({ messages });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages',\n\t{ authRequired: true, validateParams: isGETLivechatMessagesParams },\n\t{\n\t\tasync post() {\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t\t{ token: visitorToken, sourceFilter: { 'source.type': sourceType } },\n\t\t\t\t{},\n\t\t\t);\n\t\t\tlet rid: string;\n\t\t\tif (visitor) {\n\t\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n\t\t\t\tif (rooms && rooms.length > 0) {\n\t\t\t\t\trid = rooms[0]._id;\n\t\t\t\t} else {\n\t\t\t\t\trid = Random.id();\n\t\t\t\t}\n\n\t\t\t\tif (!visitor.source) {\n\t\t\t\t\tawait LivechatVisitors.setSourceById(visitor._id, { type: sourceType });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trid = Random.id();\n\n\t\t\t\tconst guest: typeof this.bodyParams.visitor & { connectionData?: unknown; source?: IOmnichannelSource } = this.bodyParams.visitor;\n\t\t\t\tguest.connectionData = normalizeHttpHeaderData(this.request.headers);\n\t\t\t\tguest.source = { type: sourceType };\n\n\t\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\t\tif (!visitor) {\n\t\t\t\t\tthrow new Error('error-livechat-visitor-registration');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst guest = visitor;\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-token');\n\t\t\t}\n\n\t\t\tconst sentMessages = await Promise.all(\n\t\t\t\tthis.bodyParams.messages.map(async (message: { msg: string }): Promise<{ username: string; msg: string; ts: number }> => {\n\t\t\t\t\tconst sendMessage = {\n\t\t\t\t\t\tguest,\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttoken: visitorToken,\n\t\t\t\t\t\t\tmsg: message.msg,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troomInfo: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst sentMessage = await LivechatTyped.sendMessage(sendMessage);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tusername: sentMessage.u.username,\n\t\t\t\t\t\tmsg: sentMessage.msg,\n\t\t\t\t\t\tts: sentMessage.ts,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: sentMessages,\n\t\t\t});\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let OmnichannelSourceType;\n    module.link(\"@rocket.chat/core-typings\", {\n      OmnichannelSourceType(v) {\n        OmnichannelSourceType = v;\n      }\n    }, 0);\n    let LivechatVisitors, LivechatRooms, Messages;\n    module.link(\"@rocket.chat/models\", {\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      },\n      LivechatRooms(v) {\n        LivechatRooms = v;\n      },\n      Messages(v) {\n        Messages = v;\n      }\n    }, 1);\n    let Random;\n    module.link(\"@rocket.chat/random\", {\n      Random(v) {\n        Random = v;\n      }\n    }, 2);\n    let isPOSTLivechatMessageParams, isGETLivechatMessageIdParams, isPUTLivechatMessageIdParams, isDELETELivechatMessageIdParams, isGETLivechatMessagesHistoryRidParams, isGETLivechatMessagesParams;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isPOSTLivechatMessageParams(v) {\n        isPOSTLivechatMessageParams = v;\n      },\n      isGETLivechatMessageIdParams(v) {\n        isGETLivechatMessageIdParams = v;\n      },\n      isPUTLivechatMessageIdParams(v) {\n        isPUTLivechatMessageIdParams = v;\n      },\n      isDELETELivechatMessageIdParams(v) {\n        isDELETELivechatMessageIdParams = v;\n      },\n      isGETLivechatMessagesHistoryRidParams(v) {\n        isGETLivechatMessagesHistoryRidParams = v;\n      },\n      isGETLivechatMessagesParams(v) {\n        isGETLivechatMessagesParams = v;\n      }\n    }, 3);\n    let callbacks;\n    module.link(\"../../../../../lib/callbacks\", {\n      callbacks(v) {\n        callbacks = v;\n      }\n    }, 4);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 5);\n    let getPaginationItems;\n    module.link(\"../../../../api/server/helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 6);\n    let isWidget;\n    module.link(\"../../../../api/server/helpers/isWidget\", {\n      isWidget(v) {\n        isWidget = v;\n      }\n    }, 7);\n    let loadMessageHistory;\n    module.link(\"../../../../lib/server/functions/loadMessageHistory\", {\n      loadMessageHistory(v) {\n        loadMessageHistory = v;\n      }\n    }, 8);\n    let settings;\n    module.link(\"../../../../settings/server\", {\n      settings(v) {\n        settings = v;\n      }\n    }, 9);\n    let normalizeMessageFileUpload;\n    module.link(\"../../../../utils/server/functions/normalizeMessageFileUpload\", {\n      normalizeMessageFileUpload(v) {\n        normalizeMessageFileUpload = v;\n      }\n    }, 10);\n    let LivechatTyped;\n    module.link(\"../../lib/LivechatTyped\", {\n      Livechat(v) {\n        LivechatTyped = v;\n      }\n    }, 11);\n    let findGuest, findGuestBySource, findRoom, normalizeHttpHeaderData;\n    module.link(\"../lib/livechat\", {\n      findGuest(v) {\n        findGuest = v;\n      },\n      findGuestBySource(v) {\n        findGuestBySource = v;\n      },\n      findRoom(v) {\n        findRoom = v;\n      },\n      normalizeHttpHeaderData(v) {\n        normalizeHttpHeaderData = v;\n      }\n    }, 12);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('livechat/message', {\n      validateParams: isPOSTLivechatMessageParams\n    }, {\n      async post() {\n        const {\n          token,\n          rid,\n          agent,\n          msg\n        } = this.bodyParams;\n        const sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n        const guest = await findGuestBySource(token, sourceType);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        if (!room.open) {\n          throw new Error('room-closed');\n        }\n        if (settings.get('Livechat_enable_message_character_limit') && msg.length > parseInt(settings.get('Livechat_message_character_limit'))) {\n          throw new Error('message-length-exceeds-character-limit');\n        }\n        if (!guest.source) {\n          await LivechatVisitors.setSourceById(guest._id, {\n            type: sourceType\n          });\n        }\n        const _id = this.bodyParams._id || Random.id();\n        const sendMessage = {\n          guest,\n          message: {\n            _id,\n            rid,\n            msg,\n            token\n          },\n          agent,\n          roomInfo: {\n            source: {\n              type: sourceType\n            }\n          }\n        };\n        const result = await LivechatTyped.sendMessage(sendMessage);\n        if (result) {\n          const message = await Messages.findOneById(_id);\n          if (!message) {\n            return API.v1.failure();\n          }\n          return API.v1.success({\n            message\n          });\n        }\n        return API.v1.failure();\n      }\n    });\n    API.v1.addRoute('livechat/message/:_id', {\n      validateParams: {\n        GET: isGETLivechatMessageIdParams,\n        PUT: isPUTLivechatMessageIdParams,\n        DELETE: isDELETELivechatMessageIdParams\n      }\n    }, {\n      async get() {\n        const {\n          token,\n          rid\n        } = this.queryParams;\n        const {\n          _id\n        } = this.urlParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        let message = await Messages.findOneByRoomIdAndMessageId(rid, _id);\n        if (!message) {\n          throw new Error('invalid-message');\n        }\n        if (message.file) {\n          message = _objectSpread(_objectSpread({}, await normalizeMessageFileUpload(message)), {\n            _updatedAt: message._updatedAt\n          });\n        }\n        if (!message) {\n          throw new Error('invalid-message');\n        }\n        return API.v1.success({\n          message\n        });\n      },\n      async put() {\n        var _message;\n        const {\n          token,\n          rid\n        } = this.bodyParams;\n        const {\n          _id\n        } = this.urlParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const msg = await Messages.findOneById(_id);\n        if (!msg) {\n          throw new Error('invalid-message');\n        }\n        const result = await LivechatTyped.updateMessage({\n          guest,\n          message: {\n            _id: msg._id,\n            msg: this.bodyParams.msg,\n            rid: msg.rid\n          }\n        });\n        if (!result) {\n          return API.v1.failure();\n        }\n        let message = await Messages.findOneById(_id);\n        if (!message) {\n          return API.v1.failure();\n        }\n        if ((_message = message) !== null && _message !== void 0 && _message.file) {\n          message = _objectSpread(_objectSpread({}, await normalizeMessageFileUpload(message)), {\n            _updatedAt: message._updatedAt\n          });\n        }\n        if (!message) {\n          throw new Error('invalid-message');\n        }\n        return API.v1.success({\n          message\n        });\n      },\n      async delete() {\n        const {\n          token,\n          rid\n        } = this.bodyParams;\n        const {\n          _id\n        } = this.urlParams;\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        const message = await Messages.findOneById(_id);\n        if (!message) {\n          throw new Error('invalid-message');\n        }\n        const result = await LivechatTyped.deleteMessage({\n          guest,\n          message\n        });\n        if (result) {\n          return API.v1.success({\n            message: {\n              _id,\n              ts: new Date().toISOString()\n            }\n          });\n        }\n        return API.v1.failure();\n      }\n    });\n    API.v1.addRoute('livechat/messages.history/:rid', {\n      validateParams: isGETLivechatMessagesHistoryRidParams\n    }, {\n      async get() {\n        const {\n          offset\n        } = await getPaginationItems(this.queryParams);\n        const {\n          token\n        } = this.queryParams;\n        const {\n          rid\n        } = this.urlParams;\n        if (!token) {\n          throw new Error('error-token-param-not-provided');\n        }\n        const guest = await findGuest(token);\n        if (!guest) {\n          throw new Error('invalid-token');\n        }\n        const room = await findRoom(token, rid);\n        if (!room) {\n          throw new Error('invalid-room');\n        }\n        let ls = undefined;\n        if (this.queryParams.ls) {\n          ls = new Date(this.queryParams.ls);\n        }\n        let end = undefined;\n        if (this.queryParams.end) {\n          end = new Date(this.queryParams.end);\n        }\n        let limit = 20;\n        if (this.queryParams.limit) {\n          limit = parseInt(\"\".concat(this.queryParams.limit), 10);\n        }\n        const history = await loadMessageHistory({\n          userId: guest._id,\n          rid,\n          end,\n          limit,\n          ls,\n          offset\n        });\n        const messages = await Promise.all(history.messages.map(message => normalizeMessageFileUpload(message)));\n        return API.v1.success({\n          messages\n        });\n      }\n    });\n    API.v1.addRoute('livechat/messages', {\n      authRequired: true,\n      validateParams: isGETLivechatMessagesParams\n    }, {\n      async post() {\n        const visitorToken = this.bodyParams.visitor.token;\n        const sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n        const visitor = await LivechatVisitors.getVisitorByTokenAndSource({\n          token: visitorToken,\n          sourceFilter: {\n            'source.type': sourceType\n          }\n        }, {});\n        let rid;\n        if (visitor) {\n          const extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n          const rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n          if (rooms && rooms.length > 0) {\n            rid = rooms[0]._id;\n          } else {\n            rid = Random.id();\n          }\n          if (!visitor.source) {\n            await LivechatVisitors.setSourceById(visitor._id, {\n              type: sourceType\n            });\n          }\n        } else {\n          rid = Random.id();\n          const guest = this.bodyParams.visitor;\n          guest.connectionData = normalizeHttpHeaderData(this.request.headers);\n          guest.source = {\n            type: sourceType\n          };\n          const visitor = await LivechatTyped.registerGuest(guest);\n          if (!visitor) {\n            throw new Error('error-livechat-visitor-registration');\n          }\n        }\n        const guest = visitor;\n        if (!guest) {\n          throw new Error('error-invalid-token');\n        }\n        const sentMessages = await Promise.all(this.bodyParams.messages.map(async message => {\n          const sendMessage = {\n            guest,\n            message: {\n              _id: Random.id(),\n              rid,\n              token: visitorToken,\n              msg: message.msg\n            },\n            roomInfo: {\n              source: {\n                type: sourceType\n              }\n            }\n          };\n          const sentMessage = await LivechatTyped.sendMessage(sendMessage);\n          return {\n            username: sentMessage.u.username,\n            msg: sentMessage.msg,\n            ts: sentMessage.ts\n          };\n        }));\n        return API.v1.success({\n          messages: sentMessages\n        });\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","OmnichannelSourceType","LivechatVisitors","LivechatRooms","Messages","Random","isPOSTLivechatMessageParams","isGETLivechatMessageIdParams","isPUTLivechatMessageIdParams","isDELETELivechatMessageIdParams","isGETLivechatMessagesHistoryRidParams","isGETLivechatMessagesParams","callbacks","API","getPaginationItems","isWidget","loadMessageHistory","settings","normalizeMessageFileUpload","LivechatTyped","Livechat","findGuest","findGuestBySource","findRoom","normalizeHttpHeaderData","__reifyWaitForDeps__","v1","addRoute","validateParams","post","token","rid","agent","msg","bodyParams","sourceType","request","headers","WIDGET","guest","Error","room","open","get","length","parseInt","source","setSourceById","_id","type","id","sendMessage","message","roomInfo","result","findOneById","failure","success","GET","PUT","DELETE","queryParams","urlParams","findOneByRoomIdAndMessageId","file","_updatedAt","put","_message","updateMessage","delete","deleteMessage","ts","Date","toISOString","offset","ls","undefined","end","limit","concat","history","userId","messages","Promise","all","map","authRequired","visitorToken","visitor","getVisitorByTokenAndSource","sourceFilter","extraQuery","run","rooms","findOpenByVisitorToken","toArray","connectionData","registerGuest","sentMessages","sentMessage","username","u","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/api/v1/message.ts"],"sourcesContent":["import type { IOmnichannelSource } from '@rocket.chat/core-typings';\nimport { OmnichannelSourceType } from '@rocket.chat/core-typings';\nimport { LivechatVisitors, LivechatRooms, Messages } from '@rocket.chat/models';\nimport { Random } from '@rocket.chat/random';\nimport {\n\tisPOSTLivechatMessageParams,\n\tisGETLivechatMessageIdParams,\n\tisPUTLivechatMessageIdParams,\n\tisDELETELivechatMessageIdParams,\n\tisGETLivechatMessagesHistoryRidParams,\n\tisGETLivechatMessagesParams,\n} from '@rocket.chat/rest-typings';\n\nimport { callbacks } from '../../../../../lib/callbacks';\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { isWidget } from '../../../../api/server/helpers/isWidget';\nimport { loadMessageHistory } from '../../../../lib/server/functions/loadMessageHistory';\nimport { settings } from '../../../../settings/server';\nimport { normalizeMessageFileUpload } from '../../../../utils/server/functions/normalizeMessageFileUpload';\nimport { Livechat as LivechatTyped } from '../../lib/LivechatTyped';\nimport { findGuest, findGuestBySource, findRoom, normalizeHttpHeaderData } from '../lib/livechat';\n\nAPI.v1.addRoute(\n\t'livechat/message',\n\t{ validateParams: isPOSTLivechatMessageParams },\n\t{\n\t\tasync post() {\n\t\t\tconst { token, rid, agent, msg } = this.bodyParams;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst guest = await findGuestBySource(token, sourceType);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tif (!room.open) {\n\t\t\t\tthrow new Error('room-closed');\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tsettings.get('Livechat_enable_message_character_limit') &&\n\t\t\t\tmsg.length > parseInt(settings.get('Livechat_message_character_limit'))\n\t\t\t) {\n\t\t\t\tthrow new Error('message-length-exceeds-character-limit');\n\t\t\t}\n\n\t\t\tif (!guest.source) {\n\t\t\t\tawait LivechatVisitors.setSourceById(guest._id, { type: sourceType });\n\t\t\t}\n\n\t\t\tconst _id = this.bodyParams._id || Random.id();\n\n\t\t\tconst sendMessage = {\n\t\t\t\tguest,\n\t\t\t\tmessage: {\n\t\t\t\t\t_id,\n\t\t\t\t\trid,\n\t\t\t\t\tmsg,\n\t\t\t\t\ttoken,\n\t\t\t\t},\n\t\t\t\tagent,\n\t\t\t\troomInfo: {\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst result = await LivechatTyped.sendMessage(sendMessage);\n\t\t\tif (result) {\n\t\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\t\tif (!message) {\n\t\t\t\t\treturn API.v1.failure();\n\t\t\t\t}\n\t\t\t\treturn API.v1.success({ message });\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/message/:_id',\n\t{ validateParams: { GET: isGETLivechatMessageIdParams, PUT: isPUTLivechatMessageIdParams, DELETE: isDELETELivechatMessageIdParams } },\n\t{\n\t\tasync get() {\n\t\t\tconst { token, rid } = this.queryParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneByRoomIdAndMessageId(rid, _id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tif (message.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\n\t\tasync put() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst msg = await Messages.findOneById(_id);\n\t\t\tif (!msg) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.updateMessage({\n\t\t\t\tguest,\n\t\t\t\tmessage: { _id: msg._id, msg: this.bodyParams.msg, rid: msg.rid },\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tlet message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\treturn API.v1.failure();\n\t\t\t}\n\n\t\t\tif (message?.file) {\n\t\t\t\tmessage = { ...(await normalizeMessageFileUpload(message)), ...{ _updatedAt: message._updatedAt } };\n\t\t\t}\n\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\treturn API.v1.success({ message });\n\t\t},\n\t\tasync delete() {\n\t\t\tconst { token, rid } = this.bodyParams;\n\t\t\tconst { _id } = this.urlParams;\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tconst message = await Messages.findOneById(_id);\n\t\t\tif (!message) {\n\t\t\t\tthrow new Error('invalid-message');\n\t\t\t}\n\n\t\t\tconst result = await LivechatTyped.deleteMessage({ guest, message });\n\t\t\tif (result) {\n\t\t\t\treturn API.v1.success({\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\t_id,\n\t\t\t\t\t\tts: new Date().toISOString(),\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn API.v1.failure();\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages.history/:rid',\n\t{ validateParams: isGETLivechatMessagesHistoryRidParams },\n\t{\n\t\tasync get() {\n\t\t\tconst { offset } = await getPaginationItems(this.queryParams);\n\t\t\tconst { token } = this.queryParams;\n\t\t\tconst { rid } = this.urlParams;\n\n\t\t\tif (!token) {\n\t\t\t\tthrow new Error('error-token-param-not-provided');\n\t\t\t}\n\n\t\t\tconst guest = await findGuest(token);\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('invalid-token');\n\t\t\t}\n\n\t\t\tconst room = await findRoom(token, rid);\n\t\t\tif (!room) {\n\t\t\t\tthrow new Error('invalid-room');\n\t\t\t}\n\n\t\t\tlet ls = undefined;\n\t\t\tif (this.queryParams.ls) {\n\t\t\t\tls = new Date(this.queryParams.ls);\n\t\t\t}\n\n\t\t\tlet end = undefined;\n\t\t\tif (this.queryParams.end) {\n\t\t\t\tend = new Date(this.queryParams.end);\n\t\t\t}\n\n\t\t\tlet limit = 20;\n\t\t\tif (this.queryParams.limit) {\n\t\t\t\tlimit = parseInt(`${this.queryParams.limit}`, 10);\n\t\t\t}\n\n\t\t\tconst history = await loadMessageHistory({\n\t\t\t\tuserId: guest._id,\n\t\t\t\trid,\n\t\t\t\tend,\n\t\t\t\tlimit,\n\t\t\t\tls,\n\t\t\t\toffset,\n\t\t\t});\n\n\t\t\tconst messages = await Promise.all(history.messages.map((message) => normalizeMessageFileUpload(message)));\n\n\t\t\treturn API.v1.success({ messages });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'livechat/messages',\n\t{ authRequired: true, validateParams: isGETLivechatMessagesParams },\n\t{\n\t\tasync post() {\n\t\t\tconst visitorToken = this.bodyParams.visitor.token;\n\t\t\tconst sourceType = isWidget(this.request.headers) ? OmnichannelSourceType.WIDGET : OmnichannelSourceType.API;\n\n\t\t\tconst visitor = await LivechatVisitors.getVisitorByTokenAndSource(\n\t\t\t\t{ token: visitorToken, sourceFilter: { 'source.type': sourceType } },\n\t\t\t\t{},\n\t\t\t);\n\t\t\tlet rid: string;\n\t\t\tif (visitor) {\n\t\t\t\tconst extraQuery = await callbacks.run('livechat.applyRoomRestrictions', {});\n\t\t\t\tconst rooms = await LivechatRooms.findOpenByVisitorToken(visitorToken, {}, extraQuery).toArray();\n\t\t\t\tif (rooms && rooms.length > 0) {\n\t\t\t\t\trid = rooms[0]._id;\n\t\t\t\t} else {\n\t\t\t\t\trid = Random.id();\n\t\t\t\t}\n\n\t\t\t\tif (!visitor.source) {\n\t\t\t\t\tawait LivechatVisitors.setSourceById(visitor._id, { type: sourceType });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trid = Random.id();\n\n\t\t\t\tconst guest: typeof this.bodyParams.visitor & { connectionData?: unknown; source?: IOmnichannelSource } = this.bodyParams.visitor;\n\t\t\t\tguest.connectionData = normalizeHttpHeaderData(this.request.headers);\n\t\t\t\tguest.source = { type: sourceType };\n\n\t\t\t\tconst visitor = await LivechatTyped.registerGuest(guest);\n\t\t\t\tif (!visitor) {\n\t\t\t\t\tthrow new Error('error-livechat-visitor-registration');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst guest = visitor;\n\t\t\tif (!guest) {\n\t\t\t\tthrow new Error('error-invalid-token');\n\t\t\t}\n\n\t\t\tconst sentMessages = await Promise.all(\n\t\t\t\tthis.bodyParams.messages.map(async (message: { msg: string }): Promise<{ username: string; msg: string; ts: number }> => {\n\t\t\t\t\tconst sendMessage = {\n\t\t\t\t\t\tguest,\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t_id: Random.id(),\n\t\t\t\t\t\t\trid,\n\t\t\t\t\t\t\ttoken: visitorToken,\n\t\t\t\t\t\t\tmsg: message.msg,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troomInfo: {\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\ttype: sourceType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tconst sentMessage = await LivechatTyped.sendMessage(sendMessage);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tusername: sentMessage.u.username,\n\t\t\t\t\t\tmsg: sentMessage.msg,\n\t\t\t\t\t\tts: sentMessage.ts,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\treturn API.v1.success({\n\t\t\t\tmessages: sentMessages,\n\t\t\t});\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2f011e5fd4546847f1638399de0d39b33d106a1a"}
