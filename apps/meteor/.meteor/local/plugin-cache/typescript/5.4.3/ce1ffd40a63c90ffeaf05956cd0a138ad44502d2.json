{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/cron/federation.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/cron/federation.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/cron/federation.ts","inputSourceMap":{"version":3,"file":"server/cron/federation.ts","sourceRoot":"","sources":["server/cron/federation.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,kDAAkD,CAAC;AAC1F,OAAO,EAAE,aAAa,EAAE,MAAM,qCAAqC,CAAC;AACpE,OAAO,EAAE,mBAAmB,EAAE,MAAM,qDAAqD,CAAC;AAC1F,OAAO,EAAE,0BAA0B,EAAE,MAAM,yCAAyC,CAAC;AACrF,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAEvE,KAAK,UAAU,aAAa,CAAC,EAAU,EAAE,KAA0B;IAClE,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;QACpB,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAEjC,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,MAAM,gBAAgB,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC;aAAM,CAAC;YACP,cAAc;YACd,CAAC,MAAM,QAAQ,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,aAAa,IAAI,KAAK,0BAA0B,CAAC,EAAE,CAAC,CAAC;QAClG,CAAC;IACF,CAAC;SAAM,CAAC;QACP,MAAM,QAAQ,CAAC,eAAe,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;AACF,CAAC;AAED,KAAK,UAAU,aAAa;IAC3B,mBAAmB;IACnB,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAW,CAAC;IACnD,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,kBAAkB,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAEjD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAW,CAAC;IAErE,uBAAuB;IACvB,IAAI,CAAC;QACJ,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,yBAAyB,gBAAgB,EAAE,CAAC,CAAC;QAClF,MAAM,aAAa,CAAC,iCAAiC,EAAE,WAAW,CAAC,CAAC;IACrE,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,MAAM,aAAa,CAAC,iCAAiC,EAAE,IAAI,CAAC,CAAC;IAC9D,CAAC;IAED,gCAAgC;IAChC,IAAI,CAAC;QACJ,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,2BAA2B,gBAAgB,EAAE,CAAC,CAAC;QACpF,MAAM,aAAa,CAAC,gCAAgC,EAAE,WAAW,CAAC,CAAC;IACpE,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,MAAM,aAAa,CAAC,gCAAgC,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,gBAAgB;IAChB,IAAI,CAAC;QACJ,iDAAiD;QACjD,MAAM,QAAQ,GAAI,QAAQ,CAAC,GAAG,CAAC,gCAAgC,CAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAEzG,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,gBAAgB,QAAQ,IAAI,gBAAgB,EAAE,CAAC,CAAC;QACrF,MAAM,aAAa,CAAC,wBAAwB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5E,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,MAAM,aAAa,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,gCAAgC;IAChC,IAAI,CAAC;QACJ,KAAK,aAAa,CAAC,CAAC,mBAAmB,EAAE,CAAC,EAAE;YAC3C,IAAI,EAAE,UAAU,CAAC,IAAI;SACrB,CAAC,CAAC;QAEH,MAAM,aAAa,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACd,MAAM,aAAa,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,4DAA4D;IAC5D,IAAI,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAY,EAAE,CAAC;QACnD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAErD,MAAM,aAAa,CAAC,sBAAsB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;AACF,CAAC;AAED,gEAAgE;AAChE,MAAM,CAAC,KAAK,UAAU,cAAc;IACnC,MAAM,IAAI,GAAG,YAAY,CAAC;IAE1B,QAAQ,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;QACpD,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAED,MAAM,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,KAAK,IAAI,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { SettingValue } from '@rocket.chat/core-typings';\nimport { eventTypes } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users, Settings } from '@rocket.chat/models';\n\nimport { resolveSRV, resolveTXT } from '../../app/federation/server/functions/resolveDNS';\nimport { dispatchEvent } from '../../app/federation/server/handler';\nimport { getFederationDomain } from '../../app/federation/server/lib/getFederationDomain';\nimport { notifyOnSettingChangedById } from '../../app/lib/server/lib/notifyListener';\nimport { settings, settingsRegistry } from '../../app/settings/server';\n\nasync function updateSetting(id: string, value: SettingValue | null): Promise<void> {\n\tif (value !== null) {\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tawait settingsRegistry.add(id, value);\n\t\t} else {\n\t\t\t// TODO: audit\n\t\t\t(await Settings.updateValueById(id, value)).modifiedCount && void notifyOnSettingChangedById(id);\n\t\t}\n\t} else {\n\t\tawait Settings.updateValueById(id, null);\n\t}\n}\n\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst rocketChatProtocol = protocol.slice(0, -1);\n\n\tconst federationDomain = settings.get('FEDERATION_Domain') as string;\n\n\t// Load public key info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-public-key.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n\t}\n\n\t// Load legacy tcp protocol info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-tcp-protocol.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', null);\n\t}\n\n\t// Load SRV info\n\ttry {\n\t\t// If there is a protocol entry on DNS, we use it\n\t\tconst protocol = (settings.get('FEDERATION_ResolvedProtocolTXT') as string) ? 'tcp' : rocketChatProtocol;\n\n\t\tconst resolvedSRV = await resolveSRV(`_rocketchat._${protocol}.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', '{}');\n\t}\n\n\t// Test if federation is healthy\n\ttry {\n\t\tvoid dispatchEvent([getFederationDomain()], {\n\t\t\ttype: eventTypes.PING,\n\t\t});\n\n\t\tawait updateSetting('FEDERATION_Healthy', true);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_Healthy', false);\n\t}\n\n\t// If federation is healthy, check if there are remote users\n\tif (settings.get('FEDERATION_Healthy') as boolean) {\n\t\tconst user = await Users.findOne({ isRemote: true });\n\n\t\tawait updateSetting('FEDERATION_Populated', !!user);\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport async function federationCron(): Promise<void> {\n\tconst name = 'Federation';\n\n\tsettings.watch('FEDERATION_Enabled', async (value) => {\n\t\tif (!value) {\n\t\t\treturn cronJobs.remove(name);\n\t\t}\n\n\t\tawait cronJobs.add(name, '* * * * *', async () => runFederation());\n\t});\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/cron/federation.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/cron/federation.ts","inputSourceMap":{"version":3,"file":"server/cron/federation.ts","sourceRoot":"","sources":["server/cron/federation.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SettingValue } from '@rocket.chat/core-typings';\nimport { eventTypes } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users, Settings } from '@rocket.chat/models';\n\nimport { resolveSRV, resolveTXT } from '../../app/federation/server/functions/resolveDNS';\nimport { dispatchEvent } from '../../app/federation/server/handler';\nimport { getFederationDomain } from '../../app/federation/server/lib/getFederationDomain';\nimport { notifyOnSettingChangedById } from '../../app/lib/server/lib/notifyListener';\nimport { settings, settingsRegistry } from '../../app/settings/server';\n\nasync function updateSetting(id: string, value: SettingValue | null): Promise<void> {\n\tif (value !== null) {\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tawait settingsRegistry.add(id, value);\n\t\t} else {\n\t\t\t// TODO: audit\n\t\t\t(await Settings.updateValueById(id, value)).modifiedCount && void notifyOnSettingChangedById(id);\n\t\t}\n\t} else {\n\t\tawait Settings.updateValueById(id, null);\n\t}\n}\n\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst rocketChatProtocol = protocol.slice(0, -1);\n\n\tconst federationDomain = settings.get('FEDERATION_Domain') as string;\n\n\t// Load public key info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-public-key.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n\t}\n\n\t// Load legacy tcp protocol info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-tcp-protocol.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', null);\n\t}\n\n\t// Load SRV info\n\ttry {\n\t\t// If there is a protocol entry on DNS, we use it\n\t\tconst protocol = (settings.get('FEDERATION_ResolvedProtocolTXT') as string) ? 'tcp' : rocketChatProtocol;\n\n\t\tconst resolvedSRV = await resolveSRV(`_rocketchat._${protocol}.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', '{}');\n\t}\n\n\t// Test if federation is healthy\n\ttry {\n\t\tvoid dispatchEvent([getFederationDomain()], {\n\t\t\ttype: eventTypes.PING,\n\t\t});\n\n\t\tawait updateSetting('FEDERATION_Healthy', true);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_Healthy', false);\n\t}\n\n\t// If federation is healthy, check if there are remote users\n\tif (settings.get('FEDERATION_Healthy') as boolean) {\n\t\tconst user = await Users.findOne({ isRemote: true });\n\n\t\tawait updateSetting('FEDERATION_Populated', !!user);\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport async function federationCron(): Promise<void> {\n\tconst name = 'Federation';\n\n\tsettings.watch('FEDERATION_Enabled', async (value) => {\n\t\tif (!value) {\n\t\t\treturn cronJobs.remove(name);\n\t\t}\n\n\t\tawait cronJobs.add(name, '* * * * *', async () => runFederation());\n\t});\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      federationCron: () => federationCron\n    });\n    let eventTypes;\n    module.link(\"@rocket.chat/core-typings\", {\n      eventTypes(v) {\n        eventTypes = v;\n      }\n    }, 0);\n    let cronJobs;\n    module.link(\"@rocket.chat/cron\", {\n      cronJobs(v) {\n        cronJobs = v;\n      }\n    }, 1);\n    let Users, Settings;\n    module.link(\"@rocket.chat/models\", {\n      Users(v) {\n        Users = v;\n      },\n      Settings(v) {\n        Settings = v;\n      }\n    }, 2);\n    let resolveSRV, resolveTXT;\n    module.link(\"../../app/federation/server/functions/resolveDNS\", {\n      resolveSRV(v) {\n        resolveSRV = v;\n      },\n      resolveTXT(v) {\n        resolveTXT = v;\n      }\n    }, 3);\n    let dispatchEvent;\n    module.link(\"../../app/federation/server/handler\", {\n      dispatchEvent(v) {\n        dispatchEvent = v;\n      }\n    }, 4);\n    let getFederationDomain;\n    module.link(\"../../app/federation/server/lib/getFederationDomain\", {\n      getFederationDomain(v) {\n        getFederationDomain = v;\n      }\n    }, 5);\n    let notifyOnSettingChangedById;\n    module.link(\"../../app/lib/server/lib/notifyListener\", {\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 6);\n    let settings, settingsRegistry;\n    module.link(\"../../app/settings/server\", {\n      settings(v) {\n        settings = v;\n      },\n      settingsRegistry(v) {\n        settingsRegistry = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    async function updateSetting(id, value) {\n      if (value !== null) {\n        const setting = settings.get(id);\n        if (setting === undefined) {\n          await settingsRegistry.add(id, value);\n        } else {\n          // TODO: audit\n          (await Settings.updateValueById(id, value)).modifiedCount && void notifyOnSettingChangedById(id);\n        }\n      } else {\n        await Settings.updateValueById(id, null);\n      }\n    }\n    async function runFederation() {\n      // Get the settings\n      const siteUrl = settings.get('Site_Url');\n      const {\n        protocol\n      } = new URL(siteUrl);\n      const rocketChatProtocol = protocol.slice(0, -1);\n      const federationDomain = settings.get('FEDERATION_Domain');\n      // Load public key info\n      try {\n        const resolvedTXT = await resolveTXT(\"rocketchat-public-key.\".concat(federationDomain));\n        await updateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n      } catch (err) {\n        await updateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n      }\n      // Load legacy tcp protocol info\n      try {\n        const resolvedTXT = await resolveTXT(\"rocketchat-tcp-protocol.\".concat(federationDomain));\n        await updateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n      } catch (err) {\n        await updateSetting('FEDERATION_ResolvedProtocolTXT', null);\n      }\n      // Load SRV info\n      try {\n        // If there is a protocol entry on DNS, we use it\n        const protocol = settings.get('FEDERATION_ResolvedProtocolTXT') ? 'tcp' : rocketChatProtocol;\n        const resolvedSRV = await resolveSRV(\"_rocketchat._\".concat(protocol, \".\").concat(federationDomain));\n        await updateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n      } catch (err) {\n        await updateSetting('FEDERATION_ResolvedSRV', '{}');\n      }\n      // Test if federation is healthy\n      try {\n        void dispatchEvent([getFederationDomain()], {\n          type: eventTypes.PING\n        });\n        await updateSetting('FEDERATION_Healthy', true);\n      } catch (err) {\n        await updateSetting('FEDERATION_Healthy', false);\n      }\n      // If federation is healthy, check if there are remote users\n      if (settings.get('FEDERATION_Healthy')) {\n        const user = await Users.findOne({\n          isRemote: true\n        });\n        await updateSetting('FEDERATION_Populated', !!user);\n      }\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    async function federationCron() {\n      const name = 'Federation';\n      settings.watch('FEDERATION_Enabled', async value => {\n        if (!value) {\n          return cronJobs.remove(name);\n        }\n        await cronJobs.add(name, '* * * * *', async () => runFederation());\n      });\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","federationCron","eventTypes","link","v","cronJobs","Users","Settings","resolveSRV","resolveTXT","dispatchEvent","getFederationDomain","notifyOnSettingChangedById","settings","settingsRegistry","__reifyWaitForDeps__","updateSetting","id","value","setting","get","undefined","add","updateValueById","modifiedCount","runFederation","siteUrl","protocol","URL","rocketChatProtocol","slice","federationDomain","resolvedTXT","concat","err","resolvedSRV","JSON","stringify","type","PING","user","findOne","isRemote","name","watch","remove","__reify_async_result__","_reifyError","self","async"],"sources":["server/cron/federation.ts"],"sourcesContent":["import type { SettingValue } from '@rocket.chat/core-typings';\nimport { eventTypes } from '@rocket.chat/core-typings';\nimport { cronJobs } from '@rocket.chat/cron';\nimport { Users, Settings } from '@rocket.chat/models';\n\nimport { resolveSRV, resolveTXT } from '../../app/federation/server/functions/resolveDNS';\nimport { dispatchEvent } from '../../app/federation/server/handler';\nimport { getFederationDomain } from '../../app/federation/server/lib/getFederationDomain';\nimport { notifyOnSettingChangedById } from '../../app/lib/server/lib/notifyListener';\nimport { settings, settingsRegistry } from '../../app/settings/server';\n\nasync function updateSetting(id: string, value: SettingValue | null): Promise<void> {\n\tif (value !== null) {\n\t\tconst setting = settings.get(id);\n\n\t\tif (setting === undefined) {\n\t\t\tawait settingsRegistry.add(id, value);\n\t\t} else {\n\t\t\t// TODO: audit\n\t\t\t(await Settings.updateValueById(id, value)).modifiedCount && void notifyOnSettingChangedById(id);\n\t\t}\n\t} else {\n\t\tawait Settings.updateValueById(id, null);\n\t}\n}\n\nasync function runFederation(): Promise<void> {\n\t// Get the settings\n\tconst siteUrl = settings.get('Site_Url') as string;\n\tconst { protocol } = new URL(siteUrl);\n\tconst rocketChatProtocol = protocol.slice(0, -1);\n\n\tconst federationDomain = settings.get('FEDERATION_Domain') as string;\n\n\t// Load public key info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-public-key.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedPublicKeyTXT', null);\n\t}\n\n\t// Load legacy tcp protocol info\n\ttry {\n\t\tconst resolvedTXT = await resolveTXT(`rocketchat-tcp-protocol.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', resolvedTXT);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedProtocolTXT', null);\n\t}\n\n\t// Load SRV info\n\ttry {\n\t\t// If there is a protocol entry on DNS, we use it\n\t\tconst protocol = (settings.get('FEDERATION_ResolvedProtocolTXT') as string) ? 'tcp' : rocketChatProtocol;\n\n\t\tconst resolvedSRV = await resolveSRV(`_rocketchat._${protocol}.${federationDomain}`);\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', JSON.stringify(resolvedSRV));\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_ResolvedSRV', '{}');\n\t}\n\n\t// Test if federation is healthy\n\ttry {\n\t\tvoid dispatchEvent([getFederationDomain()], {\n\t\t\ttype: eventTypes.PING,\n\t\t});\n\n\t\tawait updateSetting('FEDERATION_Healthy', true);\n\t} catch (err) {\n\t\tawait updateSetting('FEDERATION_Healthy', false);\n\t}\n\n\t// If federation is healthy, check if there are remote users\n\tif (settings.get('FEDERATION_Healthy') as boolean) {\n\t\tconst user = await Users.findOne({ isRemote: true });\n\n\t\tawait updateSetting('FEDERATION_Populated', !!user);\n\t}\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport async function federationCron(): Promise<void> {\n\tconst name = 'Federation';\n\n\tsettings.watch('FEDERATION_Enabled', async (value) => {\n\t\tif (!value) {\n\t\t\treturn cronJobs.remove(name);\n\t\t}\n\n\t\tawait cronJobs.add(name, '* * * * *', async () => runFederation());\n\t});\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"ce1ffd40a63c90ffeaf05956cd0a138ad44502d2"}
