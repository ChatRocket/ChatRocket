{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/methods/saveNotificationSettings.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/push-notifications/server/methods/saveNotificationSettings.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/methods/saveNotificationSettings.ts","inputSourceMap":{"version":3,"file":"app/push-notifications/server/methods/saveNotificationSettings.ts","sourceRoot":"","sources":["app/push-notifications/server/methods/saveNotificationSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { notifyOnSubscriptionChangedById } from '../../../lib/server/lib/notifyListener';\nimport { getUserNotificationPreference } from '../../../utils/server/getUserNotificationPreference';\n\nconst saveAudioNotificationValue = (subId: ISubscription['_id'], value: string) =>\n\tvalue === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveNotificationSettings(\n\t\t\troomId: string,\n\t\t\tfield:\n\t\t\t\t| 'desktopNotifications'\n\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t| 'emailNotifications'\n\t\t\t\t| 'unreadAlert'\n\t\t\t\t| 'disableNotifications'\n\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t| 'audioNotificationValue',\n\t\t\tvalue: string,\n\t\t): boolean;\n\t\tsaveAudioNotificationValue(subId: string, value: string): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync saveNotificationSettings(roomId, field, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\t\tcheck(roomId, String);\n\t\tcheck(field, String);\n\t\tcheck(value, String);\n\n\t\tconst getNotificationPrefValue = async (field: string, value: unknown) => {\n\t\t\tif (value === 'default') {\n\t\t\t\tconst userId = Meteor.userId();\n\t\t\t\tif (!userId) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\treturn userPref?.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };\n\t\t};\n\n\t\tconst notifications = {\n\t\t\tdesktopNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('desktop', value),\n\t\t\t\t\t\t'desktopNotifications',\n\t\t\t\t\t\t'desktopPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tmobilePushNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('mobile', value),\n\t\t\t\t\t\t'mobilePushNotifications',\n\t\t\t\t\t\t'mobilePrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\temailNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('email', value),\n\t\t\t\t\t\t'emailNotifications',\n\t\t\t\t\t\t'emailPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tunreadAlert: {\n\t\t\t\t// @ts-expect-error - Check types of model. The way the method is defined makes difficult to type it, check proper types for `value`\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => Subscriptions.updateUnreadAlertById(subscription._id, value),\n\t\t\t},\n\t\t\tdisableNotifications: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateDisableNotificationsById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideUnreadStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) =>\n\t\t\t\t\tSubscriptions.updateHideUnreadStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideMentionStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateHideMentionStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\tmuteGroupMentions: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateMuteGroupMentions(subscription._id, value === '1'),\n\t\t\t},\n\t\t\taudioNotificationValue: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => saveAudioNotificationValue(subscription._id, value),\n\t\t\t},\n\t\t};\n\t\tconst isInvalidNotification = !Object.keys(notifications).includes(field);\n\t\tconst basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n\t\tconst fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n\n\t\tif (isInvalidNotification) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst updateResponse = await notifications[field].updateMethod(subscription, value);\n\t\tif (updateResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tasync saveAudioNotificationValue(rid, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst saveAudioNotificationResponse = await saveAudioNotificationValue(subscription._id, value);\n\t\tif (saveAudioNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n});\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/push-notifications/server/methods/saveNotificationSettings.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/push-notifications/server/methods/saveNotificationSettings.ts","inputSourceMap":{"version":3,"file":"app/push-notifications/server/methods/saveNotificationSettings.ts","sourceRoot":"","sources":["app/push-notifications/server/methods/saveNotificationSettings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISubscription } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { notifyOnSubscriptionChangedById } from '../../../lib/server/lib/notifyListener';\nimport { getUserNotificationPreference } from '../../../utils/server/getUserNotificationPreference';\n\nconst saveAudioNotificationValue = (subId: ISubscription['_id'], value: string) =>\n\tvalue === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveNotificationSettings(\n\t\t\troomId: string,\n\t\t\tfield:\n\t\t\t\t| 'desktopNotifications'\n\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t| 'emailNotifications'\n\t\t\t\t| 'unreadAlert'\n\t\t\t\t| 'disableNotifications'\n\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t| 'audioNotificationValue',\n\t\t\tvalue: string,\n\t\t): boolean;\n\t\tsaveAudioNotificationValue(subId: string, value: string): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync saveNotificationSettings(roomId, field, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\t\tcheck(roomId, String);\n\t\tcheck(field, String);\n\t\tcheck(value, String);\n\n\t\tconst getNotificationPrefValue = async (field: string, value: unknown) => {\n\t\t\tif (value === 'default') {\n\t\t\t\tconst userId = Meteor.userId();\n\t\t\t\tif (!userId) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\treturn userPref?.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };\n\t\t};\n\n\t\tconst notifications = {\n\t\t\tdesktopNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('desktop', value),\n\t\t\t\t\t\t'desktopNotifications',\n\t\t\t\t\t\t'desktopPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tmobilePushNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('mobile', value),\n\t\t\t\t\t\t'mobilePushNotifications',\n\t\t\t\t\t\t'mobilePrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\temailNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('email', value),\n\t\t\t\t\t\t'emailNotifications',\n\t\t\t\t\t\t'emailPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tunreadAlert: {\n\t\t\t\t// @ts-expect-error - Check types of model. The way the method is defined makes difficult to type it, check proper types for `value`\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => Subscriptions.updateUnreadAlertById(subscription._id, value),\n\t\t\t},\n\t\t\tdisableNotifications: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateDisableNotificationsById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideUnreadStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) =>\n\t\t\t\t\tSubscriptions.updateHideUnreadStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideMentionStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateHideMentionStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\tmuteGroupMentions: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateMuteGroupMentions(subscription._id, value === '1'),\n\t\t\t},\n\t\t\taudioNotificationValue: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => saveAudioNotificationValue(subscription._id, value),\n\t\t\t},\n\t\t};\n\t\tconst isInvalidNotification = !Object.keys(notifications).includes(field);\n\t\tconst basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n\t\tconst fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n\n\t\tif (isInvalidNotification) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst updateResponse = await notifications[field].updateMethod(subscription, value);\n\t\tif (updateResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tasync saveAudioNotificationValue(rid, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst saveAudioNotificationResponse = await saveAudioNotificationValue(subscription._id, value);\n\t\tif (saveAudioNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n});\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let Subscriptions;\n    module.link(\"@rocket.chat/models\", {\n      Subscriptions(v) {\n        Subscriptions = v;\n      }\n    }, 0);\n    let check;\n    module.link(\"meteor/check\", {\n      check(v) {\n        check = v;\n      }\n    }, 1);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 2);\n    let notifyOnSubscriptionChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSubscriptionChangedById(v) {\n        notifyOnSubscriptionChangedById = v;\n      }\n    }, 3);\n    let getUserNotificationPreference;\n    module.link(\"../../../utils/server/getUserNotificationPreference\", {\n      getUserNotificationPreference(v) {\n        getUserNotificationPreference = v;\n      }\n    }, 4);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const saveAudioNotificationValue = (subId, value) => value === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n    Meteor.methods({\n      async saveNotificationSettings(roomId, field, value) {\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'saveNotificationSettings'\n          });\n        }\n        check(roomId, String);\n        check(field, String);\n        check(value, String);\n        const getNotificationPrefValue = async (field, value) => {\n          if (value === 'default') {\n            const userId = Meteor.userId();\n            if (!userId) {\n              throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n                method: 'saveNotificationSettings'\n              });\n            }\n            const userPref = await getUserNotificationPreference(userId, field);\n            return (userPref === null || userPref === void 0 ? void 0 : userPref.origin) === 'server' ? null : userPref;\n          }\n          return {\n            value,\n            origin: 'subscription'\n          };\n        };\n        const notifications = {\n          desktopNotifications: {\n            updateMethod: async (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, await getNotificationPrefValue('desktop', value), 'desktopNotifications', 'desktopPrefOrigin')\n          },\n          mobilePushNotifications: {\n            updateMethod: async (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, await getNotificationPrefValue('mobile', value), 'mobilePushNotifications', 'mobilePrefOrigin')\n          },\n          emailNotifications: {\n            updateMethod: async (subscription, value) => Subscriptions.updateNotificationsPrefById(subscription._id, await getNotificationPrefValue('email', value), 'emailNotifications', 'emailPrefOrigin')\n          },\n          unreadAlert: {\n            // @ts-expect-error - Check types of model. The way the method is defined makes difficult to type it, check proper types for `value`\n            updateMethod: (subscription, value) => Subscriptions.updateUnreadAlertById(subscription._id, value)\n          },\n          disableNotifications: {\n            updateMethod: (subscription, value) => Subscriptions.updateDisableNotificationsById(subscription._id, value === '1')\n          },\n          hideUnreadStatus: {\n            updateMethod: (subscription, value) => Subscriptions.updateHideUnreadStatusById(subscription._id, value === '1')\n          },\n          hideMentionStatus: {\n            updateMethod: (subscription, value) => Subscriptions.updateHideMentionStatusById(subscription._id, value === '1')\n          },\n          muteGroupMentions: {\n            updateMethod: (subscription, value) => Subscriptions.updateMuteGroupMentions(subscription._id, value === '1')\n          },\n          audioNotificationValue: {\n            updateMethod: (subscription, value) => saveAudioNotificationValue(subscription._id, value)\n          }\n        };\n        const isInvalidNotification = !Object.keys(notifications).includes(field);\n        const basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n        const fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n        if (isInvalidNotification) {\n          throw new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n            method: 'saveNotificationSettings'\n          });\n        }\n        if (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n          throw new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n            method: 'saveNotificationSettings'\n          });\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, userId);\n        if (!subscription) {\n          throw new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n            method: 'saveNotificationSettings'\n          });\n        }\n        const updateResponse = await notifications[field].updateMethod(subscription, value);\n        if (updateResponse.modifiedCount) {\n          void notifyOnSubscriptionChangedById(subscription._id);\n        }\n        return true;\n      },\n      async saveAudioNotificationValue(rid, value) {\n        const userId = Meteor.userId();\n        if (!userId) {\n          throw new Meteor.Error('error-invalid-user', 'Invalid user', {\n            method: 'saveAudioNotificationValue'\n          });\n        }\n        const subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId);\n        if (!subscription) {\n          throw new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n            method: 'saveAudioNotificationValue'\n          });\n        }\n        const saveAudioNotificationResponse = await saveAudioNotificationValue(subscription._id, value);\n        if (saveAudioNotificationResponse.modifiedCount) {\n          void notifyOnSubscriptionChangedById(subscription._id);\n        }\n        return true;\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["Subscriptions","module","link","v","check","Meteor","notifyOnSubscriptionChangedById","getUserNotificationPreference","__reifyWaitForDeps__","saveAudioNotificationValue","subId","value","clearAudioNotificationValueById","updateAudioNotificationValueById","methods","saveNotificationSettings","roomId","field","userId","Error","method","String","getNotificationPrefValue","userPref","origin","notifications","desktopNotifications","updateMethod","subscription","updateNotificationsPrefById","_id","mobilePushNotifications","emailNotifications","unreadAlert","updateUnreadAlertById","disableNotifications","updateDisableNotificationsById","hideUnreadStatus","updateHideUnreadStatusById","hideMentionStatus","updateHideMentionStatusById","muteGroupMentions","updateMuteGroupMentions","audioNotificationValue","isInvalidNotification","Object","keys","includes","basicValuesForNotifications","fieldsMustHaveBasicValues","findOneByRoomIdAndUserId","updateResponse","modifiedCount","rid","saveAudioNotificationResponse","__reify_async_result__","_reifyError","self","async"],"sources":["app/push-notifications/server/methods/saveNotificationSettings.ts"],"sourcesContent":["import type { ISubscription } from '@rocket.chat/core-typings';\nimport type { ServerMethods } from '@rocket.chat/ddp-client';\nimport { Subscriptions } from '@rocket.chat/models';\nimport { check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { notifyOnSubscriptionChangedById } from '../../../lib/server/lib/notifyListener';\nimport { getUserNotificationPreference } from '../../../utils/server/getUserNotificationPreference';\n\nconst saveAudioNotificationValue = (subId: ISubscription['_id'], value: string) =>\n\tvalue === 'default' ? Subscriptions.clearAudioNotificationValueById(subId) : Subscriptions.updateAudioNotificationValueById(subId, value);\n\ndeclare module '@rocket.chat/ddp-client' {\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tinterface ServerMethods {\n\t\tsaveNotificationSettings(\n\t\t\troomId: string,\n\t\t\tfield:\n\t\t\t\t| 'desktopNotifications'\n\t\t\t\t| 'mobilePushNotifications'\n\t\t\t\t| 'emailNotifications'\n\t\t\t\t| 'unreadAlert'\n\t\t\t\t| 'disableNotifications'\n\t\t\t\t| 'hideUnreadStatus'\n\t\t\t\t| 'hideMentionStatus'\n\t\t\t\t| 'muteGroupMentions'\n\t\t\t\t| 'audioNotificationValue',\n\t\t\tvalue: string,\n\t\t): boolean;\n\t\tsaveAudioNotificationValue(subId: string, value: string): boolean;\n\t}\n}\n\nMeteor.methods<ServerMethods>({\n\tasync saveNotificationSettings(roomId, field, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\t\tcheck(roomId, String);\n\t\tcheck(field, String);\n\t\tcheck(value, String);\n\n\t\tconst getNotificationPrefValue = async (field: string, value: unknown) => {\n\t\t\tif (value === 'default') {\n\t\t\t\tconst userId = Meteor.userId();\n\t\t\t\tif (!userId) {\n\t\t\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst userPref = await getUserNotificationPreference(userId, field);\n\t\t\t\treturn userPref?.origin === 'server' ? null : userPref;\n\t\t\t}\n\t\t\treturn { value, origin: 'subscription' };\n\t\t};\n\n\t\tconst notifications = {\n\t\t\tdesktopNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('desktop', value),\n\t\t\t\t\t\t'desktopNotifications',\n\t\t\t\t\t\t'desktopPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tmobilePushNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('mobile', value),\n\t\t\t\t\t\t'mobilePushNotifications',\n\t\t\t\t\t\t'mobilePrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\temailNotifications: {\n\t\t\t\tupdateMethod: async (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateNotificationsPrefById(\n\t\t\t\t\t\tsubscription._id,\n\t\t\t\t\t\tawait getNotificationPrefValue('email', value),\n\t\t\t\t\t\t'emailNotifications',\n\t\t\t\t\t\t'emailPrefOrigin',\n\t\t\t\t\t),\n\t\t\t},\n\t\t\tunreadAlert: {\n\t\t\t\t// @ts-expect-error - Check types of model. The way the method is defined makes difficult to type it, check proper types for `value`\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => Subscriptions.updateUnreadAlertById(subscription._id, value),\n\t\t\t},\n\t\t\tdisableNotifications: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateDisableNotificationsById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideUnreadStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) =>\n\t\t\t\t\tSubscriptions.updateHideUnreadStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\thideMentionStatus: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateHideMentionStatusById(subscription._id, value === '1'),\n\t\t\t},\n\t\t\tmuteGroupMentions: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: unknown) =>\n\t\t\t\t\tSubscriptions.updateMuteGroupMentions(subscription._id, value === '1'),\n\t\t\t},\n\t\t\taudioNotificationValue: {\n\t\t\t\tupdateMethod: (subscription: ISubscription, value: string) => saveAudioNotificationValue(subscription._id, value),\n\t\t\t},\n\t\t};\n\t\tconst isInvalidNotification = !Object.keys(notifications).includes(field);\n\t\tconst basicValuesForNotifications = ['all', 'mentions', 'nothing', 'default'];\n\t\tconst fieldsMustHaveBasicValues = ['emailNotifications', 'mobilePushNotifications', 'desktopNotifications'];\n\n\t\tif (isInvalidNotification) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings field', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tif (fieldsMustHaveBasicValues.includes(field) && !basicValuesForNotifications.includes(value)) {\n\t\t\tthrow new Meteor.Error('error-invalid-settings', 'Invalid settings value', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(roomId, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveNotificationSettings',\n\t\t\t});\n\t\t}\n\n\t\tconst updateResponse = await notifications[field].updateMethod(subscription, value);\n\t\tif (updateResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tasync saveAudioNotificationValue(rid, value) {\n\t\tconst userId = Meteor.userId();\n\t\tif (!userId) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst subscription = await Subscriptions.findOneByRoomIdAndUserId(rid, userId);\n\t\tif (!subscription) {\n\t\t\tthrow new Meteor.Error('error-invalid-subscription', 'Invalid subscription', {\n\t\t\t\tmethod: 'saveAudioNotificationValue',\n\t\t\t});\n\t\t}\n\n\t\tconst saveAudioNotificationResponse = await saveAudioNotificationValue(subscription._id, value);\n\t\tif (saveAudioNotificationResponse.modifiedCount) {\n\t\t\tvoid notifyOnSubscriptionChangedById(subscription._id);\n\t\t}\n\n\t\treturn true;\n\t},\n});\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"eedc8b627300558f98ed73eea9bb006061d5077f"}
