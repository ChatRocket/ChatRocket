{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/email/IMAPInterceptor.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/email/IMAPInterceptor.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/email/IMAPInterceptor.ts","inputSourceMap":{"version":3,"file":"server/email/IMAPInterceptor.ts","sourceRoot":"","sources":["server/email/IMAPInterceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { Readable } from 'stream';\n\nimport { EmailInbox } from '@rocket.chat/models';\nimport type { ImapMessage, ImapMessageBodyInfo } from 'imap';\nimport IMAP from 'imap';\nimport type { ParsedMail } from 'mailparser';\nimport { simpleParser } from 'mailparser';\n\nimport { notifyOnEmailInboxChanged } from '../../app/lib/server/lib/notifyListener';\nimport { logger } from '../features/EmailInbox/logger';\n\ntype IMAPOptions = {\n\tdeleteAfterRead: boolean;\n\tfilter: any[];\n\trejectBeforeTS?: Date;\n\tmarkSeen: boolean;\n\tmaxRetries: number;\n};\n\nexport declare interface IMAPInterceptor {\n\ton(event: 'email', listener: (email: ParsedMail) => void): this;\n}\n\nexport class IMAPInterceptor extends EventEmitter {\n\tprivate imap: IMAP;\n\n\tprivate config: IMAP.Config;\n\n\tprivate backoffDurationMS = 3000;\n\n\tprivate backoff: NodeJS.Timeout;\n\n\tprivate retries = 0;\n\n\tprivate inboxId: string;\n\n\tconstructor(\n\t\timapConfig: IMAP.Config,\n\t\tprivate options: IMAPOptions = {\n\t\t\tdeleteAfterRead: false,\n\t\t\tfilter: ['UNSEEN'],\n\t\t\tmarkSeen: true,\n\t\t\tmaxRetries: 10,\n\t\t},\n\t\tid: string,\n\t) {\n\t\tsuper();\n\n\t\tthis.config = imapConfig;\n\n\t\tthis.imap = new IMAP({\n\t\t\tconnTimeout: 10000,\n\t\t\tkeepalive: true,\n\t\t\t...(imapConfig.tls && { tlsOptions: { servername: imapConfig.host } }),\n\t\t\t...imapConfig,\n\t\t});\n\t\tthis.retries = 0;\n\t\tthis.inboxId = id;\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tvoid this.start();\n\t}\n\n\topenInbox(): Promise<IMAP.Box> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mailbox: IMAP.Box) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mailbox);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.openBox('INBOX', false, cb);\n\t\t});\n\t}\n\n\tasync start(): Promise<void> {\n\t\tconsole.log('[START]');\n\t\t// On successfully connected.\n\t\tthis.imap.on('ready', async () => {\n\t\t\tif (this.isActive()) {\n\t\t\t\tlogger.info(`IMAP connected to ${this.config.user}`);\n\t\t\t\tclearTimeout(this.backoff);\n\t\t\t\tthis.retries = 0;\n\t\t\t\tthis.backoffDurationMS = 3000;\n\t\t\t\tawait this.openInbox();\n\t\t\t\tthis.imap.on('mail', () => this.getEmails().catch((err: Error) => logger.debug('Error on getEmails: ', err.message)));\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Can't connect to IMAP server\");\n\t\t\t}\n\t\t});\n\n\t\tthis.imap.on('error', async () => {\n\t\t\tthis.retries++;\n\t\t\tawait this.reconnect();\n\t\t});\n\n\t\tthis.imap.on('close', async () => {\n\t\t\tawait this.reconnect();\n\t\t});\n\t\tthis.retries += 1;\n\t\treturn this.imap.connect();\n\t}\n\n\tisActive(): boolean {\n\t\treturn !!(this.imap?.state && this.imap.state !== 'disconnected');\n\t}\n\n\tstop(callback = new Function()): void {\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\n\t\t\tconsole.log('Clear backoff');\n\t\t}\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tthis.stopWithNoStopBackoff(callback);\n\t}\n\n\tprivate stopWithNoStopBackoff(callback = new Function()): void {\n\t\tconsole.log('[stopWithNoStopBackoff]');\n\t\tlogger.debug('IMAP stop called');\n\t\tthis.imap.once('end', () => {\n\t\t\tlogger.debug('IMAP stopped');\n\t\t\tcallback?.();\n\t\t});\n\t\tthis.imap.end();\n\t\tthis.imap.removeAllListeners();\n\t}\n\n\tasync reconnect(): Promise<void> {\n\t\tif (!this.isActive() && !this.canRetry()) {\n\t\t\tlogger.info(`Max retries reached for ${this.config.user}`);\n\t\t\tthis.stop();\n\t\t\treturn this.selfDisable();\n\t\t}\n\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\t\t}\n\n\t\tthis.backoff = setTimeout(\n\t\t\t() => {\n\t\t\t\tconsole.log('[BACKCOFF ]Reconnecting...');\n\t\t\t\tthis.stopWithNoStopBackoff();\n\t\t\t\tvoid this.start();\n\t\t\t},\n\t\t\t(this.backoffDurationMS += this.backoffDurationMS),\n\t\t);\n\t}\n\n\timapSearch(): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, results: number[]) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.search(this.options.filter, cb);\n\t\t});\n\t}\n\n\tparseEmails(stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): Promise<ParsedMail> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mail);\n\t\t\t\t}\n\t\t\t};\n\t\t\tsimpleParser(new Readable().wrap(stream), cb);\n\t\t});\n\t}\n\n\timapFetch(emailIds: number[]): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst out: number[] = [];\n\t\t\tconst messagecb = (msg: ImapMessage, seqno: number) => {\n\t\t\t\tout.push(seqno);\n\t\t\t\tconst bodycb = (stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): void => {\n\t\t\t\t\tsimpleParser(new Readable().wrap(stream), (_err, email) => {\n\t\t\t\t\t\tif (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n\t\t\t\t\t\t\tlogger.error({ msg: `Rejecting email on inbox ${this.config.user}`, subject: email.subject });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.emit('email', email);\n\t\t\t\t\t\tif (this.options.deleteAfterRead) {\n\t\t\t\t\t\t\tthis.imap.seq.addFlags(email, 'Deleted', (err) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tlogger.warn(`Mark deleted error: ${err}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tmsg.once('body', bodycb);\n\t\t\t};\n\t\t\tconst errorcb = (err: Error): void => {\n\t\t\t\tlogger.warn(`Fetch error: ${err}`);\n\t\t\t\treject(err);\n\t\t\t};\n\t\t\tconst endcb = (): void => {\n\t\t\t\tresolve(out);\n\t\t\t};\n\t\t\tconst fetch = this.imap.fetch(emailIds, {\n\t\t\t\tbodies: ['HEADER', 'TEXT', ''],\n\t\t\t\tstruct: true,\n\t\t\t\tmarkSeen: this.options.markSeen,\n\t\t\t});\n\n\t\t\tfetch.on('message', messagecb);\n\t\t\tfetch.on('error', errorcb);\n\t\t\tfetch.on('end', endcb);\n\t\t});\n\t}\n\n\t// Fetch all UNSEEN messages and pass them for further processing\n\tasync getEmails(): Promise<void> {\n\t\tconst emailIds = await this.imapSearch();\n\t\tawait this.imapFetch(emailIds);\n\t}\n\n\tcanRetry(): boolean {\n\t\treturn this.retries < this.options.maxRetries || this.options.maxRetries === -1;\n\t}\n\n\tasync selfDisable(): Promise<void> {\n\t\tlogger.info(`Disabling inbox ${this.inboxId}`);\n\n\t\t// Again, if there's 2 inboxes with the same email, this will prevent looping over the already disabled one\n\t\t// Active filter is just in case :)\n\t\tconst { value } = await EmailInbox.setDisabledById(this.inboxId);\n\n\t\tif (value) {\n\t\t\tvoid notifyOnEmailInboxChanged(value, 'updated');\n\t\t}\n\n\t\tlogger.info(`IMAP inbox ${this.inboxId} automatically disabled`);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/email/IMAPInterceptor.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/email/IMAPInterceptor.ts","inputSourceMap":{"version":3,"file":"server/email/IMAPInterceptor.ts","sourceRoot":"","sources":["server/email/IMAPInterceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAEjD,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAE1C,OAAO,EAAE,yBAAyB,EAAE,MAAM,yCAAyC,CAAC;AACpF,OAAO,EAAE,MAAM,EAAE,MAAM,+BAA+B,CAAC;AAcvD,MAAM,OAAO,eAAgB,SAAQ,YAAY;IAevC;IAdD,IAAI,CAAO;IAEX,MAAM,CAAc;IAEpB,iBAAiB,GAAG,IAAI,CAAC;IAEzB,OAAO,CAAiB;IAExB,OAAO,GAAG,CAAC,CAAC;IAEZ,OAAO,CAAS;IAExB,YACC,UAAuB,EACf,UAAuB;QAC9B,eAAe,EAAE,KAAK;QACtB,MAAM,EAAE,CAAC,QAAQ,CAAC;QAClB,QAAQ,EAAE,IAAI;QACd,UAAU,EAAE,EAAE;KACd,EACD,EAAU;QAEV,KAAK,EAAE,CAAC;QARA,YAAO,GAAP,OAAO,CAKd;QAKD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QAEzB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC;YACpB,WAAW,EAAE,KAAK;YAClB,SAAS,EAAE,IAAI;YACf,GAAG,CAAC,UAAU,CAAC,GAAG,IAAI,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC;YACtE,GAAG,UAAU;SACb,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,GAAU,EAAE,EAAE;YAC1C,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;IACnB,CAAC;IAED,SAAS;QACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,EAAE,GAAG,CAAC,GAAU,EAAE,OAAiB,EAAE,EAAE;gBAC5C,IAAI,GAAG,EAAE,CAAC;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,OAAO,CAAC,CAAC;gBAClB,CAAC;YACF,CAAC,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,KAAK;QACV,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,6BAA6B;QAC7B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAChC,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;gBACrB,MAAM,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;gBACrD,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;gBACjB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;gBAC9B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvH,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;YAC9C,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAChC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;YAChC,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC;IAED,QAAQ;QACP,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,cAAc,CAAC,CAAC;IACnE,CAAC;IAED,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE;QAC7B,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAE9B,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,GAAU,EAAE,EAAE;YAC1C,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IAEO,qBAAqB,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE;QACtD,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QACvC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;YAC1B,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC7B,QAAQ,EAAE,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,2BAA2B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;YAC3D,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3B,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,UAAU,CACxB,GAAG,EAAE;YACJ,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC,EACD,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAClD,CAAC;IACH,CAAC;IAED,UAAU;QACT,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,EAAE,GAAG,CAAC,GAAU,EAAE,OAAiB,EAAE,EAAE;gBAC5C,IAAI,GAAG,EAAE,CAAC;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,OAAO,CAAC,CAAC;gBAClB,CAAC;YACF,CAAC,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,MAA6B,EAAE,KAA0B;QACpE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,EAAE,GAAG,CAAC,GAAU,EAAE,IAAgB,EAAE,EAAE;gBAC3C,IAAI,GAAG,EAAE,CAAC;oBACT,MAAM,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,IAAI,CAAC,CAAC;gBACf,CAAC;YACF,CAAC,CAAC;YACF,YAAY,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,QAAkB;QAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,GAAG,GAAa,EAAE,CAAC;YACzB,MAAM,SAAS,GAAG,CAAC,GAAgB,EAAE,KAAa,EAAE,EAAE;gBACrD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,MAAM,MAAM,GAAG,CAAC,MAA6B,EAAE,KAA0B,EAAQ,EAAE;oBAClF,YAAY,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;wBACzD,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;4BAC3F,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,4BAA4B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;4BAC9F,OAAO;wBACR,CAAC;wBACD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;wBAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;4BAClC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE;gCAChD,IAAI,GAAG,EAAE,CAAC;oCACT,MAAM,CAAC,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,CAAC;gCAC3C,CAAC;4BACF,CAAC,CAAC,CAAC;wBACJ,CAAC;oBACF,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC;gBACF,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC;YACF,MAAM,OAAO,GAAG,CAAC,GAAU,EAAQ,EAAE;gBACpC,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;gBACnC,MAAM,CAAC,GAAG,CAAC,CAAC;YACb,CAAC,CAAC;YACF,MAAM,KAAK,GAAG,GAAS,EAAE;gBACxB,OAAO,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC;YACF,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvC,MAAM,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,CAAC;gBAC9B,MAAM,EAAE,IAAI;gBACZ,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;aAC/B,CAAC,CAAC;YAEH,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAC/B,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC3B,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,iEAAiE;IACjE,KAAK,CAAC,SAAS;QACd,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QACzC,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,KAAK,CAAC,WAAW;QAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAE/C,2GAA2G;QAC3G,mCAAmC;QACnC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEjE,IAAI,KAAK,EAAE,CAAC;YACX,KAAK,yBAAyB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,OAAO,yBAAyB,CAAC,CAAC;IAClE,CAAC;CACD","sourcesContent":["import { EventEmitter } from 'events';\nimport { Readable } from 'stream';\n\nimport { EmailInbox } from '@rocket.chat/models';\nimport type { ImapMessage, ImapMessageBodyInfo } from 'imap';\nimport IMAP from 'imap';\nimport type { ParsedMail } from 'mailparser';\nimport { simpleParser } from 'mailparser';\n\nimport { notifyOnEmailInboxChanged } from '../../app/lib/server/lib/notifyListener';\nimport { logger } from '../features/EmailInbox/logger';\n\ntype IMAPOptions = {\n\tdeleteAfterRead: boolean;\n\tfilter: any[];\n\trejectBeforeTS?: Date;\n\tmarkSeen: boolean;\n\tmaxRetries: number;\n};\n\nexport declare interface IMAPInterceptor {\n\ton(event: 'email', listener: (email: ParsedMail) => void): this;\n}\n\nexport class IMAPInterceptor extends EventEmitter {\n\tprivate imap: IMAP;\n\n\tprivate config: IMAP.Config;\n\n\tprivate backoffDurationMS = 3000;\n\n\tprivate backoff: NodeJS.Timeout;\n\n\tprivate retries = 0;\n\n\tprivate inboxId: string;\n\n\tconstructor(\n\t\timapConfig: IMAP.Config,\n\t\tprivate options: IMAPOptions = {\n\t\t\tdeleteAfterRead: false,\n\t\t\tfilter: ['UNSEEN'],\n\t\t\tmarkSeen: true,\n\t\t\tmaxRetries: 10,\n\t\t},\n\t\tid: string,\n\t) {\n\t\tsuper();\n\n\t\tthis.config = imapConfig;\n\n\t\tthis.imap = new IMAP({\n\t\t\tconnTimeout: 10000,\n\t\t\tkeepalive: true,\n\t\t\t...(imapConfig.tls && { tlsOptions: { servername: imapConfig.host } }),\n\t\t\t...imapConfig,\n\t\t});\n\t\tthis.retries = 0;\n\t\tthis.inboxId = id;\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tvoid this.start();\n\t}\n\n\topenInbox(): Promise<IMAP.Box> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mailbox: IMAP.Box) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mailbox);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.openBox('INBOX', false, cb);\n\t\t});\n\t}\n\n\tasync start(): Promise<void> {\n\t\tconsole.log('[START]');\n\t\t// On successfully connected.\n\t\tthis.imap.on('ready', async () => {\n\t\t\tif (this.isActive()) {\n\t\t\t\tlogger.info(`IMAP connected to ${this.config.user}`);\n\t\t\t\tclearTimeout(this.backoff);\n\t\t\t\tthis.retries = 0;\n\t\t\t\tthis.backoffDurationMS = 3000;\n\t\t\t\tawait this.openInbox();\n\t\t\t\tthis.imap.on('mail', () => this.getEmails().catch((err: Error) => logger.debug('Error on getEmails: ', err.message)));\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Can't connect to IMAP server\");\n\t\t\t}\n\t\t});\n\n\t\tthis.imap.on('error', async () => {\n\t\t\tthis.retries++;\n\t\t\tawait this.reconnect();\n\t\t});\n\n\t\tthis.imap.on('close', async () => {\n\t\t\tawait this.reconnect();\n\t\t});\n\t\tthis.retries += 1;\n\t\treturn this.imap.connect();\n\t}\n\n\tisActive(): boolean {\n\t\treturn !!(this.imap?.state && this.imap.state !== 'disconnected');\n\t}\n\n\tstop(callback = new Function()): void {\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\n\t\t\tconsole.log('Clear backoff');\n\t\t}\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tthis.stopWithNoStopBackoff(callback);\n\t}\n\n\tprivate stopWithNoStopBackoff(callback = new Function()): void {\n\t\tconsole.log('[stopWithNoStopBackoff]');\n\t\tlogger.debug('IMAP stop called');\n\t\tthis.imap.once('end', () => {\n\t\t\tlogger.debug('IMAP stopped');\n\t\t\tcallback?.();\n\t\t});\n\t\tthis.imap.end();\n\t\tthis.imap.removeAllListeners();\n\t}\n\n\tasync reconnect(): Promise<void> {\n\t\tif (!this.isActive() && !this.canRetry()) {\n\t\t\tlogger.info(`Max retries reached for ${this.config.user}`);\n\t\t\tthis.stop();\n\t\t\treturn this.selfDisable();\n\t\t}\n\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\t\t}\n\n\t\tthis.backoff = setTimeout(\n\t\t\t() => {\n\t\t\t\tconsole.log('[BACKCOFF ]Reconnecting...');\n\t\t\t\tthis.stopWithNoStopBackoff();\n\t\t\t\tvoid this.start();\n\t\t\t},\n\t\t\t(this.backoffDurationMS += this.backoffDurationMS),\n\t\t);\n\t}\n\n\timapSearch(): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, results: number[]) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.search(this.options.filter, cb);\n\t\t});\n\t}\n\n\tparseEmails(stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): Promise<ParsedMail> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mail);\n\t\t\t\t}\n\t\t\t};\n\t\t\tsimpleParser(new Readable().wrap(stream), cb);\n\t\t});\n\t}\n\n\timapFetch(emailIds: number[]): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst out: number[] = [];\n\t\t\tconst messagecb = (msg: ImapMessage, seqno: number) => {\n\t\t\t\tout.push(seqno);\n\t\t\t\tconst bodycb = (stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): void => {\n\t\t\t\t\tsimpleParser(new Readable().wrap(stream), (_err, email) => {\n\t\t\t\t\t\tif (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n\t\t\t\t\t\t\tlogger.error({ msg: `Rejecting email on inbox ${this.config.user}`, subject: email.subject });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.emit('email', email);\n\t\t\t\t\t\tif (this.options.deleteAfterRead) {\n\t\t\t\t\t\t\tthis.imap.seq.addFlags(email, 'Deleted', (err) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tlogger.warn(`Mark deleted error: ${err}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tmsg.once('body', bodycb);\n\t\t\t};\n\t\t\tconst errorcb = (err: Error): void => {\n\t\t\t\tlogger.warn(`Fetch error: ${err}`);\n\t\t\t\treject(err);\n\t\t\t};\n\t\t\tconst endcb = (): void => {\n\t\t\t\tresolve(out);\n\t\t\t};\n\t\t\tconst fetch = this.imap.fetch(emailIds, {\n\t\t\t\tbodies: ['HEADER', 'TEXT', ''],\n\t\t\t\tstruct: true,\n\t\t\t\tmarkSeen: this.options.markSeen,\n\t\t\t});\n\n\t\t\tfetch.on('message', messagecb);\n\t\t\tfetch.on('error', errorcb);\n\t\t\tfetch.on('end', endcb);\n\t\t});\n\t}\n\n\t// Fetch all UNSEEN messages and pass them for further processing\n\tasync getEmails(): Promise<void> {\n\t\tconst emailIds = await this.imapSearch();\n\t\tawait this.imapFetch(emailIds);\n\t}\n\n\tcanRetry(): boolean {\n\t\treturn this.retries < this.options.maxRetries || this.options.maxRetries === -1;\n\t}\n\n\tasync selfDisable(): Promise<void> {\n\t\tlogger.info(`Disabling inbox ${this.inboxId}`);\n\n\t\t// Again, if there's 2 inboxes with the same email, this will prevent looping over the already disabled one\n\t\t// Active filter is just in case :)\n\t\tconst { value } = await EmailInbox.setDisabledById(this.inboxId);\n\n\t\tif (value) {\n\t\t\tvoid notifyOnEmailInboxChanged(value, 'updated');\n\t\t}\n\n\t\tlogger.info(`IMAP inbox ${this.inboxId} automatically disabled`);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      IMAPInterceptor: () => IMAPInterceptor\n    });\n    let EventEmitter;\n    module.link(\"events\", {\n      EventEmitter(v) {\n        EventEmitter = v;\n      }\n    }, 0);\n    let Readable;\n    module.link(\"stream\", {\n      Readable(v) {\n        Readable = v;\n      }\n    }, 1);\n    let EmailInbox;\n    module.link(\"@rocket.chat/models\", {\n      EmailInbox(v) {\n        EmailInbox = v;\n      }\n    }, 2);\n    let IMAP;\n    module.link(\"imap\", {\n      default(v) {\n        IMAP = v;\n      }\n    }, 3);\n    let simpleParser;\n    module.link(\"mailparser\", {\n      simpleParser(v) {\n        simpleParser = v;\n      }\n    }, 4);\n    let notifyOnEmailInboxChanged;\n    module.link(\"../../app/lib/server/lib/notifyListener\", {\n      notifyOnEmailInboxChanged(v) {\n        notifyOnEmailInboxChanged = v;\n      }\n    }, 5);\n    let logger;\n    module.link(\"../features/EmailInbox/logger\", {\n      logger(v) {\n        logger = v;\n      }\n    }, 6);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class IMAPInterceptor extends EventEmitter {\n      constructor(imapConfig) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          deleteAfterRead: false,\n          filter: ['UNSEEN'],\n          markSeen: true,\n          maxRetries: 10\n        };\n        let id = arguments.length > 2 ? arguments[2] : undefined;\n        super();\n        this.options = void 0;\n        this.imap = void 0;\n        this.config = void 0;\n        this.backoffDurationMS = 3000;\n        this.backoff = void 0;\n        this.retries = 0;\n        this.inboxId = void 0;\n        this.options = options;\n        this.config = imapConfig;\n        this.imap = new IMAP(_objectSpread(_objectSpread({\n          connTimeout: 10000,\n          keepalive: true\n        }, imapConfig.tls && {\n          tlsOptions: {\n            servername: imapConfig.host\n          }\n        }), imapConfig));\n        this.retries = 0;\n        this.inboxId = id;\n        this.imap.on('error', async err => {\n          logger.error({\n            msg: 'IMAP error',\n            err\n          });\n        });\n        void this.start();\n      }\n      openInbox() {\n        return new Promise((resolve, reject) => {\n          const cb = (err, mailbox) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(mailbox);\n            }\n          };\n          this.imap.openBox('INBOX', false, cb);\n        });\n      }\n      async start() {\n        console.log('[START]');\n        // On successfully connected.\n        this.imap.on('ready', async () => {\n          if (this.isActive()) {\n            logger.info(\"IMAP connected to \".concat(this.config.user));\n            clearTimeout(this.backoff);\n            this.retries = 0;\n            this.backoffDurationMS = 3000;\n            await this.openInbox();\n            this.imap.on('mail', () => this.getEmails().catch(err => logger.debug('Error on getEmails: ', err.message)));\n          } else {\n            logger.error(\"Can't connect to IMAP server\");\n          }\n        });\n        this.imap.on('error', async () => {\n          this.retries++;\n          await this.reconnect();\n        });\n        this.imap.on('close', async () => {\n          await this.reconnect();\n        });\n        this.retries += 1;\n        return this.imap.connect();\n      }\n      isActive() {\n        var _this$imap;\n        return !!((_this$imap = this.imap) !== null && _this$imap !== void 0 && _this$imap.state && this.imap.state !== 'disconnected');\n      }\n      stop() {\n        let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Function();\n        if (this.backoff) {\n          clearTimeout(this.backoff);\n          this.backoffDurationMS = 3000;\n          console.log('Clear backoff');\n        }\n        this.imap.on('error', async err => {\n          logger.error({\n            msg: 'IMAP error',\n            err\n          });\n        });\n        this.stopWithNoStopBackoff(callback);\n      }\n      stopWithNoStopBackoff() {\n        let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Function();\n        console.log('[stopWithNoStopBackoff]');\n        logger.debug('IMAP stop called');\n        this.imap.once('end', () => {\n          logger.debug('IMAP stopped');\n          callback === null || callback === void 0 ? void 0 : callback();\n        });\n        this.imap.end();\n        this.imap.removeAllListeners();\n      }\n      async reconnect() {\n        if (!this.isActive() && !this.canRetry()) {\n          logger.info(\"Max retries reached for \".concat(this.config.user));\n          this.stop();\n          return this.selfDisable();\n        }\n        if (this.backoff) {\n          clearTimeout(this.backoff);\n          this.backoffDurationMS = 3000;\n        }\n        this.backoff = setTimeout(() => {\n          console.log('[BACKCOFF ]Reconnecting...');\n          this.stopWithNoStopBackoff();\n          void this.start();\n        }, this.backoffDurationMS += this.backoffDurationMS);\n      }\n      imapSearch() {\n        return new Promise((resolve, reject) => {\n          const cb = (err, results) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(results);\n            }\n          };\n          this.imap.search(this.options.filter, cb);\n        });\n      }\n      parseEmails(stream, _info) {\n        return new Promise((resolve, reject) => {\n          const cb = (err, mail) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(mail);\n            }\n          };\n          simpleParser(new Readable().wrap(stream), cb);\n        });\n      }\n      imapFetch(emailIds) {\n        return new Promise((resolve, reject) => {\n          const out = [];\n          const messagecb = (msg, seqno) => {\n            out.push(seqno);\n            const bodycb = (stream, _info) => {\n              simpleParser(new Readable().wrap(stream), (_err, email) => {\n                if (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n                  logger.error({\n                    msg: \"Rejecting email on inbox \".concat(this.config.user),\n                    subject: email.subject\n                  });\n                  return;\n                }\n                this.emit('email', email);\n                if (this.options.deleteAfterRead) {\n                  this.imap.seq.addFlags(email, 'Deleted', err => {\n                    if (err) {\n                      logger.warn(\"Mark deleted error: \".concat(err));\n                    }\n                  });\n                }\n              });\n            };\n            msg.once('body', bodycb);\n          };\n          const errorcb = err => {\n            logger.warn(\"Fetch error: \".concat(err));\n            reject(err);\n          };\n          const endcb = () => {\n            resolve(out);\n          };\n          const fetch = this.imap.fetch(emailIds, {\n            bodies: ['HEADER', 'TEXT', ''],\n            struct: true,\n            markSeen: this.options.markSeen\n          });\n          fetch.on('message', messagecb);\n          fetch.on('error', errorcb);\n          fetch.on('end', endcb);\n        });\n      }\n      // Fetch all UNSEEN messages and pass them for further processing\n      async getEmails() {\n        const emailIds = await this.imapSearch();\n        await this.imapFetch(emailIds);\n      }\n      canRetry() {\n        return this.retries < this.options.maxRetries || this.options.maxRetries === -1;\n      }\n      async selfDisable() {\n        logger.info(\"Disabling inbox \".concat(this.inboxId));\n        // Again, if there's 2 inboxes with the same email, this will prevent looping over the already disabled one\n        // Active filter is just in case :)\n        const {\n          value\n        } = await EmailInbox.setDisabledById(this.inboxId);\n        if (value) {\n          void notifyOnEmailInboxChanged(value, 'updated');\n        }\n        logger.info(\"IMAP inbox \".concat(this.inboxId, \" automatically disabled\"));\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","IMAPInterceptor","EventEmitter","Readable","EmailInbox","IMAP","simpleParser","notifyOnEmailInboxChanged","logger","__reifyWaitForDeps__","constructor","imapConfig","options","arguments","length","undefined","deleteAfterRead","filter","markSeen","maxRetries","id","imap","config","backoffDurationMS","backoff","retries","inboxId","connTimeout","keepalive","tls","tlsOptions","servername","host","on","err","error","msg","start","openInbox","Promise","resolve","reject","cb","mailbox","openBox","console","log","isActive","info","concat","user","clearTimeout","getEmails","catch","debug","message","reconnect","connect","_this$imap","state","stop","callback","Function","stopWithNoStopBackoff","once","end","removeAllListeners","canRetry","selfDisable","setTimeout","imapSearch","results","search","parseEmails","stream","_info","mail","wrap","imapFetch","emailIds","out","messagecb","seqno","push","bodycb","_err","email","rejectBeforeTS","date","subject","emit","seq","addFlags","warn","errorcb","endcb","fetch","bodies","struct","value","setDisabledById","__reify_async_result__","_reifyError","self","async"],"sources":["server/email/IMAPInterceptor.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { Readable } from 'stream';\n\nimport { EmailInbox } from '@rocket.chat/models';\nimport type { ImapMessage, ImapMessageBodyInfo } from 'imap';\nimport IMAP from 'imap';\nimport type { ParsedMail } from 'mailparser';\nimport { simpleParser } from 'mailparser';\n\nimport { notifyOnEmailInboxChanged } from '../../app/lib/server/lib/notifyListener';\nimport { logger } from '../features/EmailInbox/logger';\n\ntype IMAPOptions = {\n\tdeleteAfterRead: boolean;\n\tfilter: any[];\n\trejectBeforeTS?: Date;\n\tmarkSeen: boolean;\n\tmaxRetries: number;\n};\n\nexport declare interface IMAPInterceptor {\n\ton(event: 'email', listener: (email: ParsedMail) => void): this;\n}\n\nexport class IMAPInterceptor extends EventEmitter {\n\tprivate imap: IMAP;\n\n\tprivate config: IMAP.Config;\n\n\tprivate backoffDurationMS = 3000;\n\n\tprivate backoff: NodeJS.Timeout;\n\n\tprivate retries = 0;\n\n\tprivate inboxId: string;\n\n\tconstructor(\n\t\timapConfig: IMAP.Config,\n\t\tprivate options: IMAPOptions = {\n\t\t\tdeleteAfterRead: false,\n\t\t\tfilter: ['UNSEEN'],\n\t\t\tmarkSeen: true,\n\t\t\tmaxRetries: 10,\n\t\t},\n\t\tid: string,\n\t) {\n\t\tsuper();\n\n\t\tthis.config = imapConfig;\n\n\t\tthis.imap = new IMAP({\n\t\t\tconnTimeout: 10000,\n\t\t\tkeepalive: true,\n\t\t\t...(imapConfig.tls && { tlsOptions: { servername: imapConfig.host } }),\n\t\t\t...imapConfig,\n\t\t});\n\t\tthis.retries = 0;\n\t\tthis.inboxId = id;\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tvoid this.start();\n\t}\n\n\topenInbox(): Promise<IMAP.Box> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mailbox: IMAP.Box) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mailbox);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.openBox('INBOX', false, cb);\n\t\t});\n\t}\n\n\tasync start(): Promise<void> {\n\t\tconsole.log('[START]');\n\t\t// On successfully connected.\n\t\tthis.imap.on('ready', async () => {\n\t\t\tif (this.isActive()) {\n\t\t\t\tlogger.info(`IMAP connected to ${this.config.user}`);\n\t\t\t\tclearTimeout(this.backoff);\n\t\t\t\tthis.retries = 0;\n\t\t\t\tthis.backoffDurationMS = 3000;\n\t\t\t\tawait this.openInbox();\n\t\t\t\tthis.imap.on('mail', () => this.getEmails().catch((err: Error) => logger.debug('Error on getEmails: ', err.message)));\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Can't connect to IMAP server\");\n\t\t\t}\n\t\t});\n\n\t\tthis.imap.on('error', async () => {\n\t\t\tthis.retries++;\n\t\t\tawait this.reconnect();\n\t\t});\n\n\t\tthis.imap.on('close', async () => {\n\t\t\tawait this.reconnect();\n\t\t});\n\t\tthis.retries += 1;\n\t\treturn this.imap.connect();\n\t}\n\n\tisActive(): boolean {\n\t\treturn !!(this.imap?.state && this.imap.state !== 'disconnected');\n\t}\n\n\tstop(callback = new Function()): void {\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\n\t\t\tconsole.log('Clear backoff');\n\t\t}\n\t\tthis.imap.on('error', async (err: Error) => {\n\t\t\tlogger.error({ msg: 'IMAP error', err });\n\t\t});\n\t\tthis.stopWithNoStopBackoff(callback);\n\t}\n\n\tprivate stopWithNoStopBackoff(callback = new Function()): void {\n\t\tconsole.log('[stopWithNoStopBackoff]');\n\t\tlogger.debug('IMAP stop called');\n\t\tthis.imap.once('end', () => {\n\t\t\tlogger.debug('IMAP stopped');\n\t\t\tcallback?.();\n\t\t});\n\t\tthis.imap.end();\n\t\tthis.imap.removeAllListeners();\n\t}\n\n\tasync reconnect(): Promise<void> {\n\t\tif (!this.isActive() && !this.canRetry()) {\n\t\t\tlogger.info(`Max retries reached for ${this.config.user}`);\n\t\t\tthis.stop();\n\t\t\treturn this.selfDisable();\n\t\t}\n\n\t\tif (this.backoff) {\n\t\t\tclearTimeout(this.backoff);\n\t\t\tthis.backoffDurationMS = 3000;\n\t\t}\n\n\t\tthis.backoff = setTimeout(\n\t\t\t() => {\n\t\t\t\tconsole.log('[BACKCOFF ]Reconnecting...');\n\t\t\t\tthis.stopWithNoStopBackoff();\n\t\t\t\tvoid this.start();\n\t\t\t},\n\t\t\t(this.backoffDurationMS += this.backoffDurationMS),\n\t\t);\n\t}\n\n\timapSearch(): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, results: number[]) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(results);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.imap.search(this.options.filter, cb);\n\t\t});\n\t}\n\n\tparseEmails(stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): Promise<ParsedMail> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst cb = (err: Error, mail: ParsedMail) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(mail);\n\t\t\t\t}\n\t\t\t};\n\t\t\tsimpleParser(new Readable().wrap(stream), cb);\n\t\t});\n\t}\n\n\timapFetch(emailIds: number[]): Promise<number[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst out: number[] = [];\n\t\t\tconst messagecb = (msg: ImapMessage, seqno: number) => {\n\t\t\t\tout.push(seqno);\n\t\t\t\tconst bodycb = (stream: NodeJS.ReadableStream, _info: ImapMessageBodyInfo): void => {\n\t\t\t\t\tsimpleParser(new Readable().wrap(stream), (_err, email) => {\n\t\t\t\t\t\tif (this.options.rejectBeforeTS && email.date && email.date < this.options.rejectBeforeTS) {\n\t\t\t\t\t\t\tlogger.error({ msg: `Rejecting email on inbox ${this.config.user}`, subject: email.subject });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.emit('email', email);\n\t\t\t\t\t\tif (this.options.deleteAfterRead) {\n\t\t\t\t\t\t\tthis.imap.seq.addFlags(email, 'Deleted', (err) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tlogger.warn(`Mark deleted error: ${err}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tmsg.once('body', bodycb);\n\t\t\t};\n\t\t\tconst errorcb = (err: Error): void => {\n\t\t\t\tlogger.warn(`Fetch error: ${err}`);\n\t\t\t\treject(err);\n\t\t\t};\n\t\t\tconst endcb = (): void => {\n\t\t\t\tresolve(out);\n\t\t\t};\n\t\t\tconst fetch = this.imap.fetch(emailIds, {\n\t\t\t\tbodies: ['HEADER', 'TEXT', ''],\n\t\t\t\tstruct: true,\n\t\t\t\tmarkSeen: this.options.markSeen,\n\t\t\t});\n\n\t\t\tfetch.on('message', messagecb);\n\t\t\tfetch.on('error', errorcb);\n\t\t\tfetch.on('end', endcb);\n\t\t});\n\t}\n\n\t// Fetch all UNSEEN messages and pass them for further processing\n\tasync getEmails(): Promise<void> {\n\t\tconst emailIds = await this.imapSearch();\n\t\tawait this.imapFetch(emailIds);\n\t}\n\n\tcanRetry(): boolean {\n\t\treturn this.retries < this.options.maxRetries || this.options.maxRetries === -1;\n\t}\n\n\tasync selfDisable(): Promise<void> {\n\t\tlogger.info(`Disabling inbox ${this.inboxId}`);\n\n\t\t// Again, if there's 2 inboxes with the same email, this will prevent looping over the already disabled one\n\t\t// Active filter is just in case :)\n\t\tconst { value } = await EmailInbox.setDisabledById(this.inboxId);\n\n\t\tif (value) {\n\t\t\tvoid notifyOnEmailInboxChanged(value, 'updated');\n\t\t}\n\n\t\tlogger.info(`IMAP inbox ${this.inboxId} automatically disabled`);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"954ee5a6e8203e00e54d4bcc3a5d24d26e57ac64"}
