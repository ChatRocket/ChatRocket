{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/contact.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/livechat/server/api/v1/contact.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/contact.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/contact.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/contact.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatContacts, LivechatCustomField, LivechatVisitors } from '@rocket.chat/models';\nimport {\n\tisPOSTOmnichannelContactsProps,\n\tisPOSTUpdateOmnichannelContactsProps,\n\tisGETOmnichannelContactsProps,\n\tisGETOmnichannelContactHistoryProps,\n\tisGETOmnichannelContactsSearchProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { getContactHistory, Contacts, createContact, updateContact, getContacts, isSingleContactEnabled } from '../../lib/Contacts';\n\nAPI.v1.addRoute(\n\t'omnichannel/contact',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\t_id: Match.Maybe(String),\n\t\t\t\ttoken: String,\n\t\t\t\tname: String,\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcustomFields: Match.Maybe(Object),\n\t\t\t\tcontactManager: Match.Maybe({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst contact = await Contacts.registerContact(this.bodyParams);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\tcontactId: String,\n\t\t\t});\n\n\t\t\tconst contact = await LivechatVisitors.findOneEnabledById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contact.search',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tcustom: Match.Maybe(String),\n\t\t\t});\n\t\t\tconst { email, phone, custom } = this.queryParams;\n\n\t\t\tlet customCF: { [k: string]: string } = {};\n\t\t\ttry {\n\t\t\t\tcustomCF = custom && JSON.parse(custom);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params-custom');\n\t\t\t}\n\n\t\t\tif (!email && !phone && !Object.keys(customCF).length) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params');\n\t\t\t}\n\n\t\t\tconst foundCF = await (async () => {\n\t\t\t\tif (!custom) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\tconst cfIds = Object.keys(customCF);\n\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t}).toArray();\n\n\t\t\t\treturn Object.fromEntries(customFields.map(({ _id }) => [`livechatData.${_id}`, new RegExp(escapeRegExp(customCF[_id]), 'i')]));\n\t\t\t})();\n\n\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts',\n\t{ authRequired: true, permissionsRequired: ['create-livechat-contact'], validateParams: isPOSTOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contactId = await createContact({ ...this.bodyParams, unknown: false });\n\n\t\t\treturn API.v1.success({ contactId });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.update',\n\t{ authRequired: true, permissionsRequired: ['update-livechat-contact'], validateParams: isPOSTUpdateOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst contact = await updateContact({ ...this.bodyParams });\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.get',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contact = await LivechatContacts.findOneById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.search',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsSearchProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst result = await getContacts({ searchText, offset, count, sort });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.history',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact-history'], validateParams: isGETOmnichannelContactHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { contactId, source } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst history = await getContactHistory({ contactId, source, count, offset, sort });\n\n\t\t\treturn API.v1.success(history);\n\t\t},\n\t},\n);\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/livechat/server/api/v1/contact.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/livechat/server/api/v1/contact.ts","inputSourceMap":{"version":3,"file":"app/livechat/server/api/v1/contact.ts","sourceRoot":"","sources":["app/livechat/server/api/v1/contact.ts"],"names":[],"mappings":"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","sourcesContent":["import { LivechatContacts, LivechatCustomField, LivechatVisitors } from '@rocket.chat/models';\nimport {\n\tisPOSTOmnichannelContactsProps,\n\tisPOSTUpdateOmnichannelContactsProps,\n\tisGETOmnichannelContactsProps,\n\tisGETOmnichannelContactHistoryProps,\n\tisGETOmnichannelContactsSearchProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { getContactHistory, Contacts, createContact, updateContact, getContacts, isSingleContactEnabled } from '../../lib/Contacts';\n\nAPI.v1.addRoute(\n\t'omnichannel/contact',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\t_id: Match.Maybe(String),\n\t\t\t\ttoken: String,\n\t\t\t\tname: String,\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcustomFields: Match.Maybe(Object),\n\t\t\t\tcontactManager: Match.Maybe({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst contact = await Contacts.registerContact(this.bodyParams);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\tcontactId: String,\n\t\t\t});\n\n\t\t\tconst contact = await LivechatVisitors.findOneEnabledById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contact.search',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tcustom: Match.Maybe(String),\n\t\t\t});\n\t\t\tconst { email, phone, custom } = this.queryParams;\n\n\t\t\tlet customCF: { [k: string]: string } = {};\n\t\t\ttry {\n\t\t\t\tcustomCF = custom && JSON.parse(custom);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params-custom');\n\t\t\t}\n\n\t\t\tif (!email && !phone && !Object.keys(customCF).length) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params');\n\t\t\t}\n\n\t\t\tconst foundCF = await (async () => {\n\t\t\t\tif (!custom) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\tconst cfIds = Object.keys(customCF);\n\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t}).toArray();\n\n\t\t\t\treturn Object.fromEntries(customFields.map(({ _id }) => [`livechatData.${_id}`, new RegExp(escapeRegExp(customCF[_id]), 'i')]));\n\t\t\t})();\n\n\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts',\n\t{ authRequired: true, permissionsRequired: ['create-livechat-contact'], validateParams: isPOSTOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contactId = await createContact({ ...this.bodyParams, unknown: false });\n\n\t\t\treturn API.v1.success({ contactId });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.update',\n\t{ authRequired: true, permissionsRequired: ['update-livechat-contact'], validateParams: isPOSTUpdateOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst contact = await updateContact({ ...this.bodyParams });\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.get',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contact = await LivechatContacts.findOneById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.search',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsSearchProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst result = await getContacts({ searchText, offset, count, sort });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.history',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact-history'], validateParams: isGETOmnichannelContactHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { contactId, source } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst history = await getContactHistory({ contactId, source, count, offset, sort });\n\n\t\t\treturn API.v1.success(history);\n\t\t},\n\t},\n);\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    let LivechatContacts, LivechatCustomField, LivechatVisitors;\n    module.link(\"@rocket.chat/models\", {\n      LivechatContacts(v) {\n        LivechatContacts = v;\n      },\n      LivechatCustomField(v) {\n        LivechatCustomField = v;\n      },\n      LivechatVisitors(v) {\n        LivechatVisitors = v;\n      }\n    }, 0);\n    let isPOSTOmnichannelContactsProps, isPOSTUpdateOmnichannelContactsProps, isGETOmnichannelContactsProps, isGETOmnichannelContactHistoryProps, isGETOmnichannelContactsSearchProps;\n    module.link(\"@rocket.chat/rest-typings\", {\n      isPOSTOmnichannelContactsProps(v) {\n        isPOSTOmnichannelContactsProps = v;\n      },\n      isPOSTUpdateOmnichannelContactsProps(v) {\n        isPOSTUpdateOmnichannelContactsProps = v;\n      },\n      isGETOmnichannelContactsProps(v) {\n        isGETOmnichannelContactsProps = v;\n      },\n      isGETOmnichannelContactHistoryProps(v) {\n        isGETOmnichannelContactHistoryProps = v;\n      },\n      isGETOmnichannelContactsSearchProps(v) {\n        isGETOmnichannelContactsSearchProps = v;\n      }\n    }, 1);\n    let escapeRegExp;\n    module.link(\"@rocket.chat/string-helpers\", {\n      escapeRegExp(v) {\n        escapeRegExp = v;\n      }\n    }, 2);\n    let Match, check;\n    module.link(\"meteor/check\", {\n      Match(v) {\n        Match = v;\n      },\n      check(v) {\n        check = v;\n      }\n    }, 3);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 4);\n    let API;\n    module.link(\"../../../../api/server\", {\n      API(v) {\n        API = v;\n      }\n    }, 5);\n    let getPaginationItems;\n    module.link(\"../../../../api/server/helpers/getPaginationItems\", {\n      getPaginationItems(v) {\n        getPaginationItems = v;\n      }\n    }, 6);\n    let getContactHistory, Contacts, createContact, updateContact, getContacts, isSingleContactEnabled;\n    module.link(\"../../lib/Contacts\", {\n      getContactHistory(v) {\n        getContactHistory = v;\n      },\n      Contacts(v) {\n        Contacts = v;\n      },\n      createContact(v) {\n        createContact = v;\n      },\n      updateContact(v) {\n        updateContact = v;\n      },\n      getContacts(v) {\n        getContacts = v;\n      },\n      isSingleContactEnabled(v) {\n        isSingleContactEnabled = v;\n      }\n    }, 7);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    API.v1.addRoute('omnichannel/contact', {\n      authRequired: true,\n      permissionsRequired: ['view-l-room']\n    }, {\n      async post() {\n        check(this.bodyParams, {\n          _id: Match.Maybe(String),\n          token: String,\n          name: String,\n          email: Match.Maybe(String),\n          phone: Match.Maybe(String),\n          username: Match.Maybe(String),\n          customFields: Match.Maybe(Object),\n          contactManager: Match.Maybe({\n            username: String\n          })\n        });\n        const contact = await Contacts.registerContact(this.bodyParams);\n        return API.v1.success({\n          contact\n        });\n      },\n      async get() {\n        check(this.queryParams, {\n          contactId: String\n        });\n        const contact = await LivechatVisitors.findOneEnabledById(this.queryParams.contactId);\n        return API.v1.success({\n          contact\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/contact.search', {\n      authRequired: true,\n      permissionsRequired: ['view-l-room']\n    }, {\n      async get() {\n        check(this.queryParams, {\n          email: Match.Maybe(String),\n          phone: Match.Maybe(String),\n          custom: Match.Maybe(String)\n        });\n        const {\n          email,\n          phone,\n          custom\n        } = this.queryParams;\n        let customCF = {};\n        try {\n          customCF = custom && JSON.parse(custom);\n        } catch (e) {\n          throw new Meteor.Error('error-invalid-params-custom');\n        }\n        if (!email && !phone && !Object.keys(customCF).length) {\n          throw new Meteor.Error('error-invalid-params');\n        }\n        const foundCF = await (async () => {\n          if (!custom) {\n            return {};\n          }\n          const cfIds = Object.keys(customCF);\n          const customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n            projection: {\n              _id: 1\n            }\n          }).toArray();\n          return Object.fromEntries(customFields.map(_ref => {\n            let {\n              _id\n            } = _ref;\n            return [\"livechatData.\".concat(_id), new RegExp(escapeRegExp(customCF[_id]), 'i')];\n          }));\n        })();\n        const contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n        return API.v1.success({\n          contact\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/contacts', {\n      authRequired: true,\n      permissionsRequired: ['create-livechat-contact'],\n      validateParams: isPOSTOmnichannelContactsProps\n    }, {\n      async post() {\n        if (!isSingleContactEnabled()) {\n          return API.v1.unauthorized();\n        }\n        const contactId = await createContact(_objectSpread(_objectSpread({}, this.bodyParams), {}, {\n          unknown: false\n        }));\n        return API.v1.success({\n          contactId\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/contacts.update', {\n      authRequired: true,\n      permissionsRequired: ['update-livechat-contact'],\n      validateParams: isPOSTUpdateOmnichannelContactsProps\n    }, {\n      async post() {\n        if (!isSingleContactEnabled()) {\n          return API.v1.unauthorized();\n        }\n        const contact = await updateContact(_objectSpread({}, this.bodyParams));\n        return API.v1.success({\n          contact\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/contacts.get', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-contact'],\n      validateParams: isGETOmnichannelContactsProps\n    }, {\n      async get() {\n        if (!isSingleContactEnabled()) {\n          return API.v1.unauthorized();\n        }\n        const contact = await LivechatContacts.findOneById(this.queryParams.contactId);\n        return API.v1.success({\n          contact\n        });\n      }\n    });\n    API.v1.addRoute('omnichannel/contacts.search', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-contact'],\n      validateParams: isGETOmnichannelContactsSearchProps\n    }, {\n      async get() {\n        if (!isSingleContactEnabled()) {\n          return API.v1.unauthorized();\n        }\n        const {\n          searchText\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const result = await getContacts({\n          searchText,\n          offset,\n          count,\n          sort\n        });\n        return API.v1.success(result);\n      }\n    });\n    API.v1.addRoute('omnichannel/contacts.history', {\n      authRequired: true,\n      permissionsRequired: ['view-livechat-contact-history'],\n      validateParams: isGETOmnichannelContactHistoryProps\n    }, {\n      async get() {\n        if (!isSingleContactEnabled()) {\n          return API.v1.unauthorized();\n        }\n        const {\n          contactId,\n          source\n        } = this.queryParams;\n        const {\n          offset,\n          count\n        } = await getPaginationItems(this.queryParams);\n        const {\n          sort\n        } = await this.parseJsonQuery();\n        const history = await getContactHistory({\n          contactId,\n          source,\n          count,\n          offset,\n          sort\n        });\n        return API.v1.success(history);\n      }\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","LivechatContacts","LivechatCustomField","LivechatVisitors","isPOSTOmnichannelContactsProps","isPOSTUpdateOmnichannelContactsProps","isGETOmnichannelContactsProps","isGETOmnichannelContactHistoryProps","isGETOmnichannelContactsSearchProps","escapeRegExp","Match","check","Meteor","API","getPaginationItems","getContactHistory","Contacts","createContact","updateContact","getContacts","isSingleContactEnabled","__reifyWaitForDeps__","v1","addRoute","authRequired","permissionsRequired","post","bodyParams","_id","Maybe","String","token","name","email","phone","username","customFields","Object","contactManager","contact","registerContact","success","get","queryParams","contactId","findOneEnabledById","custom","customCF","JSON","parse","e","Error","keys","length","foundCF","cfIds","findMatchingCustomFieldsByIds","projection","toArray","fromEntries","map","_ref","concat","RegExp","findOneByEmailAndPhoneAndCustomField","validateParams","unauthorized","unknown","findOneById","searchText","offset","count","sort","parseJsonQuery","result","source","history","__reify_async_result__","_reifyError","self","async"],"sources":["app/livechat/server/api/v1/contact.ts"],"sourcesContent":["import { LivechatContacts, LivechatCustomField, LivechatVisitors } from '@rocket.chat/models';\nimport {\n\tisPOSTOmnichannelContactsProps,\n\tisPOSTUpdateOmnichannelContactsProps,\n\tisGETOmnichannelContactsProps,\n\tisGETOmnichannelContactHistoryProps,\n\tisGETOmnichannelContactsSearchProps,\n} from '@rocket.chat/rest-typings';\nimport { escapeRegExp } from '@rocket.chat/string-helpers';\nimport { Match, check } from 'meteor/check';\nimport { Meteor } from 'meteor/meteor';\n\nimport { API } from '../../../../api/server';\nimport { getPaginationItems } from '../../../../api/server/helpers/getPaginationItems';\nimport { getContactHistory, Contacts, createContact, updateContact, getContacts, isSingleContactEnabled } from '../../lib/Contacts';\n\nAPI.v1.addRoute(\n\t'omnichannel/contact',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync post() {\n\t\t\tcheck(this.bodyParams, {\n\t\t\t\t_id: Match.Maybe(String),\n\t\t\t\ttoken: String,\n\t\t\t\tname: String,\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tusername: Match.Maybe(String),\n\t\t\t\tcustomFields: Match.Maybe(Object),\n\t\t\t\tcontactManager: Match.Maybe({\n\t\t\t\t\tusername: String,\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tconst contact = await Contacts.registerContact(this.bodyParams);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\tcontactId: String,\n\t\t\t});\n\n\t\t\tconst contact = await LivechatVisitors.findOneEnabledById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contact.search',\n\t{\n\t\tauthRequired: true,\n\t\tpermissionsRequired: ['view-l-room'],\n\t},\n\t{\n\t\tasync get() {\n\t\t\tcheck(this.queryParams, {\n\t\t\t\temail: Match.Maybe(String),\n\t\t\t\tphone: Match.Maybe(String),\n\t\t\t\tcustom: Match.Maybe(String),\n\t\t\t});\n\t\t\tconst { email, phone, custom } = this.queryParams;\n\n\t\t\tlet customCF: { [k: string]: string } = {};\n\t\t\ttry {\n\t\t\t\tcustomCF = custom && JSON.parse(custom);\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params-custom');\n\t\t\t}\n\n\t\t\tif (!email && !phone && !Object.keys(customCF).length) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-params');\n\t\t\t}\n\n\t\t\tconst foundCF = await (async () => {\n\t\t\t\tif (!custom) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\tconst cfIds = Object.keys(customCF);\n\n\t\t\t\tconst customFields = await LivechatCustomField.findMatchingCustomFieldsByIds(cfIds, 'visitor', true, {\n\t\t\t\t\tprojection: { _id: 1 },\n\t\t\t\t}).toArray();\n\n\t\t\t\treturn Object.fromEntries(customFields.map(({ _id }) => [`livechatData.${_id}`, new RegExp(escapeRegExp(customCF[_id]), 'i')]));\n\t\t\t})();\n\n\t\t\tconst contact = await LivechatVisitors.findOneByEmailAndPhoneAndCustomField(email, phone, foundCF);\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts',\n\t{ authRequired: true, permissionsRequired: ['create-livechat-contact'], validateParams: isPOSTOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contactId = await createContact({ ...this.bodyParams, unknown: false });\n\n\t\t\treturn API.v1.success({ contactId });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.update',\n\t{ authRequired: true, permissionsRequired: ['update-livechat-contact'], validateParams: isPOSTUpdateOmnichannelContactsProps },\n\t{\n\t\tasync post() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst contact = await updateContact({ ...this.bodyParams });\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.get',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\t\t\tconst contact = await LivechatContacts.findOneById(this.queryParams.contactId);\n\n\t\t\treturn API.v1.success({ contact });\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.search',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact'], validateParams: isGETOmnichannelContactsSearchProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { searchText } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst result = await getContacts({ searchText, offset, count, sort });\n\n\t\t\treturn API.v1.success(result);\n\t\t},\n\t},\n);\n\nAPI.v1.addRoute(\n\t'omnichannel/contacts.history',\n\t{ authRequired: true, permissionsRequired: ['view-livechat-contact-history'], validateParams: isGETOmnichannelContactHistoryProps },\n\t{\n\t\tasync get() {\n\t\t\tif (!isSingleContactEnabled()) {\n\t\t\t\treturn API.v1.unauthorized();\n\t\t\t}\n\n\t\t\tconst { contactId, source } = this.queryParams;\n\t\t\tconst { offset, count } = await getPaginationItems(this.queryParams);\n\t\t\tconst { sort } = await this.parseJsonQuery();\n\n\t\t\tconst history = await getContactHistory({ contactId, source, count, offset, sort });\n\n\t\t\treturn API.v1.success(history);\n\t\t},\n\t},\n);\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"82181ff7e8c1528861a7b7bf9ec327d35b66ee0a"}
