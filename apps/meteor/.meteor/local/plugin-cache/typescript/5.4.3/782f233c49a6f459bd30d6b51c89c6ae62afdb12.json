{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Sessions.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/Sessions.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Sessions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Sessions.ts","sourceRoot":"","sources":["server/models/raw/Sessions.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tISession,\n\tUserSessionAggregation,\n\tDeviceSessionAggregation,\n\tOSSessionAggregation,\n\tUserSessionAggregationResult,\n\tDeviceSessionAggregationResult,\n\tDeviceManagementSession,\n\tDeviceManagementPopulatedSession,\n\tOSSessionAggregationResult,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { ISessionsModel } from '@rocket.chat/model-typings';\nimport { getCollectionName } from '@rocket.chat/models';\nimport type { PaginatedResult, WithItemCount } from '@rocket.chat/rest-typings';\nimport type {\n\tAggregationCursor,\n\tAnyBulkWriteOperation,\n\tBulkWriteResult,\n\tCollection,\n\tDocument,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tIndexDescription,\n\tUpdateResult,\n\tOptionalId,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DestructuredDate = { year: number; month: number; day: number };\ntype DestructuredDateWithType = {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n\ttype?: 'month' | 'week';\n};\ntype DestructuredRange = { start: DestructuredDate; end: DestructuredDate };\ntype DateRange = { start: Date; end: Date };\n\ntype CustomSortOp = 'loginAt' | 'device.name' | 'device.os.name';\ntype CustomSortOpAdmin = CustomSortOp | '_user.username' | '_user.name';\n\nconst matchBasedOnDate = (start: DestructuredDate, end: DestructuredDate): Filter<ISession> => {\n\tif (start.year === end.year && start.month === end.month) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\tmonth: start.month,\n\t\t\tday: { $gte: start.day, $lte: end.day },\n\t\t};\n\t}\n\n\tif (start.year === end.year) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\treturn {\n\t\t$and: [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $gt: start.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $lt: end.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,\n): { listGroup: object; countGroup: object } => {\n\tconst isOpenSession = { $not: ['$session.closedAt'] };\n\tconst isAfterLoginAt = { $gte: ['$range', { $hour: '$session.loginAt' }] };\n\tconst isBeforeClosedAt = { $lte: ['$range', { $hour: '$session.closedAt' }] };\n\n\tconst listGroup = {\n\t\t$group: {\n\t\t\t_id,\n\t\t\tusersList: {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t$cond: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [{ $and: [isOpenSession, isAfterLoginAt] }, { $and: [isAfterLoginAt, isBeforeClosedAt] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$session.userId',\n\t\t\t\t\t\t'$$REMOVE',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tconst countGroup = {\n\t\t$addFields: {\n\t\t\tusers: { $size: '$usersList' },\n\t\t},\n\t};\n\n\treturn { listGroup, countGroup };\n};\n\nconst getSortByFullDate = (): { year: number; month: number; day: number } => ({\n\tyear: -1,\n\tmonth: -1,\n\tday: -1,\n});\n\nconst getProjectionByFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$_id.day',\n\tmonth: '$_id.month',\n\tyear: '$_id.year',\n});\n\nconst getProjectionFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$day',\n\tmonth: '$month',\n\tyear: '$year',\n});\n\nexport const aggregates = {\n\tdailySessions(\n\t\tcollection: Collection<ISession>,\n\t\t{ start, end }: DestructuredRange,\n\t): AggregationCursor<\n\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\ttime: number;\n\t\t\tsessions: number;\n\t\t\tdevices: ISession['device'][];\n\t\t\t_computedAt: string;\n\t\t}\n\t> {\n\t\tconst pipeline = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tuserId: { $exists: true },\n\t\t\t\t\tlastActivityAt: { $exists: true },\n\t\t\t\t\tdevice: { $exists: true },\n\t\t\t\t\ttype: 'session',\n\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tuserId: 1,\n\t\t\t\t\tdevice: 1,\n\t\t\t\t\tday: 1,\n\t\t\t\t\tmonth: 1,\n\t\t\t\t\tyear: 1,\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: { $trunc: { $divide: [{ $subtract: ['$lastActivityAt', '$loginAt'] }, 1000] } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttime: { $gt: 0 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\tdevice: '$device',\n\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\ttime: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: '$sessions' },\n\t\t\t\t\tdevices: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\tdevice: '$_id.device',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttype: { $literal: 'user_daily' },\n\t\t\t\t\t_computedAt: { $literal: new Date() },\n\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: 1,\n\t\t\t\t\tsessions: 1,\n\t\t\t\t\tdevices: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn collection.aggregate<\n\t\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\t\ttime: number;\n\t\t\t\tsessions: number;\n\t\t\t\tdevices: ISession['device'][];\n\t\t\t\t_computedAt: string;\n\t\t\t}\n\t\t>(pipeline, { allowDiskUse: true });\n\t},\n\n\tasync getUniqueUsersOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\troles: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tasync getUniqueUsersOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetMatchOfLastMonthOrWeek({ year, month, day, type = 'month' }: DestructuredDateWithType): Filter<ISession> {\n\t\tlet startOfPeriod;\n\n\t\tif (type === 'month') {\n\t\t\tconst pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n\t\t\tconst currMonthLastDay = new Date(year, month, 0).getDate();\n\n\t\t\tstartOfPeriod = new Date(year, month - 1, day);\n\t\t\tstartOfPeriod.setMonth(\n\t\t\t\tstartOfPeriod.getMonth() - 1,\n\t\t\t\t(currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1,\n\t\t\t);\n\t\t} else {\n\t\t\tstartOfPeriod = new Date(year, month - 1, day - 6);\n\t\t}\n\n\t\tconst startOfPeriodObject = {\n\t\t\tyear: startOfPeriod.getFullYear(),\n\t\t\tmonth: startOfPeriod.getMonth() + 1,\n\t\t\tday: startOfPeriod.getDate(),\n\t\t};\n\n\t\tif (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday: { $gte: startOfPeriodObject.day, $lte: day },\n\t\t\t};\n\t\t}\n\n\t\tif (year === startOfPeriodObject.year) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $gt: startOfPeriodObject.year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\n\tasync getUniqueDevicesOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueDevicesOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n};\n\nexport class SessionsRaw extends BaseRaw<ISession> implements ISessionsModel {\n\tprivate secondaryCollection: Collection<ISession>;\n\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISession>>) {\n\t\tsuper(db, 'sessions', trash);\n\n\t\tthis.secondaryCollection = db.collection(getCollectionName('sessions'), { readPreference: readSecondaryPreferred(db) });\n\t}\n\n\tasync aggregateSessionsByUserId({\n\t\tuid,\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tuid: string;\n\t\tsort?: Record<CustomSortOp, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tuserId: {\n\t\t\t\t\t\t\t$eq: uid,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, projectOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tasync aggregateSessionsAndPopulate({\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tsort?: Record<CustomSortOpAdmin, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementPopulatedSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessionId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\n\t\tconst lookupOperator = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'userId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: '_user',\n\t\t\t},\n\t\t};\n\t\tconst unwindOperator = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$_user',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\t_user: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tavatarOrigin: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, lookupOperator, unwindOperator, projectOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementPopulatedSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { createdAt: -1 } },\n\t\t\t{ key: { loginAt: -1 } },\n\t\t\t{ key: { searchTerm: 1 }, partialFilterExpression: { searchTerm: { $exists: true } }, background: true },\n\t\t\t{ key: { ip: 1, loginAt: -1 } },\n\t\t\t{ key: { userId: 1, sessionId: 1 } },\n\t\t\t{ key: { type: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { sessionId: 1, instanceId: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { _computedAt: 1 }, expireAfterSeconds: 60 * 60 * 24 * 45 },\n\t\t\t{\n\t\t\t\tkey: { 'loginToken': 1, 'logoutAt': 1, 'userId': 1, 'device.name': 1, 'device.os.name': 1, 'logintAt': -1 },\n\t\t\t\tpartialFilterExpression: { loginToken: { $exists: true } },\n\t\t\t\tbackground: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tasync getActiveUsersBetweenDates({ start, end }: DestructuredRange): Promise<ISession[]> {\n\t\treturn this.col\n\t\t\t.aggregate<ISession>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync findLastLoginByIp(ip: string): Promise<ISession | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tip,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: { loginAt: -1 },\n\t\t\t\tlimit: 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOneBySessionId(sessionId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId });\n\t}\n\n\tfindOneBySessionIdAndUserId(sessionId: string, userId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId, userId, loginToken: { $exists: true, $ne: '' } });\n\t}\n\n\tfindSessionsNotClosedByDateWithoutLastActivity({ year, month, day }: DestructuredDate): FindCursor<ISession> {\n\t\treturn this.find({\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t});\n\t}\n\n\tasync getActiveUsersOfPeriodByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusersList: IUser['_id'][];\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusersList: IUser['_id'][];\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusersList: {\n\t\t\t\t\t\t\t$addToSet: '$_id.userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusersList: 1,\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getBusiestTimeWithinHoursPeriod({ start, end, groupSize }: DateRange & { groupSize: number }): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [0, 24, groupSize],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour('$range');\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id',\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionsByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: { ...getProjectionFullDate() },\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionByHourAndDayBetweenDates({ start, end }: DateRange): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [{ $hour: '$loginAt' }, { $sum: [{ $ifNull: [{ $hour: '$closedAt' }, 23] }, 1] }],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour({\n\t\t\trange: '$range',\n\t\t\tday: '$session.day',\n\t\t\tmonth: '$session.month',\n\t\t\tyear: '$session.year',\n\t\t});\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id.range',\n\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\t...getSortByFullDate(),\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getUniqueUsersOfYesterday(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastMonth(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastWeek(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfYesterday(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastMonth(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastWeek(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfYesterday(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, { year, month, day }),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastMonth(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastWeek(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isValidData(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): boolean {\n\t\treturn Boolean(data.year && data.month && data.day && data.sessionId && data.instanceId);\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateResult | undefined> {\n\t\t// TODO: check if we should create a session when there is no loginToken or not\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\n\t\tif (!this.isValidData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },\n\t\t\t{\n\t\t\t\t$set: data,\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync closeByInstanceIdAndSessionId(instanceId: string, sessionId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst closeTime = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tclosedAt: closeTime,\n\t\t\t\tlastActivityAt: closeTime,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateActiveSessionsByDateAndInstanceIdAndIds(\n\t\t{ year, month, day }: Partial<DestructuredDate> = {},\n\t\tinstanceId: string,\n\t\tsessions: string[],\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tsessionId: { $in: sessions },\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync updateActiveSessionsByDate(\n\t\t{ year, month, day }: DestructuredDate,\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'session',\n\t\t\t\tclosedAt: { $exists: false },\n\t\t\t\tlastActivityAt: { $exists: false },\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tasync logoutByInstanceIdAndSessionIdAndUserId(instanceId: string, sessionId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\n\t\tconst logoutAt = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync logoutBySessionIdAndUserId({\n\t\tsessionId,\n\t\tuserId,\n\t}: {\n\t\tsessionId: ISession['sessionId'];\n\t\tuserId: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });\n\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t\tlogoutBy: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken: session?.loginToken }, updateObj);\n\t}\n\n\tasync logoutByloginTokenAndUserId({\n\t\tloginToken,\n\t\tuserId,\n\t\tlogoutBy,\n\t}: {\n\t\tloginToken: ISession['loginToken'];\n\t\tuserId: IUser['_id'];\n\t\tlogoutBy?: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlogoutBy: logoutBy || userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken }, updateObj);\n\t}\n\n\tasync createBatch(sessions: OptionalId<ISession>[]): Promise<BulkWriteResult | undefined> {\n\t\tif (!sessions || sessions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops: AnyBulkWriteOperation<ISession>[] = [];\n\t\tsessions.forEach((doc) => {\n\t\t\tconst { year, month, day, sessionId, instanceId } = doc;\n\t\t\tdelete doc._id;\n\t\t\tif (this.isValidData(doc)) {\n\t\t\t\tops.push({\n\t\t\t\t\tupdateOne: {\n\t\t\t\t\t\tfilter: { year, month, day, sessionId, instanceId },\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t$set: doc,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupsert: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn this.col.bulkWrite(ops, { ordered: false });\n\t}\n\n\tasync updateDailySessionById(_id: ISession['_id'], record: Partial<ISession>): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $set: record }, { upsert: true });\n\t}\n\n\tasync updateAllSessionsByDateToComputed({ start, end }: DestructuredRange): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttype: 'session',\n\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttype: 'computed-session',\n\t\t\t\t\t_computedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/Sessions.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/Sessions.ts","inputSourceMap":{"version":3,"file":"server/models/raw/Sessions.ts","sourceRoot":"","sources":["server/models/raw/Sessions.ts"],"names":[],"mappings":"AAcA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAgBxD,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAC;AAC/E,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAepC,MAAM,gBAAgB,GAAG,CAAC,KAAuB,EAAE,GAAqB,EAAoB,EAAE;IAC7F,IAAI,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,EAAE,CAAC;QAC1D,OAAO;YACN,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE;SACvC,CAAC;IACH,CAAC;IAED,IAAI,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC;QAC7B,OAAO;YACN,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,IAAI,EAAE;gBACL;oBACC,GAAG,EAAE;wBACJ;4BACC,KAAK,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE;yBAC3B;wBACD;4BACC,KAAK,EAAE,KAAK,CAAC,KAAK;4BAClB,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,EAAE;yBACxB;qBACD;iBACD;gBACD;oBACC,GAAG,EAAE;wBACJ;4BACC,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE;yBACzB;wBACD;4BACC,KAAK,EAAE,GAAG,CAAC,KAAK;4BAChB,GAAG,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE;yBACtB;qBACD;iBACD;aACD;SACD,CAAC;IACH,CAAC;IAED,OAAO;QACN,IAAI,EAAE;YACL;gBACC,GAAG,EAAE;oBACJ;wBACC,IAAI,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE;qBACzB;oBACD;wBACC,IAAI,EAAE,KAAK,CAAC,IAAI;wBAChB,KAAK,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE;qBAC3B;oBACD;wBACC,IAAI,EAAE,KAAK,CAAC,IAAI;wBAChB,KAAK,EAAE,KAAK,CAAC,KAAK;wBAClB,GAAG,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,EAAE;qBACxB;iBACD;aACD;YACD;gBACC,GAAG,EAAE;oBACJ;wBACC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE;qBACvB;oBACD;wBACC,IAAI,EAAE,GAAG,CAAC,IAAI;wBACd,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,KAAK,EAAE;qBACzB;oBACD;wBACC,IAAI,EAAE,GAAG,CAAC,IAAI;wBACd,KAAK,EAAE,GAAG,CAAC,KAAK;wBAChB,GAAG,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE;qBACtB;iBACD;aACD;SACD;KACD,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAC9B,GAAyE,EAC7B,EAAE;IAC9C,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC;IACtD,MAAM,cAAc,GAAG,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC;IAC3E,MAAM,gBAAgB,GAAG,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,EAAE,CAAC;IAE9E,MAAM,SAAS,GAAG;QACjB,MAAM,EAAE;YACP,GAAG;YACH,SAAS,EAAE;gBACV,SAAS,EAAE;oBACV,KAAK,EAAE;wBACN;4BACC,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,cAAc,EAAE,gBAAgB,CAAC,EAAE,CAAC;yBAC9F;wBACD,iBAAiB;wBACjB,UAAU;qBACV;iBACD;aACD;SACD;KACD,CAAC;IAEF,MAAM,UAAU,GAAG;QAClB,UAAU,EAAE;YACX,KAAK,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE;SAC9B;KACD,CAAC;IAEF,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,GAAiD,EAAE,CAAC,CAAC;IAC9E,IAAI,EAAE,CAAC,CAAC;IACR,KAAK,EAAE,CAAC,CAAC;IACT,GAAG,EAAE,CAAC,CAAC;CACP,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,GAAiD,EAAE,CAAC,CAAC;IACpF,GAAG,EAAE,UAAU;IACf,KAAK,EAAE,YAAY;IACnB,IAAI,EAAE,WAAW;CACjB,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAG,GAAiD,EAAE,CAAC,CAAC;IAClF,GAAG,EAAE,MAAM;IACX,KAAK,EAAE,QAAQ;IACf,IAAI,EAAE,OAAO;CACb,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,UAAU,GAAG;IACzB,aAAa,CACZ,UAAgC,EAChC,EAAE,KAAK,EAAE,GAAG,EAAqB;QASjC,MAAM,QAAQ,GAAG;YAChB;gBACC,MAAM,EAAE;oBACP,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;oBACzB,cAAc,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;oBACjC,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;oBACzB,IAAI,EAAE,SAAS;oBACf,GAAG,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC;iBAC/B;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,MAAM,EAAE,CAAC;oBACT,MAAM,EAAE,CAAC;oBACT,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,iBAAiB,EAAE,CAAC;oBACpB,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;iBACrF;aACD;YACD;gBACC,MAAM,EAAE;oBACP,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;iBAChB;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,MAAM,EAAE,SAAS;wBACjB,MAAM,EAAE,SAAS;wBACjB,GAAG,qBAAqB,EAAE;qBAC1B;oBACD,iBAAiB,EAAE,EAAE,MAAM,EAAE,oBAAoB,EAAE;oBACnD,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;oBACvB,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;iBACrB;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,MAAM,EAAE,aAAa;wBACrB,GAAG,uBAAuB,EAAE;qBAC5B;oBACD,iBAAiB,EAAE,EAAE,MAAM,EAAE,oBAAoB,EAAE;oBACnD,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;oBACvB,QAAQ,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;oBAC/B,OAAO,EAAE;wBACR,KAAK,EAAE;4BACN,QAAQ,EAAE,WAAW;4BACrB,IAAI,EAAE,OAAO;4BACb,MAAM,EAAE,aAAa;yBACrB;qBACD;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,GAAG,EAAE,CAAC;iBACN;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE;oBAChC,WAAW,EAAE,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,EAAE;oBACrC,GAAG,uBAAuB,EAAE;oBAC5B,MAAM,EAAE,aAAa;oBACrB,iBAAiB,EAAE,CAAC;oBACpB,IAAI,EAAE,CAAC;oBACP,QAAQ,EAAE,CAAC;oBACX,OAAO,EAAE,CAAC;iBACV;aACD;SACD,CAAC;QAEF,OAAO,UAAU,CAAC,SAAS,CAOzB,QAAQ,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC9B,UAAgC,EAChC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAoB;QAEtC,OAAO,UAAU;aACf,SAAS,CAAyB;YAClC;gBACC,MAAM,EAAE;oBACP,IAAI;oBACJ,KAAK;oBACL,GAAG;oBACH,IAAI,EAAE,YAAY;iBAClB;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,GAAG,qBAAqB,EAAE;wBAC1B,iBAAiB,EAAE,oBAAoB;qBACvC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,CAAC;qBACP;oBACD,QAAQ,EAAE;wBACT,IAAI,EAAE,WAAW;qBACjB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,OAAO;qBACb;iBACD;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,GAAG,qBAAqB,EAAE;qBAC1B;oBACD,KAAK,EAAE;wBACN,KAAK,EAAE;4BACN,IAAI,EAAE,wBAAwB;4BAC9B,KAAK,EAAE,QAAQ;4BACf,QAAQ,EAAE,WAAW;4BACrB,IAAI,EAAE,OAAO;yBACb;qBACD;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,QAAQ;qBACd;oBACD,QAAQ,EAAE;wBACT,IAAI,EAAE,WAAW;qBACjB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,OAAO;qBACb;iBACD;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC;oBACX,IAAI,EAAE,CAAC;oBACP,KAAK,EAAE,CAAC;iBACR;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,+BAA+B,CACpC,UAAgC,EAChC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,GAAG,OAAO,EAA4B;QAE9D,OAAO,UAAU;aACf,SAAS,CACT;YACC;gBACC,MAAM,EAAE;oBACP,IAAI,EAAE,YAAY;oBAClB,GAAG,UAAU,CAAC,yBAAyB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBACnE;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,MAAM,EAAE,SAAS;qBACjB;oBACD,iBAAiB,EAAE,EAAE,MAAM,EAAE,oBAAoB,EAAE;oBACnD,QAAQ,EAAE;wBACT,IAAI,EAAE,WAAW;qBACjB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,OAAO;qBACb;iBACD;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,iBAAiB,EAAE,oBAAoB;qBACvC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,CAAC;qBACP;oBACD,QAAQ,EAAE;wBACT,IAAI,EAAE,WAAW;qBACjB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,OAAO;qBACb;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE;wBACN,KAAK,EAAE;4BACN,IAAI,EAAE,wBAAwB;4BAC9B,KAAK,EAAE,QAAQ;4BACf,QAAQ,EAAE,WAAW;4BACrB,IAAI,EAAE,OAAO;yBACb;qBACD;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,QAAQ;qBACd;oBACD,QAAQ,EAAE;wBACT,IAAI,EAAE,WAAW;qBACjB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,OAAO;qBACb;iBACD;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,KAAK,EAAE,CAAC;oBACR,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC;oBACX,IAAI,EAAE,CAAC;iBACP;aACD;SACD,EACD,EAAE,YAAY,EAAE,IAAI,EAAE,CACtB;aACA,OAAO,EAAE,CAAC;IACb,CAAC;IAED,yBAAyB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,GAAG,OAAO,EAA4B;QACvF,IAAI,aAAa,CAAC;QAElB,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;YACtB,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAChE,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAE5D,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;YAC/C,aAAa,CAAC,QAAQ,CACrB,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC,EAC5B,CAAC,gBAAgB,KAAK,GAAG,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CACnF,CAAC;QACH,CAAC;aAAM,CAAC;YACP,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,mBAAmB,GAAG;YAC3B,IAAI,EAAE,aAAa,CAAC,WAAW,EAAE;YACjC,KAAK,EAAE,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC;YACnC,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE;SAC5B,CAAC;QAEF,IAAI,IAAI,KAAK,mBAAmB,CAAC,IAAI,IAAI,KAAK,KAAK,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAC9E,OAAO;gBACN,IAAI;gBACJ,KAAK;gBACL,GAAG,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;aACjD,CAAC;QACH,CAAC;QAED,IAAI,IAAI,KAAK,mBAAmB,CAAC,IAAI,EAAE,CAAC;YACvC,OAAO;gBACN,IAAI;gBACJ,IAAI,EAAE;oBACL;wBACC,GAAG,EAAE;4BACJ;gCACC,KAAK,EAAE,EAAE,GAAG,EAAE,mBAAmB,CAAC,KAAK,EAAE;6BACzC;4BACD;gCACC,KAAK,EAAE,mBAAmB,CAAC,KAAK;gCAChC,GAAG,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,EAAE;6BACtC;yBACD;qBACD;oBACD;wBACC,GAAG,EAAE;4BACJ;gCACC,KAAK,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE;6BACrB;4BACD;gCACC,KAAK;gCACL,GAAG,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;6BAClB;yBACD;qBACD;iBACD;aACD,CAAC;QACH,CAAC;QAED,OAAO;YACN,IAAI,EAAE;gBACL;oBACC,GAAG,EAAE;wBACJ;4BACC,IAAI,EAAE,EAAE,GAAG,EAAE,mBAAmB,CAAC,IAAI,EAAE;yBACvC;wBACD;4BACC,IAAI,EAAE,mBAAmB,CAAC,IAAI;4BAC9B,KAAK,EAAE,EAAE,GAAG,EAAE,mBAAmB,CAAC,KAAK,EAAE;yBACzC;wBACD;4BACC,IAAI,EAAE,mBAAmB,CAAC,IAAI;4BAC9B,KAAK,EAAE,mBAAmB,CAAC,KAAK;4BAChC,GAAG,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,GAAG,EAAE;yBACtC;qBACD;iBACD;gBACD;oBACC,GAAG,EAAE;wBACJ;4BACC,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;yBACnB;wBACD;4BACC,IAAI;4BACJ,KAAK,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE;yBACrB;wBACD;4BACC,IAAI;4BACJ,KAAK;4BACL,GAAG,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;yBAClB;qBACD;iBACD;aACD;SACD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,iCAAiC,CACtC,UAAgC,EAChC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,GAAG,OAAO,EAA4B;QAE9D,OAAO,UAAU;aACf,SAAS,CACT;YACC;gBACC,MAAM,EAAE;oBACP,IAAI,EAAE,YAAY;oBAClB,GAAG,UAAU,CAAC,yBAAyB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBACnE;aACD;YACD;gBACC,OAAO,EAAE,UAAU;aACnB;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,IAAI,EAAE,sBAAsB;wBAC5B,IAAI,EAAE,sBAAsB;wBAC5B,OAAO,EAAE,yBAAyB;qBAClC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,mBAAmB;qBACzB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,eAAe;qBACrB;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,cAAc;oBACvB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;iBACP;aACD;SACD,EACD,EAAE,YAAY,EAAE,IAAI,EAAE,CACtB;aACA,OAAO,EAAE,CAAC;IACb,CAAC;IAED,2BAA2B,CAC1B,UAAgC,EAChC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAoB;QAEtC,OAAO,UAAU;aACf,SAAS,CAA2B;YACpC;gBACC,MAAM,EAAE;oBACP,IAAI;oBACJ,KAAK;oBACL,GAAG;oBACH,IAAI,EAAE,YAAY;iBAClB;aACD;YACD;gBACC,OAAO,EAAE,UAAU;aACnB;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,IAAI,EAAE,sBAAsB;wBAC5B,IAAI,EAAE,sBAAsB;wBAC5B,OAAO,EAAE,yBAAyB;qBAClC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,mBAAmB;qBACzB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,eAAe;qBACrB;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,WAAW;oBACjB,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,cAAc;oBACvB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;iBACP;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;IAED,4BAA4B,CAC3B,UAAgC,EAChC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,GAAG,OAAO,EAA4B;QAE9D,OAAO,UAAU;aACf,SAAS,CACT;YACC;gBACC,MAAM,EAAE;oBACP,MAAM,EAAE,YAAY;oBACpB,wBAAwB,EAAE;wBACzB,OAAO,EAAE,IAAI;qBACb;oBACD,GAAG,UAAU,CAAC,yBAAyB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;iBACnE;aACD;YACD;gBACC,OAAO,EAAE,UAAU;aACnB;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,IAAI,EAAE,yBAAyB;wBAC/B,OAAO,EAAE,4BAA4B;qBACrC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,mBAAmB;qBACzB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,eAAe;qBACrB;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,cAAc;oBACvB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;iBACP;aACD;SACD,EACD,EAAE,YAAY,EAAE,IAAI,EAAE,CACtB;aACA,OAAO,EAAE,CAAC;IACb,CAAC;IAED,sBAAsB,CAAC,UAAgC,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAoB;QAC9F,OAAO,UAAU;aACf,SAAS,CAAuB;YAChC;gBACC,MAAM,EAAE;oBACP,IAAI;oBACJ,KAAK;oBACL,GAAG;oBACH,MAAM,EAAE,YAAY;oBACpB,wBAAwB,EAAE;wBACzB,OAAO,EAAE,IAAI;qBACb;iBACD;aACD;YACD;gBACC,OAAO,EAAE,UAAU;aACnB;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,IAAI,EAAE,yBAAyB;wBAC/B,OAAO,EAAE,4BAA4B;qBACrC;oBACD,KAAK,EAAE;wBACN,IAAI,EAAE,mBAAmB;qBACzB;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,eAAe;qBACrB;iBACD;aACD;YACD;gBACC,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC,CAAC;iBACR;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,cAAc;oBACvB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;iBACP;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;CACD,CAAC;AAEF,MAAM,OAAO,WAAY,SAAQ,OAAiB;IACzC,mBAAmB,CAAuB;IAElD,YAAY,EAAM,EAAE,KAAqD;QACxE,KAAK,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QAE7B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,EAAE,cAAc,EAAE,sBAAsB,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACzH,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,EAC/B,GAAG,EACH,IAAI,EACJ,MAAM,EACN,MAAM,GAAG,CAAC,EACV,KAAK,GAAG,EAAE,GAOV;QACA,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtF,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,IAAI,EAAE;oBACL,GAAG,WAAW;oBACd;wBACC,MAAM,EAAE;4BACP,GAAG,EAAE,GAAG;yBACR;qBACD;oBACD;wBACC,UAAU,EAAE;4BACX,OAAO,EAAE,IAAI;4BACb,GAAG,EAAE,EAAE;yBACP;qBACD;oBACD;wBACC,QAAQ,EAAE;4BACT,OAAO,EAAE,KAAK;yBACd;qBACD;iBACD;aACD;SACD,CAAC;QAEF,MAAM,YAAY,GAAG;YACpB,KAAK,EAAE;gBACN,OAAO,EAAE,CAAC,CAAC;aACX;SACD,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAEpD,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,GAAG,EAAE,aAAa;gBAClB,SAAS,EAAE;oBACV,MAAM,EAAE,YAAY;iBACpB;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE,SAAS;iBACjB;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE,SAAS;iBACjB;gBACD,IAAI,EAAE;oBACL,MAAM,EAAE,OAAO;iBACf;gBACD,EAAE,EAAE;oBACH,MAAM,EAAE,KAAK;iBACb;gBACD,OAAO,EAAE;oBACR,MAAM,EAAE,UAAU;iBAClB;aACD;SACD,CAAC;QAEF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,MAAM,aAAa,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;QAExC,MAAM,eAAe,GAAG;YACvB,QAAQ,EAAE;gBACT,GAAG,EAAE,YAAY;gBACjB,SAAS,EAAE,CAAC;gBACZ,MAAM,EAAE,CAAC;gBACT,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,CAAC;gBACP,EAAE,EAAE,CAAC;gBACL,OAAO,EAAE,CAAC;aACV;SACD,CAAC;QAEF,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,IAAI,EAAE,CAAC,YAAY,EAAE,GAAG,YAAY,EAAE,aAAa,EAAE,GAAG,YAAY,CAAC;gBACrE,KAAK,EAAE;oBACN;wBACC,MAAM,EAAE,OAAO;qBACf;iBACD;aACD;SACD,CAAC;QAEF,MAAM,UAAU,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;QAEhG,MAAM,CACL,EACC,IAAI,EAAE,QAAQ,EACd,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,GACjC,EACD,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAAqD,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;QAEvG,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,4BAA4B,CAAC,EAClC,IAAI,EACJ,MAAM,EACN,MAAM,GAAG,CAAC,EACV,KAAK,GAAG,EAAE,GAMV;QACA,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtF,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,IAAI,EAAE;oBACL,GAAG,WAAW;oBACd;wBACC,UAAU,EAAE;4BACX,OAAO,EAAE,IAAI;4BACb,GAAG,EAAE,EAAE;yBACP;wBACD,SAAS,EAAE;4BACV,OAAO,EAAE,IAAI;4BACb,GAAG,EAAE,EAAE;yBACP;qBACD;oBACD;wBACC,QAAQ,EAAE;4BACT,OAAO,EAAE,KAAK;yBACd;qBACD;iBACD;aACD;SACD,CAAC;QAEF,MAAM,YAAY,GAAG;YACpB,KAAK,EAAE;gBACN,OAAO,EAAE,CAAC,CAAC;aACX;SACD,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAEpD,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,GAAG,EAAE,aAAa;gBAClB,SAAS,EAAE;oBACV,MAAM,EAAE,YAAY;iBACpB;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE,SAAS;iBACjB;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE,SAAS;iBACjB;gBACD,IAAI,EAAE;oBACL,MAAM,EAAE,OAAO;iBACf;gBACD,EAAE,EAAE;oBACH,MAAM,EAAE,KAAK;iBACb;gBACD,OAAO,EAAE;oBACR,MAAM,EAAE,UAAU;iBAClB;aACD;SACD,CAAC;QACF,MAAM,aAAa,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;QAExC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAE5D,MAAM,cAAc,GAAG;YACtB,OAAO,EAAE;gBACR,IAAI,EAAE,OAAO;gBACb,UAAU,EAAE,QAAQ;gBACpB,YAAY,EAAE,KAAK;gBACnB,EAAE,EAAE,OAAO;aACX;SACD,CAAC;QACF,MAAM,cAAc,GAAG;YACtB,OAAO,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,0BAA0B,EAAE,IAAI;aAChC;SACD,CAAC;QAEF,MAAM,eAAe,GAAG;YACvB,QAAQ,EAAE;gBACT,GAAG,EAAE,YAAY;gBACjB,SAAS,EAAE,CAAC;gBACZ,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,CAAC;gBACP,EAAE,EAAE,CAAC;gBACL,OAAO,EAAE,CAAC;gBACV,MAAM,EAAE,CAAC;gBACT,KAAK,EAAE;oBACN,IAAI,EAAE,CAAC;oBACP,QAAQ,EAAE,CAAC;oBACX,UAAU,EAAE,CAAC;oBACb,YAAY,EAAE,CAAC;iBACf;aACD;SACD,CAAC;QAEF,MAAM,aAAa,GAAG;YACrB,MAAM,EAAE;gBACP,IAAI,EAAE,CAAC,YAAY,EAAE,GAAG,YAAY,EAAE,aAAa,EAAE,cAAc,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,YAAY,CAAC;gBACtH,KAAK,EAAE;oBACN;wBACC,MAAM,EAAE,OAAO;qBACf;iBACD;aACD;SACD,CAAC;QAEF,MAAM,UAAU,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;QAE/E,MAAM,CACL,EACC,IAAI,EAAE,QAAQ,EACd,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,GACjC,EACD,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,CAA8D,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;QAEhH,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;IAC3C,CAAC;IAES,YAAY;QACrB,OAAO;YACN,EAAE,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,EAAE;YAC1B,EAAE,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;YACxB,EAAE,GAAG,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,uBAAuB,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE;YACxG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;YAC/B,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE;YACpC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE;YAC/C,EAAE,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE;YACnE,EAAE,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;YAClE;gBACC,GAAG,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE;gBAC3G,uBAAuB,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE;gBAC1D,UAAU,EAAE,IAAI;aAChB;SACD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,EAAE,KAAK,EAAE,GAAG,EAAqB;QACjE,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAAW;YACpB;gBACC,MAAM,EAAE;oBACP,GAAG,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC;oBAC/B,IAAI,EAAE,YAAY;iBAClB;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE,SAAS;iBACd;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,EAAU;QACjC,OAAO,IAAI,CAAC,OAAO,CAClB;YACC,EAAE;SACF,EACD;YACC,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE;YACrB,KAAK,EAAE,CAAC;SACR,CACD,CAAC;IACH,CAAC;IAED,kBAAkB,CAAC,SAAiB;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IACpC,CAAC;IAED,2BAA2B,CAAC,SAAiB,EAAE,MAAc;QAC5D,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACpF,CAAC;IAED,8CAA8C,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAoB;QACpF,OAAO,IAAI,CAAC,IAAI,CAAC;YAChB,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,cAAc,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAClC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,uCAAuC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAqB;QAS9E,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAMP;YACF;gBACC,MAAM,EAAE;oBACP,GAAG,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC;oBAC/B,IAAI,EAAE,YAAY;oBAClB,iBAAiB,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE;iBACvC;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,GAAG,qBAAqB,EAAE;wBAC1B,MAAM,EAAE,SAAS;qBACjB;iBACD;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE;wBACJ,GAAG,uBAAuB,EAAE;qBAC5B;oBACD,SAAS,EAAE;wBACV,SAAS,EAAE,aAAa;qBACxB;oBACD,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;iBAClB;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,GAAG,uBAAuB,EAAE;oBAC5B,SAAS,EAAE,CAAC;oBACZ,KAAK,EAAE,CAAC;iBACR;aACD;YACD;gBACC,KAAK,EAAE;oBACN,GAAG,iBAAiB,EAAE;iBACtB;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,+BAA+B,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAqC;QAMjG,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,IAAI,EAAE,kBAAkB;gBACxB,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE;aACnC;SACD,CAAC;QACF,MAAM,YAAY,GAAG;YACpB,QAAQ,EAAE;gBACT,KAAK,EAAE;oBACN,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,CAAC;iBAC1B;gBACD,OAAO,EAAE,QAAQ;aACjB;SACD,CAAC;QACF,MAAM,MAAM,GAAG;YACd,OAAO,EAAE,QAAQ;SACjB,CAAC;QACF,MAAM,MAAM,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,mBAAmB,GAAG;YAC3B,QAAQ,EAAE;gBACT,GAAG,EAAE,CAAC;gBACN,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,CAAC;aACR;SACD,CAAC;QACF,MAAM,IAAI,GAAG;YACZ,KAAK,EAAE;gBACN,IAAI,EAAE,CAAC,CAAC;aACR;SACD,CAAC;QACF,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAGP,CAAC,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;aAChG,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,mCAAmC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAqB;QAQ1E,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAKP;YACF;gBACC,MAAM,EAAE;oBACP,GAAG,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC;oBAC/B,IAAI,EAAE,YAAY;oBAClB,iBAAiB,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE;iBACvC;aACD;YACD;gBACC,MAAM,EAAE;oBACP,GAAG,EAAE,EAAE,GAAG,qBAAqB,EAAE,EAAE;oBACnC,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;iBAClB;aACD;YACD;gBACC,QAAQ,EAAE;oBACT,GAAG,EAAE,CAAC;oBACN,GAAG,uBAAuB,EAAE;oBAC5B,KAAK,EAAE,CAAC;iBACR;aACD;YACD;gBACC,KAAK,EAAE;oBACN,GAAG,iBAAiB,EAAE;iBACtB;aACD;SACD,CAAC;aACD,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,yCAAyC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAa;QASxE,MAAM,KAAK,GAAG;YACb,MAAM,EAAE;gBACP,IAAI,EAAE,kBAAkB;gBACxB,OAAO,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE;aACnC;SACD,CAAC;QACF,MAAM,YAAY,GAAG;YACpB,QAAQ,EAAE;gBACT,KAAK,EAAE;oBACN,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;iBACzF;gBACD,OAAO,EAAE,QAAQ;aACjB;SACD,CAAC;QACF,MAAM,MAAM,GAAG;YACd,OAAO,EAAE,QAAQ;SACjB,CAAC;QACF,MAAM,MAAM,GAAG,sBAAsB,CAAC;YACrC,KAAK,EAAE,QAAQ;YACf,GAAG,EAAE,cAAc;YACnB,KAAK,EAAE,gBAAgB;YACvB,IAAI,EAAE,eAAe;SACrB,CAAC,CAAC;QACH,MAAM,mBAAmB,GAAG;YAC3B,QAAQ,EAAE;gBACT,GAAG,EAAE,CAAC;gBACN,IAAI,EAAE,YAAY;gBAClB,GAAG,uBAAuB,EAAE;gBAC5B,KAAK,EAAE,CAAC;aACR;SACD,CAAC;QACF,MAAM,IAAI,GAAG;YACZ,KAAK,EAAE;gBACN,GAAG,iBAAiB,EAAE;gBACtB,IAAI,EAAE,CAAC,CAAC;aACR;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,GAAG;aACb,SAAS,CAMP,CAAC,KAAK,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;aAChG,OAAO,EAAE,CAAC;IACb,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC9B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,yBAAyB,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC1E,IAAI;gBACJ,KAAK;gBACL,GAAG;aACH,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,yBAAyB;QAC9B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,+BAA+B,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAChF,IAAI;gBACJ,KAAK;gBACL,GAAG;aACH,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,wBAAwB;QAC7B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,+BAA+B,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAChF,IAAI;gBACJ,KAAK;gBACL,GAAG;gBACH,IAAI,EAAE,MAAM;aACZ,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,2BAA2B;QAChC,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC5E,IAAI;gBACJ,KAAK;gBACL,GAAG;aACH,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,2BAA2B;QAChC,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,iCAAiC,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAClF,IAAI;gBACJ,KAAK;gBACL,GAAG;aACH,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B;QAC/B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,iCAAiC,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAClF,IAAI;gBACJ,KAAK;gBACL,GAAG;gBACH,IAAI,EAAE,MAAM;aACZ,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;SAC7F,CAAC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC3B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,4BAA4B,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7E,IAAI;gBACJ,KAAK;gBACL,GAAG;aACH,CAAC;SACF,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB;QAC1B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE3B,OAAO;YACN,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,MAAM,UAAU,CAAC,4BAA4B,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7E,IAAI;gBACJ,KAAK;gBACL,GAAG;gBACH,IAAI,EAAE,MAAM;aACZ,CAAC;SACF,CAAC;IACH,CAAC;IAEO,WAAW,CAAC,IAAwD;QAC3E,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1F,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAwD;QAC5E,+EAA+E;QAC/E,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAEzD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7B,OAAO;QACR,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QAEvB,OAAO,IAAI,CAAC,SAAS,CACpB,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,EAC3C;YACC,IAAI,EAAE,IAAI;YACV,YAAY,EAAE;gBACb,SAAS,EAAE,GAAG;aACd;SACD,EACD,EAAE,MAAM,EAAE,IAAI,EAAE,CAChB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,UAAkB,EAAE,SAAiB;QACxE,MAAM,KAAK,GAAG;YACb,UAAU;YACV,SAAS;YACT,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAC5B,CAAC;QAEF,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,QAAQ,EAAE,SAAS;gBACnB,cAAc,EAAE,SAAS;aACzB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,6CAA6C,CAClD,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAgC,EAAE,EACpD,UAAkB,EAClB,QAAkB,EAClB,OAA4B,EAAE;QAE9B,MAAM,KAAK,GAAG;YACb,UAAU;YACV,IAAI;YACJ,KAAK;YACL,GAAG;YACH,SAAS,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE;YAC5B,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAC5B,CAAC;QAEF,MAAM,MAAM,GAAG;YACd,IAAI,EAAE,IAAI;SACV,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,0BAA0B,CAC/B,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAoB,EACtC,OAA4B,EAAE;QAE9B,MAAM,MAAM,GAAG;YACd,IAAI,EAAE,IAAI;SACV,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,IAAI;YACJ,KAAK;YACL,GAAG;YACH,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,cAAc,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAClC,EACD,MAAM,CACN,CAAC;IACH,CAAC;IAED,KAAK,CAAC,uCAAuC,CAAC,UAAkB,EAAE,SAAiB,EAAE,MAAc;QAClG,MAAM,KAAK,GAAG;YACb,UAAU;YACV,SAAS;YACT,MAAM;YACN,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAC5B,CAAC;QAEF,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG;YACd,IAAI,EAAE;gBACL,QAAQ;gBACR,cAAc,EAAE,QAAQ;aACxB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,EAChC,SAAS,EACT,MAAM,GAIN;QACA,MAAM,KAAK,GAAG;YACb,SAAS;YACT,MAAM;YACN,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE;SAC5B,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAA+B,KAAK,EAAE,EAAE,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAE3G,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,MAAM,SAAS,GAAG;YACjB,IAAI,EAAE;gBACL,QAAQ;gBACR,cAAc,EAAE,QAAQ;gBACxB,QAAQ,EAAE,MAAM;aAChB;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,SAAS,CAAC,CAAC;IAChF,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,EACjC,UAAU,EACV,MAAM,EACN,QAAQ,GAKR;QACA,MAAM,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,MAAM,SAAS,GAAG;YACjB,IAAI,EAAE;gBACL,QAAQ;gBACR,QAAQ,EAAE,QAAQ,IAAI,MAAM;aAC5B;SACD,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,EAAE,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAgC;QACjD,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxC,OAAO;QACR,CAAC;QAED,MAAM,GAAG,GAAsC,EAAE,CAAC;QAClD,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACxB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC;YACxD,OAAO,GAAG,CAAC,GAAG,CAAC;YACf,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC3B,GAAG,CAAC,IAAI,CAAC;oBACR,SAAS,EAAE;wBACV,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAE,UAAU,EAAE;wBACnD,MAAM,EAAE;4BACP,IAAI,EAAE,GAAG;yBACT;wBACD,MAAM,EAAE,IAAI;qBACZ;iBACD,CAAC,CAAC;YACJ,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,GAAoB,EAAE,MAAyB;QAC3E,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,iCAAiC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAqB;QACxE,OAAO,IAAI,CAAC,UAAU,CACrB;YACC,IAAI,EAAE,SAAS;YACf,GAAG,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC;SAC/B,EACD;YACC,IAAI,EAAE;gBACL,IAAI,EAAE,kBAAkB;gBACxB,WAAW,EAAE,IAAI,IAAI,EAAE;aACvB;SACD,CACD,CAAC;IACH,CAAC;CACD","sourcesContent":["import type {\n\tISession,\n\tUserSessionAggregation,\n\tDeviceSessionAggregation,\n\tOSSessionAggregation,\n\tUserSessionAggregationResult,\n\tDeviceSessionAggregationResult,\n\tDeviceManagementSession,\n\tDeviceManagementPopulatedSession,\n\tOSSessionAggregationResult,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { ISessionsModel } from '@rocket.chat/model-typings';\nimport { getCollectionName } from '@rocket.chat/models';\nimport type { PaginatedResult, WithItemCount } from '@rocket.chat/rest-typings';\nimport type {\n\tAggregationCursor,\n\tAnyBulkWriteOperation,\n\tBulkWriteResult,\n\tCollection,\n\tDocument,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tIndexDescription,\n\tUpdateResult,\n\tOptionalId,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DestructuredDate = { year: number; month: number; day: number };\ntype DestructuredDateWithType = {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n\ttype?: 'month' | 'week';\n};\ntype DestructuredRange = { start: DestructuredDate; end: DestructuredDate };\ntype DateRange = { start: Date; end: Date };\n\ntype CustomSortOp = 'loginAt' | 'device.name' | 'device.os.name';\ntype CustomSortOpAdmin = CustomSortOp | '_user.username' | '_user.name';\n\nconst matchBasedOnDate = (start: DestructuredDate, end: DestructuredDate): Filter<ISession> => {\n\tif (start.year === end.year && start.month === end.month) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\tmonth: start.month,\n\t\t\tday: { $gte: start.day, $lte: end.day },\n\t\t};\n\t}\n\n\tif (start.year === end.year) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\treturn {\n\t\t$and: [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $gt: start.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $lt: end.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,\n): { listGroup: object; countGroup: object } => {\n\tconst isOpenSession = { $not: ['$session.closedAt'] };\n\tconst isAfterLoginAt = { $gte: ['$range', { $hour: '$session.loginAt' }] };\n\tconst isBeforeClosedAt = { $lte: ['$range', { $hour: '$session.closedAt' }] };\n\n\tconst listGroup = {\n\t\t$group: {\n\t\t\t_id,\n\t\t\tusersList: {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t$cond: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [{ $and: [isOpenSession, isAfterLoginAt] }, { $and: [isAfterLoginAt, isBeforeClosedAt] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$session.userId',\n\t\t\t\t\t\t'$$REMOVE',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tconst countGroup = {\n\t\t$addFields: {\n\t\t\tusers: { $size: '$usersList' },\n\t\t},\n\t};\n\n\treturn { listGroup, countGroup };\n};\n\nconst getSortByFullDate = (): { year: number; month: number; day: number } => ({\n\tyear: -1,\n\tmonth: -1,\n\tday: -1,\n});\n\nconst getProjectionByFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$_id.day',\n\tmonth: '$_id.month',\n\tyear: '$_id.year',\n});\n\nconst getProjectionFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$day',\n\tmonth: '$month',\n\tyear: '$year',\n});\n\nexport const aggregates = {\n\tdailySessions(\n\t\tcollection: Collection<ISession>,\n\t\t{ start, end }: DestructuredRange,\n\t): AggregationCursor<\n\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\ttime: number;\n\t\t\tsessions: number;\n\t\t\tdevices: ISession['device'][];\n\t\t\t_computedAt: string;\n\t\t}\n\t> {\n\t\tconst pipeline = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tuserId: { $exists: true },\n\t\t\t\t\tlastActivityAt: { $exists: true },\n\t\t\t\t\tdevice: { $exists: true },\n\t\t\t\t\ttype: 'session',\n\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tuserId: 1,\n\t\t\t\t\tdevice: 1,\n\t\t\t\t\tday: 1,\n\t\t\t\t\tmonth: 1,\n\t\t\t\t\tyear: 1,\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: { $trunc: { $divide: [{ $subtract: ['$lastActivityAt', '$loginAt'] }, 1000] } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttime: { $gt: 0 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\tdevice: '$device',\n\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\ttime: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: '$sessions' },\n\t\t\t\t\tdevices: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\tdevice: '$_id.device',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttype: { $literal: 'user_daily' },\n\t\t\t\t\t_computedAt: { $literal: new Date() },\n\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: 1,\n\t\t\t\t\tsessions: 1,\n\t\t\t\t\tdevices: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn collection.aggregate<\n\t\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\t\ttime: number;\n\t\t\t\tsessions: number;\n\t\t\t\tdevices: ISession['device'][];\n\t\t\t\t_computedAt: string;\n\t\t\t}\n\t\t>(pipeline, { allowDiskUse: true });\n\t},\n\n\tasync getUniqueUsersOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\troles: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tasync getUniqueUsersOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetMatchOfLastMonthOrWeek({ year, month, day, type = 'month' }: DestructuredDateWithType): Filter<ISession> {\n\t\tlet startOfPeriod;\n\n\t\tif (type === 'month') {\n\t\t\tconst pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n\t\t\tconst currMonthLastDay = new Date(year, month, 0).getDate();\n\n\t\t\tstartOfPeriod = new Date(year, month - 1, day);\n\t\t\tstartOfPeriod.setMonth(\n\t\t\t\tstartOfPeriod.getMonth() - 1,\n\t\t\t\t(currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1,\n\t\t\t);\n\t\t} else {\n\t\t\tstartOfPeriod = new Date(year, month - 1, day - 6);\n\t\t}\n\n\t\tconst startOfPeriodObject = {\n\t\t\tyear: startOfPeriod.getFullYear(),\n\t\t\tmonth: startOfPeriod.getMonth() + 1,\n\t\t\tday: startOfPeriod.getDate(),\n\t\t};\n\n\t\tif (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday: { $gte: startOfPeriodObject.day, $lte: day },\n\t\t\t};\n\t\t}\n\n\t\tif (year === startOfPeriodObject.year) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $gt: startOfPeriodObject.year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\n\tasync getUniqueDevicesOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueDevicesOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n};\n\nexport class SessionsRaw extends BaseRaw<ISession> implements ISessionsModel {\n\tprivate secondaryCollection: Collection<ISession>;\n\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISession>>) {\n\t\tsuper(db, 'sessions', trash);\n\n\t\tthis.secondaryCollection = db.collection(getCollectionName('sessions'), { readPreference: readSecondaryPreferred(db) });\n\t}\n\n\tasync aggregateSessionsByUserId({\n\t\tuid,\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tuid: string;\n\t\tsort?: Record<CustomSortOp, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tuserId: {\n\t\t\t\t\t\t\t$eq: uid,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, projectOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tasync aggregateSessionsAndPopulate({\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tsort?: Record<CustomSortOpAdmin, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementPopulatedSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessionId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\n\t\tconst lookupOperator = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'userId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: '_user',\n\t\t\t},\n\t\t};\n\t\tconst unwindOperator = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$_user',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\t_user: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tavatarOrigin: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, lookupOperator, unwindOperator, projectOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementPopulatedSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { createdAt: -1 } },\n\t\t\t{ key: { loginAt: -1 } },\n\t\t\t{ key: { searchTerm: 1 }, partialFilterExpression: { searchTerm: { $exists: true } }, background: true },\n\t\t\t{ key: { ip: 1, loginAt: -1 } },\n\t\t\t{ key: { userId: 1, sessionId: 1 } },\n\t\t\t{ key: { type: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { sessionId: 1, instanceId: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { _computedAt: 1 }, expireAfterSeconds: 60 * 60 * 24 * 45 },\n\t\t\t{\n\t\t\t\tkey: { 'loginToken': 1, 'logoutAt': 1, 'userId': 1, 'device.name': 1, 'device.os.name': 1, 'logintAt': -1 },\n\t\t\t\tpartialFilterExpression: { loginToken: { $exists: true } },\n\t\t\t\tbackground: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tasync getActiveUsersBetweenDates({ start, end }: DestructuredRange): Promise<ISession[]> {\n\t\treturn this.col\n\t\t\t.aggregate<ISession>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync findLastLoginByIp(ip: string): Promise<ISession | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tip,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: { loginAt: -1 },\n\t\t\t\tlimit: 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOneBySessionId(sessionId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId });\n\t}\n\n\tfindOneBySessionIdAndUserId(sessionId: string, userId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId, userId, loginToken: { $exists: true, $ne: '' } });\n\t}\n\n\tfindSessionsNotClosedByDateWithoutLastActivity({ year, month, day }: DestructuredDate): FindCursor<ISession> {\n\t\treturn this.find({\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t});\n\t}\n\n\tasync getActiveUsersOfPeriodByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusersList: IUser['_id'][];\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusersList: IUser['_id'][];\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusersList: {\n\t\t\t\t\t\t\t$addToSet: '$_id.userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusersList: 1,\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getBusiestTimeWithinHoursPeriod({ start, end, groupSize }: DateRange & { groupSize: number }): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [0, 24, groupSize],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour('$range');\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id',\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionsByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: { ...getProjectionFullDate() },\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionByHourAndDayBetweenDates({ start, end }: DateRange): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [{ $hour: '$loginAt' }, { $sum: [{ $ifNull: [{ $hour: '$closedAt' }, 23] }, 1] }],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour({\n\t\t\trange: '$range',\n\t\t\tday: '$session.day',\n\t\t\tmonth: '$session.month',\n\t\t\tyear: '$session.year',\n\t\t});\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id.range',\n\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\t...getSortByFullDate(),\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getUniqueUsersOfYesterday(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastMonth(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastWeek(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfYesterday(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastMonth(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastWeek(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfYesterday(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, { year, month, day }),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastMonth(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastWeek(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isValidData(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): boolean {\n\t\treturn Boolean(data.year && data.month && data.day && data.sessionId && data.instanceId);\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateResult | undefined> {\n\t\t// TODO: check if we should create a session when there is no loginToken or not\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\n\t\tif (!this.isValidData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },\n\t\t\t{\n\t\t\t\t$set: data,\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync closeByInstanceIdAndSessionId(instanceId: string, sessionId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst closeTime = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tclosedAt: closeTime,\n\t\t\t\tlastActivityAt: closeTime,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateActiveSessionsByDateAndInstanceIdAndIds(\n\t\t{ year, month, day }: Partial<DestructuredDate> = {},\n\t\tinstanceId: string,\n\t\tsessions: string[],\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tsessionId: { $in: sessions },\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync updateActiveSessionsByDate(\n\t\t{ year, month, day }: DestructuredDate,\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'session',\n\t\t\t\tclosedAt: { $exists: false },\n\t\t\t\tlastActivityAt: { $exists: false },\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tasync logoutByInstanceIdAndSessionIdAndUserId(instanceId: string, sessionId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\n\t\tconst logoutAt = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync logoutBySessionIdAndUserId({\n\t\tsessionId,\n\t\tuserId,\n\t}: {\n\t\tsessionId: ISession['sessionId'];\n\t\tuserId: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });\n\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t\tlogoutBy: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken: session?.loginToken }, updateObj);\n\t}\n\n\tasync logoutByloginTokenAndUserId({\n\t\tloginToken,\n\t\tuserId,\n\t\tlogoutBy,\n\t}: {\n\t\tloginToken: ISession['loginToken'];\n\t\tuserId: IUser['_id'];\n\t\tlogoutBy?: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlogoutBy: logoutBy || userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken }, updateObj);\n\t}\n\n\tasync createBatch(sessions: OptionalId<ISession>[]): Promise<BulkWriteResult | undefined> {\n\t\tif (!sessions || sessions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops: AnyBulkWriteOperation<ISession>[] = [];\n\t\tsessions.forEach((doc) => {\n\t\t\tconst { year, month, day, sessionId, instanceId } = doc;\n\t\t\tdelete doc._id;\n\t\t\tif (this.isValidData(doc)) {\n\t\t\t\tops.push({\n\t\t\t\t\tupdateOne: {\n\t\t\t\t\t\tfilter: { year, month, day, sessionId, instanceId },\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t$set: doc,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupsert: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn this.col.bulkWrite(ops, { ordered: false });\n\t}\n\n\tasync updateDailySessionById(_id: ISession['_id'], record: Partial<ISession>): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $set: record }, { upsert: true });\n\t}\n\n\tasync updateAllSessionsByDateToComputed({ start, end }: DestructuredRange): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttype: 'session',\n\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttype: 'computed-session',\n\t\t\t\t\t_computedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      aggregates: () => aggregates,\n      SessionsRaw: () => SessionsRaw\n    });\n    let getCollectionName;\n    module.link(\"@rocket.chat/models\", {\n      getCollectionName(v) {\n        getCollectionName = v;\n      }\n    }, 0);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 1);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    const matchBasedOnDate = (start, end) => {\n      if (start.year === end.year && start.month === end.month) {\n        return {\n          year: start.year,\n          month: start.month,\n          day: {\n            $gte: start.day,\n            $lte: end.day\n          }\n        };\n      }\n      if (start.year === end.year) {\n        return {\n          year: start.year,\n          $and: [{\n            $or: [{\n              month: {\n                $gt: start.month\n              }\n            }, {\n              month: start.month,\n              day: {\n                $gte: start.day\n              }\n            }]\n          }, {\n            $or: [{\n              month: {\n                $lt: end.month\n              }\n            }, {\n              month: end.month,\n              day: {\n                $lte: end.day\n              }\n            }]\n          }]\n        };\n      }\n      return {\n        $and: [{\n          $or: [{\n            year: {\n              $gt: start.year\n            }\n          }, {\n            year: start.year,\n            month: {\n              $gt: start.month\n            }\n          }, {\n            year: start.year,\n            month: start.month,\n            day: {\n              $gte: start.day\n            }\n          }]\n        }, {\n          $or: [{\n            year: {\n              $lt: end.year\n            }\n          }, {\n            year: end.year,\n            month: {\n              $lt: end.month\n            }\n          }, {\n            year: end.year,\n            month: end.month,\n            day: {\n              $lte: end.day\n            }\n          }]\n        }]\n      };\n    };\n    const getGroupSessionsByHour = _id => {\n      const isOpenSession = {\n        $not: ['$session.closedAt']\n      };\n      const isAfterLoginAt = {\n        $gte: ['$range', {\n          $hour: '$session.loginAt'\n        }]\n      };\n      const isBeforeClosedAt = {\n        $lte: ['$range', {\n          $hour: '$session.closedAt'\n        }]\n      };\n      const listGroup = {\n        $group: {\n          _id,\n          usersList: {\n            $addToSet: {\n              $cond: [{\n                $or: [{\n                  $and: [isOpenSession, isAfterLoginAt]\n                }, {\n                  $and: [isAfterLoginAt, isBeforeClosedAt]\n                }]\n              }, '$session.userId', '$$REMOVE']\n            }\n          }\n        }\n      };\n      const countGroup = {\n        $addFields: {\n          users: {\n            $size: '$usersList'\n          }\n        }\n      };\n      return {\n        listGroup,\n        countGroup\n      };\n    };\n    const getSortByFullDate = () => ({\n      year: -1,\n      month: -1,\n      day: -1\n    });\n    const getProjectionByFullDate = () => ({\n      day: '$_id.day',\n      month: '$_id.month',\n      year: '$_id.year'\n    });\n    const getProjectionFullDate = () => ({\n      day: '$day',\n      month: '$month',\n      year: '$year'\n    });\n    const aggregates = {\n      dailySessions(collection, _ref) {\n        let {\n          start,\n          end\n        } = _ref;\n        const pipeline = [{\n          $match: _objectSpread({\n            userId: {\n              $exists: true\n            },\n            lastActivityAt: {\n              $exists: true\n            },\n            device: {\n              $exists: true\n            },\n            type: 'session'\n          }, matchBasedOnDate(start, end))\n        }, {\n          $project: {\n            userId: 1,\n            device: 1,\n            day: 1,\n            month: 1,\n            year: 1,\n            mostImportantRole: 1,\n            time: {\n              $trunc: {\n                $divide: [{\n                  $subtract: ['$lastActivityAt', '$loginAt']\n                }, 1000]\n              }\n            }\n          }\n        }, {\n          $match: {\n            time: {\n              $gt: 0\n            }\n          }\n        }, {\n          $group: {\n            _id: _objectSpread({\n              userId: '$userId',\n              device: '$device'\n            }, getProjectionFullDate()),\n            mostImportantRole: {\n              $first: '$mostImportantRole'\n            },\n            time: {\n              $sum: '$time'\n            },\n            sessions: {\n              $sum: 1\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $group: {\n            _id: _objectSpread({\n              userId: '$_id.userId'\n            }, getProjectionByFullDate()),\n            mostImportantRole: {\n              $first: '$mostImportantRole'\n            },\n            time: {\n              $sum: '$time'\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            devices: {\n              $push: {\n                sessions: '$sessions',\n                time: '$time',\n                device: '$_id.device'\n              }\n            }\n          }\n        }, {\n          $sort: {\n            _id: 1\n          }\n        }, {\n          $project: _objectSpread(_objectSpread({\n            _id: 0,\n            type: {\n              $literal: 'user_daily'\n            },\n            _computedAt: {\n              $literal: new Date()\n            }\n          }, getProjectionByFullDate()), {}, {\n            userId: '$_id.userId',\n            mostImportantRole: 1,\n            time: 1,\n            sessions: 1,\n            devices: 1\n          })\n        }];\n        return collection.aggregate(pipeline, {\n          allowDiskUse: true\n        });\n      },\n      async getUniqueUsersOfYesterday(collection, _ref2) {\n        let {\n          year,\n          month,\n          day\n        } = _ref2;\n        return collection.aggregate([{\n          $match: {\n            year,\n            month,\n            day,\n            type: 'user_daily'\n          }\n        }, {\n          $group: {\n            _id: _objectSpread(_objectSpread({}, getProjectionFullDate()), {}, {\n              mostImportantRole: '$mostImportantRole'\n            }),\n            count: {\n              $sum: 1\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            time: {\n              $sum: '$time'\n            }\n          }\n        }, {\n          $group: {\n            _id: _objectSpread({}, getProjectionFullDate()),\n            roles: {\n              $push: {\n                role: '$_id.mostImportantRole',\n                count: '$count',\n                sessions: '$sessions',\n                time: '$time'\n              }\n            },\n            count: {\n              $sum: '$count'\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            time: {\n              $sum: '$time'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            count: 1,\n            sessions: 1,\n            time: 1,\n            roles: 1\n          }\n        }]).toArray();\n      },\n      async getUniqueUsersOfLastMonthOrWeek(collection, _ref3) {\n        let {\n          year,\n          month,\n          day,\n          type = 'month'\n        } = _ref3;\n        return collection.aggregate([{\n          $match: _objectSpread({\n            type: 'user_daily'\n          }, aggregates.getMatchOfLastMonthOrWeek({\n            year,\n            month,\n            day,\n            type\n          }))\n        }, {\n          $group: {\n            _id: {\n              userId: '$userId'\n            },\n            mostImportantRole: {\n              $first: '$mostImportantRole'\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            time: {\n              $sum: '$time'\n            }\n          }\n        }, {\n          $group: {\n            _id: {\n              mostImportantRole: '$mostImportantRole'\n            },\n            count: {\n              $sum: 1\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            time: {\n              $sum: '$time'\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $group: {\n            _id: 1,\n            roles: {\n              $push: {\n                role: '$_id.mostImportantRole',\n                count: '$count',\n                sessions: '$sessions',\n                time: '$time'\n              }\n            },\n            count: {\n              $sum: '$count'\n            },\n            sessions: {\n              $sum: '$sessions'\n            },\n            time: {\n              $sum: '$time'\n            }\n          }\n        }, {\n          $project: {\n            _id: 0,\n            count: 1,\n            roles: 1,\n            sessions: 1,\n            time: 1\n          }\n        }], {\n          allowDiskUse: true\n        }).toArray();\n      },\n      getMatchOfLastMonthOrWeek(_ref4) {\n        let {\n          year,\n          month,\n          day,\n          type = 'month'\n        } = _ref4;\n        let startOfPeriod;\n        if (type === 'month') {\n          const pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n          const currMonthLastDay = new Date(year, month, 0).getDate();\n          startOfPeriod = new Date(year, month - 1, day);\n          startOfPeriod.setMonth(startOfPeriod.getMonth() - 1, (currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1);\n        } else {\n          startOfPeriod = new Date(year, month - 1, day - 6);\n        }\n        const startOfPeriodObject = {\n          year: startOfPeriod.getFullYear(),\n          month: startOfPeriod.getMonth() + 1,\n          day: startOfPeriod.getDate()\n        };\n        if (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n          return {\n            year,\n            month,\n            day: {\n              $gte: startOfPeriodObject.day,\n              $lte: day\n            }\n          };\n        }\n        if (year === startOfPeriodObject.year) {\n          return {\n            year,\n            $and: [{\n              $or: [{\n                month: {\n                  $gt: startOfPeriodObject.month\n                }\n              }, {\n                month: startOfPeriodObject.month,\n                day: {\n                  $gte: startOfPeriodObject.day\n                }\n              }]\n            }, {\n              $or: [{\n                month: {\n                  $lt: month\n                }\n              }, {\n                month,\n                day: {\n                  $lte: day\n                }\n              }]\n            }]\n          };\n        }\n        return {\n          $and: [{\n            $or: [{\n              year: {\n                $gt: startOfPeriodObject.year\n              }\n            }, {\n              year: startOfPeriodObject.year,\n              month: {\n                $gt: startOfPeriodObject.month\n              }\n            }, {\n              year: startOfPeriodObject.year,\n              month: startOfPeriodObject.month,\n              day: {\n                $gte: startOfPeriodObject.day\n              }\n            }]\n          }, {\n            $or: [{\n              year: {\n                $lt: year\n              }\n            }, {\n              year,\n              month: {\n                $lt: month\n              }\n            }, {\n              year,\n              month,\n              day: {\n                $lte: day\n              }\n            }]\n          }]\n        };\n      },\n      async getUniqueDevicesOfLastMonthOrWeek(collection, _ref5) {\n        let {\n          year,\n          month,\n          day,\n          type = 'month'\n        } = _ref5;\n        return collection.aggregate([{\n          $match: _objectSpread({\n            type: 'user_daily'\n          }, aggregates.getMatchOfLastMonthOrWeek({\n            year,\n            month,\n            day,\n            type\n          }))\n        }, {\n          $unwind: '$devices'\n        }, {\n          $group: {\n            _id: {\n              type: '$devices.device.type',\n              name: '$devices.device.name',\n              version: '$devices.device.version'\n            },\n            count: {\n              $sum: '$devices.sessions'\n            },\n            time: {\n              $sum: '$devices.time'\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $project: {\n            _id: 0,\n            type: '$_id.type',\n            name: '$_id.name',\n            version: '$_id.version',\n            count: 1,\n            time: 1\n          }\n        }], {\n          allowDiskUse: true\n        }).toArray();\n      },\n      getUniqueDevicesOfYesterday(collection, _ref6) {\n        let {\n          year,\n          month,\n          day\n        } = _ref6;\n        return collection.aggregate([{\n          $match: {\n            year,\n            month,\n            day,\n            type: 'user_daily'\n          }\n        }, {\n          $unwind: '$devices'\n        }, {\n          $group: {\n            _id: {\n              type: '$devices.device.type',\n              name: '$devices.device.name',\n              version: '$devices.device.version'\n            },\n            count: {\n              $sum: '$devices.sessions'\n            },\n            time: {\n              $sum: '$devices.time'\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $project: {\n            _id: 0,\n            type: '$_id.type',\n            name: '$_id.name',\n            version: '$_id.version',\n            count: 1,\n            time: 1\n          }\n        }]).toArray();\n      },\n      getUniqueOSOfLastMonthOrWeek(collection, _ref7) {\n        let {\n          year,\n          month,\n          day,\n          type = 'month'\n        } = _ref7;\n        return collection.aggregate([{\n          $match: _objectSpread({\n            'type': 'user_daily',\n            'devices.device.os.name': {\n              $exists: true\n            }\n          }, aggregates.getMatchOfLastMonthOrWeek({\n            year,\n            month,\n            day,\n            type\n          }))\n        }, {\n          $unwind: '$devices'\n        }, {\n          $group: {\n            _id: {\n              name: '$devices.device.os.name',\n              version: '$devices.device.os.version'\n            },\n            count: {\n              $sum: '$devices.sessions'\n            },\n            time: {\n              $sum: '$devices.time'\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $project: {\n            _id: 0,\n            name: '$_id.name',\n            version: '$_id.version',\n            count: 1,\n            time: 1\n          }\n        }], {\n          allowDiskUse: true\n        }).toArray();\n      },\n      getUniqueOSOfYesterday(collection, _ref8) {\n        let {\n          year,\n          month,\n          day\n        } = _ref8;\n        return collection.aggregate([{\n          $match: {\n            year,\n            month,\n            day,\n            'type': 'user_daily',\n            'devices.device.os.name': {\n              $exists: true\n            }\n          }\n        }, {\n          $unwind: '$devices'\n        }, {\n          $group: {\n            _id: {\n              name: '$devices.device.os.name',\n              version: '$devices.device.os.version'\n            },\n            count: {\n              $sum: '$devices.sessions'\n            },\n            time: {\n              $sum: '$devices.time'\n            }\n          }\n        }, {\n          $sort: {\n            time: -1\n          }\n        }, {\n          $project: {\n            _id: 0,\n            name: '$_id.name',\n            version: '$_id.version',\n            count: 1,\n            time: 1\n          }\n        }]).toArray();\n      }\n    };\n    class SessionsRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'sessions', trash);\n        this.secondaryCollection = void 0;\n        this.secondaryCollection = db.collection(getCollectionName('sessions'), {\n          readPreference: readSecondaryPreferred(db)\n        });\n      }\n      async aggregateSessionsByUserId(_ref9) {\n        let {\n          uid,\n          sort,\n          search,\n          offset = 0,\n          count = 10\n        } = _ref9;\n        const searchQuery = search ? [{\n          searchTerm: {\n            $regex: search,\n            $options: 'i'\n          }\n        }] : [];\n        const matchOperator = {\n          $match: {\n            $and: [...searchQuery, {\n              userId: {\n                $eq: uid\n              }\n            }, {\n              loginToken: {\n                $exists: true,\n                $ne: ''\n              }\n            }, {\n              logoutAt: {\n                $exists: false\n              }\n            }]\n          }\n        };\n        const sortOperator = {\n          $sort: {\n            loginAt: -1\n          }\n        };\n        const customSortOp = !sort ? [] : [{\n          $sort: sort\n        }];\n        const groupOperator = {\n          $group: {\n            _id: '$loginToken',\n            sessionId: {\n              $first: '$sessionId'\n            },\n            userId: {\n              $first: '$userId'\n            },\n            device: {\n              $first: '$device'\n            },\n            host: {\n              $first: '$host'\n            },\n            ip: {\n              $first: '$ip'\n            },\n            loginAt: {\n              $first: '$loginAt'\n            }\n          }\n        };\n        const skipOperator = offset >= 1 ? [{\n          $skip: offset\n        }] : [];\n        const limitOperator = {\n          $limit: count\n        };\n        const projectOperator = {\n          $project: {\n            _id: '$sessionId',\n            sessionId: 1,\n            userId: 1,\n            device: 1,\n            host: 1,\n            ip: 1,\n            loginAt: 1\n          }\n        };\n        const facetOperator = {\n          $facet: {\n            docs: [sortOperator, ...skipOperator, limitOperator, ...customSortOp],\n            count: [{\n              $count: 'total'\n            }]\n          }\n        };\n        const queryArray = [matchOperator, sortOperator, groupOperator, projectOperator, facetOperator];\n        const [{\n          docs: sessions,\n          count: [{\n            total\n          } = {\n            total: 0\n          }]\n        }] = await this.col.aggregate(queryArray).toArray();\n        return {\n          sessions,\n          total,\n          count,\n          offset\n        };\n      }\n      async aggregateSessionsAndPopulate(_ref10) {\n        let {\n          sort,\n          search,\n          offset = 0,\n          count = 10\n        } = _ref10;\n        const searchQuery = search ? [{\n          searchTerm: {\n            $regex: search,\n            $options: 'i'\n          }\n        }] : [];\n        const matchOperator = {\n          $match: {\n            $and: [...searchQuery, {\n              loginToken: {\n                $exists: true,\n                $ne: ''\n              },\n              sessionId: {\n                $exists: true,\n                $ne: ''\n              }\n            }, {\n              logoutAt: {\n                $exists: false\n              }\n            }]\n          }\n        };\n        const sortOperator = {\n          $sort: {\n            loginAt: -1\n          }\n        };\n        const customSortOp = !sort ? [] : [{\n          $sort: sort\n        }];\n        const groupOperator = {\n          $group: {\n            _id: '$loginToken',\n            sessionId: {\n              $first: '$sessionId'\n            },\n            userId: {\n              $first: '$userId'\n            },\n            device: {\n              $first: '$device'\n            },\n            host: {\n              $first: '$host'\n            },\n            ip: {\n              $first: '$ip'\n            },\n            loginAt: {\n              $first: '$loginAt'\n            }\n          }\n        };\n        const limitOperator = {\n          $limit: count\n        };\n        const skipOperator = offset >= 1 ? [{\n          $skip: offset\n        }] : [];\n        const lookupOperator = {\n          $lookup: {\n            from: 'users',\n            localField: 'userId',\n            foreignField: '_id',\n            as: '_user'\n          }\n        };\n        const unwindOperator = {\n          $unwind: {\n            path: '$_user',\n            preserveNullAndEmptyArrays: true\n          }\n        };\n        const projectOperator = {\n          $project: {\n            _id: '$sessionId',\n            sessionId: 1,\n            device: 1,\n            host: 1,\n            ip: 1,\n            loginAt: 1,\n            userId: 1,\n            _user: {\n              name: 1,\n              username: 1,\n              avatarETag: 1,\n              avatarOrigin: 1\n            }\n          }\n        };\n        const facetOperator = {\n          $facet: {\n            docs: [sortOperator, ...skipOperator, limitOperator, lookupOperator, unwindOperator, projectOperator, ...customSortOp],\n            count: [{\n              $count: 'total'\n            }]\n          }\n        };\n        const queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n        const [{\n          docs: sessions,\n          count: [{\n            total\n          } = {\n            total: 0\n          }]\n        }] = await this.col.aggregate(queryArray).toArray();\n        return {\n          sessions,\n          total,\n          count,\n          offset\n        };\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            createdAt: -1\n          }\n        }, {\n          key: {\n            loginAt: -1\n          }\n        }, {\n          key: {\n            searchTerm: 1\n          },\n          partialFilterExpression: {\n            searchTerm: {\n              $exists: true\n            }\n          },\n          background: true\n        }, {\n          key: {\n            ip: 1,\n            loginAt: -1\n          }\n        }, {\n          key: {\n            userId: 1,\n            sessionId: 1\n          }\n        }, {\n          key: {\n            type: 1,\n            year: 1,\n            month: 1,\n            day: 1\n          }\n        }, {\n          key: {\n            sessionId: 1,\n            instanceId: 1,\n            year: 1,\n            month: 1,\n            day: 1\n          }\n        }, {\n          key: {\n            _computedAt: 1\n          },\n          expireAfterSeconds: 60 * 60 * 24 * 45\n        }, {\n          key: {\n            'loginToken': 1,\n            'logoutAt': 1,\n            'userId': 1,\n            'device.name': 1,\n            'device.os.name': 1,\n            'logintAt': -1\n          },\n          partialFilterExpression: {\n            loginToken: {\n              $exists: true\n            }\n          },\n          background: true\n        }];\n      }\n      async getActiveUsersBetweenDates(_ref11) {\n        let {\n          start,\n          end\n        } = _ref11;\n        return this.col.aggregate([{\n          $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n            type: 'user_daily'\n          })\n        }, {\n          $group: {\n            _id: '$userId'\n          }\n        }]).toArray();\n      }\n      async findLastLoginByIp(ip) {\n        return this.findOne({\n          ip\n        }, {\n          sort: {\n            loginAt: -1\n          },\n          limit: 1\n        });\n      }\n      findOneBySessionId(sessionId) {\n        return this.findOne({\n          sessionId\n        });\n      }\n      findOneBySessionIdAndUserId(sessionId, userId) {\n        return this.findOne({\n          sessionId,\n          userId,\n          loginToken: {\n            $exists: true,\n            $ne: ''\n          }\n        });\n      }\n      findSessionsNotClosedByDateWithoutLastActivity(_ref12) {\n        let {\n          year,\n          month,\n          day\n        } = _ref12;\n        return this.find({\n          year,\n          month,\n          day,\n          type: 'session',\n          closedAt: {\n            $exists: false\n          },\n          lastActivityAt: {\n            $exists: false\n          }\n        });\n      }\n      async getActiveUsersOfPeriodByDayBetweenDates(_ref13) {\n        let {\n          start,\n          end\n        } = _ref13;\n        return this.col.aggregate([{\n          $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n            type: 'user_daily',\n            mostImportantRole: {\n              $ne: 'anonymous'\n            }\n          })\n        }, {\n          $group: {\n            _id: _objectSpread(_objectSpread({}, getProjectionFullDate()), {}, {\n              userId: '$userId'\n            })\n          }\n        }, {\n          $group: {\n            _id: _objectSpread({}, getProjectionByFullDate()),\n            usersList: {\n              $addToSet: '$_id.userId'\n            },\n            users: {\n              $sum: 1\n            }\n          }\n        }, {\n          $project: _objectSpread(_objectSpread({\n            _id: 0\n          }, getProjectionByFullDate()), {}, {\n            usersList: 1,\n            users: 1\n          })\n        }, {\n          $sort: _objectSpread({}, getSortByFullDate())\n        }]).toArray();\n      }\n      async getBusiestTimeWithinHoursPeriod(_ref14) {\n        let {\n          start,\n          end,\n          groupSize\n        } = _ref14;\n        const match = {\n          $match: {\n            type: 'computed-session',\n            loginAt: {\n              $gte: start,\n              $lte: end\n            }\n          }\n        };\n        const rangeProject = {\n          $project: {\n            range: {\n              $range: [0, 24, groupSize]\n            },\n            session: '$$ROOT'\n          }\n        };\n        const unwind = {\n          $unwind: '$range'\n        };\n        const groups = getGroupSessionsByHour('$range');\n        const presentationProject = {\n          $project: {\n            _id: 0,\n            hour: '$_id',\n            users: 1\n          }\n        };\n        const sort = {\n          $sort: {\n            hour: -1\n          }\n        };\n        return this.col.aggregate([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort]).toArray();\n      }\n      async getTotalOfSessionsByDayBetweenDates(_ref15) {\n        let {\n          start,\n          end\n        } = _ref15;\n        return this.col.aggregate([{\n          $match: _objectSpread(_objectSpread({}, matchBasedOnDate(start, end)), {}, {\n            type: 'user_daily',\n            mostImportantRole: {\n              $ne: 'anonymous'\n            }\n          })\n        }, {\n          $group: {\n            _id: _objectSpread({}, getProjectionFullDate()),\n            users: {\n              $sum: 1\n            }\n          }\n        }, {\n          $project: _objectSpread(_objectSpread({\n            _id: 0\n          }, getProjectionByFullDate()), {}, {\n            users: 1\n          })\n        }, {\n          $sort: _objectSpread({}, getSortByFullDate())\n        }]).toArray();\n      }\n      async getTotalOfSessionByHourAndDayBetweenDates(_ref16) {\n        let {\n          start,\n          end\n        } = _ref16;\n        const match = {\n          $match: {\n            type: 'computed-session',\n            loginAt: {\n              $gte: start,\n              $lte: end\n            }\n          }\n        };\n        const rangeProject = {\n          $project: {\n            range: {\n              $range: [{\n                $hour: '$loginAt'\n              }, {\n                $sum: [{\n                  $ifNull: [{\n                    $hour: '$closedAt'\n                  }, 23]\n                }, 1]\n              }]\n            },\n            session: '$$ROOT'\n          }\n        };\n        const unwind = {\n          $unwind: '$range'\n        };\n        const groups = getGroupSessionsByHour({\n          range: '$range',\n          day: '$session.day',\n          month: '$session.month',\n          year: '$session.year'\n        });\n        const presentationProject = {\n          $project: _objectSpread(_objectSpread({\n            _id: 0,\n            hour: '$_id.range'\n          }, getProjectionByFullDate()), {}, {\n            users: 1\n          })\n        };\n        const sort = {\n          $sort: _objectSpread(_objectSpread({}, getSortByFullDate()), {}, {\n            hour: -1\n          })\n        };\n        return this.col.aggregate([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort]).toArray();\n      }\n      async getUniqueUsersOfYesterday() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueUsersOfLastMonth() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueUsersOfLastWeek() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day,\n            type: 'week'\n          })\n        };\n      }\n      async getUniqueDevicesOfYesterday() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueDevicesOfLastMonth() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueDevicesOfLastWeek() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day,\n            type: 'week'\n          })\n        };\n      }\n      async getUniqueOSOfYesterday() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueOSOfLastMonth() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day\n          })\n        };\n      }\n      async getUniqueOSOfLastWeek() {\n        const date = new Date();\n        date.setDate(date.getDate() - 1);\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return {\n          year,\n          month,\n          day,\n          data: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n            year,\n            month,\n            day,\n            type: 'week'\n          })\n        };\n      }\n      isValidData(data) {\n        return Boolean(data.year && data.month && data.day && data.sessionId && data.instanceId);\n      }\n      async createOrUpdate(data) {\n        // TODO: check if we should create a session when there is no loginToken or not\n        const {\n          year,\n          month,\n          day,\n          sessionId,\n          instanceId\n        } = data;\n        if (!this.isValidData(data)) {\n          return;\n        }\n        const now = new Date();\n        return this.updateOne({\n          instanceId,\n          sessionId,\n          year,\n          month,\n          day\n        }, {\n          $set: data,\n          $setOnInsert: {\n            createdAt: now\n          }\n        }, {\n          upsert: true\n        });\n      }\n      async closeByInstanceIdAndSessionId(instanceId, sessionId) {\n        const query = {\n          instanceId,\n          sessionId,\n          closedAt: {\n            $exists: false\n          }\n        };\n        const closeTime = new Date();\n        const update = {\n          $set: {\n            closedAt: closeTime,\n            lastActivityAt: closeTime\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async updateActiveSessionsByDateAndInstanceIdAndIds() {\n        let {\n          year,\n          month,\n          day\n        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        let instanceId = arguments.length > 1 ? arguments[1] : undefined;\n        let sessions = arguments.length > 2 ? arguments[2] : undefined;\n        let data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        const query = {\n          instanceId,\n          year,\n          month,\n          day,\n          sessionId: {\n            $in: sessions\n          },\n          closedAt: {\n            $exists: false\n          }\n        };\n        const update = {\n          $set: data\n        };\n        return this.updateMany(query, update);\n      }\n      async updateActiveSessionsByDate(_ref17) {\n        let {\n          year,\n          month,\n          day\n        } = _ref17;\n        let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const update = {\n          $set: data\n        };\n        return this.updateMany({\n          year,\n          month,\n          day,\n          type: 'session',\n          closedAt: {\n            $exists: false\n          },\n          lastActivityAt: {\n            $exists: false\n          }\n        }, update);\n      }\n      async logoutByInstanceIdAndSessionIdAndUserId(instanceId, sessionId, userId) {\n        const query = {\n          instanceId,\n          sessionId,\n          userId,\n          logoutAt: {\n            $exists: false\n          }\n        };\n        const logoutAt = new Date();\n        const update = {\n          $set: {\n            logoutAt,\n            lastActivityAt: logoutAt\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      async logoutBySessionIdAndUserId(_ref18) {\n        let {\n          sessionId,\n          userId\n        } = _ref18;\n        const query = {\n          sessionId,\n          userId,\n          logoutAt: {\n            $exists: false\n          }\n        };\n        const session = await this.findOne(query, {\n          projection: {\n            loginToken: 1\n          }\n        });\n        const logoutAt = new Date();\n        const updateObj = {\n          $set: {\n            logoutAt,\n            lastActivityAt: logoutAt,\n            logoutBy: userId\n          }\n        };\n        return this.updateMany({\n          userId,\n          loginToken: session === null || session === void 0 ? void 0 : session.loginToken\n        }, updateObj);\n      }\n      async logoutByloginTokenAndUserId(_ref19) {\n        let {\n          loginToken,\n          userId,\n          logoutBy\n        } = _ref19;\n        const logoutAt = new Date();\n        const updateObj = {\n          $set: {\n            logoutAt,\n            logoutBy: logoutBy || userId\n          }\n        };\n        return this.updateMany({\n          userId,\n          loginToken\n        }, updateObj);\n      }\n      async createBatch(sessions) {\n        if (!sessions || sessions.length === 0) {\n          return;\n        }\n        const ops = [];\n        sessions.forEach(doc => {\n          const {\n            year,\n            month,\n            day,\n            sessionId,\n            instanceId\n          } = doc;\n          delete doc._id;\n          if (this.isValidData(doc)) {\n            ops.push({\n              updateOne: {\n                filter: {\n                  year,\n                  month,\n                  day,\n                  sessionId,\n                  instanceId\n                },\n                update: {\n                  $set: doc\n                },\n                upsert: true\n              }\n            });\n          }\n        });\n        return this.col.bulkWrite(ops, {\n          ordered: false\n        });\n      }\n      async updateDailySessionById(_id, record) {\n        return this.updateOne({\n          _id\n        }, {\n          $set: record\n        }, {\n          upsert: true\n        });\n      }\n      async updateAllSessionsByDateToComputed(_ref20) {\n        let {\n          start,\n          end\n        } = _ref20;\n        return this.updateMany(_objectSpread({\n          type: 'session'\n        }, matchBasedOnDate(start, end)), {\n          $set: {\n            type: 'computed-session',\n            _computedAt: new Date()\n          }\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","aggregates","SessionsRaw","getCollectionName","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","matchBasedOnDate","start","end","year","month","day","$gte","$lte","$and","$or","$gt","$lt","getGroupSessionsByHour","_id","isOpenSession","$not","isAfterLoginAt","$hour","isBeforeClosedAt","listGroup","$group","usersList","$addToSet","$cond","countGroup","$addFields","users","$size","getSortByFullDate","getProjectionByFullDate","getProjectionFullDate","dailySessions","collection","_ref","pipeline","$match","userId","$exists","lastActivityAt","device","type","$project","mostImportantRole","time","$trunc","$divide","$subtract","$first","$sum","sessions","$sort","devices","$push","$literal","_computedAt","Date","aggregate","allowDiskUse","getUniqueUsersOfYesterday","_ref2","count","roles","role","toArray","getUniqueUsersOfLastMonthOrWeek","_ref3","getMatchOfLastMonthOrWeek","_ref4","startOfPeriod","pastMonthLastDay","getDate","currMonthLastDay","setMonth","getMonth","Math","min","startOfPeriodObject","getFullYear","getUniqueDevicesOfLastMonthOrWeek","_ref5","$unwind","name","version","getUniqueDevicesOfYesterday","_ref6","getUniqueOSOfLastMonthOrWeek","_ref7","getUniqueOSOfYesterday","_ref8","constructor","db","trash","secondaryCollection","readPreference","aggregateSessionsByUserId","_ref9","uid","sort","search","offset","searchQuery","searchTerm","$regex","$options","matchOperator","$eq","loginToken","$ne","logoutAt","sortOperator","loginAt","customSortOp","groupOperator","sessionId","host","ip","skipOperator","$skip","limitOperator","$limit","projectOperator","facetOperator","$facet","docs","$count","queryArray","total","col","aggregateSessionsAndPopulate","_ref10","lookupOperator","$lookup","from","localField","foreignField","as","unwindOperator","path","preserveNullAndEmptyArrays","_user","username","avatarETag","avatarOrigin","modelIndexes","key","createdAt","partialFilterExpression","background","instanceId","expireAfterSeconds","getActiveUsersBetweenDates","_ref11","findLastLoginByIp","findOne","limit","findOneBySessionId","findOneBySessionIdAndUserId","findSessionsNotClosedByDateWithoutLastActivity","_ref12","find","closedAt","getActiveUsersOfPeriodByDayBetweenDates","_ref13","getBusiestTimeWithinHoursPeriod","_ref14","groupSize","match","rangeProject","range","$range","session","unwind","groups","presentationProject","hour","getTotalOfSessionsByDayBetweenDates","_ref15","getTotalOfSessionByHourAndDayBetweenDates","_ref16","$ifNull","date","setDate","data","getUniqueUsersOfLastMonth","getUniqueUsersOfLastWeek","getUniqueDevicesOfLastMonth","getUniqueDevicesOfLastWeek","getUniqueOSOfLastMonth","getUniqueOSOfLastWeek","isValidData","Boolean","createOrUpdate","now","updateOne","$set","$setOnInsert","upsert","closeByInstanceIdAndSessionId","query","closeTime","update","updateActiveSessionsByDateAndInstanceIdAndIds","arguments","length","undefined","$in","updateMany","updateActiveSessionsByDate","_ref17","logoutByInstanceIdAndSessionIdAndUserId","logoutBySessionIdAndUserId","_ref18","projection","updateObj","logoutBy","logoutByloginTokenAndUserId","_ref19","createBatch","ops","forEach","doc","push","filter","bulkWrite","ordered","updateDailySessionById","record","updateAllSessionsByDateToComputed","_ref20","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/Sessions.ts"],"sourcesContent":["import type {\n\tISession,\n\tUserSessionAggregation,\n\tDeviceSessionAggregation,\n\tOSSessionAggregation,\n\tUserSessionAggregationResult,\n\tDeviceSessionAggregationResult,\n\tDeviceManagementSession,\n\tDeviceManagementPopulatedSession,\n\tOSSessionAggregationResult,\n\tIUser,\n\tRocketChatRecordDeleted,\n} from '@rocket.chat/core-typings';\nimport type { ISessionsModel } from '@rocket.chat/model-typings';\nimport { getCollectionName } from '@rocket.chat/models';\nimport type { PaginatedResult, WithItemCount } from '@rocket.chat/rest-typings';\nimport type {\n\tAggregationCursor,\n\tAnyBulkWriteOperation,\n\tBulkWriteResult,\n\tCollection,\n\tDocument,\n\tFindCursor,\n\tDb,\n\tFilter,\n\tIndexDescription,\n\tUpdateResult,\n\tOptionalId,\n} from 'mongodb';\n\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\ntype DestructuredDate = { year: number; month: number; day: number };\ntype DestructuredDateWithType = {\n\tyear: number;\n\tmonth: number;\n\tday: number;\n\ttype?: 'month' | 'week';\n};\ntype DestructuredRange = { start: DestructuredDate; end: DestructuredDate };\ntype DateRange = { start: Date; end: Date };\n\ntype CustomSortOp = 'loginAt' | 'device.name' | 'device.os.name';\ntype CustomSortOpAdmin = CustomSortOp | '_user.username' | '_user.name';\n\nconst matchBasedOnDate = (start: DestructuredDate, end: DestructuredDate): Filter<ISession> => {\n\tif (start.year === end.year && start.month === end.month) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\tmonth: start.month,\n\t\t\tday: { $gte: start.day, $lte: end.day },\n\t\t};\n\t}\n\n\tif (start.year === end.year) {\n\t\treturn {\n\t\t\tyear: start.year,\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\treturn {\n\t\t$and: [\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $gt: start.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: { $gt: start.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: start.year,\n\t\t\t\t\t\tmonth: start.month,\n\t\t\t\t\t\tday: { $gte: start.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: { $lt: end.year },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: { $lt: end.month },\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tyear: end.year,\n\t\t\t\t\t\tmonth: end.month,\n\t\t\t\t\t\tday: { $lte: end.day },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst getGroupSessionsByHour = (\n\t_id: { range: string; day: string; month: string; year: string } | string,\n): { listGroup: object; countGroup: object } => {\n\tconst isOpenSession = { $not: ['$session.closedAt'] };\n\tconst isAfterLoginAt = { $gte: ['$range', { $hour: '$session.loginAt' }] };\n\tconst isBeforeClosedAt = { $lte: ['$range', { $hour: '$session.closedAt' }] };\n\n\tconst listGroup = {\n\t\t$group: {\n\t\t\t_id,\n\t\t\tusersList: {\n\t\t\t\t$addToSet: {\n\t\t\t\t\t$cond: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$or: [{ $and: [isOpenSession, isAfterLoginAt] }, { $and: [isAfterLoginAt, isBeforeClosedAt] }],\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'$session.userId',\n\t\t\t\t\t\t'$$REMOVE',\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n\n\tconst countGroup = {\n\t\t$addFields: {\n\t\t\tusers: { $size: '$usersList' },\n\t\t},\n\t};\n\n\treturn { listGroup, countGroup };\n};\n\nconst getSortByFullDate = (): { year: number; month: number; day: number } => ({\n\tyear: -1,\n\tmonth: -1,\n\tday: -1,\n});\n\nconst getProjectionByFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$_id.day',\n\tmonth: '$_id.month',\n\tyear: '$_id.year',\n});\n\nconst getProjectionFullDate = (): { day: string; month: string; year: string } => ({\n\tday: '$day',\n\tmonth: '$month',\n\tyear: '$year',\n});\n\nexport const aggregates = {\n\tdailySessions(\n\t\tcollection: Collection<ISession>,\n\t\t{ start, end }: DestructuredRange,\n\t): AggregationCursor<\n\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\ttime: number;\n\t\t\tsessions: number;\n\t\t\tdevices: ISession['device'][];\n\t\t\t_computedAt: string;\n\t\t}\n\t> {\n\t\tconst pipeline = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tuserId: { $exists: true },\n\t\t\t\t\tlastActivityAt: { $exists: true },\n\t\t\t\t\tdevice: { $exists: true },\n\t\t\t\t\ttype: 'session',\n\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\tuserId: 1,\n\t\t\t\t\tdevice: 1,\n\t\t\t\t\tday: 1,\n\t\t\t\t\tmonth: 1,\n\t\t\t\t\tyear: 1,\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: { $trunc: { $divide: [{ $subtract: ['$lastActivityAt', '$loginAt'] }, 1000] } },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\ttime: { $gt: 0 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\tdevice: '$device',\n\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: 1 },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\ttime: -1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: {\n\t\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\ttime: { $sum: '$time' },\n\t\t\t\t\tsessions: { $sum: '$sessions' },\n\t\t\t\t\tdevices: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\tdevice: '$_id.device',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$sort: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: 0,\n\t\t\t\t\ttype: { $literal: 'user_daily' },\n\t\t\t\t\t_computedAt: { $literal: new Date() },\n\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\tuserId: '$_id.userId',\n\t\t\t\t\tmostImportantRole: 1,\n\t\t\t\t\ttime: 1,\n\t\t\t\t\tsessions: 1,\n\t\t\t\t\tdevices: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\treturn collection.aggregate<\n\t\t\tPick<ISession, 'mostImportantRole' | 'userId' | 'day' | 'year' | 'month' | 'type'> & {\n\t\t\t\ttime: number;\n\t\t\t\tsessions: number;\n\t\t\t\tdevices: ISession['device'][];\n\t\t\t\t_computedAt: string;\n\t\t\t}\n\t\t>(pipeline, { allowDiskUse: true });\n\t},\n\n\tasync getUniqueUsersOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\troles: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tasync getUniqueUsersOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<UserSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<UserSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmostImportantRole: { $first: '$mostImportantRole' },\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tmostImportantRole: '$mostImportantRole',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: 1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: 1,\n\t\t\t\t\t\t\troles: {\n\t\t\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t\t\trole: '$_id.mostImportantRole',\n\t\t\t\t\t\t\t\t\tcount: '$count',\n\t\t\t\t\t\t\t\t\tsessions: '$sessions',\n\t\t\t\t\t\t\t\t\ttime: '$time',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$count',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsessions: {\n\t\t\t\t\t\t\t\t$sum: '$sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\troles: 1,\n\t\t\t\t\t\t\tsessions: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetMatchOfLastMonthOrWeek({ year, month, day, type = 'month' }: DestructuredDateWithType): Filter<ISession> {\n\t\tlet startOfPeriod;\n\n\t\tif (type === 'month') {\n\t\t\tconst pastMonthLastDay = new Date(year, month - 1, 0).getDate();\n\t\t\tconst currMonthLastDay = new Date(year, month, 0).getDate();\n\n\t\t\tstartOfPeriod = new Date(year, month - 1, day);\n\t\t\tstartOfPeriod.setMonth(\n\t\t\t\tstartOfPeriod.getMonth() - 1,\n\t\t\t\t(currMonthLastDay === day ? pastMonthLastDay : Math.min(pastMonthLastDay, day)) + 1,\n\t\t\t);\n\t\t} else {\n\t\t\tstartOfPeriod = new Date(year, month - 1, day - 6);\n\t\t}\n\n\t\tconst startOfPeriodObject = {\n\t\t\tyear: startOfPeriod.getFullYear(),\n\t\t\tmonth: startOfPeriod.getMonth() + 1,\n\t\t\tday: startOfPeriod.getDate(),\n\t\t};\n\n\t\tif (year === startOfPeriodObject.year && month === startOfPeriodObject.month) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday: { $gte: startOfPeriodObject.day, $lte: day },\n\t\t\t};\n\t\t}\n\n\t\tif (year === startOfPeriodObject.year) {\n\t\t\treturn {\n\t\t\t\tyear,\n\t\t\t\t$and: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$or: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\t$and: [\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $gt: startOfPeriodObject.year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: { $gt: startOfPeriodObject.month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: startOfPeriodObject.year,\n\t\t\t\t\t\t\tmonth: startOfPeriodObject.month,\n\t\t\t\t\t\t\tday: { $gte: startOfPeriodObject.day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$or: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear: { $lt: year },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth: { $lt: month },\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tyear,\n\t\t\t\t\t\t\tmonth,\n\t\t\t\t\t\t\tday: { $lte: day },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t},\n\n\tasync getUniqueDevicesOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueDevicesOfYesterday(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day }: DestructuredDate,\n\t): Promise<DeviceSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<DeviceSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\ttype: '$devices.device.type',\n\t\t\t\t\t\t\tname: '$devices.device.name',\n\t\t\t\t\t\t\tversion: '$devices.device.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\ttype: '$_id.type',\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfLastMonthOrWeek(\n\t\tcollection: Collection<ISession>,\n\t\t{ year, month, day, type = 'month' }: DestructuredDateWithType,\n\t): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>(\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t$match: {\n\t\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...aggregates.getMatchOfLastMonthOrWeek({ year, month, day, type }),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$group: {\n\t\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$sort: {\n\t\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t$project: {\n\t\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\t{ allowDiskUse: true },\n\t\t\t)\n\t\t\t.toArray();\n\t},\n\n\tgetUniqueOSOfYesterday(collection: Collection<ISession>, { year, month, day }: DestructuredDate): Promise<OSSessionAggregation[]> {\n\t\treturn collection\n\t\t\t.aggregate<OSSessionAggregation>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\tyear,\n\t\t\t\t\t\tmonth,\n\t\t\t\t\t\tday,\n\t\t\t\t\t\t'type': 'user_daily',\n\t\t\t\t\t\t'devices.device.os.name': {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$unwind: '$devices',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\tname: '$devices.device.os.name',\n\t\t\t\t\t\t\tversion: '$devices.device.os.version',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t$sum: '$devices.sessions',\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttime: {\n\t\t\t\t\t\t\t$sum: '$devices.time',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\ttime: -1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\tname: '$_id.name',\n\t\t\t\t\t\tversion: '$_id.version',\n\t\t\t\t\t\tcount: 1,\n\t\t\t\t\t\ttime: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t},\n};\n\nexport class SessionsRaw extends BaseRaw<ISession> implements ISessionsModel {\n\tprivate secondaryCollection: Collection<ISession>;\n\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ISession>>) {\n\t\tsuper(db, 'sessions', trash);\n\n\t\tthis.secondaryCollection = db.collection(getCollectionName('sessions'), { readPreference: readSecondaryPreferred(db) });\n\t}\n\n\tasync aggregateSessionsByUserId({\n\t\tuid,\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tuid: string;\n\t\tsort?: Record<CustomSortOp, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tuserId: {\n\t\t\t\t\t\t\t$eq: uid,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, projectOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tasync aggregateSessionsAndPopulate({\n\t\tsort,\n\t\tsearch,\n\t\toffset = 0,\n\t\tcount = 10,\n\t}: {\n\t\tsort?: Record<CustomSortOpAdmin, 1 | -1>;\n\t\tsearch?: string | null;\n\t\toffset?: number;\n\t\tcount?: number;\n\t}): Promise<PaginatedResult<{ sessions: DeviceManagementPopulatedSession[] }>> {\n\t\tconst searchQuery = search ? [{ searchTerm: { $regex: search, $options: 'i' } }] : [];\n\n\t\tconst matchOperator = {\n\t\t\t$match: {\n\t\t\t\t$and: [\n\t\t\t\t\t...searchQuery,\n\t\t\t\t\t{\n\t\t\t\t\t\tloginToken: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsessionId: {\n\t\t\t\t\t\t\t$exists: true,\n\t\t\t\t\t\t\t$ne: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlogoutAt: {\n\t\t\t\t\t\t\t$exists: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst sortOperator = {\n\t\t\t$sort: {\n\t\t\t\tloginAt: -1,\n\t\t\t},\n\t\t};\n\t\tconst customSortOp = !sort ? [] : [{ $sort: sort }];\n\n\t\tconst groupOperator = {\n\t\t\t$group: {\n\t\t\t\t_id: '$loginToken',\n\t\t\t\tsessionId: {\n\t\t\t\t\t$first: '$sessionId',\n\t\t\t\t},\n\t\t\t\tuserId: {\n\t\t\t\t\t$first: '$userId',\n\t\t\t\t},\n\t\t\t\tdevice: {\n\t\t\t\t\t$first: '$device',\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\t$first: '$host',\n\t\t\t\t},\n\t\t\t\tip: {\n\t\t\t\t\t$first: '$ip',\n\t\t\t\t},\n\t\t\t\tloginAt: {\n\t\t\t\t\t$first: '$loginAt',\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tconst limitOperator = { $limit: count };\n\n\t\tconst skipOperator = offset >= 1 ? [{ $skip: offset }] : [];\n\n\t\tconst lookupOperator = {\n\t\t\t$lookup: {\n\t\t\t\tfrom: 'users',\n\t\t\t\tlocalField: 'userId',\n\t\t\t\tforeignField: '_id',\n\t\t\t\tas: '_user',\n\t\t\t},\n\t\t};\n\t\tconst unwindOperator = {\n\t\t\t$unwind: {\n\t\t\t\tpath: '$_user',\n\t\t\t\tpreserveNullAndEmptyArrays: true,\n\t\t\t},\n\t\t};\n\n\t\tconst projectOperator = {\n\t\t\t$project: {\n\t\t\t\t_id: '$sessionId',\n\t\t\t\tsessionId: 1,\n\t\t\t\tdevice: 1,\n\t\t\t\thost: 1,\n\t\t\t\tip: 1,\n\t\t\t\tloginAt: 1,\n\t\t\t\tuserId: 1,\n\t\t\t\t_user: {\n\t\t\t\t\tname: 1,\n\t\t\t\t\tusername: 1,\n\t\t\t\t\tavatarETag: 1,\n\t\t\t\t\tavatarOrigin: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst facetOperator = {\n\t\t\t$facet: {\n\t\t\t\tdocs: [sortOperator, ...skipOperator, limitOperator, lookupOperator, unwindOperator, projectOperator, ...customSortOp],\n\t\t\t\tcount: [\n\t\t\t\t\t{\n\t\t\t\t\t\t$count: 'total',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\n\t\tconst queryArray = [matchOperator, sortOperator, groupOperator, facetOperator];\n\n\t\tconst [\n\t\t\t{\n\t\t\t\tdocs: sessions,\n\t\t\t\tcount: [{ total } = { total: 0 }],\n\t\t\t},\n\t\t] = await this.col.aggregate<WithItemCount<{ docs: DeviceManagementPopulatedSession[] }>>(queryArray).toArray();\n\n\t\treturn { sessions, total, count, offset };\n\t}\n\n\tprotected modelIndexes(): IndexDescription[] {\n\t\treturn [\n\t\t\t{ key: { createdAt: -1 } },\n\t\t\t{ key: { loginAt: -1 } },\n\t\t\t{ key: { searchTerm: 1 }, partialFilterExpression: { searchTerm: { $exists: true } }, background: true },\n\t\t\t{ key: { ip: 1, loginAt: -1 } },\n\t\t\t{ key: { userId: 1, sessionId: 1 } },\n\t\t\t{ key: { type: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { sessionId: 1, instanceId: 1, year: 1, month: 1, day: 1 } },\n\t\t\t{ key: { _computedAt: 1 }, expireAfterSeconds: 60 * 60 * 24 * 45 },\n\t\t\t{\n\t\t\t\tkey: { 'loginToken': 1, 'logoutAt': 1, 'userId': 1, 'device.name': 1, 'device.os.name': 1, 'logintAt': -1 },\n\t\t\t\tpartialFilterExpression: { loginToken: { $exists: true } },\n\t\t\t\tbackground: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tasync getActiveUsersBetweenDates({ start, end }: DestructuredRange): Promise<ISession[]> {\n\t\treturn this.col\n\t\t\t.aggregate<ISession>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: '$userId',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync findLastLoginByIp(ip: string): Promise<ISession | null> {\n\t\treturn this.findOne(\n\t\t\t{\n\t\t\t\tip,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: { loginAt: -1 },\n\t\t\t\tlimit: 1,\n\t\t\t},\n\t\t);\n\t}\n\n\tfindOneBySessionId(sessionId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId });\n\t}\n\n\tfindOneBySessionIdAndUserId(sessionId: string, userId: string): Promise<ISession | null> {\n\t\treturn this.findOne({ sessionId, userId, loginToken: { $exists: true, $ne: '' } });\n\t}\n\n\tfindSessionsNotClosedByDateWithoutLastActivity({ year, month, day }: DestructuredDate): FindCursor<ISession> {\n\t\treturn this.find({\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\ttype: 'session',\n\t\t\tclosedAt: { $exists: false },\n\t\t\tlastActivityAt: { $exists: false },\n\t\t});\n\t}\n\n\tasync getActiveUsersOfPeriodByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusersList: IUser['_id'][];\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusersList: IUser['_id'][];\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionFullDate(),\n\t\t\t\t\t\t\tuserId: '$userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: {\n\t\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusersList: {\n\t\t\t\t\t\t\t$addToSet: '$_id.userId',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusersList: 1,\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getBusiestTimeWithinHoursPeriod({ start, end, groupSize }: DateRange & { groupSize: number }): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [0, 24, groupSize],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour('$range');\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id',\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionsByDayBetweenDates({ start, end }: DestructuredRange): Promise<\n\t\t{\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([\n\t\t\t\t{\n\t\t\t\t\t$match: {\n\t\t\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t\t\t\ttype: 'user_daily',\n\t\t\t\t\t\tmostImportantRole: { $ne: 'anonymous' },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$group: {\n\t\t\t\t\t\t_id: { ...getProjectionFullDate() },\n\t\t\t\t\t\tusers: { $sum: 1 },\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$project: {\n\t\t\t\t\t\t_id: 0,\n\t\t\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\t\t\tusers: 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$sort: {\n\t\t\t\t\t\t...getSortByFullDate(),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t])\n\t\t\t.toArray();\n\t}\n\n\tasync getTotalOfSessionByHourAndDayBetweenDates({ start, end }: DateRange): Promise<\n\t\t{\n\t\t\thour: number;\n\t\t\tday: number;\n\t\t\tmonth: number;\n\t\t\tyear: number;\n\t\t\tusers: number;\n\t\t}[]\n\t> {\n\t\tconst match = {\n\t\t\t$match: {\n\t\t\t\ttype: 'computed-session',\n\t\t\t\tloginAt: { $gte: start, $lte: end },\n\t\t\t},\n\t\t};\n\t\tconst rangeProject = {\n\t\t\t$project: {\n\t\t\t\trange: {\n\t\t\t\t\t$range: [{ $hour: '$loginAt' }, { $sum: [{ $ifNull: [{ $hour: '$closedAt' }, 23] }, 1] }],\n\t\t\t\t},\n\t\t\t\tsession: '$$ROOT',\n\t\t\t},\n\t\t};\n\t\tconst unwind = {\n\t\t\t$unwind: '$range',\n\t\t};\n\t\tconst groups = getGroupSessionsByHour({\n\t\t\trange: '$range',\n\t\t\tday: '$session.day',\n\t\t\tmonth: '$session.month',\n\t\t\tyear: '$session.year',\n\t\t});\n\t\tconst presentationProject = {\n\t\t\t$project: {\n\t\t\t\t_id: 0,\n\t\t\t\thour: '$_id.range',\n\t\t\t\t...getProjectionByFullDate(),\n\t\t\t\tusers: 1,\n\t\t\t},\n\t\t};\n\t\tconst sort = {\n\t\t\t$sort: {\n\t\t\t\t...getSortByFullDate(),\n\t\t\t\thour: -1,\n\t\t\t},\n\t\t};\n\n\t\treturn this.col\n\t\t\t.aggregate<{\n\t\t\t\thour: number;\n\t\t\t\tday: number;\n\t\t\t\tmonth: number;\n\t\t\t\tyear: number;\n\t\t\t\tusers: number;\n\t\t\t}>([match, rangeProject, unwind, groups.listGroup, groups.countGroup, presentationProject, sort])\n\t\t\t.toArray();\n\t}\n\n\tasync getUniqueUsersOfYesterday(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastMonth(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueUsersOfLastWeek(): Promise<UserSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueUsersOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfYesterday(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfYesterday(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastMonth(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueDevicesOfLastWeek(): Promise<DeviceSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueDevicesOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfYesterday(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfYesterday(this.secondaryCollection, { year, month, day }),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastMonth(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t}),\n\t\t};\n\t}\n\n\tasync getUniqueOSOfLastWeek(): Promise<OSSessionAggregationResult> {\n\t\tconst date = new Date();\n\t\tdate.setDate(date.getDate() - 1);\n\n\t\tconst year = date.getFullYear();\n\t\tconst month = date.getMonth() + 1;\n\t\tconst day = date.getDate();\n\n\t\treturn {\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tdata: await aggregates.getUniqueOSOfLastMonthOrWeek(this.secondaryCollection, {\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'week',\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate isValidData(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): boolean {\n\t\treturn Boolean(data.year && data.month && data.day && data.sessionId && data.instanceId);\n\t}\n\n\tasync createOrUpdate(data: Omit<ISession, '_id' | 'createdAt' | '_updatedAt'>): Promise<UpdateResult | undefined> {\n\t\t// TODO: check if we should create a session when there is no loginToken or not\n\t\tconst { year, month, day, sessionId, instanceId } = data;\n\n\t\tif (!this.isValidData(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst now = new Date();\n\n\t\treturn this.updateOne(\n\t\t\t{ instanceId, sessionId, year, month, day },\n\t\t\t{\n\t\t\t\t$set: data,\n\t\t\t\t$setOnInsert: {\n\t\t\t\t\tcreatedAt: now,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ upsert: true },\n\t\t);\n\t}\n\n\tasync closeByInstanceIdAndSessionId(instanceId: string, sessionId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst closeTime = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tclosedAt: closeTime,\n\t\t\t\tlastActivityAt: closeTime,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync updateActiveSessionsByDateAndInstanceIdAndIds(\n\t\t{ year, month, day }: Partial<DestructuredDate> = {},\n\t\tinstanceId: string,\n\t\tsessions: string[],\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tyear,\n\t\t\tmonth,\n\t\t\tday,\n\t\t\tsessionId: { $in: sessions },\n\t\t\tclosedAt: { $exists: false },\n\t\t};\n\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(query, update);\n\t}\n\n\tasync updateActiveSessionsByDate(\n\t\t{ year, month, day }: DestructuredDate,\n\t\tdata: Record<string, any> = {},\n\t): Promise<UpdateResult | Document> {\n\t\tconst update = {\n\t\t\t$set: data,\n\t\t};\n\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\tyear,\n\t\t\t\tmonth,\n\t\t\t\tday,\n\t\t\t\ttype: 'session',\n\t\t\t\tclosedAt: { $exists: false },\n\t\t\t\tlastActivityAt: { $exists: false },\n\t\t\t},\n\t\t\tupdate,\n\t\t);\n\t}\n\n\tasync logoutByInstanceIdAndSessionIdAndUserId(instanceId: string, sessionId: string, userId: string): Promise<UpdateResult> {\n\t\tconst query = {\n\t\t\tinstanceId,\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\n\t\tconst logoutAt = new Date();\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tasync logoutBySessionIdAndUserId({\n\t\tsessionId,\n\t\tuserId,\n\t}: {\n\t\tsessionId: ISession['sessionId'];\n\t\tuserId: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst query = {\n\t\t\tsessionId,\n\t\t\tuserId,\n\t\t\tlogoutAt: { $exists: false },\n\t\t};\n\t\tconst session = await this.findOne<Pick<ISession, 'loginToken'>>(query, { projection: { loginToken: 1 } });\n\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlastActivityAt: logoutAt,\n\t\t\t\tlogoutBy: userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken: session?.loginToken }, updateObj);\n\t}\n\n\tasync logoutByloginTokenAndUserId({\n\t\tloginToken,\n\t\tuserId,\n\t\tlogoutBy,\n\t}: {\n\t\tloginToken: ISession['loginToken'];\n\t\tuserId: IUser['_id'];\n\t\tlogoutBy?: IUser['_id'];\n\t}): Promise<UpdateResult | Document> {\n\t\tconst logoutAt = new Date();\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tlogoutAt,\n\t\t\t\tlogoutBy: logoutBy || userId,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateMany({ userId, loginToken }, updateObj);\n\t}\n\n\tasync createBatch(sessions: OptionalId<ISession>[]): Promise<BulkWriteResult | undefined> {\n\t\tif (!sessions || sessions.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ops: AnyBulkWriteOperation<ISession>[] = [];\n\t\tsessions.forEach((doc) => {\n\t\t\tconst { year, month, day, sessionId, instanceId } = doc;\n\t\t\tdelete doc._id;\n\t\t\tif (this.isValidData(doc)) {\n\t\t\t\tops.push({\n\t\t\t\t\tupdateOne: {\n\t\t\t\t\t\tfilter: { year, month, day, sessionId, instanceId },\n\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t$set: doc,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupsert: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn this.col.bulkWrite(ops, { ordered: false });\n\t}\n\n\tasync updateDailySessionById(_id: ISession['_id'], record: Partial<ISession>): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id }, { $set: record }, { upsert: true });\n\t}\n\n\tasync updateAllSessionsByDateToComputed({ start, end }: DestructuredRange): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{\n\t\t\t\ttype: 'session',\n\t\t\t\t...matchBasedOnDate(start, end),\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\ttype: 'computed-session',\n\t\t\t\t\t_computedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"782f233c49a6f459bd30d6b51c89c6ae62afdb12"}
