{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/settings.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"app/apps/server/bridges/settings.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/settings.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/settings.ts","sourceRoot":"","sources":["app/apps/server/bridges/settings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport { ServerSettingBridge } from '@rocket.chat/apps-engine/server/bridges/ServerSettingBridge';\nimport { Settings } from '@rocket.chat/models';\n\nimport { updateAuditedByApp } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChanged, notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\n\nexport class AppSettingBridge extends ServerSettingBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async getAll(appId: string): Promise<Array<ISetting>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting all the settings.`);\n\n\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\treturn settings.map((s) => this.orch.getConverters()?.get('settings').convertToApp(s));\n\t}\n\n\tprotected async getOneById(id: string, appId: string): Promise<ISetting> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the setting by id ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('settings').convertById(id);\n\t}\n\n\tprotected async hideGroup(name: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the group ${name}.`);\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async hideSetting(id: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async isReadableById(id: string, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is checking if they can read the setting ${id}.`);\n\t\tconst setting = await Settings.findOneById(id);\n\t\treturn Boolean(setting && !setting.secret);\n\t}\n\n\tprotected async updateOne(setting: ISetting & { id: string }, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the setting ${setting.id} .`);\n\n\t\tif (!(await this.isReadableById(setting.id, appId))) {\n\t\t\tthrow new Error(`The setting \"${setting.id}\" is not readable.`);\n\t\t}\n\n\t\tif (\n\t\t\t(\n\t\t\t\tawait updateAuditedByApp({\n\t\t\t\t\t_id: appId,\n\t\t\t\t})(Settings.updateValueById, setting.id, setting.value)\n\t\t\t).modifiedCount\n\t\t) {\n\t\t\tvoid notifyOnSettingChangedById(setting.id);\n\t\t}\n\t}\n\n\tprotected async incrementValue(id: string, value: number, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is incrementing the value of the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tconst { value: setting } = await Settings.incrementValueById(id, value, { returnDocument: 'after' });\n\t\tif (setting) {\n\t\t\tvoid notifyOnSettingChanged(setting);\n\t\t}\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/app/apps/server/bridges/settings.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"app/apps/server/bridges/settings.ts","inputSourceMap":{"version":3,"file":"app/apps/server/bridges/settings.ts","sourceRoot":"","sources":["app/apps/server/bridges/settings.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport { ServerSettingBridge } from '@rocket.chat/apps-engine/server/bridges/ServerSettingBridge';\nimport { Settings } from '@rocket.chat/models';\n\nimport { updateAuditedByApp } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChanged, notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\n\nexport class AppSettingBridge extends ServerSettingBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async getAll(appId: string): Promise<Array<ISetting>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting all the settings.`);\n\n\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\treturn settings.map((s) => this.orch.getConverters()?.get('settings').convertToApp(s));\n\t}\n\n\tprotected async getOneById(id: string, appId: string): Promise<ISetting> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the setting by id ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('settings').convertById(id);\n\t}\n\n\tprotected async hideGroup(name: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the group ${name}.`);\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async hideSetting(id: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async isReadableById(id: string, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is checking if they can read the setting ${id}.`);\n\t\tconst setting = await Settings.findOneById(id);\n\t\treturn Boolean(setting && !setting.secret);\n\t}\n\n\tprotected async updateOne(setting: ISetting & { id: string }, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the setting ${setting.id} .`);\n\n\t\tif (!(await this.isReadableById(setting.id, appId))) {\n\t\t\tthrow new Error(`The setting \"${setting.id}\" is not readable.`);\n\t\t}\n\n\t\tif (\n\t\t\t(\n\t\t\t\tawait updateAuditedByApp({\n\t\t\t\t\t_id: appId,\n\t\t\t\t})(Settings.updateValueById, setting.id, setting.value)\n\t\t\t).modifiedCount\n\t\t) {\n\t\t\tvoid notifyOnSettingChangedById(setting.id);\n\t\t}\n\t}\n\n\tprotected async incrementValue(id: string, value: number, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is incrementing the value of the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tconst { value: setting } = await Settings.incrementValueById(id, value, { returnDocument: 'after' });\n\t\tif (setting) {\n\t\t\tvoid notifyOnSettingChanged(setting);\n\t\t}\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      AppSettingBridge: () => AppSettingBridge\n    });\n    let ServerSettingBridge;\n    module.link(\"@rocket.chat/apps-engine/server/bridges/ServerSettingBridge\", {\n      ServerSettingBridge(v) {\n        ServerSettingBridge = v;\n      }\n    }, 0);\n    let Settings;\n    module.link(\"@rocket.chat/models\", {\n      Settings(v) {\n        Settings = v;\n      }\n    }, 1);\n    let updateAuditedByApp;\n    module.link(\"../../../../server/settings/lib/auditedSettingUpdates\", {\n      updateAuditedByApp(v) {\n        updateAuditedByApp = v;\n      }\n    }, 2);\n    let notifyOnSettingChanged, notifyOnSettingChangedById;\n    module.link(\"../../../lib/server/lib/notifyListener\", {\n      notifyOnSettingChanged(v) {\n        notifyOnSettingChanged = v;\n      },\n      notifyOnSettingChangedById(v) {\n        notifyOnSettingChangedById = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class AppSettingBridge extends ServerSettingBridge {\n      constructor(orch) {\n        super();\n        this.orch = void 0;\n        this.orch = orch;\n      }\n      async getAll(appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting all the settings.\"));\n        const settings = await Settings.find({\n          secret: false\n        }).toArray();\n        return settings.map(s => {\n          var _this$orch$getConvert;\n          return (_this$orch$getConvert = this.orch.getConverters()) === null || _this$orch$getConvert === void 0 ? void 0 : _this$orch$getConvert.get('settings').convertToApp(s);\n        });\n      }\n      async getOneById(id, appId) {\n        var _this$orch$getConvert2;\n        this.orch.debugLog(\"The App \".concat(appId, \" is getting the setting by id \").concat(id, \".\"));\n        if (!(await this.isReadableById(id, appId))) {\n          throw new Error(\"The setting \\\"\".concat(id, \"\\\" is not readable.\"));\n        }\n        return (_this$orch$getConvert2 = this.orch.getConverters()) === null || _this$orch$getConvert2 === void 0 ? void 0 : _this$orch$getConvert2.get('settings').convertById(id);\n      }\n      async hideGroup(name, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is hidding the group \").concat(name, \".\"));\n        throw new Error('Method not implemented.');\n      }\n      async hideSetting(id, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is hidding the setting \").concat(id, \".\"));\n        if (!(await this.isReadableById(id, appId))) {\n          throw new Error(\"The setting \\\"\".concat(id, \"\\\" is not readable.\"));\n        }\n        throw new Error('Method not implemented.');\n      }\n      async isReadableById(id, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is checking if they can read the setting \").concat(id, \".\"));\n        const setting = await Settings.findOneById(id);\n        return Boolean(setting && !setting.secret);\n      }\n      async updateOne(setting, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is updating the setting \").concat(setting.id, \" .\"));\n        if (!(await this.isReadableById(setting.id, appId))) {\n          throw new Error(\"The setting \\\"\".concat(setting.id, \"\\\" is not readable.\"));\n        }\n        if ((await updateAuditedByApp({\n          _id: appId\n        })(Settings.updateValueById, setting.id, setting.value)).modifiedCount) {\n          void notifyOnSettingChangedById(setting.id);\n        }\n      }\n      async incrementValue(id, value, appId) {\n        this.orch.debugLog(\"The App \".concat(appId, \" is incrementing the value of the setting \").concat(id, \".\"));\n        if (!(await this.isReadableById(id, appId))) {\n          throw new Error(\"The setting \\\"\".concat(id, \"\\\" is not readable.\"));\n        }\n        const {\n          value: setting\n        } = await Settings.incrementValueById(id, value, {\n          returnDocument: 'after'\n        });\n        if (setting) {\n          void notifyOnSettingChanged(setting);\n        }\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","AppSettingBridge","ServerSettingBridge","link","v","Settings","updateAuditedByApp","notifyOnSettingChanged","notifyOnSettingChangedById","__reifyWaitForDeps__","constructor","orch","getAll","appId","debugLog","concat","settings","find","secret","toArray","map","s","_this$orch$getConvert","getConverters","get","convertToApp","getOneById","id","_this$orch$getConvert2","isReadableById","Error","convertById","hideGroup","name","hideSetting","setting","findOneById","Boolean","updateOne","_id","updateValueById","value","modifiedCount","incrementValue","incrementValueById","returnDocument","__reify_async_result__","_reifyError","self","async"],"sources":["app/apps/server/bridges/settings.ts"],"sourcesContent":["import type { IAppServerOrchestrator } from '@rocket.chat/apps';\nimport type { ISetting } from '@rocket.chat/apps-engine/definition/settings';\nimport { ServerSettingBridge } from '@rocket.chat/apps-engine/server/bridges/ServerSettingBridge';\nimport { Settings } from '@rocket.chat/models';\n\nimport { updateAuditedByApp } from '../../../../server/settings/lib/auditedSettingUpdates';\nimport { notifyOnSettingChanged, notifyOnSettingChangedById } from '../../../lib/server/lib/notifyListener';\n\nexport class AppSettingBridge extends ServerSettingBridge {\n\tconstructor(private readonly orch: IAppServerOrchestrator) {\n\t\tsuper();\n\t}\n\n\tprotected async getAll(appId: string): Promise<Array<ISetting>> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting all the settings.`);\n\n\t\tconst settings = await Settings.find({ secret: false }).toArray();\n\t\treturn settings.map((s) => this.orch.getConverters()?.get('settings').convertToApp(s));\n\t}\n\n\tprotected async getOneById(id: string, appId: string): Promise<ISetting> {\n\t\tthis.orch.debugLog(`The App ${appId} is getting the setting by id ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\treturn this.orch.getConverters()?.get('settings').convertById(id);\n\t}\n\n\tprotected async hideGroup(name: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the group ${name}.`);\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async hideSetting(id: string, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is hidding the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected async isReadableById(id: string, appId: string): Promise<boolean> {\n\t\tthis.orch.debugLog(`The App ${appId} is checking if they can read the setting ${id}.`);\n\t\tconst setting = await Settings.findOneById(id);\n\t\treturn Boolean(setting && !setting.secret);\n\t}\n\n\tprotected async updateOne(setting: ISetting & { id: string }, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is updating the setting ${setting.id} .`);\n\n\t\tif (!(await this.isReadableById(setting.id, appId))) {\n\t\t\tthrow new Error(`The setting \"${setting.id}\" is not readable.`);\n\t\t}\n\n\t\tif (\n\t\t\t(\n\t\t\t\tawait updateAuditedByApp({\n\t\t\t\t\t_id: appId,\n\t\t\t\t})(Settings.updateValueById, setting.id, setting.value)\n\t\t\t).modifiedCount\n\t\t) {\n\t\t\tvoid notifyOnSettingChangedById(setting.id);\n\t\t}\n\t}\n\n\tprotected async incrementValue(id: string, value: number, appId: string): Promise<void> {\n\t\tthis.orch.debugLog(`The App ${appId} is incrementing the value of the setting ${id}.`);\n\n\t\tif (!(await this.isReadableById(id, appId))) {\n\t\t\tthrow new Error(`The setting \"${id}\" is not readable.`);\n\t\t}\n\n\t\tconst { value: setting } = await Settings.incrementValueById(id, value, { returnDocument: 'after' });\n\t\tif (setting) {\n\t\t\tvoid notifyOnSettingChanged(setting);\n\t\t}\n\t}\n}\n"],"mappings":";;;IAEAA,MAAA,CAAOC,MAAE;MAAAC,gBAAqB,EAAAA,CAAA,KAAMA;IAAA;IAAA,IAAAC,mBAAA;IAAAH,MAAA,CAAAI,IAAA,8DAA8D;MAAAD,oBAAAE,CAAA;QAAAF,mBAAA,GAAAE,CAAA;MAAA;IAAA;IAAA,IAAAC,QAAA;IAAAN,MAAA,CAAAI,IAAA;MAAAE,SAAAD,CAAA;QAAAC,QAAA,GAAAD,CAAA;MAAA;IAAA;IAAA,IAAAE,kBAAA;IAAAP,MAAA,CAAAI,IAAA;MAAAG,mBAAAF,CAAA;QAAAE,kBAAA,GAAAF,CAAA;MAAA;IAAA;IAAA,IAAAG,sBAAA,EAAAC,0BAAA;IAAAT,MAAA,CAAAI,IAAA;MAAAI,uBAAAH,CAAA;QAAAG,sBAAA,GAAAH,CAAA;MAAA;MAAAI,2BAAAJ,CAAA;QAAAI,0BAAA,GAAAJ,CAAA;MAAA;IAAA;IAAA,IAAAK,oBAAA,WAAAA,oBAAA;IAM5F,MAAOR,gBAAiB,SAAQC,mBAAmB;MACxDQ,YAA6BC,IAA4B;QACxD,KAAK,EAAE;QAAC,KADoBA,IAAA;QAAA,KAAAA,IAAI,GAAJA,IAAI;MAEjC;MAEU,MAAMC,MAAMA,CAACC,KAAa;QACnC,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,kCAA+B,CAAC;QAEnE,MAAMG,QAAQ,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAK,CAAE,CAAC,CAACC,OAAO,EAAE;QACjE,OAAOH,QAAQ,CAACI,GAAG,CAAEC,CAAC;UAAA,IAAAC,qBAAA;UAAA,QAAAA,qBAAA,GAAK,IAAI,CAACX,IAAI,CAACY,aAAa,EAAE,cAAAD,qBAAA,uBAAzBA,qBAAA,CAA2BE,GAAG,CAAC,UAAU,CAAC,CAACC,YAAY,CAACJ,CAAC,CAAC;QAAA,EAAC;MACvF;MAEU,MAAMK,UAAUA,CAACC,EAAU,EAAEd,KAAa;QAAA,IAAAe,sBAAA;QACnD,IAAI,CAACjB,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,oCAAAE,MAAA,CAAiCY,EAAE,MAAG,CAAC;QAE1E,IAAI,EAAE,MAAM,IAAI,CAACE,cAAc,CAACF,EAAE,EAAEd,KAAK,CAAC,CAAC,EAAE;UAC5C,MAAM,IAAIiB,KAAK,kBAAAf,MAAA,CAAiBY,EAAE,wBAAoB,CAAC;QACxD;QAEA,QAAAC,sBAAA,GAAO,IAAI,CAACjB,IAAI,CAACY,aAAa,EAAE,cAAAK,sBAAA,uBAAzBA,sBAAA,CAA2BJ,GAAG,CAAC,UAAU,CAAC,CAACO,WAAW,CAACJ,EAAE,CAAC;MAClE;MAEU,MAAMK,SAASA,CAACC,IAAY,EAAEpB,KAAa;QACpD,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,4BAAAE,MAAA,CAAyBkB,IAAI,MAAG,CAAC;QAEpE,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;MAC3C;MAEU,MAAMI,WAAWA,CAACP,EAAU,EAAEd,KAAa;QACpD,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,8BAAAE,MAAA,CAA2BY,EAAE,MAAG,CAAC;QAEpE,IAAI,EAAE,MAAM,IAAI,CAACE,cAAc,CAACF,EAAE,EAAEd,KAAK,CAAC,CAAC,EAAE;UAC5C,MAAM,IAAIiB,KAAK,kBAAAf,MAAA,CAAiBY,EAAE,wBAAoB,CAAC;QACxD;QAEA,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;MAC3C;MAEU,MAAMD,cAAcA,CAACF,EAAU,EAAEd,KAAa;QACvD,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,gDAAAE,MAAA,CAA6CY,EAAE,MAAG,CAAC;QACtF,MAAMQ,OAAO,GAAG,MAAM9B,QAAQ,CAAC+B,WAAW,CAACT,EAAE,CAAC;QAC9C,OAAOU,OAAO,CAACF,OAAO,IAAI,CAACA,OAAO,CAACjB,MAAM,CAAC;MAC3C;MAEU,MAAMoB,SAASA,CAACH,OAAkC,EAAEtB,KAAa;QAC1E,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,+BAAAE,MAAA,CAA4BoB,OAAO,CAACR,EAAE,OAAI,CAAC;QAE9E,IAAI,EAAE,MAAM,IAAI,CAACE,cAAc,CAACM,OAAO,CAACR,EAAE,EAAEd,KAAK,CAAC,CAAC,EAAE;UACpD,MAAM,IAAIiB,KAAK,kBAAAf,MAAA,CAAiBoB,OAAO,CAACR,EAAE,wBAAoB,CAAC;QAChE;QAEA,IACC,CACC,MAAMrB,kBAAkB,CAAC;UACxBiC,GAAG,EAAE1B;SACL,CAAC,CAACR,QAAQ,CAACmC,eAAe,EAAEL,OAAO,CAACR,EAAE,EAAEQ,OAAO,CAACM,KAAK,CAAC,EACtDC,aAAa,EACd;UACD,KAAKlC,0BAA0B,CAAC2B,OAAO,CAACR,EAAE,CAAC;QAC5C;MACD;MAEU,MAAMgB,cAAcA,CAAChB,EAAU,EAAEc,KAAa,EAAE5B,KAAa;QACtE,IAAI,CAACF,IAAI,CAACG,QAAQ,YAAAC,MAAA,CAAYF,KAAK,gDAAAE,MAAA,CAA6CY,EAAE,MAAG,CAAC;QAEtF,IAAI,EAAE,MAAM,IAAI,CAACE,cAAc,CAACF,EAAE,EAAEd,KAAK,CAAC,CAAC,EAAE;UAC5C,MAAM,IAAIiB,KAAK,kBAAAf,MAAA,CAAiBY,EAAE,wBAAoB,CAAC;QACxD;QAEA,MAAM;UAAEc,KAAK,EAAEN;QAAO,CAAE,GAAG,MAAM9B,QAAQ,CAACuC,kBAAkB,CAACjB,EAAE,EAAEc,KAAK,EAAE;UAAEI,cAAc,EAAE;QAAO,CAAE,CAAC;QACpG,IAAIV,OAAO,EAAE;UACZ,KAAK5B,sBAAsB,CAAC4B,OAAO,CAAC;QACrC;MACD;;IACAW,sBAAA;EAAA,SAAAC,WAAA;IAAA,OAAAD,sBAAA,CAAAC,WAAA;EAAA;EAAAD,sBAAA;AAAA;EAAAE,IAAA;EAAAC,KAAA;AAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"6ebbd5783db467383622580e19a7ac67f0789212"}
