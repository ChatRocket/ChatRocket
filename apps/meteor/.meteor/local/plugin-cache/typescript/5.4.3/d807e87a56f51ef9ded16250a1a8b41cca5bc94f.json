{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatInquiry.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.arm64"},"sourceFileName":"server/models/raw/LivechatInquiry.ts","filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatInquiry.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatInquiry.ts","sourceRoot":"","sources":["server/models/raw/LivechatInquiry.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatInquiryRecord,\n\tIMessage,\n\tRocketChatRecordDeleted,\n\tOmnichannelSortingMechanismSettingType,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { ILivechatInquiryModel } from '@rocket.chat/model-typings';\nimport type {\n\tCollection,\n\tDb,\n\tDocument,\n\tFindOptions,\n\tDistinctOptions,\n\tModifyResult,\n\tUpdateResult,\n\tFilter,\n\tDeleteResult,\n\tIndexDescription,\n\tFindCursor,\n\tUpdateFilter,\n\tDeleteOptions,\n} from 'mongodb';\n\nimport { getOmniChatSortQuery } from '../../../app/livechat/lib/inquiries';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatInquiryRaw extends BaseRaw<ILivechatInquiryRecord> implements ILivechatInquiryModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatInquiryRecord>>) {\n\t\tsuper(db, 'livechat_inquiry', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\trid: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tmessage: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'v.token': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tlocked: 1,\n\t\t\t\t\tlockedAt: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneQueuedByRoomId(rid: string): Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t};\n\t\treturn this.findOne(query) as unknown as Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null>;\n\t}\n\n\tfindOneByRoomId<T extends Document = ILivechatInquiryRecord>(\n\t\trid: string,\n\t\toptions?: FindOptions<T extends ILivechatInquiryRecord ? ILivechatInquiryRecord : T>,\n\t): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindIdsByVisitorToken(token: ILivechatInquiryRecord['v']['token']): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ 'v.token': token }, { projection: { _id: 1 } });\n\t}\n\n\tgetDistinctQueuedDepartments(options: DistinctOptions): Promise<(string | undefined)[]> {\n\t\treturn this.col.distinct('department', { status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync setDepartmentByInquiryId(inquiryId: string, department: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ _id: inquiryId }, { $set: { department } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync setLastMessageByRoomId(rid: ILivechatInquiryRecord['rid'], message: IMessage): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $set: { lastMessage: message } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync findNextAndLock(queueSortBy: OmnichannelSortingMechanismSettingType, department?: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst date = new Date();\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t...(department ? { department } : { department: { $exists: false } }),\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t$lte: new Date(date.getTime() - 5000),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: { $ne: true },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlocked: true,\n\t\t\t\t\t// apply 5 secs lock lifetime\n\t\t\t\t\tlockedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: getOmniChatSortQuery(queueSortBy),\n\t\t\t},\n\t\t);\n\n\t\treturn result.value;\n\t}\n\n\tasync unlock(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: inquiryId }, { $unset: { locked: 1, lockedAt: 1 } });\n\t}\n\n\tasync unlockAndQueue(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: inquiryId },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync unlockAll(): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ locked: { $exists: true } },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync getCurrentSortedQueueAsync({\n\t\tinquiryId,\n\t\tdepartment,\n\t\tqueueSortBy,\n\t}: {\n\t\tinquiryId?: string;\n\t\tdepartment?: string;\n\t\tqueueSortBy: OmnichannelSortingMechanismSettingType;\n\t}): Promise<(Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number })[]> {\n\t\tconst filter: Filter<ILivechatInquiryRecord>[] = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: 'queued',\n\t\t\t\t\t...(department && { department }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: getOmniChatSortQuery(queueSortBy) },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tinquiry: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\t\tname: '$name',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tstatus: '$status',\n\t\t\t\t\t\t\tdepartment: '$department',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$inquiry',\n\t\t\t\t\tincludeArrayIndex: 'position',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$inquiry._id',\n\t\t\t\t\trid: '$inquiry.rid',\n\t\t\t\t\tname: '$inquiry.name',\n\t\t\t\t\tts: '$inquiry.ts',\n\t\t\t\t\tstatus: '$inquiry.status',\n\t\t\t\t\tdepartment: '$inquiry.department',\n\t\t\t\t\tposition: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\t// To get the current room position in the queue, we need to apply the next $match after the $project\n\t\tif (inquiryId) {\n\t\t\tfilter.push({ $match: { _id: inquiryId } });\n\t\t}\n\n\t\treturn this.col\n\t\t\t.aggregate<Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number }>(filter, {\n\t\t\t\treadPreference: readSecondaryPreferred(),\n\t\t\t})\n\t\t\t.toArray();\n\t}\n\n\tsetSlaForRoom(_rid: string, _data: { estimatedWaitingTimeQueue: number; slaId: string }): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetSlaForRoom(_roomId: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tbulkUnsetSla(_roomIds: string[]): Promise<Document | UpdateResult> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tsetPriorityForRoom(_rid: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetPriorityForRoom(_rid: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tasync removeByRoomId(rid: string, options?: DeleteOptions): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ rid }, options);\n\t}\n\n\tgetQueuedInquiries(options?: FindOptions<ILivechatInquiryRecord>): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync takeInquiry(inquiryId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.TAKEN, takenAt: new Date() },\n\t\t\t\t$unset: { defaultAgent: 1, estimatedInactivityCloseTimeAt: 1, queuedAt: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\topenInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.OPEN },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync queueInquiry(inquiryId: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1 },\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\n\t\treturn result?.value;\n\t}\n\n\tqueueInquiryAndRemoveDefaultAgent(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1, defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\treadyInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: LivechatInquiryStatus.READY,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync changeDepartmentIdByRoomId(rid: string, department: string): Promise<void> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateOne(query, updateObj);\n\t}\n\n\tasync getStatus(inquiryId: string): Promise<ILivechatInquiryRecord['status'] | undefined> {\n\t\treturn (await this.findOne({ _id: inquiryId }))?.status;\n\t}\n\n\tupdateVisitorStatus(token: string, status: ILivechatInquiryRecord['v']['status']): Promise<UpdateResult> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\tconst update: UpdateFilter<ILivechatInquiryRecord> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDefaultAgentById(inquiryId: string, defaultAgent: ILivechatInquiryRecord['defaultAgent']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdefaultAgent,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetNameByRoomId(rid: string, name: string): Promise<UpdateResult> {\n\t\tconst query = { rid };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindOneByToken(token: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tremoveDefaultAgentById(inquiryId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeByVisitorToken(token: string): Promise<void> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tawait this.deleteMany(query);\n\t}\n\n\tasync markInquiryActiveForPeriod(rid: ILivechatInquiryRecord['rid'], period: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $addToSet: { 'v.activity': period } });\n\t\treturn updated?.value;\n\t}\n}\n"]},"targets":{"android":"125.0.0","chrome":"125.0.0","edge":"125.0.0","firefox":"115.0.0","ie":"10.0.0","ios":"17.4.0","opera":"110.0.0","opera_mobile":"80.0.0","safari":"17.4.0","samsung":"24.0.0"},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","root":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/guilhermegazzo/dev/Rocket.Chat/apps/meteor/server/models/raw/LivechatInquiry.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/models/raw/LivechatInquiry.ts","inputSourceMap":{"version":3,"file":"server/models/raw/LivechatInquiry.ts","sourceRoot":"","sources":["server/models/raw/LivechatInquiry.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tILivechatInquiryRecord,\n\tIMessage,\n\tRocketChatRecordDeleted,\n\tOmnichannelSortingMechanismSettingType,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { ILivechatInquiryModel } from '@rocket.chat/model-typings';\nimport type {\n\tCollection,\n\tDb,\n\tDocument,\n\tFindOptions,\n\tDistinctOptions,\n\tModifyResult,\n\tUpdateResult,\n\tFilter,\n\tDeleteResult,\n\tIndexDescription,\n\tFindCursor,\n\tUpdateFilter,\n\tDeleteOptions,\n} from 'mongodb';\n\nimport { getOmniChatSortQuery } from '../../../app/livechat/lib/inquiries';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatInquiryRaw extends BaseRaw<ILivechatInquiryRecord> implements ILivechatInquiryModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatInquiryRecord>>) {\n\t\tsuper(db, 'livechat_inquiry', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\trid: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tmessage: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'v.token': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tlocked: 1,\n\t\t\t\t\tlockedAt: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneQueuedByRoomId(rid: string): Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t};\n\t\treturn this.findOne(query) as unknown as Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null>;\n\t}\n\n\tfindOneByRoomId<T extends Document = ILivechatInquiryRecord>(\n\t\trid: string,\n\t\toptions?: FindOptions<T extends ILivechatInquiryRecord ? ILivechatInquiryRecord : T>,\n\t): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindIdsByVisitorToken(token: ILivechatInquiryRecord['v']['token']): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ 'v.token': token }, { projection: { _id: 1 } });\n\t}\n\n\tgetDistinctQueuedDepartments(options: DistinctOptions): Promise<(string | undefined)[]> {\n\t\treturn this.col.distinct('department', { status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync setDepartmentByInquiryId(inquiryId: string, department: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ _id: inquiryId }, { $set: { department } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync setLastMessageByRoomId(rid: ILivechatInquiryRecord['rid'], message: IMessage): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $set: { lastMessage: message } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync findNextAndLock(queueSortBy: OmnichannelSortingMechanismSettingType, department?: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst date = new Date();\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t...(department ? { department } : { department: { $exists: false } }),\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t$lte: new Date(date.getTime() - 5000),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: { $ne: true },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlocked: true,\n\t\t\t\t\t// apply 5 secs lock lifetime\n\t\t\t\t\tlockedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: getOmniChatSortQuery(queueSortBy),\n\t\t\t},\n\t\t);\n\n\t\treturn result.value;\n\t}\n\n\tasync unlock(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: inquiryId }, { $unset: { locked: 1, lockedAt: 1 } });\n\t}\n\n\tasync unlockAndQueue(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: inquiryId },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync unlockAll(): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ locked: { $exists: true } },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync getCurrentSortedQueueAsync({\n\t\tinquiryId,\n\t\tdepartment,\n\t\tqueueSortBy,\n\t}: {\n\t\tinquiryId?: string;\n\t\tdepartment?: string;\n\t\tqueueSortBy: OmnichannelSortingMechanismSettingType;\n\t}): Promise<(Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number })[]> {\n\t\tconst filter: Filter<ILivechatInquiryRecord>[] = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: 'queued',\n\t\t\t\t\t...(department && { department }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: getOmniChatSortQuery(queueSortBy) },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tinquiry: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\t\tname: '$name',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tstatus: '$status',\n\t\t\t\t\t\t\tdepartment: '$department',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$inquiry',\n\t\t\t\t\tincludeArrayIndex: 'position',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$inquiry._id',\n\t\t\t\t\trid: '$inquiry.rid',\n\t\t\t\t\tname: '$inquiry.name',\n\t\t\t\t\tts: '$inquiry.ts',\n\t\t\t\t\tstatus: '$inquiry.status',\n\t\t\t\t\tdepartment: '$inquiry.department',\n\t\t\t\t\tposition: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\t// To get the current room position in the queue, we need to apply the next $match after the $project\n\t\tif (inquiryId) {\n\t\t\tfilter.push({ $match: { _id: inquiryId } });\n\t\t}\n\n\t\treturn this.col\n\t\t\t.aggregate<Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number }>(filter, {\n\t\t\t\treadPreference: readSecondaryPreferred(),\n\t\t\t})\n\t\t\t.toArray();\n\t}\n\n\tsetSlaForRoom(_rid: string, _data: { estimatedWaitingTimeQueue: number; slaId: string }): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetSlaForRoom(_roomId: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tbulkUnsetSla(_roomIds: string[]): Promise<Document | UpdateResult> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tsetPriorityForRoom(_rid: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetPriorityForRoom(_rid: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tasync removeByRoomId(rid: string, options?: DeleteOptions): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ rid }, options);\n\t}\n\n\tgetQueuedInquiries(options?: FindOptions<ILivechatInquiryRecord>): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync takeInquiry(inquiryId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.TAKEN, takenAt: new Date() },\n\t\t\t\t$unset: { defaultAgent: 1, estimatedInactivityCloseTimeAt: 1, queuedAt: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\topenInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.OPEN },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync queueInquiry(inquiryId: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1 },\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\n\t\treturn result?.value;\n\t}\n\n\tqueueInquiryAndRemoveDefaultAgent(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1, defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\treadyInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: LivechatInquiryStatus.READY,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync changeDepartmentIdByRoomId(rid: string, department: string): Promise<void> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateOne(query, updateObj);\n\t}\n\n\tasync getStatus(inquiryId: string): Promise<ILivechatInquiryRecord['status'] | undefined> {\n\t\treturn (await this.findOne({ _id: inquiryId }))?.status;\n\t}\n\n\tupdateVisitorStatus(token: string, status: ILivechatInquiryRecord['v']['status']): Promise<UpdateResult> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\tconst update: UpdateFilter<ILivechatInquiryRecord> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDefaultAgentById(inquiryId: string, defaultAgent: ILivechatInquiryRecord['defaultAgent']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdefaultAgent,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetNameByRoomId(rid: string, name: string): Promise<UpdateResult> {\n\t\tconst query = { rid };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindOneByToken(token: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tremoveDefaultAgentById(inquiryId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeByVisitorToken(token: string): Promise<void> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tawait this.deleteMany(query);\n\t}\n\n\tasync markInquiryActiveForPeriod(rid: ILivechatInquiryRecord['rid'], period: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $addToSet: { 'v.activity': period } });\n\t\treturn updated?.value;\n\t}\n}\n"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    let _objectSpread;\n    module.link(\"@babel/runtime/helpers/objectSpread2\", {\n      default(v) {\n        _objectSpread = v;\n      }\n    }, 0);\n    module.export({\n      LivechatInquiryRaw: () => LivechatInquiryRaw\n    });\n    let LivechatInquiryStatus;\n    module.link(\"@rocket.chat/core-typings\", {\n      LivechatInquiryStatus(v) {\n        LivechatInquiryStatus = v;\n      }\n    }, 0);\n    let getOmniChatSortQuery;\n    module.link(\"../../../app/livechat/lib/inquiries\", {\n      getOmniChatSortQuery(v) {\n        getOmniChatSortQuery = v;\n      }\n    }, 1);\n    let readSecondaryPreferred;\n    module.link(\"../../database/readSecondaryPreferred\", {\n      readSecondaryPreferred(v) {\n        readSecondaryPreferred = v;\n      }\n    }, 2);\n    let BaseRaw;\n    module.link(\"./BaseRaw\", {\n      BaseRaw(v) {\n        BaseRaw = v;\n      }\n    }, 3);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class LivechatInquiryRaw extends BaseRaw {\n      constructor(db, trash) {\n        super(db, 'livechat_inquiry', trash);\n      }\n      modelIndexes() {\n        return [{\n          key: {\n            rid: 1\n          }\n        }, {\n          key: {\n            name: 1\n          }\n        }, {\n          key: {\n            message: 1\n          }\n        }, {\n          key: {\n            ts: 1\n          }\n        }, {\n          key: {\n            department: 1\n          }\n        }, {\n          key: {\n            status: 1\n          }\n        }, {\n          key: {\n            priorityId: 1,\n            priorityWeight: 1\n          },\n          sparse: true\n        }, {\n          key: {\n            priorityWeight: 1,\n            ts: 1\n          },\n          partialFilterExpression: {\n            status: {\n              $eq: LivechatInquiryStatus.QUEUED\n            }\n          }\n        }, {\n          key: {\n            estimatedWaitingTimeQueue: 1,\n            ts: 1\n          },\n          partialFilterExpression: {\n            status: {\n              $eq: LivechatInquiryStatus.QUEUED\n            }\n          }\n        }, {\n          key: {\n            'v.token': 1,\n            'status': 1\n          }\n        }, {\n          key: {\n            locked: 1,\n            lockedAt: 1\n          },\n          sparse: true\n        }];\n      }\n      findOneQueuedByRoomId(rid) {\n        const query = {\n          rid,\n          status: LivechatInquiryStatus.QUEUED\n        };\n        return this.findOne(query);\n      }\n      findOneByRoomId(rid, options) {\n        const query = {\n          rid\n        };\n        return this.findOne(query, options);\n      }\n      findIdsByVisitorToken(token) {\n        return this.find({\n          'v.token': token\n        }, {\n          projection: {\n            _id: 1\n          }\n        });\n      }\n      getDistinctQueuedDepartments(options) {\n        return this.col.distinct('department', {\n          status: LivechatInquiryStatus.QUEUED\n        }, options);\n      }\n      async setDepartmentByInquiryId(inquiryId, department) {\n        const updated = await this.findOneAndUpdate({\n          _id: inquiryId\n        }, {\n          $set: {\n            department\n          }\n        }, {\n          returnDocument: 'after'\n        });\n        return updated === null || updated === void 0 ? void 0 : updated.value;\n      }\n      async setLastMessageByRoomId(rid, message) {\n        const updated = await this.findOneAndUpdate({\n          rid\n        }, {\n          $set: {\n            lastMessage: message\n          }\n        }, {\n          returnDocument: 'after'\n        });\n        return updated === null || updated === void 0 ? void 0 : updated.value;\n      }\n      async findNextAndLock(queueSortBy, department) {\n        const date = new Date();\n        const result = await this.findOneAndUpdate(_objectSpread(_objectSpread({\n          status: LivechatInquiryStatus.QUEUED\n        }, department ? {\n          department\n        } : {\n          department: {\n            $exists: false\n          }\n        }), {}, {\n          $or: [{\n            locked: true,\n            lockedAt: {\n              $lte: new Date(date.getTime() - 5000)\n            }\n          }, {\n            locked: {\n              $ne: true\n            }\n          }]\n        }), {\n          $set: {\n            locked: true,\n            // apply 5 secs lock lifetime\n            lockedAt: new Date()\n          }\n        }, {\n          sort: getOmniChatSortQuery(queueSortBy)\n        });\n        return result.value;\n      }\n      async unlock(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $unset: {\n            locked: 1,\n            lockedAt: 1\n          }\n        });\n      }\n      async unlockAndQueue(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $unset: {\n            locked: 1,\n            lockedAt: 1\n          },\n          $set: {\n            status: LivechatInquiryStatus.QUEUED,\n            queuedAt: new Date()\n          }\n        });\n      }\n      async unlockAll() {\n        return this.updateMany({\n          locked: {\n            $exists: true\n          }\n        }, {\n          $unset: {\n            locked: 1,\n            lockedAt: 1\n          },\n          $set: {\n            status: LivechatInquiryStatus.QUEUED,\n            queuedAt: new Date()\n          }\n        });\n      }\n      async getCurrentSortedQueueAsync(_ref) {\n        let {\n          inquiryId,\n          department,\n          queueSortBy\n        } = _ref;\n        const filter = [{\n          $match: _objectSpread({\n            status: 'queued'\n          }, department && {\n            department\n          })\n        }, {\n          $sort: getOmniChatSortQuery(queueSortBy)\n        }, {\n          $group: {\n            _id: 1,\n            inquiry: {\n              $push: {\n                _id: '$_id',\n                rid: '$rid',\n                name: '$name',\n                ts: '$ts',\n                status: '$status',\n                department: '$department'\n              }\n            }\n          }\n        }, {\n          $unwind: {\n            path: '$inquiry',\n            includeArrayIndex: 'position'\n          }\n        }, {\n          $project: {\n            _id: '$inquiry._id',\n            rid: '$inquiry.rid',\n            name: '$inquiry.name',\n            ts: '$inquiry.ts',\n            status: '$inquiry.status',\n            department: '$inquiry.department',\n            position: 1\n          }\n        }];\n        // To get the current room position in the queue, we need to apply the next $match after the $project\n        if (inquiryId) {\n          filter.push({\n            $match: {\n              _id: inquiryId\n            }\n          });\n        }\n        return this.col.aggregate(filter, {\n          readPreference: readSecondaryPreferred()\n        }).toArray();\n      }\n      setSlaForRoom(_rid, _data) {\n        throw new Error('Method not implemented on the community edition.');\n      }\n      unsetSlaForRoom(_roomId) {\n        throw new Error('Method not implemented on the community edition.');\n      }\n      bulkUnsetSla(_roomIds) {\n        throw new Error('Method not implemented on the community edition.');\n      }\n      setPriorityForRoom(_rid, _priority) {\n        throw new Error('Method not implemented on the community edition.');\n      }\n      unsetPriorityForRoom(_rid) {\n        throw new Error('Method not implemented on the community edition.');\n      }\n      async removeByRoomId(rid, options) {\n        return this.deleteOne({\n          rid\n        }, options);\n      }\n      getQueuedInquiries(options) {\n        return this.find({\n          status: LivechatInquiryStatus.QUEUED\n        }, options);\n      }\n      async takeInquiry(inquiryId) {\n        await this.updateOne({\n          _id: inquiryId\n        }, {\n          $set: {\n            status: LivechatInquiryStatus.TAKEN,\n            takenAt: new Date()\n          },\n          $unset: {\n            defaultAgent: 1,\n            estimatedInactivityCloseTimeAt: 1,\n            queuedAt: 1\n          }\n        });\n      }\n      openInquiry(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $set: {\n            status: LivechatInquiryStatus.OPEN\n          }\n        });\n      }\n      async queueInquiry(inquiryId) {\n        const result = await this.findOneAndUpdate({\n          _id: inquiryId\n        }, {\n          $set: {\n            status: LivechatInquiryStatus.QUEUED,\n            queuedAt: new Date()\n          },\n          $unset: {\n            takenAt: 1\n          }\n        }, {\n          returnDocument: 'after'\n        });\n        return result === null || result === void 0 ? void 0 : result.value;\n      }\n      queueInquiryAndRemoveDefaultAgent(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $set: {\n            status: LivechatInquiryStatus.QUEUED,\n            queuedAt: new Date()\n          },\n          $unset: {\n            takenAt: 1,\n            defaultAgent: 1\n          }\n        });\n      }\n      readyInquiry(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $set: {\n            status: LivechatInquiryStatus.READY\n          }\n        });\n      }\n      async changeDepartmentIdByRoomId(rid, department) {\n        const query = {\n          rid\n        };\n        const updateObj = {\n          $set: {\n            department\n          }\n        };\n        await this.updateOne(query, updateObj);\n      }\n      async getStatus(inquiryId) {\n        var _await$this$findOne;\n        return (_await$this$findOne = await this.findOne({\n          _id: inquiryId\n        })) === null || _await$this$findOne === void 0 ? void 0 : _await$this$findOne.status;\n      }\n      updateVisitorStatus(token, status) {\n        const query = {\n          'v.token': token,\n          'status': LivechatInquiryStatus.QUEUED\n        };\n        const update = {\n          $set: {\n            'v.status': status\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      setDefaultAgentById(inquiryId, defaultAgent) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $set: {\n            defaultAgent\n          }\n        });\n      }\n      setNameByRoomId(rid, name) {\n        const query = {\n          rid\n        };\n        const update = {\n          $set: {\n            name\n          }\n        };\n        return this.updateOne(query, update);\n      }\n      findOneByToken(token) {\n        const query = {\n          'v.token': token,\n          'status': LivechatInquiryStatus.QUEUED\n        };\n        return this.findOne(query);\n      }\n      removeDefaultAgentById(inquiryId) {\n        return this.updateOne({\n          _id: inquiryId\n        }, {\n          $unset: {\n            defaultAgent: 1\n          }\n        });\n      }\n      async removeByVisitorToken(token) {\n        const query = {\n          'v.token': token\n        };\n        await this.deleteMany(query);\n      }\n      async markInquiryActiveForPeriod(rid, period) {\n        const updated = await this.findOneAndUpdate({\n          rid\n        }, {\n          $addToSet: {\n            'v.activity': period\n          }\n        });\n        return updated === null || updated === void 0 ? void 0 : updated.value;\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["_objectSpread","module","link","default","v","export","LivechatInquiryRaw","LivechatInquiryStatus","getOmniChatSortQuery","readSecondaryPreferred","BaseRaw","__reifyWaitForDeps__","constructor","db","trash","modelIndexes","key","rid","name","message","ts","department","status","priorityId","priorityWeight","sparse","partialFilterExpression","$eq","QUEUED","estimatedWaitingTimeQueue","locked","lockedAt","findOneQueuedByRoomId","query","findOne","findOneByRoomId","options","findIdsByVisitorToken","token","find","projection","_id","getDistinctQueuedDepartments","col","distinct","setDepartmentByInquiryId","inquiryId","updated","findOneAndUpdate","$set","returnDocument","value","setLastMessageByRoomId","lastMessage","findNextAndLock","queueSortBy","date","Date","result","$exists","$or","$lte","getTime","$ne","sort","unlock","updateOne","$unset","unlockAndQueue","queuedAt","unlockAll","updateMany","getCurrentSortedQueueAsync","_ref","filter","$match","$sort","$group","inquiry","$push","$unwind","path","includeArrayIndex","$project","position","push","aggregate","readPreference","toArray","setSlaForRoom","_rid","_data","Error","unsetSlaForRoom","_roomId","bulkUnsetSla","_roomIds","setPriorityForRoom","_priority","unsetPriorityForRoom","removeByRoomId","deleteOne","getQueuedInquiries","takeInquiry","TAKEN","takenAt","defaultAgent","estimatedInactivityCloseTimeAt","openInquiry","OPEN","queueInquiry","queueInquiryAndRemoveDefaultAgent","readyInquiry","READY","changeDepartmentIdByRoomId","updateObj","getStatus","_await$this$findOne","updateVisitorStatus","update","setDefaultAgentById","setNameByRoomId","findOneByToken","removeDefaultAgentById","removeByVisitorToken","deleteMany","markInquiryActiveForPeriod","period","$addToSet","__reify_async_result__","_reifyError","self","async"],"sources":["server/models/raw/LivechatInquiry.ts"],"sourcesContent":["import type {\n\tILivechatInquiryRecord,\n\tIMessage,\n\tRocketChatRecordDeleted,\n\tOmnichannelSortingMechanismSettingType,\n\tILivechatPriority,\n} from '@rocket.chat/core-typings';\nimport { LivechatInquiryStatus } from '@rocket.chat/core-typings';\nimport type { ILivechatInquiryModel } from '@rocket.chat/model-typings';\nimport type {\n\tCollection,\n\tDb,\n\tDocument,\n\tFindOptions,\n\tDistinctOptions,\n\tModifyResult,\n\tUpdateResult,\n\tFilter,\n\tDeleteResult,\n\tIndexDescription,\n\tFindCursor,\n\tUpdateFilter,\n\tDeleteOptions,\n} from 'mongodb';\n\nimport { getOmniChatSortQuery } from '../../../app/livechat/lib/inquiries';\nimport { readSecondaryPreferred } from '../../database/readSecondaryPreferred';\nimport { BaseRaw } from './BaseRaw';\n\nexport class LivechatInquiryRaw extends BaseRaw<ILivechatInquiryRecord> implements ILivechatInquiryModel {\n\tconstructor(db: Db, trash?: Collection<RocketChatRecordDeleted<ILivechatInquiryRecord>>) {\n\t\tsuper(db, 'livechat_inquiry', trash);\n\t}\n\n\tprotected modelIndexes(): Array<IndexDescription> {\n\t\treturn [\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\trid: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tname: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tmessage: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tdepartment: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tstatus: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityId: 1,\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tpriorityWeight: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\testimatedWaitingTimeQueue: 1,\n\t\t\t\t\tts: 1,\n\t\t\t\t},\n\t\t\t\tpartialFilterExpression: {\n\t\t\t\t\tstatus: { $eq: LivechatInquiryStatus.QUEUED },\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\t'v.token': 1,\n\t\t\t\t\t'status': 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: {\n\t\t\t\t\tlocked: 1,\n\t\t\t\t\tlockedAt: 1,\n\t\t\t\t},\n\t\t\t\tsparse: true,\n\t\t\t},\n\t\t];\n\t}\n\n\tfindOneQueuedByRoomId(rid: string): Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t};\n\t\treturn this.findOne(query) as unknown as Promise<(ILivechatInquiryRecord & { status: LivechatInquiryStatus.QUEUED }) | null>;\n\t}\n\n\tfindOneByRoomId<T extends Document = ILivechatInquiryRecord>(\n\t\trid: string,\n\t\toptions?: FindOptions<T extends ILivechatInquiryRecord ? ILivechatInquiryRecord : T>,\n\t): Promise<T | null> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\treturn this.findOne(query, options);\n\t}\n\n\tfindIdsByVisitorToken(token: ILivechatInquiryRecord['v']['token']): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ 'v.token': token }, { projection: { _id: 1 } });\n\t}\n\n\tgetDistinctQueuedDepartments(options: DistinctOptions): Promise<(string | undefined)[]> {\n\t\treturn this.col.distinct('department', { status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync setDepartmentByInquiryId(inquiryId: string, department: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ _id: inquiryId }, { $set: { department } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync setLastMessageByRoomId(rid: ILivechatInquiryRecord['rid'], message: IMessage): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $set: { lastMessage: message } }, { returnDocument: 'after' });\n\t\treturn updated?.value;\n\t}\n\n\tasync findNextAndLock(queueSortBy: OmnichannelSortingMechanismSettingType, department?: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst date = new Date();\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\tstatus: LivechatInquiryStatus.QUEUED,\n\t\t\t\t...(department ? { department } : { department: { $exists: false } }),\n\t\t\t\t$or: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: true,\n\t\t\t\t\t\tlockedAt: {\n\t\t\t\t\t\t\t$lte: new Date(date.getTime() - 5000),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlocked: { $ne: true },\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tlocked: true,\n\t\t\t\t\t// apply 5 secs lock lifetime\n\t\t\t\t\tlockedAt: new Date(),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tsort: getOmniChatSortQuery(queueSortBy),\n\t\t\t},\n\t\t);\n\n\t\treturn result.value;\n\t}\n\n\tasync unlock(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne({ _id: inquiryId }, { $unset: { locked: 1, lockedAt: 1 } });\n\t}\n\n\tasync unlockAndQueue(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{ _id: inquiryId },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync unlockAll(): Promise<UpdateResult | Document> {\n\t\treturn this.updateMany(\n\t\t\t{ locked: { $exists: true } },\n\t\t\t{ $unset: { locked: 1, lockedAt: 1 }, $set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() } },\n\t\t);\n\t}\n\n\tasync getCurrentSortedQueueAsync({\n\t\tinquiryId,\n\t\tdepartment,\n\t\tqueueSortBy,\n\t}: {\n\t\tinquiryId?: string;\n\t\tdepartment?: string;\n\t\tqueueSortBy: OmnichannelSortingMechanismSettingType;\n\t}): Promise<(Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number })[]> {\n\t\tconst filter: Filter<ILivechatInquiryRecord>[] = [\n\t\t\t{\n\t\t\t\t$match: {\n\t\t\t\t\tstatus: 'queued',\n\t\t\t\t\t...(department && { department }),\n\t\t\t\t},\n\t\t\t},\n\t\t\t{ $sort: getOmniChatSortQuery(queueSortBy) },\n\t\t\t{\n\t\t\t\t$group: {\n\t\t\t\t\t_id: 1,\n\t\t\t\t\tinquiry: {\n\t\t\t\t\t\t$push: {\n\t\t\t\t\t\t\t_id: '$_id',\n\t\t\t\t\t\t\trid: '$rid',\n\t\t\t\t\t\t\tname: '$name',\n\t\t\t\t\t\t\tts: '$ts',\n\t\t\t\t\t\t\tstatus: '$status',\n\t\t\t\t\t\t\tdepartment: '$department',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unwind: {\n\t\t\t\t\tpath: '$inquiry',\n\t\t\t\t\tincludeArrayIndex: 'position',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\t$project: {\n\t\t\t\t\t_id: '$inquiry._id',\n\t\t\t\t\trid: '$inquiry.rid',\n\t\t\t\t\tname: '$inquiry.name',\n\t\t\t\t\tts: '$inquiry.ts',\n\t\t\t\t\tstatus: '$inquiry.status',\n\t\t\t\t\tdepartment: '$inquiry.department',\n\t\t\t\t\tposition: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\n\t\t// To get the current room position in the queue, we need to apply the next $match after the $project\n\t\tif (inquiryId) {\n\t\t\tfilter.push({ $match: { _id: inquiryId } });\n\t\t}\n\n\t\treturn this.col\n\t\t\t.aggregate<Pick<ILivechatInquiryRecord, '_id' | 'rid' | 'name' | 'ts' | 'status' | 'department'> & { position: number }>(filter, {\n\t\t\t\treadPreference: readSecondaryPreferred(),\n\t\t\t})\n\t\t\t.toArray();\n\t}\n\n\tsetSlaForRoom(_rid: string, _data: { estimatedWaitingTimeQueue: number; slaId: string }): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetSlaForRoom(_roomId: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tbulkUnsetSla(_roomIds: string[]): Promise<Document | UpdateResult> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tsetPriorityForRoom(_rid: string, _priority: Pick<ILivechatPriority, '_id' | 'sortItem'>): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tunsetPriorityForRoom(_rid: string): Promise<ModifyResult<ILivechatInquiryRecord>> {\n\t\tthrow new Error('Method not implemented on the community edition.');\n\t}\n\n\tasync removeByRoomId(rid: string, options?: DeleteOptions): Promise<DeleteResult> {\n\t\treturn this.deleteOne({ rid }, options);\n\t}\n\n\tgetQueuedInquiries(options?: FindOptions<ILivechatInquiryRecord>): FindCursor<ILivechatInquiryRecord> {\n\t\treturn this.find({ status: LivechatInquiryStatus.QUEUED }, options);\n\t}\n\n\tasync takeInquiry(inquiryId: string): Promise<void> {\n\t\tawait this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.TAKEN, takenAt: new Date() },\n\t\t\t\t$unset: { defaultAgent: 1, estimatedInactivityCloseTimeAt: 1, queuedAt: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\topenInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.OPEN },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync queueInquiry(inquiryId: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst result = await this.findOneAndUpdate(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1 },\n\t\t\t},\n\t\t\t{ returnDocument: 'after' },\n\t\t);\n\n\t\treturn result?.value;\n\t}\n\n\tqueueInquiryAndRemoveDefaultAgent(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: { status: LivechatInquiryStatus.QUEUED, queuedAt: new Date() },\n\t\t\t\t$unset: { takenAt: 1, defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\treadyInquiry(inquiryId: string): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tstatus: LivechatInquiryStatus.READY,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tasync changeDepartmentIdByRoomId(rid: string, department: string): Promise<void> {\n\t\tconst query = {\n\t\t\trid,\n\t\t};\n\t\tconst updateObj = {\n\t\t\t$set: {\n\t\t\t\tdepartment,\n\t\t\t},\n\t\t};\n\n\t\tawait this.updateOne(query, updateObj);\n\t}\n\n\tasync getStatus(inquiryId: string): Promise<ILivechatInquiryRecord['status'] | undefined> {\n\t\treturn (await this.findOne({ _id: inquiryId }))?.status;\n\t}\n\n\tupdateVisitorStatus(token: string, status: ILivechatInquiryRecord['v']['status']): Promise<UpdateResult> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\tconst update: UpdateFilter<ILivechatInquiryRecord> = {\n\t\t\t$set: {\n\t\t\t\t'v.status': status,\n\t\t\t},\n\t\t};\n\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tsetDefaultAgentById(inquiryId: string, defaultAgent: ILivechatInquiryRecord['defaultAgent']): Promise<UpdateResult> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$set: {\n\t\t\t\t\tdefaultAgent,\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t}\n\n\tsetNameByRoomId(rid: string, name: string): Promise<UpdateResult> {\n\t\tconst query = { rid };\n\n\t\tconst update = {\n\t\t\t$set: {\n\t\t\t\tname,\n\t\t\t},\n\t\t};\n\t\treturn this.updateOne(query, update);\n\t}\n\n\tfindOneByToken(token: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst query: Filter<ILivechatInquiryRecord> = {\n\t\t\t'v.token': token,\n\t\t\t'status': LivechatInquiryStatus.QUEUED,\n\t\t};\n\n\t\treturn this.findOne(query);\n\t}\n\n\tremoveDefaultAgentById(inquiryId: string): Promise<UpdateResult | Document> {\n\t\treturn this.updateOne(\n\t\t\t{\n\t\t\t\t_id: inquiryId,\n\t\t\t},\n\t\t\t{\n\t\t\t\t$unset: { defaultAgent: 1 },\n\t\t\t},\n\t\t);\n\t}\n\n\tasync removeByVisitorToken(token: string): Promise<void> {\n\t\tconst query = {\n\t\t\t'v.token': token,\n\t\t};\n\n\t\tawait this.deleteMany(query);\n\t}\n\n\tasync markInquiryActiveForPeriod(rid: ILivechatInquiryRecord['rid'], period: string): Promise<ILivechatInquiryRecord | null> {\n\t\tconst updated = await this.findOneAndUpdate({ rid }, { $addToSet: { 'v.activity': period } });\n\t\treturn updated?.value;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"d807e87a56f51ef9ded16250a1a8b41cca5bc94f"}
